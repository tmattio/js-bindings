[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
module Internal =
  struct
    module AnonymousInterfaces = struct  end
    module Types =
      struct
        open AnonymousInterfaces
        type _UUID = [ `UUID ] intf
        let rec _UUID_of_js : Ojs.t -> _UUID = Obj.magic
        and _UUID_to_js : _UUID -> Ojs.t = Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module UUID =
  struct
    type t = _UUID
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> _UUID_of_js x2
    and t_to_js : t -> Ojs.t = fun (x1 : _UUID) -> _UUID_to_js x1
    let (asHex : t -> string) =
      fun (x3 : t) -> Ojs.string_of_js (Ojs.call (t_to_js x3) "asHex" [||])
    let (equals : t -> other:t -> bool) =
      fun (x5 : t) ->
        fun ~other:(x4 : t) ->
          Ojs.bool_of_js (Ojs.call (t_to_js x5) "equals" [|(t_to_js x4)|])
  end
let (empty : _UUID) = _UUID_of_js (Ojs.get_prop_ascii Ojs.global "empty")
let (v4 : unit -> _UUID) =
  fun () -> _UUID_of_js (Ojs.call Ojs.global "v4" [||])
let (isUUID : value:string -> bool) =
  fun ~value:(x6 : string) ->
    Ojs.bool_of_js (Ojs.call Ojs.global "isUUID" [|(Ojs.string_to_js x6)|])
let (parse : value:string -> _UUID) =
  fun ~value:(x7 : string) ->
    _UUID_of_js (Ojs.call Ojs.global "parse" [|(Ojs.string_to_js x7)|])
let (generateUuid : unit -> string) =
  fun () -> Ojs.string_of_js (Ojs.call Ojs.global "generateUuid" [||])
