[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
module Internal =
  struct
    module AnonymousInterfaces = struct  end
    module Types =
      struct
        open AnonymousInterfaces
        type _DiagnosticCode = [ `DiagnosticCode ] intf
        and _ProtocolDiagnostic = [ `ProtocolDiagnostic ] intf
        let rec _DiagnosticCode_of_js : Ojs.t -> _DiagnosticCode = Obj.magic
        and _DiagnosticCode_to_js : _DiagnosticCode -> Ojs.t = Obj.magic
        and _ProtocolDiagnostic_of_js : Ojs.t -> _ProtocolDiagnostic =
          Obj.magic
        and _ProtocolDiagnostic_to_js : _ProtocolDiagnostic -> Ojs.t =
          Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module DiagnosticCode =
  struct
    type t = _DiagnosticCode
    let rec t_of_js : Ojs.t -> t =
      fun (x2 : Ojs.t) -> _DiagnosticCode_of_js x2
    and t_to_js : t -> Ojs.t =
      fun (x1 : _DiagnosticCode) -> _DiagnosticCode_to_js x1
    let (get_value : t -> string or_number) =
      fun (x3 : t) ->
        or_number_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x3) "value")
    let (set_value : t -> string or_number -> unit) =
      fun (x5 : t) ->
        fun (x6 : string or_number) ->
          Ojs.set_prop_ascii (t_to_js x5) "value"
            (or_number_to_js Ojs.string_to_js x6)
    let (get_target : t -> string) =
      fun (x8 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x8) "target")
    let (set_target : t -> string -> unit) =
      fun (x9 : t) ->
        fun (x10 : string) ->
          Ojs.set_prop_ascii (t_to_js x9) "target" (Ojs.string_to_js x10)
  end
module DiagnosticCode =
  struct
    let (is :
      value:_DiagnosticCode or_string or_number or_null_or_undefined -> bool)
      =
      fun
        ~value:(x11 :
                 _DiagnosticCode or_string or_number or_null_or_undefined)
        ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "DiagnosticCode") "is"
             [|(or_null_or_undefined_to_js
                  (fun (x12 : _DiagnosticCode or_string or_number) ->
                     or_number_to_js
                       (fun (x13 : _DiagnosticCode or_string) ->
                          or_string_to_js _DiagnosticCode_to_js x13) x12) x11)|])
  end
module ProtocolDiagnostic =
  struct
    type t = _ProtocolDiagnostic
    let rec t_of_js : Ojs.t -> t =
      fun (x16 : Ojs.t) -> _ProtocolDiagnostic_of_js x16
    and t_to_js : t -> Ojs.t =
      fun (x15 : _ProtocolDiagnostic) -> _ProtocolDiagnostic_to_js x15
    let (get_data : t -> unknown or_undefined) =
      fun (x17 : t) ->
        or_undefined_of_js unknown_of_js
          (Ojs.get_prop_ascii (t_to_js x17) "data")
    let (get_hasDiagnosticCode : t -> bool) =
      fun (x19 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x19) "hasDiagnosticCode")
    let (set_hasDiagnosticCode : t -> bool -> unit) =
      fun (x20 : t) ->
        fun (x21 : bool) ->
          Ojs.set_prop_ascii (t_to_js x20) "hasDiagnosticCode"
            (Ojs.bool_to_js x21)
    let (create :
      range:Vscode.Range.t ->
        message:string ->
          severity:Vscode.DiagnosticSeverity.t ->
            data:unknown or_undefined -> t)
      =
      fun ~range:(x22 : Vscode.Range.t) ->
        fun ~message:(x23 : string) ->
          fun ~severity:(x24 : Vscode.DiagnosticSeverity.t) ->
            fun ~data:(x25 : unknown or_undefined) ->
              t_of_js
                (Ojs.new_obj
                   (Ojs.get_prop_ascii Ojs.global "ProtocolDiagnostic")
                   [|(Vscode.Range.t_to_js x22);(Ojs.string_to_js x23);(
                     Vscode.DiagnosticSeverity.t_to_js x24);(or_undefined_to_js
                                                               unknown_to_js
                                                               x25)|])
    let (cast : t -> Vscode.Diagnostic.t) =
      fun (x27 : t) -> Vscode.Diagnostic.t_of_js (t_to_js x27)
  end
