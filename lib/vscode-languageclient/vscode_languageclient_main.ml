[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_run : t -> Executable.t) =
      fun (x3 : t) ->
        Executable.t_of_js (Ojs.get_prop_ascii (t_to_js x3) "run")
    let (set_run : t -> Executable.t -> unit) =
      fun (x4 : t) ->
        fun (x5 : Executable.t) ->
          Ojs.set_prop_ascii (t_to_js x4) "run" (Executable.t_to_js x5)
    let (get_debug : t -> Executable.t) =
      fun (x6 : t) ->
        Executable.t_of_js (Ojs.get_prop_ascii (t_to_js x6) "debug")
    let (set_debug : t -> Executable.t -> unit) =
      fun (x7 : t) ->
        fun (x8 : Executable.t) ->
          Ojs.set_prop_ascii (t_to_js x7) "debug" (Executable.t_to_js x8)
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10 : Ojs.t) -> x10
    and t_to_js : t -> Ojs.t = fun (x9 : Ojs.t) -> x9
    let (get_run : t -> NodeModule.t) =
      fun (x11 : t) ->
        NodeModule.t_of_js (Ojs.get_prop_ascii (t_to_js x11) "run")
    let (set_run : t -> NodeModule.t -> unit) =
      fun (x12 : t) ->
        fun (x13 : NodeModule.t) ->
          Ojs.set_prop_ascii (t_to_js x12) "run" (NodeModule.t_to_js x13)
    let (get_debug : t -> NodeModule.t) =
      fun (x14 : t) ->
        NodeModule.t_of_js (Ojs.get_prop_ascii (t_to_js x14) "debug")
    let (set_debug : t -> NodeModule.t -> unit) =
      fun (x15 : t) ->
        fun (x16 : NodeModule.t) ->
          Ojs.set_prop_ascii (t_to_js x15) "debug" (NodeModule.t_to_js x16)
  end
module ExecutableOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x18 : Ojs.t) -> x18
    and t_to_js : t -> Ojs.t = fun (x17 : Ojs.t) -> x17
    let (get_cwd : t -> string) =
      fun (x19 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x19) "cwd")
    let (set_cwd : t -> string -> unit) =
      fun (x20 : t) ->
        fun (x21 : string) ->
          Ojs.set_prop_ascii (t_to_js x20) "cwd" (Ojs.string_to_js x21)
    let (get_env : t -> any) =
      fun (x22 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x22) "env")
    let (set_env : t -> any -> unit) =
      fun (x23 : t) ->
        fun (x24 : any) ->
          Ojs.set_prop_ascii (t_to_js x23) "env" (any_to_js x24)
    let (get_detached : t -> bool) =
      fun (x25 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x25) "detached")
    let (set_detached : t -> bool -> unit) =
      fun (x26 : t) ->
        fun (x27 : bool) ->
          Ojs.set_prop_ascii (t_to_js x26) "detached" (Ojs.bool_to_js x27)
    let (get_shell : t -> bool) =
      fun (x28 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x28) "shell")
    let (set_shell : t -> bool -> unit) =
      fun (x29 : t) ->
        fun (x30 : bool) ->
          Ojs.set_prop_ascii (t_to_js x29) "shell" (Ojs.bool_to_js x30)
  end
module Executable =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x32 : Ojs.t) -> x32
    and t_to_js : t -> Ojs.t = fun (x31 : Ojs.t) -> x31
    let (get_command : t -> string) =
      fun (x33 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x33) "command")
    let (set_command : t -> string -> unit) =
      fun (x34 : t) ->
        fun (x35 : string) ->
          Ojs.set_prop_ascii (t_to_js x34) "command" (Ojs.string_to_js x35)
    let (get_args : t -> string list) =
      fun (x36 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x36) "args")
    let (set_args : t -> string list -> unit) =
      fun (x38 : t) ->
        fun (x39 : string list) ->
          Ojs.set_prop_ascii (t_to_js x38) "args"
            (Ojs.list_to_js Ojs.string_to_js x39)
    let (get_options : t -> ExecutableOptions.t) =
      fun (x41 : t) ->
        ExecutableOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x41) "options")
    let (set_options : t -> ExecutableOptions.t -> unit) =
      fun (x42 : t) ->
        fun (x43 : ExecutableOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x42) "options"
            (ExecutableOptions.t_to_js x43)
  end
module ForkOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x45 : Ojs.t) -> x45
    and t_to_js : t -> Ojs.t = fun (x44 : Ojs.t) -> x44
    let (get_cwd : t -> string) =
      fun (x46 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x46) "cwd")
    let (set_cwd : t -> string -> unit) =
      fun (x47 : t) ->
        fun (x48 : string) ->
          Ojs.set_prop_ascii (t_to_js x47) "cwd" (Ojs.string_to_js x48)
    let (get_env : t -> any) =
      fun (x49 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x49) "env")
    let (set_env : t -> any -> unit) =
      fun (x50 : t) ->
        fun (x51 : any) ->
          Ojs.set_prop_ascii (t_to_js x50) "env" (any_to_js x51)
    let (get_encoding : t -> string) =
      fun (x52 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x52) "encoding")
    let (set_encoding : t -> string -> unit) =
      fun (x53 : t) ->
        fun (x54 : string) ->
          Ojs.set_prop_ascii (t_to_js x53) "encoding" (Ojs.string_to_js x54)
    let (get_exec_argv : t -> string list) =
      fun (x55 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x55) "execArgv")
    let (set_exec_argv : t -> string list -> unit) =
      fun (x57 : t) ->
        fun (x58 : string list) ->
          Ojs.set_prop_ascii (t_to_js x57) "execArgv"
            (Ojs.list_to_js Ojs.string_to_js x58)
  end
module TransportKind =
  struct
    type t = [ `stdio  | `ipc  | `pipe  | `socket ]
    let rec t_of_js : Ojs.t -> t =
      fun (x61 : Ojs.t) ->
        let x62 = x61 in
        match Ojs.int_of_js x62 with
        | 0 -> `stdio
        | 1 -> `ipc
        | 2 -> `pipe
        | 3 -> `socket
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x60 : [ `stdio  | `ipc  | `pipe  | `socket ]) ->
        match x60 with
        | `stdio -> Ojs.int_to_js 0
        | `ipc -> Ojs.int_to_js 1
        | `pipe -> Ojs.int_to_js 2
        | `socket -> Ojs.int_to_js 3
  end
module SocketTransport =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x64 : Ojs.t) -> x64
    and t_to_js : t -> Ojs.t = fun (x63 : Ojs.t) -> x63
    let (get_kind : t -> TransportKind_socket.t) =
      fun (x65 : t) ->
        TransportKind_socket.t_of_js
          (Ojs.get_prop_ascii (t_to_js x65) "kind")
    let (set_kind : t -> TransportKind_socket.t -> unit) =
      fun (x66 : t) ->
        fun (x67 : TransportKind_socket.t) ->
          Ojs.set_prop_ascii (t_to_js x66) "kind"
            (TransportKind_socket.t_to_js x67)
    let (get_port : t -> int) =
      fun (x68 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x68) "port")
    let (set_port : t -> int -> unit) =
      fun (x69 : t) ->
        fun (x70 : int) ->
          Ojs.set_prop_ascii (t_to_js x69) "port" (Ojs.int_to_js x70)
  end
module Transport =
  struct
    type t =
      (SocketTransport.t, [ `ipc  | `pipe  | `socket  | `stdio ]) or_enum
    let rec t_of_js : Ojs.t -> t =
      fun (x74 : Ojs.t) ->
        or_enum_of_js SocketTransport.t_of_js
          (fun (x76 : Ojs.t) ->
             let x77 = x76 in
             match Ojs.int_of_js x77 with
             | 1 -> `ipc
             | 2 -> `pipe
             | 3 -> `socket
             | 0 -> `stdio
             | _ -> assert false) x74
    and t_to_js : t -> Ojs.t =
      fun
        (x71 :
          (SocketTransport.t, [ `ipc  | `pipe  | `socket  | `stdio ]) or_enum)
        ->
        or_enum_to_js SocketTransport.t_to_js
          (fun (x73 : [ `ipc  | `pipe  | `socket  | `stdio ]) ->
             match x73 with
             | `ipc -> Ojs.int_to_js 1
             | `pipe -> Ojs.int_to_js 2
             | `socket -> Ojs.int_to_js 3
             | `stdio -> Ojs.int_to_js 0) x71
  end
module NodeModule =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x79 : Ojs.t) -> x79
    and t_to_js : t -> Ojs.t = fun (x78 : Ojs.t) -> x78
    let (get_module : t -> string) =
      fun (x80 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x80) "module")
    let (set_module : t -> string -> unit) =
      fun (x81 : t) ->
        fun (x82 : string) ->
          Ojs.set_prop_ascii (t_to_js x81) "module" (Ojs.string_to_js x82)
    let (get_transport : t -> Transport.t) =
      fun (x83 : t) ->
        Transport.t_of_js (Ojs.get_prop_ascii (t_to_js x83) "transport")
    let (set_transport : t -> Transport.t -> unit) =
      fun (x84 : t) ->
        fun (x85 : Transport.t) ->
          Ojs.set_prop_ascii (t_to_js x84) "transport"
            (Transport.t_to_js x85)
    let (get_args : t -> string list) =
      fun (x86 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x86) "args")
    let (set_args : t -> string list -> unit) =
      fun (x88 : t) ->
        fun (x89 : string list) ->
          Ojs.set_prop_ascii (t_to_js x88) "args"
            (Ojs.list_to_js Ojs.string_to_js x89)
    let (get_runtime : t -> string) =
      fun (x91 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x91) "runtime")
    let (set_runtime : t -> string -> unit) =
      fun (x92 : t) ->
        fun (x93 : string) ->
          Ojs.set_prop_ascii (t_to_js x92) "runtime" (Ojs.string_to_js x93)
    let (get_options : t -> ForkOptions.t) =
      fun (x94 : t) ->
        ForkOptions.t_of_js (Ojs.get_prop_ascii (t_to_js x94) "options")
    let (set_options : t -> ForkOptions.t -> unit) =
      fun (x95 : t) ->
        fun (x96 : ForkOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x95) "options"
            (ForkOptions.t_to_js x96)
  end
module StreamInfo =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x98 : Ojs.t) -> x98
    and t_to_js : t -> Ojs.t = fun (x97 : Ojs.t) -> x97
    let (get_writer : t -> Node.WritableStream.t) =
      fun (x99 : t) ->
        Node.WritableStream.t_of_js
          (Ojs.get_prop_ascii (t_to_js x99) "writer")
    let (set_writer : t -> Node.WritableStream.t -> unit) =
      fun (x100 : t) ->
        fun (x101 : Node.WritableStream.t) ->
          Ojs.set_prop_ascii (t_to_js x100) "writer"
            (Node.WritableStream.t_to_js x101)
    let (get_reader : t -> Node.ReadableStream.t) =
      fun (x102 : t) ->
        Node.ReadableStream.t_of_js
          (Ojs.get_prop_ascii (t_to_js x102) "reader")
    let (set_reader : t -> Node.ReadableStream.t -> unit) =
      fun (x103 : t) ->
        fun (x104 : Node.ReadableStream.t) ->
          Ojs.set_prop_ascii (t_to_js x103) "reader"
            (Node.ReadableStream.t_to_js x104)
    let (get_detached : t -> bool) =
      fun (x105 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x105) "detached")
    let (set_detached : t -> bool -> unit) =
      fun (x106 : t) ->
        fun (x107 : bool) ->
          Ojs.set_prop_ascii (t_to_js x106) "detached" (Ojs.bool_to_js x107)
  end
module ChildProcessInfo =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x109 : Ojs.t) -> x109
    and t_to_js : t -> Ojs.t = fun (x108 : Ojs.t) -> x108
    let (get_process : t -> ChildProcess.t) =
      fun (x110 : t) ->
        ChildProcess.t_of_js (Ojs.get_prop_ascii (t_to_js x110) "process")
    let (set_process : t -> ChildProcess.t -> unit) =
      fun (x111 : t) ->
        fun (x112 : ChildProcess.t) ->
          Ojs.set_prop_ascii (t_to_js x111) "process"
            (ChildProcess.t_to_js x112)
    let (get_detached : t -> bool) =
      fun (x113 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x113) "detached")
    let (set_detached : t -> bool -> unit) =
      fun (x114 : t) ->
        fun (x115 : bool) ->
          Ojs.set_prop_ascii (t_to_js x114) "detached" (Ojs.bool_to_js x115)
  end
module ServerOptions =
  struct
    type t =
      (Executable.t, NodeModule.t, AnonymousInterface0.t,
        AnonymousInterface1.t,
        unit ->
          (ChildProcess.t, ChildProcessInfo.t, MessageTransports.t,
            StreamInfo.t) union4 Promise.t)
        union5
    let rec t_of_js : Ojs.t -> t =
      fun (x127 : Ojs.t) ->
        union5_of_js Executable.t_of_js NodeModule.t_of_js
          AnonymousInterface0.t_of_js AnonymousInterface1.t_of_js
          (fun (x132 : Ojs.t) ->
             fun () ->
               Promise.t_of_js
                 (fun (x133 : Ojs.t) ->
                    union4_of_js ChildProcess.t_of_js
                      ChildProcessInfo.t_of_js MessageTransports.t_of_js
                      StreamInfo.t_of_js x133) (Ojs.apply x132 [||])) x127
    and t_to_js : t -> Ojs.t =
      fun
        (x116 :
          (Executable.t, NodeModule.t, AnonymousInterface0.t,
            AnonymousInterface1.t,
            unit ->
              (ChildProcess.t, ChildProcessInfo.t, MessageTransports.t,
                StreamInfo.t) union4 Promise.t)
            union5)
        ->
        union5_to_js Executable.t_to_js NodeModule.t_to_js
          AnonymousInterface0.t_to_js AnonymousInterface1.t_to_js
          (fun
             (x121 :
               unit ->
                 (ChildProcess.t, ChildProcessInfo.t, MessageTransports.t,
                   StreamInfo.t) union4 Promise.t)
             ->
             Ojs.fun_to_js 1
               (fun _ ->
                  Promise.t_to_js
                    (fun
                       (x122 :
                         (ChildProcess.t, ChildProcessInfo.t,
                           MessageTransports.t, StreamInfo.t) union4)
                       ->
                       union4_to_js ChildProcess.t_to_js
                         ChildProcessInfo.t_to_js MessageTransports.t_to_js
                         StreamInfo.t_to_js x122) (x121 ()))) x116
  end
module LanguageClient =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x139 : Ojs.t) -> x139
    and t_to_js : t -> Ojs.t = fun (x138 : Ojs.t) -> x138
    let (get_server_options : t -> any) =
      fun (x140 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x140) "_serverOptions")
    let (set_server_options : t -> any -> unit) =
      fun (x141 : t) ->
        fun (x142 : any) ->
          Ojs.set_prop_ascii (t_to_js x141) "_serverOptions" (any_to_js x142)
    let (get_force_debug : t -> any) =
      fun (x143 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x143) "_forceDebug")
    let (set_force_debug : t -> any -> unit) =
      fun (x144 : t) ->
        fun (x145 : any) ->
          Ojs.set_prop_ascii (t_to_js x144) "_forceDebug" (any_to_js x145)
    let (get_server_process : t -> any) =
      fun (x146 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x146) "_serverProcess")
    let (set_server_process : t -> any -> unit) =
      fun (x147 : t) ->
        fun (x148 : any) ->
          Ojs.set_prop_ascii (t_to_js x147) "_serverProcess" (any_to_js x148)
    let (get_is_detached : t -> any) =
      fun (x149 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x149) "_isDetached")
    let (set_is_detached : t -> any -> unit) =
      fun (x150 : t) ->
        fun (x151 : any) ->
          Ojs.set_prop_ascii (t_to_js x150) "_isDetached" (any_to_js x151)
    let (get_is_in_debug_mode : t -> any) =
      fun (x152 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x152) "_isInDebugMode")
    let (set_is_in_debug_mode : t -> any -> unit) =
      fun (x153 : t) ->
        fun (x154 : any) ->
          Ojs.set_prop_ascii (t_to_js x153) "_isInDebugMode" (any_to_js x154)
    let (create :
      name:string ->
        server_options:ServerOptions.t ->
          client_options:LanguageClientOptions.t ->
            ?force_debug:bool -> unit -> t)
      =
      fun ~name:(x155 : string) ->
        fun ~server_options:(x156 : ServerOptions.t) ->
          fun ~client_options:(x157 : LanguageClientOptions.t) ->
            fun ?force_debug:(x158 : bool option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Ojs.global "LanguageClient")
                     (let x159 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x159 "push" [|(Ojs.string_to_js x155)|]);
                      ignore
                        (Ojs.call x159 "push"
                           [|(ServerOptions.t_to_js x156)|]);
                      ignore
                        (Ojs.call x159 "push"
                           [|(LanguageClientOptions.t_to_js x157)|]);
                      (match x158 with
                       | Some x160 ->
                           ignore
                             (Ojs.call x159 "push" [|(Ojs.bool_to_js x160)|])
                       | None -> ());
                      x159))
    let (create' :
      id:string ->
        name:string ->
          server_options:ServerOptions.t ->
            client_options:LanguageClientOptions.t ->
              ?force_debug:bool -> unit -> t)
      =
      fun ~id:(x161 : string) ->
        fun ~name:(x162 : string) ->
          fun ~server_options:(x163 : ServerOptions.t) ->
            fun ~client_options:(x164 : LanguageClientOptions.t) ->
              fun ?force_debug:(x165 : bool option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii Ojs.global "LanguageClient")
                       (let x166 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x166 "push" [|(Ojs.string_to_js x161)|]);
                        ignore
                          (Ojs.call x166 "push" [|(Ojs.string_to_js x162)|]);
                        ignore
                          (Ojs.call x166 "push"
                             [|(ServerOptions.t_to_js x163)|]);
                        ignore
                          (Ojs.call x166 "push"
                             [|(LanguageClientOptions.t_to_js x164)|]);
                        (match x165 with
                         | Some x167 ->
                             ignore
                               (Ojs.call x166 "push"
                                  [|(Ojs.bool_to_js x167)|])
                         | None -> ());
                        x166))
    let (get_check_version : t -> any) =
      fun (x168 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x168) "checkVersion")
    let (set_check_version : t -> any -> unit) =
      fun (x169 : t) ->
        fun (x170 : any) ->
          Ojs.set_prop_ascii (t_to_js x169) "checkVersion" (any_to_js x170)
    let (get_is_in_debug_mode : t -> bool) =
      fun (x171 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x171) "isInDebugMode")
    let (stop : t -> unit Promise.t) =
      fun (x172 : t) ->
        Promise.t_of_js Ojs.unit_of_js (Ojs.call (t_to_js x172) "stop" [||])
    let (get_check_process_died : t -> any) =
      fun (x174 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x174) "checkProcessDied")
    let (set_check_process_died : t -> any -> unit) =
      fun (x175 : t) ->
        fun (x176 : any) ->
          Ojs.set_prop_ascii (t_to_js x175) "checkProcessDied"
            (any_to_js x176)
    let (handle_connection_closed : t -> unit) =
      fun (x177 : t) ->
        ignore (Ojs.call (t_to_js x177) "handleConnectionClosed" [||])
    let (fill_initialize_params : t -> params:InitializeParams.t -> unit) =
      fun (x179 : t) ->
        fun ~params:(x178 : InitializeParams.t) ->
          ignore
            (Ojs.call (t_to_js x179) "fillInitializeParams"
               [|(InitializeParams.t_to_js x178)|])
    let (create_message_transports :
      t -> encoding:string -> MessageTransports.t Promise.t) =
      fun (x181 : t) ->
        fun ~encoding:(x180 : string) ->
          Promise.t_of_js MessageTransports.t_of_js
            (Ojs.call (t_to_js x181) "createMessageTransports"
               [|(Ojs.string_to_js x180)|])
    let (get_get_runtime_path : t -> any) =
      fun (x183 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x183) "_getRuntimePath")
    let (set_get_runtime_path : t -> any -> unit) =
      fun (x184 : t) ->
        fun (x185 : any) ->
          Ojs.set_prop_ascii (t_to_js x184) "_getRuntimePath"
            (any_to_js x185)
    let (get_main_get_root_path : t -> any) =
      fun (x186 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x186) "_mainGetRootPath")
    let (set_main_get_root_path : t -> any -> unit) =
      fun (x187 : t) ->
        fun (x188 : any) ->
          Ojs.set_prop_ascii (t_to_js x187) "_mainGetRootPath"
            (any_to_js x188)
    let (get_get_server_working_dir : t -> any) =
      fun (x189 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x189) "_getServerWorkingDir")
    let (set_get_server_working_dir : t -> any -> unit) =
      fun (x190 : t) ->
        fun (x191 : any) ->
          Ojs.set_prop_ascii (t_to_js x190) "_getServerWorkingDir"
            (any_to_js x191)
    let (get_locale : t -> string) =
      fun (x192 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x192) "getLocale" [||])
    include struct include CommonLanguageClient end
  end
module SettingMonitor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x194 : Ojs.t) -> x194
    and t_to_js : t -> Ojs.t = fun (x193 : Ojs.t) -> x193
    let (get__client : t -> any) =
      fun (x195 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x195) "_client")
    let (set__client : t -> any -> unit) =
      fun (x196 : t) ->
        fun (x197 : any) ->
          Ojs.set_prop_ascii (t_to_js x196) "_client" (any_to_js x197)
    let (get__setting : t -> any) =
      fun (x198 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x198) "_setting")
    let (set__setting : t -> any -> unit) =
      fun (x199 : t) ->
        fun (x200 : any) ->
          Ojs.set_prop_ascii (t_to_js x199) "_setting" (any_to_js x200)
    let (get__listeners : t -> any) =
      fun (x201 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x201) "_listeners")
    let (set__listeners : t -> any -> unit) =
      fun (x202 : t) ->
        fun (x203 : any) ->
          Ojs.set_prop_ascii (t_to_js x202) "_listeners" (any_to_js x203)
    let (create : _client:LanguageClient.t -> _setting:string -> t) =
      fun ~_client:(x204 : LanguageClient.t) ->
        fun ~_setting:(x205 : string) ->
          t_of_js
            (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "SettingMonitor")
               [|(LanguageClient.t_to_js x204);(Ojs.string_to_js x205)|])
    let (start : t -> Disposable.t) =
      fun (x206 : t) ->
        Disposable.t_of_js (Ojs.call (t_to_js x206) "start" [||])
    let (get_on_did_change_configuration : t -> any) =
      fun (x207 : t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js x207) "onDidChangeConfiguration")
    let (set_on_did_change_configuration : t -> any -> unit) =
      fun (x208 : t) ->
        fun (x209 : any) ->
          Ojs.set_prop_ascii (t_to_js x208) "onDidChangeConfiguration"
            (any_to_js x209)
  end
