[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_kind : t -> VDocumentDiagnosticReportKind_new.t) =
      fun (x3 : t) ->
        VDocumentDiagnosticReportKind_new.t_of_js
          (Ojs.get_prop_ascii (t_to_js x3) "kind")
    let (set_kind : t -> VDocumentDiagnosticReportKind_new.t -> unit) =
      fun (x4 : t) ->
        fun (x5 : VDocumentDiagnosticReportKind_new.t) ->
          Ojs.set_prop_ascii (t_to_js x4) "kind"
            (VDocumentDiagnosticReportKind_new.t_to_js x5)
    let (get_result_id : t -> string) =
      fun (x6 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x6) "resultId")
    let (set_result_id : t -> string -> unit) =
      fun (x7 : t) ->
        fun (x8 : string) ->
          Ojs.set_prop_ascii (t_to_js x7) "resultId" (Ojs.string_to_js x8)
    let (get_items : t -> VDiagnostic.t list) =
      fun (x9 : t) ->
        Ojs.list_of_js VDiagnostic.t_of_js
          (Ojs.get_prop_ascii (t_to_js x9) "items")
    let (set_items : t -> VDiagnostic.t list -> unit) =
      fun (x11 : t) ->
        fun (x12 : VDiagnostic.t list) ->
          Ojs.set_prop_ascii (t_to_js x11) "items"
            (Ojs.list_to_js VDiagnostic.t_to_js x12)
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15 : Ojs.t) -> x15
    and t_to_js : t -> Ojs.t = fun (x14 : Ojs.t) -> x14
    let (get_kind : t -> VDocumentDiagnosticReportKind_unChanged.t) =
      fun (x16 : t) ->
        VDocumentDiagnosticReportKind_unChanged.t_of_js
          (Ojs.get_prop_ascii (t_to_js x16) "kind")
    let (set_kind : t -> VDocumentDiagnosticReportKind_unChanged.t -> unit) =
      fun (x17 : t) ->
        fun (x18 : VDocumentDiagnosticReportKind_unChanged.t) ->
          Ojs.set_prop_ascii (t_to_js x17) "kind"
            (VDocumentDiagnosticReportKind_unChanged.t_to_js x18)
    let (get_result_id : t -> string) =
      fun (x19 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x19) "resultId")
    let (set_result_id : t -> string -> unit) =
      fun (x20 : t) ->
        fun (x21 : string) ->
          Ojs.set_prop_ascii (t_to_js x20) "resultId" (Ojs.string_to_js x21)
  end
module VDocumentDiagnosticReportKind =
  struct
    type t = [ `new_  | `unChanged ]
    let rec t_of_js : Ojs.t -> t =
      fun (x23 : Ojs.t) ->
        let x24 = x23 in
        match Ojs.string_of_js x24 with
        | "new" -> `new_
        | "unChanged" -> `unChanged
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x22 : [ `new_  | `unChanged ]) ->
        match x22 with
        | `new_ -> Ojs.string_to_js "new"
        | `unChanged -> Ojs.string_to_js "unChanged"
  end
module VDocumentDiagnosticReport =
  struct
    type t =
      [ `U_s0_new of AnonymousInterface0.t 
      | `U_s1_unChanged of AnonymousInterface1.t ]
    let rec t_of_js : Ojs.t -> t =
      fun (x28 : Ojs.t) ->
        let x29 = x28 in
        match Ojs.string_of_js (Ojs.get_prop_ascii x29 "kind") with
        | "new" -> `U_s0_new (AnonymousInterface0.t_of_js x29)
        | "unChanged" -> `U_s1_unChanged (AnonymousInterface1.t_of_js x29)
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x25 :
          [ `U_s0_new of AnonymousInterface0.t 
          | `U_s1_unChanged of AnonymousInterface1.t ])
        ->
        match x25 with
        | `U_s0_new x26 -> AnonymousInterface0.t_to_js x26
        | `U_s1_unChanged x27 -> AnonymousInterface1.t_to_js x27
  end
module DiagnosticProvider =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x31 : Ojs.t) -> x31
    and t_to_js : t -> Ojs.t = fun (x30 : Ojs.t) -> x30
    let (get_on_did_change_diagnostics : t -> unit VEvent.t) =
      fun (x32 : t) ->
        VEvent.t_of_js Ojs.unit_of_js
          (Ojs.get_prop_ascii (t_to_js x32) "onDidChangeDiagnostics")
    let (set_on_did_change_diagnostics : t -> unit VEvent.t -> unit) =
      fun (x34 : t) ->
        fun (x35 : unit VEvent.t) ->
          Ojs.set_prop_ascii (t_to_js x34) "onDidChangeDiagnostics"
            (VEvent.t_to_js Ojs.unit_to_js x35)
    let (provide_diagnostics :
      t ->
        text_document:TextDocument.t ->
          token:CancellationToken.t ->
            VDocumentDiagnosticReport.t ProviderResult.t)
      =
      fun (x39 : t) ->
        fun ~text_document:(x37 : TextDocument.t) ->
          fun ~token:(x38 : CancellationToken.t) ->
            ProviderResult.t_of_js VDocumentDiagnosticReport.t_of_js
              (Ojs.call (t_to_js x39) "provideDiagnostics"
                 [|(TextDocument.t_to_js x37);(CancellationToken.t_to_js x38)|])
  end
module ProvideDiagnosticSignature =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x42 : Ojs.t) -> x42
    and t_to_js : t -> Ojs.t = fun (x41 : Ojs.t) -> x41
    let (apply :
      t ->
        this:unit ->
          text_document:TextDocument.t ->
            token:CancellationToken.t ->
              VDocumentDiagnosticReport.t ProviderResult.t)
      =
      fun (x46 : t) ->
        fun ~this:(x43 : unit) ->
          fun ~text_document:(x44 : TextDocument.t) ->
            fun ~token:(x45 : CancellationToken.t) ->
              ProviderResult.t_of_js VDocumentDiagnosticReport.t_of_js
                (Ojs.apply (t_to_js x46)
                   [|(Ojs.unit_to_js x43);(TextDocument.t_to_js x44);(
                     CancellationToken.t_to_js x45)|])
  end
module DiagnosticProviderMiddleware =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x49 : Ojs.t) -> x49
    and t_to_js : t -> Ojs.t = fun (x48 : Ojs.t) -> x48
    let (provide_diagnostics :
      t ->
        this:unit ->
          document:TextDocument.t ->
            token:CancellationToken.t ->
              next:ProvideDiagnosticSignature.t ->
                VDocumentDiagnosticReport.t ProviderResult.t)
      =
      fun (x54 : t) ->
        fun ~this:(x50 : unit) ->
          fun ~document:(x51 : TextDocument.t) ->
            fun ~token:(x52 : CancellationToken.t) ->
              fun ~next:(x53 : ProvideDiagnosticSignature.t) ->
                ProviderResult.t_of_js VDocumentDiagnosticReport.t_of_js
                  (Ojs.call (t_to_js x54) "provideDiagnostics"
                     [|(Ojs.unit_to_js x50);(TextDocument.t_to_js x51);(
                       CancellationToken.t_to_js x52);(ProvideDiagnosticSignature.t_to_js
                                                         x53)|])
  end
module DiagnosticFeatureProvider =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x57 : Ojs.t) -> x57
    and t_to_js : t -> Ojs.t = fun (x56 : Ojs.t) -> x56
    let (get_on_did_change_diagnostics_emitter : t -> unit EventEmitter.t) =
      fun (x58 : t) ->
        EventEmitter.t_of_js Ojs.unit_of_js
          (Ojs.get_prop_ascii (t_to_js x58) "onDidChangeDiagnosticsEmitter")
    let (set_on_did_change_diagnostics_emitter :
      t -> unit EventEmitter.t -> unit) =
      fun (x60 : t) ->
        fun (x61 : unit EventEmitter.t) ->
          Ojs.set_prop_ascii (t_to_js x60) "onDidChangeDiagnosticsEmitter"
            (EventEmitter.t_to_js Ojs.unit_to_js x61)
    let (get_provider : t -> DiagnosticProvider.t) =
      fun (x63 : t) ->
        DiagnosticProvider.t_of_js
          (Ojs.get_prop_ascii (t_to_js x63) "provider")
    let (set_provider : t -> DiagnosticProvider.t -> unit) =
      fun (x64 : t) ->
        fun (x65 : DiagnosticProvider.t) ->
          Ojs.set_prop_ascii (t_to_js x64) "provider"
            (DiagnosticProvider.t_to_js x65)
  end
module DiagnosticFeature =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x67 : Ojs.t) -> x67
    and t_to_js : t -> Ojs.t = fun (x66 : Ojs.t) -> x66
    let (create : client:BaseLanguageClient.t -> t) =
      fun ~client:(x68 : BaseLanguageClient.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "DiagnosticFeature")
             [|(BaseLanguageClient.t_to_js x68)|])
    let (fill_client_capabilities :
      t ->
        capabilities:(ClientCapabilities.t,
          Proposed.DiagnosticClientCapabilities.t) intersection2 -> unit)
      =
      fun (x72 : t) ->
        fun
          ~capabilities:(x69 :
                          (ClientCapabilities.t,
                            Proposed.DiagnosticClientCapabilities.t)
                            intersection2)
          ->
          ignore
            (Ojs.call (t_to_js x72) "fillClientCapabilities"
               [|(intersection2_to_js ClientCapabilities.t_to_js
                    Proposed.DiagnosticClientCapabilities.t_to_js x69)|])
    let (initialize :
      t ->
        capabilities:(ServerCapabilities.t,
          Proposed.DiagnosticServerCapabilities.t) intersection2 ->
          document_selector:DocumentSelector.t -> unit)
      =
      fun (x77 : t) ->
        fun
          ~capabilities:(x73 :
                          (ServerCapabilities.t,
                            Proposed.DiagnosticServerCapabilities.t)
                            intersection2)
          ->
          fun ~document_selector:(x76 : DocumentSelector.t) ->
            ignore
              (Ojs.call (t_to_js x77) "initialize"
                 [|(intersection2_to_js ServerCapabilities.t_to_js
                      Proposed.DiagnosticServerCapabilities.t_to_js x73);(
                   DocumentSelector.t_to_js x76)|])
    let (register_language_provider :
      t ->
        options:Proposed.DiagnosticRegistrationOptions.t ->
          (Disposable.t * DiagnosticFeatureProvider.t))
      =
      fun (x79 : t) ->
        fun ~options:(x78 : Proposed.DiagnosticRegistrationOptions.t) ->
          let x80 =
            Ojs.call (t_to_js x79) "registerLanguageProvider"
              [|(Proposed.DiagnosticRegistrationOptions.t_to_js x78)|] in
          ((Disposable.t_of_js (Ojs.array_get x80 0)),
            (DiagnosticFeatureProvider.t_of_js (Ojs.array_get x80 1)))
    let (cast :
      t ->
        (Proposed.DiagnosticOptions.t,
          Proposed.DiagnosticRegistrationOptions.t,
          DiagnosticFeatureProvider.t) TextDocumentFeature.t)
      =
      fun (x81 : t) ->
        TextDocumentFeature.t_of_js Proposed.DiagnosticOptions.t_of_js
          Proposed.DiagnosticRegistrationOptions.t_of_js
          DiagnosticFeatureProvider.t_of_js (t_to_js x81)
  end
