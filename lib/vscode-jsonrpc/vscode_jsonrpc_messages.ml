[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
module Message =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_jsonrpc : t -> string) =
      fun (x3 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3) "jsonrpc")
    let (set_jsonrpc : t -> string -> unit) =
      fun (x4 : t) ->
        fun (x5 : string) ->
          Ojs.set_prop_ascii (t_to_js x4) "jsonrpc" (Ojs.string_to_js x5)
  end
module RequestMessage =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7 : Ojs.t) -> x7
    and t_to_js : t -> Ojs.t = fun (x6 : Ojs.t) -> x6
    let (get_id : t -> string or_number or_null) =
      fun (x8 : t) ->
        or_null_of_js
          (fun (x9 : Ojs.t) -> or_number_of_js Ojs.string_of_js x9)
          (Ojs.get_prop_ascii (t_to_js x8) "id")
    let (set_id : t -> string or_number or_null -> unit) =
      fun (x11 : t) ->
        fun (x12 : string or_number or_null) ->
          Ojs.set_prop_ascii (t_to_js x11) "id"
            (or_null_to_js
               (fun (x13 : string or_number) ->
                  or_number_to_js Ojs.string_to_js x13) x12)
    let (get_method : t -> string) =
      fun (x15 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x15) "method")
    let (set_method : t -> string -> unit) =
      fun (x16 : t) ->
        fun (x17 : string) ->
          Ojs.set_prop_ascii (t_to_js x16) "method" (Ojs.string_to_js x17)
    let (get_params : t -> (untyped_object, any) or_array) =
      fun (x18 : t) ->
        or_array_of_js untyped_object_of_js any_of_js
          (Ojs.get_prop_ascii (t_to_js x18) "params")
    let (set_params : t -> (untyped_object, any) or_array -> unit) =
      fun (x21 : t) ->
        fun (x22 : (untyped_object, any) or_array) ->
          Ojs.set_prop_ascii (t_to_js x21) "params"
            (or_array_to_js untyped_object_to_js any_to_js x22)
    let (cast : t -> Message.t) =
      fun (x25 : t) -> Message.t_of_js (t_to_js x25)
  end
module ErrorCodes =
  struct
    let (parse_error : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorCodes")
           "ParseError")
    let (invalid_request : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorCodes")
           "InvalidRequest")
    let (method_not_found : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorCodes")
           "MethodNotFound")
    let (invalid_params : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorCodes")
           "InvalidParams")
    let (internal_error : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorCodes")
           "InternalError")
    let (jsonrpc_reserved_error_range_start : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorCodes")
           "jsonrpcReservedErrorRangeStart")
    let (server_error_start : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorCodes")
           "serverErrorStart")
    let (message_write_error : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorCodes")
           "MessageWriteError")
    let (message_read_error : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorCodes")
           "MessageReadError")
    let (server_not_initialized : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorCodes")
           "ServerNotInitialized")
    let (unknown_error_code : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorCodes")
           "UnknownErrorCode")
    let (jsonrpc_reserved_error_range_end : any) =
      any_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorCodes")
           "jsonrpcReservedErrorRangeEnd")
    let (server_error_end : int) =
      Ojs.int_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "ErrorCodes")
           "serverErrorEnd")
  end
module ResponseErrorLiteral =
  struct
    type 'D t = Ojs.t
    let rec t_of_js : 'D . (Ojs.t -> 'D) -> Ojs.t -> 'D t = fun (type __D) ->
      fun (__D_of_js : Ojs.t -> __D) -> fun (x27 : Ojs.t) -> x27
    and t_to_js : 'D . ('D -> Ojs.t) -> 'D t -> Ojs.t = fun (type __D) ->
      fun (__D_to_js : __D -> Ojs.t) -> fun (x26 : Ojs.t) -> x26
    type t_0 = unit t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x30 : Ojs.t) -> t_of_js Ojs.unit_of_js x30
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x28 : unit t) -> t_to_js Ojs.unit_to_js x28
    let (get_code : 'D t -> int) =
      fun (x32 : 'D t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x32) "code")
    let (set_code : 'D t -> int -> unit) =
      fun (x34 : 'D t) ->
        fun (x35 : int) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x34) "code"
            (Ojs.int_to_js x35)
    let (get_message : 'D t -> string) =
      fun (x37 : 'D t) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic x37) "message")
    let (set_message : 'D t -> string -> unit) =
      fun (x39 : 'D t) ->
        fun (x40 : string) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x39) "message"
            (Ojs.string_to_js x40)
    let (get_data : 'D t -> 'D) =
      fun (x42 : 'D t) ->
        Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x42) "data")
    let (set_data : 'D t -> 'D -> unit) =
      fun (x44 : 'D t) ->
        fun (x45 : 'D) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x44) "data" (Obj.magic x45)
  end
module ResponseError =
  struct
    type 'D t = Ojs.t
    let rec t_of_js : 'D . (Ojs.t -> 'D) -> Ojs.t -> 'D t = fun (type __D) ->
      fun (__D_of_js : Ojs.t -> __D) -> fun (x48 : Ojs.t) -> x48
    and t_to_js : 'D . ('D -> Ojs.t) -> 'D t -> Ojs.t = fun (type __D) ->
      fun (__D_to_js : __D -> Ojs.t) -> fun (x47 : Ojs.t) -> x47
    type t_0 = unit t
    let rec t_0_of_js : Ojs.t -> t_0 =
      fun (x51 : Ojs.t) -> t_of_js Ojs.unit_of_js x51
    and t_0_to_js : t_0 -> Ojs.t =
      fun (x49 : unit t) -> t_to_js Ojs.unit_to_js x49
    let (get_code : 'D t -> int) =
      fun (x53 : 'D t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x53) "code")
    let (get_data : 'D t -> 'D or_undefined) =
      fun (x55 : 'D t) ->
        or_undefined_of_js Obj.magic
          (Ojs.get_prop_ascii (t_to_js Obj.magic x55) "data")
    let (create : code:int -> message:string -> ?data:'D -> unit -> 'D t) =
      fun ~code:(x58 : int) ->
        fun ~message:(x59 : string) ->
          fun ?data:(x60 : 'D option) ->
            fun () ->
              t_of_js Obj.magic
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Ojs.global "ResponseError")
                   (let x61 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore (Ojs.call x61 "push" [|(Ojs.int_to_js x58)|]);
                    ignore (Ojs.call x61 "push" [|(Ojs.string_to_js x59)|]);
                    (match x60 with
                     | Some x62 ->
                         ignore (Ojs.call x61 "push" [|(Obj.magic x62)|])
                     | None -> ());
                    x61))
    let (to_json : 'D t -> 'D ResponseErrorLiteral.t) =
      fun (x64 : 'D t) ->
        ResponseErrorLiteral.t_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic x64) "toJson" [||])
    let (cast : 'D t -> Error.t) =
      fun (x67 : 'D t) -> Error.t_of_js (t_to_js Obj.magic x67)
  end
module ResponseMessage =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x70 : Ojs.t) -> x70
    and t_to_js : t -> Ojs.t = fun (x69 : Ojs.t) -> x69
    let (get_id : t -> string or_number or_null) =
      fun (x71 : t) ->
        or_null_of_js
          (fun (x72 : Ojs.t) -> or_number_of_js Ojs.string_of_js x72)
          (Ojs.get_prop_ascii (t_to_js x71) "id")
    let (set_id : t -> string or_number or_null -> unit) =
      fun (x74 : t) ->
        fun (x75 : string or_number or_null) ->
          Ojs.set_prop_ascii (t_to_js x74) "id"
            (or_null_to_js
               (fun (x76 : string or_number) ->
                  or_number_to_js Ojs.string_to_js x76) x75)
    let (get_result :
      t ->
        (untyped_object, any) or_array or_boolean or_string or_number or_null)
      =
      fun (x78 : t) ->
        or_null_of_js
          (fun (x79 : Ojs.t) ->
             or_number_of_js
               (fun (x80 : Ojs.t) ->
                  or_string_of_js
                    (fun (x81 : Ojs.t) ->
                       or_boolean_of_js
                         (fun (x82 : Ojs.t) ->
                            or_array_of_js untyped_object_of_js any_of_js x82)
                         x81) x80) x79)
          (Ojs.get_prop_ascii (t_to_js x78) "result")
    let (set_result :
      t ->
        (untyped_object, any) or_array or_boolean or_string or_number or_null
          -> unit)
      =
      fun (x85 : t) ->
        fun
          (x86 :
            (untyped_object, any) or_array or_boolean or_string or_number
              or_null)
          ->
          Ojs.set_prop_ascii (t_to_js x85) "result"
            (or_null_to_js
               (fun
                  (x87 :
                    (untyped_object, any) or_array or_boolean or_string
                      or_number)
                  ->
                  or_number_to_js
                    (fun
                       (x88 :
                         (untyped_object, any) or_array or_boolean or_string)
                       ->
                       or_string_to_js
                         (fun
                            (x89 : (untyped_object, any) or_array or_boolean)
                            ->
                            or_boolean_to_js
                              (fun (x90 : (untyped_object, any) or_array) ->
                                 or_array_to_js untyped_object_to_js
                                   any_to_js x90) x89) x88) x87) x86)
    let (get_error : t -> any ResponseErrorLiteral.t) =
      fun (x93 : t) ->
        ResponseErrorLiteral.t_of_js any_of_js
          (Ojs.get_prop_ascii (t_to_js x93) "error")
    let (set_error : t -> any ResponseErrorLiteral.t -> unit) =
      fun (x95 : t) ->
        fun (x96 : any ResponseErrorLiteral.t) ->
          Ojs.set_prop_ascii (t_to_js x95) "error"
            (ResponseErrorLiteral.t_to_js any_to_js x96)
    let (cast : t -> Message.t) =
      fun (x98 : t) -> Message.t_of_js (t_to_js x98)
  end
module LSPMessageType =
  struct
    type t =
      [ `L_s0_receive_notification  | `L_s1_receive_request 
      | `L_s2_receive_response  | `L_s3_send_notification 
      | `L_s4_send_request  | `L_s5_send_response ]
    let rec t_of_js : Ojs.t -> t =
      fun (x100 : Ojs.t) ->
        let x101 = x100 in
        match Ojs.string_of_js x101 with
        | "receive-notification" -> `L_s0_receive_notification
        | "receive-request" -> `L_s1_receive_request
        | "receive-response" -> `L_s2_receive_response
        | "send-notification" -> `L_s3_send_notification
        | "send-request" -> `L_s4_send_request
        | "send-response" -> `L_s5_send_response
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x99 :
          [ `L_s0_receive_notification  | `L_s1_receive_request 
          | `L_s2_receive_response  | `L_s3_send_notification 
          | `L_s4_send_request  | `L_s5_send_response ])
        ->
        match x99 with
        | `L_s0_receive_notification ->
            Ojs.string_to_js "receive-notification"
        | `L_s1_receive_request -> Ojs.string_to_js "receive-request"
        | `L_s2_receive_response -> Ojs.string_to_js "receive-response"
        | `L_s3_send_notification -> Ojs.string_to_js "send-notification"
        | `L_s4_send_request -> Ojs.string_to_js "send-request"
        | `L_s5_send_response -> Ojs.string_to_js "send-response"
  end
module NotificationMessage =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x103 : Ojs.t) -> x103
    and t_to_js : t -> Ojs.t = fun (x102 : Ojs.t) -> x102
    let (get_method : t -> string) =
      fun (x104 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x104) "method")
    let (set_method : t -> string -> unit) =
      fun (x105 : t) ->
        fun (x106 : string) ->
          Ojs.set_prop_ascii (t_to_js x105) "method" (Ojs.string_to_js x106)
    let (get_params : t -> (untyped_object, unit) union2) =
      fun (x107 : t) ->
        union2_of_js untyped_object_of_js Ojs.unit_of_js
          (Ojs.get_prop_ascii (t_to_js x107) "params")
    let (set_params : t -> (untyped_object, unit) union2 -> unit) =
      fun (x110 : t) ->
        fun (x111 : (untyped_object, unit) union2) ->
          Ojs.set_prop_ascii (t_to_js x110) "params"
            (union2_to_js untyped_object_to_js Ojs.unit_to_js x111)
    let (cast : t -> Message.t) =
      fun (x114 : t) -> Message.t_of_js (t_to_js x114)
  end
module LSPLogMessage =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x116 : Ojs.t) -> x116
    and t_to_js : t -> Ojs.t = fun (x115 : Ojs.t) -> x115
    let (get_type : t -> LSPMessageType.t) =
      fun (x117 : t) ->
        LSPMessageType.t_of_js (Ojs.get_prop_ascii (t_to_js x117) "type")
    let (set_type : t -> LSPMessageType.t -> unit) =
      fun (x118 : t) ->
        fun (x119 : LSPMessageType.t) ->
          Ojs.set_prop_ascii (t_to_js x118) "type"
            (LSPMessageType.t_to_js x119)
    let (get_message :
      t ->
        (NotificationMessage.t, RequestMessage.t, ResponseMessage.t) union3)
      =
      fun (x120 : t) ->
        union3_of_js NotificationMessage.t_of_js RequestMessage.t_of_js
          ResponseMessage.t_of_js
          (Ojs.get_prop_ascii (t_to_js x120) "message")
    let (set_message :
      t ->
        (NotificationMessage.t, RequestMessage.t, ResponseMessage.t) union3
          -> unit)
      =
      fun (x124 : t) ->
        fun
          (x125 :
            (NotificationMessage.t, RequestMessage.t, ResponseMessage.t)
              union3)
          ->
          Ojs.set_prop_ascii (t_to_js x124) "message"
            (union3_to_js NotificationMessage.t_to_js RequestMessage.t_to_js
               ResponseMessage.t_to_js x125)
    let (get_timestamp : t -> int) =
      fun (x129 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x129) "timestamp")
    let (set_timestamp : t -> int -> unit) =
      fun (x130 : t) ->
        fun (x131 : int) ->
          Ojs.set_prop_ascii (t_to_js x130) "timestamp" (Ojs.int_to_js x131)
  end
module ParameterStructures =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x133 : Ojs.t) -> x133
    and t_to_js : t -> Ojs.t = fun (x132 : Ojs.t) -> x132
    let (get_kind : t -> any) =
      fun (x134 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x134) "kind")
    let (get_auto : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ParameterStructures") "auto")
    let (get_by_position : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ParameterStructures")
             "byPosition")
    let (get_by_name : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.get_prop_ascii
             (Ojs.get_prop_ascii Ojs.global "ParameterStructures") "byName")
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "ParameterStructures")
             [||])
    let (is : value:any -> bool) =
      fun ~value:(x135 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "ParameterStructures")
             "is" [|(any_to_js x135)|])
    let (to_string : t -> string) =
      fun (x136 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x136) "toString" [||])
  end
module MessageSignature =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x138 : Ojs.t) -> x138
    and t_to_js : t -> Ojs.t = fun (x137 : Ojs.t) -> x137
    let (get_method : t -> string) =
      fun (x139 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x139) "method")
    let (get_number_of_params : t -> int) =
      fun (x140 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x140) "numberOfParams")
    let (get_parameter_structures : t -> ParameterStructures.t) =
      fun (x141 : t) ->
        ParameterStructures.t_of_js
          (Ojs.get_prop_ascii (t_to_js x141) "parameterStructures")
  end
module AbstractMessageSignature =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x143 : Ojs.t) -> x143
    and t_to_js : t -> Ojs.t = fun (x142 : Ojs.t) -> x142
    let (get_method : t -> string) =
      fun (x144 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x144) "method")
    let (get_number_of_params : t -> int) =
      fun (x145 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x145) "numberOfParams")
    let (create : method_:string -> number_of_params:int -> t) =
      fun ~method_:(x146 : string) ->
        fun ~number_of_params:(x147 : int) ->
          t_of_js
            (Ojs.new_obj
               (Ojs.get_prop_ascii Ojs.global "AbstractMessageSignature")
               [|(Ojs.string_to_js x146);(Ojs.int_to_js x147)|])
    let (get_parameter_structures : t -> ParameterStructures.t) =
      fun (x148 : t) ->
        ParameterStructures.t_of_js
          (Ojs.get_prop_ascii (t_to_js x148) "parameterStructures")
    let (cast : t -> MessageSignature.t) =
      fun (x149 : t) -> MessageSignature.t_of_js (t_to_js x149)
  end
module EM =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x151 : Ojs.t) -> x151
    and t_to_js : t -> Ojs.t = fun (x150 : Ojs.t) -> x150
    let (get_end_marker : t -> int) =
      fun (x152 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x152) "_$endMarker$_")
    let (set_end_marker : t -> int -> unit) =
      fun (x153 : t) ->
        fun (x154 : int) ->
          Ojs.set_prop_ascii (t_to_js x153) "_$endMarker$_"
            (Ojs.int_to_js x154)
  end
module RequestType0 =
  struct
    type ('R, 'E) t = Ojs.t
    let rec t_of_js :
      'R 'E . (Ojs.t -> 'R) -> (Ojs.t -> 'E) -> Ojs.t -> ('R, 'E) t = fun
      (type __R) -> fun (type __E) ->
      fun (__R_of_js : Ojs.t -> __R) ->
        fun (__E_of_js : Ojs.t -> __E) -> fun (x156 : Ojs.t) -> x156
    and t_to_js :
      'R 'E . ('R -> Ojs.t) -> ('E -> Ojs.t) -> ('R, 'E) t -> Ojs.t = fun
      (type __R) -> fun (type __E) ->
      fun (__R_to_js : __R -> Ojs.t) ->
        fun (__E_to_js : __E -> Ojs.t) -> fun (x155 : Ojs.t) -> x155
    let (get__ : ('R, 'E) t -> ('R * 'E * EM.t) or_undefined) =
      fun (x157 : ('R, 'E) t) ->
        or_undefined_of_js
          (fun (x160 : Ojs.t) ->
             let x161 = x160 in
             ((Obj.magic (Ojs.array_get x161 0)),
               (Obj.magic (Ojs.array_get x161 1)),
               (EM.t_of_js (Ojs.array_get x161 2))))
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x157) "_")
    let (create : method_:string -> ('R, 'E) t) =
      fun ~method_:(x162 : string) ->
        t_of_js Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "RequestType0")
             [|(Ojs.string_to_js x162)|])
    let (cast : ('R, 'E) t -> AbstractMessageSignature.t) =
      fun (x165 : ('R, 'E) t) ->
        AbstractMessageSignature.t_of_js (t_to_js Obj.magic Obj.magic x165)
  end
module RequestType =
  struct
    type ('P, 'R, 'E) t = Ojs.t
    let rec t_of_js :
      'P 'R 'E .
        (Ojs.t -> 'P) ->
          (Ojs.t -> 'R) -> (Ojs.t -> 'E) -> Ojs.t -> ('P, 'R, 'E) t
      = fun (type __P) -> fun (type __R) -> fun (type __E) ->
      fun (__P_of_js : Ojs.t -> __P) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (__E_of_js : Ojs.t -> __E) -> fun (x169 : Ojs.t) -> x169
    and t_to_js :
      'P 'R 'E .
        ('P -> Ojs.t) ->
          ('R -> Ojs.t) -> ('E -> Ojs.t) -> ('P, 'R, 'E) t -> Ojs.t
      = fun (type __P) -> fun (type __R) -> fun (type __E) ->
      fun (__P_to_js : __P -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (__E_to_js : __E -> Ojs.t) -> fun (x168 : Ojs.t) -> x168
    let (get_parameter_structures : ('P, 'R, 'E) t -> any) =
      fun (x170 : ('P, 'R, 'E) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x170)
             "_parameterStructures")
    let (set_parameter_structures : ('P, 'R, 'E) t -> any -> unit) =
      fun (x174 : ('P, 'R, 'E) t) ->
        fun (x175 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x174)
            "_parameterStructures" (any_to_js x175)
    let (get__ : ('P, 'R, 'E) t -> ('P * 'R * 'E * EM.t) or_undefined) =
      fun (x179 : ('P, 'R, 'E) t) ->
        or_undefined_of_js
          (fun (x183 : Ojs.t) ->
             let x184 = x183 in
             ((Obj.magic (Ojs.array_get x184 0)),
               (Obj.magic (Ojs.array_get x184 1)),
               (Obj.magic (Ojs.array_get x184 2)),
               (EM.t_of_js (Ojs.array_get x184 3))))
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x179)
             "_")
    let (create :
      method_:string ->
        ?_parameterStructures:ParameterStructures.t -> unit -> ('P, 'R, 'E) t)
      =
      fun ~method_:(x185 : string) ->
        fun ?_parameterStructures:(x186 : ParameterStructures.t option) ->
          fun () ->
            t_of_js Obj.magic Obj.magic Obj.magic
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "RequestType")
                 (let x187 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x187 "push" [|(Ojs.string_to_js x185)|]);
                  (match x186 with
                   | Some x188 ->
                       ignore
                         (Ojs.call x187 "push"
                            [|(ParameterStructures.t_to_js x188)|])
                   | None -> ());
                  x187))
    let (get_parameter_structures : ('P, 'R, 'E) t -> ParameterStructures.t)
      =
      fun (x192 : ('P, 'R, 'E) t) ->
        ParameterStructures.t_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x192)
             "parameterStructures")
    let (cast : ('P, 'R, 'E) t -> AbstractMessageSignature.t) =
      fun (x196 : ('P, 'R, 'E) t) ->
        AbstractMessageSignature.t_of_js
          (t_to_js Obj.magic Obj.magic Obj.magic x196)
  end
module RequestType1 =
  struct
    type ('P1, 'R, 'E) t = Ojs.t
    let rec t_of_js :
      'P1 'R 'E .
        (Ojs.t -> 'P1) ->
          (Ojs.t -> 'R) -> (Ojs.t -> 'E) -> Ojs.t -> ('P1, 'R, 'E) t
      = fun (type __P1) -> fun (type __R) -> fun (type __E) ->
      fun (__P1_of_js : Ojs.t -> __P1) ->
        fun (__R_of_js : Ojs.t -> __R) ->
          fun (__E_of_js : Ojs.t -> __E) -> fun (x201 : Ojs.t) -> x201
    and t_to_js :
      'P1 'R 'E .
        ('P1 -> Ojs.t) ->
          ('R -> Ojs.t) -> ('E -> Ojs.t) -> ('P1, 'R, 'E) t -> Ojs.t
      = fun (type __P1) -> fun (type __R) -> fun (type __E) ->
      fun (__P1_to_js : __P1 -> Ojs.t) ->
        fun (__R_to_js : __R -> Ojs.t) ->
          fun (__E_to_js : __E -> Ojs.t) -> fun (x200 : Ojs.t) -> x200
    let (get_parameter_structures : ('P1, 'R, 'E) t -> any) =
      fun (x202 : ('P1, 'R, 'E) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x202)
             "_parameterStructures")
    let (set_parameter_structures : ('P1, 'R, 'E) t -> any -> unit) =
      fun (x206 : ('P1, 'R, 'E) t) ->
        fun (x207 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x206)
            "_parameterStructures" (any_to_js x207)
    let (get__ : ('P1, 'R, 'E) t -> ('P1 * 'R * 'E * EM.t) or_undefined) =
      fun (x211 : ('P1, 'R, 'E) t) ->
        or_undefined_of_js
          (fun (x215 : Ojs.t) ->
             let x216 = x215 in
             ((Obj.magic (Ojs.array_get x216 0)),
               (Obj.magic (Ojs.array_get x216 1)),
               (Obj.magic (Ojs.array_get x216 2)),
               (EM.t_of_js (Ojs.array_get x216 3))))
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x211)
             "_")
    let (create :
      method_:string ->
        ?_parameterStructures:ParameterStructures.t ->
          unit -> ('P1, 'R, 'E) t)
      =
      fun ~method_:(x217 : string) ->
        fun ?_parameterStructures:(x218 : ParameterStructures.t option) ->
          fun () ->
            t_of_js Obj.magic Obj.magic Obj.magic
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "RequestType1")
                 (let x219 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x219 "push" [|(Ojs.string_to_js x217)|]);
                  (match x218 with
                   | Some x220 ->
                       ignore
                         (Ojs.call x219 "push"
                            [|(ParameterStructures.t_to_js x220)|])
                   | None -> ());
                  x219))
    let (get_parameter_structures : ('P1, 'R, 'E) t -> ParameterStructures.t)
      =
      fun (x224 : ('P1, 'R, 'E) t) ->
        ParameterStructures.t_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x224)
             "parameterStructures")
    let (cast : ('P1, 'R, 'E) t -> AbstractMessageSignature.t) =
      fun (x228 : ('P1, 'R, 'E) t) ->
        AbstractMessageSignature.t_of_js
          (t_to_js Obj.magic Obj.magic Obj.magic x228)
  end
module RequestType2 =
  struct
    type ('P1, 'P2, 'R, 'E) t = Ojs.t
    let rec t_of_js :
      'P1 'P2 'R 'E .
        (Ojs.t -> 'P1) ->
          (Ojs.t -> 'P2) ->
            (Ojs.t -> 'R) -> (Ojs.t -> 'E) -> Ojs.t -> ('P1, 'P2, 'R, 'E) t
      = fun (type __P1) -> fun (type __P2) -> fun (type __R) -> fun (type
      __E) ->
      fun (__P1_of_js : Ojs.t -> __P1) ->
        fun (__P2_of_js : Ojs.t -> __P2) ->
          fun (__R_of_js : Ojs.t -> __R) ->
            fun (__E_of_js : Ojs.t -> __E) -> fun (x233 : Ojs.t) -> x233
    and t_to_js :
      'P1 'P2 'R 'E .
        ('P1 -> Ojs.t) ->
          ('P2 -> Ojs.t) ->
            ('R -> Ojs.t) -> ('E -> Ojs.t) -> ('P1, 'P2, 'R, 'E) t -> Ojs.t
      = fun (type __P1) -> fun (type __P2) -> fun (type __R) -> fun (type
      __E) ->
      fun (__P1_to_js : __P1 -> Ojs.t) ->
        fun (__P2_to_js : __P2 -> Ojs.t) ->
          fun (__R_to_js : __R -> Ojs.t) ->
            fun (__E_to_js : __E -> Ojs.t) -> fun (x232 : Ojs.t) -> x232
    let (get__ :
      ('P1, 'P2, 'R, 'E) t -> ('P1 * 'P2 * 'R * 'E * EM.t) or_undefined) =
      fun (x234 : ('P1, 'P2, 'R, 'E) t) ->
        or_undefined_of_js
          (fun (x239 : Ojs.t) ->
             let x240 = x239 in
             ((Obj.magic (Ojs.array_get x240 0)),
               (Obj.magic (Ojs.array_get x240 1)),
               (Obj.magic (Ojs.array_get x240 2)),
               (Obj.magic (Ojs.array_get x240 3)),
               (EM.t_of_js (Ojs.array_get x240 4))))
          (Ojs.get_prop_ascii
             (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic x234) "_")
    let (create : method_:string -> ('P1, 'P2, 'R, 'E) t) =
      fun ~method_:(x241 : string) ->
        t_of_js Obj.magic Obj.magic Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "RequestType2")
             [|(Ojs.string_to_js x241)|])
    let (cast : ('P1, 'P2, 'R, 'E) t -> AbstractMessageSignature.t) =
      fun (x246 : ('P1, 'P2, 'R, 'E) t) ->
        AbstractMessageSignature.t_of_js
          (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic x246)
  end
module RequestType3 =
  struct
    type ('P1, 'P2, 'P3, 'R, 'E) t = Ojs.t
    let rec t_of_js :
      'P1 'P2 'P3 'R 'E .
        (Ojs.t -> 'P1) ->
          (Ojs.t -> 'P2) ->
            (Ojs.t -> 'P3) ->
              (Ojs.t -> 'R) ->
                (Ojs.t -> 'E) -> Ojs.t -> ('P1, 'P2, 'P3, 'R, 'E) t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __R) -> fun (type __E) ->
      fun (__P1_of_js : Ojs.t -> __P1) ->
        fun (__P2_of_js : Ojs.t -> __P2) ->
          fun (__P3_of_js : Ojs.t -> __P3) ->
            fun (__R_of_js : Ojs.t -> __R) ->
              fun (__E_of_js : Ojs.t -> __E) -> fun (x252 : Ojs.t) -> x252
    and t_to_js :
      'P1 'P2 'P3 'R 'E .
        ('P1 -> Ojs.t) ->
          ('P2 -> Ojs.t) ->
            ('P3 -> Ojs.t) ->
              ('R -> Ojs.t) ->
                ('E -> Ojs.t) -> ('P1, 'P2, 'P3, 'R, 'E) t -> Ojs.t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __R) -> fun (type __E) ->
      fun (__P1_to_js : __P1 -> Ojs.t) ->
        fun (__P2_to_js : __P2 -> Ojs.t) ->
          fun (__P3_to_js : __P3 -> Ojs.t) ->
            fun (__R_to_js : __R -> Ojs.t) ->
              fun (__E_to_js : __E -> Ojs.t) -> fun (x251 : Ojs.t) -> x251
    let (get__ :
      ('P1, 'P2, 'P3, 'R, 'E) t ->
        ('P1 * 'P2 * 'P3 * 'R * 'E * EM.t) or_undefined)
      =
      fun (x253 : ('P1, 'P2, 'P3, 'R, 'E) t) ->
        or_undefined_of_js
          (fun (x259 : Ojs.t) ->
             let x260 = x259 in
             ((Obj.magic (Ojs.array_get x260 0)),
               (Obj.magic (Ojs.array_get x260 1)),
               (Obj.magic (Ojs.array_get x260 2)),
               (Obj.magic (Ojs.array_get x260 3)),
               (Obj.magic (Ojs.array_get x260 4)),
               (EM.t_of_js (Ojs.array_get x260 5))))
          (Ojs.get_prop_ascii
             (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic x253)
             "_")
    let (create : method_:string -> ('P1, 'P2, 'P3, 'R, 'E) t) =
      fun ~method_:(x261 : string) ->
        t_of_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "RequestType3")
             [|(Ojs.string_to_js x261)|])
    let (cast : ('P1, 'P2, 'P3, 'R, 'E) t -> AbstractMessageSignature.t) =
      fun (x267 : ('P1, 'P2, 'P3, 'R, 'E) t) ->
        AbstractMessageSignature.t_of_js
          (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic x267)
  end
module RequestType4 =
  struct
    type ('P1, 'P2, 'P3, 'P4, 'R, 'E) t = Ojs.t
    let rec t_of_js :
      'P1 'P2 'P3 'P4 'R 'E .
        (Ojs.t -> 'P1) ->
          (Ojs.t -> 'P2) ->
            (Ojs.t -> 'P3) ->
              (Ojs.t -> 'P4) ->
                (Ojs.t -> 'R) ->
                  (Ojs.t -> 'E) -> Ojs.t -> ('P1, 'P2, 'P3, 'P4, 'R, 'E) t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __R) -> fun (type __E) ->
      fun (__P1_of_js : Ojs.t -> __P1) ->
        fun (__P2_of_js : Ojs.t -> __P2) ->
          fun (__P3_of_js : Ojs.t -> __P3) ->
            fun (__P4_of_js : Ojs.t -> __P4) ->
              fun (__R_of_js : Ojs.t -> __R) ->
                fun (__E_of_js : Ojs.t -> __E) -> fun (x274 : Ojs.t) -> x274
    and t_to_js :
      'P1 'P2 'P3 'P4 'R 'E .
        ('P1 -> Ojs.t) ->
          ('P2 -> Ojs.t) ->
            ('P3 -> Ojs.t) ->
              ('P4 -> Ojs.t) ->
                ('R -> Ojs.t) ->
                  ('E -> Ojs.t) -> ('P1, 'P2, 'P3, 'P4, 'R, 'E) t -> Ojs.t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __R) -> fun (type __E) ->
      fun (__P1_to_js : __P1 -> Ojs.t) ->
        fun (__P2_to_js : __P2 -> Ojs.t) ->
          fun (__P3_to_js : __P3 -> Ojs.t) ->
            fun (__P4_to_js : __P4 -> Ojs.t) ->
              fun (__R_to_js : __R -> Ojs.t) ->
                fun (__E_to_js : __E -> Ojs.t) -> fun (x273 : Ojs.t) -> x273
    let (get__ :
      ('P1, 'P2, 'P3, 'P4, 'R, 'E) t ->
        ('P1 * 'P2 * 'P3 * 'P4 * 'R * 'E * EM.t) or_undefined)
      =
      fun (x275 : ('P1, 'P2, 'P3, 'P4, 'R, 'E) t) ->
        or_undefined_of_js
          (fun (x282 : Ojs.t) ->
             let x283 = x282 in
             ((Obj.magic (Ojs.array_get x283 0)),
               (Obj.magic (Ojs.array_get x283 1)),
               (Obj.magic (Ojs.array_get x283 2)),
               (Obj.magic (Ojs.array_get x283 3)),
               (Obj.magic (Ojs.array_get x283 4)),
               (Obj.magic (Ojs.array_get x283 5)),
               (EM.t_of_js (Ojs.array_get x283 6))))
          (Ojs.get_prop_ascii
             (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
                Obj.magic x275) "_")
    let (create : method_:string -> ('P1, 'P2, 'P3, 'P4, 'R, 'E) t) =
      fun ~method_:(x284 : string) ->
        t_of_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "RequestType4")
             [|(Ojs.string_to_js x284)|])
    let (cast : ('P1, 'P2, 'P3, 'P4, 'R, 'E) t -> AbstractMessageSignature.t)
      =
      fun (x291 : ('P1, 'P2, 'P3, 'P4, 'R, 'E) t) ->
        AbstractMessageSignature.t_of_js
          (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
             Obj.magic x291)
  end
module RequestType5 =
  struct
    type ('P1, 'P2, 'P3, 'P4, 'P5, 'R, 'E) t = Ojs.t
    let rec t_of_js :
      'P1 'P2 'P3 'P4 'P5 'R 'E .
        (Ojs.t -> 'P1) ->
          (Ojs.t -> 'P2) ->
            (Ojs.t -> 'P3) ->
              (Ojs.t -> 'P4) ->
                (Ojs.t -> 'P5) ->
                  (Ojs.t -> 'R) ->
                    (Ojs.t -> 'E) ->
                      Ojs.t -> ('P1, 'P2, 'P3, 'P4, 'P5, 'R, 'E) t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) -> fun (type __R) -> fun (type __E) ->
      fun (__P1_of_js : Ojs.t -> __P1) ->
        fun (__P2_of_js : Ojs.t -> __P2) ->
          fun (__P3_of_js : Ojs.t -> __P3) ->
            fun (__P4_of_js : Ojs.t -> __P4) ->
              fun (__P5_of_js : Ojs.t -> __P5) ->
                fun (__R_of_js : Ojs.t -> __R) ->
                  fun (__E_of_js : Ojs.t -> __E) ->
                    fun (x299 : Ojs.t) -> x299
    and t_to_js :
      'P1 'P2 'P3 'P4 'P5 'R 'E .
        ('P1 -> Ojs.t) ->
          ('P2 -> Ojs.t) ->
            ('P3 -> Ojs.t) ->
              ('P4 -> Ojs.t) ->
                ('P5 -> Ojs.t) ->
                  ('R -> Ojs.t) ->
                    ('E -> Ojs.t) ->
                      ('P1, 'P2, 'P3, 'P4, 'P5, 'R, 'E) t -> Ojs.t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) -> fun (type __R) -> fun (type __E) ->
      fun (__P1_to_js : __P1 -> Ojs.t) ->
        fun (__P2_to_js : __P2 -> Ojs.t) ->
          fun (__P3_to_js : __P3 -> Ojs.t) ->
            fun (__P4_to_js : __P4 -> Ojs.t) ->
              fun (__P5_to_js : __P5 -> Ojs.t) ->
                fun (__R_to_js : __R -> Ojs.t) ->
                  fun (__E_to_js : __E -> Ojs.t) ->
                    fun (x298 : Ojs.t) -> x298
    let (get__ :
      ('P1, 'P2, 'P3, 'P4, 'P5, 'R, 'E) t ->
        ('P1 * 'P2 * 'P3 * 'P4 * 'P5 * 'R * 'E * EM.t) or_undefined)
      =
      fun (x300 : ('P1, 'P2, 'P3, 'P4, 'P5, 'R, 'E) t) ->
        or_undefined_of_js
          (fun (x308 : Ojs.t) ->
             let x309 = x308 in
             ((Obj.magic (Ojs.array_get x309 0)),
               (Obj.magic (Ojs.array_get x309 1)),
               (Obj.magic (Ojs.array_get x309 2)),
               (Obj.magic (Ojs.array_get x309 3)),
               (Obj.magic (Ojs.array_get x309 4)),
               (Obj.magic (Ojs.array_get x309 5)),
               (Obj.magic (Ojs.array_get x309 6)),
               (EM.t_of_js (Ojs.array_get x309 7))))
          (Ojs.get_prop_ascii
             (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
                Obj.magic Obj.magic x300) "_")
    let (create : method_:string -> ('P1, 'P2, 'P3, 'P4, 'P5, 'R, 'E) t) =
      fun ~method_:(x310 : string) ->
        t_of_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
          Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "RequestType5")
             [|(Ojs.string_to_js x310)|])
    let (cast :
      ('P1, 'P2, 'P3, 'P4, 'P5, 'R, 'E) t -> AbstractMessageSignature.t) =
      fun (x318 : ('P1, 'P2, 'P3, 'P4, 'P5, 'R, 'E) t) ->
        AbstractMessageSignature.t_of_js
          (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
             Obj.magic Obj.magic x318)
  end
module RequestType6 =
  struct
    type ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'R, 'E) t = Ojs.t
    let rec t_of_js :
      'P1 'P2 'P3 'P4 'P5 'P6 'R 'E .
        (Ojs.t -> 'P1) ->
          (Ojs.t -> 'P2) ->
            (Ojs.t -> 'P3) ->
              (Ojs.t -> 'P4) ->
                (Ojs.t -> 'P5) ->
                  (Ojs.t -> 'P6) ->
                    (Ojs.t -> 'R) ->
                      (Ojs.t -> 'E) ->
                        Ojs.t -> ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'R, 'E) t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) -> fun (type __P6) -> fun (type __R) -> fun
      (type __E) ->
      fun (__P1_of_js : Ojs.t -> __P1) ->
        fun (__P2_of_js : Ojs.t -> __P2) ->
          fun (__P3_of_js : Ojs.t -> __P3) ->
            fun (__P4_of_js : Ojs.t -> __P4) ->
              fun (__P5_of_js : Ojs.t -> __P5) ->
                fun (__P6_of_js : Ojs.t -> __P6) ->
                  fun (__R_of_js : Ojs.t -> __R) ->
                    fun (__E_of_js : Ojs.t -> __E) ->
                      fun (x327 : Ojs.t) -> x327
    and t_to_js :
      'P1 'P2 'P3 'P4 'P5 'P6 'R 'E .
        ('P1 -> Ojs.t) ->
          ('P2 -> Ojs.t) ->
            ('P3 -> Ojs.t) ->
              ('P4 -> Ojs.t) ->
                ('P5 -> Ojs.t) ->
                  ('P6 -> Ojs.t) ->
                    ('R -> Ojs.t) ->
                      ('E -> Ojs.t) ->
                        ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'R, 'E) t -> Ojs.t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) -> fun (type __P6) -> fun (type __R) -> fun
      (type __E) ->
      fun (__P1_to_js : __P1 -> Ojs.t) ->
        fun (__P2_to_js : __P2 -> Ojs.t) ->
          fun (__P3_to_js : __P3 -> Ojs.t) ->
            fun (__P4_to_js : __P4 -> Ojs.t) ->
              fun (__P5_to_js : __P5 -> Ojs.t) ->
                fun (__P6_to_js : __P6 -> Ojs.t) ->
                  fun (__R_to_js : __R -> Ojs.t) ->
                    fun (__E_to_js : __E -> Ojs.t) ->
                      fun (x326 : Ojs.t) -> x326
    let (get__ :
      ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'R, 'E) t ->
        ('P1 * 'P2 * 'P3 * 'P4 * 'P5 * 'P6 * 'R * 'E * EM.t) or_undefined)
      =
      fun (x328 : ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'R, 'E) t) ->
        or_undefined_of_js
          (fun (x337 : Ojs.t) ->
             let x338 = x337 in
             ((Obj.magic (Ojs.array_get x338 0)),
               (Obj.magic (Ojs.array_get x338 1)),
               (Obj.magic (Ojs.array_get x338 2)),
               (Obj.magic (Ojs.array_get x338 3)),
               (Obj.magic (Ojs.array_get x338 4)),
               (Obj.magic (Ojs.array_get x338 5)),
               (Obj.magic (Ojs.array_get x338 6)),
               (Obj.magic (Ojs.array_get x338 7)),
               (EM.t_of_js (Ojs.array_get x338 8))))
          (Ojs.get_prop_ascii
             (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
                Obj.magic Obj.magic Obj.magic x328) "_")
    let (create : method_:string -> ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'R, 'E) t)
      =
      fun ~method_:(x339 : string) ->
        t_of_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
          Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "RequestType6")
             [|(Ojs.string_to_js x339)|])
    let (cast :
      ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'R, 'E) t -> AbstractMessageSignature.t)
      =
      fun (x348 : ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'R, 'E) t) ->
        AbstractMessageSignature.t_of_js
          (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
             Obj.magic Obj.magic Obj.magic x348)
  end
module RequestType7 =
  struct
    type ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'R, 'E) t = Ojs.t
    let rec t_of_js :
      'P1 'P2 'P3 'P4 'P5 'P6 'P7 'R 'E .
        (Ojs.t -> 'P1) ->
          (Ojs.t -> 'P2) ->
            (Ojs.t -> 'P3) ->
              (Ojs.t -> 'P4) ->
                (Ojs.t -> 'P5) ->
                  (Ojs.t -> 'P6) ->
                    (Ojs.t -> 'P7) ->
                      (Ojs.t -> 'R) ->
                        (Ojs.t -> 'E) ->
                          Ojs.t ->
                            ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'R, 'E) t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) -> fun (type __P6) -> fun (type __P7) -> fun
      (type __R) -> fun (type __E) ->
      fun (__P1_of_js : Ojs.t -> __P1) ->
        fun (__P2_of_js : Ojs.t -> __P2) ->
          fun (__P3_of_js : Ojs.t -> __P3) ->
            fun (__P4_of_js : Ojs.t -> __P4) ->
              fun (__P5_of_js : Ojs.t -> __P5) ->
                fun (__P6_of_js : Ojs.t -> __P6) ->
                  fun (__P7_of_js : Ojs.t -> __P7) ->
                    fun (__R_of_js : Ojs.t -> __R) ->
                      fun (__E_of_js : Ojs.t -> __E) ->
                        fun (x358 : Ojs.t) -> x358
    and t_to_js :
      'P1 'P2 'P3 'P4 'P5 'P6 'P7 'R 'E .
        ('P1 -> Ojs.t) ->
          ('P2 -> Ojs.t) ->
            ('P3 -> Ojs.t) ->
              ('P4 -> Ojs.t) ->
                ('P5 -> Ojs.t) ->
                  ('P6 -> Ojs.t) ->
                    ('P7 -> Ojs.t) ->
                      ('R -> Ojs.t) ->
                        ('E -> Ojs.t) ->
                          ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'R, 'E) t ->
                            Ojs.t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) -> fun (type __P6) -> fun (type __P7) -> fun
      (type __R) -> fun (type __E) ->
      fun (__P1_to_js : __P1 -> Ojs.t) ->
        fun (__P2_to_js : __P2 -> Ojs.t) ->
          fun (__P3_to_js : __P3 -> Ojs.t) ->
            fun (__P4_to_js : __P4 -> Ojs.t) ->
              fun (__P5_to_js : __P5 -> Ojs.t) ->
                fun (__P6_to_js : __P6 -> Ojs.t) ->
                  fun (__P7_to_js : __P7 -> Ojs.t) ->
                    fun (__R_to_js : __R -> Ojs.t) ->
                      fun (__E_to_js : __E -> Ojs.t) ->
                        fun (x357 : Ojs.t) -> x357
    let (get__ :
      ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'R, 'E) t ->
        ('P1 * 'P2 * 'P3 * 'P4 * 'P5 * 'P6 * 'P7 * 'R * 'E * EM.t)
          or_undefined)
      =
      fun (x359 : ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'R, 'E) t) ->
        or_undefined_of_js
          (fun (x369 : Ojs.t) ->
             let x370 = x369 in
             ((Obj.magic (Ojs.array_get x370 0)),
               (Obj.magic (Ojs.array_get x370 1)),
               (Obj.magic (Ojs.array_get x370 2)),
               (Obj.magic (Ojs.array_get x370 3)),
               (Obj.magic (Ojs.array_get x370 4)),
               (Obj.magic (Ojs.array_get x370 5)),
               (Obj.magic (Ojs.array_get x370 6)),
               (Obj.magic (Ojs.array_get x370 7)),
               (Obj.magic (Ojs.array_get x370 8)),
               (EM.t_of_js (Ojs.array_get x370 9))))
          (Ojs.get_prop_ascii
             (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
                Obj.magic Obj.magic Obj.magic Obj.magic x359) "_")
    let (create :
      method_:string -> ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'R, 'E) t) =
      fun ~method_:(x371 : string) ->
        t_of_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
          Obj.magic Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "RequestType7")
             [|(Ojs.string_to_js x371)|])
    let (cast :
      ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'R, 'E) t ->
        AbstractMessageSignature.t)
      =
      fun (x381 : ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'R, 'E) t) ->
        AbstractMessageSignature.t_of_js
          (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
             Obj.magic Obj.magic Obj.magic Obj.magic x381)
  end
module RequestType8 =
  struct
    type ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'R, 'E) t = Ojs.t
    let rec t_of_js :
      'P1 'P2 'P3 'P4 'P5 'P6 'P7 'P8 'R 'E .
        (Ojs.t -> 'P1) ->
          (Ojs.t -> 'P2) ->
            (Ojs.t -> 'P3) ->
              (Ojs.t -> 'P4) ->
                (Ojs.t -> 'P5) ->
                  (Ojs.t -> 'P6) ->
                    (Ojs.t -> 'P7) ->
                      (Ojs.t -> 'P8) ->
                        (Ojs.t -> 'R) ->
                          (Ojs.t -> 'E) ->
                            Ojs.t ->
                              ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 
                                'R, 'E) t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) -> fun (type __P6) -> fun (type __P7) -> fun
      (type __P8) -> fun (type __R) -> fun (type __E) ->
      fun (__P1_of_js : Ojs.t -> __P1) ->
        fun (__P2_of_js : Ojs.t -> __P2) ->
          fun (__P3_of_js : Ojs.t -> __P3) ->
            fun (__P4_of_js : Ojs.t -> __P4) ->
              fun (__P5_of_js : Ojs.t -> __P5) ->
                fun (__P6_of_js : Ojs.t -> __P6) ->
                  fun (__P7_of_js : Ojs.t -> __P7) ->
                    fun (__P8_of_js : Ojs.t -> __P8) ->
                      fun (__R_of_js : Ojs.t -> __R) ->
                        fun (__E_of_js : Ojs.t -> __E) ->
                          fun (x392 : Ojs.t) -> x392
    and t_to_js :
      'P1 'P2 'P3 'P4 'P5 'P6 'P7 'P8 'R 'E .
        ('P1 -> Ojs.t) ->
          ('P2 -> Ojs.t) ->
            ('P3 -> Ojs.t) ->
              ('P4 -> Ojs.t) ->
                ('P5 -> Ojs.t) ->
                  ('P6 -> Ojs.t) ->
                    ('P7 -> Ojs.t) ->
                      ('P8 -> Ojs.t) ->
                        ('R -> Ojs.t) ->
                          ('E -> Ojs.t) ->
                            ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 
                              'R, 'E) t -> Ojs.t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) -> fun (type __P6) -> fun (type __P7) -> fun
      (type __P8) -> fun (type __R) -> fun (type __E) ->
      fun (__P1_to_js : __P1 -> Ojs.t) ->
        fun (__P2_to_js : __P2 -> Ojs.t) ->
          fun (__P3_to_js : __P3 -> Ojs.t) ->
            fun (__P4_to_js : __P4 -> Ojs.t) ->
              fun (__P5_to_js : __P5 -> Ojs.t) ->
                fun (__P6_to_js : __P6 -> Ojs.t) ->
                  fun (__P7_to_js : __P7 -> Ojs.t) ->
                    fun (__P8_to_js : __P8 -> Ojs.t) ->
                      fun (__R_to_js : __R -> Ojs.t) ->
                        fun (__E_to_js : __E -> Ojs.t) ->
                          fun (x391 : Ojs.t) -> x391
    let (get__ :
      ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'R, 'E) t ->
        ('P1 * 'P2 * 'P3 * 'P4 * 'P5 * 'P6 * 'P7 * 'P8 * 'R * 'E * EM.t)
          or_undefined)
      =
      fun (x393 : ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'R, 'E) t) ->
        or_undefined_of_js
          (fun (x404 : Ojs.t) ->
             let x405 = x404 in
             ((Obj.magic (Ojs.array_get x405 0)),
               (Obj.magic (Ojs.array_get x405 1)),
               (Obj.magic (Ojs.array_get x405 2)),
               (Obj.magic (Ojs.array_get x405 3)),
               (Obj.magic (Ojs.array_get x405 4)),
               (Obj.magic (Ojs.array_get x405 5)),
               (Obj.magic (Ojs.array_get x405 6)),
               (Obj.magic (Ojs.array_get x405 7)),
               (Obj.magic (Ojs.array_get x405 8)),
               (Obj.magic (Ojs.array_get x405 9)),
               (EM.t_of_js (Ojs.array_get x405 10))))
          (Ojs.get_prop_ascii
             (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
                Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic x393) "_")
    let (create :
      method_:string -> ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'R, 'E) t) =
      fun ~method_:(x406 : string) ->
        t_of_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
          Obj.magic Obj.magic Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "RequestType8")
             [|(Ojs.string_to_js x406)|])
    let (cast :
      ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'R, 'E) t ->
        AbstractMessageSignature.t)
      =
      fun (x417 : ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'R, 'E) t) ->
        AbstractMessageSignature.t_of_js
          (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
             Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic x417)
  end
module RequestType9 =
  struct
    type ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'P9, 'R, 'E) t = Ojs.t
    let rec t_of_js :
      'P1 'P2 'P3 'P4 'P5 'P6 'P7 'P8 'P9 'R 'E .
        (Ojs.t -> 'P1) ->
          (Ojs.t -> 'P2) ->
            (Ojs.t -> 'P3) ->
              (Ojs.t -> 'P4) ->
                (Ojs.t -> 'P5) ->
                  (Ojs.t -> 'P6) ->
                    (Ojs.t -> 'P7) ->
                      (Ojs.t -> 'P8) ->
                        (Ojs.t -> 'P9) ->
                          (Ojs.t -> 'R) ->
                            (Ojs.t -> 'E) ->
                              Ojs.t ->
                                ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 
                                  'P9, 'R, 'E) t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) -> fun (type __P6) -> fun (type __P7) -> fun
      (type __P8) -> fun (type __P9) -> fun (type __R) -> fun (type __E) ->
      fun (__P1_of_js : Ojs.t -> __P1) ->
        fun (__P2_of_js : Ojs.t -> __P2) ->
          fun (__P3_of_js : Ojs.t -> __P3) ->
            fun (__P4_of_js : Ojs.t -> __P4) ->
              fun (__P5_of_js : Ojs.t -> __P5) ->
                fun (__P6_of_js : Ojs.t -> __P6) ->
                  fun (__P7_of_js : Ojs.t -> __P7) ->
                    fun (__P8_of_js : Ojs.t -> __P8) ->
                      fun (__P9_of_js : Ojs.t -> __P9) ->
                        fun (__R_of_js : Ojs.t -> __R) ->
                          fun (__E_of_js : Ojs.t -> __E) ->
                            fun (x429 : Ojs.t) -> x429
    and t_to_js :
      'P1 'P2 'P3 'P4 'P5 'P6 'P7 'P8 'P9 'R 'E .
        ('P1 -> Ojs.t) ->
          ('P2 -> Ojs.t) ->
            ('P3 -> Ojs.t) ->
              ('P4 -> Ojs.t) ->
                ('P5 -> Ojs.t) ->
                  ('P6 -> Ojs.t) ->
                    ('P7 -> Ojs.t) ->
                      ('P8 -> Ojs.t) ->
                        ('P9 -> Ojs.t) ->
                          ('R -> Ojs.t) ->
                            ('E -> Ojs.t) ->
                              ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 
                                'P9, 'R, 'E) t -> Ojs.t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) -> fun (type __P6) -> fun (type __P7) -> fun
      (type __P8) -> fun (type __P9) -> fun (type __R) -> fun (type __E) ->
      fun (__P1_to_js : __P1 -> Ojs.t) ->
        fun (__P2_to_js : __P2 -> Ojs.t) ->
          fun (__P3_to_js : __P3 -> Ojs.t) ->
            fun (__P4_to_js : __P4 -> Ojs.t) ->
              fun (__P5_to_js : __P5 -> Ojs.t) ->
                fun (__P6_to_js : __P6 -> Ojs.t) ->
                  fun (__P7_to_js : __P7 -> Ojs.t) ->
                    fun (__P8_to_js : __P8 -> Ojs.t) ->
                      fun (__P9_to_js : __P9 -> Ojs.t) ->
                        fun (__R_to_js : __R -> Ojs.t) ->
                          fun (__E_to_js : __E -> Ojs.t) ->
                            fun (x428 : Ojs.t) -> x428
    let (get__ :
      ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'P9, 'R, 'E) t ->
        ('P1 * 'P2 * 'P3 * 'P4 * 'P5 * 'P6 * 'P7 * 'P8 * 'P9 * 'R * 'E *
          EM.t) or_undefined)
      =
      fun (x430 : ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'P9, 'R, 'E) t) ->
        or_undefined_of_js
          (fun (x442 : Ojs.t) ->
             let x443 = x442 in
             ((Obj.magic (Ojs.array_get x443 0)),
               (Obj.magic (Ojs.array_get x443 1)),
               (Obj.magic (Ojs.array_get x443 2)),
               (Obj.magic (Ojs.array_get x443 3)),
               (Obj.magic (Ojs.array_get x443 4)),
               (Obj.magic (Ojs.array_get x443 5)),
               (Obj.magic (Ojs.array_get x443 6)),
               (Obj.magic (Ojs.array_get x443 7)),
               (Obj.magic (Ojs.array_get x443 8)),
               (Obj.magic (Ojs.array_get x443 9)),
               (Obj.magic (Ojs.array_get x443 10)),
               (EM.t_of_js (Ojs.array_get x443 11))))
          (Ojs.get_prop_ascii
             (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
                Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
                x430) "_")
    let (create :
      method_:string ->
        ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'P9, 'R, 'E) t)
      =
      fun ~method_:(x444 : string) ->
        t_of_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
          Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
          (Ojs.new_obj
             (Ojs.get_prop_ascii
                (Ojs.get_prop_ascii Ojs.global "NotificationMessage")
                "RequestType9") [|(Ojs.string_to_js x444)|])
    let (cast :
      ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'P9, 'R, 'E) t ->
        AbstractMessageSignature.t)
      =
      fun (x456 : ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'P9, 'R, 'E) t) ->
        AbstractMessageSignature.t_of_js
          (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
             Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic x456)
  end
module NotificationType =
  struct
    type 'P t = Ojs.t
    let rec t_of_js : 'P . (Ojs.t -> 'P) -> Ojs.t -> 'P t = fun (type __P) ->
      fun (__P_of_js : Ojs.t -> __P) -> fun (x469 : Ojs.t) -> x469
    and t_to_js : 'P . ('P -> Ojs.t) -> 'P t -> Ojs.t = fun (type __P) ->
      fun (__P_to_js : __P -> Ojs.t) -> fun (x468 : Ojs.t) -> x468
    let (get_parameter_structures : 'P t -> any) =
      fun (x470 : 'P t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic x470) "_parameterStructures")
    let (set_parameter_structures : 'P t -> any -> unit) =
      fun (x472 : 'P t) ->
        fun (x473 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x472) "_parameterStructures"
            (any_to_js x473)
    let (get__ : 'P t -> ('P * EM.t) or_undefined) =
      fun (x475 : 'P t) ->
        or_undefined_of_js
          (fun (x477 : Ojs.t) ->
             let x478 = x477 in
             ((Obj.magic (Ojs.array_get x478 0)),
               (EM.t_of_js (Ojs.array_get x478 1))))
          (Ojs.get_prop_ascii (t_to_js Obj.magic x475) "_")
    let (create :
      method_:string ->
        ?_parameterStructures:ParameterStructures.t -> unit -> 'P t)
      =
      fun ~method_:(x479 : string) ->
        fun ?_parameterStructures:(x480 : ParameterStructures.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "NotificationType")
                 (let x481 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x481 "push" [|(Ojs.string_to_js x479)|]);
                  (match x480 with
                   | Some x482 ->
                       ignore
                         (Ojs.call x481 "push"
                            [|(ParameterStructures.t_to_js x482)|])
                   | None -> ());
                  x481))
    let (get_parameter_structures : 'P t -> ParameterStructures.t) =
      fun (x484 : 'P t) ->
        ParameterStructures.t_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic x484) "parameterStructures")
    let (cast : 'P t -> AbstractMessageSignature.t) =
      fun (x486 : 'P t) ->
        AbstractMessageSignature.t_of_js (t_to_js Obj.magic x486)
  end
module NotificationType0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x489 : Ojs.t) -> x489
    and t_to_js : t -> Ojs.t = fun (x488 : Ojs.t) -> x488
    let (get__ : t -> EM.t or_undefined) =
      fun (x490 : t) ->
        or_undefined_of_js EM.t_of_js (Ojs.get_prop_ascii (t_to_js x490) "_")
    let (create : method_:string -> t) =
      fun ~method_:(x492 : string) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NotificationType0")
             [|(Ojs.string_to_js x492)|])
    let (cast : t -> AbstractMessageSignature.t) =
      fun (x493 : t) -> AbstractMessageSignature.t_of_js (t_to_js x493)
  end
module NotificationType1 =
  struct
    type 'P1 t = Ojs.t
    let rec t_of_js : 'P1 . (Ojs.t -> 'P1) -> Ojs.t -> 'P1 t = fun (type
      __P1) -> fun (__P1_of_js : Ojs.t -> __P1) -> fun (x495 : Ojs.t) -> x495
    and t_to_js : 'P1 . ('P1 -> Ojs.t) -> 'P1 t -> Ojs.t = fun (type __P1) ->
      fun (__P1_to_js : __P1 -> Ojs.t) -> fun (x494 : Ojs.t) -> x494
    let (get_parameter_structures : 'P1 t -> any) =
      fun (x496 : 'P1 t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic x496) "_parameterStructures")
    let (set_parameter_structures : 'P1 t -> any -> unit) =
      fun (x498 : 'P1 t) ->
        fun (x499 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic x498) "_parameterStructures"
            (any_to_js x499)
    let (get__ : 'P1 t -> ('P1 * EM.t) or_undefined) =
      fun (x501 : 'P1 t) ->
        or_undefined_of_js
          (fun (x503 : Ojs.t) ->
             let x504 = x503 in
             ((Obj.magic (Ojs.array_get x504 0)),
               (EM.t_of_js (Ojs.array_get x504 1))))
          (Ojs.get_prop_ascii (t_to_js Obj.magic x501) "_")
    let (create :
      method_:string ->
        ?_parameterStructures:ParameterStructures.t -> unit -> 'P1 t)
      =
      fun ~method_:(x505 : string) ->
        fun ?_parameterStructures:(x506 : ParameterStructures.t option) ->
          fun () ->
            t_of_js Obj.magic
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii Ojs.global "NotificationType1")
                 (let x507 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x507 "push" [|(Ojs.string_to_js x505)|]);
                  (match x506 with
                   | Some x508 ->
                       ignore
                         (Ojs.call x507 "push"
                            [|(ParameterStructures.t_to_js x508)|])
                   | None -> ());
                  x507))
    let (get_parameter_structures : 'P1 t -> ParameterStructures.t) =
      fun (x510 : 'P1 t) ->
        ParameterStructures.t_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic x510) "parameterStructures")
    let (cast : 'P1 t -> AbstractMessageSignature.t) =
      fun (x512 : 'P1 t) ->
        AbstractMessageSignature.t_of_js (t_to_js Obj.magic x512)
  end
module NotificationType2 =
  struct
    type ('P1, 'P2) t = Ojs.t
    let rec t_of_js :
      'P1 'P2 . (Ojs.t -> 'P1) -> (Ojs.t -> 'P2) -> Ojs.t -> ('P1, 'P2) t =
      fun (type __P1) -> fun (type __P2) ->
      fun (__P1_of_js : Ojs.t -> __P1) ->
        fun (__P2_of_js : Ojs.t -> __P2) -> fun (x515 : Ojs.t) -> x515
    and t_to_js :
      'P1 'P2 . ('P1 -> Ojs.t) -> ('P2 -> Ojs.t) -> ('P1, 'P2) t -> Ojs.t =
      fun (type __P1) -> fun (type __P2) ->
      fun (__P1_to_js : __P1 -> Ojs.t) ->
        fun (__P2_to_js : __P2 -> Ojs.t) -> fun (x514 : Ojs.t) -> x514
    let (get__ : ('P1, 'P2) t -> ('P1 * 'P2 * EM.t) or_undefined) =
      fun (x516 : ('P1, 'P2) t) ->
        or_undefined_of_js
          (fun (x519 : Ojs.t) ->
             let x520 = x519 in
             ((Obj.magic (Ojs.array_get x520 0)),
               (Obj.magic (Ojs.array_get x520 1)),
               (EM.t_of_js (Ojs.array_get x520 2))))
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x516) "_")
    let (create : method_:string -> ('P1, 'P2) t) =
      fun ~method_:(x521 : string) ->
        t_of_js Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NotificationType2")
             [|(Ojs.string_to_js x521)|])
    let (cast : ('P1, 'P2) t -> AbstractMessageSignature.t) =
      fun (x524 : ('P1, 'P2) t) ->
        AbstractMessageSignature.t_of_js (t_to_js Obj.magic Obj.magic x524)
  end
module NotificationType3 =
  struct
    type ('P1, 'P2, 'P3) t = Ojs.t
    let rec t_of_js :
      'P1 'P2 'P3 .
        (Ojs.t -> 'P1) ->
          (Ojs.t -> 'P2) -> (Ojs.t -> 'P3) -> Ojs.t -> ('P1, 'P2, 'P3) t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) ->
      fun (__P1_of_js : Ojs.t -> __P1) ->
        fun (__P2_of_js : Ojs.t -> __P2) ->
          fun (__P3_of_js : Ojs.t -> __P3) -> fun (x528 : Ojs.t) -> x528
    and t_to_js :
      'P1 'P2 'P3 .
        ('P1 -> Ojs.t) ->
          ('P2 -> Ojs.t) -> ('P3 -> Ojs.t) -> ('P1, 'P2, 'P3) t -> Ojs.t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) ->
      fun (__P1_to_js : __P1 -> Ojs.t) ->
        fun (__P2_to_js : __P2 -> Ojs.t) ->
          fun (__P3_to_js : __P3 -> Ojs.t) -> fun (x527 : Ojs.t) -> x527
    let (get__ : ('P1, 'P2, 'P3) t -> ('P1 * 'P2 * 'P3 * EM.t) or_undefined)
      =
      fun (x529 : ('P1, 'P2, 'P3) t) ->
        or_undefined_of_js
          (fun (x533 : Ojs.t) ->
             let x534 = x533 in
             ((Obj.magic (Ojs.array_get x534 0)),
               (Obj.magic (Ojs.array_get x534 1)),
               (Obj.magic (Ojs.array_get x534 2)),
               (EM.t_of_js (Ojs.array_get x534 3))))
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x529)
             "_")
    let (create : method_:string -> ('P1, 'P2, 'P3) t) =
      fun ~method_:(x535 : string) ->
        t_of_js Obj.magic Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NotificationType3")
             [|(Ojs.string_to_js x535)|])
    let (cast : ('P1, 'P2, 'P3) t -> AbstractMessageSignature.t) =
      fun (x539 : ('P1, 'P2, 'P3) t) ->
        AbstractMessageSignature.t_of_js
          (t_to_js Obj.magic Obj.magic Obj.magic x539)
  end
module NotificationType4 =
  struct
    type ('P1, 'P2, 'P3, 'P4) t = Ojs.t
    let rec t_of_js :
      'P1 'P2 'P3 'P4 .
        (Ojs.t -> 'P1) ->
          (Ojs.t -> 'P2) ->
            (Ojs.t -> 'P3) ->
              (Ojs.t -> 'P4) -> Ojs.t -> ('P1, 'P2, 'P3, 'P4) t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) ->
      fun (__P1_of_js : Ojs.t -> __P1) ->
        fun (__P2_of_js : Ojs.t -> __P2) ->
          fun (__P3_of_js : Ojs.t -> __P3) ->
            fun (__P4_of_js : Ojs.t -> __P4) -> fun (x544 : Ojs.t) -> x544
    and t_to_js :
      'P1 'P2 'P3 'P4 .
        ('P1 -> Ojs.t) ->
          ('P2 -> Ojs.t) ->
            ('P3 -> Ojs.t) ->
              ('P4 -> Ojs.t) -> ('P1, 'P2, 'P3, 'P4) t -> Ojs.t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) ->
      fun (__P1_to_js : __P1 -> Ojs.t) ->
        fun (__P2_to_js : __P2 -> Ojs.t) ->
          fun (__P3_to_js : __P3 -> Ojs.t) ->
            fun (__P4_to_js : __P4 -> Ojs.t) -> fun (x543 : Ojs.t) -> x543
    let (get__ :
      ('P1, 'P2, 'P3, 'P4) t -> ('P1 * 'P2 * 'P3 * 'P4 * EM.t) or_undefined)
      =
      fun (x545 : ('P1, 'P2, 'P3, 'P4) t) ->
        or_undefined_of_js
          (fun (x550 : Ojs.t) ->
             let x551 = x550 in
             ((Obj.magic (Ojs.array_get x551 0)),
               (Obj.magic (Ojs.array_get x551 1)),
               (Obj.magic (Ojs.array_get x551 2)),
               (Obj.magic (Ojs.array_get x551 3)),
               (EM.t_of_js (Ojs.array_get x551 4))))
          (Ojs.get_prop_ascii
             (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic x545) "_")
    let (create : method_:string -> ('P1, 'P2, 'P3, 'P4) t) =
      fun ~method_:(x552 : string) ->
        t_of_js Obj.magic Obj.magic Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NotificationType4")
             [|(Ojs.string_to_js x552)|])
    let (cast : ('P1, 'P2, 'P3, 'P4) t -> AbstractMessageSignature.t) =
      fun (x557 : ('P1, 'P2, 'P3, 'P4) t) ->
        AbstractMessageSignature.t_of_js
          (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic x557)
  end
module NotificationType5 =
  struct
    type ('P1, 'P2, 'P3, 'P4, 'P5) t = Ojs.t
    let rec t_of_js :
      'P1 'P2 'P3 'P4 'P5 .
        (Ojs.t -> 'P1) ->
          (Ojs.t -> 'P2) ->
            (Ojs.t -> 'P3) ->
              (Ojs.t -> 'P4) ->
                (Ojs.t -> 'P5) -> Ojs.t -> ('P1, 'P2, 'P3, 'P4, 'P5) t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) ->
      fun (__P1_of_js : Ojs.t -> __P1) ->
        fun (__P2_of_js : Ojs.t -> __P2) ->
          fun (__P3_of_js : Ojs.t -> __P3) ->
            fun (__P4_of_js : Ojs.t -> __P4) ->
              fun (__P5_of_js : Ojs.t -> __P5) -> fun (x563 : Ojs.t) -> x563
    and t_to_js :
      'P1 'P2 'P3 'P4 'P5 .
        ('P1 -> Ojs.t) ->
          ('P2 -> Ojs.t) ->
            ('P3 -> Ojs.t) ->
              ('P4 -> Ojs.t) ->
                ('P5 -> Ojs.t) -> ('P1, 'P2, 'P3, 'P4, 'P5) t -> Ojs.t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) ->
      fun (__P1_to_js : __P1 -> Ojs.t) ->
        fun (__P2_to_js : __P2 -> Ojs.t) ->
          fun (__P3_to_js : __P3 -> Ojs.t) ->
            fun (__P4_to_js : __P4 -> Ojs.t) ->
              fun (__P5_to_js : __P5 -> Ojs.t) -> fun (x562 : Ojs.t) -> x562
    let (get__ :
      ('P1, 'P2, 'P3, 'P4, 'P5) t ->
        ('P1 * 'P2 * 'P3 * 'P4 * 'P5 * EM.t) or_undefined)
      =
      fun (x564 : ('P1, 'P2, 'P3, 'P4, 'P5) t) ->
        or_undefined_of_js
          (fun (x570 : Ojs.t) ->
             let x571 = x570 in
             ((Obj.magic (Ojs.array_get x571 0)),
               (Obj.magic (Ojs.array_get x571 1)),
               (Obj.magic (Ojs.array_get x571 2)),
               (Obj.magic (Ojs.array_get x571 3)),
               (Obj.magic (Ojs.array_get x571 4)),
               (EM.t_of_js (Ojs.array_get x571 5))))
          (Ojs.get_prop_ascii
             (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic x564)
             "_")
    let (create : method_:string -> ('P1, 'P2, 'P3, 'P4, 'P5) t) =
      fun ~method_:(x572 : string) ->
        t_of_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NotificationType5")
             [|(Ojs.string_to_js x572)|])
    let (cast : ('P1, 'P2, 'P3, 'P4, 'P5) t -> AbstractMessageSignature.t) =
      fun (x578 : ('P1, 'P2, 'P3, 'P4, 'P5) t) ->
        AbstractMessageSignature.t_of_js
          (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic x578)
  end
module NotificationType6 =
  struct
    type ('P1, 'P2, 'P3, 'P4, 'P5, 'P6) t = Ojs.t
    let rec t_of_js :
      'P1 'P2 'P3 'P4 'P5 'P6 .
        (Ojs.t -> 'P1) ->
          (Ojs.t -> 'P2) ->
            (Ojs.t -> 'P3) ->
              (Ojs.t -> 'P4) ->
                (Ojs.t -> 'P5) ->
                  (Ojs.t -> 'P6) -> Ojs.t -> ('P1, 'P2, 'P3, 'P4, 'P5, 'P6) t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) -> fun (type __P6) ->
      fun (__P1_of_js : Ojs.t -> __P1) ->
        fun (__P2_of_js : Ojs.t -> __P2) ->
          fun (__P3_of_js : Ojs.t -> __P3) ->
            fun (__P4_of_js : Ojs.t -> __P4) ->
              fun (__P5_of_js : Ojs.t -> __P5) ->
                fun (__P6_of_js : Ojs.t -> __P6) ->
                  fun (x585 : Ojs.t) -> x585
    and t_to_js :
      'P1 'P2 'P3 'P4 'P5 'P6 .
        ('P1 -> Ojs.t) ->
          ('P2 -> Ojs.t) ->
            ('P3 -> Ojs.t) ->
              ('P4 -> Ojs.t) ->
                ('P5 -> Ojs.t) ->
                  ('P6 -> Ojs.t) -> ('P1, 'P2, 'P3, 'P4, 'P5, 'P6) t -> Ojs.t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) -> fun (type __P6) ->
      fun (__P1_to_js : __P1 -> Ojs.t) ->
        fun (__P2_to_js : __P2 -> Ojs.t) ->
          fun (__P3_to_js : __P3 -> Ojs.t) ->
            fun (__P4_to_js : __P4 -> Ojs.t) ->
              fun (__P5_to_js : __P5 -> Ojs.t) ->
                fun (__P6_to_js : __P6 -> Ojs.t) ->
                  fun (x584 : Ojs.t) -> x584
    let (get__ :
      ('P1, 'P2, 'P3, 'P4, 'P5, 'P6) t ->
        ('P1 * 'P2 * 'P3 * 'P4 * 'P5 * 'P6 * EM.t) or_undefined)
      =
      fun (x586 : ('P1, 'P2, 'P3, 'P4, 'P5, 'P6) t) ->
        or_undefined_of_js
          (fun (x593 : Ojs.t) ->
             let x594 = x593 in
             ((Obj.magic (Ojs.array_get x594 0)),
               (Obj.magic (Ojs.array_get x594 1)),
               (Obj.magic (Ojs.array_get x594 2)),
               (Obj.magic (Ojs.array_get x594 3)),
               (Obj.magic (Ojs.array_get x594 4)),
               (Obj.magic (Ojs.array_get x594 5)),
               (EM.t_of_js (Ojs.array_get x594 6))))
          (Ojs.get_prop_ascii
             (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
                Obj.magic x586) "_")
    let (create : method_:string -> ('P1, 'P2, 'P3, 'P4, 'P5, 'P6) t) =
      fun ~method_:(x595 : string) ->
        t_of_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NotificationType6")
             [|(Ojs.string_to_js x595)|])
    let (cast :
      ('P1, 'P2, 'P3, 'P4, 'P5, 'P6) t -> AbstractMessageSignature.t) =
      fun (x602 : ('P1, 'P2, 'P3, 'P4, 'P5, 'P6) t) ->
        AbstractMessageSignature.t_of_js
          (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
             Obj.magic x602)
  end
module NotificationType7 =
  struct
    type ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7) t = Ojs.t
    let rec t_of_js :
      'P1 'P2 'P3 'P4 'P5 'P6 'P7 .
        (Ojs.t -> 'P1) ->
          (Ojs.t -> 'P2) ->
            (Ojs.t -> 'P3) ->
              (Ojs.t -> 'P4) ->
                (Ojs.t -> 'P5) ->
                  (Ojs.t -> 'P6) ->
                    (Ojs.t -> 'P7) ->
                      Ojs.t -> ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7) t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) -> fun (type __P6) -> fun (type __P7) ->
      fun (__P1_of_js : Ojs.t -> __P1) ->
        fun (__P2_of_js : Ojs.t -> __P2) ->
          fun (__P3_of_js : Ojs.t -> __P3) ->
            fun (__P4_of_js : Ojs.t -> __P4) ->
              fun (__P5_of_js : Ojs.t -> __P5) ->
                fun (__P6_of_js : Ojs.t -> __P6) ->
                  fun (__P7_of_js : Ojs.t -> __P7) ->
                    fun (x610 : Ojs.t) -> x610
    and t_to_js :
      'P1 'P2 'P3 'P4 'P5 'P6 'P7 .
        ('P1 -> Ojs.t) ->
          ('P2 -> Ojs.t) ->
            ('P3 -> Ojs.t) ->
              ('P4 -> Ojs.t) ->
                ('P5 -> Ojs.t) ->
                  ('P6 -> Ojs.t) ->
                    ('P7 -> Ojs.t) ->
                      ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7) t -> Ojs.t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) -> fun (type __P6) -> fun (type __P7) ->
      fun (__P1_to_js : __P1 -> Ojs.t) ->
        fun (__P2_to_js : __P2 -> Ojs.t) ->
          fun (__P3_to_js : __P3 -> Ojs.t) ->
            fun (__P4_to_js : __P4 -> Ojs.t) ->
              fun (__P5_to_js : __P5 -> Ojs.t) ->
                fun (__P6_to_js : __P6 -> Ojs.t) ->
                  fun (__P7_to_js : __P7 -> Ojs.t) ->
                    fun (x609 : Ojs.t) -> x609
    let (get__ :
      ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7) t ->
        ('P1 * 'P2 * 'P3 * 'P4 * 'P5 * 'P6 * 'P7 * EM.t) or_undefined)
      =
      fun (x611 : ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7) t) ->
        or_undefined_of_js
          (fun (x619 : Ojs.t) ->
             let x620 = x619 in
             ((Obj.magic (Ojs.array_get x620 0)),
               (Obj.magic (Ojs.array_get x620 1)),
               (Obj.magic (Ojs.array_get x620 2)),
               (Obj.magic (Ojs.array_get x620 3)),
               (Obj.magic (Ojs.array_get x620 4)),
               (Obj.magic (Ojs.array_get x620 5)),
               (Obj.magic (Ojs.array_get x620 6)),
               (EM.t_of_js (Ojs.array_get x620 7))))
          (Ojs.get_prop_ascii
             (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
                Obj.magic Obj.magic x611) "_")
    let (create : method_:string -> ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7) t) =
      fun ~method_:(x621 : string) ->
        t_of_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
          Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NotificationType7")
             [|(Ojs.string_to_js x621)|])
    let (cast :
      ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7) t -> AbstractMessageSignature.t) =
      fun (x629 : ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7) t) ->
        AbstractMessageSignature.t_of_js
          (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
             Obj.magic Obj.magic x629)
  end
module NotificationType8 =
  struct
    type ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8) t = Ojs.t
    let rec t_of_js :
      'P1 'P2 'P3 'P4 'P5 'P6 'P7 'P8 .
        (Ojs.t -> 'P1) ->
          (Ojs.t -> 'P2) ->
            (Ojs.t -> 'P3) ->
              (Ojs.t -> 'P4) ->
                (Ojs.t -> 'P5) ->
                  (Ojs.t -> 'P6) ->
                    (Ojs.t -> 'P7) ->
                      (Ojs.t -> 'P8) ->
                        Ojs.t -> ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8) t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) -> fun (type __P6) -> fun (type __P7) -> fun
      (type __P8) ->
      fun (__P1_of_js : Ojs.t -> __P1) ->
        fun (__P2_of_js : Ojs.t -> __P2) ->
          fun (__P3_of_js : Ojs.t -> __P3) ->
            fun (__P4_of_js : Ojs.t -> __P4) ->
              fun (__P5_of_js : Ojs.t -> __P5) ->
                fun (__P6_of_js : Ojs.t -> __P6) ->
                  fun (__P7_of_js : Ojs.t -> __P7) ->
                    fun (__P8_of_js : Ojs.t -> __P8) ->
                      fun (x638 : Ojs.t) -> x638
    and t_to_js :
      'P1 'P2 'P3 'P4 'P5 'P6 'P7 'P8 .
        ('P1 -> Ojs.t) ->
          ('P2 -> Ojs.t) ->
            ('P3 -> Ojs.t) ->
              ('P4 -> Ojs.t) ->
                ('P5 -> Ojs.t) ->
                  ('P6 -> Ojs.t) ->
                    ('P7 -> Ojs.t) ->
                      ('P8 -> Ojs.t) ->
                        ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8) t -> Ojs.t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) -> fun (type __P6) -> fun (type __P7) -> fun
      (type __P8) ->
      fun (__P1_to_js : __P1 -> Ojs.t) ->
        fun (__P2_to_js : __P2 -> Ojs.t) ->
          fun (__P3_to_js : __P3 -> Ojs.t) ->
            fun (__P4_to_js : __P4 -> Ojs.t) ->
              fun (__P5_to_js : __P5 -> Ojs.t) ->
                fun (__P6_to_js : __P6 -> Ojs.t) ->
                  fun (__P7_to_js : __P7 -> Ojs.t) ->
                    fun (__P8_to_js : __P8 -> Ojs.t) ->
                      fun (x637 : Ojs.t) -> x637
    let (get__ :
      ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8) t ->
        ('P1 * 'P2 * 'P3 * 'P4 * 'P5 * 'P6 * 'P7 * 'P8 * EM.t) or_undefined)
      =
      fun (x639 : ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8) t) ->
        or_undefined_of_js
          (fun (x648 : Ojs.t) ->
             let x649 = x648 in
             ((Obj.magic (Ojs.array_get x649 0)),
               (Obj.magic (Ojs.array_get x649 1)),
               (Obj.magic (Ojs.array_get x649 2)),
               (Obj.magic (Ojs.array_get x649 3)),
               (Obj.magic (Ojs.array_get x649 4)),
               (Obj.magic (Ojs.array_get x649 5)),
               (Obj.magic (Ojs.array_get x649 6)),
               (Obj.magic (Ojs.array_get x649 7)),
               (EM.t_of_js (Ojs.array_get x649 8))))
          (Ojs.get_prop_ascii
             (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
                Obj.magic Obj.magic Obj.magic x639) "_")
    let (create :
      method_:string -> ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8) t) =
      fun ~method_:(x650 : string) ->
        t_of_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
          Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NotificationType8")
             [|(Ojs.string_to_js x650)|])
    let (cast :
      ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8) t ->
        AbstractMessageSignature.t)
      =
      fun (x659 : ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8) t) ->
        AbstractMessageSignature.t_of_js
          (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
             Obj.magic Obj.magic Obj.magic x659)
  end
module NotificationType9 =
  struct
    type ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'P9) t = Ojs.t
    let rec t_of_js :
      'P1 'P2 'P3 'P4 'P5 'P6 'P7 'P8 'P9 .
        (Ojs.t -> 'P1) ->
          (Ojs.t -> 'P2) ->
            (Ojs.t -> 'P3) ->
              (Ojs.t -> 'P4) ->
                (Ojs.t -> 'P5) ->
                  (Ojs.t -> 'P6) ->
                    (Ojs.t -> 'P7) ->
                      (Ojs.t -> 'P8) ->
                        (Ojs.t -> 'P9) ->
                          Ojs.t ->
                            ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'P9) t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) -> fun (type __P6) -> fun (type __P7) -> fun
      (type __P8) -> fun (type __P9) ->
      fun (__P1_of_js : Ojs.t -> __P1) ->
        fun (__P2_of_js : Ojs.t -> __P2) ->
          fun (__P3_of_js : Ojs.t -> __P3) ->
            fun (__P4_of_js : Ojs.t -> __P4) ->
              fun (__P5_of_js : Ojs.t -> __P5) ->
                fun (__P6_of_js : Ojs.t -> __P6) ->
                  fun (__P7_of_js : Ojs.t -> __P7) ->
                    fun (__P8_of_js : Ojs.t -> __P8) ->
                      fun (__P9_of_js : Ojs.t -> __P9) ->
                        fun (x669 : Ojs.t) -> x669
    and t_to_js :
      'P1 'P2 'P3 'P4 'P5 'P6 'P7 'P8 'P9 .
        ('P1 -> Ojs.t) ->
          ('P2 -> Ojs.t) ->
            ('P3 -> Ojs.t) ->
              ('P4 -> Ojs.t) ->
                ('P5 -> Ojs.t) ->
                  ('P6 -> Ojs.t) ->
                    ('P7 -> Ojs.t) ->
                      ('P8 -> Ojs.t) ->
                        ('P9 -> Ojs.t) ->
                          ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'P9) t ->
                            Ojs.t
      = fun (type __P1) -> fun (type __P2) -> fun (type __P3) -> fun (type
      __P4) -> fun (type __P5) -> fun (type __P6) -> fun (type __P7) -> fun
      (type __P8) -> fun (type __P9) ->
      fun (__P1_to_js : __P1 -> Ojs.t) ->
        fun (__P2_to_js : __P2 -> Ojs.t) ->
          fun (__P3_to_js : __P3 -> Ojs.t) ->
            fun (__P4_to_js : __P4 -> Ojs.t) ->
              fun (__P5_to_js : __P5 -> Ojs.t) ->
                fun (__P6_to_js : __P6 -> Ojs.t) ->
                  fun (__P7_to_js : __P7 -> Ojs.t) ->
                    fun (__P8_to_js : __P8 -> Ojs.t) ->
                      fun (__P9_to_js : __P9 -> Ojs.t) ->
                        fun (x668 : Ojs.t) -> x668
    let (get__ :
      ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'P9) t ->
        ('P1 * 'P2 * 'P3 * 'P4 * 'P5 * 'P6 * 'P7 * 'P8 * 'P9 * EM.t)
          or_undefined)
      =
      fun (x670 : ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'P9) t) ->
        or_undefined_of_js
          (fun (x680 : Ojs.t) ->
             let x681 = x680 in
             ((Obj.magic (Ojs.array_get x681 0)),
               (Obj.magic (Ojs.array_get x681 1)),
               (Obj.magic (Ojs.array_get x681 2)),
               (Obj.magic (Ojs.array_get x681 3)),
               (Obj.magic (Ojs.array_get x681 4)),
               (Obj.magic (Ojs.array_get x681 5)),
               (Obj.magic (Ojs.array_get x681 6)),
               (Obj.magic (Ojs.array_get x681 7)),
               (Obj.magic (Ojs.array_get x681 8)),
               (EM.t_of_js (Ojs.array_get x681 9))))
          (Ojs.get_prop_ascii
             (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
                Obj.magic Obj.magic Obj.magic Obj.magic x670) "_")
    let (create :
      method_:string -> ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'P9) t) =
      fun ~method_:(x682 : string) ->
        t_of_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
          Obj.magic Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "NotificationType9")
             [|(Ojs.string_to_js x682)|])
    let (cast :
      ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'P9) t ->
        AbstractMessageSignature.t)
      =
      fun (x692 : ('P1, 'P2, 'P3, 'P4, 'P5, 'P6, 'P7, 'P8, 'P9) t) ->
        AbstractMessageSignature.t_of_js
          (t_to_js Obj.magic Obj.magic Obj.magic Obj.magic Obj.magic
             Obj.magic Obj.magic Obj.magic Obj.magic x692)
  end
let (is_request_message : message:Message.t or_undefined -> bool) =
  fun ~message:(x702 : Message.t or_undefined) ->
    Ojs.bool_of_js
      (Ojs.call Ojs.global "isRequestMessage"
         [|(or_undefined_to_js Message.t_to_js x702)|])
let (is_notification_message : message:Message.t or_undefined -> bool) =
  fun ~message:(x704 : Message.t or_undefined) ->
    Ojs.bool_of_js
      (Ojs.call Ojs.global "isNotificationMessage"
         [|(or_undefined_to_js Message.t_to_js x704)|])
let (is_response_message : message:Message.t or_undefined -> bool) =
  fun ~message:(x706 : Message.t or_undefined) ->
    Ojs.bool_of_js
      (Ojs.call Ojs.global "isResponseMessage"
         [|(or_undefined_to_js Message.t_to_js x706)|])
