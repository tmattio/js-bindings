[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
include struct include Vscode_jsonrpc_api end
module IPCMessageReader =
  struct
    include struct include AbstractMessageReader end
    let (get_process : t -> any) =
      fun (x1 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x1) "process")
    let (set_process : t -> any -> unit) =
      fun (x2 : t) ->
        fun (x3 : any) ->
          Ojs.set_prop_ascii (t_to_js x2) "process" (any_to_js x3)
    let (create :
      process:(Node.Child_process.ChildProcess.t, Node.Process.Process.t)
        union2 -> t)
      =
      fun
        ~process:(x4 :
                   (Node.Child_process.ChildProcess.t,
                     Node.Process.Process.t) union2)
        ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii
                (Ojs.get_prop_ascii Ojs.global
                   "__LIB__VSCODE_JSONRPC__IMPORTS") "IPCMessageReader")
             [|(union2_to_js Node.Child_process.ChildProcess.t_to_js
                  Node.Process.Process.t_to_js x4)|])
    let (listen : t -> callback:DataCallback.t -> Disposable.t) =
      fun (x8 : t) ->
        fun ~callback:(x7 : DataCallback.t) ->
          Disposable.t_of_js
            (Ojs.call (t_to_js x8) "listen" [|(DataCallback.t_to_js x7)|])
  end
module IPCMessageWriter =
  struct
    include struct include AbstractMessageWriter end
    let (get_process : t -> any) =
      fun (x9 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x9) "process")
    let (set_process : t -> any -> unit) =
      fun (x10 : t) ->
        fun (x11 : any) ->
          Ojs.set_prop_ascii (t_to_js x10) "process" (any_to_js x11)
    let (get_error_count : t -> any) =
      fun (x12 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x12) "errorCount")
    let (set_error_count : t -> any -> unit) =
      fun (x13 : t) ->
        fun (x14 : any) ->
          Ojs.set_prop_ascii (t_to_js x13) "errorCount" (any_to_js x14)
    let (create :
      process:(Node.Child_process.ChildProcess.t, Node.Process.Process.t)
        union2 -> t)
      =
      fun
        ~process:(x15 :
                   (Node.Child_process.ChildProcess.t,
                     Node.Process.Process.t) union2)
        ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii
                (Ojs.get_prop_ascii Ojs.global
                   "__LIB__VSCODE_JSONRPC__IMPORTS") "IPCMessageWriter")
             [|(union2_to_js Node.Child_process.ChildProcess.t_to_js
                  Node.Process.Process.t_to_js x15)|])
    let (write : t -> msg:Message.t -> unit Promise.t) =
      fun (x19 : t) ->
        fun ~msg:(x18 : Message.t) ->
          Promise.t_of_js Ojs.unit_of_js
            (Ojs.call (t_to_js x19) "write" [|(Message.t_to_js x18)|])
    let (get_handle_error : t -> any) =
      fun (x21 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x21) "handleError")
    let (set_handle_error : t -> any -> unit) =
      fun (x22 : t) ->
        fun (x23 : any) ->
          Ojs.set_prop_ascii (t_to_js x22) "handleError" (any_to_js x23)
    let (end_ : t -> unit) =
      fun (x24 : t) -> ignore (Ojs.call (t_to_js x24) "end" [||])
    let (cast' : t -> MessageWriter.t) =
      fun (x25 : t) -> MessageWriter.t_of_js (t_to_js x25)
  end
module SocketMessageReader =
  struct
    include struct include ReadableStreamMessageReader end
    let (create :
      Node.Net.Socket.t ->
        ?encoding:Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t -> unit -> t)
      =
      fun (x26 : Node.Net.Socket.t) ->
        fun
          ?encoding:(x27 :
                      Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t option)
          ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global
                       "__LIB__VSCODE_JSONRPC__IMPORTS")
                    "SocketMessageReader")
                 (let x28 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x28 "push" [|(Node.Net.Socket.t_to_js x26)|]);
                  (match x27 with
                   | Some x29 ->
                       ignore
                         (Ojs.call x28 "push"
                            [|(Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_to_js
                                 x29)|])
                   | None -> ());
                  x28))
  end
module SocketMessageWriter =
  struct
    include struct include WriteableStreamMessageWriter end
    let (get_socket : t -> any) =
      fun (x30 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x30) "socket")
    let (set_socket : t -> any -> unit) =
      fun (x31 : t) ->
        fun (x32 : any) ->
          Ojs.set_prop_ascii (t_to_js x31) "socket" (any_to_js x32)
    let (create :
      Node.Net.Socket.t ->
        ?options:(MessageWriterOptions.t,
          Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t) union2 -> unit -> t)
      =
      fun (x33 : Node.Net.Socket.t) ->
        fun
          ?options:(x34 :
                     (MessageWriterOptions.t,
                       Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t) union2
                       option)
          ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global
                       "__LIB__VSCODE_JSONRPC__IMPORTS")
                    "SocketMessageWriter")
                 (let x35 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x35 "push" [|(Node.Net.Socket.t_to_js x33)|]);
                  (match x34 with
                   | Some x36 ->
                       ignore
                         (Ojs.call x35 "push"
                            [|(union2_to_js MessageWriterOptions.t_to_js
                                 Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_to_js
                                 x36)|])
                   | None -> ());
                  x35))
    let (dispose : t -> unit) =
      fun (x39 : t) -> ignore (Ojs.call (t_to_js x39) "dispose" [||])
  end
module StreamMessageReader =
  struct
    include struct include ReadableStreamMessageReader end
    let (create :
      Node.ReadableStream.t ->
        ?encoding:(MessageReaderOptions.t,
          Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t) union2 -> unit -> t)
      =
      fun (x40 : Node.ReadableStream.t) ->
        fun
          ?encoding:(x41 :
                      (MessageReaderOptions.t,
                        Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t)
                        union2 option)
          ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global
                       "__LIB__VSCODE_JSONRPC__IMPORTS")
                    "StreamMessageReader")
                 (let x42 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x42 "push"
                       [|(Node.ReadableStream.t_to_js x40)|]);
                  (match x41 with
                   | Some x43 ->
                       ignore
                         (Ojs.call x42 "push"
                            [|(union2_to_js MessageReaderOptions.t_to_js
                                 Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_to_js
                                 x43)|])
                   | None -> ());
                  x42))
  end
module StreamMessageWriter =
  struct
    include struct include WriteableStreamMessageWriter end
    let (create :
      Node.WritableStream.t ->
        ?options:(MessageWriterOptions.t,
          Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t) union2 -> unit -> t)
      =
      fun (x46 : Node.WritableStream.t) ->
        fun
          ?options:(x47 :
                     (MessageWriterOptions.t,
                       Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t) union2
                       option)
          ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global
                       "__LIB__VSCODE_JSONRPC__IMPORTS")
                    "StreamMessageWriter")
                 (let x48 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x48 "push"
                       [|(Node.WritableStream.t_to_js x46)|]);
                  (match x47 with
                   | Some x49 ->
                       ignore
                         (Ojs.call x48 "push"
                            [|(union2_to_js MessageWriterOptions.t_to_js
                                 Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_to_js
                                 x49)|])
                   | None -> ());
                  x48))
  end
let (generate_random_pipe_name : unit -> string) =
  fun () ->
    Ojs.string_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE_JSONRPC__IMPORTS")
         "generateRandomPipeName" [||])
module PipeTransport =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x53 : Ojs.t) -> x53
    and t_to_js : t -> Ojs.t = fun (x52 : Ojs.t) -> x52
    let (on_connected : t -> (MessageReader.t * MessageWriter.t) Promise.t) =
      fun (x54 : t) ->
        Promise.t_of_js
          (fun (x55 : Ojs.t) ->
             let x56 = x55 in
             ((MessageReader.t_of_js (Ojs.array_get x56 0)),
               (MessageWriter.t_of_js (Ojs.array_get x56 1))))
          (Ojs.call (t_to_js x54) "onConnected" [||])
  end
let (create_client_pipe_transport :
  string ->
    ?encoding:Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t ->
      unit -> PipeTransport.t Promise.t)
  =
  fun (x57 : string) ->
    fun
      ?encoding:(x58 : Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t option)
      ->
      fun () ->
        Promise.t_of_js PipeTransport.t_of_js
          (let x61 =
             Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE_JSONRPC__IMPORTS" in
           Ojs.call (Ojs.get_prop_ascii x61 "createClientPipeTransport")
             "apply"
             [|x61;((let x59 =
                       Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                         [||] in
                     ignore (Ojs.call x59 "push" [|(Ojs.string_to_js x57)|]);
                     (match x58 with
                      | Some x60 ->
                          ignore
                            (Ojs.call x59 "push"
                               [|(Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_to_js
                                    x60)|])
                      | None -> ());
                     x59))|])
let (create_server_pipe_transport :
  string ->
    ?encoding:Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t ->
      unit -> (MessageReader.t * MessageWriter.t))
  =
  fun (x63 : string) ->
    fun
      ?encoding:(x64 : Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t option)
      ->
      fun () ->
        let x68 =
          let x67 =
            Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE_JSONRPC__IMPORTS" in
          Ojs.call (Ojs.get_prop_ascii x67 "createServerPipeTransport")
            "apply"
            [|x67;((let x65 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore (Ojs.call x65 "push" [|(Ojs.string_to_js x63)|]);
                    (match x64 with
                     | Some x66 ->
                         ignore
                           (Ojs.call x65 "push"
                              [|(Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_to_js
                                   x66)|])
                     | None -> ());
                    x65))|] in
        ((MessageReader.t_of_js (Ojs.array_get x68 0)),
          (MessageWriter.t_of_js (Ojs.array_get x68 1)))
module SocketTransport =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x70 : Ojs.t) -> x70
    and t_to_js : t -> Ojs.t = fun (x69 : Ojs.t) -> x69
    let (on_connected : t -> (MessageReader.t * MessageWriter.t) Promise.t) =
      fun (x71 : t) ->
        Promise.t_of_js
          (fun (x72 : Ojs.t) ->
             let x73 = x72 in
             ((MessageReader.t_of_js (Ojs.array_get x73 0)),
               (MessageWriter.t_of_js (Ojs.array_get x73 1))))
          (Ojs.call (t_to_js x71) "onConnected" [||])
  end
let (create_client_socket_transport :
  int ->
    ?encoding:Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t ->
      unit -> SocketTransport.t Promise.t)
  =
  fun (x74 : int) ->
    fun
      ?encoding:(x75 : Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t option)
      ->
      fun () ->
        Promise.t_of_js SocketTransport.t_of_js
          (let x78 =
             Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE_JSONRPC__IMPORTS" in
           Ojs.call (Ojs.get_prop_ascii x78 "createClientSocketTransport")
             "apply"
             [|x78;((let x76 =
                       Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                         [||] in
                     ignore (Ojs.call x76 "push" [|(Ojs.int_to_js x74)|]);
                     (match x75 with
                      | Some x77 ->
                          ignore
                            (Ojs.call x76 "push"
                               [|(Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_to_js
                                    x77)|])
                      | None -> ());
                     x76))|])
let (create_server_socket_transport :
  int ->
    ?encoding:Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t ->
      unit -> (MessageReader.t * MessageWriter.t))
  =
  fun (x80 : int) ->
    fun
      ?encoding:(x81 : Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t option)
      ->
      fun () ->
        let x85 =
          let x84 =
            Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE_JSONRPC__IMPORTS" in
          Ojs.call (Ojs.get_prop_ascii x84 "createServerSocketTransport")
            "apply"
            [|x84;((let x82 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore (Ojs.call x82 "push" [|(Ojs.int_to_js x80)|]);
                    (match x81 with
                     | Some x83 ->
                         ignore
                           (Ojs.call x82 "push"
                              [|(Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_to_js
                                   x83)|])
                     | None -> ());
                    x82))|] in
        ((MessageReader.t_of_js (Ojs.array_get x85 0)),
          (MessageWriter.t_of_js (Ojs.array_get x85 1)))
let (create_message_connection :
  reader:MessageReader.t ->
    writer:MessageWriter.t ->
      ?logger:Logger.t ->
        ?options:(ConnectionOptions.t, ConnectionStrategy.t) union2 ->
          unit -> MessageConnection.t)
  =
  fun ~reader:(x86 : MessageReader.t) ->
    fun ~writer:(x87 : MessageWriter.t) ->
      fun ?logger:(x88 : Logger.t option) ->
        fun
          ?options:(x89 :
                     (ConnectionOptions.t, ConnectionStrategy.t) union2
                       option)
          ->
          fun () ->
            MessageConnection.t_of_js
              (let x95 =
                 Ojs.get_prop_ascii Ojs.global
                   "__LIB__VSCODE_JSONRPC__IMPORTS" in
               Ojs.call (Ojs.get_prop_ascii x95 "createMessageConnection")
                 "apply"
                 [|x95;((let x90 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         ignore
                           (Ojs.call x90 "push"
                              [|(MessageReader.t_to_js x86)|]);
                         ignore
                           (Ojs.call x90 "push"
                              [|(MessageWriter.t_to_js x87)|]);
                         (match x88 with
                          | Some x94 ->
                              ignore
                                (Ojs.call x90 "push" [|(Logger.t_to_js x94)|])
                          | None -> ());
                         (match x89 with
                          | Some x91 ->
                              ignore
                                (Ojs.call x90 "push"
                                   [|(union2_to_js ConnectionOptions.t_to_js
                                        ConnectionStrategy.t_to_js x91)|])
                          | None -> ());
                         x90))|])
let (create_message_connection' :
  input_stream:Node.ReadableStream.t ->
    output_stream:Node.WritableStream.t ->
      ?logger:Logger.t ->
        ?options:(ConnectionOptions.t, ConnectionStrategy.t) union2 ->
          unit -> MessageConnection.t)
  =
  fun ~input_stream:(x96 : Node.ReadableStream.t) ->
    fun ~output_stream:(x97 : Node.WritableStream.t) ->
      fun ?logger:(x98 : Logger.t option) ->
        fun
          ?options:(x99 :
                     (ConnectionOptions.t, ConnectionStrategy.t) union2
                       option)
          ->
          fun () ->
            MessageConnection.t_of_js
              (let x105 =
                 Ojs.get_prop_ascii Ojs.global
                   "__LIB__VSCODE_JSONRPC__IMPORTS" in
               Ojs.call (Ojs.get_prop_ascii x105 "createMessageConnection")
                 "apply"
                 [|x105;((let x100 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x100 "push"
                               [|(Node.ReadableStream.t_to_js x96)|]);
                          ignore
                            (Ojs.call x100 "push"
                               [|(Node.WritableStream.t_to_js x97)|]);
                          (match x98 with
                           | Some x104 ->
                               ignore
                                 (Ojs.call x100 "push"
                                    [|(Logger.t_to_js x104)|])
                           | None -> ());
                          (match x99 with
                           | Some x101 ->
                               ignore
                                 (Ojs.call x100 "push"
                                    [|(union2_to_js ConnectionOptions.t_to_js
                                         ConnectionStrategy.t_to_js x101)|])
                           | None -> ());
                          x100))|])
