[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
module Touch =
  struct
    type t = [ `L_n_0  | `L_n_1  | `L_n_2 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2 : Ojs.t) ->
        let x3 = x2 in
        match Ojs.int_of_js x3 with
        | 0 -> `L_n_0
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1 : [ `L_n_0  | `L_n_1  | `L_n_2 ]) ->
        match x1 with
        | `L_n_0 -> Ojs.int_to_js 0
        | `L_n_1 -> Ojs.int_to_js 1
        | `L_n_2 -> Ojs.int_to_js 2
    let (none : [ `L_n_0 ]) =
      let x4 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Touch") "None" in
      match Ojs.int_of_js x4 with | 0 -> `L_n_0 | _ -> assert false
    let (first : [ `L_n_1 ]) =
      let x5 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Touch") "First" in
      match Ojs.int_of_js x5 with | 1 -> `L_n_1 | _ -> assert false
    let (asOld : [ `L_n_1 ]) =
      let x6 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Touch") "AsOld" in
      match Ojs.int_of_js x6 with | 1 -> `L_n_1 | _ -> assert false
    let (last : [ `L_n_2 ]) =
      let x7 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Touch") "Last" in
      match Ojs.int_of_js x7 with | 2 -> `L_n_2 | _ -> assert false
    let (asNew : [ `L_n_2 ]) =
      let x8 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Touch") "AsNew" in
      match Ojs.int_of_js x8 with | 2 -> `L_n_2 | _ -> assert false
  end
module LinkedMap =
  struct
    type ('K, 'V) t = ('K, 'V) _LinkedMap
    let rec t_of_js :
      'K 'V . (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) t = fun
      (type __K) -> fun (type __V) ->
      fun (__K_of_js : Ojs.t -> __K) ->
        fun (__V_of_js : Ojs.t -> __V) ->
          fun (x12 : Ojs.t) -> _LinkedMap_of_js __K_of_js __V_of_js x12
    and t_to_js :
      'K 'V . ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) t -> Ojs.t = fun
      (type __K) -> fun (type __V) ->
      fun (__K_to_js : __K -> Ojs.t) ->
        fun (__V_to_js : __V -> Ojs.t) ->
          fun (x9 : (__K, __V) _LinkedMap) ->
            _LinkedMap_to_js __K_to_js __V_to_js x9
    let (get__Symbol_toStringTag_ : ('K, 'V) t -> any) =
      fun (x15 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x15)
             "[Symbol.toStringTag]")
    let (get__map : ('K, 'V) t -> any) =
      fun (x18 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x18) "_map")
    let (set__map : ('K, 'V) t -> any -> unit) =
      fun (x21 : ('K, 'V) t) ->
        fun (x22 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x21) "_map"
            (any_to_js x22)
    let (get__head : ('K, 'V) t -> any) =
      fun (x25 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x25) "_head")
    let (set__head : ('K, 'V) t -> any -> unit) =
      fun (x28 : ('K, 'V) t) ->
        fun (x29 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x28) "_head"
            (any_to_js x29)
    let (get__tail : ('K, 'V) t -> any) =
      fun (x32 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x32) "_tail")
    let (set__tail : ('K, 'V) t -> any -> unit) =
      fun (x35 : ('K, 'V) t) ->
        fun (x36 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x35) "_tail"
            (any_to_js x36)
    let (get__size : ('K, 'V) t -> any) =
      fun (x39 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x39) "_size")
    let (set__size : ('K, 'V) t -> any -> unit) =
      fun (x42 : ('K, 'V) t) ->
        fun (x43 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x42) "_size"
            (any_to_js x43)
    let (get__state : ('K, 'V) t -> any) =
      fun (x46 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x46) "_state")
    let (set__state : ('K, 'V) t -> any -> unit) =
      fun (x49 : ('K, 'V) t) ->
        fun (x50 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x49) "_state"
            (any_to_js x50)
    let (create : unit -> ('K, 'V) t) =
      fun () ->
        t_of_js Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "LinkedMap") [||])
    let (clear : ('K, 'V) t -> unit) =
      fun (x55 : ('K, 'V) t) ->
        ignore (Ojs.call (t_to_js Obj.magic Obj.magic x55) "clear" [||])
    let (isEmpty : ('K, 'V) t -> bool) =
      fun (x58 : ('K, 'V) t) ->
        Ojs.bool_of_js
          (Ojs.call (t_to_js Obj.magic Obj.magic x58) "isEmpty" [||])
    let (get_size : ('K, 'V) t -> int) =
      fun (x61 : ('K, 'V) t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x61) "size")
    let (get_first : ('K, 'V) t -> 'V or_undefined) =
      fun (x64 : ('K, 'V) t) ->
        or_undefined_of_js Obj.magic
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x64) "first")
    let (get_last : ('K, 'V) t -> 'V or_undefined) =
      fun (x68 : ('K, 'V) t) ->
        or_undefined_of_js Obj.magic
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x68) "last")
    let (has : ('K, 'V) t -> key:'K -> bool) =
      fun (x73 : ('K, 'V) t) ->
        fun ~key:(x72 : 'K) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js Obj.magic Obj.magic x73) "has"
               [|(Obj.magic x72)|])
    let (get_ :
      ('K, 'V) t -> key:'K -> ?touch:_Touch -> unit -> 'V or_undefined) =
      fun (x80 : ('K, 'V) t) ->
        fun ~key:(x76 : 'K) ->
          fun ?touch:(x77 : _Touch option) ->
            fun () ->
              or_undefined_of_js Obj.magic
                (let x83 = t_to_js Obj.magic Obj.magic x80 in
                 Ojs.call (Ojs.get_prop_ascii x83 "get") "apply"
                   [|x83;((let x78 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore (Ojs.call x78 "push" [|(Obj.magic x76)|]);
                           (match x77 with
                            | Some x79 ->
                                ignore
                                  (Ojs.call x78 "push" [|(_Touch_to_js x79)|])
                            | None -> ());
                           x78))|])
    let (set_ :
      ('K, 'V) t -> key:'K -> value:'V -> ?touch:_Touch -> unit -> ('K, 'V) t)
      =
      fun (x90 : ('K, 'V) t) ->
        fun ~key:(x85 : 'K) ->
          fun ~value:(x86 : 'V) ->
            fun ?touch:(x87 : _Touch option) ->
              fun () ->
                t_of_js Obj.magic Obj.magic
                  (let x93 = t_to_js Obj.magic Obj.magic x90 in
                   Ojs.call (Ojs.get_prop_ascii x93 "set") "apply"
                     [|x93;((let x88 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore (Ojs.call x88 "push" [|(Obj.magic x85)|]);
                             ignore (Ojs.call x88 "push" [|(Obj.magic x86)|]);
                             (match x87 with
                              | Some x89 ->
                                  ignore
                                    (Ojs.call x88 "push"
                                       [|(_Touch_to_js x89)|])
                              | None -> ());
                             x88))|])
    let (delete : ('K, 'V) t -> key:'K -> bool) =
      fun (x97 : ('K, 'V) t) ->
        fun ~key:(x96 : 'K) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js Obj.magic Obj.magic x97) "delete"
               [|(Obj.magic x96)|])
    let (remove : ('K, 'V) t -> key:'K -> 'V or_undefined) =
      fun (x101 : ('K, 'V) t) ->
        fun ~key:(x100 : 'K) ->
          or_undefined_of_js Obj.magic
            (Ojs.call (t_to_js Obj.magic Obj.magic x101) "remove"
               [|(Obj.magic x100)|])
    let (shift : ('K, 'V) t -> 'V or_undefined) =
      fun (x105 : ('K, 'V) t) ->
        or_undefined_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic Obj.magic x105) "shift" [||])
    let (forEach :
      ('K, 'V) t ->
        callbackfn:(value:'V -> key:'K -> map:('K, 'V) t -> unit) ->
          ?thisArg:any -> unit -> unit)
      =
      fun (x118 : ('K, 'V) t) ->
        fun ~callbackfn:(x109 : value:'V -> key:'K -> map:('K, 'V) t -> unit)
          ->
          fun ?thisArg:(x110 : any option) ->
            fun () ->
              ignore
                (let x121 = t_to_js Obj.magic Obj.magic x118 in
                 Ojs.call (Ojs.get_prop_ascii x121 "forEach") "apply"
                   [|x121;((let x111 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x111 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x113 : Ojs.t) ->
                                         fun (x114 : Ojs.t) ->
                                           fun (x115 : Ojs.t) ->
                                             x109 ~value:(Obj.magic x113)
                                               ~key:(Obj.magic x114)
                                               ~map:(t_of_js Obj.magic
                                                       Obj.magic x115)))|]);
                            (match x110 with
                             | Some x112 ->
                                 ignore
                                   (Ojs.call x111 "push" [|(any_to_js x112)|])
                             | None -> ());
                            x111))|])
    let (keys : ('K, 'V) t -> 'K IterableIterator.t) =
      fun (x122 : ('K, 'V) t) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic Obj.magic x122) "keys" [||])
    let (values : ('K, 'V) t -> 'V IterableIterator.t) =
      fun (x126 : ('K, 'V) t) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic Obj.magic x126) "values" [||])
    let (entries : ('K, 'V) t -> ('K * 'V) IterableIterator.t) =
      fun (x130 : ('K, 'V) t) ->
        IterableIterator.t_of_js
          (fun (x133 : Ojs.t) ->
             let x134 = x133 in
             ((Obj.magic (Ojs.array_get x134 0)),
               (Obj.magic (Ojs.array_get x134 1))))
          (Ojs.call (t_to_js Obj.magic Obj.magic x130) "entries" [||])
    let (_Symbol_iterator_ : ('K, 'V) t -> ('K * 'V) IterableIterator.t) =
      fun (x135 : ('K, 'V) t) ->
        IterableIterator.t_of_js
          (fun (x138 : Ojs.t) ->
             let x139 = x138 in
             ((Obj.magic (Ojs.array_get x139 0)),
               (Obj.magic (Ojs.array_get x139 1))))
          (Ojs.call (t_to_js Obj.magic Obj.magic x135) "[Symbol.iterator]"
             [||])
    let (trimOld : ('K, 'V) t -> newSize:int -> unit) =
      fun (x141 : ('K, 'V) t) ->
        fun ~newSize:(x140 : int) ->
          ignore
            (Ojs.call (t_to_js Obj.magic Obj.magic x141) "trimOld"
               [|(Ojs.int_to_js x140)|])
    let (get_addItemFirst : ('K, 'V) t -> any) =
      fun (x144 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x144)
             "addItemFirst")
    let (set_addItemFirst : ('K, 'V) t -> any -> unit) =
      fun (x147 : ('K, 'V) t) ->
        fun (x148 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x147)
            "addItemFirst" (any_to_js x148)
    let (get_addItemLast : ('K, 'V) t -> any) =
      fun (x151 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x151)
             "addItemLast")
    let (set_addItemLast : ('K, 'V) t -> any -> unit) =
      fun (x154 : ('K, 'V) t) ->
        fun (x155 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x154) "addItemLast"
            (any_to_js x155)
    let (get_removeItem : ('K, 'V) t -> any) =
      fun (x158 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x158) "removeItem")
    let (set_removeItem : ('K, 'V) t -> any -> unit) =
      fun (x161 : ('K, 'V) t) ->
        fun (x162 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x161) "removeItem"
            (any_to_js x162)
    let (get_touch : ('K, 'V) t -> any) =
      fun (x165 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x165) "touch")
    let (set_touch : ('K, 'V) t -> any -> unit) =
      fun (x168 : ('K, 'V) t) ->
        fun (x169 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x168) "touch"
            (any_to_js x169)
    let (toJSON : ('K, 'V) t -> ('K * 'V) list) =
      fun (x172 : ('K, 'V) t) ->
        Ojs.list_of_js
          (fun (x175 : Ojs.t) ->
             let x176 = x175 in
             ((Obj.magic (Ojs.array_get x176 0)),
               (Obj.magic (Ojs.array_get x176 1))))
          (Ojs.call (t_to_js Obj.magic Obj.magic x172) "toJSON" [||])
    let (fromJSON : ('K, 'V) t -> data:('K * 'V) list -> unit) =
      fun (x182 : ('K, 'V) t) ->
        fun ~data:(x177 : ('K * 'V) list) ->
          ignore
            (Ojs.call (t_to_js Obj.magic Obj.magic x182) "fromJSON"
               [|(Ojs.list_to_js
                    (fun (x178 : ('K * 'V)) ->
                       let (x179, x180) = x178 in
                       let x181 = Ojs.array_make 2 in
                       Ojs.array_set x181 0 (Obj.magic x179);
                       Ojs.array_set x181 1 (Obj.magic x180);
                       x181) x177)|])
    let (cast : ('K, 'V) t -> ('K, 'V) Map.t) =
      fun (x185 : ('K, 'V) t) ->
        Map.t_of_js Obj.magic Obj.magic (t_to_js Obj.magic Obj.magic x185)
  end
module LRUCache =
  struct
    type ('K, 'V) t = ('K, 'V) _LRUCache
    let rec t_of_js :
      'K 'V . (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) t = fun
      (type __K) -> fun (type __V) ->
      fun (__K_of_js : Ojs.t -> __K) ->
        fun (__V_of_js : Ojs.t -> __V) ->
          fun (x193 : Ojs.t) -> _LRUCache_of_js __K_of_js __V_of_js x193
    and t_to_js :
      'K 'V . ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) t -> Ojs.t = fun
      (type __K) -> fun (type __V) ->
      fun (__K_to_js : __K -> Ojs.t) ->
        fun (__V_to_js : __V -> Ojs.t) ->
          fun (x190 : (__K, __V) _LRUCache) ->
            _LRUCache_to_js __K_to_js __V_to_js x190
    let (get__limit : ('K, 'V) t -> any) =
      fun (x196 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x196) "_limit")
    let (set__limit : ('K, 'V) t -> any -> unit) =
      fun (x199 : ('K, 'V) t) ->
        fun (x200 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x199) "_limit"
            (any_to_js x200)
    let (get__ratio : ('K, 'V) t -> any) =
      fun (x203 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x203) "_ratio")
    let (set__ratio : ('K, 'V) t -> any -> unit) =
      fun (x206 : ('K, 'V) t) ->
        fun (x207 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x206) "_ratio"
            (any_to_js x207)
    let (create : limit:int -> ?ratio:int -> unit -> ('K, 'V) t) =
      fun ~limit:(x210 : int) ->
        fun ?ratio:(x211 : int option) ->
          fun () ->
            t_of_js Obj.magic Obj.magic
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "LRUCache")
                 (let x212 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x212 "push" [|(Ojs.int_to_js x210)|]);
                  (match x211 with
                   | Some x213 ->
                       ignore (Ojs.call x212 "push" [|(Ojs.int_to_js x213)|])
                   | None -> ());
                  x212))
    let (get_limit : ('K, 'V) t -> int) =
      fun (x216 : ('K, 'V) t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x216) "limit")
    let (set_limit : ('K, 'V) t -> int -> unit) =
      fun (x219 : ('K, 'V) t) ->
        fun (x220 : int) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x219) "limit"
            (Ojs.int_to_js x220)
    let (get_ratio : ('K, 'V) t -> int) =
      fun (x223 : ('K, 'V) t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x223) "ratio")
    let (set_ratio : ('K, 'V) t -> int -> unit) =
      fun (x226 : ('K, 'V) t) ->
        fun (x227 : int) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x226) "ratio"
            (Ojs.int_to_js x227)
    let (get_ :
      ('K, 'V) t -> key:'K -> ?touch:_Touch -> unit -> 'V or_undefined) =
      fun (x234 : ('K, 'V) t) ->
        fun ~key:(x230 : 'K) ->
          fun ?touch:(x231 : _Touch option) ->
            fun () ->
              or_undefined_of_js Obj.magic
                (let x237 = t_to_js Obj.magic Obj.magic x234 in
                 Ojs.call (Ojs.get_prop_ascii x237 "get") "apply"
                   [|x237;((let x232 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x232 "push" [|(Obj.magic x230)|]);
                            (match x231 with
                             | Some x233 ->
                                 ignore
                                   (Ojs.call x232 "push"
                                      [|(_Touch_to_js x233)|])
                             | None -> ());
                            x232))|])
    let (peek : ('K, 'V) t -> key:'K -> 'V or_undefined) =
      fun (x240 : ('K, 'V) t) ->
        fun ~key:(x239 : 'K) ->
          or_undefined_of_js Obj.magic
            (Ojs.call (t_to_js Obj.magic Obj.magic x240) "peek"
               [|(Obj.magic x239)|])
    let (set_ : ('K, 'V) t -> key:'K -> value:'V -> ('K, 'V) t) =
      fun (x246 : ('K, 'V) t) ->
        fun ~key:(x244 : 'K) ->
          fun ~value:(x245 : 'V) ->
            t_of_js Obj.magic Obj.magic
              (Ojs.call (t_to_js Obj.magic Obj.magic x246) "set"
                 [|(Obj.magic x244);(Obj.magic x245)|])
    let (get_checkTrim : ('K, 'V) t -> any) =
      fun (x251 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x251) "checkTrim")
    let (set_checkTrim : ('K, 'V) t -> any -> unit) =
      fun (x254 : ('K, 'V) t) ->
        fun (x255 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x254) "checkTrim"
            (any_to_js x255)
    let (cast : ('K, 'V) t -> ('K, 'V) _LinkedMap) =
      fun (x258 : ('K, 'V) t) ->
        _LinkedMap_of_js Obj.magic Obj.magic
          (t_to_js Obj.magic Obj.magic x258)
  end
