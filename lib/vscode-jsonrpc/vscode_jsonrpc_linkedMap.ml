[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
module Touch =
  struct
    type t = [ `L_n_0  | `L_n_1  | `L_n_2 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2 : Ojs.t) ->
        let x3 = x2 in
        match Ojs.int_of_js x3 with
        | 0 -> `L_n_0
        | 1 -> `L_n_1
        | 2 -> `L_n_2
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1 : [ `L_n_0  | `L_n_1  | `L_n_2 ]) ->
        match x1 with
        | `L_n_0 -> Ojs.int_to_js 0
        | `L_n_1 -> Ojs.int_to_js 1
        | `L_n_2 -> Ojs.int_to_js 2
    let (none : [ `L_n_0 ]) =
      let x4 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Touch") "None" in
      match Ojs.int_of_js x4 with | 0 -> `L_n_0 | _ -> assert false
    let (first : [ `L_n_1 ]) =
      let x5 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Touch") "First" in
      match Ojs.int_of_js x5 with | 1 -> `L_n_1 | _ -> assert false
    let (as_old : [ `L_n_1 ]) =
      let x6 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Touch") "AsOld" in
      match Ojs.int_of_js x6 with | 1 -> `L_n_1 | _ -> assert false
    let (last : [ `L_n_2 ]) =
      let x7 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Touch") "Last" in
      match Ojs.int_of_js x7 with | 2 -> `L_n_2 | _ -> assert false
    let (as_new : [ `L_n_2 ]) =
      let x8 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Touch") "AsNew" in
      match Ojs.int_of_js x8 with | 2 -> `L_n_2 | _ -> assert false
  end
module LinkedMap =
  struct
    type ('K, 'V) t = ('K, 'V) LinkedMap.t
    let rec t_of_js :
      'K 'V . (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) t = fun
      (type __K) -> fun (type __V) ->
      fun (__K_of_js : Ojs.t -> __K) ->
        fun (__V_of_js : Ojs.t -> __V) ->
          fun (x12 : Ojs.t) -> LinkedMap.t_of_js __K_of_js __V_of_js x12
    and t_to_js :
      'K 'V . ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) t -> Ojs.t = fun
      (type __K) -> fun (type __V) ->
      fun (__K_to_js : __K -> Ojs.t) ->
        fun (__V_to_js : __V -> Ojs.t) ->
          fun (x9 : (__K, __V) LinkedMap.t) ->
            LinkedMap.t_to_js __K_to_js __V_to_js x9
    let (get__map : ('K, 'V) t -> any) =
      fun (x15 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x15) "_map")
    let (set__map : ('K, 'V) t -> any -> unit) =
      fun (x18 : ('K, 'V) t) ->
        fun (x19 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x18) "_map"
            (any_to_js x19)
    let (get__head : ('K, 'V) t -> any) =
      fun (x22 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x22) "_head")
    let (set__head : ('K, 'V) t -> any -> unit) =
      fun (x25 : ('K, 'V) t) ->
        fun (x26 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x25) "_head"
            (any_to_js x26)
    let (get__tail : ('K, 'V) t -> any) =
      fun (x29 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x29) "_tail")
    let (set__tail : ('K, 'V) t -> any -> unit) =
      fun (x32 : ('K, 'V) t) ->
        fun (x33 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x32) "_tail"
            (any_to_js x33)
    let (get__size : ('K, 'V) t -> any) =
      fun (x36 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x36) "_size")
    let (set__size : ('K, 'V) t -> any -> unit) =
      fun (x39 : ('K, 'V) t) ->
        fun (x40 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x39) "_size"
            (any_to_js x40)
    let (get__state : ('K, 'V) t -> any) =
      fun (x43 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x43) "_state")
    let (set__state : ('K, 'V) t -> any -> unit) =
      fun (x46 : ('K, 'V) t) ->
        fun (x47 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x46) "_state"
            (any_to_js x47)
    let (create : unit -> ('K, 'V) t) =
      fun () ->
        t_of_js Obj.magic Obj.magic
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "LinkedMap") [||])
    let (clear : ('K, 'V) t -> unit) =
      fun (x52 : ('K, 'V) t) ->
        ignore (Ojs.call (t_to_js Obj.magic Obj.magic x52) "clear" [||])
    let (is_empty : ('K, 'V) t -> bool) =
      fun (x55 : ('K, 'V) t) ->
        Ojs.bool_of_js
          (Ojs.call (t_to_js Obj.magic Obj.magic x55) "isEmpty" [||])
    let (get_size : ('K, 'V) t -> int) =
      fun (x58 : ('K, 'V) t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x58) "size")
    let (get_first : ('K, 'V) t -> 'V or_undefined) =
      fun (x61 : ('K, 'V) t) ->
        or_undefined_of_js Obj.magic
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x61) "first")
    let (get_last : ('K, 'V) t -> 'V or_undefined) =
      fun (x65 : ('K, 'V) t) ->
        or_undefined_of_js Obj.magic
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x65) "last")
    let (has : ('K, 'V) t -> key:'K -> bool) =
      fun (x70 : ('K, 'V) t) ->
        fun ~key:(x69 : 'K) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js Obj.magic Obj.magic x70) "has"
               [|(Obj.magic x69)|])
    let (get_ :
      ('K, 'V) t -> key:'K -> ?touch:Touch.t -> unit -> 'V or_undefined) =
      fun (x77 : ('K, 'V) t) ->
        fun ~key:(x73 : 'K) ->
          fun ?touch:(x74 : Touch.t option) ->
            fun () ->
              or_undefined_of_js Obj.magic
                (let x80 = t_to_js Obj.magic Obj.magic x77 in
                 Ojs.call (Ojs.get_prop_ascii x80 "get") "apply"
                   [|x80;((let x75 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore (Ojs.call x75 "push" [|(Obj.magic x73)|]);
                           (match x74 with
                            | Some x76 ->
                                ignore
                                  (Ojs.call x75 "push"
                                     [|(Touch.t_to_js x76)|])
                            | None -> ());
                           x75))|])
    let (set_ :
      ('K, 'V) t ->
        key:'K -> value:'V -> ?touch:Touch.t -> unit -> ('K, 'V) t)
      =
      fun (x87 : ('K, 'V) t) ->
        fun ~key:(x82 : 'K) ->
          fun ~value:(x83 : 'V) ->
            fun ?touch:(x84 : Touch.t option) ->
              fun () ->
                t_of_js Obj.magic Obj.magic
                  (let x90 = t_to_js Obj.magic Obj.magic x87 in
                   Ojs.call (Ojs.get_prop_ascii x90 "set") "apply"
                     [|x90;((let x85 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore (Ojs.call x85 "push" [|(Obj.magic x82)|]);
                             ignore (Ojs.call x85 "push" [|(Obj.magic x83)|]);
                             (match x84 with
                              | Some x86 ->
                                  ignore
                                    (Ojs.call x85 "push"
                                       [|(Touch.t_to_js x86)|])
                              | None -> ());
                             x85))|])
    let (delete : ('K, 'V) t -> key:'K -> bool) =
      fun (x94 : ('K, 'V) t) ->
        fun ~key:(x93 : 'K) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js Obj.magic Obj.magic x94) "delete"
               [|(Obj.magic x93)|])
    let (remove : ('K, 'V) t -> key:'K -> 'V or_undefined) =
      fun (x98 : ('K, 'V) t) ->
        fun ~key:(x97 : 'K) ->
          or_undefined_of_js Obj.magic
            (Ojs.call (t_to_js Obj.magic Obj.magic x98) "remove"
               [|(Obj.magic x97)|])
    let (shift : ('K, 'V) t -> 'V or_undefined) =
      fun (x102 : ('K, 'V) t) ->
        or_undefined_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic Obj.magic x102) "shift" [||])
    let (for_each :
      ('K, 'V) t ->
        callbackfn:(value:'V -> key:'K -> map:('K, 'V) t -> unit) ->
          ?this_arg:any -> unit -> unit)
      =
      fun (x115 : ('K, 'V) t) ->
        fun ~callbackfn:(x106 : value:'V -> key:'K -> map:('K, 'V) t -> unit)
          ->
          fun ?this_arg:(x107 : any option) ->
            fun () ->
              ignore
                (let x118 = t_to_js Obj.magic Obj.magic x115 in
                 Ojs.call (Ojs.get_prop_ascii x118 "forEach") "apply"
                   [|x118;((let x108 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x108 "push"
                                 [|(Ojs.fun_to_js 3
                                      (fun (x110 : Ojs.t) ->
                                         fun (x111 : Ojs.t) ->
                                           fun (x112 : Ojs.t) ->
                                             x106 ~value:(Obj.magic x110)
                                               ~key:(Obj.magic x111)
                                               ~map:(t_of_js Obj.magic
                                                       Obj.magic x112)))|]);
                            (match x107 with
                             | Some x109 ->
                                 ignore
                                   (Ojs.call x108 "push" [|(any_to_js x109)|])
                             | None -> ());
                            x108))|])
    let (keys : ('K, 'V) t -> 'K IterableIterator.t) =
      fun (x119 : ('K, 'V) t) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic Obj.magic x119) "keys" [||])
    let (values : ('K, 'V) t -> 'V IterableIterator.t) =
      fun (x123 : ('K, 'V) t) ->
        IterableIterator.t_of_js Obj.magic
          (Ojs.call (t_to_js Obj.magic Obj.magic x123) "values" [||])
    let (entries : ('K, 'V) t -> ('K * 'V) IterableIterator.t) =
      fun (x127 : ('K, 'V) t) ->
        IterableIterator.t_of_js
          (fun (x130 : Ojs.t) ->
             let x131 = x130 in
             ((Obj.magic (Ojs.array_get x131 0)),
               (Obj.magic (Ojs.array_get x131 1))))
          (Ojs.call (t_to_js Obj.magic Obj.magic x127) "entries" [||])
    let (trim_old : ('K, 'V) t -> new_size:int -> unit) =
      fun (x133 : ('K, 'V) t) ->
        fun ~new_size:(x132 : int) ->
          ignore
            (Ojs.call (t_to_js Obj.magic Obj.magic x133) "trimOld"
               [|(Ojs.int_to_js x132)|])
    let (get_add_item_first : ('K, 'V) t -> any) =
      fun (x136 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x136)
             "addItemFirst")
    let (set_add_item_first : ('K, 'V) t -> any -> unit) =
      fun (x139 : ('K, 'V) t) ->
        fun (x140 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x139)
            "addItemFirst" (any_to_js x140)
    let (get_add_item_last : ('K, 'V) t -> any) =
      fun (x143 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x143)
             "addItemLast")
    let (set_add_item_last : ('K, 'V) t -> any -> unit) =
      fun (x146 : ('K, 'V) t) ->
        fun (x147 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x146) "addItemLast"
            (any_to_js x147)
    let (get_remove_item : ('K, 'V) t -> any) =
      fun (x150 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x150) "removeItem")
    let (set_remove_item : ('K, 'V) t -> any -> unit) =
      fun (x153 : ('K, 'V) t) ->
        fun (x154 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x153) "removeItem"
            (any_to_js x154)
    let (get_touch : ('K, 'V) t -> any) =
      fun (x157 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x157) "touch")
    let (set_touch : ('K, 'V) t -> any -> unit) =
      fun (x160 : ('K, 'V) t) ->
        fun (x161 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x160) "touch"
            (any_to_js x161)
    let (to_json : ('K, 'V) t -> ('K * 'V) list) =
      fun (x164 : ('K, 'V) t) ->
        Ojs.list_of_js
          (fun (x167 : Ojs.t) ->
             let x168 = x167 in
             ((Obj.magic (Ojs.array_get x168 0)),
               (Obj.magic (Ojs.array_get x168 1))))
          (Ojs.call (t_to_js Obj.magic Obj.magic x164) "toJSON" [||])
    let (from_json : ('K, 'V) t -> data:('K * 'V) list -> unit) =
      fun (x174 : ('K, 'V) t) ->
        fun ~data:(x169 : ('K * 'V) list) ->
          ignore
            (Ojs.call (t_to_js Obj.magic Obj.magic x174) "fromJSON"
               [|(Ojs.list_to_js
                    (fun (x170 : ('K * 'V)) ->
                       let (x171, x172) = x170 in
                       let x173 = Ojs.array_make 2 in
                       Ojs.array_set x173 0 (Obj.magic x171);
                       Ojs.array_set x173 1 (Obj.magic x172);
                       x173) x169)|])
    let (cast : ('K, 'V) t -> ('K, 'V) Map.t) =
      fun (x177 : ('K, 'V) t) ->
        Map.t_of_js Obj.magic Obj.magic (t_to_js Obj.magic Obj.magic x177)
  end
module LRUCache =
  struct
    type ('K, 'V) t = ('K, 'V) LRUCache.t
    let rec t_of_js :
      'K 'V . (Ojs.t -> 'K) -> (Ojs.t -> 'V) -> Ojs.t -> ('K, 'V) t = fun
      (type __K) -> fun (type __V) ->
      fun (__K_of_js : Ojs.t -> __K) ->
        fun (__V_of_js : Ojs.t -> __V) ->
          fun (x185 : Ojs.t) -> LRUCache.t_of_js __K_of_js __V_of_js x185
    and t_to_js :
      'K 'V . ('K -> Ojs.t) -> ('V -> Ojs.t) -> ('K, 'V) t -> Ojs.t = fun
      (type __K) -> fun (type __V) ->
      fun (__K_to_js : __K -> Ojs.t) ->
        fun (__V_to_js : __V -> Ojs.t) ->
          fun (x182 : (__K, __V) LRUCache.t) ->
            LRUCache.t_to_js __K_to_js __V_to_js x182
    let (get__limit : ('K, 'V) t -> any) =
      fun (x188 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x188) "_limit")
    let (set__limit : ('K, 'V) t -> any -> unit) =
      fun (x191 : ('K, 'V) t) ->
        fun (x192 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x191) "_limit"
            (any_to_js x192)
    let (get__ratio : ('K, 'V) t -> any) =
      fun (x195 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x195) "_ratio")
    let (set__ratio : ('K, 'V) t -> any -> unit) =
      fun (x198 : ('K, 'V) t) ->
        fun (x199 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x198) "_ratio"
            (any_to_js x199)
    let (create : limit:int -> ?ratio:int -> unit -> ('K, 'V) t) =
      fun ~limit:(x202 : int) ->
        fun ?ratio:(x203 : int option) ->
          fun () ->
            t_of_js Obj.magic Obj.magic
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "LRUCache")
                 (let x204 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x204 "push" [|(Ojs.int_to_js x202)|]);
                  (match x203 with
                   | Some x205 ->
                       ignore (Ojs.call x204 "push" [|(Ojs.int_to_js x205)|])
                   | None -> ());
                  x204))
    let (get_limit : ('K, 'V) t -> int) =
      fun (x208 : ('K, 'V) t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x208) "limit")
    let (set_limit : ('K, 'V) t -> int -> unit) =
      fun (x211 : ('K, 'V) t) ->
        fun (x212 : int) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x211) "limit"
            (Ojs.int_to_js x212)
    let (get_ratio : ('K, 'V) t -> int) =
      fun (x215 : ('K, 'V) t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x215) "ratio")
    let (set_ratio : ('K, 'V) t -> int -> unit) =
      fun (x218 : ('K, 'V) t) ->
        fun (x219 : int) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x218) "ratio"
            (Ojs.int_to_js x219)
    let (get_ :
      ('K, 'V) t -> key:'K -> ?touch:Touch.t -> unit -> 'V or_undefined) =
      fun (x226 : ('K, 'V) t) ->
        fun ~key:(x222 : 'K) ->
          fun ?touch:(x223 : Touch.t option) ->
            fun () ->
              or_undefined_of_js Obj.magic
                (let x229 = t_to_js Obj.magic Obj.magic x226 in
                 Ojs.call (Ojs.get_prop_ascii x229 "get") "apply"
                   [|x229;((let x224 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x224 "push" [|(Obj.magic x222)|]);
                            (match x223 with
                             | Some x225 ->
                                 ignore
                                   (Ojs.call x224 "push"
                                      [|(Touch.t_to_js x225)|])
                             | None -> ());
                            x224))|])
    let (peek : ('K, 'V) t -> key:'K -> 'V or_undefined) =
      fun (x232 : ('K, 'V) t) ->
        fun ~key:(x231 : 'K) ->
          or_undefined_of_js Obj.magic
            (Ojs.call (t_to_js Obj.magic Obj.magic x232) "peek"
               [|(Obj.magic x231)|])
    let (set_ : ('K, 'V) t -> key:'K -> value:'V -> ('K, 'V) t) =
      fun (x238 : ('K, 'V) t) ->
        fun ~key:(x236 : 'K) ->
          fun ~value:(x237 : 'V) ->
            t_of_js Obj.magic Obj.magic
              (Ojs.call (t_to_js Obj.magic Obj.magic x238) "set"
                 [|(Obj.magic x236);(Obj.magic x237)|])
    let (get_check_trim : ('K, 'V) t -> any) =
      fun (x243 : ('K, 'V) t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x243) "checkTrim")
    let (set_check_trim : ('K, 'V) t -> any -> unit) =
      fun (x246 : ('K, 'V) t) ->
        fun (x247 : any) ->
          Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x246) "checkTrim"
            (any_to_js x247)
    let (cast : ('K, 'V) t -> ('K, 'V) LinkedMap.t) =
      fun (x250 : ('K, 'V) t) ->
        LinkedMap.t_of_js Obj.magic Obj.magic
          (t_to_js Obj.magic Obj.magic x250)
  end
