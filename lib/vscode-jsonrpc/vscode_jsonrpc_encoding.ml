[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
module FunctionContentEncoder =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_name : t -> string) =
      fun (x3 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3) "name")
    let (set_name : t -> string -> unit) =
      fun (x4 : t) ->
        fun (x5 : string) ->
          Ojs.set_prop_ascii (t_to_js x4) "name" (Ojs.string_to_js x5)
    let (encode : t -> input:Uint8Array.t -> Uint8Array.t Promise.t) =
      fun (x7 : t) ->
        fun ~input:(x6 : Uint8Array.t) ->
          Promise.t_of_js Uint8Array.t_of_js
            (Ojs.call (t_to_js x7) "encode" [|(Uint8Array.t_to_js x6)|])
  end
module StreamContentEncoder =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10 : Ojs.t) -> x10
    and t_to_js : t -> Ojs.t = fun (x9 : Ojs.t) -> x9
    let (get_name : t -> string) =
      fun (x11 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x11) "name")
    let (set_name : t -> string -> unit) =
      fun (x12 : t) ->
        fun (x13 : string) ->
          Ojs.set_prop_ascii (t_to_js x12) "name" (Ojs.string_to_js x13)
    let (create_ : t -> Vscode_jsonrpc_ral.RAL.WritableStream.t) =
      fun (x14 : t) ->
        Vscode_jsonrpc_ral.RAL.WritableStream.t_of_js
          (Ojs.call (t_to_js x14) "create" [||])
  end
module ContentEncoder =
  struct
    type t = FunctionContentEncoder.t
    let rec t_of_js : Ojs.t -> t =
      fun (x16 : Ojs.t) -> FunctionContentEncoder.t_of_js x16
    and t_to_js : t -> Ojs.t =
      fun (x15 : FunctionContentEncoder.t) ->
        FunctionContentEncoder.t_to_js x15
  end
module FunctionContentDecoder =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x18 : Ojs.t) -> x18
    and t_to_js : t -> Ojs.t = fun (x17 : Ojs.t) -> x17
    let (get_name : t -> string) =
      fun (x19 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x19) "name")
    let (set_name : t -> string -> unit) =
      fun (x20 : t) ->
        fun (x21 : string) ->
          Ojs.set_prop_ascii (t_to_js x20) "name" (Ojs.string_to_js x21)
    let (decode : t -> buffer:Uint8Array.t -> Uint8Array.t Promise.t) =
      fun (x23 : t) ->
        fun ~buffer:(x22 : Uint8Array.t) ->
          Promise.t_of_js Uint8Array.t_of_js
            (Ojs.call (t_to_js x23) "decode" [|(Uint8Array.t_to_js x22)|])
  end
module StreamContentDecoder =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x26 : Ojs.t) -> x26
    and t_to_js : t -> Ojs.t = fun (x25 : Ojs.t) -> x25
    let (get_name : t -> string) =
      fun (x27 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x27) "name")
    let (set_name : t -> string -> unit) =
      fun (x28 : t) ->
        fun (x29 : string) ->
          Ojs.set_prop_ascii (t_to_js x28) "name" (Ojs.string_to_js x29)
    let (create_ : t -> Vscode_jsonrpc_ral.RAL.WritableStream.t) =
      fun (x30 : t) ->
        Vscode_jsonrpc_ral.RAL.WritableStream.t_of_js
          (Ojs.call (t_to_js x30) "create" [||])
  end
module ContentDecoder =
  struct
    type t = FunctionContentDecoder.t
    let rec t_of_js : Ojs.t -> t =
      fun (x32 : Ojs.t) -> FunctionContentDecoder.t_of_js x32
    and t_to_js : t -> Ojs.t =
      fun (x31 : FunctionContentDecoder.t) ->
        FunctionContentDecoder.t_to_js x31
  end
module ContentTypeEncoderOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x34 : Ojs.t) -> x34
    and t_to_js : t -> Ojs.t = fun (x33 : Ojs.t) -> x33
    let (get_charset : t -> Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t) =
      fun (x35 : t) ->
        Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_of_js
          (Ojs.get_prop_ascii (t_to_js x35) "charset")
    let (set_charset :
      t -> Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t -> unit) =
      fun (x36 : t) ->
        fun (x37 : Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t) ->
          Ojs.set_prop_ascii (t_to_js x36) "charset"
            (Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_to_js x37)
  end
module FunctionContentTypeEncoder =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x39 : Ojs.t) -> x39
    and t_to_js : t -> Ojs.t = fun (x38 : Ojs.t) -> x38
    let (get_name : t -> string) =
      fun (x40 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x40) "name")
    let (set_name : t -> string -> unit) =
      fun (x41 : t) ->
        fun (x42 : string) ->
          Ojs.set_prop_ascii (t_to_js x41) "name" (Ojs.string_to_js x42)
    let (encode :
      t ->
        msg:Vscode_jsonrpc_messages.Message.t ->
          options:ContentTypeEncoderOptions.t -> Uint8Array.t Promise.t)
      =
      fun (x45 : t) ->
        fun ~msg:(x43 : Vscode_jsonrpc_messages.Message.t) ->
          fun ~options:(x44 : ContentTypeEncoderOptions.t) ->
            Promise.t_of_js Uint8Array.t_of_js
              (Ojs.call (t_to_js x45) "encode"
                 [|(Vscode_jsonrpc_messages.Message.t_to_js x43);(ContentTypeEncoderOptions.t_to_js
                                                                    x44)|])
  end
module StreamContentTypeEncoder =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x48 : Ojs.t) -> x48
    and t_to_js : t -> Ojs.t = fun (x47 : Ojs.t) -> x47
    let (get_name : t -> string) =
      fun (x49 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x49) "name")
    let (set_name : t -> string -> unit) =
      fun (x50 : t) ->
        fun (x51 : string) ->
          Ojs.set_prop_ascii (t_to_js x50) "name" (Ojs.string_to_js x51)
    let (create_ :
      t ->
        options:ContentTypeEncoderOptions.t ->
          Vscode_jsonrpc_ral.RAL.WritableStream.t)
      =
      fun (x53 : t) ->
        fun ~options:(x52 : ContentTypeEncoderOptions.t) ->
          Vscode_jsonrpc_ral.RAL.WritableStream.t_of_js
            (Ojs.call (t_to_js x53) "create"
               [|(ContentTypeEncoderOptions.t_to_js x52)|])
  end
module ContentTypeEncoder =
  struct
    type t = FunctionContentTypeEncoder.t
    let rec t_of_js : Ojs.t -> t =
      fun (x55 : Ojs.t) -> FunctionContentTypeEncoder.t_of_js x55
    and t_to_js : t -> Ojs.t =
      fun (x54 : FunctionContentTypeEncoder.t) ->
        FunctionContentTypeEncoder.t_to_js x54
  end
module ContentTypeDecoderOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x57 : Ojs.t) -> x57
    and t_to_js : t -> Ojs.t = fun (x56 : Ojs.t) -> x56
    let (get_charset : t -> Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t) =
      fun (x58 : t) ->
        Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_of_js
          (Ojs.get_prop_ascii (t_to_js x58) "charset")
    let (set_charset :
      t -> Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t -> unit) =
      fun (x59 : t) ->
        fun (x60 : Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t) ->
          Ojs.set_prop_ascii (t_to_js x59) "charset"
            (Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_to_js x60)
  end
module FunctionContentTypeDecoder =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x62 : Ojs.t) -> x62
    and t_to_js : t -> Ojs.t = fun (x61 : Ojs.t) -> x61
    let (get_name : t -> string) =
      fun (x63 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x63) "name")
    let (set_name : t -> string -> unit) =
      fun (x64 : t) ->
        fun (x65 : string) ->
          Ojs.set_prop_ascii (t_to_js x64) "name" (Ojs.string_to_js x65)
    let (decode :
      t ->
        buffer:Uint8Array.t ->
          options:ContentTypeDecoderOptions.t ->
            Vscode_jsonrpc_messages.Message.t Promise.t)
      =
      fun (x68 : t) ->
        fun ~buffer:(x66 : Uint8Array.t) ->
          fun ~options:(x67 : ContentTypeDecoderOptions.t) ->
            Promise.t_of_js Vscode_jsonrpc_messages.Message.t_of_js
              (Ojs.call (t_to_js x68) "decode"
                 [|(Uint8Array.t_to_js x66);(ContentTypeDecoderOptions.t_to_js
                                               x67)|])
  end
module StreamContentTypeDecoder =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x71 : Ojs.t) -> x71
    and t_to_js : t -> Ojs.t = fun (x70 : Ojs.t) -> x70
    let (get_name : t -> string) =
      fun (x72 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x72) "name")
    let (set_name : t -> string -> unit) =
      fun (x73 : t) ->
        fun (x74 : string) ->
          Ojs.set_prop_ascii (t_to_js x73) "name" (Ojs.string_to_js x74)
    let (create_ :
      t ->
        options:ContentTypeDecoderOptions.t ->
          Vscode_jsonrpc_ral.RAL.WritableStream.t)
      =
      fun (x76 : t) ->
        fun ~options:(x75 : ContentTypeDecoderOptions.t) ->
          Vscode_jsonrpc_ral.RAL.WritableStream.t_of_js
            (Ojs.call (t_to_js x76) "create"
               [|(ContentTypeDecoderOptions.t_to_js x75)|])
  end
module ContentTypeDecoder =
  struct
    type t = FunctionContentTypeDecoder.t
    let rec t_of_js : Ojs.t -> t =
      fun (x78 : Ojs.t) -> FunctionContentTypeDecoder.t_of_js x78
    and t_to_js : t -> Ojs.t =
      fun (x77 : FunctionContentTypeDecoder.t) ->
        FunctionContentTypeDecoder.t_to_js x77
  end
module Named =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x80 : Ojs.t) -> x80
    and t_to_js : t -> Ojs.t = fun (x79 : Ojs.t) -> x79
    let (get_name : t -> string) =
      fun (x81 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x81) "name")
    let (set_name : t -> string -> unit) =
      fun (x82 : t) ->
        fun (x83 : string) ->
          Ojs.set_prop_ascii (t_to_js x82) "name" (Ojs.string_to_js x83)
  end
module Encodings =
  struct
    let (get_encoding_header_value :
      encodings:Named.t list -> string or_undefined) =
      fun ~encodings:(x84 : Named.t list) ->
        or_undefined_of_js Ojs.string_of_js
          (Ojs.call
             (Ojs.get_prop_ascii
                (Ojs.get_prop_ascii Ojs.global
                   "__LIB__VSCODE_JSONRPC__IMPORTS") "Encodings")
             "getEncodingHeaderValue" [|(Ojs.list_to_js Named.t_to_js x84)|])
    let (parse_encoding_header_value : value:string -> string list) =
      fun ~value:(x87 : string) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call
             (Ojs.get_prop_ascii
                (Ojs.get_prop_ascii Ojs.global
                   "__LIB__VSCODE_JSONRPC__IMPORTS") "Encodings")
             "parseEncodingHeaderValue" [|(Ojs.string_to_js x87)|])
  end
