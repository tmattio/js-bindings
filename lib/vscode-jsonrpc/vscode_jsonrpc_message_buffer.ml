[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
module AbstractMessageBuffer =
  struct
    include struct include Vscode_jsonrpc_ral.RAL.MessageBuffer end
    let (get__encoding : t -> any) =
      fun (x1 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x1) "_encoding")
    let (set__encoding : t -> any -> unit) =
      fun (x2 : t) ->
        fun (x3 : any) ->
          Ojs.set_prop_ascii (t_to_js x2) "_encoding" (any_to_js x3)
    let (get__chunks : t -> any) =
      fun (x4 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x4) "_chunks")
    let (set__chunks : t -> any -> unit) =
      fun (x5 : t) ->
        fun (x6 : any) ->
          Ojs.set_prop_ascii (t_to_js x5) "_chunks" (any_to_js x6)
    let (get_total_length : t -> any) =
      fun (x7 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x7) "_totalLength")
    let (set_total_length : t -> any -> unit) =
      fun (x8 : t) ->
        fun (x9 : any) ->
          Ojs.set_prop_ascii (t_to_js x8) "_totalLength" (any_to_js x9)
    let (create :
      ?encoding:Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t -> unit -> t)
      =
      fun
        ?encoding:(x10 :
                    Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t option)
        ->
        fun () ->
          t_of_js
            (Ojs.new_obj_arr
               (Ojs.get_prop_ascii
                  (Ojs.get_prop_ascii Ojs.global
                     "__LIB__VSCODE_JSONRPC__IMPORTS")
                  "AbstractMessageBuffer")
               (let x11 =
                  Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                (match x10 with
                 | Some x12 ->
                     ignore
                       (Ojs.call x11 "push"
                          [|(Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_to_js
                               x12)|])
                 | None -> ());
                x11))
    let (empty_buffer : t -> Uint8Array.t) =
      fun (x13 : t) ->
        Uint8Array.t_of_js (Ojs.call (t_to_js x13) "emptyBuffer" [||])
    let (from_string :
      t ->
        value:string ->
          encoding:Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t ->
            Uint8Array.t)
      =
      fun (x16 : t) ->
        fun ~value:(x14 : string) ->
          fun
            ~encoding:(x15 : Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t)
            ->
            Uint8Array.t_of_js
              (Ojs.call (t_to_js x16) "fromString"
                 [|(Ojs.string_to_js x14);(Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_to_js
                                             x15)|])
    let (to_string :
      t ->
        value:Uint8Array.t ->
          encoding:Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t -> string)
      =
      fun (x19 : t) ->
        fun ~value:(x17 : Uint8Array.t) ->
          fun
            ~encoding:(x18 : Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t)
            ->
            Ojs.string_of_js
              (Ojs.call (t_to_js x19) "toString"
                 [|(Uint8Array.t_to_js x17);(Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_to_js
                                               x18)|])
    let (as_native :
      t -> buffer:Uint8Array.t -> ?length:int -> unit -> Uint8Array.t) =
      fun (x24 : t) ->
        fun ~buffer:(x20 : Uint8Array.t) ->
          fun ?length:(x21 : int option) ->
            fun () ->
              Uint8Array.t_of_js
                (let x25 = t_to_js x24 in
                 Ojs.call (Ojs.get_prop_ascii x25 "asNative") "apply"
                   [|x25;((let x22 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x22 "push"
                                [|(Uint8Array.t_to_js x20)|]);
                           (match x21 with
                            | Some x23 ->
                                ignore
                                  (Ojs.call x22 "push"
                                     [|(Ojs.int_to_js x23)|])
                            | None -> ());
                           x22))|])
    let (alloc_native : t -> length:int -> Uint8Array.t) =
      fun (x27 : t) ->
        fun ~length:(x26 : int) ->
          Uint8Array.t_of_js
            (Ojs.call (t_to_js x27) "allocNative" [|(Ojs.int_to_js x26)|])
    let (get_encoding : t -> Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t)
      =
      fun (x28 : t) ->
        Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_of_js
          (Ojs.get_prop_ascii (t_to_js x28) "encoding")
    let (append : t -> chunk:Uint8Array.t or_string -> unit) =
      fun (x31 : t) ->
        fun ~chunk:(x29 : Uint8Array.t or_string) ->
          ignore
            (Ojs.call (t_to_js x31) "append"
               [|(or_string_to_js Uint8Array.t_to_js x29)|])
    let (try_read_headers : t -> (string, string) Map.t or_undefined) =
      fun (x32 : t) ->
        or_undefined_of_js
          (fun (x33 : Ojs.t) ->
             Map.t_of_js Ojs.string_of_js Ojs.string_of_js x33)
          (Ojs.call (t_to_js x32) "tryReadHeaders" [||])
    let (try_read_body : t -> length:int -> Uint8Array.t or_undefined) =
      fun (x37 : t) ->
        fun ~length:(x36 : int) ->
          or_undefined_of_js Uint8Array.t_of_js
            (Ojs.call (t_to_js x37) "tryReadBody" [|(Ojs.int_to_js x36)|])
    let (get_number_of_bytes : t -> int) =
      fun (x39 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x39) "numberOfBytes")
    let (get__read : t -> any) =
      fun (x40 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x40) "_read")
    let (set__read : t -> any -> unit) =
      fun (x41 : t) ->
        fun (x42 : any) ->
          Ojs.set_prop_ascii (t_to_js x41) "_read" (any_to_js x42)
  end
