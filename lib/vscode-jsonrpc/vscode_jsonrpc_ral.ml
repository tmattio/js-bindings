[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
        type anonymous_interface_1 = [ `anonymous_interface_1 ] intf
        let rec anonymous_interface_1_of_js : Ojs.t -> anonymous_interface_1
          = Obj.magic
        and anonymous_interface_1_to_js : anonymous_interface_1 -> Ojs.t =
          Obj.magic
        type anonymous_interface_2 = [ `anonymous_interface_2 ] intf
        let rec anonymous_interface_2_of_js : Ojs.t -> anonymous_interface_2
          = Obj.magic
        and anonymous_interface_2_to_js : anonymous_interface_2 -> Ojs.t =
          Obj.magic
        type anonymous_interface_3 = [ `anonymous_interface_3 ] intf
        let rec anonymous_interface_3_of_js : Ojs.t -> anonymous_interface_3
          = Obj.magic
        and anonymous_interface_3_to_js : anonymous_interface_3 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type _RAL = [ `RAL ] intf
        and _RAL_DuplexStream = _DuplexStream
        and _RAL_ImmediateHandle = _ImmediateHandle
        and _RAL_MessageBuffer = _MessageBuffer
        and _RAL_MessageBufferEncoding = _MessageBufferEncoding
        and _RAL_ReadableStream = _ReadableStream
        and _RAL_TimeoutHandle = _TimeoutHandle
        and _RAL_WritableStream = _WritableStream
        and _DuplexStream =
          [ `_DuplexStream  | `_ReadableStream  | `_WritableStream ] intf
        and _ImmediateHandle = [ `_ImmediateHandle ] intf
        and _MessageBuffer = [ `_MessageBuffer ] intf
        and _MessageBufferEncoding = [ `L_s0_ascii  | `L_s1_utf_8 ]
        and _ReadableStream = [ `_ReadableStream ] intf
        and _TimeoutHandle = [ `_TimeoutHandle ] intf
        and _WritableStream = [ `_WritableStream ] intf
        let rec _RAL_of_js : Ojs.t -> _RAL = Obj.magic
        and _RAL_to_js : _RAL -> Ojs.t = Obj.magic
        and _RAL_DuplexStream_of_js : Ojs.t -> _RAL_DuplexStream =
          fun (x2 : Ojs.t) -> _DuplexStream_of_js x2
        and _RAL_DuplexStream_to_js : _RAL_DuplexStream -> Ojs.t =
          fun (x1 : _DuplexStream) -> _DuplexStream_to_js x1
        and _RAL_ImmediateHandle_of_js : Ojs.t -> _RAL_ImmediateHandle =
          fun (x4 : Ojs.t) -> _ImmediateHandle_of_js x4
        and _RAL_ImmediateHandle_to_js : _RAL_ImmediateHandle -> Ojs.t =
          fun (x3 : _ImmediateHandle) -> _ImmediateHandle_to_js x3
        and _RAL_MessageBuffer_of_js : Ojs.t -> _RAL_MessageBuffer =
          fun (x6 : Ojs.t) -> _MessageBuffer_of_js x6
        and _RAL_MessageBuffer_to_js : _RAL_MessageBuffer -> Ojs.t =
          fun (x5 : _MessageBuffer) -> _MessageBuffer_to_js x5
        and _RAL_MessageBufferEncoding_of_js :
          Ojs.t -> _RAL_MessageBufferEncoding =
          fun (x8 : Ojs.t) -> _MessageBufferEncoding_of_js x8
        and _RAL_MessageBufferEncoding_to_js :
          _RAL_MessageBufferEncoding -> Ojs.t =
          fun (x7 : _MessageBufferEncoding) ->
            _MessageBufferEncoding_to_js x7
        and _RAL_ReadableStream_of_js : Ojs.t -> _RAL_ReadableStream =
          fun (x10 : Ojs.t) -> _ReadableStream_of_js x10
        and _RAL_ReadableStream_to_js : _RAL_ReadableStream -> Ojs.t =
          fun (x9 : _ReadableStream) -> _ReadableStream_to_js x9
        and _RAL_TimeoutHandle_of_js : Ojs.t -> _RAL_TimeoutHandle =
          fun (x12 : Ojs.t) -> _TimeoutHandle_of_js x12
        and _RAL_TimeoutHandle_to_js : _RAL_TimeoutHandle -> Ojs.t =
          fun (x11 : _TimeoutHandle) -> _TimeoutHandle_to_js x11
        and _RAL_WritableStream_of_js : Ojs.t -> _RAL_WritableStream =
          fun (x14 : Ojs.t) -> _WritableStream_of_js x14
        and _RAL_WritableStream_to_js : _RAL_WritableStream -> Ojs.t =
          fun (x13 : _WritableStream) -> _WritableStream_to_js x13
        and _DuplexStream_of_js : Ojs.t -> _DuplexStream = Obj.magic
        and _DuplexStream_to_js : _DuplexStream -> Ojs.t = Obj.magic
        and _ImmediateHandle_of_js : Ojs.t -> _ImmediateHandle = Obj.magic
        and _ImmediateHandle_to_js : _ImmediateHandle -> Ojs.t = Obj.magic
        and _MessageBuffer_of_js : Ojs.t -> _MessageBuffer = Obj.magic
        and _MessageBuffer_to_js : _MessageBuffer -> Ojs.t = Obj.magic
        and _MessageBufferEncoding_of_js : Ojs.t -> _MessageBufferEncoding =
          fun (x16 : Ojs.t) ->
            let x17 = x16 in
            match Ojs.string_of_js x17 with
            | "ascii" -> `L_s0_ascii
            | "utf-8" -> `L_s1_utf_8
            | _ -> assert false
        and _MessageBufferEncoding_to_js : _MessageBufferEncoding -> Ojs.t =
          fun (x15 : [ `L_s0_ascii  | `L_s1_utf_8 ]) ->
            match x15 with
            | `L_s0_ascii -> Ojs.string_to_js "ascii"
            | `L_s1_utf_8 -> Ojs.string_to_js "utf-8"
        and _ReadableStream_of_js : Ojs.t -> _ReadableStream = Obj.magic
        and _ReadableStream_to_js : _ReadableStream -> Ojs.t = Obj.magic
        and _TimeoutHandle_of_js : Ojs.t -> _TimeoutHandle = Obj.magic
        and _TimeoutHandle_to_js : _TimeoutHandle -> Ojs.t = Obj.magic
        and _WritableStream_of_js : Ojs.t -> _WritableStream = Obj.magic
        and _WritableStream_to_js : _WritableStream -> Ojs.t = Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x19 : Ojs.t) -> anonymous_interface_0_of_js x19
    and t_to_js : t -> Ojs.t =
      fun (x18 : anonymous_interface_0) -> anonymous_interface_0_to_js x18
    let (get_encoder : t -> ContentTypeEncoder.t) =
      fun (x20 : t) ->
        ContentTypeEncoder.t_of_js
          (Ojs.get_prop_ascii (t_to_js x20) "encoder")
    let (get_decoder : t -> ContentTypeDecoder.t) =
      fun (x21 : t) ->
        ContentTypeDecoder.t_of_js
          (Ojs.get_prop_ascii (t_to_js x21) "decoder")
  end
module AnonymousInterface1 =
  struct
    type t = anonymous_interface_1
    let rec t_of_js : Ojs.t -> t =
      fun (x23 : Ojs.t) -> anonymous_interface_1_of_js x23
    and t_to_js : t -> Ojs.t =
      fun (x22 : anonymous_interface_1) -> anonymous_interface_1_to_js x22
    let (create_ :
      t -> encoding:_RAL_MessageBufferEncoding -> _RAL_MessageBuffer) =
      fun (x25 : t) ->
        fun ~encoding:(x24 : _RAL_MessageBufferEncoding) ->
          _RAL_MessageBuffer_of_js
            (Ojs.call (t_to_js x25) "create"
               [|(_RAL_MessageBufferEncoding_to_js x24)|])
  end
module AnonymousInterface2 =
  struct
    type t = anonymous_interface_2
    let rec t_of_js : Ojs.t -> t =
      fun (x27 : Ojs.t) -> anonymous_interface_2_of_js x27
    and t_to_js : t -> Ojs.t =
      fun (x26 : anonymous_interface_2) -> anonymous_interface_2_to_js x26
    let (info : t -> ?message:any -> optionalParams:any list -> unit) =
      fun (x33 : t) ->
        fun ?message:(x28 : any option) ->
          fun ~optionalParams:(x29 : any list) ->
            ignore
              (let x34 = t_to_js x33 in
               Ojs.call (Ojs.get_prop_ascii x34 "info") "apply"
                 [|x34;((let x30 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x28 with
                          | Some x32 ->
                              ignore
                                (Ojs.call x30 "push" [|(any_to_js x32)|])
                          | None -> ());
                         List.iter
                           (fun (x31 : any) ->
                              ignore
                                (Ojs.call x30 "push" [|(any_to_js x31)|]))
                           x29;
                         x30))|])
    let (log : t -> ?message:any -> optionalParams:any list -> unit) =
      fun (x40 : t) ->
        fun ?message:(x35 : any option) ->
          fun ~optionalParams:(x36 : any list) ->
            ignore
              (let x41 = t_to_js x40 in
               Ojs.call (Ojs.get_prop_ascii x41 "log") "apply"
                 [|x41;((let x37 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x35 with
                          | Some x39 ->
                              ignore
                                (Ojs.call x37 "push" [|(any_to_js x39)|])
                          | None -> ());
                         List.iter
                           (fun (x38 : any) ->
                              ignore
                                (Ojs.call x37 "push" [|(any_to_js x38)|]))
                           x36;
                         x37))|])
    let (warn : t -> ?message:any -> optionalParams:any list -> unit) =
      fun (x47 : t) ->
        fun ?message:(x42 : any option) ->
          fun ~optionalParams:(x43 : any list) ->
            ignore
              (let x48 = t_to_js x47 in
               Ojs.call (Ojs.get_prop_ascii x48 "warn") "apply"
                 [|x48;((let x44 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x42 with
                          | Some x46 ->
                              ignore
                                (Ojs.call x44 "push" [|(any_to_js x46)|])
                          | None -> ());
                         List.iter
                           (fun (x45 : any) ->
                              ignore
                                (Ojs.call x44 "push" [|(any_to_js x45)|]))
                           x43;
                         x44))|])
    let (error : t -> ?message:any -> optionalParams:any list -> unit) =
      fun (x54 : t) ->
        fun ?message:(x49 : any option) ->
          fun ~optionalParams:(x50 : any list) ->
            ignore
              (let x55 = t_to_js x54 in
               Ojs.call (Ojs.get_prop_ascii x55 "error") "apply"
                 [|x55;((let x51 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x49 with
                          | Some x53 ->
                              ignore
                                (Ojs.call x51 "push" [|(any_to_js x53)|])
                          | None -> ());
                         List.iter
                           (fun (x52 : any) ->
                              ignore
                                (Ojs.call x51 "push" [|(any_to_js x52)|]))
                           x50;
                         x51))|])
  end
module AnonymousInterface3 =
  struct
    type t = anonymous_interface_3
    let rec t_of_js : Ojs.t -> t =
      fun (x57 : Ojs.t) -> anonymous_interface_3_of_js x57
    and t_to_js : t -> Ojs.t =
      fun (x56 : anonymous_interface_3) -> anonymous_interface_3_to_js x56
    let (setTimeout :
      t ->
        callback:(args:any list -> unit) ->
          ms:float -> args:any list -> _RAL_TimeoutHandle)
      =
      fun (x65 : t) ->
        fun ~callback:(x58 : args:any list -> unit) ->
          fun ~ms:(x59 : float) ->
            fun ~args:(x60 : any list) ->
              _RAL_TimeoutHandle_of_js
                (let x66 = t_to_js x65 in
                 Ojs.call (Ojs.get_prop_ascii x66 "setTimeout") "apply"
                   [|x66;((let x61 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x61 "push"
                                [|(Ojs.fun_to_js_args
                                     (fun (x63 : _) ->
                                        x58
                                          ~args:(Ojs.list_of_js_from
                                                   any_of_js x63 0)))|]);
                           ignore
                             (Ojs.call x61 "push" [|(Ojs.float_to_js x59)|]);
                           List.iter
                             (fun (x62 : any) ->
                                ignore
                                  (Ojs.call x61 "push" [|(any_to_js x62)|]))
                             x60;
                           x61))|])
    let (clearTimeout : t -> handle:_RAL_TimeoutHandle -> unit) =
      fun (x68 : t) ->
        fun ~handle:(x67 : _RAL_TimeoutHandle) ->
          ignore
            (Ojs.call (t_to_js x68) "clearTimeout"
               [|(_RAL_TimeoutHandle_to_js x67)|])
    let (setImmediate :
      t ->
        callback:(args:any list -> unit) ->
          args:any list -> _RAL_ImmediateHandle)
      =
      fun (x75 : t) ->
        fun ~callback:(x69 : args:any list -> unit) ->
          fun ~args:(x70 : any list) ->
            _RAL_ImmediateHandle_of_js
              (let x76 = t_to_js x75 in
               Ojs.call (Ojs.get_prop_ascii x76 "setImmediate") "apply"
                 [|x76;((let x71 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         ignore
                           (Ojs.call x71 "push"
                              [|(Ojs.fun_to_js_args
                                   (fun (x73 : _) ->
                                      x69
                                        ~args:(Ojs.list_of_js_from any_of_js
                                                 x73 0)))|]);
                         List.iter
                           (fun (x72 : any) ->
                              ignore
                                (Ojs.call x71 "push" [|(any_to_js x72)|]))
                           x70;
                         x71))|])
    let (clearImmediate : t -> handle:_RAL_ImmediateHandle -> unit) =
      fun (x78 : t) ->
        fun ~handle:(x77 : _RAL_ImmediateHandle) ->
          ignore
            (Ojs.call (t_to_js x78) "clearImmediate"
               [|(_RAL_ImmediateHandle_to_js x77)|])
  end
module M_MessageBuffer =
  struct
    type t = _MessageBuffer
    let rec t_of_js : Ojs.t -> t =
      fun (x80 : Ojs.t) -> _MessageBuffer_of_js x80
    and t_to_js : t -> Ojs.t =
      fun (x79 : _MessageBuffer) -> _MessageBuffer_to_js x79
    let (get_encoding : t -> _RAL_MessageBufferEncoding) =
      fun (x81 : t) ->
        _RAL_MessageBufferEncoding_of_js
          (Ojs.get_prop_ascii (t_to_js x81) "encoding")
    let (append : t -> chunk:Uint8Array.t or_string -> unit) =
      fun (x84 : t) ->
        fun ~chunk:(x82 : Uint8Array.t or_string) ->
          ignore
            (Ojs.call (t_to_js x84) "append"
               [|(or_string_to_js Uint8Array.t_to_js x82)|])
    let (tryReadHeaders : t -> (string, string) Map.t_2 or_undefined) =
      fun (x85 : t) ->
        or_undefined_of_js
          (fun (x86 : Ojs.t) ->
             Map.t_2_of_js Ojs.string_of_js Ojs.string_of_js x86)
          (Ojs.call (t_to_js x85) "tryReadHeaders" [||])
    let (tryReadBody : t -> length:float -> Uint8Array.t or_undefined) =
      fun (x90 : t) ->
        fun ~length:(x89 : float) ->
          or_undefined_of_js Uint8Array.t_of_js
            (Ojs.call (t_to_js x90) "tryReadBody" [|(Ojs.float_to_js x89)|])
  end
module M_MessageBufferEncoding =
  struct
    type t = _MessageBufferEncoding
    let rec t_of_js : Ojs.t -> t =
      fun (x93 : Ojs.t) -> _MessageBufferEncoding_of_js x93
    and t_to_js : t -> Ojs.t =
      fun (x92 : _MessageBufferEncoding) -> _MessageBufferEncoding_to_js x92
  end
module M_ReadableStream =
  struct
    type t = _ReadableStream
    let rec t_of_js : Ojs.t -> t =
      fun (x95 : Ojs.t) -> _ReadableStream_of_js x95
    and t_to_js : t -> Ojs.t =
      fun (x94 : _ReadableStream) -> _ReadableStream_to_js x94
    let (onData : t -> listener:(data:Uint8Array.t -> unit) -> Disposable.t)
      =
      fun (x98 : t) ->
        fun ~listener:(x96 : data:Uint8Array.t -> unit) ->
          Disposable.t_of_js
            (Ojs.call (t_to_js x98) "onData"
               [|(Ojs.fun_to_js 1
                    (fun (x97 : Ojs.t) -> x96 ~data:(Uint8Array.t_of_js x97)))|])
    let (onClose : t -> listener:(unit -> unit) -> Disposable.t) =
      fun (x100 : t) ->
        fun ~listener:(x99 : unit -> unit) ->
          Disposable.t_of_js
            (Ojs.call (t_to_js x100) "onClose"
               [|(Ojs.fun_to_js 1 (fun _ -> x99 ()))|])
    let (onError : t -> listener:(error:any -> unit) -> Disposable.t) =
      fun (x103 : t) ->
        fun ~listener:(x101 : error:any -> unit) ->
          Disposable.t_of_js
            (Ojs.call (t_to_js x103) "onError"
               [|(Ojs.fun_to_js 1
                    (fun (x102 : Ojs.t) -> x101 ~error:(any_of_js x102)))|])
    let (onEnd : t -> listener:(unit -> unit) -> Disposable.t) =
      fun (x105 : t) ->
        fun ~listener:(x104 : unit -> unit) ->
          Disposable.t_of_js
            (Ojs.call (t_to_js x105) "onEnd"
               [|(Ojs.fun_to_js 1 (fun _ -> x104 ()))|])
  end
module M_WritableStream =
  struct
    type t = _WritableStream
    let rec t_of_js : Ojs.t -> t =
      fun (x107 : Ojs.t) -> _WritableStream_of_js x107
    and t_to_js : t -> Ojs.t =
      fun (x106 : _WritableStream) -> _WritableStream_to_js x106
    let (onClose : t -> listener:(unit -> unit) -> Disposable.t) =
      fun (x109 : t) ->
        fun ~listener:(x108 : unit -> unit) ->
          Disposable.t_of_js
            (Ojs.call (t_to_js x109) "onClose"
               [|(Ojs.fun_to_js 1 (fun _ -> x108 ()))|])
    let (onError : t -> listener:(error:any -> unit) -> Disposable.t) =
      fun (x112 : t) ->
        fun ~listener:(x110 : error:any -> unit) ->
          Disposable.t_of_js
            (Ojs.call (t_to_js x112) "onError"
               [|(Ojs.fun_to_js 1
                    (fun (x111 : Ojs.t) -> x110 ~error:(any_of_js x111)))|])
    let (onEnd : t -> listener:(unit -> unit) -> Disposable.t) =
      fun (x114 : t) ->
        fun ~listener:(x113 : unit -> unit) ->
          Disposable.t_of_js
            (Ojs.call (t_to_js x114) "onEnd"
               [|(Ojs.fun_to_js 1 (fun _ -> x113 ()))|])
    let (write : t -> data:Uint8Array.t -> unit Promise.t) =
      fun (x116 : t) ->
        fun ~data:(x115 : Uint8Array.t) ->
          Promise.t_of_js Ojs.unit_of_js
            (Ojs.call (t_to_js x116) "write" [|(Uint8Array.t_to_js x115)|])
    let (write' :
      t -> data:string -> encoding:_MessageBufferEncoding -> unit Promise.t)
      =
      fun (x120 : t) ->
        fun ~data:(x118 : string) ->
          fun ~encoding:(x119 : _MessageBufferEncoding) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call (t_to_js x120) "write"
                 [|(Ojs.string_to_js x118);(_MessageBufferEncoding_to_js x119)|])
    let (end_ : t -> unit) =
      fun (x122 : t) -> ignore (Ojs.call (t_to_js x122) "end" [||])
  end
module M_DuplexStream =
  struct
    type t = _DuplexStream
    let rec t_of_js : Ojs.t -> t =
      fun (x124 : Ojs.t) -> _DuplexStream_of_js x124
    and t_to_js : t -> Ojs.t =
      fun (x123 : _DuplexStream) -> _DuplexStream_to_js x123
    let (cast : t -> _ReadableStream) =
      fun (x125 : t) -> _ReadableStream_of_js (t_to_js x125)
    let (cast' : t -> _WritableStream) =
      fun (x126 : t) -> _WritableStream_of_js (t_to_js x126)
  end
module M_TimeoutHandle =
  struct
    type t = _TimeoutHandle
    let rec t_of_js : Ojs.t -> t =
      fun (x128 : Ojs.t) -> _TimeoutHandle_of_js x128
    and t_to_js : t -> Ojs.t =
      fun (x127 : _TimeoutHandle) -> _TimeoutHandle_to_js x127
    let (get__timerBrand : t -> never or_undefined) =
      fun (x129 : t) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii (t_to_js x129) "_timerBrand")
    let (set__timerBrand : t -> never or_undefined -> unit) =
      fun (x131 : t) ->
        fun (x132 : never or_undefined) ->
          Ojs.set_prop_ascii (t_to_js x131) "_timerBrand"
            (or_undefined_to_js never_to_js x132)
  end
module M_ImmediateHandle =
  struct
    type t = _ImmediateHandle
    let rec t_of_js : Ojs.t -> t =
      fun (x135 : Ojs.t) -> _ImmediateHandle_of_js x135
    and t_to_js : t -> Ojs.t =
      fun (x134 : _ImmediateHandle) -> _ImmediateHandle_to_js x134
    let (get__immediateBrand : t -> never or_undefined) =
      fun (x136 : t) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii (t_to_js x136) "_immediateBrand")
    let (set__immediateBrand : t -> never or_undefined -> unit) =
      fun (x138 : t) ->
        fun (x139 : never or_undefined) ->
          Ojs.set_prop_ascii (t_to_js x138) "_immediateBrand"
            (or_undefined_to_js never_to_js x139)
  end
module RAL =
  struct
    type t = _RAL
    let rec t_of_js : Ojs.t -> t = fun (x142 : Ojs.t) -> _RAL_of_js x142
    and t_to_js : t -> Ojs.t = fun (x141 : _RAL) -> _RAL_to_js x141
    let (get_applicationJson : t -> anonymous_interface_0) =
      fun (x143 : t) ->
        anonymous_interface_0_of_js
          (Ojs.get_prop_ascii (t_to_js x143) "applicationJson")
    let (get_messageBuffer : t -> anonymous_interface_1) =
      fun (x144 : t) ->
        anonymous_interface_1_of_js
          (Ojs.get_prop_ascii (t_to_js x144) "messageBuffer")
    let (get_console : t -> anonymous_interface_2) =
      fun (x145 : t) ->
        anonymous_interface_2_of_js
          (Ojs.get_prop_ascii (t_to_js x145) "console")
    let (get_timer : t -> anonymous_interface_3) =
      fun (x146 : t) ->
        anonymous_interface_3_of_js
          (Ojs.get_prop_ascii (t_to_js x146) "timer")
  end
let (rAL : unit -> _RAL) =
  fun () -> _RAL_of_js (Ojs.call Ojs.global "RAL" [||])
module RAL =
  struct
    module MessageBuffer =
      struct
        type t = _RAL_MessageBuffer
        let rec t_of_js : Ojs.t -> t =
          fun (x148 : Ojs.t) -> _RAL_MessageBuffer_of_js x148
        and t_to_js : t -> Ojs.t =
          fun (x147 : _RAL_MessageBuffer) -> _RAL_MessageBuffer_to_js x147
      end
    module MessageBufferEncoding =
      struct
        type t = _RAL_MessageBufferEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x150 : Ojs.t) -> _RAL_MessageBufferEncoding_of_js x150
        and t_to_js : t -> Ojs.t =
          fun (x149 : _RAL_MessageBufferEncoding) ->
            _RAL_MessageBufferEncoding_to_js x149
      end
    module ReadableStream =
      struct
        type t = _RAL_ReadableStream
        let rec t_of_js : Ojs.t -> t =
          fun (x152 : Ojs.t) -> _RAL_ReadableStream_of_js x152
        and t_to_js : t -> Ojs.t =
          fun (x151 : _RAL_ReadableStream) -> _RAL_ReadableStream_to_js x151
      end
    module WritableStream =
      struct
        type t = _RAL_WritableStream
        let rec t_of_js : Ojs.t -> t =
          fun (x154 : Ojs.t) -> _RAL_WritableStream_of_js x154
        and t_to_js : t -> Ojs.t =
          fun (x153 : _RAL_WritableStream) -> _RAL_WritableStream_to_js x153
      end
    module DuplexStream =
      struct
        type t = _RAL_DuplexStream
        let rec t_of_js : Ojs.t -> t =
          fun (x156 : Ojs.t) -> _RAL_DuplexStream_of_js x156
        and t_to_js : t -> Ojs.t =
          fun (x155 : _RAL_DuplexStream) -> _RAL_DuplexStream_to_js x155
      end
    module TimeoutHandle =
      struct
        type t = _RAL_TimeoutHandle
        let rec t_of_js : Ojs.t -> t =
          fun (x158 : Ojs.t) -> _RAL_TimeoutHandle_of_js x158
        and t_to_js : t -> Ojs.t =
          fun (x157 : _RAL_TimeoutHandle) -> _RAL_TimeoutHandle_to_js x157
      end
    module ImmediateHandle =
      struct
        type t = _RAL_ImmediateHandle
        let rec t_of_js : Ojs.t -> t =
          fun (x160 : Ojs.t) -> _RAL_ImmediateHandle_of_js x160
        and t_to_js : t -> Ojs.t =
          fun (x159 : _RAL_ImmediateHandle) ->
            _RAL_ImmediateHandle_to_js x159
      end
    let (install : ral:_RAL -> unit) =
      fun ~ral:(x161 : _RAL) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RAL") "install"
             [|(_RAL_to_js x161)|])
  end
