[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_encoder : t -> any) =
      fun (x3 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x3) "encoder")
    let (get_decoder : t -> any) =
      fun (x4 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x4) "decoder")
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x6 : Ojs.t) -> x6
    and t_to_js : t -> Ojs.t = fun (x5 : Ojs.t) -> x5
    let (create_ :
      t -> encoding:RAL_MessageBufferEncoding.t -> RAL_MessageBuffer.t) =
      fun (x8 : t) ->
        fun ~encoding:(x7 : RAL_MessageBufferEncoding.t) ->
          RAL_MessageBuffer.t_of_js
            (Ojs.call (t_to_js x8) "create"
               [|(RAL_MessageBufferEncoding.t_to_js x7)|])
  end
module AnonymousInterface2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10 : Ojs.t) -> x10
    and t_to_js : t -> Ojs.t = fun (x9 : Ojs.t) -> x9
    let (info : t -> ?message:any -> optional_params:any list -> unit) =
      fun (x16 : t) ->
        fun ?message:(x11 : any option) ->
          fun ~optional_params:(x12 : any list) ->
            ignore
              (let x17 = t_to_js x16 in
               Ojs.call (Ojs.get_prop_ascii x17 "info") "apply"
                 [|x17;((let x13 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x11 with
                          | Some x15 ->
                              ignore
                                (Ojs.call x13 "push" [|(any_to_js x15)|])
                          | None -> ());
                         List.iter
                           (fun (x14 : any) ->
                              ignore
                                (Ojs.call x13 "push" [|(any_to_js x14)|]))
                           x12;
                         x13))|])
    let (log : t -> ?message:any -> optional_params:any list -> unit) =
      fun (x23 : t) ->
        fun ?message:(x18 : any option) ->
          fun ~optional_params:(x19 : any list) ->
            ignore
              (let x24 = t_to_js x23 in
               Ojs.call (Ojs.get_prop_ascii x24 "log") "apply"
                 [|x24;((let x20 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x18 with
                          | Some x22 ->
                              ignore
                                (Ojs.call x20 "push" [|(any_to_js x22)|])
                          | None -> ());
                         List.iter
                           (fun (x21 : any) ->
                              ignore
                                (Ojs.call x20 "push" [|(any_to_js x21)|]))
                           x19;
                         x20))|])
    let (warn : t -> ?message:any -> optional_params:any list -> unit) =
      fun (x30 : t) ->
        fun ?message:(x25 : any option) ->
          fun ~optional_params:(x26 : any list) ->
            ignore
              (let x31 = t_to_js x30 in
               Ojs.call (Ojs.get_prop_ascii x31 "warn") "apply"
                 [|x31;((let x27 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x25 with
                          | Some x29 ->
                              ignore
                                (Ojs.call x27 "push" [|(any_to_js x29)|])
                          | None -> ());
                         List.iter
                           (fun (x28 : any) ->
                              ignore
                                (Ojs.call x27 "push" [|(any_to_js x28)|]))
                           x26;
                         x27))|])
    let (error : t -> ?message:any -> optional_params:any list -> unit) =
      fun (x37 : t) ->
        fun ?message:(x32 : any option) ->
          fun ~optional_params:(x33 : any list) ->
            ignore
              (let x38 = t_to_js x37 in
               Ojs.call (Ojs.get_prop_ascii x38 "error") "apply"
                 [|x38;((let x34 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x32 with
                          | Some x36 ->
                              ignore
                                (Ojs.call x34 "push" [|(any_to_js x36)|])
                          | None -> ());
                         List.iter
                           (fun (x35 : any) ->
                              ignore
                                (Ojs.call x34 "push" [|(any_to_js x35)|]))
                           x33;
                         x34))|])
  end
module AnonymousInterface3 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x40 : Ojs.t) -> x40
    and t_to_js : t -> Ojs.t = fun (x39 : Ojs.t) -> x39
    let (set_timeout :
      t ->
        callback:(args:any list -> unit) ->
          ms:int -> args:any list -> RAL_TimeoutHandle.t)
      =
      fun (x48 : t) ->
        fun ~callback:(x41 : args:any list -> unit) ->
          fun ~ms:(x42 : int) ->
            fun ~args:(x43 : any list) ->
              RAL_TimeoutHandle.t_of_js
                (let x49 = t_to_js x48 in
                 Ojs.call (Ojs.get_prop_ascii x49 "setTimeout") "apply"
                   [|x49;((let x44 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x44 "push"
                                [|(Ojs.fun_to_js_args
                                     (fun (x46 : _) ->
                                        x41
                                          ~args:(Ojs.list_of_js_from
                                                   any_of_js x46 0)))|]);
                           ignore
                             (Ojs.call x44 "push" [|(Ojs.int_to_js x42)|]);
                           List.iter
                             (fun (x45 : any) ->
                                ignore
                                  (Ojs.call x44 "push" [|(any_to_js x45)|]))
                             x43;
                           x44))|])
    let (clear_timeout : t -> handle:RAL_TimeoutHandle.t -> unit) =
      fun (x51 : t) ->
        fun ~handle:(x50 : RAL_TimeoutHandle.t) ->
          ignore
            (Ojs.call (t_to_js x51) "clearTimeout"
               [|(RAL_TimeoutHandle.t_to_js x50)|])
    let (set_immediate :
      t ->
        callback:(args:any list -> unit) ->
          args:any list -> RAL_ImmediateHandle.t)
      =
      fun (x58 : t) ->
        fun ~callback:(x52 : args:any list -> unit) ->
          fun ~args:(x53 : any list) ->
            RAL_ImmediateHandle.t_of_js
              (let x59 = t_to_js x58 in
               Ojs.call (Ojs.get_prop_ascii x59 "setImmediate") "apply"
                 [|x59;((let x54 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         ignore
                           (Ojs.call x54 "push"
                              [|(Ojs.fun_to_js_args
                                   (fun (x56 : _) ->
                                      x52
                                        ~args:(Ojs.list_of_js_from any_of_js
                                                 x56 0)))|]);
                         List.iter
                           (fun (x55 : any) ->
                              ignore
                                (Ojs.call x54 "push" [|(any_to_js x55)|]))
                           x53;
                         x54))|])
    let (clear_immediate : t -> handle:RAL_ImmediateHandle.t -> unit) =
      fun (x61 : t) ->
        fun ~handle:(x60 : RAL_ImmediateHandle.t) ->
          ignore
            (Ojs.call (t_to_js x61) "clearImmediate"
               [|(RAL_ImmediateHandle.t_to_js x60)|])
  end
module MessageBuffer =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x63 : Ojs.t) -> x63
    and t_to_js : t -> Ojs.t = fun (x62 : Ojs.t) -> x62
    let (get_encoding : t -> RAL_MessageBufferEncoding.t) =
      fun (x64 : t) ->
        RAL_MessageBufferEncoding.t_of_js
          (Ojs.get_prop_ascii (t_to_js x64) "encoding")
    let (append : t -> chunk:Uint8Array.t or_string -> unit) =
      fun (x67 : t) ->
        fun ~chunk:(x65 : Uint8Array.t or_string) ->
          ignore
            (Ojs.call (t_to_js x67) "append"
               [|(or_string_to_js Uint8Array.t_to_js x65)|])
    let (try_read_headers : t -> (string, string) Map.t or_undefined) =
      fun (x68 : t) ->
        or_undefined_of_js
          (fun (x69 : Ojs.t) ->
             Map.t_of_js Ojs.string_of_js Ojs.string_of_js x69)
          (Ojs.call (t_to_js x68) "tryReadHeaders" [||])
    let (try_read_body : t -> length:int -> Uint8Array.t or_undefined) =
      fun (x73 : t) ->
        fun ~length:(x72 : int) ->
          or_undefined_of_js Uint8Array.t_of_js
            (Ojs.call (t_to_js x73) "tryReadBody" [|(Ojs.int_to_js x72)|])
  end
module MessageBufferEncoding =
  struct
    type t = [ `L_s0_ascii  | `L_s1_utf_8 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x76 : Ojs.t) ->
        let x77 = x76 in
        match Ojs.string_of_js x77 with
        | "ascii" -> `L_s0_ascii
        | "utf-8" -> `L_s1_utf_8
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x75 : [ `L_s0_ascii  | `L_s1_utf_8 ]) ->
        match x75 with
        | `L_s0_ascii -> Ojs.string_to_js "ascii"
        | `L_s1_utf_8 -> Ojs.string_to_js "utf-8"
  end
module ReadableStream =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x79 : Ojs.t) -> x79
    and t_to_js : t -> Ojs.t = fun (x78 : Ojs.t) -> x78
    let (on_data :
      t ->
        listener:(data:Uint8Array.t -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t)
      =
      fun (x82 : t) ->
        fun ~listener:(x80 : data:Uint8Array.t -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t_of_js
            (Ojs.call (t_to_js x82) "onData"
               [|(Ojs.fun_to_js 1
                    (fun (x81 : Ojs.t) -> x80 ~data:(Uint8Array.t_of_js x81)))|])
    let (on_close :
      t -> listener:(unit -> unit) -> Vscode_jsonrpc_disposable.Disposable.t)
      =
      fun (x84 : t) ->
        fun ~listener:(x83 : unit -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t_of_js
            (Ojs.call (t_to_js x84) "onClose"
               [|(Ojs.fun_to_js 1 (fun _ -> x83 ()))|])
    let (on_error :
      t ->
        listener:(error:any -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t)
      =
      fun (x87 : t) ->
        fun ~listener:(x85 : error:any -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t_of_js
            (Ojs.call (t_to_js x87) "onError"
               [|(Ojs.fun_to_js 1
                    (fun (x86 : Ojs.t) -> x85 ~error:(any_of_js x86)))|])
    let (on_end :
      t -> listener:(unit -> unit) -> Vscode_jsonrpc_disposable.Disposable.t)
      =
      fun (x89 : t) ->
        fun ~listener:(x88 : unit -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t_of_js
            (Ojs.call (t_to_js x89) "onEnd"
               [|(Ojs.fun_to_js 1 (fun _ -> x88 ()))|])
  end
module WritableStream =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x91 : Ojs.t) -> x91
    and t_to_js : t -> Ojs.t = fun (x90 : Ojs.t) -> x90
    let (on_close :
      t -> listener:(unit -> unit) -> Vscode_jsonrpc_disposable.Disposable.t)
      =
      fun (x93 : t) ->
        fun ~listener:(x92 : unit -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t_of_js
            (Ojs.call (t_to_js x93) "onClose"
               [|(Ojs.fun_to_js 1 (fun _ -> x92 ()))|])
    let (on_error :
      t ->
        listener:(error:any -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t)
      =
      fun (x96 : t) ->
        fun ~listener:(x94 : error:any -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t_of_js
            (Ojs.call (t_to_js x96) "onError"
               [|(Ojs.fun_to_js 1
                    (fun (x95 : Ojs.t) -> x94 ~error:(any_of_js x95)))|])
    let (on_end :
      t -> listener:(unit -> unit) -> Vscode_jsonrpc_disposable.Disposable.t)
      =
      fun (x98 : t) ->
        fun ~listener:(x97 : unit -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t_of_js
            (Ojs.call (t_to_js x98) "onEnd"
               [|(Ojs.fun_to_js 1 (fun _ -> x97 ()))|])
    let (write : t -> data:Uint8Array.t -> unit Promise.t) =
      fun (x100 : t) ->
        fun ~data:(x99 : Uint8Array.t) ->
          Promise.t_of_js Ojs.unit_of_js
            (Ojs.call (t_to_js x100) "write" [|(Uint8Array.t_to_js x99)|])
    let (write' :
      t -> data:string -> encoding:MessageBufferEncoding.t -> unit Promise.t)
      =
      fun (x104 : t) ->
        fun ~data:(x102 : string) ->
          fun ~encoding:(x103 : MessageBufferEncoding.t) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call (t_to_js x104) "write"
                 [|(Ojs.string_to_js x102);(MessageBufferEncoding.t_to_js
                                              x103)|])
    let (end_ : t -> unit) =
      fun (x106 : t) -> ignore (Ojs.call (t_to_js x106) "end" [||])
  end
module DuplexStream =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x108 : Ojs.t) -> x108
    and t_to_js : t -> Ojs.t = fun (x107 : Ojs.t) -> x107
    let (cast : t -> ReadableStream.t) =
      fun (x109 : t) -> ReadableStream.t_of_js (t_to_js x109)
    let (cast' : t -> WritableStream.t) =
      fun (x110 : t) -> WritableStream.t_of_js (t_to_js x110)
  end
module TimeoutHandle =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x112 : Ojs.t) -> x112
    and t_to_js : t -> Ojs.t = fun (x111 : Ojs.t) -> x111
    let (get_timer_brand : t -> never or_undefined) =
      fun (x113 : t) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii (t_to_js x113) "_timerBrand")
    let (set_timer_brand : t -> never or_undefined -> unit) =
      fun (x115 : t) ->
        fun (x116 : never or_undefined) ->
          Ojs.set_prop_ascii (t_to_js x115) "_timerBrand"
            (or_undefined_to_js never_to_js x116)
  end
module ImmediateHandle =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x119 : Ojs.t) -> x119
    and t_to_js : t -> Ojs.t = fun (x118 : Ojs.t) -> x118
    let (get_immediate_brand : t -> never or_undefined) =
      fun (x120 : t) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii (t_to_js x120) "_immediateBrand")
    let (set_immediate_brand : t -> never or_undefined -> unit) =
      fun (x122 : t) ->
        fun (x123 : never or_undefined) ->
          Ojs.set_prop_ascii (t_to_js x122) "_immediateBrand"
            (or_undefined_to_js never_to_js x123)
  end
module RAL =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x126 : Ojs.t) -> x126
    and t_to_js : t -> Ojs.t = fun (x125 : Ojs.t) -> x125
    let (get_application_json : t -> AnonymousInterface0.t) =
      fun (x127 : t) ->
        AnonymousInterface0.t_of_js
          (Ojs.get_prop_ascii (t_to_js x127) "applicationJson")
    let (get_message_buffer : t -> AnonymousInterface1.t) =
      fun (x128 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x128) "messageBuffer")
    let (get_console : t -> AnonymousInterface2.t) =
      fun (x129 : t) ->
        AnonymousInterface2.t_of_js
          (Ojs.get_prop_ascii (t_to_js x129) "console")
    let (get_timer : t -> AnonymousInterface3.t) =
      fun (x130 : t) ->
        AnonymousInterface3.t_of_js
          (Ojs.get_prop_ascii (t_to_js x130) "timer")
    module MessageBuffer =
      struct
        type t = MessageBuffer.t
        let rec t_of_js : Ojs.t -> t =
          fun (x132 : Ojs.t) -> MessageBuffer.t_of_js x132
        and t_to_js : t -> Ojs.t =
          fun (x131 : MessageBuffer.t) -> MessageBuffer.t_to_js x131
      end
    module MessageBufferEncoding =
      struct
        type t = MessageBufferEncoding.t
        let rec t_of_js : Ojs.t -> t =
          fun (x134 : Ojs.t) -> MessageBufferEncoding.t_of_js x134
        and t_to_js : t -> Ojs.t =
          fun (x133 : MessageBufferEncoding.t) ->
            MessageBufferEncoding.t_to_js x133
      end
    module ReadableStream =
      struct
        type t = ReadableStream.t
        let rec t_of_js : Ojs.t -> t =
          fun (x136 : Ojs.t) -> ReadableStream.t_of_js x136
        and t_to_js : t -> Ojs.t =
          fun (x135 : ReadableStream.t) -> ReadableStream.t_to_js x135
      end
    module WritableStream =
      struct
        type t = WritableStream.t
        let rec t_of_js : Ojs.t -> t =
          fun (x138 : Ojs.t) -> WritableStream.t_of_js x138
        and t_to_js : t -> Ojs.t =
          fun (x137 : WritableStream.t) -> WritableStream.t_to_js x137
      end
    module DuplexStream =
      struct
        type t = DuplexStream.t
        let rec t_of_js : Ojs.t -> t =
          fun (x140 : Ojs.t) -> DuplexStream.t_of_js x140
        and t_to_js : t -> Ojs.t =
          fun (x139 : DuplexStream.t) -> DuplexStream.t_to_js x139
      end
    module TimeoutHandle =
      struct
        type t = TimeoutHandle.t
        let rec t_of_js : Ojs.t -> t =
          fun (x142 : Ojs.t) -> TimeoutHandle.t_of_js x142
        and t_to_js : t -> Ojs.t =
          fun (x141 : TimeoutHandle.t) -> TimeoutHandle.t_to_js x141
      end
    module ImmediateHandle =
      struct
        type t = ImmediateHandle.t
        let rec t_of_js : Ojs.t -> t =
          fun (x144 : Ojs.t) -> ImmediateHandle.t_of_js x144
        and t_to_js : t -> Ojs.t =
          fun (x143 : ImmediateHandle.t) -> ImmediateHandle.t_to_js x143
      end
    let (install : ral:RAL.t -> unit) =
      fun ~ral:(x145 : RAL.t) ->
        ignore
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "RAL") "install"
             [|(RAL.t_to_js x145)|])
  end
let (ral : unit -> RAL.t) =
  fun () -> RAL.t_of_js (Ojs.call Ojs.global "RAL" [||])
