[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_encoder : t -> any) =
      fun (x3 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x3) "encoder")
    let (get_decoder : t -> any) =
      fun (x4 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x4) "decoder")
  end
module AnonymousInterface2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x6 : Ojs.t) -> x6
    and t_to_js : t -> Ojs.t = fun (x5 : Ojs.t) -> x5
    let (info : t -> ?message:any -> optional_params:any list -> unit) =
      fun (x12 : t) ->
        fun ?message:(x7 : any option) ->
          fun ~optional_params:(x8 : any list) ->
            ignore
              (let x13 = t_to_js x12 in
               Ojs.call (Ojs.get_prop_ascii x13 "info") "apply"
                 [|x13;((let x9 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x7 with
                          | Some x11 ->
                              ignore (Ojs.call x9 "push" [|(any_to_js x11)|])
                          | None -> ());
                         List.iter
                           (fun (x10 : any) ->
                              ignore (Ojs.call x9 "push" [|(any_to_js x10)|]))
                           x8;
                         x9))|])
    let (log : t -> ?message:any -> optional_params:any list -> unit) =
      fun (x19 : t) ->
        fun ?message:(x14 : any option) ->
          fun ~optional_params:(x15 : any list) ->
            ignore
              (let x20 = t_to_js x19 in
               Ojs.call (Ojs.get_prop_ascii x20 "log") "apply"
                 [|x20;((let x16 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x14 with
                          | Some x18 ->
                              ignore
                                (Ojs.call x16 "push" [|(any_to_js x18)|])
                          | None -> ());
                         List.iter
                           (fun (x17 : any) ->
                              ignore
                                (Ojs.call x16 "push" [|(any_to_js x17)|]))
                           x15;
                         x16))|])
    let (warn : t -> ?message:any -> optional_params:any list -> unit) =
      fun (x26 : t) ->
        fun ?message:(x21 : any option) ->
          fun ~optional_params:(x22 : any list) ->
            ignore
              (let x27 = t_to_js x26 in
               Ojs.call (Ojs.get_prop_ascii x27 "warn") "apply"
                 [|x27;((let x23 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x21 with
                          | Some x25 ->
                              ignore
                                (Ojs.call x23 "push" [|(any_to_js x25)|])
                          | None -> ());
                         List.iter
                           (fun (x24 : any) ->
                              ignore
                                (Ojs.call x23 "push" [|(any_to_js x24)|]))
                           x22;
                         x23))|])
    let (error : t -> ?message:any -> optional_params:any list -> unit) =
      fun (x33 : t) ->
        fun ?message:(x28 : any option) ->
          fun ~optional_params:(x29 : any list) ->
            ignore
              (let x34 = t_to_js x33 in
               Ojs.call (Ojs.get_prop_ascii x34 "error") "apply"
                 [|x34;((let x30 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x28 with
                          | Some x32 ->
                              ignore
                                (Ojs.call x30 "push" [|(any_to_js x32)|])
                          | None -> ());
                         List.iter
                           (fun (x31 : any) ->
                              ignore
                                (Ojs.call x30 "push" [|(any_to_js x31)|]))
                           x29;
                         x30))|])
  end
module MessageBufferEncoding =
  struct
    type t = [ `L_s0_ascii  | `L_s1_utf_8 ]
    let rec t_of_js : Ojs.t -> t =
      fun (x36 : Ojs.t) ->
        let x37 = x36 in
        match Ojs.string_of_js x37 with
        | "ascii" -> `L_s0_ascii
        | "utf-8" -> `L_s1_utf_8
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x35 : [ `L_s0_ascii  | `L_s1_utf_8 ]) ->
        match x35 with
        | `L_s0_ascii -> Ojs.string_to_js "ascii"
        | `L_s1_utf_8 -> Ojs.string_to_js "utf-8"
  end
module MessageBuffer =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x39 : Ojs.t) -> x39
    and t_to_js : t -> Ojs.t = fun (x38 : Ojs.t) -> x38
    let (get_encoding : t -> MessageBufferEncoding.t) =
      fun (x40 : t) ->
        MessageBufferEncoding.t_of_js
          (Ojs.get_prop_ascii (t_to_js x40) "encoding")
    let (append : t -> chunk:Uint8Array.t or_string -> unit) =
      fun (x43 : t) ->
        fun ~chunk:(x41 : Uint8Array.t or_string) ->
          ignore
            (Ojs.call (t_to_js x43) "append"
               [|(or_string_to_js Uint8Array.t_to_js x41)|])
    let (try_read_headers : t -> (string, string) Map.t or_undefined) =
      fun (x44 : t) ->
        or_undefined_of_js
          (fun (x45 : Ojs.t) ->
             Map.t_of_js Ojs.string_of_js Ojs.string_of_js x45)
          (Ojs.call (t_to_js x44) "tryReadHeaders" [||])
    let (try_read_body : t -> length:int -> Uint8Array.t or_undefined) =
      fun (x49 : t) ->
        fun ~length:(x48 : int) ->
          or_undefined_of_js Uint8Array.t_of_js
            (Ojs.call (t_to_js x49) "tryReadBody" [|(Ojs.int_to_js x48)|])
  end
module ReadableStream =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x52 : Ojs.t) -> x52
    and t_to_js : t -> Ojs.t = fun (x51 : Ojs.t) -> x51
    let (on_data :
      t ->
        listener:(data:Uint8Array.t -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t)
      =
      fun (x55 : t) ->
        fun ~listener:(x53 : data:Uint8Array.t -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t_of_js
            (Ojs.call (t_to_js x55) "onData"
               [|(Ojs.fun_to_js 1
                    (fun (x54 : Ojs.t) -> x53 ~data:(Uint8Array.t_of_js x54)))|])
    let (on_close :
      t -> listener:(unit -> unit) -> Vscode_jsonrpc_disposable.Disposable.t)
      =
      fun (x57 : t) ->
        fun ~listener:(x56 : unit -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t_of_js
            (Ojs.call (t_to_js x57) "onClose"
               [|(Ojs.fun_to_js 1 (fun _ -> x56 ()))|])
    let (on_error :
      t ->
        listener:(error:any -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t)
      =
      fun (x60 : t) ->
        fun ~listener:(x58 : error:any -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t_of_js
            (Ojs.call (t_to_js x60) "onError"
               [|(Ojs.fun_to_js 1
                    (fun (x59 : Ojs.t) -> x58 ~error:(any_of_js x59)))|])
    let (on_end :
      t -> listener:(unit -> unit) -> Vscode_jsonrpc_disposable.Disposable.t)
      =
      fun (x62 : t) ->
        fun ~listener:(x61 : unit -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t_of_js
            (Ojs.call (t_to_js x62) "onEnd"
               [|(Ojs.fun_to_js 1 (fun _ -> x61 ()))|])
  end
module WritableStream =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x64 : Ojs.t) -> x64
    and t_to_js : t -> Ojs.t = fun (x63 : Ojs.t) -> x63
    let (on_close :
      t -> listener:(unit -> unit) -> Vscode_jsonrpc_disposable.Disposable.t)
      =
      fun (x66 : t) ->
        fun ~listener:(x65 : unit -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t_of_js
            (Ojs.call (t_to_js x66) "onClose"
               [|(Ojs.fun_to_js 1 (fun _ -> x65 ()))|])
    let (on_error :
      t ->
        listener:(error:any -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t)
      =
      fun (x69 : t) ->
        fun ~listener:(x67 : error:any -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t_of_js
            (Ojs.call (t_to_js x69) "onError"
               [|(Ojs.fun_to_js 1
                    (fun (x68 : Ojs.t) -> x67 ~error:(any_of_js x68)))|])
    let (on_end :
      t -> listener:(unit -> unit) -> Vscode_jsonrpc_disposable.Disposable.t)
      =
      fun (x71 : t) ->
        fun ~listener:(x70 : unit -> unit) ->
          Vscode_jsonrpc_disposable.Disposable.t_of_js
            (Ojs.call (t_to_js x71) "onEnd"
               [|(Ojs.fun_to_js 1 (fun _ -> x70 ()))|])
    let (write : t -> data:Uint8Array.t -> unit Promise.t) =
      fun (x73 : t) ->
        fun ~data:(x72 : Uint8Array.t) ->
          Promise.t_of_js Ojs.unit_of_js
            (Ojs.call (t_to_js x73) "write" [|(Uint8Array.t_to_js x72)|])
    let (write' :
      t -> data:string -> encoding:MessageBufferEncoding.t -> unit Promise.t)
      =
      fun (x77 : t) ->
        fun ~data:(x75 : string) ->
          fun ~encoding:(x76 : MessageBufferEncoding.t) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call (t_to_js x77) "write"
                 [|(Ojs.string_to_js x75);(MessageBufferEncoding.t_to_js x76)|])
    let (end_ : t -> unit) =
      fun (x79 : t) -> ignore (Ojs.call (t_to_js x79) "end" [||])
  end
module DuplexStream =
  struct
    include struct include ReadableStream end
    let (cast' : t -> WritableStream.t) =
      fun (x80 : t) -> WritableStream.t_of_js (t_to_js x80)
  end
module TimeoutHandle =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x82 : Ojs.t) -> x82
    and t_to_js : t -> Ojs.t = fun (x81 : Ojs.t) -> x81
    let (get_timer_brand : t -> never or_undefined) =
      fun (x83 : t) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii (t_to_js x83) "_timerBrand")
    let (set_timer_brand : t -> never or_undefined -> unit) =
      fun (x85 : t) ->
        fun (x86 : never or_undefined) ->
          Ojs.set_prop_ascii (t_to_js x85) "_timerBrand"
            (or_undefined_to_js never_to_js x86)
  end
module ImmediateHandle =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x89 : Ojs.t) -> x89
    and t_to_js : t -> Ojs.t = fun (x88 : Ojs.t) -> x88
    let (get_immediate_brand : t -> never or_undefined) =
      fun (x90 : t) ->
        or_undefined_of_js never_of_js
          (Ojs.get_prop_ascii (t_to_js x90) "_immediateBrand")
    let (set_immediate_brand : t -> never or_undefined -> unit) =
      fun (x92 : t) ->
        fun (x93 : never or_undefined) ->
          Ojs.set_prop_ascii (t_to_js x92) "_immediateBrand"
            (or_undefined_to_js never_to_js x93)
  end
module RAL =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x96 : Ojs.t) -> x96
    and t_to_js : t -> Ojs.t = fun (x95 : Ojs.t) -> x95
    module MessageBuffer =
      struct
        type t = MessageBuffer.t
        let rec t_of_js : Ojs.t -> t =
          fun (x98 : Ojs.t) -> MessageBuffer.t_of_js x98
        and t_to_js : t -> Ojs.t =
          fun (x97 : MessageBuffer.t) -> MessageBuffer.t_to_js x97
      end
    module MessageBufferEncoding =
      struct
        type t = MessageBufferEncoding.t
        let rec t_of_js : Ojs.t -> t =
          fun (x100 : Ojs.t) -> MessageBufferEncoding.t_of_js x100
        and t_to_js : t -> Ojs.t =
          fun (x99 : MessageBufferEncoding.t) ->
            MessageBufferEncoding.t_to_js x99
      end
    module ReadableStream =
      struct
        type t = ReadableStream.t
        let rec t_of_js : Ojs.t -> t =
          fun (x102 : Ojs.t) -> ReadableStream.t_of_js x102
        and t_to_js : t -> Ojs.t =
          fun (x101 : ReadableStream.t) -> ReadableStream.t_to_js x101
      end
    module WritableStream =
      struct
        type t = WritableStream.t
        let rec t_of_js : Ojs.t -> t =
          fun (x104 : Ojs.t) -> WritableStream.t_of_js x104
        and t_to_js : t -> Ojs.t =
          fun (x103 : WritableStream.t) -> WritableStream.t_to_js x103
      end
    module DuplexStream =
      struct
        type t = DuplexStream.t
        let rec t_of_js : Ojs.t -> t =
          fun (x106 : Ojs.t) -> DuplexStream.t_of_js x106
        and t_to_js : t -> Ojs.t =
          fun (x105 : DuplexStream.t) -> DuplexStream.t_to_js x105
      end
    module TimeoutHandle =
      struct
        type t = TimeoutHandle.t
        let rec t_of_js : Ojs.t -> t =
          fun (x108 : Ojs.t) -> TimeoutHandle.t_of_js x108
        and t_to_js : t -> Ojs.t =
          fun (x107 : TimeoutHandle.t) -> TimeoutHandle.t_to_js x107
      end
    module ImmediateHandle =
      struct
        type t = ImmediateHandle.t
        let rec t_of_js : Ojs.t -> t =
          fun (x110 : Ojs.t) -> ImmediateHandle.t_of_js x110
        and t_to_js : t -> Ojs.t =
          fun (x109 : ImmediateHandle.t) -> ImmediateHandle.t_to_js x109
      end
    let (install : ral:t -> unit) =
      fun ~ral:(x111 : t) ->
        ignore
          (Ojs.call
             (Ojs.get_prop_ascii
                (Ojs.get_prop_ascii Ojs.global
                   "__LIB__VSCODE_JSONRPC__IMPORTS") "RAL") "install"
             [|(t_to_js x111)|])
    module AnonymousInterface1 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x113 : Ojs.t) -> x113
        and t_to_js : t -> Ojs.t = fun (x112 : Ojs.t) -> x112
        let (create_ :
          t -> encoding:MessageBufferEncoding.t -> MessageBuffer.t) =
          fun (x115 : t) ->
            fun ~encoding:(x114 : MessageBufferEncoding.t) ->
              MessageBuffer.t_of_js
                (Ojs.call (t_to_js x115) "create"
                   [|(MessageBufferEncoding.t_to_js x114)|])
      end
    let (get_application_json : t -> AnonymousInterface0.t) =
      fun (x116 : t) ->
        AnonymousInterface0.t_of_js
          (Ojs.get_prop_ascii (t_to_js x116) "applicationJson")
    let (get_message_buffer : t -> AnonymousInterface1.t) =
      fun (x117 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x117) "messageBuffer")
    let (get_console : t -> AnonymousInterface2.t) =
      fun (x118 : t) ->
        AnonymousInterface2.t_of_js
          (Ojs.get_prop_ascii (t_to_js x118) "console")
    module AnonymousInterface3 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x120 : Ojs.t) -> x120
        and t_to_js : t -> Ojs.t = fun (x119 : Ojs.t) -> x119
        let (set_timeout :
          t ->
            callback:(args:any list -> unit) ->
              ms:int -> args:any list -> TimeoutHandle.t)
          =
          fun (x128 : t) ->
            fun ~callback:(x121 : args:any list -> unit) ->
              fun ~ms:(x122 : int) ->
                fun ~args:(x123 : any list) ->
                  TimeoutHandle.t_of_js
                    (let x129 = t_to_js x128 in
                     Ojs.call (Ojs.get_prop_ascii x129 "setTimeout") "apply"
                       [|x129;((let x124 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x124 "push"
                                     [|(Ojs.fun_to_js_args
                                          (fun (x126 : _) ->
                                             x121
                                               ~args:(Ojs.list_of_js_from
                                                        any_of_js x126 0)))|]);
                                ignore
                                  (Ojs.call x124 "push"
                                     [|(Ojs.int_to_js x122)|]);
                                List.iter
                                  (fun (x125 : any) ->
                                     ignore
                                       (Ojs.call x124 "push"
                                          [|(any_to_js x125)|])) x123;
                                x124))|])
        let (clear_timeout : t -> handle:TimeoutHandle.t -> unit) =
          fun (x131 : t) ->
            fun ~handle:(x130 : TimeoutHandle.t) ->
              ignore
                (Ojs.call (t_to_js x131) "clearTimeout"
                   [|(TimeoutHandle.t_to_js x130)|])
        let (set_immediate :
          t ->
            callback:(args:any list -> unit) ->
              args:any list -> ImmediateHandle.t)
          =
          fun (x138 : t) ->
            fun ~callback:(x132 : args:any list -> unit) ->
              fun ~args:(x133 : any list) ->
                ImmediateHandle.t_of_js
                  (let x139 = t_to_js x138 in
                   Ojs.call (Ojs.get_prop_ascii x139 "setImmediate") "apply"
                     [|x139;((let x134 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x134 "push"
                                   [|(Ojs.fun_to_js_args
                                        (fun (x136 : _) ->
                                           x132
                                             ~args:(Ojs.list_of_js_from
                                                      any_of_js x136 0)))|]);
                              List.iter
                                (fun (x135 : any) ->
                                   ignore
                                     (Ojs.call x134 "push"
                                        [|(any_to_js x135)|])) x133;
                              x134))|])
        let (clear_immediate : t -> handle:ImmediateHandle.t -> unit) =
          fun (x141 : t) ->
            fun ~handle:(x140 : ImmediateHandle.t) ->
              ignore
                (Ojs.call (t_to_js x141) "clearImmediate"
                   [|(ImmediateHandle.t_to_js x140)|])
      end
    let (get_timer : t -> AnonymousInterface3.t) =
      fun (x142 : t) ->
        AnonymousInterface3.t_of_js
          (Ojs.get_prop_ascii (t_to_js x142) "timer")
  end
let (ral : unit -> RAL.t) =
  fun () ->
    RAL.t_of_js
      (Ojs.call
         (Ojs.get_prop_ascii Ojs.global "__LIB__VSCODE_JSONRPC__IMPORTS")
         "RAL" [||])
