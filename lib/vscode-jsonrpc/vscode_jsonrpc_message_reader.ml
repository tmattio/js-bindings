[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
module DataCallback =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (apply : t -> data:Vscode_jsonrpc_messages.Message.t -> unit) =
      fun (x4 : t) ->
        fun ~data:(x3 : Vscode_jsonrpc_messages.Message.t) ->
          ignore
            (Ojs.apply (t_to_js x4)
               [|(Vscode_jsonrpc_messages.Message.t_to_js x3)|])
  end
module PartialMessageInfo =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x6 : Ojs.t) -> x6
    and t_to_js : t -> Ojs.t = fun (x5 : Ojs.t) -> x5
    let (get_message_token : t -> int) =
      fun (x7 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x7) "messageToken")
    let (get_waiting_time : t -> int) =
      fun (x8 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x8) "waitingTime")
  end
module MessageReader =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10 : Ojs.t) -> x10
    and t_to_js : t -> Ojs.t = fun (x9 : Ojs.t) -> x9
    let (get_on_error : t -> Error.t Vscode_jsonrpc_events.Event.t) =
      fun (x11 : t) ->
        Vscode_jsonrpc_events.Event.t_of_js Error.t_of_js
          (Ojs.get_prop_ascii (t_to_js x11) "onError")
    let (get_on_close : t -> unit Vscode_jsonrpc_events.Event.t) =
      fun (x13 : t) ->
        Vscode_jsonrpc_events.Event.t_of_js Ojs.unit_of_js
          (Ojs.get_prop_ascii (t_to_js x13) "onClose")
    let (get_on_partial_message :
      t -> PartialMessageInfo.t Vscode_jsonrpc_events.Event.t) =
      fun (x15 : t) ->
        Vscode_jsonrpc_events.Event.t_of_js PartialMessageInfo.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15) "onPartialMessage")
    let (listen :
      t -> callback:DataCallback.t -> Vscode_jsonrpc_disposable.Disposable.t)
      =
      fun (x18 : t) ->
        fun ~callback:(x17 : DataCallback.t) ->
          Vscode_jsonrpc_disposable.Disposable.t_of_js
            (Ojs.call (t_to_js x18) "listen" [|(DataCallback.t_to_js x17)|])
    let (dispose : t -> unit) =
      fun (x19 : t) -> ignore (Ojs.call (t_to_js x19) "dispose" [||])
    let (is : value:any -> bool) =
      fun ~value:(x20 : any) ->
        Ojs.bool_of_js
          (Ojs.call
             (Ojs.get_prop_ascii
                (Ojs.get_prop_ascii Ojs.global
                   "__LIB__VSCODE_JSONRPC__IMPORTS") "MessageReader") "is"
             [|(any_to_js x20)|])
  end
module AbstractMessageReader =
  struct
    include struct include MessageReader end
    let (get_error_emitter : t -> any) =
      fun (x21 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x21) "errorEmitter")
    let (set_error_emitter : t -> any -> unit) =
      fun (x22 : t) ->
        fun (x23 : any) ->
          Ojs.set_prop_ascii (t_to_js x22) "errorEmitter" (any_to_js x23)
    let (get_close_emitter : t -> any) =
      fun (x24 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x24) "closeEmitter")
    let (set_close_emitter : t -> any -> unit) =
      fun (x25 : t) ->
        fun (x26 : any) ->
          Ojs.set_prop_ascii (t_to_js x25) "closeEmitter" (any_to_js x26)
    let (get_partial_message_emitter : t -> any) =
      fun (x27 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x27) "partialMessageEmitter")
    let (set_partial_message_emitter : t -> any -> unit) =
      fun (x28 : t) ->
        fun (x29 : any) ->
          Ojs.set_prop_ascii (t_to_js x28) "partialMessageEmitter"
            (any_to_js x29)
    let (create : unit -> t) =
      fun () ->
        t_of_js
          (Ojs.new_obj
             (Ojs.get_prop_ascii
                (Ojs.get_prop_ascii Ojs.global
                   "__LIB__VSCODE_JSONRPC__IMPORTS") "AbstractMessageReader")
             [||])
    let (dispose : t -> unit) =
      fun (x30 : t) -> ignore (Ojs.call (t_to_js x30) "dispose" [||])
    let (get_on_error : t -> Error.t Vscode_jsonrpc_events.Event.t) =
      fun (x31 : t) ->
        Vscode_jsonrpc_events.Event.t_of_js Error.t_of_js
          (Ojs.get_prop_ascii (t_to_js x31) "onError")
    let (fire_error : t -> error:any -> unit) =
      fun (x34 : t) ->
        fun ~error:(x33 : any) ->
          ignore (Ojs.call (t_to_js x34) "fireError" [|(any_to_js x33)|])
    let (get_on_close : t -> unit Vscode_jsonrpc_events.Event.t) =
      fun (x35 : t) ->
        Vscode_jsonrpc_events.Event.t_of_js Ojs.unit_of_js
          (Ojs.get_prop_ascii (t_to_js x35) "onClose")
    let (fire_close : t -> unit) =
      fun (x37 : t) -> ignore (Ojs.call (t_to_js x37) "fireClose" [||])
    let (get_on_partial_message :
      t -> PartialMessageInfo.t Vscode_jsonrpc_events.Event.t) =
      fun (x38 : t) ->
        Vscode_jsonrpc_events.Event.t_of_js PartialMessageInfo.t_of_js
          (Ojs.get_prop_ascii (t_to_js x38) "onPartialMessage")
    let (fire_partial_message : t -> info:PartialMessageInfo.t -> unit) =
      fun (x41 : t) ->
        fun ~info:(x40 : PartialMessageInfo.t) ->
          ignore
            (Ojs.call (t_to_js x41) "firePartialMessage"
               [|(PartialMessageInfo.t_to_js x40)|])
    let (get_as_error : t -> any) =
      fun (x42 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x42) "asError")
    let (set_as_error : t -> any -> unit) =
      fun (x43 : t) ->
        fun (x44 : any) ->
          Ojs.set_prop_ascii (t_to_js x43) "asError" (any_to_js x44)
    let (listen :
      t -> callback:DataCallback.t -> Vscode_jsonrpc_disposable.Disposable.t)
      =
      fun (x46 : t) ->
        fun ~callback:(x45 : DataCallback.t) ->
          Vscode_jsonrpc_disposable.Disposable.t_of_js
            (Ojs.call (t_to_js x46) "listen" [|(DataCallback.t_to_js x45)|])
  end
module MessageReaderOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x48 : Ojs.t) -> x48
    and t_to_js : t -> Ojs.t = fun (x47 : Ojs.t) -> x47
    let (get_charset : t -> Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t) =
      fun (x49 : t) ->
        Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_of_js
          (Ojs.get_prop_ascii (t_to_js x49) "charset")
    let (set_charset :
      t -> Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t -> unit) =
      fun (x50 : t) ->
        fun (x51 : Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t) ->
          Ojs.set_prop_ascii (t_to_js x50) "charset"
            (Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_to_js x51)
    let (get_content_decoder : t -> Vscode_jsonrpc_encoding.ContentDecoder.t)
      =
      fun (x52 : t) ->
        Vscode_jsonrpc_encoding.ContentDecoder.t_of_js
          (Ojs.get_prop_ascii (t_to_js x52) "contentDecoder")
    let (set_content_decoder :
      t -> Vscode_jsonrpc_encoding.ContentDecoder.t -> unit) =
      fun (x53 : t) ->
        fun (x54 : Vscode_jsonrpc_encoding.ContentDecoder.t) ->
          Ojs.set_prop_ascii (t_to_js x53) "contentDecoder"
            (Vscode_jsonrpc_encoding.ContentDecoder.t_to_js x54)
    let (get_content_decoders :
      t -> Vscode_jsonrpc_encoding.ContentDecoder.t list) =
      fun (x55 : t) ->
        Ojs.list_of_js Vscode_jsonrpc_encoding.ContentDecoder.t_of_js
          (Ojs.get_prop_ascii (t_to_js x55) "contentDecoders")
    let (set_content_decoders :
      t -> Vscode_jsonrpc_encoding.ContentDecoder.t list -> unit) =
      fun (x57 : t) ->
        fun (x58 : Vscode_jsonrpc_encoding.ContentDecoder.t list) ->
          Ojs.set_prop_ascii (t_to_js x57) "contentDecoders"
            (Ojs.list_to_js Vscode_jsonrpc_encoding.ContentDecoder.t_to_js
               x58)
    let (get_content_type_decoder :
      t -> Vscode_jsonrpc_encoding.ContentTypeDecoder.t) =
      fun (x60 : t) ->
        Vscode_jsonrpc_encoding.ContentTypeDecoder.t_of_js
          (Ojs.get_prop_ascii (t_to_js x60) "contentTypeDecoder")
    let (set_content_type_decoder :
      t -> Vscode_jsonrpc_encoding.ContentTypeDecoder.t -> unit) =
      fun (x61 : t) ->
        fun (x62 : Vscode_jsonrpc_encoding.ContentTypeDecoder.t) ->
          Ojs.set_prop_ascii (t_to_js x61) "contentTypeDecoder"
            (Vscode_jsonrpc_encoding.ContentTypeDecoder.t_to_js x62)
    let (get_content_type_decoders :
      t -> Vscode_jsonrpc_encoding.ContentTypeDecoder.t list) =
      fun (x63 : t) ->
        Ojs.list_of_js Vscode_jsonrpc_encoding.ContentTypeDecoder.t_of_js
          (Ojs.get_prop_ascii (t_to_js x63) "contentTypeDecoders")
    let (set_content_type_decoders :
      t -> Vscode_jsonrpc_encoding.ContentTypeDecoder.t list -> unit) =
      fun (x65 : t) ->
        fun (x66 : Vscode_jsonrpc_encoding.ContentTypeDecoder.t list) ->
          Ojs.set_prop_ascii (t_to_js x65) "contentTypeDecoders"
            (Ojs.list_to_js
               Vscode_jsonrpc_encoding.ContentTypeDecoder.t_to_js x66)
  end
module ReadableStreamMessageReader =
  struct
    include struct include AbstractMessageReader end
    let (get_readable : t -> Vscode_jsonrpc_ral.RAL.ReadableStream.t) =
      fun (x68 : t) ->
        Vscode_jsonrpc_ral.RAL.ReadableStream.t_of_js
          (Ojs.get_prop_ascii (t_to_js x68) "readable")
    let (set_readable : t -> Vscode_jsonrpc_ral.RAL.ReadableStream.t -> unit)
      =
      fun (x69 : t) ->
        fun (x70 : Vscode_jsonrpc_ral.RAL.ReadableStream.t) ->
          Ojs.set_prop_ascii (t_to_js x69) "readable"
            (Vscode_jsonrpc_ral.RAL.ReadableStream.t_to_js x70)
    let (get_options : t -> any) =
      fun (x71 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x71) "options")
    let (set_options : t -> any -> unit) =
      fun (x72 : t) ->
        fun (x73 : any) ->
          Ojs.set_prop_ascii (t_to_js x72) "options" (any_to_js x73)
    let (get_callback : t -> any) =
      fun (x74 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x74) "callback")
    let (set_callback : t -> any -> unit) =
      fun (x75 : t) ->
        fun (x76 : any) ->
          Ojs.set_prop_ascii (t_to_js x75) "callback" (any_to_js x76)
    let (get_next_message_length : t -> any) =
      fun (x77 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x77) "nextMessageLength")
    let (set_next_message_length : t -> any -> unit) =
      fun (x78 : t) ->
        fun (x79 : any) ->
          Ojs.set_prop_ascii (t_to_js x78) "nextMessageLength"
            (any_to_js x79)
    let (get_message_token : t -> any) =
      fun (x80 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x80) "messageToken")
    let (set_message_token : t -> any -> unit) =
      fun (x81 : t) ->
        fun (x82 : any) ->
          Ojs.set_prop_ascii (t_to_js x81) "messageToken" (any_to_js x82)
    let (get_buffer : t -> any) =
      fun (x83 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x83) "buffer")
    let (set_buffer : t -> any -> unit) =
      fun (x84 : t) ->
        fun (x85 : any) ->
          Ojs.set_prop_ascii (t_to_js x84) "buffer" (any_to_js x85)
    let (get_partial_message_timer : t -> any) =
      fun (x86 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x86) "partialMessageTimer")
    let (set_partial_message_timer : t -> any -> unit) =
      fun (x87 : t) ->
        fun (x88 : any) ->
          Ojs.set_prop_ascii (t_to_js x87) "partialMessageTimer"
            (any_to_js x88)
    let (get_partial_message_timeout : t -> any) =
      fun (x89 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x89) "_partialMessageTimeout")
    let (set_partial_message_timeout : t -> any -> unit) =
      fun (x90 : t) ->
        fun (x91 : any) ->
          Ojs.set_prop_ascii (t_to_js x90) "_partialMessageTimeout"
            (any_to_js x91)
    let (create :
      readable:Vscode_jsonrpc_ral.RAL.ReadableStream.t ->
        ?options:(MessageReaderOptions.t,
          Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t) union2 -> unit -> t)
      =
      fun ~readable:(x92 : Vscode_jsonrpc_ral.RAL.ReadableStream.t) ->
        fun
          ?options:(x93 :
                     (MessageReaderOptions.t,
                       Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t) union2
                       option)
          ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr
                 (Ojs.get_prop_ascii
                    (Ojs.get_prop_ascii Ojs.global
                       "__LIB__VSCODE_JSONRPC__IMPORTS")
                    "ReadableStreamMessageReader")
                 (let x94 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore
                    (Ojs.call x94 "push"
                       [|(Vscode_jsonrpc_ral.RAL.ReadableStream.t_to_js x92)|]);
                  (match x93 with
                   | Some x95 ->
                       ignore
                         (Ojs.call x94 "push"
                            [|(union2_to_js MessageReaderOptions.t_to_js
                                 Vscode_jsonrpc_ral.RAL.MessageBufferEncoding.t_to_js
                                 x95)|])
                   | None -> ());
                  x94))
    let (set_partial_message_timeout : t -> int -> unit) =
      fun (x98 : t) ->
        fun (x99 : int) ->
          Ojs.set_prop_ascii (t_to_js x98) "partialMessageTimeout"
            (Ojs.int_to_js x99)
    let (get_partial_message_timeout : t -> int) =
      fun (x100 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x100) "partialMessageTimeout")
    let (listen :
      t -> callback:DataCallback.t -> Vscode_jsonrpc_disposable.Disposable.t)
      =
      fun (x102 : t) ->
        fun ~callback:(x101 : DataCallback.t) ->
          Vscode_jsonrpc_disposable.Disposable.t_of_js
            (Ojs.call (t_to_js x102) "listen" [|(DataCallback.t_to_js x101)|])
    let (get_on_data : t -> any) =
      fun (x103 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x103) "onData")
    let (set_on_data : t -> any -> unit) =
      fun (x104 : t) ->
        fun (x105 : any) ->
          Ojs.set_prop_ascii (t_to_js x104) "onData" (any_to_js x105)
    let (get_clear_partial_message_timer : t -> any) =
      fun (x106 : t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js x106) "clearPartialMessageTimer")
    let (set_clear_partial_message_timer : t -> any -> unit) =
      fun (x107 : t) ->
        fun (x108 : any) ->
          Ojs.set_prop_ascii (t_to_js x107) "clearPartialMessageTimer"
            (any_to_js x108)
    let (get_set_partial_message_timer : t -> any) =
      fun (x109 : t) ->
        any_of_js
          (Ojs.get_prop_ascii (t_to_js x109) "setPartialMessageTimer")
    let (set_set_partial_message_timer : t -> any -> unit) =
      fun (x110 : t) ->
        fun (x111 : any) ->
          Ojs.set_prop_ascii (t_to_js x110) "setPartialMessageTimer"
            (any_to_js x111)
  end
