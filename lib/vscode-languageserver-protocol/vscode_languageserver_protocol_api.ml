[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
open Vscode_languageserver_protocol_proposed_diagnostic
open Vscode_languageserver_protocol_connection
include struct include Vscode_jsonrpc end
include struct include Vscode_languageserver_types end
include struct include Vscode_languageserver_protocol_messages end
include struct include Vscode_languageserver_protocol_protocol end
include
  struct
    module ProtocolConnection =
      Vscode_languageserver_protocol_protocol_connection.ProtocolConnection
    let create_crotocol_connection =
      Vscode_languageserver_protocol_protocol_connection.create_crotocol_connection
  end
module LSPErrorCodes =
  struct
    let (lsp_reserved_error_range_start : Integer.t) =
      Integer.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "LSPErrorCodes")
           "lspReservedErrorRangeStart")
    let (server_cancelled : Integer.t) =
      Integer.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "LSPErrorCodes")
           "ServerCancelled")
    let (content_modified : Integer.t) =
      Integer.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "LSPErrorCodes")
           "ContentModified")
    let (request_cancelled : Integer.t) =
      Integer.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "LSPErrorCodes")
           "RequestCancelled")
    let (lsp_reserved_error_range_end : Integer.t) =
      Integer.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "LSPErrorCodes")
           "lspReservedErrorRangeEnd")
  end
module Proposed =
  struct
    module DiagnosticClientCapabilities =
      struct
        type t = DiagnosticClientCapabilities.t
        let rec t_of_js : Ojs.t -> t =
          fun (x2 : Ojs.t) -> DiagnosticClientCapabilities.t_of_js x2
        and t_to_js : t -> Ojs.t =
          fun (x1 : DiagnosticClientCapabilities.t) ->
            DiagnosticClientCapabilities.t_to_js x1
      end
    module M_DiagnosticClientCapabilities =
      struct
        type t = DiagnosticClientCapabilities.t
        let rec t_of_js : Ojs.t -> t =
          fun (x4 : Ojs.t) -> DiagnosticClientCapabilities.t_of_js x4
        and t_to_js : t -> Ojs.t =
          fun (x3 : DiagnosticClientCapabilities.t) ->
            DiagnosticClientCapabilities.t_to_js x3
      end
    module DiagnosticOptions =
      struct
        type t = DiagnosticOptions.t
        let rec t_of_js : Ojs.t -> t =
          fun (x6 : Ojs.t) -> DiagnosticOptions.t_of_js x6
        and t_to_js : t -> Ojs.t =
          fun (x5 : DiagnosticOptions.t) -> DiagnosticOptions.t_to_js x5
      end
    module DiagnosticRegistrationOptions =
      struct
        type t = DiagnosticRegistrationOptions.t
        let rec t_of_js : Ojs.t -> t =
          fun (x8 : Ojs.t) -> DiagnosticRegistrationOptions.t_of_js x8
        and t_to_js : t -> Ojs.t =
          fun (x7 : DiagnosticRegistrationOptions.t) ->
            DiagnosticRegistrationOptions.t_to_js x7
      end
    module M_DiagnosticServerCapabilities =
      struct
        type t = DiagnosticServerCapabilities.t
        let rec t_of_js : Ojs.t -> t =
          fun (x10 : Ojs.t) -> DiagnosticServerCapabilities.t_of_js x10
        and t_to_js : t -> Ojs.t =
          fun (x9 : DiagnosticServerCapabilities.t) ->
            DiagnosticServerCapabilities.t_to_js x9
      end
    module DocumentDiagnosticParams =
      struct
        type t = DocumentDiagnosticParams.t
        let rec t_of_js : Ojs.t -> t =
          fun (x12 : Ojs.t) -> DocumentDiagnosticParams.t_of_js x12
        and t_to_js : t -> Ojs.t =
          fun (x11 : DocumentDiagnosticParams.t) ->
            DocumentDiagnosticParams.t_to_js x11
      end
    module DiagnosticServerCancellationData =
      struct
        type t = DiagnosticServerCancellationData.t
        let rec t_of_js : Ojs.t -> t =
          fun (x14 : Ojs.t) -> DiagnosticServerCancellationData.t_of_js x14
        and t_to_js : t -> Ojs.t =
          fun (x13 : DiagnosticServerCancellationData.t) ->
            DiagnosticServerCancellationData.t_to_js x13
      end
    let (diagnostic_server_cancellation_data : any) =
      any_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Proposed")
           "DiagnosticServerCancellationData")
    module DocumentDiagnosticReport =
      struct
        type t = DocumentDiagnosticReport.t
        let rec t_of_js : Ojs.t -> t =
          fun (x16 : Ojs.t) -> DocumentDiagnosticReport.t_of_js x16
        and t_to_js : t -> Ojs.t =
          fun (x15 : DocumentDiagnosticReport.t) ->
            DocumentDiagnosticReport.t_to_js x15
      end
    module DocumentDiagnosticReportKind =
      struct
        type t = DocumentDiagnosticReportKind.t
        let rec t_of_js : Ojs.t -> t =
          fun (x18 : Ojs.t) -> DocumentDiagnosticReportKind.t_of_js x18
        and t_to_js : t -> Ojs.t =
          fun (x17 : DocumentDiagnosticReportKind.t) ->
            DocumentDiagnosticReportKind.t_to_js x17
      end
    let (document_diagnostic_report_kind : any) =
      any_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Proposed")
           "DocumentDiagnosticReportKind")
    module DocumentDiagnosticReportPartialResult =
      struct
        type t = DocumentDiagnosticReportPartialResult.t
        let rec t_of_js : Ojs.t -> t =
          fun (x20 : Ojs.t) ->
            DocumentDiagnosticReportPartialResult.t_of_js x20
        and t_to_js : t -> Ojs.t =
          fun (x19 : DocumentDiagnosticReportPartialResult.t) ->
            DocumentDiagnosticReportPartialResult.t_to_js x19
      end
    let (document_diagnostic_request : any) =
      any_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Proposed")
           "DocumentDiagnosticRequest")
    module WorkspaceDiagnosticParams =
      struct
        type t = WorkspaceDiagnosticParams.t
        let rec t_of_js : Ojs.t -> t =
          fun (x22 : Ojs.t) -> WorkspaceDiagnosticParams.t_of_js x22
        and t_to_js : t -> Ojs.t =
          fun (x21 : WorkspaceDiagnosticParams.t) ->
            WorkspaceDiagnosticParams.t_to_js x21
      end
    module WorkspaceDiagnosticReport =
      struct
        type t = WorkspaceDiagnosticReport.t
        let rec t_of_js : Ojs.t -> t =
          fun (x24 : Ojs.t) -> WorkspaceDiagnosticReport.t_of_js x24
        and t_to_js : t -> Ojs.t =
          fun (x23 : WorkspaceDiagnosticReport.t) ->
            WorkspaceDiagnosticReport.t_to_js x23
      end
    module WorkspaceDiagnosticReportPartialResult =
      struct
        type t = WorkspaceDiagnosticReportPartialResult.t
        let rec t_of_js : Ojs.t -> t =
          fun (x26 : Ojs.t) ->
            WorkspaceDiagnosticReportPartialResult.t_of_js x26
        and t_to_js : t -> Ojs.t =
          fun (x25 : WorkspaceDiagnosticReportPartialResult.t) ->
            WorkspaceDiagnosticReportPartialResult.t_to_js x25
      end
    let (diagnostic_refresh_request : any) =
      any_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Proposed")
           "DiagnosticRefreshRequest")
  end
