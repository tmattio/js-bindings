[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
        type anonymous_interface_1 = [ `anonymous_interface_1 ] intf
        let rec anonymous_interface_1_of_js : Ojs.t -> anonymous_interface_1
          = Obj.magic
        and anonymous_interface_1_to_js : anonymous_interface_1 -> Ojs.t =
          Obj.magic
        type anonymous_interface_2 = [ `anonymous_interface_2 ] intf
        let rec anonymous_interface_2_of_js : Ojs.t -> anonymous_interface_2
          = Obj.magic
        and anonymous_interface_2_to_js : anonymous_interface_2 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type _SemanticTokensClientCapabilities =
          [ `SemanticTokensClientCapabilities ] intf
        and _SemanticTokensDeltaParams = [ `SemanticTokensDeltaParams ] intf
        and _SemanticTokensDeltaPartialResult =
          [ `SemanticTokensDeltaPartialResult ] intf
        and _SemanticTokensDeltaRequest_HandlerSignature =
          (_SemanticTokensDeltaParams,
            (SemanticTokens.t, SemanticTokensDelta.t) union2 or_null, 
            unit) RequestHandler.t_3
        and _SemanticTokensOptions = [ `SemanticTokensOptions ] intf
        and _SemanticTokensParams = [ `SemanticTokensParams ] intf
        and _SemanticTokensPartialResult =
          [ `SemanticTokensPartialResult ] intf
        and _SemanticTokensRangeParams = [ `SemanticTokensRangeParams ] intf
        and _SemanticTokensRangeRequest_HandlerSignature =
          (_SemanticTokensRangeParams, SemanticTokens.t or_null, unit)
            RequestHandler.t_3
        and _SemanticTokensRefreshRequest_HandlerSignature =
          (unit, unit) RequestHandler0.t_2
        and _SemanticTokensRegistrationOptions =
          [ `SemanticTokensRegistrationOptions  | `SemanticTokensOptions ]
            intf
        and _SemanticTokensRequest_HandlerSignature =
          (_SemanticTokensDeltaParams, SemanticTokens.t or_null, unit)
            RequestHandler.t_3
        and _SemanticTokensWorkspaceClientCapabilities =
          [ `SemanticTokensWorkspaceClientCapabilities ] intf
        and _TokenFormat = [ `L_s0_relative ]
        let rec _SemanticTokensClientCapabilities_of_js :
          Ojs.t -> _SemanticTokensClientCapabilities = Obj.magic
        and _SemanticTokensClientCapabilities_to_js :
          _SemanticTokensClientCapabilities -> Ojs.t = Obj.magic
        and _SemanticTokensDeltaParams_of_js :
          Ojs.t -> _SemanticTokensDeltaParams = Obj.magic
        and _SemanticTokensDeltaParams_to_js :
          _SemanticTokensDeltaParams -> Ojs.t = Obj.magic
        and _SemanticTokensDeltaPartialResult_of_js :
          Ojs.t -> _SemanticTokensDeltaPartialResult = Obj.magic
        and _SemanticTokensDeltaPartialResult_to_js :
          _SemanticTokensDeltaPartialResult -> Ojs.t = Obj.magic
        and _SemanticTokensDeltaRequest_HandlerSignature_of_js :
          Ojs.t -> _SemanticTokensDeltaRequest_HandlerSignature =
          fun (x8 : Ojs.t) ->
            RequestHandler.t_3_of_js _SemanticTokensDeltaParams_of_js
              (fun (x10 : Ojs.t) ->
                 or_null_of_js
                   (fun (x11 : Ojs.t) ->
                      union2_of_js SemanticTokens.t_of_js
                        SemanticTokensDelta.t_of_js x11) x10) Ojs.unit_of_js
              x8
        and _SemanticTokensDeltaRequest_HandlerSignature_to_js :
          _SemanticTokensDeltaRequest_HandlerSignature -> Ojs.t =
          fun
            (x1 :
              (_SemanticTokensDeltaParams,
                (SemanticTokens.t, SemanticTokensDelta.t) union2 or_null,
                unit) RequestHandler.t_3)
            ->
            RequestHandler.t_3_to_js _SemanticTokensDeltaParams_to_js
              (fun
                 (x3 :
                   (SemanticTokens.t, SemanticTokensDelta.t) union2 or_null)
                 ->
                 or_null_to_js
                   (fun
                      (x4 : (SemanticTokens.t, SemanticTokensDelta.t) union2)
                      ->
                      union2_to_js SemanticTokens.t_to_js
                        SemanticTokensDelta.t_to_js x4) x3) Ojs.unit_to_js x1
        and _SemanticTokensOptions_of_js : Ojs.t -> _SemanticTokensOptions =
          Obj.magic
        and _SemanticTokensOptions_to_js : _SemanticTokensOptions -> Ojs.t =
          Obj.magic
        and _SemanticTokensParams_of_js : Ojs.t -> _SemanticTokensParams =
          Obj.magic
        and _SemanticTokensParams_to_js : _SemanticTokensParams -> Ojs.t =
          Obj.magic
        and _SemanticTokensPartialResult_of_js :
          Ojs.t -> _SemanticTokensPartialResult = Obj.magic
        and _SemanticTokensPartialResult_to_js :
          _SemanticTokensPartialResult -> Ojs.t = Obj.magic
        and _SemanticTokensRangeParams_of_js :
          Ojs.t -> _SemanticTokensRangeParams = Obj.magic
        and _SemanticTokensRangeParams_to_js :
          _SemanticTokensRangeParams -> Ojs.t = Obj.magic
        and _SemanticTokensRangeRequest_HandlerSignature_of_js :
          Ojs.t -> _SemanticTokensRangeRequest_HandlerSignature =
          fun (x20 : Ojs.t) ->
            RequestHandler.t_3_of_js _SemanticTokensRangeParams_of_js
              (fun (x22 : Ojs.t) -> or_null_of_js SemanticTokens.t_of_js x22)
              Ojs.unit_of_js x20
        and _SemanticTokensRangeRequest_HandlerSignature_to_js :
          _SemanticTokensRangeRequest_HandlerSignature -> Ojs.t =
          fun
            (x15 :
              (_SemanticTokensRangeParams, SemanticTokens.t or_null, 
                unit) RequestHandler.t_3)
            ->
            RequestHandler.t_3_to_js _SemanticTokensRangeParams_to_js
              (fun (x17 : SemanticTokens.t or_null) ->
                 or_null_to_js SemanticTokens.t_to_js x17) Ojs.unit_to_js x15
        and _SemanticTokensRefreshRequest_HandlerSignature_of_js :
          Ojs.t -> _SemanticTokensRefreshRequest_HandlerSignature =
          fun (x28 : Ojs.t) ->
            RequestHandler0.t_2_of_js Ojs.unit_of_js Ojs.unit_of_js x28
        and _SemanticTokensRefreshRequest_HandlerSignature_to_js :
          _SemanticTokensRefreshRequest_HandlerSignature -> Ojs.t =
          fun (x25 : (unit, unit) RequestHandler0.t_2) ->
            RequestHandler0.t_2_to_js Ojs.unit_to_js Ojs.unit_to_js x25
        and _SemanticTokensRegistrationOptions_of_js :
          Ojs.t -> _SemanticTokensRegistrationOptions = Obj.magic
        and _SemanticTokensRegistrationOptions_to_js :
          _SemanticTokensRegistrationOptions -> Ojs.t = Obj.magic
        and _SemanticTokensRequest_HandlerSignature_of_js :
          Ojs.t -> _SemanticTokensRequest_HandlerSignature =
          fun (x36 : Ojs.t) ->
            RequestHandler.t_3_of_js _SemanticTokensDeltaParams_of_js
              (fun (x38 : Ojs.t) -> or_null_of_js SemanticTokens.t_of_js x38)
              Ojs.unit_of_js x36
        and _SemanticTokensRequest_HandlerSignature_to_js :
          _SemanticTokensRequest_HandlerSignature -> Ojs.t =
          fun
            (x31 :
              (_SemanticTokensDeltaParams, SemanticTokens.t or_null, 
                unit) RequestHandler.t_3)
            ->
            RequestHandler.t_3_to_js _SemanticTokensDeltaParams_to_js
              (fun (x33 : SemanticTokens.t or_null) ->
                 or_null_to_js SemanticTokens.t_to_js x33) Ojs.unit_to_js x31
        and _SemanticTokensWorkspaceClientCapabilities_of_js :
          Ojs.t -> _SemanticTokensWorkspaceClientCapabilities = Obj.magic
        and _SemanticTokensWorkspaceClientCapabilities_to_js :
          _SemanticTokensWorkspaceClientCapabilities -> Ojs.t = Obj.magic
        and _TokenFormat_of_js : Ojs.t -> _TokenFormat =
          fun (x42 : Ojs.t) ->
            let x43 = x42 in
            match Ojs.string_of_js x43 with
            | "relative" -> `L_s0_relative
            | _ -> assert false
        and _TokenFormat_to_js : _TokenFormat -> Ojs.t =
          fun (x41 : [ `L_s0_relative ]) ->
            match x41 with | `L_s0_relative -> Ojs.string_to_js "relative"
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x45 : Ojs.t) -> anonymous_interface_0_of_js x45
    and t_to_js : t -> Ojs.t =
      fun (x44 : anonymous_interface_0) -> anonymous_interface_0_to_js x44
  end
module AnonymousInterface1 =
  struct
    type t = anonymous_interface_1
    let rec t_of_js : Ojs.t -> t =
      fun (x47 : Ojs.t) -> anonymous_interface_1_of_js x47
    and t_to_js : t -> Ojs.t =
      fun (x46 : anonymous_interface_1) -> anonymous_interface_1_to_js x46
    let (get_delta : t -> bool) =
      fun (x48 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x48) "delta")
    let (set_delta : t -> bool -> unit) =
      fun (x49 : t) ->
        fun (x50 : bool) ->
          Ojs.set_prop_ascii (t_to_js x49) "delta" (Ojs.bool_to_js x50)
  end
module AnonymousInterface2 =
  struct
    type t = anonymous_interface_2
    let rec t_of_js : Ojs.t -> t =
      fun (x52 : Ojs.t) -> anonymous_interface_2_of_js x52
    and t_to_js : t -> Ojs.t =
      fun (x51 : anonymous_interface_2) -> anonymous_interface_2_to_js x51
    let (get_range : t -> anonymous_interface_0 or_boolean) =
      fun (x53 : t) ->
        or_boolean_of_js anonymous_interface_0_of_js
          (Ojs.get_prop_ascii (t_to_js x53) "range")
    let (set_range : t -> anonymous_interface_0 or_boolean -> unit) =
      fun (x55 : t) ->
        fun (x56 : anonymous_interface_0 or_boolean) ->
          Ojs.set_prop_ascii (t_to_js x55) "range"
            (or_boolean_to_js anonymous_interface_0_to_js x56)
    let (get_full : t -> anonymous_interface_1 or_boolean) =
      fun (x58 : t) ->
        or_boolean_of_js anonymous_interface_1_of_js
          (Ojs.get_prop_ascii (t_to_js x58) "full")
    let (set_full : t -> anonymous_interface_1 or_boolean -> unit) =
      fun (x60 : t) ->
        fun (x61 : anonymous_interface_1 or_boolean) ->
          Ojs.set_prop_ascii (t_to_js x60) "full"
            (or_boolean_to_js anonymous_interface_1_to_js x61)
  end
module SemanticTokensPartialResult =
  struct
    type t = _SemanticTokensPartialResult
    let rec t_of_js : Ojs.t -> t =
      fun (x64 : Ojs.t) -> _SemanticTokensPartialResult_of_js x64
    and t_to_js : t -> Ojs.t =
      fun (x63 : _SemanticTokensPartialResult) ->
        _SemanticTokensPartialResult_to_js x63
    let (get_data : t -> Uinteger.t list) =
      fun (x65 : t) ->
        Ojs.list_of_js Uinteger.t_of_js
          (Ojs.get_prop_ascii (t_to_js x65) "data")
    let (set_data : t -> Uinteger.t list -> unit) =
      fun (x67 : t) ->
        fun (x68 : Uinteger.t list) ->
          Ojs.set_prop_ascii (t_to_js x67) "data"
            (Ojs.list_to_js Uinteger.t_to_js x68)
  end
module SemanticTokensDeltaPartialResult =
  struct
    type t = _SemanticTokensDeltaPartialResult
    let rec t_of_js : Ojs.t -> t =
      fun (x71 : Ojs.t) -> _SemanticTokensDeltaPartialResult_of_js x71
    and t_to_js : t -> Ojs.t =
      fun (x70 : _SemanticTokensDeltaPartialResult) ->
        _SemanticTokensDeltaPartialResult_to_js x70
    let (get_edits : t -> SemanticTokensEdit.t list) =
      fun (x72 : t) ->
        Ojs.list_of_js SemanticTokensEdit.t_of_js
          (Ojs.get_prop_ascii (t_to_js x72) "edits")
    let (set_edits : t -> SemanticTokensEdit.t list -> unit) =
      fun (x74 : t) ->
        fun (x75 : SemanticTokensEdit.t list) ->
          Ojs.set_prop_ascii (t_to_js x74) "edits"
            (Ojs.list_to_js SemanticTokensEdit.t_to_js x75)
  end
module TokenFormat =
  struct
    let (relative : [ `L_s0_relative ]) =
      let x77 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TokenFormat")
          "Relative" in
      match Ojs.string_of_js x77 with
      | "relative" -> `L_s0_relative
      | _ -> assert false
  end
module TokenFormat =
  struct
    type t = _TokenFormat
    let rec t_of_js : Ojs.t -> t =
      fun (x79 : Ojs.t) -> _TokenFormat_of_js x79
    and t_to_js : t -> Ojs.t =
      fun (x78 : _TokenFormat) -> _TokenFormat_to_js x78
  end
module SemanticTokensClientCapabilities =
  struct
    type t = _SemanticTokensClientCapabilities
    let rec t_of_js : Ojs.t -> t =
      fun (x81 : Ojs.t) -> _SemanticTokensClientCapabilities_of_js x81
    and t_to_js : t -> Ojs.t =
      fun (x80 : _SemanticTokensClientCapabilities) ->
        _SemanticTokensClientCapabilities_to_js x80
    let (get_dynamicRegistration : t -> bool) =
      fun (x82 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x82) "dynamicRegistration")
    let (set_dynamicRegistration : t -> bool -> unit) =
      fun (x83 : t) ->
        fun (x84 : bool) ->
          Ojs.set_prop_ascii (t_to_js x83) "dynamicRegistration"
            (Ojs.bool_to_js x84)
    let (get_requests : t -> anonymous_interface_2) =
      fun (x85 : t) ->
        anonymous_interface_2_of_js
          (Ojs.get_prop_ascii (t_to_js x85) "requests")
    let (set_requests : t -> anonymous_interface_2 -> unit) =
      fun (x86 : t) ->
        fun (x87 : anonymous_interface_2) ->
          Ojs.set_prop_ascii (t_to_js x86) "requests"
            (anonymous_interface_2_to_js x87)
    let (get_tokenTypes : t -> string list) =
      fun (x88 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x88) "tokenTypes")
    let (set_tokenTypes : t -> string list -> unit) =
      fun (x90 : t) ->
        fun (x91 : string list) ->
          Ojs.set_prop_ascii (t_to_js x90) "tokenTypes"
            (Ojs.list_to_js Ojs.string_to_js x91)
    let (get_tokenModifiers : t -> string list) =
      fun (x93 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x93) "tokenModifiers")
    let (set_tokenModifiers : t -> string list -> unit) =
      fun (x95 : t) ->
        fun (x96 : string list) ->
          Ojs.set_prop_ascii (t_to_js x95) "tokenModifiers"
            (Ojs.list_to_js Ojs.string_to_js x96)
    let (get_formats : t -> _TokenFormat list) =
      fun (x98 : t) ->
        Ojs.list_of_js _TokenFormat_of_js
          (Ojs.get_prop_ascii (t_to_js x98) "formats")
    let (set_formats : t -> _TokenFormat list -> unit) =
      fun (x100 : t) ->
        fun (x101 : _TokenFormat list) ->
          Ojs.set_prop_ascii (t_to_js x100) "formats"
            (Ojs.list_to_js _TokenFormat_to_js x101)
    let (get_overlappingTokenSupport : t -> bool) =
      fun (x103 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x103) "overlappingTokenSupport")
    let (set_overlappingTokenSupport : t -> bool -> unit) =
      fun (x104 : t) ->
        fun (x105 : bool) ->
          Ojs.set_prop_ascii (t_to_js x104) "overlappingTokenSupport"
            (Ojs.bool_to_js x105)
    let (get_multilineTokenSupport : t -> bool) =
      fun (x106 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x106) "multilineTokenSupport")
    let (set_multilineTokenSupport : t -> bool -> unit) =
      fun (x107 : t) ->
        fun (x108 : bool) ->
          Ojs.set_prop_ascii (t_to_js x107) "multilineTokenSupport"
            (Ojs.bool_to_js x108)
  end
module SemanticTokensOptions =
  struct
    type t = _SemanticTokensOptions
    let rec t_of_js : Ojs.t -> t =
      fun (x110 : Ojs.t) -> _SemanticTokensOptions_of_js x110
    and t_to_js : t -> Ojs.t =
      fun (x109 : _SemanticTokensOptions) ->
        _SemanticTokensOptions_to_js x109
    let (get_legend : t -> SemanticTokensLegend.t) =
      fun (x111 : t) ->
        SemanticTokensLegend.t_of_js
          (Ojs.get_prop_ascii (t_to_js x111) "legend")
    let (set_legend : t -> SemanticTokensLegend.t -> unit) =
      fun (x112 : t) ->
        fun (x113 : SemanticTokensLegend.t) ->
          Ojs.set_prop_ascii (t_to_js x112) "legend"
            (SemanticTokensLegend.t_to_js x113)
    let (get_range : t -> anonymous_interface_0 or_boolean) =
      fun (x114 : t) ->
        or_boolean_of_js anonymous_interface_0_of_js
          (Ojs.get_prop_ascii (t_to_js x114) "range")
    let (set_range : t -> anonymous_interface_0 or_boolean -> unit) =
      fun (x116 : t) ->
        fun (x117 : anonymous_interface_0 or_boolean) ->
          Ojs.set_prop_ascii (t_to_js x116) "range"
            (or_boolean_to_js anonymous_interface_0_to_js x117)
    let (get_full : t -> anonymous_interface_1 or_boolean) =
      fun (x119 : t) ->
        or_boolean_of_js anonymous_interface_1_of_js
          (Ojs.get_prop_ascii (t_to_js x119) "full")
    let (set_full : t -> anonymous_interface_1 or_boolean -> unit) =
      fun (x121 : t) ->
        fun (x122 : anonymous_interface_1 or_boolean) ->
          Ojs.set_prop_ascii (t_to_js x121) "full"
            (or_boolean_to_js anonymous_interface_1_to_js x122)
    let (cast : t -> WorkDoneProgressOptions.t) =
      fun (x124 : t) -> WorkDoneProgressOptions.t_of_js (t_to_js x124)
  end
module SemanticTokensRegistrationOptions =
  struct
    type t = _SemanticTokensRegistrationOptions
    let rec t_of_js : Ojs.t -> t =
      fun (x126 : Ojs.t) -> _SemanticTokensRegistrationOptions_of_js x126
    and t_to_js : t -> Ojs.t =
      fun (x125 : _SemanticTokensRegistrationOptions) ->
        _SemanticTokensRegistrationOptions_to_js x125
    let (cast : t -> TextDocumentRegistrationOptions.t) =
      fun (x127 : t) ->
        TextDocumentRegistrationOptions.t_of_js (t_to_js x127)
    let (cast' : t -> _SemanticTokensOptions) =
      fun (x128 : t) -> _SemanticTokensOptions_of_js (t_to_js x128)
    let (cast'' : t -> StaticRegistrationOptions.t) =
      fun (x129 : t) -> StaticRegistrationOptions.t_of_js (t_to_js x129)
  end
module SemanticTokensRegistrationType =
  struct
    let (method_ : [ `L_s1_textDocument_semanticTokens ]) =
      let x130 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "SemanticTokensRegistrationType")
          "method" in
      match Ojs.string_of_js x130 with
      | "textDocument/semanticTokens" -> `L_s1_textDocument_semanticTokens
      | _ -> assert false
    let (type_ : _SemanticTokensRegistrationOptions RegistrationType.t_1) =
      RegistrationType.t_1_of_js _SemanticTokensRegistrationOptions_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "SemanticTokensRegistrationType")
           "type")
  end
module SemanticTokensParams =
  struct
    type t = _SemanticTokensParams
    let rec t_of_js : Ojs.t -> t =
      fun (x133 : Ojs.t) -> _SemanticTokensParams_of_js x133
    and t_to_js : t -> Ojs.t =
      fun (x132 : _SemanticTokensParams) -> _SemanticTokensParams_to_js x132
    let (get_textDocument : t -> TextDocumentIdentifier.t) =
      fun (x134 : t) ->
        TextDocumentIdentifier.t_of_js
          (Ojs.get_prop_ascii (t_to_js x134) "textDocument")
    let (set_textDocument : t -> TextDocumentIdentifier.t -> unit) =
      fun (x135 : t) ->
        fun (x136 : TextDocumentIdentifier.t) ->
          Ojs.set_prop_ascii (t_to_js x135) "textDocument"
            (TextDocumentIdentifier.t_to_js x136)
    let (cast : t -> WorkDoneProgressParams.t) =
      fun (x137 : t) -> WorkDoneProgressParams.t_of_js (t_to_js x137)
    let (cast' : t -> PartialResultParams.t) =
      fun (x138 : t) -> PartialResultParams.t_of_js (t_to_js x138)
  end
module SemanticTokensRequest =
  struct
    let (method_ : [ `L_s2_textDocument_semanticTokens_full ]) =
      let x139 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "SemanticTokensRequest") "method" in
      match Ojs.string_of_js x139 with
      | "textDocument/semanticTokens/full" ->
          `L_s2_textDocument_semanticTokens_full
      | _ -> assert false
    let (type_ :
      (_SemanticTokensParams, SemanticTokens.t or_null,
        _SemanticTokensPartialResult, unit,
        _SemanticTokensRegistrationOptions) ProtocolRequestType.t_5)
      =
      ProtocolRequestType.t_5_of_js _SemanticTokensParams_of_js
        (fun (x141 : Ojs.t) -> or_null_of_js SemanticTokens.t_of_js x141)
        _SemanticTokensPartialResult_of_js Ojs.unit_of_js
        _SemanticTokensRegistrationOptions_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "SemanticTokensRequest") "type")
    module HandlerSignature =
      struct
        type t = _SemanticTokensRequest_HandlerSignature
        let rec t_of_js : Ojs.t -> t =
          fun (x147 : Ojs.t) ->
            _SemanticTokensRequest_HandlerSignature_of_js x147
        and t_to_js : t -> Ojs.t =
          fun (x146 : _SemanticTokensRequest_HandlerSignature) ->
            _SemanticTokensRequest_HandlerSignature_to_js x146
      end
  end
module SemanticTokensDeltaParams =
  struct
    type t = _SemanticTokensDeltaParams
    let rec t_of_js : Ojs.t -> t =
      fun (x149 : Ojs.t) -> _SemanticTokensDeltaParams_of_js x149
    and t_to_js : t -> Ojs.t =
      fun (x148 : _SemanticTokensDeltaParams) ->
        _SemanticTokensDeltaParams_to_js x148
    let (get_textDocument : t -> TextDocumentIdentifier.t) =
      fun (x150 : t) ->
        TextDocumentIdentifier.t_of_js
          (Ojs.get_prop_ascii (t_to_js x150) "textDocument")
    let (set_textDocument : t -> TextDocumentIdentifier.t -> unit) =
      fun (x151 : t) ->
        fun (x152 : TextDocumentIdentifier.t) ->
          Ojs.set_prop_ascii (t_to_js x151) "textDocument"
            (TextDocumentIdentifier.t_to_js x152)
    let (get_previousResultId : t -> string) =
      fun (x153 : t) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x153) "previousResultId")
    let (set_previousResultId : t -> string -> unit) =
      fun (x154 : t) ->
        fun (x155 : string) ->
          Ojs.set_prop_ascii (t_to_js x154) "previousResultId"
            (Ojs.string_to_js x155)
    let (cast : t -> WorkDoneProgressParams.t) =
      fun (x156 : t) -> WorkDoneProgressParams.t_of_js (t_to_js x156)
    let (cast' : t -> PartialResultParams.t) =
      fun (x157 : t) -> PartialResultParams.t_of_js (t_to_js x157)
  end
module SemanticTokensDeltaRequest =
  struct
    let (method_ : [ `L_s3_textDocument_semanticTokens_full_delta ]) =
      let x158 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "SemanticTokensDeltaRequest")
          "method" in
      match Ojs.string_of_js x158 with
      | "textDocument/semanticTokens/full/delta" ->
          `L_s3_textDocument_semanticTokens_full_delta
      | _ -> assert false
    let (type_ :
      (_SemanticTokensDeltaParams,
        (SemanticTokens.t, SemanticTokensDelta.t) union2 or_null,
        (_SemanticTokensDeltaPartialResult, _SemanticTokensPartialResult)
          union2,
        unit, _SemanticTokensRegistrationOptions) ProtocolRequestType.t_5)
      =
      ProtocolRequestType.t_5_of_js _SemanticTokensDeltaParams_of_js
        (fun (x160 : Ojs.t) ->
           or_null_of_js
             (fun (x161 : Ojs.t) ->
                union2_of_js SemanticTokens.t_of_js
                  SemanticTokensDelta.t_of_js x161) x160)
        (fun (x164 : Ojs.t) ->
           union2_of_js _SemanticTokensDeltaPartialResult_of_js
             _SemanticTokensPartialResult_of_js x164) Ojs.unit_of_js
        _SemanticTokensRegistrationOptions_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "SemanticTokensDeltaRequest")
           "type")
    module HandlerSignature =
      struct
        type t = _SemanticTokensDeltaRequest_HandlerSignature
        let rec t_of_js : Ojs.t -> t =
          fun (x170 : Ojs.t) ->
            _SemanticTokensDeltaRequest_HandlerSignature_of_js x170
        and t_to_js : t -> Ojs.t =
          fun (x169 : _SemanticTokensDeltaRequest_HandlerSignature) ->
            _SemanticTokensDeltaRequest_HandlerSignature_to_js x169
      end
  end
module SemanticTokensRangeParams =
  struct
    type t = _SemanticTokensRangeParams
    let rec t_of_js : Ojs.t -> t =
      fun (x172 : Ojs.t) -> _SemanticTokensRangeParams_of_js x172
    and t_to_js : t -> Ojs.t =
      fun (x171 : _SemanticTokensRangeParams) ->
        _SemanticTokensRangeParams_to_js x171
    let (get_textDocument : t -> TextDocumentIdentifier.t) =
      fun (x173 : t) ->
        TextDocumentIdentifier.t_of_js
          (Ojs.get_prop_ascii (t_to_js x173) "textDocument")
    let (set_textDocument : t -> TextDocumentIdentifier.t -> unit) =
      fun (x174 : t) ->
        fun (x175 : TextDocumentIdentifier.t) ->
          Ojs.set_prop_ascii (t_to_js x174) "textDocument"
            (TextDocumentIdentifier.t_to_js x175)
    let (get_range : t -> Range.t) =
      fun (x176 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x176) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x177 : t) ->
        fun (x178 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x177) "range" (Range.t_to_js x178)
    let (cast : t -> WorkDoneProgressParams.t) =
      fun (x179 : t) -> WorkDoneProgressParams.t_of_js (t_to_js x179)
    let (cast' : t -> PartialResultParams.t) =
      fun (x180 : t) -> PartialResultParams.t_of_js (t_to_js x180)
  end
module SemanticTokensRangeRequest =
  struct
    let (method_ : [ `L_s4_textDocument_semanticTokens_range ]) =
      let x181 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "SemanticTokensRangeRequest")
          "method" in
      match Ojs.string_of_js x181 with
      | "textDocument/semanticTokens/range" ->
          `L_s4_textDocument_semanticTokens_range
      | _ -> assert false
    let (type_ :
      (_SemanticTokensRangeParams, SemanticTokens.t or_null,
        _SemanticTokensPartialResult, unit, unit) ProtocolRequestType.t_5)
      =
      ProtocolRequestType.t_5_of_js _SemanticTokensRangeParams_of_js
        (fun (x183 : Ojs.t) -> or_null_of_js SemanticTokens.t_of_js x183)
        _SemanticTokensPartialResult_of_js Ojs.unit_of_js Ojs.unit_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "SemanticTokensRangeRequest")
           "type")
    module HandlerSignature =
      struct
        type t = _SemanticTokensRangeRequest_HandlerSignature
        let rec t_of_js : Ojs.t -> t =
          fun (x189 : Ojs.t) ->
            _SemanticTokensRangeRequest_HandlerSignature_of_js x189
        and t_to_js : t -> Ojs.t =
          fun (x188 : _SemanticTokensRangeRequest_HandlerSignature) ->
            _SemanticTokensRangeRequest_HandlerSignature_to_js x188
      end
  end
module SemanticTokensWorkspaceClientCapabilities =
  struct
    type t = _SemanticTokensWorkspaceClientCapabilities
    let rec t_of_js : Ojs.t -> t =
      fun (x191 : Ojs.t) ->
        _SemanticTokensWorkspaceClientCapabilities_of_js x191
    and t_to_js : t -> Ojs.t =
      fun (x190 : _SemanticTokensWorkspaceClientCapabilities) ->
        _SemanticTokensWorkspaceClientCapabilities_to_js x190
    let (get_refreshSupport : t -> bool) =
      fun (x192 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x192) "refreshSupport")
    let (set_refreshSupport : t -> bool -> unit) =
      fun (x193 : t) ->
        fun (x194 : bool) ->
          Ojs.set_prop_ascii (t_to_js x193) "refreshSupport"
            (Ojs.bool_to_js x194)
  end
module SemanticTokensRefreshRequest =
  struct
    let (method_ : any) =
      any_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "SemanticTokensRefreshRequest")
           "method")
    let (type_ : (unit, unit, unit, unit) ProtocolRequestType0.t_4) =
      ProtocolRequestType0.t_4_of_js Ojs.unit_of_js Ojs.unit_of_js
        Ojs.unit_of_js Ojs.unit_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "SemanticTokensRefreshRequest")
           "type")
    module HandlerSignature =
      struct
        type t = _SemanticTokensRefreshRequest_HandlerSignature
        let rec t_of_js : Ojs.t -> t =
          fun (x200 : Ojs.t) ->
            _SemanticTokensRefreshRequest_HandlerSignature_of_js x200
        and t_to_js : t -> Ojs.t =
          fun (x199 : _SemanticTokensRefreshRequest_HandlerSignature) ->
            _SemanticTokensRefreshRequest_HandlerSignature_to_js x199
      end
  end
