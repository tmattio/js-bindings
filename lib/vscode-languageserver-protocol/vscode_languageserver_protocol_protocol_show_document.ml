[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
open Vscode_jsonrpc
open Vscode_languageserver_types
open Vscode_languageserver_protocol_messages
module ShowDocumentClientCapabilities =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_support : t -> bool) =
      fun (x3 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3) "support")
    let (set_support : t -> bool -> unit) =
      fun (x4 : t) ->
        fun (x5 : bool) ->
          Ojs.set_prop_ascii (t_to_js x4) "support" (Ojs.bool_to_js x5)
  end
module ShowDocumentParams =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7 : Ojs.t) -> x7
    and t_to_js : t -> Ojs.t = fun (x6 : Ojs.t) -> x6
    let (get_uri : t -> URI.t) =
      fun (x8 : t) -> URI.t_of_js (Ojs.get_prop_ascii (t_to_js x8) "uri")
    let (set_uri : t -> URI.t -> unit) =
      fun (x9 : t) ->
        fun (x10 : URI.t) ->
          Ojs.set_prop_ascii (t_to_js x9) "uri" (URI.t_to_js x10)
    let (get_external : t -> bool) =
      fun (x11 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x11) "external")
    let (set_external : t -> bool -> unit) =
      fun (x12 : t) ->
        fun (x13 : bool) ->
          Ojs.set_prop_ascii (t_to_js x12) "external" (Ojs.bool_to_js x13)
    let (get_take_focus : t -> bool) =
      fun (x14 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x14) "takeFocus")
    let (set_take_focus : t -> bool -> unit) =
      fun (x15 : t) ->
        fun (x16 : bool) ->
          Ojs.set_prop_ascii (t_to_js x15) "takeFocus" (Ojs.bool_to_js x16)
    let (get_selection : t -> Range.t) =
      fun (x17 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x17) "selection")
    let (set_selection : t -> Range.t -> unit) =
      fun (x18 : t) ->
        fun (x19 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x18) "selection" (Range.t_to_js x19)
  end
module ShowDocumentResult =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x21 : Ojs.t) -> x21
    and t_to_js : t -> Ojs.t = fun (x20 : Ojs.t) -> x20
    let (get_success : t -> bool) =
      fun (x22 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x22) "success")
    let (set_success : t -> bool -> unit) =
      fun (x23 : t) ->
        fun (x24 : bool) ->
          Ojs.set_prop_ascii (t_to_js x23) "success" (Ojs.bool_to_js x24)
  end
module ShowDocumentRequest =
  struct
    let (method_ : [ `L_s0_window_showDocument ]) =
      let x25 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "ShowDocumentRequest") "method" in
      match Ojs.string_of_js x25 with
      | "window/showDocument" -> `L_s0_window_showDocument
      | _ -> assert false
    let (type_ :
      (ShowDocumentParams.t, ShowDocumentResult.t, unit, unit, unit)
        ProtocolRequestType.t)
      =
      ProtocolRequestType.t_of_js ShowDocumentParams.t_of_js
        ShowDocumentResult.t_of_js Ojs.unit_of_js Ojs.unit_of_js
        Ojs.unit_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "ShowDocumentRequest") "type")
    module HandlerSignature =
      struct
        type t =
          (ShowDocumentParams.t, ShowDocumentResult.t, unit) RequestHandler.t
        let rec t_of_js : Ojs.t -> t =
          fun (x35 : Ojs.t) ->
            RequestHandler.t_of_js ShowDocumentParams.t_of_js
              ShowDocumentResult.t_of_js Ojs.unit_of_js x35
        and t_to_js : t -> Ojs.t =
          fun
            (x31 :
              (ShowDocumentParams.t, ShowDocumentResult.t, unit)
                RequestHandler.t)
            ->
            RequestHandler.t_to_js ShowDocumentParams.t_to_js
              ShowDocumentResult.t_to_js Ojs.unit_to_js x31
      end
    module MiddlewareSignature =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x40 : Ojs.t) -> x40
        and t_to_js : t -> Ojs.t = fun (x39 : Ojs.t) -> x39
        let (apply :
          t ->
            params:ShowDocumentParams.t ->
              next:ShowDocumentRequest_HandlerSignature.t ->
                (ShowDocumentResult.t, unit) HandlerResult.t)
          =
          fun (x43 : t) ->
            fun ~params:(x41 : ShowDocumentParams.t) ->
              fun ~next:(x42 : ShowDocumentRequest_HandlerSignature.t) ->
                HandlerResult.t_of_js ShowDocumentResult.t_of_js
                  Ojs.unit_of_js
                  (Ojs.apply (t_to_js x43)
                     [|(ShowDocumentParams.t_to_js x41);(ShowDocumentRequest_HandlerSignature.t_to_js
                                                           x42)|])
      end
  end
