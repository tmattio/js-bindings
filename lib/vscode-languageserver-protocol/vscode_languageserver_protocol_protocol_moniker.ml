[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
open Vscode_languageserver_protocol_messages
open Vscode_languageserver_protocol_protocol
module UniquenessLevel =
  struct
    type t = [ `document  | `project  | `group  | `scheme  | `global ]
    let rec t_of_js : Ojs.t -> t =
      fun (x2 : Ojs.t) ->
        let x3 = x2 in
        match Ojs.string_of_js x3 with
        | "document" -> `document
        | "project" -> `project
        | "group" -> `group
        | "scheme" -> `scheme
        | "global" -> `global
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x1 : [ `document  | `project  | `group  | `scheme  | `global ]) ->
        match x1 with
        | `document -> Ojs.string_to_js "document"
        | `project -> Ojs.string_to_js "project"
        | `group -> Ojs.string_to_js "group"
        | `scheme -> Ojs.string_to_js "scheme"
        | `global -> Ojs.string_to_js "global"
  end
module MonikerKind =
  struct
    type t = [ `import  | `export  | `local ]
    let rec t_of_js : Ojs.t -> t =
      fun (x5 : Ojs.t) ->
        let x6 = x5 in
        match Ojs.string_of_js x6 with
        | "import" -> `import
        | "export" -> `export
        | "local" -> `local
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x4 : [ `import  | `export  | `local ]) ->
        match x4 with
        | `import -> Ojs.string_to_js "import"
        | `export -> Ojs.string_to_js "export"
        | `local -> Ojs.string_to_js "local"
  end
module Moniker =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x8 : Ojs.t) -> x8
    and t_to_js : t -> Ojs.t = fun (x7 : Ojs.t) -> x7
    let (get_scheme : t -> string) =
      fun (x9 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x9) "scheme")
    let (set_scheme : t -> string -> unit) =
      fun (x10 : t) ->
        fun (x11 : string) ->
          Ojs.set_prop_ascii (t_to_js x10) "scheme" (Ojs.string_to_js x11)
    let (get_identifier : t -> string) =
      fun (x12 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x12) "identifier")
    let (set_identifier : t -> string -> unit) =
      fun (x13 : t) ->
        fun (x14 : string) ->
          Ojs.set_prop_ascii (t_to_js x13) "identifier"
            (Ojs.string_to_js x14)
    let (get_unique : t -> UniquenessLevel.t) =
      fun (x15 : t) ->
        UniquenessLevel.t_of_js (Ojs.get_prop_ascii (t_to_js x15) "unique")
    let (set_unique : t -> UniquenessLevel.t -> unit) =
      fun (x16 : t) ->
        fun (x17 : UniquenessLevel.t) ->
          Ojs.set_prop_ascii (t_to_js x16) "unique"
            (UniquenessLevel.t_to_js x17)
    let (get_kind : t -> MonikerKind.t) =
      fun (x18 : t) ->
        MonikerKind.t_of_js (Ojs.get_prop_ascii (t_to_js x18) "kind")
    let (set_kind : t -> MonikerKind.t -> unit) =
      fun (x19 : t) ->
        fun (x20 : MonikerKind.t) ->
          Ojs.set_prop_ascii (t_to_js x19) "kind" (MonikerKind.t_to_js x20)
  end
module MonikerClientCapabilities =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x22 : Ojs.t) -> x22
    and t_to_js : t -> Ojs.t = fun (x21 : Ojs.t) -> x21
    let (get_dynamic_registration : t -> bool) =
      fun (x23 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x23) "dynamicRegistration")
    let (set_dynamic_registration : t -> bool -> unit) =
      fun (x24 : t) ->
        fun (x25 : bool) ->
          Ojs.set_prop_ascii (t_to_js x24) "dynamicRegistration"
            (Ojs.bool_to_js x25)
  end
module MonikerServerCapabilities =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x27 : Ojs.t) -> x27
    and t_to_js : t -> Ojs.t = fun (x26 : Ojs.t) -> x26
  end
module MonikerOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x29 : Ojs.t) -> x29
    and t_to_js : t -> Ojs.t = fun (x28 : Ojs.t) -> x28
    let (cast : t -> WorkDoneProgressOptions.t) =
      fun (x30 : t) -> WorkDoneProgressOptions.t_of_js (t_to_js x30)
  end
module MonikerRegistrationOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x32 : Ojs.t) -> x32
    and t_to_js : t -> Ojs.t = fun (x31 : Ojs.t) -> x31
    let (cast : t -> TextDocumentRegistrationOptions.t) =
      fun (x33 : t) -> TextDocumentRegistrationOptions.t_of_js (t_to_js x33)
    let (cast' : t -> MonikerOptions.t) =
      fun (x34 : t) -> MonikerOptions.t_of_js (t_to_js x34)
  end
module MonikerParams =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x36 : Ojs.t) -> x36
    and t_to_js : t -> Ojs.t = fun (x35 : Ojs.t) -> x35
    let (cast : t -> TextDocumentPositionParams.t) =
      fun (x37 : t) -> TextDocumentPositionParams.t_of_js (t_to_js x37)
    let (cast' : t -> WorkDoneProgressParams.t) =
      fun (x38 : t) -> WorkDoneProgressParams.t_of_js (t_to_js x38)
    let (cast'' : t -> PartialResultParams.t) =
      fun (x39 : t) -> PartialResultParams.t_of_js (t_to_js x39)
  end
module MonikerRequest =
  struct
    let (method_ : [ `L_s8_textDocument_moniker ]) =
      let x40 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "MonikerRequest")
          "method" in
      match Ojs.string_of_js x40 with
      | "textDocument/moniker" -> `L_s8_textDocument_moniker
      | _ -> assert false
    let (type_ :
      (MonikerParams.t, Moniker.t list or_null, Moniker.t list, unit,
        MonikerRegistrationOptions.t) ProtocolRequestType.t)
      =
      ProtocolRequestType.t_of_js MonikerParams.t_of_js
        (fun (x42 : Ojs.t) ->
           or_null_of_js
             (fun (x43 : Ojs.t) -> Ojs.list_of_js Moniker.t_of_js x43) x42)
        (fun (x45 : Ojs.t) -> Ojs.list_of_js Moniker.t_of_js x45)
        Ojs.unit_of_js MonikerRegistrationOptions.t_of_js
        (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "MonikerRequest")
           "type")
  end
