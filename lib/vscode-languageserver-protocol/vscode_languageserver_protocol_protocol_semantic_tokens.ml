[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
open Vscode_languageserver_types
open Vscode_jsonrpc
open Vscode_languageserver_protocol_messages
open Vscode_languageserver_protocol_protocol
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4 : Ojs.t) -> x4
    and t_to_js : t -> Ojs.t = fun (x3 : Ojs.t) -> x3
    let (get_delta : t -> bool) =
      fun (x5 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x5) "delta")
    let (set_delta : t -> bool -> unit) =
      fun (x6 : t) ->
        fun (x7 : bool) ->
          Ojs.set_prop_ascii (t_to_js x6) "delta" (Ojs.bool_to_js x7)
  end
module AnonymousInterface2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x9 : Ojs.t) -> x9
    and t_to_js : t -> Ojs.t = fun (x8 : Ojs.t) -> x8
    let (get_range : t -> AnonymousInterface0.t or_boolean) =
      fun (x10 : t) ->
        or_boolean_of_js AnonymousInterface0.t_of_js
          (Ojs.get_prop_ascii (t_to_js x10) "range")
    let (set_range : t -> AnonymousInterface0.t or_boolean -> unit) =
      fun (x12 : t) ->
        fun (x13 : AnonymousInterface0.t or_boolean) ->
          Ojs.set_prop_ascii (t_to_js x12) "range"
            (or_boolean_to_js AnonymousInterface0.t_to_js x13)
    let (get_full : t -> AnonymousInterface1.t or_boolean) =
      fun (x15 : t) ->
        or_boolean_of_js AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15) "full")
    let (set_full : t -> AnonymousInterface1.t or_boolean -> unit) =
      fun (x17 : t) ->
        fun (x18 : AnonymousInterface1.t or_boolean) ->
          Ojs.set_prop_ascii (t_to_js x17) "full"
            (or_boolean_to_js AnonymousInterface1.t_to_js x18)
  end
module SemanticTokensPartialResult =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x21 : Ojs.t) -> x21
    and t_to_js : t -> Ojs.t = fun (x20 : Ojs.t) -> x20
    let (get_data : t -> Uinteger.t list) =
      fun (x22 : t) ->
        Ojs.list_of_js Uinteger.t_of_js
          (Ojs.get_prop_ascii (t_to_js x22) "data")
    let (set_data : t -> Uinteger.t list -> unit) =
      fun (x24 : t) ->
        fun (x25 : Uinteger.t list) ->
          Ojs.set_prop_ascii (t_to_js x24) "data"
            (Ojs.list_to_js Uinteger.t_to_js x25)
  end
module SemanticTokensDeltaPartialResult =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x28 : Ojs.t) -> x28
    and t_to_js : t -> Ojs.t = fun (x27 : Ojs.t) -> x27
    let (get_edits : t -> SemanticTokensEdit.t list) =
      fun (x29 : t) ->
        Ojs.list_of_js SemanticTokensEdit.t_of_js
          (Ojs.get_prop_ascii (t_to_js x29) "edits")
    let (set_edits : t -> SemanticTokensEdit.t list -> unit) =
      fun (x31 : t) ->
        fun (x32 : SemanticTokensEdit.t list) ->
          Ojs.set_prop_ascii (t_to_js x31) "edits"
            (Ojs.list_to_js SemanticTokensEdit.t_to_js x32)
  end
module TokenFormat =
  struct
    let (relative : [ `L_s0_relative ]) =
      let x34 =
        Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "TokenFormat")
          "Relative" in
      match Ojs.string_of_js x34 with
      | "relative" -> `L_s0_relative
      | _ -> assert false
  end
module TokenFormat =
  struct
    type t = [ `L_s0_relative ]
    let rec t_of_js : Ojs.t -> t =
      fun (x36 : Ojs.t) ->
        let x37 = x36 in
        match Ojs.string_of_js x37 with
        | "relative" -> `L_s0_relative
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x35 : [ `L_s0_relative ]) ->
        match x35 with | `L_s0_relative -> Ojs.string_to_js "relative"
  end
module SemanticTokensClientCapabilities =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x39 : Ojs.t) -> x39
    and t_to_js : t -> Ojs.t = fun (x38 : Ojs.t) -> x38
    let (get_dynamic_registration : t -> bool) =
      fun (x40 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x40) "dynamicRegistration")
    let (set_dynamic_registration : t -> bool -> unit) =
      fun (x41 : t) ->
        fun (x42 : bool) ->
          Ojs.set_prop_ascii (t_to_js x41) "dynamicRegistration"
            (Ojs.bool_to_js x42)
    let (get_requests : t -> AnonymousInterface2.t) =
      fun (x43 : t) ->
        AnonymousInterface2.t_of_js
          (Ojs.get_prop_ascii (t_to_js x43) "requests")
    let (set_requests : t -> AnonymousInterface2.t -> unit) =
      fun (x44 : t) ->
        fun (x45 : AnonymousInterface2.t) ->
          Ojs.set_prop_ascii (t_to_js x44) "requests"
            (AnonymousInterface2.t_to_js x45)
    let (get_token_types : t -> string list) =
      fun (x46 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x46) "tokenTypes")
    let (set_token_types : t -> string list -> unit) =
      fun (x48 : t) ->
        fun (x49 : string list) ->
          Ojs.set_prop_ascii (t_to_js x48) "tokenTypes"
            (Ojs.list_to_js Ojs.string_to_js x49)
    let (get_token_modifiers : t -> string list) =
      fun (x51 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x51) "tokenModifiers")
    let (set_token_modifiers : t -> string list -> unit) =
      fun (x53 : t) ->
        fun (x54 : string list) ->
          Ojs.set_prop_ascii (t_to_js x53) "tokenModifiers"
            (Ojs.list_to_js Ojs.string_to_js x54)
    let (get_formats : t -> TokenFormat.t list) =
      fun (x56 : t) ->
        Ojs.list_of_js TokenFormat.t_of_js
          (Ojs.get_prop_ascii (t_to_js x56) "formats")
    let (set_formats : t -> TokenFormat.t list -> unit) =
      fun (x58 : t) ->
        fun (x59 : TokenFormat.t list) ->
          Ojs.set_prop_ascii (t_to_js x58) "formats"
            (Ojs.list_to_js TokenFormat.t_to_js x59)
    let (get_overlapping_token_support : t -> bool) =
      fun (x61 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x61) "overlappingTokenSupport")
    let (set_overlapping_token_support : t -> bool -> unit) =
      fun (x62 : t) ->
        fun (x63 : bool) ->
          Ojs.set_prop_ascii (t_to_js x62) "overlappingTokenSupport"
            (Ojs.bool_to_js x63)
    let (get_multiline_token_support : t -> bool) =
      fun (x64 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x64) "multilineTokenSupport")
    let (set_multiline_token_support : t -> bool -> unit) =
      fun (x65 : t) ->
        fun (x66 : bool) ->
          Ojs.set_prop_ascii (t_to_js x65) "multilineTokenSupport"
            (Ojs.bool_to_js x66)
  end
module SemanticTokensOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x68 : Ojs.t) -> x68
    and t_to_js : t -> Ojs.t = fun (x67 : Ojs.t) -> x67
    let (get_legend : t -> SemanticTokensLegend.t) =
      fun (x69 : t) ->
        SemanticTokensLegend.t_of_js
          (Ojs.get_prop_ascii (t_to_js x69) "legend")
    let (set_legend : t -> SemanticTokensLegend.t -> unit) =
      fun (x70 : t) ->
        fun (x71 : SemanticTokensLegend.t) ->
          Ojs.set_prop_ascii (t_to_js x70) "legend"
            (SemanticTokensLegend.t_to_js x71)
    let (get_range : t -> AnonymousInterface0.t or_boolean) =
      fun (x72 : t) ->
        or_boolean_of_js AnonymousInterface0.t_of_js
          (Ojs.get_prop_ascii (t_to_js x72) "range")
    let (set_range : t -> AnonymousInterface0.t or_boolean -> unit) =
      fun (x74 : t) ->
        fun (x75 : AnonymousInterface0.t or_boolean) ->
          Ojs.set_prop_ascii (t_to_js x74) "range"
            (or_boolean_to_js AnonymousInterface0.t_to_js x75)
    let (get_full : t -> AnonymousInterface1.t or_boolean) =
      fun (x77 : t) ->
        or_boolean_of_js AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x77) "full")
    let (set_full : t -> AnonymousInterface1.t or_boolean -> unit) =
      fun (x79 : t) ->
        fun (x80 : AnonymousInterface1.t or_boolean) ->
          Ojs.set_prop_ascii (t_to_js x79) "full"
            (or_boolean_to_js AnonymousInterface1.t_to_js x80)
    include struct include WorkDoneProgressOptions end
  end
module SemanticTokensRegistrationOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x83 : Ojs.t) -> x83
    and t_to_js : t -> Ojs.t = fun (x82 : Ojs.t) -> x82
    include struct include TextDocumentRegistrationOptions end
    let (cast' : t -> SemanticTokensOptions.t) =
      fun (x84 : t) -> SemanticTokensOptions.t_of_js (t_to_js x84)
    let (cast'' : t -> StaticRegistrationOptions.t) =
      fun (x85 : t) -> StaticRegistrationOptions.t_of_js (t_to_js x85)
  end
module SemanticTokensRegistrationType =
  struct
    let (method_ : [ `L_s1_textDocument_semanticTokens ]) =
      let x86 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "SemanticTokensRegistrationType")
          "method" in
      match Ojs.string_of_js x86 with
      | "textDocument/semanticTokens" -> `L_s1_textDocument_semanticTokens
      | _ -> assert false
    let (type_ : SemanticTokensRegistrationOptions.t RegistrationType.t) =
      RegistrationType.t_of_js SemanticTokensRegistrationOptions.t_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "SemanticTokensRegistrationType")
           "type")
  end
module SemanticTokensParams =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x89 : Ojs.t) -> x89
    and t_to_js : t -> Ojs.t = fun (x88 : Ojs.t) -> x88
    let (get_text_document : t -> TextDocumentIdentifier.t) =
      fun (x90 : t) ->
        TextDocumentIdentifier.t_of_js
          (Ojs.get_prop_ascii (t_to_js x90) "textDocument")
    let (set_text_document : t -> TextDocumentIdentifier.t -> unit) =
      fun (x91 : t) ->
        fun (x92 : TextDocumentIdentifier.t) ->
          Ojs.set_prop_ascii (t_to_js x91) "textDocument"
            (TextDocumentIdentifier.t_to_js x92)
    include struct include WorkDoneProgressParams end
    let (cast' : t -> PartialResultParams.t) =
      fun (x93 : t) -> PartialResultParams.t_of_js (t_to_js x93)
  end
module SemanticTokensRequest =
  struct
    let (method_ : [ `L_s2_textDocument_semanticTokens_full ]) =
      let x94 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "SemanticTokensRequest") "method" in
      match Ojs.string_of_js x94 with
      | "textDocument/semanticTokens/full" ->
          `L_s2_textDocument_semanticTokens_full
      | _ -> assert false
    let (type_ :
      (SemanticTokensParams.t, SemanticTokens.t or_null,
        SemanticTokensPartialResult.t, unit,
        SemanticTokensRegistrationOptions.t) ProtocolRequestType.t)
      =
      ProtocolRequestType.t_of_js SemanticTokensParams.t_of_js
        (fun (x96 : Ojs.t) -> or_null_of_js SemanticTokens.t_of_js x96)
        SemanticTokensPartialResult.t_of_js Ojs.unit_of_js
        SemanticTokensRegistrationOptions.t_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "SemanticTokensRequest") "type")
    module HandlerSignature =
      struct
        type t =
          (SemanticTokensDeltaParams.t, SemanticTokens.t or_null, unit)
            RequestHandler.t
        let rec t_of_js : Ojs.t -> t =
          fun (x106 : Ojs.t) ->
            RequestHandler.t_of_js SemanticTokensDeltaParams.t_of_js
              (fun (x108 : Ojs.t) ->
                 or_null_of_js SemanticTokens.t_of_js x108) Ojs.unit_of_js
              x106
        and t_to_js : t -> Ojs.t =
          fun
            (x101 :
              (SemanticTokensDeltaParams.t, SemanticTokens.t or_null, 
                unit) RequestHandler.t)
            ->
            RequestHandler.t_to_js SemanticTokensDeltaParams.t_to_js
              (fun (x103 : SemanticTokens.t or_null) ->
                 or_null_to_js SemanticTokens.t_to_js x103) Ojs.unit_to_js
              x101
      end
  end
module SemanticTokensDeltaParams =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x112 : Ojs.t) -> x112
    and t_to_js : t -> Ojs.t = fun (x111 : Ojs.t) -> x111
    let (get_text_document : t -> TextDocumentIdentifier.t) =
      fun (x113 : t) ->
        TextDocumentIdentifier.t_of_js
          (Ojs.get_prop_ascii (t_to_js x113) "textDocument")
    let (set_text_document : t -> TextDocumentIdentifier.t -> unit) =
      fun (x114 : t) ->
        fun (x115 : TextDocumentIdentifier.t) ->
          Ojs.set_prop_ascii (t_to_js x114) "textDocument"
            (TextDocumentIdentifier.t_to_js x115)
    let (get_previous_result_id : t -> string) =
      fun (x116 : t) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x116) "previousResultId")
    let (set_previous_result_id : t -> string -> unit) =
      fun (x117 : t) ->
        fun (x118 : string) ->
          Ojs.set_prop_ascii (t_to_js x117) "previousResultId"
            (Ojs.string_to_js x118)
    include struct include WorkDoneProgressParams end
    let (cast' : t -> PartialResultParams.t) =
      fun (x119 : t) -> PartialResultParams.t_of_js (t_to_js x119)
  end
module SemanticTokensDeltaRequest =
  struct
    let (method_ : [ `L_s3_textDocument_semanticTokens_full_delta ]) =
      let x120 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "SemanticTokensDeltaRequest")
          "method" in
      match Ojs.string_of_js x120 with
      | "textDocument/semanticTokens/full/delta" ->
          `L_s3_textDocument_semanticTokens_full_delta
      | _ -> assert false
    let (type_ :
      (SemanticTokensDeltaParams.t,
        (SemanticTokens.t, SemanticTokensDelta.t) union2 or_null,
        (SemanticTokensDeltaPartialResult.t, SemanticTokensPartialResult.t)
          union2,
        unit, SemanticTokensRegistrationOptions.t) ProtocolRequestType.t)
      =
      ProtocolRequestType.t_of_js SemanticTokensDeltaParams.t_of_js
        (fun (x122 : Ojs.t) ->
           or_null_of_js
             (fun (x123 : Ojs.t) ->
                union2_of_js SemanticTokens.t_of_js
                  SemanticTokensDelta.t_of_js x123) x122)
        (fun (x126 : Ojs.t) ->
           union2_of_js SemanticTokensDeltaPartialResult.t_of_js
             SemanticTokensPartialResult.t_of_js x126) Ojs.unit_of_js
        SemanticTokensRegistrationOptions.t_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "SemanticTokensDeltaRequest")
           "type")
    module HandlerSignature =
      struct
        type t =
          (SemanticTokensDeltaParams.t,
            (SemanticTokens.t, SemanticTokensDelta.t) union2 or_null, 
            unit) RequestHandler.t
        let rec t_of_js : Ojs.t -> t =
          fun (x138 : Ojs.t) ->
            RequestHandler.t_of_js SemanticTokensDeltaParams.t_of_js
              (fun (x140 : Ojs.t) ->
                 or_null_of_js
                   (fun (x141 : Ojs.t) ->
                      union2_of_js SemanticTokens.t_of_js
                        SemanticTokensDelta.t_of_js x141) x140)
              Ojs.unit_of_js x138
        and t_to_js : t -> Ojs.t =
          fun
            (x131 :
              (SemanticTokensDeltaParams.t,
                (SemanticTokens.t, SemanticTokensDelta.t) union2 or_null,
                unit) RequestHandler.t)
            ->
            RequestHandler.t_to_js SemanticTokensDeltaParams.t_to_js
              (fun
                 (x133 :
                   (SemanticTokens.t, SemanticTokensDelta.t) union2 or_null)
                 ->
                 or_null_to_js
                   (fun
                      (x134 :
                        (SemanticTokens.t, SemanticTokensDelta.t) union2)
                      ->
                      union2_to_js SemanticTokens.t_to_js
                        SemanticTokensDelta.t_to_js x134) x133)
              Ojs.unit_to_js x131
      end
  end
module SemanticTokensRangeParams =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x146 : Ojs.t) -> x146
    and t_to_js : t -> Ojs.t = fun (x145 : Ojs.t) -> x145
    let (get_text_document : t -> TextDocumentIdentifier.t) =
      fun (x147 : t) ->
        TextDocumentIdentifier.t_of_js
          (Ojs.get_prop_ascii (t_to_js x147) "textDocument")
    let (set_text_document : t -> TextDocumentIdentifier.t -> unit) =
      fun (x148 : t) ->
        fun (x149 : TextDocumentIdentifier.t) ->
          Ojs.set_prop_ascii (t_to_js x148) "textDocument"
            (TextDocumentIdentifier.t_to_js x149)
    let (get_range : t -> Range.t) =
      fun (x150 : t) ->
        Range.t_of_js (Ojs.get_prop_ascii (t_to_js x150) "range")
    let (set_range : t -> Range.t -> unit) =
      fun (x151 : t) ->
        fun (x152 : Range.t) ->
          Ojs.set_prop_ascii (t_to_js x151) "range" (Range.t_to_js x152)
    include struct include WorkDoneProgressParams end
    let (cast' : t -> PartialResultParams.t) =
      fun (x153 : t) -> PartialResultParams.t_of_js (t_to_js x153)
  end
module SemanticTokensRangeRequest =
  struct
    let (method_ : [ `L_s4_textDocument_semanticTokens_range ]) =
      let x154 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "SemanticTokensRangeRequest")
          "method" in
      match Ojs.string_of_js x154 with
      | "textDocument/semanticTokens/range" ->
          `L_s4_textDocument_semanticTokens_range
      | _ -> assert false
    let (type_ :
      (SemanticTokensRangeParams.t, SemanticTokens.t or_null,
        SemanticTokensPartialResult.t, unit, unit) ProtocolRequestType.t)
      =
      ProtocolRequestType.t_of_js SemanticTokensRangeParams.t_of_js
        (fun (x156 : Ojs.t) -> or_null_of_js SemanticTokens.t_of_js x156)
        SemanticTokensPartialResult.t_of_js Ojs.unit_of_js Ojs.unit_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "SemanticTokensRangeRequest")
           "type")
    module HandlerSignature =
      struct
        type t =
          (SemanticTokensRangeParams.t, SemanticTokens.t or_null, unit)
            RequestHandler.t
        let rec t_of_js : Ojs.t -> t =
          fun (x166 : Ojs.t) ->
            RequestHandler.t_of_js SemanticTokensRangeParams.t_of_js
              (fun (x168 : Ojs.t) ->
                 or_null_of_js SemanticTokens.t_of_js x168) Ojs.unit_of_js
              x166
        and t_to_js : t -> Ojs.t =
          fun
            (x161 :
              (SemanticTokensRangeParams.t, SemanticTokens.t or_null, 
                unit) RequestHandler.t)
            ->
            RequestHandler.t_to_js SemanticTokensRangeParams.t_to_js
              (fun (x163 : SemanticTokens.t or_null) ->
                 or_null_to_js SemanticTokens.t_to_js x163) Ojs.unit_to_js
              x161
      end
  end
module SemanticTokensWorkspaceClientCapabilities =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x172 : Ojs.t) -> x172
    and t_to_js : t -> Ojs.t = fun (x171 : Ojs.t) -> x171
    let (get_refresh_support : t -> bool) =
      fun (x173 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x173) "refreshSupport")
    let (set_refresh_support : t -> bool -> unit) =
      fun (x174 : t) ->
        fun (x175 : bool) ->
          Ojs.set_prop_ascii (t_to_js x174) "refreshSupport"
            (Ojs.bool_to_js x175)
  end
module SemanticTokensRefreshRequest =
  struct
    let (method_ : any) =
      any_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "SemanticTokensRefreshRequest")
           "method")
    let (type_ : (unit, unit, unit, unit) ProtocolRequestType0.t) =
      ProtocolRequestType0.t_of_js Ojs.unit_of_js Ojs.unit_of_js
        Ojs.unit_of_js Ojs.unit_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "SemanticTokensRefreshRequest")
           "type")
    module HandlerSignature =
      struct
        type t = (unit, unit) RequestHandler0.t
        let rec t_of_js : Ojs.t -> t =
          fun (x183 : Ojs.t) ->
            RequestHandler0.t_of_js Ojs.unit_of_js Ojs.unit_of_js x183
        and t_to_js : t -> Ojs.t =
          fun (x180 : (unit, unit) RequestHandler0.t) ->
            RequestHandler0.t_to_js Ojs.unit_to_js Ojs.unit_to_js x180
      end
  end
