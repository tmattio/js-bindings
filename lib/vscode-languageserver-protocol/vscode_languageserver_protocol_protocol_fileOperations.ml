[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es5
module FileOperationOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_did_create : t -> FileOperationRegistrationOptions.t) =
      fun (x3 : t) ->
        FileOperationRegistrationOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x3) "didCreate")
    let (set_did_create : t -> FileOperationRegistrationOptions.t -> unit) =
      fun (x4 : t) ->
        fun (x5 : FileOperationRegistrationOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x4) "didCreate"
            (FileOperationRegistrationOptions.t_to_js x5)
    let (get_will_create : t -> FileOperationRegistrationOptions.t) =
      fun (x6 : t) ->
        FileOperationRegistrationOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x6) "willCreate")
    let (set_will_create : t -> FileOperationRegistrationOptions.t -> unit) =
      fun (x7 : t) ->
        fun (x8 : FileOperationRegistrationOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x7) "willCreate"
            (FileOperationRegistrationOptions.t_to_js x8)
    let (get_did_rename : t -> FileOperationRegistrationOptions.t) =
      fun (x9 : t) ->
        FileOperationRegistrationOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x9) "didRename")
    let (set_did_rename : t -> FileOperationRegistrationOptions.t -> unit) =
      fun (x10 : t) ->
        fun (x11 : FileOperationRegistrationOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x10) "didRename"
            (FileOperationRegistrationOptions.t_to_js x11)
    let (get_will_rename : t -> FileOperationRegistrationOptions.t) =
      fun (x12 : t) ->
        FileOperationRegistrationOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x12) "willRename")
    let (set_will_rename : t -> FileOperationRegistrationOptions.t -> unit) =
      fun (x13 : t) ->
        fun (x14 : FileOperationRegistrationOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x13) "willRename"
            (FileOperationRegistrationOptions.t_to_js x14)
    let (get_did_delete : t -> FileOperationRegistrationOptions.t) =
      fun (x15 : t) ->
        FileOperationRegistrationOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x15) "didDelete")
    let (set_did_delete : t -> FileOperationRegistrationOptions.t -> unit) =
      fun (x16 : t) ->
        fun (x17 : FileOperationRegistrationOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x16) "didDelete"
            (FileOperationRegistrationOptions.t_to_js x17)
    let (get_will_delete : t -> FileOperationRegistrationOptions.t) =
      fun (x18 : t) ->
        FileOperationRegistrationOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x18) "willDelete")
    let (set_will_delete : t -> FileOperationRegistrationOptions.t -> unit) =
      fun (x19 : t) ->
        fun (x20 : FileOperationRegistrationOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x19) "willDelete"
            (FileOperationRegistrationOptions.t_to_js x20)
  end
module FileOperationRegistrationOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x22 : Ojs.t) -> x22
    and t_to_js : t -> Ojs.t = fun (x21 : Ojs.t) -> x21
    let (get_filters : t -> FileOperationFilter.t list) =
      fun (x23 : t) ->
        Ojs.list_of_js FileOperationFilter.t_of_js
          (Ojs.get_prop_ascii (t_to_js x23) "filters")
    let (set_filters : t -> FileOperationFilter.t list -> unit) =
      fun (x25 : t) ->
        fun (x26 : FileOperationFilter.t list) ->
          Ojs.set_prop_ascii (t_to_js x25) "filters"
            (Ojs.list_to_js FileOperationFilter.t_to_js x26)
  end
module FileOperationPatternKind =
  struct
    let (file : [ `L_s0_file ]) =
      let x28 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "FileOperationPatternKind") "file" in
      match Ojs.string_of_js x28 with
      | "file" -> `L_s0_file
      | _ -> assert false
    let (folder : [ `L_s1_folder ]) =
      let x29 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "FileOperationPatternKind") "folder" in
      match Ojs.string_of_js x29 with
      | "folder" -> `L_s1_folder
      | _ -> assert false
  end
module FileOperationPatternKind =
  struct
    type t = [ `L_s0_file  | `L_s1_folder ]
    let rec t_of_js : Ojs.t -> t =
      fun (x31 : Ojs.t) ->
        let x32 = x31 in
        match Ojs.string_of_js x32 with
        | "file" -> `L_s0_file
        | "folder" -> `L_s1_folder
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun (x30 : [ `L_s0_file  | `L_s1_folder ]) ->
        match x30 with
        | `L_s0_file -> Ojs.string_to_js "file"
        | `L_s1_folder -> Ojs.string_to_js "folder"
  end
module FileOperationPatternOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x34 : Ojs.t) -> x34
    and t_to_js : t -> Ojs.t = fun (x33 : Ojs.t) -> x33
    let (get_ignore_case : t -> bool) =
      fun (x35 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x35) "ignoreCase")
    let (set_ignore_case : t -> bool -> unit) =
      fun (x36 : t) ->
        fun (x37 : bool) ->
          Ojs.set_prop_ascii (t_to_js x36) "ignoreCase" (Ojs.bool_to_js x37)
  end
module FileOperationPattern =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x39 : Ojs.t) -> x39
    and t_to_js : t -> Ojs.t = fun (x38 : Ojs.t) -> x38
    let (get_glob : t -> string) =
      fun (x40 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x40) "glob")
    let (set_glob : t -> string -> unit) =
      fun (x41 : t) ->
        fun (x42 : string) ->
          Ojs.set_prop_ascii (t_to_js x41) "glob" (Ojs.string_to_js x42)
    let (get_matches : t -> FileOperationPatternKind.t) =
      fun (x43 : t) ->
        FileOperationPatternKind.t_of_js
          (Ojs.get_prop_ascii (t_to_js x43) "matches")
    let (set_matches : t -> FileOperationPatternKind.t -> unit) =
      fun (x44 : t) ->
        fun (x45 : FileOperationPatternKind.t) ->
          Ojs.set_prop_ascii (t_to_js x44) "matches"
            (FileOperationPatternKind.t_to_js x45)
    let (get_options : t -> FileOperationPatternOptions.t) =
      fun (x46 : t) ->
        FileOperationPatternOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x46) "options")
    let (set_options : t -> FileOperationPatternOptions.t -> unit) =
      fun (x47 : t) ->
        fun (x48 : FileOperationPatternOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x47) "options"
            (FileOperationPatternOptions.t_to_js x48)
  end
module FileOperationFilter =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x50 : Ojs.t) -> x50
    and t_to_js : t -> Ojs.t = fun (x49 : Ojs.t) -> x49
    let (get_scheme : t -> string) =
      fun (x51 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x51) "scheme")
    let (set_scheme : t -> string -> unit) =
      fun (x52 : t) ->
        fun (x53 : string) ->
          Ojs.set_prop_ascii (t_to_js x52) "scheme" (Ojs.string_to_js x53)
    let (get_pattern : t -> FileOperationPattern.t) =
      fun (x54 : t) ->
        FileOperationPattern.t_of_js
          (Ojs.get_prop_ascii (t_to_js x54) "pattern")
    let (set_pattern : t -> FileOperationPattern.t -> unit) =
      fun (x55 : t) ->
        fun (x56 : FileOperationPattern.t) ->
          Ojs.set_prop_ascii (t_to_js x55) "pattern"
            (FileOperationPattern.t_to_js x56)
  end
module FileOperationClientCapabilities =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x58 : Ojs.t) -> x58
    and t_to_js : t -> Ojs.t = fun (x57 : Ojs.t) -> x57
    let (get_dynamic_registration : t -> bool) =
      fun (x59 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x59) "dynamicRegistration")
    let (set_dynamic_registration : t -> bool -> unit) =
      fun (x60 : t) ->
        fun (x61 : bool) ->
          Ojs.set_prop_ascii (t_to_js x60) "dynamicRegistration"
            (Ojs.bool_to_js x61)
    let (get_did_create : t -> bool) =
      fun (x62 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x62) "didCreate")
    let (set_did_create : t -> bool -> unit) =
      fun (x63 : t) ->
        fun (x64 : bool) ->
          Ojs.set_prop_ascii (t_to_js x63) "didCreate" (Ojs.bool_to_js x64)
    let (get_will_create : t -> bool) =
      fun (x65 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x65) "willCreate")
    let (set_will_create : t -> bool -> unit) =
      fun (x66 : t) ->
        fun (x67 : bool) ->
          Ojs.set_prop_ascii (t_to_js x66) "willCreate" (Ojs.bool_to_js x67)
    let (get_did_rename : t -> bool) =
      fun (x68 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x68) "didRename")
    let (set_did_rename : t -> bool -> unit) =
      fun (x69 : t) ->
        fun (x70 : bool) ->
          Ojs.set_prop_ascii (t_to_js x69) "didRename" (Ojs.bool_to_js x70)
    let (get_will_rename : t -> bool) =
      fun (x71 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x71) "willRename")
    let (set_will_rename : t -> bool -> unit) =
      fun (x72 : t) ->
        fun (x73 : bool) ->
          Ojs.set_prop_ascii (t_to_js x72) "willRename" (Ojs.bool_to_js x73)
    let (get_did_delete : t -> bool) =
      fun (x74 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x74) "didDelete")
    let (set_did_delete : t -> bool -> unit) =
      fun (x75 : t) ->
        fun (x76 : bool) ->
          Ojs.set_prop_ascii (t_to_js x75) "didDelete" (Ojs.bool_to_js x76)
    let (get_will_delete : t -> bool) =
      fun (x77 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x77) "willDelete")
    let (set_will_delete : t -> bool -> unit) =
      fun (x78 : t) ->
        fun (x79 : bool) ->
          Ojs.set_prop_ascii (t_to_js x78) "willDelete" (Ojs.bool_to_js x79)
  end
module CreateFilesParams =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x81 : Ojs.t) -> x81
    and t_to_js : t -> Ojs.t = fun (x80 : Ojs.t) -> x80
    let (get_files : t -> FileCreate.t list) =
      fun (x82 : t) ->
        Ojs.list_of_js FileCreate.t_of_js
          (Ojs.get_prop_ascii (t_to_js x82) "files")
    let (set_files : t -> FileCreate.t list -> unit) =
      fun (x84 : t) ->
        fun (x85 : FileCreate.t list) ->
          Ojs.set_prop_ascii (t_to_js x84) "files"
            (Ojs.list_to_js FileCreate.t_to_js x85)
  end
module FileCreate =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x88 : Ojs.t) -> x88
    and t_to_js : t -> Ojs.t = fun (x87 : Ojs.t) -> x87
    let (get_uri : t -> string) =
      fun (x89 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x89) "uri")
    let (set_uri : t -> string -> unit) =
      fun (x90 : t) ->
        fun (x91 : string) ->
          Ojs.set_prop_ascii (t_to_js x90) "uri" (Ojs.string_to_js x91)
  end
module RenameFilesParams =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x93 : Ojs.t) -> x93
    and t_to_js : t -> Ojs.t = fun (x92 : Ojs.t) -> x92
    let (get_files : t -> FileRename.t list) =
      fun (x94 : t) ->
        Ojs.list_of_js FileRename.t_of_js
          (Ojs.get_prop_ascii (t_to_js x94) "files")
    let (set_files : t -> FileRename.t list -> unit) =
      fun (x96 : t) ->
        fun (x97 : FileRename.t list) ->
          Ojs.set_prop_ascii (t_to_js x96) "files"
            (Ojs.list_to_js FileRename.t_to_js x97)
  end
module FileRename =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x100 : Ojs.t) -> x100
    and t_to_js : t -> Ojs.t = fun (x99 : Ojs.t) -> x99
    let (get_old_uri : t -> string) =
      fun (x101 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x101) "oldUri")
    let (set_old_uri : t -> string -> unit) =
      fun (x102 : t) ->
        fun (x103 : string) ->
          Ojs.set_prop_ascii (t_to_js x102) "oldUri" (Ojs.string_to_js x103)
    let (get_new_uri : t -> string) =
      fun (x104 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x104) "newUri")
    let (set_new_uri : t -> string -> unit) =
      fun (x105 : t) ->
        fun (x106 : string) ->
          Ojs.set_prop_ascii (t_to_js x105) "newUri" (Ojs.string_to_js x106)
  end
module DeleteFilesParams =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x108 : Ojs.t) -> x108
    and t_to_js : t -> Ojs.t = fun (x107 : Ojs.t) -> x107
    let (get_files : t -> FileDelete.t list) =
      fun (x109 : t) ->
        Ojs.list_of_js FileDelete.t_of_js
          (Ojs.get_prop_ascii (t_to_js x109) "files")
    let (set_files : t -> FileDelete.t list -> unit) =
      fun (x111 : t) ->
        fun (x112 : FileDelete.t list) ->
          Ojs.set_prop_ascii (t_to_js x111) "files"
            (Ojs.list_to_js FileDelete.t_to_js x112)
  end
module FileDelete =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x115 : Ojs.t) -> x115
    and t_to_js : t -> Ojs.t = fun (x114 : Ojs.t) -> x114
    let (get_uri : t -> string) =
      fun (x116 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x116) "uri")
    let (set_uri : t -> string -> unit) =
      fun (x117 : t) ->
        fun (x118 : string) ->
          Ojs.set_prop_ascii (t_to_js x117) "uri" (Ojs.string_to_js x118)
  end
module WillCreateFilesRequest =
  struct
    let (method_ : [ `L_s5_workspace_willCreateFiles ]) =
      let x119 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "WillCreateFilesRequest") "method" in
      match Ojs.string_of_js x119 with
      | "workspace/willCreateFiles" -> `L_s5_workspace_willCreateFiles
      | _ -> assert false
    let (type_ :
      (CreateFilesParams.t, WorkspaceEdit.t or_null, never, unit,
        FileOperationRegistrationOptions.t) ProtocolRequestType.t)
      =
      ProtocolRequestType.t_of_js CreateFilesParams.t_of_js
        (fun (x121 : Ojs.t) -> or_null_of_js WorkspaceEdit.t_of_js x121)
        never_of_js Ojs.unit_of_js FileOperationRegistrationOptions.t_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "WillCreateFilesRequest") "type")
    module HandlerSignature =
      struct
        type t =
          (CreateFilesParams.t, WorkspaceEdit.t or_null_or_undefined, 
            unit) RequestHandler.t
        let rec t_of_js : Ojs.t -> t =
          fun (x131 : Ojs.t) ->
            RequestHandler.t_of_js CreateFilesParams.t_of_js
              (fun (x133 : Ojs.t) ->
                 or_null_or_undefined_of_js WorkspaceEdit.t_of_js x133)
              Ojs.unit_of_js x131
        and t_to_js : t -> Ojs.t =
          fun
            (x126 :
              (CreateFilesParams.t, WorkspaceEdit.t or_null_or_undefined,
                unit) RequestHandler.t)
            ->
            RequestHandler.t_to_js CreateFilesParams.t_to_js
              (fun (x128 : WorkspaceEdit.t or_null_or_undefined) ->
                 or_null_or_undefined_to_js WorkspaceEdit.t_to_js x128)
              Ojs.unit_to_js x126
      end
  end
module DidCreateFilesNotification =
  struct
    let (method_ : [ `L_s2_workspace_didCreateFiles ]) =
      let x136 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "DidCreateFilesNotification")
          "method" in
      match Ojs.string_of_js x136 with
      | "workspace/didCreateFiles" -> `L_s2_workspace_didCreateFiles
      | _ -> assert false
    let (type_ :
      (CreateFilesParams.t, FileOperationRegistrationOptions.t)
        ProtocolNotificationType.t)
      =
      ProtocolNotificationType.t_of_js CreateFilesParams.t_of_js
        FileOperationRegistrationOptions.t_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "DidCreateFilesNotification")
           "type")
    module HandlerSignature =
      struct
        type t = CreateFilesParams.t NotificationHandler.t
        let rec t_of_js : Ojs.t -> t =
          fun (x141 : Ojs.t) ->
            NotificationHandler.t_of_js CreateFilesParams.t_of_js x141
        and t_to_js : t -> Ojs.t =
          fun (x139 : CreateFilesParams.t NotificationHandler.t) ->
            NotificationHandler.t_to_js CreateFilesParams.t_to_js x139
      end
  end
module WillRenameFilesRequest =
  struct
    let (method_ : [ `L_s7_workspace_willRenameFiles ]) =
      let x143 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "WillRenameFilesRequest") "method" in
      match Ojs.string_of_js x143 with
      | "workspace/willRenameFiles" -> `L_s7_workspace_willRenameFiles
      | _ -> assert false
    let (type_ :
      (RenameFilesParams.t, WorkspaceEdit.t or_null, never, unit,
        FileOperationRegistrationOptions.t) ProtocolRequestType.t)
      =
      ProtocolRequestType.t_of_js RenameFilesParams.t_of_js
        (fun (x145 : Ojs.t) -> or_null_of_js WorkspaceEdit.t_of_js x145)
        never_of_js Ojs.unit_of_js FileOperationRegistrationOptions.t_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "WillRenameFilesRequest") "type")
    module HandlerSignature =
      struct
        type t =
          (RenameFilesParams.t, WorkspaceEdit.t or_null_or_undefined, 
            unit) RequestHandler.t
        let rec t_of_js : Ojs.t -> t =
          fun (x155 : Ojs.t) ->
            RequestHandler.t_of_js RenameFilesParams.t_of_js
              (fun (x157 : Ojs.t) ->
                 or_null_or_undefined_of_js WorkspaceEdit.t_of_js x157)
              Ojs.unit_of_js x155
        and t_to_js : t -> Ojs.t =
          fun
            (x150 :
              (RenameFilesParams.t, WorkspaceEdit.t or_null_or_undefined,
                unit) RequestHandler.t)
            ->
            RequestHandler.t_to_js RenameFilesParams.t_to_js
              (fun (x152 : WorkspaceEdit.t or_null_or_undefined) ->
                 or_null_or_undefined_to_js WorkspaceEdit.t_to_js x152)
              Ojs.unit_to_js x150
      end
  end
module DidRenameFilesNotification =
  struct
    let (method_ : [ `L_s4_workspace_didRenameFiles ]) =
      let x160 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "DidRenameFilesNotification")
          "method" in
      match Ojs.string_of_js x160 with
      | "workspace/didRenameFiles" -> `L_s4_workspace_didRenameFiles
      | _ -> assert false
    let (type_ :
      (RenameFilesParams.t, FileOperationRegistrationOptions.t)
        ProtocolNotificationType.t)
      =
      ProtocolNotificationType.t_of_js RenameFilesParams.t_of_js
        FileOperationRegistrationOptions.t_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "DidRenameFilesNotification")
           "type")
    module HandlerSignature =
      struct
        type t = RenameFilesParams.t NotificationHandler.t
        let rec t_of_js : Ojs.t -> t =
          fun (x165 : Ojs.t) ->
            NotificationHandler.t_of_js RenameFilesParams.t_of_js x165
        and t_to_js : t -> Ojs.t =
          fun (x163 : RenameFilesParams.t NotificationHandler.t) ->
            NotificationHandler.t_to_js RenameFilesParams.t_to_js x163
      end
  end
module DidDeleteFilesNotification =
  struct
    let (method_ : [ `L_s3_workspace_didDeleteFiles ]) =
      let x167 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "DidDeleteFilesNotification")
          "method" in
      match Ojs.string_of_js x167 with
      | "workspace/didDeleteFiles" -> `L_s3_workspace_didDeleteFiles
      | _ -> assert false
    let (type_ :
      (DeleteFilesParams.t, FileOperationRegistrationOptions.t)
        ProtocolNotificationType.t)
      =
      ProtocolNotificationType.t_of_js DeleteFilesParams.t_of_js
        FileOperationRegistrationOptions.t_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "DidDeleteFilesNotification")
           "type")
    module HandlerSignature =
      struct
        type t = DeleteFilesParams.t NotificationHandler.t
        let rec t_of_js : Ojs.t -> t =
          fun (x172 : Ojs.t) ->
            NotificationHandler.t_of_js DeleteFilesParams.t_of_js x172
        and t_to_js : t -> Ojs.t =
          fun (x170 : DeleteFilesParams.t NotificationHandler.t) ->
            NotificationHandler.t_to_js DeleteFilesParams.t_to_js x170
      end
  end
module WillDeleteFilesRequest =
  struct
    let (method_ : [ `L_s6_workspace_willDeleteFiles ]) =
      let x174 =
        Ojs.get_prop_ascii
          (Ojs.get_prop_ascii Ojs.global "WillDeleteFilesRequest") "method" in
      match Ojs.string_of_js x174 with
      | "workspace/willDeleteFiles" -> `L_s6_workspace_willDeleteFiles
      | _ -> assert false
    let (type_ :
      (DeleteFilesParams.t, WorkspaceEdit.t or_null, never, unit,
        FileOperationRegistrationOptions.t) ProtocolRequestType.t)
      =
      ProtocolRequestType.t_of_js DeleteFilesParams.t_of_js
        (fun (x176 : Ojs.t) -> or_null_of_js WorkspaceEdit.t_of_js x176)
        never_of_js Ojs.unit_of_js FileOperationRegistrationOptions.t_of_js
        (Ojs.get_prop_ascii
           (Ojs.get_prop_ascii Ojs.global "WillDeleteFilesRequest") "type")
    module HandlerSignature =
      struct
        type t =
          (DeleteFilesParams.t, WorkspaceEdit.t or_null_or_undefined, 
            unit) RequestHandler.t
        let rec t_of_js : Ojs.t -> t =
          fun (x186 : Ojs.t) ->
            RequestHandler.t_of_js DeleteFilesParams.t_of_js
              (fun (x188 : Ojs.t) ->
                 or_null_or_undefined_of_js WorkspaceEdit.t_of_js x188)
              Ojs.unit_of_js x186
        and t_to_js : t -> Ojs.t =
          fun
            (x181 :
              (DeleteFilesParams.t, WorkspaceEdit.t or_null_or_undefined,
                unit) RequestHandler.t)
            ->
            RequestHandler.t_to_js DeleteFilesParams.t_to_js
              (fun (x183 : WorkspaceEdit.t or_null_or_undefined) ->
                 or_null_or_undefined_to_js WorkspaceEdit.t_to_js x183)
              Ojs.unit_to_js x181
      end
  end
