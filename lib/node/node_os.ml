[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
        type anonymous_interface_1 = [ `anonymous_interface_1 ] intf
        let rec anonymous_interface_1_of_js : Ojs.t -> anonymous_interface_1
          = Obj.magic
        and anonymous_interface_1_to_js : anonymous_interface_1 -> Ojs.t =
          Obj.magic
        type anonymous_interface_2 = [ `anonymous_interface_2 ] intf
        let rec anonymous_interface_2_of_js : Ojs.t -> anonymous_interface_2
          = Obj.magic
        and anonymous_interface_2_to_js : anonymous_interface_2 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type os_CpuInfo = [ `Os_CpuInfo ] intf
        and os_NetworkInterfaceBase = [ `Os_NetworkInterfaceBase ] intf
        and os_NetworkInterfaceInfo =
          [ `U_s1_IPv4 of os_NetworkInterfaceInfoIPv4 
          | `U_s2_IPv6 of os_NetworkInterfaceInfoIPv6 ]
        and os_NetworkInterfaceInfoIPv4 =
          [ `Os_NetworkInterfaceInfoIPv4  | `Os_NetworkInterfaceBase ] intf
        and os_NetworkInterfaceInfoIPv6 =
          [ `Os_NetworkInterfaceInfoIPv6  | `Os_NetworkInterfaceBase ] intf
        and os_SignalConstants = any
        and 'T os_UserInfo = [ `Os_UserInfo of 'T ] intf
        let rec os_CpuInfo_of_js : Ojs.t -> os_CpuInfo = Obj.magic
        and os_CpuInfo_to_js : os_CpuInfo -> Ojs.t = Obj.magic
        and os_NetworkInterfaceBase_of_js : Ojs.t -> os_NetworkInterfaceBase
          = Obj.magic
        and os_NetworkInterfaceBase_to_js : os_NetworkInterfaceBase -> Ojs.t
          = Obj.magic
        and os_NetworkInterfaceInfo_of_js : Ojs.t -> os_NetworkInterfaceInfo
          =
          fun (x4 : Ojs.t) ->
            let x5 = x4 in
            match Ojs.string_of_js (Ojs.get_prop_ascii x5 "family") with
            | "IPv4" -> `U_s1_IPv4 (os_NetworkInterfaceInfoIPv4_of_js x5)
            | "IPv6" -> `U_s2_IPv6 (os_NetworkInterfaceInfoIPv6_of_js x5)
            | _ -> assert false
        and os_NetworkInterfaceInfo_to_js : os_NetworkInterfaceInfo -> Ojs.t
          =
          fun
            (x1 :
              [ `U_s1_IPv4 of os_NetworkInterfaceInfoIPv4 
              | `U_s2_IPv6 of os_NetworkInterfaceInfoIPv6 ])
            ->
            match x1 with
            | `U_s1_IPv4 x2 -> os_NetworkInterfaceInfoIPv4_to_js x2
            | `U_s2_IPv6 x3 -> os_NetworkInterfaceInfoIPv6_to_js x3
        and os_NetworkInterfaceInfoIPv4_of_js :
          Ojs.t -> os_NetworkInterfaceInfoIPv4 = Obj.magic
        and os_NetworkInterfaceInfoIPv4_to_js :
          os_NetworkInterfaceInfoIPv4 -> Ojs.t = Obj.magic
        and os_NetworkInterfaceInfoIPv6_of_js :
          Ojs.t -> os_NetworkInterfaceInfoIPv6 = Obj.magic
        and os_NetworkInterfaceInfoIPv6_to_js :
          os_NetworkInterfaceInfoIPv6 -> Ojs.t = Obj.magic
        and os_SignalConstants_of_js : Ojs.t -> os_SignalConstants =
          fun (x7 : Ojs.t) -> any_of_js x7
        and os_SignalConstants_to_js : os_SignalConstants -> Ojs.t =
          fun (x6 : any) -> any_to_js x6
        and os_UserInfo_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T os_UserInfo
          = fun _T -> Obj.magic
        and os_UserInfo_to_js : 'T . ('T -> Ojs.t) -> 'T os_UserInfo -> Ojs.t
          = fun _T -> Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x9 : Ojs.t) -> anonymous_interface_0_of_js x9
    and t_to_js : t -> Ojs.t =
      fun (x8 : anonymous_interface_0) -> anonymous_interface_0_to_js x8
    let (get_encoding : t -> BufferEncoding.t) =
      fun (x10 : t) ->
        BufferEncoding.t_of_js (Ojs.get_prop_ascii (t_to_js x10) "encoding")
    let (set_encoding : t -> BufferEncoding.t -> unit) =
      fun (x11 : t) ->
        fun (x12 : BufferEncoding.t) ->
          Ojs.set_prop_ascii (t_to_js x11) "encoding"
            (BufferEncoding.t_to_js x12)
  end
module AnonymousInterface1 =
  struct
    type t = anonymous_interface_1
    let rec t_of_js : Ojs.t -> t =
      fun (x14 : Ojs.t) -> anonymous_interface_1_of_js x14
    and t_to_js : t -> Ojs.t =
      fun (x13 : anonymous_interface_1) -> anonymous_interface_1_to_js x13
    let (get_encoding : t -> [ `buffer ]) =
      fun (x15 : t) ->
        let x16 = Ojs.get_prop_ascii (t_to_js x15) "encoding" in
        match Ojs.string_of_js x16 with
        | "buffer" -> `buffer
        | _ -> assert false
    let (set_encoding : t -> [ `buffer ] -> unit) =
      fun (x17 : t) ->
        fun (x18 : [ `buffer ]) ->
          Ojs.set_prop_ascii (t_to_js x17) "encoding"
            (match x18 with | `buffer -> Ojs.string_to_js "buffer")
  end
module AnonymousInterface2 =
  struct
    type t = anonymous_interface_2
    let rec t_of_js : Ojs.t -> t =
      fun (x20 : Ojs.t) -> anonymous_interface_2_of_js x20
    and t_to_js : t -> Ojs.t =
      fun (x19 : anonymous_interface_2) -> anonymous_interface_2_to_js x19
    let (get_user : t -> float) =
      fun (x21 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x21) "user")
    let (set_user : t -> float -> unit) =
      fun (x22 : t) ->
        fun (x23 : float) ->
          Ojs.set_prop_ascii (t_to_js x22) "user" (Ojs.float_to_js x23)
    let (get_nice : t -> float) =
      fun (x24 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x24) "nice")
    let (set_nice : t -> float -> unit) =
      fun (x25 : t) ->
        fun (x26 : float) ->
          Ojs.set_prop_ascii (t_to_js x25) "nice" (Ojs.float_to_js x26)
    let (get_sys : t -> float) =
      fun (x27 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x27) "sys")
    let (set_sys : t -> float -> unit) =
      fun (x28 : t) ->
        fun (x29 : float) ->
          Ojs.set_prop_ascii (t_to_js x28) "sys" (Ojs.float_to_js x29)
    let (get_idle : t -> float) =
      fun (x30 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x30) "idle")
    let (set_idle : t -> float -> unit) =
      fun (x31 : t) ->
        fun (x32 : float) ->
          Ojs.set_prop_ascii (t_to_js x31) "idle" (Ojs.float_to_js x32)
    let (get_irq : t -> float) =
      fun (x33 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x33) "irq")
    let (set_irq : t -> float -> unit) =
      fun (x34 : t) ->
        fun (x35 : float) ->
          Ojs.set_prop_ascii (t_to_js x34) "irq" (Ojs.float_to_js x35)
  end
module Os =
  struct
    module CpuInfo =
      struct
        type t = os_CpuInfo
        let rec t_of_js : Ojs.t -> t =
          fun (x37 : Ojs.t) -> os_CpuInfo_of_js x37
        and t_to_js : t -> Ojs.t =
          fun (x36 : os_CpuInfo) -> os_CpuInfo_to_js x36
        let (get_model : t -> string) =
          fun (x38 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x38) "model")
        let (set_model : t -> string -> unit) =
          fun (x39 : t) ->
            fun (x40 : string) ->
              Ojs.set_prop_ascii (t_to_js x39) "model" (Ojs.string_to_js x40)
        let (get_speed : t -> float) =
          fun (x41 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x41) "speed")
        let (set_speed : t -> float -> unit) =
          fun (x42 : t) ->
            fun (x43 : float) ->
              Ojs.set_prop_ascii (t_to_js x42) "speed" (Ojs.float_to_js x43)
        let (get_times : t -> anonymous_interface_2) =
          fun (x44 : t) ->
            anonymous_interface_2_of_js
              (Ojs.get_prop_ascii (t_to_js x44) "times")
        let (set_times : t -> anonymous_interface_2 -> unit) =
          fun (x45 : t) ->
            fun (x46 : anonymous_interface_2) ->
              Ojs.set_prop_ascii (t_to_js x45) "times"
                (anonymous_interface_2_to_js x46)
      end
    module NetworkInterfaceBase =
      struct
        type t = os_NetworkInterfaceBase
        let rec t_of_js : Ojs.t -> t =
          fun (x48 : Ojs.t) -> os_NetworkInterfaceBase_of_js x48
        and t_to_js : t -> Ojs.t =
          fun (x47 : os_NetworkInterfaceBase) ->
            os_NetworkInterfaceBase_to_js x47
        let (get_address : t -> string) =
          fun (x49 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x49) "address")
        let (set_address : t -> string -> unit) =
          fun (x50 : t) ->
            fun (x51 : string) ->
              Ojs.set_prop_ascii (t_to_js x50) "address"
                (Ojs.string_to_js x51)
        let (get_netmask : t -> string) =
          fun (x52 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x52) "netmask")
        let (set_netmask : t -> string -> unit) =
          fun (x53 : t) ->
            fun (x54 : string) ->
              Ojs.set_prop_ascii (t_to_js x53) "netmask"
                (Ojs.string_to_js x54)
        let (get_mac : t -> string) =
          fun (x55 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x55) "mac")
        let (set_mac : t -> string -> unit) =
          fun (x56 : t) ->
            fun (x57 : string) ->
              Ojs.set_prop_ascii (t_to_js x56) "mac" (Ojs.string_to_js x57)
        let (get_internal : t -> bool) =
          fun (x58 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x58) "internal")
        let (set_internal : t -> bool -> unit) =
          fun (x59 : t) ->
            fun (x60 : bool) ->
              Ojs.set_prop_ascii (t_to_js x59) "internal"
                (Ojs.bool_to_js x60)
        let (get_cidr : t -> string or_null) =
          fun (x61 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x61) "cidr")
        let (set_cidr : t -> string or_null -> unit) =
          fun (x63 : t) ->
            fun (x64 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x63) "cidr"
                (or_null_to_js Ojs.string_to_js x64)
      end
    module NetworkInterfaceInfoIPv4 =
      struct
        type t = os_NetworkInterfaceInfoIPv4
        let rec t_of_js : Ojs.t -> t =
          fun (x67 : Ojs.t) -> os_NetworkInterfaceInfoIPv4_of_js x67
        and t_to_js : t -> Ojs.t =
          fun (x66 : os_NetworkInterfaceInfoIPv4) ->
            os_NetworkInterfaceInfoIPv4_to_js x66
        let (get_family : t -> [ `IPv4 ]) =
          fun (x68 : t) ->
            let x69 = Ojs.get_prop_ascii (t_to_js x68) "family" in
            match Ojs.string_of_js x69 with
            | "IPv4" -> `IPv4
            | _ -> assert false
        let (set_family : t -> [ `IPv4 ] -> unit) =
          fun (x70 : t) ->
            fun (x71 : [ `IPv4 ]) ->
              Ojs.set_prop_ascii (t_to_js x70) "family"
                (match x71 with | `IPv4 -> Ojs.string_to_js "IPv4")
        let (cast : t -> os_NetworkInterfaceBase) =
          fun (x72 : t) -> os_NetworkInterfaceBase_of_js (t_to_js x72)
      end
    module NetworkInterfaceInfoIPv6 =
      struct
        type t = os_NetworkInterfaceInfoIPv6
        let rec t_of_js : Ojs.t -> t =
          fun (x74 : Ojs.t) -> os_NetworkInterfaceInfoIPv6_of_js x74
        and t_to_js : t -> Ojs.t =
          fun (x73 : os_NetworkInterfaceInfoIPv6) ->
            os_NetworkInterfaceInfoIPv6_to_js x73
        let (get_family : t -> [ `IPv6 ]) =
          fun (x75 : t) ->
            let x76 = Ojs.get_prop_ascii (t_to_js x75) "family" in
            match Ojs.string_of_js x76 with
            | "IPv6" -> `IPv6
            | _ -> assert false
        let (set_family : t -> [ `IPv6 ] -> unit) =
          fun (x77 : t) ->
            fun (x78 : [ `IPv6 ]) ->
              Ojs.set_prop_ascii (t_to_js x77) "family"
                (match x78 with | `IPv6 -> Ojs.string_to_js "IPv6")
        let (get_scopeid : t -> float) =
          fun (x79 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x79) "scopeid")
        let (set_scopeid : t -> float -> unit) =
          fun (x80 : t) ->
            fun (x81 : float) ->
              Ojs.set_prop_ascii (t_to_js x80) "scopeid"
                (Ojs.float_to_js x81)
        let (cast : t -> os_NetworkInterfaceBase) =
          fun (x82 : t) -> os_NetworkInterfaceBase_of_js (t_to_js x82)
      end
    module UserInfo =
      struct
        type 'T t = 'T os_UserInfo
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x85 : Ojs.t) -> os_UserInfo_of_js __T_of_js x85
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x83 : __T os_UserInfo) -> os_UserInfo_to_js __T_to_js x83
        let (get_username : 'T t -> 'T) =
          fun (x87 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x87) "username")
        let (set_username : 'T t -> 'T -> unit) =
          fun (x89 : 'T t) ->
            fun (x90 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x89) "username"
                (Obj.magic x90)
        let (get_uid : 'T t -> float) =
          fun (x92 : 'T t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x92) "uid")
        let (set_uid : 'T t -> float -> unit) =
          fun (x94 : 'T t) ->
            fun (x95 : float) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x94) "uid"
                (Ojs.float_to_js x95)
        let (get_gid : 'T t -> float) =
          fun (x97 : 'T t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x97) "gid")
        let (set_gid : 'T t -> float -> unit) =
          fun (x99 : 'T t) ->
            fun (x100 : float) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x99) "gid"
                (Ojs.float_to_js x100)
        let (get_shell : 'T t -> 'T) =
          fun (x102 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x102) "shell")
        let (set_shell : 'T t -> 'T -> unit) =
          fun (x104 : 'T t) ->
            fun (x105 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x104) "shell"
                (Obj.magic x105)
        let (get_homedir : 'T t -> 'T) =
          fun (x107 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x107) "homedir")
        let (set_homedir : 'T t -> 'T -> unit) =
          fun (x109 : 'T t) ->
            fun (x110 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x109) "homedir"
                (Obj.magic x110)
      end
    module NetworkInterfaceInfo =
      struct
        type t = os_NetworkInterfaceInfo
        let rec t_of_js : Ojs.t -> t =
          fun (x113 : Ojs.t) -> os_NetworkInterfaceInfo_of_js x113
        and t_to_js : t -> Ojs.t =
          fun (x112 : os_NetworkInterfaceInfo) ->
            os_NetworkInterfaceInfo_to_js x112
      end
    let (hostname : unit -> string) =
      fun () -> Ojs.string_of_js (Ojs.call Import.os "hostname" [||])
    let (loadavg : unit -> float list) =
      fun () ->
        Ojs.list_of_js Ojs.float_of_js (Ojs.call Import.os "loadavg" [||])
    let (uptime : unit -> float) =
      fun () -> Ojs.float_of_js (Ojs.call Import.os "uptime" [||])
    let (freemem : unit -> float) =
      fun () -> Ojs.float_of_js (Ojs.call Import.os "freemem" [||])
    let (totalmem : unit -> float) =
      fun () -> Ojs.float_of_js (Ojs.call Import.os "totalmem" [||])
    let (cpus : unit -> os_CpuInfo list) =
      fun () ->
        Ojs.list_of_js os_CpuInfo_of_js (Ojs.call Import.os "cpus" [||])
    let (type_ : unit -> string) =
      fun () -> Ojs.string_of_js (Ojs.call Import.os "type" [||])
    let (release : unit -> string) =
      fun () -> Ojs.string_of_js (Ojs.call Import.os "release" [||])
    let (networkInterfaces : unit -> os_NetworkInterfaceInfo list Dict.t) =
      fun () ->
        Dict.t_of_js
          (fun (x116 : Ojs.t) ->
             Ojs.list_of_js os_NetworkInterfaceInfo_of_js x116)
          (Ojs.call Import.os "networkInterfaces" [||])
    let (homedir : unit -> string) =
      fun () -> Ojs.string_of_js (Ojs.call Import.os "homedir" [||])
    let (userInfo : options:anonymous_interface_1 -> Buffer.t os_UserInfo) =
      fun ~options:(x118 : anonymous_interface_1) ->
        os_UserInfo_of_js Buffer.t_of_js
          (Ojs.call Import.os "userInfo"
             [|(anonymous_interface_1_to_js x118)|])
    let (userInfo :
      ?options:anonymous_interface_0 -> unit -> string os_UserInfo) =
      fun ?options:(x120 : anonymous_interface_0 option) ->
        fun () ->
          os_UserInfo_of_js Ojs.string_of_js
            (let x123 = Import.os in
             Ojs.call (Ojs.get_prop_ascii x123 "userInfo") "apply"
               [|x123;((let x121 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x120 with
                         | Some x122 ->
                             ignore
                               (Ojs.call x121 "push"
                                  [|(anonymous_interface_0_to_js x122)|])
                         | None -> ());
                        x121))|])
    module SignalConstants =
      struct
        type t = os_SignalConstants
        let rec t_of_js : Ojs.t -> t =
          fun (x126 : Ojs.t) -> os_SignalConstants_of_js x126
        and t_to_js : t -> Ojs.t =
          fun (x125 : os_SignalConstants) -> os_SignalConstants_to_js x125
      end
    module Constants =
      struct
        let (uV_UDP_REUSEADDR : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.os "constants")
               "UV_UDP_REUSEADDR")
        let (signals : os_SignalConstants) =
          os_SignalConstants_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.os "constants")
               "signals")
        module Errno =
          struct
            let (e2BIG : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "E2BIG")
            let (eACCES : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EACCES")
            let (eADDRINUSE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EADDRINUSE")
            let (eADDRNOTAVAIL : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EADDRNOTAVAIL")
            let (eAFNOSUPPORT : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EAFNOSUPPORT")
            let (eAGAIN : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EAGAIN")
            let (eALREADY : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EALREADY")
            let (eBADF : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EBADF")
            let (eBADMSG : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EBADMSG")
            let (eBUSY : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EBUSY")
            let (eCANCELED : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ECANCELED")
            let (eCHILD : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ECHILD")
            let (eCONNABORTED : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ECONNABORTED")
            let (eCONNREFUSED : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ECONNREFUSED")
            let (eCONNRESET : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ECONNRESET")
            let (eDEADLK : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EDEADLK")
            let (eDESTADDRREQ : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EDESTADDRREQ")
            let (eDOM : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EDOM")
            let (eDQUOT : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EDQUOT")
            let (eEXIST : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EEXIST")
            let (eFAULT : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EFAULT")
            let (eFBIG : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EFBIG")
            let (eHOSTUNREACH : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EHOSTUNREACH")
            let (eIDRM : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EIDRM")
            let (eILSEQ : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EILSEQ")
            let (eINPROGRESS : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EINPROGRESS")
            let (eINTR : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EINTR")
            let (eINVAL : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EINVAL")
            let (eIO : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EIO")
            let (eISCONN : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EISCONN")
            let (eISDIR : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EISDIR")
            let (eLOOP : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ELOOP")
            let (eMFILE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EMFILE")
            let (eMLINK : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EMLINK")
            let (eMSGSIZE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EMSGSIZE")
            let (eMULTIHOP : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EMULTIHOP")
            let (eNAMETOOLONG : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENAMETOOLONG")
            let (eNETDOWN : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENETDOWN")
            let (eNETRESET : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENETRESET")
            let (eNETUNREACH : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENETUNREACH")
            let (eNFILE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENFILE")
            let (eNOBUFS : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOBUFS")
            let (eNODATA : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENODATA")
            let (eNODEV : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENODEV")
            let (eNOENT : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOENT")
            let (eNOEXEC : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOEXEC")
            let (eNOLCK : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOLCK")
            let (eNOLINK : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOLINK")
            let (eNOMEM : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOMEM")
            let (eNOMSG : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOMSG")
            let (eNOPROTOOPT : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOPROTOOPT")
            let (eNOSPC : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOSPC")
            let (eNOSR : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOSR")
            let (eNOSTR : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOSTR")
            let (eNOSYS : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOSYS")
            let (eNOTCONN : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOTCONN")
            let (eNOTDIR : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOTDIR")
            let (eNOTEMPTY : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOTEMPTY")
            let (eNOTSOCK : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOTSOCK")
            let (eNOTSUP : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOTSUP")
            let (eNOTTY : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOTTY")
            let (eNXIO : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENXIO")
            let (eOPNOTSUPP : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EOPNOTSUPP")
            let (eOVERFLOW : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EOVERFLOW")
            let (ePERM : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EPERM")
            let (ePIPE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EPIPE")
            let (ePROTO : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EPROTO")
            let (ePROTONOSUPPORT : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EPROTONOSUPPORT")
            let (ePROTOTYPE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EPROTOTYPE")
            let (eRANGE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ERANGE")
            let (eROFS : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EROFS")
            let (eSPIPE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ESPIPE")
            let (eSRCH : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ESRCH")
            let (eSTALE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ESTALE")
            let (eTIME : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ETIME")
            let (eTIMEDOUT : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ETIMEDOUT")
            let (eTXTBSY : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ETXTBSY")
            let (eWOULDBLOCK : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EWOULDBLOCK")
            let (eXDEV : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EXDEV")
            let (wSAEINTR : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEINTR")
            let (wSAEBADF : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEBADF")
            let (wSAEACCES : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEACCES")
            let (wSAEFAULT : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEFAULT")
            let (wSAEINVAL : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEINVAL")
            let (wSAEMFILE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEMFILE")
            let (wSAEWOULDBLOCK : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEWOULDBLOCK")
            let (wSAEINPROGRESS : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEINPROGRESS")
            let (wSAEALREADY : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEALREADY")
            let (wSAENOTSOCK : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENOTSOCK")
            let (wSAEDESTADDRREQ : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEDESTADDRREQ")
            let (wSAEMSGSIZE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEMSGSIZE")
            let (wSAEPROTOTYPE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEPROTOTYPE")
            let (wSAENOPROTOOPT : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENOPROTOOPT")
            let (wSAEPROTONOSUPPORT : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEPROTONOSUPPORT")
            let (wSAESOCKTNOSUPPORT : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAESOCKTNOSUPPORT")
            let (wSAEOPNOTSUPP : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEOPNOTSUPP")
            let (wSAEPFNOSUPPORT : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEPFNOSUPPORT")
            let (wSAEAFNOSUPPORT : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEAFNOSUPPORT")
            let (wSAEADDRINUSE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEADDRINUSE")
            let (wSAEADDRNOTAVAIL : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEADDRNOTAVAIL")
            let (wSAENETDOWN : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENETDOWN")
            let (wSAENETUNREACH : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENETUNREACH")
            let (wSAENETRESET : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENETRESET")
            let (wSAECONNABORTED : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAECONNABORTED")
            let (wSAECONNRESET : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAECONNRESET")
            let (wSAENOBUFS : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENOBUFS")
            let (wSAEISCONN : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEISCONN")
            let (wSAENOTCONN : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENOTCONN")
            let (wSAESHUTDOWN : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAESHUTDOWN")
            let (wSAETOOMANYREFS : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAETOOMANYREFS")
            let (wSAETIMEDOUT : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAETIMEDOUT")
            let (wSAECONNREFUSED : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAECONNREFUSED")
            let (wSAELOOP : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAELOOP")
            let (wSAENAMETOOLONG : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENAMETOOLONG")
            let (wSAEHOSTDOWN : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEHOSTDOWN")
            let (wSAEHOSTUNREACH : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEHOSTUNREACH")
            let (wSAENOTEMPTY : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENOTEMPTY")
            let (wSAEPROCLIM : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEPROCLIM")
            let (wSAEUSERS : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEUSERS")
            let (wSAEDQUOT : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEDQUOT")
            let (wSAESTALE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAESTALE")
            let (wSAEREMOTE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEREMOTE")
            let (wSASYSNOTREADY : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSASYSNOTREADY")
            let (wSAVERNOTSUPPORTED : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAVERNOTSUPPORTED")
            let (wSANOTINITIALISED : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSANOTINITIALISED")
            let (wSAEDISCON : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEDISCON")
            let (wSAENOMORE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENOMORE")
            let (wSAECANCELLED : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAECANCELLED")
            let (wSAEINVALIDPROCTABLE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEINVALIDPROCTABLE")
            let (wSAEINVALIDPROVIDER : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEINVALIDPROVIDER")
            let (wSAEPROVIDERFAILEDINIT : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEPROVIDERFAILEDINIT")
            let (wSASYSCALLFAILURE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSASYSCALLFAILURE")
            let (wSASERVICE_NOT_FOUND : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSASERVICE_NOT_FOUND")
            let (wSATYPE_NOT_FOUND : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSATYPE_NOT_FOUND")
            let (wSA_E_NO_MORE : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSA_E_NO_MORE")
            let (wSA_E_CANCELLED : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSA_E_CANCELLED")
            let (wSAEREFUSED : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEREFUSED")
          end
        module Priority =
          struct
            let (pRIORITY_LOW : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "priority")
                   "PRIORITY_LOW")
            let (pRIORITY_BELOW_NORMAL : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "priority")
                   "PRIORITY_BELOW_NORMAL")
            let (pRIORITY_NORMAL : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "priority")
                   "PRIORITY_NORMAL")
            let (pRIORITY_ABOVE_NORMAL : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "priority")
                   "PRIORITY_ABOVE_NORMAL")
            let (pRIORITY_HIGH : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "priority")
                   "PRIORITY_HIGH")
            let (pRIORITY_HIGHEST : float) =
              Ojs.float_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "priority")
                   "PRIORITY_HIGHEST")
          end
      end
    let (arch : unit -> string) =
      fun () -> Ojs.string_of_js (Ojs.call Import.os "arch" [||])
    let (version : unit -> string) =
      fun () -> Ojs.string_of_js (Ojs.call Import.os "version" [||])
    let (platform : unit -> Node_process.Process.Platform.t) =
      fun () ->
        Node_process.Process.Platform.t_of_js
          (Ojs.call Import.os "platform" [||])
    let (tmpdir : unit -> string) =
      fun () -> Ojs.string_of_js (Ojs.call Import.os "tmpdir" [||])
    let (eOL : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.os "EOL")
    let (endianness : unit -> [ `BE  | `LE ]) =
      fun () ->
        let x127 = Ojs.call Import.os "endianness" [||] in
        match Ojs.string_of_js x127 with
        | "BE" -> `BE
        | "LE" -> `LE
        | _ -> assert false
    let (getPriority : ?pid:float -> unit -> float) =
      fun ?pid:(x128 : float option) ->
        fun () ->
          Ojs.float_of_js
            (let x131 = Import.os in
             Ojs.call (Ojs.get_prop_ascii x131 "getPriority") "apply"
               [|x131;((let x129 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x128 with
                         | Some x130 ->
                             ignore
                               (Ojs.call x129 "push"
                                  [|(Ojs.float_to_js x130)|])
                         | None -> ());
                        x129))|])
    let (setPriority : priority:float -> unit) =
      fun ~priority:(x132 : float) ->
        ignore (Ojs.call Import.os "setPriority" [|(Ojs.float_to_js x132)|])
    let (setPriority : pid:float -> priority:float -> unit) =
      fun ~pid:(x133 : float) ->
        fun ~priority:(x134 : float) ->
          ignore
            (Ojs.call Import.os "setPriority"
               [|(Ojs.float_to_js x133);(Ojs.float_to_js x134)|])
  end
