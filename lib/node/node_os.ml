[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_encoding : t -> BufferEncoding.t) =
      fun (x3 : t) ->
        BufferEncoding.t_of_js (Ojs.get_prop_ascii (t_to_js x3) "encoding")
    let (set_encoding : t -> BufferEncoding.t -> unit) =
      fun (x4 : t) ->
        fun (x5 : BufferEncoding.t) ->
          Ojs.set_prop_ascii (t_to_js x4) "encoding"
            (BufferEncoding.t_to_js x5)
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7 : Ojs.t) -> x7
    and t_to_js : t -> Ojs.t = fun (x6 : Ojs.t) -> x6
    let (get_encoding : t -> [ `buffer ]) =
      fun (x8 : t) ->
        let x9 = Ojs.get_prop_ascii (t_to_js x8) "encoding" in
        match Ojs.string_of_js x9 with
        | "buffer" -> `buffer
        | _ -> assert false
    let (set_encoding : t -> [ `buffer ] -> unit) =
      fun (x10 : t) ->
        fun (x11 : [ `buffer ]) ->
          Ojs.set_prop_ascii (t_to_js x10) "encoding"
            (match x11 with | `buffer -> Ojs.string_to_js "buffer")
  end
module AnonymousInterface2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x13 : Ojs.t) -> x13
    and t_to_js : t -> Ojs.t = fun (x12 : Ojs.t) -> x12
    let (get_user : t -> int) =
      fun (x14 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x14) "user")
    let (set_user : t -> int -> unit) =
      fun (x15 : t) ->
        fun (x16 : int) ->
          Ojs.set_prop_ascii (t_to_js x15) "user" (Ojs.int_to_js x16)
    let (get_nice : t -> int) =
      fun (x17 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x17) "nice")
    let (set_nice : t -> int -> unit) =
      fun (x18 : t) ->
        fun (x19 : int) ->
          Ojs.set_prop_ascii (t_to_js x18) "nice" (Ojs.int_to_js x19)
    let (get_sys : t -> int) =
      fun (x20 : t) -> Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x20) "sys")
    let (set_sys : t -> int -> unit) =
      fun (x21 : t) ->
        fun (x22 : int) ->
          Ojs.set_prop_ascii (t_to_js x21) "sys" (Ojs.int_to_js x22)
    let (get_idle : t -> int) =
      fun (x23 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x23) "idle")
    let (set_idle : t -> int -> unit) =
      fun (x24 : t) ->
        fun (x25 : int) ->
          Ojs.set_prop_ascii (t_to_js x24) "idle" (Ojs.int_to_js x25)
    let (get_irq : t -> int) =
      fun (x26 : t) -> Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x26) "irq")
    let (set_irq : t -> int -> unit) =
      fun (x27 : t) ->
        fun (x28 : int) ->
          Ojs.set_prop_ascii (t_to_js x27) "irq" (Ojs.int_to_js x28)
  end
module Os =
  struct
    module CpuInfo =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x30 : Ojs.t) -> x30
        and t_to_js : t -> Ojs.t = fun (x29 : Ojs.t) -> x29
        let (get_model : t -> string) =
          fun (x31 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x31) "model")
        let (set_model : t -> string -> unit) =
          fun (x32 : t) ->
            fun (x33 : string) ->
              Ojs.set_prop_ascii (t_to_js x32) "model" (Ojs.string_to_js x33)
        let (get_speed : t -> int) =
          fun (x34 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x34) "speed")
        let (set_speed : t -> int -> unit) =
          fun (x35 : t) ->
            fun (x36 : int) ->
              Ojs.set_prop_ascii (t_to_js x35) "speed" (Ojs.int_to_js x36)
        let (get_times : t -> AnonymousInterface2.t) =
          fun (x37 : t) ->
            AnonymousInterface2.t_of_js
              (Ojs.get_prop_ascii (t_to_js x37) "times")
        let (set_times : t -> AnonymousInterface2.t -> unit) =
          fun (x38 : t) ->
            fun (x39 : AnonymousInterface2.t) ->
              Ojs.set_prop_ascii (t_to_js x38) "times"
                (AnonymousInterface2.t_to_js x39)
      end
    module NetworkInterfaceBase =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x41 : Ojs.t) -> x41
        and t_to_js : t -> Ojs.t = fun (x40 : Ojs.t) -> x40
        let (get_address : t -> string) =
          fun (x42 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x42) "address")
        let (set_address : t -> string -> unit) =
          fun (x43 : t) ->
            fun (x44 : string) ->
              Ojs.set_prop_ascii (t_to_js x43) "address"
                (Ojs.string_to_js x44)
        let (get_netmask : t -> string) =
          fun (x45 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x45) "netmask")
        let (set_netmask : t -> string -> unit) =
          fun (x46 : t) ->
            fun (x47 : string) ->
              Ojs.set_prop_ascii (t_to_js x46) "netmask"
                (Ojs.string_to_js x47)
        let (get_mac : t -> string) =
          fun (x48 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x48) "mac")
        let (set_mac : t -> string -> unit) =
          fun (x49 : t) ->
            fun (x50 : string) ->
              Ojs.set_prop_ascii (t_to_js x49) "mac" (Ojs.string_to_js x50)
        let (get_internal : t -> bool) =
          fun (x51 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x51) "internal")
        let (set_internal : t -> bool -> unit) =
          fun (x52 : t) ->
            fun (x53 : bool) ->
              Ojs.set_prop_ascii (t_to_js x52) "internal"
                (Ojs.bool_to_js x53)
        let (get_cidr : t -> string or_null) =
          fun (x54 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x54) "cidr")
        let (set_cidr : t -> string or_null -> unit) =
          fun (x56 : t) ->
            fun (x57 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x56) "cidr"
                (or_null_to_js Ojs.string_to_js x57)
      end
    module NetworkInterfaceInfoIPv4 =
      struct
        include struct include NetworkInterfaceBase end
        let (get_family : t -> [ `IPv4 ]) =
          fun (x59 : t) ->
            let x60 = Ojs.get_prop_ascii (t_to_js x59) "family" in
            match Ojs.string_of_js x60 with
            | "IPv4" -> `IPv4
            | _ -> assert false
        let (set_family : t -> [ `IPv4 ] -> unit) =
          fun (x61 : t) ->
            fun (x62 : [ `IPv4 ]) ->
              Ojs.set_prop_ascii (t_to_js x61) "family"
                (match x62 with | `IPv4 -> Ojs.string_to_js "IPv4")
      end
    module NetworkInterfaceInfoIPv6 =
      struct
        include struct include NetworkInterfaceBase end
        let (get_family : t -> [ `IPv6 ]) =
          fun (x63 : t) ->
            let x64 = Ojs.get_prop_ascii (t_to_js x63) "family" in
            match Ojs.string_of_js x64 with
            | "IPv6" -> `IPv6
            | _ -> assert false
        let (set_family : t -> [ `IPv6 ] -> unit) =
          fun (x65 : t) ->
            fun (x66 : [ `IPv6 ]) ->
              Ojs.set_prop_ascii (t_to_js x65) "family"
                (match x66 with | `IPv6 -> Ojs.string_to_js "IPv6")
        let (get_scopeid : t -> int) =
          fun (x67 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x67) "scopeid")
        let (set_scopeid : t -> int -> unit) =
          fun (x68 : t) ->
            fun (x69 : int) ->
              Ojs.set_prop_ascii (t_to_js x68) "scopeid" (Ojs.int_to_js x69)
      end
    module UserInfo =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) -> fun (__T_of_js : Ojs.t -> __T) -> fun (x71 : Ojs.t) -> x71
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x70 : Ojs.t) -> x70
        let (get_username : 'T t -> 'T) =
          fun (x72 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x72) "username")
        let (set_username : 'T t -> 'T -> unit) =
          fun (x74 : 'T t) ->
            fun (x75 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x74) "username"
                (Obj.magic x75)
        let (get_uid : 'T t -> int) =
          fun (x77 : 'T t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x77) "uid")
        let (set_uid : 'T t -> int -> unit) =
          fun (x79 : 'T t) ->
            fun (x80 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x79) "uid"
                (Ojs.int_to_js x80)
        let (get_gid : 'T t -> int) =
          fun (x82 : 'T t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x82) "gid")
        let (set_gid : 'T t -> int -> unit) =
          fun (x84 : 'T t) ->
            fun (x85 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x84) "gid"
                (Ojs.int_to_js x85)
        let (get_shell : 'T t -> 'T) =
          fun (x87 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x87) "shell")
        let (set_shell : 'T t -> 'T -> unit) =
          fun (x89 : 'T t) ->
            fun (x90 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x89) "shell"
                (Obj.magic x90)
        let (get_homedir : 'T t -> 'T) =
          fun (x92 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x92) "homedir")
        let (set_homedir : 'T t -> 'T -> unit) =
          fun (x94 : 'T t) ->
            fun (x95 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x94) "homedir"
                (Obj.magic x95)
      end
    module NetworkInterfaceInfo =
      struct
        type t =
          [ `U_s1_IPv4 of NetworkInterfaceInfoIPv4.t 
          | `U_s2_IPv6 of NetworkInterfaceInfoIPv6.t ]
        let rec t_of_js : Ojs.t -> t =
          fun (x100 : Ojs.t) ->
            let x101 = x100 in
            match Ojs.string_of_js (Ojs.get_prop_ascii x101 "family") with
            | "IPv4" -> `U_s1_IPv4 (NetworkInterfaceInfoIPv4.t_of_js x101)
            | "IPv6" -> `U_s2_IPv6 (NetworkInterfaceInfoIPv6.t_of_js x101)
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x97 :
              [ `U_s1_IPv4 of NetworkInterfaceInfoIPv4.t 
              | `U_s2_IPv6 of NetworkInterfaceInfoIPv6.t ])
            ->
            match x97 with
            | `U_s1_IPv4 x98 -> NetworkInterfaceInfoIPv4.t_to_js x98
            | `U_s2_IPv6 x99 -> NetworkInterfaceInfoIPv6.t_to_js x99
      end
    let (hostname : unit -> string) =
      fun () -> Ojs.string_of_js (Ojs.call Import.os "hostname" [||])
    let (loadavg : unit -> int list) =
      fun () ->
        Ojs.list_of_js Ojs.int_of_js (Ojs.call Import.os "loadavg" [||])
    let (uptime : unit -> int) =
      fun () -> Ojs.int_of_js (Ojs.call Import.os "uptime" [||])
    let (freemem : unit -> int) =
      fun () -> Ojs.int_of_js (Ojs.call Import.os "freemem" [||])
    let (totalmem : unit -> int) =
      fun () -> Ojs.int_of_js (Ojs.call Import.os "totalmem" [||])
    let (cpus : unit -> CpuInfo.t list) =
      fun () ->
        Ojs.list_of_js CpuInfo.t_of_js (Ojs.call Import.os "cpus" [||])
    let (type_ : unit -> string) =
      fun () -> Ojs.string_of_js (Ojs.call Import.os "type" [||])
    let (release : unit -> string) =
      fun () -> Ojs.string_of_js (Ojs.call Import.os "release" [||])
    let (network_interfaces : unit -> NetworkInterfaceInfo.t list Dict.t) =
      fun () ->
        Dict.t_of_js
          (fun (x104 : Ojs.t) ->
             Ojs.list_of_js NetworkInterfaceInfo.t_of_js x104)
          (Ojs.call Import.os "networkInterfaces" [||])
    let (homedir : unit -> string) =
      fun () -> Ojs.string_of_js (Ojs.call Import.os "homedir" [||])
    let (user_info : options:AnonymousInterface1.t -> Buffer.t UserInfo.t) =
      fun ~options:(x106 : AnonymousInterface1.t) ->
        UserInfo.t_of_js Buffer.t_of_js
          (Ojs.call Import.os "userInfo"
             [|(AnonymousInterface1.t_to_js x106)|])
    let (user_info :
      ?options:AnonymousInterface0.t -> unit -> string UserInfo.t) =
      fun ?options:(x108 : AnonymousInterface0.t option) ->
        fun () ->
          UserInfo.t_of_js Ojs.string_of_js
            (let x111 = Import.os in
             Ojs.call (Ojs.get_prop_ascii x111 "userInfo") "apply"
               [|x111;((let x109 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x108 with
                         | Some x110 ->
                             ignore
                               (Ojs.call x109 "push"
                                  [|(AnonymousInterface0.t_to_js x110)|])
                         | None -> ());
                        x109))|])
    module SignalConstants =
      struct
        type t = any
        let rec t_of_js : Ojs.t -> t = fun (x114 : Ojs.t) -> any_of_js x114
        and t_to_js : t -> Ojs.t = fun (x113 : any) -> any_to_js x113
      end
    module Constants =
      struct
        let (uv_udp_reuseaddr : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.os "constants")
               "UV_UDP_REUSEADDR")
        let (signals : SignalConstants.t) =
          SignalConstants.t_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.os "constants")
               "signals")
        module Errno =
          struct
            let (e2BIG : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "E2BIG")
            let (eacces : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EACCES")
            let (eaddrinuse : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EADDRINUSE")
            let (eaddrnotavail : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EADDRNOTAVAIL")
            let (eafnosupport : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EAFNOSUPPORT")
            let (eagain : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EAGAIN")
            let (ealready : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EALREADY")
            let (ebadf : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EBADF")
            let (ebadmsg : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EBADMSG")
            let (ebusy : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EBUSY")
            let (ecanceled : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ECANCELED")
            let (echild : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ECHILD")
            let (econnaborted : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ECONNABORTED")
            let (econnrefused : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ECONNREFUSED")
            let (econnreset : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ECONNRESET")
            let (edeadlk : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EDEADLK")
            let (edestaddrreq : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EDESTADDRREQ")
            let (edom : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EDOM")
            let (edquot : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EDQUOT")
            let (eexist : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EEXIST")
            let (efault : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EFAULT")
            let (efbig : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EFBIG")
            let (ehostunreach : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EHOSTUNREACH")
            let (eidrm : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EIDRM")
            let (eilseq : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EILSEQ")
            let (einprogress : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EINPROGRESS")
            let (eintr : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EINTR")
            let (einval : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EINVAL")
            let (eio : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EIO")
            let (eisconn : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EISCONN")
            let (eisdir : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EISDIR")
            let (eloop : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ELOOP")
            let (emfile : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EMFILE")
            let (emlink : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EMLINK")
            let (emsgsize : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EMSGSIZE")
            let (emultihop : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EMULTIHOP")
            let (enametoolong : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENAMETOOLONG")
            let (enetdown : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENETDOWN")
            let (enetreset : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENETRESET")
            let (enetunreach : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENETUNREACH")
            let (enfile : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENFILE")
            let (enobufs : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOBUFS")
            let (enodata : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENODATA")
            let (enodev : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENODEV")
            let (enoent : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOENT")
            let (enoexec : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOEXEC")
            let (enolck : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOLCK")
            let (enolink : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOLINK")
            let (enomem : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOMEM")
            let (enomsg : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOMSG")
            let (enoprotoopt : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOPROTOOPT")
            let (enospc : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOSPC")
            let (enosr : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOSR")
            let (enostr : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOSTR")
            let (enosys : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOSYS")
            let (enotconn : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOTCONN")
            let (enotdir : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOTDIR")
            let (enotempty : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOTEMPTY")
            let (enotsock : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOTSOCK")
            let (enotsup : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOTSUP")
            let (enotty : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENOTTY")
            let (enxio : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ENXIO")
            let (eopnotsupp : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EOPNOTSUPP")
            let (eoverflow : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EOVERFLOW")
            let (eperm : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EPERM")
            let (epipe : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EPIPE")
            let (eproto : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EPROTO")
            let (eprotonosupport : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EPROTONOSUPPORT")
            let (eprototype : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EPROTOTYPE")
            let (erange : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ERANGE")
            let (erofs : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EROFS")
            let (espipe : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ESPIPE")
            let (esrch : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ESRCH")
            let (estale : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ESTALE")
            let (etime : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ETIME")
            let (etimedout : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ETIMEDOUT")
            let (etxtbsy : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "ETXTBSY")
            let (ewouldblock : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EWOULDBLOCK")
            let (exdev : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "EXDEV")
            let (wsaeintr : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEINTR")
            let (wsaebadf : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEBADF")
            let (wsaeacces : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEACCES")
            let (wsaefault : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEFAULT")
            let (wsaeinval : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEINVAL")
            let (wsaemfile : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEMFILE")
            let (wsaewouldblock : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEWOULDBLOCK")
            let (wsaeinprogress : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEINPROGRESS")
            let (wsaealready : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEALREADY")
            let (wsaenotsock : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENOTSOCK")
            let (wsaedestaddrreq : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEDESTADDRREQ")
            let (wsaemsgsize : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEMSGSIZE")
            let (wsaeprototype : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEPROTOTYPE")
            let (wsaenoprotoopt : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENOPROTOOPT")
            let (wsaeprotonosupport : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEPROTONOSUPPORT")
            let (wsaesocktnosupport : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAESOCKTNOSUPPORT")
            let (wsaeopnotsupp : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEOPNOTSUPP")
            let (wsaepfnosupport : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEPFNOSUPPORT")
            let (wsaeafnosupport : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEAFNOSUPPORT")
            let (wsaeaddrinuse : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEADDRINUSE")
            let (wsaeaddrnotavail : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEADDRNOTAVAIL")
            let (wsaenetdown : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENETDOWN")
            let (wsaenetunreach : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENETUNREACH")
            let (wsaenetreset : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENETRESET")
            let (wsaeconnaborted : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAECONNABORTED")
            let (wsaeconnreset : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAECONNRESET")
            let (wsaenobufs : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENOBUFS")
            let (wsaeisconn : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEISCONN")
            let (wsaenotconn : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENOTCONN")
            let (wsaeshutdown : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAESHUTDOWN")
            let (wsaetoomanyrefs : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAETOOMANYREFS")
            let (wsaetimedout : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAETIMEDOUT")
            let (wsaeconnrefused : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAECONNREFUSED")
            let (wsaeloop : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAELOOP")
            let (wsaenametoolong : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENAMETOOLONG")
            let (wsaehostdown : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEHOSTDOWN")
            let (wsaehostunreach : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEHOSTUNREACH")
            let (wsaenotempty : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENOTEMPTY")
            let (wsaeproclim : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEPROCLIM")
            let (wsaeusers : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEUSERS")
            let (wsaedquot : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEDQUOT")
            let (wsaestale : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAESTALE")
            let (wsaeremote : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEREMOTE")
            let (wsasysnotready : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSASYSNOTREADY")
            let (wsavernotsupported : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAVERNOTSUPPORTED")
            let (wsanotinitialised : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSANOTINITIALISED")
            let (wsaediscon : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEDISCON")
            let (wsaenomore : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAENOMORE")
            let (wsaecancelled : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAECANCELLED")
            let (wsaeinvalidproctable : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEINVALIDPROCTABLE")
            let (wsaeinvalidprovider : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEINVALIDPROVIDER")
            let (wsaeproviderfailedinit : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEPROVIDERFAILEDINIT")
            let (wsasyscallfailure : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSASYSCALLFAILURE")
            let (wsaservice_not_found : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSASERVICE_NOT_FOUND")
            let (wsatype_not_found : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSATYPE_NOT_FOUND")
            let (wsa_e_no_more : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSA_E_NO_MORE")
            let (wsa_e_cancelled : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSA_E_CANCELLED")
            let (wsaerefused : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "errno")
                   "WSAEREFUSED")
          end
        module Priority =
          struct
            let (priority_low : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "priority")
                   "PRIORITY_LOW")
            let (priority_below_normal : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "priority")
                   "PRIORITY_BELOW_NORMAL")
            let (priority_normal : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "priority")
                   "PRIORITY_NORMAL")
            let (priority_above_normal : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "priority")
                   "PRIORITY_ABOVE_NORMAL")
            let (priority_high : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "priority")
                   "PRIORITY_HIGH")
            let (priority_highest : int) =
              Ojs.int_of_js
                (Ojs.get_prop_ascii
                   (Ojs.get_prop_ascii
                      (Ojs.get_prop_ascii Import.os "constants") "priority")
                   "PRIORITY_HIGHEST")
          end
      end
    let (arch : unit -> string) =
      fun () -> Ojs.string_of_js (Ojs.call Import.os "arch" [||])
    let (version : unit -> string) =
      fun () -> Ojs.string_of_js (Ojs.call Import.os "version" [||])
    let (platform : unit -> Node_process.Process.Platform.t) =
      fun () ->
        Node_process.Process.Platform.t_of_js
          (Ojs.call Import.os "platform" [||])
    let (tmpdir : unit -> string) =
      fun () -> Ojs.string_of_js (Ojs.call Import.os "tmpdir" [||])
    let (eol : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.os "EOL")
    let (endianness : unit -> [ `BE  | `LE ]) =
      fun () ->
        let x115 = Ojs.call Import.os "endianness" [||] in
        match Ojs.string_of_js x115 with
        | "BE" -> `BE
        | "LE" -> `LE
        | _ -> assert false
    let (get_priority : ?pid:int -> unit -> int) =
      fun ?pid:(x116 : int option) ->
        fun () ->
          Ojs.int_of_js
            (let x119 = Import.os in
             Ojs.call (Ojs.get_prop_ascii x119 "getPriority") "apply"
               [|x119;((let x117 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x116 with
                         | Some x118 ->
                             ignore
                               (Ojs.call x117 "push" [|(Ojs.int_to_js x118)|])
                         | None -> ());
                        x117))|])
    let (set_priority : priority:int -> unit) =
      fun ~priority:(x120 : int) ->
        ignore (Ojs.call Import.os "setPriority" [|(Ojs.int_to_js x120)|])
    let (set_priority : pid:int -> priority:int -> unit) =
      fun ~pid:(x121 : int) ->
        fun ~priority:(x122 : int) ->
          ignore
            (Ojs.call Import.os "setPriority"
               [|(Ojs.int_to_js x121);(Ojs.int_to_js x122)|])
  end
