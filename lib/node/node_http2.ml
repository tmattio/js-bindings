[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4 : Ojs.t) -> x4
    and t_to_js : t -> Ojs.t = fun (x3 : Ojs.t) -> x3
    let (get_origin : t -> string) =
      fun (x5 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5) "origin")
    let (set_origin : t -> string -> unit) =
      fun (x6 : t) ->
        fun (x7 : string) ->
          Ojs.set_prop_ascii (t_to_js x6) "origin" (Ojs.string_to_js x7)
  end
module Http2 =
  struct
    open Node_fs
    open Node_fs_promises
    open Node_net
    open Node_stream
    open Node_tls
    open Node_url
    module IncomingHttpStatusHeader =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x9 : Ojs.t) -> x9
        and t_to_js : t -> Ojs.t = fun (x8 : Ojs.t) -> x8
        let (get__status : t -> int) =
          fun (x10 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x10) ":status")
        let (set__status : t -> int -> unit) =
          fun (x11 : t) ->
            fun (x12 : int) ->
              Ojs.set_prop_ascii (t_to_js x11) ":status" (Ojs.int_to_js x12)
      end
    module IncomingHttpHeaders =
      struct
        include struct include Node_http.Http.IncomingHttpHeaders end
        let (get__path : t -> string) =
          fun (x13 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x13) ":path")
        let (set__path : t -> string -> unit) =
          fun (x14 : t) ->
            fun (x15 : string) ->
              Ojs.set_prop_ascii (t_to_js x14) ":path" (Ojs.string_to_js x15)
        let (get__method : t -> string) =
          fun (x16 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x16) ":method")
        let (set__method : t -> string -> unit) =
          fun (x17 : t) ->
            fun (x18 : string) ->
              Ojs.set_prop_ascii (t_to_js x17) ":method"
                (Ojs.string_to_js x18)
        let (get__authority : t -> string) =
          fun (x19 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x19) ":authority")
        let (set__authority : t -> string -> unit) =
          fun (x20 : t) ->
            fun (x21 : string) ->
              Ojs.set_prop_ascii (t_to_js x20) ":authority"
                (Ojs.string_to_js x21)
        let (get__scheme : t -> string) =
          fun (x22 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x22) ":scheme")
        let (set__scheme : t -> string -> unit) =
          fun (x23 : t) ->
            fun (x24 : string) ->
              Ojs.set_prop_ascii (t_to_js x23) ":scheme"
                (Ojs.string_to_js x24)
      end
    module StreamPriorityOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x26 : Ojs.t) -> x26
        and t_to_js : t -> Ojs.t = fun (x25 : Ojs.t) -> x25
        let (get_exclusive : t -> bool) =
          fun (x27 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x27) "exclusive")
        let (set_exclusive : t -> bool -> unit) =
          fun (x28 : t) ->
            fun (x29 : bool) ->
              Ojs.set_prop_ascii (t_to_js x28) "exclusive"
                (Ojs.bool_to_js x29)
        let (get_parent : t -> int) =
          fun (x30 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x30) "parent")
        let (set_parent : t -> int -> unit) =
          fun (x31 : t) ->
            fun (x32 : int) ->
              Ojs.set_prop_ascii (t_to_js x31) "parent" (Ojs.int_to_js x32)
        let (get_weight : t -> int) =
          fun (x33 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x33) "weight")
        let (set_weight : t -> int -> unit) =
          fun (x34 : t) ->
            fun (x35 : int) ->
              Ojs.set_prop_ascii (t_to_js x34) "weight" (Ojs.int_to_js x35)
        let (get_silent : t -> bool) =
          fun (x36 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x36) "silent")
        let (set_silent : t -> bool -> unit) =
          fun (x37 : t) ->
            fun (x38 : bool) ->
              Ojs.set_prop_ascii (t_to_js x37) "silent" (Ojs.bool_to_js x38)
      end
    module StreamState =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x40 : Ojs.t) -> x40
        and t_to_js : t -> Ojs.t = fun (x39 : Ojs.t) -> x39
        let (get_local_window_size : t -> int) =
          fun (x41 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x41) "localWindowSize")
        let (set_local_window_size : t -> int -> unit) =
          fun (x42 : t) ->
            fun (x43 : int) ->
              Ojs.set_prop_ascii (t_to_js x42) "localWindowSize"
                (Ojs.int_to_js x43)
        let (get_state : t -> int) =
          fun (x44 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x44) "state")
        let (set_state : t -> int -> unit) =
          fun (x45 : t) ->
            fun (x46 : int) ->
              Ojs.set_prop_ascii (t_to_js x45) "state" (Ojs.int_to_js x46)
        let (get_local_close : t -> int) =
          fun (x47 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x47) "localClose")
        let (set_local_close : t -> int -> unit) =
          fun (x48 : t) ->
            fun (x49 : int) ->
              Ojs.set_prop_ascii (t_to_js x48) "localClose"
                (Ojs.int_to_js x49)
        let (get_remote_close : t -> int) =
          fun (x50 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x50) "remoteClose")
        let (set_remote_close : t -> int -> unit) =
          fun (x51 : t) ->
            fun (x52 : int) ->
              Ojs.set_prop_ascii (t_to_js x51) "remoteClose"
                (Ojs.int_to_js x52)
        let (get_sum_dependency_weight : t -> int) =
          fun (x53 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x53) "sumDependencyWeight")
        let (set_sum_dependency_weight : t -> int -> unit) =
          fun (x54 : t) ->
            fun (x55 : int) ->
              Ojs.set_prop_ascii (t_to_js x54) "sumDependencyWeight"
                (Ojs.int_to_js x55)
        let (get_weight : t -> int) =
          fun (x56 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x56) "weight")
        let (set_weight : t -> int -> unit) =
          fun (x57 : t) ->
            fun (x58 : int) ->
              Ojs.set_prop_ascii (t_to_js x57) "weight" (Ojs.int_to_js x58)
      end
    module ServerStreamResponseOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x60 : Ojs.t) -> x60
        and t_to_js : t -> Ojs.t = fun (x59 : Ojs.t) -> x59
        let (get_end_stream : t -> bool) =
          fun (x61 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x61) "endStream")
        let (set_end_stream : t -> bool -> unit) =
          fun (x62 : t) ->
            fun (x63 : bool) ->
              Ojs.set_prop_ascii (t_to_js x62) "endStream"
                (Ojs.bool_to_js x63)
        let (get_wait_for_trailers : t -> bool) =
          fun (x64 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x64) "waitForTrailers")
        let (set_wait_for_trailers : t -> bool -> unit) =
          fun (x65 : t) ->
            fun (x66 : bool) ->
              Ojs.set_prop_ascii (t_to_js x65) "waitForTrailers"
                (Ojs.bool_to_js x66)
      end
    module StatOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x68 : Ojs.t) -> x68
        and t_to_js : t -> Ojs.t = fun (x67 : Ojs.t) -> x67
        let (get_offset : t -> int) =
          fun (x69 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x69) "offset")
        let (set_offset : t -> int -> unit) =
          fun (x70 : t) ->
            fun (x71 : int) ->
              Ojs.set_prop_ascii (t_to_js x70) "offset" (Ojs.int_to_js x71)
        let (get_length : t -> int) =
          fun (x72 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x72) "length")
        let (set_length : t -> int -> unit) =
          fun (x73 : t) ->
            fun (x74 : int) ->
              Ojs.set_prop_ascii (t_to_js x73) "length" (Ojs.int_to_js x74)
      end
    module ServerStreamFileResponseOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x76 : Ojs.t) -> x76
        and t_to_js : t -> Ojs.t = fun (x75 : Ojs.t) -> x75
        let (stat_check :
          t ->
            stats:Fs.Stats.t ->
              headers:Node_http.Http.OutgoingHttpHeaders.t ->
                stat_options:StatOptions.t -> unit or_boolean)
          =
          fun (x80 : t) ->
            fun ~stats:(x77 : Fs.Stats.t) ->
              fun ~headers:(x78 : Node_http.Http.OutgoingHttpHeaders.t) ->
                fun ~stat_options:(x79 : StatOptions.t) ->
                  or_boolean_of_js Ojs.unit_of_js
                    (Ojs.call (t_to_js x80) "statCheck"
                       [|(Fs.Stats.t_to_js x77);(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                                   x78);(StatOptions.t_to_js
                                                           x79)|])
        let (get_wait_for_trailers : t -> bool) =
          fun (x82 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x82) "waitForTrailers")
        let (set_wait_for_trailers : t -> bool -> unit) =
          fun (x83 : t) ->
            fun (x84 : bool) ->
              Ojs.set_prop_ascii (t_to_js x83) "waitForTrailers"
                (Ojs.bool_to_js x84)
        let (get_offset : t -> int) =
          fun (x85 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x85) "offset")
        let (set_offset : t -> int -> unit) =
          fun (x86 : t) ->
            fun (x87 : int) ->
              Ojs.set_prop_ascii (t_to_js x86) "offset" (Ojs.int_to_js x87)
        let (get_length : t -> int) =
          fun (x88 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x88) "length")
        let (set_length : t -> int -> unit) =
          fun (x89 : t) ->
            fun (x90 : int) ->
              Ojs.set_prop_ascii (t_to_js x89) "length" (Ojs.int_to_js x90)
      end
    module ServerStreamFileResponseOptionsWithError =
      struct
        include struct include ServerStreamFileResponseOptions end
        let (on_error : t -> err:ErrnoException.t -> unit) =
          fun (x92 : t) ->
            fun ~err:(x91 : ErrnoException.t) ->
              ignore
                (Ojs.call (t_to_js x92) "onError"
                   [|(ErrnoException.t_to_js x91)|])
      end
    module Http2Stream =
      struct
        include struct include Stream.Duplex end
        let (get_aborted : t -> bool) =
          fun (x93 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x93) "aborted")
        let (get_buffer_size : t -> int) =
          fun (x94 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x94) "bufferSize")
        let (get_closed : t -> bool) =
          fun (x95 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x95) "closed")
        let (get_destroyed : t -> bool) =
          fun (x96 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x96) "destroyed")
        let (get_end_after_headers : t -> bool) =
          fun (x97 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x97) "endAfterHeaders")
        let (get_id : t -> int) =
          fun (x98 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x98) "id")
        let (get_pending : t -> bool) =
          fun (x99 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x99) "pending")
        let (get_rst_code : t -> int) =
          fun (x100 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x100) "rstCode")
        let (get_sent_headers : t -> Node_http.Http.OutgoingHttpHeaders.t) =
          fun (x101 : t) ->
            Node_http.Http.OutgoingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x101) "sentHeaders")
        let (get_sent_info_headers :
          t -> Node_http.Http.OutgoingHttpHeaders.t list) =
          fun (x102 : t) ->
            Ojs.list_of_js Node_http.Http.OutgoingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x102) "sentInfoHeaders")
        let (get_sent_trailers : t -> Node_http.Http.OutgoingHttpHeaders.t) =
          fun (x104 : t) ->
            Node_http.Http.OutgoingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x104) "sentTrailers")
        let (get_state : t -> StreamState.t) =
          fun (x105 : t) ->
            StreamState.t_of_js (Ojs.get_prop_ascii (t_to_js x105) "state")
        let (close :
          t -> ?code:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x111 : t) ->
            fun ?code:(x106 : int option) ->
              fun ?callback:(x107 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x112 = t_to_js x111 in
                     Ojs.call (Ojs.get_prop_ascii x112 "close") "apply"
                       [|x112;((let x108 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x106 with
                                 | Some x110 ->
                                     ignore
                                       (Ojs.call x108 "push"
                                          [|(Ojs.int_to_js x110)|])
                                 | None -> ());
                                (match x107 with
                                 | Some x109 ->
                                     ignore
                                       (Ojs.call x108 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x109 ()))|])
                                 | None -> ());
                                x108))|])
        let (priority : t -> options:StreamPriorityOptions.t -> unit) =
          fun (x114 : t) ->
            fun ~options:(x113 : StreamPriorityOptions.t) ->
              ignore
                (Ojs.call (t_to_js x114) "priority"
                   [|(StreamPriorityOptions.t_to_js x113)|])
        let (set_timeout :
          t -> msecs:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x119 : t) ->
            fun ~msecs:(x115 : int) ->
              fun ?callback:(x116 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x120 = t_to_js x119 in
                     Ojs.call (Ojs.get_prop_ascii x120 "setTimeout") "apply"
                       [|x120;((let x117 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x117 "push"
                                     [|(Ojs.int_to_js x115)|]);
                                (match x116 with
                                 | Some x118 ->
                                     ignore
                                       (Ojs.call x117 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x118 ()))|])
                                 | None -> ());
                                x117))|])
        let (send_trailers :
          t -> headers:Node_http.Http.OutgoingHttpHeaders.t -> unit) =
          fun (x122 : t) ->
            fun ~headers:(x121 : Node_http.Http.OutgoingHttpHeaders.t) ->
              ignore
                (Ojs.call (t_to_js x122) "sendTrailers"
                   [|(Node_http.Http.OutgoingHttpHeaders.t_to_js x121)|])
        let (add_listener :
          t -> event:[ `aborted ] -> listener:(unit -> unit) -> t) =
          fun (x125 : t) ->
            fun ~event:(x123 : [ `aborted ]) ->
              fun ~listener:(x124 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x125) "addListener"
                     [|((match x123 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 1 (fun _ -> x124 ()))|])
        let (add_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x128 : t) ->
            fun ~event:(x126 : [ `close ]) ->
              fun ~listener:(x127 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x128) "addListener"
                     [|((match x126 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x127 ()))|])
        let (add_listener'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x133 : t) ->
            fun ~event:(x129 : [ `data ]) ->
              fun ~listener:(x130 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x133) "addListener"
                     [|((match x129 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x131 : Ojs.t) ->
                            x130 ~chunk:(or_string_of_js Buffer.t_of_js x131)))|])
        let (add_listener''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x136 : t) ->
            fun ~event:(x134 : [ `drain ]) ->
              fun ~listener:(x135 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x136) "addListener"
                     [|((match x134 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x135 ()))|])
        let (add_listener'''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x139 : t) ->
            fun ~event:(x137 : [ `end_ ]) ->
              fun ~listener:(x138 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x139) "addListener"
                     [|((match x137 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x138 ()))|])
        let (add_listener''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x143 : t) ->
            fun ~event:(x140 : [ `error ]) ->
              fun ~listener:(x141 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x143) "addListener"
                     [|((match x140 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x142 : Ojs.t) ->
                            x141 ~err:(Error.t_of_js x142)))|])
        let (add_listener'''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x146 : t) ->
            fun ~event:(x144 : [ `finish ]) ->
              fun ~listener:(x145 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x146) "addListener"
                     [|((match x144 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x145 ()))|])
        let (add_listener''''''' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int -> error_code:int -> unit) -> t)
          =
          fun (x151 : t) ->
            fun ~event:(x147 : [ `frameError ]) ->
              fun ~listener:(x148 : frameType:int -> error_code:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x151) "addListener"
                     [|((match x147 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 2
                         (fun (x149 : Ojs.t) ->
                            fun (x150 : Ojs.t) ->
                              x148 ~frameType:(Ojs.int_of_js x149)
                                ~error_code:(Ojs.int_of_js x150)))|])
        let (add_listener'''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x155 : t) ->
            fun ~event:(x152 : [ `pipe ]) ->
              fun ~listener:(x153 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x155) "addListener"
                     [|((match x152 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x154 : Ojs.t) ->
                            x153 ~src:(Stream.Readable.t_of_js x154)))|])
        let (add_listener''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x159 : t) ->
            fun ~event:(x156 : [ `unpipe ]) ->
              fun ~listener:(x157 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x159) "addListener"
                     [|((match x156 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x158 :
                                                                    Ojs.t) ->
                                                                    x157
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x158)))|])
        let (add_listener'''''''''' :
          t -> event:[ `streamClosed ] -> listener:(code:int -> unit) -> t) =
          fun (x163 : t) ->
            fun ~event:(x160 : [ `streamClosed ]) ->
              fun ~listener:(x161 : code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x163) "addListener"
                     [|((match x160 with
                         | `streamClosed -> Ojs.string_to_js "streamClosed"));(
                       Ojs.fun_to_js 1
                         (fun (x162 : Ojs.t) ->
                            x161 ~code:(Ojs.int_of_js x162)))|])
        let (add_listener''''''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x166 : t) ->
            fun ~event:(x164 : [ `timeout ]) ->
              fun ~listener:(x165 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x166) "addListener"
                     [|((match x164 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x165 ()))|])
        let (add_listener'''''''''''' :
          t ->
            event:[ `trailers ] ->
              listener:(trailers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x171 : t) ->
            fun ~event:(x167 : [ `trailers ]) ->
              fun
                ~listener:(x168 :
                            trailers:IncomingHttpHeaders.t ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x171) "addListener"
                     [|((match x167 with
                         | `trailers -> Ojs.string_to_js "trailers"));(
                       Ojs.fun_to_js 2
                         (fun (x169 : Ojs.t) ->
                            fun (x170 : Ojs.t) ->
                              x168
                                ~trailers:(IncomingHttpHeaders.t_of_js x169)
                                ~flags:(Ojs.int_of_js x170)))|])
        let (add_listener''''''''''''' :
          t -> event:[ `wantTrailers ] -> listener:(unit -> unit) -> t) =
          fun (x174 : t) ->
            fun ~event:(x172 : [ `wantTrailers ]) ->
              fun ~listener:(x173 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x174) "addListener"
                     [|((match x172 with
                         | `wantTrailers -> Ojs.string_to_js "wantTrailers"));(
                       Ojs.fun_to_js 1 (fun _ -> x173 ()))|])
        let (add_listener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x180 : t) ->
            fun ~event:(x175 : symbol or_string) ->
              fun ~listener:(x177 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x180) "addListener"
                     [|(or_string_to_js symbol_to_js x175);(Ojs.fun_to_js_args
                                                              (fun (x178 : _)
                                                                 ->
                                                                 x177
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x178 0)))|])
        let (emit : t -> event:[ `aborted ] -> bool) =
          fun (x182 : t) ->
            fun ~event:(x181 : [ `aborted ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x182) "emit"
                   [|((match x181 with
                       | `aborted -> Ojs.string_to_js "aborted"))|])
        let (emit' : t -> event:[ `close ] -> bool) =
          fun (x184 : t) ->
            fun ~event:(x183 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x184) "emit"
                   [|((match x183 with | `close -> Ojs.string_to_js "close"))|])
        let (emit'' :
          t -> event:[ `data ] -> chunk:Buffer.t or_string -> bool) =
          fun (x188 : t) ->
            fun ~event:(x185 : [ `data ]) ->
              fun ~chunk:(x186 : Buffer.t or_string) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x188) "emit"
                     [|((match x185 with | `data -> Ojs.string_to_js "data"));(
                       or_string_to_js Buffer.t_to_js x186)|])
        let (emit''' : t -> event:[ `drain ] -> bool) =
          fun (x190 : t) ->
            fun ~event:(x189 : [ `drain ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x190) "emit"
                   [|((match x189 with | `drain -> Ojs.string_to_js "drain"))|])
        let (emit'''' : t -> event:[ `end_ ] -> bool) =
          fun (x192 : t) ->
            fun ~event:(x191 : [ `end_ ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x192) "emit"
                   [|((match x191 with | `end_ -> Ojs.string_to_js "end"))|])
        let (emit''''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x195 : t) ->
            fun ~event:(x193 : [ `error ]) ->
              fun ~err:(x194 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x195) "emit"
                     [|((match x193 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x194)|])
        let (emit'''''' : t -> event:[ `finish ] -> bool) =
          fun (x197 : t) ->
            fun ~event:(x196 : [ `finish ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x197) "emit"
                   [|((match x196 with | `finish -> Ojs.string_to_js "finish"))|])
        let (emit''''''' :
          t ->
            event:[ `frameError ] -> frame_type:int -> error_code:int -> bool)
          =
          fun (x201 : t) ->
            fun ~event:(x198 : [ `frameError ]) ->
              fun ~frame_type:(x199 : int) ->
                fun ~error_code:(x200 : int) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x201) "emit"
                       [|((match x198 with
                           | `frameError -> Ojs.string_to_js "frameError"));(
                         Ojs.int_to_js x199);(Ojs.int_to_js x200)|])
        let (emit'''''''' :
          t -> event:[ `pipe ] -> src:Stream.Readable.t -> bool) =
          fun (x204 : t) ->
            fun ~event:(x202 : [ `pipe ]) ->
              fun ~src:(x203 : Stream.Readable.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x204) "emit"
                     [|((match x202 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Stream.Readable.t_to_js x203)|])
        let (emit''''''''' :
          t -> event:[ `unpipe ] -> src:Stream.Readable.t -> bool) =
          fun (x207 : t) ->
            fun ~event:(x205 : [ `unpipe ]) ->
              fun ~src:(x206 : Stream.Readable.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x207) "emit"
                     [|((match x205 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Stream.Readable.t_to_js
                                                                    x206)|])
        let (emit'''''''''' :
          t -> event:[ `streamClosed ] -> code:int -> bool) =
          fun (x210 : t) ->
            fun ~event:(x208 : [ `streamClosed ]) ->
              fun ~code:(x209 : int) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x210) "emit"
                     [|((match x208 with
                         | `streamClosed -> Ojs.string_to_js "streamClosed"));(
                       Ojs.int_to_js x209)|])
        let (emit''''''''''' : t -> event:[ `timeout ] -> bool) =
          fun (x212 : t) ->
            fun ~event:(x211 : [ `timeout ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x212) "emit"
                   [|((match x211 with
                       | `timeout -> Ojs.string_to_js "timeout"))|])
        let (emit'''''''''''' :
          t ->
            event:[ `trailers ] ->
              trailers:IncomingHttpHeaders.t -> flags:int -> bool)
          =
          fun (x216 : t) ->
            fun ~event:(x213 : [ `trailers ]) ->
              fun ~trailers:(x214 : IncomingHttpHeaders.t) ->
                fun ~flags:(x215 : int) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x216) "emit"
                       [|((match x213 with
                           | `trailers -> Ojs.string_to_js "trailers"));(
                         IncomingHttpHeaders.t_to_js x214);(Ojs.int_to_js
                                                              x215)|])
        let (emit''''''''''''' : t -> event:[ `wantTrailers ] -> bool) =
          fun (x218 : t) ->
            fun ~event:(x217 : [ `wantTrailers ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x218) "emit"
                   [|((match x217 with
                       | `wantTrailers -> Ojs.string_to_js "wantTrailers"))|])
        let (emit'''''''''''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x224 : t) ->
            fun ~event:(x219 : symbol or_string) ->
              fun ~args:(x220 : any list) ->
                Ojs.bool_of_js
                  (let x225 = t_to_js x224 in
                   Ojs.call (Ojs.get_prop_ascii x225 "emit") "apply"
                     [|x225;((let x221 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x221 "push"
                                   [|(or_string_to_js symbol_to_js x219)|]);
                              List.iter
                                (fun (x222 : any) ->
                                   ignore
                                     (Ojs.call x221 "push"
                                        [|(any_to_js x222)|])) x220;
                              x221))|])
        module AbortedListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x227 : Ojs.t) -> fun () -> ignore (Ojs.apply x227 [||])
            and t_to_js : t -> Ojs.t =
              fun (x226 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x226 ())
          end
        module CloseListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x229 : Ojs.t) -> fun () -> ignore (Ojs.apply x229 [||])
            and t_to_js : t -> Ojs.t =
              fun (x228 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x228 ())
          end
        module DataListener =
          struct
            type t = chunk:Buffer.t or_string -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x233 : Ojs.t) ->
                fun ~chunk:(x234 : Buffer.t or_string) ->
                  ignore
                    (Ojs.apply x233 [|(or_string_to_js Buffer.t_to_js x234)|])
            and t_to_js : t -> Ojs.t =
              fun (x230 : chunk:Buffer.t or_string -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x231 : Ojs.t) ->
                     x230 ~chunk:(or_string_of_js Buffer.t_of_js x231))
          end
        module DrainListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x237 : Ojs.t) -> fun () -> ignore (Ojs.apply x237 [||])
            and t_to_js : t -> Ojs.t =
              fun (x236 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x236 ())
          end
        module EndListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x239 : Ojs.t) -> fun () -> ignore (Ojs.apply x239 [||])
            and t_to_js : t -> Ojs.t =
              fun (x238 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x238 ())
          end
        module ErrorListener =
          struct
            type t = err:Error.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x242 : Ojs.t) ->
                fun ~err:(x243 : Error.t) ->
                  ignore (Ojs.apply x242 [|(Error.t_to_js x243)|])
            and t_to_js : t -> Ojs.t =
              fun (x240 : err:Error.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x241 : Ojs.t) -> x240 ~err:(Error.t_of_js x241))
          end
        module FinishListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x245 : Ojs.t) -> fun () -> ignore (Ojs.apply x245 [||])
            and t_to_js : t -> Ojs.t =
              fun (x244 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x244 ())
          end
        module FrameerrorListener =
          struct
            type t = frameType:int -> error_code:int -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x249 : Ojs.t) ->
                fun ~frameType:(x250 : int) ->
                  fun ~error_code:(x251 : int) ->
                    ignore
                      (Ojs.apply x249
                         [|(Ojs.int_to_js x250);(Ojs.int_to_js x251)|])
            and t_to_js : t -> Ojs.t =
              fun (x246 : frameType:int -> error_code:int -> unit) ->
                Ojs.fun_to_js 2
                  (fun (x247 : Ojs.t) ->
                     fun (x248 : Ojs.t) ->
                       x246 ~frameType:(Ojs.int_of_js x247)
                         ~error_code:(Ojs.int_of_js x248))
          end
        module PipeListener =
          struct
            type t = src:Stream.Readable.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x254 : Ojs.t) ->
                fun ~src:(x255 : Stream.Readable.t) ->
                  ignore (Ojs.apply x254 [|(Stream.Readable.t_to_js x255)|])
            and t_to_js : t -> Ojs.t =
              fun (x252 : src:Stream.Readable.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x253 : Ojs.t) ->
                     x252 ~src:(Stream.Readable.t_of_js x253))
          end
        module UnpipeListener =
          struct
            type t = src:Stream.Readable.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x258 : Ojs.t) ->
                fun ~src:(x259 : Stream.Readable.t) ->
                  ignore (Ojs.apply x258 [|(Stream.Readable.t_to_js x259)|])
            and t_to_js : t -> Ojs.t =
              fun (x256 : src:Stream.Readable.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x257 : Ojs.t) ->
                     x256 ~src:(Stream.Readable.t_of_js x257))
          end
        module StreamclosedListener =
          struct
            type t = code:int -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x262 : Ojs.t) ->
                fun ~code:(x263 : int) ->
                  ignore (Ojs.apply x262 [|(Ojs.int_to_js x263)|])
            and t_to_js : t -> Ojs.t =
              fun (x260 : code:int -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x261 : Ojs.t) -> x260 ~code:(Ojs.int_of_js x261))
          end
        module TimeoutListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x265 : Ojs.t) -> fun () -> ignore (Ojs.apply x265 [||])
            and t_to_js : t -> Ojs.t =
              fun (x264 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x264 ())
          end
        module TrailersListener =
          struct
            type t = trailers:IncomingHttpHeaders.t -> flags:int -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x269 : Ojs.t) ->
                fun ~trailers:(x270 : IncomingHttpHeaders.t) ->
                  fun ~flags:(x271 : int) ->
                    ignore
                      (Ojs.apply x269
                         [|(IncomingHttpHeaders.t_to_js x270);(Ojs.int_to_js
                                                                 x271)|])
            and t_to_js : t -> Ojs.t =
              fun
                (x266 : trailers:IncomingHttpHeaders.t -> flags:int -> unit)
                ->
                Ojs.fun_to_js 2
                  (fun (x267 : Ojs.t) ->
                     fun (x268 : Ojs.t) ->
                       x266 ~trailers:(IncomingHttpHeaders.t_of_js x267)
                         ~flags:(Ojs.int_of_js x268))
          end
        module WanttrailersListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x273 : Ojs.t) -> fun () -> ignore (Ojs.apply x273 [||])
            and t_to_js : t -> Ojs.t =
              fun (x272 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x272 ())
          end
        type listener =
          [ `Aborted of AbortedListener.t  | `Close of CloseListener.t 
          | `Data of DataListener.t  | `Drain of DrainListener.t 
          | `End_ of EndListener.t  | `Error of ErrorListener.t 
          | `Finish of FinishListener.t 
          | `Frameerror of FrameerrorListener.t  | `Pipe of PipeListener.t 
          | `Unpipe of UnpipeListener.t 
          | `Streamclosed of StreamclosedListener.t 
          | `Timeout of TimeoutListener.t  | `Trailers of TrailersListener.t 
          | `Wanttrailers of WanttrailersListener.t ]
        let rec listener_to_js : listener -> Ojs.t =
          fun
            (x274 :
              [ `Aborted of AbortedListener.t  | `Close of CloseListener.t 
              | `Data of DataListener.t  | `Drain of DrainListener.t 
              | `End_ of EndListener.t  | `Error of ErrorListener.t 
              | `Finish of FinishListener.t 
              | `Frameerror of FrameerrorListener.t 
              | `Pipe of PipeListener.t  | `Unpipe of UnpipeListener.t 
              | `Streamclosed of StreamclosedListener.t 
              | `Timeout of TimeoutListener.t 
              | `Trailers of TrailersListener.t 
              | `Wanttrailers of WanttrailersListener.t ])
            ->
            match x274 with
            | `Aborted x275 -> AbortedListener.t_to_js x275
            | `Close x276 -> CloseListener.t_to_js x276
            | `Data x277 -> DataListener.t_to_js x277
            | `Drain x278 -> DrainListener.t_to_js x278
            | `End_ x279 -> EndListener.t_to_js x279
            | `Error x280 -> ErrorListener.t_to_js x280
            | `Finish x281 -> FinishListener.t_to_js x281
            | `Frameerror x282 -> FrameerrorListener.t_to_js x282
            | `Pipe x283 -> PipeListener.t_to_js x283
            | `Unpipe x284 -> UnpipeListener.t_to_js x284
            | `Streamclosed x285 -> StreamclosedListener.t_to_js x285
            | `Timeout x286 -> TimeoutListener.t_to_js x286
            | `Trailers x287 -> TrailersListener.t_to_js x287
            | `Wanttrailers x288 -> WanttrailersListener.t_to_js x288
        let (on : t -> string -> Ojs.t -> unit) =
          fun (x293 : t) ->
            fun (x291 : string) ->
              fun (x292 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x293) "on"
                     [|(Ojs.string_to_js x291);x292|])
        let (add_listener : t -> string -> Ojs.t -> unit) =
          fun (x296 : t) ->
            fun (x294 : string) ->
              fun (x295 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x296) "addListener"
                     [|(Ojs.string_to_js x294);x295|])
        let (once : t -> string -> Ojs.t -> unit) =
          fun (x299 : t) ->
            fun (x297 : string) ->
              fun (x298 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x299) "once"
                     [|(Ojs.string_to_js x297);x298|])
        let (prepend_listener : t -> string -> Ojs.t -> unit) =
          fun (x302 : t) ->
            fun (x300 : string) ->
              fun (x301 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x302) "prependListener"
                     [|(Ojs.string_to_js x300);x301|])
        let (prepend_once_listener : t -> string -> Ojs.t -> unit) =
          fun (x305 : t) ->
            fun (x303 : string) ->
              fun (x304 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x305) "prependOnceListener"
                     [|(Ojs.string_to_js x303);x304|])
        let with_listener_fn fn t =
          function
          | `Aborted f -> (fn t "aborted") @@ (AbortedListener.t_to_js f)
          | `Close f -> (fn t "close") @@ (CloseListener.t_to_js f)
          | `Data f -> (fn t "data") @@ (DataListener.t_to_js f)
          | `Drain f -> (fn t "drain") @@ (DrainListener.t_to_js f)
          | `End_ f -> (fn t "end_") @@ (EndListener.t_to_js f)
          | `Error f -> (fn t "error") @@ (ErrorListener.t_to_js f)
          | `Finish f -> (fn t "finish") @@ (FinishListener.t_to_js f)
          | `Frameerror f ->
              (fn t "frameError") @@ (FrameerrorListener.t_to_js f)
          | `Pipe f -> (fn t "pipe") @@ (PipeListener.t_to_js f)
          | `Unpipe f -> (fn t "unpipe") @@ (UnpipeListener.t_to_js f)
          | `Streamclosed f ->
              (fn t "streamClosed") @@ (StreamclosedListener.t_to_js f)
          | `Timeout f -> (fn t "timeout") @@ (TimeoutListener.t_to_js f)
          | `Trailers f -> (fn t "trailers") @@ (TrailersListener.t_to_js f)
          | `Wanttrailers f ->
              (fn t "wantTrailers") @@ (WanttrailersListener.t_to_js f)
        let on = with_listener_fn on
        let add_listener = with_listener_fn add_listener
        let once = with_listener_fn once
        let prepend_listener = with_listener_fn prepend_listener
        let prepend_once_listener = with_listener_fn prepend_once_listener
      end
    module ClientHttp2Stream =
      struct
        include struct include Http2Stream end
        let (add_listener :
          t ->
            event:[ `continue ] ->
              listener:(unit -> AnonymousInterface0.t) -> t)
          =
          fun (x322 : t) ->
            fun ~event:(x320 : [ `continue ]) ->
              fun ~listener:(x321 : unit -> AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x322) "addListener"
                     [|((match x320 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1
                         (fun _ -> AnonymousInterface0.t_to_js (x321 ())))|])
        let (add_listener' :
          t ->
            event:[ `headers ] ->
              listener:(headers:(IncomingHttpHeaders.t,
                          IncomingHttpStatusHeader.t) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x329 : t) ->
            fun ~event:(x323 : [ `headers ]) ->
              fun
                ~listener:(x324 :
                            headers:(IncomingHttpHeaders.t,
                              IncomingHttpStatusHeader.t) intersection2 ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x329) "addListener"
                     [|((match x323 with
                         | `headers -> Ojs.string_to_js "headers"));(
                       Ojs.fun_to_js 2
                         (fun (x325 : Ojs.t) ->
                            fun (x328 : Ojs.t) ->
                              x324
                                ~headers:(intersection2_of_js
                                            IncomingHttpHeaders.t_of_js
                                            IncomingHttpStatusHeader.t_of_js
                                            x325) ~flags:(Ojs.int_of_js x328)))|])
        let (add_listener'' :
          t ->
            event:[ `push ] ->
              listener:(headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x334 : t) ->
            fun ~event:(x330 : [ `push ]) ->
              fun
                ~listener:(x331 :
                            headers:IncomingHttpHeaders.t ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x334) "addListener"
                     [|((match x330 with | `push -> Ojs.string_to_js "push"));(
                       Ojs.fun_to_js 2
                         (fun (x332 : Ojs.t) ->
                            fun (x333 : Ojs.t) ->
                              x331
                                ~headers:(IncomingHttpHeaders.t_of_js x332)
                                ~flags:(Ojs.int_of_js x333)))|])
        let (add_listener''' :
          t ->
            event:[ `response ] ->
              listener:(headers:(IncomingHttpHeaders.t,
                          IncomingHttpStatusHeader.t) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x341 : t) ->
            fun ~event:(x335 : [ `response ]) ->
              fun
                ~listener:(x336 :
                            headers:(IncomingHttpHeaders.t,
                              IncomingHttpStatusHeader.t) intersection2 ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x341) "addListener"
                     [|((match x335 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 2
                         (fun (x337 : Ojs.t) ->
                            fun (x340 : Ojs.t) ->
                              x336
                                ~headers:(intersection2_of_js
                                            IncomingHttpHeaders.t_of_js
                                            IncomingHttpStatusHeader.t_of_js
                                            x337) ~flags:(Ojs.int_of_js x340)))|])
        let (add_listener'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x347 : t) ->
            fun ~event:(x342 : symbol or_string) ->
              fun ~listener:(x344 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x347) "addListener"
                     [|(or_string_to_js symbol_to_js x342);(Ojs.fun_to_js_args
                                                              (fun (x345 : _)
                                                                 ->
                                                                 x344
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x345 0)))|])
        let (emit : t -> event:[ `continue ] -> bool) =
          fun (x349 : t) ->
            fun ~event:(x348 : [ `continue ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x349) "emit"
                   [|((match x348 with
                       | `continue -> Ojs.string_to_js "continue"))|])
        let (emit' :
          t ->
            event:[ `headers ] ->
              headers:(IncomingHttpHeaders.t, IncomingHttpStatusHeader.t)
                intersection2 -> flags:int -> bool)
          =
          fun (x355 : t) ->
            fun ~event:(x350 : [ `headers ]) ->
              fun
                ~headers:(x351 :
                           (IncomingHttpHeaders.t,
                             IncomingHttpStatusHeader.t) intersection2)
                ->
                fun ~flags:(x354 : int) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x355) "emit"
                       [|((match x350 with
                           | `headers -> Ojs.string_to_js "headers"));(
                         intersection2_to_js IncomingHttpHeaders.t_to_js
                           IncomingHttpStatusHeader.t_to_js x351);(Ojs.int_to_js
                                                                    x354)|])
        let (emit'' :
          t ->
            event:[ `push ] ->
              headers:IncomingHttpHeaders.t -> flags:int -> bool)
          =
          fun (x359 : t) ->
            fun ~event:(x356 : [ `push ]) ->
              fun ~headers:(x357 : IncomingHttpHeaders.t) ->
                fun ~flags:(x358 : int) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x359) "emit"
                       [|((match x356 with | `push -> Ojs.string_to_js "push"));(
                         IncomingHttpHeaders.t_to_js x357);(Ojs.int_to_js
                                                              x358)|])
        let (emit''' :
          t ->
            event:[ `response ] ->
              headers:(IncomingHttpHeaders.t, IncomingHttpStatusHeader.t)
                intersection2 -> flags:int -> bool)
          =
          fun (x365 : t) ->
            fun ~event:(x360 : [ `response ]) ->
              fun
                ~headers:(x361 :
                           (IncomingHttpHeaders.t,
                             IncomingHttpStatusHeader.t) intersection2)
                ->
                fun ~flags:(x364 : int) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x365) "emit"
                       [|((match x360 with
                           | `response -> Ojs.string_to_js "response"));(
                         intersection2_to_js IncomingHttpHeaders.t_to_js
                           IncomingHttpStatusHeader.t_to_js x361);(Ojs.int_to_js
                                                                    x364)|])
        let (emit'''' : t -> event:symbol or_string -> args:any list -> bool)
          =
          fun (x371 : t) ->
            fun ~event:(x366 : symbol or_string) ->
              fun ~args:(x367 : any list) ->
                Ojs.bool_of_js
                  (let x372 = t_to_js x371 in
                   Ojs.call (Ojs.get_prop_ascii x372 "emit") "apply"
                     [|x372;((let x368 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x368 "push"
                                   [|(or_string_to_js symbol_to_js x366)|]);
                              List.iter
                                (fun (x369 : any) ->
                                   ignore
                                     (Ojs.call x368 "push"
                                        [|(any_to_js x369)|])) x367;
                              x368))|])
        module ContinueListener =
          struct
            type t = unit -> AnonymousInterface0.t
            let rec t_of_js : Ojs.t -> t =
              fun (x374 : Ojs.t) ->
                fun () -> AnonymousInterface0.t_of_js (Ojs.apply x374 [||])
            and t_to_js : t -> Ojs.t =
              fun (x373 : unit -> AnonymousInterface0.t) ->
                Ojs.fun_to_js 1
                  (fun _ -> AnonymousInterface0.t_to_js (x373 ()))
          end
        module HeadersListener =
          struct
            type t =
              headers:(IncomingHttpHeaders.t, IncomingHttpStatusHeader.t)
                intersection2 -> flags:int -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x380 : Ojs.t) ->
                fun
                  ~headers:(x381 :
                             (IncomingHttpHeaders.t,
                               IncomingHttpStatusHeader.t) intersection2)
                  ->
                  fun ~flags:(x384 : int) ->
                    ignore
                      (Ojs.apply x380
                         [|(intersection2_to_js IncomingHttpHeaders.t_to_js
                              IncomingHttpStatusHeader.t_to_js x381);(
                           Ojs.int_to_js x384)|])
            and t_to_js : t -> Ojs.t =
              fun
                (x375 :
                  headers:(IncomingHttpHeaders.t, IncomingHttpStatusHeader.t)
                    intersection2 -> flags:int -> unit)
                ->
                Ojs.fun_to_js 2
                  (fun (x376 : Ojs.t) ->
                     fun (x379 : Ojs.t) ->
                       x375
                         ~headers:(intersection2_of_js
                                     IncomingHttpHeaders.t_of_js
                                     IncomingHttpStatusHeader.t_of_js x376)
                         ~flags:(Ojs.int_of_js x379))
          end
        module PushListener =
          struct
            type t = headers:IncomingHttpHeaders.t -> flags:int -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x388 : Ojs.t) ->
                fun ~headers:(x389 : IncomingHttpHeaders.t) ->
                  fun ~flags:(x390 : int) ->
                    ignore
                      (Ojs.apply x388
                         [|(IncomingHttpHeaders.t_to_js x389);(Ojs.int_to_js
                                                                 x390)|])
            and t_to_js : t -> Ojs.t =
              fun (x385 : headers:IncomingHttpHeaders.t -> flags:int -> unit)
                ->
                Ojs.fun_to_js 2
                  (fun (x386 : Ojs.t) ->
                     fun (x387 : Ojs.t) ->
                       x385 ~headers:(IncomingHttpHeaders.t_of_js x386)
                         ~flags:(Ojs.int_of_js x387))
          end
        module ResponseListener =
          struct
            type t =
              headers:(IncomingHttpHeaders.t, IncomingHttpStatusHeader.t)
                intersection2 -> flags:int -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x396 : Ojs.t) ->
                fun
                  ~headers:(x397 :
                             (IncomingHttpHeaders.t,
                               IncomingHttpStatusHeader.t) intersection2)
                  ->
                  fun ~flags:(x400 : int) ->
                    ignore
                      (Ojs.apply x396
                         [|(intersection2_to_js IncomingHttpHeaders.t_to_js
                              IncomingHttpStatusHeader.t_to_js x397);(
                           Ojs.int_to_js x400)|])
            and t_to_js : t -> Ojs.t =
              fun
                (x391 :
                  headers:(IncomingHttpHeaders.t, IncomingHttpStatusHeader.t)
                    intersection2 -> flags:int -> unit)
                ->
                Ojs.fun_to_js 2
                  (fun (x392 : Ojs.t) ->
                     fun (x395 : Ojs.t) ->
                       x391
                         ~headers:(intersection2_of_js
                                     IncomingHttpHeaders.t_of_js
                                     IncomingHttpStatusHeader.t_of_js x392)
                         ~flags:(Ojs.int_of_js x395))
          end
        type listener =
          [ `Continue of ContinueListener.t  | `Headers of HeadersListener.t 
          | `Push of PushListener.t  | `Response of ResponseListener.t ]
        let rec listener_to_js : listener -> Ojs.t =
          fun
            (x401 :
              [ `Continue of ContinueListener.t 
              | `Headers of HeadersListener.t  | `Push of PushListener.t 
              | `Response of ResponseListener.t ])
            ->
            match x401 with
            | `Continue x402 -> ContinueListener.t_to_js x402
            | `Headers x403 -> HeadersListener.t_to_js x403
            | `Push x404 -> PushListener.t_to_js x404
            | `Response x405 -> ResponseListener.t_to_js x405
        let (on : t -> string -> Ojs.t -> unit) =
          fun (x410 : t) ->
            fun (x408 : string) ->
              fun (x409 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x410) "on"
                     [|(Ojs.string_to_js x408);x409|])
        let (add_listener : t -> string -> Ojs.t -> unit) =
          fun (x413 : t) ->
            fun (x411 : string) ->
              fun (x412 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x413) "addListener"
                     [|(Ojs.string_to_js x411);x412|])
        let (once : t -> string -> Ojs.t -> unit) =
          fun (x416 : t) ->
            fun (x414 : string) ->
              fun (x415 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x416) "once"
                     [|(Ojs.string_to_js x414);x415|])
        let (prepend_listener : t -> string -> Ojs.t -> unit) =
          fun (x419 : t) ->
            fun (x417 : string) ->
              fun (x418 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x419) "prependListener"
                     [|(Ojs.string_to_js x417);x418|])
        let (prepend_once_listener : t -> string -> Ojs.t -> unit) =
          fun (x422 : t) ->
            fun (x420 : string) ->
              fun (x421 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x422) "prependOnceListener"
                     [|(Ojs.string_to_js x420);x421|])
        let with_listener_fn fn t =
          function
          | `Continue f -> (fn t "continue") @@ (ContinueListener.t_to_js f)
          | `Headers f -> (fn t "headers") @@ (HeadersListener.t_to_js f)
          | `Push f -> (fn t "push") @@ (PushListener.t_to_js f)
          | `Response f -> (fn t "response") @@ (ResponseListener.t_to_js f)
        let on = with_listener_fn on
        let add_listener = with_listener_fn add_listener
        let once = with_listener_fn once
        let prepend_listener = with_listener_fn prepend_listener
        let prepend_once_listener = with_listener_fn prepend_once_listener
      end
    module ServerHttp2Stream =
      struct
        include struct include Http2Stream end
        let (get_headers_sent : t -> bool) =
          fun (x427 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x427) "headersSent")
        let (get_push_allowed : t -> bool) =
          fun (x428 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x428) "pushAllowed")
        let (additional_headers :
          t -> headers:Node_http.Http.OutgoingHttpHeaders.t -> unit) =
          fun (x430 : t) ->
            fun ~headers:(x429 : Node_http.Http.OutgoingHttpHeaders.t) ->
              ignore
                (Ojs.call (t_to_js x430) "additionalHeaders"
                   [|(Node_http.Http.OutgoingHttpHeaders.t_to_js x429)|])
        let (push_stream :
          t ->
            headers:Node_http.Http.OutgoingHttpHeaders.t ->
              ?callback:(err:Error.t or_null ->
                           push_stream:t ->
                             headers:Node_http.Http.OutgoingHttpHeaders.t ->
                               unit)
                -> unit -> unit)
          =
          fun (x439 : t) ->
            fun ~headers:(x431 : Node_http.Http.OutgoingHttpHeaders.t) ->
              fun
                ?callback:(x432 :
                            (err:Error.t or_null ->
                               push_stream:t ->
                                 headers:Node_http.Http.OutgoingHttpHeaders.t
                                   -> unit)
                              option)
                ->
                fun () ->
                  ignore
                    (let x440 = t_to_js x439 in
                     Ojs.call (Ojs.get_prop_ascii x440 "pushStream") "apply"
                       [|x440;((let x433 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x433 "push"
                                     [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                          x431)|]);
                                (match x432 with
                                 | Some x434 ->
                                     ignore
                                       (Ojs.call x433 "push"
                                          [|(Ojs.fun_to_js 3
                                               (fun (x435 : Ojs.t) ->
                                                  fun (x437 : Ojs.t) ->
                                                    fun (x438 : Ojs.t) ->
                                                      x434
                                                        ~err:(or_null_of_js
                                                                Error.t_of_js
                                                                x435)
                                                        ~push_stream:(
                                                        t_of_js x437)
                                                        ~headers:(Node_http.Http.OutgoingHttpHeaders.t_of_js
                                                                    x438)))|])
                                 | None -> ());
                                x433))|])
        let (push_stream' :
          t ->
            headers:Node_http.Http.OutgoingHttpHeaders.t ->
              ?options:StreamPriorityOptions.t ->
                ?callback:(err:Error.t or_null ->
                             push_stream:t ->
                               headers:Node_http.Http.OutgoingHttpHeaders.t
                                 -> unit)
                  -> unit -> unit)
          =
          fun (x451 : t) ->
            fun ~headers:(x441 : Node_http.Http.OutgoingHttpHeaders.t) ->
              fun ?options:(x442 : StreamPriorityOptions.t option) ->
                fun
                  ?callback:(x443 :
                              (err:Error.t or_null ->
                                 push_stream:t ->
                                   headers:Node_http.Http.OutgoingHttpHeaders.t
                                     -> unit)
                                option)
                  ->
                  fun () ->
                    ignore
                      (let x452 = t_to_js x451 in
                       Ojs.call (Ojs.get_prop_ascii x452 "pushStream")
                         "apply"
                         [|x452;((let x444 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x444 "push"
                                       [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                            x441)|]);
                                  (match x442 with
                                   | Some x450 ->
                                       ignore
                                         (Ojs.call x444 "push"
                                            [|(StreamPriorityOptions.t_to_js
                                                 x450)|])
                                   | None -> ());
                                  (match x443 with
                                   | Some x445 ->
                                       ignore
                                         (Ojs.call x444 "push"
                                            [|(Ojs.fun_to_js 3
                                                 (fun (x446 : Ojs.t) ->
                                                    fun (x448 : Ojs.t) ->
                                                      fun (x449 : Ojs.t) ->
                                                        x445
                                                          ~err:(or_null_of_js
                                                                  Error.t_of_js
                                                                  x446)
                                                          ~push_stream:(
                                                          t_of_js x448)
                                                          ~headers:(Node_http.Http.OutgoingHttpHeaders.t_of_js
                                                                    x449)))|])
                                   | None -> ());
                                  x444))|])
        let (respond :
          t ->
            ?headers:Node_http.Http.OutgoingHttpHeaders.t ->
              ?options:ServerStreamResponseOptions.t -> unit -> unit)
          =
          fun (x458 : t) ->
            fun ?headers:(x453 : Node_http.Http.OutgoingHttpHeaders.t option)
              ->
              fun ?options:(x454 : ServerStreamResponseOptions.t option) ->
                fun () ->
                  ignore
                    (let x459 = t_to_js x458 in
                     Ojs.call (Ojs.get_prop_ascii x459 "respond") "apply"
                       [|x459;((let x455 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x453 with
                                 | Some x457 ->
                                     ignore
                                       (Ojs.call x455 "push"
                                          [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                               x457)|])
                                 | None -> ());
                                (match x454 with
                                 | Some x456 ->
                                     ignore
                                       (Ojs.call x455 "push"
                                          [|(ServerStreamResponseOptions.t_to_js
                                               x456)|])
                                 | None -> ());
                                x455))|])
        let (respond_with_fd :
          t ->
            fd:Fs_promises.FileHandle.t or_number ->
              ?headers:Node_http.Http.OutgoingHttpHeaders.t ->
                ?options:ServerStreamFileResponseOptions.t -> unit -> unit)
          =
          fun (x467 : t) ->
            fun ~fd:(x460 : Fs_promises.FileHandle.t or_number) ->
              fun
                ?headers:(x461 : Node_http.Http.OutgoingHttpHeaders.t option)
                ->
                fun
                  ?options:(x462 : ServerStreamFileResponseOptions.t option)
                  ->
                  fun () ->
                    ignore
                      (let x468 = t_to_js x467 in
                       Ojs.call (Ojs.get_prop_ascii x468 "respondWithFD")
                         "apply"
                         [|x468;((let x463 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x463 "push"
                                       [|(or_number_to_js
                                            Fs_promises.FileHandle.t_to_js
                                            x460)|]);
                                  (match x461 with
                                   | Some x465 ->
                                       ignore
                                         (Ojs.call x463 "push"
                                            [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                                 x465)|])
                                   | None -> ());
                                  (match x462 with
                                   | Some x464 ->
                                       ignore
                                         (Ojs.call x463 "push"
                                            [|(ServerStreamFileResponseOptions.t_to_js
                                                 x464)|])
                                   | None -> ());
                                  x463))|])
        let (respond_with_file :
          t ->
            path:string ->
              ?headers:Node_http.Http.OutgoingHttpHeaders.t ->
                ?options:ServerStreamFileResponseOptionsWithError.t ->
                  unit -> unit)
          =
          fun (x475 : t) ->
            fun ~path:(x469 : string) ->
              fun
                ?headers:(x470 : Node_http.Http.OutgoingHttpHeaders.t option)
                ->
                fun
                  ?options:(x471 :
                             ServerStreamFileResponseOptionsWithError.t
                               option)
                  ->
                  fun () ->
                    ignore
                      (let x476 = t_to_js x475 in
                       Ojs.call (Ojs.get_prop_ascii x476 "respondWithFile")
                         "apply"
                         [|x476;((let x472 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x472 "push"
                                       [|(Ojs.string_to_js x469)|]);
                                  (match x470 with
                                   | Some x474 ->
                                       ignore
                                         (Ojs.call x472 "push"
                                            [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                                 x474)|])
                                   | None -> ());
                                  (match x471 with
                                   | Some x473 ->
                                       ignore
                                         (Ojs.call x472 "push"
                                            [|(ServerStreamFileResponseOptionsWithError.t_to_js
                                                 x473)|])
                                   | None -> ());
                                  x472))|])
      end
    module Settings =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x478 : Ojs.t) -> x478
        and t_to_js : t -> Ojs.t = fun (x477 : Ojs.t) -> x477
        let (get_header_table_size : t -> int) =
          fun (x479 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x479) "headerTableSize")
        let (set_header_table_size : t -> int -> unit) =
          fun (x480 : t) ->
            fun (x481 : int) ->
              Ojs.set_prop_ascii (t_to_js x480) "headerTableSize"
                (Ojs.int_to_js x481)
        let (get_enable_push : t -> bool) =
          fun (x482 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x482) "enablePush")
        let (set_enable_push : t -> bool -> unit) =
          fun (x483 : t) ->
            fun (x484 : bool) ->
              Ojs.set_prop_ascii (t_to_js x483) "enablePush"
                (Ojs.bool_to_js x484)
        let (get_initial_window_size : t -> int) =
          fun (x485 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x485) "initialWindowSize")
        let (set_initial_window_size : t -> int -> unit) =
          fun (x486 : t) ->
            fun (x487 : int) ->
              Ojs.set_prop_ascii (t_to_js x486) "initialWindowSize"
                (Ojs.int_to_js x487)
        let (get_max_frame_size : t -> int) =
          fun (x488 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x488) "maxFrameSize")
        let (set_max_frame_size : t -> int -> unit) =
          fun (x489 : t) ->
            fun (x490 : int) ->
              Ojs.set_prop_ascii (t_to_js x489) "maxFrameSize"
                (Ojs.int_to_js x490)
        let (get_max_concurrent_streams : t -> int) =
          fun (x491 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x491) "maxConcurrentStreams")
        let (set_max_concurrent_streams : t -> int -> unit) =
          fun (x492 : t) ->
            fun (x493 : int) ->
              Ojs.set_prop_ascii (t_to_js x492) "maxConcurrentStreams"
                (Ojs.int_to_js x493)
        let (get_max_header_list_size : t -> int) =
          fun (x494 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x494) "maxHeaderListSize")
        let (set_max_header_list_size : t -> int -> unit) =
          fun (x495 : t) ->
            fun (x496 : int) ->
              Ojs.set_prop_ascii (t_to_js x495) "maxHeaderListSize"
                (Ojs.int_to_js x496)
        let (get_enable_connect_protocol : t -> bool) =
          fun (x497 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x497) "enableConnectProtocol")
        let (set_enable_connect_protocol : t -> bool -> unit) =
          fun (x498 : t) ->
            fun (x499 : bool) ->
              Ojs.set_prop_ascii (t_to_js x498) "enableConnectProtocol"
                (Ojs.bool_to_js x499)
      end
    module ClientSessionRequestOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x501 : Ojs.t) -> x501
        and t_to_js : t -> Ojs.t = fun (x500 : Ojs.t) -> x500
        let (get_end_stream : t -> bool) =
          fun (x502 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x502) "endStream")
        let (set_end_stream : t -> bool -> unit) =
          fun (x503 : t) ->
            fun (x504 : bool) ->
              Ojs.set_prop_ascii (t_to_js x503) "endStream"
                (Ojs.bool_to_js x504)
        let (get_exclusive : t -> bool) =
          fun (x505 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x505) "exclusive")
        let (set_exclusive : t -> bool -> unit) =
          fun (x506 : t) ->
            fun (x507 : bool) ->
              Ojs.set_prop_ascii (t_to_js x506) "exclusive"
                (Ojs.bool_to_js x507)
        let (get_parent : t -> int) =
          fun (x508 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x508) "parent")
        let (set_parent : t -> int -> unit) =
          fun (x509 : t) ->
            fun (x510 : int) ->
              Ojs.set_prop_ascii (t_to_js x509) "parent" (Ojs.int_to_js x510)
        let (get_weight : t -> int) =
          fun (x511 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x511) "weight")
        let (set_weight : t -> int -> unit) =
          fun (x512 : t) ->
            fun (x513 : int) ->
              Ojs.set_prop_ascii (t_to_js x512) "weight" (Ojs.int_to_js x513)
        let (get_wait_for_trailers : t -> bool) =
          fun (x514 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x514) "waitForTrailers")
        let (set_wait_for_trailers : t -> bool -> unit) =
          fun (x515 : t) ->
            fun (x516 : bool) ->
              Ojs.set_prop_ascii (t_to_js x515) "waitForTrailers"
                (Ojs.bool_to_js x516)
      end
    module SessionState =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x518 : Ojs.t) -> x518
        and t_to_js : t -> Ojs.t = fun (x517 : Ojs.t) -> x517
        let (get_effective_local_window_size : t -> int) =
          fun (x519 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x519) "effectiveLocalWindowSize")
        let (set_effective_local_window_size : t -> int -> unit) =
          fun (x520 : t) ->
            fun (x521 : int) ->
              Ojs.set_prop_ascii (t_to_js x520) "effectiveLocalWindowSize"
                (Ojs.int_to_js x521)
        let (get_effective_recv_data_length : t -> int) =
          fun (x522 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x522) "effectiveRecvDataLength")
        let (set_effective_recv_data_length : t -> int -> unit) =
          fun (x523 : t) ->
            fun (x524 : int) ->
              Ojs.set_prop_ascii (t_to_js x523) "effectiveRecvDataLength"
                (Ojs.int_to_js x524)
        let (get_next_stream_id : t -> int) =
          fun (x525 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x525) "nextStreamID")
        let (set_next_stream_id : t -> int -> unit) =
          fun (x526 : t) ->
            fun (x527 : int) ->
              Ojs.set_prop_ascii (t_to_js x526) "nextStreamID"
                (Ojs.int_to_js x527)
        let (get_local_window_size : t -> int) =
          fun (x528 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x528) "localWindowSize")
        let (set_local_window_size : t -> int -> unit) =
          fun (x529 : t) ->
            fun (x530 : int) ->
              Ojs.set_prop_ascii (t_to_js x529) "localWindowSize"
                (Ojs.int_to_js x530)
        let (get_last_proc_stream_id : t -> int) =
          fun (x531 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x531) "lastProcStreamID")
        let (set_last_proc_stream_id : t -> int -> unit) =
          fun (x532 : t) ->
            fun (x533 : int) ->
              Ojs.set_prop_ascii (t_to_js x532) "lastProcStreamID"
                (Ojs.int_to_js x533)
        let (get_remote_window_size : t -> int) =
          fun (x534 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x534) "remoteWindowSize")
        let (set_remote_window_size : t -> int -> unit) =
          fun (x535 : t) ->
            fun (x536 : int) ->
              Ojs.set_prop_ascii (t_to_js x535) "remoteWindowSize"
                (Ojs.int_to_js x536)
        let (get_outbound_queue_size : t -> int) =
          fun (x537 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x537) "outboundQueueSize")
        let (set_outbound_queue_size : t -> int -> unit) =
          fun (x538 : t) ->
            fun (x539 : int) ->
              Ojs.set_prop_ascii (t_to_js x538) "outboundQueueSize"
                (Ojs.int_to_js x539)
        let (get_deflate_dynamic_table_size : t -> int) =
          fun (x540 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x540) "deflateDynamicTableSize")
        let (set_deflate_dynamic_table_size : t -> int -> unit) =
          fun (x541 : t) ->
            fun (x542 : int) ->
              Ojs.set_prop_ascii (t_to_js x541) "deflateDynamicTableSize"
                (Ojs.int_to_js x542)
        let (get_inflate_dynamic_table_size : t -> int) =
          fun (x543 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x543) "inflateDynamicTableSize")
        let (set_inflate_dynamic_table_size : t -> int -> unit) =
          fun (x544 : t) ->
            fun (x545 : int) ->
              Ojs.set_prop_ascii (t_to_js x544) "inflateDynamicTableSize"
                (Ojs.int_to_js x545)
      end
    module Http2Session =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x547 : Ojs.t) -> x547
        and t_to_js : t -> Ojs.t = fun (x546 : Ojs.t) -> x546
        let (get_alpn_protocol : t -> string) =
          fun (x548 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x548) "alpnProtocol")
        let (get_closed : t -> bool) =
          fun (x549 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x549) "closed")
        let (get_connecting : t -> bool) =
          fun (x550 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x550) "connecting")
        let (get_destroyed : t -> bool) =
          fun (x551 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x551) "destroyed")
        let (get_encrypted : t -> bool) =
          fun (x552 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x552) "encrypted")
        let (get_local_settings : t -> Settings.t) =
          fun (x553 : t) ->
            Settings.t_of_js
              (Ojs.get_prop_ascii (t_to_js x553) "localSettings")
        let (get_origin_set : t -> string list) =
          fun (x554 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x554) "originSet")
        let (get_pending_settings_ack : t -> bool) =
          fun (x556 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x556) "pendingSettingsAck")
        let (get_remote_settings : t -> Settings.t) =
          fun (x557 : t) ->
            Settings.t_of_js
              (Ojs.get_prop_ascii (t_to_js x557) "remoteSettings")
        let (get_socket : t -> (Net.Socket.t, Tls.TLSSocket.t) union2) =
          fun (x558 : t) ->
            union2_of_js Net.Socket.t_of_js Tls.TLSSocket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x558) "socket")
        let (get_state : t -> SessionState.t) =
          fun (x561 : t) ->
            SessionState.t_of_js (Ojs.get_prop_ascii (t_to_js x561) "state")
        let (get_type : t -> int) =
          fun (x562 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x562) "type")
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x566 : t) ->
            fun ?callback:(x563 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x567 = t_to_js x566 in
                   Ojs.call (Ojs.get_prop_ascii x567 "close") "apply"
                     [|x567;((let x564 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x563 with
                               | Some x565 ->
                                   ignore
                                     (Ojs.call x564 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x565 ()))|])
                               | None -> ());
                              x564))|])
        let (destroy : t -> ?error:Error.t -> ?code:int -> unit -> unit) =
          fun (x573 : t) ->
            fun ?error:(x568 : Error.t option) ->
              fun ?code:(x569 : int option) ->
                fun () ->
                  ignore
                    (let x574 = t_to_js x573 in
                     Ojs.call (Ojs.get_prop_ascii x574 "destroy") "apply"
                       [|x574;((let x570 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x568 with
                                 | Some x572 ->
                                     ignore
                                       (Ojs.call x570 "push"
                                          [|(Error.t_to_js x572)|])
                                 | None -> ());
                                (match x569 with
                                 | Some x571 ->
                                     ignore
                                       (Ojs.call x570 "push"
                                          [|(Ojs.int_to_js x571)|])
                                 | None -> ());
                                x570))|])
        let (goaway :
          t ->
            ?code:int ->
              ?last_stream_id:int ->
                ?opaque_data:ArrayBufferView.t -> unit -> unit)
          =
          fun (x582 : t) ->
            fun ?code:(x575 : int option) ->
              fun ?last_stream_id:(x576 : int option) ->
                fun ?opaque_data:(x577 : ArrayBufferView.t option) ->
                  fun () ->
                    ignore
                      (let x583 = t_to_js x582 in
                       Ojs.call (Ojs.get_prop_ascii x583 "goaway") "apply"
                         [|x583;((let x578 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x575 with
                                   | Some x581 ->
                                       ignore
                                         (Ojs.call x578 "push"
                                            [|(Ojs.int_to_js x581)|])
                                   | None -> ());
                                  (match x576 with
                                   | Some x580 ->
                                       ignore
                                         (Ojs.call x578 "push"
                                            [|(Ojs.int_to_js x580)|])
                                   | None -> ());
                                  (match x577 with
                                   | Some x579 ->
                                       ignore
                                         (Ojs.call x578 "push"
                                            [|(ArrayBufferView.t_to_js x579)|])
                                   | None -> ());
                                  x578))|])
        let (ping :
          t ->
            callback:(err:Error.t or_null ->
                        duration:int -> payload:Buffer.t -> unit)
              -> bool)
          =
          fun (x589 : t) ->
            fun
              ~callback:(x584 :
                          err:Error.t or_null ->
                            duration:int -> payload:Buffer.t -> unit)
              ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x589) "ping"
                   [|(Ojs.fun_to_js 3
                        (fun (x585 : Ojs.t) ->
                           fun (x587 : Ojs.t) ->
                             fun (x588 : Ojs.t) ->
                               x584 ~err:(or_null_of_js Error.t_of_js x585)
                                 ~duration:(Ojs.int_of_js x587)
                                 ~payload:(Buffer.t_of_js x588)))|])
        let (ping' :
          t ->
            payload:ArrayBufferView.t ->
              callback:(err:Error.t or_null ->
                          duration:int -> payload:Buffer.t -> unit)
                -> bool)
          =
          fun (x596 : t) ->
            fun ~payload:(x590 : ArrayBufferView.t) ->
              fun
                ~callback:(x591 :
                            err:Error.t or_null ->
                              duration:int -> payload:Buffer.t -> unit)
                ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x596) "ping"
                     [|(ArrayBufferView.t_to_js x590);(Ojs.fun_to_js 3
                                                         (fun (x592 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x594 : Ojs.t)
                                                              ->
                                                              fun
                                                                (x595 :
                                                                  Ojs.t)
                                                                ->
                                                                x591
                                                                  ~err:(
                                                                  or_null_of_js
                                                                    Error.t_of_js
                                                                    x592)
                                                                  ~duration:(
                                                                  Ojs.int_of_js
                                                                    x594)
                                                                  ~payload:(
                                                                  Buffer.t_of_js
                                                                    x595)))|])
        let (ref : t -> unit) =
          fun (x597 : t) -> ignore (Ojs.call (t_to_js x597) "ref" [||])
        let (set_local_window_size : t -> window_size:int -> unit) =
          fun (x599 : t) ->
            fun ~window_size:(x598 : int) ->
              ignore
                (Ojs.call (t_to_js x599) "setLocalWindowSize"
                   [|(Ojs.int_to_js x598)|])
        let (set_timeout :
          t -> msecs:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x604 : t) ->
            fun ~msecs:(x600 : int) ->
              fun ?callback:(x601 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x605 = t_to_js x604 in
                     Ojs.call (Ojs.get_prop_ascii x605 "setTimeout") "apply"
                       [|x605;((let x602 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x602 "push"
                                     [|(Ojs.int_to_js x600)|]);
                                (match x601 with
                                 | Some x603 ->
                                     ignore
                                       (Ojs.call x602 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x603 ()))|])
                                 | None -> ());
                                x602))|])
        let (settings : t -> settings:Settings.t -> unit) =
          fun (x607 : t) ->
            fun ~settings:(x606 : Settings.t) ->
              ignore
                (Ojs.call (t_to_js x607) "settings"
                   [|(Settings.t_to_js x606)|])
        let (unref : t -> unit) =
          fun (x608 : t) -> ignore (Ojs.call (t_to_js x608) "unref" [||])
        let (add_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x611 : t) ->
            fun ~event:(x609 : [ `close ]) ->
              fun ~listener:(x610 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x611) "addListener"
                     [|((match x609 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x610 ()))|])
        let (add_listener' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x615 : t) ->
            fun ~event:(x612 : [ `error ]) ->
              fun ~listener:(x613 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x615) "addListener"
                     [|((match x612 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x614 : Ojs.t) ->
                            x613 ~err:(Error.t_of_js x614)))|])
        let (add_listener'' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int ->
                          error_code:int -> stream_id:int -> unit)
                -> t)
          =
          fun (x621 : t) ->
            fun ~event:(x616 : [ `frameError ]) ->
              fun
                ~listener:(x617 :
                            frameType:int ->
                              error_code:int -> stream_id:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x621) "addListener"
                     [|((match x616 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 3
                         (fun (x618 : Ojs.t) ->
                            fun (x619 : Ojs.t) ->
                              fun (x620 : Ojs.t) ->
                                x617 ~frameType:(Ojs.int_of_js x618)
                                  ~error_code:(Ojs.int_of_js x619)
                                  ~stream_id:(Ojs.int_of_js x620)))|])
        let (add_listener''' :
          t ->
            event:[ `goaway ] ->
              listener:(errorCode:int ->
                          last_stream_id:int -> opaque_data:Buffer.t -> unit)
                -> t)
          =
          fun (x627 : t) ->
            fun ~event:(x622 : [ `goaway ]) ->
              fun
                ~listener:(x623 :
                            errorCode:int ->
                              last_stream_id:int ->
                                opaque_data:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x627) "addListener"
                     [|((match x622 with
                         | `goaway -> Ojs.string_to_js "goaway"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x624 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x625 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x626 :
                                                                    Ojs.t) ->
                                                                    x623
                                                                    ~errorCode:(
                                                                    Ojs.int_of_js
                                                                    x624)
                                                                    ~last_stream_id:(
                                                                    Ojs.int_of_js
                                                                    x625)
                                                                    ~opaque_data:(
                                                                    Buffer.t_of_js
                                                                    x626)))|])
        let (add_listener'''' :
          t ->
            event:[ `localSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x631 : t) ->
            fun ~event:(x628 : [ `localSettings ]) ->
              fun ~listener:(x629 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x631) "addListener"
                     [|((match x628 with
                         | `localSettings -> Ojs.string_to_js "localSettings"));(
                       Ojs.fun_to_js 1
                         (fun (x630 : Ojs.t) ->
                            x629 ~settings:(Settings.t_of_js x630)))|])
        let (add_listener''''' :
          t -> event:[ `ping ] -> listener:(unit -> unit) -> t) =
          fun (x634 : t) ->
            fun ~event:(x632 : [ `ping ]) ->
              fun ~listener:(x633 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x634) "addListener"
                     [|((match x632 with | `ping -> Ojs.string_to_js "ping"));(
                       Ojs.fun_to_js 1 (fun _ -> x633 ()))|])
        let (add_listener'''''' :
          t ->
            event:[ `remoteSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x638 : t) ->
            fun ~event:(x635 : [ `remoteSettings ]) ->
              fun ~listener:(x636 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x638) "addListener"
                     [|((match x635 with
                         | `remoteSettings ->
                             Ojs.string_to_js "remoteSettings"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun
                                                                    (x637 :
                                                                    Ojs.t) ->
                                                                    x636
                                                                    ~settings:(
                                                                    Settings.t_of_js
                                                                    x637)))|])
        let (add_listener''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x641 : t) ->
            fun ~event:(x639 : [ `timeout ]) ->
              fun ~listener:(x640 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x641) "addListener"
                     [|((match x639 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x640 ()))|])
        let (add_listener'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x647 : t) ->
            fun ~event:(x642 : symbol or_string) ->
              fun ~listener:(x644 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x647) "addListener"
                     [|(or_string_to_js symbol_to_js x642);(Ojs.fun_to_js_args
                                                              (fun (x645 : _)
                                                                 ->
                                                                 x644
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x645 0)))|])
        let (emit : t -> event:[ `close ] -> bool) =
          fun (x649 : t) ->
            fun ~event:(x648 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x649) "emit"
                   [|((match x648 with | `close -> Ojs.string_to_js "close"))|])
        let (emit' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x652 : t) ->
            fun ~event:(x650 : [ `error ]) ->
              fun ~err:(x651 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x652) "emit"
                     [|((match x650 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x651)|])
        let (emit'' :
          t ->
            event:[ `frameError ] ->
              frame_type:int -> error_code:int -> stream_id:int -> bool)
          =
          fun (x657 : t) ->
            fun ~event:(x653 : [ `frameError ]) ->
              fun ~frame_type:(x654 : int) ->
                fun ~error_code:(x655 : int) ->
                  fun ~stream_id:(x656 : int) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x657) "emit"
                         [|((match x653 with
                             | `frameError -> Ojs.string_to_js "frameError"));(
                           Ojs.int_to_js x654);(Ojs.int_to_js x655);(
                           Ojs.int_to_js x656)|])
        let (emit''' :
          t ->
            event:[ `goaway ] ->
              error_code:int ->
                last_stream_id:int -> opaque_data:Buffer.t -> bool)
          =
          fun (x662 : t) ->
            fun ~event:(x658 : [ `goaway ]) ->
              fun ~error_code:(x659 : int) ->
                fun ~last_stream_id:(x660 : int) ->
                  fun ~opaque_data:(x661 : Buffer.t) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x662) "emit"
                         [|((match x658 with
                             | `goaway -> Ojs.string_to_js "goaway"));(
                           Ojs.int_to_js x659);(Ojs.int_to_js x660);(
                           Buffer.t_to_js x661)|])
        let (emit'''' :
          t -> event:[ `localSettings ] -> settings:Settings.t -> bool) =
          fun (x665 : t) ->
            fun ~event:(x663 : [ `localSettings ]) ->
              fun ~settings:(x664 : Settings.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x665) "emit"
                     [|((match x663 with
                         | `localSettings -> Ojs.string_to_js "localSettings"));(
                       Settings.t_to_js x664)|])
        let (emit''''' : t -> event:[ `ping ] -> bool) =
          fun (x667 : t) ->
            fun ~event:(x666 : [ `ping ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x667) "emit"
                   [|((match x666 with | `ping -> Ojs.string_to_js "ping"))|])
        let (emit'''''' :
          t -> event:[ `remoteSettings ] -> settings:Settings.t -> bool) =
          fun (x670 : t) ->
            fun ~event:(x668 : [ `remoteSettings ]) ->
              fun ~settings:(x669 : Settings.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x670) "emit"
                     [|((match x668 with
                         | `remoteSettings ->
                             Ojs.string_to_js "remoteSettings"));(Settings.t_to_js
                                                                    x669)|])
        let (emit''''''' : t -> event:[ `timeout ] -> bool) =
          fun (x672 : t) ->
            fun ~event:(x671 : [ `timeout ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x672) "emit"
                   [|((match x671 with
                       | `timeout -> Ojs.string_to_js "timeout"))|])
        let (emit'''''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x678 : t) ->
            fun ~event:(x673 : symbol or_string) ->
              fun ~args:(x674 : any list) ->
                Ojs.bool_of_js
                  (let x679 = t_to_js x678 in
                   Ojs.call (Ojs.get_prop_ascii x679 "emit") "apply"
                     [|x679;((let x675 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x675 "push"
                                   [|(or_string_to_js symbol_to_js x673)|]);
                              List.iter
                                (fun (x676 : any) ->
                                   ignore
                                     (Ojs.call x675 "push"
                                        [|(any_to_js x676)|])) x674;
                              x675))|])
        let (on : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x682 : t) ->
            fun ~event:(x680 : [ `close ]) ->
              fun ~listener:(x681 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x682) "on"
                     [|((match x680 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x681 ()))|])
        let (on' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x686 : t) ->
            fun ~event:(x683 : [ `error ]) ->
              fun ~listener:(x684 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x686) "on"
                     [|((match x683 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x685 : Ojs.t) ->
                            x684 ~err:(Error.t_of_js x685)))|])
        let (on'' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int ->
                          error_code:int -> stream_id:int -> unit)
                -> t)
          =
          fun (x692 : t) ->
            fun ~event:(x687 : [ `frameError ]) ->
              fun
                ~listener:(x688 :
                            frameType:int ->
                              error_code:int -> stream_id:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x692) "on"
                     [|((match x687 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 3
                         (fun (x689 : Ojs.t) ->
                            fun (x690 : Ojs.t) ->
                              fun (x691 : Ojs.t) ->
                                x688 ~frameType:(Ojs.int_of_js x689)
                                  ~error_code:(Ojs.int_of_js x690)
                                  ~stream_id:(Ojs.int_of_js x691)))|])
        let (on''' :
          t ->
            event:[ `goaway ] ->
              listener:(errorCode:int ->
                          last_stream_id:int -> opaque_data:Buffer.t -> unit)
                -> t)
          =
          fun (x698 : t) ->
            fun ~event:(x693 : [ `goaway ]) ->
              fun
                ~listener:(x694 :
                            errorCode:int ->
                              last_stream_id:int ->
                                opaque_data:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x698) "on"
                     [|((match x693 with
                         | `goaway -> Ojs.string_to_js "goaway"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x695 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x696 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x697 :
                                                                    Ojs.t) ->
                                                                    x694
                                                                    ~errorCode:(
                                                                    Ojs.int_of_js
                                                                    x695)
                                                                    ~last_stream_id:(
                                                                    Ojs.int_of_js
                                                                    x696)
                                                                    ~opaque_data:(
                                                                    Buffer.t_of_js
                                                                    x697)))|])
        let (on'''' :
          t ->
            event:[ `localSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x702 : t) ->
            fun ~event:(x699 : [ `localSettings ]) ->
              fun ~listener:(x700 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x702) "on"
                     [|((match x699 with
                         | `localSettings -> Ojs.string_to_js "localSettings"));(
                       Ojs.fun_to_js 1
                         (fun (x701 : Ojs.t) ->
                            x700 ~settings:(Settings.t_of_js x701)))|])
        let (on''''' : t -> event:[ `ping ] -> listener:(unit -> unit) -> t)
          =
          fun (x705 : t) ->
            fun ~event:(x703 : [ `ping ]) ->
              fun ~listener:(x704 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x705) "on"
                     [|((match x703 with | `ping -> Ojs.string_to_js "ping"));(
                       Ojs.fun_to_js 1 (fun _ -> x704 ()))|])
        let (on'''''' :
          t ->
            event:[ `remoteSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x709 : t) ->
            fun ~event:(x706 : [ `remoteSettings ]) ->
              fun ~listener:(x707 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x709) "on"
                     [|((match x706 with
                         | `remoteSettings ->
                             Ojs.string_to_js "remoteSettings"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun
                                                                    (x708 :
                                                                    Ojs.t) ->
                                                                    x707
                                                                    ~settings:(
                                                                    Settings.t_of_js
                                                                    x708)))|])
        let (on''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x712 : t) ->
            fun ~event:(x710 : [ `timeout ]) ->
              fun ~listener:(x711 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x712) "on"
                     [|((match x710 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x711 ()))|])
        let (on'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x718 : t) ->
            fun ~event:(x713 : symbol or_string) ->
              fun ~listener:(x715 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x718) "on"
                     [|(or_string_to_js symbol_to_js x713);(Ojs.fun_to_js_args
                                                              (fun (x716 : _)
                                                                 ->
                                                                 x715
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x716 0)))|])
        let (once : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x721 : t) ->
            fun ~event:(x719 : [ `close ]) ->
              fun ~listener:(x720 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x721) "once"
                     [|((match x719 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x720 ()))|])
        let (once' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x725 : t) ->
            fun ~event:(x722 : [ `error ]) ->
              fun ~listener:(x723 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x725) "once"
                     [|((match x722 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x724 : Ojs.t) ->
                            x723 ~err:(Error.t_of_js x724)))|])
        let (once'' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int ->
                          error_code:int -> stream_id:int -> unit)
                -> t)
          =
          fun (x731 : t) ->
            fun ~event:(x726 : [ `frameError ]) ->
              fun
                ~listener:(x727 :
                            frameType:int ->
                              error_code:int -> stream_id:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x731) "once"
                     [|((match x726 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 3
                         (fun (x728 : Ojs.t) ->
                            fun (x729 : Ojs.t) ->
                              fun (x730 : Ojs.t) ->
                                x727 ~frameType:(Ojs.int_of_js x728)
                                  ~error_code:(Ojs.int_of_js x729)
                                  ~stream_id:(Ojs.int_of_js x730)))|])
        let (once''' :
          t ->
            event:[ `goaway ] ->
              listener:(errorCode:int ->
                          last_stream_id:int -> opaque_data:Buffer.t -> unit)
                -> t)
          =
          fun (x737 : t) ->
            fun ~event:(x732 : [ `goaway ]) ->
              fun
                ~listener:(x733 :
                            errorCode:int ->
                              last_stream_id:int ->
                                opaque_data:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x737) "once"
                     [|((match x732 with
                         | `goaway -> Ojs.string_to_js "goaway"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x734 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x735 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x736 :
                                                                    Ojs.t) ->
                                                                    x733
                                                                    ~errorCode:(
                                                                    Ojs.int_of_js
                                                                    x734)
                                                                    ~last_stream_id:(
                                                                    Ojs.int_of_js
                                                                    x735)
                                                                    ~opaque_data:(
                                                                    Buffer.t_of_js
                                                                    x736)))|])
        let (once'''' :
          t ->
            event:[ `localSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x741 : t) ->
            fun ~event:(x738 : [ `localSettings ]) ->
              fun ~listener:(x739 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x741) "once"
                     [|((match x738 with
                         | `localSettings -> Ojs.string_to_js "localSettings"));(
                       Ojs.fun_to_js 1
                         (fun (x740 : Ojs.t) ->
                            x739 ~settings:(Settings.t_of_js x740)))|])
        let (once''''' :
          t -> event:[ `ping ] -> listener:(unit -> unit) -> t) =
          fun (x744 : t) ->
            fun ~event:(x742 : [ `ping ]) ->
              fun ~listener:(x743 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x744) "once"
                     [|((match x742 with | `ping -> Ojs.string_to_js "ping"));(
                       Ojs.fun_to_js 1 (fun _ -> x743 ()))|])
        let (once'''''' :
          t ->
            event:[ `remoteSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x748 : t) ->
            fun ~event:(x745 : [ `remoteSettings ]) ->
              fun ~listener:(x746 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x748) "once"
                     [|((match x745 with
                         | `remoteSettings ->
                             Ojs.string_to_js "remoteSettings"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun
                                                                    (x747 :
                                                                    Ojs.t) ->
                                                                    x746
                                                                    ~settings:(
                                                                    Settings.t_of_js
                                                                    x747)))|])
        let (once''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x751 : t) ->
            fun ~event:(x749 : [ `timeout ]) ->
              fun ~listener:(x750 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x751) "once"
                     [|((match x749 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x750 ()))|])
        let (once'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x757 : t) ->
            fun ~event:(x752 : symbol or_string) ->
              fun ~listener:(x754 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x757) "once"
                     [|(or_string_to_js symbol_to_js x752);(Ojs.fun_to_js_args
                                                              (fun (x755 : _)
                                                                 ->
                                                                 x754
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x755 0)))|])
        let (prepend_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x760 : t) ->
            fun ~event:(x758 : [ `close ]) ->
              fun ~listener:(x759 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x760) "prependListener"
                     [|((match x758 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x759 ()))|])
        let (prepend_listener' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x764 : t) ->
            fun ~event:(x761 : [ `error ]) ->
              fun ~listener:(x762 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x764) "prependListener"
                     [|((match x761 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x763 : Ojs.t) ->
                            x762 ~err:(Error.t_of_js x763)))|])
        let (prepend_listener'' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int ->
                          error_code:int -> stream_id:int -> unit)
                -> t)
          =
          fun (x770 : t) ->
            fun ~event:(x765 : [ `frameError ]) ->
              fun
                ~listener:(x766 :
                            frameType:int ->
                              error_code:int -> stream_id:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x770) "prependListener"
                     [|((match x765 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 3
                         (fun (x767 : Ojs.t) ->
                            fun (x768 : Ojs.t) ->
                              fun (x769 : Ojs.t) ->
                                x766 ~frameType:(Ojs.int_of_js x767)
                                  ~error_code:(Ojs.int_of_js x768)
                                  ~stream_id:(Ojs.int_of_js x769)))|])
        let (prepend_listener''' :
          t ->
            event:[ `goaway ] ->
              listener:(errorCode:int ->
                          last_stream_id:int -> opaque_data:Buffer.t -> unit)
                -> t)
          =
          fun (x776 : t) ->
            fun ~event:(x771 : [ `goaway ]) ->
              fun
                ~listener:(x772 :
                            errorCode:int ->
                              last_stream_id:int ->
                                opaque_data:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x776) "prependListener"
                     [|((match x771 with
                         | `goaway -> Ojs.string_to_js "goaway"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x773 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x774 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x775 :
                                                                    Ojs.t) ->
                                                                    x772
                                                                    ~errorCode:(
                                                                    Ojs.int_of_js
                                                                    x773)
                                                                    ~last_stream_id:(
                                                                    Ojs.int_of_js
                                                                    x774)
                                                                    ~opaque_data:(
                                                                    Buffer.t_of_js
                                                                    x775)))|])
        let (prepend_listener'''' :
          t ->
            event:[ `localSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x780 : t) ->
            fun ~event:(x777 : [ `localSettings ]) ->
              fun ~listener:(x778 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x780) "prependListener"
                     [|((match x777 with
                         | `localSettings -> Ojs.string_to_js "localSettings"));(
                       Ojs.fun_to_js 1
                         (fun (x779 : Ojs.t) ->
                            x778 ~settings:(Settings.t_of_js x779)))|])
        let (prepend_listener''''' :
          t -> event:[ `ping ] -> listener:(unit -> unit) -> t) =
          fun (x783 : t) ->
            fun ~event:(x781 : [ `ping ]) ->
              fun ~listener:(x782 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x783) "prependListener"
                     [|((match x781 with | `ping -> Ojs.string_to_js "ping"));(
                       Ojs.fun_to_js 1 (fun _ -> x782 ()))|])
        let (prepend_listener'''''' :
          t ->
            event:[ `remoteSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x787 : t) ->
            fun ~event:(x784 : [ `remoteSettings ]) ->
              fun ~listener:(x785 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x787) "prependListener"
                     [|((match x784 with
                         | `remoteSettings ->
                             Ojs.string_to_js "remoteSettings"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun
                                                                    (x786 :
                                                                    Ojs.t) ->
                                                                    x785
                                                                    ~settings:(
                                                                    Settings.t_of_js
                                                                    x786)))|])
        let (prepend_listener''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x790 : t) ->
            fun ~event:(x788 : [ `timeout ]) ->
              fun ~listener:(x789 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x790) "prependListener"
                     [|((match x788 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x789 ()))|])
        let (prepend_listener'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x796 : t) ->
            fun ~event:(x791 : symbol or_string) ->
              fun ~listener:(x793 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x796) "prependListener"
                     [|(or_string_to_js symbol_to_js x791);(Ojs.fun_to_js_args
                                                              (fun (x794 : _)
                                                                 ->
                                                                 x793
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x794 0)))|])
        let (prepend_once_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x799 : t) ->
            fun ~event:(x797 : [ `close ]) ->
              fun ~listener:(x798 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x799) "prependOnceListener"
                     [|((match x797 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x798 ()))|])
        let (prepend_once_listener' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x803 : t) ->
            fun ~event:(x800 : [ `error ]) ->
              fun ~listener:(x801 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x803) "prependOnceListener"
                     [|((match x800 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x802 : Ojs.t) ->
                            x801 ~err:(Error.t_of_js x802)))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int ->
                          error_code:int -> stream_id:int -> unit)
                -> t)
          =
          fun (x809 : t) ->
            fun ~event:(x804 : [ `frameError ]) ->
              fun
                ~listener:(x805 :
                            frameType:int ->
                              error_code:int -> stream_id:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x809) "prependOnceListener"
                     [|((match x804 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 3
                         (fun (x806 : Ojs.t) ->
                            fun (x807 : Ojs.t) ->
                              fun (x808 : Ojs.t) ->
                                x805 ~frameType:(Ojs.int_of_js x806)
                                  ~error_code:(Ojs.int_of_js x807)
                                  ~stream_id:(Ojs.int_of_js x808)))|])
        let (prepend_once_listener''' :
          t ->
            event:[ `goaway ] ->
              listener:(errorCode:int ->
                          last_stream_id:int -> opaque_data:Buffer.t -> unit)
                -> t)
          =
          fun (x815 : t) ->
            fun ~event:(x810 : [ `goaway ]) ->
              fun
                ~listener:(x811 :
                            errorCode:int ->
                              last_stream_id:int ->
                                opaque_data:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x815) "prependOnceListener"
                     [|((match x810 with
                         | `goaway -> Ojs.string_to_js "goaway"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x812 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x813 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x814 :
                                                                    Ojs.t) ->
                                                                    x811
                                                                    ~errorCode:(
                                                                    Ojs.int_of_js
                                                                    x812)
                                                                    ~last_stream_id:(
                                                                    Ojs.int_of_js
                                                                    x813)
                                                                    ~opaque_data:(
                                                                    Buffer.t_of_js
                                                                    x814)))|])
        let (prepend_once_listener'''' :
          t ->
            event:[ `localSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x819 : t) ->
            fun ~event:(x816 : [ `localSettings ]) ->
              fun ~listener:(x817 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x819) "prependOnceListener"
                     [|((match x816 with
                         | `localSettings -> Ojs.string_to_js "localSettings"));(
                       Ojs.fun_to_js 1
                         (fun (x818 : Ojs.t) ->
                            x817 ~settings:(Settings.t_of_js x818)))|])
        let (prepend_once_listener''''' :
          t -> event:[ `ping ] -> listener:(unit -> unit) -> t) =
          fun (x822 : t) ->
            fun ~event:(x820 : [ `ping ]) ->
              fun ~listener:(x821 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x822) "prependOnceListener"
                     [|((match x820 with | `ping -> Ojs.string_to_js "ping"));(
                       Ojs.fun_to_js 1 (fun _ -> x821 ()))|])
        let (prepend_once_listener'''''' :
          t ->
            event:[ `remoteSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x826 : t) ->
            fun ~event:(x823 : [ `remoteSettings ]) ->
              fun ~listener:(x824 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x826) "prependOnceListener"
                     [|((match x823 with
                         | `remoteSettings ->
                             Ojs.string_to_js "remoteSettings"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun
                                                                    (x825 :
                                                                    Ojs.t) ->
                                                                    x824
                                                                    ~settings:(
                                                                    Settings.t_of_js
                                                                    x825)))|])
        let (prepend_once_listener''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x829 : t) ->
            fun ~event:(x827 : [ `timeout ]) ->
              fun ~listener:(x828 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x829) "prependOnceListener"
                     [|((match x827 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x828 ()))|])
        let (prepend_once_listener'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x835 : t) ->
            fun ~event:(x830 : symbol or_string) ->
              fun ~listener:(x832 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x835) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x830);(Ojs.fun_to_js_args
                                                              (fun (x833 : _)
                                                                 ->
                                                                 x832
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x833 0)))|])
      end
    module ClientHttp2Session =
      struct
        include struct include Http2Session end
        let (request :
          t ->
            ?headers:Node_http.Http.OutgoingHttpHeaders.t ->
              ?options:ClientSessionRequestOptions.t ->
                unit -> ClientHttp2Stream.t)
          =
          fun (x841 : t) ->
            fun ?headers:(x836 : Node_http.Http.OutgoingHttpHeaders.t option)
              ->
              fun ?options:(x837 : ClientSessionRequestOptions.t option) ->
                fun () ->
                  ClientHttp2Stream.t_of_js
                    (let x842 = t_to_js x841 in
                     Ojs.call (Ojs.get_prop_ascii x842 "request") "apply"
                       [|x842;((let x838 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x836 with
                                 | Some x840 ->
                                     ignore
                                       (Ojs.call x838 "push"
                                          [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                               x840)|])
                                 | None -> ());
                                (match x837 with
                                 | Some x839 ->
                                     ignore
                                       (Ojs.call x838 "push"
                                          [|(ClientSessionRequestOptions.t_to_js
                                               x839)|])
                                 | None -> ());
                                x838))|])
        let (add_listener :
          t ->
            event:[ `altsvc ] ->
              listener:(alt:string -> origin:string -> stream:int -> unit) ->
                t)
          =
          fun (x848 : t) ->
            fun ~event:(x843 : [ `altsvc ]) ->
              fun
                ~listener:(x844 :
                            alt:string -> origin:string -> stream:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x848) "addListener"
                     [|((match x843 with
                         | `altsvc -> Ojs.string_to_js "altsvc"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x845 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x846 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x847 :
                                                                    Ojs.t) ->
                                                                    x844
                                                                    ~alt:(
                                                                    Ojs.string_of_js
                                                                    x845)
                                                                    ~origin:(
                                                                    Ojs.string_of_js
                                                                    x846)
                                                                    ~stream:(
                                                                    Ojs.int_of_js
                                                                    x847)))|])
        let (add_listener' :
          t ->
            event:[ `origin ] -> listener:(origins:string list -> unit) -> t)
          =
          fun (x853 : t) ->
            fun ~event:(x849 : [ `origin ]) ->
              fun ~listener:(x850 : origins:string list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x853) "addListener"
                     [|((match x849 with
                         | `origin -> Ojs.string_to_js "origin"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x851 :
                                                                    Ojs.t) ->
                                                                    x850
                                                                    ~origins:(
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x851)))|])
        let (add_listener'' :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x860 : t) ->
            fun ~event:(x854 : [ `connect ]) ->
              fun
                ~listener:(x855 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x860) "addListener"
                     [|((match x854 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x856 : Ojs.t) ->
                            fun (x857 : Ojs.t) ->
                              x855 ~session:(t_of_js x856)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x857)))|])
        let (add_listener''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ClientHttp2Stream.t ->
                          headers:(IncomingHttpHeaders.t,
                            IncomingHttpStatusHeader.t) intersection2 ->
                            flags:int -> unit)
                -> t)
          =
          fun (x868 : t) ->
            fun ~event:(x861 : [ `stream ]) ->
              fun
                ~listener:(x862 :
                            stream:ClientHttp2Stream.t ->
                              headers:(IncomingHttpHeaders.t,
                                IncomingHttpStatusHeader.t) intersection2 ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x868) "addListener"
                     [|((match x861 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x863 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x864 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x867 :
                                                                    Ojs.t) ->
                                                                    x862
                                                                    ~stream:(
                                                                    ClientHttp2Stream.t_of_js
                                                                    x863)
                                                                    ~headers:(
                                                                    intersection2_of_js
                                                                    IncomingHttpHeaders.t_of_js
                                                                    IncomingHttpStatusHeader.t_of_js
                                                                    x864)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x867)))|])
        let (add_listener'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x874 : t) ->
            fun ~event:(x869 : symbol or_string) ->
              fun ~listener:(x871 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x874) "addListener"
                     [|(or_string_to_js symbol_to_js x869);(Ojs.fun_to_js_args
                                                              (fun (x872 : _)
                                                                 ->
                                                                 x871
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x872 0)))|])
        let (emit :
          t ->
            event:[ `altsvc ] ->
              alt:string -> origin:string -> stream:int -> bool)
          =
          fun (x879 : t) ->
            fun ~event:(x875 : [ `altsvc ]) ->
              fun ~alt:(x876 : string) ->
                fun ~origin:(x877 : string) ->
                  fun ~stream:(x878 : int) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x879) "emit"
                         [|((match x875 with
                             | `altsvc -> Ojs.string_to_js "altsvc"));(
                           Ojs.string_to_js x876);(Ojs.string_to_js x877);(
                           Ojs.int_to_js x878)|])
        let (emit' : t -> event:[ `origin ] -> origins:string list -> bool) =
          fun (x883 : t) ->
            fun ~event:(x880 : [ `origin ]) ->
              fun ~origins:(x881 : string list) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x883) "emit"
                     [|((match x880 with
                         | `origin -> Ojs.string_to_js "origin"));(Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x881)|])
        let (emit'' :
          t ->
            event:[ `connect ] ->
              session:t ->
                socket:(Net.Socket.t, Tls.TLSSocket.t) union2 -> bool)
          =
          fun (x889 : t) ->
            fun ~event:(x884 : [ `connect ]) ->
              fun ~session:(x885 : t) ->
                fun ~socket:(x886 : (Net.Socket.t, Tls.TLSSocket.t) union2)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x889) "emit"
                       [|((match x884 with
                           | `connect -> Ojs.string_to_js "connect"));(
                         t_to_js x885);(union2_to_js Net.Socket.t_to_js
                                          Tls.TLSSocket.t_to_js x886)|])
        let (emit''' :
          t ->
            event:[ `stream ] ->
              stream:ClientHttp2Stream.t ->
                headers:(IncomingHttpHeaders.t, IncomingHttpStatusHeader.t)
                  intersection2 -> flags:int -> bool)
          =
          fun (x896 : t) ->
            fun ~event:(x890 : [ `stream ]) ->
              fun ~stream:(x891 : ClientHttp2Stream.t) ->
                fun
                  ~headers:(x892 :
                             (IncomingHttpHeaders.t,
                               IncomingHttpStatusHeader.t) intersection2)
                  ->
                  fun ~flags:(x895 : int) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x896) "emit"
                         [|((match x890 with
                             | `stream -> Ojs.string_to_js "stream"));(
                           ClientHttp2Stream.t_to_js x891);(intersection2_to_js
                                                              IncomingHttpHeaders.t_to_js
                                                              IncomingHttpStatusHeader.t_to_js
                                                              x892);(
                           Ojs.int_to_js x895)|])
        let (emit'''' : t -> event:symbol or_string -> args:any list -> bool)
          =
          fun (x902 : t) ->
            fun ~event:(x897 : symbol or_string) ->
              fun ~args:(x898 : any list) ->
                Ojs.bool_of_js
                  (let x903 = t_to_js x902 in
                   Ojs.call (Ojs.get_prop_ascii x903 "emit") "apply"
                     [|x903;((let x899 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x899 "push"
                                   [|(or_string_to_js symbol_to_js x897)|]);
                              List.iter
                                (fun (x900 : any) ->
                                   ignore
                                     (Ojs.call x899 "push"
                                        [|(any_to_js x900)|])) x898;
                              x899))|])
        let (on :
          t ->
            event:[ `altsvc ] ->
              listener:(alt:string -> origin:string -> stream:int -> unit) ->
                t)
          =
          fun (x909 : t) ->
            fun ~event:(x904 : [ `altsvc ]) ->
              fun
                ~listener:(x905 :
                            alt:string -> origin:string -> stream:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x909) "on"
                     [|((match x904 with
                         | `altsvc -> Ojs.string_to_js "altsvc"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x906 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x907 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x908 :
                                                                    Ojs.t) ->
                                                                    x905
                                                                    ~alt:(
                                                                    Ojs.string_of_js
                                                                    x906)
                                                                    ~origin:(
                                                                    Ojs.string_of_js
                                                                    x907)
                                                                    ~stream:(
                                                                    Ojs.int_of_js
                                                                    x908)))|])
        let (on' :
          t ->
            event:[ `origin ] -> listener:(origins:string list -> unit) -> t)
          =
          fun (x914 : t) ->
            fun ~event:(x910 : [ `origin ]) ->
              fun ~listener:(x911 : origins:string list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x914) "on"
                     [|((match x910 with
                         | `origin -> Ojs.string_to_js "origin"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x912 :
                                                                    Ojs.t) ->
                                                                    x911
                                                                    ~origins:(
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x912)))|])
        let (on'' :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x921 : t) ->
            fun ~event:(x915 : [ `connect ]) ->
              fun
                ~listener:(x916 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x921) "on"
                     [|((match x915 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x917 : Ojs.t) ->
                            fun (x918 : Ojs.t) ->
                              x916 ~session:(t_of_js x917)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x918)))|])
        let (on''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ClientHttp2Stream.t ->
                          headers:(IncomingHttpHeaders.t,
                            IncomingHttpStatusHeader.t) intersection2 ->
                            flags:int -> unit)
                -> t)
          =
          fun (x929 : t) ->
            fun ~event:(x922 : [ `stream ]) ->
              fun
                ~listener:(x923 :
                            stream:ClientHttp2Stream.t ->
                              headers:(IncomingHttpHeaders.t,
                                IncomingHttpStatusHeader.t) intersection2 ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x929) "on"
                     [|((match x922 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x924 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x925 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x928 :
                                                                    Ojs.t) ->
                                                                    x923
                                                                    ~stream:(
                                                                    ClientHttp2Stream.t_of_js
                                                                    x924)
                                                                    ~headers:(
                                                                    intersection2_of_js
                                                                    IncomingHttpHeaders.t_of_js
                                                                    IncomingHttpStatusHeader.t_of_js
                                                                    x925)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x928)))|])
        let (on'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x935 : t) ->
            fun ~event:(x930 : symbol or_string) ->
              fun ~listener:(x932 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x935) "on"
                     [|(or_string_to_js symbol_to_js x930);(Ojs.fun_to_js_args
                                                              (fun (x933 : _)
                                                                 ->
                                                                 x932
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x933 0)))|])
        let (once :
          t ->
            event:[ `altsvc ] ->
              listener:(alt:string -> origin:string -> stream:int -> unit) ->
                t)
          =
          fun (x941 : t) ->
            fun ~event:(x936 : [ `altsvc ]) ->
              fun
                ~listener:(x937 :
                            alt:string -> origin:string -> stream:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x941) "once"
                     [|((match x936 with
                         | `altsvc -> Ojs.string_to_js "altsvc"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x938 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x939 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x940 :
                                                                    Ojs.t) ->
                                                                    x937
                                                                    ~alt:(
                                                                    Ojs.string_of_js
                                                                    x938)
                                                                    ~origin:(
                                                                    Ojs.string_of_js
                                                                    x939)
                                                                    ~stream:(
                                                                    Ojs.int_of_js
                                                                    x940)))|])
        let (once' :
          t ->
            event:[ `origin ] -> listener:(origins:string list -> unit) -> t)
          =
          fun (x946 : t) ->
            fun ~event:(x942 : [ `origin ]) ->
              fun ~listener:(x943 : origins:string list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x946) "once"
                     [|((match x942 with
                         | `origin -> Ojs.string_to_js "origin"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x944 :
                                                                    Ojs.t) ->
                                                                    x943
                                                                    ~origins:(
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x944)))|])
        let (once'' :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x953 : t) ->
            fun ~event:(x947 : [ `connect ]) ->
              fun
                ~listener:(x948 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x953) "once"
                     [|((match x947 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x949 : Ojs.t) ->
                            fun (x950 : Ojs.t) ->
                              x948 ~session:(t_of_js x949)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x950)))|])
        let (once''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ClientHttp2Stream.t ->
                          headers:(IncomingHttpHeaders.t,
                            IncomingHttpStatusHeader.t) intersection2 ->
                            flags:int -> unit)
                -> t)
          =
          fun (x961 : t) ->
            fun ~event:(x954 : [ `stream ]) ->
              fun
                ~listener:(x955 :
                            stream:ClientHttp2Stream.t ->
                              headers:(IncomingHttpHeaders.t,
                                IncomingHttpStatusHeader.t) intersection2 ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x961) "once"
                     [|((match x954 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x956 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x957 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x960 :
                                                                    Ojs.t) ->
                                                                    x955
                                                                    ~stream:(
                                                                    ClientHttp2Stream.t_of_js
                                                                    x956)
                                                                    ~headers:(
                                                                    intersection2_of_js
                                                                    IncomingHttpHeaders.t_of_js
                                                                    IncomingHttpStatusHeader.t_of_js
                                                                    x957)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x960)))|])
        let (once'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x967 : t) ->
            fun ~event:(x962 : symbol or_string) ->
              fun ~listener:(x964 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x967) "once"
                     [|(or_string_to_js symbol_to_js x962);(Ojs.fun_to_js_args
                                                              (fun (x965 : _)
                                                                 ->
                                                                 x964
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x965 0)))|])
        let (prepend_listener :
          t ->
            event:[ `altsvc ] ->
              listener:(alt:string -> origin:string -> stream:int -> unit) ->
                t)
          =
          fun (x973 : t) ->
            fun ~event:(x968 : [ `altsvc ]) ->
              fun
                ~listener:(x969 :
                            alt:string -> origin:string -> stream:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x973) "prependListener"
                     [|((match x968 with
                         | `altsvc -> Ojs.string_to_js "altsvc"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x970 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x971 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x972 :
                                                                    Ojs.t) ->
                                                                    x969
                                                                    ~alt:(
                                                                    Ojs.string_of_js
                                                                    x970)
                                                                    ~origin:(
                                                                    Ojs.string_of_js
                                                                    x971)
                                                                    ~stream:(
                                                                    Ojs.int_of_js
                                                                    x972)))|])
        let (prepend_listener' :
          t ->
            event:[ `origin ] -> listener:(origins:string list -> unit) -> t)
          =
          fun (x978 : t) ->
            fun ~event:(x974 : [ `origin ]) ->
              fun ~listener:(x975 : origins:string list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x978) "prependListener"
                     [|((match x974 with
                         | `origin -> Ojs.string_to_js "origin"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x976 :
                                                                    Ojs.t) ->
                                                                    x975
                                                                    ~origins:(
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x976)))|])
        let (prepend_listener'' :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x985 : t) ->
            fun ~event:(x979 : [ `connect ]) ->
              fun
                ~listener:(x980 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x985) "prependListener"
                     [|((match x979 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x981 : Ojs.t) ->
                            fun (x982 : Ojs.t) ->
                              x980 ~session:(t_of_js x981)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x982)))|])
        let (prepend_listener''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ClientHttp2Stream.t ->
                          headers:(IncomingHttpHeaders.t,
                            IncomingHttpStatusHeader.t) intersection2 ->
                            flags:int -> unit)
                -> t)
          =
          fun (x993 : t) ->
            fun ~event:(x986 : [ `stream ]) ->
              fun
                ~listener:(x987 :
                            stream:ClientHttp2Stream.t ->
                              headers:(IncomingHttpHeaders.t,
                                IncomingHttpStatusHeader.t) intersection2 ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x993) "prependListener"
                     [|((match x986 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x988 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x989 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x992 :
                                                                    Ojs.t) ->
                                                                    x987
                                                                    ~stream:(
                                                                    ClientHttp2Stream.t_of_js
                                                                    x988)
                                                                    ~headers:(
                                                                    intersection2_of_js
                                                                    IncomingHttpHeaders.t_of_js
                                                                    IncomingHttpStatusHeader.t_of_js
                                                                    x989)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x992)))|])
        let (prepend_listener'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x999 : t) ->
            fun ~event:(x994 : symbol or_string) ->
              fun ~listener:(x996 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x999) "prependListener"
                     [|(or_string_to_js symbol_to_js x994);(Ojs.fun_to_js_args
                                                              (fun (x997 : _)
                                                                 ->
                                                                 x996
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x997 0)))|])
        let (prepend_once_listener :
          t ->
            event:[ `altsvc ] ->
              listener:(alt:string -> origin:string -> stream:int -> unit) ->
                t)
          =
          fun (x1005 : t) ->
            fun ~event:(x1000 : [ `altsvc ]) ->
              fun
                ~listener:(x1001 :
                            alt:string -> origin:string -> stream:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1005) "prependOnceListener"
                     [|((match x1000 with
                         | `altsvc -> Ojs.string_to_js "altsvc"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1002 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1003 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1004 :
                                                                    Ojs.t) ->
                                                                    x1001
                                                                    ~alt:(
                                                                    Ojs.string_of_js
                                                                    x1002)
                                                                    ~origin:(
                                                                    Ojs.string_of_js
                                                                    x1003)
                                                                    ~stream:(
                                                                    Ojs.int_of_js
                                                                    x1004)))|])
        let (prepend_once_listener' :
          t ->
            event:[ `origin ] -> listener:(origins:string list -> unit) -> t)
          =
          fun (x1010 : t) ->
            fun ~event:(x1006 : [ `origin ]) ->
              fun ~listener:(x1007 : origins:string list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1010) "prependOnceListener"
                     [|((match x1006 with
                         | `origin -> Ojs.string_to_js "origin"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1008 :
                                                                    Ojs.t) ->
                                                                    x1007
                                                                    ~origins:(
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x1008)))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1017 : t) ->
            fun ~event:(x1011 : [ `connect ]) ->
              fun
                ~listener:(x1012 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1017) "prependOnceListener"
                     [|((match x1011 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1013 : Ojs.t) ->
                            fun (x1014 : Ojs.t) ->
                              x1012 ~session:(t_of_js x1013)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1014)))|])
        let (prepend_once_listener''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ClientHttp2Stream.t ->
                          headers:(IncomingHttpHeaders.t,
                            IncomingHttpStatusHeader.t) intersection2 ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1025 : t) ->
            fun ~event:(x1018 : [ `stream ]) ->
              fun
                ~listener:(x1019 :
                            stream:ClientHttp2Stream.t ->
                              headers:(IncomingHttpHeaders.t,
                                IncomingHttpStatusHeader.t) intersection2 ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1025) "prependOnceListener"
                     [|((match x1018 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1020 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1021 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1024 :
                                                                    Ojs.t) ->
                                                                    x1019
                                                                    ~stream:(
                                                                    ClientHttp2Stream.t_of_js
                                                                    x1020)
                                                                    ~headers:(
                                                                    intersection2_of_js
                                                                    IncomingHttpHeaders.t_of_js
                                                                    IncomingHttpStatusHeader.t_of_js
                                                                    x1021)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1024)))|])
        let (prepend_once_listener'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1031 : t) ->
            fun ~event:(x1026 : symbol or_string) ->
              fun ~listener:(x1028 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1031) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x1026);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1029 : _)
                                                                  ->
                                                                  x1028
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1029 0)))|])
      end
    module AlternativeServiceOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1033 : Ojs.t) -> x1033
        and t_to_js : t -> Ojs.t = fun (x1032 : Ojs.t) -> x1032
        let (get_origin : t -> Url.URL.t or_string or_number) =
          fun (x1034 : t) ->
            or_number_of_js
              (fun (x1035 : Ojs.t) -> or_string_of_js Url.URL.t_of_js x1035)
              (Ojs.get_prop_ascii (t_to_js x1034) "origin")
        let (set_origin : t -> Url.URL.t or_string or_number -> unit) =
          fun (x1037 : t) ->
            fun (x1038 : Url.URL.t or_string or_number) ->
              Ojs.set_prop_ascii (t_to_js x1037) "origin"
                (or_number_to_js
                   (fun (x1039 : Url.URL.t or_string) ->
                      or_string_to_js Url.URL.t_to_js x1039) x1038)
      end
    module SessionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1042 : Ojs.t) -> x1042
        and t_to_js : t -> Ojs.t = fun (x1041 : Ojs.t) -> x1041
        let (get_max_deflate_dynamic_table_size : t -> int) =
          fun (x1043 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1043)
                 "maxDeflateDynamicTableSize")
        let (set_max_deflate_dynamic_table_size : t -> int -> unit) =
          fun (x1044 : t) ->
            fun (x1045 : int) ->
              Ojs.set_prop_ascii (t_to_js x1044) "maxDeflateDynamicTableSize"
                (Ojs.int_to_js x1045)
        let (get_max_session_memory : t -> int) =
          fun (x1046 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1046) "maxSessionMemory")
        let (set_max_session_memory : t -> int -> unit) =
          fun (x1047 : t) ->
            fun (x1048 : int) ->
              Ojs.set_prop_ascii (t_to_js x1047) "maxSessionMemory"
                (Ojs.int_to_js x1048)
        let (get_max_header_list_pairs : t -> int) =
          fun (x1049 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1049) "maxHeaderListPairs")
        let (set_max_header_list_pairs : t -> int -> unit) =
          fun (x1050 : t) ->
            fun (x1051 : int) ->
              Ojs.set_prop_ascii (t_to_js x1050) "maxHeaderListPairs"
                (Ojs.int_to_js x1051)
        let (get_max_outstanding_pings : t -> int) =
          fun (x1052 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1052) "maxOutstandingPings")
        let (set_max_outstanding_pings : t -> int -> unit) =
          fun (x1053 : t) ->
            fun (x1054 : int) ->
              Ojs.set_prop_ascii (t_to_js x1053) "maxOutstandingPings"
                (Ojs.int_to_js x1054)
        let (get_max_send_header_block_length : t -> int) =
          fun (x1055 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1055) "maxSendHeaderBlockLength")
        let (set_max_send_header_block_length : t -> int -> unit) =
          fun (x1056 : t) ->
            fun (x1057 : int) ->
              Ojs.set_prop_ascii (t_to_js x1056) "maxSendHeaderBlockLength"
                (Ojs.int_to_js x1057)
        let (get_padding_strategy : t -> int) =
          fun (x1058 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1058) "paddingStrategy")
        let (set_padding_strategy : t -> int -> unit) =
          fun (x1059 : t) ->
            fun (x1060 : int) ->
              Ojs.set_prop_ascii (t_to_js x1059) "paddingStrategy"
                (Ojs.int_to_js x1060)
        let (get_peer_max_concurrent_streams : t -> int) =
          fun (x1061 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1061) "peerMaxConcurrentStreams")
        let (set_peer_max_concurrent_streams : t -> int -> unit) =
          fun (x1062 : t) ->
            fun (x1063 : int) ->
              Ojs.set_prop_ascii (t_to_js x1062) "peerMaxConcurrentStreams"
                (Ojs.int_to_js x1063)
        let (get_settings : t -> Settings.t) =
          fun (x1064 : t) ->
            Settings.t_of_js (Ojs.get_prop_ascii (t_to_js x1064) "settings")
        let (set_settings : t -> Settings.t -> unit) =
          fun (x1065 : t) ->
            fun (x1066 : Settings.t) ->
              Ojs.set_prop_ascii (t_to_js x1065) "settings"
                (Settings.t_to_js x1066)
        let (select_padding : t -> frame_len:int -> max_frame_len:int -> int)
          =
          fun (x1069 : t) ->
            fun ~frame_len:(x1067 : int) ->
              fun ~max_frame_len:(x1068 : int) ->
                Ojs.int_of_js
                  (Ojs.call (t_to_js x1069) "selectPadding"
                     [|(Ojs.int_to_js x1067);(Ojs.int_to_js x1068)|])
        let (create_connection :
          t -> authority:Url.URL.t -> option:t -> Stream.Duplex.t) =
          fun (x1072 : t) ->
            fun ~authority:(x1070 : Url.URL.t) ->
              fun ~option:(x1071 : t) ->
                Stream.Duplex.t_of_js
                  (Ojs.call (t_to_js x1072) "createConnection"
                     [|(Url.URL.t_to_js x1070);(t_to_js x1071)|])
      end
    module ClientSessionOptions =
      struct
        include struct include SessionOptions end
        let (get_max_reserved_remote_streams : t -> int) =
          fun (x1073 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1073) "maxReservedRemoteStreams")
        let (set_max_reserved_remote_streams : t -> int -> unit) =
          fun (x1074 : t) ->
            fun (x1075 : int) ->
              Ojs.set_prop_ascii (t_to_js x1074) "maxReservedRemoteStreams"
                (Ojs.int_to_js x1075)
        let (create_connection :
          t ->
            authority:Url.URL.t -> option:SessionOptions.t -> Stream.Duplex.t)
          =
          fun (x1078 : t) ->
            fun ~authority:(x1076 : Url.URL.t) ->
              fun ~option:(x1077 : SessionOptions.t) ->
                Stream.Duplex.t_of_js
                  (Ojs.call (t_to_js x1078) "createConnection"
                     [|(Url.URL.t_to_js x1076);(SessionOptions.t_to_js x1077)|])
        let (get_protocol : t -> [ `http_  | `https_ ]) =
          fun (x1079 : t) ->
            let x1080 = Ojs.get_prop_ascii (t_to_js x1079) "protocol" in
            match Ojs.string_of_js x1080 with
            | "http:" -> `http_
            | "https:" -> `https_
            | _ -> assert false
        let (set_protocol : t -> [ `http_  | `https_ ] -> unit) =
          fun (x1081 : t) ->
            fun (x1082 : [ `http_  | `https_ ]) ->
              Ojs.set_prop_ascii (t_to_js x1081) "protocol"
                (match x1082 with
                 | `http_ -> Ojs.string_to_js "http"
                 | `https_ -> Ojs.string_to_js "https")
      end
    module ServerSessionOptions =
      struct
        include struct include SessionOptions end
        let (get_http1IncomingMessage : t -> any) =
          fun (x1083 : t) ->
            any_of_js
              (Ojs.get_prop_ascii (t_to_js x1083) "Http1IncomingMessage")
        let (set_http1IncomingMessage : t -> any -> unit) =
          fun (x1084 : t) ->
            fun (x1085 : any) ->
              Ojs.set_prop_ascii (t_to_js x1084) "Http1IncomingMessage"
                (any_to_js x1085)
        let (get_http1ServerResponse : t -> any) =
          fun (x1086 : t) ->
            any_of_js
              (Ojs.get_prop_ascii (t_to_js x1086) "Http1ServerResponse")
        let (set_http1ServerResponse : t -> any -> unit) =
          fun (x1087 : t) ->
            fun (x1088 : any) ->
              Ojs.set_prop_ascii (t_to_js x1087) "Http1ServerResponse"
                (any_to_js x1088)
        let (get_http2ServerRequest : t -> any) =
          fun (x1089 : t) ->
            any_of_js
              (Ojs.get_prop_ascii (t_to_js x1089) "Http2ServerRequest")
        let (set_http2ServerRequest : t -> any -> unit) =
          fun (x1090 : t) ->
            fun (x1091 : any) ->
              Ojs.set_prop_ascii (t_to_js x1090) "Http2ServerRequest"
                (any_to_js x1091)
        let (get_http2ServerResponse : t -> any) =
          fun (x1092 : t) ->
            any_of_js
              (Ojs.get_prop_ascii (t_to_js x1092) "Http2ServerResponse")
        let (set_http2ServerResponse : t -> any -> unit) =
          fun (x1093 : t) ->
            fun (x1094 : any) ->
              Ojs.set_prop_ascii (t_to_js x1093) "Http2ServerResponse"
                (any_to_js x1094)
      end
    module SecureClientSessionOptions =
      struct
        include struct include ClientSessionOptions end
        let (cast' : t -> Tls.ConnectionOptions.t) =
          fun (x1095 : t) -> Tls.ConnectionOptions.t_of_js (t_to_js x1095)
      end
    module SecureServerSessionOptions =
      struct
        include struct include ServerSessionOptions end
        let (cast' : t -> Tls.TlsOptions.t) =
          fun (x1096 : t) -> Tls.TlsOptions.t_of_js (t_to_js x1096)
      end
    module ServerOptions =
      struct include struct include ServerSessionOptions end end
    module SecureServerOptions =
      struct
        include struct include SecureServerSessionOptions end
        let (get_allow_http1 : t -> bool) =
          fun (x1097 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1097) "allowHTTP1")
        let (set_allow_http1 : t -> bool -> unit) =
          fun (x1098 : t) ->
            fun (x1099 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1098) "allowHTTP1"
                (Ojs.bool_to_js x1099)
        let (get_origins : t -> string list) =
          fun (x1100 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1100) "origins")
        let (set_origins : t -> string list -> unit) =
          fun (x1102 : t) ->
            fun (x1103 : string list) ->
              Ojs.set_prop_ascii (t_to_js x1102) "origins"
                (Ojs.list_to_js Ojs.string_to_js x1103)
      end
    module Http2ServerRequest =
      struct
        include struct include Stream.Readable end
        let (create :
          stream:ServerHttp2Stream.t ->
            headers:IncomingHttpHeaders.t ->
              options:Stream.ReadableOptions.t ->
                raw_headers:string list -> t)
          =
          fun ~stream:(x1105 : ServerHttp2Stream.t) ->
            fun ~headers:(x1106 : IncomingHttpHeaders.t) ->
              fun ~options:(x1107 : Stream.ReadableOptions.t) ->
                fun ~raw_headers:(x1108 : string list) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii Import.http2 "Http2ServerRequest")
                       [|(ServerHttp2Stream.t_to_js x1105);(IncomingHttpHeaders.t_to_js
                                                              x1106);(
                         Stream.ReadableOptions.t_to_js x1107);(Ojs.list_to_js
                                                                  Ojs.string_to_js
                                                                  x1108)|])
        let (get_aborted : t -> bool) =
          fun (x1110 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1110) "aborted")
        let (get_authority : t -> string) =
          fun (x1111 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1111) "authority")
        let (get_connection : t -> (Net.Socket.t, Tls.TLSSocket.t) union2) =
          fun (x1112 : t) ->
            union2_of_js Net.Socket.t_of_js Tls.TLSSocket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1112) "connection")
        let (get_complete : t -> bool) =
          fun (x1115 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1115) "complete")
        let (get_headers : t -> IncomingHttpHeaders.t) =
          fun (x1116 : t) ->
            IncomingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1116) "headers")
        let (get_http_version : t -> string) =
          fun (x1117 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1117) "httpVersion")
        let (get_http_version_minor : t -> int) =
          fun (x1118 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1118) "httpVersionMinor")
        let (get_http_version_major : t -> int) =
          fun (x1119 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1119) "httpVersionMajor")
        let (get_method : t -> string) =
          fun (x1120 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1120) "method")
        let (get_raw_headers : t -> string list) =
          fun (x1121 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1121) "rawHeaders")
        let (get_raw_trailers : t -> string list) =
          fun (x1123 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1123) "rawTrailers")
        let (get_scheme : t -> string) =
          fun (x1125 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1125) "scheme")
        let (get_socket : t -> (Net.Socket.t, Tls.TLSSocket.t) union2) =
          fun (x1126 : t) ->
            union2_of_js Net.Socket.t_of_js Tls.TLSSocket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1126) "socket")
        let (get_stream : t -> ServerHttp2Stream.t) =
          fun (x1129 : t) ->
            ServerHttp2Stream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1129) "stream")
        let (get_trailers : t -> IncomingHttpHeaders.t) =
          fun (x1130 : t) ->
            IncomingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1130) "trailers")
        let (get_url : t -> string) =
          fun (x1131 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1131) "url")
        let (set_timeout :
          t -> msecs:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x1136 : t) ->
            fun ~msecs:(x1132 : int) ->
              fun ?callback:(x1133 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x1137 = t_to_js x1136 in
                     Ojs.call (Ojs.get_prop_ascii x1137 "setTimeout") "apply"
                       [|x1137;((let x1134 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1134 "push"
                                      [|(Ojs.int_to_js x1132)|]);
                                 (match x1133 with
                                  | Some x1135 ->
                                      ignore
                                        (Ojs.call x1134 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x1135 ()))|])
                                  | None -> ());
                                 x1134))|])
        let (read : t -> ?size:int -> unit -> Buffer.t or_string or_null) =
          fun (x1141 : t) ->
            fun ?size:(x1138 : int option) ->
              fun () ->
                or_null_of_js
                  (fun (x1143 : Ojs.t) ->
                     or_string_of_js Buffer.t_of_js x1143)
                  (let x1142 = t_to_js x1141 in
                   Ojs.call (Ojs.get_prop_ascii x1142 "read") "apply"
                     [|x1142;((let x1139 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x1138 with
                                | Some x1140 ->
                                    ignore
                                      (Ojs.call x1139 "push"
                                         [|(Ojs.int_to_js x1140)|])
                                | None -> ());
                               x1139))|])
        let (add_listener :
          t ->
            event:[ `aborted ] ->
              listener:(hadError:bool -> code:int -> unit) -> t)
          =
          fun (x1149 : t) ->
            fun ~event:(x1145 : [ `aborted ]) ->
              fun ~listener:(x1146 : hadError:bool -> code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1149) "addListener"
                     [|((match x1145 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 2
                         (fun (x1147 : Ojs.t) ->
                            fun (x1148 : Ojs.t) ->
                              x1146 ~hadError:(Ojs.bool_of_js x1147)
                                ~code:(Ojs.int_of_js x1148)))|])
        let (add_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1152 : t) ->
            fun ~event:(x1150 : [ `close ]) ->
              fun ~listener:(x1151 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1152) "addListener"
                     [|((match x1150 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1151 ()))|])
        let (add_listener'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x1157 : t) ->
            fun ~event:(x1153 : [ `data ]) ->
              fun ~listener:(x1154 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1157) "addListener"
                     [|((match x1153 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x1155 : Ojs.t) ->
                            x1154
                              ~chunk:(or_string_of_js Buffer.t_of_js x1155)))|])
        let (add_listener''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x1160 : t) ->
            fun ~event:(x1158 : [ `end_ ]) ->
              fun ~listener:(x1159 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1160) "addListener"
                     [|((match x1158 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x1159 ()))|])
        let (add_listener'''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x1163 : t) ->
            fun ~event:(x1161 : [ `readable ]) ->
              fun ~listener:(x1162 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1163) "addListener"
                     [|((match x1161 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x1162 ()))|])
        let (add_listener''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x1167 : t) ->
            fun ~event:(x1164 : [ `error ]) ->
              fun ~listener:(x1165 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1167) "addListener"
                     [|((match x1164 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1166 :
                                                                    Ojs.t) ->
                                                                    x1165
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x1166)))|])
        let (add_listener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1173 : t) ->
            fun ~event:(x1168 : symbol or_string) ->
              fun ~listener:(x1170 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1173) "addListener"
                     [|(or_string_to_js symbol_to_js x1168);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1171 : _)
                                                                  ->
                                                                  x1170
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1171 0)))|])
        let (emit :
          t -> event:[ `aborted ] -> had_error:bool -> code:int -> bool) =
          fun (x1177 : t) ->
            fun ~event:(x1174 : [ `aborted ]) ->
              fun ~had_error:(x1175 : bool) ->
                fun ~code:(x1176 : int) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x1177) "emit"
                       [|((match x1174 with
                           | `aborted -> Ojs.string_to_js "aborted"));(
                         Ojs.bool_to_js x1175);(Ojs.int_to_js x1176)|])
        let (emit' : t -> event:[ `close ] -> bool) =
          fun (x1179 : t) ->
            fun ~event:(x1178 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1179) "emit"
                   [|((match x1178 with | `close -> Ojs.string_to_js "close"))|])
        let (emit'' :
          t -> event:[ `data ] -> chunk:Buffer.t or_string -> bool) =
          fun (x1183 : t) ->
            fun ~event:(x1180 : [ `data ]) ->
              fun ~chunk:(x1181 : Buffer.t or_string) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1183) "emit"
                     [|((match x1180 with | `data -> Ojs.string_to_js "data"));(
                       or_string_to_js Buffer.t_to_js x1181)|])
        let (emit''' : t -> event:[ `end_ ] -> bool) =
          fun (x1185 : t) ->
            fun ~event:(x1184 : [ `end_ ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1185) "emit"
                   [|((match x1184 with | `end_ -> Ojs.string_to_js "end"))|])
        let (emit'''' : t -> event:[ `readable ] -> bool) =
          fun (x1187 : t) ->
            fun ~event:(x1186 : [ `readable ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1187) "emit"
                   [|((match x1186 with
                       | `readable -> Ojs.string_to_js "readable"))|])
        let (emit''''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x1190 : t) ->
            fun ~event:(x1188 : [ `error ]) ->
              fun ~err:(x1189 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1190) "emit"
                     [|((match x1188 with
                         | `error -> Ojs.string_to_js "error"));(Error.t_to_js
                                                                   x1189)|])
        let (emit'''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x1196 : t) ->
            fun ~event:(x1191 : symbol or_string) ->
              fun ~args:(x1192 : any list) ->
                Ojs.bool_of_js
                  (let x1197 = t_to_js x1196 in
                   Ojs.call (Ojs.get_prop_ascii x1197 "emit") "apply"
                     [|x1197;((let x1193 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1193 "push"
                                    [|(or_string_to_js symbol_to_js x1191)|]);
                               List.iter
                                 (fun (x1194 : any) ->
                                    ignore
                                      (Ojs.call x1193 "push"
                                         [|(any_to_js x1194)|])) x1192;
                               x1193))|])
        let (on :
          t ->
            event:[ `aborted ] ->
              listener:(hadError:bool -> code:int -> unit) -> t)
          =
          fun (x1202 : t) ->
            fun ~event:(x1198 : [ `aborted ]) ->
              fun ~listener:(x1199 : hadError:bool -> code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1202) "on"
                     [|((match x1198 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 2
                         (fun (x1200 : Ojs.t) ->
                            fun (x1201 : Ojs.t) ->
                              x1199 ~hadError:(Ojs.bool_of_js x1200)
                                ~code:(Ojs.int_of_js x1201)))|])
        let (on' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1205 : t) ->
            fun ~event:(x1203 : [ `close ]) ->
              fun ~listener:(x1204 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1205) "on"
                     [|((match x1203 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1204 ()))|])
        let (on'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x1210 : t) ->
            fun ~event:(x1206 : [ `data ]) ->
              fun ~listener:(x1207 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1210) "on"
                     [|((match x1206 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x1208 : Ojs.t) ->
                            x1207
                              ~chunk:(or_string_of_js Buffer.t_of_js x1208)))|])
        let (on''' : t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x1213 : t) ->
            fun ~event:(x1211 : [ `end_ ]) ->
              fun ~listener:(x1212 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1213) "on"
                     [|((match x1211 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x1212 ()))|])
        let (on'''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x1216 : t) ->
            fun ~event:(x1214 : [ `readable ]) ->
              fun ~listener:(x1215 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1216) "on"
                     [|((match x1214 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x1215 ()))|])
        let (on''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x1220 : t) ->
            fun ~event:(x1217 : [ `error ]) ->
              fun ~listener:(x1218 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1220) "on"
                     [|((match x1217 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1219 :
                                                                    Ojs.t) ->
                                                                    x1218
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x1219)))|])
        let (on'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1226 : t) ->
            fun ~event:(x1221 : symbol or_string) ->
              fun ~listener:(x1223 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1226) "on"
                     [|(or_string_to_js symbol_to_js x1221);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1224 : _)
                                                                  ->
                                                                  x1223
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1224 0)))|])
        let (once :
          t ->
            event:[ `aborted ] ->
              listener:(hadError:bool -> code:int -> unit) -> t)
          =
          fun (x1231 : t) ->
            fun ~event:(x1227 : [ `aborted ]) ->
              fun ~listener:(x1228 : hadError:bool -> code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1231) "once"
                     [|((match x1227 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 2
                         (fun (x1229 : Ojs.t) ->
                            fun (x1230 : Ojs.t) ->
                              x1228 ~hadError:(Ojs.bool_of_js x1229)
                                ~code:(Ojs.int_of_js x1230)))|])
        let (once' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1234 : t) ->
            fun ~event:(x1232 : [ `close ]) ->
              fun ~listener:(x1233 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1234) "once"
                     [|((match x1232 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1233 ()))|])
        let (once'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x1239 : t) ->
            fun ~event:(x1235 : [ `data ]) ->
              fun ~listener:(x1236 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1239) "once"
                     [|((match x1235 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x1237 : Ojs.t) ->
                            x1236
                              ~chunk:(or_string_of_js Buffer.t_of_js x1237)))|])
        let (once''' : t -> event:[ `end_ ] -> listener:(unit -> unit) -> t)
          =
          fun (x1242 : t) ->
            fun ~event:(x1240 : [ `end_ ]) ->
              fun ~listener:(x1241 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1242) "once"
                     [|((match x1240 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x1241 ()))|])
        let (once'''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x1245 : t) ->
            fun ~event:(x1243 : [ `readable ]) ->
              fun ~listener:(x1244 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1245) "once"
                     [|((match x1243 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x1244 ()))|])
        let (once''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x1249 : t) ->
            fun ~event:(x1246 : [ `error ]) ->
              fun ~listener:(x1247 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1249) "once"
                     [|((match x1246 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1248 :
                                                                    Ojs.t) ->
                                                                    x1247
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x1248)))|])
        let (once'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1255 : t) ->
            fun ~event:(x1250 : symbol or_string) ->
              fun ~listener:(x1252 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1255) "once"
                     [|(or_string_to_js symbol_to_js x1250);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1253 : _)
                                                                  ->
                                                                  x1252
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1253 0)))|])
        let (prepend_listener :
          t ->
            event:[ `aborted ] ->
              listener:(hadError:bool -> code:int -> unit) -> t)
          =
          fun (x1260 : t) ->
            fun ~event:(x1256 : [ `aborted ]) ->
              fun ~listener:(x1257 : hadError:bool -> code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1260) "prependListener"
                     [|((match x1256 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 2
                         (fun (x1258 : Ojs.t) ->
                            fun (x1259 : Ojs.t) ->
                              x1257 ~hadError:(Ojs.bool_of_js x1258)
                                ~code:(Ojs.int_of_js x1259)))|])
        let (prepend_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1263 : t) ->
            fun ~event:(x1261 : [ `close ]) ->
              fun ~listener:(x1262 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1263) "prependListener"
                     [|((match x1261 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1262 ()))|])
        let (prepend_listener'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x1268 : t) ->
            fun ~event:(x1264 : [ `data ]) ->
              fun ~listener:(x1265 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1268) "prependListener"
                     [|((match x1264 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x1266 : Ojs.t) ->
                            x1265
                              ~chunk:(or_string_of_js Buffer.t_of_js x1266)))|])
        let (prepend_listener''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x1271 : t) ->
            fun ~event:(x1269 : [ `end_ ]) ->
              fun ~listener:(x1270 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1271) "prependListener"
                     [|((match x1269 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x1270 ()))|])
        let (prepend_listener'''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x1274 : t) ->
            fun ~event:(x1272 : [ `readable ]) ->
              fun ~listener:(x1273 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1274) "prependListener"
                     [|((match x1272 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x1273 ()))|])
        let (prepend_listener''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x1278 : t) ->
            fun ~event:(x1275 : [ `error ]) ->
              fun ~listener:(x1276 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1278) "prependListener"
                     [|((match x1275 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1277 :
                                                                    Ojs.t) ->
                                                                    x1276
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x1277)))|])
        let (prepend_listener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1284 : t) ->
            fun ~event:(x1279 : symbol or_string) ->
              fun ~listener:(x1281 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1284) "prependListener"
                     [|(or_string_to_js symbol_to_js x1279);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1282 : _)
                                                                  ->
                                                                  x1281
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1282 0)))|])
        let (prepend_once_listener :
          t ->
            event:[ `aborted ] ->
              listener:(hadError:bool -> code:int -> unit) -> t)
          =
          fun (x1289 : t) ->
            fun ~event:(x1285 : [ `aborted ]) ->
              fun ~listener:(x1286 : hadError:bool -> code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1289) "prependOnceListener"
                     [|((match x1285 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 2
                         (fun (x1287 : Ojs.t) ->
                            fun (x1288 : Ojs.t) ->
                              x1286 ~hadError:(Ojs.bool_of_js x1287)
                                ~code:(Ojs.int_of_js x1288)))|])
        let (prepend_once_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1292 : t) ->
            fun ~event:(x1290 : [ `close ]) ->
              fun ~listener:(x1291 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1292) "prependOnceListener"
                     [|((match x1290 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1291 ()))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x1297 : t) ->
            fun ~event:(x1293 : [ `data ]) ->
              fun ~listener:(x1294 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1297) "prependOnceListener"
                     [|((match x1293 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x1295 : Ojs.t) ->
                            x1294
                              ~chunk:(or_string_of_js Buffer.t_of_js x1295)))|])
        let (prepend_once_listener''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x1300 : t) ->
            fun ~event:(x1298 : [ `end_ ]) ->
              fun ~listener:(x1299 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1300) "prependOnceListener"
                     [|((match x1298 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x1299 ()))|])
        let (prepend_once_listener'''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x1303 : t) ->
            fun ~event:(x1301 : [ `readable ]) ->
              fun ~listener:(x1302 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1303) "prependOnceListener"
                     [|((match x1301 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x1302 ()))|])
        let (prepend_once_listener''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x1307 : t) ->
            fun ~event:(x1304 : [ `error ]) ->
              fun ~listener:(x1305 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1307) "prependOnceListener"
                     [|((match x1304 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1306 :
                                                                    Ojs.t) ->
                                                                    x1305
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x1306)))|])
        let (prepend_once_listener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1313 : t) ->
            fun ~event:(x1308 : symbol or_string) ->
              fun ~listener:(x1310 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1313) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x1308);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1311 : _)
                                                                  ->
                                                                  x1310
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1311 0)))|])
      end
    module Http2ServerResponse =
      struct
        include struct include Stream.Writable end
        let (create : stream:ServerHttp2Stream.t -> t) =
          fun ~stream:(x1314 : ServerHttp2Stream.t) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii Import.http2 "Http2ServerResponse")
                 [|(ServerHttp2Stream.t_to_js x1314)|])
        let (get_connection : t -> (Net.Socket.t, Tls.TLSSocket.t) union2) =
          fun (x1315 : t) ->
            union2_of_js Net.Socket.t_of_js Tls.TLSSocket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1315) "connection")
        let (get_finished : t -> bool) =
          fun (x1318 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1318) "finished")
        let (get_headers_sent : t -> bool) =
          fun (x1319 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1319) "headersSent")
        let (get_socket : t -> (Net.Socket.t, Tls.TLSSocket.t) union2) =
          fun (x1320 : t) ->
            union2_of_js Net.Socket.t_of_js Tls.TLSSocket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1320) "socket")
        let (get_stream : t -> ServerHttp2Stream.t) =
          fun (x1323 : t) ->
            ServerHttp2Stream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1323) "stream")
        let (get_send_date : t -> bool) =
          fun (x1324 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1324) "sendDate")
        let (set_send_date : t -> bool -> unit) =
          fun (x1325 : t) ->
            fun (x1326 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1325) "sendDate"
                (Ojs.bool_to_js x1326)
        let (get_status_code : t -> int) =
          fun (x1327 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1327) "statusCode")
        let (set_status_code : t -> int -> unit) =
          fun (x1328 : t) ->
            fun (x1329 : int) ->
              Ojs.set_prop_ascii (t_to_js x1328) "statusCode"
                (Ojs.int_to_js x1329)
        let (get_status_message : t -> [ `L_s0 ]) =
          fun (x1330 : t) ->
            let x1331 = Ojs.get_prop_ascii (t_to_js x1330) "statusMessage" in
            match Ojs.string_of_js x1331 with
            | "" -> `L_s0
            | _ -> assert false
        let (set_status_message : t -> [ `L_s0 ] -> unit) =
          fun (x1332 : t) ->
            fun (x1333 : [ `L_s0 ]) ->
              Ojs.set_prop_ascii (t_to_js x1332) "statusMessage"
                (match x1333 with | `L_s0 -> Ojs.string_to_js "LS0")
        let (add_trailers :
          t -> trailers:Node_http.Http.OutgoingHttpHeaders.t -> unit) =
          fun (x1335 : t) ->
            fun ~trailers:(x1334 : Node_http.Http.OutgoingHttpHeaders.t) ->
              ignore
                (Ojs.call (t_to_js x1335) "addTrailers"
                   [|(Node_http.Http.OutgoingHttpHeaders.t_to_js x1334)|])
        let (end_ : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x1339 : t) ->
            fun ?callback:(x1336 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x1340 = t_to_js x1339 in
                   Ojs.call (Ojs.get_prop_ascii x1340 "end") "apply"
                     [|x1340;((let x1337 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x1336 with
                                | Some x1338 ->
                                    ignore
                                      (Ojs.call x1337 "push"
                                         [|(Ojs.fun_to_js 1
                                              (fun _ -> x1338 ()))|])
                                | None -> ());
                               x1337))|])
        let (end_' :
          t ->
            data:Uint8Array.t or_string ->
              ?callback:(unit -> unit) -> unit -> unit)
          =
          fun (x1346 : t) ->
            fun ~data:(x1341 : Uint8Array.t or_string) ->
              fun ?callback:(x1342 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x1347 = t_to_js x1346 in
                     Ojs.call (Ojs.get_prop_ascii x1347 "end") "apply"
                       [|x1347;((let x1343 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1343 "push"
                                      [|(or_string_to_js Uint8Array.t_to_js
                                           x1341)|]);
                                 (match x1342 with
                                  | Some x1344 ->
                                      ignore
                                        (Ojs.call x1343 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x1344 ()))|])
                                  | None -> ());
                                 x1343))|])
        let (end_'' :
          t ->
            data:Uint8Array.t or_string ->
              encoding:BufferEncoding.t ->
                ?callback:(unit -> unit) -> unit -> unit)
          =
          fun (x1354 : t) ->
            fun ~data:(x1348 : Uint8Array.t or_string) ->
              fun ~encoding:(x1349 : BufferEncoding.t) ->
                fun ?callback:(x1350 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x1355 = t_to_js x1354 in
                       Ojs.call (Ojs.get_prop_ascii x1355 "end") "apply"
                         [|x1355;((let x1351 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1351 "push"
                                        [|(or_string_to_js Uint8Array.t_to_js
                                             x1348)|]);
                                   ignore
                                     (Ojs.call x1351 "push"
                                        [|(BufferEncoding.t_to_js x1349)|]);
                                   (match x1350 with
                                    | Some x1352 ->
                                        ignore
                                          (Ojs.call x1351 "push"
                                             [|(Ojs.fun_to_js 1
                                                  (fun _ -> x1352 ()))|])
                                    | None -> ());
                                   x1351))|])
        let (get_header : t -> name:string -> string) =
          fun (x1357 : t) ->
            fun ~name:(x1356 : string) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x1357) "getHeader"
                   [|(Ojs.string_to_js x1356)|])
        let (get_header_names : t -> string list) =
          fun (x1358 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x1358) "getHeaderNames" [||])
        let (get_headers : t -> Node_http.Http.OutgoingHttpHeaders.t) =
          fun (x1360 : t) ->
            Node_http.Http.OutgoingHttpHeaders.t_of_js
              (Ojs.call (t_to_js x1360) "getHeaders" [||])
        let (has_header : t -> name:string -> bool) =
          fun (x1362 : t) ->
            fun ~name:(x1361 : string) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1362) "hasHeader"
                   [|(Ojs.string_to_js x1361)|])
        let (remove_header : t -> name:string -> unit) =
          fun (x1364 : t) ->
            fun ~name:(x1363 : string) ->
              ignore
                (Ojs.call (t_to_js x1364) "removeHeader"
                   [|(Ojs.string_to_js x1363)|])
        let (set_header :
          t -> name:string -> value:string list or_string or_number -> unit)
          =
          fun (x1370 : t) ->
            fun ~name:(x1365 : string) ->
              fun ~value:(x1366 : string list or_string or_number) ->
                ignore
                  (Ojs.call (t_to_js x1370) "setHeader"
                     [|(Ojs.string_to_js x1365);(or_number_to_js
                                                   (fun
                                                      (x1367 :
                                                        string list or_string)
                                                      ->
                                                      or_string_to_js
                                                        (fun
                                                           (x1368 :
                                                             string list)
                                                           ->
                                                           Ojs.list_to_js
                                                             Ojs.string_to_js
                                                             x1368) x1367)
                                                   x1366)|])
        let (set_timeout :
          t -> msecs:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x1375 : t) ->
            fun ~msecs:(x1371 : int) ->
              fun ?callback:(x1372 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x1376 = t_to_js x1375 in
                     Ojs.call (Ojs.get_prop_ascii x1376 "setTimeout") "apply"
                       [|x1376;((let x1373 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1373 "push"
                                      [|(Ojs.int_to_js x1371)|]);
                                 (match x1372 with
                                  | Some x1374 ->
                                      ignore
                                        (Ojs.call x1373 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x1374 ()))|])
                                  | None -> ());
                                 x1373))|])
        let (write :
          t ->
            chunk:Uint8Array.t or_string ->
              ?callback:(err:Error.t -> unit) -> unit -> bool)
          =
          fun (x1383 : t) ->
            fun ~chunk:(x1377 : Uint8Array.t or_string) ->
              fun ?callback:(x1378 : (err:Error.t -> unit) option) ->
                fun () ->
                  Ojs.bool_of_js
                    (let x1384 = t_to_js x1383 in
                     Ojs.call (Ojs.get_prop_ascii x1384 "write") "apply"
                       [|x1384;((let x1379 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1379 "push"
                                      [|(or_string_to_js Uint8Array.t_to_js
                                           x1377)|]);
                                 (match x1378 with
                                  | Some x1380 ->
                                      ignore
                                        (Ojs.call x1379 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun (x1381 : Ojs.t) ->
                                                   x1380
                                                     ~err:(Error.t_of_js
                                                             x1381)))|])
                                  | None -> ());
                                 x1379))|])
        let (write' :
          t ->
            chunk:Uint8Array.t or_string ->
              encoding:BufferEncoding.t ->
                ?callback:(err:Error.t -> unit) -> unit -> bool)
          =
          fun (x1392 : t) ->
            fun ~chunk:(x1385 : Uint8Array.t or_string) ->
              fun ~encoding:(x1386 : BufferEncoding.t) ->
                fun ?callback:(x1387 : (err:Error.t -> unit) option) ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x1393 = t_to_js x1392 in
                       Ojs.call (Ojs.get_prop_ascii x1393 "write") "apply"
                         [|x1393;((let x1388 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1388 "push"
                                        [|(or_string_to_js Uint8Array.t_to_js
                                             x1385)|]);
                                   ignore
                                     (Ojs.call x1388 "push"
                                        [|(BufferEncoding.t_to_js x1386)|]);
                                   (match x1387 with
                                    | Some x1389 ->
                                        ignore
                                          (Ojs.call x1388 "push"
                                             [|(Ojs.fun_to_js 1
                                                  (fun (x1390 : Ojs.t) ->
                                                     x1389
                                                       ~err:(Error.t_of_js
                                                               x1390)))|])
                                    | None -> ());
                                   x1388))|])
        let (write_continue : t -> unit) =
          fun (x1394 : t) ->
            ignore (Ojs.call (t_to_js x1394) "writeContinue" [||])
        let (write_head :
          t ->
            status_code:int ->
              ?headers:Node_http.Http.OutgoingHttpHeaders.t -> unit -> t)
          =
          fun (x1399 : t) ->
            fun ~status_code:(x1395 : int) ->
              fun
                ?headers:(x1396 :
                           Node_http.Http.OutgoingHttpHeaders.t option)
                ->
                fun () ->
                  t_of_js
                    (let x1400 = t_to_js x1399 in
                     Ojs.call (Ojs.get_prop_ascii x1400 "writeHead") "apply"
                       [|x1400;((let x1397 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1397 "push"
                                      [|(Ojs.int_to_js x1395)|]);
                                 (match x1396 with
                                  | Some x1398 ->
                                      ignore
                                        (Ojs.call x1397 "push"
                                           [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                                x1398)|])
                                  | None -> ());
                                 x1397))|])
        let (write_head' :
          t ->
            status_code:int ->
              status_message:string ->
                ?headers:Node_http.Http.OutgoingHttpHeaders.t -> unit -> t)
          =
          fun (x1406 : t) ->
            fun ~status_code:(x1401 : int) ->
              fun ~status_message:(x1402 : string) ->
                fun
                  ?headers:(x1403 :
                             Node_http.Http.OutgoingHttpHeaders.t option)
                  ->
                  fun () ->
                    t_of_js
                      (let x1407 = t_to_js x1406 in
                       Ojs.call (Ojs.get_prop_ascii x1407 "writeHead")
                         "apply"
                         [|x1407;((let x1404 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1404 "push"
                                        [|(Ojs.int_to_js x1401)|]);
                                   ignore
                                     (Ojs.call x1404 "push"
                                        [|(Ojs.string_to_js x1402)|]);
                                   (match x1403 with
                                    | Some x1405 ->
                                        ignore
                                          (Ojs.call x1404 "push"
                                             [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                                  x1405)|])
                                    | None -> ());
                                   x1404))|])
        let (create_push_response :
          t ->
            headers:Node_http.Http.OutgoingHttpHeaders.t ->
              callback:(err:Error.t or_null -> res:t -> unit) -> unit)
          =
          fun (x1413 : t) ->
            fun ~headers:(x1408 : Node_http.Http.OutgoingHttpHeaders.t) ->
              fun ~callback:(x1409 : err:Error.t or_null -> res:t -> unit) ->
                ignore
                  (Ojs.call (t_to_js x1413) "createPushResponse"
                     [|(Node_http.Http.OutgoingHttpHeaders.t_to_js x1408);(
                       Ojs.fun_to_js 2
                         (fun (x1410 : Ojs.t) ->
                            fun (x1412 : Ojs.t) ->
                              x1409 ~err:(or_null_of_js Error.t_of_js x1410)
                                ~res:(t_of_js x1412)))|])
        let (add_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1416 : t) ->
            fun ~event:(x1414 : [ `close ]) ->
              fun ~listener:(x1415 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1416) "addListener"
                     [|((match x1414 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1415 ()))|])
        let (add_listener' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x1419 : t) ->
            fun ~event:(x1417 : [ `drain ]) ->
              fun ~listener:(x1418 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1419) "addListener"
                     [|((match x1417 with
                         | `drain -> Ojs.string_to_js "drain"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1418 ()))|])
        let (add_listener'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x1423 : t) ->
            fun ~event:(x1420 : [ `error ]) ->
              fun ~listener:(x1421 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1423) "addListener"
                     [|((match x1420 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1422 :
                                                                    Ojs.t) ->
                                                                    x1421
                                                                    ~error:(
                                                                    Error.t_of_js
                                                                    x1422)))|])
        let (add_listener''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x1426 : t) ->
            fun ~event:(x1424 : [ `finish ]) ->
              fun ~listener:(x1425 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1426) "addListener"
                     [|((match x1424 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x1425 ()))|])
        let (add_listener'''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1430 : t) ->
            fun ~event:(x1427 : [ `pipe ]) ->
              fun ~listener:(x1428 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1430) "addListener"
                     [|((match x1427 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x1429 : Ojs.t) ->
                            x1428 ~src:(Stream.Readable.t_of_js x1429)))|])
        let (add_listener''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1434 : t) ->
            fun ~event:(x1431 : [ `unpipe ]) ->
              fun ~listener:(x1432 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1434) "addListener"
                     [|((match x1431 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1433 :
                                                                    Ojs.t) ->
                                                                    x1432
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x1433)))|])
        let (add_listener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1440 : t) ->
            fun ~event:(x1435 : symbol or_string) ->
              fun ~listener:(x1437 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1440) "addListener"
                     [|(or_string_to_js symbol_to_js x1435);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1438 : _)
                                                                  ->
                                                                  x1437
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1438 0)))|])
        let (emit : t -> event:[ `close ] -> bool) =
          fun (x1442 : t) ->
            fun ~event:(x1441 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1442) "emit"
                   [|((match x1441 with | `close -> Ojs.string_to_js "close"))|])
        let (emit' : t -> event:[ `drain ] -> bool) =
          fun (x1444 : t) ->
            fun ~event:(x1443 : [ `drain ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1444) "emit"
                   [|((match x1443 with | `drain -> Ojs.string_to_js "drain"))|])
        let (emit'' : t -> event:[ `error ] -> error:Error.t -> bool) =
          fun (x1447 : t) ->
            fun ~event:(x1445 : [ `error ]) ->
              fun ~error:(x1446 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1447) "emit"
                     [|((match x1445 with
                         | `error -> Ojs.string_to_js "error"));(Error.t_to_js
                                                                   x1446)|])
        let (emit''' : t -> event:[ `finish ] -> bool) =
          fun (x1449 : t) ->
            fun ~event:(x1448 : [ `finish ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1449) "emit"
                   [|((match x1448 with
                       | `finish -> Ojs.string_to_js "finish"))|])
        let (emit'''' :
          t -> event:[ `pipe ] -> src:Stream.Readable.t -> bool) =
          fun (x1452 : t) ->
            fun ~event:(x1450 : [ `pipe ]) ->
              fun ~src:(x1451 : Stream.Readable.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1452) "emit"
                     [|((match x1450 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Stream.Readable.t_to_js x1451)|])
        let (emit''''' :
          t -> event:[ `unpipe ] -> src:Stream.Readable.t -> bool) =
          fun (x1455 : t) ->
            fun ~event:(x1453 : [ `unpipe ]) ->
              fun ~src:(x1454 : Stream.Readable.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1455) "emit"
                     [|((match x1453 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Stream.Readable.t_to_js
                                                                    x1454)|])
        let (emit'''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x1461 : t) ->
            fun ~event:(x1456 : symbol or_string) ->
              fun ~args:(x1457 : any list) ->
                Ojs.bool_of_js
                  (let x1462 = t_to_js x1461 in
                   Ojs.call (Ojs.get_prop_ascii x1462 "emit") "apply"
                     [|x1462;((let x1458 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1458 "push"
                                    [|(or_string_to_js symbol_to_js x1456)|]);
                               List.iter
                                 (fun (x1459 : any) ->
                                    ignore
                                      (Ojs.call x1458 "push"
                                         [|(any_to_js x1459)|])) x1457;
                               x1458))|])
        let (on : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1465 : t) ->
            fun ~event:(x1463 : [ `close ]) ->
              fun ~listener:(x1464 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1465) "on"
                     [|((match x1463 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1464 ()))|])
        let (on' : t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x1468 : t) ->
            fun ~event:(x1466 : [ `drain ]) ->
              fun ~listener:(x1467 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1468) "on"
                     [|((match x1466 with
                         | `drain -> Ojs.string_to_js "drain"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1467 ()))|])
        let (on'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x1472 : t) ->
            fun ~event:(x1469 : [ `error ]) ->
              fun ~listener:(x1470 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1472) "on"
                     [|((match x1469 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1471 :
                                                                    Ojs.t) ->
                                                                    x1470
                                                                    ~error:(
                                                                    Error.t_of_js
                                                                    x1471)))|])
        let (on''' : t -> event:[ `finish ] -> listener:(unit -> unit) -> t)
          =
          fun (x1475 : t) ->
            fun ~event:(x1473 : [ `finish ]) ->
              fun ~listener:(x1474 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1475) "on"
                     [|((match x1473 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x1474 ()))|])
        let (on'''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1479 : t) ->
            fun ~event:(x1476 : [ `pipe ]) ->
              fun ~listener:(x1477 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1479) "on"
                     [|((match x1476 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x1478 : Ojs.t) ->
                            x1477 ~src:(Stream.Readable.t_of_js x1478)))|])
        let (on''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1483 : t) ->
            fun ~event:(x1480 : [ `unpipe ]) ->
              fun ~listener:(x1481 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1483) "on"
                     [|((match x1480 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1482 :
                                                                    Ojs.t) ->
                                                                    x1481
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x1482)))|])
        let (on'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1489 : t) ->
            fun ~event:(x1484 : symbol or_string) ->
              fun ~listener:(x1486 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1489) "on"
                     [|(or_string_to_js symbol_to_js x1484);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1487 : _)
                                                                  ->
                                                                  x1486
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1487 0)))|])
        let (once : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1492 : t) ->
            fun ~event:(x1490 : [ `close ]) ->
              fun ~listener:(x1491 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1492) "once"
                     [|((match x1490 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1491 ()))|])
        let (once' : t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x1495 : t) ->
            fun ~event:(x1493 : [ `drain ]) ->
              fun ~listener:(x1494 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1495) "once"
                     [|((match x1493 with
                         | `drain -> Ojs.string_to_js "drain"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1494 ()))|])
        let (once'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x1499 : t) ->
            fun ~event:(x1496 : [ `error ]) ->
              fun ~listener:(x1497 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1499) "once"
                     [|((match x1496 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1498 :
                                                                    Ojs.t) ->
                                                                    x1497
                                                                    ~error:(
                                                                    Error.t_of_js
                                                                    x1498)))|])
        let (once''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x1502 : t) ->
            fun ~event:(x1500 : [ `finish ]) ->
              fun ~listener:(x1501 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1502) "once"
                     [|((match x1500 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x1501 ()))|])
        let (once'''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1506 : t) ->
            fun ~event:(x1503 : [ `pipe ]) ->
              fun ~listener:(x1504 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1506) "once"
                     [|((match x1503 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x1505 : Ojs.t) ->
                            x1504 ~src:(Stream.Readable.t_of_js x1505)))|])
        let (once''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1510 : t) ->
            fun ~event:(x1507 : [ `unpipe ]) ->
              fun ~listener:(x1508 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1510) "once"
                     [|((match x1507 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1509 :
                                                                    Ojs.t) ->
                                                                    x1508
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x1509)))|])
        let (once'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1516 : t) ->
            fun ~event:(x1511 : symbol or_string) ->
              fun ~listener:(x1513 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1516) "once"
                     [|(or_string_to_js symbol_to_js x1511);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1514 : _)
                                                                  ->
                                                                  x1513
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1514 0)))|])
        let (prepend_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1519 : t) ->
            fun ~event:(x1517 : [ `close ]) ->
              fun ~listener:(x1518 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1519) "prependListener"
                     [|((match x1517 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1518 ()))|])
        let (prepend_listener' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x1522 : t) ->
            fun ~event:(x1520 : [ `drain ]) ->
              fun ~listener:(x1521 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1522) "prependListener"
                     [|((match x1520 with
                         | `drain -> Ojs.string_to_js "drain"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1521 ()))|])
        let (prepend_listener'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x1526 : t) ->
            fun ~event:(x1523 : [ `error ]) ->
              fun ~listener:(x1524 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1526) "prependListener"
                     [|((match x1523 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1525 :
                                                                    Ojs.t) ->
                                                                    x1524
                                                                    ~error:(
                                                                    Error.t_of_js
                                                                    x1525)))|])
        let (prepend_listener''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x1529 : t) ->
            fun ~event:(x1527 : [ `finish ]) ->
              fun ~listener:(x1528 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1529) "prependListener"
                     [|((match x1527 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x1528 ()))|])
        let (prepend_listener'''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1533 : t) ->
            fun ~event:(x1530 : [ `pipe ]) ->
              fun ~listener:(x1531 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1533) "prependListener"
                     [|((match x1530 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x1532 : Ojs.t) ->
                            x1531 ~src:(Stream.Readable.t_of_js x1532)))|])
        let (prepend_listener''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1537 : t) ->
            fun ~event:(x1534 : [ `unpipe ]) ->
              fun ~listener:(x1535 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1537) "prependListener"
                     [|((match x1534 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1536 :
                                                                    Ojs.t) ->
                                                                    x1535
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x1536)))|])
        let (prepend_listener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1543 : t) ->
            fun ~event:(x1538 : symbol or_string) ->
              fun ~listener:(x1540 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1543) "prependListener"
                     [|(or_string_to_js symbol_to_js x1538);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1541 : _)
                                                                  ->
                                                                  x1540
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1541 0)))|])
        let (prepend_once_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1546 : t) ->
            fun ~event:(x1544 : [ `close ]) ->
              fun ~listener:(x1545 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1546) "prependOnceListener"
                     [|((match x1544 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1545 ()))|])
        let (prepend_once_listener' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x1549 : t) ->
            fun ~event:(x1547 : [ `drain ]) ->
              fun ~listener:(x1548 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1549) "prependOnceListener"
                     [|((match x1547 with
                         | `drain -> Ojs.string_to_js "drain"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1548 ()))|])
        let (prepend_once_listener'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x1553 : t) ->
            fun ~event:(x1550 : [ `error ]) ->
              fun ~listener:(x1551 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1553) "prependOnceListener"
                     [|((match x1550 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1552 :
                                                                    Ojs.t) ->
                                                                    x1551
                                                                    ~error:(
                                                                    Error.t_of_js
                                                                    x1552)))|])
        let (prepend_once_listener''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x1556 : t) ->
            fun ~event:(x1554 : [ `finish ]) ->
              fun ~listener:(x1555 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1556) "prependOnceListener"
                     [|((match x1554 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x1555 ()))|])
        let (prepend_once_listener'''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1560 : t) ->
            fun ~event:(x1557 : [ `pipe ]) ->
              fun ~listener:(x1558 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1560) "prependOnceListener"
                     [|((match x1557 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x1559 : Ojs.t) ->
                            x1558 ~src:(Stream.Readable.t_of_js x1559)))|])
        let (prepend_once_listener''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1564 : t) ->
            fun ~event:(x1561 : [ `unpipe ]) ->
              fun ~listener:(x1562 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1564) "prependOnceListener"
                     [|((match x1561 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1563 :
                                                                    Ojs.t) ->
                                                                    x1562
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x1563)))|])
        let (prepend_once_listener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1570 : t) ->
            fun ~event:(x1565 : symbol or_string) ->
              fun ~listener:(x1567 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1570) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x1565);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1568 : _)
                                                                  ->
                                                                  x1567
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1568 0)))|])
      end
    module ServerHttp2Session =
      struct
        include struct include Http2Session end
        let (altsvc :
          t ->
            alt:string ->
              origin_or_stream:(AlternativeServiceOptions.t, Url.URL.t)
                union2 or_string or_number -> unit)
          =
          fun (x1577 : t) ->
            fun ~alt:(x1571 : string) ->
              fun
                ~origin_or_stream:(x1572 :
                                    (AlternativeServiceOptions.t, Url.URL.t)
                                      union2 or_string or_number)
                ->
                ignore
                  (Ojs.call (t_to_js x1577) "altsvc"
                     [|(Ojs.string_to_js x1571);(or_number_to_js
                                                   (fun
                                                      (x1573 :
                                                        (AlternativeServiceOptions.t,
                                                          Url.URL.t) union2
                                                          or_string)
                                                      ->
                                                      or_string_to_js
                                                        (fun
                                                           (x1574 :
                                                             (AlternativeServiceOptions.t,
                                                               Url.URL.t)
                                                               union2)
                                                           ->
                                                           union2_to_js
                                                             AlternativeServiceOptions.t_to_js
                                                             Url.URL.t_to_js
                                                             x1574) x1573)
                                                   x1572)|])
        let (origin : t -> args:any list -> unit) =
          fun (x1581 : t) ->
            fun ~args:(x1578 : any list) ->
              ignore
                (let x1582 = t_to_js x1581 in
                 Ojs.call (Ojs.get_prop_ascii x1582 "origin") "apply"
                   [|x1582;((let x1579 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             List.iter
                               (fun (x1580 : any) ->
                                  ignore
                                    (Ojs.call x1579 "push"
                                       [|(any_to_js x1580)|])) x1578;
                             x1579))|])
        let (add_listener :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1589 : t) ->
            fun ~event:(x1583 : [ `connect ]) ->
              fun
                ~listener:(x1584 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1589) "addListener"
                     [|((match x1583 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1585 : Ojs.t) ->
                            fun (x1586 : Ojs.t) ->
                              x1584 ~session:(t_of_js x1585)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1586)))|])
        let (add_listener' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x1595 : t) ->
            fun ~event:(x1590 : [ `stream ]) ->
              fun
                ~listener:(x1591 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1595) "addListener"
                     [|((match x1590 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1592 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1593 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1594 :
                                                                    Ojs.t) ->
                                                                    x1591
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x1592)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x1593)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1594)))|])
        let (add_listener'' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1601 : t) ->
            fun ~event:(x1596 : symbol or_string) ->
              fun ~listener:(x1598 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1601) "addListener"
                     [|(or_string_to_js symbol_to_js x1596);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1599 : _)
                                                                  ->
                                                                  x1598
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1599 0)))|])
        let (emit :
          t ->
            event:[ `connect ] ->
              session:t ->
                socket:(Net.Socket.t, Tls.TLSSocket.t) union2 -> bool)
          =
          fun (x1607 : t) ->
            fun ~event:(x1602 : [ `connect ]) ->
              fun ~session:(x1603 : t) ->
                fun ~socket:(x1604 : (Net.Socket.t, Tls.TLSSocket.t) union2)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x1607) "emit"
                       [|((match x1602 with
                           | `connect -> Ojs.string_to_js "connect"));(
                         t_to_js x1603);(union2_to_js Net.Socket.t_to_js
                                           Tls.TLSSocket.t_to_js x1604)|])
        let (emit' :
          t ->
            event:[ `stream ] ->
              stream:ServerHttp2Stream.t ->
                headers:IncomingHttpHeaders.t -> flags:int -> bool)
          =
          fun (x1612 : t) ->
            fun ~event:(x1608 : [ `stream ]) ->
              fun ~stream:(x1609 : ServerHttp2Stream.t) ->
                fun ~headers:(x1610 : IncomingHttpHeaders.t) ->
                  fun ~flags:(x1611 : int) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x1612) "emit"
                         [|((match x1608 with
                             | `stream -> Ojs.string_to_js "stream"));(
                           ServerHttp2Stream.t_to_js x1609);(IncomingHttpHeaders.t_to_js
                                                               x1610);(
                           Ojs.int_to_js x1611)|])
        let (emit'' : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x1618 : t) ->
            fun ~event:(x1613 : symbol or_string) ->
              fun ~args:(x1614 : any list) ->
                Ojs.bool_of_js
                  (let x1619 = t_to_js x1618 in
                   Ojs.call (Ojs.get_prop_ascii x1619 "emit") "apply"
                     [|x1619;((let x1615 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1615 "push"
                                    [|(or_string_to_js symbol_to_js x1613)|]);
                               List.iter
                                 (fun (x1616 : any) ->
                                    ignore
                                      (Ojs.call x1615 "push"
                                         [|(any_to_js x1616)|])) x1614;
                               x1615))|])
        let (on :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1626 : t) ->
            fun ~event:(x1620 : [ `connect ]) ->
              fun
                ~listener:(x1621 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1626) "on"
                     [|((match x1620 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1622 : Ojs.t) ->
                            fun (x1623 : Ojs.t) ->
                              x1621 ~session:(t_of_js x1622)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1623)))|])
        let (on' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x1632 : t) ->
            fun ~event:(x1627 : [ `stream ]) ->
              fun
                ~listener:(x1628 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1632) "on"
                     [|((match x1627 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1629 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1630 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1631 :
                                                                    Ojs.t) ->
                                                                    x1628
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x1629)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x1630)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1631)))|])
        let (on'' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1638 : t) ->
            fun ~event:(x1633 : symbol or_string) ->
              fun ~listener:(x1635 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1638) "on"
                     [|(or_string_to_js symbol_to_js x1633);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1636 : _)
                                                                  ->
                                                                  x1635
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1636 0)))|])
        let (once :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1645 : t) ->
            fun ~event:(x1639 : [ `connect ]) ->
              fun
                ~listener:(x1640 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1645) "once"
                     [|((match x1639 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1641 : Ojs.t) ->
                            fun (x1642 : Ojs.t) ->
                              x1640 ~session:(t_of_js x1641)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1642)))|])
        let (once' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x1651 : t) ->
            fun ~event:(x1646 : [ `stream ]) ->
              fun
                ~listener:(x1647 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1651) "once"
                     [|((match x1646 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1648 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1649 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1650 :
                                                                    Ojs.t) ->
                                                                    x1647
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x1648)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x1649)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1650)))|])
        let (once'' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1657 : t) ->
            fun ~event:(x1652 : symbol or_string) ->
              fun ~listener:(x1654 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1657) "once"
                     [|(or_string_to_js symbol_to_js x1652);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1655 : _)
                                                                  ->
                                                                  x1654
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1655 0)))|])
        let (prepend_listener :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1664 : t) ->
            fun ~event:(x1658 : [ `connect ]) ->
              fun
                ~listener:(x1659 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1664) "prependListener"
                     [|((match x1658 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1660 : Ojs.t) ->
                            fun (x1661 : Ojs.t) ->
                              x1659 ~session:(t_of_js x1660)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1661)))|])
        let (prepend_listener' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x1670 : t) ->
            fun ~event:(x1665 : [ `stream ]) ->
              fun
                ~listener:(x1666 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1670) "prependListener"
                     [|((match x1665 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1667 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1668 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1669 :
                                                                    Ojs.t) ->
                                                                    x1666
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x1667)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x1668)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1669)))|])
        let (prepend_listener'' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1676 : t) ->
            fun ~event:(x1671 : symbol or_string) ->
              fun ~listener:(x1673 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1676) "prependListener"
                     [|(or_string_to_js symbol_to_js x1671);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1674 : _)
                                                                  ->
                                                                  x1673
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1674 0)))|])
        let (prepend_once_listener :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1683 : t) ->
            fun ~event:(x1677 : [ `connect ]) ->
              fun
                ~listener:(x1678 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1683) "prependOnceListener"
                     [|((match x1677 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1679 : Ojs.t) ->
                            fun (x1680 : Ojs.t) ->
                              x1678 ~session:(t_of_js x1679)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1680)))|])
        let (prepend_once_listener' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x1689 : t) ->
            fun ~event:(x1684 : [ `stream ]) ->
              fun
                ~listener:(x1685 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1689) "prependOnceListener"
                     [|((match x1684 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1686 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1687 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1688 :
                                                                    Ojs.t) ->
                                                                    x1685
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x1686)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x1687)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1688)))|])
        let (prepend_once_listener'' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1695 : t) ->
            fun ~event:(x1690 : symbol or_string) ->
              fun ~listener:(x1692 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1695) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x1690);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1693 : _)
                                                                  ->
                                                                  x1692
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1693 0)))|])
      end
    module Http2Server =
      struct
        include struct include Net.Server end
        let (add_listener :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x1700 : t) ->
            fun ~event:(x1696 : [ `checkContinue ]) ->
              fun
                ~listener:(x1697 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1700) "addListener"
                     [|((match x1696 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1698 : Ojs.t) ->
                            fun (x1699 : Ojs.t) ->
                              x1697
                                ~request:(Http2ServerRequest.t_of_js x1698)
                                ~response:(Http2ServerResponse.t_of_js x1699)))|])
        let (add_listener' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x1705 : t) ->
            fun ~event:(x1701 : [ `request ]) ->
              fun
                ~listener:(x1702 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1705) "addListener"
                     [|((match x1701 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1703 : Ojs.t) ->
                            fun (x1704 : Ojs.t) ->
                              x1702
                                ~request:(Http2ServerRequest.t_of_js x1703)
                                ~response:(Http2ServerResponse.t_of_js x1704)))|])
        let (add_listener'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x1709 : t) ->
            fun ~event:(x1706 : [ `session ]) ->
              fun ~listener:(x1707 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1709) "addListener"
                     [|((match x1706 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1708 : Ojs.t) ->
                            x1707 ~session:(ServerHttp2Session.t_of_js x1708)))|])
        let (add_listener''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x1713 : t) ->
            fun ~event:(x1710 : [ `sessionError ]) ->
              fun ~listener:(x1711 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1713) "addListener"
                     [|((match x1710 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x1712 : Ojs.t) ->
                            x1711 ~err:(Error.t_of_js x1712)))|])
        let (add_listener'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x1719 : t) ->
            fun ~event:(x1714 : [ `stream ]) ->
              fun
                ~listener:(x1715 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1719) "addListener"
                     [|((match x1714 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1716 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1717 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1718 :
                                                                    Ojs.t) ->
                                                                    x1715
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x1716)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x1717)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1718)))|])
        let (add_listener''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1722 : t) ->
            fun ~event:(x1720 : [ `timeout ]) ->
              fun ~listener:(x1721 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1722) "addListener"
                     [|((match x1720 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1721 ()))|])
        let (add_listener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1728 : t) ->
            fun ~event:(x1723 : symbol or_string) ->
              fun ~listener:(x1725 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1728) "addListener"
                     [|(or_string_to_js symbol_to_js x1723);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1726 : _)
                                                                  ->
                                                                  x1725
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1726 0)))|])
        let (emit :
          t ->
            event:[ `checkContinue ] ->
              request:Http2ServerRequest.t ->
                response:Http2ServerResponse.t -> bool)
          =
          fun (x1732 : t) ->
            fun ~event:(x1729 : [ `checkContinue ]) ->
              fun ~request:(x1730 : Http2ServerRequest.t) ->
                fun ~response:(x1731 : Http2ServerResponse.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x1732) "emit"
                       [|((match x1729 with
                           | `checkContinue ->
                               Ojs.string_to_js "checkContinue"));(Http2ServerRequest.t_to_js
                                                                    x1730);(
                         Http2ServerResponse.t_to_js x1731)|])
        let (emit' :
          t ->
            event:[ `request ] ->
              request:Http2ServerRequest.t ->
                response:Http2ServerResponse.t -> bool)
          =
          fun (x1736 : t) ->
            fun ~event:(x1733 : [ `request ]) ->
              fun ~request:(x1734 : Http2ServerRequest.t) ->
                fun ~response:(x1735 : Http2ServerResponse.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x1736) "emit"
                       [|((match x1733 with
                           | `request -> Ojs.string_to_js "request"));(
                         Http2ServerRequest.t_to_js x1734);(Http2ServerResponse.t_to_js
                                                              x1735)|])
        let (emit'' :
          t -> event:[ `session ] -> session:ServerHttp2Session.t -> bool) =
          fun (x1739 : t) ->
            fun ~event:(x1737 : [ `session ]) ->
              fun ~session:(x1738 : ServerHttp2Session.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1739) "emit"
                     [|((match x1737 with
                         | `session -> Ojs.string_to_js "session"));(
                       ServerHttp2Session.t_to_js x1738)|])
        let (emit''' : t -> event:[ `sessionError ] -> err:Error.t -> bool) =
          fun (x1742 : t) ->
            fun ~event:(x1740 : [ `sessionError ]) ->
              fun ~err:(x1741 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1742) "emit"
                     [|((match x1740 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Error.t_to_js x1741)|])
        let (emit'''' :
          t ->
            event:[ `stream ] ->
              stream:ServerHttp2Stream.t ->
                headers:IncomingHttpHeaders.t -> flags:int -> bool)
          =
          fun (x1747 : t) ->
            fun ~event:(x1743 : [ `stream ]) ->
              fun ~stream:(x1744 : ServerHttp2Stream.t) ->
                fun ~headers:(x1745 : IncomingHttpHeaders.t) ->
                  fun ~flags:(x1746 : int) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x1747) "emit"
                         [|((match x1743 with
                             | `stream -> Ojs.string_to_js "stream"));(
                           ServerHttp2Stream.t_to_js x1744);(IncomingHttpHeaders.t_to_js
                                                               x1745);(
                           Ojs.int_to_js x1746)|])
        let (emit''''' : t -> event:[ `timeout ] -> bool) =
          fun (x1749 : t) ->
            fun ~event:(x1748 : [ `timeout ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1749) "emit"
                   [|((match x1748 with
                       | `timeout -> Ojs.string_to_js "timeout"))|])
        let (emit'''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x1755 : t) ->
            fun ~event:(x1750 : symbol or_string) ->
              fun ~args:(x1751 : any list) ->
                Ojs.bool_of_js
                  (let x1756 = t_to_js x1755 in
                   Ojs.call (Ojs.get_prop_ascii x1756 "emit") "apply"
                     [|x1756;((let x1752 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1752 "push"
                                    [|(or_string_to_js symbol_to_js x1750)|]);
                               List.iter
                                 (fun (x1753 : any) ->
                                    ignore
                                      (Ojs.call x1752 "push"
                                         [|(any_to_js x1753)|])) x1751;
                               x1752))|])
        let (on :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x1761 : t) ->
            fun ~event:(x1757 : [ `checkContinue ]) ->
              fun
                ~listener:(x1758 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1761) "on"
                     [|((match x1757 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1759 : Ojs.t) ->
                            fun (x1760 : Ojs.t) ->
                              x1758
                                ~request:(Http2ServerRequest.t_of_js x1759)
                                ~response:(Http2ServerResponse.t_of_js x1760)))|])
        let (on' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x1766 : t) ->
            fun ~event:(x1762 : [ `request ]) ->
              fun
                ~listener:(x1763 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1766) "on"
                     [|((match x1762 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1764 : Ojs.t) ->
                            fun (x1765 : Ojs.t) ->
                              x1763
                                ~request:(Http2ServerRequest.t_of_js x1764)
                                ~response:(Http2ServerResponse.t_of_js x1765)))|])
        let (on'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x1770 : t) ->
            fun ~event:(x1767 : [ `session ]) ->
              fun ~listener:(x1768 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1770) "on"
                     [|((match x1767 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1769 : Ojs.t) ->
                            x1768 ~session:(ServerHttp2Session.t_of_js x1769)))|])
        let (on''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x1774 : t) ->
            fun ~event:(x1771 : [ `sessionError ]) ->
              fun ~listener:(x1772 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1774) "on"
                     [|((match x1771 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x1773 : Ojs.t) ->
                            x1772 ~err:(Error.t_of_js x1773)))|])
        let (on'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x1780 : t) ->
            fun ~event:(x1775 : [ `stream ]) ->
              fun
                ~listener:(x1776 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1780) "on"
                     [|((match x1775 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1777 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1778 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1779 :
                                                                    Ojs.t) ->
                                                                    x1776
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x1777)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x1778)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1779)))|])
        let (on''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1783 : t) ->
            fun ~event:(x1781 : [ `timeout ]) ->
              fun ~listener:(x1782 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1783) "on"
                     [|((match x1781 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1782 ()))|])
        let (on'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1789 : t) ->
            fun ~event:(x1784 : symbol or_string) ->
              fun ~listener:(x1786 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1789) "on"
                     [|(or_string_to_js symbol_to_js x1784);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1787 : _)
                                                                  ->
                                                                  x1786
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1787 0)))|])
        let (once :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x1794 : t) ->
            fun ~event:(x1790 : [ `checkContinue ]) ->
              fun
                ~listener:(x1791 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1794) "once"
                     [|((match x1790 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1792 : Ojs.t) ->
                            fun (x1793 : Ojs.t) ->
                              x1791
                                ~request:(Http2ServerRequest.t_of_js x1792)
                                ~response:(Http2ServerResponse.t_of_js x1793)))|])
        let (once' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x1799 : t) ->
            fun ~event:(x1795 : [ `request ]) ->
              fun
                ~listener:(x1796 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1799) "once"
                     [|((match x1795 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1797 : Ojs.t) ->
                            fun (x1798 : Ojs.t) ->
                              x1796
                                ~request:(Http2ServerRequest.t_of_js x1797)
                                ~response:(Http2ServerResponse.t_of_js x1798)))|])
        let (once'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x1803 : t) ->
            fun ~event:(x1800 : [ `session ]) ->
              fun ~listener:(x1801 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1803) "once"
                     [|((match x1800 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1802 : Ojs.t) ->
                            x1801 ~session:(ServerHttp2Session.t_of_js x1802)))|])
        let (once''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x1807 : t) ->
            fun ~event:(x1804 : [ `sessionError ]) ->
              fun ~listener:(x1805 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1807) "once"
                     [|((match x1804 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x1806 : Ojs.t) ->
                            x1805 ~err:(Error.t_of_js x1806)))|])
        let (once'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x1813 : t) ->
            fun ~event:(x1808 : [ `stream ]) ->
              fun
                ~listener:(x1809 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1813) "once"
                     [|((match x1808 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1810 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1811 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1812 :
                                                                    Ojs.t) ->
                                                                    x1809
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x1810)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x1811)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1812)))|])
        let (once''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1816 : t) ->
            fun ~event:(x1814 : [ `timeout ]) ->
              fun ~listener:(x1815 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1816) "once"
                     [|((match x1814 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1815 ()))|])
        let (once'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1822 : t) ->
            fun ~event:(x1817 : symbol or_string) ->
              fun ~listener:(x1819 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1822) "once"
                     [|(or_string_to_js symbol_to_js x1817);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1820 : _)
                                                                  ->
                                                                  x1819
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1820 0)))|])
        let (prepend_listener :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x1827 : t) ->
            fun ~event:(x1823 : [ `checkContinue ]) ->
              fun
                ~listener:(x1824 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1827) "prependListener"
                     [|((match x1823 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1825 : Ojs.t) ->
                            fun (x1826 : Ojs.t) ->
                              x1824
                                ~request:(Http2ServerRequest.t_of_js x1825)
                                ~response:(Http2ServerResponse.t_of_js x1826)))|])
        let (prepend_listener' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x1832 : t) ->
            fun ~event:(x1828 : [ `request ]) ->
              fun
                ~listener:(x1829 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1832) "prependListener"
                     [|((match x1828 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1830 : Ojs.t) ->
                            fun (x1831 : Ojs.t) ->
                              x1829
                                ~request:(Http2ServerRequest.t_of_js x1830)
                                ~response:(Http2ServerResponse.t_of_js x1831)))|])
        let (prepend_listener'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x1836 : t) ->
            fun ~event:(x1833 : [ `session ]) ->
              fun ~listener:(x1834 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1836) "prependListener"
                     [|((match x1833 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1835 : Ojs.t) ->
                            x1834 ~session:(ServerHttp2Session.t_of_js x1835)))|])
        let (prepend_listener''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x1840 : t) ->
            fun ~event:(x1837 : [ `sessionError ]) ->
              fun ~listener:(x1838 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1840) "prependListener"
                     [|((match x1837 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x1839 : Ojs.t) ->
                            x1838 ~err:(Error.t_of_js x1839)))|])
        let (prepend_listener'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x1846 : t) ->
            fun ~event:(x1841 : [ `stream ]) ->
              fun
                ~listener:(x1842 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1846) "prependListener"
                     [|((match x1841 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1843 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1844 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1845 :
                                                                    Ojs.t) ->
                                                                    x1842
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x1843)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x1844)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1845)))|])
        let (prepend_listener''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1849 : t) ->
            fun ~event:(x1847 : [ `timeout ]) ->
              fun ~listener:(x1848 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1849) "prependListener"
                     [|((match x1847 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1848 ()))|])
        let (prepend_listener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1855 : t) ->
            fun ~event:(x1850 : symbol or_string) ->
              fun ~listener:(x1852 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1855) "prependListener"
                     [|(or_string_to_js symbol_to_js x1850);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1853 : _)
                                                                  ->
                                                                  x1852
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1853 0)))|])
        let (prepend_once_listener :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x1860 : t) ->
            fun ~event:(x1856 : [ `checkContinue ]) ->
              fun
                ~listener:(x1857 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1860) "prependOnceListener"
                     [|((match x1856 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1858 : Ojs.t) ->
                            fun (x1859 : Ojs.t) ->
                              x1857
                                ~request:(Http2ServerRequest.t_of_js x1858)
                                ~response:(Http2ServerResponse.t_of_js x1859)))|])
        let (prepend_once_listener' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x1865 : t) ->
            fun ~event:(x1861 : [ `request ]) ->
              fun
                ~listener:(x1862 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1865) "prependOnceListener"
                     [|((match x1861 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1863 : Ojs.t) ->
                            fun (x1864 : Ojs.t) ->
                              x1862
                                ~request:(Http2ServerRequest.t_of_js x1863)
                                ~response:(Http2ServerResponse.t_of_js x1864)))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x1869 : t) ->
            fun ~event:(x1866 : [ `session ]) ->
              fun ~listener:(x1867 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1869) "prependOnceListener"
                     [|((match x1866 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1868 : Ojs.t) ->
                            x1867 ~session:(ServerHttp2Session.t_of_js x1868)))|])
        let (prepend_once_listener''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x1873 : t) ->
            fun ~event:(x1870 : [ `sessionError ]) ->
              fun ~listener:(x1871 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1873) "prependOnceListener"
                     [|((match x1870 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x1872 : Ojs.t) ->
                            x1871 ~err:(Error.t_of_js x1872)))|])
        let (prepend_once_listener'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x1879 : t) ->
            fun ~event:(x1874 : [ `stream ]) ->
              fun
                ~listener:(x1875 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1879) "prependOnceListener"
                     [|((match x1874 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1876 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1877 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1878 :
                                                                    Ojs.t) ->
                                                                    x1875
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x1876)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x1877)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1878)))|])
        let (prepend_once_listener''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1882 : t) ->
            fun ~event:(x1880 : [ `timeout ]) ->
              fun ~listener:(x1881 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1882) "prependOnceListener"
                     [|((match x1880 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1881 ()))|])
        let (prepend_once_listener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1888 : t) ->
            fun ~event:(x1883 : symbol or_string) ->
              fun ~listener:(x1885 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1888) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x1883);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1886 : _)
                                                                  ->
                                                                  x1885
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1886 0)))|])
        let (set_timeout :
          t -> ?msec:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x1894 : t) ->
            fun ?msec:(x1889 : int option) ->
              fun ?callback:(x1890 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x1895 = t_to_js x1894 in
                     Ojs.call (Ojs.get_prop_ascii x1895 "setTimeout") "apply"
                       [|x1895;((let x1891 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x1889 with
                                  | Some x1893 ->
                                      ignore
                                        (Ojs.call x1891 "push"
                                           [|(Ojs.int_to_js x1893)|])
                                  | None -> ());
                                 (match x1890 with
                                  | Some x1892 ->
                                      ignore
                                        (Ojs.call x1891 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x1892 ()))|])
                                  | None -> ());
                                 x1891))|])
      end
    module Http2SecureServer =
      struct
        include struct include Tls.Server end
        let (add_listener :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x1900 : t) ->
            fun ~event:(x1896 : [ `checkContinue ]) ->
              fun
                ~listener:(x1897 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1900) "addListener"
                     [|((match x1896 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1898 : Ojs.t) ->
                            fun (x1899 : Ojs.t) ->
                              x1897
                                ~request:(Http2ServerRequest.t_of_js x1898)
                                ~response:(Http2ServerResponse.t_of_js x1899)))|])
        let (add_listener' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x1905 : t) ->
            fun ~event:(x1901 : [ `request ]) ->
              fun
                ~listener:(x1902 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1905) "addListener"
                     [|((match x1901 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1903 : Ojs.t) ->
                            fun (x1904 : Ojs.t) ->
                              x1902
                                ~request:(Http2ServerRequest.t_of_js x1903)
                                ~response:(Http2ServerResponse.t_of_js x1904)))|])
        let (add_listener'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x1909 : t) ->
            fun ~event:(x1906 : [ `session ]) ->
              fun ~listener:(x1907 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1909) "addListener"
                     [|((match x1906 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1908 : Ojs.t) ->
                            x1907 ~session:(ServerHttp2Session.t_of_js x1908)))|])
        let (add_listener''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x1913 : t) ->
            fun ~event:(x1910 : [ `sessionError ]) ->
              fun ~listener:(x1911 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1913) "addListener"
                     [|((match x1910 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x1912 : Ojs.t) ->
                            x1911 ~err:(Error.t_of_js x1912)))|])
        let (add_listener'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x1919 : t) ->
            fun ~event:(x1914 : [ `stream ]) ->
              fun
                ~listener:(x1915 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1919) "addListener"
                     [|((match x1914 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1916 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1917 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1918 :
                                                                    Ojs.t) ->
                                                                    x1915
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x1916)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x1917)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1918)))|])
        let (add_listener''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1922 : t) ->
            fun ~event:(x1920 : [ `timeout ]) ->
              fun ~listener:(x1921 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1922) "addListener"
                     [|((match x1920 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1921 ()))|])
        let (add_listener'''''' :
          t ->
            event:[ `unknownProtocol ] ->
              listener:(socket:Tls.TLSSocket.t -> unit) -> t)
          =
          fun (x1926 : t) ->
            fun ~event:(x1923 : [ `unknownProtocol ]) ->
              fun ~listener:(x1924 : socket:Tls.TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1926) "addListener"
                     [|((match x1923 with
                         | `unknownProtocol ->
                             Ojs.string_to_js "unknownProtocol"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1925 :
                                                                    Ojs.t) ->
                                                                    x1924
                                                                    ~socket:(
                                                                    Tls.TLSSocket.t_of_js
                                                                    x1925)))|])
        let (add_listener''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1932 : t) ->
            fun ~event:(x1927 : symbol or_string) ->
              fun ~listener:(x1929 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1932) "addListener"
                     [|(or_string_to_js symbol_to_js x1927);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1930 : _)
                                                                  ->
                                                                  x1929
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1930 0)))|])
        let (emit :
          t ->
            event:[ `checkContinue ] ->
              request:Http2ServerRequest.t ->
                response:Http2ServerResponse.t -> bool)
          =
          fun (x1936 : t) ->
            fun ~event:(x1933 : [ `checkContinue ]) ->
              fun ~request:(x1934 : Http2ServerRequest.t) ->
                fun ~response:(x1935 : Http2ServerResponse.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x1936) "emit"
                       [|((match x1933 with
                           | `checkContinue ->
                               Ojs.string_to_js "checkContinue"));(Http2ServerRequest.t_to_js
                                                                    x1934);(
                         Http2ServerResponse.t_to_js x1935)|])
        let (emit' :
          t ->
            event:[ `request ] ->
              request:Http2ServerRequest.t ->
                response:Http2ServerResponse.t -> bool)
          =
          fun (x1940 : t) ->
            fun ~event:(x1937 : [ `request ]) ->
              fun ~request:(x1938 : Http2ServerRequest.t) ->
                fun ~response:(x1939 : Http2ServerResponse.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x1940) "emit"
                       [|((match x1937 with
                           | `request -> Ojs.string_to_js "request"));(
                         Http2ServerRequest.t_to_js x1938);(Http2ServerResponse.t_to_js
                                                              x1939)|])
        let (emit'' :
          t -> event:[ `session ] -> session:ServerHttp2Session.t -> bool) =
          fun (x1943 : t) ->
            fun ~event:(x1941 : [ `session ]) ->
              fun ~session:(x1942 : ServerHttp2Session.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1943) "emit"
                     [|((match x1941 with
                         | `session -> Ojs.string_to_js "session"));(
                       ServerHttp2Session.t_to_js x1942)|])
        let (emit''' : t -> event:[ `sessionError ] -> err:Error.t -> bool) =
          fun (x1946 : t) ->
            fun ~event:(x1944 : [ `sessionError ]) ->
              fun ~err:(x1945 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1946) "emit"
                     [|((match x1944 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Error.t_to_js x1945)|])
        let (emit'''' :
          t ->
            event:[ `stream ] ->
              stream:ServerHttp2Stream.t ->
                headers:IncomingHttpHeaders.t -> flags:int -> bool)
          =
          fun (x1951 : t) ->
            fun ~event:(x1947 : [ `stream ]) ->
              fun ~stream:(x1948 : ServerHttp2Stream.t) ->
                fun ~headers:(x1949 : IncomingHttpHeaders.t) ->
                  fun ~flags:(x1950 : int) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x1951) "emit"
                         [|((match x1947 with
                             | `stream -> Ojs.string_to_js "stream"));(
                           ServerHttp2Stream.t_to_js x1948);(IncomingHttpHeaders.t_to_js
                                                               x1949);(
                           Ojs.int_to_js x1950)|])
        let (emit''''' : t -> event:[ `timeout ] -> bool) =
          fun (x1953 : t) ->
            fun ~event:(x1952 : [ `timeout ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1953) "emit"
                   [|((match x1952 with
                       | `timeout -> Ojs.string_to_js "timeout"))|])
        let (emit'''''' :
          t -> event:[ `unknownProtocol ] -> socket:Tls.TLSSocket.t -> bool)
          =
          fun (x1956 : t) ->
            fun ~event:(x1954 : [ `unknownProtocol ]) ->
              fun ~socket:(x1955 : Tls.TLSSocket.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1956) "emit"
                     [|((match x1954 with
                         | `unknownProtocol ->
                             Ojs.string_to_js "unknownProtocol"));(Tls.TLSSocket.t_to_js
                                                                    x1955)|])
        let (emit''''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x1962 : t) ->
            fun ~event:(x1957 : symbol or_string) ->
              fun ~args:(x1958 : any list) ->
                Ojs.bool_of_js
                  (let x1963 = t_to_js x1962 in
                   Ojs.call (Ojs.get_prop_ascii x1963 "emit") "apply"
                     [|x1963;((let x1959 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1959 "push"
                                    [|(or_string_to_js symbol_to_js x1957)|]);
                               List.iter
                                 (fun (x1960 : any) ->
                                    ignore
                                      (Ojs.call x1959 "push"
                                         [|(any_to_js x1960)|])) x1958;
                               x1959))|])
        let (on :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x1968 : t) ->
            fun ~event:(x1964 : [ `checkContinue ]) ->
              fun
                ~listener:(x1965 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1968) "on"
                     [|((match x1964 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1966 : Ojs.t) ->
                            fun (x1967 : Ojs.t) ->
                              x1965
                                ~request:(Http2ServerRequest.t_of_js x1966)
                                ~response:(Http2ServerResponse.t_of_js x1967)))|])
        let (on' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x1973 : t) ->
            fun ~event:(x1969 : [ `request ]) ->
              fun
                ~listener:(x1970 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1973) "on"
                     [|((match x1969 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1971 : Ojs.t) ->
                            fun (x1972 : Ojs.t) ->
                              x1970
                                ~request:(Http2ServerRequest.t_of_js x1971)
                                ~response:(Http2ServerResponse.t_of_js x1972)))|])
        let (on'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x1977 : t) ->
            fun ~event:(x1974 : [ `session ]) ->
              fun ~listener:(x1975 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1977) "on"
                     [|((match x1974 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1976 : Ojs.t) ->
                            x1975 ~session:(ServerHttp2Session.t_of_js x1976)))|])
        let (on''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x1981 : t) ->
            fun ~event:(x1978 : [ `sessionError ]) ->
              fun ~listener:(x1979 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1981) "on"
                     [|((match x1978 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x1980 : Ojs.t) ->
                            x1979 ~err:(Error.t_of_js x1980)))|])
        let (on'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x1987 : t) ->
            fun ~event:(x1982 : [ `stream ]) ->
              fun
                ~listener:(x1983 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1987) "on"
                     [|((match x1982 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1984 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1985 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1986 :
                                                                    Ojs.t) ->
                                                                    x1983
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x1984)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x1985)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1986)))|])
        let (on''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1990 : t) ->
            fun ~event:(x1988 : [ `timeout ]) ->
              fun ~listener:(x1989 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1990) "on"
                     [|((match x1988 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1989 ()))|])
        let (on'''''' :
          t ->
            event:[ `unknownProtocol ] ->
              listener:(socket:Tls.TLSSocket.t -> unit) -> t)
          =
          fun (x1994 : t) ->
            fun ~event:(x1991 : [ `unknownProtocol ]) ->
              fun ~listener:(x1992 : socket:Tls.TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1994) "on"
                     [|((match x1991 with
                         | `unknownProtocol ->
                             Ojs.string_to_js "unknownProtocol"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1993 :
                                                                    Ojs.t) ->
                                                                    x1992
                                                                    ~socket:(
                                                                    Tls.TLSSocket.t_of_js
                                                                    x1993)))|])
        let (on''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2000 : t) ->
            fun ~event:(x1995 : symbol or_string) ->
              fun ~listener:(x1997 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2000) "on"
                     [|(or_string_to_js symbol_to_js x1995);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1998 : _)
                                                                  ->
                                                                  x1997
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1998 0)))|])
        let (once :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2005 : t) ->
            fun ~event:(x2001 : [ `checkContinue ]) ->
              fun
                ~listener:(x2002 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2005) "once"
                     [|((match x2001 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x2003 : Ojs.t) ->
                            fun (x2004 : Ojs.t) ->
                              x2002
                                ~request:(Http2ServerRequest.t_of_js x2003)
                                ~response:(Http2ServerResponse.t_of_js x2004)))|])
        let (once' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2010 : t) ->
            fun ~event:(x2006 : [ `request ]) ->
              fun
                ~listener:(x2007 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2010) "once"
                     [|((match x2006 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x2008 : Ojs.t) ->
                            fun (x2009 : Ojs.t) ->
                              x2007
                                ~request:(Http2ServerRequest.t_of_js x2008)
                                ~response:(Http2ServerResponse.t_of_js x2009)))|])
        let (once'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x2014 : t) ->
            fun ~event:(x2011 : [ `session ]) ->
              fun ~listener:(x2012 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2014) "once"
                     [|((match x2011 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x2013 : Ojs.t) ->
                            x2012 ~session:(ServerHttp2Session.t_of_js x2013)))|])
        let (once''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x2018 : t) ->
            fun ~event:(x2015 : [ `sessionError ]) ->
              fun ~listener:(x2016 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2018) "once"
                     [|((match x2015 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x2017 : Ojs.t) ->
                            x2016 ~err:(Error.t_of_js x2017)))|])
        let (once'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x2024 : t) ->
            fun ~event:(x2019 : [ `stream ]) ->
              fun
                ~listener:(x2020 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2024) "once"
                     [|((match x2019 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x2021 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2022 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2023 :
                                                                    Ojs.t) ->
                                                                    x2020
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x2021)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x2022)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x2023)))|])
        let (once''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x2027 : t) ->
            fun ~event:(x2025 : [ `timeout ]) ->
              fun ~listener:(x2026 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2027) "once"
                     [|((match x2025 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x2026 ()))|])
        let (once'''''' :
          t ->
            event:[ `unknownProtocol ] ->
              listener:(socket:Tls.TLSSocket.t -> unit) -> t)
          =
          fun (x2031 : t) ->
            fun ~event:(x2028 : [ `unknownProtocol ]) ->
              fun ~listener:(x2029 : socket:Tls.TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2031) "once"
                     [|((match x2028 with
                         | `unknownProtocol ->
                             Ojs.string_to_js "unknownProtocol"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x2030 :
                                                                    Ojs.t) ->
                                                                    x2029
                                                                    ~socket:(
                                                                    Tls.TLSSocket.t_of_js
                                                                    x2030)))|])
        let (once''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2037 : t) ->
            fun ~event:(x2032 : symbol or_string) ->
              fun ~listener:(x2034 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2037) "once"
                     [|(or_string_to_js symbol_to_js x2032);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2035 : _)
                                                                  ->
                                                                  x2034
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2035 0)))|])
        let (prepend_listener :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2042 : t) ->
            fun ~event:(x2038 : [ `checkContinue ]) ->
              fun
                ~listener:(x2039 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2042) "prependListener"
                     [|((match x2038 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x2040 : Ojs.t) ->
                            fun (x2041 : Ojs.t) ->
                              x2039
                                ~request:(Http2ServerRequest.t_of_js x2040)
                                ~response:(Http2ServerResponse.t_of_js x2041)))|])
        let (prepend_listener' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2047 : t) ->
            fun ~event:(x2043 : [ `request ]) ->
              fun
                ~listener:(x2044 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2047) "prependListener"
                     [|((match x2043 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x2045 : Ojs.t) ->
                            fun (x2046 : Ojs.t) ->
                              x2044
                                ~request:(Http2ServerRequest.t_of_js x2045)
                                ~response:(Http2ServerResponse.t_of_js x2046)))|])
        let (prepend_listener'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x2051 : t) ->
            fun ~event:(x2048 : [ `session ]) ->
              fun ~listener:(x2049 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2051) "prependListener"
                     [|((match x2048 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x2050 : Ojs.t) ->
                            x2049 ~session:(ServerHttp2Session.t_of_js x2050)))|])
        let (prepend_listener''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x2055 : t) ->
            fun ~event:(x2052 : [ `sessionError ]) ->
              fun ~listener:(x2053 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2055) "prependListener"
                     [|((match x2052 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x2054 : Ojs.t) ->
                            x2053 ~err:(Error.t_of_js x2054)))|])
        let (prepend_listener'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x2061 : t) ->
            fun ~event:(x2056 : [ `stream ]) ->
              fun
                ~listener:(x2057 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2061) "prependListener"
                     [|((match x2056 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x2058 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2059 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2060 :
                                                                    Ojs.t) ->
                                                                    x2057
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x2058)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x2059)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x2060)))|])
        let (prepend_listener''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x2064 : t) ->
            fun ~event:(x2062 : [ `timeout ]) ->
              fun ~listener:(x2063 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2064) "prependListener"
                     [|((match x2062 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x2063 ()))|])
        let (prepend_listener'''''' :
          t ->
            event:[ `unknownProtocol ] ->
              listener:(socket:Tls.TLSSocket.t -> unit) -> t)
          =
          fun (x2068 : t) ->
            fun ~event:(x2065 : [ `unknownProtocol ]) ->
              fun ~listener:(x2066 : socket:Tls.TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2068) "prependListener"
                     [|((match x2065 with
                         | `unknownProtocol ->
                             Ojs.string_to_js "unknownProtocol"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x2067 :
                                                                    Ojs.t) ->
                                                                    x2066
                                                                    ~socket:(
                                                                    Tls.TLSSocket.t_of_js
                                                                    x2067)))|])
        let (prepend_listener''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2074 : t) ->
            fun ~event:(x2069 : symbol or_string) ->
              fun ~listener:(x2071 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2074) "prependListener"
                     [|(or_string_to_js symbol_to_js x2069);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2072 : _)
                                                                  ->
                                                                  x2071
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2072 0)))|])
        let (prepend_once_listener :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2079 : t) ->
            fun ~event:(x2075 : [ `checkContinue ]) ->
              fun
                ~listener:(x2076 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2079) "prependOnceListener"
                     [|((match x2075 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x2077 : Ojs.t) ->
                            fun (x2078 : Ojs.t) ->
                              x2076
                                ~request:(Http2ServerRequest.t_of_js x2077)
                                ~response:(Http2ServerResponse.t_of_js x2078)))|])
        let (prepend_once_listener' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2084 : t) ->
            fun ~event:(x2080 : [ `request ]) ->
              fun
                ~listener:(x2081 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2084) "prependOnceListener"
                     [|((match x2080 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x2082 : Ojs.t) ->
                            fun (x2083 : Ojs.t) ->
                              x2081
                                ~request:(Http2ServerRequest.t_of_js x2082)
                                ~response:(Http2ServerResponse.t_of_js x2083)))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x2088 : t) ->
            fun ~event:(x2085 : [ `session ]) ->
              fun ~listener:(x2086 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2088) "prependOnceListener"
                     [|((match x2085 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x2087 : Ojs.t) ->
                            x2086 ~session:(ServerHttp2Session.t_of_js x2087)))|])
        let (prepend_once_listener''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x2092 : t) ->
            fun ~event:(x2089 : [ `sessionError ]) ->
              fun ~listener:(x2090 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2092) "prependOnceListener"
                     [|((match x2089 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x2091 : Ojs.t) ->
                            x2090 ~err:(Error.t_of_js x2091)))|])
        let (prepend_once_listener'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x2098 : t) ->
            fun ~event:(x2093 : [ `stream ]) ->
              fun
                ~listener:(x2094 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2098) "prependOnceListener"
                     [|((match x2093 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x2095 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2096 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2097 :
                                                                    Ojs.t) ->
                                                                    x2094
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x2095)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x2096)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x2097)))|])
        let (prepend_once_listener''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x2101 : t) ->
            fun ~event:(x2099 : [ `timeout ]) ->
              fun ~listener:(x2100 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2101) "prependOnceListener"
                     [|((match x2099 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x2100 ()))|])
        let (prepend_once_listener'''''' :
          t ->
            event:[ `unknownProtocol ] ->
              listener:(socket:Tls.TLSSocket.t -> unit) -> t)
          =
          fun (x2105 : t) ->
            fun ~event:(x2102 : [ `unknownProtocol ]) ->
              fun ~listener:(x2103 : socket:Tls.TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2105) "prependOnceListener"
                     [|((match x2102 with
                         | `unknownProtocol ->
                             Ojs.string_to_js "unknownProtocol"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x2104 :
                                                                    Ojs.t) ->
                                                                    x2103
                                                                    ~socket:(
                                                                    Tls.TLSSocket.t_of_js
                                                                    x2104)))|])
        let (prepend_once_listener''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2111 : t) ->
            fun ~event:(x2106 : symbol or_string) ->
              fun ~listener:(x2108 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2111) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x2106);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2109 : _)
                                                                  ->
                                                                  x2108
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2109 0)))|])
        let (set_timeout :
          t -> ?msec:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x2117 : t) ->
            fun ?msec:(x2112 : int option) ->
              fun ?callback:(x2113 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x2118 = t_to_js x2117 in
                     Ojs.call (Ojs.get_prop_ascii x2118 "setTimeout") "apply"
                       [|x2118;((let x2114 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x2112 with
                                  | Some x2116 ->
                                      ignore
                                        (Ojs.call x2114 "push"
                                           [|(Ojs.int_to_js x2116)|])
                                  | None -> ());
                                 (match x2113 with
                                  | Some x2115 ->
                                      ignore
                                        (Ojs.call x2114 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x2115 ()))|])
                                  | None -> ());
                                 x2114))|])
      end
    module Constants =
      struct
        let (ngsession_server : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SESSION_SERVER")
        let (ngsession_client : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SESSION_CLIENT")
        let (ngstream_state_idle : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_IDLE")
        let (ngstream_state_open : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_OPEN")
        let (ngstream_state_reserved_local : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_RESERVED_LOCAL")
        let (ngstream_state_reserved_remote : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_RESERVED_REMOTE")
        let (ngstream_state_half_closed_local : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_HALF_CLOSED_LOCAL")
        let (ngstream_state_half_closed_remote : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_HALF_CLOSED_REMOTE")
        let (ngstream_state_closed : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_CLOSED")
        let (ngno_error : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_NO_ERROR")
        let (ngprotocol_error : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_PROTOCOL_ERROR")
        let (nginternal_error : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_INTERNAL_ERROR")
        let (ngflow_control_error : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLOW_CONTROL_ERROR")
        let (ngsettings_timeout : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_TIMEOUT")
        let (ngstream_closed : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_CLOSED")
        let (ngframe_size_error : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FRAME_SIZE_ERROR")
        let (ngrefused_stream : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_REFUSED_STREAM")
        let (ngcancel : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_CANCEL")
        let (ngcompression_error : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_COMPRESSION_ERROR")
        let (ngconnect_error : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_CONNECT_ERROR")
        let (ngenhance_your_calm : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_ENHANCE_YOUR_CALM")
        let (nginadequate_security : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_INADEQUATE_SECURITY")
        let (nghttp_1_1_required : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_HTTP_1_1_REQUIRED")
        let (ngerr_frame_size_error : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_ERR_FRAME_SIZE_ERROR")
        let (ngflag_none : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLAG_NONE")
        let (ngflag_end_stream : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLAG_END_STREAM")
        let (ngflag_end_headers : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLAG_END_HEADERS")
        let (ngflag_ack : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLAG_ACK")
        let (ngflag_padded : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLAG_PADDED")
        let (ngflag_priority : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLAG_PRIORITY")
        let (default_settings_header_table_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "DEFAULT_SETTINGS_HEADER_TABLE_SIZE")
        let (default_settings_enable_push : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "DEFAULT_SETTINGS_ENABLE_PUSH")
        let (default_settings_initial_window_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "DEFAULT_SETTINGS_INITIAL_WINDOW_SIZE")
        let (default_settings_max_frame_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "DEFAULT_SETTINGS_MAX_FRAME_SIZE")
        let (max_max_frame_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "MAX_MAX_FRAME_SIZE")
        let (min_max_frame_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "MIN_MAX_FRAME_SIZE")
        let (max_initial_window_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "MAX_INITIAL_WINDOW_SIZE")
        let (ngdefault_weight : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_DEFAULT_WEIGHT")
        let (ngsettings_header_table_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_HEADER_TABLE_SIZE")
        let (ngsettings_enable_push : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_ENABLE_PUSH")
        let (ngsettings_max_concurrent_streams : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS")
        let (ngsettings_initial_window_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE")
        let (ngsettings_max_frame_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_MAX_FRAME_SIZE")
        let (ngsettings_max_header_list_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE")
        let (padding_strategy_none : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "PADDING_STRATEGY_NONE")
        let (padding_strategy_max : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "PADDING_STRATEGY_MAX")
        let (padding_strategy_callback : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "PADDING_STRATEGY_CALLBACK")
        let (http2_HEADER_STATUS : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_STATUS")
        let (http2_HEADER_METHOD : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_METHOD")
        let (http2_HEADER_AUTHORITY : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_AUTHORITY")
        let (http2_HEADER_SCHEME : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_SCHEME")
        let (http2_HEADER_PATH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_PATH")
        let (http2_HEADER_ACCEPT_CHARSET : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ACCEPT_CHARSET")
        let (http2_HEADER_ACCEPT_ENCODING : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ACCEPT_ENCODING")
        let (http2_HEADER_ACCEPT_LANGUAGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ACCEPT_LANGUAGE")
        let (http2_HEADER_ACCEPT_RANGES : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ACCEPT_RANGES")
        let (http2_HEADER_ACCEPT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ACCEPT")
        let (http2_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN")
        let (http2_HEADER_AGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_AGE")
        let (http2_HEADER_ALLOW : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ALLOW")
        let (http2_HEADER_AUTHORIZATION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_AUTHORIZATION")
        let (http2_HEADER_CACHE_CONTROL : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CACHE_CONTROL")
        let (http2_HEADER_CONNECTION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONNECTION")
        let (http2_HEADER_CONTENT_DISPOSITION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_DISPOSITION")
        let (http2_HEADER_CONTENT_ENCODING : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_ENCODING")
        let (http2_HEADER_CONTENT_LANGUAGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_LANGUAGE")
        let (http2_HEADER_CONTENT_LENGTH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_LENGTH")
        let (http2_HEADER_CONTENT_LOCATION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_LOCATION")
        let (http2_HEADER_CONTENT_MD5 : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_MD5")
        let (http2_HEADER_CONTENT_RANGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_RANGE")
        let (http2_HEADER_CONTENT_TYPE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_TYPE")
        let (http2_HEADER_COOKIE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_COOKIE")
        let (http2_HEADER_DATE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_DATE")
        let (http2_HEADER_ETAG : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ETAG")
        let (http2_HEADER_EXPECT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_EXPECT")
        let (http2_HEADER_EXPIRES : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_EXPIRES")
        let (http2_HEADER_FROM : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_FROM")
        let (http2_HEADER_HOST : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_HOST")
        let (http2_HEADER_IF_MATCH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_IF_MATCH")
        let (http2_HEADER_IF_MODIFIED_SINCE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_IF_MODIFIED_SINCE")
        let (http2_HEADER_IF_NONE_MATCH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_IF_NONE_MATCH")
        let (http2_HEADER_IF_RANGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_IF_RANGE")
        let (http2_HEADER_IF_UNMODIFIED_SINCE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_IF_UNMODIFIED_SINCE")
        let (http2_HEADER_LAST_MODIFIED : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_LAST_MODIFIED")
        let (http2_HEADER_LINK : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_LINK")
        let (http2_HEADER_LOCATION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_LOCATION")
        let (http2_HEADER_MAX_FORWARDS : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_MAX_FORWARDS")
        let (http2_HEADER_PREFER : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_PREFER")
        let (http2_HEADER_PROXY_AUTHENTICATE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_PROXY_AUTHENTICATE")
        let (http2_HEADER_PROXY_AUTHORIZATION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_PROXY_AUTHORIZATION")
        let (http2_HEADER_RANGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_RANGE")
        let (http2_HEADER_REFERER : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_REFERER")
        let (http2_HEADER_REFRESH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_REFRESH")
        let (http2_HEADER_RETRY_AFTER : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_RETRY_AFTER")
        let (http2_HEADER_SERVER : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_SERVER")
        let (http2_HEADER_SET_COOKIE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_SET_COOKIE")
        let (http2_HEADER_STRICT_TRANSPORT_SECURITY : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_STRICT_TRANSPORT_SECURITY")
        let (http2_HEADER_TRANSFER_ENCODING : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_TRANSFER_ENCODING")
        let (http2_HEADER_TE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_TE")
        let (http2_HEADER_UPGRADE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_UPGRADE")
        let (http2_HEADER_USER_AGENT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_USER_AGENT")
        let (http2_HEADER_VARY : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_VARY")
        let (http2_HEADER_VIA : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_VIA")
        let (http2_HEADER_WWW_AUTHENTICATE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_WWW_AUTHENTICATE")
        let (http2_HEADER_HTTP2_SETTINGS : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_HTTP2_SETTINGS")
        let (http2_HEADER_KEEP_ALIVE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_KEEP_ALIVE")
        let (http2_HEADER_PROXY_CONNECTION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_PROXY_CONNECTION")
        let (http2_METHOD_ACL : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_ACL")
        let (http2_METHOD_BASELINE_CONTROL : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_BASELINE_CONTROL")
        let (http2_METHOD_BIND : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_BIND")
        let (http2_METHOD_CHECKIN : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_CHECKIN")
        let (http2_METHOD_CHECKOUT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_CHECKOUT")
        let (http2_METHOD_CONNECT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_CONNECT")
        let (http2_METHOD_COPY : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_COPY")
        let (http2_METHOD_DELETE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_DELETE")
        let (http2_METHOD_GET : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_GET")
        let (http2_METHOD_HEAD : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_HEAD")
        let (http2_METHOD_LABEL : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_LABEL")
        let (http2_METHOD_LINK : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_LINK")
        let (http2_METHOD_LOCK : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_LOCK")
        let (http2_METHOD_MERGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MERGE")
        let (http2_METHOD_MKACTIVITY : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MKACTIVITY")
        let (http2_METHOD_MKCALENDAR : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MKCALENDAR")
        let (http2_METHOD_MKCOL : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MKCOL")
        let (http2_METHOD_MKREDIRECTREF : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MKREDIRECTREF")
        let (http2_METHOD_MKWORKSPACE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MKWORKSPACE")
        let (http2_METHOD_MOVE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MOVE")
        let (http2_METHOD_OPTIONS : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_OPTIONS")
        let (http2_METHOD_ORDERPATCH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_ORDERPATCH")
        let (http2_METHOD_PATCH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_PATCH")
        let (http2_METHOD_POST : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_POST")
        let (http2_METHOD_PRI : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_PRI")
        let (http2_METHOD_PROPFIND : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_PROPFIND")
        let (http2_METHOD_PROPPATCH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_PROPPATCH")
        let (http2_METHOD_PUT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_PUT")
        let (http2_METHOD_REBIND : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_REBIND")
        let (http2_METHOD_REPORT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_REPORT")
        let (http2_METHOD_SEARCH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_SEARCH")
        let (http2_METHOD_TRACE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_TRACE")
        let (http2_METHOD_UNBIND : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_UNBIND")
        let (http2_METHOD_UNCHECKOUT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_UNCHECKOUT")
        let (http2_METHOD_UNLINK : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_UNLINK")
        let (http2_METHOD_UNLOCK : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_UNLOCK")
        let (http2_METHOD_UPDATE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_UPDATE")
        let (http2_METHOD_UPDATEREDIRECTREF : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_UPDATEREDIRECTREF")
        let (http2_METHOD_VERSION_CONTROL : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_VERSION_CONTROL")
        let (http_status_continue : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_CONTINUE")
        let (http_status_switching_protocols : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_SWITCHING_PROTOCOLS")
        let (http_status_processing : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PROCESSING")
        let (http_status_ok : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_OK")
        let (http_status_created : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_CREATED")
        let (http_status_accepted : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_ACCEPTED")
        let (http_status_non_authoritative_information : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NON_AUTHORITATIVE_INFORMATION")
        let (http_status_no_content : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NO_CONTENT")
        let (http_status_reset_content : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_RESET_CONTENT")
        let (http_status_partial_content : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PARTIAL_CONTENT")
        let (http_status_multi_status : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_MULTI_STATUS")
        let (http_status_already_reported : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_ALREADY_REPORTED")
        let (http_status_im_used : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_IM_USED")
        let (http_status_multiple_choices : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_MULTIPLE_CHOICES")
        let (http_status_moved_permanently : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_MOVED_PERMANENTLY")
        let (http_status_found : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_FOUND")
        let (http_status_see_other : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_SEE_OTHER")
        let (http_status_not_modified : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NOT_MODIFIED")
        let (http_status_use_proxy : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_USE_PROXY")
        let (http_status_temporary_redirect : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_TEMPORARY_REDIRECT")
        let (http_status_permanent_redirect : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PERMANENT_REDIRECT")
        let (http_status_bad_request : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_BAD_REQUEST")
        let (http_status_unauthorized : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_UNAUTHORIZED")
        let (http_status_payment_required : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PAYMENT_REQUIRED")
        let (http_status_forbidden : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_FORBIDDEN")
        let (http_status_not_found : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NOT_FOUND")
        let (http_status_method_not_allowed : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_METHOD_NOT_ALLOWED")
        let (http_status_not_acceptable : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NOT_ACCEPTABLE")
        let (http_status_proxy_authentication_required : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PROXY_AUTHENTICATION_REQUIRED")
        let (http_status_request_timeout : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_REQUEST_TIMEOUT")
        let (http_status_conflict : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_CONFLICT")
        let (http_status_gone : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_GONE")
        let (http_status_length_required : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_LENGTH_REQUIRED")
        let (http_status_precondition_failed : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PRECONDITION_FAILED")
        let (http_status_payload_too_large : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PAYLOAD_TOO_LARGE")
        let (http_status_uri_too_long : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_URI_TOO_LONG")
        let (http_status_unsupported_media_type : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE")
        let (http_status_range_not_satisfiable : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_RANGE_NOT_SATISFIABLE")
        let (http_status_expectation_failed : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_EXPECTATION_FAILED")
        let (http_status_teapot : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_TEAPOT")
        let (http_status_misdirected_request : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_MISDIRECTED_REQUEST")
        let (http_status_unprocessable_entity : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_UNPROCESSABLE_ENTITY")
        let (http_status_locked : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_LOCKED")
        let (http_status_failed_dependency : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_FAILED_DEPENDENCY")
        let (http_status_unordered_collection : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_UNORDERED_COLLECTION")
        let (http_status_upgrade_required : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_UPGRADE_REQUIRED")
        let (http_status_precondition_required : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PRECONDITION_REQUIRED")
        let (http_status_too_many_requests : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_TOO_MANY_REQUESTS")
        let (http_status_request_header_fields_too_large : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE")
        let (http_status_unavailable_for_legal_reasons : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_UNAVAILABLE_FOR_LEGAL_REASONS")
        let (http_status_internal_server_error : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_INTERNAL_SERVER_ERROR")
        let (http_status_not_implemented : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NOT_IMPLEMENTED")
        let (http_status_bad_gateway : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_BAD_GATEWAY")
        let (http_status_service_unavailable : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_SERVICE_UNAVAILABLE")
        let (http_status_gateway_timeout : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_GATEWAY_TIMEOUT")
        let (http_status_http_version_not_supported : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_HTTP_VERSION_NOT_SUPPORTED")
        let (http_status_variant_also_negotiates : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_VARIANT_ALSO_NEGOTIATES")
        let (http_status_insufficient_storage : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_INSUFFICIENT_STORAGE")
        let (http_status_loop_detected : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_LOOP_DETECTED")
        let (http_status_bandwidth_limit_exceeded : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_BANDWIDTH_LIMIT_EXCEEDED")
        let (http_status_not_extended : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NOT_EXTENDED")
        let (http_status_network_authentication_required : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NETWORK_AUTHENTICATION_REQUIRED")
      end
    let (get_default_settings : unit -> Settings.t) =
      fun () ->
        Settings.t_of_js (Ojs.call Import.http2 "getDefaultSettings" [||])
    let (get_packed_settings : settings:Settings.t -> Buffer.t) =
      fun ~settings:(x2119 : Settings.t) ->
        Buffer.t_of_js
          (Ojs.call Import.http2 "getPackedSettings"
             [|(Settings.t_to_js x2119)|])
    let (get_unpacked_settings : buf:Uint8Array.t -> Settings.t) =
      fun ~buf:(x2120 : Uint8Array.t) ->
        Settings.t_of_js
          (Ojs.call Import.http2 "getUnpackedSettings"
             [|(Uint8Array.t_to_js x2120)|])
    let (create_server :
      ?on_request_handler:(request:Http2ServerRequest.t ->
                             response:Http2ServerResponse.t -> unit)
        -> unit -> Http2Server.t)
      =
      fun
        ?on_request_handler:(x2121 :
                              (request:Http2ServerRequest.t ->
                                 response:Http2ServerResponse.t -> unit)
                                option)
        ->
        fun () ->
          Http2Server.t_of_js
            (let x2126 = Import.http2 in
             Ojs.call (Ojs.get_prop_ascii x2126 "createServer") "apply"
               [|x2126;((let x2122 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x2121 with
                          | Some x2123 ->
                              ignore
                                (Ojs.call x2122 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x2124 : Ojs.t) ->
                                           fun (x2125 : Ojs.t) ->
                                             x2123
                                               ~request:(Http2ServerRequest.t_of_js
                                                           x2124)
                                               ~response:(Http2ServerResponse.t_of_js
                                                            x2125)))|])
                          | None -> ());
                         x2122))|])
    let (create_server :
      options:ServerOptions.t ->
        ?on_request_handler:(request:Http2ServerRequest.t ->
                               response:Http2ServerResponse.t -> unit)
          -> unit -> Http2Server.t)
      =
      fun ~options:(x2127 : ServerOptions.t) ->
        fun
          ?on_request_handler:(x2128 :
                                (request:Http2ServerRequest.t ->
                                   response:Http2ServerResponse.t -> unit)
                                  option)
          ->
          fun () ->
            Http2Server.t_of_js
              (let x2133 = Import.http2 in
               Ojs.call (Ojs.get_prop_ascii x2133 "createServer") "apply"
                 [|x2133;((let x2129 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2129 "push"
                                [|(ServerOptions.t_to_js x2127)|]);
                           (match x2128 with
                            | Some x2130 ->
                                ignore
                                  (Ojs.call x2129 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x2131 : Ojs.t) ->
                                             fun (x2132 : Ojs.t) ->
                                               x2130
                                                 ~request:(Http2ServerRequest.t_of_js
                                                             x2131)
                                                 ~response:(Http2ServerResponse.t_of_js
                                                              x2132)))|])
                            | None -> ());
                           x2129))|])
    let (create_secure_server :
      ?on_request_handler:(request:Http2ServerRequest.t ->
                             response:Http2ServerResponse.t -> unit)
        -> unit -> Http2SecureServer.t)
      =
      fun
        ?on_request_handler:(x2134 :
                              (request:Http2ServerRequest.t ->
                                 response:Http2ServerResponse.t -> unit)
                                option)
        ->
        fun () ->
          Http2SecureServer.t_of_js
            (let x2139 = Import.http2 in
             Ojs.call (Ojs.get_prop_ascii x2139 "createSecureServer") "apply"
               [|x2139;((let x2135 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x2134 with
                          | Some x2136 ->
                              ignore
                                (Ojs.call x2135 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x2137 : Ojs.t) ->
                                           fun (x2138 : Ojs.t) ->
                                             x2136
                                               ~request:(Http2ServerRequest.t_of_js
                                                           x2137)
                                               ~response:(Http2ServerResponse.t_of_js
                                                            x2138)))|])
                          | None -> ());
                         x2135))|])
    let (create_secure_server :
      options:SecureServerOptions.t ->
        ?on_request_handler:(request:Http2ServerRequest.t ->
                               response:Http2ServerResponse.t -> unit)
          -> unit -> Http2SecureServer.t)
      =
      fun ~options:(x2140 : SecureServerOptions.t) ->
        fun
          ?on_request_handler:(x2141 :
                                (request:Http2ServerRequest.t ->
                                   response:Http2ServerResponse.t -> unit)
                                  option)
          ->
          fun () ->
            Http2SecureServer.t_of_js
              (let x2146 = Import.http2 in
               Ojs.call (Ojs.get_prop_ascii x2146 "createSecureServer")
                 "apply"
                 [|x2146;((let x2142 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2142 "push"
                                [|(SecureServerOptions.t_to_js x2140)|]);
                           (match x2141 with
                            | Some x2143 ->
                                ignore
                                  (Ojs.call x2142 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x2144 : Ojs.t) ->
                                             fun (x2145 : Ojs.t) ->
                                               x2143
                                                 ~request:(Http2ServerRequest.t_of_js
                                                             x2144)
                                                 ~response:(Http2ServerResponse.t_of_js
                                                              x2145)))|])
                            | None -> ());
                           x2142))|])
    let (connect :
      authority:Url.URL.t or_string ->
        listener:(session:ClientHttp2Session.t ->
                    socket:(Net.Socket.t, Tls.TLSSocket.t) union2 -> unit)
          -> ClientHttp2Session.t)
      =
      fun ~authority:(x2147 : Url.URL.t or_string) ->
        fun
          ~listener:(x2149 :
                      session:ClientHttp2Session.t ->
                        socket:(Net.Socket.t, Tls.TLSSocket.t) union2 -> unit)
          ->
          ClientHttp2Session.t_of_js
            (Ojs.call Import.http2 "connect"
               [|(or_string_to_js Url.URL.t_to_js x2147);(Ojs.fun_to_js 2
                                                            (fun
                                                               (x2150 :
                                                                 Ojs.t)
                                                               ->
                                                               fun
                                                                 (x2151 :
                                                                   Ojs.t)
                                                                 ->
                                                                 x2149
                                                                   ~session:(
                                                                   ClientHttp2Session.t_of_js
                                                                    x2150)
                                                                   ~socket:(
                                                                   union2_of_js
                                                                    Net.Socket.t_of_js
                                                                    Tls.TLSSocket.t_of_js
                                                                    x2151)))|])
    let (connect :
      authority:Url.URL.t or_string ->
        ?options:[
                   `U_s15_http_ of
                     (ClientSessionOptions.t, SecureClientSessionOptions.t)
                       union2
                      | `U_s16_https_ of
                          (ClientSessionOptions.t,
                            SecureClientSessionOptions.t) union2
                          ]
          ->
          ?listener:(session:ClientHttp2Session.t ->
                       socket:(Net.Socket.t, Tls.TLSSocket.t) union2 -> unit)
            -> unit -> ClientHttp2Session.t)
      =
      fun ~authority:(x2154 : Url.URL.t or_string) ->
        fun
          ?options:(x2155 :
                     [
                       `U_s15_http_ of
                         (ClientSessionOptions.t,
                           SecureClientSessionOptions.t) union2
                          | `U_s16_https_ of
                              (ClientSessionOptions.t,
                                SecureClientSessionOptions.t) union2
                              ]
                       option)
          ->
          fun
            ?listener:(x2156 :
                        (session:ClientHttp2Session.t ->
                           socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                             unit)
                          option)
            ->
            fun () ->
              ClientHttp2Session.t_of_js
                (let x2171 = Import.http2 in
                 Ojs.call (Ojs.get_prop_ascii x2171 "connect") "apply"
                   [|x2171;((let x2157 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2157 "push"
                                  [|(or_string_to_js Url.URL.t_to_js x2154)|]);
                             (match x2155 with
                              | Some x2163 ->
                                  ignore
                                    (Ojs.call x2157 "push"
                                       [|((match x2163 with
                                           | `U_s15_http_ x2164 ->
                                               union2_to_js
                                                 ClientSessionOptions.t_to_js
                                                 SecureClientSessionOptions.t_to_js
                                                 x2164
                                           | `U_s16_https_ x2167 ->
                                               union2_to_js
                                                 ClientSessionOptions.t_to_js
                                                 SecureClientSessionOptions.t_to_js
                                                 x2167))|])
                              | None -> ());
                             (match x2156 with
                              | Some x2158 ->
                                  ignore
                                    (Ojs.call x2157 "push"
                                       [|(Ojs.fun_to_js 2
                                            (fun (x2159 : Ojs.t) ->
                                               fun (x2160 : Ojs.t) ->
                                                 x2158
                                                   ~session:(ClientHttp2Session.t_of_js
                                                               x2159)
                                                   ~socket:(union2_of_js
                                                              Net.Socket.t_of_js
                                                              Tls.TLSSocket.t_of_js
                                                              x2160)))|])
                              | None -> ());
                             x2157))|])
  end
