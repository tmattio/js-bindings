[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4 : Ojs.t) -> x4
    and t_to_js : t -> Ojs.t = fun (x3 : Ojs.t) -> x3
    let (get_origin : t -> string) =
      fun (x5 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5) "origin")
    let (set_origin : t -> string -> unit) =
      fun (x6 : t) ->
        fun (x7 : string) ->
          Ojs.set_prop_ascii (t_to_js x6) "origin" (Ojs.string_to_js x7)
  end
module Http2 =
  struct
    open Node_fs
    open Node_fs_promises
    open Node_net
    open Node_stream
    open Node_tls
    open Node_url
    module IncomingHttpStatusHeader =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x9 : Ojs.t) -> x9
        and t_to_js : t -> Ojs.t = fun (x8 : Ojs.t) -> x8
        let (get__status : t -> int) =
          fun (x10 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x10) ":status")
        let (set__status : t -> int -> unit) =
          fun (x11 : t) ->
            fun (x12 : int) ->
              Ojs.set_prop_ascii (t_to_js x11) ":status" (Ojs.int_to_js x12)
      end
    module IncomingHttpHeaders =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x14 : Ojs.t) -> x14
        and t_to_js : t -> Ojs.t = fun (x13 : Ojs.t) -> x13
        let (get__path : t -> string) =
          fun (x15 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x15) ":path")
        let (set__path : t -> string -> unit) =
          fun (x16 : t) ->
            fun (x17 : string) ->
              Ojs.set_prop_ascii (t_to_js x16) ":path" (Ojs.string_to_js x17)
        let (get__method : t -> string) =
          fun (x18 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x18) ":method")
        let (set__method : t -> string -> unit) =
          fun (x19 : t) ->
            fun (x20 : string) ->
              Ojs.set_prop_ascii (t_to_js x19) ":method"
                (Ojs.string_to_js x20)
        let (get__authority : t -> string) =
          fun (x21 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x21) ":authority")
        let (set__authority : t -> string -> unit) =
          fun (x22 : t) ->
            fun (x23 : string) ->
              Ojs.set_prop_ascii (t_to_js x22) ":authority"
                (Ojs.string_to_js x23)
        let (get__scheme : t -> string) =
          fun (x24 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x24) ":scheme")
        let (set__scheme : t -> string -> unit) =
          fun (x25 : t) ->
            fun (x26 : string) ->
              Ojs.set_prop_ascii (t_to_js x25) ":scheme"
                (Ojs.string_to_js x26)
        let (cast : t -> Node_http.Http.IncomingHttpHeaders.t) =
          fun (x27 : t) ->
            Node_http.Http.IncomingHttpHeaders.t_of_js (t_to_js x27)
      end
    module StreamPriorityOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x29 : Ojs.t) -> x29
        and t_to_js : t -> Ojs.t = fun (x28 : Ojs.t) -> x28
        let (get_exclusive : t -> bool) =
          fun (x30 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x30) "exclusive")
        let (set_exclusive : t -> bool -> unit) =
          fun (x31 : t) ->
            fun (x32 : bool) ->
              Ojs.set_prop_ascii (t_to_js x31) "exclusive"
                (Ojs.bool_to_js x32)
        let (get_parent : t -> int) =
          fun (x33 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x33) "parent")
        let (set_parent : t -> int -> unit) =
          fun (x34 : t) ->
            fun (x35 : int) ->
              Ojs.set_prop_ascii (t_to_js x34) "parent" (Ojs.int_to_js x35)
        let (get_weight : t -> int) =
          fun (x36 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x36) "weight")
        let (set_weight : t -> int -> unit) =
          fun (x37 : t) ->
            fun (x38 : int) ->
              Ojs.set_prop_ascii (t_to_js x37) "weight" (Ojs.int_to_js x38)
        let (get_silent : t -> bool) =
          fun (x39 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x39) "silent")
        let (set_silent : t -> bool -> unit) =
          fun (x40 : t) ->
            fun (x41 : bool) ->
              Ojs.set_prop_ascii (t_to_js x40) "silent" (Ojs.bool_to_js x41)
      end
    module StreamState =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x43 : Ojs.t) -> x43
        and t_to_js : t -> Ojs.t = fun (x42 : Ojs.t) -> x42
        let (get_local_window_size : t -> int) =
          fun (x44 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x44) "localWindowSize")
        let (set_local_window_size : t -> int -> unit) =
          fun (x45 : t) ->
            fun (x46 : int) ->
              Ojs.set_prop_ascii (t_to_js x45) "localWindowSize"
                (Ojs.int_to_js x46)
        let (get_state : t -> int) =
          fun (x47 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x47) "state")
        let (set_state : t -> int -> unit) =
          fun (x48 : t) ->
            fun (x49 : int) ->
              Ojs.set_prop_ascii (t_to_js x48) "state" (Ojs.int_to_js x49)
        let (get_local_close : t -> int) =
          fun (x50 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x50) "localClose")
        let (set_local_close : t -> int -> unit) =
          fun (x51 : t) ->
            fun (x52 : int) ->
              Ojs.set_prop_ascii (t_to_js x51) "localClose"
                (Ojs.int_to_js x52)
        let (get_remote_close : t -> int) =
          fun (x53 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x53) "remoteClose")
        let (set_remote_close : t -> int -> unit) =
          fun (x54 : t) ->
            fun (x55 : int) ->
              Ojs.set_prop_ascii (t_to_js x54) "remoteClose"
                (Ojs.int_to_js x55)
        let (get_sum_dependency_weight : t -> int) =
          fun (x56 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x56) "sumDependencyWeight")
        let (set_sum_dependency_weight : t -> int -> unit) =
          fun (x57 : t) ->
            fun (x58 : int) ->
              Ojs.set_prop_ascii (t_to_js x57) "sumDependencyWeight"
                (Ojs.int_to_js x58)
        let (get_weight : t -> int) =
          fun (x59 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x59) "weight")
        let (set_weight : t -> int -> unit) =
          fun (x60 : t) ->
            fun (x61 : int) ->
              Ojs.set_prop_ascii (t_to_js x60) "weight" (Ojs.int_to_js x61)
      end
    module ServerStreamResponseOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x63 : Ojs.t) -> x63
        and t_to_js : t -> Ojs.t = fun (x62 : Ojs.t) -> x62
        let (get_end_stream : t -> bool) =
          fun (x64 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x64) "endStream")
        let (set_end_stream : t -> bool -> unit) =
          fun (x65 : t) ->
            fun (x66 : bool) ->
              Ojs.set_prop_ascii (t_to_js x65) "endStream"
                (Ojs.bool_to_js x66)
        let (get_wait_for_trailers : t -> bool) =
          fun (x67 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x67) "waitForTrailers")
        let (set_wait_for_trailers : t -> bool -> unit) =
          fun (x68 : t) ->
            fun (x69 : bool) ->
              Ojs.set_prop_ascii (t_to_js x68) "waitForTrailers"
                (Ojs.bool_to_js x69)
      end
    module StatOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x71 : Ojs.t) -> x71
        and t_to_js : t -> Ojs.t = fun (x70 : Ojs.t) -> x70
        let (get_offset : t -> int) =
          fun (x72 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x72) "offset")
        let (set_offset : t -> int -> unit) =
          fun (x73 : t) ->
            fun (x74 : int) ->
              Ojs.set_prop_ascii (t_to_js x73) "offset" (Ojs.int_to_js x74)
        let (get_length : t -> int) =
          fun (x75 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x75) "length")
        let (set_length : t -> int -> unit) =
          fun (x76 : t) ->
            fun (x77 : int) ->
              Ojs.set_prop_ascii (t_to_js x76) "length" (Ojs.int_to_js x77)
      end
    module ServerStreamFileResponseOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x79 : Ojs.t) -> x79
        and t_to_js : t -> Ojs.t = fun (x78 : Ojs.t) -> x78
        let (stat_check :
          t ->
            stats:Fs.Stats.t ->
              headers:Node_http.Http.OutgoingHttpHeaders.t ->
                stat_options:StatOptions.t -> unit or_boolean)
          =
          fun (x83 : t) ->
            fun ~stats:(x80 : Fs.Stats.t) ->
              fun ~headers:(x81 : Node_http.Http.OutgoingHttpHeaders.t) ->
                fun ~stat_options:(x82 : StatOptions.t) ->
                  or_boolean_of_js Ojs.unit_of_js
                    (Ojs.call (t_to_js x83) "statCheck"
                       [|(Fs.Stats.t_to_js x80);(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                                   x81);(StatOptions.t_to_js
                                                           x82)|])
        let (get_wait_for_trailers : t -> bool) =
          fun (x85 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x85) "waitForTrailers")
        let (set_wait_for_trailers : t -> bool -> unit) =
          fun (x86 : t) ->
            fun (x87 : bool) ->
              Ojs.set_prop_ascii (t_to_js x86) "waitForTrailers"
                (Ojs.bool_to_js x87)
        let (get_offset : t -> int) =
          fun (x88 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x88) "offset")
        let (set_offset : t -> int -> unit) =
          fun (x89 : t) ->
            fun (x90 : int) ->
              Ojs.set_prop_ascii (t_to_js x89) "offset" (Ojs.int_to_js x90)
        let (get_length : t -> int) =
          fun (x91 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x91) "length")
        let (set_length : t -> int -> unit) =
          fun (x92 : t) ->
            fun (x93 : int) ->
              Ojs.set_prop_ascii (t_to_js x92) "length" (Ojs.int_to_js x93)
      end
    module ServerStreamFileResponseOptionsWithError =
      struct
        include struct include ServerStreamFileResponseOptions end
        let (on_error : t -> err:ErrnoException.t -> unit) =
          fun (x95 : t) ->
            fun ~err:(x94 : ErrnoException.t) ->
              ignore
                (Ojs.call (t_to_js x95) "onError"
                   [|(ErrnoException.t_to_js x94)|])
      end
    module Http2Stream =
      struct
        include struct include Stream.Duplex end
        let (get_aborted : t -> bool) =
          fun (x96 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x96) "aborted")
        let (get_buffer_size : t -> int) =
          fun (x97 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x97) "bufferSize")
        let (get_closed : t -> bool) =
          fun (x98 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x98) "closed")
        let (get_destroyed : t -> bool) =
          fun (x99 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x99) "destroyed")
        let (get_end_after_headers : t -> bool) =
          fun (x100 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x100) "endAfterHeaders")
        let (get_id : t -> int) =
          fun (x101 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x101) "id")
        let (get_pending : t -> bool) =
          fun (x102 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x102) "pending")
        let (get_rst_code : t -> int) =
          fun (x103 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x103) "rstCode")
        let (get_sent_headers : t -> Node_http.Http.OutgoingHttpHeaders.t) =
          fun (x104 : t) ->
            Node_http.Http.OutgoingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x104) "sentHeaders")
        let (get_sent_info_headers :
          t -> Node_http.Http.OutgoingHttpHeaders.t list) =
          fun (x105 : t) ->
            Ojs.list_of_js Node_http.Http.OutgoingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x105) "sentInfoHeaders")
        let (get_sent_trailers : t -> Node_http.Http.OutgoingHttpHeaders.t) =
          fun (x107 : t) ->
            Node_http.Http.OutgoingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x107) "sentTrailers")
        let (get_state : t -> StreamState.t) =
          fun (x108 : t) ->
            StreamState.t_of_js (Ojs.get_prop_ascii (t_to_js x108) "state")
        let (close :
          t -> ?code:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x114 : t) ->
            fun ?code:(x109 : int option) ->
              fun ?callback:(x110 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x115 = t_to_js x114 in
                     Ojs.call (Ojs.get_prop_ascii x115 "close") "apply"
                       [|x115;((let x111 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x109 with
                                 | Some x113 ->
                                     ignore
                                       (Ojs.call x111 "push"
                                          [|(Ojs.int_to_js x113)|])
                                 | None -> ());
                                (match x110 with
                                 | Some x112 ->
                                     ignore
                                       (Ojs.call x111 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x112 ()))|])
                                 | None -> ());
                                x111))|])
        let (priority : t -> options:StreamPriorityOptions.t -> unit) =
          fun (x117 : t) ->
            fun ~options:(x116 : StreamPriorityOptions.t) ->
              ignore
                (Ojs.call (t_to_js x117) "priority"
                   [|(StreamPriorityOptions.t_to_js x116)|])
        let (set_timeout :
          t -> msecs:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x122 : t) ->
            fun ~msecs:(x118 : int) ->
              fun ?callback:(x119 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x123 = t_to_js x122 in
                     Ojs.call (Ojs.get_prop_ascii x123 "setTimeout") "apply"
                       [|x123;((let x120 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x120 "push"
                                     [|(Ojs.int_to_js x118)|]);
                                (match x119 with
                                 | Some x121 ->
                                     ignore
                                       (Ojs.call x120 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x121 ()))|])
                                 | None -> ());
                                x120))|])
        let (send_trailers :
          t -> headers:Node_http.Http.OutgoingHttpHeaders.t -> unit) =
          fun (x125 : t) ->
            fun ~headers:(x124 : Node_http.Http.OutgoingHttpHeaders.t) ->
              ignore
                (Ojs.call (t_to_js x125) "sendTrailers"
                   [|(Node_http.Http.OutgoingHttpHeaders.t_to_js x124)|])
        let (add_listener :
          t -> event:[ `aborted ] -> listener:(unit -> unit) -> t) =
          fun (x128 : t) ->
            fun ~event:(x126 : [ `aborted ]) ->
              fun ~listener:(x127 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x128) "addListener"
                     [|((match x126 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 1 (fun _ -> x127 ()))|])
        let (add_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x131 : t) ->
            fun ~event:(x129 : [ `close ]) ->
              fun ~listener:(x130 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x131) "addListener"
                     [|((match x129 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x130 ()))|])
        let (add_listener'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x136 : t) ->
            fun ~event:(x132 : [ `data ]) ->
              fun ~listener:(x133 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x136) "addListener"
                     [|((match x132 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x134 : Ojs.t) ->
                            x133 ~chunk:(or_string_of_js Buffer.t_of_js x134)))|])
        let (add_listener''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x139 : t) ->
            fun ~event:(x137 : [ `drain ]) ->
              fun ~listener:(x138 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x139) "addListener"
                     [|((match x137 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x138 ()))|])
        let (add_listener'''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x142 : t) ->
            fun ~event:(x140 : [ `end_ ]) ->
              fun ~listener:(x141 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x142) "addListener"
                     [|((match x140 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x141 ()))|])
        let (add_listener''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x146 : t) ->
            fun ~event:(x143 : [ `error ]) ->
              fun ~listener:(x144 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x146) "addListener"
                     [|((match x143 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x145 : Ojs.t) ->
                            x144 ~err:(Error.t_of_js x145)))|])
        let (add_listener'''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x149 : t) ->
            fun ~event:(x147 : [ `finish ]) ->
              fun ~listener:(x148 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x149) "addListener"
                     [|((match x147 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x148 ()))|])
        let (add_listener''''''' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int -> error_code:int -> unit) -> t)
          =
          fun (x154 : t) ->
            fun ~event:(x150 : [ `frameError ]) ->
              fun ~listener:(x151 : frameType:int -> error_code:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x154) "addListener"
                     [|((match x150 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 2
                         (fun (x152 : Ojs.t) ->
                            fun (x153 : Ojs.t) ->
                              x151 ~frameType:(Ojs.int_of_js x152)
                                ~error_code:(Ojs.int_of_js x153)))|])
        let (add_listener'''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x158 : t) ->
            fun ~event:(x155 : [ `pipe ]) ->
              fun ~listener:(x156 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x158) "addListener"
                     [|((match x155 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x157 : Ojs.t) ->
                            x156 ~src:(Stream.Readable.t_of_js x157)))|])
        let (add_listener''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x162 : t) ->
            fun ~event:(x159 : [ `unpipe ]) ->
              fun ~listener:(x160 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x162) "addListener"
                     [|((match x159 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x161 :
                                                                    Ojs.t) ->
                                                                    x160
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x161)))|])
        let (add_listener'''''''''' :
          t -> event:[ `streamClosed ] -> listener:(code:int -> unit) -> t) =
          fun (x166 : t) ->
            fun ~event:(x163 : [ `streamClosed ]) ->
              fun ~listener:(x164 : code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x166) "addListener"
                     [|((match x163 with
                         | `streamClosed -> Ojs.string_to_js "streamClosed"));(
                       Ojs.fun_to_js 1
                         (fun (x165 : Ojs.t) ->
                            x164 ~code:(Ojs.int_of_js x165)))|])
        let (add_listener''''''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x169 : t) ->
            fun ~event:(x167 : [ `timeout ]) ->
              fun ~listener:(x168 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x169) "addListener"
                     [|((match x167 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x168 ()))|])
        let (add_listener'''''''''''' :
          t ->
            event:[ `trailers ] ->
              listener:(trailers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x174 : t) ->
            fun ~event:(x170 : [ `trailers ]) ->
              fun
                ~listener:(x171 :
                            trailers:IncomingHttpHeaders.t ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x174) "addListener"
                     [|((match x170 with
                         | `trailers -> Ojs.string_to_js "trailers"));(
                       Ojs.fun_to_js 2
                         (fun (x172 : Ojs.t) ->
                            fun (x173 : Ojs.t) ->
                              x171
                                ~trailers:(IncomingHttpHeaders.t_of_js x172)
                                ~flags:(Ojs.int_of_js x173)))|])
        let (add_listener''''''''''''' :
          t -> event:[ `wantTrailers ] -> listener:(unit -> unit) -> t) =
          fun (x177 : t) ->
            fun ~event:(x175 : [ `wantTrailers ]) ->
              fun ~listener:(x176 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x177) "addListener"
                     [|((match x175 with
                         | `wantTrailers -> Ojs.string_to_js "wantTrailers"));(
                       Ojs.fun_to_js 1 (fun _ -> x176 ()))|])
        let (add_listener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x183 : t) ->
            fun ~event:(x178 : symbol or_string) ->
              fun ~listener:(x180 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x183) "addListener"
                     [|(or_string_to_js symbol_to_js x178);(Ojs.fun_to_js_args
                                                              (fun (x181 : _)
                                                                 ->
                                                                 x180
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x181 0)))|])
        let (emit : t -> event:[ `aborted ] -> bool) =
          fun (x185 : t) ->
            fun ~event:(x184 : [ `aborted ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x185) "emit"
                   [|((match x184 with
                       | `aborted -> Ojs.string_to_js "aborted"))|])
        let (emit' : t -> event:[ `close ] -> bool) =
          fun (x187 : t) ->
            fun ~event:(x186 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x187) "emit"
                   [|((match x186 with | `close -> Ojs.string_to_js "close"))|])
        let (emit'' :
          t -> event:[ `data ] -> chunk:Buffer.t or_string -> bool) =
          fun (x191 : t) ->
            fun ~event:(x188 : [ `data ]) ->
              fun ~chunk:(x189 : Buffer.t or_string) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x191) "emit"
                     [|((match x188 with | `data -> Ojs.string_to_js "data"));(
                       or_string_to_js Buffer.t_to_js x189)|])
        let (emit''' : t -> event:[ `drain ] -> bool) =
          fun (x193 : t) ->
            fun ~event:(x192 : [ `drain ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x193) "emit"
                   [|((match x192 with | `drain -> Ojs.string_to_js "drain"))|])
        let (emit'''' : t -> event:[ `end_ ] -> bool) =
          fun (x195 : t) ->
            fun ~event:(x194 : [ `end_ ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x195) "emit"
                   [|((match x194 with | `end_ -> Ojs.string_to_js "end"))|])
        let (emit''''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x198 : t) ->
            fun ~event:(x196 : [ `error ]) ->
              fun ~err:(x197 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x198) "emit"
                     [|((match x196 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x197)|])
        let (emit'''''' : t -> event:[ `finish ] -> bool) =
          fun (x200 : t) ->
            fun ~event:(x199 : [ `finish ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x200) "emit"
                   [|((match x199 with | `finish -> Ojs.string_to_js "finish"))|])
        let (emit''''''' :
          t ->
            event:[ `frameError ] -> frame_type:int -> error_code:int -> bool)
          =
          fun (x204 : t) ->
            fun ~event:(x201 : [ `frameError ]) ->
              fun ~frame_type:(x202 : int) ->
                fun ~error_code:(x203 : int) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x204) "emit"
                       [|((match x201 with
                           | `frameError -> Ojs.string_to_js "frameError"));(
                         Ojs.int_to_js x202);(Ojs.int_to_js x203)|])
        let (emit'''''''' :
          t -> event:[ `pipe ] -> src:Stream.Readable.t -> bool) =
          fun (x207 : t) ->
            fun ~event:(x205 : [ `pipe ]) ->
              fun ~src:(x206 : Stream.Readable.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x207) "emit"
                     [|((match x205 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Stream.Readable.t_to_js x206)|])
        let (emit''''''''' :
          t -> event:[ `unpipe ] -> src:Stream.Readable.t -> bool) =
          fun (x210 : t) ->
            fun ~event:(x208 : [ `unpipe ]) ->
              fun ~src:(x209 : Stream.Readable.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x210) "emit"
                     [|((match x208 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Stream.Readable.t_to_js
                                                                    x209)|])
        let (emit'''''''''' :
          t -> event:[ `streamClosed ] -> code:int -> bool) =
          fun (x213 : t) ->
            fun ~event:(x211 : [ `streamClosed ]) ->
              fun ~code:(x212 : int) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x213) "emit"
                     [|((match x211 with
                         | `streamClosed -> Ojs.string_to_js "streamClosed"));(
                       Ojs.int_to_js x212)|])
        let (emit''''''''''' : t -> event:[ `timeout ] -> bool) =
          fun (x215 : t) ->
            fun ~event:(x214 : [ `timeout ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x215) "emit"
                   [|((match x214 with
                       | `timeout -> Ojs.string_to_js "timeout"))|])
        let (emit'''''''''''' :
          t ->
            event:[ `trailers ] ->
              trailers:IncomingHttpHeaders.t -> flags:int -> bool)
          =
          fun (x219 : t) ->
            fun ~event:(x216 : [ `trailers ]) ->
              fun ~trailers:(x217 : IncomingHttpHeaders.t) ->
                fun ~flags:(x218 : int) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x219) "emit"
                       [|((match x216 with
                           | `trailers -> Ojs.string_to_js "trailers"));(
                         IncomingHttpHeaders.t_to_js x217);(Ojs.int_to_js
                                                              x218)|])
        let (emit''''''''''''' : t -> event:[ `wantTrailers ] -> bool) =
          fun (x221 : t) ->
            fun ~event:(x220 : [ `wantTrailers ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x221) "emit"
                   [|((match x220 with
                       | `wantTrailers -> Ojs.string_to_js "wantTrailers"))|])
        let (emit'''''''''''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x227 : t) ->
            fun ~event:(x222 : symbol or_string) ->
              fun ~args:(x223 : any list) ->
                Ojs.bool_of_js
                  (let x228 = t_to_js x227 in
                   Ojs.call (Ojs.get_prop_ascii x228 "emit") "apply"
                     [|x228;((let x224 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x224 "push"
                                   [|(or_string_to_js symbol_to_js x222)|]);
                              List.iter
                                (fun (x225 : any) ->
                                   ignore
                                     (Ojs.call x224 "push"
                                        [|(any_to_js x225)|])) x223;
                              x224))|])
        let (on : t -> event:[ `aborted ] -> listener:(unit -> unit) -> t) =
          fun (x231 : t) ->
            fun ~event:(x229 : [ `aborted ]) ->
              fun ~listener:(x230 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x231) "on"
                     [|((match x229 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 1 (fun _ -> x230 ()))|])
        let (on' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x234 : t) ->
            fun ~event:(x232 : [ `close ]) ->
              fun ~listener:(x233 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x234) "on"
                     [|((match x232 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x233 ()))|])
        let (on'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x239 : t) ->
            fun ~event:(x235 : [ `data ]) ->
              fun ~listener:(x236 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x239) "on"
                     [|((match x235 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x237 : Ojs.t) ->
                            x236 ~chunk:(or_string_of_js Buffer.t_of_js x237)))|])
        let (on''' : t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x242 : t) ->
            fun ~event:(x240 : [ `drain ]) ->
              fun ~listener:(x241 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x242) "on"
                     [|((match x240 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x241 ()))|])
        let (on'''' : t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x245 : t) ->
            fun ~event:(x243 : [ `end_ ]) ->
              fun ~listener:(x244 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x245) "on"
                     [|((match x243 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x244 ()))|])
        let (on''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x249 : t) ->
            fun ~event:(x246 : [ `error ]) ->
              fun ~listener:(x247 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x249) "on"
                     [|((match x246 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x248 : Ojs.t) ->
                            x247 ~err:(Error.t_of_js x248)))|])
        let (on'''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x252 : t) ->
            fun ~event:(x250 : [ `finish ]) ->
              fun ~listener:(x251 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x252) "on"
                     [|((match x250 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x251 ()))|])
        let (on''''''' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int -> error_code:int -> unit) -> t)
          =
          fun (x257 : t) ->
            fun ~event:(x253 : [ `frameError ]) ->
              fun ~listener:(x254 : frameType:int -> error_code:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x257) "on"
                     [|((match x253 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 2
                         (fun (x255 : Ojs.t) ->
                            fun (x256 : Ojs.t) ->
                              x254 ~frameType:(Ojs.int_of_js x255)
                                ~error_code:(Ojs.int_of_js x256)))|])
        let (on'''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x261 : t) ->
            fun ~event:(x258 : [ `pipe ]) ->
              fun ~listener:(x259 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x261) "on"
                     [|((match x258 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x260 : Ojs.t) ->
                            x259 ~src:(Stream.Readable.t_of_js x260)))|])
        let (on''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x265 : t) ->
            fun ~event:(x262 : [ `unpipe ]) ->
              fun ~listener:(x263 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x265) "on"
                     [|((match x262 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x264 :
                                                                    Ojs.t) ->
                                                                    x263
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x264)))|])
        let (on'''''''''' :
          t -> event:[ `streamClosed ] -> listener:(code:int -> unit) -> t) =
          fun (x269 : t) ->
            fun ~event:(x266 : [ `streamClosed ]) ->
              fun ~listener:(x267 : code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x269) "on"
                     [|((match x266 with
                         | `streamClosed -> Ojs.string_to_js "streamClosed"));(
                       Ojs.fun_to_js 1
                         (fun (x268 : Ojs.t) ->
                            x267 ~code:(Ojs.int_of_js x268)))|])
        let (on''''''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x272 : t) ->
            fun ~event:(x270 : [ `timeout ]) ->
              fun ~listener:(x271 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x272) "on"
                     [|((match x270 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x271 ()))|])
        let (on'''''''''''' :
          t ->
            event:[ `trailers ] ->
              listener:(trailers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x277 : t) ->
            fun ~event:(x273 : [ `trailers ]) ->
              fun
                ~listener:(x274 :
                            trailers:IncomingHttpHeaders.t ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x277) "on"
                     [|((match x273 with
                         | `trailers -> Ojs.string_to_js "trailers"));(
                       Ojs.fun_to_js 2
                         (fun (x275 : Ojs.t) ->
                            fun (x276 : Ojs.t) ->
                              x274
                                ~trailers:(IncomingHttpHeaders.t_of_js x275)
                                ~flags:(Ojs.int_of_js x276)))|])
        let (on''''''''''''' :
          t -> event:[ `wantTrailers ] -> listener:(unit -> unit) -> t) =
          fun (x280 : t) ->
            fun ~event:(x278 : [ `wantTrailers ]) ->
              fun ~listener:(x279 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x280) "on"
                     [|((match x278 with
                         | `wantTrailers -> Ojs.string_to_js "wantTrailers"));(
                       Ojs.fun_to_js 1 (fun _ -> x279 ()))|])
        let (on'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x286 : t) ->
            fun ~event:(x281 : symbol or_string) ->
              fun ~listener:(x283 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x286) "on"
                     [|(or_string_to_js symbol_to_js x281);(Ojs.fun_to_js_args
                                                              (fun (x284 : _)
                                                                 ->
                                                                 x283
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x284 0)))|])
        let (once : t -> event:[ `aborted ] -> listener:(unit -> unit) -> t)
          =
          fun (x289 : t) ->
            fun ~event:(x287 : [ `aborted ]) ->
              fun ~listener:(x288 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x289) "once"
                     [|((match x287 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 1 (fun _ -> x288 ()))|])
        let (once' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x292 : t) ->
            fun ~event:(x290 : [ `close ]) ->
              fun ~listener:(x291 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x292) "once"
                     [|((match x290 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x291 ()))|])
        let (once'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x297 : t) ->
            fun ~event:(x293 : [ `data ]) ->
              fun ~listener:(x294 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x297) "once"
                     [|((match x293 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x295 : Ojs.t) ->
                            x294 ~chunk:(or_string_of_js Buffer.t_of_js x295)))|])
        let (once''' : t -> event:[ `drain ] -> listener:(unit -> unit) -> t)
          =
          fun (x300 : t) ->
            fun ~event:(x298 : [ `drain ]) ->
              fun ~listener:(x299 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x300) "once"
                     [|((match x298 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x299 ()))|])
        let (once'''' : t -> event:[ `end_ ] -> listener:(unit -> unit) -> t)
          =
          fun (x303 : t) ->
            fun ~event:(x301 : [ `end_ ]) ->
              fun ~listener:(x302 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x303) "once"
                     [|((match x301 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x302 ()))|])
        let (once''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x307 : t) ->
            fun ~event:(x304 : [ `error ]) ->
              fun ~listener:(x305 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x307) "once"
                     [|((match x304 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x306 : Ojs.t) ->
                            x305 ~err:(Error.t_of_js x306)))|])
        let (once'''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x310 : t) ->
            fun ~event:(x308 : [ `finish ]) ->
              fun ~listener:(x309 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x310) "once"
                     [|((match x308 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x309 ()))|])
        let (once''''''' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int -> error_code:int -> unit) -> t)
          =
          fun (x315 : t) ->
            fun ~event:(x311 : [ `frameError ]) ->
              fun ~listener:(x312 : frameType:int -> error_code:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x315) "once"
                     [|((match x311 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 2
                         (fun (x313 : Ojs.t) ->
                            fun (x314 : Ojs.t) ->
                              x312 ~frameType:(Ojs.int_of_js x313)
                                ~error_code:(Ojs.int_of_js x314)))|])
        let (once'''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x319 : t) ->
            fun ~event:(x316 : [ `pipe ]) ->
              fun ~listener:(x317 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x319) "once"
                     [|((match x316 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x318 : Ojs.t) ->
                            x317 ~src:(Stream.Readable.t_of_js x318)))|])
        let (once''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x323 : t) ->
            fun ~event:(x320 : [ `unpipe ]) ->
              fun ~listener:(x321 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x323) "once"
                     [|((match x320 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x322 :
                                                                    Ojs.t) ->
                                                                    x321
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x322)))|])
        let (once'''''''''' :
          t -> event:[ `streamClosed ] -> listener:(code:int -> unit) -> t) =
          fun (x327 : t) ->
            fun ~event:(x324 : [ `streamClosed ]) ->
              fun ~listener:(x325 : code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x327) "once"
                     [|((match x324 with
                         | `streamClosed -> Ojs.string_to_js "streamClosed"));(
                       Ojs.fun_to_js 1
                         (fun (x326 : Ojs.t) ->
                            x325 ~code:(Ojs.int_of_js x326)))|])
        let (once''''''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x330 : t) ->
            fun ~event:(x328 : [ `timeout ]) ->
              fun ~listener:(x329 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x330) "once"
                     [|((match x328 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x329 ()))|])
        let (once'''''''''''' :
          t ->
            event:[ `trailers ] ->
              listener:(trailers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x335 : t) ->
            fun ~event:(x331 : [ `trailers ]) ->
              fun
                ~listener:(x332 :
                            trailers:IncomingHttpHeaders.t ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x335) "once"
                     [|((match x331 with
                         | `trailers -> Ojs.string_to_js "trailers"));(
                       Ojs.fun_to_js 2
                         (fun (x333 : Ojs.t) ->
                            fun (x334 : Ojs.t) ->
                              x332
                                ~trailers:(IncomingHttpHeaders.t_of_js x333)
                                ~flags:(Ojs.int_of_js x334)))|])
        let (once''''''''''''' :
          t -> event:[ `wantTrailers ] -> listener:(unit -> unit) -> t) =
          fun (x338 : t) ->
            fun ~event:(x336 : [ `wantTrailers ]) ->
              fun ~listener:(x337 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x338) "once"
                     [|((match x336 with
                         | `wantTrailers -> Ojs.string_to_js "wantTrailers"));(
                       Ojs.fun_to_js 1 (fun _ -> x337 ()))|])
        let (once'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x344 : t) ->
            fun ~event:(x339 : symbol or_string) ->
              fun ~listener:(x341 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x344) "once"
                     [|(or_string_to_js symbol_to_js x339);(Ojs.fun_to_js_args
                                                              (fun (x342 : _)
                                                                 ->
                                                                 x341
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x342 0)))|])
        let (prepend_listener :
          t -> event:[ `aborted ] -> listener:(unit -> unit) -> t) =
          fun (x347 : t) ->
            fun ~event:(x345 : [ `aborted ]) ->
              fun ~listener:(x346 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x347) "prependListener"
                     [|((match x345 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 1 (fun _ -> x346 ()))|])
        let (prepend_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x350 : t) ->
            fun ~event:(x348 : [ `close ]) ->
              fun ~listener:(x349 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x350) "prependListener"
                     [|((match x348 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x349 ()))|])
        let (prepend_listener'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x355 : t) ->
            fun ~event:(x351 : [ `data ]) ->
              fun ~listener:(x352 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x355) "prependListener"
                     [|((match x351 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x353 : Ojs.t) ->
                            x352 ~chunk:(or_string_of_js Buffer.t_of_js x353)))|])
        let (prepend_listener''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x358 : t) ->
            fun ~event:(x356 : [ `drain ]) ->
              fun ~listener:(x357 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x358) "prependListener"
                     [|((match x356 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x357 ()))|])
        let (prepend_listener'''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x361 : t) ->
            fun ~event:(x359 : [ `end_ ]) ->
              fun ~listener:(x360 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x361) "prependListener"
                     [|((match x359 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x360 ()))|])
        let (prepend_listener''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x365 : t) ->
            fun ~event:(x362 : [ `error ]) ->
              fun ~listener:(x363 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x365) "prependListener"
                     [|((match x362 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x364 : Ojs.t) ->
                            x363 ~err:(Error.t_of_js x364)))|])
        let (prepend_listener'''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x368 : t) ->
            fun ~event:(x366 : [ `finish ]) ->
              fun ~listener:(x367 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x368) "prependListener"
                     [|((match x366 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x367 ()))|])
        let (prepend_listener''''''' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int -> error_code:int -> unit) -> t)
          =
          fun (x373 : t) ->
            fun ~event:(x369 : [ `frameError ]) ->
              fun ~listener:(x370 : frameType:int -> error_code:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x373) "prependListener"
                     [|((match x369 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 2
                         (fun (x371 : Ojs.t) ->
                            fun (x372 : Ojs.t) ->
                              x370 ~frameType:(Ojs.int_of_js x371)
                                ~error_code:(Ojs.int_of_js x372)))|])
        let (prepend_listener'''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x377 : t) ->
            fun ~event:(x374 : [ `pipe ]) ->
              fun ~listener:(x375 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x377) "prependListener"
                     [|((match x374 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x376 : Ojs.t) ->
                            x375 ~src:(Stream.Readable.t_of_js x376)))|])
        let (prepend_listener''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x381 : t) ->
            fun ~event:(x378 : [ `unpipe ]) ->
              fun ~listener:(x379 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x381) "prependListener"
                     [|((match x378 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x380 :
                                                                    Ojs.t) ->
                                                                    x379
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x380)))|])
        let (prepend_listener'''''''''' :
          t -> event:[ `streamClosed ] -> listener:(code:int -> unit) -> t) =
          fun (x385 : t) ->
            fun ~event:(x382 : [ `streamClosed ]) ->
              fun ~listener:(x383 : code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x385) "prependListener"
                     [|((match x382 with
                         | `streamClosed -> Ojs.string_to_js "streamClosed"));(
                       Ojs.fun_to_js 1
                         (fun (x384 : Ojs.t) ->
                            x383 ~code:(Ojs.int_of_js x384)))|])
        let (prepend_listener''''''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x388 : t) ->
            fun ~event:(x386 : [ `timeout ]) ->
              fun ~listener:(x387 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x388) "prependListener"
                     [|((match x386 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x387 ()))|])
        let (prepend_listener'''''''''''' :
          t ->
            event:[ `trailers ] ->
              listener:(trailers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x393 : t) ->
            fun ~event:(x389 : [ `trailers ]) ->
              fun
                ~listener:(x390 :
                            trailers:IncomingHttpHeaders.t ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x393) "prependListener"
                     [|((match x389 with
                         | `trailers -> Ojs.string_to_js "trailers"));(
                       Ojs.fun_to_js 2
                         (fun (x391 : Ojs.t) ->
                            fun (x392 : Ojs.t) ->
                              x390
                                ~trailers:(IncomingHttpHeaders.t_of_js x391)
                                ~flags:(Ojs.int_of_js x392)))|])
        let (prepend_listener''''''''''''' :
          t -> event:[ `wantTrailers ] -> listener:(unit -> unit) -> t) =
          fun (x396 : t) ->
            fun ~event:(x394 : [ `wantTrailers ]) ->
              fun ~listener:(x395 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x396) "prependListener"
                     [|((match x394 with
                         | `wantTrailers -> Ojs.string_to_js "wantTrailers"));(
                       Ojs.fun_to_js 1 (fun _ -> x395 ()))|])
        let (prepend_listener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x402 : t) ->
            fun ~event:(x397 : symbol or_string) ->
              fun ~listener:(x399 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x402) "prependListener"
                     [|(or_string_to_js symbol_to_js x397);(Ojs.fun_to_js_args
                                                              (fun (x400 : _)
                                                                 ->
                                                                 x399
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x400 0)))|])
        let (prepend_once_listener :
          t -> event:[ `aborted ] -> listener:(unit -> unit) -> t) =
          fun (x405 : t) ->
            fun ~event:(x403 : [ `aborted ]) ->
              fun ~listener:(x404 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x405) "prependOnceListener"
                     [|((match x403 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 1 (fun _ -> x404 ()))|])
        let (prepend_once_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x408 : t) ->
            fun ~event:(x406 : [ `close ]) ->
              fun ~listener:(x407 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x408) "prependOnceListener"
                     [|((match x406 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x407 ()))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x413 : t) ->
            fun ~event:(x409 : [ `data ]) ->
              fun ~listener:(x410 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x413) "prependOnceListener"
                     [|((match x409 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x411 : Ojs.t) ->
                            x410 ~chunk:(or_string_of_js Buffer.t_of_js x411)))|])
        let (prepend_once_listener''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x416 : t) ->
            fun ~event:(x414 : [ `drain ]) ->
              fun ~listener:(x415 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x416) "prependOnceListener"
                     [|((match x414 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x415 ()))|])
        let (prepend_once_listener'''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x419 : t) ->
            fun ~event:(x417 : [ `end_ ]) ->
              fun ~listener:(x418 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x419) "prependOnceListener"
                     [|((match x417 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x418 ()))|])
        let (prepend_once_listener''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x423 : t) ->
            fun ~event:(x420 : [ `error ]) ->
              fun ~listener:(x421 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x423) "prependOnceListener"
                     [|((match x420 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x422 : Ojs.t) ->
                            x421 ~err:(Error.t_of_js x422)))|])
        let (prepend_once_listener'''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x426 : t) ->
            fun ~event:(x424 : [ `finish ]) ->
              fun ~listener:(x425 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x426) "prependOnceListener"
                     [|((match x424 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x425 ()))|])
        let (prepend_once_listener''''''' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int -> error_code:int -> unit) -> t)
          =
          fun (x431 : t) ->
            fun ~event:(x427 : [ `frameError ]) ->
              fun ~listener:(x428 : frameType:int -> error_code:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x431) "prependOnceListener"
                     [|((match x427 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 2
                         (fun (x429 : Ojs.t) ->
                            fun (x430 : Ojs.t) ->
                              x428 ~frameType:(Ojs.int_of_js x429)
                                ~error_code:(Ojs.int_of_js x430)))|])
        let (prepend_once_listener'''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x435 : t) ->
            fun ~event:(x432 : [ `pipe ]) ->
              fun ~listener:(x433 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x435) "prependOnceListener"
                     [|((match x432 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x434 : Ojs.t) ->
                            x433 ~src:(Stream.Readable.t_of_js x434)))|])
        let (prepend_once_listener''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x439 : t) ->
            fun ~event:(x436 : [ `unpipe ]) ->
              fun ~listener:(x437 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x439) "prependOnceListener"
                     [|((match x436 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x438 :
                                                                    Ojs.t) ->
                                                                    x437
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x438)))|])
        let (prepend_once_listener'''''''''' :
          t -> event:[ `streamClosed ] -> listener:(code:int -> unit) -> t) =
          fun (x443 : t) ->
            fun ~event:(x440 : [ `streamClosed ]) ->
              fun ~listener:(x441 : code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x443) "prependOnceListener"
                     [|((match x440 with
                         | `streamClosed -> Ojs.string_to_js "streamClosed"));(
                       Ojs.fun_to_js 1
                         (fun (x442 : Ojs.t) ->
                            x441 ~code:(Ojs.int_of_js x442)))|])
        let (prepend_once_listener''''''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x446 : t) ->
            fun ~event:(x444 : [ `timeout ]) ->
              fun ~listener:(x445 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x446) "prependOnceListener"
                     [|((match x444 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x445 ()))|])
        let (prepend_once_listener'''''''''''' :
          t ->
            event:[ `trailers ] ->
              listener:(trailers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x451 : t) ->
            fun ~event:(x447 : [ `trailers ]) ->
              fun
                ~listener:(x448 :
                            trailers:IncomingHttpHeaders.t ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x451) "prependOnceListener"
                     [|((match x447 with
                         | `trailers -> Ojs.string_to_js "trailers"));(
                       Ojs.fun_to_js 2
                         (fun (x449 : Ojs.t) ->
                            fun (x450 : Ojs.t) ->
                              x448
                                ~trailers:(IncomingHttpHeaders.t_of_js x449)
                                ~flags:(Ojs.int_of_js x450)))|])
        let (prepend_once_listener''''''''''''' :
          t -> event:[ `wantTrailers ] -> listener:(unit -> unit) -> t) =
          fun (x454 : t) ->
            fun ~event:(x452 : [ `wantTrailers ]) ->
              fun ~listener:(x453 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x454) "prependOnceListener"
                     [|((match x452 with
                         | `wantTrailers -> Ojs.string_to_js "wantTrailers"));(
                       Ojs.fun_to_js 1 (fun _ -> x453 ()))|])
        let (prepend_once_listener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x460 : t) ->
            fun ~event:(x455 : symbol or_string) ->
              fun ~listener:(x457 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x460) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x455);(Ojs.fun_to_js_args
                                                              (fun (x458 : _)
                                                                 ->
                                                                 x457
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x458 0)))|])
      end
    module ClientHttp2Stream =
      struct
        include struct include Http2Stream end
        let (add_listener :
          t ->
            event:[ `continue ] ->
              listener:(unit -> AnonymousInterface0.t) -> t)
          =
          fun (x463 : t) ->
            fun ~event:(x461 : [ `continue ]) ->
              fun ~listener:(x462 : unit -> AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x463) "addListener"
                     [|((match x461 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1
                         (fun _ -> AnonymousInterface0.t_to_js (x462 ())))|])
        let (add_listener' :
          t ->
            event:[ `headers ] ->
              listener:(headers:(IncomingHttpHeaders.t,
                          IncomingHttpStatusHeader.t) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x470 : t) ->
            fun ~event:(x464 : [ `headers ]) ->
              fun
                ~listener:(x465 :
                            headers:(IncomingHttpHeaders.t,
                              IncomingHttpStatusHeader.t) intersection2 ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x470) "addListener"
                     [|((match x464 with
                         | `headers -> Ojs.string_to_js "headers"));(
                       Ojs.fun_to_js 2
                         (fun (x466 : Ojs.t) ->
                            fun (x469 : Ojs.t) ->
                              x465
                                ~headers:(intersection2_of_js
                                            IncomingHttpHeaders.t_of_js
                                            IncomingHttpStatusHeader.t_of_js
                                            x466) ~flags:(Ojs.int_of_js x469)))|])
        let (add_listener'' :
          t ->
            event:[ `push ] ->
              listener:(headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x475 : t) ->
            fun ~event:(x471 : [ `push ]) ->
              fun
                ~listener:(x472 :
                            headers:IncomingHttpHeaders.t ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x475) "addListener"
                     [|((match x471 with | `push -> Ojs.string_to_js "push"));(
                       Ojs.fun_to_js 2
                         (fun (x473 : Ojs.t) ->
                            fun (x474 : Ojs.t) ->
                              x472
                                ~headers:(IncomingHttpHeaders.t_of_js x473)
                                ~flags:(Ojs.int_of_js x474)))|])
        let (add_listener''' :
          t ->
            event:[ `response ] ->
              listener:(headers:(IncomingHttpHeaders.t,
                          IncomingHttpStatusHeader.t) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x482 : t) ->
            fun ~event:(x476 : [ `response ]) ->
              fun
                ~listener:(x477 :
                            headers:(IncomingHttpHeaders.t,
                              IncomingHttpStatusHeader.t) intersection2 ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x482) "addListener"
                     [|((match x476 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 2
                         (fun (x478 : Ojs.t) ->
                            fun (x481 : Ojs.t) ->
                              x477
                                ~headers:(intersection2_of_js
                                            IncomingHttpHeaders.t_of_js
                                            IncomingHttpStatusHeader.t_of_js
                                            x478) ~flags:(Ojs.int_of_js x481)))|])
        let (add_listener'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x488 : t) ->
            fun ~event:(x483 : symbol or_string) ->
              fun ~listener:(x485 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x488) "addListener"
                     [|(or_string_to_js symbol_to_js x483);(Ojs.fun_to_js_args
                                                              (fun (x486 : _)
                                                                 ->
                                                                 x485
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x486 0)))|])
        let (emit : t -> event:[ `continue ] -> bool) =
          fun (x490 : t) ->
            fun ~event:(x489 : [ `continue ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x490) "emit"
                   [|((match x489 with
                       | `continue -> Ojs.string_to_js "continue"))|])
        let (emit' :
          t ->
            event:[ `headers ] ->
              headers:(IncomingHttpHeaders.t, IncomingHttpStatusHeader.t)
                intersection2 -> flags:int -> bool)
          =
          fun (x496 : t) ->
            fun ~event:(x491 : [ `headers ]) ->
              fun
                ~headers:(x492 :
                           (IncomingHttpHeaders.t,
                             IncomingHttpStatusHeader.t) intersection2)
                ->
                fun ~flags:(x495 : int) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x496) "emit"
                       [|((match x491 with
                           | `headers -> Ojs.string_to_js "headers"));(
                         intersection2_to_js IncomingHttpHeaders.t_to_js
                           IncomingHttpStatusHeader.t_to_js x492);(Ojs.int_to_js
                                                                    x495)|])
        let (emit'' :
          t ->
            event:[ `push ] ->
              headers:IncomingHttpHeaders.t -> flags:int -> bool)
          =
          fun (x500 : t) ->
            fun ~event:(x497 : [ `push ]) ->
              fun ~headers:(x498 : IncomingHttpHeaders.t) ->
                fun ~flags:(x499 : int) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x500) "emit"
                       [|((match x497 with | `push -> Ojs.string_to_js "push"));(
                         IncomingHttpHeaders.t_to_js x498);(Ojs.int_to_js
                                                              x499)|])
        let (emit''' :
          t ->
            event:[ `response ] ->
              headers:(IncomingHttpHeaders.t, IncomingHttpStatusHeader.t)
                intersection2 -> flags:int -> bool)
          =
          fun (x506 : t) ->
            fun ~event:(x501 : [ `response ]) ->
              fun
                ~headers:(x502 :
                           (IncomingHttpHeaders.t,
                             IncomingHttpStatusHeader.t) intersection2)
                ->
                fun ~flags:(x505 : int) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x506) "emit"
                       [|((match x501 with
                           | `response -> Ojs.string_to_js "response"));(
                         intersection2_to_js IncomingHttpHeaders.t_to_js
                           IncomingHttpStatusHeader.t_to_js x502);(Ojs.int_to_js
                                                                    x505)|])
        let (emit'''' : t -> event:symbol or_string -> args:any list -> bool)
          =
          fun (x512 : t) ->
            fun ~event:(x507 : symbol or_string) ->
              fun ~args:(x508 : any list) ->
                Ojs.bool_of_js
                  (let x513 = t_to_js x512 in
                   Ojs.call (Ojs.get_prop_ascii x513 "emit") "apply"
                     [|x513;((let x509 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x509 "push"
                                   [|(or_string_to_js symbol_to_js x507)|]);
                              List.iter
                                (fun (x510 : any) ->
                                   ignore
                                     (Ojs.call x509 "push"
                                        [|(any_to_js x510)|])) x508;
                              x509))|])
        let (on :
          t ->
            event:[ `continue ] ->
              listener:(unit -> AnonymousInterface0.t) -> t)
          =
          fun (x516 : t) ->
            fun ~event:(x514 : [ `continue ]) ->
              fun ~listener:(x515 : unit -> AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x516) "on"
                     [|((match x514 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1
                         (fun _ -> AnonymousInterface0.t_to_js (x515 ())))|])
        let (on' :
          t ->
            event:[ `headers ] ->
              listener:(headers:(IncomingHttpHeaders.t,
                          IncomingHttpStatusHeader.t) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x523 : t) ->
            fun ~event:(x517 : [ `headers ]) ->
              fun
                ~listener:(x518 :
                            headers:(IncomingHttpHeaders.t,
                              IncomingHttpStatusHeader.t) intersection2 ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x523) "on"
                     [|((match x517 with
                         | `headers -> Ojs.string_to_js "headers"));(
                       Ojs.fun_to_js 2
                         (fun (x519 : Ojs.t) ->
                            fun (x522 : Ojs.t) ->
                              x518
                                ~headers:(intersection2_of_js
                                            IncomingHttpHeaders.t_of_js
                                            IncomingHttpStatusHeader.t_of_js
                                            x519) ~flags:(Ojs.int_of_js x522)))|])
        let (on'' :
          t ->
            event:[ `push ] ->
              listener:(headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x528 : t) ->
            fun ~event:(x524 : [ `push ]) ->
              fun
                ~listener:(x525 :
                            headers:IncomingHttpHeaders.t ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x528) "on"
                     [|((match x524 with | `push -> Ojs.string_to_js "push"));(
                       Ojs.fun_to_js 2
                         (fun (x526 : Ojs.t) ->
                            fun (x527 : Ojs.t) ->
                              x525
                                ~headers:(IncomingHttpHeaders.t_of_js x526)
                                ~flags:(Ojs.int_of_js x527)))|])
        let (on''' :
          t ->
            event:[ `response ] ->
              listener:(headers:(IncomingHttpHeaders.t,
                          IncomingHttpStatusHeader.t) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x535 : t) ->
            fun ~event:(x529 : [ `response ]) ->
              fun
                ~listener:(x530 :
                            headers:(IncomingHttpHeaders.t,
                              IncomingHttpStatusHeader.t) intersection2 ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x535) "on"
                     [|((match x529 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 2
                         (fun (x531 : Ojs.t) ->
                            fun (x534 : Ojs.t) ->
                              x530
                                ~headers:(intersection2_of_js
                                            IncomingHttpHeaders.t_of_js
                                            IncomingHttpStatusHeader.t_of_js
                                            x531) ~flags:(Ojs.int_of_js x534)))|])
        let (on'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x541 : t) ->
            fun ~event:(x536 : symbol or_string) ->
              fun ~listener:(x538 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x541) "on"
                     [|(or_string_to_js symbol_to_js x536);(Ojs.fun_to_js_args
                                                              (fun (x539 : _)
                                                                 ->
                                                                 x538
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x539 0)))|])
        let (once :
          t ->
            event:[ `continue ] ->
              listener:(unit -> AnonymousInterface0.t) -> t)
          =
          fun (x544 : t) ->
            fun ~event:(x542 : [ `continue ]) ->
              fun ~listener:(x543 : unit -> AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x544) "once"
                     [|((match x542 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1
                         (fun _ -> AnonymousInterface0.t_to_js (x543 ())))|])
        let (once' :
          t ->
            event:[ `headers ] ->
              listener:(headers:(IncomingHttpHeaders.t,
                          IncomingHttpStatusHeader.t) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x551 : t) ->
            fun ~event:(x545 : [ `headers ]) ->
              fun
                ~listener:(x546 :
                            headers:(IncomingHttpHeaders.t,
                              IncomingHttpStatusHeader.t) intersection2 ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x551) "once"
                     [|((match x545 with
                         | `headers -> Ojs.string_to_js "headers"));(
                       Ojs.fun_to_js 2
                         (fun (x547 : Ojs.t) ->
                            fun (x550 : Ojs.t) ->
                              x546
                                ~headers:(intersection2_of_js
                                            IncomingHttpHeaders.t_of_js
                                            IncomingHttpStatusHeader.t_of_js
                                            x547) ~flags:(Ojs.int_of_js x550)))|])
        let (once'' :
          t ->
            event:[ `push ] ->
              listener:(headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x556 : t) ->
            fun ~event:(x552 : [ `push ]) ->
              fun
                ~listener:(x553 :
                            headers:IncomingHttpHeaders.t ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x556) "once"
                     [|((match x552 with | `push -> Ojs.string_to_js "push"));(
                       Ojs.fun_to_js 2
                         (fun (x554 : Ojs.t) ->
                            fun (x555 : Ojs.t) ->
                              x553
                                ~headers:(IncomingHttpHeaders.t_of_js x554)
                                ~flags:(Ojs.int_of_js x555)))|])
        let (once''' :
          t ->
            event:[ `response ] ->
              listener:(headers:(IncomingHttpHeaders.t,
                          IncomingHttpStatusHeader.t) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x563 : t) ->
            fun ~event:(x557 : [ `response ]) ->
              fun
                ~listener:(x558 :
                            headers:(IncomingHttpHeaders.t,
                              IncomingHttpStatusHeader.t) intersection2 ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x563) "once"
                     [|((match x557 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 2
                         (fun (x559 : Ojs.t) ->
                            fun (x562 : Ojs.t) ->
                              x558
                                ~headers:(intersection2_of_js
                                            IncomingHttpHeaders.t_of_js
                                            IncomingHttpStatusHeader.t_of_js
                                            x559) ~flags:(Ojs.int_of_js x562)))|])
        let (once'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x569 : t) ->
            fun ~event:(x564 : symbol or_string) ->
              fun ~listener:(x566 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x569) "once"
                     [|(or_string_to_js symbol_to_js x564);(Ojs.fun_to_js_args
                                                              (fun (x567 : _)
                                                                 ->
                                                                 x566
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x567 0)))|])
        let (prepend_listener :
          t ->
            event:[ `continue ] ->
              listener:(unit -> AnonymousInterface0.t) -> t)
          =
          fun (x572 : t) ->
            fun ~event:(x570 : [ `continue ]) ->
              fun ~listener:(x571 : unit -> AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x572) "prependListener"
                     [|((match x570 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1
                         (fun _ -> AnonymousInterface0.t_to_js (x571 ())))|])
        let (prepend_listener' :
          t ->
            event:[ `headers ] ->
              listener:(headers:(IncomingHttpHeaders.t,
                          IncomingHttpStatusHeader.t) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x579 : t) ->
            fun ~event:(x573 : [ `headers ]) ->
              fun
                ~listener:(x574 :
                            headers:(IncomingHttpHeaders.t,
                              IncomingHttpStatusHeader.t) intersection2 ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x579) "prependListener"
                     [|((match x573 with
                         | `headers -> Ojs.string_to_js "headers"));(
                       Ojs.fun_to_js 2
                         (fun (x575 : Ojs.t) ->
                            fun (x578 : Ojs.t) ->
                              x574
                                ~headers:(intersection2_of_js
                                            IncomingHttpHeaders.t_of_js
                                            IncomingHttpStatusHeader.t_of_js
                                            x575) ~flags:(Ojs.int_of_js x578)))|])
        let (prepend_listener'' :
          t ->
            event:[ `push ] ->
              listener:(headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x584 : t) ->
            fun ~event:(x580 : [ `push ]) ->
              fun
                ~listener:(x581 :
                            headers:IncomingHttpHeaders.t ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x584) "prependListener"
                     [|((match x580 with | `push -> Ojs.string_to_js "push"));(
                       Ojs.fun_to_js 2
                         (fun (x582 : Ojs.t) ->
                            fun (x583 : Ojs.t) ->
                              x581
                                ~headers:(IncomingHttpHeaders.t_of_js x582)
                                ~flags:(Ojs.int_of_js x583)))|])
        let (prepend_listener''' :
          t ->
            event:[ `response ] ->
              listener:(headers:(IncomingHttpHeaders.t,
                          IncomingHttpStatusHeader.t) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x591 : t) ->
            fun ~event:(x585 : [ `response ]) ->
              fun
                ~listener:(x586 :
                            headers:(IncomingHttpHeaders.t,
                              IncomingHttpStatusHeader.t) intersection2 ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x591) "prependListener"
                     [|((match x585 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 2
                         (fun (x587 : Ojs.t) ->
                            fun (x590 : Ojs.t) ->
                              x586
                                ~headers:(intersection2_of_js
                                            IncomingHttpHeaders.t_of_js
                                            IncomingHttpStatusHeader.t_of_js
                                            x587) ~flags:(Ojs.int_of_js x590)))|])
        let (prepend_listener'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x597 : t) ->
            fun ~event:(x592 : symbol or_string) ->
              fun ~listener:(x594 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x597) "prependListener"
                     [|(or_string_to_js symbol_to_js x592);(Ojs.fun_to_js_args
                                                              (fun (x595 : _)
                                                                 ->
                                                                 x594
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x595 0)))|])
        let (prepend_once_listener :
          t ->
            event:[ `continue ] ->
              listener:(unit -> AnonymousInterface0.t) -> t)
          =
          fun (x600 : t) ->
            fun ~event:(x598 : [ `continue ]) ->
              fun ~listener:(x599 : unit -> AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x600) "prependOnceListener"
                     [|((match x598 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1
                         (fun _ -> AnonymousInterface0.t_to_js (x599 ())))|])
        let (prepend_once_listener' :
          t ->
            event:[ `headers ] ->
              listener:(headers:(IncomingHttpHeaders.t,
                          IncomingHttpStatusHeader.t) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x607 : t) ->
            fun ~event:(x601 : [ `headers ]) ->
              fun
                ~listener:(x602 :
                            headers:(IncomingHttpHeaders.t,
                              IncomingHttpStatusHeader.t) intersection2 ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x607) "prependOnceListener"
                     [|((match x601 with
                         | `headers -> Ojs.string_to_js "headers"));(
                       Ojs.fun_to_js 2
                         (fun (x603 : Ojs.t) ->
                            fun (x606 : Ojs.t) ->
                              x602
                                ~headers:(intersection2_of_js
                                            IncomingHttpHeaders.t_of_js
                                            IncomingHttpStatusHeader.t_of_js
                                            x603) ~flags:(Ojs.int_of_js x606)))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `push ] ->
              listener:(headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x612 : t) ->
            fun ~event:(x608 : [ `push ]) ->
              fun
                ~listener:(x609 :
                            headers:IncomingHttpHeaders.t ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x612) "prependOnceListener"
                     [|((match x608 with | `push -> Ojs.string_to_js "push"));(
                       Ojs.fun_to_js 2
                         (fun (x610 : Ojs.t) ->
                            fun (x611 : Ojs.t) ->
                              x609
                                ~headers:(IncomingHttpHeaders.t_of_js x610)
                                ~flags:(Ojs.int_of_js x611)))|])
        let (prepend_once_listener''' :
          t ->
            event:[ `response ] ->
              listener:(headers:(IncomingHttpHeaders.t,
                          IncomingHttpStatusHeader.t) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x619 : t) ->
            fun ~event:(x613 : [ `response ]) ->
              fun
                ~listener:(x614 :
                            headers:(IncomingHttpHeaders.t,
                              IncomingHttpStatusHeader.t) intersection2 ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x619) "prependOnceListener"
                     [|((match x613 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 2
                         (fun (x615 : Ojs.t) ->
                            fun (x618 : Ojs.t) ->
                              x614
                                ~headers:(intersection2_of_js
                                            IncomingHttpHeaders.t_of_js
                                            IncomingHttpStatusHeader.t_of_js
                                            x615) ~flags:(Ojs.int_of_js x618)))|])
        let (prepend_once_listener'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x625 : t) ->
            fun ~event:(x620 : symbol or_string) ->
              fun ~listener:(x622 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x625) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x620);(Ojs.fun_to_js_args
                                                              (fun (x623 : _)
                                                                 ->
                                                                 x622
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x623 0)))|])
      end
    module ServerHttp2Stream =
      struct
        include struct include Http2Stream end
        let (get_headers_sent : t -> bool) =
          fun (x626 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x626) "headersSent")
        let (get_push_allowed : t -> bool) =
          fun (x627 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x627) "pushAllowed")
        let (additional_headers :
          t -> headers:Node_http.Http.OutgoingHttpHeaders.t -> unit) =
          fun (x629 : t) ->
            fun ~headers:(x628 : Node_http.Http.OutgoingHttpHeaders.t) ->
              ignore
                (Ojs.call (t_to_js x629) "additionalHeaders"
                   [|(Node_http.Http.OutgoingHttpHeaders.t_to_js x628)|])
        let (push_stream :
          t ->
            headers:Node_http.Http.OutgoingHttpHeaders.t ->
              ?callback:(err:Error.t or_null ->
                           push_stream:t ->
                             headers:Node_http.Http.OutgoingHttpHeaders.t ->
                               unit)
                -> unit -> unit)
          =
          fun (x638 : t) ->
            fun ~headers:(x630 : Node_http.Http.OutgoingHttpHeaders.t) ->
              fun
                ?callback:(x631 :
                            (err:Error.t or_null ->
                               push_stream:t ->
                                 headers:Node_http.Http.OutgoingHttpHeaders.t
                                   -> unit)
                              option)
                ->
                fun () ->
                  ignore
                    (let x639 = t_to_js x638 in
                     Ojs.call (Ojs.get_prop_ascii x639 "pushStream") "apply"
                       [|x639;((let x632 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x632 "push"
                                     [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                          x630)|]);
                                (match x631 with
                                 | Some x633 ->
                                     ignore
                                       (Ojs.call x632 "push"
                                          [|(Ojs.fun_to_js 3
                                               (fun (x634 : Ojs.t) ->
                                                  fun (x636 : Ojs.t) ->
                                                    fun (x637 : Ojs.t) ->
                                                      x633
                                                        ~err:(or_null_of_js
                                                                Error.t_of_js
                                                                x634)
                                                        ~push_stream:(
                                                        t_of_js x636)
                                                        ~headers:(Node_http.Http.OutgoingHttpHeaders.t_of_js
                                                                    x637)))|])
                                 | None -> ());
                                x632))|])
        let (push_stream' :
          t ->
            headers:Node_http.Http.OutgoingHttpHeaders.t ->
              ?options:StreamPriorityOptions.t ->
                ?callback:(err:Error.t or_null ->
                             push_stream:t ->
                               headers:Node_http.Http.OutgoingHttpHeaders.t
                                 -> unit)
                  -> unit -> unit)
          =
          fun (x650 : t) ->
            fun ~headers:(x640 : Node_http.Http.OutgoingHttpHeaders.t) ->
              fun ?options:(x641 : StreamPriorityOptions.t option) ->
                fun
                  ?callback:(x642 :
                              (err:Error.t or_null ->
                                 push_stream:t ->
                                   headers:Node_http.Http.OutgoingHttpHeaders.t
                                     -> unit)
                                option)
                  ->
                  fun () ->
                    ignore
                      (let x651 = t_to_js x650 in
                       Ojs.call (Ojs.get_prop_ascii x651 "pushStream")
                         "apply"
                         [|x651;((let x643 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x643 "push"
                                       [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                            x640)|]);
                                  (match x641 with
                                   | Some x649 ->
                                       ignore
                                         (Ojs.call x643 "push"
                                            [|(StreamPriorityOptions.t_to_js
                                                 x649)|])
                                   | None -> ());
                                  (match x642 with
                                   | Some x644 ->
                                       ignore
                                         (Ojs.call x643 "push"
                                            [|(Ojs.fun_to_js 3
                                                 (fun (x645 : Ojs.t) ->
                                                    fun (x647 : Ojs.t) ->
                                                      fun (x648 : Ojs.t) ->
                                                        x644
                                                          ~err:(or_null_of_js
                                                                  Error.t_of_js
                                                                  x645)
                                                          ~push_stream:(
                                                          t_of_js x647)
                                                          ~headers:(Node_http.Http.OutgoingHttpHeaders.t_of_js
                                                                    x648)))|])
                                   | None -> ());
                                  x643))|])
        let (respond :
          t ->
            ?headers:Node_http.Http.OutgoingHttpHeaders.t ->
              ?options:ServerStreamResponseOptions.t -> unit -> unit)
          =
          fun (x657 : t) ->
            fun ?headers:(x652 : Node_http.Http.OutgoingHttpHeaders.t option)
              ->
              fun ?options:(x653 : ServerStreamResponseOptions.t option) ->
                fun () ->
                  ignore
                    (let x658 = t_to_js x657 in
                     Ojs.call (Ojs.get_prop_ascii x658 "respond") "apply"
                       [|x658;((let x654 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x652 with
                                 | Some x656 ->
                                     ignore
                                       (Ojs.call x654 "push"
                                          [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                               x656)|])
                                 | None -> ());
                                (match x653 with
                                 | Some x655 ->
                                     ignore
                                       (Ojs.call x654 "push"
                                          [|(ServerStreamResponseOptions.t_to_js
                                               x655)|])
                                 | None -> ());
                                x654))|])
        let (respond_with_fd :
          t ->
            fd:Fs_promises.FileHandle.t or_number ->
              ?headers:Node_http.Http.OutgoingHttpHeaders.t ->
                ?options:ServerStreamFileResponseOptions.t -> unit -> unit)
          =
          fun (x666 : t) ->
            fun ~fd:(x659 : Fs_promises.FileHandle.t or_number) ->
              fun
                ?headers:(x660 : Node_http.Http.OutgoingHttpHeaders.t option)
                ->
                fun
                  ?options:(x661 : ServerStreamFileResponseOptions.t option)
                  ->
                  fun () ->
                    ignore
                      (let x667 = t_to_js x666 in
                       Ojs.call (Ojs.get_prop_ascii x667 "respondWithFD")
                         "apply"
                         [|x667;((let x662 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x662 "push"
                                       [|(or_number_to_js
                                            Fs_promises.FileHandle.t_to_js
                                            x659)|]);
                                  (match x660 with
                                   | Some x664 ->
                                       ignore
                                         (Ojs.call x662 "push"
                                            [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                                 x664)|])
                                   | None -> ());
                                  (match x661 with
                                   | Some x663 ->
                                       ignore
                                         (Ojs.call x662 "push"
                                            [|(ServerStreamFileResponseOptions.t_to_js
                                                 x663)|])
                                   | None -> ());
                                  x662))|])
        let (respond_with_file :
          t ->
            path:string ->
              ?headers:Node_http.Http.OutgoingHttpHeaders.t ->
                ?options:ServerStreamFileResponseOptionsWithError.t ->
                  unit -> unit)
          =
          fun (x674 : t) ->
            fun ~path:(x668 : string) ->
              fun
                ?headers:(x669 : Node_http.Http.OutgoingHttpHeaders.t option)
                ->
                fun
                  ?options:(x670 :
                             ServerStreamFileResponseOptionsWithError.t
                               option)
                  ->
                  fun () ->
                    ignore
                      (let x675 = t_to_js x674 in
                       Ojs.call (Ojs.get_prop_ascii x675 "respondWithFile")
                         "apply"
                         [|x675;((let x671 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x671 "push"
                                       [|(Ojs.string_to_js x668)|]);
                                  (match x669 with
                                   | Some x673 ->
                                       ignore
                                         (Ojs.call x671 "push"
                                            [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                                 x673)|])
                                   | None -> ());
                                  (match x670 with
                                   | Some x672 ->
                                       ignore
                                         (Ojs.call x671 "push"
                                            [|(ServerStreamFileResponseOptionsWithError.t_to_js
                                                 x672)|])
                                   | None -> ());
                                  x671))|])
      end
    module Settings =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x677 : Ojs.t) -> x677
        and t_to_js : t -> Ojs.t = fun (x676 : Ojs.t) -> x676
        let (get_header_table_size : t -> int) =
          fun (x678 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x678) "headerTableSize")
        let (set_header_table_size : t -> int -> unit) =
          fun (x679 : t) ->
            fun (x680 : int) ->
              Ojs.set_prop_ascii (t_to_js x679) "headerTableSize"
                (Ojs.int_to_js x680)
        let (get_enable_push : t -> bool) =
          fun (x681 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x681) "enablePush")
        let (set_enable_push : t -> bool -> unit) =
          fun (x682 : t) ->
            fun (x683 : bool) ->
              Ojs.set_prop_ascii (t_to_js x682) "enablePush"
                (Ojs.bool_to_js x683)
        let (get_initial_window_size : t -> int) =
          fun (x684 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x684) "initialWindowSize")
        let (set_initial_window_size : t -> int -> unit) =
          fun (x685 : t) ->
            fun (x686 : int) ->
              Ojs.set_prop_ascii (t_to_js x685) "initialWindowSize"
                (Ojs.int_to_js x686)
        let (get_max_frame_size : t -> int) =
          fun (x687 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x687) "maxFrameSize")
        let (set_max_frame_size : t -> int -> unit) =
          fun (x688 : t) ->
            fun (x689 : int) ->
              Ojs.set_prop_ascii (t_to_js x688) "maxFrameSize"
                (Ojs.int_to_js x689)
        let (get_max_concurrent_streams : t -> int) =
          fun (x690 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x690) "maxConcurrentStreams")
        let (set_max_concurrent_streams : t -> int -> unit) =
          fun (x691 : t) ->
            fun (x692 : int) ->
              Ojs.set_prop_ascii (t_to_js x691) "maxConcurrentStreams"
                (Ojs.int_to_js x692)
        let (get_max_header_list_size : t -> int) =
          fun (x693 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x693) "maxHeaderListSize")
        let (set_max_header_list_size : t -> int -> unit) =
          fun (x694 : t) ->
            fun (x695 : int) ->
              Ojs.set_prop_ascii (t_to_js x694) "maxHeaderListSize"
                (Ojs.int_to_js x695)
        let (get_enable_connect_protocol : t -> bool) =
          fun (x696 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x696) "enableConnectProtocol")
        let (set_enable_connect_protocol : t -> bool -> unit) =
          fun (x697 : t) ->
            fun (x698 : bool) ->
              Ojs.set_prop_ascii (t_to_js x697) "enableConnectProtocol"
                (Ojs.bool_to_js x698)
      end
    module ClientSessionRequestOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x700 : Ojs.t) -> x700
        and t_to_js : t -> Ojs.t = fun (x699 : Ojs.t) -> x699
        let (get_end_stream : t -> bool) =
          fun (x701 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x701) "endStream")
        let (set_end_stream : t -> bool -> unit) =
          fun (x702 : t) ->
            fun (x703 : bool) ->
              Ojs.set_prop_ascii (t_to_js x702) "endStream"
                (Ojs.bool_to_js x703)
        let (get_exclusive : t -> bool) =
          fun (x704 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x704) "exclusive")
        let (set_exclusive : t -> bool -> unit) =
          fun (x705 : t) ->
            fun (x706 : bool) ->
              Ojs.set_prop_ascii (t_to_js x705) "exclusive"
                (Ojs.bool_to_js x706)
        let (get_parent : t -> int) =
          fun (x707 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x707) "parent")
        let (set_parent : t -> int -> unit) =
          fun (x708 : t) ->
            fun (x709 : int) ->
              Ojs.set_prop_ascii (t_to_js x708) "parent" (Ojs.int_to_js x709)
        let (get_weight : t -> int) =
          fun (x710 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x710) "weight")
        let (set_weight : t -> int -> unit) =
          fun (x711 : t) ->
            fun (x712 : int) ->
              Ojs.set_prop_ascii (t_to_js x711) "weight" (Ojs.int_to_js x712)
        let (get_wait_for_trailers : t -> bool) =
          fun (x713 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x713) "waitForTrailers")
        let (set_wait_for_trailers : t -> bool -> unit) =
          fun (x714 : t) ->
            fun (x715 : bool) ->
              Ojs.set_prop_ascii (t_to_js x714) "waitForTrailers"
                (Ojs.bool_to_js x715)
      end
    module SessionState =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x717 : Ojs.t) -> x717
        and t_to_js : t -> Ojs.t = fun (x716 : Ojs.t) -> x716
        let (get_effective_local_window_size : t -> int) =
          fun (x718 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x718) "effectiveLocalWindowSize")
        let (set_effective_local_window_size : t -> int -> unit) =
          fun (x719 : t) ->
            fun (x720 : int) ->
              Ojs.set_prop_ascii (t_to_js x719) "effectiveLocalWindowSize"
                (Ojs.int_to_js x720)
        let (get_effective_recv_data_length : t -> int) =
          fun (x721 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x721) "effectiveRecvDataLength")
        let (set_effective_recv_data_length : t -> int -> unit) =
          fun (x722 : t) ->
            fun (x723 : int) ->
              Ojs.set_prop_ascii (t_to_js x722) "effectiveRecvDataLength"
                (Ojs.int_to_js x723)
        let (get_next_stream_id : t -> int) =
          fun (x724 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x724) "nextStreamID")
        let (set_next_stream_id : t -> int -> unit) =
          fun (x725 : t) ->
            fun (x726 : int) ->
              Ojs.set_prop_ascii (t_to_js x725) "nextStreamID"
                (Ojs.int_to_js x726)
        let (get_local_window_size : t -> int) =
          fun (x727 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x727) "localWindowSize")
        let (set_local_window_size : t -> int -> unit) =
          fun (x728 : t) ->
            fun (x729 : int) ->
              Ojs.set_prop_ascii (t_to_js x728) "localWindowSize"
                (Ojs.int_to_js x729)
        let (get_last_proc_stream_id : t -> int) =
          fun (x730 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x730) "lastProcStreamID")
        let (set_last_proc_stream_id : t -> int -> unit) =
          fun (x731 : t) ->
            fun (x732 : int) ->
              Ojs.set_prop_ascii (t_to_js x731) "lastProcStreamID"
                (Ojs.int_to_js x732)
        let (get_remote_window_size : t -> int) =
          fun (x733 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x733) "remoteWindowSize")
        let (set_remote_window_size : t -> int -> unit) =
          fun (x734 : t) ->
            fun (x735 : int) ->
              Ojs.set_prop_ascii (t_to_js x734) "remoteWindowSize"
                (Ojs.int_to_js x735)
        let (get_outbound_queue_size : t -> int) =
          fun (x736 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x736) "outboundQueueSize")
        let (set_outbound_queue_size : t -> int -> unit) =
          fun (x737 : t) ->
            fun (x738 : int) ->
              Ojs.set_prop_ascii (t_to_js x737) "outboundQueueSize"
                (Ojs.int_to_js x738)
        let (get_deflate_dynamic_table_size : t -> int) =
          fun (x739 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x739) "deflateDynamicTableSize")
        let (set_deflate_dynamic_table_size : t -> int -> unit) =
          fun (x740 : t) ->
            fun (x741 : int) ->
              Ojs.set_prop_ascii (t_to_js x740) "deflateDynamicTableSize"
                (Ojs.int_to_js x741)
        let (get_inflate_dynamic_table_size : t -> int) =
          fun (x742 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x742) "inflateDynamicTableSize")
        let (set_inflate_dynamic_table_size : t -> int -> unit) =
          fun (x743 : t) ->
            fun (x744 : int) ->
              Ojs.set_prop_ascii (t_to_js x743) "inflateDynamicTableSize"
                (Ojs.int_to_js x744)
      end
    module Http2Session =
      struct
        include struct include Node_events.Events.EventEmitter end
        let (get_alpn_protocol : t -> string) =
          fun (x745 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x745) "alpnProtocol")
        let (get_closed : t -> bool) =
          fun (x746 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x746) "closed")
        let (get_connecting : t -> bool) =
          fun (x747 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x747) "connecting")
        let (get_destroyed : t -> bool) =
          fun (x748 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x748) "destroyed")
        let (get_encrypted : t -> bool) =
          fun (x749 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x749) "encrypted")
        let (get_local_settings : t -> Settings.t) =
          fun (x750 : t) ->
            Settings.t_of_js
              (Ojs.get_prop_ascii (t_to_js x750) "localSettings")
        let (get_origin_set : t -> string list) =
          fun (x751 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x751) "originSet")
        let (get_pending_settings_ack : t -> bool) =
          fun (x753 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x753) "pendingSettingsAck")
        let (get_remote_settings : t -> Settings.t) =
          fun (x754 : t) ->
            Settings.t_of_js
              (Ojs.get_prop_ascii (t_to_js x754) "remoteSettings")
        let (get_socket : t -> (Net.Socket.t, Tls.TLSSocket.t) union2) =
          fun (x755 : t) ->
            union2_of_js Net.Socket.t_of_js Tls.TLSSocket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x755) "socket")
        let (get_state : t -> SessionState.t) =
          fun (x758 : t) ->
            SessionState.t_of_js (Ojs.get_prop_ascii (t_to_js x758) "state")
        let (get_type : t -> int) =
          fun (x759 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x759) "type")
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x763 : t) ->
            fun ?callback:(x760 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x764 = t_to_js x763 in
                   Ojs.call (Ojs.get_prop_ascii x764 "close") "apply"
                     [|x764;((let x761 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x760 with
                               | Some x762 ->
                                   ignore
                                     (Ojs.call x761 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x762 ()))|])
                               | None -> ());
                              x761))|])
        let (destroy : t -> ?error:Error.t -> ?code:int -> unit -> unit) =
          fun (x770 : t) ->
            fun ?error:(x765 : Error.t option) ->
              fun ?code:(x766 : int option) ->
                fun () ->
                  ignore
                    (let x771 = t_to_js x770 in
                     Ojs.call (Ojs.get_prop_ascii x771 "destroy") "apply"
                       [|x771;((let x767 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x765 with
                                 | Some x769 ->
                                     ignore
                                       (Ojs.call x767 "push"
                                          [|(Error.t_to_js x769)|])
                                 | None -> ());
                                (match x766 with
                                 | Some x768 ->
                                     ignore
                                       (Ojs.call x767 "push"
                                          [|(Ojs.int_to_js x768)|])
                                 | None -> ());
                                x767))|])
        let (goaway :
          t ->
            ?code:int ->
              ?last_stream_id:int ->
                ?opaque_data:ArrayBufferView.t -> unit -> unit)
          =
          fun (x779 : t) ->
            fun ?code:(x772 : int option) ->
              fun ?last_stream_id:(x773 : int option) ->
                fun ?opaque_data:(x774 : ArrayBufferView.t option) ->
                  fun () ->
                    ignore
                      (let x780 = t_to_js x779 in
                       Ojs.call (Ojs.get_prop_ascii x780 "goaway") "apply"
                         [|x780;((let x775 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x772 with
                                   | Some x778 ->
                                       ignore
                                         (Ojs.call x775 "push"
                                            [|(Ojs.int_to_js x778)|])
                                   | None -> ());
                                  (match x773 with
                                   | Some x777 ->
                                       ignore
                                         (Ojs.call x775 "push"
                                            [|(Ojs.int_to_js x777)|])
                                   | None -> ());
                                  (match x774 with
                                   | Some x776 ->
                                       ignore
                                         (Ojs.call x775 "push"
                                            [|(ArrayBufferView.t_to_js x776)|])
                                   | None -> ());
                                  x775))|])
        let (ping :
          t ->
            callback:(err:Error.t or_null ->
                        duration:int -> payload:Buffer.t -> unit)
              -> bool)
          =
          fun (x786 : t) ->
            fun
              ~callback:(x781 :
                          err:Error.t or_null ->
                            duration:int -> payload:Buffer.t -> unit)
              ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x786) "ping"
                   [|(Ojs.fun_to_js 3
                        (fun (x782 : Ojs.t) ->
                           fun (x784 : Ojs.t) ->
                             fun (x785 : Ojs.t) ->
                               x781 ~err:(or_null_of_js Error.t_of_js x782)
                                 ~duration:(Ojs.int_of_js x784)
                                 ~payload:(Buffer.t_of_js x785)))|])
        let (ping' :
          t ->
            payload:ArrayBufferView.t ->
              callback:(err:Error.t or_null ->
                          duration:int -> payload:Buffer.t -> unit)
                -> bool)
          =
          fun (x793 : t) ->
            fun ~payload:(x787 : ArrayBufferView.t) ->
              fun
                ~callback:(x788 :
                            err:Error.t or_null ->
                              duration:int -> payload:Buffer.t -> unit)
                ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x793) "ping"
                     [|(ArrayBufferView.t_to_js x787);(Ojs.fun_to_js 3
                                                         (fun (x789 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x791 : Ojs.t)
                                                              ->
                                                              fun
                                                                (x792 :
                                                                  Ojs.t)
                                                                ->
                                                                x788
                                                                  ~err:(
                                                                  or_null_of_js
                                                                    Error.t_of_js
                                                                    x789)
                                                                  ~duration:(
                                                                  Ojs.int_of_js
                                                                    x791)
                                                                  ~payload:(
                                                                  Buffer.t_of_js
                                                                    x792)))|])
        let (ref : t -> unit) =
          fun (x794 : t) -> ignore (Ojs.call (t_to_js x794) "ref" [||])
        let (set_local_window_size : t -> window_size:int -> unit) =
          fun (x796 : t) ->
            fun ~window_size:(x795 : int) ->
              ignore
                (Ojs.call (t_to_js x796) "setLocalWindowSize"
                   [|(Ojs.int_to_js x795)|])
        let (set_timeout :
          t -> msecs:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x801 : t) ->
            fun ~msecs:(x797 : int) ->
              fun ?callback:(x798 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x802 = t_to_js x801 in
                     Ojs.call (Ojs.get_prop_ascii x802 "setTimeout") "apply"
                       [|x802;((let x799 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x799 "push"
                                     [|(Ojs.int_to_js x797)|]);
                                (match x798 with
                                 | Some x800 ->
                                     ignore
                                       (Ojs.call x799 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x800 ()))|])
                                 | None -> ());
                                x799))|])
        let (settings : t -> settings:Settings.t -> unit) =
          fun (x804 : t) ->
            fun ~settings:(x803 : Settings.t) ->
              ignore
                (Ojs.call (t_to_js x804) "settings"
                   [|(Settings.t_to_js x803)|])
        let (unref : t -> unit) =
          fun (x805 : t) -> ignore (Ojs.call (t_to_js x805) "unref" [||])
        let (add_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x808 : t) ->
            fun ~event:(x806 : [ `close ]) ->
              fun ~listener:(x807 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x808) "addListener"
                     [|((match x806 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x807 ()))|])
        let (add_listener' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x812 : t) ->
            fun ~event:(x809 : [ `error ]) ->
              fun ~listener:(x810 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x812) "addListener"
                     [|((match x809 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x811 : Ojs.t) ->
                            x810 ~err:(Error.t_of_js x811)))|])
        let (add_listener'' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int ->
                          error_code:int -> stream_id:int -> unit)
                -> t)
          =
          fun (x818 : t) ->
            fun ~event:(x813 : [ `frameError ]) ->
              fun
                ~listener:(x814 :
                            frameType:int ->
                              error_code:int -> stream_id:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x818) "addListener"
                     [|((match x813 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 3
                         (fun (x815 : Ojs.t) ->
                            fun (x816 : Ojs.t) ->
                              fun (x817 : Ojs.t) ->
                                x814 ~frameType:(Ojs.int_of_js x815)
                                  ~error_code:(Ojs.int_of_js x816)
                                  ~stream_id:(Ojs.int_of_js x817)))|])
        let (add_listener''' :
          t ->
            event:[ `goaway ] ->
              listener:(errorCode:int ->
                          last_stream_id:int -> opaque_data:Buffer.t -> unit)
                -> t)
          =
          fun (x824 : t) ->
            fun ~event:(x819 : [ `goaway ]) ->
              fun
                ~listener:(x820 :
                            errorCode:int ->
                              last_stream_id:int ->
                                opaque_data:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x824) "addListener"
                     [|((match x819 with
                         | `goaway -> Ojs.string_to_js "goaway"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x821 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x822 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x823 :
                                                                    Ojs.t) ->
                                                                    x820
                                                                    ~errorCode:(
                                                                    Ojs.int_of_js
                                                                    x821)
                                                                    ~last_stream_id:(
                                                                    Ojs.int_of_js
                                                                    x822)
                                                                    ~opaque_data:(
                                                                    Buffer.t_of_js
                                                                    x823)))|])
        let (add_listener'''' :
          t ->
            event:[ `localSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x828 : t) ->
            fun ~event:(x825 : [ `localSettings ]) ->
              fun ~listener:(x826 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x828) "addListener"
                     [|((match x825 with
                         | `localSettings -> Ojs.string_to_js "localSettings"));(
                       Ojs.fun_to_js 1
                         (fun (x827 : Ojs.t) ->
                            x826 ~settings:(Settings.t_of_js x827)))|])
        let (add_listener''''' :
          t -> event:[ `ping ] -> listener:(unit -> unit) -> t) =
          fun (x831 : t) ->
            fun ~event:(x829 : [ `ping ]) ->
              fun ~listener:(x830 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x831) "addListener"
                     [|((match x829 with | `ping -> Ojs.string_to_js "ping"));(
                       Ojs.fun_to_js 1 (fun _ -> x830 ()))|])
        let (add_listener'''''' :
          t ->
            event:[ `remoteSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x835 : t) ->
            fun ~event:(x832 : [ `remoteSettings ]) ->
              fun ~listener:(x833 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x835) "addListener"
                     [|((match x832 with
                         | `remoteSettings ->
                             Ojs.string_to_js "remoteSettings"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun
                                                                    (x834 :
                                                                    Ojs.t) ->
                                                                    x833
                                                                    ~settings:(
                                                                    Settings.t_of_js
                                                                    x834)))|])
        let (add_listener''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x838 : t) ->
            fun ~event:(x836 : [ `timeout ]) ->
              fun ~listener:(x837 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x838) "addListener"
                     [|((match x836 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x837 ()))|])
        let (add_listener'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x844 : t) ->
            fun ~event:(x839 : symbol or_string) ->
              fun ~listener:(x841 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x844) "addListener"
                     [|(or_string_to_js symbol_to_js x839);(Ojs.fun_to_js_args
                                                              (fun (x842 : _)
                                                                 ->
                                                                 x841
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x842 0)))|])
        let (emit : t -> event:[ `close ] -> bool) =
          fun (x846 : t) ->
            fun ~event:(x845 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x846) "emit"
                   [|((match x845 with | `close -> Ojs.string_to_js "close"))|])
        let (emit' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x849 : t) ->
            fun ~event:(x847 : [ `error ]) ->
              fun ~err:(x848 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x849) "emit"
                     [|((match x847 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x848)|])
        let (emit'' :
          t ->
            event:[ `frameError ] ->
              frame_type:int -> error_code:int -> stream_id:int -> bool)
          =
          fun (x854 : t) ->
            fun ~event:(x850 : [ `frameError ]) ->
              fun ~frame_type:(x851 : int) ->
                fun ~error_code:(x852 : int) ->
                  fun ~stream_id:(x853 : int) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x854) "emit"
                         [|((match x850 with
                             | `frameError -> Ojs.string_to_js "frameError"));(
                           Ojs.int_to_js x851);(Ojs.int_to_js x852);(
                           Ojs.int_to_js x853)|])
        let (emit''' :
          t ->
            event:[ `goaway ] ->
              error_code:int ->
                last_stream_id:int -> opaque_data:Buffer.t -> bool)
          =
          fun (x859 : t) ->
            fun ~event:(x855 : [ `goaway ]) ->
              fun ~error_code:(x856 : int) ->
                fun ~last_stream_id:(x857 : int) ->
                  fun ~opaque_data:(x858 : Buffer.t) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x859) "emit"
                         [|((match x855 with
                             | `goaway -> Ojs.string_to_js "goaway"));(
                           Ojs.int_to_js x856);(Ojs.int_to_js x857);(
                           Buffer.t_to_js x858)|])
        let (emit'''' :
          t -> event:[ `localSettings ] -> settings:Settings.t -> bool) =
          fun (x862 : t) ->
            fun ~event:(x860 : [ `localSettings ]) ->
              fun ~settings:(x861 : Settings.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x862) "emit"
                     [|((match x860 with
                         | `localSettings -> Ojs.string_to_js "localSettings"));(
                       Settings.t_to_js x861)|])
        let (emit''''' : t -> event:[ `ping ] -> bool) =
          fun (x864 : t) ->
            fun ~event:(x863 : [ `ping ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x864) "emit"
                   [|((match x863 with | `ping -> Ojs.string_to_js "ping"))|])
        let (emit'''''' :
          t -> event:[ `remoteSettings ] -> settings:Settings.t -> bool) =
          fun (x867 : t) ->
            fun ~event:(x865 : [ `remoteSettings ]) ->
              fun ~settings:(x866 : Settings.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x867) "emit"
                     [|((match x865 with
                         | `remoteSettings ->
                             Ojs.string_to_js "remoteSettings"));(Settings.t_to_js
                                                                    x866)|])
        let (emit''''''' : t -> event:[ `timeout ] -> bool) =
          fun (x869 : t) ->
            fun ~event:(x868 : [ `timeout ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x869) "emit"
                   [|((match x868 with
                       | `timeout -> Ojs.string_to_js "timeout"))|])
        let (emit'''''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x875 : t) ->
            fun ~event:(x870 : symbol or_string) ->
              fun ~args:(x871 : any list) ->
                Ojs.bool_of_js
                  (let x876 = t_to_js x875 in
                   Ojs.call (Ojs.get_prop_ascii x876 "emit") "apply"
                     [|x876;((let x872 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x872 "push"
                                   [|(or_string_to_js symbol_to_js x870)|]);
                              List.iter
                                (fun (x873 : any) ->
                                   ignore
                                     (Ojs.call x872 "push"
                                        [|(any_to_js x873)|])) x871;
                              x872))|])
        let (on : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x879 : t) ->
            fun ~event:(x877 : [ `close ]) ->
              fun ~listener:(x878 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x879) "on"
                     [|((match x877 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x878 ()))|])
        let (on' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x883 : t) ->
            fun ~event:(x880 : [ `error ]) ->
              fun ~listener:(x881 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x883) "on"
                     [|((match x880 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x882 : Ojs.t) ->
                            x881 ~err:(Error.t_of_js x882)))|])
        let (on'' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int ->
                          error_code:int -> stream_id:int -> unit)
                -> t)
          =
          fun (x889 : t) ->
            fun ~event:(x884 : [ `frameError ]) ->
              fun
                ~listener:(x885 :
                            frameType:int ->
                              error_code:int -> stream_id:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x889) "on"
                     [|((match x884 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 3
                         (fun (x886 : Ojs.t) ->
                            fun (x887 : Ojs.t) ->
                              fun (x888 : Ojs.t) ->
                                x885 ~frameType:(Ojs.int_of_js x886)
                                  ~error_code:(Ojs.int_of_js x887)
                                  ~stream_id:(Ojs.int_of_js x888)))|])
        let (on''' :
          t ->
            event:[ `goaway ] ->
              listener:(errorCode:int ->
                          last_stream_id:int -> opaque_data:Buffer.t -> unit)
                -> t)
          =
          fun (x895 : t) ->
            fun ~event:(x890 : [ `goaway ]) ->
              fun
                ~listener:(x891 :
                            errorCode:int ->
                              last_stream_id:int ->
                                opaque_data:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x895) "on"
                     [|((match x890 with
                         | `goaway -> Ojs.string_to_js "goaway"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x892 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x893 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x894 :
                                                                    Ojs.t) ->
                                                                    x891
                                                                    ~errorCode:(
                                                                    Ojs.int_of_js
                                                                    x892)
                                                                    ~last_stream_id:(
                                                                    Ojs.int_of_js
                                                                    x893)
                                                                    ~opaque_data:(
                                                                    Buffer.t_of_js
                                                                    x894)))|])
        let (on'''' :
          t ->
            event:[ `localSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x899 : t) ->
            fun ~event:(x896 : [ `localSettings ]) ->
              fun ~listener:(x897 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x899) "on"
                     [|((match x896 with
                         | `localSettings -> Ojs.string_to_js "localSettings"));(
                       Ojs.fun_to_js 1
                         (fun (x898 : Ojs.t) ->
                            x897 ~settings:(Settings.t_of_js x898)))|])
        let (on''''' : t -> event:[ `ping ] -> listener:(unit -> unit) -> t)
          =
          fun (x902 : t) ->
            fun ~event:(x900 : [ `ping ]) ->
              fun ~listener:(x901 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x902) "on"
                     [|((match x900 with | `ping -> Ojs.string_to_js "ping"));(
                       Ojs.fun_to_js 1 (fun _ -> x901 ()))|])
        let (on'''''' :
          t ->
            event:[ `remoteSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x906 : t) ->
            fun ~event:(x903 : [ `remoteSettings ]) ->
              fun ~listener:(x904 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x906) "on"
                     [|((match x903 with
                         | `remoteSettings ->
                             Ojs.string_to_js "remoteSettings"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun
                                                                    (x905 :
                                                                    Ojs.t) ->
                                                                    x904
                                                                    ~settings:(
                                                                    Settings.t_of_js
                                                                    x905)))|])
        let (on''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x909 : t) ->
            fun ~event:(x907 : [ `timeout ]) ->
              fun ~listener:(x908 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x909) "on"
                     [|((match x907 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x908 ()))|])
        let (on'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x915 : t) ->
            fun ~event:(x910 : symbol or_string) ->
              fun ~listener:(x912 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x915) "on"
                     [|(or_string_to_js symbol_to_js x910);(Ojs.fun_to_js_args
                                                              (fun (x913 : _)
                                                                 ->
                                                                 x912
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x913 0)))|])
        let (once : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x918 : t) ->
            fun ~event:(x916 : [ `close ]) ->
              fun ~listener:(x917 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x918) "once"
                     [|((match x916 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x917 ()))|])
        let (once' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x922 : t) ->
            fun ~event:(x919 : [ `error ]) ->
              fun ~listener:(x920 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x922) "once"
                     [|((match x919 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x921 : Ojs.t) ->
                            x920 ~err:(Error.t_of_js x921)))|])
        let (once'' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int ->
                          error_code:int -> stream_id:int -> unit)
                -> t)
          =
          fun (x928 : t) ->
            fun ~event:(x923 : [ `frameError ]) ->
              fun
                ~listener:(x924 :
                            frameType:int ->
                              error_code:int -> stream_id:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x928) "once"
                     [|((match x923 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 3
                         (fun (x925 : Ojs.t) ->
                            fun (x926 : Ojs.t) ->
                              fun (x927 : Ojs.t) ->
                                x924 ~frameType:(Ojs.int_of_js x925)
                                  ~error_code:(Ojs.int_of_js x926)
                                  ~stream_id:(Ojs.int_of_js x927)))|])
        let (once''' :
          t ->
            event:[ `goaway ] ->
              listener:(errorCode:int ->
                          last_stream_id:int -> opaque_data:Buffer.t -> unit)
                -> t)
          =
          fun (x934 : t) ->
            fun ~event:(x929 : [ `goaway ]) ->
              fun
                ~listener:(x930 :
                            errorCode:int ->
                              last_stream_id:int ->
                                opaque_data:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x934) "once"
                     [|((match x929 with
                         | `goaway -> Ojs.string_to_js "goaway"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x931 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x932 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x933 :
                                                                    Ojs.t) ->
                                                                    x930
                                                                    ~errorCode:(
                                                                    Ojs.int_of_js
                                                                    x931)
                                                                    ~last_stream_id:(
                                                                    Ojs.int_of_js
                                                                    x932)
                                                                    ~opaque_data:(
                                                                    Buffer.t_of_js
                                                                    x933)))|])
        let (once'''' :
          t ->
            event:[ `localSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x938 : t) ->
            fun ~event:(x935 : [ `localSettings ]) ->
              fun ~listener:(x936 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x938) "once"
                     [|((match x935 with
                         | `localSettings -> Ojs.string_to_js "localSettings"));(
                       Ojs.fun_to_js 1
                         (fun (x937 : Ojs.t) ->
                            x936 ~settings:(Settings.t_of_js x937)))|])
        let (once''''' :
          t -> event:[ `ping ] -> listener:(unit -> unit) -> t) =
          fun (x941 : t) ->
            fun ~event:(x939 : [ `ping ]) ->
              fun ~listener:(x940 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x941) "once"
                     [|((match x939 with | `ping -> Ojs.string_to_js "ping"));(
                       Ojs.fun_to_js 1 (fun _ -> x940 ()))|])
        let (once'''''' :
          t ->
            event:[ `remoteSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x945 : t) ->
            fun ~event:(x942 : [ `remoteSettings ]) ->
              fun ~listener:(x943 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x945) "once"
                     [|((match x942 with
                         | `remoteSettings ->
                             Ojs.string_to_js "remoteSettings"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun
                                                                    (x944 :
                                                                    Ojs.t) ->
                                                                    x943
                                                                    ~settings:(
                                                                    Settings.t_of_js
                                                                    x944)))|])
        let (once''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x948 : t) ->
            fun ~event:(x946 : [ `timeout ]) ->
              fun ~listener:(x947 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x948) "once"
                     [|((match x946 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x947 ()))|])
        let (once'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x954 : t) ->
            fun ~event:(x949 : symbol or_string) ->
              fun ~listener:(x951 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x954) "once"
                     [|(or_string_to_js symbol_to_js x949);(Ojs.fun_to_js_args
                                                              (fun (x952 : _)
                                                                 ->
                                                                 x951
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x952 0)))|])
        let (prepend_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x957 : t) ->
            fun ~event:(x955 : [ `close ]) ->
              fun ~listener:(x956 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x957) "prependListener"
                     [|((match x955 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x956 ()))|])
        let (prepend_listener' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x961 : t) ->
            fun ~event:(x958 : [ `error ]) ->
              fun ~listener:(x959 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x961) "prependListener"
                     [|((match x958 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x960 : Ojs.t) ->
                            x959 ~err:(Error.t_of_js x960)))|])
        let (prepend_listener'' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int ->
                          error_code:int -> stream_id:int -> unit)
                -> t)
          =
          fun (x967 : t) ->
            fun ~event:(x962 : [ `frameError ]) ->
              fun
                ~listener:(x963 :
                            frameType:int ->
                              error_code:int -> stream_id:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x967) "prependListener"
                     [|((match x962 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 3
                         (fun (x964 : Ojs.t) ->
                            fun (x965 : Ojs.t) ->
                              fun (x966 : Ojs.t) ->
                                x963 ~frameType:(Ojs.int_of_js x964)
                                  ~error_code:(Ojs.int_of_js x965)
                                  ~stream_id:(Ojs.int_of_js x966)))|])
        let (prepend_listener''' :
          t ->
            event:[ `goaway ] ->
              listener:(errorCode:int ->
                          last_stream_id:int -> opaque_data:Buffer.t -> unit)
                -> t)
          =
          fun (x973 : t) ->
            fun ~event:(x968 : [ `goaway ]) ->
              fun
                ~listener:(x969 :
                            errorCode:int ->
                              last_stream_id:int ->
                                opaque_data:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x973) "prependListener"
                     [|((match x968 with
                         | `goaway -> Ojs.string_to_js "goaway"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x970 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x971 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x972 :
                                                                    Ojs.t) ->
                                                                    x969
                                                                    ~errorCode:(
                                                                    Ojs.int_of_js
                                                                    x970)
                                                                    ~last_stream_id:(
                                                                    Ojs.int_of_js
                                                                    x971)
                                                                    ~opaque_data:(
                                                                    Buffer.t_of_js
                                                                    x972)))|])
        let (prepend_listener'''' :
          t ->
            event:[ `localSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x977 : t) ->
            fun ~event:(x974 : [ `localSettings ]) ->
              fun ~listener:(x975 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x977) "prependListener"
                     [|((match x974 with
                         | `localSettings -> Ojs.string_to_js "localSettings"));(
                       Ojs.fun_to_js 1
                         (fun (x976 : Ojs.t) ->
                            x975 ~settings:(Settings.t_of_js x976)))|])
        let (prepend_listener''''' :
          t -> event:[ `ping ] -> listener:(unit -> unit) -> t) =
          fun (x980 : t) ->
            fun ~event:(x978 : [ `ping ]) ->
              fun ~listener:(x979 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x980) "prependListener"
                     [|((match x978 with | `ping -> Ojs.string_to_js "ping"));(
                       Ojs.fun_to_js 1 (fun _ -> x979 ()))|])
        let (prepend_listener'''''' :
          t ->
            event:[ `remoteSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x984 : t) ->
            fun ~event:(x981 : [ `remoteSettings ]) ->
              fun ~listener:(x982 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x984) "prependListener"
                     [|((match x981 with
                         | `remoteSettings ->
                             Ojs.string_to_js "remoteSettings"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun
                                                                    (x983 :
                                                                    Ojs.t) ->
                                                                    x982
                                                                    ~settings:(
                                                                    Settings.t_of_js
                                                                    x983)))|])
        let (prepend_listener''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x987 : t) ->
            fun ~event:(x985 : [ `timeout ]) ->
              fun ~listener:(x986 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x987) "prependListener"
                     [|((match x985 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x986 ()))|])
        let (prepend_listener'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x993 : t) ->
            fun ~event:(x988 : symbol or_string) ->
              fun ~listener:(x990 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x993) "prependListener"
                     [|(or_string_to_js symbol_to_js x988);(Ojs.fun_to_js_args
                                                              (fun (x991 : _)
                                                                 ->
                                                                 x990
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x991 0)))|])
        let (prepend_once_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x996 : t) ->
            fun ~event:(x994 : [ `close ]) ->
              fun ~listener:(x995 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x996) "prependOnceListener"
                     [|((match x994 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x995 ()))|])
        let (prepend_once_listener' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x1000 : t) ->
            fun ~event:(x997 : [ `error ]) ->
              fun ~listener:(x998 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1000) "prependOnceListener"
                     [|((match x997 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x999 : Ojs.t) ->
                            x998 ~err:(Error.t_of_js x999)))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int ->
                          error_code:int -> stream_id:int -> unit)
                -> t)
          =
          fun (x1006 : t) ->
            fun ~event:(x1001 : [ `frameError ]) ->
              fun
                ~listener:(x1002 :
                            frameType:int ->
                              error_code:int -> stream_id:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1006) "prependOnceListener"
                     [|((match x1001 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 3
                         (fun (x1003 : Ojs.t) ->
                            fun (x1004 : Ojs.t) ->
                              fun (x1005 : Ojs.t) ->
                                x1002 ~frameType:(Ojs.int_of_js x1003)
                                  ~error_code:(Ojs.int_of_js x1004)
                                  ~stream_id:(Ojs.int_of_js x1005)))|])
        let (prepend_once_listener''' :
          t ->
            event:[ `goaway ] ->
              listener:(errorCode:int ->
                          last_stream_id:int -> opaque_data:Buffer.t -> unit)
                -> t)
          =
          fun (x1012 : t) ->
            fun ~event:(x1007 : [ `goaway ]) ->
              fun
                ~listener:(x1008 :
                            errorCode:int ->
                              last_stream_id:int ->
                                opaque_data:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1012) "prependOnceListener"
                     [|((match x1007 with
                         | `goaway -> Ojs.string_to_js "goaway"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1009 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1010 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1011 :
                                                                    Ojs.t) ->
                                                                    x1008
                                                                    ~errorCode:(
                                                                    Ojs.int_of_js
                                                                    x1009)
                                                                    ~last_stream_id:(
                                                                    Ojs.int_of_js
                                                                    x1010)
                                                                    ~opaque_data:(
                                                                    Buffer.t_of_js
                                                                    x1011)))|])
        let (prepend_once_listener'''' :
          t ->
            event:[ `localSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x1016 : t) ->
            fun ~event:(x1013 : [ `localSettings ]) ->
              fun ~listener:(x1014 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1016) "prependOnceListener"
                     [|((match x1013 with
                         | `localSettings -> Ojs.string_to_js "localSettings"));(
                       Ojs.fun_to_js 1
                         (fun (x1015 : Ojs.t) ->
                            x1014 ~settings:(Settings.t_of_js x1015)))|])
        let (prepend_once_listener''''' :
          t -> event:[ `ping ] -> listener:(unit -> unit) -> t) =
          fun (x1019 : t) ->
            fun ~event:(x1017 : [ `ping ]) ->
              fun ~listener:(x1018 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1019) "prependOnceListener"
                     [|((match x1017 with | `ping -> Ojs.string_to_js "ping"));(
                       Ojs.fun_to_js 1 (fun _ -> x1018 ()))|])
        let (prepend_once_listener'''''' :
          t ->
            event:[ `remoteSettings ] ->
              listener:(settings:Settings.t -> unit) -> t)
          =
          fun (x1023 : t) ->
            fun ~event:(x1020 : [ `remoteSettings ]) ->
              fun ~listener:(x1021 : settings:Settings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1023) "prependOnceListener"
                     [|((match x1020 with
                         | `remoteSettings ->
                             Ojs.string_to_js "remoteSettings"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun
                                                                    (x1022 :
                                                                    Ojs.t) ->
                                                                    x1021
                                                                    ~settings:(
                                                                    Settings.t_of_js
                                                                    x1022)))|])
        let (prepend_once_listener''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1026 : t) ->
            fun ~event:(x1024 : [ `timeout ]) ->
              fun ~listener:(x1025 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1026) "prependOnceListener"
                     [|((match x1024 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1025 ()))|])
        let (prepend_once_listener'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1032 : t) ->
            fun ~event:(x1027 : symbol or_string) ->
              fun ~listener:(x1029 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1032) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x1027);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1030 : _)
                                                                  ->
                                                                  x1029
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1030 0)))|])
      end
    module ClientHttp2Session =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1034 : Ojs.t) -> x1034
        and t_to_js : t -> Ojs.t = fun (x1033 : Ojs.t) -> x1033
        let (request :
          t ->
            ?headers:Node_http.Http.OutgoingHttpHeaders.t ->
              ?options:ClientSessionRequestOptions.t ->
                unit -> ClientHttp2Stream.t)
          =
          fun (x1040 : t) ->
            fun
              ?headers:(x1035 : Node_http.Http.OutgoingHttpHeaders.t option)
              ->
              fun ?options:(x1036 : ClientSessionRequestOptions.t option) ->
                fun () ->
                  ClientHttp2Stream.t_of_js
                    (let x1041 = t_to_js x1040 in
                     Ojs.call (Ojs.get_prop_ascii x1041 "request") "apply"
                       [|x1041;((let x1037 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x1035 with
                                  | Some x1039 ->
                                      ignore
                                        (Ojs.call x1037 "push"
                                           [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                                x1039)|])
                                  | None -> ());
                                 (match x1036 with
                                  | Some x1038 ->
                                      ignore
                                        (Ojs.call x1037 "push"
                                           [|(ClientSessionRequestOptions.t_to_js
                                                x1038)|])
                                  | None -> ());
                                 x1037))|])
        let (add_listener :
          t ->
            event:[ `altsvc ] ->
              listener:(alt:string -> origin:string -> stream:int -> unit) ->
                t)
          =
          fun (x1047 : t) ->
            fun ~event:(x1042 : [ `altsvc ]) ->
              fun
                ~listener:(x1043 :
                            alt:string -> origin:string -> stream:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1047) "addListener"
                     [|((match x1042 with
                         | `altsvc -> Ojs.string_to_js "altsvc"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1044 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1045 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1046 :
                                                                    Ojs.t) ->
                                                                    x1043
                                                                    ~alt:(
                                                                    Ojs.string_of_js
                                                                    x1044)
                                                                    ~origin:(
                                                                    Ojs.string_of_js
                                                                    x1045)
                                                                    ~stream:(
                                                                    Ojs.int_of_js
                                                                    x1046)))|])
        let (add_listener' :
          t ->
            event:[ `origin ] -> listener:(origins:string list -> unit) -> t)
          =
          fun (x1052 : t) ->
            fun ~event:(x1048 : [ `origin ]) ->
              fun ~listener:(x1049 : origins:string list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1052) "addListener"
                     [|((match x1048 with
                         | `origin -> Ojs.string_to_js "origin"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1050 :
                                                                    Ojs.t) ->
                                                                    x1049
                                                                    ~origins:(
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x1050)))|])
        let (add_listener'' :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1059 : t) ->
            fun ~event:(x1053 : [ `connect ]) ->
              fun
                ~listener:(x1054 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1059) "addListener"
                     [|((match x1053 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1055 : Ojs.t) ->
                            fun (x1056 : Ojs.t) ->
                              x1054 ~session:(t_of_js x1055)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1056)))|])
        let (add_listener''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ClientHttp2Stream.t ->
                          headers:(IncomingHttpHeaders.t,
                            IncomingHttpStatusHeader.t) intersection2 ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1067 : t) ->
            fun ~event:(x1060 : [ `stream ]) ->
              fun
                ~listener:(x1061 :
                            stream:ClientHttp2Stream.t ->
                              headers:(IncomingHttpHeaders.t,
                                IncomingHttpStatusHeader.t) intersection2 ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1067) "addListener"
                     [|((match x1060 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1062 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1063 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1066 :
                                                                    Ojs.t) ->
                                                                    x1061
                                                                    ~stream:(
                                                                    ClientHttp2Stream.t_of_js
                                                                    x1062)
                                                                    ~headers:(
                                                                    intersection2_of_js
                                                                    IncomingHttpHeaders.t_of_js
                                                                    IncomingHttpStatusHeader.t_of_js
                                                                    x1063)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1066)))|])
        let (add_listener'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1073 : t) ->
            fun ~event:(x1068 : symbol or_string) ->
              fun ~listener:(x1070 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1073) "addListener"
                     [|(or_string_to_js symbol_to_js x1068);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1071 : _)
                                                                  ->
                                                                  x1070
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1071 0)))|])
        let (emit :
          t ->
            event:[ `altsvc ] ->
              alt:string -> origin:string -> stream:int -> bool)
          =
          fun (x1078 : t) ->
            fun ~event:(x1074 : [ `altsvc ]) ->
              fun ~alt:(x1075 : string) ->
                fun ~origin:(x1076 : string) ->
                  fun ~stream:(x1077 : int) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x1078) "emit"
                         [|((match x1074 with
                             | `altsvc -> Ojs.string_to_js "altsvc"));(
                           Ojs.string_to_js x1075);(Ojs.string_to_js x1076);(
                           Ojs.int_to_js x1077)|])
        let (emit' : t -> event:[ `origin ] -> origins:string list -> bool) =
          fun (x1082 : t) ->
            fun ~event:(x1079 : [ `origin ]) ->
              fun ~origins:(x1080 : string list) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1082) "emit"
                     [|((match x1079 with
                         | `origin -> Ojs.string_to_js "origin"));(Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x1080)|])
        let (emit'' :
          t ->
            event:[ `connect ] ->
              session:t ->
                socket:(Net.Socket.t, Tls.TLSSocket.t) union2 -> bool)
          =
          fun (x1088 : t) ->
            fun ~event:(x1083 : [ `connect ]) ->
              fun ~session:(x1084 : t) ->
                fun ~socket:(x1085 : (Net.Socket.t, Tls.TLSSocket.t) union2)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x1088) "emit"
                       [|((match x1083 with
                           | `connect -> Ojs.string_to_js "connect"));(
                         t_to_js x1084);(union2_to_js Net.Socket.t_to_js
                                           Tls.TLSSocket.t_to_js x1085)|])
        let (emit''' :
          t ->
            event:[ `stream ] ->
              stream:ClientHttp2Stream.t ->
                headers:(IncomingHttpHeaders.t, IncomingHttpStatusHeader.t)
                  intersection2 -> flags:int -> bool)
          =
          fun (x1095 : t) ->
            fun ~event:(x1089 : [ `stream ]) ->
              fun ~stream:(x1090 : ClientHttp2Stream.t) ->
                fun
                  ~headers:(x1091 :
                             (IncomingHttpHeaders.t,
                               IncomingHttpStatusHeader.t) intersection2)
                  ->
                  fun ~flags:(x1094 : int) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x1095) "emit"
                         [|((match x1089 with
                             | `stream -> Ojs.string_to_js "stream"));(
                           ClientHttp2Stream.t_to_js x1090);(intersection2_to_js
                                                               IncomingHttpHeaders.t_to_js
                                                               IncomingHttpStatusHeader.t_to_js
                                                               x1091);(
                           Ojs.int_to_js x1094)|])
        let (emit'''' : t -> event:symbol or_string -> args:any list -> bool)
          =
          fun (x1101 : t) ->
            fun ~event:(x1096 : symbol or_string) ->
              fun ~args:(x1097 : any list) ->
                Ojs.bool_of_js
                  (let x1102 = t_to_js x1101 in
                   Ojs.call (Ojs.get_prop_ascii x1102 "emit") "apply"
                     [|x1102;((let x1098 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1098 "push"
                                    [|(or_string_to_js symbol_to_js x1096)|]);
                               List.iter
                                 (fun (x1099 : any) ->
                                    ignore
                                      (Ojs.call x1098 "push"
                                         [|(any_to_js x1099)|])) x1097;
                               x1098))|])
        let (on :
          t ->
            event:[ `altsvc ] ->
              listener:(alt:string -> origin:string -> stream:int -> unit) ->
                t)
          =
          fun (x1108 : t) ->
            fun ~event:(x1103 : [ `altsvc ]) ->
              fun
                ~listener:(x1104 :
                            alt:string -> origin:string -> stream:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1108) "on"
                     [|((match x1103 with
                         | `altsvc -> Ojs.string_to_js "altsvc"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1105 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1106 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1107 :
                                                                    Ojs.t) ->
                                                                    x1104
                                                                    ~alt:(
                                                                    Ojs.string_of_js
                                                                    x1105)
                                                                    ~origin:(
                                                                    Ojs.string_of_js
                                                                    x1106)
                                                                    ~stream:(
                                                                    Ojs.int_of_js
                                                                    x1107)))|])
        let (on' :
          t ->
            event:[ `origin ] -> listener:(origins:string list -> unit) -> t)
          =
          fun (x1113 : t) ->
            fun ~event:(x1109 : [ `origin ]) ->
              fun ~listener:(x1110 : origins:string list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1113) "on"
                     [|((match x1109 with
                         | `origin -> Ojs.string_to_js "origin"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1111 :
                                                                    Ojs.t) ->
                                                                    x1110
                                                                    ~origins:(
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x1111)))|])
        let (on'' :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1120 : t) ->
            fun ~event:(x1114 : [ `connect ]) ->
              fun
                ~listener:(x1115 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1120) "on"
                     [|((match x1114 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1116 : Ojs.t) ->
                            fun (x1117 : Ojs.t) ->
                              x1115 ~session:(t_of_js x1116)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1117)))|])
        let (on''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ClientHttp2Stream.t ->
                          headers:(IncomingHttpHeaders.t,
                            IncomingHttpStatusHeader.t) intersection2 ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1128 : t) ->
            fun ~event:(x1121 : [ `stream ]) ->
              fun
                ~listener:(x1122 :
                            stream:ClientHttp2Stream.t ->
                              headers:(IncomingHttpHeaders.t,
                                IncomingHttpStatusHeader.t) intersection2 ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1128) "on"
                     [|((match x1121 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1123 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1124 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1127 :
                                                                    Ojs.t) ->
                                                                    x1122
                                                                    ~stream:(
                                                                    ClientHttp2Stream.t_of_js
                                                                    x1123)
                                                                    ~headers:(
                                                                    intersection2_of_js
                                                                    IncomingHttpHeaders.t_of_js
                                                                    IncomingHttpStatusHeader.t_of_js
                                                                    x1124)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1127)))|])
        let (on'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1134 : t) ->
            fun ~event:(x1129 : symbol or_string) ->
              fun ~listener:(x1131 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1134) "on"
                     [|(or_string_to_js symbol_to_js x1129);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1132 : _)
                                                                  ->
                                                                  x1131
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1132 0)))|])
        let (once :
          t ->
            event:[ `altsvc ] ->
              listener:(alt:string -> origin:string -> stream:int -> unit) ->
                t)
          =
          fun (x1140 : t) ->
            fun ~event:(x1135 : [ `altsvc ]) ->
              fun
                ~listener:(x1136 :
                            alt:string -> origin:string -> stream:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1140) "once"
                     [|((match x1135 with
                         | `altsvc -> Ojs.string_to_js "altsvc"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1137 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1138 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1139 :
                                                                    Ojs.t) ->
                                                                    x1136
                                                                    ~alt:(
                                                                    Ojs.string_of_js
                                                                    x1137)
                                                                    ~origin:(
                                                                    Ojs.string_of_js
                                                                    x1138)
                                                                    ~stream:(
                                                                    Ojs.int_of_js
                                                                    x1139)))|])
        let (once' :
          t ->
            event:[ `origin ] -> listener:(origins:string list -> unit) -> t)
          =
          fun (x1145 : t) ->
            fun ~event:(x1141 : [ `origin ]) ->
              fun ~listener:(x1142 : origins:string list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1145) "once"
                     [|((match x1141 with
                         | `origin -> Ojs.string_to_js "origin"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1143 :
                                                                    Ojs.t) ->
                                                                    x1142
                                                                    ~origins:(
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x1143)))|])
        let (once'' :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1152 : t) ->
            fun ~event:(x1146 : [ `connect ]) ->
              fun
                ~listener:(x1147 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1152) "once"
                     [|((match x1146 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1148 : Ojs.t) ->
                            fun (x1149 : Ojs.t) ->
                              x1147 ~session:(t_of_js x1148)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1149)))|])
        let (once''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ClientHttp2Stream.t ->
                          headers:(IncomingHttpHeaders.t,
                            IncomingHttpStatusHeader.t) intersection2 ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1160 : t) ->
            fun ~event:(x1153 : [ `stream ]) ->
              fun
                ~listener:(x1154 :
                            stream:ClientHttp2Stream.t ->
                              headers:(IncomingHttpHeaders.t,
                                IncomingHttpStatusHeader.t) intersection2 ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1160) "once"
                     [|((match x1153 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1155 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1156 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1159 :
                                                                    Ojs.t) ->
                                                                    x1154
                                                                    ~stream:(
                                                                    ClientHttp2Stream.t_of_js
                                                                    x1155)
                                                                    ~headers:(
                                                                    intersection2_of_js
                                                                    IncomingHttpHeaders.t_of_js
                                                                    IncomingHttpStatusHeader.t_of_js
                                                                    x1156)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1159)))|])
        let (once'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1166 : t) ->
            fun ~event:(x1161 : symbol or_string) ->
              fun ~listener:(x1163 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1166) "once"
                     [|(or_string_to_js symbol_to_js x1161);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1164 : _)
                                                                  ->
                                                                  x1163
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1164 0)))|])
        let (prepend_listener :
          t ->
            event:[ `altsvc ] ->
              listener:(alt:string -> origin:string -> stream:int -> unit) ->
                t)
          =
          fun (x1172 : t) ->
            fun ~event:(x1167 : [ `altsvc ]) ->
              fun
                ~listener:(x1168 :
                            alt:string -> origin:string -> stream:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1172) "prependListener"
                     [|((match x1167 with
                         | `altsvc -> Ojs.string_to_js "altsvc"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1169 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1170 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1171 :
                                                                    Ojs.t) ->
                                                                    x1168
                                                                    ~alt:(
                                                                    Ojs.string_of_js
                                                                    x1169)
                                                                    ~origin:(
                                                                    Ojs.string_of_js
                                                                    x1170)
                                                                    ~stream:(
                                                                    Ojs.int_of_js
                                                                    x1171)))|])
        let (prepend_listener' :
          t ->
            event:[ `origin ] -> listener:(origins:string list -> unit) -> t)
          =
          fun (x1177 : t) ->
            fun ~event:(x1173 : [ `origin ]) ->
              fun ~listener:(x1174 : origins:string list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1177) "prependListener"
                     [|((match x1173 with
                         | `origin -> Ojs.string_to_js "origin"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1175 :
                                                                    Ojs.t) ->
                                                                    x1174
                                                                    ~origins:(
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x1175)))|])
        let (prepend_listener'' :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1184 : t) ->
            fun ~event:(x1178 : [ `connect ]) ->
              fun
                ~listener:(x1179 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1184) "prependListener"
                     [|((match x1178 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1180 : Ojs.t) ->
                            fun (x1181 : Ojs.t) ->
                              x1179 ~session:(t_of_js x1180)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1181)))|])
        let (prepend_listener''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ClientHttp2Stream.t ->
                          headers:(IncomingHttpHeaders.t,
                            IncomingHttpStatusHeader.t) intersection2 ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1192 : t) ->
            fun ~event:(x1185 : [ `stream ]) ->
              fun
                ~listener:(x1186 :
                            stream:ClientHttp2Stream.t ->
                              headers:(IncomingHttpHeaders.t,
                                IncomingHttpStatusHeader.t) intersection2 ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1192) "prependListener"
                     [|((match x1185 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1187 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1188 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1191 :
                                                                    Ojs.t) ->
                                                                    x1186
                                                                    ~stream:(
                                                                    ClientHttp2Stream.t_of_js
                                                                    x1187)
                                                                    ~headers:(
                                                                    intersection2_of_js
                                                                    IncomingHttpHeaders.t_of_js
                                                                    IncomingHttpStatusHeader.t_of_js
                                                                    x1188)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1191)))|])
        let (prepend_listener'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1198 : t) ->
            fun ~event:(x1193 : symbol or_string) ->
              fun ~listener:(x1195 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1198) "prependListener"
                     [|(or_string_to_js symbol_to_js x1193);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1196 : _)
                                                                  ->
                                                                  x1195
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1196 0)))|])
        let (prepend_once_listener :
          t ->
            event:[ `altsvc ] ->
              listener:(alt:string -> origin:string -> stream:int -> unit) ->
                t)
          =
          fun (x1204 : t) ->
            fun ~event:(x1199 : [ `altsvc ]) ->
              fun
                ~listener:(x1200 :
                            alt:string -> origin:string -> stream:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1204) "prependOnceListener"
                     [|((match x1199 with
                         | `altsvc -> Ojs.string_to_js "altsvc"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1201 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1202 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1203 :
                                                                    Ojs.t) ->
                                                                    x1200
                                                                    ~alt:(
                                                                    Ojs.string_of_js
                                                                    x1201)
                                                                    ~origin:(
                                                                    Ojs.string_of_js
                                                                    x1202)
                                                                    ~stream:(
                                                                    Ojs.int_of_js
                                                                    x1203)))|])
        let (prepend_once_listener' :
          t ->
            event:[ `origin ] -> listener:(origins:string list -> unit) -> t)
          =
          fun (x1209 : t) ->
            fun ~event:(x1205 : [ `origin ]) ->
              fun ~listener:(x1206 : origins:string list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1209) "prependOnceListener"
                     [|((match x1205 with
                         | `origin -> Ojs.string_to_js "origin"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1207 :
                                                                    Ojs.t) ->
                                                                    x1206
                                                                    ~origins:(
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x1207)))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1216 : t) ->
            fun ~event:(x1210 : [ `connect ]) ->
              fun
                ~listener:(x1211 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1216) "prependOnceListener"
                     [|((match x1210 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1212 : Ojs.t) ->
                            fun (x1213 : Ojs.t) ->
                              x1211 ~session:(t_of_js x1212)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1213)))|])
        let (prepend_once_listener''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ClientHttp2Stream.t ->
                          headers:(IncomingHttpHeaders.t,
                            IncomingHttpStatusHeader.t) intersection2 ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1224 : t) ->
            fun ~event:(x1217 : [ `stream ]) ->
              fun
                ~listener:(x1218 :
                            stream:ClientHttp2Stream.t ->
                              headers:(IncomingHttpHeaders.t,
                                IncomingHttpStatusHeader.t) intersection2 ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1224) "prependOnceListener"
                     [|((match x1217 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1219 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1220 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1223 :
                                                                    Ojs.t) ->
                                                                    x1218
                                                                    ~stream:(
                                                                    ClientHttp2Stream.t_of_js
                                                                    x1219)
                                                                    ~headers:(
                                                                    intersection2_of_js
                                                                    IncomingHttpHeaders.t_of_js
                                                                    IncomingHttpStatusHeader.t_of_js
                                                                    x1220)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1223)))|])
        let (prepend_once_listener'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1230 : t) ->
            fun ~event:(x1225 : symbol or_string) ->
              fun ~listener:(x1227 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1230) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x1225);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1228 : _)
                                                                  ->
                                                                  x1227
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1228 0)))|])
        let (cast : t -> Http2Session.t) =
          fun (x1231 : t) -> Http2Session.t_of_js (t_to_js x1231)
      end
    module AlternativeServiceOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1233 : Ojs.t) -> x1233
        and t_to_js : t -> Ojs.t = fun (x1232 : Ojs.t) -> x1232
        let (get_origin : t -> Url.URL.t or_string or_number) =
          fun (x1234 : t) ->
            or_number_of_js
              (fun (x1235 : Ojs.t) -> or_string_of_js Url.URL.t_of_js x1235)
              (Ojs.get_prop_ascii (t_to_js x1234) "origin")
        let (set_origin : t -> Url.URL.t or_string or_number -> unit) =
          fun (x1237 : t) ->
            fun (x1238 : Url.URL.t or_string or_number) ->
              Ojs.set_prop_ascii (t_to_js x1237) "origin"
                (or_number_to_js
                   (fun (x1239 : Url.URL.t or_string) ->
                      or_string_to_js Url.URL.t_to_js x1239) x1238)
      end
    module SessionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1242 : Ojs.t) -> x1242
        and t_to_js : t -> Ojs.t = fun (x1241 : Ojs.t) -> x1241
        let (get_max_deflate_dynamic_table_size : t -> int) =
          fun (x1243 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1243)
                 "maxDeflateDynamicTableSize")
        let (set_max_deflate_dynamic_table_size : t -> int -> unit) =
          fun (x1244 : t) ->
            fun (x1245 : int) ->
              Ojs.set_prop_ascii (t_to_js x1244) "maxDeflateDynamicTableSize"
                (Ojs.int_to_js x1245)
        let (get_max_session_memory : t -> int) =
          fun (x1246 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1246) "maxSessionMemory")
        let (set_max_session_memory : t -> int -> unit) =
          fun (x1247 : t) ->
            fun (x1248 : int) ->
              Ojs.set_prop_ascii (t_to_js x1247) "maxSessionMemory"
                (Ojs.int_to_js x1248)
        let (get_max_header_list_pairs : t -> int) =
          fun (x1249 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1249) "maxHeaderListPairs")
        let (set_max_header_list_pairs : t -> int -> unit) =
          fun (x1250 : t) ->
            fun (x1251 : int) ->
              Ojs.set_prop_ascii (t_to_js x1250) "maxHeaderListPairs"
                (Ojs.int_to_js x1251)
        let (get_max_outstanding_pings : t -> int) =
          fun (x1252 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1252) "maxOutstandingPings")
        let (set_max_outstanding_pings : t -> int -> unit) =
          fun (x1253 : t) ->
            fun (x1254 : int) ->
              Ojs.set_prop_ascii (t_to_js x1253) "maxOutstandingPings"
                (Ojs.int_to_js x1254)
        let (get_max_send_header_block_length : t -> int) =
          fun (x1255 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1255) "maxSendHeaderBlockLength")
        let (set_max_send_header_block_length : t -> int -> unit) =
          fun (x1256 : t) ->
            fun (x1257 : int) ->
              Ojs.set_prop_ascii (t_to_js x1256) "maxSendHeaderBlockLength"
                (Ojs.int_to_js x1257)
        let (get_padding_strategy : t -> int) =
          fun (x1258 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1258) "paddingStrategy")
        let (set_padding_strategy : t -> int -> unit) =
          fun (x1259 : t) ->
            fun (x1260 : int) ->
              Ojs.set_prop_ascii (t_to_js x1259) "paddingStrategy"
                (Ojs.int_to_js x1260)
        let (get_peer_max_concurrent_streams : t -> int) =
          fun (x1261 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1261) "peerMaxConcurrentStreams")
        let (set_peer_max_concurrent_streams : t -> int -> unit) =
          fun (x1262 : t) ->
            fun (x1263 : int) ->
              Ojs.set_prop_ascii (t_to_js x1262) "peerMaxConcurrentStreams"
                (Ojs.int_to_js x1263)
        let (get_settings : t -> Settings.t) =
          fun (x1264 : t) ->
            Settings.t_of_js (Ojs.get_prop_ascii (t_to_js x1264) "settings")
        let (set_settings : t -> Settings.t -> unit) =
          fun (x1265 : t) ->
            fun (x1266 : Settings.t) ->
              Ojs.set_prop_ascii (t_to_js x1265) "settings"
                (Settings.t_to_js x1266)
        let (select_padding : t -> frame_len:int -> max_frame_len:int -> int)
          =
          fun (x1269 : t) ->
            fun ~frame_len:(x1267 : int) ->
              fun ~max_frame_len:(x1268 : int) ->
                Ojs.int_of_js
                  (Ojs.call (t_to_js x1269) "selectPadding"
                     [|(Ojs.int_to_js x1267);(Ojs.int_to_js x1268)|])
        let (create_connection :
          t -> authority:Url.URL.t -> option:t -> Stream.Duplex.t) =
          fun (x1272 : t) ->
            fun ~authority:(x1270 : Url.URL.t) ->
              fun ~option:(x1271 : t) ->
                Stream.Duplex.t_of_js
                  (Ojs.call (t_to_js x1272) "createConnection"
                     [|(Url.URL.t_to_js x1270);(t_to_js x1271)|])
      end
    module ClientSessionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1274 : Ojs.t) -> x1274
        and t_to_js : t -> Ojs.t = fun (x1273 : Ojs.t) -> x1273
        let (get_max_reserved_remote_streams : t -> int) =
          fun (x1275 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1275) "maxReservedRemoteStreams")
        let (set_max_reserved_remote_streams : t -> int -> unit) =
          fun (x1276 : t) ->
            fun (x1277 : int) ->
              Ojs.set_prop_ascii (t_to_js x1276) "maxReservedRemoteStreams"
                (Ojs.int_to_js x1277)
        let (create_connection :
          t ->
            authority:Url.URL.t -> option:SessionOptions.t -> Stream.Duplex.t)
          =
          fun (x1280 : t) ->
            fun ~authority:(x1278 : Url.URL.t) ->
              fun ~option:(x1279 : SessionOptions.t) ->
                Stream.Duplex.t_of_js
                  (Ojs.call (t_to_js x1280) "createConnection"
                     [|(Url.URL.t_to_js x1278);(SessionOptions.t_to_js x1279)|])
        let (get_protocol : t -> [ `http_  | `https_ ]) =
          fun (x1281 : t) ->
            let x1282 = Ojs.get_prop_ascii (t_to_js x1281) "protocol" in
            match Ojs.string_of_js x1282 with
            | "http:" -> `http_
            | "https:" -> `https_
            | _ -> assert false
        let (set_protocol : t -> [ `http_  | `https_ ] -> unit) =
          fun (x1283 : t) ->
            fun (x1284 : [ `http_  | `https_ ]) ->
              Ojs.set_prop_ascii (t_to_js x1283) "protocol"
                (match x1284 with
                 | `http_ -> Ojs.string_to_js "http"
                 | `https_ -> Ojs.string_to_js "https")
        let (cast : t -> SessionOptions.t) =
          fun (x1285 : t) -> SessionOptions.t_of_js (t_to_js x1285)
      end
    module ServerSessionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1287 : Ojs.t) -> x1287
        and t_to_js : t -> Ojs.t = fun (x1286 : Ojs.t) -> x1286
        let (get_http1IncomingMessage : t -> any) =
          fun (x1288 : t) ->
            any_of_js
              (Ojs.get_prop_ascii (t_to_js x1288) "Http1IncomingMessage")
        let (set_http1IncomingMessage : t -> any -> unit) =
          fun (x1289 : t) ->
            fun (x1290 : any) ->
              Ojs.set_prop_ascii (t_to_js x1289) "Http1IncomingMessage"
                (any_to_js x1290)
        let (get_http1ServerResponse : t -> any) =
          fun (x1291 : t) ->
            any_of_js
              (Ojs.get_prop_ascii (t_to_js x1291) "Http1ServerResponse")
        let (set_http1ServerResponse : t -> any -> unit) =
          fun (x1292 : t) ->
            fun (x1293 : any) ->
              Ojs.set_prop_ascii (t_to_js x1292) "Http1ServerResponse"
                (any_to_js x1293)
        let (get_http2ServerRequest : t -> any) =
          fun (x1294 : t) ->
            any_of_js
              (Ojs.get_prop_ascii (t_to_js x1294) "Http2ServerRequest")
        let (set_http2ServerRequest : t -> any -> unit) =
          fun (x1295 : t) ->
            fun (x1296 : any) ->
              Ojs.set_prop_ascii (t_to_js x1295) "Http2ServerRequest"
                (any_to_js x1296)
        let (get_http2ServerResponse : t -> any) =
          fun (x1297 : t) ->
            any_of_js
              (Ojs.get_prop_ascii (t_to_js x1297) "Http2ServerResponse")
        let (set_http2ServerResponse : t -> any -> unit) =
          fun (x1298 : t) ->
            fun (x1299 : any) ->
              Ojs.set_prop_ascii (t_to_js x1298) "Http2ServerResponse"
                (any_to_js x1299)
        let (cast : t -> SessionOptions.t) =
          fun (x1300 : t) -> SessionOptions.t_of_js (t_to_js x1300)
      end
    module SecureClientSessionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1302 : Ojs.t) -> x1302
        and t_to_js : t -> Ojs.t = fun (x1301 : Ojs.t) -> x1301
        let (cast : t -> ClientSessionOptions.t) =
          fun (x1303 : t) -> ClientSessionOptions.t_of_js (t_to_js x1303)
        let (cast' : t -> Tls.ConnectionOptions.t) =
          fun (x1304 : t) -> Tls.ConnectionOptions.t_of_js (t_to_js x1304)
      end
    module SecureServerSessionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1306 : Ojs.t) -> x1306
        and t_to_js : t -> Ojs.t = fun (x1305 : Ojs.t) -> x1305
        let (cast : t -> ServerSessionOptions.t) =
          fun (x1307 : t) -> ServerSessionOptions.t_of_js (t_to_js x1307)
        let (cast' : t -> Tls.TlsOptions.t) =
          fun (x1308 : t) -> Tls.TlsOptions.t_of_js (t_to_js x1308)
      end
    module ServerOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1310 : Ojs.t) -> x1310
        and t_to_js : t -> Ojs.t = fun (x1309 : Ojs.t) -> x1309
        let (cast : t -> ServerSessionOptions.t) =
          fun (x1311 : t) -> ServerSessionOptions.t_of_js (t_to_js x1311)
      end
    module SecureServerOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1313 : Ojs.t) -> x1313
        and t_to_js : t -> Ojs.t = fun (x1312 : Ojs.t) -> x1312
        let (get_allow_http1 : t -> bool) =
          fun (x1314 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1314) "allowHTTP1")
        let (set_allow_http1 : t -> bool -> unit) =
          fun (x1315 : t) ->
            fun (x1316 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1315) "allowHTTP1"
                (Ojs.bool_to_js x1316)
        let (get_origins : t -> string list) =
          fun (x1317 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1317) "origins")
        let (set_origins : t -> string list -> unit) =
          fun (x1319 : t) ->
            fun (x1320 : string list) ->
              Ojs.set_prop_ascii (t_to_js x1319) "origins"
                (Ojs.list_to_js Ojs.string_to_js x1320)
        let (cast : t -> SecureServerSessionOptions.t) =
          fun (x1322 : t) ->
            SecureServerSessionOptions.t_of_js (t_to_js x1322)
      end
    module Http2ServerRequest =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1324 : Ojs.t) -> x1324
        and t_to_js : t -> Ojs.t = fun (x1323 : Ojs.t) -> x1323
        let (create :
          stream:ServerHttp2Stream.t ->
            headers:IncomingHttpHeaders.t ->
              options:Stream.ReadableOptions.t ->
                raw_headers:string list -> t)
          =
          fun ~stream:(x1325 : ServerHttp2Stream.t) ->
            fun ~headers:(x1326 : IncomingHttpHeaders.t) ->
              fun ~options:(x1327 : Stream.ReadableOptions.t) ->
                fun ~raw_headers:(x1328 : string list) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii Import.http2 "Http2ServerRequest")
                       [|(ServerHttp2Stream.t_to_js x1325);(IncomingHttpHeaders.t_to_js
                                                              x1326);(
                         Stream.ReadableOptions.t_to_js x1327);(Ojs.list_to_js
                                                                  Ojs.string_to_js
                                                                  x1328)|])
        let (get_aborted : t -> bool) =
          fun (x1330 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1330) "aborted")
        let (get_authority : t -> string) =
          fun (x1331 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1331) "authority")
        let (get_connection : t -> (Net.Socket.t, Tls.TLSSocket.t) union2) =
          fun (x1332 : t) ->
            union2_of_js Net.Socket.t_of_js Tls.TLSSocket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1332) "connection")
        let (get_complete : t -> bool) =
          fun (x1335 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1335) "complete")
        let (get_headers : t -> IncomingHttpHeaders.t) =
          fun (x1336 : t) ->
            IncomingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1336) "headers")
        let (get_http_version : t -> string) =
          fun (x1337 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1337) "httpVersion")
        let (get_http_version_minor : t -> int) =
          fun (x1338 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1338) "httpVersionMinor")
        let (get_http_version_major : t -> int) =
          fun (x1339 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1339) "httpVersionMajor")
        let (get_method : t -> string) =
          fun (x1340 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1340) "method")
        let (get_raw_headers : t -> string list) =
          fun (x1341 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1341) "rawHeaders")
        let (get_raw_trailers : t -> string list) =
          fun (x1343 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1343) "rawTrailers")
        let (get_scheme : t -> string) =
          fun (x1345 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1345) "scheme")
        let (get_socket : t -> (Net.Socket.t, Tls.TLSSocket.t) union2) =
          fun (x1346 : t) ->
            union2_of_js Net.Socket.t_of_js Tls.TLSSocket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1346) "socket")
        let (get_stream : t -> ServerHttp2Stream.t) =
          fun (x1349 : t) ->
            ServerHttp2Stream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1349) "stream")
        let (get_trailers : t -> IncomingHttpHeaders.t) =
          fun (x1350 : t) ->
            IncomingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1350) "trailers")
        let (get_url : t -> string) =
          fun (x1351 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1351) "url")
        let (set_timeout :
          t -> msecs:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x1356 : t) ->
            fun ~msecs:(x1352 : int) ->
              fun ?callback:(x1353 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x1357 = t_to_js x1356 in
                     Ojs.call (Ojs.get_prop_ascii x1357 "setTimeout") "apply"
                       [|x1357;((let x1354 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1354 "push"
                                      [|(Ojs.int_to_js x1352)|]);
                                 (match x1353 with
                                  | Some x1355 ->
                                      ignore
                                        (Ojs.call x1354 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x1355 ()))|])
                                  | None -> ());
                                 x1354))|])
        let (read : t -> ?size:int -> unit -> Buffer.t or_string or_null) =
          fun (x1361 : t) ->
            fun ?size:(x1358 : int option) ->
              fun () ->
                or_null_of_js
                  (fun (x1363 : Ojs.t) ->
                     or_string_of_js Buffer.t_of_js x1363)
                  (let x1362 = t_to_js x1361 in
                   Ojs.call (Ojs.get_prop_ascii x1362 "read") "apply"
                     [|x1362;((let x1359 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x1358 with
                                | Some x1360 ->
                                    ignore
                                      (Ojs.call x1359 "push"
                                         [|(Ojs.int_to_js x1360)|])
                                | None -> ());
                               x1359))|])
        let (add_listener :
          t ->
            event:[ `aborted ] ->
              listener:(hadError:bool -> code:int -> unit) -> t)
          =
          fun (x1369 : t) ->
            fun ~event:(x1365 : [ `aborted ]) ->
              fun ~listener:(x1366 : hadError:bool -> code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1369) "addListener"
                     [|((match x1365 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 2
                         (fun (x1367 : Ojs.t) ->
                            fun (x1368 : Ojs.t) ->
                              x1366 ~hadError:(Ojs.bool_of_js x1367)
                                ~code:(Ojs.int_of_js x1368)))|])
        let (add_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1372 : t) ->
            fun ~event:(x1370 : [ `close ]) ->
              fun ~listener:(x1371 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1372) "addListener"
                     [|((match x1370 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1371 ()))|])
        let (add_listener'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x1377 : t) ->
            fun ~event:(x1373 : [ `data ]) ->
              fun ~listener:(x1374 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1377) "addListener"
                     [|((match x1373 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x1375 : Ojs.t) ->
                            x1374
                              ~chunk:(or_string_of_js Buffer.t_of_js x1375)))|])
        let (add_listener''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x1380 : t) ->
            fun ~event:(x1378 : [ `end_ ]) ->
              fun ~listener:(x1379 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1380) "addListener"
                     [|((match x1378 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x1379 ()))|])
        let (add_listener'''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x1383 : t) ->
            fun ~event:(x1381 : [ `readable ]) ->
              fun ~listener:(x1382 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1383) "addListener"
                     [|((match x1381 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x1382 ()))|])
        let (add_listener''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x1387 : t) ->
            fun ~event:(x1384 : [ `error ]) ->
              fun ~listener:(x1385 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1387) "addListener"
                     [|((match x1384 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1386 :
                                                                    Ojs.t) ->
                                                                    x1385
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x1386)))|])
        let (add_listener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1393 : t) ->
            fun ~event:(x1388 : symbol or_string) ->
              fun ~listener:(x1390 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1393) "addListener"
                     [|(or_string_to_js symbol_to_js x1388);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1391 : _)
                                                                  ->
                                                                  x1390
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1391 0)))|])
        let (emit :
          t -> event:[ `aborted ] -> had_error:bool -> code:int -> bool) =
          fun (x1397 : t) ->
            fun ~event:(x1394 : [ `aborted ]) ->
              fun ~had_error:(x1395 : bool) ->
                fun ~code:(x1396 : int) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x1397) "emit"
                       [|((match x1394 with
                           | `aborted -> Ojs.string_to_js "aborted"));(
                         Ojs.bool_to_js x1395);(Ojs.int_to_js x1396)|])
        let (emit' : t -> event:[ `close ] -> bool) =
          fun (x1399 : t) ->
            fun ~event:(x1398 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1399) "emit"
                   [|((match x1398 with | `close -> Ojs.string_to_js "close"))|])
        let (emit'' :
          t -> event:[ `data ] -> chunk:Buffer.t or_string -> bool) =
          fun (x1403 : t) ->
            fun ~event:(x1400 : [ `data ]) ->
              fun ~chunk:(x1401 : Buffer.t or_string) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1403) "emit"
                     [|((match x1400 with | `data -> Ojs.string_to_js "data"));(
                       or_string_to_js Buffer.t_to_js x1401)|])
        let (emit''' : t -> event:[ `end_ ] -> bool) =
          fun (x1405 : t) ->
            fun ~event:(x1404 : [ `end_ ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1405) "emit"
                   [|((match x1404 with | `end_ -> Ojs.string_to_js "end"))|])
        let (emit'''' : t -> event:[ `readable ] -> bool) =
          fun (x1407 : t) ->
            fun ~event:(x1406 : [ `readable ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1407) "emit"
                   [|((match x1406 with
                       | `readable -> Ojs.string_to_js "readable"))|])
        let (emit''''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x1410 : t) ->
            fun ~event:(x1408 : [ `error ]) ->
              fun ~err:(x1409 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1410) "emit"
                     [|((match x1408 with
                         | `error -> Ojs.string_to_js "error"));(Error.t_to_js
                                                                   x1409)|])
        let (emit'''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x1416 : t) ->
            fun ~event:(x1411 : symbol or_string) ->
              fun ~args:(x1412 : any list) ->
                Ojs.bool_of_js
                  (let x1417 = t_to_js x1416 in
                   Ojs.call (Ojs.get_prop_ascii x1417 "emit") "apply"
                     [|x1417;((let x1413 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1413 "push"
                                    [|(or_string_to_js symbol_to_js x1411)|]);
                               List.iter
                                 (fun (x1414 : any) ->
                                    ignore
                                      (Ojs.call x1413 "push"
                                         [|(any_to_js x1414)|])) x1412;
                               x1413))|])
        let (on :
          t ->
            event:[ `aborted ] ->
              listener:(hadError:bool -> code:int -> unit) -> t)
          =
          fun (x1422 : t) ->
            fun ~event:(x1418 : [ `aborted ]) ->
              fun ~listener:(x1419 : hadError:bool -> code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1422) "on"
                     [|((match x1418 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 2
                         (fun (x1420 : Ojs.t) ->
                            fun (x1421 : Ojs.t) ->
                              x1419 ~hadError:(Ojs.bool_of_js x1420)
                                ~code:(Ojs.int_of_js x1421)))|])
        let (on' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1425 : t) ->
            fun ~event:(x1423 : [ `close ]) ->
              fun ~listener:(x1424 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1425) "on"
                     [|((match x1423 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1424 ()))|])
        let (on'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x1430 : t) ->
            fun ~event:(x1426 : [ `data ]) ->
              fun ~listener:(x1427 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1430) "on"
                     [|((match x1426 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x1428 : Ojs.t) ->
                            x1427
                              ~chunk:(or_string_of_js Buffer.t_of_js x1428)))|])
        let (on''' : t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x1433 : t) ->
            fun ~event:(x1431 : [ `end_ ]) ->
              fun ~listener:(x1432 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1433) "on"
                     [|((match x1431 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x1432 ()))|])
        let (on'''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x1436 : t) ->
            fun ~event:(x1434 : [ `readable ]) ->
              fun ~listener:(x1435 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1436) "on"
                     [|((match x1434 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x1435 ()))|])
        let (on''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x1440 : t) ->
            fun ~event:(x1437 : [ `error ]) ->
              fun ~listener:(x1438 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1440) "on"
                     [|((match x1437 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1439 :
                                                                    Ojs.t) ->
                                                                    x1438
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x1439)))|])
        let (on'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1446 : t) ->
            fun ~event:(x1441 : symbol or_string) ->
              fun ~listener:(x1443 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1446) "on"
                     [|(or_string_to_js symbol_to_js x1441);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1444 : _)
                                                                  ->
                                                                  x1443
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1444 0)))|])
        let (once :
          t ->
            event:[ `aborted ] ->
              listener:(hadError:bool -> code:int -> unit) -> t)
          =
          fun (x1451 : t) ->
            fun ~event:(x1447 : [ `aborted ]) ->
              fun ~listener:(x1448 : hadError:bool -> code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1451) "once"
                     [|((match x1447 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 2
                         (fun (x1449 : Ojs.t) ->
                            fun (x1450 : Ojs.t) ->
                              x1448 ~hadError:(Ojs.bool_of_js x1449)
                                ~code:(Ojs.int_of_js x1450)))|])
        let (once' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1454 : t) ->
            fun ~event:(x1452 : [ `close ]) ->
              fun ~listener:(x1453 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1454) "once"
                     [|((match x1452 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1453 ()))|])
        let (once'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x1459 : t) ->
            fun ~event:(x1455 : [ `data ]) ->
              fun ~listener:(x1456 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1459) "once"
                     [|((match x1455 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x1457 : Ojs.t) ->
                            x1456
                              ~chunk:(or_string_of_js Buffer.t_of_js x1457)))|])
        let (once''' : t -> event:[ `end_ ] -> listener:(unit -> unit) -> t)
          =
          fun (x1462 : t) ->
            fun ~event:(x1460 : [ `end_ ]) ->
              fun ~listener:(x1461 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1462) "once"
                     [|((match x1460 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x1461 ()))|])
        let (once'''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x1465 : t) ->
            fun ~event:(x1463 : [ `readable ]) ->
              fun ~listener:(x1464 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1465) "once"
                     [|((match x1463 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x1464 ()))|])
        let (once''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x1469 : t) ->
            fun ~event:(x1466 : [ `error ]) ->
              fun ~listener:(x1467 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1469) "once"
                     [|((match x1466 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1468 :
                                                                    Ojs.t) ->
                                                                    x1467
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x1468)))|])
        let (once'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1475 : t) ->
            fun ~event:(x1470 : symbol or_string) ->
              fun ~listener:(x1472 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1475) "once"
                     [|(or_string_to_js symbol_to_js x1470);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1473 : _)
                                                                  ->
                                                                  x1472
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1473 0)))|])
        let (prepend_listener :
          t ->
            event:[ `aborted ] ->
              listener:(hadError:bool -> code:int -> unit) -> t)
          =
          fun (x1480 : t) ->
            fun ~event:(x1476 : [ `aborted ]) ->
              fun ~listener:(x1477 : hadError:bool -> code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1480) "prependListener"
                     [|((match x1476 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 2
                         (fun (x1478 : Ojs.t) ->
                            fun (x1479 : Ojs.t) ->
                              x1477 ~hadError:(Ojs.bool_of_js x1478)
                                ~code:(Ojs.int_of_js x1479)))|])
        let (prepend_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1483 : t) ->
            fun ~event:(x1481 : [ `close ]) ->
              fun ~listener:(x1482 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1483) "prependListener"
                     [|((match x1481 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1482 ()))|])
        let (prepend_listener'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x1488 : t) ->
            fun ~event:(x1484 : [ `data ]) ->
              fun ~listener:(x1485 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1488) "prependListener"
                     [|((match x1484 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x1486 : Ojs.t) ->
                            x1485
                              ~chunk:(or_string_of_js Buffer.t_of_js x1486)))|])
        let (prepend_listener''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x1491 : t) ->
            fun ~event:(x1489 : [ `end_ ]) ->
              fun ~listener:(x1490 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1491) "prependListener"
                     [|((match x1489 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x1490 ()))|])
        let (prepend_listener'''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x1494 : t) ->
            fun ~event:(x1492 : [ `readable ]) ->
              fun ~listener:(x1493 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1494) "prependListener"
                     [|((match x1492 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x1493 ()))|])
        let (prepend_listener''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x1498 : t) ->
            fun ~event:(x1495 : [ `error ]) ->
              fun ~listener:(x1496 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1498) "prependListener"
                     [|((match x1495 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1497 :
                                                                    Ojs.t) ->
                                                                    x1496
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x1497)))|])
        let (prepend_listener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1504 : t) ->
            fun ~event:(x1499 : symbol or_string) ->
              fun ~listener:(x1501 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1504) "prependListener"
                     [|(or_string_to_js symbol_to_js x1499);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1502 : _)
                                                                  ->
                                                                  x1501
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1502 0)))|])
        let (prepend_once_listener :
          t ->
            event:[ `aborted ] ->
              listener:(hadError:bool -> code:int -> unit) -> t)
          =
          fun (x1509 : t) ->
            fun ~event:(x1505 : [ `aborted ]) ->
              fun ~listener:(x1506 : hadError:bool -> code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1509) "prependOnceListener"
                     [|((match x1505 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 2
                         (fun (x1507 : Ojs.t) ->
                            fun (x1508 : Ojs.t) ->
                              x1506 ~hadError:(Ojs.bool_of_js x1507)
                                ~code:(Ojs.int_of_js x1508)))|])
        let (prepend_once_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1512 : t) ->
            fun ~event:(x1510 : [ `close ]) ->
              fun ~listener:(x1511 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1512) "prependOnceListener"
                     [|((match x1510 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1511 ()))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x1517 : t) ->
            fun ~event:(x1513 : [ `data ]) ->
              fun ~listener:(x1514 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1517) "prependOnceListener"
                     [|((match x1513 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x1515 : Ojs.t) ->
                            x1514
                              ~chunk:(or_string_of_js Buffer.t_of_js x1515)))|])
        let (prepend_once_listener''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x1520 : t) ->
            fun ~event:(x1518 : [ `end_ ]) ->
              fun ~listener:(x1519 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1520) "prependOnceListener"
                     [|((match x1518 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x1519 ()))|])
        let (prepend_once_listener'''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x1523 : t) ->
            fun ~event:(x1521 : [ `readable ]) ->
              fun ~listener:(x1522 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1523) "prependOnceListener"
                     [|((match x1521 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x1522 ()))|])
        let (prepend_once_listener''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x1527 : t) ->
            fun ~event:(x1524 : [ `error ]) ->
              fun ~listener:(x1525 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1527) "prependOnceListener"
                     [|((match x1524 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1526 :
                                                                    Ojs.t) ->
                                                                    x1525
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x1526)))|])
        let (prepend_once_listener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1533 : t) ->
            fun ~event:(x1528 : symbol or_string) ->
              fun ~listener:(x1530 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1533) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x1528);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1531 : _)
                                                                  ->
                                                                  x1530
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1531 0)))|])
        let (cast : t -> Stream.Readable.t) =
          fun (x1534 : t) -> Stream.Readable.t_of_js (t_to_js x1534)
      end
    module Http2ServerResponse =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1536 : Ojs.t) -> x1536
        and t_to_js : t -> Ojs.t = fun (x1535 : Ojs.t) -> x1535
        let (create : stream:ServerHttp2Stream.t -> t) =
          fun ~stream:(x1537 : ServerHttp2Stream.t) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii Import.http2 "Http2ServerResponse")
                 [|(ServerHttp2Stream.t_to_js x1537)|])
        let (get_connection : t -> (Net.Socket.t, Tls.TLSSocket.t) union2) =
          fun (x1538 : t) ->
            union2_of_js Net.Socket.t_of_js Tls.TLSSocket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1538) "connection")
        let (get_finished : t -> bool) =
          fun (x1541 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1541) "finished")
        let (get_headers_sent : t -> bool) =
          fun (x1542 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1542) "headersSent")
        let (get_socket : t -> (Net.Socket.t, Tls.TLSSocket.t) union2) =
          fun (x1543 : t) ->
            union2_of_js Net.Socket.t_of_js Tls.TLSSocket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1543) "socket")
        let (get_stream : t -> ServerHttp2Stream.t) =
          fun (x1546 : t) ->
            ServerHttp2Stream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1546) "stream")
        let (get_send_date : t -> bool) =
          fun (x1547 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1547) "sendDate")
        let (set_send_date : t -> bool -> unit) =
          fun (x1548 : t) ->
            fun (x1549 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1548) "sendDate"
                (Ojs.bool_to_js x1549)
        let (get_status_code : t -> int) =
          fun (x1550 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1550) "statusCode")
        let (set_status_code : t -> int -> unit) =
          fun (x1551 : t) ->
            fun (x1552 : int) ->
              Ojs.set_prop_ascii (t_to_js x1551) "statusCode"
                (Ojs.int_to_js x1552)
        let (get_status_message : t -> [ `L_s0 ]) =
          fun (x1553 : t) ->
            let x1554 = Ojs.get_prop_ascii (t_to_js x1553) "statusMessage" in
            match Ojs.string_of_js x1554 with
            | "" -> `L_s0
            | _ -> assert false
        let (set_status_message : t -> [ `L_s0 ] -> unit) =
          fun (x1555 : t) ->
            fun (x1556 : [ `L_s0 ]) ->
              Ojs.set_prop_ascii (t_to_js x1555) "statusMessage"
                (match x1556 with | `L_s0 -> Ojs.string_to_js "LS0")
        let (add_trailers :
          t -> trailers:Node_http.Http.OutgoingHttpHeaders.t -> unit) =
          fun (x1558 : t) ->
            fun ~trailers:(x1557 : Node_http.Http.OutgoingHttpHeaders.t) ->
              ignore
                (Ojs.call (t_to_js x1558) "addTrailers"
                   [|(Node_http.Http.OutgoingHttpHeaders.t_to_js x1557)|])
        let (end_ : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x1562 : t) ->
            fun ?callback:(x1559 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x1563 = t_to_js x1562 in
                   Ojs.call (Ojs.get_prop_ascii x1563 "end") "apply"
                     [|x1563;((let x1560 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x1559 with
                                | Some x1561 ->
                                    ignore
                                      (Ojs.call x1560 "push"
                                         [|(Ojs.fun_to_js 1
                                              (fun _ -> x1561 ()))|])
                                | None -> ());
                               x1560))|])
        let (end_' :
          t ->
            data:Uint8Array.t or_string ->
              ?callback:(unit -> unit) -> unit -> unit)
          =
          fun (x1569 : t) ->
            fun ~data:(x1564 : Uint8Array.t or_string) ->
              fun ?callback:(x1565 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x1570 = t_to_js x1569 in
                     Ojs.call (Ojs.get_prop_ascii x1570 "end") "apply"
                       [|x1570;((let x1566 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1566 "push"
                                      [|(or_string_to_js Uint8Array.t_to_js
                                           x1564)|]);
                                 (match x1565 with
                                  | Some x1567 ->
                                      ignore
                                        (Ojs.call x1566 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x1567 ()))|])
                                  | None -> ());
                                 x1566))|])
        let (end_'' :
          t ->
            data:Uint8Array.t or_string ->
              encoding:BufferEncoding.t ->
                ?callback:(unit -> unit) -> unit -> unit)
          =
          fun (x1577 : t) ->
            fun ~data:(x1571 : Uint8Array.t or_string) ->
              fun ~encoding:(x1572 : BufferEncoding.t) ->
                fun ?callback:(x1573 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x1578 = t_to_js x1577 in
                       Ojs.call (Ojs.get_prop_ascii x1578 "end") "apply"
                         [|x1578;((let x1574 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1574 "push"
                                        [|(or_string_to_js Uint8Array.t_to_js
                                             x1571)|]);
                                   ignore
                                     (Ojs.call x1574 "push"
                                        [|(BufferEncoding.t_to_js x1572)|]);
                                   (match x1573 with
                                    | Some x1575 ->
                                        ignore
                                          (Ojs.call x1574 "push"
                                             [|(Ojs.fun_to_js 1
                                                  (fun _ -> x1575 ()))|])
                                    | None -> ());
                                   x1574))|])
        let (get_header : t -> name:string -> string) =
          fun (x1580 : t) ->
            fun ~name:(x1579 : string) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x1580) "getHeader"
                   [|(Ojs.string_to_js x1579)|])
        let (get_header_names : t -> string list) =
          fun (x1581 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x1581) "getHeaderNames" [||])
        let (get_headers : t -> Node_http.Http.OutgoingHttpHeaders.t) =
          fun (x1583 : t) ->
            Node_http.Http.OutgoingHttpHeaders.t_of_js
              (Ojs.call (t_to_js x1583) "getHeaders" [||])
        let (has_header : t -> name:string -> bool) =
          fun (x1585 : t) ->
            fun ~name:(x1584 : string) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1585) "hasHeader"
                   [|(Ojs.string_to_js x1584)|])
        let (remove_header : t -> name:string -> unit) =
          fun (x1587 : t) ->
            fun ~name:(x1586 : string) ->
              ignore
                (Ojs.call (t_to_js x1587) "removeHeader"
                   [|(Ojs.string_to_js x1586)|])
        let (set_header :
          t -> name:string -> value:string list or_string or_number -> unit)
          =
          fun (x1593 : t) ->
            fun ~name:(x1588 : string) ->
              fun ~value:(x1589 : string list or_string or_number) ->
                ignore
                  (Ojs.call (t_to_js x1593) "setHeader"
                     [|(Ojs.string_to_js x1588);(or_number_to_js
                                                   (fun
                                                      (x1590 :
                                                        string list or_string)
                                                      ->
                                                      or_string_to_js
                                                        (fun
                                                           (x1591 :
                                                             string list)
                                                           ->
                                                           Ojs.list_to_js
                                                             Ojs.string_to_js
                                                             x1591) x1590)
                                                   x1589)|])
        let (set_timeout :
          t -> msecs:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x1598 : t) ->
            fun ~msecs:(x1594 : int) ->
              fun ?callback:(x1595 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x1599 = t_to_js x1598 in
                     Ojs.call (Ojs.get_prop_ascii x1599 "setTimeout") "apply"
                       [|x1599;((let x1596 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1596 "push"
                                      [|(Ojs.int_to_js x1594)|]);
                                 (match x1595 with
                                  | Some x1597 ->
                                      ignore
                                        (Ojs.call x1596 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x1597 ()))|])
                                  | None -> ());
                                 x1596))|])
        let (write :
          t ->
            chunk:Uint8Array.t or_string ->
              ?callback:(err:Error.t -> unit) -> unit -> bool)
          =
          fun (x1606 : t) ->
            fun ~chunk:(x1600 : Uint8Array.t or_string) ->
              fun ?callback:(x1601 : (err:Error.t -> unit) option) ->
                fun () ->
                  Ojs.bool_of_js
                    (let x1607 = t_to_js x1606 in
                     Ojs.call (Ojs.get_prop_ascii x1607 "write") "apply"
                       [|x1607;((let x1602 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1602 "push"
                                      [|(or_string_to_js Uint8Array.t_to_js
                                           x1600)|]);
                                 (match x1601 with
                                  | Some x1603 ->
                                      ignore
                                        (Ojs.call x1602 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun (x1604 : Ojs.t) ->
                                                   x1603
                                                     ~err:(Error.t_of_js
                                                             x1604)))|])
                                  | None -> ());
                                 x1602))|])
        let (write' :
          t ->
            chunk:Uint8Array.t or_string ->
              encoding:BufferEncoding.t ->
                ?callback:(err:Error.t -> unit) -> unit -> bool)
          =
          fun (x1615 : t) ->
            fun ~chunk:(x1608 : Uint8Array.t or_string) ->
              fun ~encoding:(x1609 : BufferEncoding.t) ->
                fun ?callback:(x1610 : (err:Error.t -> unit) option) ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x1616 = t_to_js x1615 in
                       Ojs.call (Ojs.get_prop_ascii x1616 "write") "apply"
                         [|x1616;((let x1611 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1611 "push"
                                        [|(or_string_to_js Uint8Array.t_to_js
                                             x1608)|]);
                                   ignore
                                     (Ojs.call x1611 "push"
                                        [|(BufferEncoding.t_to_js x1609)|]);
                                   (match x1610 with
                                    | Some x1612 ->
                                        ignore
                                          (Ojs.call x1611 "push"
                                             [|(Ojs.fun_to_js 1
                                                  (fun (x1613 : Ojs.t) ->
                                                     x1612
                                                       ~err:(Error.t_of_js
                                                               x1613)))|])
                                    | None -> ());
                                   x1611))|])
        let (write_continue : t -> unit) =
          fun (x1617 : t) ->
            ignore (Ojs.call (t_to_js x1617) "writeContinue" [||])
        let (write_head :
          t ->
            status_code:int ->
              ?headers:Node_http.Http.OutgoingHttpHeaders.t -> unit -> t)
          =
          fun (x1622 : t) ->
            fun ~status_code:(x1618 : int) ->
              fun
                ?headers:(x1619 :
                           Node_http.Http.OutgoingHttpHeaders.t option)
                ->
                fun () ->
                  t_of_js
                    (let x1623 = t_to_js x1622 in
                     Ojs.call (Ojs.get_prop_ascii x1623 "writeHead") "apply"
                       [|x1623;((let x1620 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1620 "push"
                                      [|(Ojs.int_to_js x1618)|]);
                                 (match x1619 with
                                  | Some x1621 ->
                                      ignore
                                        (Ojs.call x1620 "push"
                                           [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                                x1621)|])
                                  | None -> ());
                                 x1620))|])
        let (write_head' :
          t ->
            status_code:int ->
              status_message:string ->
                ?headers:Node_http.Http.OutgoingHttpHeaders.t -> unit -> t)
          =
          fun (x1629 : t) ->
            fun ~status_code:(x1624 : int) ->
              fun ~status_message:(x1625 : string) ->
                fun
                  ?headers:(x1626 :
                             Node_http.Http.OutgoingHttpHeaders.t option)
                  ->
                  fun () ->
                    t_of_js
                      (let x1630 = t_to_js x1629 in
                       Ojs.call (Ojs.get_prop_ascii x1630 "writeHead")
                         "apply"
                         [|x1630;((let x1627 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1627 "push"
                                        [|(Ojs.int_to_js x1624)|]);
                                   ignore
                                     (Ojs.call x1627 "push"
                                        [|(Ojs.string_to_js x1625)|]);
                                   (match x1626 with
                                    | Some x1628 ->
                                        ignore
                                          (Ojs.call x1627 "push"
                                             [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                                  x1628)|])
                                    | None -> ());
                                   x1627))|])
        let (create_push_response :
          t ->
            headers:Node_http.Http.OutgoingHttpHeaders.t ->
              callback:(err:Error.t or_null -> res:t -> unit) -> unit)
          =
          fun (x1636 : t) ->
            fun ~headers:(x1631 : Node_http.Http.OutgoingHttpHeaders.t) ->
              fun ~callback:(x1632 : err:Error.t or_null -> res:t -> unit) ->
                ignore
                  (Ojs.call (t_to_js x1636) "createPushResponse"
                     [|(Node_http.Http.OutgoingHttpHeaders.t_to_js x1631);(
                       Ojs.fun_to_js 2
                         (fun (x1633 : Ojs.t) ->
                            fun (x1635 : Ojs.t) ->
                              x1632 ~err:(or_null_of_js Error.t_of_js x1633)
                                ~res:(t_of_js x1635)))|])
        let (add_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1639 : t) ->
            fun ~event:(x1637 : [ `close ]) ->
              fun ~listener:(x1638 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1639) "addListener"
                     [|((match x1637 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1638 ()))|])
        let (add_listener' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x1642 : t) ->
            fun ~event:(x1640 : [ `drain ]) ->
              fun ~listener:(x1641 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1642) "addListener"
                     [|((match x1640 with
                         | `drain -> Ojs.string_to_js "drain"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1641 ()))|])
        let (add_listener'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x1646 : t) ->
            fun ~event:(x1643 : [ `error ]) ->
              fun ~listener:(x1644 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1646) "addListener"
                     [|((match x1643 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1645 :
                                                                    Ojs.t) ->
                                                                    x1644
                                                                    ~error:(
                                                                    Error.t_of_js
                                                                    x1645)))|])
        let (add_listener''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x1649 : t) ->
            fun ~event:(x1647 : [ `finish ]) ->
              fun ~listener:(x1648 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1649) "addListener"
                     [|((match x1647 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x1648 ()))|])
        let (add_listener'''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1653 : t) ->
            fun ~event:(x1650 : [ `pipe ]) ->
              fun ~listener:(x1651 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1653) "addListener"
                     [|((match x1650 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x1652 : Ojs.t) ->
                            x1651 ~src:(Stream.Readable.t_of_js x1652)))|])
        let (add_listener''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1657 : t) ->
            fun ~event:(x1654 : [ `unpipe ]) ->
              fun ~listener:(x1655 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1657) "addListener"
                     [|((match x1654 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1656 :
                                                                    Ojs.t) ->
                                                                    x1655
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x1656)))|])
        let (add_listener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1663 : t) ->
            fun ~event:(x1658 : symbol or_string) ->
              fun ~listener:(x1660 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1663) "addListener"
                     [|(or_string_to_js symbol_to_js x1658);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1661 : _)
                                                                  ->
                                                                  x1660
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1661 0)))|])
        let (emit : t -> event:[ `close ] -> bool) =
          fun (x1665 : t) ->
            fun ~event:(x1664 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1665) "emit"
                   [|((match x1664 with | `close -> Ojs.string_to_js "close"))|])
        let (emit' : t -> event:[ `drain ] -> bool) =
          fun (x1667 : t) ->
            fun ~event:(x1666 : [ `drain ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1667) "emit"
                   [|((match x1666 with | `drain -> Ojs.string_to_js "drain"))|])
        let (emit'' : t -> event:[ `error ] -> error:Error.t -> bool) =
          fun (x1670 : t) ->
            fun ~event:(x1668 : [ `error ]) ->
              fun ~error:(x1669 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1670) "emit"
                     [|((match x1668 with
                         | `error -> Ojs.string_to_js "error"));(Error.t_to_js
                                                                   x1669)|])
        let (emit''' : t -> event:[ `finish ] -> bool) =
          fun (x1672 : t) ->
            fun ~event:(x1671 : [ `finish ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1672) "emit"
                   [|((match x1671 with
                       | `finish -> Ojs.string_to_js "finish"))|])
        let (emit'''' :
          t -> event:[ `pipe ] -> src:Stream.Readable.t -> bool) =
          fun (x1675 : t) ->
            fun ~event:(x1673 : [ `pipe ]) ->
              fun ~src:(x1674 : Stream.Readable.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1675) "emit"
                     [|((match x1673 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Stream.Readable.t_to_js x1674)|])
        let (emit''''' :
          t -> event:[ `unpipe ] -> src:Stream.Readable.t -> bool) =
          fun (x1678 : t) ->
            fun ~event:(x1676 : [ `unpipe ]) ->
              fun ~src:(x1677 : Stream.Readable.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1678) "emit"
                     [|((match x1676 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Stream.Readable.t_to_js
                                                                    x1677)|])
        let (emit'''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x1684 : t) ->
            fun ~event:(x1679 : symbol or_string) ->
              fun ~args:(x1680 : any list) ->
                Ojs.bool_of_js
                  (let x1685 = t_to_js x1684 in
                   Ojs.call (Ojs.get_prop_ascii x1685 "emit") "apply"
                     [|x1685;((let x1681 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1681 "push"
                                    [|(or_string_to_js symbol_to_js x1679)|]);
                               List.iter
                                 (fun (x1682 : any) ->
                                    ignore
                                      (Ojs.call x1681 "push"
                                         [|(any_to_js x1682)|])) x1680;
                               x1681))|])
        let (on : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1688 : t) ->
            fun ~event:(x1686 : [ `close ]) ->
              fun ~listener:(x1687 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1688) "on"
                     [|((match x1686 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1687 ()))|])
        let (on' : t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x1691 : t) ->
            fun ~event:(x1689 : [ `drain ]) ->
              fun ~listener:(x1690 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1691) "on"
                     [|((match x1689 with
                         | `drain -> Ojs.string_to_js "drain"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1690 ()))|])
        let (on'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x1695 : t) ->
            fun ~event:(x1692 : [ `error ]) ->
              fun ~listener:(x1693 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1695) "on"
                     [|((match x1692 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1694 :
                                                                    Ojs.t) ->
                                                                    x1693
                                                                    ~error:(
                                                                    Error.t_of_js
                                                                    x1694)))|])
        let (on''' : t -> event:[ `finish ] -> listener:(unit -> unit) -> t)
          =
          fun (x1698 : t) ->
            fun ~event:(x1696 : [ `finish ]) ->
              fun ~listener:(x1697 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1698) "on"
                     [|((match x1696 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x1697 ()))|])
        let (on'''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1702 : t) ->
            fun ~event:(x1699 : [ `pipe ]) ->
              fun ~listener:(x1700 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1702) "on"
                     [|((match x1699 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x1701 : Ojs.t) ->
                            x1700 ~src:(Stream.Readable.t_of_js x1701)))|])
        let (on''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1706 : t) ->
            fun ~event:(x1703 : [ `unpipe ]) ->
              fun ~listener:(x1704 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1706) "on"
                     [|((match x1703 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1705 :
                                                                    Ojs.t) ->
                                                                    x1704
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x1705)))|])
        let (on'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1712 : t) ->
            fun ~event:(x1707 : symbol or_string) ->
              fun ~listener:(x1709 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1712) "on"
                     [|(or_string_to_js symbol_to_js x1707);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1710 : _)
                                                                  ->
                                                                  x1709
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1710 0)))|])
        let (once : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1715 : t) ->
            fun ~event:(x1713 : [ `close ]) ->
              fun ~listener:(x1714 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1715) "once"
                     [|((match x1713 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1714 ()))|])
        let (once' : t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x1718 : t) ->
            fun ~event:(x1716 : [ `drain ]) ->
              fun ~listener:(x1717 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1718) "once"
                     [|((match x1716 with
                         | `drain -> Ojs.string_to_js "drain"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1717 ()))|])
        let (once'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x1722 : t) ->
            fun ~event:(x1719 : [ `error ]) ->
              fun ~listener:(x1720 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1722) "once"
                     [|((match x1719 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1721 :
                                                                    Ojs.t) ->
                                                                    x1720
                                                                    ~error:(
                                                                    Error.t_of_js
                                                                    x1721)))|])
        let (once''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x1725 : t) ->
            fun ~event:(x1723 : [ `finish ]) ->
              fun ~listener:(x1724 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1725) "once"
                     [|((match x1723 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x1724 ()))|])
        let (once'''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1729 : t) ->
            fun ~event:(x1726 : [ `pipe ]) ->
              fun ~listener:(x1727 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1729) "once"
                     [|((match x1726 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x1728 : Ojs.t) ->
                            x1727 ~src:(Stream.Readable.t_of_js x1728)))|])
        let (once''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1733 : t) ->
            fun ~event:(x1730 : [ `unpipe ]) ->
              fun ~listener:(x1731 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1733) "once"
                     [|((match x1730 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1732 :
                                                                    Ojs.t) ->
                                                                    x1731
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x1732)))|])
        let (once'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1739 : t) ->
            fun ~event:(x1734 : symbol or_string) ->
              fun ~listener:(x1736 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1739) "once"
                     [|(or_string_to_js symbol_to_js x1734);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1737 : _)
                                                                  ->
                                                                  x1736
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1737 0)))|])
        let (prepend_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1742 : t) ->
            fun ~event:(x1740 : [ `close ]) ->
              fun ~listener:(x1741 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1742) "prependListener"
                     [|((match x1740 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1741 ()))|])
        let (prepend_listener' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x1745 : t) ->
            fun ~event:(x1743 : [ `drain ]) ->
              fun ~listener:(x1744 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1745) "prependListener"
                     [|((match x1743 with
                         | `drain -> Ojs.string_to_js "drain"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1744 ()))|])
        let (prepend_listener'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x1749 : t) ->
            fun ~event:(x1746 : [ `error ]) ->
              fun ~listener:(x1747 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1749) "prependListener"
                     [|((match x1746 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1748 :
                                                                    Ojs.t) ->
                                                                    x1747
                                                                    ~error:(
                                                                    Error.t_of_js
                                                                    x1748)))|])
        let (prepend_listener''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x1752 : t) ->
            fun ~event:(x1750 : [ `finish ]) ->
              fun ~listener:(x1751 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1752) "prependListener"
                     [|((match x1750 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x1751 ()))|])
        let (prepend_listener'''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1756 : t) ->
            fun ~event:(x1753 : [ `pipe ]) ->
              fun ~listener:(x1754 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1756) "prependListener"
                     [|((match x1753 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x1755 : Ojs.t) ->
                            x1754 ~src:(Stream.Readable.t_of_js x1755)))|])
        let (prepend_listener''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1760 : t) ->
            fun ~event:(x1757 : [ `unpipe ]) ->
              fun ~listener:(x1758 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1760) "prependListener"
                     [|((match x1757 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1759 :
                                                                    Ojs.t) ->
                                                                    x1758
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x1759)))|])
        let (prepend_listener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1766 : t) ->
            fun ~event:(x1761 : symbol or_string) ->
              fun ~listener:(x1763 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1766) "prependListener"
                     [|(or_string_to_js symbol_to_js x1761);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1764 : _)
                                                                  ->
                                                                  x1763
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1764 0)))|])
        let (prepend_once_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1769 : t) ->
            fun ~event:(x1767 : [ `close ]) ->
              fun ~listener:(x1768 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1769) "prependOnceListener"
                     [|((match x1767 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1768 ()))|])
        let (prepend_once_listener' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x1772 : t) ->
            fun ~event:(x1770 : [ `drain ]) ->
              fun ~listener:(x1771 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1772) "prependOnceListener"
                     [|((match x1770 with
                         | `drain -> Ojs.string_to_js "drain"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1771 ()))|])
        let (prepend_once_listener'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x1776 : t) ->
            fun ~event:(x1773 : [ `error ]) ->
              fun ~listener:(x1774 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1776) "prependOnceListener"
                     [|((match x1773 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1775 :
                                                                    Ojs.t) ->
                                                                    x1774
                                                                    ~error:(
                                                                    Error.t_of_js
                                                                    x1775)))|])
        let (prepend_once_listener''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x1779 : t) ->
            fun ~event:(x1777 : [ `finish ]) ->
              fun ~listener:(x1778 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1779) "prependOnceListener"
                     [|((match x1777 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x1778 ()))|])
        let (prepend_once_listener'''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1783 : t) ->
            fun ~event:(x1780 : [ `pipe ]) ->
              fun ~listener:(x1781 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1783) "prependOnceListener"
                     [|((match x1780 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x1782 : Ojs.t) ->
                            x1781 ~src:(Stream.Readable.t_of_js x1782)))|])
        let (prepend_once_listener''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x1787 : t) ->
            fun ~event:(x1784 : [ `unpipe ]) ->
              fun ~listener:(x1785 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1787) "prependOnceListener"
                     [|((match x1784 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1786 :
                                                                    Ojs.t) ->
                                                                    x1785
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x1786)))|])
        let (prepend_once_listener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1793 : t) ->
            fun ~event:(x1788 : symbol or_string) ->
              fun ~listener:(x1790 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1793) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x1788);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1791 : _)
                                                                  ->
                                                                  x1790
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1791 0)))|])
        let (cast : t -> Stream.Writable.t) =
          fun (x1794 : t) -> Stream.Writable.t_of_js (t_to_js x1794)
      end
    module ServerHttp2Session =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1796 : Ojs.t) -> x1796
        and t_to_js : t -> Ojs.t = fun (x1795 : Ojs.t) -> x1795
        let (altsvc :
          t ->
            alt:string ->
              origin_or_stream:(AlternativeServiceOptions.t, Url.URL.t)
                union2 or_string or_number -> unit)
          =
          fun (x1803 : t) ->
            fun ~alt:(x1797 : string) ->
              fun
                ~origin_or_stream:(x1798 :
                                    (AlternativeServiceOptions.t, Url.URL.t)
                                      union2 or_string or_number)
                ->
                ignore
                  (Ojs.call (t_to_js x1803) "altsvc"
                     [|(Ojs.string_to_js x1797);(or_number_to_js
                                                   (fun
                                                      (x1799 :
                                                        (AlternativeServiceOptions.t,
                                                          Url.URL.t) union2
                                                          or_string)
                                                      ->
                                                      or_string_to_js
                                                        (fun
                                                           (x1800 :
                                                             (AlternativeServiceOptions.t,
                                                               Url.URL.t)
                                                               union2)
                                                           ->
                                                           union2_to_js
                                                             AlternativeServiceOptions.t_to_js
                                                             Url.URL.t_to_js
                                                             x1800) x1799)
                                                   x1798)|])
        let (origin : t -> args:any list -> unit) =
          fun (x1807 : t) ->
            fun ~args:(x1804 : any list) ->
              ignore
                (let x1808 = t_to_js x1807 in
                 Ojs.call (Ojs.get_prop_ascii x1808 "origin") "apply"
                   [|x1808;((let x1805 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             List.iter
                               (fun (x1806 : any) ->
                                  ignore
                                    (Ojs.call x1805 "push"
                                       [|(any_to_js x1806)|])) x1804;
                             x1805))|])
        let (add_listener :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1815 : t) ->
            fun ~event:(x1809 : [ `connect ]) ->
              fun
                ~listener:(x1810 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1815) "addListener"
                     [|((match x1809 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1811 : Ojs.t) ->
                            fun (x1812 : Ojs.t) ->
                              x1810 ~session:(t_of_js x1811)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1812)))|])
        let (add_listener' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x1821 : t) ->
            fun ~event:(x1816 : [ `stream ]) ->
              fun
                ~listener:(x1817 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1821) "addListener"
                     [|((match x1816 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1818 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1819 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1820 :
                                                                    Ojs.t) ->
                                                                    x1817
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x1818)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x1819)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1820)))|])
        let (add_listener'' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1827 : t) ->
            fun ~event:(x1822 : symbol or_string) ->
              fun ~listener:(x1824 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1827) "addListener"
                     [|(or_string_to_js symbol_to_js x1822);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1825 : _)
                                                                  ->
                                                                  x1824
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1825 0)))|])
        let (emit :
          t ->
            event:[ `connect ] ->
              session:t ->
                socket:(Net.Socket.t, Tls.TLSSocket.t) union2 -> bool)
          =
          fun (x1833 : t) ->
            fun ~event:(x1828 : [ `connect ]) ->
              fun ~session:(x1829 : t) ->
                fun ~socket:(x1830 : (Net.Socket.t, Tls.TLSSocket.t) union2)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x1833) "emit"
                       [|((match x1828 with
                           | `connect -> Ojs.string_to_js "connect"));(
                         t_to_js x1829);(union2_to_js Net.Socket.t_to_js
                                           Tls.TLSSocket.t_to_js x1830)|])
        let (emit' :
          t ->
            event:[ `stream ] ->
              stream:ServerHttp2Stream.t ->
                headers:IncomingHttpHeaders.t -> flags:int -> bool)
          =
          fun (x1838 : t) ->
            fun ~event:(x1834 : [ `stream ]) ->
              fun ~stream:(x1835 : ServerHttp2Stream.t) ->
                fun ~headers:(x1836 : IncomingHttpHeaders.t) ->
                  fun ~flags:(x1837 : int) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x1838) "emit"
                         [|((match x1834 with
                             | `stream -> Ojs.string_to_js "stream"));(
                           ServerHttp2Stream.t_to_js x1835);(IncomingHttpHeaders.t_to_js
                                                               x1836);(
                           Ojs.int_to_js x1837)|])
        let (emit'' : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x1844 : t) ->
            fun ~event:(x1839 : symbol or_string) ->
              fun ~args:(x1840 : any list) ->
                Ojs.bool_of_js
                  (let x1845 = t_to_js x1844 in
                   Ojs.call (Ojs.get_prop_ascii x1845 "emit") "apply"
                     [|x1845;((let x1841 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1841 "push"
                                    [|(or_string_to_js symbol_to_js x1839)|]);
                               List.iter
                                 (fun (x1842 : any) ->
                                    ignore
                                      (Ojs.call x1841 "push"
                                         [|(any_to_js x1842)|])) x1840;
                               x1841))|])
        let (on :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1852 : t) ->
            fun ~event:(x1846 : [ `connect ]) ->
              fun
                ~listener:(x1847 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1852) "on"
                     [|((match x1846 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1848 : Ojs.t) ->
                            fun (x1849 : Ojs.t) ->
                              x1847 ~session:(t_of_js x1848)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1849)))|])
        let (on' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x1858 : t) ->
            fun ~event:(x1853 : [ `stream ]) ->
              fun
                ~listener:(x1854 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1858) "on"
                     [|((match x1853 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1855 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1856 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1857 :
                                                                    Ojs.t) ->
                                                                    x1854
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x1855)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x1856)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1857)))|])
        let (on'' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1864 : t) ->
            fun ~event:(x1859 : symbol or_string) ->
              fun ~listener:(x1861 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1864) "on"
                     [|(or_string_to_js symbol_to_js x1859);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1862 : _)
                                                                  ->
                                                                  x1861
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1862 0)))|])
        let (once :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1871 : t) ->
            fun ~event:(x1865 : [ `connect ]) ->
              fun
                ~listener:(x1866 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1871) "once"
                     [|((match x1865 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1867 : Ojs.t) ->
                            fun (x1868 : Ojs.t) ->
                              x1866 ~session:(t_of_js x1867)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1868)))|])
        let (once' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x1877 : t) ->
            fun ~event:(x1872 : [ `stream ]) ->
              fun
                ~listener:(x1873 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1877) "once"
                     [|((match x1872 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1874 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1875 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1876 :
                                                                    Ojs.t) ->
                                                                    x1873
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x1874)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x1875)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1876)))|])
        let (once'' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1883 : t) ->
            fun ~event:(x1878 : symbol or_string) ->
              fun ~listener:(x1880 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1883) "once"
                     [|(or_string_to_js symbol_to_js x1878);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1881 : _)
                                                                  ->
                                                                  x1880
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1881 0)))|])
        let (prepend_listener :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1890 : t) ->
            fun ~event:(x1884 : [ `connect ]) ->
              fun
                ~listener:(x1885 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1890) "prependListener"
                     [|((match x1884 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1886 : Ojs.t) ->
                            fun (x1887 : Ojs.t) ->
                              x1885 ~session:(t_of_js x1886)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1887)))|])
        let (prepend_listener' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x1896 : t) ->
            fun ~event:(x1891 : [ `stream ]) ->
              fun
                ~listener:(x1892 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1896) "prependListener"
                     [|((match x1891 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1893 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1894 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1895 :
                                                                    Ojs.t) ->
                                                                    x1892
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x1893)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x1894)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1895)))|])
        let (prepend_listener'' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1902 : t) ->
            fun ~event:(x1897 : symbol or_string) ->
              fun ~listener:(x1899 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1902) "prependListener"
                     [|(or_string_to_js symbol_to_js x1897);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1900 : _)
                                                                  ->
                                                                  x1899
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1900 0)))|])
        let (prepend_once_listener :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1909 : t) ->
            fun ~event:(x1903 : [ `connect ]) ->
              fun
                ~listener:(x1904 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1909) "prependOnceListener"
                     [|((match x1903 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1905 : Ojs.t) ->
                            fun (x1906 : Ojs.t) ->
                              x1904 ~session:(t_of_js x1905)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1906)))|])
        let (prepend_once_listener' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x1915 : t) ->
            fun ~event:(x1910 : [ `stream ]) ->
              fun
                ~listener:(x1911 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1915) "prependOnceListener"
                     [|((match x1910 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1912 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1913 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1914 :
                                                                    Ojs.t) ->
                                                                    x1911
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x1912)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x1913)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1914)))|])
        let (prepend_once_listener'' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1921 : t) ->
            fun ~event:(x1916 : symbol or_string) ->
              fun ~listener:(x1918 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1921) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x1916);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1919 : _)
                                                                  ->
                                                                  x1918
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1919 0)))|])
        let (cast : t -> Http2Session.t) =
          fun (x1922 : t) -> Http2Session.t_of_js (t_to_js x1922)
      end
    module Http2Server =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1924 : Ojs.t) -> x1924
        and t_to_js : t -> Ojs.t = fun (x1923 : Ojs.t) -> x1923
        let (add_listener :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x1929 : t) ->
            fun ~event:(x1925 : [ `checkContinue ]) ->
              fun
                ~listener:(x1926 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1929) "addListener"
                     [|((match x1925 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1927 : Ojs.t) ->
                            fun (x1928 : Ojs.t) ->
                              x1926
                                ~request:(Http2ServerRequest.t_of_js x1927)
                                ~response:(Http2ServerResponse.t_of_js x1928)))|])
        let (add_listener' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x1934 : t) ->
            fun ~event:(x1930 : [ `request ]) ->
              fun
                ~listener:(x1931 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1934) "addListener"
                     [|((match x1930 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1932 : Ojs.t) ->
                            fun (x1933 : Ojs.t) ->
                              x1931
                                ~request:(Http2ServerRequest.t_of_js x1932)
                                ~response:(Http2ServerResponse.t_of_js x1933)))|])
        let (add_listener'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x1938 : t) ->
            fun ~event:(x1935 : [ `session ]) ->
              fun ~listener:(x1936 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1938) "addListener"
                     [|((match x1935 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1937 : Ojs.t) ->
                            x1936 ~session:(ServerHttp2Session.t_of_js x1937)))|])
        let (add_listener''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x1942 : t) ->
            fun ~event:(x1939 : [ `sessionError ]) ->
              fun ~listener:(x1940 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1942) "addListener"
                     [|((match x1939 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x1941 : Ojs.t) ->
                            x1940 ~err:(Error.t_of_js x1941)))|])
        let (add_listener'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x1948 : t) ->
            fun ~event:(x1943 : [ `stream ]) ->
              fun
                ~listener:(x1944 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1948) "addListener"
                     [|((match x1943 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1945 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1946 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1947 :
                                                                    Ojs.t) ->
                                                                    x1944
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x1945)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x1946)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1947)))|])
        let (add_listener''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1951 : t) ->
            fun ~event:(x1949 : [ `timeout ]) ->
              fun ~listener:(x1950 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1951) "addListener"
                     [|((match x1949 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1950 ()))|])
        let (add_listener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1957 : t) ->
            fun ~event:(x1952 : symbol or_string) ->
              fun ~listener:(x1954 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1957) "addListener"
                     [|(or_string_to_js symbol_to_js x1952);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1955 : _)
                                                                  ->
                                                                  x1954
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1955 0)))|])
        let (emit :
          t ->
            event:[ `checkContinue ] ->
              request:Http2ServerRequest.t ->
                response:Http2ServerResponse.t -> bool)
          =
          fun (x1961 : t) ->
            fun ~event:(x1958 : [ `checkContinue ]) ->
              fun ~request:(x1959 : Http2ServerRequest.t) ->
                fun ~response:(x1960 : Http2ServerResponse.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x1961) "emit"
                       [|((match x1958 with
                           | `checkContinue ->
                               Ojs.string_to_js "checkContinue"));(Http2ServerRequest.t_to_js
                                                                    x1959);(
                         Http2ServerResponse.t_to_js x1960)|])
        let (emit' :
          t ->
            event:[ `request ] ->
              request:Http2ServerRequest.t ->
                response:Http2ServerResponse.t -> bool)
          =
          fun (x1965 : t) ->
            fun ~event:(x1962 : [ `request ]) ->
              fun ~request:(x1963 : Http2ServerRequest.t) ->
                fun ~response:(x1964 : Http2ServerResponse.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x1965) "emit"
                       [|((match x1962 with
                           | `request -> Ojs.string_to_js "request"));(
                         Http2ServerRequest.t_to_js x1963);(Http2ServerResponse.t_to_js
                                                              x1964)|])
        let (emit'' :
          t -> event:[ `session ] -> session:ServerHttp2Session.t -> bool) =
          fun (x1968 : t) ->
            fun ~event:(x1966 : [ `session ]) ->
              fun ~session:(x1967 : ServerHttp2Session.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1968) "emit"
                     [|((match x1966 with
                         | `session -> Ojs.string_to_js "session"));(
                       ServerHttp2Session.t_to_js x1967)|])
        let (emit''' : t -> event:[ `sessionError ] -> err:Error.t -> bool) =
          fun (x1971 : t) ->
            fun ~event:(x1969 : [ `sessionError ]) ->
              fun ~err:(x1970 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1971) "emit"
                     [|((match x1969 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Error.t_to_js x1970)|])
        let (emit'''' :
          t ->
            event:[ `stream ] ->
              stream:ServerHttp2Stream.t ->
                headers:IncomingHttpHeaders.t -> flags:int -> bool)
          =
          fun (x1976 : t) ->
            fun ~event:(x1972 : [ `stream ]) ->
              fun ~stream:(x1973 : ServerHttp2Stream.t) ->
                fun ~headers:(x1974 : IncomingHttpHeaders.t) ->
                  fun ~flags:(x1975 : int) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x1976) "emit"
                         [|((match x1972 with
                             | `stream -> Ojs.string_to_js "stream"));(
                           ServerHttp2Stream.t_to_js x1973);(IncomingHttpHeaders.t_to_js
                                                               x1974);(
                           Ojs.int_to_js x1975)|])
        let (emit''''' : t -> event:[ `timeout ] -> bool) =
          fun (x1978 : t) ->
            fun ~event:(x1977 : [ `timeout ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1978) "emit"
                   [|((match x1977 with
                       | `timeout -> Ojs.string_to_js "timeout"))|])
        let (emit'''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x1984 : t) ->
            fun ~event:(x1979 : symbol or_string) ->
              fun ~args:(x1980 : any list) ->
                Ojs.bool_of_js
                  (let x1985 = t_to_js x1984 in
                   Ojs.call (Ojs.get_prop_ascii x1985 "emit") "apply"
                     [|x1985;((let x1981 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1981 "push"
                                    [|(or_string_to_js symbol_to_js x1979)|]);
                               List.iter
                                 (fun (x1982 : any) ->
                                    ignore
                                      (Ojs.call x1981 "push"
                                         [|(any_to_js x1982)|])) x1980;
                               x1981))|])
        let (on :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x1990 : t) ->
            fun ~event:(x1986 : [ `checkContinue ]) ->
              fun
                ~listener:(x1987 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1990) "on"
                     [|((match x1986 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1988 : Ojs.t) ->
                            fun (x1989 : Ojs.t) ->
                              x1987
                                ~request:(Http2ServerRequest.t_of_js x1988)
                                ~response:(Http2ServerResponse.t_of_js x1989)))|])
        let (on' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x1995 : t) ->
            fun ~event:(x1991 : [ `request ]) ->
              fun
                ~listener:(x1992 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1995) "on"
                     [|((match x1991 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1993 : Ojs.t) ->
                            fun (x1994 : Ojs.t) ->
                              x1992
                                ~request:(Http2ServerRequest.t_of_js x1993)
                                ~response:(Http2ServerResponse.t_of_js x1994)))|])
        let (on'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x1999 : t) ->
            fun ~event:(x1996 : [ `session ]) ->
              fun ~listener:(x1997 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1999) "on"
                     [|((match x1996 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1998 : Ojs.t) ->
                            x1997 ~session:(ServerHttp2Session.t_of_js x1998)))|])
        let (on''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x2003 : t) ->
            fun ~event:(x2000 : [ `sessionError ]) ->
              fun ~listener:(x2001 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2003) "on"
                     [|((match x2000 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x2002 : Ojs.t) ->
                            x2001 ~err:(Error.t_of_js x2002)))|])
        let (on'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x2009 : t) ->
            fun ~event:(x2004 : [ `stream ]) ->
              fun
                ~listener:(x2005 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2009) "on"
                     [|((match x2004 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x2006 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2007 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2008 :
                                                                    Ojs.t) ->
                                                                    x2005
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x2006)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x2007)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x2008)))|])
        let (on''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x2012 : t) ->
            fun ~event:(x2010 : [ `timeout ]) ->
              fun ~listener:(x2011 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2012) "on"
                     [|((match x2010 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x2011 ()))|])
        let (on'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2018 : t) ->
            fun ~event:(x2013 : symbol or_string) ->
              fun ~listener:(x2015 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2018) "on"
                     [|(or_string_to_js symbol_to_js x2013);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2016 : _)
                                                                  ->
                                                                  x2015
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2016 0)))|])
        let (once :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2023 : t) ->
            fun ~event:(x2019 : [ `checkContinue ]) ->
              fun
                ~listener:(x2020 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2023) "once"
                     [|((match x2019 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x2021 : Ojs.t) ->
                            fun (x2022 : Ojs.t) ->
                              x2020
                                ~request:(Http2ServerRequest.t_of_js x2021)
                                ~response:(Http2ServerResponse.t_of_js x2022)))|])
        let (once' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2028 : t) ->
            fun ~event:(x2024 : [ `request ]) ->
              fun
                ~listener:(x2025 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2028) "once"
                     [|((match x2024 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x2026 : Ojs.t) ->
                            fun (x2027 : Ojs.t) ->
                              x2025
                                ~request:(Http2ServerRequest.t_of_js x2026)
                                ~response:(Http2ServerResponse.t_of_js x2027)))|])
        let (once'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x2032 : t) ->
            fun ~event:(x2029 : [ `session ]) ->
              fun ~listener:(x2030 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2032) "once"
                     [|((match x2029 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x2031 : Ojs.t) ->
                            x2030 ~session:(ServerHttp2Session.t_of_js x2031)))|])
        let (once''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x2036 : t) ->
            fun ~event:(x2033 : [ `sessionError ]) ->
              fun ~listener:(x2034 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2036) "once"
                     [|((match x2033 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x2035 : Ojs.t) ->
                            x2034 ~err:(Error.t_of_js x2035)))|])
        let (once'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x2042 : t) ->
            fun ~event:(x2037 : [ `stream ]) ->
              fun
                ~listener:(x2038 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2042) "once"
                     [|((match x2037 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x2039 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2040 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2041 :
                                                                    Ojs.t) ->
                                                                    x2038
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x2039)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x2040)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x2041)))|])
        let (once''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x2045 : t) ->
            fun ~event:(x2043 : [ `timeout ]) ->
              fun ~listener:(x2044 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2045) "once"
                     [|((match x2043 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x2044 ()))|])
        let (once'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2051 : t) ->
            fun ~event:(x2046 : symbol or_string) ->
              fun ~listener:(x2048 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2051) "once"
                     [|(or_string_to_js symbol_to_js x2046);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2049 : _)
                                                                  ->
                                                                  x2048
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2049 0)))|])
        let (prepend_listener :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2056 : t) ->
            fun ~event:(x2052 : [ `checkContinue ]) ->
              fun
                ~listener:(x2053 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2056) "prependListener"
                     [|((match x2052 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x2054 : Ojs.t) ->
                            fun (x2055 : Ojs.t) ->
                              x2053
                                ~request:(Http2ServerRequest.t_of_js x2054)
                                ~response:(Http2ServerResponse.t_of_js x2055)))|])
        let (prepend_listener' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2061 : t) ->
            fun ~event:(x2057 : [ `request ]) ->
              fun
                ~listener:(x2058 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2061) "prependListener"
                     [|((match x2057 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x2059 : Ojs.t) ->
                            fun (x2060 : Ojs.t) ->
                              x2058
                                ~request:(Http2ServerRequest.t_of_js x2059)
                                ~response:(Http2ServerResponse.t_of_js x2060)))|])
        let (prepend_listener'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x2065 : t) ->
            fun ~event:(x2062 : [ `session ]) ->
              fun ~listener:(x2063 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2065) "prependListener"
                     [|((match x2062 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x2064 : Ojs.t) ->
                            x2063 ~session:(ServerHttp2Session.t_of_js x2064)))|])
        let (prepend_listener''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x2069 : t) ->
            fun ~event:(x2066 : [ `sessionError ]) ->
              fun ~listener:(x2067 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2069) "prependListener"
                     [|((match x2066 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x2068 : Ojs.t) ->
                            x2067 ~err:(Error.t_of_js x2068)))|])
        let (prepend_listener'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x2075 : t) ->
            fun ~event:(x2070 : [ `stream ]) ->
              fun
                ~listener:(x2071 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2075) "prependListener"
                     [|((match x2070 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x2072 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2073 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2074 :
                                                                    Ojs.t) ->
                                                                    x2071
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x2072)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x2073)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x2074)))|])
        let (prepend_listener''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x2078 : t) ->
            fun ~event:(x2076 : [ `timeout ]) ->
              fun ~listener:(x2077 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2078) "prependListener"
                     [|((match x2076 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x2077 ()))|])
        let (prepend_listener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2084 : t) ->
            fun ~event:(x2079 : symbol or_string) ->
              fun ~listener:(x2081 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2084) "prependListener"
                     [|(or_string_to_js symbol_to_js x2079);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2082 : _)
                                                                  ->
                                                                  x2081
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2082 0)))|])
        let (prepend_once_listener :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2089 : t) ->
            fun ~event:(x2085 : [ `checkContinue ]) ->
              fun
                ~listener:(x2086 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2089) "prependOnceListener"
                     [|((match x2085 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x2087 : Ojs.t) ->
                            fun (x2088 : Ojs.t) ->
                              x2086
                                ~request:(Http2ServerRequest.t_of_js x2087)
                                ~response:(Http2ServerResponse.t_of_js x2088)))|])
        let (prepend_once_listener' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2094 : t) ->
            fun ~event:(x2090 : [ `request ]) ->
              fun
                ~listener:(x2091 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2094) "prependOnceListener"
                     [|((match x2090 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x2092 : Ojs.t) ->
                            fun (x2093 : Ojs.t) ->
                              x2091
                                ~request:(Http2ServerRequest.t_of_js x2092)
                                ~response:(Http2ServerResponse.t_of_js x2093)))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x2098 : t) ->
            fun ~event:(x2095 : [ `session ]) ->
              fun ~listener:(x2096 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2098) "prependOnceListener"
                     [|((match x2095 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x2097 : Ojs.t) ->
                            x2096 ~session:(ServerHttp2Session.t_of_js x2097)))|])
        let (prepend_once_listener''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x2102 : t) ->
            fun ~event:(x2099 : [ `sessionError ]) ->
              fun ~listener:(x2100 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2102) "prependOnceListener"
                     [|((match x2099 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x2101 : Ojs.t) ->
                            x2100 ~err:(Error.t_of_js x2101)))|])
        let (prepend_once_listener'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x2108 : t) ->
            fun ~event:(x2103 : [ `stream ]) ->
              fun
                ~listener:(x2104 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2108) "prependOnceListener"
                     [|((match x2103 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x2105 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2106 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2107 :
                                                                    Ojs.t) ->
                                                                    x2104
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x2105)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x2106)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x2107)))|])
        let (prepend_once_listener''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x2111 : t) ->
            fun ~event:(x2109 : [ `timeout ]) ->
              fun ~listener:(x2110 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2111) "prependOnceListener"
                     [|((match x2109 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x2110 ()))|])
        let (prepend_once_listener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2117 : t) ->
            fun ~event:(x2112 : symbol or_string) ->
              fun ~listener:(x2114 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2117) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x2112);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2115 : _)
                                                                  ->
                                                                  x2114
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2115 0)))|])
        let (set_timeout :
          t -> ?msec:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x2123 : t) ->
            fun ?msec:(x2118 : int option) ->
              fun ?callback:(x2119 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x2124 = t_to_js x2123 in
                     Ojs.call (Ojs.get_prop_ascii x2124 "setTimeout") "apply"
                       [|x2124;((let x2120 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x2118 with
                                  | Some x2122 ->
                                      ignore
                                        (Ojs.call x2120 "push"
                                           [|(Ojs.int_to_js x2122)|])
                                  | None -> ());
                                 (match x2119 with
                                  | Some x2121 ->
                                      ignore
                                        (Ojs.call x2120 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x2121 ()))|])
                                  | None -> ());
                                 x2120))|])
        let (cast : t -> Net.Server.t) =
          fun (x2125 : t) -> Net.Server.t_of_js (t_to_js x2125)
      end
    module Http2SecureServer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2127 : Ojs.t) -> x2127
        and t_to_js : t -> Ojs.t = fun (x2126 : Ojs.t) -> x2126
        let (add_listener :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2132 : t) ->
            fun ~event:(x2128 : [ `checkContinue ]) ->
              fun
                ~listener:(x2129 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2132) "addListener"
                     [|((match x2128 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x2130 : Ojs.t) ->
                            fun (x2131 : Ojs.t) ->
                              x2129
                                ~request:(Http2ServerRequest.t_of_js x2130)
                                ~response:(Http2ServerResponse.t_of_js x2131)))|])
        let (add_listener' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2137 : t) ->
            fun ~event:(x2133 : [ `request ]) ->
              fun
                ~listener:(x2134 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2137) "addListener"
                     [|((match x2133 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x2135 : Ojs.t) ->
                            fun (x2136 : Ojs.t) ->
                              x2134
                                ~request:(Http2ServerRequest.t_of_js x2135)
                                ~response:(Http2ServerResponse.t_of_js x2136)))|])
        let (add_listener'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x2141 : t) ->
            fun ~event:(x2138 : [ `session ]) ->
              fun ~listener:(x2139 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2141) "addListener"
                     [|((match x2138 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x2140 : Ojs.t) ->
                            x2139 ~session:(ServerHttp2Session.t_of_js x2140)))|])
        let (add_listener''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x2145 : t) ->
            fun ~event:(x2142 : [ `sessionError ]) ->
              fun ~listener:(x2143 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2145) "addListener"
                     [|((match x2142 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x2144 : Ojs.t) ->
                            x2143 ~err:(Error.t_of_js x2144)))|])
        let (add_listener'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x2151 : t) ->
            fun ~event:(x2146 : [ `stream ]) ->
              fun
                ~listener:(x2147 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2151) "addListener"
                     [|((match x2146 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x2148 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2149 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2150 :
                                                                    Ojs.t) ->
                                                                    x2147
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x2148)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x2149)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x2150)))|])
        let (add_listener''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x2154 : t) ->
            fun ~event:(x2152 : [ `timeout ]) ->
              fun ~listener:(x2153 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2154) "addListener"
                     [|((match x2152 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x2153 ()))|])
        let (add_listener'''''' :
          t ->
            event:[ `unknownProtocol ] ->
              listener:(socket:Tls.TLSSocket.t -> unit) -> t)
          =
          fun (x2158 : t) ->
            fun ~event:(x2155 : [ `unknownProtocol ]) ->
              fun ~listener:(x2156 : socket:Tls.TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2158) "addListener"
                     [|((match x2155 with
                         | `unknownProtocol ->
                             Ojs.string_to_js "unknownProtocol"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x2157 :
                                                                    Ojs.t) ->
                                                                    x2156
                                                                    ~socket:(
                                                                    Tls.TLSSocket.t_of_js
                                                                    x2157)))|])
        let (add_listener''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2164 : t) ->
            fun ~event:(x2159 : symbol or_string) ->
              fun ~listener:(x2161 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2164) "addListener"
                     [|(or_string_to_js symbol_to_js x2159);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2162 : _)
                                                                  ->
                                                                  x2161
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2162 0)))|])
        let (emit :
          t ->
            event:[ `checkContinue ] ->
              request:Http2ServerRequest.t ->
                response:Http2ServerResponse.t -> bool)
          =
          fun (x2168 : t) ->
            fun ~event:(x2165 : [ `checkContinue ]) ->
              fun ~request:(x2166 : Http2ServerRequest.t) ->
                fun ~response:(x2167 : Http2ServerResponse.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x2168) "emit"
                       [|((match x2165 with
                           | `checkContinue ->
                               Ojs.string_to_js "checkContinue"));(Http2ServerRequest.t_to_js
                                                                    x2166);(
                         Http2ServerResponse.t_to_js x2167)|])
        let (emit' :
          t ->
            event:[ `request ] ->
              request:Http2ServerRequest.t ->
                response:Http2ServerResponse.t -> bool)
          =
          fun (x2172 : t) ->
            fun ~event:(x2169 : [ `request ]) ->
              fun ~request:(x2170 : Http2ServerRequest.t) ->
                fun ~response:(x2171 : Http2ServerResponse.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x2172) "emit"
                       [|((match x2169 with
                           | `request -> Ojs.string_to_js "request"));(
                         Http2ServerRequest.t_to_js x2170);(Http2ServerResponse.t_to_js
                                                              x2171)|])
        let (emit'' :
          t -> event:[ `session ] -> session:ServerHttp2Session.t -> bool) =
          fun (x2175 : t) ->
            fun ~event:(x2173 : [ `session ]) ->
              fun ~session:(x2174 : ServerHttp2Session.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x2175) "emit"
                     [|((match x2173 with
                         | `session -> Ojs.string_to_js "session"));(
                       ServerHttp2Session.t_to_js x2174)|])
        let (emit''' : t -> event:[ `sessionError ] -> err:Error.t -> bool) =
          fun (x2178 : t) ->
            fun ~event:(x2176 : [ `sessionError ]) ->
              fun ~err:(x2177 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x2178) "emit"
                     [|((match x2176 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Error.t_to_js x2177)|])
        let (emit'''' :
          t ->
            event:[ `stream ] ->
              stream:ServerHttp2Stream.t ->
                headers:IncomingHttpHeaders.t -> flags:int -> bool)
          =
          fun (x2183 : t) ->
            fun ~event:(x2179 : [ `stream ]) ->
              fun ~stream:(x2180 : ServerHttp2Stream.t) ->
                fun ~headers:(x2181 : IncomingHttpHeaders.t) ->
                  fun ~flags:(x2182 : int) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x2183) "emit"
                         [|((match x2179 with
                             | `stream -> Ojs.string_to_js "stream"));(
                           ServerHttp2Stream.t_to_js x2180);(IncomingHttpHeaders.t_to_js
                                                               x2181);(
                           Ojs.int_to_js x2182)|])
        let (emit''''' : t -> event:[ `timeout ] -> bool) =
          fun (x2185 : t) ->
            fun ~event:(x2184 : [ `timeout ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x2185) "emit"
                   [|((match x2184 with
                       | `timeout -> Ojs.string_to_js "timeout"))|])
        let (emit'''''' :
          t -> event:[ `unknownProtocol ] -> socket:Tls.TLSSocket.t -> bool)
          =
          fun (x2188 : t) ->
            fun ~event:(x2186 : [ `unknownProtocol ]) ->
              fun ~socket:(x2187 : Tls.TLSSocket.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x2188) "emit"
                     [|((match x2186 with
                         | `unknownProtocol ->
                             Ojs.string_to_js "unknownProtocol"));(Tls.TLSSocket.t_to_js
                                                                    x2187)|])
        let (emit''''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x2194 : t) ->
            fun ~event:(x2189 : symbol or_string) ->
              fun ~args:(x2190 : any list) ->
                Ojs.bool_of_js
                  (let x2195 = t_to_js x2194 in
                   Ojs.call (Ojs.get_prop_ascii x2195 "emit") "apply"
                     [|x2195;((let x2191 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2191 "push"
                                    [|(or_string_to_js symbol_to_js x2189)|]);
                               List.iter
                                 (fun (x2192 : any) ->
                                    ignore
                                      (Ojs.call x2191 "push"
                                         [|(any_to_js x2192)|])) x2190;
                               x2191))|])
        let (on :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2200 : t) ->
            fun ~event:(x2196 : [ `checkContinue ]) ->
              fun
                ~listener:(x2197 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2200) "on"
                     [|((match x2196 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x2198 : Ojs.t) ->
                            fun (x2199 : Ojs.t) ->
                              x2197
                                ~request:(Http2ServerRequest.t_of_js x2198)
                                ~response:(Http2ServerResponse.t_of_js x2199)))|])
        let (on' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2205 : t) ->
            fun ~event:(x2201 : [ `request ]) ->
              fun
                ~listener:(x2202 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2205) "on"
                     [|((match x2201 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x2203 : Ojs.t) ->
                            fun (x2204 : Ojs.t) ->
                              x2202
                                ~request:(Http2ServerRequest.t_of_js x2203)
                                ~response:(Http2ServerResponse.t_of_js x2204)))|])
        let (on'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x2209 : t) ->
            fun ~event:(x2206 : [ `session ]) ->
              fun ~listener:(x2207 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2209) "on"
                     [|((match x2206 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x2208 : Ojs.t) ->
                            x2207 ~session:(ServerHttp2Session.t_of_js x2208)))|])
        let (on''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x2213 : t) ->
            fun ~event:(x2210 : [ `sessionError ]) ->
              fun ~listener:(x2211 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2213) "on"
                     [|((match x2210 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x2212 : Ojs.t) ->
                            x2211 ~err:(Error.t_of_js x2212)))|])
        let (on'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x2219 : t) ->
            fun ~event:(x2214 : [ `stream ]) ->
              fun
                ~listener:(x2215 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2219) "on"
                     [|((match x2214 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x2216 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2217 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2218 :
                                                                    Ojs.t) ->
                                                                    x2215
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x2216)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x2217)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x2218)))|])
        let (on''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x2222 : t) ->
            fun ~event:(x2220 : [ `timeout ]) ->
              fun ~listener:(x2221 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2222) "on"
                     [|((match x2220 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x2221 ()))|])
        let (on'''''' :
          t ->
            event:[ `unknownProtocol ] ->
              listener:(socket:Tls.TLSSocket.t -> unit) -> t)
          =
          fun (x2226 : t) ->
            fun ~event:(x2223 : [ `unknownProtocol ]) ->
              fun ~listener:(x2224 : socket:Tls.TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2226) "on"
                     [|((match x2223 with
                         | `unknownProtocol ->
                             Ojs.string_to_js "unknownProtocol"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x2225 :
                                                                    Ojs.t) ->
                                                                    x2224
                                                                    ~socket:(
                                                                    Tls.TLSSocket.t_of_js
                                                                    x2225)))|])
        let (on''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2232 : t) ->
            fun ~event:(x2227 : symbol or_string) ->
              fun ~listener:(x2229 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2232) "on"
                     [|(or_string_to_js symbol_to_js x2227);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2230 : _)
                                                                  ->
                                                                  x2229
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2230 0)))|])
        let (once :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2237 : t) ->
            fun ~event:(x2233 : [ `checkContinue ]) ->
              fun
                ~listener:(x2234 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2237) "once"
                     [|((match x2233 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x2235 : Ojs.t) ->
                            fun (x2236 : Ojs.t) ->
                              x2234
                                ~request:(Http2ServerRequest.t_of_js x2235)
                                ~response:(Http2ServerResponse.t_of_js x2236)))|])
        let (once' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2242 : t) ->
            fun ~event:(x2238 : [ `request ]) ->
              fun
                ~listener:(x2239 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2242) "once"
                     [|((match x2238 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x2240 : Ojs.t) ->
                            fun (x2241 : Ojs.t) ->
                              x2239
                                ~request:(Http2ServerRequest.t_of_js x2240)
                                ~response:(Http2ServerResponse.t_of_js x2241)))|])
        let (once'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x2246 : t) ->
            fun ~event:(x2243 : [ `session ]) ->
              fun ~listener:(x2244 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2246) "once"
                     [|((match x2243 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x2245 : Ojs.t) ->
                            x2244 ~session:(ServerHttp2Session.t_of_js x2245)))|])
        let (once''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x2250 : t) ->
            fun ~event:(x2247 : [ `sessionError ]) ->
              fun ~listener:(x2248 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2250) "once"
                     [|((match x2247 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x2249 : Ojs.t) ->
                            x2248 ~err:(Error.t_of_js x2249)))|])
        let (once'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x2256 : t) ->
            fun ~event:(x2251 : [ `stream ]) ->
              fun
                ~listener:(x2252 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2256) "once"
                     [|((match x2251 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x2253 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2254 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2255 :
                                                                    Ojs.t) ->
                                                                    x2252
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x2253)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x2254)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x2255)))|])
        let (once''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x2259 : t) ->
            fun ~event:(x2257 : [ `timeout ]) ->
              fun ~listener:(x2258 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2259) "once"
                     [|((match x2257 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x2258 ()))|])
        let (once'''''' :
          t ->
            event:[ `unknownProtocol ] ->
              listener:(socket:Tls.TLSSocket.t -> unit) -> t)
          =
          fun (x2263 : t) ->
            fun ~event:(x2260 : [ `unknownProtocol ]) ->
              fun ~listener:(x2261 : socket:Tls.TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2263) "once"
                     [|((match x2260 with
                         | `unknownProtocol ->
                             Ojs.string_to_js "unknownProtocol"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x2262 :
                                                                    Ojs.t) ->
                                                                    x2261
                                                                    ~socket:(
                                                                    Tls.TLSSocket.t_of_js
                                                                    x2262)))|])
        let (once''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2269 : t) ->
            fun ~event:(x2264 : symbol or_string) ->
              fun ~listener:(x2266 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2269) "once"
                     [|(or_string_to_js symbol_to_js x2264);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2267 : _)
                                                                  ->
                                                                  x2266
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2267 0)))|])
        let (prepend_listener :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2274 : t) ->
            fun ~event:(x2270 : [ `checkContinue ]) ->
              fun
                ~listener:(x2271 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2274) "prependListener"
                     [|((match x2270 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x2272 : Ojs.t) ->
                            fun (x2273 : Ojs.t) ->
                              x2271
                                ~request:(Http2ServerRequest.t_of_js x2272)
                                ~response:(Http2ServerResponse.t_of_js x2273)))|])
        let (prepend_listener' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2279 : t) ->
            fun ~event:(x2275 : [ `request ]) ->
              fun
                ~listener:(x2276 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2279) "prependListener"
                     [|((match x2275 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x2277 : Ojs.t) ->
                            fun (x2278 : Ojs.t) ->
                              x2276
                                ~request:(Http2ServerRequest.t_of_js x2277)
                                ~response:(Http2ServerResponse.t_of_js x2278)))|])
        let (prepend_listener'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x2283 : t) ->
            fun ~event:(x2280 : [ `session ]) ->
              fun ~listener:(x2281 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2283) "prependListener"
                     [|((match x2280 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x2282 : Ojs.t) ->
                            x2281 ~session:(ServerHttp2Session.t_of_js x2282)))|])
        let (prepend_listener''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x2287 : t) ->
            fun ~event:(x2284 : [ `sessionError ]) ->
              fun ~listener:(x2285 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2287) "prependListener"
                     [|((match x2284 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x2286 : Ojs.t) ->
                            x2285 ~err:(Error.t_of_js x2286)))|])
        let (prepend_listener'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x2293 : t) ->
            fun ~event:(x2288 : [ `stream ]) ->
              fun
                ~listener:(x2289 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2293) "prependListener"
                     [|((match x2288 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x2290 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2291 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2292 :
                                                                    Ojs.t) ->
                                                                    x2289
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x2290)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x2291)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x2292)))|])
        let (prepend_listener''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x2296 : t) ->
            fun ~event:(x2294 : [ `timeout ]) ->
              fun ~listener:(x2295 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2296) "prependListener"
                     [|((match x2294 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x2295 ()))|])
        let (prepend_listener'''''' :
          t ->
            event:[ `unknownProtocol ] ->
              listener:(socket:Tls.TLSSocket.t -> unit) -> t)
          =
          fun (x2300 : t) ->
            fun ~event:(x2297 : [ `unknownProtocol ]) ->
              fun ~listener:(x2298 : socket:Tls.TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2300) "prependListener"
                     [|((match x2297 with
                         | `unknownProtocol ->
                             Ojs.string_to_js "unknownProtocol"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x2299 :
                                                                    Ojs.t) ->
                                                                    x2298
                                                                    ~socket:(
                                                                    Tls.TLSSocket.t_of_js
                                                                    x2299)))|])
        let (prepend_listener''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2306 : t) ->
            fun ~event:(x2301 : symbol or_string) ->
              fun ~listener:(x2303 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2306) "prependListener"
                     [|(or_string_to_js symbol_to_js x2301);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2304 : _)
                                                                  ->
                                                                  x2303
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2304 0)))|])
        let (prepend_once_listener :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2311 : t) ->
            fun ~event:(x2307 : [ `checkContinue ]) ->
              fun
                ~listener:(x2308 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2311) "prependOnceListener"
                     [|((match x2307 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x2309 : Ojs.t) ->
                            fun (x2310 : Ojs.t) ->
                              x2308
                                ~request:(Http2ServerRequest.t_of_js x2309)
                                ~response:(Http2ServerResponse.t_of_js x2310)))|])
        let (prepend_once_listener' :
          t ->
            event:[ `request ] ->
              listener:(request:Http2ServerRequest.t ->
                          response:Http2ServerResponse.t -> unit)
                -> t)
          =
          fun (x2316 : t) ->
            fun ~event:(x2312 : [ `request ]) ->
              fun
                ~listener:(x2313 :
                            request:Http2ServerRequest.t ->
                              response:Http2ServerResponse.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2316) "prependOnceListener"
                     [|((match x2312 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x2314 : Ojs.t) ->
                            fun (x2315 : Ojs.t) ->
                              x2313
                                ~request:(Http2ServerRequest.t_of_js x2314)
                                ~response:(Http2ServerResponse.t_of_js x2315)))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `session ] ->
              listener:(session:ServerHttp2Session.t -> unit) -> t)
          =
          fun (x2320 : t) ->
            fun ~event:(x2317 : [ `session ]) ->
              fun ~listener:(x2318 : session:ServerHttp2Session.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2320) "prependOnceListener"
                     [|((match x2317 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x2319 : Ojs.t) ->
                            x2318 ~session:(ServerHttp2Session.t_of_js x2319)))|])
        let (prepend_once_listener''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x2324 : t) ->
            fun ~event:(x2321 : [ `sessionError ]) ->
              fun ~listener:(x2322 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2324) "prependOnceListener"
                     [|((match x2321 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x2323 : Ojs.t) ->
                            x2322 ~err:(Error.t_of_js x2323)))|])
        let (prepend_once_listener'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:ServerHttp2Stream.t ->
                          headers:IncomingHttpHeaders.t -> flags:int -> unit)
                -> t)
          =
          fun (x2330 : t) ->
            fun ~event:(x2325 : [ `stream ]) ->
              fun
                ~listener:(x2326 :
                            stream:ServerHttp2Stream.t ->
                              headers:IncomingHttpHeaders.t ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x2330) "prependOnceListener"
                     [|((match x2325 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x2327 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2328 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x2329 :
                                                                    Ojs.t) ->
                                                                    x2326
                                                                    ~stream:(
                                                                    ServerHttp2Stream.t_of_js
                                                                    x2327)
                                                                    ~headers:(
                                                                    IncomingHttpHeaders.t_of_js
                                                                    x2328)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x2329)))|])
        let (prepend_once_listener''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x2333 : t) ->
            fun ~event:(x2331 : [ `timeout ]) ->
              fun ~listener:(x2332 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2333) "prependOnceListener"
                     [|((match x2331 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x2332 ()))|])
        let (prepend_once_listener'''''' :
          t ->
            event:[ `unknownProtocol ] ->
              listener:(socket:Tls.TLSSocket.t -> unit) -> t)
          =
          fun (x2337 : t) ->
            fun ~event:(x2334 : [ `unknownProtocol ]) ->
              fun ~listener:(x2335 : socket:Tls.TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2337) "prependOnceListener"
                     [|((match x2334 with
                         | `unknownProtocol ->
                             Ojs.string_to_js "unknownProtocol"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x2336 :
                                                                    Ojs.t) ->
                                                                    x2335
                                                                    ~socket:(
                                                                    Tls.TLSSocket.t_of_js
                                                                    x2336)))|])
        let (prepend_once_listener''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2343 : t) ->
            fun ~event:(x2338 : symbol or_string) ->
              fun ~listener:(x2340 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2343) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x2338);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2341 : _)
                                                                  ->
                                                                  x2340
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2341 0)))|])
        let (set_timeout :
          t -> ?msec:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x2349 : t) ->
            fun ?msec:(x2344 : int option) ->
              fun ?callback:(x2345 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x2350 = t_to_js x2349 in
                     Ojs.call (Ojs.get_prop_ascii x2350 "setTimeout") "apply"
                       [|x2350;((let x2346 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x2344 with
                                  | Some x2348 ->
                                      ignore
                                        (Ojs.call x2346 "push"
                                           [|(Ojs.int_to_js x2348)|])
                                  | None -> ());
                                 (match x2345 with
                                  | Some x2347 ->
                                      ignore
                                        (Ojs.call x2346 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x2347 ()))|])
                                  | None -> ());
                                 x2346))|])
        let (cast : t -> Tls.Server.t) =
          fun (x2351 : t) -> Tls.Server.t_of_js (t_to_js x2351)
      end
    module Constants =
      struct
        let (ngsession_server : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SESSION_SERVER")
        let (ngsession_client : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SESSION_CLIENT")
        let (ngstream_state_idle : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_IDLE")
        let (ngstream_state_open : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_OPEN")
        let (ngstream_state_reserved_local : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_RESERVED_LOCAL")
        let (ngstream_state_reserved_remote : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_RESERVED_REMOTE")
        let (ngstream_state_half_closed_local : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_HALF_CLOSED_LOCAL")
        let (ngstream_state_half_closed_remote : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_HALF_CLOSED_REMOTE")
        let (ngstream_state_closed : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_CLOSED")
        let (ngno_error : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_NO_ERROR")
        let (ngprotocol_error : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_PROTOCOL_ERROR")
        let (nginternal_error : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_INTERNAL_ERROR")
        let (ngflow_control_error : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLOW_CONTROL_ERROR")
        let (ngsettings_timeout : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_TIMEOUT")
        let (ngstream_closed : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_CLOSED")
        let (ngframe_size_error : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FRAME_SIZE_ERROR")
        let (ngrefused_stream : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_REFUSED_STREAM")
        let (ngcancel : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_CANCEL")
        let (ngcompression_error : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_COMPRESSION_ERROR")
        let (ngconnect_error : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_CONNECT_ERROR")
        let (ngenhance_your_calm : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_ENHANCE_YOUR_CALM")
        let (nginadequate_security : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_INADEQUATE_SECURITY")
        let (nghttp_1_1_required : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_HTTP_1_1_REQUIRED")
        let (ngerr_frame_size_error : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_ERR_FRAME_SIZE_ERROR")
        let (ngflag_none : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLAG_NONE")
        let (ngflag_end_stream : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLAG_END_STREAM")
        let (ngflag_end_headers : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLAG_END_HEADERS")
        let (ngflag_ack : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLAG_ACK")
        let (ngflag_padded : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLAG_PADDED")
        let (ngflag_priority : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLAG_PRIORITY")
        let (default_settings_header_table_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "DEFAULT_SETTINGS_HEADER_TABLE_SIZE")
        let (default_settings_enable_push : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "DEFAULT_SETTINGS_ENABLE_PUSH")
        let (default_settings_initial_window_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "DEFAULT_SETTINGS_INITIAL_WINDOW_SIZE")
        let (default_settings_max_frame_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "DEFAULT_SETTINGS_MAX_FRAME_SIZE")
        let (max_max_frame_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "MAX_MAX_FRAME_SIZE")
        let (min_max_frame_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "MIN_MAX_FRAME_SIZE")
        let (max_initial_window_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "MAX_INITIAL_WINDOW_SIZE")
        let (ngdefault_weight : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_DEFAULT_WEIGHT")
        let (ngsettings_header_table_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_HEADER_TABLE_SIZE")
        let (ngsettings_enable_push : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_ENABLE_PUSH")
        let (ngsettings_max_concurrent_streams : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS")
        let (ngsettings_initial_window_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE")
        let (ngsettings_max_frame_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_MAX_FRAME_SIZE")
        let (ngsettings_max_header_list_size : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE")
        let (padding_strategy_none : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "PADDING_STRATEGY_NONE")
        let (padding_strategy_max : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "PADDING_STRATEGY_MAX")
        let (padding_strategy_callback : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "PADDING_STRATEGY_CALLBACK")
        let (http2_HEADER_STATUS : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_STATUS")
        let (http2_HEADER_METHOD : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_METHOD")
        let (http2_HEADER_AUTHORITY : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_AUTHORITY")
        let (http2_HEADER_SCHEME : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_SCHEME")
        let (http2_HEADER_PATH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_PATH")
        let (http2_HEADER_ACCEPT_CHARSET : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ACCEPT_CHARSET")
        let (http2_HEADER_ACCEPT_ENCODING : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ACCEPT_ENCODING")
        let (http2_HEADER_ACCEPT_LANGUAGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ACCEPT_LANGUAGE")
        let (http2_HEADER_ACCEPT_RANGES : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ACCEPT_RANGES")
        let (http2_HEADER_ACCEPT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ACCEPT")
        let (http2_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN")
        let (http2_HEADER_AGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_AGE")
        let (http2_HEADER_ALLOW : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ALLOW")
        let (http2_HEADER_AUTHORIZATION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_AUTHORIZATION")
        let (http2_HEADER_CACHE_CONTROL : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CACHE_CONTROL")
        let (http2_HEADER_CONNECTION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONNECTION")
        let (http2_HEADER_CONTENT_DISPOSITION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_DISPOSITION")
        let (http2_HEADER_CONTENT_ENCODING : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_ENCODING")
        let (http2_HEADER_CONTENT_LANGUAGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_LANGUAGE")
        let (http2_HEADER_CONTENT_LENGTH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_LENGTH")
        let (http2_HEADER_CONTENT_LOCATION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_LOCATION")
        let (http2_HEADER_CONTENT_MD5 : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_MD5")
        let (http2_HEADER_CONTENT_RANGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_RANGE")
        let (http2_HEADER_CONTENT_TYPE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_TYPE")
        let (http2_HEADER_COOKIE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_COOKIE")
        let (http2_HEADER_DATE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_DATE")
        let (http2_HEADER_ETAG : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ETAG")
        let (http2_HEADER_EXPECT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_EXPECT")
        let (http2_HEADER_EXPIRES : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_EXPIRES")
        let (http2_HEADER_FROM : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_FROM")
        let (http2_HEADER_HOST : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_HOST")
        let (http2_HEADER_IF_MATCH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_IF_MATCH")
        let (http2_HEADER_IF_MODIFIED_SINCE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_IF_MODIFIED_SINCE")
        let (http2_HEADER_IF_NONE_MATCH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_IF_NONE_MATCH")
        let (http2_HEADER_IF_RANGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_IF_RANGE")
        let (http2_HEADER_IF_UNMODIFIED_SINCE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_IF_UNMODIFIED_SINCE")
        let (http2_HEADER_LAST_MODIFIED : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_LAST_MODIFIED")
        let (http2_HEADER_LINK : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_LINK")
        let (http2_HEADER_LOCATION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_LOCATION")
        let (http2_HEADER_MAX_FORWARDS : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_MAX_FORWARDS")
        let (http2_HEADER_PREFER : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_PREFER")
        let (http2_HEADER_PROXY_AUTHENTICATE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_PROXY_AUTHENTICATE")
        let (http2_HEADER_PROXY_AUTHORIZATION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_PROXY_AUTHORIZATION")
        let (http2_HEADER_RANGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_RANGE")
        let (http2_HEADER_REFERER : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_REFERER")
        let (http2_HEADER_REFRESH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_REFRESH")
        let (http2_HEADER_RETRY_AFTER : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_RETRY_AFTER")
        let (http2_HEADER_SERVER : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_SERVER")
        let (http2_HEADER_SET_COOKIE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_SET_COOKIE")
        let (http2_HEADER_STRICT_TRANSPORT_SECURITY : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_STRICT_TRANSPORT_SECURITY")
        let (http2_HEADER_TRANSFER_ENCODING : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_TRANSFER_ENCODING")
        let (http2_HEADER_TE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_TE")
        let (http2_HEADER_UPGRADE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_UPGRADE")
        let (http2_HEADER_USER_AGENT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_USER_AGENT")
        let (http2_HEADER_VARY : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_VARY")
        let (http2_HEADER_VIA : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_VIA")
        let (http2_HEADER_WWW_AUTHENTICATE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_WWW_AUTHENTICATE")
        let (http2_HEADER_HTTP2_SETTINGS : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_HTTP2_SETTINGS")
        let (http2_HEADER_KEEP_ALIVE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_KEEP_ALIVE")
        let (http2_HEADER_PROXY_CONNECTION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_PROXY_CONNECTION")
        let (http2_METHOD_ACL : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_ACL")
        let (http2_METHOD_BASELINE_CONTROL : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_BASELINE_CONTROL")
        let (http2_METHOD_BIND : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_BIND")
        let (http2_METHOD_CHECKIN : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_CHECKIN")
        let (http2_METHOD_CHECKOUT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_CHECKOUT")
        let (http2_METHOD_CONNECT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_CONNECT")
        let (http2_METHOD_COPY : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_COPY")
        let (http2_METHOD_DELETE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_DELETE")
        let (http2_METHOD_GET : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_GET")
        let (http2_METHOD_HEAD : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_HEAD")
        let (http2_METHOD_LABEL : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_LABEL")
        let (http2_METHOD_LINK : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_LINK")
        let (http2_METHOD_LOCK : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_LOCK")
        let (http2_METHOD_MERGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MERGE")
        let (http2_METHOD_MKACTIVITY : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MKACTIVITY")
        let (http2_METHOD_MKCALENDAR : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MKCALENDAR")
        let (http2_METHOD_MKCOL : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MKCOL")
        let (http2_METHOD_MKREDIRECTREF : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MKREDIRECTREF")
        let (http2_METHOD_MKWORKSPACE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MKWORKSPACE")
        let (http2_METHOD_MOVE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MOVE")
        let (http2_METHOD_OPTIONS : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_OPTIONS")
        let (http2_METHOD_ORDERPATCH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_ORDERPATCH")
        let (http2_METHOD_PATCH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_PATCH")
        let (http2_METHOD_POST : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_POST")
        let (http2_METHOD_PRI : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_PRI")
        let (http2_METHOD_PROPFIND : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_PROPFIND")
        let (http2_METHOD_PROPPATCH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_PROPPATCH")
        let (http2_METHOD_PUT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_PUT")
        let (http2_METHOD_REBIND : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_REBIND")
        let (http2_METHOD_REPORT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_REPORT")
        let (http2_METHOD_SEARCH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_SEARCH")
        let (http2_METHOD_TRACE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_TRACE")
        let (http2_METHOD_UNBIND : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_UNBIND")
        let (http2_METHOD_UNCHECKOUT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_UNCHECKOUT")
        let (http2_METHOD_UNLINK : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_UNLINK")
        let (http2_METHOD_UNLOCK : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_UNLOCK")
        let (http2_METHOD_UPDATE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_UPDATE")
        let (http2_METHOD_UPDATEREDIRECTREF : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_UPDATEREDIRECTREF")
        let (http2_METHOD_VERSION_CONTROL : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_VERSION_CONTROL")
        let (http_status_continue : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_CONTINUE")
        let (http_status_switching_protocols : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_SWITCHING_PROTOCOLS")
        let (http_status_processing : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PROCESSING")
        let (http_status_ok : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_OK")
        let (http_status_created : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_CREATED")
        let (http_status_accepted : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_ACCEPTED")
        let (http_status_non_authoritative_information : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NON_AUTHORITATIVE_INFORMATION")
        let (http_status_no_content : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NO_CONTENT")
        let (http_status_reset_content : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_RESET_CONTENT")
        let (http_status_partial_content : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PARTIAL_CONTENT")
        let (http_status_multi_status : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_MULTI_STATUS")
        let (http_status_already_reported : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_ALREADY_REPORTED")
        let (http_status_im_used : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_IM_USED")
        let (http_status_multiple_choices : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_MULTIPLE_CHOICES")
        let (http_status_moved_permanently : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_MOVED_PERMANENTLY")
        let (http_status_found : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_FOUND")
        let (http_status_see_other : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_SEE_OTHER")
        let (http_status_not_modified : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NOT_MODIFIED")
        let (http_status_use_proxy : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_USE_PROXY")
        let (http_status_temporary_redirect : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_TEMPORARY_REDIRECT")
        let (http_status_permanent_redirect : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PERMANENT_REDIRECT")
        let (http_status_bad_request : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_BAD_REQUEST")
        let (http_status_unauthorized : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_UNAUTHORIZED")
        let (http_status_payment_required : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PAYMENT_REQUIRED")
        let (http_status_forbidden : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_FORBIDDEN")
        let (http_status_not_found : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NOT_FOUND")
        let (http_status_method_not_allowed : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_METHOD_NOT_ALLOWED")
        let (http_status_not_acceptable : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NOT_ACCEPTABLE")
        let (http_status_proxy_authentication_required : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PROXY_AUTHENTICATION_REQUIRED")
        let (http_status_request_timeout : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_REQUEST_TIMEOUT")
        let (http_status_conflict : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_CONFLICT")
        let (http_status_gone : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_GONE")
        let (http_status_length_required : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_LENGTH_REQUIRED")
        let (http_status_precondition_failed : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PRECONDITION_FAILED")
        let (http_status_payload_too_large : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PAYLOAD_TOO_LARGE")
        let (http_status_uri_too_long : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_URI_TOO_LONG")
        let (http_status_unsupported_media_type : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE")
        let (http_status_range_not_satisfiable : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_RANGE_NOT_SATISFIABLE")
        let (http_status_expectation_failed : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_EXPECTATION_FAILED")
        let (http_status_teapot : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_TEAPOT")
        let (http_status_misdirected_request : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_MISDIRECTED_REQUEST")
        let (http_status_unprocessable_entity : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_UNPROCESSABLE_ENTITY")
        let (http_status_locked : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_LOCKED")
        let (http_status_failed_dependency : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_FAILED_DEPENDENCY")
        let (http_status_unordered_collection : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_UNORDERED_COLLECTION")
        let (http_status_upgrade_required : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_UPGRADE_REQUIRED")
        let (http_status_precondition_required : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PRECONDITION_REQUIRED")
        let (http_status_too_many_requests : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_TOO_MANY_REQUESTS")
        let (http_status_request_header_fields_too_large : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE")
        let (http_status_unavailable_for_legal_reasons : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_UNAVAILABLE_FOR_LEGAL_REASONS")
        let (http_status_internal_server_error : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_INTERNAL_SERVER_ERROR")
        let (http_status_not_implemented : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NOT_IMPLEMENTED")
        let (http_status_bad_gateway : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_BAD_GATEWAY")
        let (http_status_service_unavailable : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_SERVICE_UNAVAILABLE")
        let (http_status_gateway_timeout : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_GATEWAY_TIMEOUT")
        let (http_status_http_version_not_supported : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_HTTP_VERSION_NOT_SUPPORTED")
        let (http_status_variant_also_negotiates : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_VARIANT_ALSO_NEGOTIATES")
        let (http_status_insufficient_storage : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_INSUFFICIENT_STORAGE")
        let (http_status_loop_detected : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_LOOP_DETECTED")
        let (http_status_bandwidth_limit_exceeded : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_BANDWIDTH_LIMIT_EXCEEDED")
        let (http_status_not_extended : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NOT_EXTENDED")
        let (http_status_network_authentication_required : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NETWORK_AUTHENTICATION_REQUIRED")
      end
    let (get_default_settings : unit -> Settings.t) =
      fun () ->
        Settings.t_of_js (Ojs.call Import.http2 "getDefaultSettings" [||])
    let (get_packed_settings : settings:Settings.t -> Buffer.t) =
      fun ~settings:(x2352 : Settings.t) ->
        Buffer.t_of_js
          (Ojs.call Import.http2 "getPackedSettings"
             [|(Settings.t_to_js x2352)|])
    let (get_unpacked_settings : buf:Uint8Array.t -> Settings.t) =
      fun ~buf:(x2353 : Uint8Array.t) ->
        Settings.t_of_js
          (Ojs.call Import.http2 "getUnpackedSettings"
             [|(Uint8Array.t_to_js x2353)|])
    let (create_server :
      ?on_request_handler:(request:Http2ServerRequest.t ->
                             response:Http2ServerResponse.t -> unit)
        -> unit -> Http2Server.t)
      =
      fun
        ?on_request_handler:(x2354 :
                              (request:Http2ServerRequest.t ->
                                 response:Http2ServerResponse.t -> unit)
                                option)
        ->
        fun () ->
          Http2Server.t_of_js
            (let x2359 = Import.http2 in
             Ojs.call (Ojs.get_prop_ascii x2359 "createServer") "apply"
               [|x2359;((let x2355 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x2354 with
                          | Some x2356 ->
                              ignore
                                (Ojs.call x2355 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x2357 : Ojs.t) ->
                                           fun (x2358 : Ojs.t) ->
                                             x2356
                                               ~request:(Http2ServerRequest.t_of_js
                                                           x2357)
                                               ~response:(Http2ServerResponse.t_of_js
                                                            x2358)))|])
                          | None -> ());
                         x2355))|])
    let (create_server :
      options:ServerOptions.t ->
        ?on_request_handler:(request:Http2ServerRequest.t ->
                               response:Http2ServerResponse.t -> unit)
          -> unit -> Http2Server.t)
      =
      fun ~options:(x2360 : ServerOptions.t) ->
        fun
          ?on_request_handler:(x2361 :
                                (request:Http2ServerRequest.t ->
                                   response:Http2ServerResponse.t -> unit)
                                  option)
          ->
          fun () ->
            Http2Server.t_of_js
              (let x2366 = Import.http2 in
               Ojs.call (Ojs.get_prop_ascii x2366 "createServer") "apply"
                 [|x2366;((let x2362 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2362 "push"
                                [|(ServerOptions.t_to_js x2360)|]);
                           (match x2361 with
                            | Some x2363 ->
                                ignore
                                  (Ojs.call x2362 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x2364 : Ojs.t) ->
                                             fun (x2365 : Ojs.t) ->
                                               x2363
                                                 ~request:(Http2ServerRequest.t_of_js
                                                             x2364)
                                                 ~response:(Http2ServerResponse.t_of_js
                                                              x2365)))|])
                            | None -> ());
                           x2362))|])
    let (create_secure_server :
      ?on_request_handler:(request:Http2ServerRequest.t ->
                             response:Http2ServerResponse.t -> unit)
        -> unit -> Http2SecureServer.t)
      =
      fun
        ?on_request_handler:(x2367 :
                              (request:Http2ServerRequest.t ->
                                 response:Http2ServerResponse.t -> unit)
                                option)
        ->
        fun () ->
          Http2SecureServer.t_of_js
            (let x2372 = Import.http2 in
             Ojs.call (Ojs.get_prop_ascii x2372 "createSecureServer") "apply"
               [|x2372;((let x2368 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x2367 with
                          | Some x2369 ->
                              ignore
                                (Ojs.call x2368 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x2370 : Ojs.t) ->
                                           fun (x2371 : Ojs.t) ->
                                             x2369
                                               ~request:(Http2ServerRequest.t_of_js
                                                           x2370)
                                               ~response:(Http2ServerResponse.t_of_js
                                                            x2371)))|])
                          | None -> ());
                         x2368))|])
    let (create_secure_server :
      options:SecureServerOptions.t ->
        ?on_request_handler:(request:Http2ServerRequest.t ->
                               response:Http2ServerResponse.t -> unit)
          -> unit -> Http2SecureServer.t)
      =
      fun ~options:(x2373 : SecureServerOptions.t) ->
        fun
          ?on_request_handler:(x2374 :
                                (request:Http2ServerRequest.t ->
                                   response:Http2ServerResponse.t -> unit)
                                  option)
          ->
          fun () ->
            Http2SecureServer.t_of_js
              (let x2379 = Import.http2 in
               Ojs.call (Ojs.get_prop_ascii x2379 "createSecureServer")
                 "apply"
                 [|x2379;((let x2375 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2375 "push"
                                [|(SecureServerOptions.t_to_js x2373)|]);
                           (match x2374 with
                            | Some x2376 ->
                                ignore
                                  (Ojs.call x2375 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x2377 : Ojs.t) ->
                                             fun (x2378 : Ojs.t) ->
                                               x2376
                                                 ~request:(Http2ServerRequest.t_of_js
                                                             x2377)
                                                 ~response:(Http2ServerResponse.t_of_js
                                                              x2378)))|])
                            | None -> ());
                           x2375))|])
    let (connect :
      authority:Url.URL.t or_string ->
        listener:(session:ClientHttp2Session.t ->
                    socket:(Net.Socket.t, Tls.TLSSocket.t) union2 -> unit)
          -> ClientHttp2Session.t)
      =
      fun ~authority:(x2380 : Url.URL.t or_string) ->
        fun
          ~listener:(x2382 :
                      session:ClientHttp2Session.t ->
                        socket:(Net.Socket.t, Tls.TLSSocket.t) union2 -> unit)
          ->
          ClientHttp2Session.t_of_js
            (Ojs.call Import.http2 "connect"
               [|(or_string_to_js Url.URL.t_to_js x2380);(Ojs.fun_to_js 2
                                                            (fun
                                                               (x2383 :
                                                                 Ojs.t)
                                                               ->
                                                               fun
                                                                 (x2384 :
                                                                   Ojs.t)
                                                                 ->
                                                                 x2382
                                                                   ~session:(
                                                                   ClientHttp2Session.t_of_js
                                                                    x2383)
                                                                   ~socket:(
                                                                   union2_of_js
                                                                    Net.Socket.t_of_js
                                                                    Tls.TLSSocket.t_of_js
                                                                    x2384)))|])
    let (connect :
      authority:Url.URL.t or_string ->
        ?options:[
                   `U_s15_http_ of
                     (ClientSessionOptions.t, SecureClientSessionOptions.t)
                       union2
                      | `U_s16_https_ of
                          (ClientSessionOptions.t,
                            SecureClientSessionOptions.t) union2
                          ]
          ->
          ?listener:(session:ClientHttp2Session.t ->
                       socket:(Net.Socket.t, Tls.TLSSocket.t) union2 -> unit)
            -> unit -> ClientHttp2Session.t)
      =
      fun ~authority:(x2387 : Url.URL.t or_string) ->
        fun
          ?options:(x2388 :
                     [
                       `U_s15_http_ of
                         (ClientSessionOptions.t,
                           SecureClientSessionOptions.t) union2
                          | `U_s16_https_ of
                              (ClientSessionOptions.t,
                                SecureClientSessionOptions.t) union2
                              ]
                       option)
          ->
          fun
            ?listener:(x2389 :
                        (session:ClientHttp2Session.t ->
                           socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                             unit)
                          option)
            ->
            fun () ->
              ClientHttp2Session.t_of_js
                (let x2404 = Import.http2 in
                 Ojs.call (Ojs.get_prop_ascii x2404 "connect") "apply"
                   [|x2404;((let x2390 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2390 "push"
                                  [|(or_string_to_js Url.URL.t_to_js x2387)|]);
                             (match x2388 with
                              | Some x2396 ->
                                  ignore
                                    (Ojs.call x2390 "push"
                                       [|((match x2396 with
                                           | `U_s15_http_ x2397 ->
                                               union2_to_js
                                                 ClientSessionOptions.t_to_js
                                                 SecureClientSessionOptions.t_to_js
                                                 x2397
                                           | `U_s16_https_ x2400 ->
                                               union2_to_js
                                                 ClientSessionOptions.t_to_js
                                                 SecureClientSessionOptions.t_to_js
                                                 x2400))|])
                              | None -> ());
                             (match x2389 with
                              | Some x2391 ->
                                  ignore
                                    (Ojs.call x2390 "push"
                                       [|(Ojs.fun_to_js 2
                                            (fun (x2392 : Ojs.t) ->
                                               fun (x2393 : Ojs.t) ->
                                                 x2391
                                                   ~session:(ClientHttp2Session.t_of_js
                                                               x2392)
                                                   ~socket:(union2_of_js
                                                              Net.Socket.t_of_js
                                                              Tls.TLSSocket.t_of_js
                                                              x2393)))|])
                              | None -> ());
                             x2390))|])
  end
