[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4 : Ojs.t) -> x4
    and t_to_js : t -> Ojs.t = fun (x3 : Ojs.t) -> x3
    let (get_origin : t -> string) =
      fun (x5 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x5) "origin")
    let (set_origin : t -> string -> unit) =
      fun (x6 : t) ->
        fun (x7 : string) ->
          Ojs.set_prop_ascii (t_to_js x6) "origin" (Ojs.string_to_js x7)
  end
module Http2 =
  struct
    open Node_fs
    open Node_fs_promises
    open Node_net
    open Node_stream
    open Node_tls
    open Node_url
    module IncomingHttpStatusHeader =
      struct
        type t = http2_IncomingHttpStatusHeader
        let rec t_of_js : Ojs.t -> t =
          fun (x9 : Ojs.t) -> http2_IncomingHttpStatusHeader_of_js x9
        and t_to_js : t -> Ojs.t =
          fun (x8 : http2_IncomingHttpStatusHeader) ->
            http2_IncomingHttpStatusHeader_to_js x8
        let (get__status : t -> int) =
          fun (x10 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x10) ":status")
        let (set__status : t -> int -> unit) =
          fun (x11 : t) ->
            fun (x12 : int) ->
              Ojs.set_prop_ascii (t_to_js x11) ":status" (Ojs.int_to_js x12)
      end
    module IncomingHttpHeaders =
      struct
        type t = http2_IncomingHttpHeaders
        let rec t_of_js : Ojs.t -> t =
          fun (x14 : Ojs.t) -> http2_IncomingHttpHeaders_of_js x14
        and t_to_js : t -> Ojs.t =
          fun (x13 : http2_IncomingHttpHeaders) ->
            http2_IncomingHttpHeaders_to_js x13
        let (get__path : t -> string) =
          fun (x15 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x15) ":path")
        let (set__path : t -> string -> unit) =
          fun (x16 : t) ->
            fun (x17 : string) ->
              Ojs.set_prop_ascii (t_to_js x16) ":path" (Ojs.string_to_js x17)
        let (get__method : t -> string) =
          fun (x18 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x18) ":method")
        let (set__method : t -> string -> unit) =
          fun (x19 : t) ->
            fun (x20 : string) ->
              Ojs.set_prop_ascii (t_to_js x19) ":method"
                (Ojs.string_to_js x20)
        let (get__authority : t -> string) =
          fun (x21 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x21) ":authority")
        let (set__authority : t -> string -> unit) =
          fun (x22 : t) ->
            fun (x23 : string) ->
              Ojs.set_prop_ascii (t_to_js x22) ":authority"
                (Ojs.string_to_js x23)
        let (get__scheme : t -> string) =
          fun (x24 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x24) ":scheme")
        let (set__scheme : t -> string -> unit) =
          fun (x25 : t) ->
            fun (x26 : string) ->
              Ojs.set_prop_ascii (t_to_js x25) ":scheme"
                (Ojs.string_to_js x26)
        let (cast : t -> Node_http.Http.IncomingHttpHeaders.t) =
          fun (x27 : t) ->
            Node_http.Http.IncomingHttpHeaders.t_of_js (t_to_js x27)
      end
    module StreamPriorityOptions =
      struct
        type t = http2_StreamPriorityOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x29 : Ojs.t) -> http2_StreamPriorityOptions_of_js x29
        and t_to_js : t -> Ojs.t =
          fun (x28 : http2_StreamPriorityOptions) ->
            http2_StreamPriorityOptions_to_js x28
        let (get_exclusive : t -> bool) =
          fun (x30 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x30) "exclusive")
        let (set_exclusive : t -> bool -> unit) =
          fun (x31 : t) ->
            fun (x32 : bool) ->
              Ojs.set_prop_ascii (t_to_js x31) "exclusive"
                (Ojs.bool_to_js x32)
        let (get_parent : t -> int) =
          fun (x33 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x33) "parent")
        let (set_parent : t -> int -> unit) =
          fun (x34 : t) ->
            fun (x35 : int) ->
              Ojs.set_prop_ascii (t_to_js x34) "parent" (Ojs.int_to_js x35)
        let (get_weight : t -> int) =
          fun (x36 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x36) "weight")
        let (set_weight : t -> int -> unit) =
          fun (x37 : t) ->
            fun (x38 : int) ->
              Ojs.set_prop_ascii (t_to_js x37) "weight" (Ojs.int_to_js x38)
        let (get_silent : t -> bool) =
          fun (x39 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x39) "silent")
        let (set_silent : t -> bool -> unit) =
          fun (x40 : t) ->
            fun (x41 : bool) ->
              Ojs.set_prop_ascii (t_to_js x40) "silent" (Ojs.bool_to_js x41)
      end
    module StreamState =
      struct
        type t = http2_StreamState
        let rec t_of_js : Ojs.t -> t =
          fun (x43 : Ojs.t) -> http2_StreamState_of_js x43
        and t_to_js : t -> Ojs.t =
          fun (x42 : http2_StreamState) -> http2_StreamState_to_js x42
        let (get_localWindowSize : t -> int) =
          fun (x44 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x44) "localWindowSize")
        let (set_localWindowSize : t -> int -> unit) =
          fun (x45 : t) ->
            fun (x46 : int) ->
              Ojs.set_prop_ascii (t_to_js x45) "localWindowSize"
                (Ojs.int_to_js x46)
        let (get_state : t -> int) =
          fun (x47 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x47) "state")
        let (set_state : t -> int -> unit) =
          fun (x48 : t) ->
            fun (x49 : int) ->
              Ojs.set_prop_ascii (t_to_js x48) "state" (Ojs.int_to_js x49)
        let (get_localClose : t -> int) =
          fun (x50 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x50) "localClose")
        let (set_localClose : t -> int -> unit) =
          fun (x51 : t) ->
            fun (x52 : int) ->
              Ojs.set_prop_ascii (t_to_js x51) "localClose"
                (Ojs.int_to_js x52)
        let (get_remoteClose : t -> int) =
          fun (x53 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x53) "remoteClose")
        let (set_remoteClose : t -> int -> unit) =
          fun (x54 : t) ->
            fun (x55 : int) ->
              Ojs.set_prop_ascii (t_to_js x54) "remoteClose"
                (Ojs.int_to_js x55)
        let (get_sumDependencyWeight : t -> int) =
          fun (x56 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x56) "sumDependencyWeight")
        let (set_sumDependencyWeight : t -> int -> unit) =
          fun (x57 : t) ->
            fun (x58 : int) ->
              Ojs.set_prop_ascii (t_to_js x57) "sumDependencyWeight"
                (Ojs.int_to_js x58)
        let (get_weight : t -> int) =
          fun (x59 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x59) "weight")
        let (set_weight : t -> int -> unit) =
          fun (x60 : t) ->
            fun (x61 : int) ->
              Ojs.set_prop_ascii (t_to_js x60) "weight" (Ojs.int_to_js x61)
      end
    module ServerStreamResponseOptions =
      struct
        type t = http2_ServerStreamResponseOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x63 : Ojs.t) -> http2_ServerStreamResponseOptions_of_js x63
        and t_to_js : t -> Ojs.t =
          fun (x62 : http2_ServerStreamResponseOptions) ->
            http2_ServerStreamResponseOptions_to_js x62
        let (get_endStream : t -> bool) =
          fun (x64 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x64) "endStream")
        let (set_endStream : t -> bool -> unit) =
          fun (x65 : t) ->
            fun (x66 : bool) ->
              Ojs.set_prop_ascii (t_to_js x65) "endStream"
                (Ojs.bool_to_js x66)
        let (get_waitForTrailers : t -> bool) =
          fun (x67 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x67) "waitForTrailers")
        let (set_waitForTrailers : t -> bool -> unit) =
          fun (x68 : t) ->
            fun (x69 : bool) ->
              Ojs.set_prop_ascii (t_to_js x68) "waitForTrailers"
                (Ojs.bool_to_js x69)
      end
    module StatOptions =
      struct
        type t = http2_StatOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x71 : Ojs.t) -> http2_StatOptions_of_js x71
        and t_to_js : t -> Ojs.t =
          fun (x70 : http2_StatOptions) -> http2_StatOptions_to_js x70
        let (get_offset : t -> int) =
          fun (x72 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x72) "offset")
        let (set_offset : t -> int -> unit) =
          fun (x73 : t) ->
            fun (x74 : int) ->
              Ojs.set_prop_ascii (t_to_js x73) "offset" (Ojs.int_to_js x74)
        let (get_length : t -> int) =
          fun (x75 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x75) "length")
        let (set_length : t -> int -> unit) =
          fun (x76 : t) ->
            fun (x77 : int) ->
              Ojs.set_prop_ascii (t_to_js x76) "length" (Ojs.int_to_js x77)
      end
    module ServerStreamFileResponseOptions =
      struct
        type t = http2_ServerStreamFileResponseOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x79 : Ojs.t) ->
            http2_ServerStreamFileResponseOptions_of_js x79
        and t_to_js : t -> Ojs.t =
          fun (x78 : http2_ServerStreamFileResponseOptions) ->
            http2_ServerStreamFileResponseOptions_to_js x78
        let (statCheck :
          t ->
            stats:Fs.Stats.t ->
              headers:Node_http.Http.OutgoingHttpHeaders.t ->
                statOptions:http2_StatOptions -> unit or_boolean)
          =
          fun (x83 : t) ->
            fun ~stats:(x80 : Fs.Stats.t) ->
              fun ~headers:(x81 : Node_http.Http.OutgoingHttpHeaders.t) ->
                fun ~statOptions:(x82 : http2_StatOptions) ->
                  or_boolean_of_js Ojs.unit_of_js
                    (Ojs.call (t_to_js x83) "statCheck"
                       [|(Fs.Stats.t_to_js x80);(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                                   x81);(http2_StatOptions_to_js
                                                           x82)|])
        let (get_waitForTrailers : t -> bool) =
          fun (x85 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x85) "waitForTrailers")
        let (set_waitForTrailers : t -> bool -> unit) =
          fun (x86 : t) ->
            fun (x87 : bool) ->
              Ojs.set_prop_ascii (t_to_js x86) "waitForTrailers"
                (Ojs.bool_to_js x87)
        let (get_offset : t -> int) =
          fun (x88 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x88) "offset")
        let (set_offset : t -> int -> unit) =
          fun (x89 : t) ->
            fun (x90 : int) ->
              Ojs.set_prop_ascii (t_to_js x89) "offset" (Ojs.int_to_js x90)
        let (get_length : t -> int) =
          fun (x91 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x91) "length")
        let (set_length : t -> int -> unit) =
          fun (x92 : t) ->
            fun (x93 : int) ->
              Ojs.set_prop_ascii (t_to_js x92) "length" (Ojs.int_to_js x93)
      end
    module ServerStreamFileResponseOptionsWithError =
      struct
        type t = http2_ServerStreamFileResponseOptionsWithError
        let rec t_of_js : Ojs.t -> t =
          fun (x95 : Ojs.t) ->
            http2_ServerStreamFileResponseOptionsWithError_of_js x95
        and t_to_js : t -> Ojs.t =
          fun (x94 : http2_ServerStreamFileResponseOptionsWithError) ->
            http2_ServerStreamFileResponseOptionsWithError_to_js x94
        let (onError : t -> err:ErrnoException.t -> unit) =
          fun (x97 : t) ->
            fun ~err:(x96 : ErrnoException.t) ->
              ignore
                (Ojs.call (t_to_js x97) "onError"
                   [|(ErrnoException.t_to_js x96)|])
        let (cast : t -> http2_ServerStreamFileResponseOptions) =
          fun (x98 : t) ->
            http2_ServerStreamFileResponseOptions_of_js (t_to_js x98)
      end
    module Http2Stream =
      struct
        type t = http2_Http2Stream
        let rec t_of_js : Ojs.t -> t =
          fun (x100 : Ojs.t) -> http2_Http2Stream_of_js x100
        and t_to_js : t -> Ojs.t =
          fun (x99 : http2_Http2Stream) -> http2_Http2Stream_to_js x99
        let (get_aborted : t -> bool) =
          fun (x101 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x101) "aborted")
        let (get_bufferSize : t -> int) =
          fun (x102 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x102) "bufferSize")
        let (get_closed : t -> bool) =
          fun (x103 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x103) "closed")
        let (get_destroyed : t -> bool) =
          fun (x104 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x104) "destroyed")
        let (get_endAfterHeaders : t -> bool) =
          fun (x105 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x105) "endAfterHeaders")
        let (get_id : t -> int) =
          fun (x106 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x106) "id")
        let (get_pending : t -> bool) =
          fun (x107 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x107) "pending")
        let (get_rstCode : t -> int) =
          fun (x108 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x108) "rstCode")
        let (get_sentHeaders : t -> Node_http.Http.OutgoingHttpHeaders.t) =
          fun (x109 : t) ->
            Node_http.Http.OutgoingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x109) "sentHeaders")
        let (get_sentInfoHeaders :
          t -> Node_http.Http.OutgoingHttpHeaders.t list) =
          fun (x110 : t) ->
            Ojs.list_of_js Node_http.Http.OutgoingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x110) "sentInfoHeaders")
        let (get_sentTrailers : t -> Node_http.Http.OutgoingHttpHeaders.t) =
          fun (x112 : t) ->
            Node_http.Http.OutgoingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x112) "sentTrailers")
        let (get_session : t -> http2_Http2Session) =
          fun (x113 : t) ->
            http2_Http2Session_of_js
              (Ojs.get_prop_ascii (t_to_js x113) "session")
        let (get_state : t -> http2_StreamState) =
          fun (x114 : t) ->
            http2_StreamState_of_js
              (Ojs.get_prop_ascii (t_to_js x114) "state")
        let (close :
          t -> ?code:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x120 : t) ->
            fun ?code:(x115 : int option) ->
              fun ?callback:(x116 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x121 = t_to_js x120 in
                     Ojs.call (Ojs.get_prop_ascii x121 "close") "apply"
                       [|x121;((let x117 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x115 with
                                 | Some x119 ->
                                     ignore
                                       (Ojs.call x117 "push"
                                          [|(Ojs.int_to_js x119)|])
                                 | None -> ());
                                (match x116 with
                                 | Some x118 ->
                                     ignore
                                       (Ojs.call x117 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x118 ()))|])
                                 | None -> ());
                                x117))|])
        let (priority : t -> options:http2_StreamPriorityOptions -> unit) =
          fun (x123 : t) ->
            fun ~options:(x122 : http2_StreamPriorityOptions) ->
              ignore
                (Ojs.call (t_to_js x123) "priority"
                   [|(http2_StreamPriorityOptions_to_js x122)|])
        let (setTimeout :
          t -> msecs:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x128 : t) ->
            fun ~msecs:(x124 : int) ->
              fun ?callback:(x125 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x129 = t_to_js x128 in
                     Ojs.call (Ojs.get_prop_ascii x129 "setTimeout") "apply"
                       [|x129;((let x126 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x126 "push"
                                     [|(Ojs.int_to_js x124)|]);
                                (match x125 with
                                 | Some x127 ->
                                     ignore
                                       (Ojs.call x126 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x127 ()))|])
                                 | None -> ());
                                x126))|])
        let (sendTrailers :
          t -> headers:Node_http.Http.OutgoingHttpHeaders.t -> unit) =
          fun (x131 : t) ->
            fun ~headers:(x130 : Node_http.Http.OutgoingHttpHeaders.t) ->
              ignore
                (Ojs.call (t_to_js x131) "sendTrailers"
                   [|(Node_http.Http.OutgoingHttpHeaders.t_to_js x130)|])
        let (addListener :
          t -> event:[ `aborted ] -> listener:(unit -> unit) -> t) =
          fun (x134 : t) ->
            fun ~event:(x132 : [ `aborted ]) ->
              fun ~listener:(x133 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x134) "addListener"
                     [|((match x132 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 1 (fun _ -> x133 ()))|])
        let (addListener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x137 : t) ->
            fun ~event:(x135 : [ `close ]) ->
              fun ~listener:(x136 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x137) "addListener"
                     [|((match x135 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x136 ()))|])
        let (addListener'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x142 : t) ->
            fun ~event:(x138 : [ `data ]) ->
              fun ~listener:(x139 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x142) "addListener"
                     [|((match x138 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x140 : Ojs.t) ->
                            x139 ~chunk:(or_string_of_js Buffer.t_of_js x140)))|])
        let (addListener''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x145 : t) ->
            fun ~event:(x143 : [ `drain ]) ->
              fun ~listener:(x144 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x145) "addListener"
                     [|((match x143 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x144 ()))|])
        let (addListener'''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x148 : t) ->
            fun ~event:(x146 : [ `end_ ]) ->
              fun ~listener:(x147 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x148) "addListener"
                     [|((match x146 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x147 ()))|])
        let (addListener''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x152 : t) ->
            fun ~event:(x149 : [ `error ]) ->
              fun ~listener:(x150 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x152) "addListener"
                     [|((match x149 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x151 : Ojs.t) ->
                            x150 ~err:(Error.t_of_js x151)))|])
        let (addListener'''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x155 : t) ->
            fun ~event:(x153 : [ `finish ]) ->
              fun ~listener:(x154 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x155) "addListener"
                     [|((match x153 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x154 ()))|])
        let (addListener''''''' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int -> errorCode:int -> unit) -> t)
          =
          fun (x160 : t) ->
            fun ~event:(x156 : [ `frameError ]) ->
              fun ~listener:(x157 : frameType:int -> errorCode:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x160) "addListener"
                     [|((match x156 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 2
                         (fun (x158 : Ojs.t) ->
                            fun (x159 : Ojs.t) ->
                              x157 ~frameType:(Ojs.int_of_js x158)
                                ~errorCode:(Ojs.int_of_js x159)))|])
        let (addListener'''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x164 : t) ->
            fun ~event:(x161 : [ `pipe ]) ->
              fun ~listener:(x162 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x164) "addListener"
                     [|((match x161 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x163 : Ojs.t) ->
                            x162 ~src:(Stream.Readable.t_of_js x163)))|])
        let (addListener''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x168 : t) ->
            fun ~event:(x165 : [ `unpipe ]) ->
              fun ~listener:(x166 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x168) "addListener"
                     [|((match x165 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x167 :
                                                                    Ojs.t) ->
                                                                    x166
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x167)))|])
        let (addListener'''''''''' :
          t -> event:[ `streamClosed ] -> listener:(code:int -> unit) -> t) =
          fun (x172 : t) ->
            fun ~event:(x169 : [ `streamClosed ]) ->
              fun ~listener:(x170 : code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x172) "addListener"
                     [|((match x169 with
                         | `streamClosed -> Ojs.string_to_js "streamClosed"));(
                       Ojs.fun_to_js 1
                         (fun (x171 : Ojs.t) ->
                            x170 ~code:(Ojs.int_of_js x171)))|])
        let (addListener''''''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x175 : t) ->
            fun ~event:(x173 : [ `timeout ]) ->
              fun ~listener:(x174 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x175) "addListener"
                     [|((match x173 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x174 ()))|])
        let (addListener'''''''''''' :
          t ->
            event:[ `trailers ] ->
              listener:(trailers:http2_IncomingHttpHeaders ->
                          flags:int -> unit)
                -> t)
          =
          fun (x180 : t) ->
            fun ~event:(x176 : [ `trailers ]) ->
              fun
                ~listener:(x177 :
                            trailers:http2_IncomingHttpHeaders ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x180) "addListener"
                     [|((match x176 with
                         | `trailers -> Ojs.string_to_js "trailers"));(
                       Ojs.fun_to_js 2
                         (fun (x178 : Ojs.t) ->
                            fun (x179 : Ojs.t) ->
                              x177
                                ~trailers:(http2_IncomingHttpHeaders_of_js
                                             x178)
                                ~flags:(Ojs.int_of_js x179)))|])
        let (addListener''''''''''''' :
          t -> event:[ `wantTrailers ] -> listener:(unit -> unit) -> t) =
          fun (x183 : t) ->
            fun ~event:(x181 : [ `wantTrailers ]) ->
              fun ~listener:(x182 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x183) "addListener"
                     [|((match x181 with
                         | `wantTrailers -> Ojs.string_to_js "wantTrailers"));(
                       Ojs.fun_to_js 1 (fun _ -> x182 ()))|])
        let (addListener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x189 : t) ->
            fun ~event:(x184 : symbol or_string) ->
              fun ~listener:(x186 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x189) "addListener"
                     [|(or_string_to_js symbol_to_js x184);(Ojs.fun_to_js_args
                                                              (fun (x187 : _)
                                                                 ->
                                                                 x186
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x187 0)))|])
        let (emit : t -> event:[ `aborted ] -> bool) =
          fun (x191 : t) ->
            fun ~event:(x190 : [ `aborted ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x191) "emit"
                   [|((match x190 with
                       | `aborted -> Ojs.string_to_js "aborted"))|])
        let (emit' : t -> event:[ `close ] -> bool) =
          fun (x193 : t) ->
            fun ~event:(x192 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x193) "emit"
                   [|((match x192 with | `close -> Ojs.string_to_js "close"))|])
        let (emit'' :
          t -> event:[ `data ] -> chunk:Buffer.t or_string -> bool) =
          fun (x197 : t) ->
            fun ~event:(x194 : [ `data ]) ->
              fun ~chunk:(x195 : Buffer.t or_string) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x197) "emit"
                     [|((match x194 with | `data -> Ojs.string_to_js "data"));(
                       or_string_to_js Buffer.t_to_js x195)|])
        let (emit''' : t -> event:[ `drain ] -> bool) =
          fun (x199 : t) ->
            fun ~event:(x198 : [ `drain ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x199) "emit"
                   [|((match x198 with | `drain -> Ojs.string_to_js "drain"))|])
        let (emit'''' : t -> event:[ `end_ ] -> bool) =
          fun (x201 : t) ->
            fun ~event:(x200 : [ `end_ ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x201) "emit"
                   [|((match x200 with | `end_ -> Ojs.string_to_js "end"))|])
        let (emit''''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x204 : t) ->
            fun ~event:(x202 : [ `error ]) ->
              fun ~err:(x203 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x204) "emit"
                     [|((match x202 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x203)|])
        let (emit'''''' : t -> event:[ `finish ] -> bool) =
          fun (x206 : t) ->
            fun ~event:(x205 : [ `finish ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x206) "emit"
                   [|((match x205 with | `finish -> Ojs.string_to_js "finish"))|])
        let (emit''''''' :
          t ->
            event:[ `frameError ] -> frameType:int -> errorCode:int -> bool)
          =
          fun (x210 : t) ->
            fun ~event:(x207 : [ `frameError ]) ->
              fun ~frameType:(x208 : int) ->
                fun ~errorCode:(x209 : int) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x210) "emit"
                       [|((match x207 with
                           | `frameError -> Ojs.string_to_js "frameError"));(
                         Ojs.int_to_js x208);(Ojs.int_to_js x209)|])
        let (emit'''''''' :
          t -> event:[ `pipe ] -> src:Stream.Readable.t -> bool) =
          fun (x213 : t) ->
            fun ~event:(x211 : [ `pipe ]) ->
              fun ~src:(x212 : Stream.Readable.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x213) "emit"
                     [|((match x211 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Stream.Readable.t_to_js x212)|])
        let (emit''''''''' :
          t -> event:[ `unpipe ] -> src:Stream.Readable.t -> bool) =
          fun (x216 : t) ->
            fun ~event:(x214 : [ `unpipe ]) ->
              fun ~src:(x215 : Stream.Readable.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x216) "emit"
                     [|((match x214 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Stream.Readable.t_to_js
                                                                    x215)|])
        let (emit'''''''''' :
          t -> event:[ `streamClosed ] -> code:int -> bool) =
          fun (x219 : t) ->
            fun ~event:(x217 : [ `streamClosed ]) ->
              fun ~code:(x218 : int) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x219) "emit"
                     [|((match x217 with
                         | `streamClosed -> Ojs.string_to_js "streamClosed"));(
                       Ojs.int_to_js x218)|])
        let (emit''''''''''' : t -> event:[ `timeout ] -> bool) =
          fun (x221 : t) ->
            fun ~event:(x220 : [ `timeout ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x221) "emit"
                   [|((match x220 with
                       | `timeout -> Ojs.string_to_js "timeout"))|])
        let (emit'''''''''''' :
          t ->
            event:[ `trailers ] ->
              trailers:http2_IncomingHttpHeaders -> flags:int -> bool)
          =
          fun (x225 : t) ->
            fun ~event:(x222 : [ `trailers ]) ->
              fun ~trailers:(x223 : http2_IncomingHttpHeaders) ->
                fun ~flags:(x224 : int) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x225) "emit"
                       [|((match x222 with
                           | `trailers -> Ojs.string_to_js "trailers"));(
                         http2_IncomingHttpHeaders_to_js x223);(Ojs.int_to_js
                                                                  x224)|])
        let (emit''''''''''''' : t -> event:[ `wantTrailers ] -> bool) =
          fun (x227 : t) ->
            fun ~event:(x226 : [ `wantTrailers ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x227) "emit"
                   [|((match x226 with
                       | `wantTrailers -> Ojs.string_to_js "wantTrailers"))|])
        let (emit'''''''''''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x233 : t) ->
            fun ~event:(x228 : symbol or_string) ->
              fun ~args:(x229 : any list) ->
                Ojs.bool_of_js
                  (let x234 = t_to_js x233 in
                   Ojs.call (Ojs.get_prop_ascii x234 "emit") "apply"
                     [|x234;((let x230 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x230 "push"
                                   [|(or_string_to_js symbol_to_js x228)|]);
                              List.iter
                                (fun (x231 : any) ->
                                   ignore
                                     (Ojs.call x230 "push"
                                        [|(any_to_js x231)|])) x229;
                              x230))|])
        let (on : t -> event:[ `aborted ] -> listener:(unit -> unit) -> t) =
          fun (x237 : t) ->
            fun ~event:(x235 : [ `aborted ]) ->
              fun ~listener:(x236 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x237) "on"
                     [|((match x235 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 1 (fun _ -> x236 ()))|])
        let (on' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x240 : t) ->
            fun ~event:(x238 : [ `close ]) ->
              fun ~listener:(x239 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x240) "on"
                     [|((match x238 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x239 ()))|])
        let (on'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x245 : t) ->
            fun ~event:(x241 : [ `data ]) ->
              fun ~listener:(x242 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x245) "on"
                     [|((match x241 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x243 : Ojs.t) ->
                            x242 ~chunk:(or_string_of_js Buffer.t_of_js x243)))|])
        let (on''' : t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x248 : t) ->
            fun ~event:(x246 : [ `drain ]) ->
              fun ~listener:(x247 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x248) "on"
                     [|((match x246 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x247 ()))|])
        let (on'''' : t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x251 : t) ->
            fun ~event:(x249 : [ `end_ ]) ->
              fun ~listener:(x250 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x251) "on"
                     [|((match x249 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x250 ()))|])
        let (on''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x255 : t) ->
            fun ~event:(x252 : [ `error ]) ->
              fun ~listener:(x253 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x255) "on"
                     [|((match x252 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x254 : Ojs.t) ->
                            x253 ~err:(Error.t_of_js x254)))|])
        let (on'''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x258 : t) ->
            fun ~event:(x256 : [ `finish ]) ->
              fun ~listener:(x257 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x258) "on"
                     [|((match x256 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x257 ()))|])
        let (on''''''' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int -> errorCode:int -> unit) -> t)
          =
          fun (x263 : t) ->
            fun ~event:(x259 : [ `frameError ]) ->
              fun ~listener:(x260 : frameType:int -> errorCode:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x263) "on"
                     [|((match x259 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 2
                         (fun (x261 : Ojs.t) ->
                            fun (x262 : Ojs.t) ->
                              x260 ~frameType:(Ojs.int_of_js x261)
                                ~errorCode:(Ojs.int_of_js x262)))|])
        let (on'''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x267 : t) ->
            fun ~event:(x264 : [ `pipe ]) ->
              fun ~listener:(x265 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x267) "on"
                     [|((match x264 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x266 : Ojs.t) ->
                            x265 ~src:(Stream.Readable.t_of_js x266)))|])
        let (on''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x271 : t) ->
            fun ~event:(x268 : [ `unpipe ]) ->
              fun ~listener:(x269 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x271) "on"
                     [|((match x268 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x270 :
                                                                    Ojs.t) ->
                                                                    x269
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x270)))|])
        let (on'''''''''' :
          t -> event:[ `streamClosed ] -> listener:(code:int -> unit) -> t) =
          fun (x275 : t) ->
            fun ~event:(x272 : [ `streamClosed ]) ->
              fun ~listener:(x273 : code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x275) "on"
                     [|((match x272 with
                         | `streamClosed -> Ojs.string_to_js "streamClosed"));(
                       Ojs.fun_to_js 1
                         (fun (x274 : Ojs.t) ->
                            x273 ~code:(Ojs.int_of_js x274)))|])
        let (on''''''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x278 : t) ->
            fun ~event:(x276 : [ `timeout ]) ->
              fun ~listener:(x277 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x278) "on"
                     [|((match x276 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x277 ()))|])
        let (on'''''''''''' :
          t ->
            event:[ `trailers ] ->
              listener:(trailers:http2_IncomingHttpHeaders ->
                          flags:int -> unit)
                -> t)
          =
          fun (x283 : t) ->
            fun ~event:(x279 : [ `trailers ]) ->
              fun
                ~listener:(x280 :
                            trailers:http2_IncomingHttpHeaders ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x283) "on"
                     [|((match x279 with
                         | `trailers -> Ojs.string_to_js "trailers"));(
                       Ojs.fun_to_js 2
                         (fun (x281 : Ojs.t) ->
                            fun (x282 : Ojs.t) ->
                              x280
                                ~trailers:(http2_IncomingHttpHeaders_of_js
                                             x281)
                                ~flags:(Ojs.int_of_js x282)))|])
        let (on''''''''''''' :
          t -> event:[ `wantTrailers ] -> listener:(unit -> unit) -> t) =
          fun (x286 : t) ->
            fun ~event:(x284 : [ `wantTrailers ]) ->
              fun ~listener:(x285 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x286) "on"
                     [|((match x284 with
                         | `wantTrailers -> Ojs.string_to_js "wantTrailers"));(
                       Ojs.fun_to_js 1 (fun _ -> x285 ()))|])
        let (on'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x292 : t) ->
            fun ~event:(x287 : symbol or_string) ->
              fun ~listener:(x289 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x292) "on"
                     [|(or_string_to_js symbol_to_js x287);(Ojs.fun_to_js_args
                                                              (fun (x290 : _)
                                                                 ->
                                                                 x289
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x290 0)))|])
        let (once : t -> event:[ `aborted ] -> listener:(unit -> unit) -> t)
          =
          fun (x295 : t) ->
            fun ~event:(x293 : [ `aborted ]) ->
              fun ~listener:(x294 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x295) "once"
                     [|((match x293 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 1 (fun _ -> x294 ()))|])
        let (once' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x298 : t) ->
            fun ~event:(x296 : [ `close ]) ->
              fun ~listener:(x297 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x298) "once"
                     [|((match x296 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x297 ()))|])
        let (once'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x303 : t) ->
            fun ~event:(x299 : [ `data ]) ->
              fun ~listener:(x300 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x303) "once"
                     [|((match x299 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x301 : Ojs.t) ->
                            x300 ~chunk:(or_string_of_js Buffer.t_of_js x301)))|])
        let (once''' : t -> event:[ `drain ] -> listener:(unit -> unit) -> t)
          =
          fun (x306 : t) ->
            fun ~event:(x304 : [ `drain ]) ->
              fun ~listener:(x305 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x306) "once"
                     [|((match x304 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x305 ()))|])
        let (once'''' : t -> event:[ `end_ ] -> listener:(unit -> unit) -> t)
          =
          fun (x309 : t) ->
            fun ~event:(x307 : [ `end_ ]) ->
              fun ~listener:(x308 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x309) "once"
                     [|((match x307 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x308 ()))|])
        let (once''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x313 : t) ->
            fun ~event:(x310 : [ `error ]) ->
              fun ~listener:(x311 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x313) "once"
                     [|((match x310 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x312 : Ojs.t) ->
                            x311 ~err:(Error.t_of_js x312)))|])
        let (once'''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x316 : t) ->
            fun ~event:(x314 : [ `finish ]) ->
              fun ~listener:(x315 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x316) "once"
                     [|((match x314 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x315 ()))|])
        let (once''''''' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int -> errorCode:int -> unit) -> t)
          =
          fun (x321 : t) ->
            fun ~event:(x317 : [ `frameError ]) ->
              fun ~listener:(x318 : frameType:int -> errorCode:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x321) "once"
                     [|((match x317 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 2
                         (fun (x319 : Ojs.t) ->
                            fun (x320 : Ojs.t) ->
                              x318 ~frameType:(Ojs.int_of_js x319)
                                ~errorCode:(Ojs.int_of_js x320)))|])
        let (once'''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x325 : t) ->
            fun ~event:(x322 : [ `pipe ]) ->
              fun ~listener:(x323 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x325) "once"
                     [|((match x322 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x324 : Ojs.t) ->
                            x323 ~src:(Stream.Readable.t_of_js x324)))|])
        let (once''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x329 : t) ->
            fun ~event:(x326 : [ `unpipe ]) ->
              fun ~listener:(x327 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x329) "once"
                     [|((match x326 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x328 :
                                                                    Ojs.t) ->
                                                                    x327
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x328)))|])
        let (once'''''''''' :
          t -> event:[ `streamClosed ] -> listener:(code:int -> unit) -> t) =
          fun (x333 : t) ->
            fun ~event:(x330 : [ `streamClosed ]) ->
              fun ~listener:(x331 : code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x333) "once"
                     [|((match x330 with
                         | `streamClosed -> Ojs.string_to_js "streamClosed"));(
                       Ojs.fun_to_js 1
                         (fun (x332 : Ojs.t) ->
                            x331 ~code:(Ojs.int_of_js x332)))|])
        let (once''''''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x336 : t) ->
            fun ~event:(x334 : [ `timeout ]) ->
              fun ~listener:(x335 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x336) "once"
                     [|((match x334 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x335 ()))|])
        let (once'''''''''''' :
          t ->
            event:[ `trailers ] ->
              listener:(trailers:http2_IncomingHttpHeaders ->
                          flags:int -> unit)
                -> t)
          =
          fun (x341 : t) ->
            fun ~event:(x337 : [ `trailers ]) ->
              fun
                ~listener:(x338 :
                            trailers:http2_IncomingHttpHeaders ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x341) "once"
                     [|((match x337 with
                         | `trailers -> Ojs.string_to_js "trailers"));(
                       Ojs.fun_to_js 2
                         (fun (x339 : Ojs.t) ->
                            fun (x340 : Ojs.t) ->
                              x338
                                ~trailers:(http2_IncomingHttpHeaders_of_js
                                             x339)
                                ~flags:(Ojs.int_of_js x340)))|])
        let (once''''''''''''' :
          t -> event:[ `wantTrailers ] -> listener:(unit -> unit) -> t) =
          fun (x344 : t) ->
            fun ~event:(x342 : [ `wantTrailers ]) ->
              fun ~listener:(x343 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x344) "once"
                     [|((match x342 with
                         | `wantTrailers -> Ojs.string_to_js "wantTrailers"));(
                       Ojs.fun_to_js 1 (fun _ -> x343 ()))|])
        let (once'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x350 : t) ->
            fun ~event:(x345 : symbol or_string) ->
              fun ~listener:(x347 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x350) "once"
                     [|(or_string_to_js symbol_to_js x345);(Ojs.fun_to_js_args
                                                              (fun (x348 : _)
                                                                 ->
                                                                 x347
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x348 0)))|])
        let (prependListener :
          t -> event:[ `aborted ] -> listener:(unit -> unit) -> t) =
          fun (x353 : t) ->
            fun ~event:(x351 : [ `aborted ]) ->
              fun ~listener:(x352 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x353) "prependListener"
                     [|((match x351 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 1 (fun _ -> x352 ()))|])
        let (prependListener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x356 : t) ->
            fun ~event:(x354 : [ `close ]) ->
              fun ~listener:(x355 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x356) "prependListener"
                     [|((match x354 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x355 ()))|])
        let (prependListener'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x361 : t) ->
            fun ~event:(x357 : [ `data ]) ->
              fun ~listener:(x358 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x361) "prependListener"
                     [|((match x357 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x359 : Ojs.t) ->
                            x358 ~chunk:(or_string_of_js Buffer.t_of_js x359)))|])
        let (prependListener''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x364 : t) ->
            fun ~event:(x362 : [ `drain ]) ->
              fun ~listener:(x363 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x364) "prependListener"
                     [|((match x362 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x363 ()))|])
        let (prependListener'''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x367 : t) ->
            fun ~event:(x365 : [ `end_ ]) ->
              fun ~listener:(x366 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x367) "prependListener"
                     [|((match x365 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x366 ()))|])
        let (prependListener''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x371 : t) ->
            fun ~event:(x368 : [ `error ]) ->
              fun ~listener:(x369 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x371) "prependListener"
                     [|((match x368 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x370 : Ojs.t) ->
                            x369 ~err:(Error.t_of_js x370)))|])
        let (prependListener'''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x374 : t) ->
            fun ~event:(x372 : [ `finish ]) ->
              fun ~listener:(x373 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x374) "prependListener"
                     [|((match x372 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x373 ()))|])
        let (prependListener''''''' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int -> errorCode:int -> unit) -> t)
          =
          fun (x379 : t) ->
            fun ~event:(x375 : [ `frameError ]) ->
              fun ~listener:(x376 : frameType:int -> errorCode:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x379) "prependListener"
                     [|((match x375 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 2
                         (fun (x377 : Ojs.t) ->
                            fun (x378 : Ojs.t) ->
                              x376 ~frameType:(Ojs.int_of_js x377)
                                ~errorCode:(Ojs.int_of_js x378)))|])
        let (prependListener'''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x383 : t) ->
            fun ~event:(x380 : [ `pipe ]) ->
              fun ~listener:(x381 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x383) "prependListener"
                     [|((match x380 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x382 : Ojs.t) ->
                            x381 ~src:(Stream.Readable.t_of_js x382)))|])
        let (prependListener''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x387 : t) ->
            fun ~event:(x384 : [ `unpipe ]) ->
              fun ~listener:(x385 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x387) "prependListener"
                     [|((match x384 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x386 :
                                                                    Ojs.t) ->
                                                                    x385
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x386)))|])
        let (prependListener'''''''''' :
          t -> event:[ `streamClosed ] -> listener:(code:int -> unit) -> t) =
          fun (x391 : t) ->
            fun ~event:(x388 : [ `streamClosed ]) ->
              fun ~listener:(x389 : code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x391) "prependListener"
                     [|((match x388 with
                         | `streamClosed -> Ojs.string_to_js "streamClosed"));(
                       Ojs.fun_to_js 1
                         (fun (x390 : Ojs.t) ->
                            x389 ~code:(Ojs.int_of_js x390)))|])
        let (prependListener''''''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x394 : t) ->
            fun ~event:(x392 : [ `timeout ]) ->
              fun ~listener:(x393 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x394) "prependListener"
                     [|((match x392 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x393 ()))|])
        let (prependListener'''''''''''' :
          t ->
            event:[ `trailers ] ->
              listener:(trailers:http2_IncomingHttpHeaders ->
                          flags:int -> unit)
                -> t)
          =
          fun (x399 : t) ->
            fun ~event:(x395 : [ `trailers ]) ->
              fun
                ~listener:(x396 :
                            trailers:http2_IncomingHttpHeaders ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x399) "prependListener"
                     [|((match x395 with
                         | `trailers -> Ojs.string_to_js "trailers"));(
                       Ojs.fun_to_js 2
                         (fun (x397 : Ojs.t) ->
                            fun (x398 : Ojs.t) ->
                              x396
                                ~trailers:(http2_IncomingHttpHeaders_of_js
                                             x397)
                                ~flags:(Ojs.int_of_js x398)))|])
        let (prependListener''''''''''''' :
          t -> event:[ `wantTrailers ] -> listener:(unit -> unit) -> t) =
          fun (x402 : t) ->
            fun ~event:(x400 : [ `wantTrailers ]) ->
              fun ~listener:(x401 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x402) "prependListener"
                     [|((match x400 with
                         | `wantTrailers -> Ojs.string_to_js "wantTrailers"));(
                       Ojs.fun_to_js 1 (fun _ -> x401 ()))|])
        let (prependListener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x408 : t) ->
            fun ~event:(x403 : symbol or_string) ->
              fun ~listener:(x405 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x408) "prependListener"
                     [|(or_string_to_js symbol_to_js x403);(Ojs.fun_to_js_args
                                                              (fun (x406 : _)
                                                                 ->
                                                                 x405
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x406 0)))|])
        let (prependOnceListener :
          t -> event:[ `aborted ] -> listener:(unit -> unit) -> t) =
          fun (x411 : t) ->
            fun ~event:(x409 : [ `aborted ]) ->
              fun ~listener:(x410 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x411) "prependOnceListener"
                     [|((match x409 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 1 (fun _ -> x410 ()))|])
        let (prependOnceListener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x414 : t) ->
            fun ~event:(x412 : [ `close ]) ->
              fun ~listener:(x413 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x414) "prependOnceListener"
                     [|((match x412 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x413 ()))|])
        let (prependOnceListener'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x419 : t) ->
            fun ~event:(x415 : [ `data ]) ->
              fun ~listener:(x416 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x419) "prependOnceListener"
                     [|((match x415 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x417 : Ojs.t) ->
                            x416 ~chunk:(or_string_of_js Buffer.t_of_js x417)))|])
        let (prependOnceListener''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x422 : t) ->
            fun ~event:(x420 : [ `drain ]) ->
              fun ~listener:(x421 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x422) "prependOnceListener"
                     [|((match x420 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x421 ()))|])
        let (prependOnceListener'''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x425 : t) ->
            fun ~event:(x423 : [ `end_ ]) ->
              fun ~listener:(x424 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x425) "prependOnceListener"
                     [|((match x423 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x424 ()))|])
        let (prependOnceListener''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x429 : t) ->
            fun ~event:(x426 : [ `error ]) ->
              fun ~listener:(x427 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x429) "prependOnceListener"
                     [|((match x426 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x428 : Ojs.t) ->
                            x427 ~err:(Error.t_of_js x428)))|])
        let (prependOnceListener'''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x432 : t) ->
            fun ~event:(x430 : [ `finish ]) ->
              fun ~listener:(x431 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x432) "prependOnceListener"
                     [|((match x430 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x431 ()))|])
        let (prependOnceListener''''''' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int -> errorCode:int -> unit) -> t)
          =
          fun (x437 : t) ->
            fun ~event:(x433 : [ `frameError ]) ->
              fun ~listener:(x434 : frameType:int -> errorCode:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x437) "prependOnceListener"
                     [|((match x433 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 2
                         (fun (x435 : Ojs.t) ->
                            fun (x436 : Ojs.t) ->
                              x434 ~frameType:(Ojs.int_of_js x435)
                                ~errorCode:(Ojs.int_of_js x436)))|])
        let (prependOnceListener'''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x441 : t) ->
            fun ~event:(x438 : [ `pipe ]) ->
              fun ~listener:(x439 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x441) "prependOnceListener"
                     [|((match x438 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x440 : Ojs.t) ->
                            x439 ~src:(Stream.Readable.t_of_js x440)))|])
        let (prependOnceListener''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x445 : t) ->
            fun ~event:(x442 : [ `unpipe ]) ->
              fun ~listener:(x443 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x445) "prependOnceListener"
                     [|((match x442 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x444 :
                                                                    Ojs.t) ->
                                                                    x443
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x444)))|])
        let (prependOnceListener'''''''''' :
          t -> event:[ `streamClosed ] -> listener:(code:int -> unit) -> t) =
          fun (x449 : t) ->
            fun ~event:(x446 : [ `streamClosed ]) ->
              fun ~listener:(x447 : code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x449) "prependOnceListener"
                     [|((match x446 with
                         | `streamClosed -> Ojs.string_to_js "streamClosed"));(
                       Ojs.fun_to_js 1
                         (fun (x448 : Ojs.t) ->
                            x447 ~code:(Ojs.int_of_js x448)))|])
        let (prependOnceListener''''''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x452 : t) ->
            fun ~event:(x450 : [ `timeout ]) ->
              fun ~listener:(x451 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x452) "prependOnceListener"
                     [|((match x450 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x451 ()))|])
        let (prependOnceListener'''''''''''' :
          t ->
            event:[ `trailers ] ->
              listener:(trailers:http2_IncomingHttpHeaders ->
                          flags:int -> unit)
                -> t)
          =
          fun (x457 : t) ->
            fun ~event:(x453 : [ `trailers ]) ->
              fun
                ~listener:(x454 :
                            trailers:http2_IncomingHttpHeaders ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x457) "prependOnceListener"
                     [|((match x453 with
                         | `trailers -> Ojs.string_to_js "trailers"));(
                       Ojs.fun_to_js 2
                         (fun (x455 : Ojs.t) ->
                            fun (x456 : Ojs.t) ->
                              x454
                                ~trailers:(http2_IncomingHttpHeaders_of_js
                                             x455)
                                ~flags:(Ojs.int_of_js x456)))|])
        let (prependOnceListener''''''''''''' :
          t -> event:[ `wantTrailers ] -> listener:(unit -> unit) -> t) =
          fun (x460 : t) ->
            fun ~event:(x458 : [ `wantTrailers ]) ->
              fun ~listener:(x459 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x460) "prependOnceListener"
                     [|((match x458 with
                         | `wantTrailers -> Ojs.string_to_js "wantTrailers"));(
                       Ojs.fun_to_js 1 (fun _ -> x459 ()))|])
        let (prependOnceListener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x466 : t) ->
            fun ~event:(x461 : symbol or_string) ->
              fun ~listener:(x463 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x466) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x461);(Ojs.fun_to_js_args
                                                              (fun (x464 : _)
                                                                 ->
                                                                 x463
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x464 0)))|])
        let (cast : t -> Stream.Duplex.t) =
          fun (x467 : t) -> Stream.Duplex.t_of_js (t_to_js x467)
      end
    module ClientHttp2Stream =
      struct
        type t = http2_ClientHttp2Stream
        let rec t_of_js : Ojs.t -> t =
          fun (x469 : Ojs.t) -> http2_ClientHttp2Stream_of_js x469
        and t_to_js : t -> Ojs.t =
          fun (x468 : http2_ClientHttp2Stream) ->
            http2_ClientHttp2Stream_to_js x468
        let (addListener :
          t ->
            event:[ `continue ] ->
              listener:(unit -> AnonymousInterface0.t) -> t)
          =
          fun (x472 : t) ->
            fun ~event:(x470 : [ `continue ]) ->
              fun ~listener:(x471 : unit -> AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x472) "addListener"
                     [|((match x470 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1
                         (fun _ -> AnonymousInterface0.t_to_js (x471 ())))|])
        let (addListener' :
          t ->
            event:[ `headers ] ->
              listener:(headers:(http2_IncomingHttpHeaders,
                          http2_IncomingHttpStatusHeader) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x479 : t) ->
            fun ~event:(x473 : [ `headers ]) ->
              fun
                ~listener:(x474 :
                            headers:(http2_IncomingHttpHeaders,
                              http2_IncomingHttpStatusHeader) intersection2
                              -> flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x479) "addListener"
                     [|((match x473 with
                         | `headers -> Ojs.string_to_js "headers"));(
                       Ojs.fun_to_js 2
                         (fun (x475 : Ojs.t) ->
                            fun (x478 : Ojs.t) ->
                              x474
                                ~headers:(intersection2_of_js
                                            http2_IncomingHttpHeaders_of_js
                                            http2_IncomingHttpStatusHeader_of_js
                                            x475) ~flags:(Ojs.int_of_js x478)))|])
        let (addListener'' :
          t ->
            event:[ `push ] ->
              listener:(headers:http2_IncomingHttpHeaders ->
                          flags:int -> unit)
                -> t)
          =
          fun (x484 : t) ->
            fun ~event:(x480 : [ `push ]) ->
              fun
                ~listener:(x481 :
                            headers:http2_IncomingHttpHeaders ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x484) "addListener"
                     [|((match x480 with | `push -> Ojs.string_to_js "push"));(
                       Ojs.fun_to_js 2
                         (fun (x482 : Ojs.t) ->
                            fun (x483 : Ojs.t) ->
                              x481
                                ~headers:(http2_IncomingHttpHeaders_of_js
                                            x482) ~flags:(Ojs.int_of_js x483)))|])
        let (addListener''' :
          t ->
            event:[ `response ] ->
              listener:(headers:(http2_IncomingHttpHeaders,
                          http2_IncomingHttpStatusHeader) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x491 : t) ->
            fun ~event:(x485 : [ `response ]) ->
              fun
                ~listener:(x486 :
                            headers:(http2_IncomingHttpHeaders,
                              http2_IncomingHttpStatusHeader) intersection2
                              -> flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x491) "addListener"
                     [|((match x485 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 2
                         (fun (x487 : Ojs.t) ->
                            fun (x490 : Ojs.t) ->
                              x486
                                ~headers:(intersection2_of_js
                                            http2_IncomingHttpHeaders_of_js
                                            http2_IncomingHttpStatusHeader_of_js
                                            x487) ~flags:(Ojs.int_of_js x490)))|])
        let (addListener'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x497 : t) ->
            fun ~event:(x492 : symbol or_string) ->
              fun ~listener:(x494 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x497) "addListener"
                     [|(or_string_to_js symbol_to_js x492);(Ojs.fun_to_js_args
                                                              (fun (x495 : _)
                                                                 ->
                                                                 x494
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x495 0)))|])
        let (emit : t -> event:[ `continue ] -> bool) =
          fun (x499 : t) ->
            fun ~event:(x498 : [ `continue ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x499) "emit"
                   [|((match x498 with
                       | `continue -> Ojs.string_to_js "continue"))|])
        let (emit' :
          t ->
            event:[ `headers ] ->
              headers:(http2_IncomingHttpHeaders,
                http2_IncomingHttpStatusHeader) intersection2 ->
                flags:int -> bool)
          =
          fun (x505 : t) ->
            fun ~event:(x500 : [ `headers ]) ->
              fun
                ~headers:(x501 :
                           (http2_IncomingHttpHeaders,
                             http2_IncomingHttpStatusHeader) intersection2)
                ->
                fun ~flags:(x504 : int) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x505) "emit"
                       [|((match x500 with
                           | `headers -> Ojs.string_to_js "headers"));(
                         intersection2_to_js http2_IncomingHttpHeaders_to_js
                           http2_IncomingHttpStatusHeader_to_js x501);(
                         Ojs.int_to_js x504)|])
        let (emit'' :
          t ->
            event:[ `push ] ->
              headers:http2_IncomingHttpHeaders -> flags:int -> bool)
          =
          fun (x509 : t) ->
            fun ~event:(x506 : [ `push ]) ->
              fun ~headers:(x507 : http2_IncomingHttpHeaders) ->
                fun ~flags:(x508 : int) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x509) "emit"
                       [|((match x506 with | `push -> Ojs.string_to_js "push"));(
                         http2_IncomingHttpHeaders_to_js x507);(Ojs.int_to_js
                                                                  x508)|])
        let (emit''' :
          t ->
            event:[ `response ] ->
              headers:(http2_IncomingHttpHeaders,
                http2_IncomingHttpStatusHeader) intersection2 ->
                flags:int -> bool)
          =
          fun (x515 : t) ->
            fun ~event:(x510 : [ `response ]) ->
              fun
                ~headers:(x511 :
                           (http2_IncomingHttpHeaders,
                             http2_IncomingHttpStatusHeader) intersection2)
                ->
                fun ~flags:(x514 : int) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x515) "emit"
                       [|((match x510 with
                           | `response -> Ojs.string_to_js "response"));(
                         intersection2_to_js http2_IncomingHttpHeaders_to_js
                           http2_IncomingHttpStatusHeader_to_js x511);(
                         Ojs.int_to_js x514)|])
        let (emit'''' : t -> event:symbol or_string -> args:any list -> bool)
          =
          fun (x521 : t) ->
            fun ~event:(x516 : symbol or_string) ->
              fun ~args:(x517 : any list) ->
                Ojs.bool_of_js
                  (let x522 = t_to_js x521 in
                   Ojs.call (Ojs.get_prop_ascii x522 "emit") "apply"
                     [|x522;((let x518 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x518 "push"
                                   [|(or_string_to_js symbol_to_js x516)|]);
                              List.iter
                                (fun (x519 : any) ->
                                   ignore
                                     (Ojs.call x518 "push"
                                        [|(any_to_js x519)|])) x517;
                              x518))|])
        let (on :
          t ->
            event:[ `continue ] ->
              listener:(unit -> AnonymousInterface0.t) -> t)
          =
          fun (x525 : t) ->
            fun ~event:(x523 : [ `continue ]) ->
              fun ~listener:(x524 : unit -> AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x525) "on"
                     [|((match x523 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1
                         (fun _ -> AnonymousInterface0.t_to_js (x524 ())))|])
        let (on' :
          t ->
            event:[ `headers ] ->
              listener:(headers:(http2_IncomingHttpHeaders,
                          http2_IncomingHttpStatusHeader) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x532 : t) ->
            fun ~event:(x526 : [ `headers ]) ->
              fun
                ~listener:(x527 :
                            headers:(http2_IncomingHttpHeaders,
                              http2_IncomingHttpStatusHeader) intersection2
                              -> flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x532) "on"
                     [|((match x526 with
                         | `headers -> Ojs.string_to_js "headers"));(
                       Ojs.fun_to_js 2
                         (fun (x528 : Ojs.t) ->
                            fun (x531 : Ojs.t) ->
                              x527
                                ~headers:(intersection2_of_js
                                            http2_IncomingHttpHeaders_of_js
                                            http2_IncomingHttpStatusHeader_of_js
                                            x528) ~flags:(Ojs.int_of_js x531)))|])
        let (on'' :
          t ->
            event:[ `push ] ->
              listener:(headers:http2_IncomingHttpHeaders ->
                          flags:int -> unit)
                -> t)
          =
          fun (x537 : t) ->
            fun ~event:(x533 : [ `push ]) ->
              fun
                ~listener:(x534 :
                            headers:http2_IncomingHttpHeaders ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x537) "on"
                     [|((match x533 with | `push -> Ojs.string_to_js "push"));(
                       Ojs.fun_to_js 2
                         (fun (x535 : Ojs.t) ->
                            fun (x536 : Ojs.t) ->
                              x534
                                ~headers:(http2_IncomingHttpHeaders_of_js
                                            x535) ~flags:(Ojs.int_of_js x536)))|])
        let (on''' :
          t ->
            event:[ `response ] ->
              listener:(headers:(http2_IncomingHttpHeaders,
                          http2_IncomingHttpStatusHeader) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x544 : t) ->
            fun ~event:(x538 : [ `response ]) ->
              fun
                ~listener:(x539 :
                            headers:(http2_IncomingHttpHeaders,
                              http2_IncomingHttpStatusHeader) intersection2
                              -> flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x544) "on"
                     [|((match x538 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 2
                         (fun (x540 : Ojs.t) ->
                            fun (x543 : Ojs.t) ->
                              x539
                                ~headers:(intersection2_of_js
                                            http2_IncomingHttpHeaders_of_js
                                            http2_IncomingHttpStatusHeader_of_js
                                            x540) ~flags:(Ojs.int_of_js x543)))|])
        let (on'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x550 : t) ->
            fun ~event:(x545 : symbol or_string) ->
              fun ~listener:(x547 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x550) "on"
                     [|(or_string_to_js symbol_to_js x545);(Ojs.fun_to_js_args
                                                              (fun (x548 : _)
                                                                 ->
                                                                 x547
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x548 0)))|])
        let (once :
          t ->
            event:[ `continue ] ->
              listener:(unit -> AnonymousInterface0.t) -> t)
          =
          fun (x553 : t) ->
            fun ~event:(x551 : [ `continue ]) ->
              fun ~listener:(x552 : unit -> AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x553) "once"
                     [|((match x551 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1
                         (fun _ -> AnonymousInterface0.t_to_js (x552 ())))|])
        let (once' :
          t ->
            event:[ `headers ] ->
              listener:(headers:(http2_IncomingHttpHeaders,
                          http2_IncomingHttpStatusHeader) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x560 : t) ->
            fun ~event:(x554 : [ `headers ]) ->
              fun
                ~listener:(x555 :
                            headers:(http2_IncomingHttpHeaders,
                              http2_IncomingHttpStatusHeader) intersection2
                              -> flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x560) "once"
                     [|((match x554 with
                         | `headers -> Ojs.string_to_js "headers"));(
                       Ojs.fun_to_js 2
                         (fun (x556 : Ojs.t) ->
                            fun (x559 : Ojs.t) ->
                              x555
                                ~headers:(intersection2_of_js
                                            http2_IncomingHttpHeaders_of_js
                                            http2_IncomingHttpStatusHeader_of_js
                                            x556) ~flags:(Ojs.int_of_js x559)))|])
        let (once'' :
          t ->
            event:[ `push ] ->
              listener:(headers:http2_IncomingHttpHeaders ->
                          flags:int -> unit)
                -> t)
          =
          fun (x565 : t) ->
            fun ~event:(x561 : [ `push ]) ->
              fun
                ~listener:(x562 :
                            headers:http2_IncomingHttpHeaders ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x565) "once"
                     [|((match x561 with | `push -> Ojs.string_to_js "push"));(
                       Ojs.fun_to_js 2
                         (fun (x563 : Ojs.t) ->
                            fun (x564 : Ojs.t) ->
                              x562
                                ~headers:(http2_IncomingHttpHeaders_of_js
                                            x563) ~flags:(Ojs.int_of_js x564)))|])
        let (once''' :
          t ->
            event:[ `response ] ->
              listener:(headers:(http2_IncomingHttpHeaders,
                          http2_IncomingHttpStatusHeader) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x572 : t) ->
            fun ~event:(x566 : [ `response ]) ->
              fun
                ~listener:(x567 :
                            headers:(http2_IncomingHttpHeaders,
                              http2_IncomingHttpStatusHeader) intersection2
                              -> flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x572) "once"
                     [|((match x566 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 2
                         (fun (x568 : Ojs.t) ->
                            fun (x571 : Ojs.t) ->
                              x567
                                ~headers:(intersection2_of_js
                                            http2_IncomingHttpHeaders_of_js
                                            http2_IncomingHttpStatusHeader_of_js
                                            x568) ~flags:(Ojs.int_of_js x571)))|])
        let (once'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x578 : t) ->
            fun ~event:(x573 : symbol or_string) ->
              fun ~listener:(x575 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x578) "once"
                     [|(or_string_to_js symbol_to_js x573);(Ojs.fun_to_js_args
                                                              (fun (x576 : _)
                                                                 ->
                                                                 x575
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x576 0)))|])
        let (prependListener :
          t ->
            event:[ `continue ] ->
              listener:(unit -> AnonymousInterface0.t) -> t)
          =
          fun (x581 : t) ->
            fun ~event:(x579 : [ `continue ]) ->
              fun ~listener:(x580 : unit -> AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x581) "prependListener"
                     [|((match x579 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1
                         (fun _ -> AnonymousInterface0.t_to_js (x580 ())))|])
        let (prependListener' :
          t ->
            event:[ `headers ] ->
              listener:(headers:(http2_IncomingHttpHeaders,
                          http2_IncomingHttpStatusHeader) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x588 : t) ->
            fun ~event:(x582 : [ `headers ]) ->
              fun
                ~listener:(x583 :
                            headers:(http2_IncomingHttpHeaders,
                              http2_IncomingHttpStatusHeader) intersection2
                              -> flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x588) "prependListener"
                     [|((match x582 with
                         | `headers -> Ojs.string_to_js "headers"));(
                       Ojs.fun_to_js 2
                         (fun (x584 : Ojs.t) ->
                            fun (x587 : Ojs.t) ->
                              x583
                                ~headers:(intersection2_of_js
                                            http2_IncomingHttpHeaders_of_js
                                            http2_IncomingHttpStatusHeader_of_js
                                            x584) ~flags:(Ojs.int_of_js x587)))|])
        let (prependListener'' :
          t ->
            event:[ `push ] ->
              listener:(headers:http2_IncomingHttpHeaders ->
                          flags:int -> unit)
                -> t)
          =
          fun (x593 : t) ->
            fun ~event:(x589 : [ `push ]) ->
              fun
                ~listener:(x590 :
                            headers:http2_IncomingHttpHeaders ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x593) "prependListener"
                     [|((match x589 with | `push -> Ojs.string_to_js "push"));(
                       Ojs.fun_to_js 2
                         (fun (x591 : Ojs.t) ->
                            fun (x592 : Ojs.t) ->
                              x590
                                ~headers:(http2_IncomingHttpHeaders_of_js
                                            x591) ~flags:(Ojs.int_of_js x592)))|])
        let (prependListener''' :
          t ->
            event:[ `response ] ->
              listener:(headers:(http2_IncomingHttpHeaders,
                          http2_IncomingHttpStatusHeader) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x600 : t) ->
            fun ~event:(x594 : [ `response ]) ->
              fun
                ~listener:(x595 :
                            headers:(http2_IncomingHttpHeaders,
                              http2_IncomingHttpStatusHeader) intersection2
                              -> flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x600) "prependListener"
                     [|((match x594 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 2
                         (fun (x596 : Ojs.t) ->
                            fun (x599 : Ojs.t) ->
                              x595
                                ~headers:(intersection2_of_js
                                            http2_IncomingHttpHeaders_of_js
                                            http2_IncomingHttpStatusHeader_of_js
                                            x596) ~flags:(Ojs.int_of_js x599)))|])
        let (prependListener'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x606 : t) ->
            fun ~event:(x601 : symbol or_string) ->
              fun ~listener:(x603 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x606) "prependListener"
                     [|(or_string_to_js symbol_to_js x601);(Ojs.fun_to_js_args
                                                              (fun (x604 : _)
                                                                 ->
                                                                 x603
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x604 0)))|])
        let (prependOnceListener :
          t ->
            event:[ `continue ] ->
              listener:(unit -> AnonymousInterface0.t) -> t)
          =
          fun (x609 : t) ->
            fun ~event:(x607 : [ `continue ]) ->
              fun ~listener:(x608 : unit -> AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x609) "prependOnceListener"
                     [|((match x607 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1
                         (fun _ -> AnonymousInterface0.t_to_js (x608 ())))|])
        let (prependOnceListener' :
          t ->
            event:[ `headers ] ->
              listener:(headers:(http2_IncomingHttpHeaders,
                          http2_IncomingHttpStatusHeader) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x616 : t) ->
            fun ~event:(x610 : [ `headers ]) ->
              fun
                ~listener:(x611 :
                            headers:(http2_IncomingHttpHeaders,
                              http2_IncomingHttpStatusHeader) intersection2
                              -> flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x616) "prependOnceListener"
                     [|((match x610 with
                         | `headers -> Ojs.string_to_js "headers"));(
                       Ojs.fun_to_js 2
                         (fun (x612 : Ojs.t) ->
                            fun (x615 : Ojs.t) ->
                              x611
                                ~headers:(intersection2_of_js
                                            http2_IncomingHttpHeaders_of_js
                                            http2_IncomingHttpStatusHeader_of_js
                                            x612) ~flags:(Ojs.int_of_js x615)))|])
        let (prependOnceListener'' :
          t ->
            event:[ `push ] ->
              listener:(headers:http2_IncomingHttpHeaders ->
                          flags:int -> unit)
                -> t)
          =
          fun (x621 : t) ->
            fun ~event:(x617 : [ `push ]) ->
              fun
                ~listener:(x618 :
                            headers:http2_IncomingHttpHeaders ->
                              flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x621) "prependOnceListener"
                     [|((match x617 with | `push -> Ojs.string_to_js "push"));(
                       Ojs.fun_to_js 2
                         (fun (x619 : Ojs.t) ->
                            fun (x620 : Ojs.t) ->
                              x618
                                ~headers:(http2_IncomingHttpHeaders_of_js
                                            x619) ~flags:(Ojs.int_of_js x620)))|])
        let (prependOnceListener''' :
          t ->
            event:[ `response ] ->
              listener:(headers:(http2_IncomingHttpHeaders,
                          http2_IncomingHttpStatusHeader) intersection2 ->
                          flags:int -> unit)
                -> t)
          =
          fun (x628 : t) ->
            fun ~event:(x622 : [ `response ]) ->
              fun
                ~listener:(x623 :
                            headers:(http2_IncomingHttpHeaders,
                              http2_IncomingHttpStatusHeader) intersection2
                              -> flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x628) "prependOnceListener"
                     [|((match x622 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 2
                         (fun (x624 : Ojs.t) ->
                            fun (x627 : Ojs.t) ->
                              x623
                                ~headers:(intersection2_of_js
                                            http2_IncomingHttpHeaders_of_js
                                            http2_IncomingHttpStatusHeader_of_js
                                            x624) ~flags:(Ojs.int_of_js x627)))|])
        let (prependOnceListener'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x634 : t) ->
            fun ~event:(x629 : symbol or_string) ->
              fun ~listener:(x631 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x634) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x629);(Ojs.fun_to_js_args
                                                              (fun (x632 : _)
                                                                 ->
                                                                 x631
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x632 0)))|])
        let (cast : t -> http2_Http2Stream) =
          fun (x635 : t) -> http2_Http2Stream_of_js (t_to_js x635)
      end
    module ServerHttp2Stream =
      struct
        type t = http2_ServerHttp2Stream
        let rec t_of_js : Ojs.t -> t =
          fun (x637 : Ojs.t) -> http2_ServerHttp2Stream_of_js x637
        and t_to_js : t -> Ojs.t =
          fun (x636 : http2_ServerHttp2Stream) ->
            http2_ServerHttp2Stream_to_js x636
        let (get_headersSent : t -> bool) =
          fun (x638 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x638) "headersSent")
        let (get_pushAllowed : t -> bool) =
          fun (x639 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x639) "pushAllowed")
        let (additionalHeaders :
          t -> headers:Node_http.Http.OutgoingHttpHeaders.t -> unit) =
          fun (x641 : t) ->
            fun ~headers:(x640 : Node_http.Http.OutgoingHttpHeaders.t) ->
              ignore
                (Ojs.call (t_to_js x641) "additionalHeaders"
                   [|(Node_http.Http.OutgoingHttpHeaders.t_to_js x640)|])
        let (pushStream :
          t ->
            headers:Node_http.Http.OutgoingHttpHeaders.t ->
              ?callback:(err:Error.t or_null ->
                           pushStream:t ->
                             headers:Node_http.Http.OutgoingHttpHeaders.t ->
                               unit)
                -> unit -> unit)
          =
          fun (x650 : t) ->
            fun ~headers:(x642 : Node_http.Http.OutgoingHttpHeaders.t) ->
              fun
                ?callback:(x643 :
                            (err:Error.t or_null ->
                               pushStream:t ->
                                 headers:Node_http.Http.OutgoingHttpHeaders.t
                                   -> unit)
                              option)
                ->
                fun () ->
                  ignore
                    (let x651 = t_to_js x650 in
                     Ojs.call (Ojs.get_prop_ascii x651 "pushStream") "apply"
                       [|x651;((let x644 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x644 "push"
                                     [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                          x642)|]);
                                (match x643 with
                                 | Some x645 ->
                                     ignore
                                       (Ojs.call x644 "push"
                                          [|(Ojs.fun_to_js 3
                                               (fun (x646 : Ojs.t) ->
                                                  fun (x648 : Ojs.t) ->
                                                    fun (x649 : Ojs.t) ->
                                                      x645
                                                        ~err:(or_null_of_js
                                                                Error.t_of_js
                                                                x646)
                                                        ~pushStream:(
                                                        t_of_js x648)
                                                        ~headers:(Node_http.Http.OutgoingHttpHeaders.t_of_js
                                                                    x649)))|])
                                 | None -> ());
                                x644))|])
        let (pushStream' :
          t ->
            headers:Node_http.Http.OutgoingHttpHeaders.t ->
              ?options:http2_StreamPriorityOptions ->
                ?callback:(err:Error.t or_null ->
                             pushStream:t ->
                               headers:Node_http.Http.OutgoingHttpHeaders.t
                                 -> unit)
                  -> unit -> unit)
          =
          fun (x662 : t) ->
            fun ~headers:(x652 : Node_http.Http.OutgoingHttpHeaders.t) ->
              fun ?options:(x653 : http2_StreamPriorityOptions option) ->
                fun
                  ?callback:(x654 :
                              (err:Error.t or_null ->
                                 pushStream:t ->
                                   headers:Node_http.Http.OutgoingHttpHeaders.t
                                     -> unit)
                                option)
                  ->
                  fun () ->
                    ignore
                      (let x663 = t_to_js x662 in
                       Ojs.call (Ojs.get_prop_ascii x663 "pushStream")
                         "apply"
                         [|x663;((let x655 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x655 "push"
                                       [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                            x652)|]);
                                  (match x653 with
                                   | Some x661 ->
                                       ignore
                                         (Ojs.call x655 "push"
                                            [|(http2_StreamPriorityOptions_to_js
                                                 x661)|])
                                   | None -> ());
                                  (match x654 with
                                   | Some x656 ->
                                       ignore
                                         (Ojs.call x655 "push"
                                            [|(Ojs.fun_to_js 3
                                                 (fun (x657 : Ojs.t) ->
                                                    fun (x659 : Ojs.t) ->
                                                      fun (x660 : Ojs.t) ->
                                                        x656
                                                          ~err:(or_null_of_js
                                                                  Error.t_of_js
                                                                  x657)
                                                          ~pushStream:(
                                                          t_of_js x659)
                                                          ~headers:(Node_http.Http.OutgoingHttpHeaders.t_of_js
                                                                    x660)))|])
                                   | None -> ());
                                  x655))|])
        let (respond :
          t ->
            ?headers:Node_http.Http.OutgoingHttpHeaders.t ->
              ?options:http2_ServerStreamResponseOptions -> unit -> unit)
          =
          fun (x669 : t) ->
            fun ?headers:(x664 : Node_http.Http.OutgoingHttpHeaders.t option)
              ->
              fun ?options:(x665 : http2_ServerStreamResponseOptions option)
                ->
                fun () ->
                  ignore
                    (let x670 = t_to_js x669 in
                     Ojs.call (Ojs.get_prop_ascii x670 "respond") "apply"
                       [|x670;((let x666 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x664 with
                                 | Some x668 ->
                                     ignore
                                       (Ojs.call x666 "push"
                                          [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                               x668)|])
                                 | None -> ());
                                (match x665 with
                                 | Some x667 ->
                                     ignore
                                       (Ojs.call x666 "push"
                                          [|(http2_ServerStreamResponseOptions_to_js
                                               x667)|])
                                 | None -> ());
                                x666))|])
        let (respondWithFD :
          t ->
            fd:Fs_promises.FileHandle.t or_number ->
              ?headers:Node_http.Http.OutgoingHttpHeaders.t ->
                ?options:http2_ServerStreamFileResponseOptions ->
                  unit -> unit)
          =
          fun (x678 : t) ->
            fun ~fd:(x671 : Fs_promises.FileHandle.t or_number) ->
              fun
                ?headers:(x672 : Node_http.Http.OutgoingHttpHeaders.t option)
                ->
                fun
                  ?options:(x673 :
                             http2_ServerStreamFileResponseOptions option)
                  ->
                  fun () ->
                    ignore
                      (let x679 = t_to_js x678 in
                       Ojs.call (Ojs.get_prop_ascii x679 "respondWithFD")
                         "apply"
                         [|x679;((let x674 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x674 "push"
                                       [|(or_number_to_js
                                            Fs_promises.FileHandle.t_to_js
                                            x671)|]);
                                  (match x672 with
                                   | Some x676 ->
                                       ignore
                                         (Ojs.call x674 "push"
                                            [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                                 x676)|])
                                   | None -> ());
                                  (match x673 with
                                   | Some x675 ->
                                       ignore
                                         (Ojs.call x674 "push"
                                            [|(http2_ServerStreamFileResponseOptions_to_js
                                                 x675)|])
                                   | None -> ());
                                  x674))|])
        let (respondWithFile :
          t ->
            path:string ->
              ?headers:Node_http.Http.OutgoingHttpHeaders.t ->
                ?options:http2_ServerStreamFileResponseOptionsWithError ->
                  unit -> unit)
          =
          fun (x686 : t) ->
            fun ~path:(x680 : string) ->
              fun
                ?headers:(x681 : Node_http.Http.OutgoingHttpHeaders.t option)
                ->
                fun
                  ?options:(x682 :
                             http2_ServerStreamFileResponseOptionsWithError
                               option)
                  ->
                  fun () ->
                    ignore
                      (let x687 = t_to_js x686 in
                       Ojs.call (Ojs.get_prop_ascii x687 "respondWithFile")
                         "apply"
                         [|x687;((let x683 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x683 "push"
                                       [|(Ojs.string_to_js x680)|]);
                                  (match x681 with
                                   | Some x685 ->
                                       ignore
                                         (Ojs.call x683 "push"
                                            [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                                 x685)|])
                                   | None -> ());
                                  (match x682 with
                                   | Some x684 ->
                                       ignore
                                         (Ojs.call x683 "push"
                                            [|(http2_ServerStreamFileResponseOptionsWithError_to_js
                                                 x684)|])
                                   | None -> ());
                                  x683))|])
        let (cast : t -> http2_Http2Stream) =
          fun (x688 : t) -> http2_Http2Stream_of_js (t_to_js x688)
      end
    module Settings =
      struct
        type t = http2_Settings
        let rec t_of_js : Ojs.t -> t =
          fun (x690 : Ojs.t) -> http2_Settings_of_js x690
        and t_to_js : t -> Ojs.t =
          fun (x689 : http2_Settings) -> http2_Settings_to_js x689
        let (get_headerTableSize : t -> int) =
          fun (x691 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x691) "headerTableSize")
        let (set_headerTableSize : t -> int -> unit) =
          fun (x692 : t) ->
            fun (x693 : int) ->
              Ojs.set_prop_ascii (t_to_js x692) "headerTableSize"
                (Ojs.int_to_js x693)
        let (get_enablePush : t -> bool) =
          fun (x694 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x694) "enablePush")
        let (set_enablePush : t -> bool -> unit) =
          fun (x695 : t) ->
            fun (x696 : bool) ->
              Ojs.set_prop_ascii (t_to_js x695) "enablePush"
                (Ojs.bool_to_js x696)
        let (get_initialWindowSize : t -> int) =
          fun (x697 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x697) "initialWindowSize")
        let (set_initialWindowSize : t -> int -> unit) =
          fun (x698 : t) ->
            fun (x699 : int) ->
              Ojs.set_prop_ascii (t_to_js x698) "initialWindowSize"
                (Ojs.int_to_js x699)
        let (get_maxFrameSize : t -> int) =
          fun (x700 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x700) "maxFrameSize")
        let (set_maxFrameSize : t -> int -> unit) =
          fun (x701 : t) ->
            fun (x702 : int) ->
              Ojs.set_prop_ascii (t_to_js x701) "maxFrameSize"
                (Ojs.int_to_js x702)
        let (get_maxConcurrentStreams : t -> int) =
          fun (x703 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x703) "maxConcurrentStreams")
        let (set_maxConcurrentStreams : t -> int -> unit) =
          fun (x704 : t) ->
            fun (x705 : int) ->
              Ojs.set_prop_ascii (t_to_js x704) "maxConcurrentStreams"
                (Ojs.int_to_js x705)
        let (get_maxHeaderListSize : t -> int) =
          fun (x706 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x706) "maxHeaderListSize")
        let (set_maxHeaderListSize : t -> int -> unit) =
          fun (x707 : t) ->
            fun (x708 : int) ->
              Ojs.set_prop_ascii (t_to_js x707) "maxHeaderListSize"
                (Ojs.int_to_js x708)
        let (get_enableConnectProtocol : t -> bool) =
          fun (x709 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x709) "enableConnectProtocol")
        let (set_enableConnectProtocol : t -> bool -> unit) =
          fun (x710 : t) ->
            fun (x711 : bool) ->
              Ojs.set_prop_ascii (t_to_js x710) "enableConnectProtocol"
                (Ojs.bool_to_js x711)
      end
    module ClientSessionRequestOptions =
      struct
        type t = http2_ClientSessionRequestOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x713 : Ojs.t) -> http2_ClientSessionRequestOptions_of_js x713
        and t_to_js : t -> Ojs.t =
          fun (x712 : http2_ClientSessionRequestOptions) ->
            http2_ClientSessionRequestOptions_to_js x712
        let (get_endStream : t -> bool) =
          fun (x714 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x714) "endStream")
        let (set_endStream : t -> bool -> unit) =
          fun (x715 : t) ->
            fun (x716 : bool) ->
              Ojs.set_prop_ascii (t_to_js x715) "endStream"
                (Ojs.bool_to_js x716)
        let (get_exclusive : t -> bool) =
          fun (x717 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x717) "exclusive")
        let (set_exclusive : t -> bool -> unit) =
          fun (x718 : t) ->
            fun (x719 : bool) ->
              Ojs.set_prop_ascii (t_to_js x718) "exclusive"
                (Ojs.bool_to_js x719)
        let (get_parent : t -> int) =
          fun (x720 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x720) "parent")
        let (set_parent : t -> int -> unit) =
          fun (x721 : t) ->
            fun (x722 : int) ->
              Ojs.set_prop_ascii (t_to_js x721) "parent" (Ojs.int_to_js x722)
        let (get_weight : t -> int) =
          fun (x723 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x723) "weight")
        let (set_weight : t -> int -> unit) =
          fun (x724 : t) ->
            fun (x725 : int) ->
              Ojs.set_prop_ascii (t_to_js x724) "weight" (Ojs.int_to_js x725)
        let (get_waitForTrailers : t -> bool) =
          fun (x726 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x726) "waitForTrailers")
        let (set_waitForTrailers : t -> bool -> unit) =
          fun (x727 : t) ->
            fun (x728 : bool) ->
              Ojs.set_prop_ascii (t_to_js x727) "waitForTrailers"
                (Ojs.bool_to_js x728)
      end
    module SessionState =
      struct
        type t = http2_SessionState
        let rec t_of_js : Ojs.t -> t =
          fun (x730 : Ojs.t) -> http2_SessionState_of_js x730
        and t_to_js : t -> Ojs.t =
          fun (x729 : http2_SessionState) -> http2_SessionState_to_js x729
        let (get_effectiveLocalWindowSize : t -> int) =
          fun (x731 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x731) "effectiveLocalWindowSize")
        let (set_effectiveLocalWindowSize : t -> int -> unit) =
          fun (x732 : t) ->
            fun (x733 : int) ->
              Ojs.set_prop_ascii (t_to_js x732) "effectiveLocalWindowSize"
                (Ojs.int_to_js x733)
        let (get_effectiveRecvDataLength : t -> int) =
          fun (x734 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x734) "effectiveRecvDataLength")
        let (set_effectiveRecvDataLength : t -> int -> unit) =
          fun (x735 : t) ->
            fun (x736 : int) ->
              Ojs.set_prop_ascii (t_to_js x735) "effectiveRecvDataLength"
                (Ojs.int_to_js x736)
        let (get_nextStreamID : t -> int) =
          fun (x737 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x737) "nextStreamID")
        let (set_nextStreamID : t -> int -> unit) =
          fun (x738 : t) ->
            fun (x739 : int) ->
              Ojs.set_prop_ascii (t_to_js x738) "nextStreamID"
                (Ojs.int_to_js x739)
        let (get_localWindowSize : t -> int) =
          fun (x740 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x740) "localWindowSize")
        let (set_localWindowSize : t -> int -> unit) =
          fun (x741 : t) ->
            fun (x742 : int) ->
              Ojs.set_prop_ascii (t_to_js x741) "localWindowSize"
                (Ojs.int_to_js x742)
        let (get_lastProcStreamID : t -> int) =
          fun (x743 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x743) "lastProcStreamID")
        let (set_lastProcStreamID : t -> int -> unit) =
          fun (x744 : t) ->
            fun (x745 : int) ->
              Ojs.set_prop_ascii (t_to_js x744) "lastProcStreamID"
                (Ojs.int_to_js x745)
        let (get_remoteWindowSize : t -> int) =
          fun (x746 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x746) "remoteWindowSize")
        let (set_remoteWindowSize : t -> int -> unit) =
          fun (x747 : t) ->
            fun (x748 : int) ->
              Ojs.set_prop_ascii (t_to_js x747) "remoteWindowSize"
                (Ojs.int_to_js x748)
        let (get_outboundQueueSize : t -> int) =
          fun (x749 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x749) "outboundQueueSize")
        let (set_outboundQueueSize : t -> int -> unit) =
          fun (x750 : t) ->
            fun (x751 : int) ->
              Ojs.set_prop_ascii (t_to_js x750) "outboundQueueSize"
                (Ojs.int_to_js x751)
        let (get_deflateDynamicTableSize : t -> int) =
          fun (x752 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x752) "deflateDynamicTableSize")
        let (set_deflateDynamicTableSize : t -> int -> unit) =
          fun (x753 : t) ->
            fun (x754 : int) ->
              Ojs.set_prop_ascii (t_to_js x753) "deflateDynamicTableSize"
                (Ojs.int_to_js x754)
        let (get_inflateDynamicTableSize : t -> int) =
          fun (x755 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x755) "inflateDynamicTableSize")
        let (set_inflateDynamicTableSize : t -> int -> unit) =
          fun (x756 : t) ->
            fun (x757 : int) ->
              Ojs.set_prop_ascii (t_to_js x756) "inflateDynamicTableSize"
                (Ojs.int_to_js x757)
      end
    module Http2Session =
      struct
        type t = http2_Http2Session
        let rec t_of_js : Ojs.t -> t =
          fun (x759 : Ojs.t) -> http2_Http2Session_of_js x759
        and t_to_js : t -> Ojs.t =
          fun (x758 : http2_Http2Session) -> http2_Http2Session_to_js x758
        let (get_alpnProtocol : t -> string) =
          fun (x760 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x760) "alpnProtocol")
        let (get_closed : t -> bool) =
          fun (x761 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x761) "closed")
        let (get_connecting : t -> bool) =
          fun (x762 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x762) "connecting")
        let (get_destroyed : t -> bool) =
          fun (x763 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x763) "destroyed")
        let (get_encrypted : t -> bool) =
          fun (x764 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x764) "encrypted")
        let (get_localSettings : t -> http2_Settings) =
          fun (x765 : t) ->
            http2_Settings_of_js
              (Ojs.get_prop_ascii (t_to_js x765) "localSettings")
        let (get_originSet : t -> string list) =
          fun (x766 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x766) "originSet")
        let (get_pendingSettingsAck : t -> bool) =
          fun (x768 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x768) "pendingSettingsAck")
        let (get_remoteSettings : t -> http2_Settings) =
          fun (x769 : t) ->
            http2_Settings_of_js
              (Ojs.get_prop_ascii (t_to_js x769) "remoteSettings")
        let (get_socket : t -> (Net.Socket.t, Tls.TLSSocket.t) union2) =
          fun (x770 : t) ->
            union2_of_js Net.Socket.t_of_js Tls.TLSSocket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x770) "socket")
        let (get_state : t -> http2_SessionState) =
          fun (x773 : t) ->
            http2_SessionState_of_js
              (Ojs.get_prop_ascii (t_to_js x773) "state")
        let (get_type : t -> int) =
          fun (x774 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x774) "type")
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x778 : t) ->
            fun ?callback:(x775 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x779 = t_to_js x778 in
                   Ojs.call (Ojs.get_prop_ascii x779 "close") "apply"
                     [|x779;((let x776 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x775 with
                               | Some x777 ->
                                   ignore
                                     (Ojs.call x776 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x777 ()))|])
                               | None -> ());
                              x776))|])
        let (destroy : t -> ?error:Error.t -> ?code:int -> unit -> unit) =
          fun (x785 : t) ->
            fun ?error:(x780 : Error.t option) ->
              fun ?code:(x781 : int option) ->
                fun () ->
                  ignore
                    (let x786 = t_to_js x785 in
                     Ojs.call (Ojs.get_prop_ascii x786 "destroy") "apply"
                       [|x786;((let x782 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x780 with
                                 | Some x784 ->
                                     ignore
                                       (Ojs.call x782 "push"
                                          [|(Error.t_to_js x784)|])
                                 | None -> ());
                                (match x781 with
                                 | Some x783 ->
                                     ignore
                                       (Ojs.call x782 "push"
                                          [|(Ojs.int_to_js x783)|])
                                 | None -> ());
                                x782))|])
        let (goaway :
          t ->
            ?code:int ->
              ?lastStreamID:int ->
                ?opaqueData:ArrayBufferView.t -> unit -> unit)
          =
          fun (x794 : t) ->
            fun ?code:(x787 : int option) ->
              fun ?lastStreamID:(x788 : int option) ->
                fun ?opaqueData:(x789 : ArrayBufferView.t option) ->
                  fun () ->
                    ignore
                      (let x795 = t_to_js x794 in
                       Ojs.call (Ojs.get_prop_ascii x795 "goaway") "apply"
                         [|x795;((let x790 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x787 with
                                   | Some x793 ->
                                       ignore
                                         (Ojs.call x790 "push"
                                            [|(Ojs.int_to_js x793)|])
                                   | None -> ());
                                  (match x788 with
                                   | Some x792 ->
                                       ignore
                                         (Ojs.call x790 "push"
                                            [|(Ojs.int_to_js x792)|])
                                   | None -> ());
                                  (match x789 with
                                   | Some x791 ->
                                       ignore
                                         (Ojs.call x790 "push"
                                            [|(ArrayBufferView.t_to_js x791)|])
                                   | None -> ());
                                  x790))|])
        let (ping :
          t ->
            callback:(err:Error.t or_null ->
                        duration:int -> payload:Buffer.t -> unit)
              -> bool)
          =
          fun (x801 : t) ->
            fun
              ~callback:(x796 :
                          err:Error.t or_null ->
                            duration:int -> payload:Buffer.t -> unit)
              ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x801) "ping"
                   [|(Ojs.fun_to_js 3
                        (fun (x797 : Ojs.t) ->
                           fun (x799 : Ojs.t) ->
                             fun (x800 : Ojs.t) ->
                               x796 ~err:(or_null_of_js Error.t_of_js x797)
                                 ~duration:(Ojs.int_of_js x799)
                                 ~payload:(Buffer.t_of_js x800)))|])
        let (ping' :
          t ->
            payload:ArrayBufferView.t ->
              callback:(err:Error.t or_null ->
                          duration:int -> payload:Buffer.t -> unit)
                -> bool)
          =
          fun (x808 : t) ->
            fun ~payload:(x802 : ArrayBufferView.t) ->
              fun
                ~callback:(x803 :
                            err:Error.t or_null ->
                              duration:int -> payload:Buffer.t -> unit)
                ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x808) "ping"
                     [|(ArrayBufferView.t_to_js x802);(Ojs.fun_to_js 3
                                                         (fun (x804 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x806 : Ojs.t)
                                                              ->
                                                              fun
                                                                (x807 :
                                                                  Ojs.t)
                                                                ->
                                                                x803
                                                                  ~err:(
                                                                  or_null_of_js
                                                                    Error.t_of_js
                                                                    x804)
                                                                  ~duration:(
                                                                  Ojs.int_of_js
                                                                    x806)
                                                                  ~payload:(
                                                                  Buffer.t_of_js
                                                                    x807)))|])
        let (ref : t -> unit) =
          fun (x809 : t) -> ignore (Ojs.call (t_to_js x809) "ref" [||])
        let (setLocalWindowSize : t -> windowSize:int -> unit) =
          fun (x811 : t) ->
            fun ~windowSize:(x810 : int) ->
              ignore
                (Ojs.call (t_to_js x811) "setLocalWindowSize"
                   [|(Ojs.int_to_js x810)|])
        let (setTimeout :
          t -> msecs:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x816 : t) ->
            fun ~msecs:(x812 : int) ->
              fun ?callback:(x813 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x817 = t_to_js x816 in
                     Ojs.call (Ojs.get_prop_ascii x817 "setTimeout") "apply"
                       [|x817;((let x814 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x814 "push"
                                     [|(Ojs.int_to_js x812)|]);
                                (match x813 with
                                 | Some x815 ->
                                     ignore
                                       (Ojs.call x814 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x815 ()))|])
                                 | None -> ());
                                x814))|])
        let (settings : t -> settings:http2_Settings -> unit) =
          fun (x819 : t) ->
            fun ~settings:(x818 : http2_Settings) ->
              ignore
                (Ojs.call (t_to_js x819) "settings"
                   [|(http2_Settings_to_js x818)|])
        let (unref : t -> unit) =
          fun (x820 : t) -> ignore (Ojs.call (t_to_js x820) "unref" [||])
        let (addListener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x823 : t) ->
            fun ~event:(x821 : [ `close ]) ->
              fun ~listener:(x822 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x823) "addListener"
                     [|((match x821 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x822 ()))|])
        let (addListener' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x827 : t) ->
            fun ~event:(x824 : [ `error ]) ->
              fun ~listener:(x825 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x827) "addListener"
                     [|((match x824 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x826 : Ojs.t) ->
                            x825 ~err:(Error.t_of_js x826)))|])
        let (addListener'' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int ->
                          errorCode:int -> streamID:int -> unit)
                -> t)
          =
          fun (x833 : t) ->
            fun ~event:(x828 : [ `frameError ]) ->
              fun
                ~listener:(x829 :
                            frameType:int ->
                              errorCode:int -> streamID:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x833) "addListener"
                     [|((match x828 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 3
                         (fun (x830 : Ojs.t) ->
                            fun (x831 : Ojs.t) ->
                              fun (x832 : Ojs.t) ->
                                x829 ~frameType:(Ojs.int_of_js x830)
                                  ~errorCode:(Ojs.int_of_js x831)
                                  ~streamID:(Ojs.int_of_js x832)))|])
        let (addListener''' :
          t ->
            event:[ `goaway ] ->
              listener:(errorCode:int ->
                          lastStreamID:int -> opaqueData:Buffer.t -> unit)
                -> t)
          =
          fun (x839 : t) ->
            fun ~event:(x834 : [ `goaway ]) ->
              fun
                ~listener:(x835 :
                            errorCode:int ->
                              lastStreamID:int -> opaqueData:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x839) "addListener"
                     [|((match x834 with
                         | `goaway -> Ojs.string_to_js "goaway"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x836 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x837 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x838 :
                                                                    Ojs.t) ->
                                                                    x835
                                                                    ~errorCode:(
                                                                    Ojs.int_of_js
                                                                    x836)
                                                                    ~lastStreamID:(
                                                                    Ojs.int_of_js
                                                                    x837)
                                                                    ~opaqueData:(
                                                                    Buffer.t_of_js
                                                                    x838)))|])
        let (addListener'''' :
          t ->
            event:[ `localSettings ] ->
              listener:(settings:http2_Settings -> unit) -> t)
          =
          fun (x843 : t) ->
            fun ~event:(x840 : [ `localSettings ]) ->
              fun ~listener:(x841 : settings:http2_Settings -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x843) "addListener"
                     [|((match x840 with
                         | `localSettings -> Ojs.string_to_js "localSettings"));(
                       Ojs.fun_to_js 1
                         (fun (x842 : Ojs.t) ->
                            x841 ~settings:(http2_Settings_of_js x842)))|])
        let (addListener''''' :
          t -> event:[ `ping ] -> listener:(unit -> unit) -> t) =
          fun (x846 : t) ->
            fun ~event:(x844 : [ `ping ]) ->
              fun ~listener:(x845 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x846) "addListener"
                     [|((match x844 with | `ping -> Ojs.string_to_js "ping"));(
                       Ojs.fun_to_js 1 (fun _ -> x845 ()))|])
        let (addListener'''''' :
          t ->
            event:[ `remoteSettings ] ->
              listener:(settings:http2_Settings -> unit) -> t)
          =
          fun (x850 : t) ->
            fun ~event:(x847 : [ `remoteSettings ]) ->
              fun ~listener:(x848 : settings:http2_Settings -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x850) "addListener"
                     [|((match x847 with
                         | `remoteSettings ->
                             Ojs.string_to_js "remoteSettings"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun
                                                                    (x849 :
                                                                    Ojs.t) ->
                                                                    x848
                                                                    ~settings:(
                                                                    http2_Settings_of_js
                                                                    x849)))|])
        let (addListener''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x853 : t) ->
            fun ~event:(x851 : [ `timeout ]) ->
              fun ~listener:(x852 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x853) "addListener"
                     [|((match x851 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x852 ()))|])
        let (addListener'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x859 : t) ->
            fun ~event:(x854 : symbol or_string) ->
              fun ~listener:(x856 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x859) "addListener"
                     [|(or_string_to_js symbol_to_js x854);(Ojs.fun_to_js_args
                                                              (fun (x857 : _)
                                                                 ->
                                                                 x856
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x857 0)))|])
        let (emit : t -> event:[ `close ] -> bool) =
          fun (x861 : t) ->
            fun ~event:(x860 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x861) "emit"
                   [|((match x860 with | `close -> Ojs.string_to_js "close"))|])
        let (emit' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x864 : t) ->
            fun ~event:(x862 : [ `error ]) ->
              fun ~err:(x863 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x864) "emit"
                     [|((match x862 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x863)|])
        let (emit'' :
          t ->
            event:[ `frameError ] ->
              frameType:int -> errorCode:int -> streamID:int -> bool)
          =
          fun (x869 : t) ->
            fun ~event:(x865 : [ `frameError ]) ->
              fun ~frameType:(x866 : int) ->
                fun ~errorCode:(x867 : int) ->
                  fun ~streamID:(x868 : int) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x869) "emit"
                         [|((match x865 with
                             | `frameError -> Ojs.string_to_js "frameError"));(
                           Ojs.int_to_js x866);(Ojs.int_to_js x867);(
                           Ojs.int_to_js x868)|])
        let (emit''' :
          t ->
            event:[ `goaway ] ->
              errorCode:int ->
                lastStreamID:int -> opaqueData:Buffer.t -> bool)
          =
          fun (x874 : t) ->
            fun ~event:(x870 : [ `goaway ]) ->
              fun ~errorCode:(x871 : int) ->
                fun ~lastStreamID:(x872 : int) ->
                  fun ~opaqueData:(x873 : Buffer.t) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x874) "emit"
                         [|((match x870 with
                             | `goaway -> Ojs.string_to_js "goaway"));(
                           Ojs.int_to_js x871);(Ojs.int_to_js x872);(
                           Buffer.t_to_js x873)|])
        let (emit'''' :
          t -> event:[ `localSettings ] -> settings:http2_Settings -> bool) =
          fun (x877 : t) ->
            fun ~event:(x875 : [ `localSettings ]) ->
              fun ~settings:(x876 : http2_Settings) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x877) "emit"
                     [|((match x875 with
                         | `localSettings -> Ojs.string_to_js "localSettings"));(
                       http2_Settings_to_js x876)|])
        let (emit''''' : t -> event:[ `ping ] -> bool) =
          fun (x879 : t) ->
            fun ~event:(x878 : [ `ping ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x879) "emit"
                   [|((match x878 with | `ping -> Ojs.string_to_js "ping"))|])
        let (emit'''''' :
          t -> event:[ `remoteSettings ] -> settings:http2_Settings -> bool)
          =
          fun (x882 : t) ->
            fun ~event:(x880 : [ `remoteSettings ]) ->
              fun ~settings:(x881 : http2_Settings) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x882) "emit"
                     [|((match x880 with
                         | `remoteSettings ->
                             Ojs.string_to_js "remoteSettings"));(http2_Settings_to_js
                                                                    x881)|])
        let (emit''''''' : t -> event:[ `timeout ] -> bool) =
          fun (x884 : t) ->
            fun ~event:(x883 : [ `timeout ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x884) "emit"
                   [|((match x883 with
                       | `timeout -> Ojs.string_to_js "timeout"))|])
        let (emit'''''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x890 : t) ->
            fun ~event:(x885 : symbol or_string) ->
              fun ~args:(x886 : any list) ->
                Ojs.bool_of_js
                  (let x891 = t_to_js x890 in
                   Ojs.call (Ojs.get_prop_ascii x891 "emit") "apply"
                     [|x891;((let x887 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x887 "push"
                                   [|(or_string_to_js symbol_to_js x885)|]);
                              List.iter
                                (fun (x888 : any) ->
                                   ignore
                                     (Ojs.call x887 "push"
                                        [|(any_to_js x888)|])) x886;
                              x887))|])
        let (on : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x894 : t) ->
            fun ~event:(x892 : [ `close ]) ->
              fun ~listener:(x893 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x894) "on"
                     [|((match x892 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x893 ()))|])
        let (on' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x898 : t) ->
            fun ~event:(x895 : [ `error ]) ->
              fun ~listener:(x896 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x898) "on"
                     [|((match x895 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x897 : Ojs.t) ->
                            x896 ~err:(Error.t_of_js x897)))|])
        let (on'' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int ->
                          errorCode:int -> streamID:int -> unit)
                -> t)
          =
          fun (x904 : t) ->
            fun ~event:(x899 : [ `frameError ]) ->
              fun
                ~listener:(x900 :
                            frameType:int ->
                              errorCode:int -> streamID:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x904) "on"
                     [|((match x899 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 3
                         (fun (x901 : Ojs.t) ->
                            fun (x902 : Ojs.t) ->
                              fun (x903 : Ojs.t) ->
                                x900 ~frameType:(Ojs.int_of_js x901)
                                  ~errorCode:(Ojs.int_of_js x902)
                                  ~streamID:(Ojs.int_of_js x903)))|])
        let (on''' :
          t ->
            event:[ `goaway ] ->
              listener:(errorCode:int ->
                          lastStreamID:int -> opaqueData:Buffer.t -> unit)
                -> t)
          =
          fun (x910 : t) ->
            fun ~event:(x905 : [ `goaway ]) ->
              fun
                ~listener:(x906 :
                            errorCode:int ->
                              lastStreamID:int -> opaqueData:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x910) "on"
                     [|((match x905 with
                         | `goaway -> Ojs.string_to_js "goaway"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x907 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x908 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x909 :
                                                                    Ojs.t) ->
                                                                    x906
                                                                    ~errorCode:(
                                                                    Ojs.int_of_js
                                                                    x907)
                                                                    ~lastStreamID:(
                                                                    Ojs.int_of_js
                                                                    x908)
                                                                    ~opaqueData:(
                                                                    Buffer.t_of_js
                                                                    x909)))|])
        let (on'''' :
          t ->
            event:[ `localSettings ] ->
              listener:(settings:http2_Settings -> unit) -> t)
          =
          fun (x914 : t) ->
            fun ~event:(x911 : [ `localSettings ]) ->
              fun ~listener:(x912 : settings:http2_Settings -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x914) "on"
                     [|((match x911 with
                         | `localSettings -> Ojs.string_to_js "localSettings"));(
                       Ojs.fun_to_js 1
                         (fun (x913 : Ojs.t) ->
                            x912 ~settings:(http2_Settings_of_js x913)))|])
        let (on''''' : t -> event:[ `ping ] -> listener:(unit -> unit) -> t)
          =
          fun (x917 : t) ->
            fun ~event:(x915 : [ `ping ]) ->
              fun ~listener:(x916 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x917) "on"
                     [|((match x915 with | `ping -> Ojs.string_to_js "ping"));(
                       Ojs.fun_to_js 1 (fun _ -> x916 ()))|])
        let (on'''''' :
          t ->
            event:[ `remoteSettings ] ->
              listener:(settings:http2_Settings -> unit) -> t)
          =
          fun (x921 : t) ->
            fun ~event:(x918 : [ `remoteSettings ]) ->
              fun ~listener:(x919 : settings:http2_Settings -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x921) "on"
                     [|((match x918 with
                         | `remoteSettings ->
                             Ojs.string_to_js "remoteSettings"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun
                                                                    (x920 :
                                                                    Ojs.t) ->
                                                                    x919
                                                                    ~settings:(
                                                                    http2_Settings_of_js
                                                                    x920)))|])
        let (on''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x924 : t) ->
            fun ~event:(x922 : [ `timeout ]) ->
              fun ~listener:(x923 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x924) "on"
                     [|((match x922 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x923 ()))|])
        let (on'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x930 : t) ->
            fun ~event:(x925 : symbol or_string) ->
              fun ~listener:(x927 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x930) "on"
                     [|(or_string_to_js symbol_to_js x925);(Ojs.fun_to_js_args
                                                              (fun (x928 : _)
                                                                 ->
                                                                 x927
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x928 0)))|])
        let (once : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x933 : t) ->
            fun ~event:(x931 : [ `close ]) ->
              fun ~listener:(x932 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x933) "once"
                     [|((match x931 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x932 ()))|])
        let (once' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x937 : t) ->
            fun ~event:(x934 : [ `error ]) ->
              fun ~listener:(x935 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x937) "once"
                     [|((match x934 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x936 : Ojs.t) ->
                            x935 ~err:(Error.t_of_js x936)))|])
        let (once'' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int ->
                          errorCode:int -> streamID:int -> unit)
                -> t)
          =
          fun (x943 : t) ->
            fun ~event:(x938 : [ `frameError ]) ->
              fun
                ~listener:(x939 :
                            frameType:int ->
                              errorCode:int -> streamID:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x943) "once"
                     [|((match x938 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 3
                         (fun (x940 : Ojs.t) ->
                            fun (x941 : Ojs.t) ->
                              fun (x942 : Ojs.t) ->
                                x939 ~frameType:(Ojs.int_of_js x940)
                                  ~errorCode:(Ojs.int_of_js x941)
                                  ~streamID:(Ojs.int_of_js x942)))|])
        let (once''' :
          t ->
            event:[ `goaway ] ->
              listener:(errorCode:int ->
                          lastStreamID:int -> opaqueData:Buffer.t -> unit)
                -> t)
          =
          fun (x949 : t) ->
            fun ~event:(x944 : [ `goaway ]) ->
              fun
                ~listener:(x945 :
                            errorCode:int ->
                              lastStreamID:int -> opaqueData:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x949) "once"
                     [|((match x944 with
                         | `goaway -> Ojs.string_to_js "goaway"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x946 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x947 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x948 :
                                                                    Ojs.t) ->
                                                                    x945
                                                                    ~errorCode:(
                                                                    Ojs.int_of_js
                                                                    x946)
                                                                    ~lastStreamID:(
                                                                    Ojs.int_of_js
                                                                    x947)
                                                                    ~opaqueData:(
                                                                    Buffer.t_of_js
                                                                    x948)))|])
        let (once'''' :
          t ->
            event:[ `localSettings ] ->
              listener:(settings:http2_Settings -> unit) -> t)
          =
          fun (x953 : t) ->
            fun ~event:(x950 : [ `localSettings ]) ->
              fun ~listener:(x951 : settings:http2_Settings -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x953) "once"
                     [|((match x950 with
                         | `localSettings -> Ojs.string_to_js "localSettings"));(
                       Ojs.fun_to_js 1
                         (fun (x952 : Ojs.t) ->
                            x951 ~settings:(http2_Settings_of_js x952)))|])
        let (once''''' :
          t -> event:[ `ping ] -> listener:(unit -> unit) -> t) =
          fun (x956 : t) ->
            fun ~event:(x954 : [ `ping ]) ->
              fun ~listener:(x955 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x956) "once"
                     [|((match x954 with | `ping -> Ojs.string_to_js "ping"));(
                       Ojs.fun_to_js 1 (fun _ -> x955 ()))|])
        let (once'''''' :
          t ->
            event:[ `remoteSettings ] ->
              listener:(settings:http2_Settings -> unit) -> t)
          =
          fun (x960 : t) ->
            fun ~event:(x957 : [ `remoteSettings ]) ->
              fun ~listener:(x958 : settings:http2_Settings -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x960) "once"
                     [|((match x957 with
                         | `remoteSettings ->
                             Ojs.string_to_js "remoteSettings"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun
                                                                    (x959 :
                                                                    Ojs.t) ->
                                                                    x958
                                                                    ~settings:(
                                                                    http2_Settings_of_js
                                                                    x959)))|])
        let (once''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x963 : t) ->
            fun ~event:(x961 : [ `timeout ]) ->
              fun ~listener:(x962 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x963) "once"
                     [|((match x961 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x962 ()))|])
        let (once'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x969 : t) ->
            fun ~event:(x964 : symbol or_string) ->
              fun ~listener:(x966 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x969) "once"
                     [|(or_string_to_js symbol_to_js x964);(Ojs.fun_to_js_args
                                                              (fun (x967 : _)
                                                                 ->
                                                                 x966
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x967 0)))|])
        let (prependListener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x972 : t) ->
            fun ~event:(x970 : [ `close ]) ->
              fun ~listener:(x971 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x972) "prependListener"
                     [|((match x970 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x971 ()))|])
        let (prependListener' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x976 : t) ->
            fun ~event:(x973 : [ `error ]) ->
              fun ~listener:(x974 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x976) "prependListener"
                     [|((match x973 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x975 : Ojs.t) ->
                            x974 ~err:(Error.t_of_js x975)))|])
        let (prependListener'' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int ->
                          errorCode:int -> streamID:int -> unit)
                -> t)
          =
          fun (x982 : t) ->
            fun ~event:(x977 : [ `frameError ]) ->
              fun
                ~listener:(x978 :
                            frameType:int ->
                              errorCode:int -> streamID:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x982) "prependListener"
                     [|((match x977 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 3
                         (fun (x979 : Ojs.t) ->
                            fun (x980 : Ojs.t) ->
                              fun (x981 : Ojs.t) ->
                                x978 ~frameType:(Ojs.int_of_js x979)
                                  ~errorCode:(Ojs.int_of_js x980)
                                  ~streamID:(Ojs.int_of_js x981)))|])
        let (prependListener''' :
          t ->
            event:[ `goaway ] ->
              listener:(errorCode:int ->
                          lastStreamID:int -> opaqueData:Buffer.t -> unit)
                -> t)
          =
          fun (x988 : t) ->
            fun ~event:(x983 : [ `goaway ]) ->
              fun
                ~listener:(x984 :
                            errorCode:int ->
                              lastStreamID:int -> opaqueData:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x988) "prependListener"
                     [|((match x983 with
                         | `goaway -> Ojs.string_to_js "goaway"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x985 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x986 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x987 :
                                                                    Ojs.t) ->
                                                                    x984
                                                                    ~errorCode:(
                                                                    Ojs.int_of_js
                                                                    x985)
                                                                    ~lastStreamID:(
                                                                    Ojs.int_of_js
                                                                    x986)
                                                                    ~opaqueData:(
                                                                    Buffer.t_of_js
                                                                    x987)))|])
        let (prependListener'''' :
          t ->
            event:[ `localSettings ] ->
              listener:(settings:http2_Settings -> unit) -> t)
          =
          fun (x992 : t) ->
            fun ~event:(x989 : [ `localSettings ]) ->
              fun ~listener:(x990 : settings:http2_Settings -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x992) "prependListener"
                     [|((match x989 with
                         | `localSettings -> Ojs.string_to_js "localSettings"));(
                       Ojs.fun_to_js 1
                         (fun (x991 : Ojs.t) ->
                            x990 ~settings:(http2_Settings_of_js x991)))|])
        let (prependListener''''' :
          t -> event:[ `ping ] -> listener:(unit -> unit) -> t) =
          fun (x995 : t) ->
            fun ~event:(x993 : [ `ping ]) ->
              fun ~listener:(x994 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x995) "prependListener"
                     [|((match x993 with | `ping -> Ojs.string_to_js "ping"));(
                       Ojs.fun_to_js 1 (fun _ -> x994 ()))|])
        let (prependListener'''''' :
          t ->
            event:[ `remoteSettings ] ->
              listener:(settings:http2_Settings -> unit) -> t)
          =
          fun (x999 : t) ->
            fun ~event:(x996 : [ `remoteSettings ]) ->
              fun ~listener:(x997 : settings:http2_Settings -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x999) "prependListener"
                     [|((match x996 with
                         | `remoteSettings ->
                             Ojs.string_to_js "remoteSettings"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun
                                                                    (x998 :
                                                                    Ojs.t) ->
                                                                    x997
                                                                    ~settings:(
                                                                    http2_Settings_of_js
                                                                    x998)))|])
        let (prependListener''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1002 : t) ->
            fun ~event:(x1000 : [ `timeout ]) ->
              fun ~listener:(x1001 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1002) "prependListener"
                     [|((match x1000 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1001 ()))|])
        let (prependListener'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1008 : t) ->
            fun ~event:(x1003 : symbol or_string) ->
              fun ~listener:(x1005 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1008) "prependListener"
                     [|(or_string_to_js symbol_to_js x1003);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1006 : _)
                                                                  ->
                                                                  x1005
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1006 0)))|])
        let (prependOnceListener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1011 : t) ->
            fun ~event:(x1009 : [ `close ]) ->
              fun ~listener:(x1010 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1011) "prependOnceListener"
                     [|((match x1009 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1010 ()))|])
        let (prependOnceListener' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x1015 : t) ->
            fun ~event:(x1012 : [ `error ]) ->
              fun ~listener:(x1013 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1015) "prependOnceListener"
                     [|((match x1012 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1014 :
                                                                    Ojs.t) ->
                                                                    x1013
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x1014)))|])
        let (prependOnceListener'' :
          t ->
            event:[ `frameError ] ->
              listener:(frameType:int ->
                          errorCode:int -> streamID:int -> unit)
                -> t)
          =
          fun (x1021 : t) ->
            fun ~event:(x1016 : [ `frameError ]) ->
              fun
                ~listener:(x1017 :
                            frameType:int ->
                              errorCode:int -> streamID:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1021) "prependOnceListener"
                     [|((match x1016 with
                         | `frameError -> Ojs.string_to_js "frameError"));(
                       Ojs.fun_to_js 3
                         (fun (x1018 : Ojs.t) ->
                            fun (x1019 : Ojs.t) ->
                              fun (x1020 : Ojs.t) ->
                                x1017 ~frameType:(Ojs.int_of_js x1018)
                                  ~errorCode:(Ojs.int_of_js x1019)
                                  ~streamID:(Ojs.int_of_js x1020)))|])
        let (prependOnceListener''' :
          t ->
            event:[ `goaway ] ->
              listener:(errorCode:int ->
                          lastStreamID:int -> opaqueData:Buffer.t -> unit)
                -> t)
          =
          fun (x1027 : t) ->
            fun ~event:(x1022 : [ `goaway ]) ->
              fun
                ~listener:(x1023 :
                            errorCode:int ->
                              lastStreamID:int -> opaqueData:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1027) "prependOnceListener"
                     [|((match x1022 with
                         | `goaway -> Ojs.string_to_js "goaway"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1024 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1025 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1026 :
                                                                    Ojs.t) ->
                                                                    x1023
                                                                    ~errorCode:(
                                                                    Ojs.int_of_js
                                                                    x1024)
                                                                    ~lastStreamID:(
                                                                    Ojs.int_of_js
                                                                    x1025)
                                                                    ~opaqueData:(
                                                                    Buffer.t_of_js
                                                                    x1026)))|])
        let (prependOnceListener'''' :
          t ->
            event:[ `localSettings ] ->
              listener:(settings:http2_Settings -> unit) -> t)
          =
          fun (x1031 : t) ->
            fun ~event:(x1028 : [ `localSettings ]) ->
              fun ~listener:(x1029 : settings:http2_Settings -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1031) "prependOnceListener"
                     [|((match x1028 with
                         | `localSettings -> Ojs.string_to_js "localSettings"));(
                       Ojs.fun_to_js 1
                         (fun (x1030 : Ojs.t) ->
                            x1029 ~settings:(http2_Settings_of_js x1030)))|])
        let (prependOnceListener''''' :
          t -> event:[ `ping ] -> listener:(unit -> unit) -> t) =
          fun (x1034 : t) ->
            fun ~event:(x1032 : [ `ping ]) ->
              fun ~listener:(x1033 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1034) "prependOnceListener"
                     [|((match x1032 with | `ping -> Ojs.string_to_js "ping"));(
                       Ojs.fun_to_js 1 (fun _ -> x1033 ()))|])
        let (prependOnceListener'''''' :
          t ->
            event:[ `remoteSettings ] ->
              listener:(settings:http2_Settings -> unit) -> t)
          =
          fun (x1038 : t) ->
            fun ~event:(x1035 : [ `remoteSettings ]) ->
              fun ~listener:(x1036 : settings:http2_Settings -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1038) "prependOnceListener"
                     [|((match x1035 with
                         | `remoteSettings ->
                             Ojs.string_to_js "remoteSettings"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun
                                                                    (x1037 :
                                                                    Ojs.t) ->
                                                                    x1036
                                                                    ~settings:(
                                                                    http2_Settings_of_js
                                                                    x1037)))|])
        let (prependOnceListener''''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1041 : t) ->
            fun ~event:(x1039 : [ `timeout ]) ->
              fun ~listener:(x1040 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1041) "prependOnceListener"
                     [|((match x1039 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1040 ()))|])
        let (prependOnceListener'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1047 : t) ->
            fun ~event:(x1042 : symbol or_string) ->
              fun ~listener:(x1044 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1047) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x1042);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1045 : _)
                                                                  ->
                                                                  x1044
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1045 0)))|])
        let (cast : t -> Node_events.Events.EventEmitter.t) =
          fun (x1048 : t) ->
            Node_events.Events.EventEmitter.t_of_js (t_to_js x1048)
      end
    module ClientHttp2Session =
      struct
        type t = http2_ClientHttp2Session
        let rec t_of_js : Ojs.t -> t =
          fun (x1050 : Ojs.t) -> http2_ClientHttp2Session_of_js x1050
        and t_to_js : t -> Ojs.t =
          fun (x1049 : http2_ClientHttp2Session) ->
            http2_ClientHttp2Session_to_js x1049
        let (request :
          t ->
            ?headers:Node_http.Http.OutgoingHttpHeaders.t ->
              ?options:http2_ClientSessionRequestOptions ->
                unit -> http2_ClientHttp2Stream)
          =
          fun (x1056 : t) ->
            fun
              ?headers:(x1051 : Node_http.Http.OutgoingHttpHeaders.t option)
              ->
              fun ?options:(x1052 : http2_ClientSessionRequestOptions option)
                ->
                fun () ->
                  http2_ClientHttp2Stream_of_js
                    (let x1057 = t_to_js x1056 in
                     Ojs.call (Ojs.get_prop_ascii x1057 "request") "apply"
                       [|x1057;((let x1053 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x1051 with
                                  | Some x1055 ->
                                      ignore
                                        (Ojs.call x1053 "push"
                                           [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                                x1055)|])
                                  | None -> ());
                                 (match x1052 with
                                  | Some x1054 ->
                                      ignore
                                        (Ojs.call x1053 "push"
                                           [|(http2_ClientSessionRequestOptions_to_js
                                                x1054)|])
                                  | None -> ());
                                 x1053))|])
        let (addListener :
          t ->
            event:[ `altsvc ] ->
              listener:(alt:string -> origin:string -> stream:int -> unit) ->
                t)
          =
          fun (x1063 : t) ->
            fun ~event:(x1058 : [ `altsvc ]) ->
              fun
                ~listener:(x1059 :
                            alt:string -> origin:string -> stream:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1063) "addListener"
                     [|((match x1058 with
                         | `altsvc -> Ojs.string_to_js "altsvc"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1060 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1061 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1062 :
                                                                    Ojs.t) ->
                                                                    x1059
                                                                    ~alt:(
                                                                    Ojs.string_of_js
                                                                    x1060)
                                                                    ~origin:(
                                                                    Ojs.string_of_js
                                                                    x1061)
                                                                    ~stream:(
                                                                    Ojs.int_of_js
                                                                    x1062)))|])
        let (addListener' :
          t ->
            event:[ `origin ] -> listener:(origins:string list -> unit) -> t)
          =
          fun (x1068 : t) ->
            fun ~event:(x1064 : [ `origin ]) ->
              fun ~listener:(x1065 : origins:string list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1068) "addListener"
                     [|((match x1064 with
                         | `origin -> Ojs.string_to_js "origin"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1066 :
                                                                    Ojs.t) ->
                                                                    x1065
                                                                    ~origins:(
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x1066)))|])
        let (addListener'' :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1075 : t) ->
            fun ~event:(x1069 : [ `connect ]) ->
              fun
                ~listener:(x1070 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1075) "addListener"
                     [|((match x1069 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1071 : Ojs.t) ->
                            fun (x1072 : Ojs.t) ->
                              x1070 ~session:(t_of_js x1071)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1072)))|])
        let (addListener''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ClientHttp2Stream ->
                          headers:(http2_IncomingHttpHeaders,
                            http2_IncomingHttpStatusHeader) intersection2 ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1083 : t) ->
            fun ~event:(x1076 : [ `stream ]) ->
              fun
                ~listener:(x1077 :
                            stream:http2_ClientHttp2Stream ->
                              headers:(http2_IncomingHttpHeaders,
                                http2_IncomingHttpStatusHeader) intersection2
                                -> flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1083) "addListener"
                     [|((match x1076 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1078 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1079 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1082 :
                                                                    Ojs.t) ->
                                                                    x1077
                                                                    ~stream:(
                                                                    http2_ClientHttp2Stream_of_js
                                                                    x1078)
                                                                    ~headers:(
                                                                    intersection2_of_js
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    http2_IncomingHttpStatusHeader_of_js
                                                                    x1079)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1082)))|])
        let (addListener'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1089 : t) ->
            fun ~event:(x1084 : symbol or_string) ->
              fun ~listener:(x1086 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1089) "addListener"
                     [|(or_string_to_js symbol_to_js x1084);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1087 : _)
                                                                  ->
                                                                  x1086
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1087 0)))|])
        let (emit :
          t ->
            event:[ `altsvc ] ->
              alt:string -> origin:string -> stream:int -> bool)
          =
          fun (x1094 : t) ->
            fun ~event:(x1090 : [ `altsvc ]) ->
              fun ~alt:(x1091 : string) ->
                fun ~origin:(x1092 : string) ->
                  fun ~stream:(x1093 : int) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x1094) "emit"
                         [|((match x1090 with
                             | `altsvc -> Ojs.string_to_js "altsvc"));(
                           Ojs.string_to_js x1091);(Ojs.string_to_js x1092);(
                           Ojs.int_to_js x1093)|])
        let (emit' : t -> event:[ `origin ] -> origins:string list -> bool) =
          fun (x1098 : t) ->
            fun ~event:(x1095 : [ `origin ]) ->
              fun ~origins:(x1096 : string list) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1098) "emit"
                     [|((match x1095 with
                         | `origin -> Ojs.string_to_js "origin"));(Ojs.list_to_js
                                                                    Ojs.string_to_js
                                                                    x1096)|])
        let (emit'' :
          t ->
            event:[ `connect ] ->
              session:t ->
                socket:(Net.Socket.t, Tls.TLSSocket.t) union2 -> bool)
          =
          fun (x1104 : t) ->
            fun ~event:(x1099 : [ `connect ]) ->
              fun ~session:(x1100 : t) ->
                fun ~socket:(x1101 : (Net.Socket.t, Tls.TLSSocket.t) union2)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x1104) "emit"
                       [|((match x1099 with
                           | `connect -> Ojs.string_to_js "connect"));(
                         t_to_js x1100);(union2_to_js Net.Socket.t_to_js
                                           Tls.TLSSocket.t_to_js x1101)|])
        let (emit''' :
          t ->
            event:[ `stream ] ->
              stream:http2_ClientHttp2Stream ->
                headers:(http2_IncomingHttpHeaders,
                  http2_IncomingHttpStatusHeader) intersection2 ->
                  flags:int -> bool)
          =
          fun (x1111 : t) ->
            fun ~event:(x1105 : [ `stream ]) ->
              fun ~stream:(x1106 : http2_ClientHttp2Stream) ->
                fun
                  ~headers:(x1107 :
                             (http2_IncomingHttpHeaders,
                               http2_IncomingHttpStatusHeader) intersection2)
                  ->
                  fun ~flags:(x1110 : int) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x1111) "emit"
                         [|((match x1105 with
                             | `stream -> Ojs.string_to_js "stream"));(
                           http2_ClientHttp2Stream_to_js x1106);(intersection2_to_js
                                                                   http2_IncomingHttpHeaders_to_js
                                                                   http2_IncomingHttpStatusHeader_to_js
                                                                   x1107);(
                           Ojs.int_to_js x1110)|])
        let (emit'''' : t -> event:symbol or_string -> args:any list -> bool)
          =
          fun (x1117 : t) ->
            fun ~event:(x1112 : symbol or_string) ->
              fun ~args:(x1113 : any list) ->
                Ojs.bool_of_js
                  (let x1118 = t_to_js x1117 in
                   Ojs.call (Ojs.get_prop_ascii x1118 "emit") "apply"
                     [|x1118;((let x1114 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1114 "push"
                                    [|(or_string_to_js symbol_to_js x1112)|]);
                               List.iter
                                 (fun (x1115 : any) ->
                                    ignore
                                      (Ojs.call x1114 "push"
                                         [|(any_to_js x1115)|])) x1113;
                               x1114))|])
        let (on :
          t ->
            event:[ `altsvc ] ->
              listener:(alt:string -> origin:string -> stream:int -> unit) ->
                t)
          =
          fun (x1124 : t) ->
            fun ~event:(x1119 : [ `altsvc ]) ->
              fun
                ~listener:(x1120 :
                            alt:string -> origin:string -> stream:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1124) "on"
                     [|((match x1119 with
                         | `altsvc -> Ojs.string_to_js "altsvc"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1121 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1122 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1123 :
                                                                    Ojs.t) ->
                                                                    x1120
                                                                    ~alt:(
                                                                    Ojs.string_of_js
                                                                    x1121)
                                                                    ~origin:(
                                                                    Ojs.string_of_js
                                                                    x1122)
                                                                    ~stream:(
                                                                    Ojs.int_of_js
                                                                    x1123)))|])
        let (on' :
          t ->
            event:[ `origin ] -> listener:(origins:string list -> unit) -> t)
          =
          fun (x1129 : t) ->
            fun ~event:(x1125 : [ `origin ]) ->
              fun ~listener:(x1126 : origins:string list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1129) "on"
                     [|((match x1125 with
                         | `origin -> Ojs.string_to_js "origin"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1127 :
                                                                    Ojs.t) ->
                                                                    x1126
                                                                    ~origins:(
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x1127)))|])
        let (on'' :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1136 : t) ->
            fun ~event:(x1130 : [ `connect ]) ->
              fun
                ~listener:(x1131 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1136) "on"
                     [|((match x1130 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1132 : Ojs.t) ->
                            fun (x1133 : Ojs.t) ->
                              x1131 ~session:(t_of_js x1132)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1133)))|])
        let (on''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ClientHttp2Stream ->
                          headers:(http2_IncomingHttpHeaders,
                            http2_IncomingHttpStatusHeader) intersection2 ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1144 : t) ->
            fun ~event:(x1137 : [ `stream ]) ->
              fun
                ~listener:(x1138 :
                            stream:http2_ClientHttp2Stream ->
                              headers:(http2_IncomingHttpHeaders,
                                http2_IncomingHttpStatusHeader) intersection2
                                -> flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1144) "on"
                     [|((match x1137 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1139 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1140 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1143 :
                                                                    Ojs.t) ->
                                                                    x1138
                                                                    ~stream:(
                                                                    http2_ClientHttp2Stream_of_js
                                                                    x1139)
                                                                    ~headers:(
                                                                    intersection2_of_js
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    http2_IncomingHttpStatusHeader_of_js
                                                                    x1140)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1143)))|])
        let (on'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1150 : t) ->
            fun ~event:(x1145 : symbol or_string) ->
              fun ~listener:(x1147 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1150) "on"
                     [|(or_string_to_js symbol_to_js x1145);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1148 : _)
                                                                  ->
                                                                  x1147
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1148 0)))|])
        let (once :
          t ->
            event:[ `altsvc ] ->
              listener:(alt:string -> origin:string -> stream:int -> unit) ->
                t)
          =
          fun (x1156 : t) ->
            fun ~event:(x1151 : [ `altsvc ]) ->
              fun
                ~listener:(x1152 :
                            alt:string -> origin:string -> stream:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1156) "once"
                     [|((match x1151 with
                         | `altsvc -> Ojs.string_to_js "altsvc"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1153 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1154 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1155 :
                                                                    Ojs.t) ->
                                                                    x1152
                                                                    ~alt:(
                                                                    Ojs.string_of_js
                                                                    x1153)
                                                                    ~origin:(
                                                                    Ojs.string_of_js
                                                                    x1154)
                                                                    ~stream:(
                                                                    Ojs.int_of_js
                                                                    x1155)))|])
        let (once' :
          t ->
            event:[ `origin ] -> listener:(origins:string list -> unit) -> t)
          =
          fun (x1161 : t) ->
            fun ~event:(x1157 : [ `origin ]) ->
              fun ~listener:(x1158 : origins:string list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1161) "once"
                     [|((match x1157 with
                         | `origin -> Ojs.string_to_js "origin"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1159 :
                                                                    Ojs.t) ->
                                                                    x1158
                                                                    ~origins:(
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x1159)))|])
        let (once'' :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1168 : t) ->
            fun ~event:(x1162 : [ `connect ]) ->
              fun
                ~listener:(x1163 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1168) "once"
                     [|((match x1162 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1164 : Ojs.t) ->
                            fun (x1165 : Ojs.t) ->
                              x1163 ~session:(t_of_js x1164)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1165)))|])
        let (once''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ClientHttp2Stream ->
                          headers:(http2_IncomingHttpHeaders,
                            http2_IncomingHttpStatusHeader) intersection2 ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1176 : t) ->
            fun ~event:(x1169 : [ `stream ]) ->
              fun
                ~listener:(x1170 :
                            stream:http2_ClientHttp2Stream ->
                              headers:(http2_IncomingHttpHeaders,
                                http2_IncomingHttpStatusHeader) intersection2
                                -> flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1176) "once"
                     [|((match x1169 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1171 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1172 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1175 :
                                                                    Ojs.t) ->
                                                                    x1170
                                                                    ~stream:(
                                                                    http2_ClientHttp2Stream_of_js
                                                                    x1171)
                                                                    ~headers:(
                                                                    intersection2_of_js
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    http2_IncomingHttpStatusHeader_of_js
                                                                    x1172)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1175)))|])
        let (once'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1182 : t) ->
            fun ~event:(x1177 : symbol or_string) ->
              fun ~listener:(x1179 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1182) "once"
                     [|(or_string_to_js symbol_to_js x1177);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1180 : _)
                                                                  ->
                                                                  x1179
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1180 0)))|])
        let (prependListener :
          t ->
            event:[ `altsvc ] ->
              listener:(alt:string -> origin:string -> stream:int -> unit) ->
                t)
          =
          fun (x1188 : t) ->
            fun ~event:(x1183 : [ `altsvc ]) ->
              fun
                ~listener:(x1184 :
                            alt:string -> origin:string -> stream:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1188) "prependListener"
                     [|((match x1183 with
                         | `altsvc -> Ojs.string_to_js "altsvc"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1185 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1186 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1187 :
                                                                    Ojs.t) ->
                                                                    x1184
                                                                    ~alt:(
                                                                    Ojs.string_of_js
                                                                    x1185)
                                                                    ~origin:(
                                                                    Ojs.string_of_js
                                                                    x1186)
                                                                    ~stream:(
                                                                    Ojs.int_of_js
                                                                    x1187)))|])
        let (prependListener' :
          t ->
            event:[ `origin ] -> listener:(origins:string list -> unit) -> t)
          =
          fun (x1193 : t) ->
            fun ~event:(x1189 : [ `origin ]) ->
              fun ~listener:(x1190 : origins:string list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1193) "prependListener"
                     [|((match x1189 with
                         | `origin -> Ojs.string_to_js "origin"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1191 :
                                                                    Ojs.t) ->
                                                                    x1190
                                                                    ~origins:(
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x1191)))|])
        let (prependListener'' :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1200 : t) ->
            fun ~event:(x1194 : [ `connect ]) ->
              fun
                ~listener:(x1195 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1200) "prependListener"
                     [|((match x1194 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1196 : Ojs.t) ->
                            fun (x1197 : Ojs.t) ->
                              x1195 ~session:(t_of_js x1196)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1197)))|])
        let (prependListener''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ClientHttp2Stream ->
                          headers:(http2_IncomingHttpHeaders,
                            http2_IncomingHttpStatusHeader) intersection2 ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1208 : t) ->
            fun ~event:(x1201 : [ `stream ]) ->
              fun
                ~listener:(x1202 :
                            stream:http2_ClientHttp2Stream ->
                              headers:(http2_IncomingHttpHeaders,
                                http2_IncomingHttpStatusHeader) intersection2
                                -> flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1208) "prependListener"
                     [|((match x1201 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1203 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1204 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1207 :
                                                                    Ojs.t) ->
                                                                    x1202
                                                                    ~stream:(
                                                                    http2_ClientHttp2Stream_of_js
                                                                    x1203)
                                                                    ~headers:(
                                                                    intersection2_of_js
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    http2_IncomingHttpStatusHeader_of_js
                                                                    x1204)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1207)))|])
        let (prependListener'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1214 : t) ->
            fun ~event:(x1209 : symbol or_string) ->
              fun ~listener:(x1211 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1214) "prependListener"
                     [|(or_string_to_js symbol_to_js x1209);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1212 : _)
                                                                  ->
                                                                  x1211
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1212 0)))|])
        let (prependOnceListener :
          t ->
            event:[ `altsvc ] ->
              listener:(alt:string -> origin:string -> stream:int -> unit) ->
                t)
          =
          fun (x1220 : t) ->
            fun ~event:(x1215 : [ `altsvc ]) ->
              fun
                ~listener:(x1216 :
                            alt:string -> origin:string -> stream:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1220) "prependOnceListener"
                     [|((match x1215 with
                         | `altsvc -> Ojs.string_to_js "altsvc"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1217 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1218 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1219 :
                                                                    Ojs.t) ->
                                                                    x1216
                                                                    ~alt:(
                                                                    Ojs.string_of_js
                                                                    x1217)
                                                                    ~origin:(
                                                                    Ojs.string_of_js
                                                                    x1218)
                                                                    ~stream:(
                                                                    Ojs.int_of_js
                                                                    x1219)))|])
        let (prependOnceListener' :
          t ->
            event:[ `origin ] -> listener:(origins:string list -> unit) -> t)
          =
          fun (x1225 : t) ->
            fun ~event:(x1221 : [ `origin ]) ->
              fun ~listener:(x1222 : origins:string list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1225) "prependOnceListener"
                     [|((match x1221 with
                         | `origin -> Ojs.string_to_js "origin"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1223 :
                                                                    Ojs.t) ->
                                                                    x1222
                                                                    ~origins:(
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x1223)))|])
        let (prependOnceListener'' :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1232 : t) ->
            fun ~event:(x1226 : [ `connect ]) ->
              fun
                ~listener:(x1227 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1232) "prependOnceListener"
                     [|((match x1226 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1228 : Ojs.t) ->
                            fun (x1229 : Ojs.t) ->
                              x1227 ~session:(t_of_js x1228)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1229)))|])
        let (prependOnceListener''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ClientHttp2Stream ->
                          headers:(http2_IncomingHttpHeaders,
                            http2_IncomingHttpStatusHeader) intersection2 ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1240 : t) ->
            fun ~event:(x1233 : [ `stream ]) ->
              fun
                ~listener:(x1234 :
                            stream:http2_ClientHttp2Stream ->
                              headers:(http2_IncomingHttpHeaders,
                                http2_IncomingHttpStatusHeader) intersection2
                                -> flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1240) "prependOnceListener"
                     [|((match x1233 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1235 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1236 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1239 :
                                                                    Ojs.t) ->
                                                                    x1234
                                                                    ~stream:(
                                                                    http2_ClientHttp2Stream_of_js
                                                                    x1235)
                                                                    ~headers:(
                                                                    intersection2_of_js
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    http2_IncomingHttpStatusHeader_of_js
                                                                    x1236)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1239)))|])
        let (prependOnceListener'''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1246 : t) ->
            fun ~event:(x1241 : symbol or_string) ->
              fun ~listener:(x1243 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1246) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x1241);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1244 : _)
                                                                  ->
                                                                  x1243
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1244 0)))|])
        let (cast : t -> http2_Http2Session) =
          fun (x1247 : t) -> http2_Http2Session_of_js (t_to_js x1247)
      end
    module AlternativeServiceOptions =
      struct
        type t = http2_AlternativeServiceOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x1249 : Ojs.t) -> http2_AlternativeServiceOptions_of_js x1249
        and t_to_js : t -> Ojs.t =
          fun (x1248 : http2_AlternativeServiceOptions) ->
            http2_AlternativeServiceOptions_to_js x1248
        let (get_origin : t -> Url.URL.t or_string or_number) =
          fun (x1250 : t) ->
            or_number_of_js
              (fun (x1251 : Ojs.t) -> or_string_of_js Url.URL.t_of_js x1251)
              (Ojs.get_prop_ascii (t_to_js x1250) "origin")
        let (set_origin : t -> Url.URL.t or_string or_number -> unit) =
          fun (x1253 : t) ->
            fun (x1254 : Url.URL.t or_string or_number) ->
              Ojs.set_prop_ascii (t_to_js x1253) "origin"
                (or_number_to_js
                   (fun (x1255 : Url.URL.t or_string) ->
                      or_string_to_js Url.URL.t_to_js x1255) x1254)
      end
    module ServerHttp2Session =
      struct
        type t = http2_ServerHttp2Session
        let rec t_of_js : Ojs.t -> t =
          fun (x1258 : Ojs.t) -> http2_ServerHttp2Session_of_js x1258
        and t_to_js : t -> Ojs.t =
          fun (x1257 : http2_ServerHttp2Session) ->
            http2_ServerHttp2Session_to_js x1257
        let (get_server :
          t -> (http2_Http2SecureServer, http2_Http2Server) union2) =
          fun (x1259 : t) ->
            union2_of_js http2_Http2SecureServer_of_js
              http2_Http2Server_of_js
              (Ojs.get_prop_ascii (t_to_js x1259) "server")
        let (altsvc :
          t ->
            alt:string ->
              originOrStream:(http2_AlternativeServiceOptions, Url.URL.t)
                union2 or_string or_number -> unit)
          =
          fun (x1268 : t) ->
            fun ~alt:(x1262 : string) ->
              fun
                ~originOrStream:(x1263 :
                                  (http2_AlternativeServiceOptions,
                                    Url.URL.t) union2 or_string or_number)
                ->
                ignore
                  (Ojs.call (t_to_js x1268) "altsvc"
                     [|(Ojs.string_to_js x1262);(or_number_to_js
                                                   (fun
                                                      (x1264 :
                                                        (http2_AlternativeServiceOptions,
                                                          Url.URL.t) union2
                                                          or_string)
                                                      ->
                                                      or_string_to_js
                                                        (fun
                                                           (x1265 :
                                                             (http2_AlternativeServiceOptions,
                                                               Url.URL.t)
                                                               union2)
                                                           ->
                                                           union2_to_js
                                                             http2_AlternativeServiceOptions_to_js
                                                             Url.URL.t_to_js
                                                             x1265) x1264)
                                                   x1263)|])
        let (origin : t -> args:any list -> unit) =
          fun (x1272 : t) ->
            fun ~args:(x1269 : any list) ->
              ignore
                (let x1273 = t_to_js x1272 in
                 Ojs.call (Ojs.get_prop_ascii x1273 "origin") "apply"
                   [|x1273;((let x1270 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             List.iter
                               (fun (x1271 : any) ->
                                  ignore
                                    (Ojs.call x1270 "push"
                                       [|(any_to_js x1271)|])) x1269;
                             x1270))|])
        let (addListener :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1280 : t) ->
            fun ~event:(x1274 : [ `connect ]) ->
              fun
                ~listener:(x1275 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1280) "addListener"
                     [|((match x1274 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1276 : Ojs.t) ->
                            fun (x1277 : Ojs.t) ->
                              x1275 ~session:(t_of_js x1276)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1277)))|])
        let (addListener' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ServerHttp2Stream ->
                          headers:http2_IncomingHttpHeaders ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1286 : t) ->
            fun ~event:(x1281 : [ `stream ]) ->
              fun
                ~listener:(x1282 :
                            stream:http2_ServerHttp2Stream ->
                              headers:http2_IncomingHttpHeaders ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1286) "addListener"
                     [|((match x1281 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1283 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1284 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1285 :
                                                                    Ojs.t) ->
                                                                    x1282
                                                                    ~stream:(
                                                                    http2_ServerHttp2Stream_of_js
                                                                    x1283)
                                                                    ~headers:(
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    x1284)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1285)))|])
        let (addListener'' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1292 : t) ->
            fun ~event:(x1287 : symbol or_string) ->
              fun ~listener:(x1289 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1292) "addListener"
                     [|(or_string_to_js symbol_to_js x1287);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1290 : _)
                                                                  ->
                                                                  x1289
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1290 0)))|])
        let (emit :
          t ->
            event:[ `connect ] ->
              session:t ->
                socket:(Net.Socket.t, Tls.TLSSocket.t) union2 -> bool)
          =
          fun (x1298 : t) ->
            fun ~event:(x1293 : [ `connect ]) ->
              fun ~session:(x1294 : t) ->
                fun ~socket:(x1295 : (Net.Socket.t, Tls.TLSSocket.t) union2)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x1298) "emit"
                       [|((match x1293 with
                           | `connect -> Ojs.string_to_js "connect"));(
                         t_to_js x1294);(union2_to_js Net.Socket.t_to_js
                                           Tls.TLSSocket.t_to_js x1295)|])
        let (emit' :
          t ->
            event:[ `stream ] ->
              stream:http2_ServerHttp2Stream ->
                headers:http2_IncomingHttpHeaders -> flags:int -> bool)
          =
          fun (x1303 : t) ->
            fun ~event:(x1299 : [ `stream ]) ->
              fun ~stream:(x1300 : http2_ServerHttp2Stream) ->
                fun ~headers:(x1301 : http2_IncomingHttpHeaders) ->
                  fun ~flags:(x1302 : int) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x1303) "emit"
                         [|((match x1299 with
                             | `stream -> Ojs.string_to_js "stream"));(
                           http2_ServerHttp2Stream_to_js x1300);(http2_IncomingHttpHeaders_to_js
                                                                   x1301);(
                           Ojs.int_to_js x1302)|])
        let (emit'' : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x1309 : t) ->
            fun ~event:(x1304 : symbol or_string) ->
              fun ~args:(x1305 : any list) ->
                Ojs.bool_of_js
                  (let x1310 = t_to_js x1309 in
                   Ojs.call (Ojs.get_prop_ascii x1310 "emit") "apply"
                     [|x1310;((let x1306 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1306 "push"
                                    [|(or_string_to_js symbol_to_js x1304)|]);
                               List.iter
                                 (fun (x1307 : any) ->
                                    ignore
                                      (Ojs.call x1306 "push"
                                         [|(any_to_js x1307)|])) x1305;
                               x1306))|])
        let (on :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1317 : t) ->
            fun ~event:(x1311 : [ `connect ]) ->
              fun
                ~listener:(x1312 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1317) "on"
                     [|((match x1311 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1313 : Ojs.t) ->
                            fun (x1314 : Ojs.t) ->
                              x1312 ~session:(t_of_js x1313)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1314)))|])
        let (on' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ServerHttp2Stream ->
                          headers:http2_IncomingHttpHeaders ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1323 : t) ->
            fun ~event:(x1318 : [ `stream ]) ->
              fun
                ~listener:(x1319 :
                            stream:http2_ServerHttp2Stream ->
                              headers:http2_IncomingHttpHeaders ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1323) "on"
                     [|((match x1318 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1320 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1321 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1322 :
                                                                    Ojs.t) ->
                                                                    x1319
                                                                    ~stream:(
                                                                    http2_ServerHttp2Stream_of_js
                                                                    x1320)
                                                                    ~headers:(
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    x1321)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1322)))|])
        let (on'' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1329 : t) ->
            fun ~event:(x1324 : symbol or_string) ->
              fun ~listener:(x1326 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1329) "on"
                     [|(or_string_to_js symbol_to_js x1324);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1327 : _)
                                                                  ->
                                                                  x1326
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1327 0)))|])
        let (once :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1336 : t) ->
            fun ~event:(x1330 : [ `connect ]) ->
              fun
                ~listener:(x1331 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1336) "once"
                     [|((match x1330 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1332 : Ojs.t) ->
                            fun (x1333 : Ojs.t) ->
                              x1331 ~session:(t_of_js x1332)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1333)))|])
        let (once' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ServerHttp2Stream ->
                          headers:http2_IncomingHttpHeaders ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1342 : t) ->
            fun ~event:(x1337 : [ `stream ]) ->
              fun
                ~listener:(x1338 :
                            stream:http2_ServerHttp2Stream ->
                              headers:http2_IncomingHttpHeaders ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1342) "once"
                     [|((match x1337 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1339 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1340 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1341 :
                                                                    Ojs.t) ->
                                                                    x1338
                                                                    ~stream:(
                                                                    http2_ServerHttp2Stream_of_js
                                                                    x1339)
                                                                    ~headers:(
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    x1340)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1341)))|])
        let (once'' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1348 : t) ->
            fun ~event:(x1343 : symbol or_string) ->
              fun ~listener:(x1345 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1348) "once"
                     [|(or_string_to_js symbol_to_js x1343);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1346 : _)
                                                                  ->
                                                                  x1345
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1346 0)))|])
        let (prependListener :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1355 : t) ->
            fun ~event:(x1349 : [ `connect ]) ->
              fun
                ~listener:(x1350 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1355) "prependListener"
                     [|((match x1349 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1351 : Ojs.t) ->
                            fun (x1352 : Ojs.t) ->
                              x1350 ~session:(t_of_js x1351)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1352)))|])
        let (prependListener' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ServerHttp2Stream ->
                          headers:http2_IncomingHttpHeaders ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1361 : t) ->
            fun ~event:(x1356 : [ `stream ]) ->
              fun
                ~listener:(x1357 :
                            stream:http2_ServerHttp2Stream ->
                              headers:http2_IncomingHttpHeaders ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1361) "prependListener"
                     [|((match x1356 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1358 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1359 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1360 :
                                                                    Ojs.t) ->
                                                                    x1357
                                                                    ~stream:(
                                                                    http2_ServerHttp2Stream_of_js
                                                                    x1358)
                                                                    ~headers:(
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    x1359)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1360)))|])
        let (prependListener'' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1367 : t) ->
            fun ~event:(x1362 : symbol or_string) ->
              fun ~listener:(x1364 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1367) "prependListener"
                     [|(or_string_to_js symbol_to_js x1362);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1365 : _)
                                                                  ->
                                                                  x1364
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1365 0)))|])
        let (prependOnceListener :
          t ->
            event:[ `connect ] ->
              listener:(session:t ->
                          socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                            unit)
                -> t)
          =
          fun (x1374 : t) ->
            fun ~event:(x1368 : [ `connect ]) ->
              fun
                ~listener:(x1369 :
                            session:t ->
                              socket:(Net.Socket.t, Tls.TLSSocket.t) union2
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1374) "prependOnceListener"
                     [|((match x1368 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 2
                         (fun (x1370 : Ojs.t) ->
                            fun (x1371 : Ojs.t) ->
                              x1369 ~session:(t_of_js x1370)
                                ~socket:(union2_of_js Net.Socket.t_of_js
                                           Tls.TLSSocket.t_of_js x1371)))|])
        let (prependOnceListener' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ServerHttp2Stream ->
                          headers:http2_IncomingHttpHeaders ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1380 : t) ->
            fun ~event:(x1375 : [ `stream ]) ->
              fun
                ~listener:(x1376 :
                            stream:http2_ServerHttp2Stream ->
                              headers:http2_IncomingHttpHeaders ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1380) "prependOnceListener"
                     [|((match x1375 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1377 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1378 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1379 :
                                                                    Ojs.t) ->
                                                                    x1376
                                                                    ~stream:(
                                                                    http2_ServerHttp2Stream_of_js
                                                                    x1377)
                                                                    ~headers:(
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    x1378)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1379)))|])
        let (prependOnceListener'' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1386 : t) ->
            fun ~event:(x1381 : symbol or_string) ->
              fun ~listener:(x1383 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1386) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x1381);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1384 : _)
                                                                  ->
                                                                  x1383
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1384 0)))|])
        let (cast : t -> http2_Http2Session) =
          fun (x1387 : t) -> http2_Http2Session_of_js (t_to_js x1387)
      end
    module SessionOptions =
      struct
        type t = http2_SessionOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x1389 : Ojs.t) -> http2_SessionOptions_of_js x1389
        and t_to_js : t -> Ojs.t =
          fun (x1388 : http2_SessionOptions) ->
            http2_SessionOptions_to_js x1388
        let (get_maxDeflateDynamicTableSize : t -> int) =
          fun (x1390 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1390)
                 "maxDeflateDynamicTableSize")
        let (set_maxDeflateDynamicTableSize : t -> int -> unit) =
          fun (x1391 : t) ->
            fun (x1392 : int) ->
              Ojs.set_prop_ascii (t_to_js x1391) "maxDeflateDynamicTableSize"
                (Ojs.int_to_js x1392)
        let (get_maxSessionMemory : t -> int) =
          fun (x1393 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1393) "maxSessionMemory")
        let (set_maxSessionMemory : t -> int -> unit) =
          fun (x1394 : t) ->
            fun (x1395 : int) ->
              Ojs.set_prop_ascii (t_to_js x1394) "maxSessionMemory"
                (Ojs.int_to_js x1395)
        let (get_maxHeaderListPairs : t -> int) =
          fun (x1396 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1396) "maxHeaderListPairs")
        let (set_maxHeaderListPairs : t -> int -> unit) =
          fun (x1397 : t) ->
            fun (x1398 : int) ->
              Ojs.set_prop_ascii (t_to_js x1397) "maxHeaderListPairs"
                (Ojs.int_to_js x1398)
        let (get_maxOutstandingPings : t -> int) =
          fun (x1399 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1399) "maxOutstandingPings")
        let (set_maxOutstandingPings : t -> int -> unit) =
          fun (x1400 : t) ->
            fun (x1401 : int) ->
              Ojs.set_prop_ascii (t_to_js x1400) "maxOutstandingPings"
                (Ojs.int_to_js x1401)
        let (get_maxSendHeaderBlockLength : t -> int) =
          fun (x1402 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1402) "maxSendHeaderBlockLength")
        let (set_maxSendHeaderBlockLength : t -> int -> unit) =
          fun (x1403 : t) ->
            fun (x1404 : int) ->
              Ojs.set_prop_ascii (t_to_js x1403) "maxSendHeaderBlockLength"
                (Ojs.int_to_js x1404)
        let (get_paddingStrategy : t -> int) =
          fun (x1405 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1405) "paddingStrategy")
        let (set_paddingStrategy : t -> int -> unit) =
          fun (x1406 : t) ->
            fun (x1407 : int) ->
              Ojs.set_prop_ascii (t_to_js x1406) "paddingStrategy"
                (Ojs.int_to_js x1407)
        let (get_peerMaxConcurrentStreams : t -> int) =
          fun (x1408 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1408) "peerMaxConcurrentStreams")
        let (set_peerMaxConcurrentStreams : t -> int -> unit) =
          fun (x1409 : t) ->
            fun (x1410 : int) ->
              Ojs.set_prop_ascii (t_to_js x1409) "peerMaxConcurrentStreams"
                (Ojs.int_to_js x1410)
        let (get_settings : t -> http2_Settings) =
          fun (x1411 : t) ->
            http2_Settings_of_js
              (Ojs.get_prop_ascii (t_to_js x1411) "settings")
        let (set_settings : t -> http2_Settings -> unit) =
          fun (x1412 : t) ->
            fun (x1413 : http2_Settings) ->
              Ojs.set_prop_ascii (t_to_js x1412) "settings"
                (http2_Settings_to_js x1413)
        let (selectPadding : t -> frameLen:int -> maxFrameLen:int -> int) =
          fun (x1416 : t) ->
            fun ~frameLen:(x1414 : int) ->
              fun ~maxFrameLen:(x1415 : int) ->
                Ojs.int_of_js
                  (Ojs.call (t_to_js x1416) "selectPadding"
                     [|(Ojs.int_to_js x1414);(Ojs.int_to_js x1415)|])
        let (createConnection :
          t -> authority:Url.URL.t -> option:t -> Stream.Duplex.t) =
          fun (x1419 : t) ->
            fun ~authority:(x1417 : Url.URL.t) ->
              fun ~option:(x1418 : t) ->
                Stream.Duplex.t_of_js
                  (Ojs.call (t_to_js x1419) "createConnection"
                     [|(Url.URL.t_to_js x1417);(t_to_js x1418)|])
      end
    module ClientSessionOptions =
      struct
        type t = http2_ClientSessionOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x1421 : Ojs.t) -> http2_ClientSessionOptions_of_js x1421
        and t_to_js : t -> Ojs.t =
          fun (x1420 : http2_ClientSessionOptions) ->
            http2_ClientSessionOptions_to_js x1420
        let (get_maxReservedRemoteStreams : t -> int) =
          fun (x1422 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1422) "maxReservedRemoteStreams")
        let (set_maxReservedRemoteStreams : t -> int -> unit) =
          fun (x1423 : t) ->
            fun (x1424 : int) ->
              Ojs.set_prop_ascii (t_to_js x1423) "maxReservedRemoteStreams"
                (Ojs.int_to_js x1424)
        let (createConnection :
          t ->
            authority:Url.URL.t ->
              option:http2_SessionOptions -> Stream.Duplex.t)
          =
          fun (x1427 : t) ->
            fun ~authority:(x1425 : Url.URL.t) ->
              fun ~option:(x1426 : http2_SessionOptions) ->
                Stream.Duplex.t_of_js
                  (Ojs.call (t_to_js x1427) "createConnection"
                     [|(Url.URL.t_to_js x1425);(http2_SessionOptions_to_js
                                                  x1426)|])
        let (get_protocol : t -> [ `http_  | `https_ ]) =
          fun (x1428 : t) ->
            let x1429 = Ojs.get_prop_ascii (t_to_js x1428) "protocol" in
            match Ojs.string_of_js x1429 with
            | "http:" -> `http_
            | "https:" -> `https_
            | _ -> assert false
        let (set_protocol : t -> [ `http_  | `https_ ] -> unit) =
          fun (x1430 : t) ->
            fun (x1431 : [ `http_  | `https_ ]) ->
              Ojs.set_prop_ascii (t_to_js x1430) "protocol"
                (match x1431 with
                 | `http_ -> Ojs.string_to_js "http"
                 | `https_ -> Ojs.string_to_js "https")
        let (cast : t -> http2_SessionOptions) =
          fun (x1432 : t) -> http2_SessionOptions_of_js (t_to_js x1432)
      end
    module ServerSessionOptions =
      struct
        type t = http2_ServerSessionOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x1434 : Ojs.t) -> http2_ServerSessionOptions_of_js x1434
        and t_to_js : t -> Ojs.t =
          fun (x1433 : http2_ServerSessionOptions) ->
            http2_ServerSessionOptions_to_js x1433
        let (get_Http1IncomingMessage : t -> any) =
          fun (x1435 : t) ->
            any_of_js
              (Ojs.get_prop_ascii (t_to_js x1435) "Http1IncomingMessage")
        let (set_Http1IncomingMessage : t -> any -> unit) =
          fun (x1436 : t) ->
            fun (x1437 : any) ->
              Ojs.set_prop_ascii (t_to_js x1436) "Http1IncomingMessage"
                (any_to_js x1437)
        let (get_Http1ServerResponse : t -> any) =
          fun (x1438 : t) ->
            any_of_js
              (Ojs.get_prop_ascii (t_to_js x1438) "Http1ServerResponse")
        let (set_Http1ServerResponse : t -> any -> unit) =
          fun (x1439 : t) ->
            fun (x1440 : any) ->
              Ojs.set_prop_ascii (t_to_js x1439) "Http1ServerResponse"
                (any_to_js x1440)
        let (get_Http2ServerRequest : t -> any) =
          fun (x1441 : t) ->
            any_of_js
              (Ojs.get_prop_ascii (t_to_js x1441) "Http2ServerRequest")
        let (set_Http2ServerRequest : t -> any -> unit) =
          fun (x1442 : t) ->
            fun (x1443 : any) ->
              Ojs.set_prop_ascii (t_to_js x1442) "Http2ServerRequest"
                (any_to_js x1443)
        let (get_Http2ServerResponse : t -> any) =
          fun (x1444 : t) ->
            any_of_js
              (Ojs.get_prop_ascii (t_to_js x1444) "Http2ServerResponse")
        let (set_Http2ServerResponse : t -> any -> unit) =
          fun (x1445 : t) ->
            fun (x1446 : any) ->
              Ojs.set_prop_ascii (t_to_js x1445) "Http2ServerResponse"
                (any_to_js x1446)
        let (cast : t -> http2_SessionOptions) =
          fun (x1447 : t) -> http2_SessionOptions_of_js (t_to_js x1447)
      end
    module SecureClientSessionOptions =
      struct
        type t = http2_SecureClientSessionOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x1449 : Ojs.t) -> http2_SecureClientSessionOptions_of_js x1449
        and t_to_js : t -> Ojs.t =
          fun (x1448 : http2_SecureClientSessionOptions) ->
            http2_SecureClientSessionOptions_to_js x1448
        let (cast : t -> http2_ClientSessionOptions) =
          fun (x1450 : t) -> http2_ClientSessionOptions_of_js (t_to_js x1450)
        let (cast' : t -> Tls.ConnectionOptions.t) =
          fun (x1451 : t) -> Tls.ConnectionOptions.t_of_js (t_to_js x1451)
      end
    module SecureServerSessionOptions =
      struct
        type t = http2_SecureServerSessionOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x1453 : Ojs.t) -> http2_SecureServerSessionOptions_of_js x1453
        and t_to_js : t -> Ojs.t =
          fun (x1452 : http2_SecureServerSessionOptions) ->
            http2_SecureServerSessionOptions_to_js x1452
        let (cast : t -> http2_ServerSessionOptions) =
          fun (x1454 : t) -> http2_ServerSessionOptions_of_js (t_to_js x1454)
        let (cast' : t -> Tls.TlsOptions.t) =
          fun (x1455 : t) -> Tls.TlsOptions.t_of_js (t_to_js x1455)
      end
    module ServerOptions =
      struct
        type t = http2_ServerOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x1457 : Ojs.t) -> http2_ServerOptions_of_js x1457
        and t_to_js : t -> Ojs.t =
          fun (x1456 : http2_ServerOptions) ->
            http2_ServerOptions_to_js x1456
        let (cast : t -> http2_ServerSessionOptions) =
          fun (x1458 : t) -> http2_ServerSessionOptions_of_js (t_to_js x1458)
      end
    module SecureServerOptions =
      struct
        type t = http2_SecureServerOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x1460 : Ojs.t) -> http2_SecureServerOptions_of_js x1460
        and t_to_js : t -> Ojs.t =
          fun (x1459 : http2_SecureServerOptions) ->
            http2_SecureServerOptions_to_js x1459
        let (get_allowHTTP1 : t -> bool) =
          fun (x1461 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1461) "allowHTTP1")
        let (set_allowHTTP1 : t -> bool -> unit) =
          fun (x1462 : t) ->
            fun (x1463 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1462) "allowHTTP1"
                (Ojs.bool_to_js x1463)
        let (get_origins : t -> string list) =
          fun (x1464 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1464) "origins")
        let (set_origins : t -> string list -> unit) =
          fun (x1466 : t) ->
            fun (x1467 : string list) ->
              Ojs.set_prop_ascii (t_to_js x1466) "origins"
                (Ojs.list_to_js Ojs.string_to_js x1467)
        let (cast : t -> http2_SecureServerSessionOptions) =
          fun (x1469 : t) ->
            http2_SecureServerSessionOptions_of_js (t_to_js x1469)
      end
    module Http2Server =
      struct
        type t = http2_Http2Server
        let rec t_of_js : Ojs.t -> t =
          fun (x1471 : Ojs.t) -> http2_Http2Server_of_js x1471
        and t_to_js : t -> Ojs.t =
          fun (x1470 : http2_Http2Server) -> http2_Http2Server_to_js x1470
        let (addListener :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1476 : t) ->
            fun ~event:(x1472 : [ `checkContinue ]) ->
              fun
                ~listener:(x1473 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1476) "addListener"
                     [|((match x1472 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1474 : Ojs.t) ->
                            fun (x1475 : Ojs.t) ->
                              x1473
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1474)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1475)))|])
        let (addListener' :
          t ->
            event:[ `request ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1481 : t) ->
            fun ~event:(x1477 : [ `request ]) ->
              fun
                ~listener:(x1478 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1481) "addListener"
                     [|((match x1477 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1479 : Ojs.t) ->
                            fun (x1480 : Ojs.t) ->
                              x1478
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1479)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1480)))|])
        let (addListener'' :
          t ->
            event:[ `session ] ->
              listener:(session:http2_ServerHttp2Session -> unit) -> t)
          =
          fun (x1485 : t) ->
            fun ~event:(x1482 : [ `session ]) ->
              fun
                ~listener:(x1483 : session:http2_ServerHttp2Session -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1485) "addListener"
                     [|((match x1482 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1484 : Ojs.t) ->
                            x1483
                              ~session:(http2_ServerHttp2Session_of_js x1484)))|])
        let (addListener''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x1489 : t) ->
            fun ~event:(x1486 : [ `sessionError ]) ->
              fun ~listener:(x1487 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1489) "addListener"
                     [|((match x1486 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x1488 : Ojs.t) ->
                            x1487 ~err:(Error.t_of_js x1488)))|])
        let (addListener'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ServerHttp2Stream ->
                          headers:http2_IncomingHttpHeaders ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1495 : t) ->
            fun ~event:(x1490 : [ `stream ]) ->
              fun
                ~listener:(x1491 :
                            stream:http2_ServerHttp2Stream ->
                              headers:http2_IncomingHttpHeaders ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1495) "addListener"
                     [|((match x1490 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1492 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1493 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1494 :
                                                                    Ojs.t) ->
                                                                    x1491
                                                                    ~stream:(
                                                                    http2_ServerHttp2Stream_of_js
                                                                    x1492)
                                                                    ~headers:(
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    x1493)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1494)))|])
        let (addListener''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1498 : t) ->
            fun ~event:(x1496 : [ `timeout ]) ->
              fun ~listener:(x1497 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1498) "addListener"
                     [|((match x1496 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1497 ()))|])
        let (addListener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1504 : t) ->
            fun ~event:(x1499 : symbol or_string) ->
              fun ~listener:(x1501 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1504) "addListener"
                     [|(or_string_to_js symbol_to_js x1499);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1502 : _)
                                                                  ->
                                                                  x1501
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1502 0)))|])
        let (emit :
          t ->
            event:[ `checkContinue ] ->
              request:http2_Http2ServerRequest ->
                response:http2_Http2ServerResponse -> bool)
          =
          fun (x1508 : t) ->
            fun ~event:(x1505 : [ `checkContinue ]) ->
              fun ~request:(x1506 : http2_Http2ServerRequest) ->
                fun ~response:(x1507 : http2_Http2ServerResponse) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x1508) "emit"
                       [|((match x1505 with
                           | `checkContinue ->
                               Ojs.string_to_js "checkContinue"));(http2_Http2ServerRequest_to_js
                                                                    x1506);(
                         http2_Http2ServerResponse_to_js x1507)|])
        let (emit' :
          t ->
            event:[ `request ] ->
              request:http2_Http2ServerRequest ->
                response:http2_Http2ServerResponse -> bool)
          =
          fun (x1512 : t) ->
            fun ~event:(x1509 : [ `request ]) ->
              fun ~request:(x1510 : http2_Http2ServerRequest) ->
                fun ~response:(x1511 : http2_Http2ServerResponse) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x1512) "emit"
                       [|((match x1509 with
                           | `request -> Ojs.string_to_js "request"));(
                         http2_Http2ServerRequest_to_js x1510);(http2_Http2ServerResponse_to_js
                                                                  x1511)|])
        let (emit'' :
          t -> event:[ `session ] -> session:http2_ServerHttp2Session -> bool)
          =
          fun (x1515 : t) ->
            fun ~event:(x1513 : [ `session ]) ->
              fun ~session:(x1514 : http2_ServerHttp2Session) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1515) "emit"
                     [|((match x1513 with
                         | `session -> Ojs.string_to_js "session"));(
                       http2_ServerHttp2Session_to_js x1514)|])
        let (emit''' : t -> event:[ `sessionError ] -> err:Error.t -> bool) =
          fun (x1518 : t) ->
            fun ~event:(x1516 : [ `sessionError ]) ->
              fun ~err:(x1517 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1518) "emit"
                     [|((match x1516 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Error.t_to_js x1517)|])
        let (emit'''' :
          t ->
            event:[ `stream ] ->
              stream:http2_ServerHttp2Stream ->
                headers:http2_IncomingHttpHeaders -> flags:int -> bool)
          =
          fun (x1523 : t) ->
            fun ~event:(x1519 : [ `stream ]) ->
              fun ~stream:(x1520 : http2_ServerHttp2Stream) ->
                fun ~headers:(x1521 : http2_IncomingHttpHeaders) ->
                  fun ~flags:(x1522 : int) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x1523) "emit"
                         [|((match x1519 with
                             | `stream -> Ojs.string_to_js "stream"));(
                           http2_ServerHttp2Stream_to_js x1520);(http2_IncomingHttpHeaders_to_js
                                                                   x1521);(
                           Ojs.int_to_js x1522)|])
        let (emit''''' : t -> event:[ `timeout ] -> bool) =
          fun (x1525 : t) ->
            fun ~event:(x1524 : [ `timeout ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1525) "emit"
                   [|((match x1524 with
                       | `timeout -> Ojs.string_to_js "timeout"))|])
        let (emit'''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x1531 : t) ->
            fun ~event:(x1526 : symbol or_string) ->
              fun ~args:(x1527 : any list) ->
                Ojs.bool_of_js
                  (let x1532 = t_to_js x1531 in
                   Ojs.call (Ojs.get_prop_ascii x1532 "emit") "apply"
                     [|x1532;((let x1528 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1528 "push"
                                    [|(or_string_to_js symbol_to_js x1526)|]);
                               List.iter
                                 (fun (x1529 : any) ->
                                    ignore
                                      (Ojs.call x1528 "push"
                                         [|(any_to_js x1529)|])) x1527;
                               x1528))|])
        let (on :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1537 : t) ->
            fun ~event:(x1533 : [ `checkContinue ]) ->
              fun
                ~listener:(x1534 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1537) "on"
                     [|((match x1533 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1535 : Ojs.t) ->
                            fun (x1536 : Ojs.t) ->
                              x1534
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1535)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1536)))|])
        let (on' :
          t ->
            event:[ `request ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1542 : t) ->
            fun ~event:(x1538 : [ `request ]) ->
              fun
                ~listener:(x1539 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1542) "on"
                     [|((match x1538 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1540 : Ojs.t) ->
                            fun (x1541 : Ojs.t) ->
                              x1539
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1540)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1541)))|])
        let (on'' :
          t ->
            event:[ `session ] ->
              listener:(session:http2_ServerHttp2Session -> unit) -> t)
          =
          fun (x1546 : t) ->
            fun ~event:(x1543 : [ `session ]) ->
              fun
                ~listener:(x1544 : session:http2_ServerHttp2Session -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1546) "on"
                     [|((match x1543 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1545 : Ojs.t) ->
                            x1544
                              ~session:(http2_ServerHttp2Session_of_js x1545)))|])
        let (on''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x1550 : t) ->
            fun ~event:(x1547 : [ `sessionError ]) ->
              fun ~listener:(x1548 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1550) "on"
                     [|((match x1547 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x1549 : Ojs.t) ->
                            x1548 ~err:(Error.t_of_js x1549)))|])
        let (on'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ServerHttp2Stream ->
                          headers:http2_IncomingHttpHeaders ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1556 : t) ->
            fun ~event:(x1551 : [ `stream ]) ->
              fun
                ~listener:(x1552 :
                            stream:http2_ServerHttp2Stream ->
                              headers:http2_IncomingHttpHeaders ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1556) "on"
                     [|((match x1551 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1553 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1554 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1555 :
                                                                    Ojs.t) ->
                                                                    x1552
                                                                    ~stream:(
                                                                    http2_ServerHttp2Stream_of_js
                                                                    x1553)
                                                                    ~headers:(
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    x1554)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1555)))|])
        let (on''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1559 : t) ->
            fun ~event:(x1557 : [ `timeout ]) ->
              fun ~listener:(x1558 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1559) "on"
                     [|((match x1557 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1558 ()))|])
        let (on'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1565 : t) ->
            fun ~event:(x1560 : symbol or_string) ->
              fun ~listener:(x1562 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1565) "on"
                     [|(or_string_to_js symbol_to_js x1560);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1563 : _)
                                                                  ->
                                                                  x1562
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1563 0)))|])
        let (once :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1570 : t) ->
            fun ~event:(x1566 : [ `checkContinue ]) ->
              fun
                ~listener:(x1567 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1570) "once"
                     [|((match x1566 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1568 : Ojs.t) ->
                            fun (x1569 : Ojs.t) ->
                              x1567
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1568)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1569)))|])
        let (once' :
          t ->
            event:[ `request ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1575 : t) ->
            fun ~event:(x1571 : [ `request ]) ->
              fun
                ~listener:(x1572 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1575) "once"
                     [|((match x1571 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1573 : Ojs.t) ->
                            fun (x1574 : Ojs.t) ->
                              x1572
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1573)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1574)))|])
        let (once'' :
          t ->
            event:[ `session ] ->
              listener:(session:http2_ServerHttp2Session -> unit) -> t)
          =
          fun (x1579 : t) ->
            fun ~event:(x1576 : [ `session ]) ->
              fun
                ~listener:(x1577 : session:http2_ServerHttp2Session -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1579) "once"
                     [|((match x1576 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1578 : Ojs.t) ->
                            x1577
                              ~session:(http2_ServerHttp2Session_of_js x1578)))|])
        let (once''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x1583 : t) ->
            fun ~event:(x1580 : [ `sessionError ]) ->
              fun ~listener:(x1581 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1583) "once"
                     [|((match x1580 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x1582 : Ojs.t) ->
                            x1581 ~err:(Error.t_of_js x1582)))|])
        let (once'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ServerHttp2Stream ->
                          headers:http2_IncomingHttpHeaders ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1589 : t) ->
            fun ~event:(x1584 : [ `stream ]) ->
              fun
                ~listener:(x1585 :
                            stream:http2_ServerHttp2Stream ->
                              headers:http2_IncomingHttpHeaders ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1589) "once"
                     [|((match x1584 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1586 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1587 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1588 :
                                                                    Ojs.t) ->
                                                                    x1585
                                                                    ~stream:(
                                                                    http2_ServerHttp2Stream_of_js
                                                                    x1586)
                                                                    ~headers:(
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    x1587)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1588)))|])
        let (once''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1592 : t) ->
            fun ~event:(x1590 : [ `timeout ]) ->
              fun ~listener:(x1591 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1592) "once"
                     [|((match x1590 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1591 ()))|])
        let (once'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1598 : t) ->
            fun ~event:(x1593 : symbol or_string) ->
              fun ~listener:(x1595 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1598) "once"
                     [|(or_string_to_js symbol_to_js x1593);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1596 : _)
                                                                  ->
                                                                  x1595
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1596 0)))|])
        let (prependListener :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1603 : t) ->
            fun ~event:(x1599 : [ `checkContinue ]) ->
              fun
                ~listener:(x1600 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1603) "prependListener"
                     [|((match x1599 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1601 : Ojs.t) ->
                            fun (x1602 : Ojs.t) ->
                              x1600
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1601)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1602)))|])
        let (prependListener' :
          t ->
            event:[ `request ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1608 : t) ->
            fun ~event:(x1604 : [ `request ]) ->
              fun
                ~listener:(x1605 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1608) "prependListener"
                     [|((match x1604 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1606 : Ojs.t) ->
                            fun (x1607 : Ojs.t) ->
                              x1605
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1606)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1607)))|])
        let (prependListener'' :
          t ->
            event:[ `session ] ->
              listener:(session:http2_ServerHttp2Session -> unit) -> t)
          =
          fun (x1612 : t) ->
            fun ~event:(x1609 : [ `session ]) ->
              fun
                ~listener:(x1610 : session:http2_ServerHttp2Session -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1612) "prependListener"
                     [|((match x1609 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1611 : Ojs.t) ->
                            x1610
                              ~session:(http2_ServerHttp2Session_of_js x1611)))|])
        let (prependListener''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x1616 : t) ->
            fun ~event:(x1613 : [ `sessionError ]) ->
              fun ~listener:(x1614 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1616) "prependListener"
                     [|((match x1613 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x1615 : Ojs.t) ->
                            x1614 ~err:(Error.t_of_js x1615)))|])
        let (prependListener'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ServerHttp2Stream ->
                          headers:http2_IncomingHttpHeaders ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1622 : t) ->
            fun ~event:(x1617 : [ `stream ]) ->
              fun
                ~listener:(x1618 :
                            stream:http2_ServerHttp2Stream ->
                              headers:http2_IncomingHttpHeaders ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1622) "prependListener"
                     [|((match x1617 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1619 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1620 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1621 :
                                                                    Ojs.t) ->
                                                                    x1618
                                                                    ~stream:(
                                                                    http2_ServerHttp2Stream_of_js
                                                                    x1619)
                                                                    ~headers:(
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    x1620)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1621)))|])
        let (prependListener''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1625 : t) ->
            fun ~event:(x1623 : [ `timeout ]) ->
              fun ~listener:(x1624 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1625) "prependListener"
                     [|((match x1623 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1624 ()))|])
        let (prependListener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1631 : t) ->
            fun ~event:(x1626 : symbol or_string) ->
              fun ~listener:(x1628 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1631) "prependListener"
                     [|(or_string_to_js symbol_to_js x1626);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1629 : _)
                                                                  ->
                                                                  x1628
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1629 0)))|])
        let (prependOnceListener :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1636 : t) ->
            fun ~event:(x1632 : [ `checkContinue ]) ->
              fun
                ~listener:(x1633 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1636) "prependOnceListener"
                     [|((match x1632 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1634 : Ojs.t) ->
                            fun (x1635 : Ojs.t) ->
                              x1633
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1634)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1635)))|])
        let (prependOnceListener' :
          t ->
            event:[ `request ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1641 : t) ->
            fun ~event:(x1637 : [ `request ]) ->
              fun
                ~listener:(x1638 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1641) "prependOnceListener"
                     [|((match x1637 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1639 : Ojs.t) ->
                            fun (x1640 : Ojs.t) ->
                              x1638
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1639)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1640)))|])
        let (prependOnceListener'' :
          t ->
            event:[ `session ] ->
              listener:(session:http2_ServerHttp2Session -> unit) -> t)
          =
          fun (x1645 : t) ->
            fun ~event:(x1642 : [ `session ]) ->
              fun
                ~listener:(x1643 : session:http2_ServerHttp2Session -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1645) "prependOnceListener"
                     [|((match x1642 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1644 : Ojs.t) ->
                            x1643
                              ~session:(http2_ServerHttp2Session_of_js x1644)))|])
        let (prependOnceListener''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x1649 : t) ->
            fun ~event:(x1646 : [ `sessionError ]) ->
              fun ~listener:(x1647 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1649) "prependOnceListener"
                     [|((match x1646 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x1648 : Ojs.t) ->
                            x1647 ~err:(Error.t_of_js x1648)))|])
        let (prependOnceListener'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ServerHttp2Stream ->
                          headers:http2_IncomingHttpHeaders ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1655 : t) ->
            fun ~event:(x1650 : [ `stream ]) ->
              fun
                ~listener:(x1651 :
                            stream:http2_ServerHttp2Stream ->
                              headers:http2_IncomingHttpHeaders ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1655) "prependOnceListener"
                     [|((match x1650 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1652 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1653 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1654 :
                                                                    Ojs.t) ->
                                                                    x1651
                                                                    ~stream:(
                                                                    http2_ServerHttp2Stream_of_js
                                                                    x1652)
                                                                    ~headers:(
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    x1653)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1654)))|])
        let (prependOnceListener''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1658 : t) ->
            fun ~event:(x1656 : [ `timeout ]) ->
              fun ~listener:(x1657 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1658) "prependOnceListener"
                     [|((match x1656 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1657 ()))|])
        let (prependOnceListener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1664 : t) ->
            fun ~event:(x1659 : symbol or_string) ->
              fun ~listener:(x1661 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1664) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x1659);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1662 : _)
                                                                  ->
                                                                  x1661
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1662 0)))|])
        let (setTimeout :
          t -> ?msec:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x1670 : t) ->
            fun ?msec:(x1665 : int option) ->
              fun ?callback:(x1666 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x1671 = t_to_js x1670 in
                     Ojs.call (Ojs.get_prop_ascii x1671 "setTimeout") "apply"
                       [|x1671;((let x1667 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x1665 with
                                  | Some x1669 ->
                                      ignore
                                        (Ojs.call x1667 "push"
                                           [|(Ojs.int_to_js x1669)|])
                                  | None -> ());
                                 (match x1666 with
                                  | Some x1668 ->
                                      ignore
                                        (Ojs.call x1667 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x1668 ()))|])
                                  | None -> ());
                                 x1667))|])
        let (cast : t -> Net.Server.t) =
          fun (x1672 : t) -> Net.Server.t_of_js (t_to_js x1672)
      end
    module Http2SecureServer =
      struct
        type t = http2_Http2SecureServer
        let rec t_of_js : Ojs.t -> t =
          fun (x1674 : Ojs.t) -> http2_Http2SecureServer_of_js x1674
        and t_to_js : t -> Ojs.t =
          fun (x1673 : http2_Http2SecureServer) ->
            http2_Http2SecureServer_to_js x1673
        let (addListener :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1679 : t) ->
            fun ~event:(x1675 : [ `checkContinue ]) ->
              fun
                ~listener:(x1676 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1679) "addListener"
                     [|((match x1675 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1677 : Ojs.t) ->
                            fun (x1678 : Ojs.t) ->
                              x1676
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1677)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1678)))|])
        let (addListener' :
          t ->
            event:[ `request ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1684 : t) ->
            fun ~event:(x1680 : [ `request ]) ->
              fun
                ~listener:(x1681 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1684) "addListener"
                     [|((match x1680 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1682 : Ojs.t) ->
                            fun (x1683 : Ojs.t) ->
                              x1681
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1682)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1683)))|])
        let (addListener'' :
          t ->
            event:[ `session ] ->
              listener:(session:http2_ServerHttp2Session -> unit) -> t)
          =
          fun (x1688 : t) ->
            fun ~event:(x1685 : [ `session ]) ->
              fun
                ~listener:(x1686 : session:http2_ServerHttp2Session -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1688) "addListener"
                     [|((match x1685 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1687 : Ojs.t) ->
                            x1686
                              ~session:(http2_ServerHttp2Session_of_js x1687)))|])
        let (addListener''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x1692 : t) ->
            fun ~event:(x1689 : [ `sessionError ]) ->
              fun ~listener:(x1690 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1692) "addListener"
                     [|((match x1689 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x1691 : Ojs.t) ->
                            x1690 ~err:(Error.t_of_js x1691)))|])
        let (addListener'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ServerHttp2Stream ->
                          headers:http2_IncomingHttpHeaders ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1698 : t) ->
            fun ~event:(x1693 : [ `stream ]) ->
              fun
                ~listener:(x1694 :
                            stream:http2_ServerHttp2Stream ->
                              headers:http2_IncomingHttpHeaders ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1698) "addListener"
                     [|((match x1693 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1695 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1696 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1697 :
                                                                    Ojs.t) ->
                                                                    x1694
                                                                    ~stream:(
                                                                    http2_ServerHttp2Stream_of_js
                                                                    x1695)
                                                                    ~headers:(
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    x1696)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1697)))|])
        let (addListener''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1701 : t) ->
            fun ~event:(x1699 : [ `timeout ]) ->
              fun ~listener:(x1700 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1701) "addListener"
                     [|((match x1699 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1700 ()))|])
        let (addListener'''''' :
          t ->
            event:[ `unknownProtocol ] ->
              listener:(socket:Tls.TLSSocket.t -> unit) -> t)
          =
          fun (x1705 : t) ->
            fun ~event:(x1702 : [ `unknownProtocol ]) ->
              fun ~listener:(x1703 : socket:Tls.TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1705) "addListener"
                     [|((match x1702 with
                         | `unknownProtocol ->
                             Ojs.string_to_js "unknownProtocol"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1704 :
                                                                    Ojs.t) ->
                                                                    x1703
                                                                    ~socket:(
                                                                    Tls.TLSSocket.t_of_js
                                                                    x1704)))|])
        let (addListener''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1711 : t) ->
            fun ~event:(x1706 : symbol or_string) ->
              fun ~listener:(x1708 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1711) "addListener"
                     [|(or_string_to_js symbol_to_js x1706);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1709 : _)
                                                                  ->
                                                                  x1708
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1709 0)))|])
        let (emit :
          t ->
            event:[ `checkContinue ] ->
              request:http2_Http2ServerRequest ->
                response:http2_Http2ServerResponse -> bool)
          =
          fun (x1715 : t) ->
            fun ~event:(x1712 : [ `checkContinue ]) ->
              fun ~request:(x1713 : http2_Http2ServerRequest) ->
                fun ~response:(x1714 : http2_Http2ServerResponse) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x1715) "emit"
                       [|((match x1712 with
                           | `checkContinue ->
                               Ojs.string_to_js "checkContinue"));(http2_Http2ServerRequest_to_js
                                                                    x1713);(
                         http2_Http2ServerResponse_to_js x1714)|])
        let (emit' :
          t ->
            event:[ `request ] ->
              request:http2_Http2ServerRequest ->
                response:http2_Http2ServerResponse -> bool)
          =
          fun (x1719 : t) ->
            fun ~event:(x1716 : [ `request ]) ->
              fun ~request:(x1717 : http2_Http2ServerRequest) ->
                fun ~response:(x1718 : http2_Http2ServerResponse) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x1719) "emit"
                       [|((match x1716 with
                           | `request -> Ojs.string_to_js "request"));(
                         http2_Http2ServerRequest_to_js x1717);(http2_Http2ServerResponse_to_js
                                                                  x1718)|])
        let (emit'' :
          t -> event:[ `session ] -> session:http2_ServerHttp2Session -> bool)
          =
          fun (x1722 : t) ->
            fun ~event:(x1720 : [ `session ]) ->
              fun ~session:(x1721 : http2_ServerHttp2Session) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1722) "emit"
                     [|((match x1720 with
                         | `session -> Ojs.string_to_js "session"));(
                       http2_ServerHttp2Session_to_js x1721)|])
        let (emit''' : t -> event:[ `sessionError ] -> err:Error.t -> bool) =
          fun (x1725 : t) ->
            fun ~event:(x1723 : [ `sessionError ]) ->
              fun ~err:(x1724 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1725) "emit"
                     [|((match x1723 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Error.t_to_js x1724)|])
        let (emit'''' :
          t ->
            event:[ `stream ] ->
              stream:http2_ServerHttp2Stream ->
                headers:http2_IncomingHttpHeaders -> flags:int -> bool)
          =
          fun (x1730 : t) ->
            fun ~event:(x1726 : [ `stream ]) ->
              fun ~stream:(x1727 : http2_ServerHttp2Stream) ->
                fun ~headers:(x1728 : http2_IncomingHttpHeaders) ->
                  fun ~flags:(x1729 : int) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x1730) "emit"
                         [|((match x1726 with
                             | `stream -> Ojs.string_to_js "stream"));(
                           http2_ServerHttp2Stream_to_js x1727);(http2_IncomingHttpHeaders_to_js
                                                                   x1728);(
                           Ojs.int_to_js x1729)|])
        let (emit''''' : t -> event:[ `timeout ] -> bool) =
          fun (x1732 : t) ->
            fun ~event:(x1731 : [ `timeout ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1732) "emit"
                   [|((match x1731 with
                       | `timeout -> Ojs.string_to_js "timeout"))|])
        let (emit'''''' :
          t -> event:[ `unknownProtocol ] -> socket:Tls.TLSSocket.t -> bool)
          =
          fun (x1735 : t) ->
            fun ~event:(x1733 : [ `unknownProtocol ]) ->
              fun ~socket:(x1734 : Tls.TLSSocket.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1735) "emit"
                     [|((match x1733 with
                         | `unknownProtocol ->
                             Ojs.string_to_js "unknownProtocol"));(Tls.TLSSocket.t_to_js
                                                                    x1734)|])
        let (emit''''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x1741 : t) ->
            fun ~event:(x1736 : symbol or_string) ->
              fun ~args:(x1737 : any list) ->
                Ojs.bool_of_js
                  (let x1742 = t_to_js x1741 in
                   Ojs.call (Ojs.get_prop_ascii x1742 "emit") "apply"
                     [|x1742;((let x1738 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1738 "push"
                                    [|(or_string_to_js symbol_to_js x1736)|]);
                               List.iter
                                 (fun (x1739 : any) ->
                                    ignore
                                      (Ojs.call x1738 "push"
                                         [|(any_to_js x1739)|])) x1737;
                               x1738))|])
        let (on :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1747 : t) ->
            fun ~event:(x1743 : [ `checkContinue ]) ->
              fun
                ~listener:(x1744 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1747) "on"
                     [|((match x1743 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1745 : Ojs.t) ->
                            fun (x1746 : Ojs.t) ->
                              x1744
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1745)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1746)))|])
        let (on' :
          t ->
            event:[ `request ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1752 : t) ->
            fun ~event:(x1748 : [ `request ]) ->
              fun
                ~listener:(x1749 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1752) "on"
                     [|((match x1748 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1750 : Ojs.t) ->
                            fun (x1751 : Ojs.t) ->
                              x1749
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1750)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1751)))|])
        let (on'' :
          t ->
            event:[ `session ] ->
              listener:(session:http2_ServerHttp2Session -> unit) -> t)
          =
          fun (x1756 : t) ->
            fun ~event:(x1753 : [ `session ]) ->
              fun
                ~listener:(x1754 : session:http2_ServerHttp2Session -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1756) "on"
                     [|((match x1753 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1755 : Ojs.t) ->
                            x1754
                              ~session:(http2_ServerHttp2Session_of_js x1755)))|])
        let (on''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x1760 : t) ->
            fun ~event:(x1757 : [ `sessionError ]) ->
              fun ~listener:(x1758 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1760) "on"
                     [|((match x1757 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x1759 : Ojs.t) ->
                            x1758 ~err:(Error.t_of_js x1759)))|])
        let (on'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ServerHttp2Stream ->
                          headers:http2_IncomingHttpHeaders ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1766 : t) ->
            fun ~event:(x1761 : [ `stream ]) ->
              fun
                ~listener:(x1762 :
                            stream:http2_ServerHttp2Stream ->
                              headers:http2_IncomingHttpHeaders ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1766) "on"
                     [|((match x1761 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1763 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1764 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1765 :
                                                                    Ojs.t) ->
                                                                    x1762
                                                                    ~stream:(
                                                                    http2_ServerHttp2Stream_of_js
                                                                    x1763)
                                                                    ~headers:(
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    x1764)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1765)))|])
        let (on''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1769 : t) ->
            fun ~event:(x1767 : [ `timeout ]) ->
              fun ~listener:(x1768 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1769) "on"
                     [|((match x1767 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1768 ()))|])
        let (on'''''' :
          t ->
            event:[ `unknownProtocol ] ->
              listener:(socket:Tls.TLSSocket.t -> unit) -> t)
          =
          fun (x1773 : t) ->
            fun ~event:(x1770 : [ `unknownProtocol ]) ->
              fun ~listener:(x1771 : socket:Tls.TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1773) "on"
                     [|((match x1770 with
                         | `unknownProtocol ->
                             Ojs.string_to_js "unknownProtocol"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1772 :
                                                                    Ojs.t) ->
                                                                    x1771
                                                                    ~socket:(
                                                                    Tls.TLSSocket.t_of_js
                                                                    x1772)))|])
        let (on''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1779 : t) ->
            fun ~event:(x1774 : symbol or_string) ->
              fun ~listener:(x1776 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1779) "on"
                     [|(or_string_to_js symbol_to_js x1774);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1777 : _)
                                                                  ->
                                                                  x1776
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1777 0)))|])
        let (once :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1784 : t) ->
            fun ~event:(x1780 : [ `checkContinue ]) ->
              fun
                ~listener:(x1781 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1784) "once"
                     [|((match x1780 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1782 : Ojs.t) ->
                            fun (x1783 : Ojs.t) ->
                              x1781
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1782)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1783)))|])
        let (once' :
          t ->
            event:[ `request ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1789 : t) ->
            fun ~event:(x1785 : [ `request ]) ->
              fun
                ~listener:(x1786 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1789) "once"
                     [|((match x1785 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1787 : Ojs.t) ->
                            fun (x1788 : Ojs.t) ->
                              x1786
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1787)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1788)))|])
        let (once'' :
          t ->
            event:[ `session ] ->
              listener:(session:http2_ServerHttp2Session -> unit) -> t)
          =
          fun (x1793 : t) ->
            fun ~event:(x1790 : [ `session ]) ->
              fun
                ~listener:(x1791 : session:http2_ServerHttp2Session -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1793) "once"
                     [|((match x1790 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1792 : Ojs.t) ->
                            x1791
                              ~session:(http2_ServerHttp2Session_of_js x1792)))|])
        let (once''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x1797 : t) ->
            fun ~event:(x1794 : [ `sessionError ]) ->
              fun ~listener:(x1795 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1797) "once"
                     [|((match x1794 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x1796 : Ojs.t) ->
                            x1795 ~err:(Error.t_of_js x1796)))|])
        let (once'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ServerHttp2Stream ->
                          headers:http2_IncomingHttpHeaders ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1803 : t) ->
            fun ~event:(x1798 : [ `stream ]) ->
              fun
                ~listener:(x1799 :
                            stream:http2_ServerHttp2Stream ->
                              headers:http2_IncomingHttpHeaders ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1803) "once"
                     [|((match x1798 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1800 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1801 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1802 :
                                                                    Ojs.t) ->
                                                                    x1799
                                                                    ~stream:(
                                                                    http2_ServerHttp2Stream_of_js
                                                                    x1800)
                                                                    ~headers:(
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    x1801)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1802)))|])
        let (once''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1806 : t) ->
            fun ~event:(x1804 : [ `timeout ]) ->
              fun ~listener:(x1805 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1806) "once"
                     [|((match x1804 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1805 ()))|])
        let (once'''''' :
          t ->
            event:[ `unknownProtocol ] ->
              listener:(socket:Tls.TLSSocket.t -> unit) -> t)
          =
          fun (x1810 : t) ->
            fun ~event:(x1807 : [ `unknownProtocol ]) ->
              fun ~listener:(x1808 : socket:Tls.TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1810) "once"
                     [|((match x1807 with
                         | `unknownProtocol ->
                             Ojs.string_to_js "unknownProtocol"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1809 :
                                                                    Ojs.t) ->
                                                                    x1808
                                                                    ~socket:(
                                                                    Tls.TLSSocket.t_of_js
                                                                    x1809)))|])
        let (once''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1816 : t) ->
            fun ~event:(x1811 : symbol or_string) ->
              fun ~listener:(x1813 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1816) "once"
                     [|(or_string_to_js symbol_to_js x1811);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1814 : _)
                                                                  ->
                                                                  x1813
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1814 0)))|])
        let (prependListener :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1821 : t) ->
            fun ~event:(x1817 : [ `checkContinue ]) ->
              fun
                ~listener:(x1818 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1821) "prependListener"
                     [|((match x1817 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1819 : Ojs.t) ->
                            fun (x1820 : Ojs.t) ->
                              x1818
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1819)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1820)))|])
        let (prependListener' :
          t ->
            event:[ `request ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1826 : t) ->
            fun ~event:(x1822 : [ `request ]) ->
              fun
                ~listener:(x1823 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1826) "prependListener"
                     [|((match x1822 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1824 : Ojs.t) ->
                            fun (x1825 : Ojs.t) ->
                              x1823
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1824)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1825)))|])
        let (prependListener'' :
          t ->
            event:[ `session ] ->
              listener:(session:http2_ServerHttp2Session -> unit) -> t)
          =
          fun (x1830 : t) ->
            fun ~event:(x1827 : [ `session ]) ->
              fun
                ~listener:(x1828 : session:http2_ServerHttp2Session -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1830) "prependListener"
                     [|((match x1827 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1829 : Ojs.t) ->
                            x1828
                              ~session:(http2_ServerHttp2Session_of_js x1829)))|])
        let (prependListener''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x1834 : t) ->
            fun ~event:(x1831 : [ `sessionError ]) ->
              fun ~listener:(x1832 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1834) "prependListener"
                     [|((match x1831 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x1833 : Ojs.t) ->
                            x1832 ~err:(Error.t_of_js x1833)))|])
        let (prependListener'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ServerHttp2Stream ->
                          headers:http2_IncomingHttpHeaders ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1840 : t) ->
            fun ~event:(x1835 : [ `stream ]) ->
              fun
                ~listener:(x1836 :
                            stream:http2_ServerHttp2Stream ->
                              headers:http2_IncomingHttpHeaders ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1840) "prependListener"
                     [|((match x1835 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1837 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1838 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1839 :
                                                                    Ojs.t) ->
                                                                    x1836
                                                                    ~stream:(
                                                                    http2_ServerHttp2Stream_of_js
                                                                    x1837)
                                                                    ~headers:(
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    x1838)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1839)))|])
        let (prependListener''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1843 : t) ->
            fun ~event:(x1841 : [ `timeout ]) ->
              fun ~listener:(x1842 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1843) "prependListener"
                     [|((match x1841 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1842 ()))|])
        let (prependListener'''''' :
          t ->
            event:[ `unknownProtocol ] ->
              listener:(socket:Tls.TLSSocket.t -> unit) -> t)
          =
          fun (x1847 : t) ->
            fun ~event:(x1844 : [ `unknownProtocol ]) ->
              fun ~listener:(x1845 : socket:Tls.TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1847) "prependListener"
                     [|((match x1844 with
                         | `unknownProtocol ->
                             Ojs.string_to_js "unknownProtocol"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1846 :
                                                                    Ojs.t) ->
                                                                    x1845
                                                                    ~socket:(
                                                                    Tls.TLSSocket.t_of_js
                                                                    x1846)))|])
        let (prependListener''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1853 : t) ->
            fun ~event:(x1848 : symbol or_string) ->
              fun ~listener:(x1850 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1853) "prependListener"
                     [|(or_string_to_js symbol_to_js x1848);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1851 : _)
                                                                  ->
                                                                  x1850
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1851 0)))|])
        let (prependOnceListener :
          t ->
            event:[ `checkContinue ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1858 : t) ->
            fun ~event:(x1854 : [ `checkContinue ]) ->
              fun
                ~listener:(x1855 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1858) "prependOnceListener"
                     [|((match x1854 with
                         | `checkContinue -> Ojs.string_to_js "checkContinue"));(
                       Ojs.fun_to_js 2
                         (fun (x1856 : Ojs.t) ->
                            fun (x1857 : Ojs.t) ->
                              x1855
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1856)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1857)))|])
        let (prependOnceListener' :
          t ->
            event:[ `request ] ->
              listener:(request:http2_Http2ServerRequest ->
                          response:http2_Http2ServerResponse -> unit)
                -> t)
          =
          fun (x1863 : t) ->
            fun ~event:(x1859 : [ `request ]) ->
              fun
                ~listener:(x1860 :
                            request:http2_Http2ServerRequest ->
                              response:http2_Http2ServerResponse -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1863) "prependOnceListener"
                     [|((match x1859 with
                         | `request -> Ojs.string_to_js "request"));(
                       Ojs.fun_to_js 2
                         (fun (x1861 : Ojs.t) ->
                            fun (x1862 : Ojs.t) ->
                              x1860
                                ~request:(http2_Http2ServerRequest_of_js
                                            x1861)
                                ~response:(http2_Http2ServerResponse_of_js
                                             x1862)))|])
        let (prependOnceListener'' :
          t ->
            event:[ `session ] ->
              listener:(session:http2_ServerHttp2Session -> unit) -> t)
          =
          fun (x1867 : t) ->
            fun ~event:(x1864 : [ `session ]) ->
              fun
                ~listener:(x1865 : session:http2_ServerHttp2Session -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1867) "prependOnceListener"
                     [|((match x1864 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x1866 : Ojs.t) ->
                            x1865
                              ~session:(http2_ServerHttp2Session_of_js x1866)))|])
        let (prependOnceListener''' :
          t -> event:[ `sessionError ] -> listener:(err:Error.t -> unit) -> t)
          =
          fun (x1871 : t) ->
            fun ~event:(x1868 : [ `sessionError ]) ->
              fun ~listener:(x1869 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1871) "prependOnceListener"
                     [|((match x1868 with
                         | `sessionError -> Ojs.string_to_js "sessionError"));(
                       Ojs.fun_to_js 1
                         (fun (x1870 : Ojs.t) ->
                            x1869 ~err:(Error.t_of_js x1870)))|])
        let (prependOnceListener'''' :
          t ->
            event:[ `stream ] ->
              listener:(stream:http2_ServerHttp2Stream ->
                          headers:http2_IncomingHttpHeaders ->
                            flags:int -> unit)
                -> t)
          =
          fun (x1877 : t) ->
            fun ~event:(x1872 : [ `stream ]) ->
              fun
                ~listener:(x1873 :
                            stream:http2_ServerHttp2Stream ->
                              headers:http2_IncomingHttpHeaders ->
                                flags:int -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x1877) "prependOnceListener"
                     [|((match x1872 with
                         | `stream -> Ojs.string_to_js "stream"));(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1874 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1875 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1876 :
                                                                    Ojs.t) ->
                                                                    x1873
                                                                    ~stream:(
                                                                    http2_ServerHttp2Stream_of_js
                                                                    x1874)
                                                                    ~headers:(
                                                                    http2_IncomingHttpHeaders_of_js
                                                                    x1875)
                                                                    ~flags:(
                                                                    Ojs.int_of_js
                                                                    x1876)))|])
        let (prependOnceListener''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x1880 : t) ->
            fun ~event:(x1878 : [ `timeout ]) ->
              fun ~listener:(x1879 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1880) "prependOnceListener"
                     [|((match x1878 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x1879 ()))|])
        let (prependOnceListener'''''' :
          t ->
            event:[ `unknownProtocol ] ->
              listener:(socket:Tls.TLSSocket.t -> unit) -> t)
          =
          fun (x1884 : t) ->
            fun ~event:(x1881 : [ `unknownProtocol ]) ->
              fun ~listener:(x1882 : socket:Tls.TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1884) "prependOnceListener"
                     [|((match x1881 with
                         | `unknownProtocol ->
                             Ojs.string_to_js "unknownProtocol"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x1883 :
                                                                    Ojs.t) ->
                                                                    x1882
                                                                    ~socket:(
                                                                    Tls.TLSSocket.t_of_js
                                                                    x1883)))|])
        let (prependOnceListener''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1890 : t) ->
            fun ~event:(x1885 : symbol or_string) ->
              fun ~listener:(x1887 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1890) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x1885);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1888 : _)
                                                                  ->
                                                                  x1887
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1888 0)))|])
        let (setTimeout :
          t -> ?msec:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x1896 : t) ->
            fun ?msec:(x1891 : int option) ->
              fun ?callback:(x1892 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x1897 = t_to_js x1896 in
                     Ojs.call (Ojs.get_prop_ascii x1897 "setTimeout") "apply"
                       [|x1897;((let x1893 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x1891 with
                                  | Some x1895 ->
                                      ignore
                                        (Ojs.call x1893 "push"
                                           [|(Ojs.int_to_js x1895)|])
                                  | None -> ());
                                 (match x1892 with
                                  | Some x1894 ->
                                      ignore
                                        (Ojs.call x1893 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x1894 ()))|])
                                  | None -> ());
                                 x1893))|])
        let (cast : t -> Tls.Server.t) =
          fun (x1898 : t) -> Tls.Server.t_of_js (t_to_js x1898)
      end
    module Http2ServerRequest =
      struct
        type t = http2_Http2ServerRequest
        let rec t_of_js : Ojs.t -> t =
          fun (x1900 : Ojs.t) -> http2_Http2ServerRequest_of_js x1900
        and t_to_js : t -> Ojs.t =
          fun (x1899 : http2_Http2ServerRequest) ->
            http2_Http2ServerRequest_to_js x1899
        let (create :
          stream:http2_ServerHttp2Stream ->
            headers:http2_IncomingHttpHeaders ->
              options:Stream.ReadableOptions.t -> rawHeaders:string list -> t)
          =
          fun ~stream:(x1901 : http2_ServerHttp2Stream) ->
            fun ~headers:(x1902 : http2_IncomingHttpHeaders) ->
              fun ~options:(x1903 : Stream.ReadableOptions.t) ->
                fun ~rawHeaders:(x1904 : string list) ->
                  t_of_js
                    (Ojs.new_obj
                       (Ojs.get_prop_ascii Import.http2 "Http2ServerRequest")
                       [|(http2_ServerHttp2Stream_to_js x1901);(http2_IncomingHttpHeaders_to_js
                                                                  x1902);(
                         Stream.ReadableOptions.t_to_js x1903);(Ojs.list_to_js
                                                                  Ojs.string_to_js
                                                                  x1904)|])
        let (get_aborted : t -> bool) =
          fun (x1906 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1906) "aborted")
        let (get_authority : t -> string) =
          fun (x1907 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1907) "authority")
        let (get_connection : t -> (Net.Socket.t, Tls.TLSSocket.t) union2) =
          fun (x1908 : t) ->
            union2_of_js Net.Socket.t_of_js Tls.TLSSocket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1908) "connection")
        let (get_complete : t -> bool) =
          fun (x1911 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1911) "complete")
        let (get_headers : t -> http2_IncomingHttpHeaders) =
          fun (x1912 : t) ->
            http2_IncomingHttpHeaders_of_js
              (Ojs.get_prop_ascii (t_to_js x1912) "headers")
        let (get_httpVersion : t -> string) =
          fun (x1913 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1913) "httpVersion")
        let (get_httpVersionMinor : t -> int) =
          fun (x1914 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1914) "httpVersionMinor")
        let (get_httpVersionMajor : t -> int) =
          fun (x1915 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1915) "httpVersionMajor")
        let (get_method : t -> string) =
          fun (x1916 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1916) "method")
        let (get_rawHeaders : t -> string list) =
          fun (x1917 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1917) "rawHeaders")
        let (get_rawTrailers : t -> string list) =
          fun (x1919 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1919) "rawTrailers")
        let (get_scheme : t -> string) =
          fun (x1921 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1921) "scheme")
        let (get_socket : t -> (Net.Socket.t, Tls.TLSSocket.t) union2) =
          fun (x1922 : t) ->
            union2_of_js Net.Socket.t_of_js Tls.TLSSocket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1922) "socket")
        let (get_stream : t -> http2_ServerHttp2Stream) =
          fun (x1925 : t) ->
            http2_ServerHttp2Stream_of_js
              (Ojs.get_prop_ascii (t_to_js x1925) "stream")
        let (get_trailers : t -> http2_IncomingHttpHeaders) =
          fun (x1926 : t) ->
            http2_IncomingHttpHeaders_of_js
              (Ojs.get_prop_ascii (t_to_js x1926) "trailers")
        let (get_url : t -> string) =
          fun (x1927 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1927) "url")
        let (setTimeout :
          t -> msecs:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x1932 : t) ->
            fun ~msecs:(x1928 : int) ->
              fun ?callback:(x1929 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x1933 = t_to_js x1932 in
                     Ojs.call (Ojs.get_prop_ascii x1933 "setTimeout") "apply"
                       [|x1933;((let x1930 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1930 "push"
                                      [|(Ojs.int_to_js x1928)|]);
                                 (match x1929 with
                                  | Some x1931 ->
                                      ignore
                                        (Ojs.call x1930 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x1931 ()))|])
                                  | None -> ());
                                 x1930))|])
        let (read : t -> ?size:int -> unit -> Buffer.t or_string or_null) =
          fun (x1937 : t) ->
            fun ?size:(x1934 : int option) ->
              fun () ->
                or_null_of_js
                  (fun (x1939 : Ojs.t) ->
                     or_string_of_js Buffer.t_of_js x1939)
                  (let x1938 = t_to_js x1937 in
                   Ojs.call (Ojs.get_prop_ascii x1938 "read") "apply"
                     [|x1938;((let x1935 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x1934 with
                                | Some x1936 ->
                                    ignore
                                      (Ojs.call x1935 "push"
                                         [|(Ojs.int_to_js x1936)|])
                                | None -> ());
                               x1935))|])
        let (addListener :
          t ->
            event:[ `aborted ] ->
              listener:(hadError:bool -> code:int -> unit) -> t)
          =
          fun (x1945 : t) ->
            fun ~event:(x1941 : [ `aborted ]) ->
              fun ~listener:(x1942 : hadError:bool -> code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1945) "addListener"
                     [|((match x1941 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 2
                         (fun (x1943 : Ojs.t) ->
                            fun (x1944 : Ojs.t) ->
                              x1942 ~hadError:(Ojs.bool_of_js x1943)
                                ~code:(Ojs.int_of_js x1944)))|])
        let (addListener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x1948 : t) ->
            fun ~event:(x1946 : [ `close ]) ->
              fun ~listener:(x1947 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1948) "addListener"
                     [|((match x1946 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x1947 ()))|])
        let (addListener'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x1953 : t) ->
            fun ~event:(x1949 : [ `data ]) ->
              fun ~listener:(x1950 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1953) "addListener"
                     [|((match x1949 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x1951 : Ojs.t) ->
                            x1950
                              ~chunk:(or_string_of_js Buffer.t_of_js x1951)))|])
        let (addListener''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x1956 : t) ->
            fun ~event:(x1954 : [ `end_ ]) ->
              fun ~listener:(x1955 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1956) "addListener"
                     [|((match x1954 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x1955 ()))|])
        let (addListener'''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x1959 : t) ->
            fun ~event:(x1957 : [ `readable ]) ->
              fun ~listener:(x1958 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1959) "addListener"
                     [|((match x1957 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x1958 ()))|])
        let (addListener''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x1963 : t) ->
            fun ~event:(x1960 : [ `error ]) ->
              fun ~listener:(x1961 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1963) "addListener"
                     [|((match x1960 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x1962 :
                                                                    Ojs.t) ->
                                                                    x1961
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x1962)))|])
        let (addListener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x1969 : t) ->
            fun ~event:(x1964 : symbol or_string) ->
              fun ~listener:(x1966 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1969) "addListener"
                     [|(or_string_to_js symbol_to_js x1964);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x1967 : _)
                                                                  ->
                                                                  x1966
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x1967 0)))|])
        let (emit :
          t -> event:[ `aborted ] -> hadError:bool -> code:int -> bool) =
          fun (x1973 : t) ->
            fun ~event:(x1970 : [ `aborted ]) ->
              fun ~hadError:(x1971 : bool) ->
                fun ~code:(x1972 : int) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x1973) "emit"
                       [|((match x1970 with
                           | `aborted -> Ojs.string_to_js "aborted"));(
                         Ojs.bool_to_js x1971);(Ojs.int_to_js x1972)|])
        let (emit' : t -> event:[ `close ] -> bool) =
          fun (x1975 : t) ->
            fun ~event:(x1974 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1975) "emit"
                   [|((match x1974 with | `close -> Ojs.string_to_js "close"))|])
        let (emit'' :
          t -> event:[ `data ] -> chunk:Buffer.t or_string -> bool) =
          fun (x1979 : t) ->
            fun ~event:(x1976 : [ `data ]) ->
              fun ~chunk:(x1977 : Buffer.t or_string) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1979) "emit"
                     [|((match x1976 with | `data -> Ojs.string_to_js "data"));(
                       or_string_to_js Buffer.t_to_js x1977)|])
        let (emit''' : t -> event:[ `end_ ] -> bool) =
          fun (x1981 : t) ->
            fun ~event:(x1980 : [ `end_ ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1981) "emit"
                   [|((match x1980 with | `end_ -> Ojs.string_to_js "end"))|])
        let (emit'''' : t -> event:[ `readable ] -> bool) =
          fun (x1983 : t) ->
            fun ~event:(x1982 : [ `readable ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x1983) "emit"
                   [|((match x1982 with
                       | `readable -> Ojs.string_to_js "readable"))|])
        let (emit''''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x1986 : t) ->
            fun ~event:(x1984 : [ `error ]) ->
              fun ~err:(x1985 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x1986) "emit"
                     [|((match x1984 with
                         | `error -> Ojs.string_to_js "error"));(Error.t_to_js
                                                                   x1985)|])
        let (emit'''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x1992 : t) ->
            fun ~event:(x1987 : symbol or_string) ->
              fun ~args:(x1988 : any list) ->
                Ojs.bool_of_js
                  (let x1993 = t_to_js x1992 in
                   Ojs.call (Ojs.get_prop_ascii x1993 "emit") "apply"
                     [|x1993;((let x1989 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1989 "push"
                                    [|(or_string_to_js symbol_to_js x1987)|]);
                               List.iter
                                 (fun (x1990 : any) ->
                                    ignore
                                      (Ojs.call x1989 "push"
                                         [|(any_to_js x1990)|])) x1988;
                               x1989))|])
        let (on :
          t ->
            event:[ `aborted ] ->
              listener:(hadError:bool -> code:int -> unit) -> t)
          =
          fun (x1998 : t) ->
            fun ~event:(x1994 : [ `aborted ]) ->
              fun ~listener:(x1995 : hadError:bool -> code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x1998) "on"
                     [|((match x1994 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 2
                         (fun (x1996 : Ojs.t) ->
                            fun (x1997 : Ojs.t) ->
                              x1995 ~hadError:(Ojs.bool_of_js x1996)
                                ~code:(Ojs.int_of_js x1997)))|])
        let (on' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x2001 : t) ->
            fun ~event:(x1999 : [ `close ]) ->
              fun ~listener:(x2000 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2001) "on"
                     [|((match x1999 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x2000 ()))|])
        let (on'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x2006 : t) ->
            fun ~event:(x2002 : [ `data ]) ->
              fun ~listener:(x2003 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2006) "on"
                     [|((match x2002 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x2004 : Ojs.t) ->
                            x2003
                              ~chunk:(or_string_of_js Buffer.t_of_js x2004)))|])
        let (on''' : t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x2009 : t) ->
            fun ~event:(x2007 : [ `end_ ]) ->
              fun ~listener:(x2008 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2009) "on"
                     [|((match x2007 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x2008 ()))|])
        let (on'''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x2012 : t) ->
            fun ~event:(x2010 : [ `readable ]) ->
              fun ~listener:(x2011 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2012) "on"
                     [|((match x2010 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x2011 ()))|])
        let (on''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x2016 : t) ->
            fun ~event:(x2013 : [ `error ]) ->
              fun ~listener:(x2014 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2016) "on"
                     [|((match x2013 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x2015 :
                                                                    Ojs.t) ->
                                                                    x2014
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x2015)))|])
        let (on'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2022 : t) ->
            fun ~event:(x2017 : symbol or_string) ->
              fun ~listener:(x2019 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2022) "on"
                     [|(or_string_to_js symbol_to_js x2017);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2020 : _)
                                                                  ->
                                                                  x2019
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2020 0)))|])
        let (once :
          t ->
            event:[ `aborted ] ->
              listener:(hadError:bool -> code:int -> unit) -> t)
          =
          fun (x2027 : t) ->
            fun ~event:(x2023 : [ `aborted ]) ->
              fun ~listener:(x2024 : hadError:bool -> code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2027) "once"
                     [|((match x2023 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 2
                         (fun (x2025 : Ojs.t) ->
                            fun (x2026 : Ojs.t) ->
                              x2024 ~hadError:(Ojs.bool_of_js x2025)
                                ~code:(Ojs.int_of_js x2026)))|])
        let (once' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x2030 : t) ->
            fun ~event:(x2028 : [ `close ]) ->
              fun ~listener:(x2029 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2030) "once"
                     [|((match x2028 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x2029 ()))|])
        let (once'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x2035 : t) ->
            fun ~event:(x2031 : [ `data ]) ->
              fun ~listener:(x2032 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2035) "once"
                     [|((match x2031 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x2033 : Ojs.t) ->
                            x2032
                              ~chunk:(or_string_of_js Buffer.t_of_js x2033)))|])
        let (once''' : t -> event:[ `end_ ] -> listener:(unit -> unit) -> t)
          =
          fun (x2038 : t) ->
            fun ~event:(x2036 : [ `end_ ]) ->
              fun ~listener:(x2037 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2038) "once"
                     [|((match x2036 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x2037 ()))|])
        let (once'''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x2041 : t) ->
            fun ~event:(x2039 : [ `readable ]) ->
              fun ~listener:(x2040 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2041) "once"
                     [|((match x2039 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x2040 ()))|])
        let (once''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x2045 : t) ->
            fun ~event:(x2042 : [ `error ]) ->
              fun ~listener:(x2043 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2045) "once"
                     [|((match x2042 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x2044 :
                                                                    Ojs.t) ->
                                                                    x2043
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x2044)))|])
        let (once'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2051 : t) ->
            fun ~event:(x2046 : symbol or_string) ->
              fun ~listener:(x2048 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2051) "once"
                     [|(or_string_to_js symbol_to_js x2046);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2049 : _)
                                                                  ->
                                                                  x2048
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2049 0)))|])
        let (prependListener :
          t ->
            event:[ `aborted ] ->
              listener:(hadError:bool -> code:int -> unit) -> t)
          =
          fun (x2056 : t) ->
            fun ~event:(x2052 : [ `aborted ]) ->
              fun ~listener:(x2053 : hadError:bool -> code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2056) "prependListener"
                     [|((match x2052 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 2
                         (fun (x2054 : Ojs.t) ->
                            fun (x2055 : Ojs.t) ->
                              x2053 ~hadError:(Ojs.bool_of_js x2054)
                                ~code:(Ojs.int_of_js x2055)))|])
        let (prependListener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x2059 : t) ->
            fun ~event:(x2057 : [ `close ]) ->
              fun ~listener:(x2058 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2059) "prependListener"
                     [|((match x2057 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x2058 ()))|])
        let (prependListener'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x2064 : t) ->
            fun ~event:(x2060 : [ `data ]) ->
              fun ~listener:(x2061 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2064) "prependListener"
                     [|((match x2060 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x2062 : Ojs.t) ->
                            x2061
                              ~chunk:(or_string_of_js Buffer.t_of_js x2062)))|])
        let (prependListener''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x2067 : t) ->
            fun ~event:(x2065 : [ `end_ ]) ->
              fun ~listener:(x2066 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2067) "prependListener"
                     [|((match x2065 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x2066 ()))|])
        let (prependListener'''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x2070 : t) ->
            fun ~event:(x2068 : [ `readable ]) ->
              fun ~listener:(x2069 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2070) "prependListener"
                     [|((match x2068 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x2069 ()))|])
        let (prependListener''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x2074 : t) ->
            fun ~event:(x2071 : [ `error ]) ->
              fun ~listener:(x2072 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2074) "prependListener"
                     [|((match x2071 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x2073 :
                                                                    Ojs.t) ->
                                                                    x2072
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x2073)))|])
        let (prependListener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2080 : t) ->
            fun ~event:(x2075 : symbol or_string) ->
              fun ~listener:(x2077 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2080) "prependListener"
                     [|(or_string_to_js symbol_to_js x2075);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2078 : _)
                                                                  ->
                                                                  x2077
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2078 0)))|])
        let (prependOnceListener :
          t ->
            event:[ `aborted ] ->
              listener:(hadError:bool -> code:int -> unit) -> t)
          =
          fun (x2085 : t) ->
            fun ~event:(x2081 : [ `aborted ]) ->
              fun ~listener:(x2082 : hadError:bool -> code:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2085) "prependOnceListener"
                     [|((match x2081 with
                         | `aborted -> Ojs.string_to_js "aborted"));(
                       Ojs.fun_to_js 2
                         (fun (x2083 : Ojs.t) ->
                            fun (x2084 : Ojs.t) ->
                              x2082 ~hadError:(Ojs.bool_of_js x2083)
                                ~code:(Ojs.int_of_js x2084)))|])
        let (prependOnceListener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x2088 : t) ->
            fun ~event:(x2086 : [ `close ]) ->
              fun ~listener:(x2087 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2088) "prependOnceListener"
                     [|((match x2086 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x2087 ()))|])
        let (prependOnceListener'' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x2093 : t) ->
            fun ~event:(x2089 : [ `data ]) ->
              fun ~listener:(x2090 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2093) "prependOnceListener"
                     [|((match x2089 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x2091 : Ojs.t) ->
                            x2090
                              ~chunk:(or_string_of_js Buffer.t_of_js x2091)))|])
        let (prependOnceListener''' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x2096 : t) ->
            fun ~event:(x2094 : [ `end_ ]) ->
              fun ~listener:(x2095 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2096) "prependOnceListener"
                     [|((match x2094 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x2095 ()))|])
        let (prependOnceListener'''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x2099 : t) ->
            fun ~event:(x2097 : [ `readable ]) ->
              fun ~listener:(x2098 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2099) "prependOnceListener"
                     [|((match x2097 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x2098 ()))|])
        let (prependOnceListener''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x2103 : t) ->
            fun ~event:(x2100 : [ `error ]) ->
              fun ~listener:(x2101 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2103) "prependOnceListener"
                     [|((match x2100 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x2102 :
                                                                    Ojs.t) ->
                                                                    x2101
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x2102)))|])
        let (prependOnceListener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2109 : t) ->
            fun ~event:(x2104 : symbol or_string) ->
              fun ~listener:(x2106 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2109) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x2104);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2107 : _)
                                                                  ->
                                                                  x2106
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2107 0)))|])
        let (cast : t -> Stream.Readable.t) =
          fun (x2110 : t) -> Stream.Readable.t_of_js (t_to_js x2110)
      end
    module Http2ServerResponse =
      struct
        type t = http2_Http2ServerResponse
        let rec t_of_js : Ojs.t -> t =
          fun (x2112 : Ojs.t) -> http2_Http2ServerResponse_of_js x2112
        and t_to_js : t -> Ojs.t =
          fun (x2111 : http2_Http2ServerResponse) ->
            http2_Http2ServerResponse_to_js x2111
        let (create : stream:http2_ServerHttp2Stream -> t) =
          fun ~stream:(x2113 : http2_ServerHttp2Stream) ->
            t_of_js
              (Ojs.new_obj
                 (Ojs.get_prop_ascii Import.http2 "Http2ServerResponse")
                 [|(http2_ServerHttp2Stream_to_js x2113)|])
        let (get_connection : t -> (Net.Socket.t, Tls.TLSSocket.t) union2) =
          fun (x2114 : t) ->
            union2_of_js Net.Socket.t_of_js Tls.TLSSocket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2114) "connection")
        let (get_finished : t -> bool) =
          fun (x2117 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2117) "finished")
        let (get_headersSent : t -> bool) =
          fun (x2118 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2118) "headersSent")
        let (get_socket : t -> (Net.Socket.t, Tls.TLSSocket.t) union2) =
          fun (x2119 : t) ->
            union2_of_js Net.Socket.t_of_js Tls.TLSSocket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2119) "socket")
        let (get_stream : t -> http2_ServerHttp2Stream) =
          fun (x2122 : t) ->
            http2_ServerHttp2Stream_of_js
              (Ojs.get_prop_ascii (t_to_js x2122) "stream")
        let (get_sendDate : t -> bool) =
          fun (x2123 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x2123) "sendDate")
        let (set_sendDate : t -> bool -> unit) =
          fun (x2124 : t) ->
            fun (x2125 : bool) ->
              Ojs.set_prop_ascii (t_to_js x2124) "sendDate"
                (Ojs.bool_to_js x2125)
        let (get_statusCode : t -> int) =
          fun (x2126 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2126) "statusCode")
        let (set_statusCode : t -> int -> unit) =
          fun (x2127 : t) ->
            fun (x2128 : int) ->
              Ojs.set_prop_ascii (t_to_js x2127) "statusCode"
                (Ojs.int_to_js x2128)
        let (get_statusMessage : t -> [ `L_s0 ]) =
          fun (x2129 : t) ->
            let x2130 = Ojs.get_prop_ascii (t_to_js x2129) "statusMessage" in
            match Ojs.string_of_js x2130 with
            | "" -> `L_s0
            | _ -> assert false
        let (set_statusMessage : t -> [ `L_s0 ] -> unit) =
          fun (x2131 : t) ->
            fun (x2132 : [ `L_s0 ]) ->
              Ojs.set_prop_ascii (t_to_js x2131) "statusMessage"
                (match x2132 with | `L_s0 -> Ojs.string_to_js "LS0")
        let (addTrailers :
          t -> trailers:Node_http.Http.OutgoingHttpHeaders.t -> unit) =
          fun (x2134 : t) ->
            fun ~trailers:(x2133 : Node_http.Http.OutgoingHttpHeaders.t) ->
              ignore
                (Ojs.call (t_to_js x2134) "addTrailers"
                   [|(Node_http.Http.OutgoingHttpHeaders.t_to_js x2133)|])
        let (end_ : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x2138 : t) ->
            fun ?callback:(x2135 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x2139 = t_to_js x2138 in
                   Ojs.call (Ojs.get_prop_ascii x2139 "end") "apply"
                     [|x2139;((let x2136 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x2135 with
                                | Some x2137 ->
                                    ignore
                                      (Ojs.call x2136 "push"
                                         [|(Ojs.fun_to_js 1
                                              (fun _ -> x2137 ()))|])
                                | None -> ());
                               x2136))|])
        let (end_' :
          t ->
            data:Uint8Array.t or_string ->
              ?callback:(unit -> unit) -> unit -> unit)
          =
          fun (x2145 : t) ->
            fun ~data:(x2140 : Uint8Array.t or_string) ->
              fun ?callback:(x2141 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x2146 = t_to_js x2145 in
                     Ojs.call (Ojs.get_prop_ascii x2146 "end") "apply"
                       [|x2146;((let x2142 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2142 "push"
                                      [|(or_string_to_js Uint8Array.t_to_js
                                           x2140)|]);
                                 (match x2141 with
                                  | Some x2143 ->
                                      ignore
                                        (Ojs.call x2142 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x2143 ()))|])
                                  | None -> ());
                                 x2142))|])
        let (end_'' :
          t ->
            data:Uint8Array.t or_string ->
              encoding:BufferEncoding.t ->
                ?callback:(unit -> unit) -> unit -> unit)
          =
          fun (x2153 : t) ->
            fun ~data:(x2147 : Uint8Array.t or_string) ->
              fun ~encoding:(x2148 : BufferEncoding.t) ->
                fun ?callback:(x2149 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x2154 = t_to_js x2153 in
                       Ojs.call (Ojs.get_prop_ascii x2154 "end") "apply"
                         [|x2154;((let x2150 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x2150 "push"
                                        [|(or_string_to_js Uint8Array.t_to_js
                                             x2147)|]);
                                   ignore
                                     (Ojs.call x2150 "push"
                                        [|(BufferEncoding.t_to_js x2148)|]);
                                   (match x2149 with
                                    | Some x2151 ->
                                        ignore
                                          (Ojs.call x2150 "push"
                                             [|(Ojs.fun_to_js 1
                                                  (fun _ -> x2151 ()))|])
                                    | None -> ());
                                   x2150))|])
        let (getHeader : t -> name:string -> string) =
          fun (x2156 : t) ->
            fun ~name:(x2155 : string) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x2156) "getHeader"
                   [|(Ojs.string_to_js x2155)|])
        let (getHeaderNames : t -> string list) =
          fun (x2157 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x2157) "getHeaderNames" [||])
        let (getHeaders : t -> Node_http.Http.OutgoingHttpHeaders.t) =
          fun (x2159 : t) ->
            Node_http.Http.OutgoingHttpHeaders.t_of_js
              (Ojs.call (t_to_js x2159) "getHeaders" [||])
        let (hasHeader : t -> name:string -> bool) =
          fun (x2161 : t) ->
            fun ~name:(x2160 : string) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x2161) "hasHeader"
                   [|(Ojs.string_to_js x2160)|])
        let (removeHeader : t -> name:string -> unit) =
          fun (x2163 : t) ->
            fun ~name:(x2162 : string) ->
              ignore
                (Ojs.call (t_to_js x2163) "removeHeader"
                   [|(Ojs.string_to_js x2162)|])
        let (setHeader :
          t -> name:string -> value:string list or_string or_number -> unit)
          =
          fun (x2169 : t) ->
            fun ~name:(x2164 : string) ->
              fun ~value:(x2165 : string list or_string or_number) ->
                ignore
                  (Ojs.call (t_to_js x2169) "setHeader"
                     [|(Ojs.string_to_js x2164);(or_number_to_js
                                                   (fun
                                                      (x2166 :
                                                        string list or_string)
                                                      ->
                                                      or_string_to_js
                                                        (fun
                                                           (x2167 :
                                                             string list)
                                                           ->
                                                           Ojs.list_to_js
                                                             Ojs.string_to_js
                                                             x2167) x2166)
                                                   x2165)|])
        let (setTimeout :
          t -> msecs:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x2174 : t) ->
            fun ~msecs:(x2170 : int) ->
              fun ?callback:(x2171 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x2175 = t_to_js x2174 in
                     Ojs.call (Ojs.get_prop_ascii x2175 "setTimeout") "apply"
                       [|x2175;((let x2172 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2172 "push"
                                      [|(Ojs.int_to_js x2170)|]);
                                 (match x2171 with
                                  | Some x2173 ->
                                      ignore
                                        (Ojs.call x2172 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x2173 ()))|])
                                  | None -> ());
                                 x2172))|])
        let (write :
          t ->
            chunk:Uint8Array.t or_string ->
              ?callback:(err:Error.t -> unit) -> unit -> bool)
          =
          fun (x2182 : t) ->
            fun ~chunk:(x2176 : Uint8Array.t or_string) ->
              fun ?callback:(x2177 : (err:Error.t -> unit) option) ->
                fun () ->
                  Ojs.bool_of_js
                    (let x2183 = t_to_js x2182 in
                     Ojs.call (Ojs.get_prop_ascii x2183 "write") "apply"
                       [|x2183;((let x2178 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2178 "push"
                                      [|(or_string_to_js Uint8Array.t_to_js
                                           x2176)|]);
                                 (match x2177 with
                                  | Some x2179 ->
                                      ignore
                                        (Ojs.call x2178 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun (x2180 : Ojs.t) ->
                                                   x2179
                                                     ~err:(Error.t_of_js
                                                             x2180)))|])
                                  | None -> ());
                                 x2178))|])
        let (write' :
          t ->
            chunk:Uint8Array.t or_string ->
              encoding:BufferEncoding.t ->
                ?callback:(err:Error.t -> unit) -> unit -> bool)
          =
          fun (x2191 : t) ->
            fun ~chunk:(x2184 : Uint8Array.t or_string) ->
              fun ~encoding:(x2185 : BufferEncoding.t) ->
                fun ?callback:(x2186 : (err:Error.t -> unit) option) ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x2192 = t_to_js x2191 in
                       Ojs.call (Ojs.get_prop_ascii x2192 "write") "apply"
                         [|x2192;((let x2187 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x2187 "push"
                                        [|(or_string_to_js Uint8Array.t_to_js
                                             x2184)|]);
                                   ignore
                                     (Ojs.call x2187 "push"
                                        [|(BufferEncoding.t_to_js x2185)|]);
                                   (match x2186 with
                                    | Some x2188 ->
                                        ignore
                                          (Ojs.call x2187 "push"
                                             [|(Ojs.fun_to_js 1
                                                  (fun (x2189 : Ojs.t) ->
                                                     x2188
                                                       ~err:(Error.t_of_js
                                                               x2189)))|])
                                    | None -> ());
                                   x2187))|])
        let (writeContinue : t -> unit) =
          fun (x2193 : t) ->
            ignore (Ojs.call (t_to_js x2193) "writeContinue" [||])
        let (writeHead :
          t ->
            statusCode:int ->
              ?headers:Node_http.Http.OutgoingHttpHeaders.t -> unit -> t)
          =
          fun (x2198 : t) ->
            fun ~statusCode:(x2194 : int) ->
              fun
                ?headers:(x2195 :
                           Node_http.Http.OutgoingHttpHeaders.t option)
                ->
                fun () ->
                  t_of_js
                    (let x2199 = t_to_js x2198 in
                     Ojs.call (Ojs.get_prop_ascii x2199 "writeHead") "apply"
                       [|x2199;((let x2196 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2196 "push"
                                      [|(Ojs.int_to_js x2194)|]);
                                 (match x2195 with
                                  | Some x2197 ->
                                      ignore
                                        (Ojs.call x2196 "push"
                                           [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                                x2197)|])
                                  | None -> ());
                                 x2196))|])
        let (writeHead' :
          t ->
            statusCode:int ->
              statusMessage:string ->
                ?headers:Node_http.Http.OutgoingHttpHeaders.t -> unit -> t)
          =
          fun (x2205 : t) ->
            fun ~statusCode:(x2200 : int) ->
              fun ~statusMessage:(x2201 : string) ->
                fun
                  ?headers:(x2202 :
                             Node_http.Http.OutgoingHttpHeaders.t option)
                  ->
                  fun () ->
                    t_of_js
                      (let x2206 = t_to_js x2205 in
                       Ojs.call (Ojs.get_prop_ascii x2206 "writeHead")
                         "apply"
                         [|x2206;((let x2203 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x2203 "push"
                                        [|(Ojs.int_to_js x2200)|]);
                                   ignore
                                     (Ojs.call x2203 "push"
                                        [|(Ojs.string_to_js x2201)|]);
                                   (match x2202 with
                                    | Some x2204 ->
                                        ignore
                                          (Ojs.call x2203 "push"
                                             [|(Node_http.Http.OutgoingHttpHeaders.t_to_js
                                                  x2204)|])
                                    | None -> ());
                                   x2203))|])
        let (createPushResponse :
          t ->
            headers:Node_http.Http.OutgoingHttpHeaders.t ->
              callback:(err:Error.t or_null -> res:t -> unit) -> unit)
          =
          fun (x2212 : t) ->
            fun ~headers:(x2207 : Node_http.Http.OutgoingHttpHeaders.t) ->
              fun ~callback:(x2208 : err:Error.t or_null -> res:t -> unit) ->
                ignore
                  (Ojs.call (t_to_js x2212) "createPushResponse"
                     [|(Node_http.Http.OutgoingHttpHeaders.t_to_js x2207);(
                       Ojs.fun_to_js 2
                         (fun (x2209 : Ojs.t) ->
                            fun (x2211 : Ojs.t) ->
                              x2208 ~err:(or_null_of_js Error.t_of_js x2209)
                                ~res:(t_of_js x2211)))|])
        let (addListener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x2215 : t) ->
            fun ~event:(x2213 : [ `close ]) ->
              fun ~listener:(x2214 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2215) "addListener"
                     [|((match x2213 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x2214 ()))|])
        let (addListener' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x2218 : t) ->
            fun ~event:(x2216 : [ `drain ]) ->
              fun ~listener:(x2217 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2218) "addListener"
                     [|((match x2216 with
                         | `drain -> Ojs.string_to_js "drain"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x2217 ()))|])
        let (addListener'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x2222 : t) ->
            fun ~event:(x2219 : [ `error ]) ->
              fun ~listener:(x2220 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2222) "addListener"
                     [|((match x2219 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x2221 :
                                                                    Ojs.t) ->
                                                                    x2220
                                                                    ~error:(
                                                                    Error.t_of_js
                                                                    x2221)))|])
        let (addListener''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x2225 : t) ->
            fun ~event:(x2223 : [ `finish ]) ->
              fun ~listener:(x2224 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2225) "addListener"
                     [|((match x2223 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x2224 ()))|])
        let (addListener'''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x2229 : t) ->
            fun ~event:(x2226 : [ `pipe ]) ->
              fun ~listener:(x2227 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2229) "addListener"
                     [|((match x2226 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x2228 : Ojs.t) ->
                            x2227 ~src:(Stream.Readable.t_of_js x2228)))|])
        let (addListener''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x2233 : t) ->
            fun ~event:(x2230 : [ `unpipe ]) ->
              fun ~listener:(x2231 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2233) "addListener"
                     [|((match x2230 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x2232 :
                                                                    Ojs.t) ->
                                                                    x2231
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x2232)))|])
        let (addListener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2239 : t) ->
            fun ~event:(x2234 : symbol or_string) ->
              fun ~listener:(x2236 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2239) "addListener"
                     [|(or_string_to_js symbol_to_js x2234);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2237 : _)
                                                                  ->
                                                                  x2236
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2237 0)))|])
        let (emit : t -> event:[ `close ] -> bool) =
          fun (x2241 : t) ->
            fun ~event:(x2240 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x2241) "emit"
                   [|((match x2240 with | `close -> Ojs.string_to_js "close"))|])
        let (emit' : t -> event:[ `drain ] -> bool) =
          fun (x2243 : t) ->
            fun ~event:(x2242 : [ `drain ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x2243) "emit"
                   [|((match x2242 with | `drain -> Ojs.string_to_js "drain"))|])
        let (emit'' : t -> event:[ `error ] -> error:Error.t -> bool) =
          fun (x2246 : t) ->
            fun ~event:(x2244 : [ `error ]) ->
              fun ~error:(x2245 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x2246) "emit"
                     [|((match x2244 with
                         | `error -> Ojs.string_to_js "error"));(Error.t_to_js
                                                                   x2245)|])
        let (emit''' : t -> event:[ `finish ] -> bool) =
          fun (x2248 : t) ->
            fun ~event:(x2247 : [ `finish ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x2248) "emit"
                   [|((match x2247 with
                       | `finish -> Ojs.string_to_js "finish"))|])
        let (emit'''' :
          t -> event:[ `pipe ] -> src:Stream.Readable.t -> bool) =
          fun (x2251 : t) ->
            fun ~event:(x2249 : [ `pipe ]) ->
              fun ~src:(x2250 : Stream.Readable.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x2251) "emit"
                     [|((match x2249 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Stream.Readable.t_to_js x2250)|])
        let (emit''''' :
          t -> event:[ `unpipe ] -> src:Stream.Readable.t -> bool) =
          fun (x2254 : t) ->
            fun ~event:(x2252 : [ `unpipe ]) ->
              fun ~src:(x2253 : Stream.Readable.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x2254) "emit"
                     [|((match x2252 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Stream.Readable.t_to_js
                                                                    x2253)|])
        let (emit'''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x2260 : t) ->
            fun ~event:(x2255 : symbol or_string) ->
              fun ~args:(x2256 : any list) ->
                Ojs.bool_of_js
                  (let x2261 = t_to_js x2260 in
                   Ojs.call (Ojs.get_prop_ascii x2261 "emit") "apply"
                     [|x2261;((let x2257 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2257 "push"
                                    [|(or_string_to_js symbol_to_js x2255)|]);
                               List.iter
                                 (fun (x2258 : any) ->
                                    ignore
                                      (Ojs.call x2257 "push"
                                         [|(any_to_js x2258)|])) x2256;
                               x2257))|])
        let (on : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x2264 : t) ->
            fun ~event:(x2262 : [ `close ]) ->
              fun ~listener:(x2263 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2264) "on"
                     [|((match x2262 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x2263 ()))|])
        let (on' : t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x2267 : t) ->
            fun ~event:(x2265 : [ `drain ]) ->
              fun ~listener:(x2266 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2267) "on"
                     [|((match x2265 with
                         | `drain -> Ojs.string_to_js "drain"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x2266 ()))|])
        let (on'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x2271 : t) ->
            fun ~event:(x2268 : [ `error ]) ->
              fun ~listener:(x2269 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2271) "on"
                     [|((match x2268 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x2270 :
                                                                    Ojs.t) ->
                                                                    x2269
                                                                    ~error:(
                                                                    Error.t_of_js
                                                                    x2270)))|])
        let (on''' : t -> event:[ `finish ] -> listener:(unit -> unit) -> t)
          =
          fun (x2274 : t) ->
            fun ~event:(x2272 : [ `finish ]) ->
              fun ~listener:(x2273 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2274) "on"
                     [|((match x2272 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x2273 ()))|])
        let (on'''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x2278 : t) ->
            fun ~event:(x2275 : [ `pipe ]) ->
              fun ~listener:(x2276 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2278) "on"
                     [|((match x2275 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x2277 : Ojs.t) ->
                            x2276 ~src:(Stream.Readable.t_of_js x2277)))|])
        let (on''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x2282 : t) ->
            fun ~event:(x2279 : [ `unpipe ]) ->
              fun ~listener:(x2280 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2282) "on"
                     [|((match x2279 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x2281 :
                                                                    Ojs.t) ->
                                                                    x2280
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x2281)))|])
        let (on'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2288 : t) ->
            fun ~event:(x2283 : symbol or_string) ->
              fun ~listener:(x2285 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2288) "on"
                     [|(or_string_to_js symbol_to_js x2283);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2286 : _)
                                                                  ->
                                                                  x2285
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2286 0)))|])
        let (once : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x2291 : t) ->
            fun ~event:(x2289 : [ `close ]) ->
              fun ~listener:(x2290 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2291) "once"
                     [|((match x2289 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x2290 ()))|])
        let (once' : t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x2294 : t) ->
            fun ~event:(x2292 : [ `drain ]) ->
              fun ~listener:(x2293 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2294) "once"
                     [|((match x2292 with
                         | `drain -> Ojs.string_to_js "drain"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x2293 ()))|])
        let (once'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x2298 : t) ->
            fun ~event:(x2295 : [ `error ]) ->
              fun ~listener:(x2296 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2298) "once"
                     [|((match x2295 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x2297 :
                                                                    Ojs.t) ->
                                                                    x2296
                                                                    ~error:(
                                                                    Error.t_of_js
                                                                    x2297)))|])
        let (once''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x2301 : t) ->
            fun ~event:(x2299 : [ `finish ]) ->
              fun ~listener:(x2300 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2301) "once"
                     [|((match x2299 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x2300 ()))|])
        let (once'''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x2305 : t) ->
            fun ~event:(x2302 : [ `pipe ]) ->
              fun ~listener:(x2303 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2305) "once"
                     [|((match x2302 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x2304 : Ojs.t) ->
                            x2303 ~src:(Stream.Readable.t_of_js x2304)))|])
        let (once''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x2309 : t) ->
            fun ~event:(x2306 : [ `unpipe ]) ->
              fun ~listener:(x2307 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2309) "once"
                     [|((match x2306 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x2308 :
                                                                    Ojs.t) ->
                                                                    x2307
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x2308)))|])
        let (once'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2315 : t) ->
            fun ~event:(x2310 : symbol or_string) ->
              fun ~listener:(x2312 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2315) "once"
                     [|(or_string_to_js symbol_to_js x2310);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2313 : _)
                                                                  ->
                                                                  x2312
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2313 0)))|])
        let (prependListener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x2318 : t) ->
            fun ~event:(x2316 : [ `close ]) ->
              fun ~listener:(x2317 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2318) "prependListener"
                     [|((match x2316 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x2317 ()))|])
        let (prependListener' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x2321 : t) ->
            fun ~event:(x2319 : [ `drain ]) ->
              fun ~listener:(x2320 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2321) "prependListener"
                     [|((match x2319 with
                         | `drain -> Ojs.string_to_js "drain"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x2320 ()))|])
        let (prependListener'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x2325 : t) ->
            fun ~event:(x2322 : [ `error ]) ->
              fun ~listener:(x2323 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2325) "prependListener"
                     [|((match x2322 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x2324 :
                                                                    Ojs.t) ->
                                                                    x2323
                                                                    ~error:(
                                                                    Error.t_of_js
                                                                    x2324)))|])
        let (prependListener''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x2328 : t) ->
            fun ~event:(x2326 : [ `finish ]) ->
              fun ~listener:(x2327 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2328) "prependListener"
                     [|((match x2326 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x2327 ()))|])
        let (prependListener'''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x2332 : t) ->
            fun ~event:(x2329 : [ `pipe ]) ->
              fun ~listener:(x2330 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2332) "prependListener"
                     [|((match x2329 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x2331 : Ojs.t) ->
                            x2330 ~src:(Stream.Readable.t_of_js x2331)))|])
        let (prependListener''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x2336 : t) ->
            fun ~event:(x2333 : [ `unpipe ]) ->
              fun ~listener:(x2334 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2336) "prependListener"
                     [|((match x2333 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x2335 :
                                                                    Ojs.t) ->
                                                                    x2334
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x2335)))|])
        let (prependListener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2342 : t) ->
            fun ~event:(x2337 : symbol or_string) ->
              fun ~listener:(x2339 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2342) "prependListener"
                     [|(or_string_to_js symbol_to_js x2337);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2340 : _)
                                                                  ->
                                                                  x2339
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2340 0)))|])
        let (prependOnceListener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x2345 : t) ->
            fun ~event:(x2343 : [ `close ]) ->
              fun ~listener:(x2344 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2345) "prependOnceListener"
                     [|((match x2343 with
                         | `close -> Ojs.string_to_js "close"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x2344 ()))|])
        let (prependOnceListener' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x2348 : t) ->
            fun ~event:(x2346 : [ `drain ]) ->
              fun ~listener:(x2347 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2348) "prependOnceListener"
                     [|((match x2346 with
                         | `drain -> Ojs.string_to_js "drain"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun _ ->
                                                                    x2347 ()))|])
        let (prependOnceListener'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x2352 : t) ->
            fun ~event:(x2349 : [ `error ]) ->
              fun ~listener:(x2350 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2352) "prependOnceListener"
                     [|((match x2349 with
                         | `error -> Ojs.string_to_js "error"));(Ojs.fun_to_js
                                                                   1
                                                                   (fun
                                                                    (x2351 :
                                                                    Ojs.t) ->
                                                                    x2350
                                                                    ~error:(
                                                                    Error.t_of_js
                                                                    x2351)))|])
        let (prependOnceListener''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x2355 : t) ->
            fun ~event:(x2353 : [ `finish ]) ->
              fun ~listener:(x2354 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2355) "prependOnceListener"
                     [|((match x2353 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x2354 ()))|])
        let (prependOnceListener'''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x2359 : t) ->
            fun ~event:(x2356 : [ `pipe ]) ->
              fun ~listener:(x2357 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2359) "prependOnceListener"
                     [|((match x2356 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x2358 : Ojs.t) ->
                            x2357 ~src:(Stream.Readable.t_of_js x2358)))|])
        let (prependOnceListener''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x2363 : t) ->
            fun ~event:(x2360 : [ `unpipe ]) ->
              fun ~listener:(x2361 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2363) "prependOnceListener"
                     [|((match x2360 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x2362 :
                                                                    Ojs.t) ->
                                                                    x2361
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x2362)))|])
        let (prependOnceListener'''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x2369 : t) ->
            fun ~event:(x2364 : symbol or_string) ->
              fun ~listener:(x2366 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x2369) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x2364);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x2367 : _)
                                                                  ->
                                                                  x2366
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x2367 0)))|])
        let (cast : t -> Stream.Writable.t) =
          fun (x2370 : t) -> Stream.Writable.t_of_js (t_to_js x2370)
      end
    module Constants =
      struct
        let (nGHTTP2_SESSION_SERVER : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SESSION_SERVER")
        let (nGHTTP2_SESSION_CLIENT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SESSION_CLIENT")
        let (nGHTTP2_STREAM_STATE_IDLE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_IDLE")
        let (nGHTTP2_STREAM_STATE_OPEN : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_OPEN")
        let (nGHTTP2_STREAM_STATE_RESERVED_LOCAL : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_RESERVED_LOCAL")
        let (nGHTTP2_STREAM_STATE_RESERVED_REMOTE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_RESERVED_REMOTE")
        let (nGHTTP2_STREAM_STATE_HALF_CLOSED_LOCAL : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_HALF_CLOSED_LOCAL")
        let (nGHTTP2_STREAM_STATE_HALF_CLOSED_REMOTE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_HALF_CLOSED_REMOTE")
        let (nGHTTP2_STREAM_STATE_CLOSED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_STATE_CLOSED")
        let (nGHTTP2_NO_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_NO_ERROR")
        let (nGHTTP2_PROTOCOL_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_PROTOCOL_ERROR")
        let (nGHTTP2_INTERNAL_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_INTERNAL_ERROR")
        let (nGHTTP2_FLOW_CONTROL_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLOW_CONTROL_ERROR")
        let (nGHTTP2_SETTINGS_TIMEOUT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_TIMEOUT")
        let (nGHTTP2_STREAM_CLOSED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_STREAM_CLOSED")
        let (nGHTTP2_FRAME_SIZE_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FRAME_SIZE_ERROR")
        let (nGHTTP2_REFUSED_STREAM : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_REFUSED_STREAM")
        let (nGHTTP2_CANCEL : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_CANCEL")
        let (nGHTTP2_COMPRESSION_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_COMPRESSION_ERROR")
        let (nGHTTP2_CONNECT_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_CONNECT_ERROR")
        let (nGHTTP2_ENHANCE_YOUR_CALM : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_ENHANCE_YOUR_CALM")
        let (nGHTTP2_INADEQUATE_SECURITY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_INADEQUATE_SECURITY")
        let (nGHTTP2_HTTP_1_1_REQUIRED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_HTTP_1_1_REQUIRED")
        let (nGHTTP2_ERR_FRAME_SIZE_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_ERR_FRAME_SIZE_ERROR")
        let (nGHTTP2_FLAG_NONE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLAG_NONE")
        let (nGHTTP2_FLAG_END_STREAM : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLAG_END_STREAM")
        let (nGHTTP2_FLAG_END_HEADERS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLAG_END_HEADERS")
        let (nGHTTP2_FLAG_ACK : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLAG_ACK")
        let (nGHTTP2_FLAG_PADDED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLAG_PADDED")
        let (nGHTTP2_FLAG_PRIORITY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_FLAG_PRIORITY")
        let (dEFAULT_SETTINGS_HEADER_TABLE_SIZE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "DEFAULT_SETTINGS_HEADER_TABLE_SIZE")
        let (dEFAULT_SETTINGS_ENABLE_PUSH : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "DEFAULT_SETTINGS_ENABLE_PUSH")
        let (dEFAULT_SETTINGS_INITIAL_WINDOW_SIZE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "DEFAULT_SETTINGS_INITIAL_WINDOW_SIZE")
        let (dEFAULT_SETTINGS_MAX_FRAME_SIZE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "DEFAULT_SETTINGS_MAX_FRAME_SIZE")
        let (mAX_MAX_FRAME_SIZE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "MAX_MAX_FRAME_SIZE")
        let (mIN_MAX_FRAME_SIZE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "MIN_MAX_FRAME_SIZE")
        let (mAX_INITIAL_WINDOW_SIZE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "MAX_INITIAL_WINDOW_SIZE")
        let (nGHTTP2_DEFAULT_WEIGHT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_DEFAULT_WEIGHT")
        let (nGHTTP2_SETTINGS_HEADER_TABLE_SIZE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_HEADER_TABLE_SIZE")
        let (nGHTTP2_SETTINGS_ENABLE_PUSH : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_ENABLE_PUSH")
        let (nGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS")
        let (nGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE")
        let (nGHTTP2_SETTINGS_MAX_FRAME_SIZE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_MAX_FRAME_SIZE")
        let (nGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE")
        let (pADDING_STRATEGY_NONE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "PADDING_STRATEGY_NONE")
        let (pADDING_STRATEGY_MAX : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "PADDING_STRATEGY_MAX")
        let (pADDING_STRATEGY_CALLBACK : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "PADDING_STRATEGY_CALLBACK")
        let (hTTP2_HEADER_STATUS : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_STATUS")
        let (hTTP2_HEADER_METHOD : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_METHOD")
        let (hTTP2_HEADER_AUTHORITY : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_AUTHORITY")
        let (hTTP2_HEADER_SCHEME : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_SCHEME")
        let (hTTP2_HEADER_PATH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_PATH")
        let (hTTP2_HEADER_ACCEPT_CHARSET : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ACCEPT_CHARSET")
        let (hTTP2_HEADER_ACCEPT_ENCODING : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ACCEPT_ENCODING")
        let (hTTP2_HEADER_ACCEPT_LANGUAGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ACCEPT_LANGUAGE")
        let (hTTP2_HEADER_ACCEPT_RANGES : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ACCEPT_RANGES")
        let (hTTP2_HEADER_ACCEPT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ACCEPT")
        let (hTTP2_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN")
        let (hTTP2_HEADER_AGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_AGE")
        let (hTTP2_HEADER_ALLOW : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ALLOW")
        let (hTTP2_HEADER_AUTHORIZATION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_AUTHORIZATION")
        let (hTTP2_HEADER_CACHE_CONTROL : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CACHE_CONTROL")
        let (hTTP2_HEADER_CONNECTION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONNECTION")
        let (hTTP2_HEADER_CONTENT_DISPOSITION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_DISPOSITION")
        let (hTTP2_HEADER_CONTENT_ENCODING : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_ENCODING")
        let (hTTP2_HEADER_CONTENT_LANGUAGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_LANGUAGE")
        let (hTTP2_HEADER_CONTENT_LENGTH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_LENGTH")
        let (hTTP2_HEADER_CONTENT_LOCATION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_LOCATION")
        let (hTTP2_HEADER_CONTENT_MD5 : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_MD5")
        let (hTTP2_HEADER_CONTENT_RANGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_RANGE")
        let (hTTP2_HEADER_CONTENT_TYPE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_CONTENT_TYPE")
        let (hTTP2_HEADER_COOKIE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_COOKIE")
        let (hTTP2_HEADER_DATE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_DATE")
        let (hTTP2_HEADER_ETAG : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_ETAG")
        let (hTTP2_HEADER_EXPECT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_EXPECT")
        let (hTTP2_HEADER_EXPIRES : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_EXPIRES")
        let (hTTP2_HEADER_FROM : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_FROM")
        let (hTTP2_HEADER_HOST : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_HOST")
        let (hTTP2_HEADER_IF_MATCH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_IF_MATCH")
        let (hTTP2_HEADER_IF_MODIFIED_SINCE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_IF_MODIFIED_SINCE")
        let (hTTP2_HEADER_IF_NONE_MATCH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_IF_NONE_MATCH")
        let (hTTP2_HEADER_IF_RANGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_IF_RANGE")
        let (hTTP2_HEADER_IF_UNMODIFIED_SINCE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_IF_UNMODIFIED_SINCE")
        let (hTTP2_HEADER_LAST_MODIFIED : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_LAST_MODIFIED")
        let (hTTP2_HEADER_LINK : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_LINK")
        let (hTTP2_HEADER_LOCATION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_LOCATION")
        let (hTTP2_HEADER_MAX_FORWARDS : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_MAX_FORWARDS")
        let (hTTP2_HEADER_PREFER : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_PREFER")
        let (hTTP2_HEADER_PROXY_AUTHENTICATE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_PROXY_AUTHENTICATE")
        let (hTTP2_HEADER_PROXY_AUTHORIZATION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_PROXY_AUTHORIZATION")
        let (hTTP2_HEADER_RANGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_RANGE")
        let (hTTP2_HEADER_REFERER : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_REFERER")
        let (hTTP2_HEADER_REFRESH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_REFRESH")
        let (hTTP2_HEADER_RETRY_AFTER : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_RETRY_AFTER")
        let (hTTP2_HEADER_SERVER : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_SERVER")
        let (hTTP2_HEADER_SET_COOKIE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_SET_COOKIE")
        let (hTTP2_HEADER_STRICT_TRANSPORT_SECURITY : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_STRICT_TRANSPORT_SECURITY")
        let (hTTP2_HEADER_TRANSFER_ENCODING : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_TRANSFER_ENCODING")
        let (hTTP2_HEADER_TE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_TE")
        let (hTTP2_HEADER_UPGRADE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_UPGRADE")
        let (hTTP2_HEADER_USER_AGENT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_USER_AGENT")
        let (hTTP2_HEADER_VARY : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_VARY")
        let (hTTP2_HEADER_VIA : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_VIA")
        let (hTTP2_HEADER_WWW_AUTHENTICATE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_WWW_AUTHENTICATE")
        let (hTTP2_HEADER_HTTP2_SETTINGS : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_HTTP2_SETTINGS")
        let (hTTP2_HEADER_KEEP_ALIVE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_KEEP_ALIVE")
        let (hTTP2_HEADER_PROXY_CONNECTION : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_HEADER_PROXY_CONNECTION")
        let (hTTP2_METHOD_ACL : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_ACL")
        let (hTTP2_METHOD_BASELINE_CONTROL : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_BASELINE_CONTROL")
        let (hTTP2_METHOD_BIND : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_BIND")
        let (hTTP2_METHOD_CHECKIN : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_CHECKIN")
        let (hTTP2_METHOD_CHECKOUT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_CHECKOUT")
        let (hTTP2_METHOD_CONNECT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_CONNECT")
        let (hTTP2_METHOD_COPY : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_COPY")
        let (hTTP2_METHOD_DELETE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_DELETE")
        let (hTTP2_METHOD_GET : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_GET")
        let (hTTP2_METHOD_HEAD : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_HEAD")
        let (hTTP2_METHOD_LABEL : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_LABEL")
        let (hTTP2_METHOD_LINK : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_LINK")
        let (hTTP2_METHOD_LOCK : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_LOCK")
        let (hTTP2_METHOD_MERGE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MERGE")
        let (hTTP2_METHOD_MKACTIVITY : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MKACTIVITY")
        let (hTTP2_METHOD_MKCALENDAR : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MKCALENDAR")
        let (hTTP2_METHOD_MKCOL : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MKCOL")
        let (hTTP2_METHOD_MKREDIRECTREF : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MKREDIRECTREF")
        let (hTTP2_METHOD_MKWORKSPACE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MKWORKSPACE")
        let (hTTP2_METHOD_MOVE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_MOVE")
        let (hTTP2_METHOD_OPTIONS : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_OPTIONS")
        let (hTTP2_METHOD_ORDERPATCH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_ORDERPATCH")
        let (hTTP2_METHOD_PATCH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_PATCH")
        let (hTTP2_METHOD_POST : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_POST")
        let (hTTP2_METHOD_PRI : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_PRI")
        let (hTTP2_METHOD_PROPFIND : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_PROPFIND")
        let (hTTP2_METHOD_PROPPATCH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_PROPPATCH")
        let (hTTP2_METHOD_PUT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_PUT")
        let (hTTP2_METHOD_REBIND : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_REBIND")
        let (hTTP2_METHOD_REPORT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_REPORT")
        let (hTTP2_METHOD_SEARCH : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_SEARCH")
        let (hTTP2_METHOD_TRACE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_TRACE")
        let (hTTP2_METHOD_UNBIND : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_UNBIND")
        let (hTTP2_METHOD_UNCHECKOUT : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_UNCHECKOUT")
        let (hTTP2_METHOD_UNLINK : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_UNLINK")
        let (hTTP2_METHOD_UNLOCK : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_UNLOCK")
        let (hTTP2_METHOD_UPDATE : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_UPDATE")
        let (hTTP2_METHOD_UPDATEREDIRECTREF : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_UPDATEREDIRECTREF")
        let (hTTP2_METHOD_VERSION_CONTROL : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP2_METHOD_VERSION_CONTROL")
        let (hTTP_STATUS_CONTINUE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_CONTINUE")
        let (hTTP_STATUS_SWITCHING_PROTOCOLS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_SWITCHING_PROTOCOLS")
        let (hTTP_STATUS_PROCESSING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PROCESSING")
        let (hTTP_STATUS_OK : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_OK")
        let (hTTP_STATUS_CREATED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_CREATED")
        let (hTTP_STATUS_ACCEPTED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_ACCEPTED")
        let (hTTP_STATUS_NON_AUTHORITATIVE_INFORMATION : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NON_AUTHORITATIVE_INFORMATION")
        let (hTTP_STATUS_NO_CONTENT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NO_CONTENT")
        let (hTTP_STATUS_RESET_CONTENT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_RESET_CONTENT")
        let (hTTP_STATUS_PARTIAL_CONTENT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PARTIAL_CONTENT")
        let (hTTP_STATUS_MULTI_STATUS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_MULTI_STATUS")
        let (hTTP_STATUS_ALREADY_REPORTED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_ALREADY_REPORTED")
        let (hTTP_STATUS_IM_USED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_IM_USED")
        let (hTTP_STATUS_MULTIPLE_CHOICES : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_MULTIPLE_CHOICES")
        let (hTTP_STATUS_MOVED_PERMANENTLY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_MOVED_PERMANENTLY")
        let (hTTP_STATUS_FOUND : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_FOUND")
        let (hTTP_STATUS_SEE_OTHER : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_SEE_OTHER")
        let (hTTP_STATUS_NOT_MODIFIED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NOT_MODIFIED")
        let (hTTP_STATUS_USE_PROXY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_USE_PROXY")
        let (hTTP_STATUS_TEMPORARY_REDIRECT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_TEMPORARY_REDIRECT")
        let (hTTP_STATUS_PERMANENT_REDIRECT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PERMANENT_REDIRECT")
        let (hTTP_STATUS_BAD_REQUEST : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_BAD_REQUEST")
        let (hTTP_STATUS_UNAUTHORIZED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_UNAUTHORIZED")
        let (hTTP_STATUS_PAYMENT_REQUIRED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PAYMENT_REQUIRED")
        let (hTTP_STATUS_FORBIDDEN : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_FORBIDDEN")
        let (hTTP_STATUS_NOT_FOUND : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NOT_FOUND")
        let (hTTP_STATUS_METHOD_NOT_ALLOWED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_METHOD_NOT_ALLOWED")
        let (hTTP_STATUS_NOT_ACCEPTABLE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NOT_ACCEPTABLE")
        let (hTTP_STATUS_PROXY_AUTHENTICATION_REQUIRED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PROXY_AUTHENTICATION_REQUIRED")
        let (hTTP_STATUS_REQUEST_TIMEOUT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_REQUEST_TIMEOUT")
        let (hTTP_STATUS_CONFLICT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_CONFLICT")
        let (hTTP_STATUS_GONE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_GONE")
        let (hTTP_STATUS_LENGTH_REQUIRED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_LENGTH_REQUIRED")
        let (hTTP_STATUS_PRECONDITION_FAILED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PRECONDITION_FAILED")
        let (hTTP_STATUS_PAYLOAD_TOO_LARGE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PAYLOAD_TOO_LARGE")
        let (hTTP_STATUS_URI_TOO_LONG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_URI_TOO_LONG")
        let (hTTP_STATUS_UNSUPPORTED_MEDIA_TYPE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE")
        let (hTTP_STATUS_RANGE_NOT_SATISFIABLE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_RANGE_NOT_SATISFIABLE")
        let (hTTP_STATUS_EXPECTATION_FAILED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_EXPECTATION_FAILED")
        let (hTTP_STATUS_TEAPOT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_TEAPOT")
        let (hTTP_STATUS_MISDIRECTED_REQUEST : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_MISDIRECTED_REQUEST")
        let (hTTP_STATUS_UNPROCESSABLE_ENTITY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_UNPROCESSABLE_ENTITY")
        let (hTTP_STATUS_LOCKED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_LOCKED")
        let (hTTP_STATUS_FAILED_DEPENDENCY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_FAILED_DEPENDENCY")
        let (hTTP_STATUS_UNORDERED_COLLECTION : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_UNORDERED_COLLECTION")
        let (hTTP_STATUS_UPGRADE_REQUIRED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_UPGRADE_REQUIRED")
        let (hTTP_STATUS_PRECONDITION_REQUIRED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_PRECONDITION_REQUIRED")
        let (hTTP_STATUS_TOO_MANY_REQUESTS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_TOO_MANY_REQUESTS")
        let (hTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE")
        let (hTTP_STATUS_UNAVAILABLE_FOR_LEGAL_REASONS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_UNAVAILABLE_FOR_LEGAL_REASONS")
        let (hTTP_STATUS_INTERNAL_SERVER_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_INTERNAL_SERVER_ERROR")
        let (hTTP_STATUS_NOT_IMPLEMENTED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NOT_IMPLEMENTED")
        let (hTTP_STATUS_BAD_GATEWAY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_BAD_GATEWAY")
        let (hTTP_STATUS_SERVICE_UNAVAILABLE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_SERVICE_UNAVAILABLE")
        let (hTTP_STATUS_GATEWAY_TIMEOUT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_GATEWAY_TIMEOUT")
        let (hTTP_STATUS_HTTP_VERSION_NOT_SUPPORTED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_HTTP_VERSION_NOT_SUPPORTED")
        let (hTTP_STATUS_VARIANT_ALSO_NEGOTIATES : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_VARIANT_ALSO_NEGOTIATES")
        let (hTTP_STATUS_INSUFFICIENT_STORAGE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_INSUFFICIENT_STORAGE")
        let (hTTP_STATUS_LOOP_DETECTED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_LOOP_DETECTED")
        let (hTTP_STATUS_BANDWIDTH_LIMIT_EXCEEDED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_BANDWIDTH_LIMIT_EXCEEDED")
        let (hTTP_STATUS_NOT_EXTENDED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NOT_EXTENDED")
        let (hTTP_STATUS_NETWORK_AUTHENTICATION_REQUIRED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.http2 "constants")
               "HTTP_STATUS_NETWORK_AUTHENTICATION_REQUIRED")
      end
    let (getDefaultSettings : unit -> http2_Settings) =
      fun () ->
        http2_Settings_of_js
          (Ojs.call Import.http2 "getDefaultSettings" [||])
    let (getPackedSettings : settings:http2_Settings -> Buffer.t) =
      fun ~settings:(x2371 : http2_Settings) ->
        Buffer.t_of_js
          (Ojs.call Import.http2 "getPackedSettings"
             [|(http2_Settings_to_js x2371)|])
    let (getUnpackedSettings : buf:Uint8Array.t -> http2_Settings) =
      fun ~buf:(x2372 : Uint8Array.t) ->
        http2_Settings_of_js
          (Ojs.call Import.http2 "getUnpackedSettings"
             [|(Uint8Array.t_to_js x2372)|])
    let (createServer :
      ?onRequestHandler:(request:http2_Http2ServerRequest ->
                           response:http2_Http2ServerResponse -> unit)
        -> unit -> http2_Http2Server)
      =
      fun
        ?onRequestHandler:(x2373 :
                            (request:http2_Http2ServerRequest ->
                               response:http2_Http2ServerResponse -> unit)
                              option)
        ->
        fun () ->
          http2_Http2Server_of_js
            (let x2378 = Import.http2 in
             Ojs.call (Ojs.get_prop_ascii x2378 "createServer") "apply"
               [|x2378;((let x2374 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x2373 with
                          | Some x2375 ->
                              ignore
                                (Ojs.call x2374 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x2376 : Ojs.t) ->
                                           fun (x2377 : Ojs.t) ->
                                             x2375
                                               ~request:(http2_Http2ServerRequest_of_js
                                                           x2376)
                                               ~response:(http2_Http2ServerResponse_of_js
                                                            x2377)))|])
                          | None -> ());
                         x2374))|])
    let (createServer :
      options:http2_ServerOptions ->
        ?onRequestHandler:(request:http2_Http2ServerRequest ->
                             response:http2_Http2ServerResponse -> unit)
          -> unit -> http2_Http2Server)
      =
      fun ~options:(x2379 : http2_ServerOptions) ->
        fun
          ?onRequestHandler:(x2380 :
                              (request:http2_Http2ServerRequest ->
                                 response:http2_Http2ServerResponse -> unit)
                                option)
          ->
          fun () ->
            http2_Http2Server_of_js
              (let x2385 = Import.http2 in
               Ojs.call (Ojs.get_prop_ascii x2385 "createServer") "apply"
                 [|x2385;((let x2381 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2381 "push"
                                [|(http2_ServerOptions_to_js x2379)|]);
                           (match x2380 with
                            | Some x2382 ->
                                ignore
                                  (Ojs.call x2381 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x2383 : Ojs.t) ->
                                             fun (x2384 : Ojs.t) ->
                                               x2382
                                                 ~request:(http2_Http2ServerRequest_of_js
                                                             x2383)
                                                 ~response:(http2_Http2ServerResponse_of_js
                                                              x2384)))|])
                            | None -> ());
                           x2381))|])
    let (createSecureServer :
      ?onRequestHandler:(request:http2_Http2ServerRequest ->
                           response:http2_Http2ServerResponse -> unit)
        -> unit -> http2_Http2SecureServer)
      =
      fun
        ?onRequestHandler:(x2386 :
                            (request:http2_Http2ServerRequest ->
                               response:http2_Http2ServerResponse -> unit)
                              option)
        ->
        fun () ->
          http2_Http2SecureServer_of_js
            (let x2391 = Import.http2 in
             Ojs.call (Ojs.get_prop_ascii x2391 "createSecureServer") "apply"
               [|x2391;((let x2387 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x2386 with
                          | Some x2388 ->
                              ignore
                                (Ojs.call x2387 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x2389 : Ojs.t) ->
                                           fun (x2390 : Ojs.t) ->
                                             x2388
                                               ~request:(http2_Http2ServerRequest_of_js
                                                           x2389)
                                               ~response:(http2_Http2ServerResponse_of_js
                                                            x2390)))|])
                          | None -> ());
                         x2387))|])
    let (createSecureServer :
      options:http2_SecureServerOptions ->
        ?onRequestHandler:(request:http2_Http2ServerRequest ->
                             response:http2_Http2ServerResponse -> unit)
          -> unit -> http2_Http2SecureServer)
      =
      fun ~options:(x2392 : http2_SecureServerOptions) ->
        fun
          ?onRequestHandler:(x2393 :
                              (request:http2_Http2ServerRequest ->
                                 response:http2_Http2ServerResponse -> unit)
                                option)
          ->
          fun () ->
            http2_Http2SecureServer_of_js
              (let x2398 = Import.http2 in
               Ojs.call (Ojs.get_prop_ascii x2398 "createSecureServer")
                 "apply"
                 [|x2398;((let x2394 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2394 "push"
                                [|(http2_SecureServerOptions_to_js x2392)|]);
                           (match x2393 with
                            | Some x2395 ->
                                ignore
                                  (Ojs.call x2394 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x2396 : Ojs.t) ->
                                             fun (x2397 : Ojs.t) ->
                                               x2395
                                                 ~request:(http2_Http2ServerRequest_of_js
                                                             x2396)
                                                 ~response:(http2_Http2ServerResponse_of_js
                                                              x2397)))|])
                            | None -> ());
                           x2394))|])
    let (connect :
      authority:Url.URL.t or_string ->
        listener:(session:http2_ClientHttp2Session ->
                    socket:(Net.Socket.t, Tls.TLSSocket.t) union2 -> unit)
          -> http2_ClientHttp2Session)
      =
      fun ~authority:(x2399 : Url.URL.t or_string) ->
        fun
          ~listener:(x2401 :
                      session:http2_ClientHttp2Session ->
                        socket:(Net.Socket.t, Tls.TLSSocket.t) union2 -> unit)
          ->
          http2_ClientHttp2Session_of_js
            (Ojs.call Import.http2 "connect"
               [|(or_string_to_js Url.URL.t_to_js x2399);(Ojs.fun_to_js 2
                                                            (fun
                                                               (x2402 :
                                                                 Ojs.t)
                                                               ->
                                                               fun
                                                                 (x2403 :
                                                                   Ojs.t)
                                                                 ->
                                                                 x2401
                                                                   ~session:(
                                                                   http2_ClientHttp2Session_of_js
                                                                    x2402)
                                                                   ~socket:(
                                                                   union2_of_js
                                                                    Net.Socket.t_of_js
                                                                    Tls.TLSSocket.t_of_js
                                                                    x2403)))|])
    let (connect :
      authority:Url.URL.t or_string ->
        ?options:[
                   `U_s15_http_ of
                     (http2_ClientSessionOptions,
                       http2_SecureClientSessionOptions) union2
                      | `U_s16_https_ of
                          (http2_ClientSessionOptions,
                            http2_SecureClientSessionOptions) union2
                          ]
          ->
          ?listener:(session:http2_ClientHttp2Session ->
                       socket:(Net.Socket.t, Tls.TLSSocket.t) union2 -> unit)
            -> unit -> http2_ClientHttp2Session)
      =
      fun ~authority:(x2406 : Url.URL.t or_string) ->
        fun
          ?options:(x2407 :
                     [
                       `U_s15_http_ of
                         (http2_ClientSessionOptions,
                           http2_SecureClientSessionOptions) union2
                          | `U_s16_https_ of
                              (http2_ClientSessionOptions,
                                http2_SecureClientSessionOptions) union2
                              ]
                       option)
          ->
          fun
            ?listener:(x2408 :
                        (session:http2_ClientHttp2Session ->
                           socket:(Net.Socket.t, Tls.TLSSocket.t) union2 ->
                             unit)
                          option)
            ->
            fun () ->
              http2_ClientHttp2Session_of_js
                (let x2423 = Import.http2 in
                 Ojs.call (Ojs.get_prop_ascii x2423 "connect") "apply"
                   [|x2423;((let x2409 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2409 "push"
                                  [|(or_string_to_js Url.URL.t_to_js x2406)|]);
                             (match x2407 with
                              | Some x2415 ->
                                  ignore
                                    (Ojs.call x2409 "push"
                                       [|((match x2415 with
                                           | `U_s15_http_ x2416 ->
                                               union2_to_js
                                                 http2_ClientSessionOptions_to_js
                                                 http2_SecureClientSessionOptions_to_js
                                                 x2416
                                           | `U_s16_https_ x2419 ->
                                               union2_to_js
                                                 http2_ClientSessionOptions_to_js
                                                 http2_SecureClientSessionOptions_to_js
                                                 x2419))|])
                              | None -> ());
                             (match x2408 with
                              | Some x2410 ->
                                  ignore
                                    (Ojs.call x2409 "push"
                                       [|(Ojs.fun_to_js 2
                                            (fun (x2411 : Ojs.t) ->
                                               fun (x2412 : Ojs.t) ->
                                                 x2410
                                                   ~session:(http2_ClientHttp2Session_of_js
                                                               x2411)
                                                   ~socket:(union2_of_js
                                                              Net.Socket.t_of_js
                                                              Tls.TLSSocket.t_of_js
                                                              x2412)))|])
                              | None -> ());
                             x2409))|])
  end
