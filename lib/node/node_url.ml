[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Url =
  struct
    module UrlObject =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
        and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
        let (get_auth : t -> string or_null) =
          fun (x3 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3) "auth")
        let (set_auth : t -> string or_null -> unit) =
          fun (x5 : t) ->
            fun (x6 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x5) "auth"
                (or_null_to_js Ojs.string_to_js x6)
        let (get_hash : t -> string or_null) =
          fun (x8 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x8) "hash")
        let (set_hash : t -> string or_null -> unit) =
          fun (x10 : t) ->
            fun (x11 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x10) "hash"
                (or_null_to_js Ojs.string_to_js x11)
        let (get_host : t -> string or_null) =
          fun (x13 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x13) "host")
        let (set_host : t -> string or_null -> unit) =
          fun (x15 : t) ->
            fun (x16 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x15) "host"
                (or_null_to_js Ojs.string_to_js x16)
        let (get_hostname : t -> string or_null) =
          fun (x18 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x18) "hostname")
        let (set_hostname : t -> string or_null -> unit) =
          fun (x20 : t) ->
            fun (x21 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x20) "hostname"
                (or_null_to_js Ojs.string_to_js x21)
        let (get_href : t -> string or_null) =
          fun (x23 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x23) "href")
        let (set_href : t -> string or_null -> unit) =
          fun (x25 : t) ->
            fun (x26 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x25) "href"
                (or_null_to_js Ojs.string_to_js x26)
        let (get_pathname : t -> string or_null) =
          fun (x28 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x28) "pathname")
        let (set_pathname : t -> string or_null -> unit) =
          fun (x30 : t) ->
            fun (x31 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x30) "pathname"
                (or_null_to_js Ojs.string_to_js x31)
        let (get_protocol : t -> string or_null) =
          fun (x33 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x33) "protocol")
        let (set_protocol : t -> string or_null -> unit) =
          fun (x35 : t) ->
            fun (x36 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x35) "protocol"
                (or_null_to_js Ojs.string_to_js x36)
        let (get_search : t -> string or_null) =
          fun (x38 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x38) "search")
        let (set_search : t -> string or_null -> unit) =
          fun (x40 : t) ->
            fun (x41 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x40) "search"
                (or_null_to_js Ojs.string_to_js x41)
        let (get_slashes : t -> bool or_null) =
          fun (x43 : t) ->
            or_null_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x43) "slashes")
        let (set_slashes : t -> bool or_null -> unit) =
          fun (x45 : t) ->
            fun (x46 : bool or_null) ->
              Ojs.set_prop_ascii (t_to_js x45) "slashes"
                (or_null_to_js Ojs.bool_to_js x46)
        let (get_port : t -> string or_number or_null) =
          fun (x48 : t) ->
            or_null_of_js
              (fun (x49 : Ojs.t) -> or_number_of_js Ojs.string_of_js x49)
              (Ojs.get_prop_ascii (t_to_js x48) "port")
        let (set_port : t -> string or_number or_null -> unit) =
          fun (x51 : t) ->
            fun (x52 : string or_number or_null) ->
              Ojs.set_prop_ascii (t_to_js x51) "port"
                (or_null_to_js
                   (fun (x53 : string or_number) ->
                      or_number_to_js Ojs.string_to_js x53) x52)
        let (get_query :
          t ->
            Node_querystring.Querystring.ParsedUrlQueryInput.t or_string
              or_null)
          =
          fun (x55 : t) ->
            or_null_of_js
              (fun (x56 : Ojs.t) ->
                 or_string_of_js
                   Node_querystring.Querystring.ParsedUrlQueryInput.t_of_js
                   x56) (Ojs.get_prop_ascii (t_to_js x55) "query")
        let (set_query :
          t ->
            Node_querystring.Querystring.ParsedUrlQueryInput.t or_string
              or_null -> unit)
          =
          fun (x58 : t) ->
            fun
              (x59 :
                Node_querystring.Querystring.ParsedUrlQueryInput.t or_string
                  or_null)
              ->
              Ojs.set_prop_ascii (t_to_js x58) "query"
                (or_null_to_js
                   (fun
                      (x60 :
                        Node_querystring.Querystring.ParsedUrlQueryInput.t
                          or_string)
                      ->
                      or_string_to_js
                        Node_querystring.Querystring.ParsedUrlQueryInput.t_to_js
                        x60) x59)
      end
    module Url =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x63 : Ojs.t) -> x63
        and t_to_js : t -> Ojs.t = fun (x62 : Ojs.t) -> x62
        let (get_auth : t -> string or_null) =
          fun (x64 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x64) "auth")
        let (set_auth : t -> string or_null -> unit) =
          fun (x66 : t) ->
            fun (x67 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x66) "auth"
                (or_null_to_js Ojs.string_to_js x67)
        let (get_hash : t -> string or_null) =
          fun (x69 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x69) "hash")
        let (set_hash : t -> string or_null -> unit) =
          fun (x71 : t) ->
            fun (x72 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x71) "hash"
                (or_null_to_js Ojs.string_to_js x72)
        let (get_host : t -> string or_null) =
          fun (x74 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x74) "host")
        let (set_host : t -> string or_null -> unit) =
          fun (x76 : t) ->
            fun (x77 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x76) "host"
                (or_null_to_js Ojs.string_to_js x77)
        let (get_hostname : t -> string or_null) =
          fun (x79 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x79) "hostname")
        let (set_hostname : t -> string or_null -> unit) =
          fun (x81 : t) ->
            fun (x82 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x81) "hostname"
                (or_null_to_js Ojs.string_to_js x82)
        let (get_href : t -> string) =
          fun (x84 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x84) "href")
        let (set_href : t -> string -> unit) =
          fun (x85 : t) ->
            fun (x86 : string) ->
              Ojs.set_prop_ascii (t_to_js x85) "href" (Ojs.string_to_js x86)
        let (get_path : t -> string or_null) =
          fun (x87 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x87) "path")
        let (set_path : t -> string or_null -> unit) =
          fun (x89 : t) ->
            fun (x90 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x89) "path"
                (or_null_to_js Ojs.string_to_js x90)
        let (get_pathname : t -> string or_null) =
          fun (x92 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x92) "pathname")
        let (set_pathname : t -> string or_null -> unit) =
          fun (x94 : t) ->
            fun (x95 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x94) "pathname"
                (or_null_to_js Ojs.string_to_js x95)
        let (get_protocol : t -> string or_null) =
          fun (x97 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x97) "protocol")
        let (set_protocol : t -> string or_null -> unit) =
          fun (x99 : t) ->
            fun (x100 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x99) "protocol"
                (or_null_to_js Ojs.string_to_js x100)
        let (get_search : t -> string or_null) =
          fun (x102 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x102) "search")
        let (set_search : t -> string or_null -> unit) =
          fun (x104 : t) ->
            fun (x105 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x104) "search"
                (or_null_to_js Ojs.string_to_js x105)
        let (get_slashes : t -> bool or_null) =
          fun (x107 : t) ->
            or_null_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x107) "slashes")
        let (set_slashes : t -> bool or_null -> unit) =
          fun (x109 : t) ->
            fun (x110 : bool or_null) ->
              Ojs.set_prop_ascii (t_to_js x109) "slashes"
                (or_null_to_js Ojs.bool_to_js x110)
        let (get_port : t -> string or_null) =
          fun (x112 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x112) "port")
        let (set_port : t -> string or_null -> unit) =
          fun (x114 : t) ->
            fun (x115 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x114) "port"
                (or_null_to_js Ojs.string_to_js x115)
        let (get_query :
          t ->
            Node_querystring.Querystring.ParsedUrlQuery.t or_string or_null)
          =
          fun (x117 : t) ->
            or_null_of_js
              (fun (x118 : Ojs.t) ->
                 or_string_of_js
                   Node_querystring.Querystring.ParsedUrlQuery.t_of_js x118)
              (Ojs.get_prop_ascii (t_to_js x117) "query")
        let (set_query :
          t ->
            Node_querystring.Querystring.ParsedUrlQuery.t or_string or_null
              -> unit)
          =
          fun (x120 : t) ->
            fun
              (x121 :
                Node_querystring.Querystring.ParsedUrlQuery.t or_string
                  or_null)
              ->
              Ojs.set_prop_ascii (t_to_js x120) "query"
                (or_null_to_js
                   (fun
                      (x122 :
                        Node_querystring.Querystring.ParsedUrlQuery.t
                          or_string)
                      ->
                      or_string_to_js
                        Node_querystring.Querystring.ParsedUrlQuery.t_to_js
                        x122) x121)
      end
    module UrlWithParsedQuery =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x125 : Ojs.t) -> x125
        and t_to_js : t -> Ojs.t = fun (x124 : Ojs.t) -> x124
        let (get_query : t -> Node_querystring.Querystring.ParsedUrlQuery.t)
          =
          fun (x126 : t) ->
            Node_querystring.Querystring.ParsedUrlQuery.t_of_js
              (Ojs.get_prop_ascii (t_to_js x126) "query")
        let (set_query :
          t -> Node_querystring.Querystring.ParsedUrlQuery.t -> unit) =
          fun (x127 : t) ->
            fun (x128 : Node_querystring.Querystring.ParsedUrlQuery.t) ->
              Ojs.set_prop_ascii (t_to_js x127) "query"
                (Node_querystring.Querystring.ParsedUrlQuery.t_to_js x128)
        let (cast : t -> Url.t) =
          fun (x129 : t) -> Url.t_of_js (t_to_js x129)
      end
    module UrlWithStringQuery =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x131 : Ojs.t) -> x131
        and t_to_js : t -> Ojs.t = fun (x130 : Ojs.t) -> x130
        let (get_query : t -> string or_null) =
          fun (x132 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x132) "query")
        let (set_query : t -> string or_null -> unit) =
          fun (x134 : t) ->
            fun (x135 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x134) "query"
                (or_null_to_js Ojs.string_to_js x135)
        let (cast : t -> Url.t) =
          fun (x137 : t) -> Url.t_of_js (t_to_js x137)
      end
    let (parse : string -> UrlWithStringQuery.t) =
      fun (x138 : string) ->
        UrlWithStringQuery.t_of_js
          (Ojs.call Import.url "parse" [|(Ojs.string_to_js x138)|])
    let (parse :
      url_str:string ->
        parse_query_string:[ `L_b_false ] or_undefined ->
          ?slashes_denote_host:bool -> unit -> UrlWithStringQuery.t)
      =
      fun ~url_str:(x139 : string) ->
        fun ~parse_query_string:(x140 : [ `L_b_false ] or_undefined) ->
          fun ?slashes_denote_host:(x141 : bool option) ->
            fun () ->
              UrlWithStringQuery.t_of_js
                (let x145 = Import.url in
                 Ojs.call (Ojs.get_prop_ascii x145 "parse") "apply"
                   [|x145;((let x142 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x142 "push"
                                 [|(Ojs.string_to_js x139)|]);
                            ignore
                              (Ojs.call x142 "push"
                                 [|(or_undefined_to_js
                                      (fun (x144 : [ `L_b_false ]) ->
                                         match x144 with
                                         | `L_b_false ->
                                             Ojs.string_to_js "LBFalse") x140)|]);
                            (match x141 with
                             | Some x143 ->
                                 ignore
                                   (Ojs.call x142 "push"
                                      [|(Ojs.bool_to_js x143)|])
                             | None -> ());
                            x142))|])
    let (parse :
      url_str:string ->
        parse_query_string:[ `L_b_true ] ->
          ?slashes_denote_host:bool -> unit -> UrlWithParsedQuery.t)
      =
      fun ~url_str:(x146 : string) ->
        fun ~parse_query_string:(x147 : [ `L_b_true ]) ->
          fun ?slashes_denote_host:(x148 : bool option) ->
            fun () ->
              UrlWithParsedQuery.t_of_js
                (let x151 = Import.url in
                 Ojs.call (Ojs.get_prop_ascii x151 "parse") "apply"
                   [|x151;((let x149 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x149 "push"
                                 [|(Ojs.string_to_js x146)|]);
                            ignore
                              (Ojs.call x149 "push"
                                 [|((match x147 with
                                     | `L_b_true -> Ojs.string_to_js "LBTrue"))|]);
                            (match x148 with
                             | Some x150 ->
                                 ignore
                                   (Ojs.call x149 "push"
                                      [|(Ojs.bool_to_js x150)|])
                             | None -> ());
                            x149))|])
    let (parse :
      url_str:string ->
        parse_query_string:bool -> ?slashes_denote_host:bool -> unit -> Url.t)
      =
      fun ~url_str:(x152 : string) ->
        fun ~parse_query_string:(x153 : bool) ->
          fun ?slashes_denote_host:(x154 : bool option) ->
            fun () ->
              Url.t_of_js
                (let x157 = Import.url in
                 Ojs.call (Ojs.get_prop_ascii x157 "parse") "apply"
                   [|x157;((let x155 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x155 "push"
                                 [|(Ojs.string_to_js x152)|]);
                            ignore
                              (Ojs.call x155 "push" [|(Ojs.bool_to_js x153)|]);
                            (match x154 with
                             | Some x156 ->
                                 ignore
                                   (Ojs.call x155 "push"
                                      [|(Ojs.bool_to_js x156)|])
                             | None -> ());
                            x155))|])
    let (format : url:URL.t -> ?options:URLFormatOptions.t -> unit -> string)
      =
      fun ~url:(x158 : URL.t) ->
        fun ?options:(x159 : URLFormatOptions.t option) ->
          fun () ->
            Ojs.string_of_js
              (let x162 = Import.url in
               Ojs.call (Ojs.get_prop_ascii x162 "format") "apply"
                 [|x162;((let x160 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x160 "push" [|(URL.t_to_js x158)|]);
                          (match x159 with
                           | Some x161 ->
                               ignore
                                 (Ojs.call x160 "push"
                                    [|(URLFormatOptions.t_to_js x161)|])
                           | None -> ());
                          x160))|])
    let (format : url_object:UrlObject.t or_string -> string) =
      fun ~url_object:(x163 : UrlObject.t or_string) ->
        Ojs.string_of_js
          (Ojs.call Import.url "format"
             [|(or_string_to_js UrlObject.t_to_js x163)|])
    let (resolve : from:string -> to_:string -> string) =
      fun ~from:(x165 : string) ->
        fun ~to_:(x166 : string) ->
          Ojs.string_of_js
            (Ojs.call Import.url "resolve"
               [|(Ojs.string_to_js x165);(Ojs.string_to_js x166)|])
    let (domain_to_ascii : domain:string -> string) =
      fun ~domain:(x167 : string) ->
        Ojs.string_of_js
          (Ojs.call Import.url "domainToASCII" [|(Ojs.string_to_js x167)|])
    let (domain_to_unicode : domain:string -> string) =
      fun ~domain:(x168 : string) ->
        Ojs.string_of_js
          (Ojs.call Import.url "domainToUnicode" [|(Ojs.string_to_js x168)|])
    let (file_url_to_path : url:URL.t or_string -> string) =
      fun ~url:(x169 : URL.t or_string) ->
        Ojs.string_of_js
          (Ojs.call Import.url "fileURLToPath"
             [|(or_string_to_js URL.t_to_js x169)|])
    let (path_to_file_url : url:string -> URL.t) =
      fun ~url:(x171 : string) ->
        URL.t_of_js
          (Ojs.call Import.url "pathToFileURL" [|(Ojs.string_to_js x171)|])
    module URLFormatOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x173 : Ojs.t) -> x173
        and t_to_js : t -> Ojs.t = fun (x172 : Ojs.t) -> x172
        let (get_auth : t -> bool) =
          fun (x174 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x174) "auth")
        let (set_auth : t -> bool -> unit) =
          fun (x175 : t) ->
            fun (x176 : bool) ->
              Ojs.set_prop_ascii (t_to_js x175) "auth" (Ojs.bool_to_js x176)
        let (get_fragment : t -> bool) =
          fun (x177 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x177) "fragment")
        let (set_fragment : t -> bool -> unit) =
          fun (x178 : t) ->
            fun (x179 : bool) ->
              Ojs.set_prop_ascii (t_to_js x178) "fragment"
                (Ojs.bool_to_js x179)
        let (get_search : t -> bool) =
          fun (x180 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x180) "search")
        let (set_search : t -> bool -> unit) =
          fun (x181 : t) ->
            fun (x182 : bool) ->
              Ojs.set_prop_ascii (t_to_js x181) "search"
                (Ojs.bool_to_js x182)
        let (get_unicode : t -> bool) =
          fun (x183 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x183) "unicode")
        let (set_unicode : t -> bool -> unit) =
          fun (x184 : t) ->
            fun (x185 : bool) ->
              Ojs.set_prop_ascii (t_to_js x184) "unicode"
                (Ojs.bool_to_js x185)
      end
    module URL =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x187 : Ojs.t) -> x187
        and t_to_js : t -> Ojs.t = fun (x186 : Ojs.t) -> x186
        let (create : input:string -> ?base:t or_string -> unit -> t) =
          fun ~input:(x188 : string) ->
            fun ?base:(x189 : t or_string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.url "URL")
                     (let x190 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x190 "push" [|(Ojs.string_to_js x188)|]);
                      (match x189 with
                       | Some x191 ->
                           ignore
                             (Ojs.call x190 "push"
                                [|(or_string_to_js t_to_js x191)|])
                       | None -> ());
                      x190))
        let (get_hash : t -> string) =
          fun (x193 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x193) "hash")
        let (set_hash : t -> string -> unit) =
          fun (x194 : t) ->
            fun (x195 : string) ->
              Ojs.set_prop_ascii (t_to_js x194) "hash"
                (Ojs.string_to_js x195)
        let (get_host : t -> string) =
          fun (x196 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x196) "host")
        let (set_host : t -> string -> unit) =
          fun (x197 : t) ->
            fun (x198 : string) ->
              Ojs.set_prop_ascii (t_to_js x197) "host"
                (Ojs.string_to_js x198)
        let (get_hostname : t -> string) =
          fun (x199 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x199) "hostname")
        let (set_hostname : t -> string -> unit) =
          fun (x200 : t) ->
            fun (x201 : string) ->
              Ojs.set_prop_ascii (t_to_js x200) "hostname"
                (Ojs.string_to_js x201)
        let (get_href : t -> string) =
          fun (x202 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x202) "href")
        let (set_href : t -> string -> unit) =
          fun (x203 : t) ->
            fun (x204 : string) ->
              Ojs.set_prop_ascii (t_to_js x203) "href"
                (Ojs.string_to_js x204)
        let (get_origin : t -> string) =
          fun (x205 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x205) "origin")
        let (get_password : t -> string) =
          fun (x206 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x206) "password")
        let (set_password : t -> string -> unit) =
          fun (x207 : t) ->
            fun (x208 : string) ->
              Ojs.set_prop_ascii (t_to_js x207) "password"
                (Ojs.string_to_js x208)
        let (get_pathname : t -> string) =
          fun (x209 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x209) "pathname")
        let (set_pathname : t -> string -> unit) =
          fun (x210 : t) ->
            fun (x211 : string) ->
              Ojs.set_prop_ascii (t_to_js x210) "pathname"
                (Ojs.string_to_js x211)
        let (get_port : t -> string) =
          fun (x212 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x212) "port")
        let (set_port : t -> string -> unit) =
          fun (x213 : t) ->
            fun (x214 : string) ->
              Ojs.set_prop_ascii (t_to_js x213) "port"
                (Ojs.string_to_js x214)
        let (get_protocol : t -> string) =
          fun (x215 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x215) "protocol")
        let (set_protocol : t -> string -> unit) =
          fun (x216 : t) ->
            fun (x217 : string) ->
              Ojs.set_prop_ascii (t_to_js x216) "protocol"
                (Ojs.string_to_js x217)
        let (get_search : t -> string) =
          fun (x218 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x218) "search")
        let (set_search : t -> string -> unit) =
          fun (x219 : t) ->
            fun (x220 : string) ->
              Ojs.set_prop_ascii (t_to_js x219) "search"
                (Ojs.string_to_js x220)
        let (get_search_params : t -> URLSearchParams.t) =
          fun (x221 : t) ->
            URLSearchParams.t_of_js
              (Ojs.get_prop_ascii (t_to_js x221) "searchParams")
        let (get_username : t -> string) =
          fun (x222 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x222) "username")
        let (set_username : t -> string -> unit) =
          fun (x223 : t) ->
            fun (x224 : string) ->
              Ojs.set_prop_ascii (t_to_js x223) "username"
                (Ojs.string_to_js x224)
        let (to_string : t -> string) =
          fun (x225 : t) ->
            Ojs.string_of_js (Ojs.call (t_to_js x225) "toString" [||])
        let (to_json : t -> string) =
          fun (x226 : t) ->
            Ojs.string_of_js (Ojs.call (t_to_js x226) "toJSON" [||])
      end
    module URLSearchParams =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x228 : Ojs.t) -> x228
        and t_to_js : t -> Ojs.t = fun (x227 : Ojs.t) -> x227
        let (create :
          ?init:(t, (string * string) Iterable.t,
            string list or_string Dict.t, (string * string) list) union4
            or_string -> unit -> t)
          =
          fun
            ?init:(x229 :
                    (t, (string * string) Iterable.t,
                      string list or_string Dict.t, (string * string) list)
                      union4 or_string option)
            ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Import.url "URLSearchParams")
                   (let x230 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x229 with
                     | Some x231 ->
                         ignore
                           (Ojs.call x230 "push"
                              [|(or_string_to_js
                                   (fun
                                      (x232 :
                                        (t, (string * string) Iterable.t,
                                          string list or_string Dict.t,
                                          (string * string) list) union4)
                                      ->
                                      union4_to_js t_to_js
                                        (fun
                                           (x234 :
                                             (string * string) Iterable.t)
                                           ->
                                           Iterable.t_to_js
                                             (fun (x235 : (string * string))
                                                ->
                                                let (x236, x237) = x235 in
                                                let x238 = Ojs.array_make 2 in
                                                Ojs.array_set x238 0
                                                  (Ojs.string_to_js x236);
                                                Ojs.array_set x238 1
                                                  (Ojs.string_to_js x237);
                                                x238) x234)
                                        (fun
                                           (x239 :
                                             string list or_string Dict.t)
                                           ->
                                           Dict.t_to_js
                                             (fun
                                                (x240 :
                                                  string list or_string)
                                                ->
                                                or_string_to_js
                                                  (fun (x241 : string list)
                                                     ->
                                                     Ojs.list_to_js
                                                       Ojs.string_to_js x241)
                                                  x240) x239)
                                        (fun (x243 : (string * string) list)
                                           ->
                                           Ojs.list_to_js
                                             (fun (x244 : (string * string))
                                                ->
                                                let (x245, x246) = x244 in
                                                let x247 = Ojs.array_make 2 in
                                                Ojs.array_set x247 0
                                                  (Ojs.string_to_js x245);
                                                Ojs.array_set x247 1
                                                  (Ojs.string_to_js x246);
                                                x247) x243) x232) x231)|])
                     | None -> ());
                    x230))
        let (append : t -> name:string -> value:string -> unit) =
          fun (x250 : t) ->
            fun ~name:(x248 : string) ->
              fun ~value:(x249 : string) ->
                ignore
                  (Ojs.call (t_to_js x250) "append"
                     [|(Ojs.string_to_js x248);(Ojs.string_to_js x249)|])
        let (delete : t -> name:string -> unit) =
          fun (x252 : t) ->
            fun ~name:(x251 : string) ->
              ignore
                (Ojs.call (t_to_js x252) "delete" [|(Ojs.string_to_js x251)|])
        let (entries : t -> (string * string) IterableIterator.t) =
          fun (x253 : t) ->
            IterableIterator.t_of_js
              (fun (x254 : Ojs.t) ->
                 let x255 = x254 in
                 ((Ojs.string_of_js (Ojs.array_get x255 0)),
                   (Ojs.string_of_js (Ojs.array_get x255 1))))
              (Ojs.call (t_to_js x253) "entries" [||])
        let (for_each :
          t ->
            callback:(value:string -> name:string -> search_params:t -> unit)
              -> unit)
          =
          fun (x260 : t) ->
            fun
              ~callback:(x256 :
                          value:string ->
                            name:string -> search_params:t -> unit)
              ->
              ignore
                (Ojs.call (t_to_js x260) "forEach"
                   [|(Ojs.fun_to_js 3
                        (fun (x257 : Ojs.t) ->
                           fun (x258 : Ojs.t) ->
                             fun (x259 : Ojs.t) ->
                               x256 ~value:(Ojs.string_of_js x257)
                                 ~name:(Ojs.string_of_js x258)
                                 ~search_params:(t_of_js x259)))|])
        let (get_ : t -> name:string -> string or_null) =
          fun (x262 : t) ->
            fun ~name:(x261 : string) ->
              or_null_of_js Ojs.string_of_js
                (Ojs.call (t_to_js x262) "get" [|(Ojs.string_to_js x261)|])
        let (get_all : t -> name:string -> string list) =
          fun (x265 : t) ->
            fun ~name:(x264 : string) ->
              Ojs.list_of_js Ojs.string_of_js
                (Ojs.call (t_to_js x265) "getAll" [|(Ojs.string_to_js x264)|])
        let (has : t -> name:string -> bool) =
          fun (x268 : t) ->
            fun ~name:(x267 : string) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x268) "has" [|(Ojs.string_to_js x267)|])
        let (keys : t -> string IterableIterator.t) =
          fun (x269 : t) ->
            IterableIterator.t_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x269) "keys" [||])
        let (set_ : t -> name:string -> value:string -> unit) =
          fun (x273 : t) ->
            fun ~name:(x271 : string) ->
              fun ~value:(x272 : string) ->
                ignore
                  (Ojs.call (t_to_js x273) "set"
                     [|(Ojs.string_to_js x271);(Ojs.string_to_js x272)|])
        let (sort : t -> unit) =
          fun (x274 : t) -> ignore (Ojs.call (t_to_js x274) "sort" [||])
        let (to_string : t -> string) =
          fun (x275 : t) ->
            Ojs.string_of_js (Ojs.call (t_to_js x275) "toString" [||])
        let (values : t -> string IterableIterator.t) =
          fun (x276 : t) ->
            IterableIterator.t_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x276) "values" [||])
        let (cast : t -> (string * string) Iterable.t) =
          fun (x278 : t) ->
            Iterable.t_of_js
              (fun (x279 : Ojs.t) ->
                 let x280 = x279 in
                 ((Ojs.string_of_js (Ojs.array_get x280 0)),
                   (Ojs.string_of_js (Ojs.array_get x280 1)))) (t_to_js x278)
      end
  end
