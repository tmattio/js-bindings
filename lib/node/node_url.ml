[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Url =
  struct
    module UrlObject =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
        and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
        let (get_auth : t -> string or_null) =
          fun (x3 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3) "auth")
        let (set_auth : t -> string or_null -> unit) =
          fun (x5 : t) ->
            fun (x6 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x5) "auth"
                (or_null_to_js Ojs.string_to_js x6)
        let (get_hash : t -> string or_null) =
          fun (x8 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x8) "hash")
        let (set_hash : t -> string or_null -> unit) =
          fun (x10 : t) ->
            fun (x11 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x10) "hash"
                (or_null_to_js Ojs.string_to_js x11)
        let (get_host : t -> string or_null) =
          fun (x13 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x13) "host")
        let (set_host : t -> string or_null -> unit) =
          fun (x15 : t) ->
            fun (x16 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x15) "host"
                (or_null_to_js Ojs.string_to_js x16)
        let (get_hostname : t -> string or_null) =
          fun (x18 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x18) "hostname")
        let (set_hostname : t -> string or_null -> unit) =
          fun (x20 : t) ->
            fun (x21 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x20) "hostname"
                (or_null_to_js Ojs.string_to_js x21)
        let (get_href : t -> string or_null) =
          fun (x23 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x23) "href")
        let (set_href : t -> string or_null -> unit) =
          fun (x25 : t) ->
            fun (x26 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x25) "href"
                (or_null_to_js Ojs.string_to_js x26)
        let (get_pathname : t -> string or_null) =
          fun (x28 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x28) "pathname")
        let (set_pathname : t -> string or_null -> unit) =
          fun (x30 : t) ->
            fun (x31 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x30) "pathname"
                (or_null_to_js Ojs.string_to_js x31)
        let (get_protocol : t -> string or_null) =
          fun (x33 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x33) "protocol")
        let (set_protocol : t -> string or_null -> unit) =
          fun (x35 : t) ->
            fun (x36 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x35) "protocol"
                (or_null_to_js Ojs.string_to_js x36)
        let (get_search : t -> string or_null) =
          fun (x38 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x38) "search")
        let (set_search : t -> string or_null -> unit) =
          fun (x40 : t) ->
            fun (x41 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x40) "search"
                (or_null_to_js Ojs.string_to_js x41)
        let (get_slashes : t -> bool or_null) =
          fun (x43 : t) ->
            or_null_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x43) "slashes")
        let (set_slashes : t -> bool or_null -> unit) =
          fun (x45 : t) ->
            fun (x46 : bool or_null) ->
              Ojs.set_prop_ascii (t_to_js x45) "slashes"
                (or_null_to_js Ojs.bool_to_js x46)
        let (get_port : t -> string or_number or_null) =
          fun (x48 : t) ->
            or_null_of_js
              (fun (x49 : Ojs.t) -> or_number_of_js Ojs.string_of_js x49)
              (Ojs.get_prop_ascii (t_to_js x48) "port")
        let (set_port : t -> string or_number or_null -> unit) =
          fun (x51 : t) ->
            fun (x52 : string or_number or_null) ->
              Ojs.set_prop_ascii (t_to_js x51) "port"
                (or_null_to_js
                   (fun (x53 : string or_number) ->
                      or_number_to_js Ojs.string_to_js x53) x52)
        let (get_query :
          t ->
            Node_querystring.Querystring.ParsedUrlQueryInput.t or_string
              or_null)
          =
          fun (x55 : t) ->
            or_null_of_js
              (fun (x56 : Ojs.t) ->
                 or_string_of_js
                   Node_querystring.Querystring.ParsedUrlQueryInput.t_of_js
                   x56) (Ojs.get_prop_ascii (t_to_js x55) "query")
        let (set_query :
          t ->
            Node_querystring.Querystring.ParsedUrlQueryInput.t or_string
              or_null -> unit)
          =
          fun (x58 : t) ->
            fun
              (x59 :
                Node_querystring.Querystring.ParsedUrlQueryInput.t or_string
                  or_null)
              ->
              Ojs.set_prop_ascii (t_to_js x58) "query"
                (or_null_to_js
                   (fun
                      (x60 :
                        Node_querystring.Querystring.ParsedUrlQueryInput.t
                          or_string)
                      ->
                      or_string_to_js
                        Node_querystring.Querystring.ParsedUrlQueryInput.t_to_js
                        x60) x59)
      end
    module Url =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x63 : Ojs.t) -> x63
        and t_to_js : t -> Ojs.t = fun (x62 : Ojs.t) -> x62
        let (get_auth : t -> string or_null) =
          fun (x64 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x64) "auth")
        let (set_auth : t -> string or_null -> unit) =
          fun (x66 : t) ->
            fun (x67 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x66) "auth"
                (or_null_to_js Ojs.string_to_js x67)
        let (get_hash : t -> string or_null) =
          fun (x69 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x69) "hash")
        let (set_hash : t -> string or_null -> unit) =
          fun (x71 : t) ->
            fun (x72 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x71) "hash"
                (or_null_to_js Ojs.string_to_js x72)
        let (get_host : t -> string or_null) =
          fun (x74 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x74) "host")
        let (set_host : t -> string or_null -> unit) =
          fun (x76 : t) ->
            fun (x77 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x76) "host"
                (or_null_to_js Ojs.string_to_js x77)
        let (get_hostname : t -> string or_null) =
          fun (x79 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x79) "hostname")
        let (set_hostname : t -> string or_null -> unit) =
          fun (x81 : t) ->
            fun (x82 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x81) "hostname"
                (or_null_to_js Ojs.string_to_js x82)
        let (get_href : t -> string) =
          fun (x84 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x84) "href")
        let (set_href : t -> string -> unit) =
          fun (x85 : t) ->
            fun (x86 : string) ->
              Ojs.set_prop_ascii (t_to_js x85) "href" (Ojs.string_to_js x86)
        let (get_path : t -> string or_null) =
          fun (x87 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x87) "path")
        let (set_path : t -> string or_null -> unit) =
          fun (x89 : t) ->
            fun (x90 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x89) "path"
                (or_null_to_js Ojs.string_to_js x90)
        let (get_pathname : t -> string or_null) =
          fun (x92 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x92) "pathname")
        let (set_pathname : t -> string or_null -> unit) =
          fun (x94 : t) ->
            fun (x95 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x94) "pathname"
                (or_null_to_js Ojs.string_to_js x95)
        let (get_protocol : t -> string or_null) =
          fun (x97 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x97) "protocol")
        let (set_protocol : t -> string or_null -> unit) =
          fun (x99 : t) ->
            fun (x100 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x99) "protocol"
                (or_null_to_js Ojs.string_to_js x100)
        let (get_search : t -> string or_null) =
          fun (x102 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x102) "search")
        let (set_search : t -> string or_null -> unit) =
          fun (x104 : t) ->
            fun (x105 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x104) "search"
                (or_null_to_js Ojs.string_to_js x105)
        let (get_slashes : t -> bool or_null) =
          fun (x107 : t) ->
            or_null_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x107) "slashes")
        let (set_slashes : t -> bool or_null -> unit) =
          fun (x109 : t) ->
            fun (x110 : bool or_null) ->
              Ojs.set_prop_ascii (t_to_js x109) "slashes"
                (or_null_to_js Ojs.bool_to_js x110)
        let (get_port : t -> string or_null) =
          fun (x112 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x112) "port")
        let (set_port : t -> string or_null -> unit) =
          fun (x114 : t) ->
            fun (x115 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x114) "port"
                (or_null_to_js Ojs.string_to_js x115)
        let (get_query :
          t ->
            Node_querystring.Querystring.ParsedUrlQuery.t or_string or_null)
          =
          fun (x117 : t) ->
            or_null_of_js
              (fun (x118 : Ojs.t) ->
                 or_string_of_js
                   Node_querystring.Querystring.ParsedUrlQuery.t_of_js x118)
              (Ojs.get_prop_ascii (t_to_js x117) "query")
        let (set_query :
          t ->
            Node_querystring.Querystring.ParsedUrlQuery.t or_string or_null
              -> unit)
          =
          fun (x120 : t) ->
            fun
              (x121 :
                Node_querystring.Querystring.ParsedUrlQuery.t or_string
                  or_null)
              ->
              Ojs.set_prop_ascii (t_to_js x120) "query"
                (or_null_to_js
                   (fun
                      (x122 :
                        Node_querystring.Querystring.ParsedUrlQuery.t
                          or_string)
                      ->
                      or_string_to_js
                        Node_querystring.Querystring.ParsedUrlQuery.t_to_js
                        x122) x121)
      end
    module UrlWithParsedQuery =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x125 : Ojs.t) -> x125
        and t_to_js : t -> Ojs.t = fun (x124 : Ojs.t) -> x124
        let (get_query : t -> Node_querystring.Querystring.ParsedUrlQuery.t)
          =
          fun (x126 : t) ->
            Node_querystring.Querystring.ParsedUrlQuery.t_of_js
              (Ojs.get_prop_ascii (t_to_js x126) "query")
        let (set_query :
          t -> Node_querystring.Querystring.ParsedUrlQuery.t -> unit) =
          fun (x127 : t) ->
            fun (x128 : Node_querystring.Querystring.ParsedUrlQuery.t) ->
              Ojs.set_prop_ascii (t_to_js x127) "query"
                (Node_querystring.Querystring.ParsedUrlQuery.t_to_js x128)
        let (cast : t -> Url.t) =
          fun (x129 : t) -> Url.t_of_js (t_to_js x129)
      end
    module UrlWithStringQuery =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x131 : Ojs.t) -> x131
        and t_to_js : t -> Ojs.t = fun (x130 : Ojs.t) -> x130
        let (get_query : t -> string or_null) =
          fun (x132 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x132) "query")
        let (set_query : t -> string or_null -> unit) =
          fun (x134 : t) ->
            fun (x135 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x134) "query"
                (or_null_to_js Ojs.string_to_js x135)
        let (cast : t -> Url.t) =
          fun (x137 : t) -> Url.t_of_js (t_to_js x137)
      end
    module URLFormatOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x139 : Ojs.t) -> x139
        and t_to_js : t -> Ojs.t = fun (x138 : Ojs.t) -> x138
        let (get_auth : t -> bool) =
          fun (x140 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x140) "auth")
        let (set_auth : t -> bool -> unit) =
          fun (x141 : t) ->
            fun (x142 : bool) ->
              Ojs.set_prop_ascii (t_to_js x141) "auth" (Ojs.bool_to_js x142)
        let (get_fragment : t -> bool) =
          fun (x143 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x143) "fragment")
        let (set_fragment : t -> bool -> unit) =
          fun (x144 : t) ->
            fun (x145 : bool) ->
              Ojs.set_prop_ascii (t_to_js x144) "fragment"
                (Ojs.bool_to_js x145)
        let (get_search : t -> bool) =
          fun (x146 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x146) "search")
        let (set_search : t -> bool -> unit) =
          fun (x147 : t) ->
            fun (x148 : bool) ->
              Ojs.set_prop_ascii (t_to_js x147) "search"
                (Ojs.bool_to_js x148)
        let (get_unicode : t -> bool) =
          fun (x149 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x149) "unicode")
        let (set_unicode : t -> bool -> unit) =
          fun (x150 : t) ->
            fun (x151 : bool) ->
              Ojs.set_prop_ascii (t_to_js x150) "unicode"
                (Ojs.bool_to_js x151)
      end
    module URLSearchParams =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x153 : Ojs.t) -> x153
        and t_to_js : t -> Ojs.t = fun (x152 : Ojs.t) -> x152
        let (create :
          ?init:(t, (string * string) Iterable.t,
            string list or_string Dict.t, (string * string) list) union4
            or_string -> unit -> t)
          =
          fun
            ?init:(x154 :
                    (t, (string * string) Iterable.t,
                      string list or_string Dict.t, (string * string) list)
                      union4 or_string option)
            ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Import.url "URLSearchParams")
                   (let x155 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x154 with
                     | Some x156 ->
                         ignore
                           (Ojs.call x155 "push"
                              [|(or_string_to_js
                                   (fun
                                      (x157 :
                                        (t, (string * string) Iterable.t,
                                          string list or_string Dict.t,
                                          (string * string) list) union4)
                                      ->
                                      union4_to_js t_to_js
                                        (fun
                                           (x159 :
                                             (string * string) Iterable.t)
                                           ->
                                           Iterable.t_to_js
                                             (fun (x160 : (string * string))
                                                ->
                                                let (x161, x162) = x160 in
                                                let x163 = Ojs.array_make 2 in
                                                Ojs.array_set x163 0
                                                  (Ojs.string_to_js x161);
                                                Ojs.array_set x163 1
                                                  (Ojs.string_to_js x162);
                                                x163) x159)
                                        (fun
                                           (x164 :
                                             string list or_string Dict.t)
                                           ->
                                           Dict.t_to_js
                                             (fun
                                                (x165 :
                                                  string list or_string)
                                                ->
                                                or_string_to_js
                                                  (fun (x166 : string list)
                                                     ->
                                                     Ojs.list_to_js
                                                       Ojs.string_to_js x166)
                                                  x165) x164)
                                        (fun (x168 : (string * string) list)
                                           ->
                                           Ojs.list_to_js
                                             (fun (x169 : (string * string))
                                                ->
                                                let (x170, x171) = x169 in
                                                let x172 = Ojs.array_make 2 in
                                                Ojs.array_set x172 0
                                                  (Ojs.string_to_js x170);
                                                Ojs.array_set x172 1
                                                  (Ojs.string_to_js x171);
                                                x172) x168) x157) x156)|])
                     | None -> ());
                    x155))
        let (append : t -> name:string -> value:string -> unit) =
          fun (x175 : t) ->
            fun ~name:(x173 : string) ->
              fun ~value:(x174 : string) ->
                ignore
                  (Ojs.call (t_to_js x175) "append"
                     [|(Ojs.string_to_js x173);(Ojs.string_to_js x174)|])
        let (delete : t -> name:string -> unit) =
          fun (x177 : t) ->
            fun ~name:(x176 : string) ->
              ignore
                (Ojs.call (t_to_js x177) "delete" [|(Ojs.string_to_js x176)|])
        let (entries : t -> (string * string) IterableIterator.t) =
          fun (x178 : t) ->
            IterableIterator.t_of_js
              (fun (x179 : Ojs.t) ->
                 let x180 = x179 in
                 ((Ojs.string_of_js (Ojs.array_get x180 0)),
                   (Ojs.string_of_js (Ojs.array_get x180 1))))
              (Ojs.call (t_to_js x178) "entries" [||])
        let (for_each :
          t ->
            callback:(value:string -> name:string -> search_params:t -> unit)
              -> unit)
          =
          fun (x185 : t) ->
            fun
              ~callback:(x181 :
                          value:string ->
                            name:string -> search_params:t -> unit)
              ->
              ignore
                (Ojs.call (t_to_js x185) "forEach"
                   [|(Ojs.fun_to_js 3
                        (fun (x182 : Ojs.t) ->
                           fun (x183 : Ojs.t) ->
                             fun (x184 : Ojs.t) ->
                               x181 ~value:(Ojs.string_of_js x182)
                                 ~name:(Ojs.string_of_js x183)
                                 ~search_params:(t_of_js x184)))|])
        let (get_ : t -> name:string -> string or_null) =
          fun (x187 : t) ->
            fun ~name:(x186 : string) ->
              or_null_of_js Ojs.string_of_js
                (Ojs.call (t_to_js x187) "get" [|(Ojs.string_to_js x186)|])
        let (get_all : t -> name:string -> string list) =
          fun (x190 : t) ->
            fun ~name:(x189 : string) ->
              Ojs.list_of_js Ojs.string_of_js
                (Ojs.call (t_to_js x190) "getAll" [|(Ojs.string_to_js x189)|])
        let (has : t -> name:string -> bool) =
          fun (x193 : t) ->
            fun ~name:(x192 : string) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x193) "has" [|(Ojs.string_to_js x192)|])
        let (keys : t -> string IterableIterator.t) =
          fun (x194 : t) ->
            IterableIterator.t_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x194) "keys" [||])
        let (set_ : t -> name:string -> value:string -> unit) =
          fun (x198 : t) ->
            fun ~name:(x196 : string) ->
              fun ~value:(x197 : string) ->
                ignore
                  (Ojs.call (t_to_js x198) "set"
                     [|(Ojs.string_to_js x196);(Ojs.string_to_js x197)|])
        let (sort : t -> unit) =
          fun (x199 : t) -> ignore (Ojs.call (t_to_js x199) "sort" [||])
        let (to_string : t -> string) =
          fun (x200 : t) ->
            Ojs.string_of_js (Ojs.call (t_to_js x200) "toString" [||])
        let (values : t -> string IterableIterator.t) =
          fun (x201 : t) ->
            IterableIterator.t_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x201) "values" [||])
        let (cast : t -> (string * string) Iterable.t) =
          fun (x203 : t) ->
            Iterable.t_of_js
              (fun (x204 : Ojs.t) ->
                 let x205 = x204 in
                 ((Ojs.string_of_js (Ojs.array_get x205 0)),
                   (Ojs.string_of_js (Ojs.array_get x205 1)))) (t_to_js x203)
      end
    module URL =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x207 : Ojs.t) -> x207
        and t_to_js : t -> Ojs.t = fun (x206 : Ojs.t) -> x206
        let (create : input:string -> ?base:t or_string -> unit -> t) =
          fun ~input:(x208 : string) ->
            fun ?base:(x209 : t or_string option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.url "URL")
                     (let x210 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x210 "push" [|(Ojs.string_to_js x208)|]);
                      (match x209 with
                       | Some x211 ->
                           ignore
                             (Ojs.call x210 "push"
                                [|(or_string_to_js t_to_js x211)|])
                       | None -> ());
                      x210))
        let (get_hash : t -> string) =
          fun (x213 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x213) "hash")
        let (set_hash : t -> string -> unit) =
          fun (x214 : t) ->
            fun (x215 : string) ->
              Ojs.set_prop_ascii (t_to_js x214) "hash"
                (Ojs.string_to_js x215)
        let (get_host : t -> string) =
          fun (x216 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x216) "host")
        let (set_host : t -> string -> unit) =
          fun (x217 : t) ->
            fun (x218 : string) ->
              Ojs.set_prop_ascii (t_to_js x217) "host"
                (Ojs.string_to_js x218)
        let (get_hostname : t -> string) =
          fun (x219 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x219) "hostname")
        let (set_hostname : t -> string -> unit) =
          fun (x220 : t) ->
            fun (x221 : string) ->
              Ojs.set_prop_ascii (t_to_js x220) "hostname"
                (Ojs.string_to_js x221)
        let (get_href : t -> string) =
          fun (x222 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x222) "href")
        let (set_href : t -> string -> unit) =
          fun (x223 : t) ->
            fun (x224 : string) ->
              Ojs.set_prop_ascii (t_to_js x223) "href"
                (Ojs.string_to_js x224)
        let (get_origin : t -> string) =
          fun (x225 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x225) "origin")
        let (get_password : t -> string) =
          fun (x226 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x226) "password")
        let (set_password : t -> string -> unit) =
          fun (x227 : t) ->
            fun (x228 : string) ->
              Ojs.set_prop_ascii (t_to_js x227) "password"
                (Ojs.string_to_js x228)
        let (get_pathname : t -> string) =
          fun (x229 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x229) "pathname")
        let (set_pathname : t -> string -> unit) =
          fun (x230 : t) ->
            fun (x231 : string) ->
              Ojs.set_prop_ascii (t_to_js x230) "pathname"
                (Ojs.string_to_js x231)
        let (get_port : t -> string) =
          fun (x232 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x232) "port")
        let (set_port : t -> string -> unit) =
          fun (x233 : t) ->
            fun (x234 : string) ->
              Ojs.set_prop_ascii (t_to_js x233) "port"
                (Ojs.string_to_js x234)
        let (get_protocol : t -> string) =
          fun (x235 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x235) "protocol")
        let (set_protocol : t -> string -> unit) =
          fun (x236 : t) ->
            fun (x237 : string) ->
              Ojs.set_prop_ascii (t_to_js x236) "protocol"
                (Ojs.string_to_js x237)
        let (get_search : t -> string) =
          fun (x238 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x238) "search")
        let (set_search : t -> string -> unit) =
          fun (x239 : t) ->
            fun (x240 : string) ->
              Ojs.set_prop_ascii (t_to_js x239) "search"
                (Ojs.string_to_js x240)
        let (get_search_params : t -> URLSearchParams.t) =
          fun (x241 : t) ->
            URLSearchParams.t_of_js
              (Ojs.get_prop_ascii (t_to_js x241) "searchParams")
        let (get_username : t -> string) =
          fun (x242 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x242) "username")
        let (set_username : t -> string -> unit) =
          fun (x243 : t) ->
            fun (x244 : string) ->
              Ojs.set_prop_ascii (t_to_js x243) "username"
                (Ojs.string_to_js x244)
        let (to_string : t -> string) =
          fun (x245 : t) ->
            Ojs.string_of_js (Ojs.call (t_to_js x245) "toString" [||])
        let (to_json : t -> string) =
          fun (x246 : t) ->
            Ojs.string_of_js (Ojs.call (t_to_js x246) "toJSON" [||])
      end
    let (parse : string -> UrlWithStringQuery.t) =
      fun (x247 : string) ->
        UrlWithStringQuery.t_of_js
          (Ojs.call Import.url "parse" [|(Ojs.string_to_js x247)|])
    let (parse :
      url_str:string ->
        parse_query_string:[ `L_b_false ] or_undefined ->
          ?slashes_denote_host:bool -> unit -> UrlWithStringQuery.t)
      =
      fun ~url_str:(x248 : string) ->
        fun ~parse_query_string:(x249 : [ `L_b_false ] or_undefined) ->
          fun ?slashes_denote_host:(x250 : bool option) ->
            fun () ->
              UrlWithStringQuery.t_of_js
                (let x254 = Import.url in
                 Ojs.call (Ojs.get_prop_ascii x254 "parse") "apply"
                   [|x254;((let x251 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x251 "push"
                                 [|(Ojs.string_to_js x248)|]);
                            ignore
                              (Ojs.call x251 "push"
                                 [|(or_undefined_to_js
                                      (fun (x253 : [ `L_b_false ]) ->
                                         match x253 with
                                         | `L_b_false ->
                                             Ojs.string_to_js "LBFalse") x249)|]);
                            (match x250 with
                             | Some x252 ->
                                 ignore
                                   (Ojs.call x251 "push"
                                      [|(Ojs.bool_to_js x252)|])
                             | None -> ());
                            x251))|])
    let (parse :
      url_str:string ->
        parse_query_string:[ `L_b_true ] ->
          ?slashes_denote_host:bool -> unit -> UrlWithParsedQuery.t)
      =
      fun ~url_str:(x255 : string) ->
        fun ~parse_query_string:(x256 : [ `L_b_true ]) ->
          fun ?slashes_denote_host:(x257 : bool option) ->
            fun () ->
              UrlWithParsedQuery.t_of_js
                (let x260 = Import.url in
                 Ojs.call (Ojs.get_prop_ascii x260 "parse") "apply"
                   [|x260;((let x258 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x258 "push"
                                 [|(Ojs.string_to_js x255)|]);
                            ignore
                              (Ojs.call x258 "push"
                                 [|((match x256 with
                                     | `L_b_true -> Ojs.string_to_js "LBTrue"))|]);
                            (match x257 with
                             | Some x259 ->
                                 ignore
                                   (Ojs.call x258 "push"
                                      [|(Ojs.bool_to_js x259)|])
                             | None -> ());
                            x258))|])
    let (parse :
      url_str:string ->
        parse_query_string:bool -> ?slashes_denote_host:bool -> unit -> Url.t)
      =
      fun ~url_str:(x261 : string) ->
        fun ~parse_query_string:(x262 : bool) ->
          fun ?slashes_denote_host:(x263 : bool option) ->
            fun () ->
              Url.t_of_js
                (let x266 = Import.url in
                 Ojs.call (Ojs.get_prop_ascii x266 "parse") "apply"
                   [|x266;((let x264 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x264 "push"
                                 [|(Ojs.string_to_js x261)|]);
                            ignore
                              (Ojs.call x264 "push" [|(Ojs.bool_to_js x262)|]);
                            (match x263 with
                             | Some x265 ->
                                 ignore
                                   (Ojs.call x264 "push"
                                      [|(Ojs.bool_to_js x265)|])
                             | None -> ());
                            x264))|])
    let (format : url:Url.t -> ?options:URLFormatOptions.t -> unit -> string)
      =
      fun ~url:(x267 : Url.t) ->
        fun ?options:(x268 : URLFormatOptions.t option) ->
          fun () ->
            Ojs.string_of_js
              (let x271 = Import.url in
               Ojs.call (Ojs.get_prop_ascii x271 "format") "apply"
                 [|x271;((let x269 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x269 "push" [|(Url.t_to_js x267)|]);
                          (match x268 with
                           | Some x270 ->
                               ignore
                                 (Ojs.call x269 "push"
                                    [|(URLFormatOptions.t_to_js x270)|])
                           | None -> ());
                          x269))|])
    let (format : url_object:UrlObject.t or_string -> string) =
      fun ~url_object:(x272 : UrlObject.t or_string) ->
        Ojs.string_of_js
          (Ojs.call Import.url "format"
             [|(or_string_to_js UrlObject.t_to_js x272)|])
    let (resolve : from:string -> to_:string -> string) =
      fun ~from:(x274 : string) ->
        fun ~to_:(x275 : string) ->
          Ojs.string_of_js
            (Ojs.call Import.url "resolve"
               [|(Ojs.string_to_js x274);(Ojs.string_to_js x275)|])
    let (domain_to_ascii : domain:string -> string) =
      fun ~domain:(x276 : string) ->
        Ojs.string_of_js
          (Ojs.call Import.url "domainToASCII" [|(Ojs.string_to_js x276)|])
    let (domain_to_unicode : domain:string -> string) =
      fun ~domain:(x277 : string) ->
        Ojs.string_of_js
          (Ojs.call Import.url "domainToUnicode" [|(Ojs.string_to_js x277)|])
    let (file_url_to_path : url:Url.t or_string -> string) =
      fun ~url:(x278 : Url.t or_string) ->
        Ojs.string_of_js
          (Ojs.call Import.url "fileURLToPath"
             [|(or_string_to_js Url.t_to_js x278)|])
    let (path_to_file_url : url:string -> Url.t) =
      fun ~url:(x280 : string) ->
        Url.t_of_js
          (Ojs.call Import.url "pathToFileURL" [|(Ojs.string_to_js x280)|])
  end
