[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces = struct  end
    module Types =
      struct
        open AnonymousInterfaces
        type wasi_WASI = [ `Wasi_WASI ] intf
        and wasi_WASIOptions = [ `Wasi_WASIOptions ] intf
        let rec wasi_WASI_of_js : Ojs.t -> wasi_WASI = Obj.magic
        and wasi_WASI_to_js : wasi_WASI -> Ojs.t = Obj.magic
        and wasi_WASIOptions_of_js : Ojs.t -> wasi_WASIOptions = Obj.magic
        and wasi_WASIOptions_to_js : wasi_WASIOptions -> Ojs.t = Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module Wasi =
  struct
    module WASIOptions =
      struct
        type t = wasi_WASIOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x2 : Ojs.t) -> wasi_WASIOptions_of_js x2
        and t_to_js : t -> Ojs.t =
          fun (x1 : wasi_WASIOptions) -> wasi_WASIOptions_to_js x1
        let (get_args : t -> string list) =
          fun (x3 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3) "args")
        let (set_args : t -> string list -> unit) =
          fun (x5 : t) ->
            fun (x6 : string list) ->
              Ojs.set_prop_ascii (t_to_js x5) "args"
                (Ojs.list_to_js Ojs.string_to_js x6)
        let (get_env : t -> untyped_object) =
          fun (x8 : t) ->
            untyped_object_of_js (Ojs.get_prop_ascii (t_to_js x8) "env")
        let (set_env : t -> untyped_object -> unit) =
          fun (x9 : t) ->
            fun (x10 : untyped_object) ->
              Ojs.set_prop_ascii (t_to_js x9) "env"
                (untyped_object_to_js x10)
        let (get_preopens : t -> string Dict.t) =
          fun (x11 : t) ->
            Dict.t_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x11) "preopens")
        let (set_preopens : t -> string Dict.t -> unit) =
          fun (x13 : t) ->
            fun (x14 : string Dict.t) ->
              Ojs.set_prop_ascii (t_to_js x13) "preopens"
                (Dict.t_to_js Ojs.string_to_js x14)
        let (get_returnOnExit : t -> bool) =
          fun (x16 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x16) "returnOnExit")
        let (set_returnOnExit : t -> bool -> unit) =
          fun (x17 : t) ->
            fun (x18 : bool) ->
              Ojs.set_prop_ascii (t_to_js x17) "returnOnExit"
                (Ojs.bool_to_js x18)
        let (get_stdin : t -> float) =
          fun (x19 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x19) "stdin")
        let (set_stdin : t -> float -> unit) =
          fun (x20 : t) ->
            fun (x21 : float) ->
              Ojs.set_prop_ascii (t_to_js x20) "stdin" (Ojs.float_to_js x21)
        let (get_stdout : t -> float) =
          fun (x22 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x22) "stdout")
        let (set_stdout : t -> float -> unit) =
          fun (x23 : t) ->
            fun (x24 : float) ->
              Ojs.set_prop_ascii (t_to_js x23) "stdout" (Ojs.float_to_js x24)
        let (get_stderr : t -> float) =
          fun (x25 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x25) "stderr")
        let (set_stderr : t -> float -> unit) =
          fun (x26 : t) ->
            fun (x27 : float) ->
              Ojs.set_prop_ascii (t_to_js x26) "stderr" (Ojs.float_to_js x27)
      end
    module WASI =
      struct
        type t = wasi_WASI
        let rec t_of_js : Ojs.t -> t =
          fun (x29 : Ojs.t) -> wasi_WASI_of_js x29
        and t_to_js : t -> Ojs.t =
          fun (x28 : wasi_WASI) -> wasi_WASI_to_js x28
        let (create : ?options:wasi_WASIOptions -> unit -> t) =
          fun ?options:(x30 : wasi_WASIOptions option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.wasi "WASI")
                   (let x31 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x30 with
                     | Some x32 ->
                         ignore
                           (Ojs.call x31 "push"
                              [|(wasi_WASIOptions_to_js x32)|])
                     | None -> ());
                    x31))
        let (start : t -> instance:untyped_object -> unit) =
          fun (x34 : t) ->
            fun ~instance:(x33 : untyped_object) ->
              ignore
                (Ojs.call (t_to_js x34) "start"
                   [|(untyped_object_to_js x33)|])
        let (initialize : t -> instance:untyped_object -> unit) =
          fun (x36 : t) ->
            fun ~instance:(x35 : untyped_object) ->
              ignore
                (Ojs.call (t_to_js x36) "initialize"
                   [|(untyped_object_to_js x35)|])
        let (get_wasiImport : t -> any Dict.t) =
          fun (x37 : t) ->
            Dict.t_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x37) "wasiImport")
      end
  end
