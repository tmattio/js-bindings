[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
        type anonymous_interface_1 = [ `anonymous_interface_1 ] intf
        let rec anonymous_interface_1_of_js : Ojs.t -> anonymous_interface_1
          = Obj.magic
        and anonymous_interface_1_to_js : anonymous_interface_1 -> Ojs.t =
          Obj.magic
        type anonymous_interface_2 = [ `anonymous_interface_2 ] intf
        let rec anonymous_interface_2_of_js : Ojs.t -> anonymous_interface_2
          = Obj.magic
        and anonymous_interface_2_to_js : anonymous_interface_2 -> Ojs.t =
          Obj.magic
        type anonymous_interface_3 = [ `anonymous_interface_3 ] intf
        let rec anonymous_interface_3_of_js : Ojs.t -> anonymous_interface_3
          = Obj.magic
        and anonymous_interface_3_to_js : anonymous_interface_3 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type _Buffer = [ `Buffer ] intf
        and _BufferEncoding =
          [ `ascii  | `base64  | `binary  | `hex  | `latin1  | `ucs_2 
          | `ucs2  | `utf_8  | `utf16le  | `utf8  | `buffer ]
        and _ErrorConstructor = [ `ErrorConstructor ] intf
        and _ImportMeta = [ `ImportMeta ] intf
        and _NodeJS_ArrayBufferView = (DataView.t, _NodeJS_TypedArray) union2
        and _NodeJS_CallSite = [ `NodeJS_CallSite ] intf
        and 'T _NodeJS_Dict = [ `NodeJS_Dict of 'T ] intf
        and _NodeJS_ErrnoException = [ `NodeJS_ErrnoException ] intf
        and _NodeJS_Global = [ `NodeJS_Global ] intf
        and _NodeJS_Immediate =
          [ `NodeJS_Immediate  | `NodeJS_RefCounted ] intf
        and _NodeJS_InspectOptions = [ `NodeJS_InspectOptions ] intf
        and _NodeJS_Module = [ `NodeJS_Module ] intf
        and 'T _NodeJS_ReadOnlyDict = [ `NodeJS_ReadOnlyDict of 'T ] intf
        and _NodeJS_ReadWriteStream =
          [ `NodeJS_ReadWriteStream  | `NodeJS_ReadableStream 
          | `NodeJS_WritableStream ] intf
        and _NodeJS_ReadableStream = [ `NodeJS_ReadableStream ] intf
        and _NodeJS_RefCounted = [ `NodeJS_RefCounted ] intf
        and _NodeJS_Require = [ `NodeJS_Require ] intf
        and _NodeJS_RequireExtensions =
          [ `NodeJS_RequireExtensions 
          | `NodeJS_Dict of m:_NodeJS_Module -> filename:string -> any ] intf
        and _NodeJS_RequireResolve = [ `NodeJS_RequireResolve ] intf
        and _NodeJS_Timeout =
          [ `NodeJS_Timeout  | `NodeJS_RefCounted  | `NodeJS_Timer ] intf
        and _NodeJS_Timer = [ `NodeJS_Timer  | `NodeJS_RefCounted ] intf
        and _NodeJS_TypedArray =
          ((((Float64Array.t, Int16Array.t, Int32Array.t, Int8Array.t,
               Uint16Array.t, Uint32Array.t, Uint8Array.t,
               Uint8ClampedArray.t) union8,
              Float32Array.t) or_,
             BigUint64Array.t) or_,
            BigInt64Array.t) or_
        and _NodeJS_WritableStream = [ `NodeJS_WritableStream ] intf
        and _NodeModule = [ `NodeModule  | `NodeJS_Module ] intf
        and _NodeRequire = [ `NodeRequire  | `NodeJS_Require ] intf
        and _RequireResolve =
          [ `RequireResolve  | `NodeJS_RequireResolve ] intf
        and _String = [ `String ] intf
        and 'T _WithImplicitCoercion = ('T, anonymous_interface_3) union2
        let rec _Buffer_of_js : Ojs.t -> _Buffer = Obj.magic
        and _Buffer_to_js : _Buffer -> Ojs.t = Obj.magic
        and _BufferEncoding_of_js : Ojs.t -> _BufferEncoding =
          fun (x2 : Ojs.t) ->
            let x3 = x2 in
            match Ojs.string_of_js x3 with
            | "ascii" -> `ascii
            | "base64" -> `base64
            | "binary" -> `binary
            | "hex" -> `hex
            | "latin1" -> `latin1
            | "ucs-2" -> `ucs_2
            | "ucs2" -> `ucs2
            | "utf-8" -> `utf_8
            | "utf16le" -> `utf16le
            | "utf8" -> `utf8
            | "buffer" -> `buffer
            | _ -> assert false
        and _BufferEncoding_to_js : _BufferEncoding -> Ojs.t =
          fun
            (x1 :
              [ `ascii  | `base64  | `binary  | `hex  | `latin1  | `ucs_2 
              | `ucs2  | `utf_8  | `utf16le  | `utf8  | `buffer ])
            ->
            match x1 with
            | `ascii -> Ojs.string_to_js "ascii"
            | `base64 -> Ojs.string_to_js "base64"
            | `binary -> Ojs.string_to_js "binary"
            | `hex -> Ojs.string_to_js "hex"
            | `latin1 -> Ojs.string_to_js "latin1"
            | `ucs_2 -> Ojs.string_to_js "ucs-2"
            | `ucs2 -> Ojs.string_to_js "ucs2"
            | `utf_8 -> Ojs.string_to_js "utf-8"
            | `utf16le -> Ojs.string_to_js "utf16le"
            | `utf8 -> Ojs.string_to_js "utf8"
            | `buffer -> Ojs.string_to_js "buffer"
        and _ErrorConstructor_of_js : Ojs.t -> _ErrorConstructor = Obj.magic
        and _ErrorConstructor_to_js : _ErrorConstructor -> Ojs.t = Obj.magic
        and _ImportMeta_of_js : Ojs.t -> _ImportMeta = Obj.magic
        and _ImportMeta_to_js : _ImportMeta -> Ojs.t = Obj.magic
        and _NodeJS_ArrayBufferView_of_js : Ojs.t -> _NodeJS_ArrayBufferView
          =
          fun (x7 : Ojs.t) ->
            union2_of_js DataView.t_of_js _NodeJS_TypedArray_of_js x7
        and _NodeJS_ArrayBufferView_to_js : _NodeJS_ArrayBufferView -> Ojs.t
          =
          fun (x4 : (DataView.t, _NodeJS_TypedArray) union2) ->
            union2_to_js DataView.t_to_js _NodeJS_TypedArray_to_js x4
        and _NodeJS_CallSite_of_js : Ojs.t -> _NodeJS_CallSite = Obj.magic
        and _NodeJS_CallSite_to_js : _NodeJS_CallSite -> Ojs.t = Obj.magic
        and _NodeJS_Dict_of_js :
          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _NodeJS_Dict =
          fun _T -> Obj.magic
        and _NodeJS_Dict_to_js :
          'T . ('T -> Ojs.t) -> 'T _NodeJS_Dict -> Ojs.t =
          fun _T -> Obj.magic
        and _NodeJS_ErrnoException_of_js : Ojs.t -> _NodeJS_ErrnoException =
          Obj.magic
        and _NodeJS_ErrnoException_to_js : _NodeJS_ErrnoException -> Ojs.t =
          Obj.magic
        and _NodeJS_Global_of_js : Ojs.t -> _NodeJS_Global = Obj.magic
        and _NodeJS_Global_to_js : _NodeJS_Global -> Ojs.t = Obj.magic
        and _NodeJS_Immediate_of_js : Ojs.t -> _NodeJS_Immediate = Obj.magic
        and _NodeJS_Immediate_to_js : _NodeJS_Immediate -> Ojs.t = Obj.magic
        and _NodeJS_InspectOptions_of_js : Ojs.t -> _NodeJS_InspectOptions =
          Obj.magic
        and _NodeJS_InspectOptions_to_js : _NodeJS_InspectOptions -> Ojs.t =
          Obj.magic
        and _NodeJS_Module_of_js : Ojs.t -> _NodeJS_Module = Obj.magic
        and _NodeJS_Module_to_js : _NodeJS_Module -> Ojs.t = Obj.magic
        and _NodeJS_ReadOnlyDict_of_js :
          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _NodeJS_ReadOnlyDict =
          fun _T -> Obj.magic
        and _NodeJS_ReadOnlyDict_to_js :
          'T . ('T -> Ojs.t) -> 'T _NodeJS_ReadOnlyDict -> Ojs.t =
          fun _T -> Obj.magic
        and _NodeJS_ReadWriteStream_of_js : Ojs.t -> _NodeJS_ReadWriteStream
          = Obj.magic
        and _NodeJS_ReadWriteStream_to_js : _NodeJS_ReadWriteStream -> Ojs.t
          = Obj.magic
        and _NodeJS_ReadableStream_of_js : Ojs.t -> _NodeJS_ReadableStream =
          Obj.magic
        and _NodeJS_ReadableStream_to_js : _NodeJS_ReadableStream -> Ojs.t =
          Obj.magic
        and _NodeJS_RefCounted_of_js : Ojs.t -> _NodeJS_RefCounted =
          Obj.magic
        and _NodeJS_RefCounted_to_js : _NodeJS_RefCounted -> Ojs.t =
          Obj.magic
        and _NodeJS_Require_of_js : Ojs.t -> _NodeJS_Require = Obj.magic
        and _NodeJS_Require_to_js : _NodeJS_Require -> Ojs.t = Obj.magic
        and _NodeJS_RequireExtensions_of_js :
          Ojs.t -> _NodeJS_RequireExtensions = Obj.magic
        and _NodeJS_RequireExtensions_to_js :
          _NodeJS_RequireExtensions -> Ojs.t = Obj.magic
        and _NodeJS_RequireResolve_of_js : Ojs.t -> _NodeJS_RequireResolve =
          Obj.magic
        and _NodeJS_RequireResolve_to_js : _NodeJS_RequireResolve -> Ojs.t =
          Obj.magic
        and _NodeJS_Timeout_of_js : Ojs.t -> _NodeJS_Timeout = Obj.magic
        and _NodeJS_Timeout_to_js : _NodeJS_Timeout -> Ojs.t = Obj.magic
        and _NodeJS_Timer_of_js : Ojs.t -> _NodeJS_Timer = Obj.magic
        and _NodeJS_Timer_to_js : _NodeJS_Timer -> Ojs.t = Obj.magic
        and _NodeJS_TypedArray_of_js : Ojs.t -> _NodeJS_TypedArray =
          fun (x25 : Ojs.t) ->
            or__of_js
              (fun (x26 : Ojs.t) ->
                 or__of_js
                   (fun (x27 : Ojs.t) ->
                      or__of_js
                        (fun (x28 : Ojs.t) ->
                           union8_of_js Float64Array.t_of_js
                             Int16Array.t_of_js Int32Array.t_of_js
                             Int8Array.t_of_js Uint16Array.t_of_js
                             Uint32Array.t_of_js Uint8Array.t_of_js
                             Uint8ClampedArray.t_of_js x28)
                        Float32Array.t_of_js x27) BigUint64Array.t_of_js x26)
              BigInt64Array.t_of_js x25
        and _NodeJS_TypedArray_to_js : _NodeJS_TypedArray -> Ojs.t =
          fun
            (x10 :
              ((((Float64Array.t, Int16Array.t, Int32Array.t, Int8Array.t,
                   Uint16Array.t, Uint32Array.t, Uint8Array.t,
                   Uint8ClampedArray.t) union8,
                  Float32Array.t) or_,
                 BigUint64Array.t) or_,
                BigInt64Array.t) or_)
            ->
            or__to_js
              (fun
                 (x11 :
                   (((Float64Array.t, Int16Array.t, Int32Array.t,
                       Int8Array.t, Uint16Array.t, Uint32Array.t,
                       Uint8Array.t, Uint8ClampedArray.t) union8,
                      Float32Array.t) or_,
                     BigUint64Array.t) or_)
                 ->
                 or__to_js
                   (fun
                      (x12 :
                        ((Float64Array.t, Int16Array.t, Int32Array.t,
                           Int8Array.t, Uint16Array.t, Uint32Array.t,
                           Uint8Array.t, Uint8ClampedArray.t) union8,
                          Float32Array.t) or_)
                      ->
                      or__to_js
                        (fun
                           (x13 :
                             (Float64Array.t, Int16Array.t, Int32Array.t,
                               Int8Array.t, Uint16Array.t, Uint32Array.t,
                               Uint8Array.t, Uint8ClampedArray.t) union8)
                           ->
                           union8_to_js Float64Array.t_to_js
                             Int16Array.t_to_js Int32Array.t_to_js
                             Int8Array.t_to_js Uint16Array.t_to_js
                             Uint32Array.t_to_js Uint8Array.t_to_js
                             Uint8ClampedArray.t_to_js x13)
                        Float32Array.t_to_js x12) BigUint64Array.t_to_js x11)
              BigInt64Array.t_to_js x10
        and _NodeJS_WritableStream_of_js : Ojs.t -> _NodeJS_WritableStream =
          Obj.magic
        and _NodeJS_WritableStream_to_js : _NodeJS_WritableStream -> Ojs.t =
          Obj.magic
        and _NodeModule_of_js : Ojs.t -> _NodeModule = Obj.magic
        and _NodeModule_to_js : _NodeModule -> Ojs.t = Obj.magic
        and _NodeRequire_of_js : Ojs.t -> _NodeRequire = Obj.magic
        and _NodeRequire_to_js : _NodeRequire -> Ojs.t = Obj.magic
        and _RequireResolve_of_js : Ojs.t -> _RequireResolve = Obj.magic
        and _RequireResolve_to_js : _RequireResolve -> Ojs.t = Obj.magic
        and _String_of_js : Ojs.t -> _String = Obj.magic
        and _String_to_js : _String -> Ojs.t = Obj.magic
        and _WithImplicitCoercion_of_js :
          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T _WithImplicitCoercion = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x43 : Ojs.t) ->
              union2_of_js __T_of_js anonymous_interface_3_of_js x43
        and _WithImplicitCoercion_to_js :
          'T . ('T -> Ojs.t) -> 'T _WithImplicitCoercion -> Ojs.t = fun (type
          __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x40 : (__T, anonymous_interface_3) union2) ->
              union2_to_js __T_to_js anonymous_interface_3_to_js x40
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x47 : Ojs.t) -> anonymous_interface_0_of_js x47
    and t_to_js : t -> Ojs.t =
      fun (x46 : anonymous_interface_0) -> anonymous_interface_0_to_js x46
    let (get_end : t -> bool) =
      fun (x48 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x48) "end")
    let (set_end : t -> bool -> unit) =
      fun (x49 : t) ->
        fun (x50 : bool) ->
          Ojs.set_prop_ascii (t_to_js x49) "end" (Ojs.bool_to_js x50)
  end
module AnonymousInterface1 =
  struct
    type t = anonymous_interface_1
    let rec t_of_js : Ojs.t -> t =
      fun (x52 : Ojs.t) -> anonymous_interface_1_of_js x52
    and t_to_js : t -> Ojs.t =
      fun (x51 : anonymous_interface_1) -> anonymous_interface_1_to_js x51
    let (get_paths : t -> string list) =
      fun (x53 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x53) "paths")
    let (set_paths : t -> string list -> unit) =
      fun (x55 : t) ->
        fun (x56 : string list) ->
          Ojs.set_prop_ascii (t_to_js x55) "paths"
            (Ojs.list_to_js Ojs.string_to_js x56)
  end
module AnonymousInterface2 =
  struct
    type t = anonymous_interface_2
    let rec t_of_js : Ojs.t -> t =
      fun (x59 : Ojs.t) -> anonymous_interface_2_of_js x59
    and t_to_js : t -> Ojs.t =
      fun (x58 : anonymous_interface_2) -> anonymous_interface_2_to_js x58
    let (get_type : t -> [ `Buffer ]) =
      fun (x60 : t) ->
        let x61 = Ojs.get_prop_ascii (t_to_js x60) "type" in
        match Ojs.string_of_js x61 with
        | "Buffer" -> `Buffer
        | _ -> assert false
    let (set_type : t -> [ `Buffer ] -> unit) =
      fun (x62 : t) ->
        fun (x63 : [ `Buffer ]) ->
          Ojs.set_prop_ascii (t_to_js x62) "type"
            (match x63 with | `Buffer -> Ojs.string_to_js "Buffer")
    let (get_data : t -> float list) =
      fun (x64 : t) ->
        Ojs.list_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x64) "data")
    let (set_data : t -> float list -> unit) =
      fun (x66 : t) ->
        fun (x67 : float list) ->
          Ojs.set_prop_ascii (t_to_js x66) "data"
            (Ojs.list_to_js Ojs.float_to_js x67)
  end
module AnonymousInterface3 =
  struct
    type t = anonymous_interface_3
    let rec t_of_js : Ojs.t -> t =
      fun (x70 : Ojs.t) -> anonymous_interface_3_of_js x70
    and t_to_js : t -> Ojs.t =
      fun (x69 : anonymous_interface_3) -> anonymous_interface_3_to_js x69
    let (valueOf : t -> 'T) =
      fun (x71 : t) -> Obj.magic (Ojs.call (t_to_js x71) "valueOf" [||])
  end
module ErrorConstructor =
  struct
    type t = _ErrorConstructor
    let rec t_of_js : Ojs.t -> t =
      fun (x73 : Ojs.t) -> _ErrorConstructor_of_js x73
    and t_to_js : t -> Ojs.t =
      fun (x72 : _ErrorConstructor) -> _ErrorConstructor_to_js x72
    let (captureStackTrace :
      t ->
        targetObject:untyped_object ->
          ?constructorOpt:untyped_function -> unit -> unit)
      =
      fun (x78 : t) ->
        fun ~targetObject:(x74 : untyped_object) ->
          fun ?constructorOpt:(x75 : untyped_function option) ->
            fun () ->
              ignore
                (let x79 = t_to_js x78 in
                 Ojs.call (Ojs.get_prop_ascii x79 "captureStackTrace")
                   "apply"
                   [|x79;((let x76 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x76 "push"
                                [|(untyped_object_to_js x74)|]);
                           (match x75 with
                            | Some x77 ->
                                ignore
                                  (Ojs.call x76 "push"
                                     [|(untyped_function_to_js x77)|])
                            | None -> ());
                           x76))|])
    let (prepareStackTrace :
      t -> err:Error.t -> stackTraces:_NodeJS_CallSite list -> any) =
      fun (x83 : t) ->
        fun ~err:(x80 : Error.t) ->
          fun ~stackTraces:(x81 : _NodeJS_CallSite list) ->
            any_of_js
              (Ojs.call (t_to_js x83) "prepareStackTrace"
                 [|(Error.t_to_js x80);(Ojs.list_to_js _NodeJS_CallSite_to_js
                                          x81)|])
    let (get_stackTraceLimit : t -> float) =
      fun (x84 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x84) "stackTraceLimit")
    let (set_stackTraceLimit : t -> float -> unit) =
      fun (x85 : t) ->
        fun (x86 : float) ->
          Ojs.set_prop_ascii (t_to_js x85) "stackTraceLimit"
            (Ojs.float_to_js x86)
  end
module String =
  struct
    type t = _String
    let rec t_of_js : Ojs.t -> t = fun (x88 : Ojs.t) -> _String_of_js x88
    and t_to_js : t -> Ojs.t = fun (x87 : _String) -> _String_to_js x87
    let (trimLeft : t -> string) =
      fun (x89 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x89) "trimLeft" [||])
    let (trimRight : t -> string) =
      fun (x90 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x90) "trimRight" [||])
    let (trimStart : t -> string) =
      fun (x91 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x91) "trimStart" [||])
    let (trimEnd : t -> string) =
      fun (x92 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x92) "trimEnd" [||])
    let (to_ml : t -> string) =
      fun (x93 : t) -> Ojs.string_of_js (t_to_js x93)
    let (of_ml : string -> t) =
      fun (x94 : string) -> t_of_js (Ojs.string_to_js x94)
  end
module ImportMeta =
  struct
    type t = _ImportMeta
    let rec t_of_js : Ojs.t -> t = fun (x96 : Ojs.t) -> _ImportMeta_of_js x96
    and t_to_js : t -> Ojs.t =
      fun (x95 : _ImportMeta) -> _ImportMeta_to_js x95
    let (get_url : t -> string) =
      fun (x97 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x97) "url")
    let (set_url : t -> string -> unit) =
      fun (x98 : t) ->
        fun (x99 : string) ->
          Ojs.set_prop_ascii (t_to_js x98) "url" (Ojs.string_to_js x99)
  end
module NodeRequire =
  struct
    type t = _NodeRequire
    let rec t_of_js : Ojs.t -> t =
      fun (x101 : Ojs.t) -> _NodeRequire_of_js x101
    and t_to_js : t -> Ojs.t =
      fun (x100 : _NodeRequire) -> _NodeRequire_to_js x100
    let (cast : t -> _NodeJS_Require) =
      fun (x102 : t) -> _NodeJS_Require_of_js (t_to_js x102)
  end
module NodeModule =
  struct
    type t = _NodeModule
    let rec t_of_js : Ojs.t -> t =
      fun (x104 : Ojs.t) -> _NodeModule_of_js x104
    and t_to_js : t -> Ojs.t =
      fun (x103 : _NodeModule) -> _NodeModule_to_js x103
    let (cast : t -> _NodeJS_Module) =
      fun (x105 : t) -> _NodeJS_Module_of_js (t_to_js x105)
  end
let __filename () =
  (Ojs.get_prop_ascii Ojs.global "__filename") |> Ojs.string_of_js
let __dirname () =
  (Ojs.get_prop_ascii Ojs.global "__dirname") |> Ojs.string_of_js
let (setTimeout :
  callback:(args:any list -> unit) ->
    ?ms:float -> args:any list -> _NodeJS_Timeout)
  =
  fun ~callback:(x106 : args:any list -> unit) ->
    fun ?ms:(x107 : float option) ->
      fun ~args:(x108 : any list) ->
        _NodeJS_Timeout_of_js
          (let x114 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x114 "setTimeout") "apply"
             [|x114;((let x109 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x109 "push"
                           [|(Ojs.fun_to_js_args
                                (fun (x112 : _) ->
                                   x106
                                     ~args:(Ojs.list_of_js_from any_of_js
                                              x112 0)))|]);
                      (match x107 with
                       | Some x111 ->
                           ignore
                             (Ojs.call x109 "push" [|(Ojs.float_to_js x111)|])
                       | None -> ());
                      List.iter
                        (fun (x110 : any) ->
                           ignore (Ojs.call x109 "push" [|(any_to_js x110)|]))
                        x108;
                      x109))|])
module SetTimeout =
  struct
    let (__promisify__ : ms:float -> unit Promise.t) =
      fun ~ms:(x115 : float) ->
        Promise.t_of_js Ojs.unit_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "setTimeout")
             "__promisify__" [|(Ojs.float_to_js x115)|])
    let (__promisify__ : ms:float -> value:'T -> 'T Promise.t) =
      fun ~ms:(x117 : float) ->
        fun ~value:(x118 : 'T) ->
          Promise.t_of_js Obj.magic
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "setTimeout")
               "__promisify__" [|(Ojs.float_to_js x117);(Obj.magic x118)|])
  end
let (clearTimeout : timeoutId:_NodeJS_Timeout -> unit) =
  fun ~timeoutId:(x120 : _NodeJS_Timeout) ->
    ignore
      (Ojs.call Ojs.global "clearTimeout" [|(_NodeJS_Timeout_to_js x120)|])
let (setInterval :
  callback:(args:any list -> unit) ->
    ?ms:float -> args:any list -> _NodeJS_Timeout)
  =
  fun ~callback:(x121 : args:any list -> unit) ->
    fun ?ms:(x122 : float option) ->
      fun ~args:(x123 : any list) ->
        _NodeJS_Timeout_of_js
          (let x129 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x129 "setInterval") "apply"
             [|x129;((let x124 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x124 "push"
                           [|(Ojs.fun_to_js_args
                                (fun (x127 : _) ->
                                   x121
                                     ~args:(Ojs.list_of_js_from any_of_js
                                              x127 0)))|]);
                      (match x122 with
                       | Some x126 ->
                           ignore
                             (Ojs.call x124 "push" [|(Ojs.float_to_js x126)|])
                       | None -> ());
                      List.iter
                        (fun (x125 : any) ->
                           ignore (Ojs.call x124 "push" [|(any_to_js x125)|]))
                        x123;
                      x124))|])
let (clearInterval : intervalId:_NodeJS_Timeout -> unit) =
  fun ~intervalId:(x130 : _NodeJS_Timeout) ->
    ignore
      (Ojs.call Ojs.global "clearInterval" [|(_NodeJS_Timeout_to_js x130)|])
let (setImmediate :
  callback:(args:any list -> unit) -> args:any list -> _NodeJS_Immediate) =
  fun ~callback:(x131 : args:any list -> unit) ->
    fun ~args:(x132 : any list) ->
      _NodeJS_Immediate_of_js
        (let x137 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x137 "setImmediate") "apply"
           [|x137;((let x133 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x133 "push"
                         [|(Ojs.fun_to_js_args
                              (fun (x135 : _) ->
                                 x131
                                   ~args:(Ojs.list_of_js_from any_of_js x135
                                            0)))|]);
                    List.iter
                      (fun (x134 : any) ->
                         ignore (Ojs.call x133 "push" [|(any_to_js x134)|]))
                      x132;
                    x133))|])
module SetImmediate =
  struct
    let (__promisify__ : unit -> unit Promise.t) =
      fun () ->
        Promise.t_of_js Ojs.unit_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "setImmediate")
             "__promisify__" [||])
    let (__promisify__ : value:'T -> 'T Promise.t) =
      fun ~value:(x139 : 'T) ->
        Promise.t_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "setImmediate")
             "__promisify__" [|(Obj.magic x139)|])
  end
let (clearImmediate : immediateId:_NodeJS_Immediate -> unit) =
  fun ~immediateId:(x141 : _NodeJS_Immediate) ->
    ignore
      (Ojs.call Ojs.global "clearImmediate"
         [|(_NodeJS_Immediate_to_js x141)|])
let (queueMicrotask : callback:(unit -> unit) -> unit) =
  fun ~callback:(x142 : unit -> unit) ->
    ignore
      (Ojs.call Ojs.global "queueMicrotask"
         [|(Ojs.fun_to_js 1 (fun _ -> x142 ()))|])
let (require : _NodeRequire) =
  _NodeRequire_of_js (Ojs.get_prop_ascii Ojs.global "require")
let (module_ : _NodeModule) =
  _NodeModule_of_js (Ojs.get_prop_ascii Ojs.global "module")
let (exports : any) = any_of_js (Ojs.get_prop_ascii Ojs.global "exports")
module BufferEncoding =
  struct
    type t = _BufferEncoding
    let rec t_of_js : Ojs.t -> t =
      fun (x144 : Ojs.t) -> _BufferEncoding_of_js x144
    and t_to_js : t -> Ojs.t =
      fun (x143 : _BufferEncoding) -> _BufferEncoding_to_js x143
  end
module WithImplicitCoercion =
  struct
    type 'T t = 'T _WithImplicitCoercion
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x147 : Ojs.t) -> _WithImplicitCoercion_of_js __T_of_js x147
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x145 : __T _WithImplicitCoercion) ->
          _WithImplicitCoercion_to_js __T_to_js x145
  end
module Buffer =
  struct
    type t = _Buffer
    let rec t_of_js : Ojs.t -> t = fun (x150 : Ojs.t) -> _Buffer_of_js x150
    and t_to_js : t -> Ojs.t = fun (x149 : _Buffer) -> _Buffer_to_js x149
    let (create : str:string -> ?encoding:_BufferEncoding -> unit -> t) =
      fun ~str:(x151 : string) ->
        fun ?encoding:(x152 : _BufferEncoding option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Buffer")
                 (let x153 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x153 "push" [|(Ojs.string_to_js x151)|]);
                  (match x152 with
                   | Some x154 ->
                       ignore
                         (Ojs.call x153 "push"
                            [|(_BufferEncoding_to_js x154)|])
                   | None -> ());
                  x153))
    let (create' : size:float -> t) =
      fun ~size:(x155 : float) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(Ojs.float_to_js x155)|])
    let (create'' : array:Uint8Array.t -> t) =
      fun ~array:(x156 : Uint8Array.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(Uint8Array.t_to_js x156)|])
    let (create''' :
      arrayBuffer:(ArrayBuffer.t, SharedArrayBuffer.t) union2 -> t) =
      fun ~arrayBuffer:(x157 : (ArrayBuffer.t, SharedArrayBuffer.t) union2)
        ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(union2_to_js ArrayBuffer.t_to_js SharedArrayBuffer.t_to_js
                  x157)|])
    let (create'''' : array:any list -> t) =
      fun ~array:(x160 : any list) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(Ojs.list_to_js any_to_js x160)|])
    let (create''''' : buffer:t -> t) =
      fun ~buffer:(x162 : t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(t_to_js x162)|])
    let (from :
      arrayBuffer:(ArrayBuffer.t, SharedArrayBuffer.t) union2
        _WithImplicitCoercion ->
        ?byteOffset:float -> ?length:float -> unit -> t)
      =
      fun
        ~arrayBuffer:(x163 :
                       (ArrayBuffer.t, SharedArrayBuffer.t) union2
                         _WithImplicitCoercion)
        ->
        fun ?byteOffset:(x164 : float option) ->
          fun ?length:(x165 : float option) ->
            fun () ->
              t_of_js
                (let x172 = Ojs.get_prop_ascii Ojs.global "Buffer" in
                 Ojs.call (Ojs.get_prop_ascii x172 "from") "apply"
                   [|x172;((let x166 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x166 "push"
                                 [|(_WithImplicitCoercion_to_js
                                      (fun
                                         (x169 :
                                           (ArrayBuffer.t,
                                             SharedArrayBuffer.t) union2)
                                         ->
                                         union2_to_js ArrayBuffer.t_to_js
                                           SharedArrayBuffer.t_to_js x169)
                                      x163)|]);
                            (match x164 with
                             | Some x168 ->
                                 ignore
                                   (Ojs.call x166 "push"
                                      [|(Ojs.float_to_js x168)|])
                             | None -> ());
                            (match x165 with
                             | Some x167 ->
                                 ignore
                                   (Ojs.call x166 "push"
                                      [|(Ojs.float_to_js x167)|])
                             | None -> ());
                            x166))|])
    let (from' : data:(Uint8Array.t, float list) union2 -> t) =
      fun ~data:(x173 : (Uint8Array.t, float list) union2) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "from"
             [|(union2_to_js Uint8Array.t_to_js
                  (fun (x175 : float list) ->
                     Ojs.list_to_js Ojs.float_to_js x175) x173)|])
    let (from'' :
      data:(Uint8Array.t, float list) union2 or_string _WithImplicitCoercion
        -> t)
      =
      fun
        ~data:(x177 :
                (Uint8Array.t, float list) union2 or_string
                  _WithImplicitCoercion)
        ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "from"
             [|(_WithImplicitCoercion_to_js
                  (fun (x178 : (Uint8Array.t, float list) union2 or_string)
                     ->
                     or_string_to_js
                       (fun (x179 : (Uint8Array.t, float list) union2) ->
                          union2_to_js Uint8Array.t_to_js
                            (fun (x181 : float list) ->
                               Ojs.list_to_js Ojs.float_to_js x181) x179)
                       x178) x177)|])
    let (of_ : float list -> t) =
      fun (x183 : float list) ->
        t_of_js
          (let x186 = Ojs.get_prop_ascii Ojs.global "Buffer" in
           Ojs.call (Ojs.get_prop_ascii x186 "of") "apply"
             [|x186;((let x184 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      List.iter
                        (fun (x185 : float) ->
                           ignore
                             (Ojs.call x184 "push" [|(Ojs.float_to_js x185)|]))
                        x183;
                      x184))|])
    let (isBuffer : obj:any -> bool) =
      fun ~obj:(x187 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "isBuffer"
             [|(any_to_js x187)|])
    let (isEncoding : encoding:string -> bool) =
      fun ~encoding:(x188 : string) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "isEncoding"
             [|(Ojs.string_to_js x188)|])
    let (byteLength :
      string:(ArrayBuffer.t, _NodeJS_ArrayBufferView, SharedArrayBuffer.t)
        union3 or_string -> ?encoding:_BufferEncoding -> unit -> float)
      =
      fun
        ~string:(x189 :
                  (ArrayBuffer.t, _NodeJS_ArrayBufferView,
                    SharedArrayBuffer.t) union3 or_string)
        ->
        fun ?encoding:(x190 : _BufferEncoding option) ->
          fun () ->
            Ojs.float_of_js
              (let x197 = Ojs.get_prop_ascii Ojs.global "Buffer" in
               Ojs.call (Ojs.get_prop_ascii x197 "byteLength") "apply"
                 [|x197;((let x191 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x191 "push"
                               [|(or_string_to_js
                                    (fun
                                       (x193 :
                                         (ArrayBuffer.t,
                                           _NodeJS_ArrayBufferView,
                                           SharedArrayBuffer.t) union3)
                                       ->
                                       union3_to_js ArrayBuffer.t_to_js
                                         _NodeJS_ArrayBufferView_to_js
                                         SharedArrayBuffer.t_to_js x193) x189)|]);
                          (match x190 with
                           | Some x192 ->
                               ignore
                                 (Ojs.call x191 "push"
                                    [|(_BufferEncoding_to_js x192)|])
                           | None -> ());
                          x191))|])
    let (concat : list:Uint8Array.t list -> ?totalLength:float -> unit -> t)
      =
      fun ~list:(x198 : Uint8Array.t list) ->
        fun ?totalLength:(x199 : float option) ->
          fun () ->
            t_of_js
              (let x203 = Ojs.get_prop_ascii Ojs.global "Buffer" in
               Ojs.call (Ojs.get_prop_ascii x203 "concat") "apply"
                 [|x203;((let x200 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x200 "push"
                               [|(Ojs.list_to_js Uint8Array.t_to_js x198)|]);
                          (match x199 with
                           | Some x201 ->
                               ignore
                                 (Ojs.call x200 "push"
                                    [|(Ojs.float_to_js x201)|])
                           | None -> ());
                          x200))|])
    let (compare : buf1:Uint8Array.t -> buf2:Uint8Array.t -> float) =
      fun ~buf1:(x204 : Uint8Array.t) ->
        fun ~buf2:(x205 : Uint8Array.t) ->
          Ojs.float_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "compare"
               [|(Uint8Array.t_to_js x204);(Uint8Array.t_to_js x205)|])
    let (alloc :
      size:float ->
        ?fill:t or_string or_number -> ?encoding:_BufferEncoding -> unit -> t)
      =
      fun ~size:(x206 : float) ->
        fun ?fill:(x207 : t or_string or_number option) ->
          fun ?encoding:(x208 : _BufferEncoding option) ->
            fun () ->
              t_of_js
                (let x214 = Ojs.get_prop_ascii Ojs.global "Buffer" in
                 Ojs.call (Ojs.get_prop_ascii x214 "alloc") "apply"
                   [|x214;((let x209 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x209 "push"
                                 [|(Ojs.float_to_js x206)|]);
                            (match x207 with
                             | Some x211 ->
                                 ignore
                                   (Ojs.call x209 "push"
                                      [|(or_number_to_js
                                           (fun (x212 : t or_string) ->
                                              or_string_to_js t_to_js x212)
                                           x211)|])
                             | None -> ());
                            (match x208 with
                             | Some x210 ->
                                 ignore
                                   (Ojs.call x209 "push"
                                      [|(_BufferEncoding_to_js x210)|])
                             | None -> ());
                            x209))|])
    let (allocUnsafe : size:float -> t) =
      fun ~size:(x215 : float) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "allocUnsafe"
             [|(Ojs.float_to_js x215)|])
    let (allocUnsafeSlow : size:float -> t) =
      fun ~size:(x216 : float) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer")
             "allocUnsafeSlow" [|(Ojs.float_to_js x216)|])
    let (get_poolSize : unit -> float) =
      fun () ->
        Ojs.float_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Buffer")
             "poolSize")
    let (set_poolSize : float -> unit) =
      fun (x217 : float) ->
        Ojs.set_prop_ascii (Ojs.get_prop_ascii Ojs.global "Buffer")
          "poolSize" (Ojs.float_to_js x217)
    let (write :
      t -> string:string -> ?encoding:_BufferEncoding -> unit -> float) =
      fun (x222 : t) ->
        fun ~string:(x218 : string) ->
          fun ?encoding:(x219 : _BufferEncoding option) ->
            fun () ->
              Ojs.float_of_js
                (let x223 = t_to_js x222 in
                 Ojs.call (Ojs.get_prop_ascii x223 "write") "apply"
                   [|x223;((let x220 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x220 "push"
                                 [|(Ojs.string_to_js x218)|]);
                            (match x219 with
                             | Some x221 ->
                                 ignore
                                   (Ojs.call x220 "push"
                                      [|(_BufferEncoding_to_js x221)|])
                             | None -> ());
                            x220))|])
    let (write' :
      t ->
        string:string ->
          offset:float -> ?encoding:_BufferEncoding -> unit -> float)
      =
      fun (x229 : t) ->
        fun ~string:(x224 : string) ->
          fun ~offset:(x225 : float) ->
            fun ?encoding:(x226 : _BufferEncoding option) ->
              fun () ->
                Ojs.float_of_js
                  (let x230 = t_to_js x229 in
                   Ojs.call (Ojs.get_prop_ascii x230 "write") "apply"
                     [|x230;((let x227 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x227 "push"
                                   [|(Ojs.string_to_js x224)|]);
                              ignore
                                (Ojs.call x227 "push"
                                   [|(Ojs.float_to_js x225)|]);
                              (match x226 with
                               | Some x228 ->
                                   ignore
                                     (Ojs.call x227 "push"
                                        [|(_BufferEncoding_to_js x228)|])
                               | None -> ());
                              x227))|])
    let (write'' :
      t ->
        string:string ->
          offset:float ->
            length:float -> ?encoding:_BufferEncoding -> unit -> float)
      =
      fun (x237 : t) ->
        fun ~string:(x231 : string) ->
          fun ~offset:(x232 : float) ->
            fun ~length:(x233 : float) ->
              fun ?encoding:(x234 : _BufferEncoding option) ->
                fun () ->
                  Ojs.float_of_js
                    (let x238 = t_to_js x237 in
                     Ojs.call (Ojs.get_prop_ascii x238 "write") "apply"
                       [|x238;((let x235 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x235 "push"
                                     [|(Ojs.string_to_js x231)|]);
                                ignore
                                  (Ojs.call x235 "push"
                                     [|(Ojs.float_to_js x232)|]);
                                ignore
                                  (Ojs.call x235 "push"
                                     [|(Ojs.float_to_js x233)|]);
                                (match x234 with
                                 | Some x236 ->
                                     ignore
                                       (Ojs.call x235 "push"
                                          [|(_BufferEncoding_to_js x236)|])
                                 | None -> ());
                                x235))|])
    let (toString :
      t ->
        ?encoding:_BufferEncoding ->
          ?start:float -> ?end_:float -> unit -> string)
      =
      fun (x246 : t) ->
        fun ?encoding:(x239 : _BufferEncoding option) ->
          fun ?start:(x240 : float option) ->
            fun ?end_:(x241 : float option) ->
              fun () ->
                Ojs.string_of_js
                  (let x247 = t_to_js x246 in
                   Ojs.call (Ojs.get_prop_ascii x247 "toString") "apply"
                     [|x247;((let x242 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x239 with
                               | Some x245 ->
                                   ignore
                                     (Ojs.call x242 "push"
                                        [|(_BufferEncoding_to_js x245)|])
                               | None -> ());
                              (match x240 with
                               | Some x244 ->
                                   ignore
                                     (Ojs.call x242 "push"
                                        [|(Ojs.float_to_js x244)|])
                               | None -> ());
                              (match x241 with
                               | Some x243 ->
                                   ignore
                                     (Ojs.call x242 "push"
                                        [|(Ojs.float_to_js x243)|])
                               | None -> ());
                              x242))|])
    let (toJSON : t -> anonymous_interface_2) =
      fun (x248 : t) ->
        anonymous_interface_2_of_js (Ojs.call (t_to_js x248) "toJSON" [||])
    let (equals : t -> otherBuffer:Uint8Array.t -> bool) =
      fun (x250 : t) ->
        fun ~otherBuffer:(x249 : Uint8Array.t) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x250) "equals" [|(Uint8Array.t_to_js x249)|])
    let (compare' :
      t ->
        otherBuffer:Uint8Array.t ->
          ?targetStart:float ->
            ?targetEnd:float ->
              ?sourceStart:float -> ?sourceEnd:float -> unit -> float)
      =
      fun (x261 : t) ->
        fun ~otherBuffer:(x251 : Uint8Array.t) ->
          fun ?targetStart:(x252 : float option) ->
            fun ?targetEnd:(x253 : float option) ->
              fun ?sourceStart:(x254 : float option) ->
                fun ?sourceEnd:(x255 : float option) ->
                  fun () ->
                    Ojs.float_of_js
                      (let x262 = t_to_js x261 in
                       Ojs.call (Ojs.get_prop_ascii x262 "compare") "apply"
                         [|x262;((let x256 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x256 "push"
                                       [|(Uint8Array.t_to_js x251)|]);
                                  (match x252 with
                                   | Some x260 ->
                                       ignore
                                         (Ojs.call x256 "push"
                                            [|(Ojs.float_to_js x260)|])
                                   | None -> ());
                                  (match x253 with
                                   | Some x259 ->
                                       ignore
                                         (Ojs.call x256 "push"
                                            [|(Ojs.float_to_js x259)|])
                                   | None -> ());
                                  (match x254 with
                                   | Some x258 ->
                                       ignore
                                         (Ojs.call x256 "push"
                                            [|(Ojs.float_to_js x258)|])
                                   | None -> ());
                                  (match x255 with
                                   | Some x257 ->
                                       ignore
                                         (Ojs.call x256 "push"
                                            [|(Ojs.float_to_js x257)|])
                                   | None -> ());
                                  x256))|])
    let (copy :
      t ->
        targetBuffer:Uint8Array.t ->
          ?targetStart:float ->
            ?sourceStart:float -> ?sourceEnd:float -> unit -> float)
      =
      fun (x271 : t) ->
        fun ~targetBuffer:(x263 : Uint8Array.t) ->
          fun ?targetStart:(x264 : float option) ->
            fun ?sourceStart:(x265 : float option) ->
              fun ?sourceEnd:(x266 : float option) ->
                fun () ->
                  Ojs.float_of_js
                    (let x272 = t_to_js x271 in
                     Ojs.call (Ojs.get_prop_ascii x272 "copy") "apply"
                       [|x272;((let x267 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x267 "push"
                                     [|(Uint8Array.t_to_js x263)|]);
                                (match x264 with
                                 | Some x270 ->
                                     ignore
                                       (Ojs.call x267 "push"
                                          [|(Ojs.float_to_js x270)|])
                                 | None -> ());
                                (match x265 with
                                 | Some x269 ->
                                     ignore
                                       (Ojs.call x267 "push"
                                          [|(Ojs.float_to_js x269)|])
                                 | None -> ());
                                (match x266 with
                                 | Some x268 ->
                                     ignore
                                       (Ojs.call x267 "push"
                                          [|(Ojs.float_to_js x268)|])
                                 | None -> ());
                                x267))|])
    let (slice : t -> ?begin_:float -> ?end_:float -> unit -> t) =
      fun (x278 : t) ->
        fun ?begin_:(x273 : float option) ->
          fun ?end_:(x274 : float option) ->
            fun () ->
              t_of_js
                (let x279 = t_to_js x278 in
                 Ojs.call (Ojs.get_prop_ascii x279 "slice") "apply"
                   [|x279;((let x275 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x273 with
                             | Some x277 ->
                                 ignore
                                   (Ojs.call x275 "push"
                                      [|(Ojs.float_to_js x277)|])
                             | None -> ());
                            (match x274 with
                             | Some x276 ->
                                 ignore
                                   (Ojs.call x275 "push"
                                      [|(Ojs.float_to_js x276)|])
                             | None -> ());
                            x275))|])
    let (subarray : t -> ?begin_:float -> ?end_:float -> unit -> t) =
      fun (x285 : t) ->
        fun ?begin_:(x280 : float option) ->
          fun ?end_:(x281 : float option) ->
            fun () ->
              t_of_js
                (let x286 = t_to_js x285 in
                 Ojs.call (Ojs.get_prop_ascii x286 "subarray") "apply"
                   [|x286;((let x282 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x280 with
                             | Some x284 ->
                                 ignore
                                   (Ojs.call x282 "push"
                                      [|(Ojs.float_to_js x284)|])
                             | None -> ());
                            (match x281 with
                             | Some x283 ->
                                 ignore
                                   (Ojs.call x282 "push"
                                      [|(Ojs.float_to_js x283)|])
                             | None -> ());
                            x282))|])
    let (writeBigInt64BE : t -> bigint -> ?offset:float -> unit -> float) =
      fun (x291 : t) ->
        fun (x287 : bigint) ->
          fun ?offset:(x288 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x292 = t_to_js x291 in
                 Ojs.call (Ojs.get_prop_ascii x292 "writeBigInt64BE") "apply"
                   [|x292;((let x289 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x289 "push" [|(bigint_to_js x287)|]);
                            (match x288 with
                             | Some x290 ->
                                 ignore
                                   (Ojs.call x289 "push"
                                      [|(Ojs.float_to_js x290)|])
                             | None -> ());
                            x289))|])
    let (writeBigInt64LE : t -> bigint -> ?offset:float -> unit -> float) =
      fun (x297 : t) ->
        fun (x293 : bigint) ->
          fun ?offset:(x294 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x298 = t_to_js x297 in
                 Ojs.call (Ojs.get_prop_ascii x298 "writeBigInt64LE") "apply"
                   [|x298;((let x295 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x295 "push" [|(bigint_to_js x293)|]);
                            (match x294 with
                             | Some x296 ->
                                 ignore
                                   (Ojs.call x295 "push"
                                      [|(Ojs.float_to_js x296)|])
                             | None -> ());
                            x295))|])
    let (writeBigUInt64BE : t -> bigint -> ?offset:float -> unit -> float) =
      fun (x303 : t) ->
        fun (x299 : bigint) ->
          fun ?offset:(x300 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x304 = t_to_js x303 in
                 Ojs.call (Ojs.get_prop_ascii x304 "writeBigUInt64BE")
                   "apply"
                   [|x304;((let x301 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x301 "push" [|(bigint_to_js x299)|]);
                            (match x300 with
                             | Some x302 ->
                                 ignore
                                   (Ojs.call x301 "push"
                                      [|(Ojs.float_to_js x302)|])
                             | None -> ());
                            x301))|])
    let (writeBigUInt64LE : t -> bigint -> ?offset:float -> unit -> float) =
      fun (x309 : t) ->
        fun (x305 : bigint) ->
          fun ?offset:(x306 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x310 = t_to_js x309 in
                 Ojs.call (Ojs.get_prop_ascii x310 "writeBigUInt64LE")
                   "apply"
                   [|x310;((let x307 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x307 "push" [|(bigint_to_js x305)|]);
                            (match x306 with
                             | Some x308 ->
                                 ignore
                                   (Ojs.call x307 "push"
                                      [|(Ojs.float_to_js x308)|])
                             | None -> ());
                            x307))|])
    let (writeUIntLE :
      t -> value:float -> offset:float -> byteLength:float -> float) =
      fun (x314 : t) ->
        fun ~value:(x311 : float) ->
          fun ~offset:(x312 : float) ->
            fun ~byteLength:(x313 : float) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x314) "writeUIntLE"
                   [|(Ojs.float_to_js x311);(Ojs.float_to_js x312);(Ojs.float_to_js
                                                                    x313)|])
    let (writeUIntBE :
      t -> value:float -> offset:float -> byteLength:float -> float) =
      fun (x318 : t) ->
        fun ~value:(x315 : float) ->
          fun ~offset:(x316 : float) ->
            fun ~byteLength:(x317 : float) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x318) "writeUIntBE"
                   [|(Ojs.float_to_js x315);(Ojs.float_to_js x316);(Ojs.float_to_js
                                                                    x317)|])
    let (writeIntLE :
      t -> value:float -> offset:float -> byteLength:float -> float) =
      fun (x322 : t) ->
        fun ~value:(x319 : float) ->
          fun ~offset:(x320 : float) ->
            fun ~byteLength:(x321 : float) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x322) "writeIntLE"
                   [|(Ojs.float_to_js x319);(Ojs.float_to_js x320);(Ojs.float_to_js
                                                                    x321)|])
    let (writeIntBE :
      t -> value:float -> offset:float -> byteLength:float -> float) =
      fun (x326 : t) ->
        fun ~value:(x323 : float) ->
          fun ~offset:(x324 : float) ->
            fun ~byteLength:(x325 : float) ->
              Ojs.float_of_js
                (Ojs.call (t_to_js x326) "writeIntBE"
                   [|(Ojs.float_to_js x323);(Ojs.float_to_js x324);(Ojs.float_to_js
                                                                    x325)|])
    let (readBigUInt64BE : t -> ?offset:float -> unit -> bigint) =
      fun (x330 : t) ->
        fun ?offset:(x327 : float option) ->
          fun () ->
            bigint_of_js
              (let x331 = t_to_js x330 in
               Ojs.call (Ojs.get_prop_ascii x331 "readBigUInt64BE") "apply"
                 [|x331;((let x328 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x327 with
                           | Some x329 ->
                               ignore
                                 (Ojs.call x328 "push"
                                    [|(Ojs.float_to_js x329)|])
                           | None -> ());
                          x328))|])
    let (readBigUInt64LE : t -> ?offset:float -> unit -> bigint) =
      fun (x335 : t) ->
        fun ?offset:(x332 : float option) ->
          fun () ->
            bigint_of_js
              (let x336 = t_to_js x335 in
               Ojs.call (Ojs.get_prop_ascii x336 "readBigUInt64LE") "apply"
                 [|x336;((let x333 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x332 with
                           | Some x334 ->
                               ignore
                                 (Ojs.call x333 "push"
                                    [|(Ojs.float_to_js x334)|])
                           | None -> ());
                          x333))|])
    let (readBigInt64BE : t -> ?offset:float -> unit -> bigint) =
      fun (x340 : t) ->
        fun ?offset:(x337 : float option) ->
          fun () ->
            bigint_of_js
              (let x341 = t_to_js x340 in
               Ojs.call (Ojs.get_prop_ascii x341 "readBigInt64BE") "apply"
                 [|x341;((let x338 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x337 with
                           | Some x339 ->
                               ignore
                                 (Ojs.call x338 "push"
                                    [|(Ojs.float_to_js x339)|])
                           | None -> ());
                          x338))|])
    let (readBigInt64LE : t -> ?offset:float -> unit -> bigint) =
      fun (x345 : t) ->
        fun ?offset:(x342 : float option) ->
          fun () ->
            bigint_of_js
              (let x346 = t_to_js x345 in
               Ojs.call (Ojs.get_prop_ascii x346 "readBigInt64LE") "apply"
                 [|x346;((let x343 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x342 with
                           | Some x344 ->
                               ignore
                                 (Ojs.call x343 "push"
                                    [|(Ojs.float_to_js x344)|])
                           | None -> ());
                          x343))|])
    let (readUIntLE : t -> offset:float -> byteLength:float -> float) =
      fun (x349 : t) ->
        fun ~offset:(x347 : float) ->
          fun ~byteLength:(x348 : float) ->
            Ojs.float_of_js
              (Ojs.call (t_to_js x349) "readUIntLE"
                 [|(Ojs.float_to_js x347);(Ojs.float_to_js x348)|])
    let (readUIntBE : t -> offset:float -> byteLength:float -> float) =
      fun (x352 : t) ->
        fun ~offset:(x350 : float) ->
          fun ~byteLength:(x351 : float) ->
            Ojs.float_of_js
              (Ojs.call (t_to_js x352) "readUIntBE"
                 [|(Ojs.float_to_js x350);(Ojs.float_to_js x351)|])
    let (readIntLE : t -> offset:float -> byteLength:float -> float) =
      fun (x355 : t) ->
        fun ~offset:(x353 : float) ->
          fun ~byteLength:(x354 : float) ->
            Ojs.float_of_js
              (Ojs.call (t_to_js x355) "readIntLE"
                 [|(Ojs.float_to_js x353);(Ojs.float_to_js x354)|])
    let (readIntBE : t -> offset:float -> byteLength:float -> float) =
      fun (x358 : t) ->
        fun ~offset:(x356 : float) ->
          fun ~byteLength:(x357 : float) ->
            Ojs.float_of_js
              (Ojs.call (t_to_js x358) "readIntBE"
                 [|(Ojs.float_to_js x356);(Ojs.float_to_js x357)|])
    let (readUInt8 : t -> ?offset:float -> unit -> float) =
      fun (x362 : t) ->
        fun ?offset:(x359 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x363 = t_to_js x362 in
               Ojs.call (Ojs.get_prop_ascii x363 "readUInt8") "apply"
                 [|x363;((let x360 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x359 with
                           | Some x361 ->
                               ignore
                                 (Ojs.call x360 "push"
                                    [|(Ojs.float_to_js x361)|])
                           | None -> ());
                          x360))|])
    let (readUInt16LE : t -> ?offset:float -> unit -> float) =
      fun (x367 : t) ->
        fun ?offset:(x364 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x368 = t_to_js x367 in
               Ojs.call (Ojs.get_prop_ascii x368 "readUInt16LE") "apply"
                 [|x368;((let x365 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x364 with
                           | Some x366 ->
                               ignore
                                 (Ojs.call x365 "push"
                                    [|(Ojs.float_to_js x366)|])
                           | None -> ());
                          x365))|])
    let (readUInt16BE : t -> ?offset:float -> unit -> float) =
      fun (x372 : t) ->
        fun ?offset:(x369 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x373 = t_to_js x372 in
               Ojs.call (Ojs.get_prop_ascii x373 "readUInt16BE") "apply"
                 [|x373;((let x370 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x369 with
                           | Some x371 ->
                               ignore
                                 (Ojs.call x370 "push"
                                    [|(Ojs.float_to_js x371)|])
                           | None -> ());
                          x370))|])
    let (readUInt32LE : t -> ?offset:float -> unit -> float) =
      fun (x377 : t) ->
        fun ?offset:(x374 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x378 = t_to_js x377 in
               Ojs.call (Ojs.get_prop_ascii x378 "readUInt32LE") "apply"
                 [|x378;((let x375 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x374 with
                           | Some x376 ->
                               ignore
                                 (Ojs.call x375 "push"
                                    [|(Ojs.float_to_js x376)|])
                           | None -> ());
                          x375))|])
    let (readUInt32BE : t -> ?offset:float -> unit -> float) =
      fun (x382 : t) ->
        fun ?offset:(x379 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x383 = t_to_js x382 in
               Ojs.call (Ojs.get_prop_ascii x383 "readUInt32BE") "apply"
                 [|x383;((let x380 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x379 with
                           | Some x381 ->
                               ignore
                                 (Ojs.call x380 "push"
                                    [|(Ojs.float_to_js x381)|])
                           | None -> ());
                          x380))|])
    let (readInt8 : t -> ?offset:float -> unit -> float) =
      fun (x387 : t) ->
        fun ?offset:(x384 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x388 = t_to_js x387 in
               Ojs.call (Ojs.get_prop_ascii x388 "readInt8") "apply"
                 [|x388;((let x385 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x384 with
                           | Some x386 ->
                               ignore
                                 (Ojs.call x385 "push"
                                    [|(Ojs.float_to_js x386)|])
                           | None -> ());
                          x385))|])
    let (readInt16LE : t -> ?offset:float -> unit -> float) =
      fun (x392 : t) ->
        fun ?offset:(x389 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x393 = t_to_js x392 in
               Ojs.call (Ojs.get_prop_ascii x393 "readInt16LE") "apply"
                 [|x393;((let x390 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x389 with
                           | Some x391 ->
                               ignore
                                 (Ojs.call x390 "push"
                                    [|(Ojs.float_to_js x391)|])
                           | None -> ());
                          x390))|])
    let (readInt16BE : t -> ?offset:float -> unit -> float) =
      fun (x397 : t) ->
        fun ?offset:(x394 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x398 = t_to_js x397 in
               Ojs.call (Ojs.get_prop_ascii x398 "readInt16BE") "apply"
                 [|x398;((let x395 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x394 with
                           | Some x396 ->
                               ignore
                                 (Ojs.call x395 "push"
                                    [|(Ojs.float_to_js x396)|])
                           | None -> ());
                          x395))|])
    let (readInt32LE : t -> ?offset:float -> unit -> float) =
      fun (x402 : t) ->
        fun ?offset:(x399 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x403 = t_to_js x402 in
               Ojs.call (Ojs.get_prop_ascii x403 "readInt32LE") "apply"
                 [|x403;((let x400 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x399 with
                           | Some x401 ->
                               ignore
                                 (Ojs.call x400 "push"
                                    [|(Ojs.float_to_js x401)|])
                           | None -> ());
                          x400))|])
    let (readInt32BE : t -> ?offset:float -> unit -> float) =
      fun (x407 : t) ->
        fun ?offset:(x404 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x408 = t_to_js x407 in
               Ojs.call (Ojs.get_prop_ascii x408 "readInt32BE") "apply"
                 [|x408;((let x405 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x404 with
                           | Some x406 ->
                               ignore
                                 (Ojs.call x405 "push"
                                    [|(Ojs.float_to_js x406)|])
                           | None -> ());
                          x405))|])
    let (readFloatLE : t -> ?offset:float -> unit -> float) =
      fun (x412 : t) ->
        fun ?offset:(x409 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x413 = t_to_js x412 in
               Ojs.call (Ojs.get_prop_ascii x413 "readFloatLE") "apply"
                 [|x413;((let x410 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x409 with
                           | Some x411 ->
                               ignore
                                 (Ojs.call x410 "push"
                                    [|(Ojs.float_to_js x411)|])
                           | None -> ());
                          x410))|])
    let (readFloatBE : t -> ?offset:float -> unit -> float) =
      fun (x417 : t) ->
        fun ?offset:(x414 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x418 = t_to_js x417 in
               Ojs.call (Ojs.get_prop_ascii x418 "readFloatBE") "apply"
                 [|x418;((let x415 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x414 with
                           | Some x416 ->
                               ignore
                                 (Ojs.call x415 "push"
                                    [|(Ojs.float_to_js x416)|])
                           | None -> ());
                          x415))|])
    let (readDoubleLE : t -> ?offset:float -> unit -> float) =
      fun (x422 : t) ->
        fun ?offset:(x419 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x423 = t_to_js x422 in
               Ojs.call (Ojs.get_prop_ascii x423 "readDoubleLE") "apply"
                 [|x423;((let x420 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x419 with
                           | Some x421 ->
                               ignore
                                 (Ojs.call x420 "push"
                                    [|(Ojs.float_to_js x421)|])
                           | None -> ());
                          x420))|])
    let (readDoubleBE : t -> ?offset:float -> unit -> float) =
      fun (x427 : t) ->
        fun ?offset:(x424 : float option) ->
          fun () ->
            Ojs.float_of_js
              (let x428 = t_to_js x427 in
               Ojs.call (Ojs.get_prop_ascii x428 "readDoubleBE") "apply"
                 [|x428;((let x425 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x424 with
                           | Some x426 ->
                               ignore
                                 (Ojs.call x425 "push"
                                    [|(Ojs.float_to_js x426)|])
                           | None -> ());
                          x425))|])
    let (reverse : t -> t) =
      fun (x429 : t) -> t_of_js (Ojs.call (t_to_js x429) "reverse" [||])
    let (swap16 : t -> t) =
      fun (x430 : t) -> t_of_js (Ojs.call (t_to_js x430) "swap16" [||])
    let (swap32 : t -> t) =
      fun (x431 : t) -> t_of_js (Ojs.call (t_to_js x431) "swap32" [||])
    let (swap64 : t -> t) =
      fun (x432 : t) -> t_of_js (Ojs.call (t_to_js x432) "swap64" [||])
    let (writeUInt8 : t -> float -> ?offset:float -> unit -> float) =
      fun (x437 : t) ->
        fun (x433 : float) ->
          fun ?offset:(x434 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x438 = t_to_js x437 in
                 Ojs.call (Ojs.get_prop_ascii x438 "writeUInt8") "apply"
                   [|x438;((let x435 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x435 "push"
                                 [|(Ojs.float_to_js x433)|]);
                            (match x434 with
                             | Some x436 ->
                                 ignore
                                   (Ojs.call x435 "push"
                                      [|(Ojs.float_to_js x436)|])
                             | None -> ());
                            x435))|])
    let (writeUInt16LE : t -> float -> ?offset:float -> unit -> float) =
      fun (x443 : t) ->
        fun (x439 : float) ->
          fun ?offset:(x440 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x444 = t_to_js x443 in
                 Ojs.call (Ojs.get_prop_ascii x444 "writeUInt16LE") "apply"
                   [|x444;((let x441 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x441 "push"
                                 [|(Ojs.float_to_js x439)|]);
                            (match x440 with
                             | Some x442 ->
                                 ignore
                                   (Ojs.call x441 "push"
                                      [|(Ojs.float_to_js x442)|])
                             | None -> ());
                            x441))|])
    let (writeUInt16BE : t -> float -> ?offset:float -> unit -> float) =
      fun (x449 : t) ->
        fun (x445 : float) ->
          fun ?offset:(x446 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x450 = t_to_js x449 in
                 Ojs.call (Ojs.get_prop_ascii x450 "writeUInt16BE") "apply"
                   [|x450;((let x447 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x447 "push"
                                 [|(Ojs.float_to_js x445)|]);
                            (match x446 with
                             | Some x448 ->
                                 ignore
                                   (Ojs.call x447 "push"
                                      [|(Ojs.float_to_js x448)|])
                             | None -> ());
                            x447))|])
    let (writeUInt32LE : t -> float -> ?offset:float -> unit -> float) =
      fun (x455 : t) ->
        fun (x451 : float) ->
          fun ?offset:(x452 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x456 = t_to_js x455 in
                 Ojs.call (Ojs.get_prop_ascii x456 "writeUInt32LE") "apply"
                   [|x456;((let x453 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x453 "push"
                                 [|(Ojs.float_to_js x451)|]);
                            (match x452 with
                             | Some x454 ->
                                 ignore
                                   (Ojs.call x453 "push"
                                      [|(Ojs.float_to_js x454)|])
                             | None -> ());
                            x453))|])
    let (writeUInt32BE : t -> float -> ?offset:float -> unit -> float) =
      fun (x461 : t) ->
        fun (x457 : float) ->
          fun ?offset:(x458 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x462 = t_to_js x461 in
                 Ojs.call (Ojs.get_prop_ascii x462 "writeUInt32BE") "apply"
                   [|x462;((let x459 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x459 "push"
                                 [|(Ojs.float_to_js x457)|]);
                            (match x458 with
                             | Some x460 ->
                                 ignore
                                   (Ojs.call x459 "push"
                                      [|(Ojs.float_to_js x460)|])
                             | None -> ());
                            x459))|])
    let (writeInt8 : t -> float -> ?offset:float -> unit -> float) =
      fun (x467 : t) ->
        fun (x463 : float) ->
          fun ?offset:(x464 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x468 = t_to_js x467 in
                 Ojs.call (Ojs.get_prop_ascii x468 "writeInt8") "apply"
                   [|x468;((let x465 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x465 "push"
                                 [|(Ojs.float_to_js x463)|]);
                            (match x464 with
                             | Some x466 ->
                                 ignore
                                   (Ojs.call x465 "push"
                                      [|(Ojs.float_to_js x466)|])
                             | None -> ());
                            x465))|])
    let (writeInt16LE : t -> float -> ?offset:float -> unit -> float) =
      fun (x473 : t) ->
        fun (x469 : float) ->
          fun ?offset:(x470 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x474 = t_to_js x473 in
                 Ojs.call (Ojs.get_prop_ascii x474 "writeInt16LE") "apply"
                   [|x474;((let x471 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x471 "push"
                                 [|(Ojs.float_to_js x469)|]);
                            (match x470 with
                             | Some x472 ->
                                 ignore
                                   (Ojs.call x471 "push"
                                      [|(Ojs.float_to_js x472)|])
                             | None -> ());
                            x471))|])
    let (writeInt16BE : t -> float -> ?offset:float -> unit -> float) =
      fun (x479 : t) ->
        fun (x475 : float) ->
          fun ?offset:(x476 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x480 = t_to_js x479 in
                 Ojs.call (Ojs.get_prop_ascii x480 "writeInt16BE") "apply"
                   [|x480;((let x477 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x477 "push"
                                 [|(Ojs.float_to_js x475)|]);
                            (match x476 with
                             | Some x478 ->
                                 ignore
                                   (Ojs.call x477 "push"
                                      [|(Ojs.float_to_js x478)|])
                             | None -> ());
                            x477))|])
    let (writeInt32LE : t -> float -> ?offset:float -> unit -> float) =
      fun (x485 : t) ->
        fun (x481 : float) ->
          fun ?offset:(x482 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x486 = t_to_js x485 in
                 Ojs.call (Ojs.get_prop_ascii x486 "writeInt32LE") "apply"
                   [|x486;((let x483 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x483 "push"
                                 [|(Ojs.float_to_js x481)|]);
                            (match x482 with
                             | Some x484 ->
                                 ignore
                                   (Ojs.call x483 "push"
                                      [|(Ojs.float_to_js x484)|])
                             | None -> ());
                            x483))|])
    let (writeInt32BE : t -> float -> ?offset:float -> unit -> float) =
      fun (x491 : t) ->
        fun (x487 : float) ->
          fun ?offset:(x488 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x492 = t_to_js x491 in
                 Ojs.call (Ojs.get_prop_ascii x492 "writeInt32BE") "apply"
                   [|x492;((let x489 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x489 "push"
                                 [|(Ojs.float_to_js x487)|]);
                            (match x488 with
                             | Some x490 ->
                                 ignore
                                   (Ojs.call x489 "push"
                                      [|(Ojs.float_to_js x490)|])
                             | None -> ());
                            x489))|])
    let (writeFloatLE : t -> float -> ?offset:float -> unit -> float) =
      fun (x497 : t) ->
        fun (x493 : float) ->
          fun ?offset:(x494 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x498 = t_to_js x497 in
                 Ojs.call (Ojs.get_prop_ascii x498 "writeFloatLE") "apply"
                   [|x498;((let x495 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x495 "push"
                                 [|(Ojs.float_to_js x493)|]);
                            (match x494 with
                             | Some x496 ->
                                 ignore
                                   (Ojs.call x495 "push"
                                      [|(Ojs.float_to_js x496)|])
                             | None -> ());
                            x495))|])
    let (writeFloatBE : t -> float -> ?offset:float -> unit -> float) =
      fun (x503 : t) ->
        fun (x499 : float) ->
          fun ?offset:(x500 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x504 = t_to_js x503 in
                 Ojs.call (Ojs.get_prop_ascii x504 "writeFloatBE") "apply"
                   [|x504;((let x501 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x501 "push"
                                 [|(Ojs.float_to_js x499)|]);
                            (match x500 with
                             | Some x502 ->
                                 ignore
                                   (Ojs.call x501 "push"
                                      [|(Ojs.float_to_js x502)|])
                             | None -> ());
                            x501))|])
    let (writeDoubleLE : t -> float -> ?offset:float -> unit -> float) =
      fun (x509 : t) ->
        fun (x505 : float) ->
          fun ?offset:(x506 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x510 = t_to_js x509 in
                 Ojs.call (Ojs.get_prop_ascii x510 "writeDoubleLE") "apply"
                   [|x510;((let x507 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x507 "push"
                                 [|(Ojs.float_to_js x505)|]);
                            (match x506 with
                             | Some x508 ->
                                 ignore
                                   (Ojs.call x507 "push"
                                      [|(Ojs.float_to_js x508)|])
                             | None -> ());
                            x507))|])
    let (writeDoubleBE : t -> float -> ?offset:float -> unit -> float) =
      fun (x515 : t) ->
        fun (x511 : float) ->
          fun ?offset:(x512 : float option) ->
            fun () ->
              Ojs.float_of_js
                (let x516 = t_to_js x515 in
                 Ojs.call (Ojs.get_prop_ascii x516 "writeDoubleBE") "apply"
                   [|x516;((let x513 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x513 "push"
                                 [|(Ojs.float_to_js x511)|]);
                            (match x512 with
                             | Some x514 ->
                                 ignore
                                   (Ojs.call x513 "push"
                                      [|(Ojs.float_to_js x514)|])
                             | None -> ());
                            x513))|])
    let (fill :
      t ->
        value:Uint8Array.t or_string or_number ->
          ?offset:float ->
            ?end_:float -> ?encoding:_BufferEncoding -> unit -> t)
      =
      fun (x527 : t) ->
        fun ~value:(x517 : Uint8Array.t or_string or_number) ->
          fun ?offset:(x518 : float option) ->
            fun ?end_:(x519 : float option) ->
              fun ?encoding:(x520 : _BufferEncoding option) ->
                fun () ->
                  t_of_js
                    (let x528 = t_to_js x527 in
                     Ojs.call (Ojs.get_prop_ascii x528 "fill") "apply"
                       [|x528;((let x521 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x521 "push"
                                     [|(or_number_to_js
                                          (fun
                                             (x525 : Uint8Array.t or_string)
                                             ->
                                             or_string_to_js
                                               Uint8Array.t_to_js x525) x517)|]);
                                (match x518 with
                                 | Some x524 ->
                                     ignore
                                       (Ojs.call x521 "push"
                                          [|(Ojs.float_to_js x524)|])
                                 | None -> ());
                                (match x519 with
                                 | Some x523 ->
                                     ignore
                                       (Ojs.call x521 "push"
                                          [|(Ojs.float_to_js x523)|])
                                 | None -> ());
                                (match x520 with
                                 | Some x522 ->
                                     ignore
                                       (Ojs.call x521 "push"
                                          [|(_BufferEncoding_to_js x522)|])
                                 | None -> ());
                                x521))|])
    let (indexOf :
      t ->
        value:Uint8Array.t or_string or_number ->
          ?byteOffset:float -> ?encoding:_BufferEncoding -> unit -> float)
      =
      fun (x537 : t) ->
        fun ~value:(x529 : Uint8Array.t or_string or_number) ->
          fun ?byteOffset:(x530 : float option) ->
            fun ?encoding:(x531 : _BufferEncoding option) ->
              fun () ->
                Ojs.float_of_js
                  (let x538 = t_to_js x537 in
                   Ojs.call (Ojs.get_prop_ascii x538 "indexOf") "apply"
                     [|x538;((let x532 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x532 "push"
                                   [|(or_number_to_js
                                        (fun (x535 : Uint8Array.t or_string)
                                           ->
                                           or_string_to_js Uint8Array.t_to_js
                                             x535) x529)|]);
                              (match x530 with
                               | Some x534 ->
                                   ignore
                                     (Ojs.call x532 "push"
                                        [|(Ojs.float_to_js x534)|])
                               | None -> ());
                              (match x531 with
                               | Some x533 ->
                                   ignore
                                     (Ojs.call x532 "push"
                                        [|(_BufferEncoding_to_js x533)|])
                               | None -> ());
                              x532))|])
    let (lastIndexOf :
      t ->
        value:Uint8Array.t or_string or_number ->
          ?byteOffset:float -> ?encoding:_BufferEncoding -> unit -> float)
      =
      fun (x547 : t) ->
        fun ~value:(x539 : Uint8Array.t or_string or_number) ->
          fun ?byteOffset:(x540 : float option) ->
            fun ?encoding:(x541 : _BufferEncoding option) ->
              fun () ->
                Ojs.float_of_js
                  (let x548 = t_to_js x547 in
                   Ojs.call (Ojs.get_prop_ascii x548 "lastIndexOf") "apply"
                     [|x548;((let x542 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x542 "push"
                                   [|(or_number_to_js
                                        (fun (x545 : Uint8Array.t or_string)
                                           ->
                                           or_string_to_js Uint8Array.t_to_js
                                             x545) x539)|]);
                              (match x540 with
                               | Some x544 ->
                                   ignore
                                     (Ojs.call x542 "push"
                                        [|(Ojs.float_to_js x544)|])
                               | None -> ());
                              (match x541 with
                               | Some x543 ->
                                   ignore
                                     (Ojs.call x542 "push"
                                        [|(_BufferEncoding_to_js x543)|])
                               | None -> ());
                              x542))|])
    let (entries : t -> (float * float) IterableIterator.t) =
      fun (x549 : t) ->
        IterableIterator.t_of_js
          (fun (x550 : Ojs.t) ->
             let x551 = x550 in
             ((Ojs.float_of_js (Ojs.array_get x551 0)),
               (Ojs.float_of_js (Ojs.array_get x551 1))))
          (Ojs.call (t_to_js x549) "entries" [||])
    let (includes :
      t ->
        value:t or_string or_number ->
          ?byteOffset:float -> ?encoding:_BufferEncoding -> unit -> bool)
      =
      fun (x560 : t) ->
        fun ~value:(x552 : t or_string or_number) ->
          fun ?byteOffset:(x553 : float option) ->
            fun ?encoding:(x554 : _BufferEncoding option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x561 = t_to_js x560 in
                   Ojs.call (Ojs.get_prop_ascii x561 "includes") "apply"
                     [|x561;((let x555 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x555 "push"
                                   [|(or_number_to_js
                                        (fun (x558 : t or_string) ->
                                           or_string_to_js t_to_js x558) x552)|]);
                              (match x553 with
                               | Some x557 ->
                                   ignore
                                     (Ojs.call x555 "push"
                                        [|(Ojs.float_to_js x557)|])
                               | None -> ());
                              (match x554 with
                               | Some x556 ->
                                   ignore
                                     (Ojs.call x555 "push"
                                        [|(_BufferEncoding_to_js x556)|])
                               | None -> ());
                              x555))|])
    let (keys : t -> float IterableIterator.t) =
      fun (x562 : t) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x562) "keys" [||])
    let (values : t -> float IterableIterator.t) =
      fun (x564 : t) ->
        IterableIterator.t_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x564) "values" [||])
    let (cast : t -> Uint8Array.t) =
      fun (x566 : t) -> Uint8Array.t_of_js (t_to_js x566)
  end
module InspectOptions =
  struct
    type t = _NodeJS_InspectOptions
    let rec t_of_js : Ojs.t -> t =
      fun (x568 : Ojs.t) -> _NodeJS_InspectOptions_of_js x568
    and t_to_js : t -> Ojs.t =
      fun (x567 : _NodeJS_InspectOptions) ->
        _NodeJS_InspectOptions_to_js x567
    let (get_getters : t -> [ `get  | `set ] or_boolean) =
      fun (x569 : t) ->
        or_boolean_of_js
          (fun (x570 : Ojs.t) ->
             let x571 = x570 in
             match Ojs.string_of_js x571 with
             | "get" -> `get
             | "set" -> `set
             | _ -> assert false)
          (Ojs.get_prop_ascii (t_to_js x569) "getters")
    let (set_getters : t -> [ `get  | `set ] or_boolean -> unit) =
      fun (x572 : t) ->
        fun (x573 : [ `get  | `set ] or_boolean) ->
          Ojs.set_prop_ascii (t_to_js x572) "getters"
            (or_boolean_to_js
               (fun (x574 : [ `get  | `set ]) ->
                  match x574 with
                  | `get -> Ojs.string_to_js "get"
                  | `set -> Ojs.string_to_js "set") x573)
    let (get_showHidden : t -> bool) =
      fun (x575 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x575) "showHidden")
    let (set_showHidden : t -> bool -> unit) =
      fun (x576 : t) ->
        fun (x577 : bool) ->
          Ojs.set_prop_ascii (t_to_js x576) "showHidden"
            (Ojs.bool_to_js x577)
    let (get_depth : t -> float or_null) =
      fun (x578 : t) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x578) "depth")
    let (set_depth : t -> float or_null -> unit) =
      fun (x580 : t) ->
        fun (x581 : float or_null) ->
          Ojs.set_prop_ascii (t_to_js x580) "depth"
            (or_null_to_js Ojs.float_to_js x581)
    let (get_colors : t -> bool) =
      fun (x583 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x583) "colors")
    let (set_colors : t -> bool -> unit) =
      fun (x584 : t) ->
        fun (x585 : bool) ->
          Ojs.set_prop_ascii (t_to_js x584) "colors" (Ojs.bool_to_js x585)
    let (get_customInspect : t -> bool) =
      fun (x586 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x586) "customInspect")
    let (set_customInspect : t -> bool -> unit) =
      fun (x587 : t) ->
        fun (x588 : bool) ->
          Ojs.set_prop_ascii (t_to_js x587) "customInspect"
            (Ojs.bool_to_js x588)
    let (get_showProxy : t -> bool) =
      fun (x589 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x589) "showProxy")
    let (set_showProxy : t -> bool -> unit) =
      fun (x590 : t) ->
        fun (x591 : bool) ->
          Ojs.set_prop_ascii (t_to_js x590) "showProxy" (Ojs.bool_to_js x591)
    let (get_maxArrayLength : t -> float or_null) =
      fun (x592 : t) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x592) "maxArrayLength")
    let (set_maxArrayLength : t -> float or_null -> unit) =
      fun (x594 : t) ->
        fun (x595 : float or_null) ->
          Ojs.set_prop_ascii (t_to_js x594) "maxArrayLength"
            (or_null_to_js Ojs.float_to_js x595)
    let (get_maxStringLength : t -> float or_null) =
      fun (x597 : t) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.get_prop_ascii (t_to_js x597) "maxStringLength")
    let (set_maxStringLength : t -> float or_null -> unit) =
      fun (x599 : t) ->
        fun (x600 : float or_null) ->
          Ojs.set_prop_ascii (t_to_js x599) "maxStringLength"
            (or_null_to_js Ojs.float_to_js x600)
    let (get_breakLength : t -> float) =
      fun (x602 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x602) "breakLength")
    let (set_breakLength : t -> float -> unit) =
      fun (x603 : t) ->
        fun (x604 : float) ->
          Ojs.set_prop_ascii (t_to_js x603) "breakLength"
            (Ojs.float_to_js x604)
    let (get_compact : t -> bool or_number) =
      fun (x605 : t) ->
        or_number_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x605) "compact")
    let (set_compact : t -> bool or_number -> unit) =
      fun (x607 : t) ->
        fun (x608 : bool or_number) ->
          Ojs.set_prop_ascii (t_to_js x607) "compact"
            (or_number_to_js Ojs.bool_to_js x608)
    let (get_sorted : t -> (a:string -> b:string -> float) or_boolean) =
      fun (x610 : t) ->
        or_boolean_of_js
          (fun (x611 : Ojs.t) ->
             fun ~a:(x612 : string) ->
               fun ~b:(x613 : string) ->
                 Ojs.float_of_js
                   (Ojs.apply x611
                      [|(Ojs.string_to_js x612);(Ojs.string_to_js x613)|]))
          (Ojs.get_prop_ascii (t_to_js x610) "sorted")
    let (set_sorted :
      t -> (a:string -> b:string -> float) or_boolean -> unit) =
      fun (x614 : t) ->
        fun (x615 : (a:string -> b:string -> float) or_boolean) ->
          Ojs.set_prop_ascii (t_to_js x614) "sorted"
            (or_boolean_to_js
               (fun (x616 : a:string -> b:string -> float) ->
                  Ojs.fun_to_js 2
                    (fun (x617 : Ojs.t) ->
                       fun (x618 : Ojs.t) ->
                         Ojs.float_to_js
                           (x616 ~a:(Ojs.string_of_js x617)
                              ~b:(Ojs.string_of_js x618)))) x615)
  end
module CallSite =
  struct
    type t = _NodeJS_CallSite
    let rec t_of_js : Ojs.t -> t =
      fun (x620 : Ojs.t) -> _NodeJS_CallSite_of_js x620
    and t_to_js : t -> Ojs.t =
      fun (x619 : _NodeJS_CallSite) -> _NodeJS_CallSite_to_js x619
    let (getThis : t -> any) =
      fun (x621 : t) -> any_of_js (Ojs.call (t_to_js x621) "getThis" [||])
    let (getTypeName : t -> string or_null) =
      fun (x622 : t) ->
        or_null_of_js Ojs.string_of_js
          (Ojs.call (t_to_js x622) "getTypeName" [||])
    let (getFunction : t -> untyped_function or_undefined) =
      fun (x624 : t) ->
        or_undefined_of_js untyped_function_of_js
          (Ojs.call (t_to_js x624) "getFunction" [||])
    let (getFunctionName : t -> string or_null) =
      fun (x626 : t) ->
        or_null_of_js Ojs.string_of_js
          (Ojs.call (t_to_js x626) "getFunctionName" [||])
    let (getMethodName : t -> string or_null) =
      fun (x628 : t) ->
        or_null_of_js Ojs.string_of_js
          (Ojs.call (t_to_js x628) "getMethodName" [||])
    let (getFileName : t -> string or_null) =
      fun (x630 : t) ->
        or_null_of_js Ojs.string_of_js
          (Ojs.call (t_to_js x630) "getFileName" [||])
    let (getLineNumber : t -> float or_null) =
      fun (x632 : t) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x632) "getLineNumber" [||])
    let (getColumnNumber : t -> float or_null) =
      fun (x634 : t) ->
        or_null_of_js Ojs.float_of_js
          (Ojs.call (t_to_js x634) "getColumnNumber" [||])
    let (getEvalOrigin : t -> string or_undefined) =
      fun (x636 : t) ->
        or_undefined_of_js Ojs.string_of_js
          (Ojs.call (t_to_js x636) "getEvalOrigin" [||])
    let (isToplevel : t -> bool) =
      fun (x638 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x638) "isToplevel" [||])
    let (isEval : t -> bool) =
      fun (x639 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x639) "isEval" [||])
    let (isNative : t -> bool) =
      fun (x640 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x640) "isNative" [||])
    let (isConstructor : t -> bool) =
      fun (x641 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x641) "isConstructor" [||])
  end
module ErrnoException =
  struct
    type t = _NodeJS_ErrnoException
    let rec t_of_js : Ojs.t -> t =
      fun (x643 : Ojs.t) -> _NodeJS_ErrnoException_of_js x643
    and t_to_js : t -> Ojs.t =
      fun (x642 : _NodeJS_ErrnoException) ->
        _NodeJS_ErrnoException_to_js x642
    let (get_errno : t -> float) =
      fun (x644 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x644) "errno")
    let (set_errno : t -> float -> unit) =
      fun (x645 : t) ->
        fun (x646 : float) ->
          Ojs.set_prop_ascii (t_to_js x645) "errno" (Ojs.float_to_js x646)
    let (get_code : t -> string) =
      fun (x647 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x647) "code")
    let (set_code : t -> string -> unit) =
      fun (x648 : t) ->
        fun (x649 : string) ->
          Ojs.set_prop_ascii (t_to_js x648) "code" (Ojs.string_to_js x649)
    let (get_path : t -> string) =
      fun (x650 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x650) "path")
    let (set_path : t -> string -> unit) =
      fun (x651 : t) ->
        fun (x652 : string) ->
          Ojs.set_prop_ascii (t_to_js x651) "path" (Ojs.string_to_js x652)
    let (get_syscall : t -> string) =
      fun (x653 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x653) "syscall")
    let (set_syscall : t -> string -> unit) =
      fun (x654 : t) ->
        fun (x655 : string) ->
          Ojs.set_prop_ascii (t_to_js x654) "syscall" (Ojs.string_to_js x655)
    let (get_stack : t -> string) =
      fun (x656 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x656) "stack")
    let (set_stack : t -> string -> unit) =
      fun (x657 : t) ->
        fun (x658 : string) ->
          Ojs.set_prop_ascii (t_to_js x657) "stack" (Ojs.string_to_js x658)
    let (cast : t -> Error.t) =
      fun (x659 : t) -> Error.t_of_js (t_to_js x659)
  end
module ReadableStream =
  struct
    type t = _NodeJS_ReadableStream
    let rec t_of_js : Ojs.t -> t =
      fun (x661 : Ojs.t) -> _NodeJS_ReadableStream_of_js x661
    and t_to_js : t -> Ojs.t =
      fun (x660 : _NodeJS_ReadableStream) ->
        _NodeJS_ReadableStream_to_js x660
    let (get_readable : t -> bool) =
      fun (x662 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x662) "readable")
    let (set_readable : t -> bool -> unit) =
      fun (x663 : t) ->
        fun (x664 : bool) ->
          Ojs.set_prop_ascii (t_to_js x663) "readable" (Ojs.bool_to_js x664)
    let (read : t -> ?size:float -> unit -> _Buffer or_string) =
      fun (x668 : t) ->
        fun ?size:(x665 : float option) ->
          fun () ->
            or_string_of_js _Buffer_of_js
              (let x669 = t_to_js x668 in
               Ojs.call (Ojs.get_prop_ascii x669 "read") "apply"
                 [|x669;((let x666 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x665 with
                           | Some x667 ->
                               ignore
                                 (Ojs.call x666 "push"
                                    [|(Ojs.float_to_js x667)|])
                           | None -> ());
                          x666))|])
    let (setEncoding : t -> encoding:_BufferEncoding -> t) =
      fun (x672 : t) ->
        fun ~encoding:(x671 : _BufferEncoding) ->
          t_of_js
            (Ojs.call (t_to_js x672) "setEncoding"
               [|(_BufferEncoding_to_js x671)|])
    let (pause : t -> t) =
      fun (x673 : t) -> t_of_js (Ojs.call (t_to_js x673) "pause" [||])
    let (resume : t -> t) =
      fun (x674 : t) -> t_of_js (Ojs.call (t_to_js x674) "resume" [||])
    let (isPaused : t -> bool) =
      fun (x675 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x675) "isPaused" [||])
    let (pipe :
      t -> destination:'T -> ?options:anonymous_interface_0 -> unit -> 'T) =
      fun (x680 : t) ->
        fun ~destination:(x676 : 'T) ->
          fun ?options:(x677 : anonymous_interface_0 option) ->
            fun () ->
              Obj.magic
                (let x681 = t_to_js x680 in
                 Ojs.call (Ojs.get_prop_ascii x681 "pipe") "apply"
                   [|x681;((let x678 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x678 "push" [|(Obj.magic x676)|]);
                            (match x677 with
                             | Some x679 ->
                                 ignore
                                   (Ojs.call x678 "push"
                                      [|(anonymous_interface_0_to_js x679)|])
                             | None -> ());
                            x678))|])
    let (unpipe : t -> ?destination:_NodeJS_WritableStream -> unit -> t) =
      fun (x685 : t) ->
        fun ?destination:(x682 : _NodeJS_WritableStream option) ->
          fun () ->
            t_of_js
              (let x686 = t_to_js x685 in
               Ojs.call (Ojs.get_prop_ascii x686 "unpipe") "apply"
                 [|x686;((let x683 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x682 with
                           | Some x684 ->
                               ignore
                                 (Ojs.call x683 "push"
                                    [|(_NodeJS_WritableStream_to_js x684)|])
                           | None -> ());
                          x683))|])
    let (unshift :
      t ->
        chunk:Uint8Array.t or_string ->
          ?encoding:_BufferEncoding -> unit -> unit)
      =
      fun (x692 : t) ->
        fun ~chunk:(x687 : Uint8Array.t or_string) ->
          fun ?encoding:(x688 : _BufferEncoding option) ->
            fun () ->
              ignore
                (let x693 = t_to_js x692 in
                 Ojs.call (Ojs.get_prop_ascii x693 "unshift") "apply"
                   [|x693;((let x689 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x689 "push"
                                 [|(or_string_to_js Uint8Array.t_to_js x687)|]);
                            (match x688 with
                             | Some x690 ->
                                 ignore
                                   (Ojs.call x689 "push"
                                      [|(_BufferEncoding_to_js x690)|])
                             | None -> ());
                            x689))|])
    let (wrap : t -> oldStream:t -> t) =
      fun (x695 : t) ->
        fun ~oldStream:(x694 : t) ->
          t_of_js (Ojs.call (t_to_js x695) "wrap" [|(t_to_js x694)|])
  end
module WritableStream =
  struct
    type t = _NodeJS_WritableStream
    let rec t_of_js : Ojs.t -> t =
      fun (x697 : Ojs.t) -> _NodeJS_WritableStream_of_js x697
    and t_to_js : t -> Ojs.t =
      fun (x696 : _NodeJS_WritableStream) ->
        _NodeJS_WritableStream_to_js x696
    let (get_writable : t -> bool) =
      fun (x698 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x698) "writable")
    let (set_writable : t -> bool -> unit) =
      fun (x699 : t) ->
        fun (x700 : bool) ->
          Ojs.set_prop_ascii (t_to_js x699) "writable" (Ojs.bool_to_js x700)
    let (write :
      t ->
        buffer:Uint8Array.t or_string ->
          ?cb:(?err:Error.t or_null -> unit -> unit) -> unit -> bool)
      =
      fun (x709 : t) ->
        fun ~buffer:(x701 : Uint8Array.t or_string) ->
          fun ?cb:(x702 : (?err:Error.t or_null -> unit -> unit) option) ->
            fun () ->
              Ojs.bool_of_js
                (let x710 = t_to_js x709 in
                 Ojs.call (Ojs.get_prop_ascii x710 "write") "apply"
                   [|x710;((let x703 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x703 "push"
                                 [|(or_string_to_js Uint8Array.t_to_js x701)|]);
                            (match x702 with
                             | Some x704 ->
                                 ignore
                                   (Ojs.call x703 "push"
                                      [|(Ojs.fun_to_js 1
                                           (fun (x705 : Ojs.t) ->
                                              x704
                                                ?err:(Ojs.option_of_js
                                                        (fun (x706 : Ojs.t)
                                                           ->
                                                           or_null_of_js
                                                             Error.t_of_js
                                                             x706) x705) ()))|])
                             | None -> ());
                            x703))|])
    let (write' :
      t ->
        str:string ->
          ?encoding:_BufferEncoding ->
            ?cb:(?err:Error.t or_null -> unit -> unit) -> unit -> bool)
      =
      fun (x720 : t) ->
        fun ~str:(x711 : string) ->
          fun ?encoding:(x712 : _BufferEncoding option) ->
            fun ?cb:(x713 : (?err:Error.t or_null -> unit -> unit) option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x721 = t_to_js x720 in
                   Ojs.call (Ojs.get_prop_ascii x721 "write") "apply"
                     [|x721;((let x714 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x714 "push"
                                   [|(Ojs.string_to_js x711)|]);
                              (match x712 with
                               | Some x719 ->
                                   ignore
                                     (Ojs.call x714 "push"
                                        [|(_BufferEncoding_to_js x719)|])
                               | None -> ());
                              (match x713 with
                               | Some x715 ->
                                   ignore
                                     (Ojs.call x714 "push"
                                        [|(Ojs.fun_to_js 1
                                             (fun (x716 : Ojs.t) ->
                                                x715
                                                  ?err:(Ojs.option_of_js
                                                          (fun (x717 : Ojs.t)
                                                             ->
                                                             or_null_of_js
                                                               Error.t_of_js
                                                               x717) x716) ()))|])
                               | None -> ());
                              x714))|])
    let (end_ : t -> ?cb:(unit -> unit) -> unit -> unit) =
      fun (x725 : t) ->
        fun ?cb:(x722 : (unit -> unit) option) ->
          fun () ->
            ignore
              (let x726 = t_to_js x725 in
               Ojs.call (Ojs.get_prop_ascii x726 "end") "apply"
                 [|x726;((let x723 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x722 with
                           | Some x724 ->
                               ignore
                                 (Ojs.call x723 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x724 ()))|])
                           | None -> ());
                          x723))|])
    let (end_' :
      t -> data:Uint8Array.t or_string -> ?cb:(unit -> unit) -> unit -> unit)
      =
      fun (x732 : t) ->
        fun ~data:(x727 : Uint8Array.t or_string) ->
          fun ?cb:(x728 : (unit -> unit) option) ->
            fun () ->
              ignore
                (let x733 = t_to_js x732 in
                 Ojs.call (Ojs.get_prop_ascii x733 "end") "apply"
                   [|x733;((let x729 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x729 "push"
                                 [|(or_string_to_js Uint8Array.t_to_js x727)|]);
                            (match x728 with
                             | Some x730 ->
                                 ignore
                                   (Ojs.call x729 "push"
                                      [|(Ojs.fun_to_js 1 (fun _ -> x730 ()))|])
                             | None -> ());
                            x729))|])
    let (end_'' :
      t ->
        str:string ->
          ?encoding:_BufferEncoding -> ?cb:(unit -> unit) -> unit -> unit)
      =
      fun (x740 : t) ->
        fun ~str:(x734 : string) ->
          fun ?encoding:(x735 : _BufferEncoding option) ->
            fun ?cb:(x736 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x741 = t_to_js x740 in
                   Ojs.call (Ojs.get_prop_ascii x741 "end") "apply"
                     [|x741;((let x737 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x737 "push"
                                   [|(Ojs.string_to_js x734)|]);
                              (match x735 with
                               | Some x739 ->
                                   ignore
                                     (Ojs.call x737 "push"
                                        [|(_BufferEncoding_to_js x739)|])
                               | None -> ());
                              (match x736 with
                               | Some x738 ->
                                   ignore
                                     (Ojs.call x737 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x738 ()))|])
                               | None -> ());
                              x737))|])
  end
module ReadWriteStream =
  struct
    type t = _NodeJS_ReadWriteStream
    let rec t_of_js : Ojs.t -> t =
      fun (x743 : Ojs.t) -> _NodeJS_ReadWriteStream_of_js x743
    and t_to_js : t -> Ojs.t =
      fun (x742 : _NodeJS_ReadWriteStream) ->
        _NodeJS_ReadWriteStream_to_js x742
    let (cast : t -> _NodeJS_ReadableStream) =
      fun (x744 : t) -> _NodeJS_ReadableStream_of_js (t_to_js x744)
    let (cast' : t -> _NodeJS_WritableStream) =
      fun (x745 : t) -> _NodeJS_WritableStream_of_js (t_to_js x745)
  end
module Global =
  struct
    type t = _NodeJS_Global
    let rec t_of_js : Ojs.t -> t =
      fun (x747 : Ojs.t) -> _NodeJS_Global_of_js x747
    and t_to_js : t -> Ojs.t =
      fun (x746 : _NodeJS_Global) -> _NodeJS_Global_to_js x746
    let (get_Array : t -> any) =
      fun (x748 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x748) "Array")
    let (set_Array : t -> any -> unit) =
      fun (x749 : t) ->
        fun (x750 : any) ->
          Ojs.set_prop_ascii (t_to_js x749) "Array" (any_to_js x750)
    let (get_ArrayBuffer : t -> any) =
      fun (x751 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x751) "ArrayBuffer")
    let (set_ArrayBuffer : t -> any -> unit) =
      fun (x752 : t) ->
        fun (x753 : any) ->
          Ojs.set_prop_ascii (t_to_js x752) "ArrayBuffer" (any_to_js x753)
    let (get_Boolean : t -> any) =
      fun (x754 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x754) "Boolean")
    let (set_Boolean : t -> any -> unit) =
      fun (x755 : t) ->
        fun (x756 : any) ->
          Ojs.set_prop_ascii (t_to_js x755) "Boolean" (any_to_js x756)
    let (get_Buffer : t -> any) =
      fun (x757 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x757) "Buffer")
    let (set_Buffer : t -> any -> unit) =
      fun (x758 : t) ->
        fun (x759 : any) ->
          Ojs.set_prop_ascii (t_to_js x758) "Buffer" (any_to_js x759)
    let (get_DataView : t -> any) =
      fun (x760 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x760) "DataView")
    let (set_DataView : t -> any -> unit) =
      fun (x761 : t) ->
        fun (x762 : any) ->
          Ojs.set_prop_ascii (t_to_js x761) "DataView" (any_to_js x762)
    let (get_Date : t -> any) =
      fun (x763 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x763) "Date")
    let (set_Date : t -> any -> unit) =
      fun (x764 : t) ->
        fun (x765 : any) ->
          Ojs.set_prop_ascii (t_to_js x764) "Date" (any_to_js x765)
    let (get_Error : t -> any) =
      fun (x766 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x766) "Error")
    let (set_Error : t -> any -> unit) =
      fun (x767 : t) ->
        fun (x768 : any) ->
          Ojs.set_prop_ascii (t_to_js x767) "Error" (any_to_js x768)
    let (get_EvalError : t -> any) =
      fun (x769 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x769) "EvalError")
    let (set_EvalError : t -> any -> unit) =
      fun (x770 : t) ->
        fun (x771 : any) ->
          Ojs.set_prop_ascii (t_to_js x770) "EvalError" (any_to_js x771)
    let (get_Float32Array : t -> any) =
      fun (x772 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x772) "Float32Array")
    let (set_Float32Array : t -> any -> unit) =
      fun (x773 : t) ->
        fun (x774 : any) ->
          Ojs.set_prop_ascii (t_to_js x773) "Float32Array" (any_to_js x774)
    let (get_Float64Array : t -> any) =
      fun (x775 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x775) "Float64Array")
    let (set_Float64Array : t -> any -> unit) =
      fun (x776 : t) ->
        fun (x777 : any) ->
          Ojs.set_prop_ascii (t_to_js x776) "Float64Array" (any_to_js x777)
    let (get_Function : t -> any) =
      fun (x778 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x778) "Function")
    let (set_Function : t -> any -> unit) =
      fun (x779 : t) ->
        fun (x780 : any) ->
          Ojs.set_prop_ascii (t_to_js x779) "Function" (any_to_js x780)
    let (get_Infinity : t -> any) =
      fun (x781 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x781) "Infinity")
    let (set_Infinity : t -> any -> unit) =
      fun (x782 : t) ->
        fun (x783 : any) ->
          Ojs.set_prop_ascii (t_to_js x782) "Infinity" (any_to_js x783)
    let (get_Int16Array : t -> any) =
      fun (x784 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x784) "Int16Array")
    let (set_Int16Array : t -> any -> unit) =
      fun (x785 : t) ->
        fun (x786 : any) ->
          Ojs.set_prop_ascii (t_to_js x785) "Int16Array" (any_to_js x786)
    let (get_Int32Array : t -> any) =
      fun (x787 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x787) "Int32Array")
    let (set_Int32Array : t -> any -> unit) =
      fun (x788 : t) ->
        fun (x789 : any) ->
          Ojs.set_prop_ascii (t_to_js x788) "Int32Array" (any_to_js x789)
    let (get_Int8Array : t -> any) =
      fun (x790 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x790) "Int8Array")
    let (set_Int8Array : t -> any -> unit) =
      fun (x791 : t) ->
        fun (x792 : any) ->
          Ojs.set_prop_ascii (t_to_js x791) "Int8Array" (any_to_js x792)
    let (get_Intl : t -> any) =
      fun (x793 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x793) "Intl")
    let (set_Intl : t -> any -> unit) =
      fun (x794 : t) ->
        fun (x795 : any) ->
          Ojs.set_prop_ascii (t_to_js x794) "Intl" (any_to_js x795)
    let (get_JSON : t -> any) =
      fun (x796 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x796) "JSON")
    let (set_JSON : t -> any -> unit) =
      fun (x797 : t) ->
        fun (x798 : any) ->
          Ojs.set_prop_ascii (t_to_js x797) "JSON" (any_to_js x798)
    let (get_Map : t -> MapConstructor.t) =
      fun (x799 : t) ->
        MapConstructor.t_of_js (Ojs.get_prop_ascii (t_to_js x799) "Map")
    let (set_Map : t -> MapConstructor.t -> unit) =
      fun (x800 : t) ->
        fun (x801 : MapConstructor.t) ->
          Ojs.set_prop_ascii (t_to_js x800) "Map"
            (MapConstructor.t_to_js x801)
    let (get_Math : t -> any) =
      fun (x802 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x802) "Math")
    let (set_Math : t -> any -> unit) =
      fun (x803 : t) ->
        fun (x804 : any) ->
          Ojs.set_prop_ascii (t_to_js x803) "Math" (any_to_js x804)
    let (get_NaN : t -> any) =
      fun (x805 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x805) "NaN")
    let (set_NaN : t -> any -> unit) =
      fun (x806 : t) ->
        fun (x807 : any) ->
          Ojs.set_prop_ascii (t_to_js x806) "NaN" (any_to_js x807)
    let (get_Number : t -> any) =
      fun (x808 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x808) "Number")
    let (set_Number : t -> any -> unit) =
      fun (x809 : t) ->
        fun (x810 : any) ->
          Ojs.set_prop_ascii (t_to_js x809) "Number" (any_to_js x810)
    let (get_Object : t -> any) =
      fun (x811 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x811) "Object")
    let (set_Object : t -> any -> unit) =
      fun (x812 : t) ->
        fun (x813 : any) ->
          Ojs.set_prop_ascii (t_to_js x812) "Object" (any_to_js x813)
    let (get_Promise : t -> any) =
      fun (x814 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x814) "Promise")
    let (set_Promise : t -> any -> unit) =
      fun (x815 : t) ->
        fun (x816 : any) ->
          Ojs.set_prop_ascii (t_to_js x815) "Promise" (any_to_js x816)
    let (get_RangeError : t -> any) =
      fun (x817 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x817) "RangeError")
    let (set_RangeError : t -> any -> unit) =
      fun (x818 : t) ->
        fun (x819 : any) ->
          Ojs.set_prop_ascii (t_to_js x818) "RangeError" (any_to_js x819)
    let (get_ReferenceError : t -> any) =
      fun (x820 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x820) "ReferenceError")
    let (set_ReferenceError : t -> any -> unit) =
      fun (x821 : t) ->
        fun (x822 : any) ->
          Ojs.set_prop_ascii (t_to_js x821) "ReferenceError" (any_to_js x822)
    let (get_RegExp : t -> any) =
      fun (x823 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x823) "RegExp")
    let (set_RegExp : t -> any -> unit) =
      fun (x824 : t) ->
        fun (x825 : any) ->
          Ojs.set_prop_ascii (t_to_js x824) "RegExp" (any_to_js x825)
    let (get_Set : t -> SetConstructor.t) =
      fun (x826 : t) ->
        SetConstructor.t_of_js (Ojs.get_prop_ascii (t_to_js x826) "Set")
    let (set_Set : t -> SetConstructor.t -> unit) =
      fun (x827 : t) ->
        fun (x828 : SetConstructor.t) ->
          Ojs.set_prop_ascii (t_to_js x827) "Set"
            (SetConstructor.t_to_js x828)
    let (get_String : t -> any) =
      fun (x829 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x829) "String")
    let (set_String : t -> any -> unit) =
      fun (x830 : t) ->
        fun (x831 : any) ->
          Ojs.set_prop_ascii (t_to_js x830) "String" (any_to_js x831)
    let (get_Symbol : t -> untyped_function) =
      fun (x832 : t) ->
        untyped_function_of_js (Ojs.get_prop_ascii (t_to_js x832) "Symbol")
    let (set_Symbol : t -> untyped_function -> unit) =
      fun (x833 : t) ->
        fun (x834 : untyped_function) ->
          Ojs.set_prop_ascii (t_to_js x833) "Symbol"
            (untyped_function_to_js x834)
    let (get_SyntaxError : t -> any) =
      fun (x835 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x835) "SyntaxError")
    let (set_SyntaxError : t -> any -> unit) =
      fun (x836 : t) ->
        fun (x837 : any) ->
          Ojs.set_prop_ascii (t_to_js x836) "SyntaxError" (any_to_js x837)
    let (get_TypeError : t -> any) =
      fun (x838 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x838) "TypeError")
    let (set_TypeError : t -> any -> unit) =
      fun (x839 : t) ->
        fun (x840 : any) ->
          Ojs.set_prop_ascii (t_to_js x839) "TypeError" (any_to_js x840)
    let (get_URIError : t -> any) =
      fun (x841 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x841) "URIError")
    let (set_URIError : t -> any -> unit) =
      fun (x842 : t) ->
        fun (x843 : any) ->
          Ojs.set_prop_ascii (t_to_js x842) "URIError" (any_to_js x843)
    let (get_Uint16Array : t -> any) =
      fun (x844 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x844) "Uint16Array")
    let (set_Uint16Array : t -> any -> unit) =
      fun (x845 : t) ->
        fun (x846 : any) ->
          Ojs.set_prop_ascii (t_to_js x845) "Uint16Array" (any_to_js x846)
    let (get_Uint32Array : t -> any) =
      fun (x847 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x847) "Uint32Array")
    let (set_Uint32Array : t -> any -> unit) =
      fun (x848 : t) ->
        fun (x849 : any) ->
          Ojs.set_prop_ascii (t_to_js x848) "Uint32Array" (any_to_js x849)
    let (get_Uint8Array : t -> any) =
      fun (x850 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x850) "Uint8Array")
    let (set_Uint8Array : t -> any -> unit) =
      fun (x851 : t) ->
        fun (x852 : any) ->
          Ojs.set_prop_ascii (t_to_js x851) "Uint8Array" (any_to_js x852)
    let (get_Uint8ClampedArray : t -> any) =
      fun (x853 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x853) "Uint8ClampedArray")
    let (set_Uint8ClampedArray : t -> any -> unit) =
      fun (x854 : t) ->
        fun (x855 : any) ->
          Ojs.set_prop_ascii (t_to_js x854) "Uint8ClampedArray"
            (any_to_js x855)
    let (get_WeakMap : t -> WeakMapConstructor.t) =
      fun (x856 : t) ->
        WeakMapConstructor.t_of_js
          (Ojs.get_prop_ascii (t_to_js x856) "WeakMap")
    let (set_WeakMap : t -> WeakMapConstructor.t -> unit) =
      fun (x857 : t) ->
        fun (x858 : WeakMapConstructor.t) ->
          Ojs.set_prop_ascii (t_to_js x857) "WeakMap"
            (WeakMapConstructor.t_to_js x858)
    let (get_WeakSet : t -> WeakSetConstructor.t) =
      fun (x859 : t) ->
        WeakSetConstructor.t_of_js
          (Ojs.get_prop_ascii (t_to_js x859) "WeakSet")
    let (set_WeakSet : t -> WeakSetConstructor.t -> unit) =
      fun (x860 : t) ->
        fun (x861 : WeakSetConstructor.t) ->
          Ojs.set_prop_ascii (t_to_js x860) "WeakSet"
            (WeakSetConstructor.t_to_js x861)
    let (clearImmediate : t -> immediateId:_NodeJS_Immediate -> unit) =
      fun (x863 : t) ->
        fun ~immediateId:(x862 : _NodeJS_Immediate) ->
          ignore
            (Ojs.call (t_to_js x863) "clearImmediate"
               [|(_NodeJS_Immediate_to_js x862)|])
    let (clearInterval : t -> intervalId:_NodeJS_Timeout -> unit) =
      fun (x865 : t) ->
        fun ~intervalId:(x864 : _NodeJS_Timeout) ->
          ignore
            (Ojs.call (t_to_js x865) "clearInterval"
               [|(_NodeJS_Timeout_to_js x864)|])
    let (clearTimeout : t -> timeoutId:_NodeJS_Timeout -> unit) =
      fun (x867 : t) ->
        fun ~timeoutId:(x866 : _NodeJS_Timeout) ->
          ignore
            (Ojs.call (t_to_js x867) "clearTimeout"
               [|(_NodeJS_Timeout_to_js x866)|])
    let (get_decodeURI : t -> any) =
      fun (x868 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x868) "decodeURI")
    let (set_decodeURI : t -> any -> unit) =
      fun (x869 : t) ->
        fun (x870 : any) ->
          Ojs.set_prop_ascii (t_to_js x869) "decodeURI" (any_to_js x870)
    let (get_decodeURIComponent : t -> any) =
      fun (x871 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x871) "decodeURIComponent")
    let (set_decodeURIComponent : t -> any -> unit) =
      fun (x872 : t) ->
        fun (x873 : any) ->
          Ojs.set_prop_ascii (t_to_js x872) "decodeURIComponent"
            (any_to_js x873)
    let (get_encodeURI : t -> any) =
      fun (x874 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x874) "encodeURI")
    let (set_encodeURI : t -> any -> unit) =
      fun (x875 : t) ->
        fun (x876 : any) ->
          Ojs.set_prop_ascii (t_to_js x875) "encodeURI" (any_to_js x876)
    let (get_encodeURIComponent : t -> any) =
      fun (x877 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x877) "encodeURIComponent")
    let (set_encodeURIComponent : t -> any -> unit) =
      fun (x878 : t) ->
        fun (x879 : any) ->
          Ojs.set_prop_ascii (t_to_js x878) "encodeURIComponent"
            (any_to_js x879)
    let (escape : t -> str:string -> string) =
      fun (x881 : t) ->
        fun ~str:(x880 : string) ->
          Ojs.string_of_js
            (Ojs.call (t_to_js x881) "escape" [|(Ojs.string_to_js x880)|])
    let (get_eval : t -> any) =
      fun (x882 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x882) "eval")
    let (set_eval : t -> any -> unit) =
      fun (x883 : t) ->
        fun (x884 : any) ->
          Ojs.set_prop_ascii (t_to_js x883) "eval" (any_to_js x884)
    let (get_global : t -> t) =
      fun (x885 : t) -> t_of_js (Ojs.get_prop_ascii (t_to_js x885) "global")
    let (set_global : t -> t -> unit) =
      fun (x886 : t) ->
        fun (x887 : t) ->
          Ojs.set_prop_ascii (t_to_js x886) "global" (t_to_js x887)
    let (get_isFinite : t -> any) =
      fun (x888 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x888) "isFinite")
    let (set_isFinite : t -> any -> unit) =
      fun (x889 : t) ->
        fun (x890 : any) ->
          Ojs.set_prop_ascii (t_to_js x889) "isFinite" (any_to_js x890)
    let (get_isNaN : t -> any) =
      fun (x891 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x891) "isNaN")
    let (set_isNaN : t -> any -> unit) =
      fun (x892 : t) ->
        fun (x893 : any) ->
          Ojs.set_prop_ascii (t_to_js x892) "isNaN" (any_to_js x893)
    let (get_parseFloat : t -> any) =
      fun (x894 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x894) "parseFloat")
    let (set_parseFloat : t -> any -> unit) =
      fun (x895 : t) ->
        fun (x896 : any) ->
          Ojs.set_prop_ascii (t_to_js x895) "parseFloat" (any_to_js x896)
    let (get_parseInt : t -> any) =
      fun (x897 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x897) "parseInt")
    let (set_parseInt : t -> any -> unit) =
      fun (x898 : t) ->
        fun (x899 : any) ->
          Ojs.set_prop_ascii (t_to_js x898) "parseInt" (any_to_js x899)
    let (setImmediate :
      t ->
        callback:(args:any list -> unit) ->
          args:any list -> _NodeJS_Immediate)
      =
      fun (x906 : t) ->
        fun ~callback:(x900 : args:any list -> unit) ->
          fun ~args:(x901 : any list) ->
            _NodeJS_Immediate_of_js
              (let x907 = t_to_js x906 in
               Ojs.call (Ojs.get_prop_ascii x907 "setImmediate") "apply"
                 [|x907;((let x902 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x902 "push"
                               [|(Ojs.fun_to_js_args
                                    (fun (x904 : _) ->
                                       x900
                                         ~args:(Ojs.list_of_js_from any_of_js
                                                  x904 0)))|]);
                          List.iter
                            (fun (x903 : any) ->
                               ignore
                                 (Ojs.call x902 "push" [|(any_to_js x903)|]))
                            x901;
                          x902))|])
    let (setInterval :
      t ->
        callback:(args:any list -> unit) ->
          ?ms:float -> args:any list -> _NodeJS_Timeout)
      =
      fun (x916 : t) ->
        fun ~callback:(x908 : args:any list -> unit) ->
          fun ?ms:(x909 : float option) ->
            fun ~args:(x910 : any list) ->
              _NodeJS_Timeout_of_js
                (let x917 = t_to_js x916 in
                 Ojs.call (Ojs.get_prop_ascii x917 "setInterval") "apply"
                   [|x917;((let x911 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x911 "push"
                                 [|(Ojs.fun_to_js_args
                                      (fun (x914 : _) ->
                                         x908
                                           ~args:(Ojs.list_of_js_from
                                                    any_of_js x914 0)))|]);
                            (match x909 with
                             | Some x913 ->
                                 ignore
                                   (Ojs.call x911 "push"
                                      [|(Ojs.float_to_js x913)|])
                             | None -> ());
                            List.iter
                              (fun (x912 : any) ->
                                 ignore
                                   (Ojs.call x911 "push" [|(any_to_js x912)|]))
                              x910;
                            x911))|])
    let (setTimeout :
      t ->
        callback:(args:any list -> unit) ->
          ?ms:float -> args:any list -> _NodeJS_Timeout)
      =
      fun (x926 : t) ->
        fun ~callback:(x918 : args:any list -> unit) ->
          fun ?ms:(x919 : float option) ->
            fun ~args:(x920 : any list) ->
              _NodeJS_Timeout_of_js
                (let x927 = t_to_js x926 in
                 Ojs.call (Ojs.get_prop_ascii x927 "setTimeout") "apply"
                   [|x927;((let x921 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x921 "push"
                                 [|(Ojs.fun_to_js_args
                                      (fun (x924 : _) ->
                                         x918
                                           ~args:(Ojs.list_of_js_from
                                                    any_of_js x924 0)))|]);
                            (match x919 with
                             | Some x923 ->
                                 ignore
                                   (Ojs.call x921 "push"
                                      [|(Ojs.float_to_js x923)|])
                             | None -> ());
                            List.iter
                              (fun (x922 : any) ->
                                 ignore
                                   (Ojs.call x921 "push" [|(any_to_js x922)|]))
                              x920;
                            x921))|])
    let (queueMicrotask : t -> callback:(unit -> unit) -> unit) =
      fun (x929 : t) ->
        fun ~callback:(x928 : unit -> unit) ->
          ignore
            (Ojs.call (t_to_js x929) "queueMicrotask"
               [|(Ojs.fun_to_js 1 (fun _ -> x928 ()))|])
    let (get_undefined : t -> any) =
      fun (x930 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x930) "undefined")
    let (set_undefined : t -> any -> unit) =
      fun (x931 : t) ->
        fun (x932 : any) ->
          Ojs.set_prop_ascii (t_to_js x931) "undefined" (any_to_js x932)
    let (unescape : t -> str:string -> string) =
      fun (x934 : t) ->
        fun ~str:(x933 : string) ->
          Ojs.string_of_js
            (Ojs.call (t_to_js x934) "unescape" [|(Ojs.string_to_js x933)|])
    let (gc : t -> unit) =
      fun (x935 : t) -> ignore (Ojs.call (t_to_js x935) "gc" [||])
    let (get_v8debug : t -> any) =
      fun (x936 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x936) "v8debug")
    let (set_v8debug : t -> any -> unit) =
      fun (x937 : t) ->
        fun (x938 : any) ->
          Ojs.set_prop_ascii (t_to_js x937) "v8debug" (any_to_js x938)
  end
module RefCounted =
  struct
    type t = _NodeJS_RefCounted
    let rec t_of_js : Ojs.t -> t =
      fun (x940 : Ojs.t) -> _NodeJS_RefCounted_of_js x940
    and t_to_js : t -> Ojs.t =
      fun (x939 : _NodeJS_RefCounted) -> _NodeJS_RefCounted_to_js x939
    let (ref : t -> t) =
      fun (x941 : t) -> t_of_js (Ojs.call (t_to_js x941) "ref" [||])
    let (unref : t -> t) =
      fun (x942 : t) -> t_of_js (Ojs.call (t_to_js x942) "unref" [||])
  end
module Timer =
  struct
    type t = _NodeJS_Timer
    let rec t_of_js : Ojs.t -> t =
      fun (x944 : Ojs.t) -> _NodeJS_Timer_of_js x944
    and t_to_js : t -> Ojs.t =
      fun (x943 : _NodeJS_Timer) -> _NodeJS_Timer_to_js x943
    let (hasRef : t -> bool) =
      fun (x945 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x945) "hasRef" [||])
    let (refresh : t -> t) =
      fun (x946 : t) -> t_of_js (Ojs.call (t_to_js x946) "refresh" [||])
    let (cast : t -> _NodeJS_RefCounted) =
      fun (x947 : t) -> _NodeJS_RefCounted_of_js (t_to_js x947)
  end
module Immediate =
  struct
    type t = _NodeJS_Immediate
    let rec t_of_js : Ojs.t -> t =
      fun (x949 : Ojs.t) -> _NodeJS_Immediate_of_js x949
    and t_to_js : t -> Ojs.t =
      fun (x948 : _NodeJS_Immediate) -> _NodeJS_Immediate_to_js x948
    let (hasRef : t -> bool) =
      fun (x950 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x950) "hasRef" [||])
    let (get__onImmediate : t -> untyped_function) =
      fun (x951 : t) ->
        untyped_function_of_js
          (Ojs.get_prop_ascii (t_to_js x951) "_onImmediate")
    let (set__onImmediate : t -> untyped_function -> unit) =
      fun (x952 : t) ->
        fun (x953 : untyped_function) ->
          Ojs.set_prop_ascii (t_to_js x952) "_onImmediate"
            (untyped_function_to_js x953)
    let (cast : t -> _NodeJS_RefCounted) =
      fun (x954 : t) -> _NodeJS_RefCounted_of_js (t_to_js x954)
  end
module Timeout =
  struct
    type t = _NodeJS_Timeout
    let rec t_of_js : Ojs.t -> t =
      fun (x956 : Ojs.t) -> _NodeJS_Timeout_of_js x956
    and t_to_js : t -> Ojs.t =
      fun (x955 : _NodeJS_Timeout) -> _NodeJS_Timeout_to_js x955
    let (hasRef : t -> bool) =
      fun (x957 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x957) "hasRef" [||])
    let (refresh : t -> t) =
      fun (x958 : t) -> t_of_js (Ojs.call (t_to_js x958) "refresh" [||])
    let (cast : t -> _NodeJS_Timer) =
      fun (x959 : t) -> _NodeJS_Timer_of_js (t_to_js x959)
  end
module TypedArray =
  struct
    type t = _NodeJS_TypedArray
    let rec t_of_js : Ojs.t -> t =
      fun (x961 : Ojs.t) -> _NodeJS_TypedArray_of_js x961
    and t_to_js : t -> Ojs.t =
      fun (x960 : _NodeJS_TypedArray) -> _NodeJS_TypedArray_to_js x960
  end
module ArrayBufferView =
  struct
    type t = _NodeJS_ArrayBufferView
    let rec t_of_js : Ojs.t -> t =
      fun (x963 : Ojs.t) -> _NodeJS_ArrayBufferView_of_js x963
    and t_to_js : t -> Ojs.t =
      fun (x962 : _NodeJS_ArrayBufferView) ->
        _NodeJS_ArrayBufferView_to_js x962
  end
module Require =
  struct
    type t = _NodeJS_Require
    let rec t_of_js : Ojs.t -> t =
      fun (x965 : Ojs.t) -> _NodeJS_Require_of_js x965
    and t_to_js : t -> Ojs.t =
      fun (x964 : _NodeJS_Require) -> _NodeJS_Require_to_js x964
    let (apply : t -> id:string -> any) =
      fun (x967 : t) ->
        fun ~id:(x966 : string) ->
          any_of_js (Ojs.apply (t_to_js x967) [|(Ojs.string_to_js x966)|])
    let (get_resolve : t -> _NodeJS_RequireResolve) =
      fun (x968 : t) ->
        _NodeJS_RequireResolve_of_js
          (Ojs.get_prop_ascii (t_to_js x968) "resolve")
    let (set_resolve : t -> _NodeJS_RequireResolve -> unit) =
      fun (x969 : t) ->
        fun (x970 : _NodeJS_RequireResolve) ->
          Ojs.set_prop_ascii (t_to_js x969) "resolve"
            (_NodeJS_RequireResolve_to_js x970)
    let (get_cache : t -> _NodeModule _NodeJS_Dict) =
      fun (x971 : t) ->
        _NodeJS_Dict_of_js _NodeModule_of_js
          (Ojs.get_prop_ascii (t_to_js x971) "cache")
    let (set_cache : t -> _NodeModule _NodeJS_Dict -> unit) =
      fun (x973 : t) ->
        fun (x974 : _NodeModule _NodeJS_Dict) ->
          Ojs.set_prop_ascii (t_to_js x973) "cache"
            (_NodeJS_Dict_to_js _NodeModule_to_js x974)
    let (get_extensions : t -> _NodeJS_RequireExtensions) =
      fun (x976 : t) ->
        _NodeJS_RequireExtensions_of_js
          (Ojs.get_prop_ascii (t_to_js x976) "extensions")
    let (set_extensions : t -> _NodeJS_RequireExtensions -> unit) =
      fun (x977 : t) ->
        fun (x978 : _NodeJS_RequireExtensions) ->
          Ojs.set_prop_ascii (t_to_js x977) "extensions"
            (_NodeJS_RequireExtensions_to_js x978)
    let (get_main : t -> _NodeJS_Module or_undefined) =
      fun (x979 : t) ->
        or_undefined_of_js _NodeJS_Module_of_js
          (Ojs.get_prop_ascii (t_to_js x979) "main")
    let (set_main : t -> _NodeJS_Module or_undefined -> unit) =
      fun (x981 : t) ->
        fun (x982 : _NodeJS_Module or_undefined) ->
          Ojs.set_prop_ascii (t_to_js x981) "main"
            (or_undefined_to_js _NodeJS_Module_to_js x982)
  end
module RequireResolve =
  struct
    type t = _NodeJS_RequireResolve
    let rec t_of_js : Ojs.t -> t =
      fun (x985 : Ojs.t) -> _NodeJS_RequireResolve_of_js x985
    and t_to_js : t -> Ojs.t =
      fun (x984 : _NodeJS_RequireResolve) ->
        _NodeJS_RequireResolve_to_js x984
    let (apply :
      t -> id:string -> ?options:anonymous_interface_1 -> unit -> string) =
      fun (x990 : t) ->
        fun ~id:(x986 : string) ->
          fun ?options:(x987 : anonymous_interface_1 option) ->
            fun () ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x990) "apply"
                   [|Ojs.null;((let x988 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x988 "push"
                                     [|(Ojs.string_to_js x986)|]);
                                (match x987 with
                                 | Some x989 ->
                                     ignore
                                       (Ojs.call x988 "push"
                                          [|(anonymous_interface_1_to_js x989)|])
                                 | None -> ());
                                x988))|])
    let (paths : t -> request:string -> string list or_null) =
      fun (x992 : t) ->
        fun ~request:(x991 : string) ->
          or_null_of_js
            (fun (x993 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x993)
            (Ojs.call (t_to_js x992) "paths" [|(Ojs.string_to_js x991)|])
  end
module RequireExtensions =
  struct
    type t = _NodeJS_RequireExtensions
    let rec t_of_js : Ojs.t -> t =
      fun (x996 : Ojs.t) -> _NodeJS_RequireExtensions_of_js x996
    and t_to_js : t -> Ojs.t =
      fun (x995 : _NodeJS_RequireExtensions) ->
        _NodeJS_RequireExtensions_to_js x995
    let (cast :
      t -> (m:_NodeJS_Module -> filename:string -> any) _NodeJS_Dict) =
      fun (x997 : t) ->
        _NodeJS_Dict_of_js
          (fun (x998 : Ojs.t) ->
             fun ~m:(x999 : _NodeJS_Module) ->
               fun ~filename:(x1000 : string) ->
                 any_of_js
                   (Ojs.apply x998
                      [|(_NodeJS_Module_to_js x999);(Ojs.string_to_js x1000)|]))
          (t_to_js x997)
  end
module Module =
  struct
    type t = _NodeJS_Module
    let rec t_of_js : Ojs.t -> t =
      fun (x1002 : Ojs.t) -> _NodeJS_Module_of_js x1002
    and t_to_js : t -> Ojs.t =
      fun (x1001 : _NodeJS_Module) -> _NodeJS_Module_to_js x1001
    let (get_exports : t -> any) =
      fun (x1003 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x1003) "exports")
    let (set_exports : t -> any -> unit) =
      fun (x1004 : t) ->
        fun (x1005 : any) ->
          Ojs.set_prop_ascii (t_to_js x1004) "exports" (any_to_js x1005)
    let (get_require : t -> _NodeJS_Require) =
      fun (x1006 : t) ->
        _NodeJS_Require_of_js (Ojs.get_prop_ascii (t_to_js x1006) "require")
    let (set_require : t -> _NodeJS_Require -> unit) =
      fun (x1007 : t) ->
        fun (x1008 : _NodeJS_Require) ->
          Ojs.set_prop_ascii (t_to_js x1007) "require"
            (_NodeJS_Require_to_js x1008)
    let (get_id : t -> string) =
      fun (x1009 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1009) "id")
    let (set_id : t -> string -> unit) =
      fun (x1010 : t) ->
        fun (x1011 : string) ->
          Ojs.set_prop_ascii (t_to_js x1010) "id" (Ojs.string_to_js x1011)
    let (get_filename : t -> string) =
      fun (x1012 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1012) "filename")
    let (set_filename : t -> string -> unit) =
      fun (x1013 : t) ->
        fun (x1014 : string) ->
          Ojs.set_prop_ascii (t_to_js x1013) "filename"
            (Ojs.string_to_js x1014)
    let (get_loaded : t -> bool) =
      fun (x1015 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1015) "loaded")
    let (set_loaded : t -> bool -> unit) =
      fun (x1016 : t) ->
        fun (x1017 : bool) ->
          Ojs.set_prop_ascii (t_to_js x1016) "loaded" (Ojs.bool_to_js x1017)
    let (get_parent : t -> t or_null_or_undefined) =
      fun (x1018 : t) ->
        or_null_or_undefined_of_js t_of_js
          (Ojs.get_prop_ascii (t_to_js x1018) "parent")
    let (set_parent : t -> t or_null_or_undefined -> unit) =
      fun (x1020 : t) ->
        fun (x1021 : t or_null_or_undefined) ->
          Ojs.set_prop_ascii (t_to_js x1020) "parent"
            (or_null_or_undefined_to_js t_to_js x1021)
    let (get_children : t -> t list) =
      fun (x1023 : t) ->
        Ojs.list_of_js t_of_js
          (Ojs.get_prop_ascii (t_to_js x1023) "children")
    let (set_children : t -> t list -> unit) =
      fun (x1025 : t) ->
        fun (x1026 : t list) ->
          Ojs.set_prop_ascii (t_to_js x1025) "children"
            (Ojs.list_to_js t_to_js x1026)
    let (get_path : t -> string) =
      fun (x1028 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1028) "path")
    let (set_path : t -> string -> unit) =
      fun (x1029 : t) ->
        fun (x1030 : string) ->
          Ojs.set_prop_ascii (t_to_js x1029) "path" (Ojs.string_to_js x1030)
    let (get_paths : t -> string list) =
      fun (x1031 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x1031) "paths")
    let (set_paths : t -> string list -> unit) =
      fun (x1033 : t) ->
        fun (x1034 : string list) ->
          Ojs.set_prop_ascii (t_to_js x1033) "paths"
            (Ojs.list_to_js Ojs.string_to_js x1034)
  end
module Dict =
  struct
    type 'T t = 'T _NodeJS_Dict
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x1038 : Ojs.t) -> _NodeJS_Dict_of_js __T_of_js x1038
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x1036 : __T _NodeJS_Dict) -> _NodeJS_Dict_to_js __T_to_js x1036
    let (get : 'T t -> string -> 'T or_undefined) =
      fun (x1040 : 'T t) ->
        fun (x1042 : string) ->
          or_undefined_of_js Obj.magic
            (Ojs.get_prop (t_to_js Obj.magic x1040) (Ojs.string_to_js x1042))
    let (set : 'T t -> string -> 'T or_undefined -> unit) =
      fun (x1044 : 'T t) ->
        fun (x1046 : string) ->
          fun (x1047 : 'T or_undefined) ->
            Ojs.set_prop (t_to_js Obj.magic x1044) (Ojs.string_to_js x1046)
              (or_undefined_to_js Obj.magic x1047)
  end
module ReadOnlyDict =
  struct
    type 'T t = 'T _NodeJS_ReadOnlyDict
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x1051 : Ojs.t) -> _NodeJS_ReadOnlyDict_of_js __T_of_js x1051
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x1049 : __T _NodeJS_ReadOnlyDict) ->
          _NodeJS_ReadOnlyDict_to_js __T_to_js x1049
    let (get : 'T t -> string -> 'T or_undefined) =
      fun (x1053 : 'T t) ->
        fun (x1055 : string) ->
          or_undefined_of_js Obj.magic
            (Ojs.get_prop (t_to_js Obj.magic x1053) (Ojs.string_to_js x1055))
  end
