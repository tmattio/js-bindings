[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_end : t -> bool) =
      fun (x3 : t) -> Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3) "end")
    let (set_end : t -> bool -> unit) =
      fun (x4 : t) ->
        fun (x5 : bool) ->
          Ojs.set_prop_ascii (t_to_js x4) "end" (Ojs.bool_to_js x5)
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7 : Ojs.t) -> x7
    and t_to_js : t -> Ojs.t = fun (x6 : Ojs.t) -> x6
    let (get_paths : t -> string list) =
      fun (x8 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x8) "paths")
    let (set_paths : t -> string list -> unit) =
      fun (x10 : t) ->
        fun (x11 : string list) ->
          Ojs.set_prop_ascii (t_to_js x10) "paths"
            (Ojs.list_to_js Ojs.string_to_js x11)
  end
module AnonymousInterface2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x14 : Ojs.t) -> x14
    and t_to_js : t -> Ojs.t = fun (x13 : Ojs.t) -> x13
    let (get_type : t -> [ `Buffer ]) =
      fun (x15 : t) ->
        let x16 = Ojs.get_prop_ascii (t_to_js x15) "type" in
        match Ojs.string_of_js x16 with
        | "Buffer" -> `Buffer
        | _ -> assert false
    let (set_type : t -> [ `Buffer ] -> unit) =
      fun (x17 : t) ->
        fun (x18 : [ `Buffer ]) ->
          Ojs.set_prop_ascii (t_to_js x17) "type"
            (match x18 with | `Buffer -> Ojs.string_to_js "Buffer")
    let (get_data : t -> int list) =
      fun (x19 : t) ->
        Ojs.list_of_js Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x19) "data")
    let (set_data : t -> int list -> unit) =
      fun (x21 : t) ->
        fun (x22 : int list) ->
          Ojs.set_prop_ascii (t_to_js x21) "data"
            (Ojs.list_to_js Ojs.int_to_js x22)
  end
module AnonymousInterface3 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x25 : Ojs.t) -> x25
    and t_to_js : t -> Ojs.t = fun (x24 : Ojs.t) -> x24
    let (value_of : t -> 'T) =
      fun (x26 : t) -> Obj.magic (Ojs.call (t_to_js x26) "valueOf" [||])
  end
module CallSite =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x28 : Ojs.t) -> x28
    and t_to_js : t -> Ojs.t = fun (x27 : Ojs.t) -> x27
    let (get_this : t -> any) =
      fun (x29 : t) -> any_of_js (Ojs.call (t_to_js x29) "getThis" [||])
    let (get_type_name : t -> string or_null) =
      fun (x30 : t) ->
        or_null_of_js Ojs.string_of_js
          (Ojs.call (t_to_js x30) "getTypeName" [||])
    let (get_function : t -> untyped_function or_undefined) =
      fun (x32 : t) ->
        or_undefined_of_js untyped_function_of_js
          (Ojs.call (t_to_js x32) "getFunction" [||])
    let (get_function_name : t -> string or_null) =
      fun (x34 : t) ->
        or_null_of_js Ojs.string_of_js
          (Ojs.call (t_to_js x34) "getFunctionName" [||])
    let (get_method_name : t -> string or_null) =
      fun (x36 : t) ->
        or_null_of_js Ojs.string_of_js
          (Ojs.call (t_to_js x36) "getMethodName" [||])
    let (get_file_name : t -> string or_null) =
      fun (x38 : t) ->
        or_null_of_js Ojs.string_of_js
          (Ojs.call (t_to_js x38) "getFileName" [||])
    let (get_line_number : t -> int or_null) =
      fun (x40 : t) ->
        or_null_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x40) "getLineNumber" [||])
    let (get_column_number : t -> int or_null) =
      fun (x42 : t) ->
        or_null_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x42) "getColumnNumber" [||])
    let (get_eval_origin : t -> string or_undefined) =
      fun (x44 : t) ->
        or_undefined_of_js Ojs.string_of_js
          (Ojs.call (t_to_js x44) "getEvalOrigin" [||])
    let (is_toplevel : t -> bool) =
      fun (x46 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x46) "isToplevel" [||])
    let (is_eval : t -> bool) =
      fun (x47 : t) -> Ojs.bool_of_js (Ojs.call (t_to_js x47) "isEval" [||])
    let (is_native : t -> bool) =
      fun (x48 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x48) "isNative" [||])
    let (is_constructor : t -> bool) =
      fun (x49 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x49) "isConstructor" [||])
  end
module ErrorConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x51 : Ojs.t) -> x51
    and t_to_js : t -> Ojs.t = fun (x50 : Ojs.t) -> x50
    let (capture_stack_trace :
      t ->
        target_object:untyped_object ->
          ?constructor_opt:untyped_function -> unit -> unit)
      =
      fun (x56 : t) ->
        fun ~target_object:(x52 : untyped_object) ->
          fun ?constructor_opt:(x53 : untyped_function option) ->
            fun () ->
              ignore
                (let x57 = t_to_js x56 in
                 Ojs.call (Ojs.get_prop_ascii x57 "captureStackTrace")
                   "apply"
                   [|x57;((let x54 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x54 "push"
                                [|(untyped_object_to_js x52)|]);
                           (match x53 with
                            | Some x55 ->
                                ignore
                                  (Ojs.call x54 "push"
                                     [|(untyped_function_to_js x55)|])
                            | None -> ());
                           x54))|])
    let (prepare_stack_trace :
      t -> err:Error.t -> stack_traces:CallSite.t list -> any) =
      fun (x61 : t) ->
        fun ~err:(x58 : Error.t) ->
          fun ~stack_traces:(x59 : CallSite.t list) ->
            any_of_js
              (Ojs.call (t_to_js x61) "prepareStackTrace"
                 [|(Error.t_to_js x58);(Ojs.list_to_js CallSite.t_to_js x59)|])
    let (get_stack_trace_limit : t -> int) =
      fun (x62 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x62) "stackTraceLimit")
    let (set_stack_trace_limit : t -> int -> unit) =
      fun (x63 : t) ->
        fun (x64 : int) ->
          Ojs.set_prop_ascii (t_to_js x63) "stackTraceLimit"
            (Ojs.int_to_js x64)
  end
module String =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x66 : Ojs.t) -> x66
    and t_to_js : t -> Ojs.t = fun (x65 : Ojs.t) -> x65
    let (trim_left : t -> string) =
      fun (x67 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x67) "trimLeft" [||])
    let (trim_right : t -> string) =
      fun (x68 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x68) "trimRight" [||])
    let (trim_start : t -> string) =
      fun (x69 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x69) "trimStart" [||])
    let (trim_end : t -> string) =
      fun (x70 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x70) "trimEnd" [||])
    let (to_ml : t -> string) =
      fun (x71 : t) -> Ojs.string_of_js (t_to_js x71)
    let (of_ml : string -> t) =
      fun (x72 : string) -> t_of_js (Ojs.string_to_js x72)
  end
module ImportMeta =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x74 : Ojs.t) -> x74
    and t_to_js : t -> Ojs.t = fun (x73 : Ojs.t) -> x73
    let (get_url : t -> string) =
      fun (x75 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x75) "url")
    let (set_url : t -> string -> unit) =
      fun (x76 : t) ->
        fun (x77 : string) ->
          Ojs.set_prop_ascii (t_to_js x76) "url" (Ojs.string_to_js x77)
  end
module BufferEncoding =
  struct
    type t =
      [ `ascii  | `base64  | `binary  | `hex  | `latin1  | `ucs_2  | 
        `ucs2 
      | `utf_8  | `utf16le  | `utf8  | `buffer ]
    let rec t_of_js : Ojs.t -> t =
      fun (x79 : Ojs.t) ->
        let x80 = x79 in
        match Ojs.string_of_js x80 with
        | "ascii" -> `ascii
        | "base64" -> `base64
        | "binary" -> `binary
        | "hex" -> `hex
        | "latin1" -> `latin1
        | "ucs-2" -> `ucs_2
        | "ucs2" -> `ucs2
        | "utf-8" -> `utf_8
        | "utf16le" -> `utf16le
        | "utf8" -> `utf8
        | "buffer" -> `buffer
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x78 :
          [ `ascii  | `base64  | `binary  | `hex  | `latin1  | `ucs_2 
          | `ucs2  | `utf_8  | `utf16le  | `utf8  | `buffer ])
        ->
        match x78 with
        | `ascii -> Ojs.string_to_js "ascii"
        | `base64 -> Ojs.string_to_js "base64"
        | `binary -> Ojs.string_to_js "binary"
        | `hex -> Ojs.string_to_js "hex"
        | `latin1 -> Ojs.string_to_js "latin1"
        | `ucs_2 -> Ojs.string_to_js "ucs-2"
        | `ucs2 -> Ojs.string_to_js "ucs2"
        | `utf_8 -> Ojs.string_to_js "utf-8"
        | `utf16le -> Ojs.string_to_js "utf16le"
        | `utf8 -> Ojs.string_to_js "utf8"
        | `buffer -> Ojs.string_to_js "buffer"
  end
module WithImplicitCoercion =
  struct
    type 'T t = ('T, AnonymousInterface3.t) union2
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x84 : Ojs.t) ->
          union2_of_js __T_of_js AnonymousInterface3.t_of_js x84
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x81 : (__T, AnonymousInterface3.t) union2) ->
          union2_to_js __T_to_js AnonymousInterface3.t_to_js x81
  end
module Buffer =
  struct
    include struct include Uint8Array end
    let (create : str:string -> ?encoding:BufferEncoding.t -> unit -> t) =
      fun ~str:(x87 : string) ->
        fun ?encoding:(x88 : BufferEncoding.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Buffer")
                 (let x89 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x89 "push" [|(Ojs.string_to_js x87)|]);
                  (match x88 with
                   | Some x90 ->
                       ignore
                         (Ojs.call x89 "push"
                            [|(BufferEncoding.t_to_js x90)|])
                   | None -> ());
                  x89))
    let (create' : size:int -> t) =
      fun ~size:(x91 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(Ojs.int_to_js x91)|])
    let (create'' : array:Uint8Array.t -> t) =
      fun ~array:(x92 : Uint8Array.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(Uint8Array.t_to_js x92)|])
    let (create''' :
      array_buffer:(ArrayBuffer.t, SharedArrayBuffer.t) union2 -> t) =
      fun ~array_buffer:(x93 : (ArrayBuffer.t, SharedArrayBuffer.t) union2)
        ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(union2_to_js ArrayBuffer.t_to_js SharedArrayBuffer.t_to_js
                  x93)|])
    let (create'''' : array:any list -> t) =
      fun ~array:(x96 : any list) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(Ojs.list_to_js any_to_js x96)|])
    let (create''''' : buffer:t -> t) =
      fun ~buffer:(x98 : t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(t_to_js x98)|])
    let (from :
      array_buffer:(ArrayBuffer.t, SharedArrayBuffer.t) union2
        WithImplicitCoercion.t ->
        ?byte_offset:int -> ?length:int -> unit -> t)
      =
      fun
        ~array_buffer:(x99 :
                        (ArrayBuffer.t, SharedArrayBuffer.t) union2
                          WithImplicitCoercion.t)
        ->
        fun ?byte_offset:(x100 : int option) ->
          fun ?length:(x101 : int option) ->
            fun () ->
              t_of_js
                (let x108 = Ojs.get_prop_ascii Ojs.global "Buffer" in
                 Ojs.call (Ojs.get_prop_ascii x108 "from") "apply"
                   [|x108;((let x102 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x102 "push"
                                 [|(WithImplicitCoercion.t_to_js
                                      (fun
                                         (x105 :
                                           (ArrayBuffer.t,
                                             SharedArrayBuffer.t) union2)
                                         ->
                                         union2_to_js ArrayBuffer.t_to_js
                                           SharedArrayBuffer.t_to_js x105)
                                      x99)|]);
                            (match x100 with
                             | Some x104 ->
                                 ignore
                                   (Ojs.call x102 "push"
                                      [|(Ojs.int_to_js x104)|])
                             | None -> ());
                            (match x101 with
                             | Some x103 ->
                                 ignore
                                   (Ojs.call x102 "push"
                                      [|(Ojs.int_to_js x103)|])
                             | None -> ());
                            x102))|])
    let (from' : data:(Uint8Array.t, int list) union2 -> t) =
      fun ~data:(x109 : (Uint8Array.t, int list) union2) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "from"
             [|(union2_to_js Uint8Array.t_to_js
                  (fun (x111 : int list) -> Ojs.list_to_js Ojs.int_to_js x111)
                  x109)|])
    let (from'' :
      data:(Uint8Array.t, int list) union2 or_string WithImplicitCoercion.t
        -> t)
      =
      fun
        ~data:(x113 :
                (Uint8Array.t, int list) union2 or_string
                  WithImplicitCoercion.t)
        ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "from"
             [|(WithImplicitCoercion.t_to_js
                  (fun (x114 : (Uint8Array.t, int list) union2 or_string) ->
                     or_string_to_js
                       (fun (x115 : (Uint8Array.t, int list) union2) ->
                          union2_to_js Uint8Array.t_to_js
                            (fun (x117 : int list) ->
                               Ojs.list_to_js Ojs.int_to_js x117) x115) x114)
                  x113)|])
    let (of_ : int list -> t) =
      fun (x119 : int list) ->
        t_of_js
          (let x122 = Ojs.get_prop_ascii Ojs.global "Buffer" in
           Ojs.call (Ojs.get_prop_ascii x122 "of") "apply"
             [|x122;((let x120 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      List.iter
                        (fun (x121 : int) ->
                           ignore
                             (Ojs.call x120 "push" [|(Ojs.int_to_js x121)|]))
                        x119;
                      x120))|])
    let (is_buffer : obj:any -> bool) =
      fun ~obj:(x123 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "isBuffer"
             [|(any_to_js x123)|])
    let (is_encoding : encoding:string -> bool) =
      fun ~encoding:(x124 : string) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "isEncoding"
             [|(Ojs.string_to_js x124)|])
    let (byte_length :
      string:(ArrayBuffer.t, ArrayBufferView.t, SharedArrayBuffer.t) union3
        or_string -> ?encoding:BufferEncoding.t -> unit -> int)
      =
      fun
        ~string:(x125 :
                  (ArrayBuffer.t, ArrayBufferView.t, SharedArrayBuffer.t)
                    union3 or_string)
        ->
        fun ?encoding:(x126 : BufferEncoding.t option) ->
          fun () ->
            Ojs.int_of_js
              (let x133 = Ojs.get_prop_ascii Ojs.global "Buffer" in
               Ojs.call (Ojs.get_prop_ascii x133 "byteLength") "apply"
                 [|x133;((let x127 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x127 "push"
                               [|(or_string_to_js
                                    (fun
                                       (x129 :
                                         (ArrayBuffer.t, ArrayBufferView.t,
                                           SharedArrayBuffer.t) union3)
                                       ->
                                       union3_to_js ArrayBuffer.t_to_js
                                         ArrayBufferView.t_to_js
                                         SharedArrayBuffer.t_to_js x129) x125)|]);
                          (match x126 with
                           | Some x128 ->
                               ignore
                                 (Ojs.call x127 "push"
                                    [|(BufferEncoding.t_to_js x128)|])
                           | None -> ());
                          x127))|])
    let (concat : list:Uint8Array.t list -> ?total_length:int -> unit -> t) =
      fun ~list:(x134 : Uint8Array.t list) ->
        fun ?total_length:(x135 : int option) ->
          fun () ->
            t_of_js
              (let x139 = Ojs.get_prop_ascii Ojs.global "Buffer" in
               Ojs.call (Ojs.get_prop_ascii x139 "concat") "apply"
                 [|x139;((let x136 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x136 "push"
                               [|(Ojs.list_to_js Uint8Array.t_to_js x134)|]);
                          (match x135 with
                           | Some x137 ->
                               ignore
                                 (Ojs.call x136 "push"
                                    [|(Ojs.int_to_js x137)|])
                           | None -> ());
                          x136))|])
    let (compare : buf1:Uint8Array.t -> buf2:Uint8Array.t -> int) =
      fun ~buf1:(x140 : Uint8Array.t) ->
        fun ~buf2:(x141 : Uint8Array.t) ->
          Ojs.int_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "compare"
               [|(Uint8Array.t_to_js x140);(Uint8Array.t_to_js x141)|])
    let (alloc :
      size:int ->
        ?fill:t or_string or_number ->
          ?encoding:BufferEncoding.t -> unit -> t)
      =
      fun ~size:(x142 : int) ->
        fun ?fill:(x143 : t or_string or_number option) ->
          fun ?encoding:(x144 : BufferEncoding.t option) ->
            fun () ->
              t_of_js
                (let x150 = Ojs.get_prop_ascii Ojs.global "Buffer" in
                 Ojs.call (Ojs.get_prop_ascii x150 "alloc") "apply"
                   [|x150;((let x145 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x145 "push" [|(Ojs.int_to_js x142)|]);
                            (match x143 with
                             | Some x147 ->
                                 ignore
                                   (Ojs.call x145 "push"
                                      [|(or_number_to_js
                                           (fun (x148 : t or_string) ->
                                              or_string_to_js t_to_js x148)
                                           x147)|])
                             | None -> ());
                            (match x144 with
                             | Some x146 ->
                                 ignore
                                   (Ojs.call x145 "push"
                                      [|(BufferEncoding.t_to_js x146)|])
                             | None -> ());
                            x145))|])
    let (alloc_unsafe : size:int -> t) =
      fun ~size:(x151 : int) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "allocUnsafe"
             [|(Ojs.int_to_js x151)|])
    let (alloc_unsafe_slow : size:int -> t) =
      fun ~size:(x152 : int) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer")
             "allocUnsafeSlow" [|(Ojs.int_to_js x152)|])
    let (get_pool_size : unit -> int) =
      fun () ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Buffer")
             "poolSize")
    let (set_pool_size : int -> unit) =
      fun (x153 : int) ->
        Ojs.set_prop_ascii (Ojs.get_prop_ascii Ojs.global "Buffer")
          "poolSize" (Ojs.int_to_js x153)
    let (write :
      t -> string:string -> ?encoding:BufferEncoding.t -> unit -> int) =
      fun (x158 : t) ->
        fun ~string:(x154 : string) ->
          fun ?encoding:(x155 : BufferEncoding.t option) ->
            fun () ->
              Ojs.int_of_js
                (let x159 = t_to_js x158 in
                 Ojs.call (Ojs.get_prop_ascii x159 "write") "apply"
                   [|x159;((let x156 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x156 "push"
                                 [|(Ojs.string_to_js x154)|]);
                            (match x155 with
                             | Some x157 ->
                                 ignore
                                   (Ojs.call x156 "push"
                                      [|(BufferEncoding.t_to_js x157)|])
                             | None -> ());
                            x156))|])
    let (write' :
      t ->
        string:string ->
          offset:int -> ?encoding:BufferEncoding.t -> unit -> int)
      =
      fun (x165 : t) ->
        fun ~string:(x160 : string) ->
          fun ~offset:(x161 : int) ->
            fun ?encoding:(x162 : BufferEncoding.t option) ->
              fun () ->
                Ojs.int_of_js
                  (let x166 = t_to_js x165 in
                   Ojs.call (Ojs.get_prop_ascii x166 "write") "apply"
                     [|x166;((let x163 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x163 "push"
                                   [|(Ojs.string_to_js x160)|]);
                              ignore
                                (Ojs.call x163 "push"
                                   [|(Ojs.int_to_js x161)|]);
                              (match x162 with
                               | Some x164 ->
                                   ignore
                                     (Ojs.call x163 "push"
                                        [|(BufferEncoding.t_to_js x164)|])
                               | None -> ());
                              x163))|])
    let (write'' :
      t ->
        string:string ->
          offset:int ->
            length:int -> ?encoding:BufferEncoding.t -> unit -> int)
      =
      fun (x173 : t) ->
        fun ~string:(x167 : string) ->
          fun ~offset:(x168 : int) ->
            fun ~length:(x169 : int) ->
              fun ?encoding:(x170 : BufferEncoding.t option) ->
                fun () ->
                  Ojs.int_of_js
                    (let x174 = t_to_js x173 in
                     Ojs.call (Ojs.get_prop_ascii x174 "write") "apply"
                       [|x174;((let x171 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x171 "push"
                                     [|(Ojs.string_to_js x167)|]);
                                ignore
                                  (Ojs.call x171 "push"
                                     [|(Ojs.int_to_js x168)|]);
                                ignore
                                  (Ojs.call x171 "push"
                                     [|(Ojs.int_to_js x169)|]);
                                (match x170 with
                                 | Some x172 ->
                                     ignore
                                       (Ojs.call x171 "push"
                                          [|(BufferEncoding.t_to_js x172)|])
                                 | None -> ());
                                x171))|])
    let (to_string :
      t ->
        ?encoding:BufferEncoding.t ->
          ?start:int -> ?end_:int -> unit -> string)
      =
      fun (x182 : t) ->
        fun ?encoding:(x175 : BufferEncoding.t option) ->
          fun ?start:(x176 : int option) ->
            fun ?end_:(x177 : int option) ->
              fun () ->
                Ojs.string_of_js
                  (let x183 = t_to_js x182 in
                   Ojs.call (Ojs.get_prop_ascii x183 "toString") "apply"
                     [|x183;((let x178 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x175 with
                               | Some x181 ->
                                   ignore
                                     (Ojs.call x178 "push"
                                        [|(BufferEncoding.t_to_js x181)|])
                               | None -> ());
                              (match x176 with
                               | Some x180 ->
                                   ignore
                                     (Ojs.call x178 "push"
                                        [|(Ojs.int_to_js x180)|])
                               | None -> ());
                              (match x177 with
                               | Some x179 ->
                                   ignore
                                     (Ojs.call x178 "push"
                                        [|(Ojs.int_to_js x179)|])
                               | None -> ());
                              x178))|])
    let (to_json : t -> AnonymousInterface2.t) =
      fun (x184 : t) ->
        AnonymousInterface2.t_of_js (Ojs.call (t_to_js x184) "toJSON" [||])
    let (equals : t -> other_buffer:Uint8Array.t -> bool) =
      fun (x186 : t) ->
        fun ~other_buffer:(x185 : Uint8Array.t) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x186) "equals" [|(Uint8Array.t_to_js x185)|])
    let (compare' :
      t ->
        other_buffer:Uint8Array.t ->
          ?target_start:int ->
            ?target_end:int ->
              ?source_start:int -> ?source_end:int -> unit -> int)
      =
      fun (x197 : t) ->
        fun ~other_buffer:(x187 : Uint8Array.t) ->
          fun ?target_start:(x188 : int option) ->
            fun ?target_end:(x189 : int option) ->
              fun ?source_start:(x190 : int option) ->
                fun ?source_end:(x191 : int option) ->
                  fun () ->
                    Ojs.int_of_js
                      (let x198 = t_to_js x197 in
                       Ojs.call (Ojs.get_prop_ascii x198 "compare") "apply"
                         [|x198;((let x192 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x192 "push"
                                       [|(Uint8Array.t_to_js x187)|]);
                                  (match x188 with
                                   | Some x196 ->
                                       ignore
                                         (Ojs.call x192 "push"
                                            [|(Ojs.int_to_js x196)|])
                                   | None -> ());
                                  (match x189 with
                                   | Some x195 ->
                                       ignore
                                         (Ojs.call x192 "push"
                                            [|(Ojs.int_to_js x195)|])
                                   | None -> ());
                                  (match x190 with
                                   | Some x194 ->
                                       ignore
                                         (Ojs.call x192 "push"
                                            [|(Ojs.int_to_js x194)|])
                                   | None -> ());
                                  (match x191 with
                                   | Some x193 ->
                                       ignore
                                         (Ojs.call x192 "push"
                                            [|(Ojs.int_to_js x193)|])
                                   | None -> ());
                                  x192))|])
    let (copy :
      t ->
        target_buffer:Uint8Array.t ->
          ?target_start:int ->
            ?source_start:int -> ?source_end:int -> unit -> int)
      =
      fun (x207 : t) ->
        fun ~target_buffer:(x199 : Uint8Array.t) ->
          fun ?target_start:(x200 : int option) ->
            fun ?source_start:(x201 : int option) ->
              fun ?source_end:(x202 : int option) ->
                fun () ->
                  Ojs.int_of_js
                    (let x208 = t_to_js x207 in
                     Ojs.call (Ojs.get_prop_ascii x208 "copy") "apply"
                       [|x208;((let x203 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x203 "push"
                                     [|(Uint8Array.t_to_js x199)|]);
                                (match x200 with
                                 | Some x206 ->
                                     ignore
                                       (Ojs.call x203 "push"
                                          [|(Ojs.int_to_js x206)|])
                                 | None -> ());
                                (match x201 with
                                 | Some x205 ->
                                     ignore
                                       (Ojs.call x203 "push"
                                          [|(Ojs.int_to_js x205)|])
                                 | None -> ());
                                (match x202 with
                                 | Some x204 ->
                                     ignore
                                       (Ojs.call x203 "push"
                                          [|(Ojs.int_to_js x204)|])
                                 | None -> ());
                                x203))|])
    let (slice : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x214 : t) ->
        fun ?begin_:(x209 : int option) ->
          fun ?end_:(x210 : int option) ->
            fun () ->
              t_of_js
                (let x215 = t_to_js x214 in
                 Ojs.call (Ojs.get_prop_ascii x215 "slice") "apply"
                   [|x215;((let x211 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x209 with
                             | Some x213 ->
                                 ignore
                                   (Ojs.call x211 "push"
                                      [|(Ojs.int_to_js x213)|])
                             | None -> ());
                            (match x210 with
                             | Some x212 ->
                                 ignore
                                   (Ojs.call x211 "push"
                                      [|(Ojs.int_to_js x212)|])
                             | None -> ());
                            x211))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x221 : t) ->
        fun ?begin_:(x216 : int option) ->
          fun ?end_:(x217 : int option) ->
            fun () ->
              t_of_js
                (let x222 = t_to_js x221 in
                 Ojs.call (Ojs.get_prop_ascii x222 "subarray") "apply"
                   [|x222;((let x218 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x216 with
                             | Some x220 ->
                                 ignore
                                   (Ojs.call x218 "push"
                                      [|(Ojs.int_to_js x220)|])
                             | None -> ());
                            (match x217 with
                             | Some x219 ->
                                 ignore
                                   (Ojs.call x218 "push"
                                      [|(Ojs.int_to_js x219)|])
                             | None -> ());
                            x218))|])
    let (write_big_int64_be : t -> bigint -> ?offset:int -> unit -> int) =
      fun (x227 : t) ->
        fun (x223 : bigint) ->
          fun ?offset:(x224 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x228 = t_to_js x227 in
                 Ojs.call (Ojs.get_prop_ascii x228 "writeBigInt64BE") "apply"
                   [|x228;((let x225 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x225 "push" [|(bigint_to_js x223)|]);
                            (match x224 with
                             | Some x226 ->
                                 ignore
                                   (Ojs.call x225 "push"
                                      [|(Ojs.int_to_js x226)|])
                             | None -> ());
                            x225))|])
    let (write_big_int64_le : t -> bigint -> ?offset:int -> unit -> int) =
      fun (x233 : t) ->
        fun (x229 : bigint) ->
          fun ?offset:(x230 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x234 = t_to_js x233 in
                 Ojs.call (Ojs.get_prop_ascii x234 "writeBigInt64LE") "apply"
                   [|x234;((let x231 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x231 "push" [|(bigint_to_js x229)|]);
                            (match x230 with
                             | Some x232 ->
                                 ignore
                                   (Ojs.call x231 "push"
                                      [|(Ojs.int_to_js x232)|])
                             | None -> ());
                            x231))|])
    let (write_big_u_int64_be : t -> bigint -> ?offset:int -> unit -> int) =
      fun (x239 : t) ->
        fun (x235 : bigint) ->
          fun ?offset:(x236 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x240 = t_to_js x239 in
                 Ojs.call (Ojs.get_prop_ascii x240 "writeBigUInt64BE")
                   "apply"
                   [|x240;((let x237 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x237 "push" [|(bigint_to_js x235)|]);
                            (match x236 with
                             | Some x238 ->
                                 ignore
                                   (Ojs.call x237 "push"
                                      [|(Ojs.int_to_js x238)|])
                             | None -> ());
                            x237))|])
    let (write_big_u_int64_le : t -> bigint -> ?offset:int -> unit -> int) =
      fun (x245 : t) ->
        fun (x241 : bigint) ->
          fun ?offset:(x242 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x246 = t_to_js x245 in
                 Ojs.call (Ojs.get_prop_ascii x246 "writeBigUInt64LE")
                   "apply"
                   [|x246;((let x243 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x243 "push" [|(bigint_to_js x241)|]);
                            (match x242 with
                             | Some x244 ->
                                 ignore
                                   (Ojs.call x243 "push"
                                      [|(Ojs.int_to_js x244)|])
                             | None -> ());
                            x243))|])
    let (write_u_int_le :
      t -> value:int -> offset:int -> byte_length:int -> int) =
      fun (x250 : t) ->
        fun ~value:(x247 : int) ->
          fun ~offset:(x248 : int) ->
            fun ~byte_length:(x249 : int) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x250) "writeUIntLE"
                   [|(Ojs.int_to_js x247);(Ojs.int_to_js x248);(Ojs.int_to_js
                                                                  x249)|])
    let (write_u_int_be :
      t -> value:int -> offset:int -> byte_length:int -> int) =
      fun (x254 : t) ->
        fun ~value:(x251 : int) ->
          fun ~offset:(x252 : int) ->
            fun ~byte_length:(x253 : int) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x254) "writeUIntBE"
                   [|(Ojs.int_to_js x251);(Ojs.int_to_js x252);(Ojs.int_to_js
                                                                  x253)|])
    let (write_int_le :
      t -> value:int -> offset:int -> byte_length:int -> int) =
      fun (x258 : t) ->
        fun ~value:(x255 : int) ->
          fun ~offset:(x256 : int) ->
            fun ~byte_length:(x257 : int) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x258) "writeIntLE"
                   [|(Ojs.int_to_js x255);(Ojs.int_to_js x256);(Ojs.int_to_js
                                                                  x257)|])
    let (write_int_be :
      t -> value:int -> offset:int -> byte_length:int -> int) =
      fun (x262 : t) ->
        fun ~value:(x259 : int) ->
          fun ~offset:(x260 : int) ->
            fun ~byte_length:(x261 : int) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x262) "writeIntBE"
                   [|(Ojs.int_to_js x259);(Ojs.int_to_js x260);(Ojs.int_to_js
                                                                  x261)|])
    let (read_big_u_int64_be : t -> ?offset:int -> unit -> bigint) =
      fun (x266 : t) ->
        fun ?offset:(x263 : int option) ->
          fun () ->
            bigint_of_js
              (let x267 = t_to_js x266 in
               Ojs.call (Ojs.get_prop_ascii x267 "readBigUInt64BE") "apply"
                 [|x267;((let x264 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x263 with
                           | Some x265 ->
                               ignore
                                 (Ojs.call x264 "push"
                                    [|(Ojs.int_to_js x265)|])
                           | None -> ());
                          x264))|])
    let (read_big_u_int64_le : t -> ?offset:int -> unit -> bigint) =
      fun (x271 : t) ->
        fun ?offset:(x268 : int option) ->
          fun () ->
            bigint_of_js
              (let x272 = t_to_js x271 in
               Ojs.call (Ojs.get_prop_ascii x272 "readBigUInt64LE") "apply"
                 [|x272;((let x269 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x268 with
                           | Some x270 ->
                               ignore
                                 (Ojs.call x269 "push"
                                    [|(Ojs.int_to_js x270)|])
                           | None -> ());
                          x269))|])
    let (read_big_int64_be : t -> ?offset:int -> unit -> bigint) =
      fun (x276 : t) ->
        fun ?offset:(x273 : int option) ->
          fun () ->
            bigint_of_js
              (let x277 = t_to_js x276 in
               Ojs.call (Ojs.get_prop_ascii x277 "readBigInt64BE") "apply"
                 [|x277;((let x274 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x273 with
                           | Some x275 ->
                               ignore
                                 (Ojs.call x274 "push"
                                    [|(Ojs.int_to_js x275)|])
                           | None -> ());
                          x274))|])
    let (read_big_int64_le : t -> ?offset:int -> unit -> bigint) =
      fun (x281 : t) ->
        fun ?offset:(x278 : int option) ->
          fun () ->
            bigint_of_js
              (let x282 = t_to_js x281 in
               Ojs.call (Ojs.get_prop_ascii x282 "readBigInt64LE") "apply"
                 [|x282;((let x279 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x278 with
                           | Some x280 ->
                               ignore
                                 (Ojs.call x279 "push"
                                    [|(Ojs.int_to_js x280)|])
                           | None -> ());
                          x279))|])
    let (read_u_int_le : t -> offset:int -> byte_length:int -> int) =
      fun (x285 : t) ->
        fun ~offset:(x283 : int) ->
          fun ~byte_length:(x284 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x285) "readUIntLE"
                 [|(Ojs.int_to_js x283);(Ojs.int_to_js x284)|])
    let (read_u_int_be : t -> offset:int -> byte_length:int -> int) =
      fun (x288 : t) ->
        fun ~offset:(x286 : int) ->
          fun ~byte_length:(x287 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x288) "readUIntBE"
                 [|(Ojs.int_to_js x286);(Ojs.int_to_js x287)|])
    let (read_int_le : t -> offset:int -> byte_length:int -> int) =
      fun (x291 : t) ->
        fun ~offset:(x289 : int) ->
          fun ~byte_length:(x290 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x291) "readIntLE"
                 [|(Ojs.int_to_js x289);(Ojs.int_to_js x290)|])
    let (read_int_be : t -> offset:int -> byte_length:int -> int) =
      fun (x294 : t) ->
        fun ~offset:(x292 : int) ->
          fun ~byte_length:(x293 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x294) "readIntBE"
                 [|(Ojs.int_to_js x292);(Ojs.int_to_js x293)|])
    let (read_u_int8 : t -> ?offset:int -> unit -> int) =
      fun (x298 : t) ->
        fun ?offset:(x295 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x299 = t_to_js x298 in
               Ojs.call (Ojs.get_prop_ascii x299 "readUInt8") "apply"
                 [|x299;((let x296 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x295 with
                           | Some x297 ->
                               ignore
                                 (Ojs.call x296 "push"
                                    [|(Ojs.int_to_js x297)|])
                           | None -> ());
                          x296))|])
    let (read_u_int16_le : t -> ?offset:int -> unit -> int) =
      fun (x303 : t) ->
        fun ?offset:(x300 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x304 = t_to_js x303 in
               Ojs.call (Ojs.get_prop_ascii x304 "readUInt16LE") "apply"
                 [|x304;((let x301 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x300 with
                           | Some x302 ->
                               ignore
                                 (Ojs.call x301 "push"
                                    [|(Ojs.int_to_js x302)|])
                           | None -> ());
                          x301))|])
    let (read_u_int16_be : t -> ?offset:int -> unit -> int) =
      fun (x308 : t) ->
        fun ?offset:(x305 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x309 = t_to_js x308 in
               Ojs.call (Ojs.get_prop_ascii x309 "readUInt16BE") "apply"
                 [|x309;((let x306 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x305 with
                           | Some x307 ->
                               ignore
                                 (Ojs.call x306 "push"
                                    [|(Ojs.int_to_js x307)|])
                           | None -> ());
                          x306))|])
    let (read_u_int32_le : t -> ?offset:int -> unit -> int) =
      fun (x313 : t) ->
        fun ?offset:(x310 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x314 = t_to_js x313 in
               Ojs.call (Ojs.get_prop_ascii x314 "readUInt32LE") "apply"
                 [|x314;((let x311 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x310 with
                           | Some x312 ->
                               ignore
                                 (Ojs.call x311 "push"
                                    [|(Ojs.int_to_js x312)|])
                           | None -> ());
                          x311))|])
    let (read_u_int32_be : t -> ?offset:int -> unit -> int) =
      fun (x318 : t) ->
        fun ?offset:(x315 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x319 = t_to_js x318 in
               Ojs.call (Ojs.get_prop_ascii x319 "readUInt32BE") "apply"
                 [|x319;((let x316 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x315 with
                           | Some x317 ->
                               ignore
                                 (Ojs.call x316 "push"
                                    [|(Ojs.int_to_js x317)|])
                           | None -> ());
                          x316))|])
    let (read_int8 : t -> ?offset:int -> unit -> int) =
      fun (x323 : t) ->
        fun ?offset:(x320 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x324 = t_to_js x323 in
               Ojs.call (Ojs.get_prop_ascii x324 "readInt8") "apply"
                 [|x324;((let x321 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x320 with
                           | Some x322 ->
                               ignore
                                 (Ojs.call x321 "push"
                                    [|(Ojs.int_to_js x322)|])
                           | None -> ());
                          x321))|])
    let (read_int16_le : t -> ?offset:int -> unit -> int) =
      fun (x328 : t) ->
        fun ?offset:(x325 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x329 = t_to_js x328 in
               Ojs.call (Ojs.get_prop_ascii x329 "readInt16LE") "apply"
                 [|x329;((let x326 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x325 with
                           | Some x327 ->
                               ignore
                                 (Ojs.call x326 "push"
                                    [|(Ojs.int_to_js x327)|])
                           | None -> ());
                          x326))|])
    let (read_int16_be : t -> ?offset:int -> unit -> int) =
      fun (x333 : t) ->
        fun ?offset:(x330 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x334 = t_to_js x333 in
               Ojs.call (Ojs.get_prop_ascii x334 "readInt16BE") "apply"
                 [|x334;((let x331 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x330 with
                           | Some x332 ->
                               ignore
                                 (Ojs.call x331 "push"
                                    [|(Ojs.int_to_js x332)|])
                           | None -> ());
                          x331))|])
    let (read_int32_le : t -> ?offset:int -> unit -> int) =
      fun (x338 : t) ->
        fun ?offset:(x335 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x339 = t_to_js x338 in
               Ojs.call (Ojs.get_prop_ascii x339 "readInt32LE") "apply"
                 [|x339;((let x336 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x335 with
                           | Some x337 ->
                               ignore
                                 (Ojs.call x336 "push"
                                    [|(Ojs.int_to_js x337)|])
                           | None -> ());
                          x336))|])
    let (read_int32_be : t -> ?offset:int -> unit -> int) =
      fun (x343 : t) ->
        fun ?offset:(x340 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x344 = t_to_js x343 in
               Ojs.call (Ojs.get_prop_ascii x344 "readInt32BE") "apply"
                 [|x344;((let x341 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x340 with
                           | Some x342 ->
                               ignore
                                 (Ojs.call x341 "push"
                                    [|(Ojs.int_to_js x342)|])
                           | None -> ());
                          x341))|])
    let (read_float_le : t -> ?offset:int -> unit -> int) =
      fun (x348 : t) ->
        fun ?offset:(x345 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x349 = t_to_js x348 in
               Ojs.call (Ojs.get_prop_ascii x349 "readFloatLE") "apply"
                 [|x349;((let x346 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x345 with
                           | Some x347 ->
                               ignore
                                 (Ojs.call x346 "push"
                                    [|(Ojs.int_to_js x347)|])
                           | None -> ());
                          x346))|])
    let (read_float_be : t -> ?offset:int -> unit -> int) =
      fun (x353 : t) ->
        fun ?offset:(x350 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x354 = t_to_js x353 in
               Ojs.call (Ojs.get_prop_ascii x354 "readFloatBE") "apply"
                 [|x354;((let x351 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x350 with
                           | Some x352 ->
                               ignore
                                 (Ojs.call x351 "push"
                                    [|(Ojs.int_to_js x352)|])
                           | None -> ());
                          x351))|])
    let (read_double_le : t -> ?offset:int -> unit -> int) =
      fun (x358 : t) ->
        fun ?offset:(x355 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x359 = t_to_js x358 in
               Ojs.call (Ojs.get_prop_ascii x359 "readDoubleLE") "apply"
                 [|x359;((let x356 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x355 with
                           | Some x357 ->
                               ignore
                                 (Ojs.call x356 "push"
                                    [|(Ojs.int_to_js x357)|])
                           | None -> ());
                          x356))|])
    let (read_double_be : t -> ?offset:int -> unit -> int) =
      fun (x363 : t) ->
        fun ?offset:(x360 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x364 = t_to_js x363 in
               Ojs.call (Ojs.get_prop_ascii x364 "readDoubleBE") "apply"
                 [|x364;((let x361 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x360 with
                           | Some x362 ->
                               ignore
                                 (Ojs.call x361 "push"
                                    [|(Ojs.int_to_js x362)|])
                           | None -> ());
                          x361))|])
    let (reverse : t -> t) =
      fun (x365 : t) -> t_of_js (Ojs.call (t_to_js x365) "reverse" [||])
    let (swap16 : t -> t) =
      fun (x366 : t) -> t_of_js (Ojs.call (t_to_js x366) "swap16" [||])
    let (swap32 : t -> t) =
      fun (x367 : t) -> t_of_js (Ojs.call (t_to_js x367) "swap32" [||])
    let (swap64 : t -> t) =
      fun (x368 : t) -> t_of_js (Ojs.call (t_to_js x368) "swap64" [||])
    let (write_u_int8 : t -> int -> ?offset:int -> unit -> int) =
      fun (x373 : t) ->
        fun (x369 : int) ->
          fun ?offset:(x370 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x374 = t_to_js x373 in
                 Ojs.call (Ojs.get_prop_ascii x374 "writeUInt8") "apply"
                   [|x374;((let x371 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x371 "push" [|(Ojs.int_to_js x369)|]);
                            (match x370 with
                             | Some x372 ->
                                 ignore
                                   (Ojs.call x371 "push"
                                      [|(Ojs.int_to_js x372)|])
                             | None -> ());
                            x371))|])
    let (write_u_int16_le : t -> int -> ?offset:int -> unit -> int) =
      fun (x379 : t) ->
        fun (x375 : int) ->
          fun ?offset:(x376 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x380 = t_to_js x379 in
                 Ojs.call (Ojs.get_prop_ascii x380 "writeUInt16LE") "apply"
                   [|x380;((let x377 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x377 "push" [|(Ojs.int_to_js x375)|]);
                            (match x376 with
                             | Some x378 ->
                                 ignore
                                   (Ojs.call x377 "push"
                                      [|(Ojs.int_to_js x378)|])
                             | None -> ());
                            x377))|])
    let (write_u_int16_be : t -> int -> ?offset:int -> unit -> int) =
      fun (x385 : t) ->
        fun (x381 : int) ->
          fun ?offset:(x382 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x386 = t_to_js x385 in
                 Ojs.call (Ojs.get_prop_ascii x386 "writeUInt16BE") "apply"
                   [|x386;((let x383 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x383 "push" [|(Ojs.int_to_js x381)|]);
                            (match x382 with
                             | Some x384 ->
                                 ignore
                                   (Ojs.call x383 "push"
                                      [|(Ojs.int_to_js x384)|])
                             | None -> ());
                            x383))|])
    let (write_u_int32_le : t -> int -> ?offset:int -> unit -> int) =
      fun (x391 : t) ->
        fun (x387 : int) ->
          fun ?offset:(x388 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x392 = t_to_js x391 in
                 Ojs.call (Ojs.get_prop_ascii x392 "writeUInt32LE") "apply"
                   [|x392;((let x389 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x389 "push" [|(Ojs.int_to_js x387)|]);
                            (match x388 with
                             | Some x390 ->
                                 ignore
                                   (Ojs.call x389 "push"
                                      [|(Ojs.int_to_js x390)|])
                             | None -> ());
                            x389))|])
    let (write_u_int32_be : t -> int -> ?offset:int -> unit -> int) =
      fun (x397 : t) ->
        fun (x393 : int) ->
          fun ?offset:(x394 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x398 = t_to_js x397 in
                 Ojs.call (Ojs.get_prop_ascii x398 "writeUInt32BE") "apply"
                   [|x398;((let x395 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x395 "push" [|(Ojs.int_to_js x393)|]);
                            (match x394 with
                             | Some x396 ->
                                 ignore
                                   (Ojs.call x395 "push"
                                      [|(Ojs.int_to_js x396)|])
                             | None -> ());
                            x395))|])
    let (write_int8 : t -> int -> ?offset:int -> unit -> int) =
      fun (x403 : t) ->
        fun (x399 : int) ->
          fun ?offset:(x400 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x404 = t_to_js x403 in
                 Ojs.call (Ojs.get_prop_ascii x404 "writeInt8") "apply"
                   [|x404;((let x401 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x401 "push" [|(Ojs.int_to_js x399)|]);
                            (match x400 with
                             | Some x402 ->
                                 ignore
                                   (Ojs.call x401 "push"
                                      [|(Ojs.int_to_js x402)|])
                             | None -> ());
                            x401))|])
    let (write_int16_le : t -> int -> ?offset:int -> unit -> int) =
      fun (x409 : t) ->
        fun (x405 : int) ->
          fun ?offset:(x406 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x410 = t_to_js x409 in
                 Ojs.call (Ojs.get_prop_ascii x410 "writeInt16LE") "apply"
                   [|x410;((let x407 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x407 "push" [|(Ojs.int_to_js x405)|]);
                            (match x406 with
                             | Some x408 ->
                                 ignore
                                   (Ojs.call x407 "push"
                                      [|(Ojs.int_to_js x408)|])
                             | None -> ());
                            x407))|])
    let (write_int16_be : t -> int -> ?offset:int -> unit -> int) =
      fun (x415 : t) ->
        fun (x411 : int) ->
          fun ?offset:(x412 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x416 = t_to_js x415 in
                 Ojs.call (Ojs.get_prop_ascii x416 "writeInt16BE") "apply"
                   [|x416;((let x413 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x413 "push" [|(Ojs.int_to_js x411)|]);
                            (match x412 with
                             | Some x414 ->
                                 ignore
                                   (Ojs.call x413 "push"
                                      [|(Ojs.int_to_js x414)|])
                             | None -> ());
                            x413))|])
    let (write_int32_le : t -> int -> ?offset:int -> unit -> int) =
      fun (x421 : t) ->
        fun (x417 : int) ->
          fun ?offset:(x418 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x422 = t_to_js x421 in
                 Ojs.call (Ojs.get_prop_ascii x422 "writeInt32LE") "apply"
                   [|x422;((let x419 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x419 "push" [|(Ojs.int_to_js x417)|]);
                            (match x418 with
                             | Some x420 ->
                                 ignore
                                   (Ojs.call x419 "push"
                                      [|(Ojs.int_to_js x420)|])
                             | None -> ());
                            x419))|])
    let (write_int32_be : t -> int -> ?offset:int -> unit -> int) =
      fun (x427 : t) ->
        fun (x423 : int) ->
          fun ?offset:(x424 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x428 = t_to_js x427 in
                 Ojs.call (Ojs.get_prop_ascii x428 "writeInt32BE") "apply"
                   [|x428;((let x425 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x425 "push" [|(Ojs.int_to_js x423)|]);
                            (match x424 with
                             | Some x426 ->
                                 ignore
                                   (Ojs.call x425 "push"
                                      [|(Ojs.int_to_js x426)|])
                             | None -> ());
                            x425))|])
    let (write_float_le : t -> int -> ?offset:int -> unit -> int) =
      fun (x433 : t) ->
        fun (x429 : int) ->
          fun ?offset:(x430 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x434 = t_to_js x433 in
                 Ojs.call (Ojs.get_prop_ascii x434 "writeFloatLE") "apply"
                   [|x434;((let x431 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x431 "push" [|(Ojs.int_to_js x429)|]);
                            (match x430 with
                             | Some x432 ->
                                 ignore
                                   (Ojs.call x431 "push"
                                      [|(Ojs.int_to_js x432)|])
                             | None -> ());
                            x431))|])
    let (write_float_be : t -> int -> ?offset:int -> unit -> int) =
      fun (x439 : t) ->
        fun (x435 : int) ->
          fun ?offset:(x436 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x440 = t_to_js x439 in
                 Ojs.call (Ojs.get_prop_ascii x440 "writeFloatBE") "apply"
                   [|x440;((let x437 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x437 "push" [|(Ojs.int_to_js x435)|]);
                            (match x436 with
                             | Some x438 ->
                                 ignore
                                   (Ojs.call x437 "push"
                                      [|(Ojs.int_to_js x438)|])
                             | None -> ());
                            x437))|])
    let (write_double_le : t -> int -> ?offset:int -> unit -> int) =
      fun (x445 : t) ->
        fun (x441 : int) ->
          fun ?offset:(x442 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x446 = t_to_js x445 in
                 Ojs.call (Ojs.get_prop_ascii x446 "writeDoubleLE") "apply"
                   [|x446;((let x443 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x443 "push" [|(Ojs.int_to_js x441)|]);
                            (match x442 with
                             | Some x444 ->
                                 ignore
                                   (Ojs.call x443 "push"
                                      [|(Ojs.int_to_js x444)|])
                             | None -> ());
                            x443))|])
    let (write_double_be : t -> int -> ?offset:int -> unit -> int) =
      fun (x451 : t) ->
        fun (x447 : int) ->
          fun ?offset:(x448 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x452 = t_to_js x451 in
                 Ojs.call (Ojs.get_prop_ascii x452 "writeDoubleBE") "apply"
                   [|x452;((let x449 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x449 "push" [|(Ojs.int_to_js x447)|]);
                            (match x448 with
                             | Some x450 ->
                                 ignore
                                   (Ojs.call x449 "push"
                                      [|(Ojs.int_to_js x450)|])
                             | None -> ());
                            x449))|])
    let (fill :
      t ->
        value:Uint8Array.t or_string or_number ->
          ?offset:int -> ?end_:int -> ?encoding:BufferEncoding.t -> unit -> t)
      =
      fun (x463 : t) ->
        fun ~value:(x453 : Uint8Array.t or_string or_number) ->
          fun ?offset:(x454 : int option) ->
            fun ?end_:(x455 : int option) ->
              fun ?encoding:(x456 : BufferEncoding.t option) ->
                fun () ->
                  t_of_js
                    (let x464 = t_to_js x463 in
                     Ojs.call (Ojs.get_prop_ascii x464 "fill") "apply"
                       [|x464;((let x457 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x457 "push"
                                     [|(or_number_to_js
                                          (fun
                                             (x461 : Uint8Array.t or_string)
                                             ->
                                             or_string_to_js
                                               Uint8Array.t_to_js x461) x453)|]);
                                (match x454 with
                                 | Some x460 ->
                                     ignore
                                       (Ojs.call x457 "push"
                                          [|(Ojs.int_to_js x460)|])
                                 | None -> ());
                                (match x455 with
                                 | Some x459 ->
                                     ignore
                                       (Ojs.call x457 "push"
                                          [|(Ojs.int_to_js x459)|])
                                 | None -> ());
                                (match x456 with
                                 | Some x458 ->
                                     ignore
                                       (Ojs.call x457 "push"
                                          [|(BufferEncoding.t_to_js x458)|])
                                 | None -> ());
                                x457))|])
    let (index_of :
      t ->
        value:Uint8Array.t or_string or_number ->
          ?byte_offset:int -> ?encoding:BufferEncoding.t -> unit -> int)
      =
      fun (x473 : t) ->
        fun ~value:(x465 : Uint8Array.t or_string or_number) ->
          fun ?byte_offset:(x466 : int option) ->
            fun ?encoding:(x467 : BufferEncoding.t option) ->
              fun () ->
                Ojs.int_of_js
                  (let x474 = t_to_js x473 in
                   Ojs.call (Ojs.get_prop_ascii x474 "indexOf") "apply"
                     [|x474;((let x468 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x468 "push"
                                   [|(or_number_to_js
                                        (fun (x471 : Uint8Array.t or_string)
                                           ->
                                           or_string_to_js Uint8Array.t_to_js
                                             x471) x465)|]);
                              (match x466 with
                               | Some x470 ->
                                   ignore
                                     (Ojs.call x468 "push"
                                        [|(Ojs.int_to_js x470)|])
                               | None -> ());
                              (match x467 with
                               | Some x469 ->
                                   ignore
                                     (Ojs.call x468 "push"
                                        [|(BufferEncoding.t_to_js x469)|])
                               | None -> ());
                              x468))|])
    let (last_index_of :
      t ->
        value:Uint8Array.t or_string or_number ->
          ?byte_offset:int -> ?encoding:BufferEncoding.t -> unit -> int)
      =
      fun (x483 : t) ->
        fun ~value:(x475 : Uint8Array.t or_string or_number) ->
          fun ?byte_offset:(x476 : int option) ->
            fun ?encoding:(x477 : BufferEncoding.t option) ->
              fun () ->
                Ojs.int_of_js
                  (let x484 = t_to_js x483 in
                   Ojs.call (Ojs.get_prop_ascii x484 "lastIndexOf") "apply"
                     [|x484;((let x478 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x478 "push"
                                   [|(or_number_to_js
                                        (fun (x481 : Uint8Array.t or_string)
                                           ->
                                           or_string_to_js Uint8Array.t_to_js
                                             x481) x475)|]);
                              (match x476 with
                               | Some x480 ->
                                   ignore
                                     (Ojs.call x478 "push"
                                        [|(Ojs.int_to_js x480)|])
                               | None -> ());
                              (match x477 with
                               | Some x479 ->
                                   ignore
                                     (Ojs.call x478 "push"
                                        [|(BufferEncoding.t_to_js x479)|])
                               | None -> ());
                              x478))|])
    let (entries : t -> (int * int) IterableIterator.t) =
      fun (x485 : t) ->
        IterableIterator.t_of_js
          (fun (x486 : Ojs.t) ->
             let x487 = x486 in
             ((Ojs.int_of_js (Ojs.array_get x487 0)),
               (Ojs.int_of_js (Ojs.array_get x487 1))))
          (Ojs.call (t_to_js x485) "entries" [||])
    let (includes :
      t ->
        value:t or_string or_number ->
          ?byte_offset:int -> ?encoding:BufferEncoding.t -> unit -> bool)
      =
      fun (x496 : t) ->
        fun ~value:(x488 : t or_string or_number) ->
          fun ?byte_offset:(x489 : int option) ->
            fun ?encoding:(x490 : BufferEncoding.t option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x497 = t_to_js x496 in
                   Ojs.call (Ojs.get_prop_ascii x497 "includes") "apply"
                     [|x497;((let x491 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x491 "push"
                                   [|(or_number_to_js
                                        (fun (x494 : t or_string) ->
                                           or_string_to_js t_to_js x494) x488)|]);
                              (match x489 with
                               | Some x493 ->
                                   ignore
                                     (Ojs.call x491 "push"
                                        [|(Ojs.int_to_js x493)|])
                               | None -> ());
                              (match x490 with
                               | Some x492 ->
                                   ignore
                                     (Ojs.call x491 "push"
                                        [|(BufferEncoding.t_to_js x492)|])
                               | None -> ());
                              x491))|])
    let (keys : t -> int IterableIterator.t) =
      fun (x498 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x498) "keys" [||])
    let (values : t -> int IterableIterator.t) =
      fun (x500 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x500) "values" [||])
  end
module InspectOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x503 : Ojs.t) -> x503
    and t_to_js : t -> Ojs.t = fun (x502 : Ojs.t) -> x502
    let (get_getters : t -> [ `get  | `set ] or_boolean) =
      fun (x504 : t) ->
        or_boolean_of_js
          (fun (x505 : Ojs.t) ->
             let x506 = x505 in
             match Ojs.string_of_js x506 with
             | "get" -> `get
             | "set" -> `set
             | _ -> assert false)
          (Ojs.get_prop_ascii (t_to_js x504) "getters")
    let (set_getters : t -> [ `get  | `set ] or_boolean -> unit) =
      fun (x507 : t) ->
        fun (x508 : [ `get  | `set ] or_boolean) ->
          Ojs.set_prop_ascii (t_to_js x507) "getters"
            (or_boolean_to_js
               (fun (x509 : [ `get  | `set ]) ->
                  match x509 with
                  | `get -> Ojs.string_to_js "get"
                  | `set -> Ojs.string_to_js "set") x508)
    let (get_show_hidden : t -> bool) =
      fun (x510 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x510) "showHidden")
    let (set_show_hidden : t -> bool -> unit) =
      fun (x511 : t) ->
        fun (x512 : bool) ->
          Ojs.set_prop_ascii (t_to_js x511) "showHidden"
            (Ojs.bool_to_js x512)
    let (get_depth : t -> int or_null) =
      fun (x513 : t) ->
        or_null_of_js Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x513) "depth")
    let (set_depth : t -> int or_null -> unit) =
      fun (x515 : t) ->
        fun (x516 : int or_null) ->
          Ojs.set_prop_ascii (t_to_js x515) "depth"
            (or_null_to_js Ojs.int_to_js x516)
    let (get_colors : t -> bool) =
      fun (x518 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x518) "colors")
    let (set_colors : t -> bool -> unit) =
      fun (x519 : t) ->
        fun (x520 : bool) ->
          Ojs.set_prop_ascii (t_to_js x519) "colors" (Ojs.bool_to_js x520)
    let (get_custom_inspect : t -> bool) =
      fun (x521 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x521) "customInspect")
    let (set_custom_inspect : t -> bool -> unit) =
      fun (x522 : t) ->
        fun (x523 : bool) ->
          Ojs.set_prop_ascii (t_to_js x522) "customInspect"
            (Ojs.bool_to_js x523)
    let (get_show_proxy : t -> bool) =
      fun (x524 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x524) "showProxy")
    let (set_show_proxy : t -> bool -> unit) =
      fun (x525 : t) ->
        fun (x526 : bool) ->
          Ojs.set_prop_ascii (t_to_js x525) "showProxy" (Ojs.bool_to_js x526)
    let (get_max_array_length : t -> int or_null) =
      fun (x527 : t) ->
        or_null_of_js Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x527) "maxArrayLength")
    let (set_max_array_length : t -> int or_null -> unit) =
      fun (x529 : t) ->
        fun (x530 : int or_null) ->
          Ojs.set_prop_ascii (t_to_js x529) "maxArrayLength"
            (or_null_to_js Ojs.int_to_js x530)
    let (get_max_string_length : t -> int or_null) =
      fun (x532 : t) ->
        or_null_of_js Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x532) "maxStringLength")
    let (set_max_string_length : t -> int or_null -> unit) =
      fun (x534 : t) ->
        fun (x535 : int or_null) ->
          Ojs.set_prop_ascii (t_to_js x534) "maxStringLength"
            (or_null_to_js Ojs.int_to_js x535)
    let (get_break_length : t -> int) =
      fun (x537 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x537) "breakLength")
    let (set_break_length : t -> int -> unit) =
      fun (x538 : t) ->
        fun (x539 : int) ->
          Ojs.set_prop_ascii (t_to_js x538) "breakLength"
            (Ojs.int_to_js x539)
    let (get_compact : t -> bool or_number) =
      fun (x540 : t) ->
        or_number_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x540) "compact")
    let (set_compact : t -> bool or_number -> unit) =
      fun (x542 : t) ->
        fun (x543 : bool or_number) ->
          Ojs.set_prop_ascii (t_to_js x542) "compact"
            (or_number_to_js Ojs.bool_to_js x543)
    let (get_sorted : t -> (a:string -> b:string -> int) or_boolean) =
      fun (x545 : t) ->
        or_boolean_of_js
          (fun (x546 : Ojs.t) ->
             fun ~a:(x547 : string) ->
               fun ~b:(x548 : string) ->
                 Ojs.int_of_js
                   (Ojs.apply x546
                      [|(Ojs.string_to_js x547);(Ojs.string_to_js x548)|]))
          (Ojs.get_prop_ascii (t_to_js x545) "sorted")
    let (set_sorted : t -> (a:string -> b:string -> int) or_boolean -> unit)
      =
      fun (x549 : t) ->
        fun (x550 : (a:string -> b:string -> int) or_boolean) ->
          Ojs.set_prop_ascii (t_to_js x549) "sorted"
            (or_boolean_to_js
               (fun (x551 : a:string -> b:string -> int) ->
                  Ojs.fun_to_js 2
                    (fun (x552 : Ojs.t) ->
                       fun (x553 : Ojs.t) ->
                         Ojs.int_to_js
                           (x551 ~a:(Ojs.string_of_js x552)
                              ~b:(Ojs.string_of_js x553)))) x550)
  end
module ErrnoException =
  struct
    include struct include Error end
    let (get_errno : t -> int) =
      fun (x554 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x554) "errno")
    let (set_errno : t -> int -> unit) =
      fun (x555 : t) ->
        fun (x556 : int) ->
          Ojs.set_prop_ascii (t_to_js x555) "errno" (Ojs.int_to_js x556)
    let (get_code : t -> string) =
      fun (x557 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x557) "code")
    let (set_code : t -> string -> unit) =
      fun (x558 : t) ->
        fun (x559 : string) ->
          Ojs.set_prop_ascii (t_to_js x558) "code" (Ojs.string_to_js x559)
    let (get_path : t -> string) =
      fun (x560 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x560) "path")
    let (set_path : t -> string -> unit) =
      fun (x561 : t) ->
        fun (x562 : string) ->
          Ojs.set_prop_ascii (t_to_js x561) "path" (Ojs.string_to_js x562)
    let (get_syscall : t -> string) =
      fun (x563 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x563) "syscall")
    let (set_syscall : t -> string -> unit) =
      fun (x564 : t) ->
        fun (x565 : string) ->
          Ojs.set_prop_ascii (t_to_js x564) "syscall" (Ojs.string_to_js x565)
    let (get_stack : t -> string) =
      fun (x566 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x566) "stack")
    let (set_stack : t -> string -> unit) =
      fun (x567 : t) ->
        fun (x568 : string) ->
          Ojs.set_prop_ascii (t_to_js x567) "stack" (Ojs.string_to_js x568)
  end
type stream = Ojs.t
let rec stream_of_js : Ojs.t -> stream = fun (x570 : Ojs.t) -> x570
and stream_to_js : stream -> Ojs.t = fun (x569 : Ojs.t) -> x569
module WritableStream =
  struct
    type t = stream
    let rec t_of_js : Ojs.t -> t = fun (x572 : Ojs.t) -> stream_of_js x572
    and t_to_js : t -> Ojs.t = fun (x571 : stream) -> stream_to_js x571
    let (get_writable : t -> bool) =
      fun (x573 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x573) "writable")
    let (set_writable : t -> bool -> unit) =
      fun (x574 : t) ->
        fun (x575 : bool) ->
          Ojs.set_prop_ascii (t_to_js x574) "writable" (Ojs.bool_to_js x575)
    let (write :
      t ->
        buffer:Uint8Array.t or_string ->
          ?cb:(?err:Error.t or_null -> unit -> unit) -> unit -> bool)
      =
      fun (x584 : t) ->
        fun ~buffer:(x576 : Uint8Array.t or_string) ->
          fun ?cb:(x577 : (?err:Error.t or_null -> unit -> unit) option) ->
            fun () ->
              Ojs.bool_of_js
                (let x585 = t_to_js x584 in
                 Ojs.call (Ojs.get_prop_ascii x585 "write") "apply"
                   [|x585;((let x578 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x578 "push"
                                 [|(or_string_to_js Uint8Array.t_to_js x576)|]);
                            (match x577 with
                             | Some x579 ->
                                 ignore
                                   (Ojs.call x578 "push"
                                      [|(Ojs.fun_to_js 1
                                           (fun (x580 : Ojs.t) ->
                                              x579
                                                ?err:(Ojs.option_of_js
                                                        (fun (x581 : Ojs.t)
                                                           ->
                                                           or_null_of_js
                                                             Error.t_of_js
                                                             x581) x580) ()))|])
                             | None -> ());
                            x578))|])
    let (write' :
      t ->
        str:string ->
          ?encoding:BufferEncoding.t ->
            ?cb:(?err:Error.t or_null -> unit -> unit) -> unit -> bool)
      =
      fun (x595 : t) ->
        fun ~str:(x586 : string) ->
          fun ?encoding:(x587 : BufferEncoding.t option) ->
            fun ?cb:(x588 : (?err:Error.t or_null -> unit -> unit) option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x596 = t_to_js x595 in
                   Ojs.call (Ojs.get_prop_ascii x596 "write") "apply"
                     [|x596;((let x589 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x589 "push"
                                   [|(Ojs.string_to_js x586)|]);
                              (match x587 with
                               | Some x594 ->
                                   ignore
                                     (Ojs.call x589 "push"
                                        [|(BufferEncoding.t_to_js x594)|])
                               | None -> ());
                              (match x588 with
                               | Some x590 ->
                                   ignore
                                     (Ojs.call x589 "push"
                                        [|(Ojs.fun_to_js 1
                                             (fun (x591 : Ojs.t) ->
                                                x590
                                                  ?err:(Ojs.option_of_js
                                                          (fun (x592 : Ojs.t)
                                                             ->
                                                             or_null_of_js
                                                               Error.t_of_js
                                                               x592) x591) ()))|])
                               | None -> ());
                              x589))|])
    let (end_ : t -> ?cb:(unit -> unit) -> unit -> unit) =
      fun (x600 : t) ->
        fun ?cb:(x597 : (unit -> unit) option) ->
          fun () ->
            ignore
              (let x601 = t_to_js x600 in
               Ojs.call (Ojs.get_prop_ascii x601 "end") "apply"
                 [|x601;((let x598 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x597 with
                           | Some x599 ->
                               ignore
                                 (Ojs.call x598 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x599 ()))|])
                           | None -> ());
                          x598))|])
    let (end' :
      t -> data:Uint8Array.t or_string -> ?cb:(unit -> unit) -> unit -> unit)
      =
      fun (x607 : t) ->
        fun ~data:(x602 : Uint8Array.t or_string) ->
          fun ?cb:(x603 : (unit -> unit) option) ->
            fun () ->
              ignore
                (let x608 = t_to_js x607 in
                 Ojs.call (Ojs.get_prop_ascii x608 "end") "apply"
                   [|x608;((let x604 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x604 "push"
                                 [|(or_string_to_js Uint8Array.t_to_js x602)|]);
                            (match x603 with
                             | Some x605 ->
                                 ignore
                                   (Ojs.call x604 "push"
                                      [|(Ojs.fun_to_js 1 (fun _ -> x605 ()))|])
                             | None -> ());
                            x604))|])
    let (end'' :
      t ->
        str:string ->
          ?encoding:BufferEncoding.t -> ?cb:(unit -> unit) -> unit -> unit)
      =
      fun (x615 : t) ->
        fun ~str:(x609 : string) ->
          fun ?encoding:(x610 : BufferEncoding.t option) ->
            fun ?cb:(x611 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x616 = t_to_js x615 in
                   Ojs.call (Ojs.get_prop_ascii x616 "end") "apply"
                     [|x616;((let x612 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x612 "push"
                                   [|(Ojs.string_to_js x609)|]);
                              (match x610 with
                               | Some x614 ->
                                   ignore
                                     (Ojs.call x612 "push"
                                        [|(BufferEncoding.t_to_js x614)|])
                               | None -> ());
                              (match x611 with
                               | Some x613 ->
                                   ignore
                                     (Ojs.call x612 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x613 ()))|])
                               | None -> ());
                              x612))|])
  end
module ReadableStream =
  struct
    type t = stream
    let rec t_of_js : Ojs.t -> t = fun (x618 : Ojs.t) -> stream_of_js x618
    and t_to_js : t -> Ojs.t = fun (x617 : stream) -> stream_to_js x617
    let (get_readable : t -> bool) =
      fun (x619 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x619) "readable")
    let (set_readable : t -> bool -> unit) =
      fun (x620 : t) ->
        fun (x621 : bool) ->
          Ojs.set_prop_ascii (t_to_js x620) "readable" (Ojs.bool_to_js x621)
    let (read : t -> ?size:int -> unit -> Buffer.t or_string) =
      fun (x625 : t) ->
        fun ?size:(x622 : int option) ->
          fun () ->
            or_string_of_js Buffer.t_of_js
              (let x626 = t_to_js x625 in
               Ojs.call (Ojs.get_prop_ascii x626 "read") "apply"
                 [|x626;((let x623 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x622 with
                           | Some x624 ->
                               ignore
                                 (Ojs.call x623 "push"
                                    [|(Ojs.int_to_js x624)|])
                           | None -> ());
                          x623))|])
    let (set_encoding : t -> encoding:BufferEncoding.t -> t) =
      fun (x629 : t) ->
        fun ~encoding:(x628 : BufferEncoding.t) ->
          t_of_js
            (Ojs.call (t_to_js x629) "setEncoding"
               [|(BufferEncoding.t_to_js x628)|])
    let (pause : t -> t) =
      fun (x630 : t) -> t_of_js (Ojs.call (t_to_js x630) "pause" [||])
    let (resume : t -> t) =
      fun (x631 : t) -> t_of_js (Ojs.call (t_to_js x631) "resume" [||])
    let (is_paused : t -> bool) =
      fun (x632 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x632) "isPaused" [||])
    let (pipe :
      t -> destination:'T -> ?options:AnonymousInterface0.t -> unit -> 'T) =
      fun (x637 : t) ->
        fun ~destination:(x633 : 'T) ->
          fun ?options:(x634 : AnonymousInterface0.t option) ->
            fun () ->
              Obj.magic
                (let x638 = t_to_js x637 in
                 Ojs.call (Ojs.get_prop_ascii x638 "pipe") "apply"
                   [|x638;((let x635 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x635 "push" [|(Obj.magic x633)|]);
                            (match x634 with
                             | Some x636 ->
                                 ignore
                                   (Ojs.call x635 "push"
                                      [|(AnonymousInterface0.t_to_js x636)|])
                             | None -> ());
                            x635))|])
    let (unpipe : t -> ?destination:WritableStream.t -> unit -> t) =
      fun (x642 : t) ->
        fun ?destination:(x639 : WritableStream.t option) ->
          fun () ->
            t_of_js
              (let x643 = t_to_js x642 in
               Ojs.call (Ojs.get_prop_ascii x643 "unpipe") "apply"
                 [|x643;((let x640 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x639 with
                           | Some x641 ->
                               ignore
                                 (Ojs.call x640 "push"
                                    [|(WritableStream.t_to_js x641)|])
                           | None -> ());
                          x640))|])
    let (unshift :
      t ->
        chunk:Uint8Array.t or_string ->
          ?encoding:BufferEncoding.t -> unit -> unit)
      =
      fun (x649 : t) ->
        fun ~chunk:(x644 : Uint8Array.t or_string) ->
          fun ?encoding:(x645 : BufferEncoding.t option) ->
            fun () ->
              ignore
                (let x650 = t_to_js x649 in
                 Ojs.call (Ojs.get_prop_ascii x650 "unshift") "apply"
                   [|x650;((let x646 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x646 "push"
                                 [|(or_string_to_js Uint8Array.t_to_js x644)|]);
                            (match x645 with
                             | Some x647 ->
                                 ignore
                                   (Ojs.call x646 "push"
                                      [|(BufferEncoding.t_to_js x647)|])
                             | None -> ());
                            x646))|])
    let (wrap : t -> old_stream:t -> t) =
      fun (x652 : t) ->
        fun ~old_stream:(x651 : t) ->
          t_of_js (Ojs.call (t_to_js x652) "wrap" [|(t_to_js x651)|])
  end
module ReadWriteStream =
  struct
    include struct include ReadableStream end
    let (cast' : t -> WritableStream.t) =
      fun (x653 : t) -> WritableStream.t_of_js (t_to_js x653)
  end
module RefCounted =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x655 : Ojs.t) -> x655
    and t_to_js : t -> Ojs.t = fun (x654 : Ojs.t) -> x654
    let (ref : t -> t) =
      fun (x656 : t) -> t_of_js (Ojs.call (t_to_js x656) "ref" [||])
    let (unref : t -> t) =
      fun (x657 : t) -> t_of_js (Ojs.call (t_to_js x657) "unref" [||])
  end
module Timer =
  struct
    include struct include RefCounted end
    let (has_ref : t -> bool) =
      fun (x658 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x658) "hasRef" [||])
    let (refresh : t -> t) =
      fun (x659 : t) -> t_of_js (Ojs.call (t_to_js x659) "refresh" [||])
  end
module Immediate =
  struct
    include struct include RefCounted end
    let (has_ref : t -> bool) =
      fun (x660 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x660) "hasRef" [||])
    let (get_on_immediate : t -> untyped_function) =
      fun (x661 : t) ->
        untyped_function_of_js
          (Ojs.get_prop_ascii (t_to_js x661) "_onImmediate")
    let (set_on_immediate : t -> untyped_function -> unit) =
      fun (x662 : t) ->
        fun (x663 : untyped_function) ->
          Ojs.set_prop_ascii (t_to_js x662) "_onImmediate"
            (untyped_function_to_js x663)
  end
module Timeout =
  struct
    include struct include Timer end
    let (has_ref : t -> bool) =
      fun (x664 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x664) "hasRef" [||])
    let (refresh : t -> t) =
      fun (x665 : t) -> t_of_js (Ojs.call (t_to_js x665) "refresh" [||])
  end
module Global =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x667 : Ojs.t) -> x667
    and t_to_js : t -> Ojs.t = fun (x666 : Ojs.t) -> x666
    let (get_array : t -> any) =
      fun (x668 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x668) "Array")
    let (set_array : t -> any -> unit) =
      fun (x669 : t) ->
        fun (x670 : any) ->
          Ojs.set_prop_ascii (t_to_js x669) "Array" (any_to_js x670)
    let (get_array_buffer : t -> any) =
      fun (x671 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x671) "ArrayBuffer")
    let (set_array_buffer : t -> any -> unit) =
      fun (x672 : t) ->
        fun (x673 : any) ->
          Ojs.set_prop_ascii (t_to_js x672) "ArrayBuffer" (any_to_js x673)
    let (get_boolean : t -> any) =
      fun (x674 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x674) "Boolean")
    let (set_boolean : t -> any -> unit) =
      fun (x675 : t) ->
        fun (x676 : any) ->
          Ojs.set_prop_ascii (t_to_js x675) "Boolean" (any_to_js x676)
    let (get_buffer : t -> any) =
      fun (x677 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x677) "Buffer")
    let (set_buffer : t -> any -> unit) =
      fun (x678 : t) ->
        fun (x679 : any) ->
          Ojs.set_prop_ascii (t_to_js x678) "Buffer" (any_to_js x679)
    let (get_data_view : t -> any) =
      fun (x680 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x680) "DataView")
    let (set_data_view : t -> any -> unit) =
      fun (x681 : t) ->
        fun (x682 : any) ->
          Ojs.set_prop_ascii (t_to_js x681) "DataView" (any_to_js x682)
    let (get_date : t -> any) =
      fun (x683 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x683) "Date")
    let (set_date : t -> any -> unit) =
      fun (x684 : t) ->
        fun (x685 : any) ->
          Ojs.set_prop_ascii (t_to_js x684) "Date" (any_to_js x685)
    let (get_error : t -> any) =
      fun (x686 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x686) "Error")
    let (set_error : t -> any -> unit) =
      fun (x687 : t) ->
        fun (x688 : any) ->
          Ojs.set_prop_ascii (t_to_js x687) "Error" (any_to_js x688)
    let (get_eval_error : t -> any) =
      fun (x689 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x689) "EvalError")
    let (set_eval_error : t -> any -> unit) =
      fun (x690 : t) ->
        fun (x691 : any) ->
          Ojs.set_prop_ascii (t_to_js x690) "EvalError" (any_to_js x691)
    let (get_float32_array : t -> any) =
      fun (x692 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x692) "Float32Array")
    let (set_float32_array : t -> any -> unit) =
      fun (x693 : t) ->
        fun (x694 : any) ->
          Ojs.set_prop_ascii (t_to_js x693) "Float32Array" (any_to_js x694)
    let (get_float64_array : t -> any) =
      fun (x695 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x695) "Float64Array")
    let (set_float64_array : t -> any -> unit) =
      fun (x696 : t) ->
        fun (x697 : any) ->
          Ojs.set_prop_ascii (t_to_js x696) "Float64Array" (any_to_js x697)
    let (get_function : t -> any) =
      fun (x698 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x698) "Function")
    let (set_function : t -> any -> unit) =
      fun (x699 : t) ->
        fun (x700 : any) ->
          Ojs.set_prop_ascii (t_to_js x699) "Function" (any_to_js x700)
    let (get_infinity : t -> any) =
      fun (x701 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x701) "Infinity")
    let (set_infinity : t -> any -> unit) =
      fun (x702 : t) ->
        fun (x703 : any) ->
          Ojs.set_prop_ascii (t_to_js x702) "Infinity" (any_to_js x703)
    let (get_int16_array : t -> any) =
      fun (x704 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x704) "Int16Array")
    let (set_int16_array : t -> any -> unit) =
      fun (x705 : t) ->
        fun (x706 : any) ->
          Ojs.set_prop_ascii (t_to_js x705) "Int16Array" (any_to_js x706)
    let (get_int32_array : t -> any) =
      fun (x707 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x707) "Int32Array")
    let (set_int32_array : t -> any -> unit) =
      fun (x708 : t) ->
        fun (x709 : any) ->
          Ojs.set_prop_ascii (t_to_js x708) "Int32Array" (any_to_js x709)
    let (get_int8_array : t -> any) =
      fun (x710 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x710) "Int8Array")
    let (set_int8_array : t -> any -> unit) =
      fun (x711 : t) ->
        fun (x712 : any) ->
          Ojs.set_prop_ascii (t_to_js x711) "Int8Array" (any_to_js x712)
    let (get_intl : t -> any) =
      fun (x713 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x713) "Intl")
    let (set_intl : t -> any -> unit) =
      fun (x714 : t) ->
        fun (x715 : any) ->
          Ojs.set_prop_ascii (t_to_js x714) "Intl" (any_to_js x715)
    let (get_json : t -> any) =
      fun (x716 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x716) "JSON")
    let (set_json : t -> any -> unit) =
      fun (x717 : t) ->
        fun (x718 : any) ->
          Ojs.set_prop_ascii (t_to_js x717) "JSON" (any_to_js x718)
    let (get_map : t -> MapConstructor.t) =
      fun (x719 : t) ->
        MapConstructor.t_of_js (Ojs.get_prop_ascii (t_to_js x719) "Map")
    let (set_map : t -> MapConstructor.t -> unit) =
      fun (x720 : t) ->
        fun (x721 : MapConstructor.t) ->
          Ojs.set_prop_ascii (t_to_js x720) "Map"
            (MapConstructor.t_to_js x721)
    let (get_math : t -> any) =
      fun (x722 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x722) "Math")
    let (set_math : t -> any -> unit) =
      fun (x723 : t) ->
        fun (x724 : any) ->
          Ojs.set_prop_ascii (t_to_js x723) "Math" (any_to_js x724)
    let (get_nan : t -> any) =
      fun (x725 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x725) "NaN")
    let (set_nan : t -> any -> unit) =
      fun (x726 : t) ->
        fun (x727 : any) ->
          Ojs.set_prop_ascii (t_to_js x726) "NaN" (any_to_js x727)
    let (get_number : t -> any) =
      fun (x728 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x728) "Number")
    let (set_number : t -> any -> unit) =
      fun (x729 : t) ->
        fun (x730 : any) ->
          Ojs.set_prop_ascii (t_to_js x729) "Number" (any_to_js x730)
    let (get_object : t -> any) =
      fun (x731 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x731) "Object")
    let (set_object : t -> any -> unit) =
      fun (x732 : t) ->
        fun (x733 : any) ->
          Ojs.set_prop_ascii (t_to_js x732) "Object" (any_to_js x733)
    let (get_promise : t -> any) =
      fun (x734 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x734) "Promise")
    let (set_promise : t -> any -> unit) =
      fun (x735 : t) ->
        fun (x736 : any) ->
          Ojs.set_prop_ascii (t_to_js x735) "Promise" (any_to_js x736)
    let (get_range_error : t -> any) =
      fun (x737 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x737) "RangeError")
    let (set_range_error : t -> any -> unit) =
      fun (x738 : t) ->
        fun (x739 : any) ->
          Ojs.set_prop_ascii (t_to_js x738) "RangeError" (any_to_js x739)
    let (get_reference_error : t -> any) =
      fun (x740 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x740) "ReferenceError")
    let (set_reference_error : t -> any -> unit) =
      fun (x741 : t) ->
        fun (x742 : any) ->
          Ojs.set_prop_ascii (t_to_js x741) "ReferenceError" (any_to_js x742)
    let (get_reg_exp : t -> any) =
      fun (x743 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x743) "RegExp")
    let (set_reg_exp : t -> any -> unit) =
      fun (x744 : t) ->
        fun (x745 : any) ->
          Ojs.set_prop_ascii (t_to_js x744) "RegExp" (any_to_js x745)
    let (get_set : t -> SetConstructor.t) =
      fun (x746 : t) ->
        SetConstructor.t_of_js (Ojs.get_prop_ascii (t_to_js x746) "Set")
    let (set_set : t -> SetConstructor.t -> unit) =
      fun (x747 : t) ->
        fun (x748 : SetConstructor.t) ->
          Ojs.set_prop_ascii (t_to_js x747) "Set"
            (SetConstructor.t_to_js x748)
    let (get_string : t -> any) =
      fun (x749 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x749) "String")
    let (set_string : t -> any -> unit) =
      fun (x750 : t) ->
        fun (x751 : any) ->
          Ojs.set_prop_ascii (t_to_js x750) "String" (any_to_js x751)
    let (get_symbol : t -> untyped_function) =
      fun (x752 : t) ->
        untyped_function_of_js (Ojs.get_prop_ascii (t_to_js x752) "Symbol")
    let (set_symbol : t -> untyped_function -> unit) =
      fun (x753 : t) ->
        fun (x754 : untyped_function) ->
          Ojs.set_prop_ascii (t_to_js x753) "Symbol"
            (untyped_function_to_js x754)
    let (get_syntax_error : t -> any) =
      fun (x755 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x755) "SyntaxError")
    let (set_syntax_error : t -> any -> unit) =
      fun (x756 : t) ->
        fun (x757 : any) ->
          Ojs.set_prop_ascii (t_to_js x756) "SyntaxError" (any_to_js x757)
    let (get_type_error : t -> any) =
      fun (x758 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x758) "TypeError")
    let (set_type_error : t -> any -> unit) =
      fun (x759 : t) ->
        fun (x760 : any) ->
          Ojs.set_prop_ascii (t_to_js x759) "TypeError" (any_to_js x760)
    let (get_uri_error : t -> any) =
      fun (x761 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x761) "URIError")
    let (set_uri_error : t -> any -> unit) =
      fun (x762 : t) ->
        fun (x763 : any) ->
          Ojs.set_prop_ascii (t_to_js x762) "URIError" (any_to_js x763)
    let (get_uint16_array : t -> any) =
      fun (x764 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x764) "Uint16Array")
    let (set_uint16_array : t -> any -> unit) =
      fun (x765 : t) ->
        fun (x766 : any) ->
          Ojs.set_prop_ascii (t_to_js x765) "Uint16Array" (any_to_js x766)
    let (get_uint32_array : t -> any) =
      fun (x767 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x767) "Uint32Array")
    let (set_uint32_array : t -> any -> unit) =
      fun (x768 : t) ->
        fun (x769 : any) ->
          Ojs.set_prop_ascii (t_to_js x768) "Uint32Array" (any_to_js x769)
    let (get_uint8_array : t -> any) =
      fun (x770 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x770) "Uint8Array")
    let (set_uint8_array : t -> any -> unit) =
      fun (x771 : t) ->
        fun (x772 : any) ->
          Ojs.set_prop_ascii (t_to_js x771) "Uint8Array" (any_to_js x772)
    let (get_uint8_clamped_array : t -> any) =
      fun (x773 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x773) "Uint8ClampedArray")
    let (set_uint8_clamped_array : t -> any -> unit) =
      fun (x774 : t) ->
        fun (x775 : any) ->
          Ojs.set_prop_ascii (t_to_js x774) "Uint8ClampedArray"
            (any_to_js x775)
    let (get_weak_map : t -> WeakMapConstructor.t) =
      fun (x776 : t) ->
        WeakMapConstructor.t_of_js
          (Ojs.get_prop_ascii (t_to_js x776) "WeakMap")
    let (set_weak_map : t -> WeakMapConstructor.t -> unit) =
      fun (x777 : t) ->
        fun (x778 : WeakMapConstructor.t) ->
          Ojs.set_prop_ascii (t_to_js x777) "WeakMap"
            (WeakMapConstructor.t_to_js x778)
    let (get_weak_set : t -> WeakSetConstructor.t) =
      fun (x779 : t) ->
        WeakSetConstructor.t_of_js
          (Ojs.get_prop_ascii (t_to_js x779) "WeakSet")
    let (set_weak_set : t -> WeakSetConstructor.t -> unit) =
      fun (x780 : t) ->
        fun (x781 : WeakSetConstructor.t) ->
          Ojs.set_prop_ascii (t_to_js x780) "WeakSet"
            (WeakSetConstructor.t_to_js x781)
    let (clear_immediate : t -> immediate_id:Immediate.t -> unit) =
      fun (x783 : t) ->
        fun ~immediate_id:(x782 : Immediate.t) ->
          ignore
            (Ojs.call (t_to_js x783) "clearImmediate"
               [|(Immediate.t_to_js x782)|])
    let (clear_interval : t -> interval_id:Timeout.t -> unit) =
      fun (x785 : t) ->
        fun ~interval_id:(x784 : Timeout.t) ->
          ignore
            (Ojs.call (t_to_js x785) "clearInterval"
               [|(Timeout.t_to_js x784)|])
    let (clear_timeout : t -> timeout_id:Timeout.t -> unit) =
      fun (x787 : t) ->
        fun ~timeout_id:(x786 : Timeout.t) ->
          ignore
            (Ojs.call (t_to_js x787) "clearTimeout"
               [|(Timeout.t_to_js x786)|])
    let (get_decode_uri : t -> any) =
      fun (x788 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x788) "decodeURI")
    let (set_decode_uri : t -> any -> unit) =
      fun (x789 : t) ->
        fun (x790 : any) ->
          Ojs.set_prop_ascii (t_to_js x789) "decodeURI" (any_to_js x790)
    let (get_decode_uri_component : t -> any) =
      fun (x791 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x791) "decodeURIComponent")
    let (set_decode_uri_component : t -> any -> unit) =
      fun (x792 : t) ->
        fun (x793 : any) ->
          Ojs.set_prop_ascii (t_to_js x792) "decodeURIComponent"
            (any_to_js x793)
    let (get_encode_uri : t -> any) =
      fun (x794 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x794) "encodeURI")
    let (set_encode_uri : t -> any -> unit) =
      fun (x795 : t) ->
        fun (x796 : any) ->
          Ojs.set_prop_ascii (t_to_js x795) "encodeURI" (any_to_js x796)
    let (get_encode_uri_component : t -> any) =
      fun (x797 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x797) "encodeURIComponent")
    let (set_encode_uri_component : t -> any -> unit) =
      fun (x798 : t) ->
        fun (x799 : any) ->
          Ojs.set_prop_ascii (t_to_js x798) "encodeURIComponent"
            (any_to_js x799)
    let (escape : t -> str:string -> string) =
      fun (x801 : t) ->
        fun ~str:(x800 : string) ->
          Ojs.string_of_js
            (Ojs.call (t_to_js x801) "escape" [|(Ojs.string_to_js x800)|])
    let (get_eval : t -> any) =
      fun (x802 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x802) "eval")
    let (set_eval : t -> any -> unit) =
      fun (x803 : t) ->
        fun (x804 : any) ->
          Ojs.set_prop_ascii (t_to_js x803) "eval" (any_to_js x804)
    let (get_global : t -> t) =
      fun (x805 : t) -> t_of_js (Ojs.get_prop_ascii (t_to_js x805) "global")
    let (set_global : t -> t -> unit) =
      fun (x806 : t) ->
        fun (x807 : t) ->
          Ojs.set_prop_ascii (t_to_js x806) "global" (t_to_js x807)
    let (get_is_finite : t -> any) =
      fun (x808 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x808) "isFinite")
    let (set_is_finite : t -> any -> unit) =
      fun (x809 : t) ->
        fun (x810 : any) ->
          Ojs.set_prop_ascii (t_to_js x809) "isFinite" (any_to_js x810)
    let (get_is_nan : t -> any) =
      fun (x811 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x811) "isNaN")
    let (set_is_nan : t -> any -> unit) =
      fun (x812 : t) ->
        fun (x813 : any) ->
          Ojs.set_prop_ascii (t_to_js x812) "isNaN" (any_to_js x813)
    let (get_parse_float : t -> any) =
      fun (x814 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x814) "parseFloat")
    let (set_parse_float : t -> any -> unit) =
      fun (x815 : t) ->
        fun (x816 : any) ->
          Ojs.set_prop_ascii (t_to_js x815) "parseFloat" (any_to_js x816)
    let (get_parse_int : t -> any) =
      fun (x817 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x817) "parseInt")
    let (set_parse_int : t -> any -> unit) =
      fun (x818 : t) ->
        fun (x819 : any) ->
          Ojs.set_prop_ascii (t_to_js x818) "parseInt" (any_to_js x819)
    let (set_immediate :
      t ->
        callback:(args:any list -> unit) ->
          args:any list -> unit -> Immediate.t)
      =
      fun (x826 : t) ->
        fun ~callback:(x820 : args:any list -> unit) ->
          fun ~args:(x821 : any list) ->
            fun () ->
              Immediate.t_of_js
                (let x827 = t_to_js x826 in
                 Ojs.call (Ojs.get_prop_ascii x827 "setImmediate") "apply"
                   [|x827;((let x822 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x822 "push"
                                 [|(Ojs.fun_to_js_args
                                      (fun (x824 : _) ->
                                         x820
                                           ~args:(Ojs.list_of_js_from
                                                    any_of_js x824 0)))|]);
                            List.iter
                              (fun (x823 : any) ->
                                 ignore
                                   (Ojs.call x822 "push" [|(any_to_js x823)|]))
                              x821;
                            x822))|])
    let (set_interval :
      t ->
        callback:(args:any list -> unit) ->
          ?ms:int -> args:any list -> unit -> Timeout.t)
      =
      fun (x836 : t) ->
        fun ~callback:(x828 : args:any list -> unit) ->
          fun ?ms:(x829 : int option) ->
            fun ~args:(x830 : any list) ->
              fun () ->
                Timeout.t_of_js
                  (let x837 = t_to_js x836 in
                   Ojs.call (Ojs.get_prop_ascii x837 "setInterval") "apply"
                     [|x837;((let x831 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x831 "push"
                                   [|(Ojs.fun_to_js_args
                                        (fun (x834 : _) ->
                                           x828
                                             ~args:(Ojs.list_of_js_from
                                                      any_of_js x834 0)))|]);
                              (match x829 with
                               | Some x833 ->
                                   ignore
                                     (Ojs.call x831 "push"
                                        [|(Ojs.int_to_js x833)|])
                               | None -> ());
                              List.iter
                                (fun (x832 : any) ->
                                   ignore
                                     (Ojs.call x831 "push"
                                        [|(any_to_js x832)|])) x830;
                              x831))|])
    let (set_timeout :
      t ->
        callback:(args:any list -> unit) ->
          ?ms:int -> args:any list -> unit -> Timeout.t)
      =
      fun (x846 : t) ->
        fun ~callback:(x838 : args:any list -> unit) ->
          fun ?ms:(x839 : int option) ->
            fun ~args:(x840 : any list) ->
              fun () ->
                Timeout.t_of_js
                  (let x847 = t_to_js x846 in
                   Ojs.call (Ojs.get_prop_ascii x847 "setTimeout") "apply"
                     [|x847;((let x841 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x841 "push"
                                   [|(Ojs.fun_to_js_args
                                        (fun (x844 : _) ->
                                           x838
                                             ~args:(Ojs.list_of_js_from
                                                      any_of_js x844 0)))|]);
                              (match x839 with
                               | Some x843 ->
                                   ignore
                                     (Ojs.call x841 "push"
                                        [|(Ojs.int_to_js x843)|])
                               | None -> ());
                              List.iter
                                (fun (x842 : any) ->
                                   ignore
                                     (Ojs.call x841 "push"
                                        [|(any_to_js x842)|])) x840;
                              x841))|])
    let (queue_microtask : t -> callback:(unit -> unit) -> unit) =
      fun (x849 : t) ->
        fun ~callback:(x848 : unit -> unit) ->
          ignore
            (Ojs.call (t_to_js x849) "queueMicrotask"
               [|(Ojs.fun_to_js 1 (fun _ -> x848 ()))|])
    let (get_undefined : t -> any) =
      fun (x850 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x850) "undefined")
    let (set_undefined : t -> any -> unit) =
      fun (x851 : t) ->
        fun (x852 : any) ->
          Ojs.set_prop_ascii (t_to_js x851) "undefined" (any_to_js x852)
    let (unescape : t -> str:string -> string) =
      fun (x854 : t) ->
        fun ~str:(x853 : string) ->
          Ojs.string_of_js
            (Ojs.call (t_to_js x854) "unescape" [|(Ojs.string_to_js x853)|])
    let (gc : t -> unit) =
      fun (x855 : t) -> ignore (Ojs.call (t_to_js x855) "gc" [||])
    let (get_v8debug : t -> any) =
      fun (x856 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x856) "v8debug")
    let (set_v8debug : t -> any -> unit) =
      fun (x857 : t) ->
        fun (x858 : any) ->
          Ojs.set_prop_ascii (t_to_js x857) "v8debug" (any_to_js x858)
  end
module TypedArray =
  struct
    type t =
      | Float64Array of Float64Array.t 
      | Int16Array of Int16Array.t 
      | Int32Array of Int32Array.t 
      | Int8Array of Int8Array.t 
      | Uint16Array of Uint16Array.t 
      | Uint32Array of Uint32Array.t 
      | Uint8Array of Uint8Array.t 
      | Uint8ClampedArray of Uint8ClampedArray.t 
      | Float32Array of Float32Array.t 
      | BigUint64Array of BigUint64Array.t 
      | BigInt64Array of BigInt64Array.t 
    let rec t_to_js : t -> Ojs.t =
      fun (x859 : t) ->
        match x859 with
        | Float64Array x860 -> Float64Array.t_to_js x860
        | Int16Array x861 -> Int16Array.t_to_js x861
        | Int32Array x862 -> Int32Array.t_to_js x862
        | Int8Array x863 -> Int8Array.t_to_js x863
        | Uint16Array x864 -> Uint16Array.t_to_js x864
        | Uint32Array x865 -> Uint32Array.t_to_js x865
        | Uint8Array x866 -> Uint8Array.t_to_js x866
        | Uint8ClampedArray x867 -> Uint8ClampedArray.t_to_js x867
        | Float32Array x868 -> Float32Array.t_to_js x868
        | BigUint64Array x869 -> BigUint64Array.t_to_js x869
        | BigInt64Array x870 -> BigInt64Array.t_to_js x870
    let t_to_js =
      function
      | Float64Array x -> Obj.magic x
      | Int16Array x -> Obj.magic x
      | Int32Array x -> Obj.magic x
      | Int8Array x -> Obj.magic x
      | Uint16Array x -> Obj.magic x
      | Uint32Array x -> Obj.magic x
      | Uint8Array x -> Obj.magic x
      | Uint8ClampedArray x -> Obj.magic x
      | Float32Array x -> Obj.magic x
      | BigUint64Array x -> Obj.magic x
      | BigInt64Array x -> Obj.magic x
    let t_of_js js =
      match Ojs.obj_type js with
      | "Float64Array" -> Float64Array (Obj.magic js)
      | "Int16Array" -> Int16Array (Obj.magic js)
      | "Int32Array" -> Int32Array (Obj.magic js)
      | "Int8Array" -> Int8Array (Obj.magic js)
      | "Uint16Array" -> Uint16Array (Obj.magic js)
      | "Uint32Array" -> Uint32Array (Obj.magic js)
      | "Uint8Array" -> Uint8Array (Obj.magic js)
      | "Uint8ClampedArray" -> Uint8ClampedArray (Obj.magic js)
      | "Float32Array" -> Float32Array (Obj.magic js)
      | "BigUint64Array" -> BigUint64Array (Obj.magic js)
      | "BigInt64Array" -> BigInt64Array (Obj.magic js)
      | _ -> assert false
  end
module ArrayBufferView =
  struct
    type t = (DataView.t, TypedArray.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x876 : Ojs.t) ->
        union2_of_js DataView.t_of_js TypedArray.t_of_js x876
    and t_to_js : t -> Ojs.t =
      fun (x873 : (DataView.t, TypedArray.t) union2) ->
        union2_to_js DataView.t_to_js TypedArray.t_to_js x873
  end
module Dict =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x880 : Ojs.t) -> x880
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x879 : Ojs.t) -> x879
    let (get : 'T t -> string -> 'T or_undefined) =
      fun (x881 : 'T t) ->
        fun (x883 : string) ->
          or_undefined_of_js Obj.magic
            (Ojs.get_prop (t_to_js Obj.magic x881) (Ojs.string_to_js x883))
    let (set : 'T t -> string -> 'T or_undefined -> unit) =
      fun (x885 : 'T t) ->
        fun (x887 : string) ->
          fun (x888 : 'T or_undefined) ->
            Ojs.set_prop (t_to_js Obj.magic x885) (Ojs.string_to_js x887)
              (or_undefined_to_js Obj.magic x888)
  end
module ReadOnlyDict =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x891 : Ojs.t) -> x891
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x890 : Ojs.t) -> x890
    let (get : 'T t -> string -> 'T or_undefined) =
      fun (x892 : 'T t) ->
        fun (x894 : string) ->
          or_undefined_of_js Obj.magic
            (Ojs.get_prop (t_to_js Obj.magic x892) (Ojs.string_to_js x894))
  end
module Module =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x897 : Ojs.t) -> x897
    and t_to_js : t -> Ojs.t = fun (x896 : Ojs.t) -> x896
    let (get_exports : t -> any) =
      fun (x898 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x898) "exports")
    let (set_exports : t -> any -> unit) =
      fun (x899 : t) ->
        fun (x900 : any) ->
          Ojs.set_prop_ascii (t_to_js x899) "exports" (any_to_js x900)
    let (get_id : t -> string) =
      fun (x901 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x901) "id")
    let (set_id : t -> string -> unit) =
      fun (x902 : t) ->
        fun (x903 : string) ->
          Ojs.set_prop_ascii (t_to_js x902) "id" (Ojs.string_to_js x903)
    let (get_filename : t -> string) =
      fun (x904 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x904) "filename")
    let (set_filename : t -> string -> unit) =
      fun (x905 : t) ->
        fun (x906 : string) ->
          Ojs.set_prop_ascii (t_to_js x905) "filename"
            (Ojs.string_to_js x906)
    let (get_loaded : t -> bool) =
      fun (x907 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x907) "loaded")
    let (set_loaded : t -> bool -> unit) =
      fun (x908 : t) ->
        fun (x909 : bool) ->
          Ojs.set_prop_ascii (t_to_js x908) "loaded" (Ojs.bool_to_js x909)
    let (get_parent : t -> t or_null_or_undefined) =
      fun (x910 : t) ->
        or_null_or_undefined_of_js t_of_js
          (Ojs.get_prop_ascii (t_to_js x910) "parent")
    let (set_parent : t -> t or_null_or_undefined -> unit) =
      fun (x912 : t) ->
        fun (x913 : t or_null_or_undefined) ->
          Ojs.set_prop_ascii (t_to_js x912) "parent"
            (or_null_or_undefined_to_js t_to_js x913)
    let (get_children : t -> t list) =
      fun (x915 : t) ->
        Ojs.list_of_js t_of_js (Ojs.get_prop_ascii (t_to_js x915) "children")
    let (set_children : t -> t list -> unit) =
      fun (x917 : t) ->
        fun (x918 : t list) ->
          Ojs.set_prop_ascii (t_to_js x917) "children"
            (Ojs.list_to_js t_to_js x918)
    let (get_path : t -> string) =
      fun (x920 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x920) "path")
    let (set_path : t -> string -> unit) =
      fun (x921 : t) ->
        fun (x922 : string) ->
          Ojs.set_prop_ascii (t_to_js x921) "path" (Ojs.string_to_js x922)
    let (get_paths : t -> string list) =
      fun (x923 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x923) "paths")
    let (set_paths : t -> string list -> unit) =
      fun (x925 : t) ->
        fun (x926 : string list) ->
          Ojs.set_prop_ascii (t_to_js x925) "paths"
            (Ojs.list_to_js Ojs.string_to_js x926)
  end
module RequireResolve =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x929 : Ojs.t) -> x929
    and t_to_js : t -> Ojs.t = fun (x928 : Ojs.t) -> x928
    let (apply :
      t -> id:string -> ?options:AnonymousInterface1.t -> unit -> string) =
      fun (x934 : t) ->
        fun ~id:(x930 : string) ->
          fun ?options:(x931 : AnonymousInterface1.t option) ->
            fun () ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x934) "apply"
                   [|Ojs.null;((let x932 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x932 "push"
                                     [|(Ojs.string_to_js x930)|]);
                                (match x931 with
                                 | Some x933 ->
                                     ignore
                                       (Ojs.call x932 "push"
                                          [|(AnonymousInterface1.t_to_js x933)|])
                                 | None -> ());
                                x932))|])
    let (paths : t -> request:string -> string list or_null) =
      fun (x936 : t) ->
        fun ~request:(x935 : string) ->
          or_null_of_js
            (fun (x937 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x937)
            (Ojs.call (t_to_js x936) "paths" [|(Ojs.string_to_js x935)|])
  end
module RequireExtensions =
  struct
    type t = (m:Module.t -> filename:string -> any) Dict.t
    let rec t_of_js : Ojs.t -> t =
      fun (x943 : Ojs.t) ->
        Dict.t_of_js
          (fun (x944 : Ojs.t) ->
             fun ~m:(x945 : Module.t) ->
               fun ~filename:(x946 : string) ->
                 any_of_js
                   (Ojs.apply x944
                      [|(Module.t_to_js x945);(Ojs.string_to_js x946)|]))
          x943
    and t_to_js : t -> Ojs.t =
      fun (x939 : (m:Module.t -> filename:string -> any) Dict.t) ->
        Dict.t_to_js
          (fun (x940 : m:Module.t -> filename:string -> any) ->
             Ojs.fun_to_js 2
               (fun (x941 : Ojs.t) ->
                  fun (x942 : Ojs.t) ->
                    any_to_js
                      (x940 ~m:(Module.t_of_js x941)
                         ~filename:(Ojs.string_of_js x942)))) x939
  end
module NodeModule = struct include struct include Module end end
module Require =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x948 : Ojs.t) -> x948
    and t_to_js : t -> Ojs.t = fun (x947 : Ojs.t) -> x947
    let (apply : t -> id:string -> any) =
      fun (x950 : t) ->
        fun ~id:(x949 : string) ->
          any_of_js (Ojs.apply (t_to_js x950) [|(Ojs.string_to_js x949)|])
    let (get_resolve : t -> RequireResolve.t) =
      fun (x951 : t) ->
        RequireResolve.t_of_js (Ojs.get_prop_ascii (t_to_js x951) "resolve")
    let (set_resolve : t -> RequireResolve.t -> unit) =
      fun (x952 : t) ->
        fun (x953 : RequireResolve.t) ->
          Ojs.set_prop_ascii (t_to_js x952) "resolve"
            (RequireResolve.t_to_js x953)
    let (get_cache : t -> NodeModule.t Dict.t) =
      fun (x954 : t) ->
        Dict.t_of_js NodeModule.t_of_js
          (Ojs.get_prop_ascii (t_to_js x954) "cache")
    let (set_cache : t -> NodeModule.t Dict.t -> unit) =
      fun (x956 : t) ->
        fun (x957 : NodeModule.t Dict.t) ->
          Ojs.set_prop_ascii (t_to_js x956) "cache"
            (Dict.t_to_js NodeModule.t_to_js x957)
    let (get_extensions : t -> RequireExtensions.t) =
      fun (x959 : t) ->
        RequireExtensions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x959) "extensions")
    let (set_extensions : t -> RequireExtensions.t -> unit) =
      fun (x960 : t) ->
        fun (x961 : RequireExtensions.t) ->
          Ojs.set_prop_ascii (t_to_js x960) "extensions"
            (RequireExtensions.t_to_js x961)
    let (get_main : t -> Module.t or_undefined) =
      fun (x962 : t) ->
        or_undefined_of_js Module.t_of_js
          (Ojs.get_prop_ascii (t_to_js x962) "main")
    let (set_main : t -> Module.t or_undefined -> unit) =
      fun (x964 : t) ->
        fun (x965 : Module.t or_undefined) ->
          Ojs.set_prop_ascii (t_to_js x964) "main"
            (or_undefined_to_js Module.t_to_js x965)
  end
module NodeRequire = struct include struct include Require end end
let __filename () =
  (Js_of_ocaml.Js.Unsafe.eval_string "__filename") |>
    Js_of_ocaml.Js.to_string
let __dirname () =
  (Js_of_ocaml.Js.Unsafe.eval_string "__dirname") |> Js_of_ocaml.Js.to_string
let (set_timeout :
  callback:(args:any list -> unit) ->
    ?ms:int -> args:any list -> unit -> Timeout.t)
  =
  fun ~callback:(x967 : args:any list -> unit) ->
    fun ?ms:(x968 : int option) ->
      fun ~args:(x969 : any list) ->
        fun () ->
          Timeout.t_of_js
            (let x975 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x975 "setTimeout") "apply"
               [|x975;((let x970 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x970 "push"
                             [|(Ojs.fun_to_js_args
                                  (fun (x973 : _) ->
                                     x967
                                       ~args:(Ojs.list_of_js_from any_of_js
                                                x973 0)))|]);
                        (match x968 with
                         | Some x972 ->
                             ignore
                               (Ojs.call x970 "push" [|(Ojs.int_to_js x972)|])
                         | None -> ());
                        List.iter
                          (fun (x971 : any) ->
                             ignore
                               (Ojs.call x970 "push" [|(any_to_js x971)|]))
                          x969;
                        x970))|])
module SetTimeout =
  struct
    let (__promisify__ : ms:int -> unit Promise.t) =
      fun ~ms:(x976 : int) ->
        Promise.t_of_js Ojs.unit_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "setTimeout")
             "__promisify__" [|(Ojs.int_to_js x976)|])
    let (__promisify__ : ms:int -> value:'T -> 'T Promise.t) =
      fun ~ms:(x978 : int) ->
        fun ~value:(x979 : 'T) ->
          Promise.t_of_js Obj.magic
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "setTimeout")
               "__promisify__" [|(Ojs.int_to_js x978);(Obj.magic x979)|])
  end
let (clear_timeout : timeout_id:Timeout.t -> unit) =
  fun ~timeout_id:(x981 : Timeout.t) ->
    ignore (Ojs.call Ojs.global "clearTimeout" [|(Timeout.t_to_js x981)|])
let (set_interval :
  callback:(args:any list -> unit) ->
    ?ms:int -> args:any list -> unit -> Timeout.t)
  =
  fun ~callback:(x982 : args:any list -> unit) ->
    fun ?ms:(x983 : int option) ->
      fun ~args:(x984 : any list) ->
        fun () ->
          Timeout.t_of_js
            (let x990 = Ojs.global in
             Ojs.call (Ojs.get_prop_ascii x990 "setInterval") "apply"
               [|x990;((let x985 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x985 "push"
                             [|(Ojs.fun_to_js_args
                                  (fun (x988 : _) ->
                                     x982
                                       ~args:(Ojs.list_of_js_from any_of_js
                                                x988 0)))|]);
                        (match x983 with
                         | Some x987 ->
                             ignore
                               (Ojs.call x985 "push" [|(Ojs.int_to_js x987)|])
                         | None -> ());
                        List.iter
                          (fun (x986 : any) ->
                             ignore
                               (Ojs.call x985 "push" [|(any_to_js x986)|]))
                          x984;
                        x985))|])
let (clear_interval : interval_id:Timeout.t -> unit) =
  fun ~interval_id:(x991 : Timeout.t) ->
    ignore (Ojs.call Ojs.global "clearInterval" [|(Timeout.t_to_js x991)|])
let (set_immediate :
  callback:(args:any list -> unit) -> args:any list -> Immediate.t) =
  fun ~callback:(x992 : args:any list -> unit) ->
    fun ~args:(x993 : any list) ->
      Immediate.t_of_js
        (let x998 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x998 "setImmediate") "apply"
           [|x998;((let x994 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    ignore
                      (Ojs.call x994 "push"
                         [|(Ojs.fun_to_js_args
                              (fun (x996 : _) ->
                                 x992
                                   ~args:(Ojs.list_of_js_from any_of_js x996
                                            0)))|]);
                    List.iter
                      (fun (x995 : any) ->
                         ignore (Ojs.call x994 "push" [|(any_to_js x995)|]))
                      x993;
                    x994))|])
module SetImmediate =
  struct
    let (__promisify__ : unit -> unit Promise.t) =
      fun () ->
        Promise.t_of_js Ojs.unit_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "setImmediate")
             "__promisify__" [||])
    let (__promisify__ : value:'T -> 'T Promise.t) =
      fun ~value:(x1000 : 'T) ->
        Promise.t_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "setImmediate")
             "__promisify__" [|(Obj.magic x1000)|])
  end
let (clear_immediate : immediate_id:Immediate.t -> unit) =
  fun ~immediate_id:(x1002 : Immediate.t) ->
    ignore
      (Ojs.call Ojs.global "clearImmediate" [|(Immediate.t_to_js x1002)|])
let (queue_microtask : callback:(unit -> unit) -> unit) =
  fun ~callback:(x1003 : unit -> unit) ->
    ignore
      (Ojs.call Ojs.global "queueMicrotask"
         [|(Ojs.fun_to_js 1 (fun _ -> x1003 ()))|])
let (require : NodeRequire.t) =
  NodeRequire.t_of_js (Ojs.get_prop_ascii Ojs.global "require")
let (module_ : NodeModule.t) =
  NodeModule.t_of_js (Ojs.get_prop_ascii Ojs.global "module")
let (exports : any) = any_of_js (Ojs.get_prop_ascii Ojs.global "exports")
