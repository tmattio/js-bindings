[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_end : t -> bool) =
      fun (x3 : t) -> Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3) "end")
    let (set_end : t -> bool -> unit) =
      fun (x4 : t) ->
        fun (x5 : bool) ->
          Ojs.set_prop_ascii (t_to_js x4) "end" (Ojs.bool_to_js x5)
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7 : Ojs.t) -> x7
    and t_to_js : t -> Ojs.t = fun (x6 : Ojs.t) -> x6
    let (get_paths : t -> string list) =
      fun (x8 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x8) "paths")
    let (set_paths : t -> string list -> unit) =
      fun (x10 : t) ->
        fun (x11 : string list) ->
          Ojs.set_prop_ascii (t_to_js x10) "paths"
            (Ojs.list_to_js Ojs.string_to_js x11)
  end
module AnonymousInterface2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x14 : Ojs.t) -> x14
    and t_to_js : t -> Ojs.t = fun (x13 : Ojs.t) -> x13
    let (get_type : t -> [ `Buffer ]) =
      fun (x15 : t) ->
        let x16 = Ojs.get_prop_ascii (t_to_js x15) "type" in
        match Ojs.string_of_js x16 with
        | "Buffer" -> `Buffer
        | _ -> assert false
    let (set_type : t -> [ `Buffer ] -> unit) =
      fun (x17 : t) ->
        fun (x18 : [ `Buffer ]) ->
          Ojs.set_prop_ascii (t_to_js x17) "type"
            (match x18 with | `Buffer -> Ojs.string_to_js "Buffer")
    let (get_data : t -> int list) =
      fun (x19 : t) ->
        Ojs.list_of_js Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x19) "data")
    let (set_data : t -> int list -> unit) =
      fun (x21 : t) ->
        fun (x22 : int list) ->
          Ojs.set_prop_ascii (t_to_js x21) "data"
            (Ojs.list_to_js Ojs.int_to_js x22)
  end
module AnonymousInterface3 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x25 : Ojs.t) -> x25
    and t_to_js : t -> Ojs.t = fun (x24 : Ojs.t) -> x24
    let (value_of : t -> 'T) =
      fun (x26 : t) -> Obj.magic (Ojs.call (t_to_js x26) "valueOf" [||])
  end
module CallSite =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x28 : Ojs.t) -> x28
    and t_to_js : t -> Ojs.t = fun (x27 : Ojs.t) -> x27
    let (get_this : t -> any) =
      fun (x29 : t) -> any_of_js (Ojs.call (t_to_js x29) "getThis" [||])
    let (get_type_name : t -> string or_null) =
      fun (x30 : t) ->
        or_null_of_js Ojs.string_of_js
          (Ojs.call (t_to_js x30) "getTypeName" [||])
    let (get_function : t -> untyped_function or_undefined) =
      fun (x32 : t) ->
        or_undefined_of_js untyped_function_of_js
          (Ojs.call (t_to_js x32) "getFunction" [||])
    let (get_function_name : t -> string or_null) =
      fun (x34 : t) ->
        or_null_of_js Ojs.string_of_js
          (Ojs.call (t_to_js x34) "getFunctionName" [||])
    let (get_method_name : t -> string or_null) =
      fun (x36 : t) ->
        or_null_of_js Ojs.string_of_js
          (Ojs.call (t_to_js x36) "getMethodName" [||])
    let (get_file_name : t -> string or_null) =
      fun (x38 : t) ->
        or_null_of_js Ojs.string_of_js
          (Ojs.call (t_to_js x38) "getFileName" [||])
    let (get_line_number : t -> int or_null) =
      fun (x40 : t) ->
        or_null_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x40) "getLineNumber" [||])
    let (get_column_number : t -> int or_null) =
      fun (x42 : t) ->
        or_null_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x42) "getColumnNumber" [||])
    let (get_eval_origin : t -> string or_undefined) =
      fun (x44 : t) ->
        or_undefined_of_js Ojs.string_of_js
          (Ojs.call (t_to_js x44) "getEvalOrigin" [||])
    let (is_toplevel : t -> bool) =
      fun (x46 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x46) "isToplevel" [||])
    let (is_eval : t -> bool) =
      fun (x47 : t) -> Ojs.bool_of_js (Ojs.call (t_to_js x47) "isEval" [||])
    let (is_native : t -> bool) =
      fun (x48 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x48) "isNative" [||])
    let (is_constructor : t -> bool) =
      fun (x49 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x49) "isConstructor" [||])
  end
module ErrorConstructor =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x51 : Ojs.t) -> x51
    and t_to_js : t -> Ojs.t = fun (x50 : Ojs.t) -> x50
    let (capture_stack_trace :
      t ->
        targetObject:untyped_object ->
          ?constructorOpt:untyped_function -> unit -> unit)
      =
      fun (x56 : t) ->
        fun ~targetObject:(x52 : untyped_object) ->
          fun ?constructorOpt:(x53 : untyped_function option) ->
            fun () ->
              ignore
                (let x57 = t_to_js x56 in
                 Ojs.call (Ojs.get_prop_ascii x57 "captureStackTrace")
                   "apply"
                   [|x57;((let x54 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x54 "push"
                                [|(untyped_object_to_js x52)|]);
                           (match x53 with
                            | Some x55 ->
                                ignore
                                  (Ojs.call x54 "push"
                                     [|(untyped_function_to_js x55)|])
                            | None -> ());
                           x54))|])
    let (prepare_stack_trace :
      t -> err:Error.t -> stackTraces:CallSite.t list -> any) =
      fun (x61 : t) ->
        fun ~err:(x58 : Error.t) ->
          fun ~stackTraces:(x59 : CallSite.t list) ->
            any_of_js
              (Ojs.call (t_to_js x61) "prepareStackTrace"
                 [|(Error.t_to_js x58);(Ojs.list_to_js CallSite.t_to_js x59)|])
    let (get_stack_trace_limit : t -> int) =
      fun (x62 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x62) "stackTraceLimit")
    let (set_stack_trace_limit : t -> int -> unit) =
      fun (x63 : t) ->
        fun (x64 : int) ->
          Ojs.set_prop_ascii (t_to_js x63) "stackTraceLimit"
            (Ojs.int_to_js x64)
  end
module String =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x66 : Ojs.t) -> x66
    and t_to_js : t -> Ojs.t = fun (x65 : Ojs.t) -> x65
    let (trim_left : t -> string) =
      fun (x67 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x67) "trimLeft" [||])
    let (trim_right : t -> string) =
      fun (x68 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x68) "trimRight" [||])
    let (trim_start : t -> string) =
      fun (x69 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x69) "trimStart" [||])
    let (trim_end : t -> string) =
      fun (x70 : t) ->
        Ojs.string_of_js (Ojs.call (t_to_js x70) "trimEnd" [||])
    let (to_ml : t -> string) =
      fun (x71 : t) -> Ojs.string_of_js (t_to_js x71)
    let (of_ml : string -> t) =
      fun (x72 : string) -> t_of_js (Ojs.string_to_js x72)
  end
module ImportMeta =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x74 : Ojs.t) -> x74
    and t_to_js : t -> Ojs.t = fun (x73 : Ojs.t) -> x73
    let (get_url : t -> string) =
      fun (x75 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x75) "url")
    let (set_url : t -> string -> unit) =
      fun (x76 : t) ->
        fun (x77 : string) ->
          Ojs.set_prop_ascii (t_to_js x76) "url" (Ojs.string_to_js x77)
  end
module BufferEncoding =
  struct
    type t =
      [ `ascii  | `base64  | `binary  | `hex  | `latin1  | `ucs_2  | 
        `ucs2 
      | `utf_8  | `utf16le  | `utf8  | `buffer ]
    let rec t_of_js : Ojs.t -> t =
      fun (x79 : Ojs.t) ->
        let x80 = x79 in
        match Ojs.string_of_js x80 with
        | "ascii" -> `ascii
        | "base64" -> `base64
        | "binary" -> `binary
        | "hex" -> `hex
        | "latin1" -> `latin1
        | "ucs-2" -> `ucs_2
        | "ucs2" -> `ucs2
        | "utf-8" -> `utf_8
        | "utf16le" -> `utf16le
        | "utf8" -> `utf8
        | "buffer" -> `buffer
        | _ -> assert false
    and t_to_js : t -> Ojs.t =
      fun
        (x78 :
          [ `ascii  | `base64  | `binary  | `hex  | `latin1  | `ucs_2 
          | `ucs2  | `utf_8  | `utf16le  | `utf8  | `buffer ])
        ->
        match x78 with
        | `ascii -> Ojs.string_to_js "ascii"
        | `base64 -> Ojs.string_to_js "base64"
        | `binary -> Ojs.string_to_js "binary"
        | `hex -> Ojs.string_to_js "hex"
        | `latin1 -> Ojs.string_to_js "latin1"
        | `ucs_2 -> Ojs.string_to_js "ucs-2"
        | `ucs2 -> Ojs.string_to_js "ucs2"
        | `utf_8 -> Ojs.string_to_js "utf-8"
        | `utf16le -> Ojs.string_to_js "utf16le"
        | `utf8 -> Ojs.string_to_js "utf8"
        | `buffer -> Ojs.string_to_js "buffer"
  end
module WithImplicitCoercion =
  struct
    type 'T t = ('T, AnonymousInterface3.t) union2
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) ->
        fun (x84 : Ojs.t) ->
          union2_of_js __T_of_js AnonymousInterface3.t_of_js x84
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) ->
        fun (x81 : (__T, AnonymousInterface3.t) union2) ->
          union2_to_js __T_to_js AnonymousInterface3.t_to_js x81
  end
module Buffer =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x88 : Ojs.t) -> x88
    and t_to_js : t -> Ojs.t = fun (x87 : Ojs.t) -> x87
    let (create : str:string -> ?encoding:BufferEncoding.t -> unit -> t) =
      fun ~str:(x89 : string) ->
        fun ?encoding:(x90 : BufferEncoding.t option) ->
          fun () ->
            t_of_js
              (Ojs.new_obj_arr (Ojs.get_prop_ascii Ojs.global "Buffer")
                 (let x91 =
                    Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array") [||] in
                  ignore (Ojs.call x91 "push" [|(Ojs.string_to_js x89)|]);
                  (match x90 with
                   | Some x92 ->
                       ignore
                         (Ojs.call x91 "push"
                            [|(BufferEncoding.t_to_js x92)|])
                   | None -> ());
                  x91))
    let (create' : size:int -> t) =
      fun ~size:(x93 : int) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(Ojs.int_to_js x93)|])
    let (create'' : array:Uint8Array.t -> t) =
      fun ~array:(x94 : Uint8Array.t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(Uint8Array.t_to_js x94)|])
    let (create''' :
      arrayBuffer:(ArrayBuffer.t, SharedArrayBuffer.t) union2 -> t) =
      fun ~arrayBuffer:(x95 : (ArrayBuffer.t, SharedArrayBuffer.t) union2) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(union2_to_js ArrayBuffer.t_to_js SharedArrayBuffer.t_to_js
                  x95)|])
    let (create'''' : array:any list -> t) =
      fun ~array:(x98 : any list) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(Ojs.list_to_js any_to_js x98)|])
    let (create''''' : buffer:t -> t) =
      fun ~buffer:(x100 : t) ->
        t_of_js
          (Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Buffer")
             [|(t_to_js x100)|])
    let (from :
      arrayBuffer:(ArrayBuffer.t, SharedArrayBuffer.t) union2
        WithImplicitCoercion.t -> ?byteOffset:int -> ?length:int -> unit -> t)
      =
      fun
        ~arrayBuffer:(x101 :
                       (ArrayBuffer.t, SharedArrayBuffer.t) union2
                         WithImplicitCoercion.t)
        ->
        fun ?byteOffset:(x102 : int option) ->
          fun ?length:(x103 : int option) ->
            fun () ->
              t_of_js
                (let x110 = Ojs.get_prop_ascii Ojs.global "Buffer" in
                 Ojs.call (Ojs.get_prop_ascii x110 "from") "apply"
                   [|x110;((let x104 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x104 "push"
                                 [|(WithImplicitCoercion.t_to_js
                                      (fun
                                         (x107 :
                                           (ArrayBuffer.t,
                                             SharedArrayBuffer.t) union2)
                                         ->
                                         union2_to_js ArrayBuffer.t_to_js
                                           SharedArrayBuffer.t_to_js x107)
                                      x101)|]);
                            (match x102 with
                             | Some x106 ->
                                 ignore
                                   (Ojs.call x104 "push"
                                      [|(Ojs.int_to_js x106)|])
                             | None -> ());
                            (match x103 with
                             | Some x105 ->
                                 ignore
                                   (Ojs.call x104 "push"
                                      [|(Ojs.int_to_js x105)|])
                             | None -> ());
                            x104))|])
    let (from' : data:(Uint8Array.t, int list) union2 -> t) =
      fun ~data:(x111 : (Uint8Array.t, int list) union2) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "from"
             [|(union2_to_js Uint8Array.t_to_js
                  (fun (x113 : int list) -> Ojs.list_to_js Ojs.int_to_js x113)
                  x111)|])
    let (from'' :
      data:(Uint8Array.t, int list) union2 or_string WithImplicitCoercion.t
        -> t)
      =
      fun
        ~data:(x115 :
                (Uint8Array.t, int list) union2 or_string
                  WithImplicitCoercion.t)
        ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "from"
             [|(WithImplicitCoercion.t_to_js
                  (fun (x116 : (Uint8Array.t, int list) union2 or_string) ->
                     or_string_to_js
                       (fun (x117 : (Uint8Array.t, int list) union2) ->
                          union2_to_js Uint8Array.t_to_js
                            (fun (x119 : int list) ->
                               Ojs.list_to_js Ojs.int_to_js x119) x117) x116)
                  x115)|])
    let (of_ : int list -> t) =
      fun (x121 : int list) ->
        t_of_js
          (let x124 = Ojs.get_prop_ascii Ojs.global "Buffer" in
           Ojs.call (Ojs.get_prop_ascii x124 "of") "apply"
             [|x124;((let x122 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      List.iter
                        (fun (x123 : int) ->
                           ignore
                             (Ojs.call x122 "push" [|(Ojs.int_to_js x123)|]))
                        x121;
                      x122))|])
    let (is_buffer : obj:any -> bool) =
      fun ~obj:(x125 : any) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "isBuffer"
             [|(any_to_js x125)|])
    let (is_encoding : encoding:string -> bool) =
      fun ~encoding:(x126 : string) ->
        Ojs.bool_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "isEncoding"
             [|(Ojs.string_to_js x126)|])
    let (byte_length :
      string:(ArrayBuffer.t, ArrayBufferView.t, SharedArrayBuffer.t) union3
        or_string -> ?encoding:BufferEncoding.t -> unit -> int)
      =
      fun
        ~string:(x127 :
                  (ArrayBuffer.t, ArrayBufferView.t, SharedArrayBuffer.t)
                    union3 or_string)
        ->
        fun ?encoding:(x128 : BufferEncoding.t option) ->
          fun () ->
            Ojs.int_of_js
              (let x135 = Ojs.get_prop_ascii Ojs.global "Buffer" in
               Ojs.call (Ojs.get_prop_ascii x135 "byteLength") "apply"
                 [|x135;((let x129 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x129 "push"
                               [|(or_string_to_js
                                    (fun
                                       (x131 :
                                         (ArrayBuffer.t, ArrayBufferView.t,
                                           SharedArrayBuffer.t) union3)
                                       ->
                                       union3_to_js ArrayBuffer.t_to_js
                                         ArrayBufferView.t_to_js
                                         SharedArrayBuffer.t_to_js x131) x127)|]);
                          (match x128 with
                           | Some x130 ->
                               ignore
                                 (Ojs.call x129 "push"
                                    [|(BufferEncoding.t_to_js x130)|])
                           | None -> ());
                          x129))|])
    let (concat : list:Uint8Array.t list -> ?totalLength:int -> unit -> t) =
      fun ~list:(x136 : Uint8Array.t list) ->
        fun ?totalLength:(x137 : int option) ->
          fun () ->
            t_of_js
              (let x141 = Ojs.get_prop_ascii Ojs.global "Buffer" in
               Ojs.call (Ojs.get_prop_ascii x141 "concat") "apply"
                 [|x141;((let x138 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x138 "push"
                               [|(Ojs.list_to_js Uint8Array.t_to_js x136)|]);
                          (match x137 with
                           | Some x139 ->
                               ignore
                                 (Ojs.call x138 "push"
                                    [|(Ojs.int_to_js x139)|])
                           | None -> ());
                          x138))|])
    let (compare : buf1:Uint8Array.t -> buf2:Uint8Array.t -> int) =
      fun ~buf1:(x142 : Uint8Array.t) ->
        fun ~buf2:(x143 : Uint8Array.t) ->
          Ojs.int_of_js
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "compare"
               [|(Uint8Array.t_to_js x142);(Uint8Array.t_to_js x143)|])
    let (alloc :
      size:int ->
        ?fill:t or_string or_number ->
          ?encoding:BufferEncoding.t -> unit -> t)
      =
      fun ~size:(x144 : int) ->
        fun ?fill:(x145 : t or_string or_number option) ->
          fun ?encoding:(x146 : BufferEncoding.t option) ->
            fun () ->
              t_of_js
                (let x152 = Ojs.get_prop_ascii Ojs.global "Buffer" in
                 Ojs.call (Ojs.get_prop_ascii x152 "alloc") "apply"
                   [|x152;((let x147 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x147 "push" [|(Ojs.int_to_js x144)|]);
                            (match x145 with
                             | Some x149 ->
                                 ignore
                                   (Ojs.call x147 "push"
                                      [|(or_number_to_js
                                           (fun (x150 : t or_string) ->
                                              or_string_to_js t_to_js x150)
                                           x149)|])
                             | None -> ());
                            (match x146 with
                             | Some x148 ->
                                 ignore
                                   (Ojs.call x147 "push"
                                      [|(BufferEncoding.t_to_js x148)|])
                             | None -> ());
                            x147))|])
    let (alloc_unsafe : size:int -> t) =
      fun ~size:(x153 : int) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer") "allocUnsafe"
             [|(Ojs.int_to_js x153)|])
    let (alloc_unsafe_slow : size:int -> t) =
      fun ~size:(x154 : int) ->
        t_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "Buffer")
             "allocUnsafeSlow" [|(Ojs.int_to_js x154)|])
    let (get_pool_size : unit -> int) =
      fun () ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (Ojs.get_prop_ascii Ojs.global "Buffer")
             "poolSize")
    let (set_pool_size : int -> unit) =
      fun (x155 : int) ->
        Ojs.set_prop_ascii (Ojs.get_prop_ascii Ojs.global "Buffer")
          "poolSize" (Ojs.int_to_js x155)
    let (write :
      t -> string:string -> ?encoding:BufferEncoding.t -> unit -> int) =
      fun (x160 : t) ->
        fun ~string:(x156 : string) ->
          fun ?encoding:(x157 : BufferEncoding.t option) ->
            fun () ->
              Ojs.int_of_js
                (let x161 = t_to_js x160 in
                 Ojs.call (Ojs.get_prop_ascii x161 "write") "apply"
                   [|x161;((let x158 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x158 "push"
                                 [|(Ojs.string_to_js x156)|]);
                            (match x157 with
                             | Some x159 ->
                                 ignore
                                   (Ojs.call x158 "push"
                                      [|(BufferEncoding.t_to_js x159)|])
                             | None -> ());
                            x158))|])
    let (write' :
      t ->
        string:string ->
          offset:int -> ?encoding:BufferEncoding.t -> unit -> int)
      =
      fun (x167 : t) ->
        fun ~string:(x162 : string) ->
          fun ~offset:(x163 : int) ->
            fun ?encoding:(x164 : BufferEncoding.t option) ->
              fun () ->
                Ojs.int_of_js
                  (let x168 = t_to_js x167 in
                   Ojs.call (Ojs.get_prop_ascii x168 "write") "apply"
                     [|x168;((let x165 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x165 "push"
                                   [|(Ojs.string_to_js x162)|]);
                              ignore
                                (Ojs.call x165 "push"
                                   [|(Ojs.int_to_js x163)|]);
                              (match x164 with
                               | Some x166 ->
                                   ignore
                                     (Ojs.call x165 "push"
                                        [|(BufferEncoding.t_to_js x166)|])
                               | None -> ());
                              x165))|])
    let (write'' :
      t ->
        string:string ->
          offset:int ->
            length:int -> ?encoding:BufferEncoding.t -> unit -> int)
      =
      fun (x175 : t) ->
        fun ~string:(x169 : string) ->
          fun ~offset:(x170 : int) ->
            fun ~length:(x171 : int) ->
              fun ?encoding:(x172 : BufferEncoding.t option) ->
                fun () ->
                  Ojs.int_of_js
                    (let x176 = t_to_js x175 in
                     Ojs.call (Ojs.get_prop_ascii x176 "write") "apply"
                       [|x176;((let x173 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x173 "push"
                                     [|(Ojs.string_to_js x169)|]);
                                ignore
                                  (Ojs.call x173 "push"
                                     [|(Ojs.int_to_js x170)|]);
                                ignore
                                  (Ojs.call x173 "push"
                                     [|(Ojs.int_to_js x171)|]);
                                (match x172 with
                                 | Some x174 ->
                                     ignore
                                       (Ojs.call x173 "push"
                                          [|(BufferEncoding.t_to_js x174)|])
                                 | None -> ());
                                x173))|])
    let (to_string :
      t ->
        ?encoding:BufferEncoding.t ->
          ?start:int -> ?end_:int -> unit -> string)
      =
      fun (x184 : t) ->
        fun ?encoding:(x177 : BufferEncoding.t option) ->
          fun ?start:(x178 : int option) ->
            fun ?end_:(x179 : int option) ->
              fun () ->
                Ojs.string_of_js
                  (let x185 = t_to_js x184 in
                   Ojs.call (Ojs.get_prop_ascii x185 "toString") "apply"
                     [|x185;((let x180 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x177 with
                               | Some x183 ->
                                   ignore
                                     (Ojs.call x180 "push"
                                        [|(BufferEncoding.t_to_js x183)|])
                               | None -> ());
                              (match x178 with
                               | Some x182 ->
                                   ignore
                                     (Ojs.call x180 "push"
                                        [|(Ojs.int_to_js x182)|])
                               | None -> ());
                              (match x179 with
                               | Some x181 ->
                                   ignore
                                     (Ojs.call x180 "push"
                                        [|(Ojs.int_to_js x181)|])
                               | None -> ());
                              x180))|])
    let (to_json : t -> AnonymousInterface2.t) =
      fun (x186 : t) ->
        AnonymousInterface2.t_of_js (Ojs.call (t_to_js x186) "toJSON" [||])
    let (equals : t -> otherBuffer:Uint8Array.t -> bool) =
      fun (x188 : t) ->
        fun ~otherBuffer:(x187 : Uint8Array.t) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x188) "equals" [|(Uint8Array.t_to_js x187)|])
    let (compare' :
      t ->
        otherBuffer:Uint8Array.t ->
          ?targetStart:int ->
            ?targetEnd:int ->
              ?sourceStart:int -> ?sourceEnd:int -> unit -> int)
      =
      fun (x199 : t) ->
        fun ~otherBuffer:(x189 : Uint8Array.t) ->
          fun ?targetStart:(x190 : int option) ->
            fun ?targetEnd:(x191 : int option) ->
              fun ?sourceStart:(x192 : int option) ->
                fun ?sourceEnd:(x193 : int option) ->
                  fun () ->
                    Ojs.int_of_js
                      (let x200 = t_to_js x199 in
                       Ojs.call (Ojs.get_prop_ascii x200 "compare") "apply"
                         [|x200;((let x194 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x194 "push"
                                       [|(Uint8Array.t_to_js x189)|]);
                                  (match x190 with
                                   | Some x198 ->
                                       ignore
                                         (Ojs.call x194 "push"
                                            [|(Ojs.int_to_js x198)|])
                                   | None -> ());
                                  (match x191 with
                                   | Some x197 ->
                                       ignore
                                         (Ojs.call x194 "push"
                                            [|(Ojs.int_to_js x197)|])
                                   | None -> ());
                                  (match x192 with
                                   | Some x196 ->
                                       ignore
                                         (Ojs.call x194 "push"
                                            [|(Ojs.int_to_js x196)|])
                                   | None -> ());
                                  (match x193 with
                                   | Some x195 ->
                                       ignore
                                         (Ojs.call x194 "push"
                                            [|(Ojs.int_to_js x195)|])
                                   | None -> ());
                                  x194))|])
    let (copy :
      t ->
        targetBuffer:Uint8Array.t ->
          ?targetStart:int ->
            ?sourceStart:int -> ?sourceEnd:int -> unit -> int)
      =
      fun (x209 : t) ->
        fun ~targetBuffer:(x201 : Uint8Array.t) ->
          fun ?targetStart:(x202 : int option) ->
            fun ?sourceStart:(x203 : int option) ->
              fun ?sourceEnd:(x204 : int option) ->
                fun () ->
                  Ojs.int_of_js
                    (let x210 = t_to_js x209 in
                     Ojs.call (Ojs.get_prop_ascii x210 "copy") "apply"
                       [|x210;((let x205 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x205 "push"
                                     [|(Uint8Array.t_to_js x201)|]);
                                (match x202 with
                                 | Some x208 ->
                                     ignore
                                       (Ojs.call x205 "push"
                                          [|(Ojs.int_to_js x208)|])
                                 | None -> ());
                                (match x203 with
                                 | Some x207 ->
                                     ignore
                                       (Ojs.call x205 "push"
                                          [|(Ojs.int_to_js x207)|])
                                 | None -> ());
                                (match x204 with
                                 | Some x206 ->
                                     ignore
                                       (Ojs.call x205 "push"
                                          [|(Ojs.int_to_js x206)|])
                                 | None -> ());
                                x205))|])
    let (slice : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x216 : t) ->
        fun ?begin_:(x211 : int option) ->
          fun ?end_:(x212 : int option) ->
            fun () ->
              t_of_js
                (let x217 = t_to_js x216 in
                 Ojs.call (Ojs.get_prop_ascii x217 "slice") "apply"
                   [|x217;((let x213 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x211 with
                             | Some x215 ->
                                 ignore
                                   (Ojs.call x213 "push"
                                      [|(Ojs.int_to_js x215)|])
                             | None -> ());
                            (match x212 with
                             | Some x214 ->
                                 ignore
                                   (Ojs.call x213 "push"
                                      [|(Ojs.int_to_js x214)|])
                             | None -> ());
                            x213))|])
    let (subarray : t -> ?begin_:int -> ?end_:int -> unit -> t) =
      fun (x223 : t) ->
        fun ?begin_:(x218 : int option) ->
          fun ?end_:(x219 : int option) ->
            fun () ->
              t_of_js
                (let x224 = t_to_js x223 in
                 Ojs.call (Ojs.get_prop_ascii x224 "subarray") "apply"
                   [|x224;((let x220 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x218 with
                             | Some x222 ->
                                 ignore
                                   (Ojs.call x220 "push"
                                      [|(Ojs.int_to_js x222)|])
                             | None -> ());
                            (match x219 with
                             | Some x221 ->
                                 ignore
                                   (Ojs.call x220 "push"
                                      [|(Ojs.int_to_js x221)|])
                             | None -> ());
                            x220))|])
    let (write_big_int64_be : t -> bigint -> ?offset:int -> unit -> int) =
      fun (x229 : t) ->
        fun (x225 : bigint) ->
          fun ?offset:(x226 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x230 = t_to_js x229 in
                 Ojs.call (Ojs.get_prop_ascii x230 "writeBigInt64BE") "apply"
                   [|x230;((let x227 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x227 "push" [|(bigint_to_js x225)|]);
                            (match x226 with
                             | Some x228 ->
                                 ignore
                                   (Ojs.call x227 "push"
                                      [|(Ojs.int_to_js x228)|])
                             | None -> ());
                            x227))|])
    let (write_big_int64_le : t -> bigint -> ?offset:int -> unit -> int) =
      fun (x235 : t) ->
        fun (x231 : bigint) ->
          fun ?offset:(x232 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x236 = t_to_js x235 in
                 Ojs.call (Ojs.get_prop_ascii x236 "writeBigInt64LE") "apply"
                   [|x236;((let x233 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x233 "push" [|(bigint_to_js x231)|]);
                            (match x232 with
                             | Some x234 ->
                                 ignore
                                   (Ojs.call x233 "push"
                                      [|(Ojs.int_to_js x234)|])
                             | None -> ());
                            x233))|])
    let (write_big_u_int64_be : t -> bigint -> ?offset:int -> unit -> int) =
      fun (x241 : t) ->
        fun (x237 : bigint) ->
          fun ?offset:(x238 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x242 = t_to_js x241 in
                 Ojs.call (Ojs.get_prop_ascii x242 "writeBigUInt64BE")
                   "apply"
                   [|x242;((let x239 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x239 "push" [|(bigint_to_js x237)|]);
                            (match x238 with
                             | Some x240 ->
                                 ignore
                                   (Ojs.call x239 "push"
                                      [|(Ojs.int_to_js x240)|])
                             | None -> ());
                            x239))|])
    let (write_big_u_int64_le : t -> bigint -> ?offset:int -> unit -> int) =
      fun (x247 : t) ->
        fun (x243 : bigint) ->
          fun ?offset:(x244 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x248 = t_to_js x247 in
                 Ojs.call (Ojs.get_prop_ascii x248 "writeBigUInt64LE")
                   "apply"
                   [|x248;((let x245 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x245 "push" [|(bigint_to_js x243)|]);
                            (match x244 with
                             | Some x246 ->
                                 ignore
                                   (Ojs.call x245 "push"
                                      [|(Ojs.int_to_js x246)|])
                             | None -> ());
                            x245))|])
    let (write_u_int_le :
      t -> value:int -> offset:int -> byteLength:int -> int) =
      fun (x252 : t) ->
        fun ~value:(x249 : int) ->
          fun ~offset:(x250 : int) ->
            fun ~byteLength:(x251 : int) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x252) "writeUIntLE"
                   [|(Ojs.int_to_js x249);(Ojs.int_to_js x250);(Ojs.int_to_js
                                                                  x251)|])
    let (write_u_int_be :
      t -> value:int -> offset:int -> byteLength:int -> int) =
      fun (x256 : t) ->
        fun ~value:(x253 : int) ->
          fun ~offset:(x254 : int) ->
            fun ~byteLength:(x255 : int) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x256) "writeUIntBE"
                   [|(Ojs.int_to_js x253);(Ojs.int_to_js x254);(Ojs.int_to_js
                                                                  x255)|])
    let (write_int_le :
      t -> value:int -> offset:int -> byteLength:int -> int) =
      fun (x260 : t) ->
        fun ~value:(x257 : int) ->
          fun ~offset:(x258 : int) ->
            fun ~byteLength:(x259 : int) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x260) "writeIntLE"
                   [|(Ojs.int_to_js x257);(Ojs.int_to_js x258);(Ojs.int_to_js
                                                                  x259)|])
    let (write_int_be :
      t -> value:int -> offset:int -> byteLength:int -> int) =
      fun (x264 : t) ->
        fun ~value:(x261 : int) ->
          fun ~offset:(x262 : int) ->
            fun ~byteLength:(x263 : int) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x264) "writeIntBE"
                   [|(Ojs.int_to_js x261);(Ojs.int_to_js x262);(Ojs.int_to_js
                                                                  x263)|])
    let (read_big_u_int64_be : t -> ?offset:int -> unit -> bigint) =
      fun (x268 : t) ->
        fun ?offset:(x265 : int option) ->
          fun () ->
            bigint_of_js
              (let x269 = t_to_js x268 in
               Ojs.call (Ojs.get_prop_ascii x269 "readBigUInt64BE") "apply"
                 [|x269;((let x266 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x265 with
                           | Some x267 ->
                               ignore
                                 (Ojs.call x266 "push"
                                    [|(Ojs.int_to_js x267)|])
                           | None -> ());
                          x266))|])
    let (read_big_u_int64_le : t -> ?offset:int -> unit -> bigint) =
      fun (x273 : t) ->
        fun ?offset:(x270 : int option) ->
          fun () ->
            bigint_of_js
              (let x274 = t_to_js x273 in
               Ojs.call (Ojs.get_prop_ascii x274 "readBigUInt64LE") "apply"
                 [|x274;((let x271 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x270 with
                           | Some x272 ->
                               ignore
                                 (Ojs.call x271 "push"
                                    [|(Ojs.int_to_js x272)|])
                           | None -> ());
                          x271))|])
    let (read_big_int64_be : t -> ?offset:int -> unit -> bigint) =
      fun (x278 : t) ->
        fun ?offset:(x275 : int option) ->
          fun () ->
            bigint_of_js
              (let x279 = t_to_js x278 in
               Ojs.call (Ojs.get_prop_ascii x279 "readBigInt64BE") "apply"
                 [|x279;((let x276 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x275 with
                           | Some x277 ->
                               ignore
                                 (Ojs.call x276 "push"
                                    [|(Ojs.int_to_js x277)|])
                           | None -> ());
                          x276))|])
    let (read_big_int64_le : t -> ?offset:int -> unit -> bigint) =
      fun (x283 : t) ->
        fun ?offset:(x280 : int option) ->
          fun () ->
            bigint_of_js
              (let x284 = t_to_js x283 in
               Ojs.call (Ojs.get_prop_ascii x284 "readBigInt64LE") "apply"
                 [|x284;((let x281 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x280 with
                           | Some x282 ->
                               ignore
                                 (Ojs.call x281 "push"
                                    [|(Ojs.int_to_js x282)|])
                           | None -> ());
                          x281))|])
    let (read_u_int_le : t -> offset:int -> byteLength:int -> int) =
      fun (x287 : t) ->
        fun ~offset:(x285 : int) ->
          fun ~byteLength:(x286 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x287) "readUIntLE"
                 [|(Ojs.int_to_js x285);(Ojs.int_to_js x286)|])
    let (read_u_int_be : t -> offset:int -> byteLength:int -> int) =
      fun (x290 : t) ->
        fun ~offset:(x288 : int) ->
          fun ~byteLength:(x289 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x290) "readUIntBE"
                 [|(Ojs.int_to_js x288);(Ojs.int_to_js x289)|])
    let (read_int_le : t -> offset:int -> byteLength:int -> int) =
      fun (x293 : t) ->
        fun ~offset:(x291 : int) ->
          fun ~byteLength:(x292 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x293) "readIntLE"
                 [|(Ojs.int_to_js x291);(Ojs.int_to_js x292)|])
    let (read_int_be : t -> offset:int -> byteLength:int -> int) =
      fun (x296 : t) ->
        fun ~offset:(x294 : int) ->
          fun ~byteLength:(x295 : int) ->
            Ojs.int_of_js
              (Ojs.call (t_to_js x296) "readIntBE"
                 [|(Ojs.int_to_js x294);(Ojs.int_to_js x295)|])
    let (read_u_int8 : t -> ?offset:int -> unit -> int) =
      fun (x300 : t) ->
        fun ?offset:(x297 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x301 = t_to_js x300 in
               Ojs.call (Ojs.get_prop_ascii x301 "readUInt8") "apply"
                 [|x301;((let x298 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x297 with
                           | Some x299 ->
                               ignore
                                 (Ojs.call x298 "push"
                                    [|(Ojs.int_to_js x299)|])
                           | None -> ());
                          x298))|])
    let (read_u_int16_le : t -> ?offset:int -> unit -> int) =
      fun (x305 : t) ->
        fun ?offset:(x302 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x306 = t_to_js x305 in
               Ojs.call (Ojs.get_prop_ascii x306 "readUInt16LE") "apply"
                 [|x306;((let x303 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x302 with
                           | Some x304 ->
                               ignore
                                 (Ojs.call x303 "push"
                                    [|(Ojs.int_to_js x304)|])
                           | None -> ());
                          x303))|])
    let (read_u_int16_be : t -> ?offset:int -> unit -> int) =
      fun (x310 : t) ->
        fun ?offset:(x307 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x311 = t_to_js x310 in
               Ojs.call (Ojs.get_prop_ascii x311 "readUInt16BE") "apply"
                 [|x311;((let x308 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x307 with
                           | Some x309 ->
                               ignore
                                 (Ojs.call x308 "push"
                                    [|(Ojs.int_to_js x309)|])
                           | None -> ());
                          x308))|])
    let (read_u_int32_le : t -> ?offset:int -> unit -> int) =
      fun (x315 : t) ->
        fun ?offset:(x312 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x316 = t_to_js x315 in
               Ojs.call (Ojs.get_prop_ascii x316 "readUInt32LE") "apply"
                 [|x316;((let x313 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x312 with
                           | Some x314 ->
                               ignore
                                 (Ojs.call x313 "push"
                                    [|(Ojs.int_to_js x314)|])
                           | None -> ());
                          x313))|])
    let (read_u_int32_be : t -> ?offset:int -> unit -> int) =
      fun (x320 : t) ->
        fun ?offset:(x317 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x321 = t_to_js x320 in
               Ojs.call (Ojs.get_prop_ascii x321 "readUInt32BE") "apply"
                 [|x321;((let x318 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x317 with
                           | Some x319 ->
                               ignore
                                 (Ojs.call x318 "push"
                                    [|(Ojs.int_to_js x319)|])
                           | None -> ());
                          x318))|])
    let (read_int8 : t -> ?offset:int -> unit -> int) =
      fun (x325 : t) ->
        fun ?offset:(x322 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x326 = t_to_js x325 in
               Ojs.call (Ojs.get_prop_ascii x326 "readInt8") "apply"
                 [|x326;((let x323 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x322 with
                           | Some x324 ->
                               ignore
                                 (Ojs.call x323 "push"
                                    [|(Ojs.int_to_js x324)|])
                           | None -> ());
                          x323))|])
    let (read_int16_le : t -> ?offset:int -> unit -> int) =
      fun (x330 : t) ->
        fun ?offset:(x327 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x331 = t_to_js x330 in
               Ojs.call (Ojs.get_prop_ascii x331 "readInt16LE") "apply"
                 [|x331;((let x328 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x327 with
                           | Some x329 ->
                               ignore
                                 (Ojs.call x328 "push"
                                    [|(Ojs.int_to_js x329)|])
                           | None -> ());
                          x328))|])
    let (read_int16_be : t -> ?offset:int -> unit -> int) =
      fun (x335 : t) ->
        fun ?offset:(x332 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x336 = t_to_js x335 in
               Ojs.call (Ojs.get_prop_ascii x336 "readInt16BE") "apply"
                 [|x336;((let x333 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x332 with
                           | Some x334 ->
                               ignore
                                 (Ojs.call x333 "push"
                                    [|(Ojs.int_to_js x334)|])
                           | None -> ());
                          x333))|])
    let (read_int32_le : t -> ?offset:int -> unit -> int) =
      fun (x340 : t) ->
        fun ?offset:(x337 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x341 = t_to_js x340 in
               Ojs.call (Ojs.get_prop_ascii x341 "readInt32LE") "apply"
                 [|x341;((let x338 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x337 with
                           | Some x339 ->
                               ignore
                                 (Ojs.call x338 "push"
                                    [|(Ojs.int_to_js x339)|])
                           | None -> ());
                          x338))|])
    let (read_int32_be : t -> ?offset:int -> unit -> int) =
      fun (x345 : t) ->
        fun ?offset:(x342 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x346 = t_to_js x345 in
               Ojs.call (Ojs.get_prop_ascii x346 "readInt32BE") "apply"
                 [|x346;((let x343 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x342 with
                           | Some x344 ->
                               ignore
                                 (Ojs.call x343 "push"
                                    [|(Ojs.int_to_js x344)|])
                           | None -> ());
                          x343))|])
    let (read_float_le : t -> ?offset:int -> unit -> int) =
      fun (x350 : t) ->
        fun ?offset:(x347 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x351 = t_to_js x350 in
               Ojs.call (Ojs.get_prop_ascii x351 "readFloatLE") "apply"
                 [|x351;((let x348 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x347 with
                           | Some x349 ->
                               ignore
                                 (Ojs.call x348 "push"
                                    [|(Ojs.int_to_js x349)|])
                           | None -> ());
                          x348))|])
    let (read_float_be : t -> ?offset:int -> unit -> int) =
      fun (x355 : t) ->
        fun ?offset:(x352 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x356 = t_to_js x355 in
               Ojs.call (Ojs.get_prop_ascii x356 "readFloatBE") "apply"
                 [|x356;((let x353 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x352 with
                           | Some x354 ->
                               ignore
                                 (Ojs.call x353 "push"
                                    [|(Ojs.int_to_js x354)|])
                           | None -> ());
                          x353))|])
    let (read_double_le : t -> ?offset:int -> unit -> int) =
      fun (x360 : t) ->
        fun ?offset:(x357 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x361 = t_to_js x360 in
               Ojs.call (Ojs.get_prop_ascii x361 "readDoubleLE") "apply"
                 [|x361;((let x358 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x357 with
                           | Some x359 ->
                               ignore
                                 (Ojs.call x358 "push"
                                    [|(Ojs.int_to_js x359)|])
                           | None -> ());
                          x358))|])
    let (read_double_be : t -> ?offset:int -> unit -> int) =
      fun (x365 : t) ->
        fun ?offset:(x362 : int option) ->
          fun () ->
            Ojs.int_of_js
              (let x366 = t_to_js x365 in
               Ojs.call (Ojs.get_prop_ascii x366 "readDoubleBE") "apply"
                 [|x366;((let x363 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x362 with
                           | Some x364 ->
                               ignore
                                 (Ojs.call x363 "push"
                                    [|(Ojs.int_to_js x364)|])
                           | None -> ());
                          x363))|])
    let (reverse : t -> t) =
      fun (x367 : t) -> t_of_js (Ojs.call (t_to_js x367) "reverse" [||])
    let (swap16 : t -> t) =
      fun (x368 : t) -> t_of_js (Ojs.call (t_to_js x368) "swap16" [||])
    let (swap32 : t -> t) =
      fun (x369 : t) -> t_of_js (Ojs.call (t_to_js x369) "swap32" [||])
    let (swap64 : t -> t) =
      fun (x370 : t) -> t_of_js (Ojs.call (t_to_js x370) "swap64" [||])
    let (write_u_int8 : t -> int -> ?offset:int -> unit -> int) =
      fun (x375 : t) ->
        fun (x371 : int) ->
          fun ?offset:(x372 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x376 = t_to_js x375 in
                 Ojs.call (Ojs.get_prop_ascii x376 "writeUInt8") "apply"
                   [|x376;((let x373 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x373 "push" [|(Ojs.int_to_js x371)|]);
                            (match x372 with
                             | Some x374 ->
                                 ignore
                                   (Ojs.call x373 "push"
                                      [|(Ojs.int_to_js x374)|])
                             | None -> ());
                            x373))|])
    let (write_u_int16_le : t -> int -> ?offset:int -> unit -> int) =
      fun (x381 : t) ->
        fun (x377 : int) ->
          fun ?offset:(x378 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x382 = t_to_js x381 in
                 Ojs.call (Ojs.get_prop_ascii x382 "writeUInt16LE") "apply"
                   [|x382;((let x379 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x379 "push" [|(Ojs.int_to_js x377)|]);
                            (match x378 with
                             | Some x380 ->
                                 ignore
                                   (Ojs.call x379 "push"
                                      [|(Ojs.int_to_js x380)|])
                             | None -> ());
                            x379))|])
    let (write_u_int16_be : t -> int -> ?offset:int -> unit -> int) =
      fun (x387 : t) ->
        fun (x383 : int) ->
          fun ?offset:(x384 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x388 = t_to_js x387 in
                 Ojs.call (Ojs.get_prop_ascii x388 "writeUInt16BE") "apply"
                   [|x388;((let x385 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x385 "push" [|(Ojs.int_to_js x383)|]);
                            (match x384 with
                             | Some x386 ->
                                 ignore
                                   (Ojs.call x385 "push"
                                      [|(Ojs.int_to_js x386)|])
                             | None -> ());
                            x385))|])
    let (write_u_int32_le : t -> int -> ?offset:int -> unit -> int) =
      fun (x393 : t) ->
        fun (x389 : int) ->
          fun ?offset:(x390 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x394 = t_to_js x393 in
                 Ojs.call (Ojs.get_prop_ascii x394 "writeUInt32LE") "apply"
                   [|x394;((let x391 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x391 "push" [|(Ojs.int_to_js x389)|]);
                            (match x390 with
                             | Some x392 ->
                                 ignore
                                   (Ojs.call x391 "push"
                                      [|(Ojs.int_to_js x392)|])
                             | None -> ());
                            x391))|])
    let (write_u_int32_be : t -> int -> ?offset:int -> unit -> int) =
      fun (x399 : t) ->
        fun (x395 : int) ->
          fun ?offset:(x396 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x400 = t_to_js x399 in
                 Ojs.call (Ojs.get_prop_ascii x400 "writeUInt32BE") "apply"
                   [|x400;((let x397 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x397 "push" [|(Ojs.int_to_js x395)|]);
                            (match x396 with
                             | Some x398 ->
                                 ignore
                                   (Ojs.call x397 "push"
                                      [|(Ojs.int_to_js x398)|])
                             | None -> ());
                            x397))|])
    let (write_int8 : t -> int -> ?offset:int -> unit -> int) =
      fun (x405 : t) ->
        fun (x401 : int) ->
          fun ?offset:(x402 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x406 = t_to_js x405 in
                 Ojs.call (Ojs.get_prop_ascii x406 "writeInt8") "apply"
                   [|x406;((let x403 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x403 "push" [|(Ojs.int_to_js x401)|]);
                            (match x402 with
                             | Some x404 ->
                                 ignore
                                   (Ojs.call x403 "push"
                                      [|(Ojs.int_to_js x404)|])
                             | None -> ());
                            x403))|])
    let (write_int16_le : t -> int -> ?offset:int -> unit -> int) =
      fun (x411 : t) ->
        fun (x407 : int) ->
          fun ?offset:(x408 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x412 = t_to_js x411 in
                 Ojs.call (Ojs.get_prop_ascii x412 "writeInt16LE") "apply"
                   [|x412;((let x409 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x409 "push" [|(Ojs.int_to_js x407)|]);
                            (match x408 with
                             | Some x410 ->
                                 ignore
                                   (Ojs.call x409 "push"
                                      [|(Ojs.int_to_js x410)|])
                             | None -> ());
                            x409))|])
    let (write_int16_be : t -> int -> ?offset:int -> unit -> int) =
      fun (x417 : t) ->
        fun (x413 : int) ->
          fun ?offset:(x414 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x418 = t_to_js x417 in
                 Ojs.call (Ojs.get_prop_ascii x418 "writeInt16BE") "apply"
                   [|x418;((let x415 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x415 "push" [|(Ojs.int_to_js x413)|]);
                            (match x414 with
                             | Some x416 ->
                                 ignore
                                   (Ojs.call x415 "push"
                                      [|(Ojs.int_to_js x416)|])
                             | None -> ());
                            x415))|])
    let (write_int32_le : t -> int -> ?offset:int -> unit -> int) =
      fun (x423 : t) ->
        fun (x419 : int) ->
          fun ?offset:(x420 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x424 = t_to_js x423 in
                 Ojs.call (Ojs.get_prop_ascii x424 "writeInt32LE") "apply"
                   [|x424;((let x421 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x421 "push" [|(Ojs.int_to_js x419)|]);
                            (match x420 with
                             | Some x422 ->
                                 ignore
                                   (Ojs.call x421 "push"
                                      [|(Ojs.int_to_js x422)|])
                             | None -> ());
                            x421))|])
    let (write_int32_be : t -> int -> ?offset:int -> unit -> int) =
      fun (x429 : t) ->
        fun (x425 : int) ->
          fun ?offset:(x426 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x430 = t_to_js x429 in
                 Ojs.call (Ojs.get_prop_ascii x430 "writeInt32BE") "apply"
                   [|x430;((let x427 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x427 "push" [|(Ojs.int_to_js x425)|]);
                            (match x426 with
                             | Some x428 ->
                                 ignore
                                   (Ojs.call x427 "push"
                                      [|(Ojs.int_to_js x428)|])
                             | None -> ());
                            x427))|])
    let (write_float_le : t -> int -> ?offset:int -> unit -> int) =
      fun (x435 : t) ->
        fun (x431 : int) ->
          fun ?offset:(x432 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x436 = t_to_js x435 in
                 Ojs.call (Ojs.get_prop_ascii x436 "writeFloatLE") "apply"
                   [|x436;((let x433 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x433 "push" [|(Ojs.int_to_js x431)|]);
                            (match x432 with
                             | Some x434 ->
                                 ignore
                                   (Ojs.call x433 "push"
                                      [|(Ojs.int_to_js x434)|])
                             | None -> ());
                            x433))|])
    let (write_float_be : t -> int -> ?offset:int -> unit -> int) =
      fun (x441 : t) ->
        fun (x437 : int) ->
          fun ?offset:(x438 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x442 = t_to_js x441 in
                 Ojs.call (Ojs.get_prop_ascii x442 "writeFloatBE") "apply"
                   [|x442;((let x439 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x439 "push" [|(Ojs.int_to_js x437)|]);
                            (match x438 with
                             | Some x440 ->
                                 ignore
                                   (Ojs.call x439 "push"
                                      [|(Ojs.int_to_js x440)|])
                             | None -> ());
                            x439))|])
    let (write_double_le : t -> int -> ?offset:int -> unit -> int) =
      fun (x447 : t) ->
        fun (x443 : int) ->
          fun ?offset:(x444 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x448 = t_to_js x447 in
                 Ojs.call (Ojs.get_prop_ascii x448 "writeDoubleLE") "apply"
                   [|x448;((let x445 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x445 "push" [|(Ojs.int_to_js x443)|]);
                            (match x444 with
                             | Some x446 ->
                                 ignore
                                   (Ojs.call x445 "push"
                                      [|(Ojs.int_to_js x446)|])
                             | None -> ());
                            x445))|])
    let (write_double_be : t -> int -> ?offset:int -> unit -> int) =
      fun (x453 : t) ->
        fun (x449 : int) ->
          fun ?offset:(x450 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x454 = t_to_js x453 in
                 Ojs.call (Ojs.get_prop_ascii x454 "writeDoubleBE") "apply"
                   [|x454;((let x451 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x451 "push" [|(Ojs.int_to_js x449)|]);
                            (match x450 with
                             | Some x452 ->
                                 ignore
                                   (Ojs.call x451 "push"
                                      [|(Ojs.int_to_js x452)|])
                             | None -> ());
                            x451))|])
    let (fill :
      t ->
        value:Uint8Array.t or_string or_number ->
          ?offset:int -> ?end_:int -> ?encoding:BufferEncoding.t -> unit -> t)
      =
      fun (x465 : t) ->
        fun ~value:(x455 : Uint8Array.t or_string or_number) ->
          fun ?offset:(x456 : int option) ->
            fun ?end_:(x457 : int option) ->
              fun ?encoding:(x458 : BufferEncoding.t option) ->
                fun () ->
                  t_of_js
                    (let x466 = t_to_js x465 in
                     Ojs.call (Ojs.get_prop_ascii x466 "fill") "apply"
                       [|x466;((let x459 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x459 "push"
                                     [|(or_number_to_js
                                          (fun
                                             (x463 : Uint8Array.t or_string)
                                             ->
                                             or_string_to_js
                                               Uint8Array.t_to_js x463) x455)|]);
                                (match x456 with
                                 | Some x462 ->
                                     ignore
                                       (Ojs.call x459 "push"
                                          [|(Ojs.int_to_js x462)|])
                                 | None -> ());
                                (match x457 with
                                 | Some x461 ->
                                     ignore
                                       (Ojs.call x459 "push"
                                          [|(Ojs.int_to_js x461)|])
                                 | None -> ());
                                (match x458 with
                                 | Some x460 ->
                                     ignore
                                       (Ojs.call x459 "push"
                                          [|(BufferEncoding.t_to_js x460)|])
                                 | None -> ());
                                x459))|])
    let (index_of :
      t ->
        value:Uint8Array.t or_string or_number ->
          ?byteOffset:int -> ?encoding:BufferEncoding.t -> unit -> int)
      =
      fun (x475 : t) ->
        fun ~value:(x467 : Uint8Array.t or_string or_number) ->
          fun ?byteOffset:(x468 : int option) ->
            fun ?encoding:(x469 : BufferEncoding.t option) ->
              fun () ->
                Ojs.int_of_js
                  (let x476 = t_to_js x475 in
                   Ojs.call (Ojs.get_prop_ascii x476 "indexOf") "apply"
                     [|x476;((let x470 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x470 "push"
                                   [|(or_number_to_js
                                        (fun (x473 : Uint8Array.t or_string)
                                           ->
                                           or_string_to_js Uint8Array.t_to_js
                                             x473) x467)|]);
                              (match x468 with
                               | Some x472 ->
                                   ignore
                                     (Ojs.call x470 "push"
                                        [|(Ojs.int_to_js x472)|])
                               | None -> ());
                              (match x469 with
                               | Some x471 ->
                                   ignore
                                     (Ojs.call x470 "push"
                                        [|(BufferEncoding.t_to_js x471)|])
                               | None -> ());
                              x470))|])
    let (last_index_of :
      t ->
        value:Uint8Array.t or_string or_number ->
          ?byteOffset:int -> ?encoding:BufferEncoding.t -> unit -> int)
      =
      fun (x485 : t) ->
        fun ~value:(x477 : Uint8Array.t or_string or_number) ->
          fun ?byteOffset:(x478 : int option) ->
            fun ?encoding:(x479 : BufferEncoding.t option) ->
              fun () ->
                Ojs.int_of_js
                  (let x486 = t_to_js x485 in
                   Ojs.call (Ojs.get_prop_ascii x486 "lastIndexOf") "apply"
                     [|x486;((let x480 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x480 "push"
                                   [|(or_number_to_js
                                        (fun (x483 : Uint8Array.t or_string)
                                           ->
                                           or_string_to_js Uint8Array.t_to_js
                                             x483) x477)|]);
                              (match x478 with
                               | Some x482 ->
                                   ignore
                                     (Ojs.call x480 "push"
                                        [|(Ojs.int_to_js x482)|])
                               | None -> ());
                              (match x479 with
                               | Some x481 ->
                                   ignore
                                     (Ojs.call x480 "push"
                                        [|(BufferEncoding.t_to_js x481)|])
                               | None -> ());
                              x480))|])
    let (entries : t -> (int * int) IterableIterator.t) =
      fun (x487 : t) ->
        IterableIterator.t_of_js
          (fun (x488 : Ojs.t) ->
             let x489 = x488 in
             ((Ojs.int_of_js (Ojs.array_get x489 0)),
               (Ojs.int_of_js (Ojs.array_get x489 1))))
          (Ojs.call (t_to_js x487) "entries" [||])
    let (includes :
      t ->
        value:t or_string or_number ->
          ?byteOffset:int -> ?encoding:BufferEncoding.t -> unit -> bool)
      =
      fun (x498 : t) ->
        fun ~value:(x490 : t or_string or_number) ->
          fun ?byteOffset:(x491 : int option) ->
            fun ?encoding:(x492 : BufferEncoding.t option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x499 = t_to_js x498 in
                   Ojs.call (Ojs.get_prop_ascii x499 "includes") "apply"
                     [|x499;((let x493 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x493 "push"
                                   [|(or_number_to_js
                                        (fun (x496 : t or_string) ->
                                           or_string_to_js t_to_js x496) x490)|]);
                              (match x491 with
                               | Some x495 ->
                                   ignore
                                     (Ojs.call x493 "push"
                                        [|(Ojs.int_to_js x495)|])
                               | None -> ());
                              (match x492 with
                               | Some x494 ->
                                   ignore
                                     (Ojs.call x493 "push"
                                        [|(BufferEncoding.t_to_js x494)|])
                               | None -> ());
                              x493))|])
    let (keys : t -> int IterableIterator.t) =
      fun (x500 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x500) "keys" [||])
    let (values : t -> int IterableIterator.t) =
      fun (x502 : t) ->
        IterableIterator.t_of_js Ojs.int_of_js
          (Ojs.call (t_to_js x502) "values" [||])
    let (cast : t -> Uint8Array.t) =
      fun (x504 : t) -> Uint8Array.t_of_js (t_to_js x504)
  end
module InspectOptions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x506 : Ojs.t) -> x506
    and t_to_js : t -> Ojs.t = fun (x505 : Ojs.t) -> x505
    let (get_getters : t -> [ `get  | `set ] or_boolean) =
      fun (x507 : t) ->
        or_boolean_of_js
          (fun (x508 : Ojs.t) ->
             let x509 = x508 in
             match Ojs.string_of_js x509 with
             | "get" -> `get
             | "set" -> `set
             | _ -> assert false)
          (Ojs.get_prop_ascii (t_to_js x507) "getters")
    let (set_getters : t -> [ `get  | `set ] or_boolean -> unit) =
      fun (x510 : t) ->
        fun (x511 : [ `get  | `set ] or_boolean) ->
          Ojs.set_prop_ascii (t_to_js x510) "getters"
            (or_boolean_to_js
               (fun (x512 : [ `get  | `set ]) ->
                  match x512 with
                  | `get -> Ojs.string_to_js "get"
                  | `set -> Ojs.string_to_js "set") x511)
    let (get_show_hidden : t -> bool) =
      fun (x513 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x513) "showHidden")
    let (set_show_hidden : t -> bool -> unit) =
      fun (x514 : t) ->
        fun (x515 : bool) ->
          Ojs.set_prop_ascii (t_to_js x514) "showHidden"
            (Ojs.bool_to_js x515)
    let (get_depth : t -> int or_null) =
      fun (x516 : t) ->
        or_null_of_js Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x516) "depth")
    let (set_depth : t -> int or_null -> unit) =
      fun (x518 : t) ->
        fun (x519 : int or_null) ->
          Ojs.set_prop_ascii (t_to_js x518) "depth"
            (or_null_to_js Ojs.int_to_js x519)
    let (get_colors : t -> bool) =
      fun (x521 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x521) "colors")
    let (set_colors : t -> bool -> unit) =
      fun (x522 : t) ->
        fun (x523 : bool) ->
          Ojs.set_prop_ascii (t_to_js x522) "colors" (Ojs.bool_to_js x523)
    let (get_custom_inspect : t -> bool) =
      fun (x524 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x524) "customInspect")
    let (set_custom_inspect : t -> bool -> unit) =
      fun (x525 : t) ->
        fun (x526 : bool) ->
          Ojs.set_prop_ascii (t_to_js x525) "customInspect"
            (Ojs.bool_to_js x526)
    let (get_show_proxy : t -> bool) =
      fun (x527 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x527) "showProxy")
    let (set_show_proxy : t -> bool -> unit) =
      fun (x528 : t) ->
        fun (x529 : bool) ->
          Ojs.set_prop_ascii (t_to_js x528) "showProxy" (Ojs.bool_to_js x529)
    let (get_max_array_length : t -> int or_null) =
      fun (x530 : t) ->
        or_null_of_js Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x530) "maxArrayLength")
    let (set_max_array_length : t -> int or_null -> unit) =
      fun (x532 : t) ->
        fun (x533 : int or_null) ->
          Ojs.set_prop_ascii (t_to_js x532) "maxArrayLength"
            (or_null_to_js Ojs.int_to_js x533)
    let (get_max_string_length : t -> int or_null) =
      fun (x535 : t) ->
        or_null_of_js Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x535) "maxStringLength")
    let (set_max_string_length : t -> int or_null -> unit) =
      fun (x537 : t) ->
        fun (x538 : int or_null) ->
          Ojs.set_prop_ascii (t_to_js x537) "maxStringLength"
            (or_null_to_js Ojs.int_to_js x538)
    let (get_break_length : t -> int) =
      fun (x540 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x540) "breakLength")
    let (set_break_length : t -> int -> unit) =
      fun (x541 : t) ->
        fun (x542 : int) ->
          Ojs.set_prop_ascii (t_to_js x541) "breakLength"
            (Ojs.int_to_js x542)
    let (get_compact : t -> bool or_number) =
      fun (x543 : t) ->
        or_number_of_js Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x543) "compact")
    let (set_compact : t -> bool or_number -> unit) =
      fun (x545 : t) ->
        fun (x546 : bool or_number) ->
          Ojs.set_prop_ascii (t_to_js x545) "compact"
            (or_number_to_js Ojs.bool_to_js x546)
    let (get_sorted : t -> (a:string -> b:string -> int) or_boolean) =
      fun (x548 : t) ->
        or_boolean_of_js
          (fun (x549 : Ojs.t) ->
             fun ~a:(x550 : string) ->
               fun ~b:(x551 : string) ->
                 Ojs.int_of_js
                   (Ojs.apply x549
                      [|(Ojs.string_to_js x550);(Ojs.string_to_js x551)|]))
          (Ojs.get_prop_ascii (t_to_js x548) "sorted")
    let (set_sorted : t -> (a:string -> b:string -> int) or_boolean -> unit)
      =
      fun (x552 : t) ->
        fun (x553 : (a:string -> b:string -> int) or_boolean) ->
          Ojs.set_prop_ascii (t_to_js x552) "sorted"
            (or_boolean_to_js
               (fun (x554 : a:string -> b:string -> int) ->
                  Ojs.fun_to_js 2
                    (fun (x555 : Ojs.t) ->
                       fun (x556 : Ojs.t) ->
                         Ojs.int_to_js
                           (x554 ~a:(Ojs.string_of_js x555)
                              ~b:(Ojs.string_of_js x556)))) x553)
  end
module ErrnoException =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x558 : Ojs.t) -> x558
    and t_to_js : t -> Ojs.t = fun (x557 : Ojs.t) -> x557
    let (get_errno : t -> int) =
      fun (x559 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x559) "errno")
    let (set_errno : t -> int -> unit) =
      fun (x560 : t) ->
        fun (x561 : int) ->
          Ojs.set_prop_ascii (t_to_js x560) "errno" (Ojs.int_to_js x561)
    let (get_code : t -> string) =
      fun (x562 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x562) "code")
    let (set_code : t -> string -> unit) =
      fun (x563 : t) ->
        fun (x564 : string) ->
          Ojs.set_prop_ascii (t_to_js x563) "code" (Ojs.string_to_js x564)
    let (get_path : t -> string) =
      fun (x565 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x565) "path")
    let (set_path : t -> string -> unit) =
      fun (x566 : t) ->
        fun (x567 : string) ->
          Ojs.set_prop_ascii (t_to_js x566) "path" (Ojs.string_to_js x567)
    let (get_syscall : t -> string) =
      fun (x568 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x568) "syscall")
    let (set_syscall : t -> string -> unit) =
      fun (x569 : t) ->
        fun (x570 : string) ->
          Ojs.set_prop_ascii (t_to_js x569) "syscall" (Ojs.string_to_js x570)
    let (get_stack : t -> string) =
      fun (x571 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x571) "stack")
    let (set_stack : t -> string -> unit) =
      fun (x572 : t) ->
        fun (x573 : string) ->
          Ojs.set_prop_ascii (t_to_js x572) "stack" (Ojs.string_to_js x573)
    let (cast : t -> Error.t) =
      fun (x574 : t) -> Error.t_of_js (t_to_js x574)
  end
module WritableStream =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x576 : Ojs.t) -> x576
    and t_to_js : t -> Ojs.t = fun (x575 : Ojs.t) -> x575
    let (get_writable : t -> bool) =
      fun (x577 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x577) "writable")
    let (set_writable : t -> bool -> unit) =
      fun (x578 : t) ->
        fun (x579 : bool) ->
          Ojs.set_prop_ascii (t_to_js x578) "writable" (Ojs.bool_to_js x579)
    let (write :
      t ->
        buffer:Uint8Array.t or_string ->
          ?cb:(?err:Error.t or_null -> unit -> unit) -> unit -> bool)
      =
      fun (x588 : t) ->
        fun ~buffer:(x580 : Uint8Array.t or_string) ->
          fun ?cb:(x581 : (?err:Error.t or_null -> unit -> unit) option) ->
            fun () ->
              Ojs.bool_of_js
                (let x589 = t_to_js x588 in
                 Ojs.call (Ojs.get_prop_ascii x589 "write") "apply"
                   [|x589;((let x582 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x582 "push"
                                 [|(or_string_to_js Uint8Array.t_to_js x580)|]);
                            (match x581 with
                             | Some x583 ->
                                 ignore
                                   (Ojs.call x582 "push"
                                      [|(Ojs.fun_to_js 1
                                           (fun (x584 : Ojs.t) ->
                                              x583
                                                ?err:(Ojs.option_of_js
                                                        (fun (x585 : Ojs.t)
                                                           ->
                                                           or_null_of_js
                                                             Error.t_of_js
                                                             x585) x584) ()))|])
                             | None -> ());
                            x582))|])
    let (write' :
      t ->
        str:string ->
          ?encoding:BufferEncoding.t ->
            ?cb:(?err:Error.t or_null -> unit -> unit) -> unit -> bool)
      =
      fun (x599 : t) ->
        fun ~str:(x590 : string) ->
          fun ?encoding:(x591 : BufferEncoding.t option) ->
            fun ?cb:(x592 : (?err:Error.t or_null -> unit -> unit) option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x600 = t_to_js x599 in
                   Ojs.call (Ojs.get_prop_ascii x600 "write") "apply"
                     [|x600;((let x593 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x593 "push"
                                   [|(Ojs.string_to_js x590)|]);
                              (match x591 with
                               | Some x598 ->
                                   ignore
                                     (Ojs.call x593 "push"
                                        [|(BufferEncoding.t_to_js x598)|])
                               | None -> ());
                              (match x592 with
                               | Some x594 ->
                                   ignore
                                     (Ojs.call x593 "push"
                                        [|(Ojs.fun_to_js 1
                                             (fun (x595 : Ojs.t) ->
                                                x594
                                                  ?err:(Ojs.option_of_js
                                                          (fun (x596 : Ojs.t)
                                                             ->
                                                             or_null_of_js
                                                               Error.t_of_js
                                                               x596) x595) ()))|])
                               | None -> ());
                              x593))|])
    let (end_ : t -> ?cb:(unit -> unit) -> unit -> unit) =
      fun (x604 : t) ->
        fun ?cb:(x601 : (unit -> unit) option) ->
          fun () ->
            ignore
              (let x605 = t_to_js x604 in
               Ojs.call (Ojs.get_prop_ascii x605 "end") "apply"
                 [|x605;((let x602 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x601 with
                           | Some x603 ->
                               ignore
                                 (Ojs.call x602 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x603 ()))|])
                           | None -> ());
                          x602))|])
    let (end' :
      t -> data:Uint8Array.t or_string -> ?cb:(unit -> unit) -> unit -> unit)
      =
      fun (x611 : t) ->
        fun ~data:(x606 : Uint8Array.t or_string) ->
          fun ?cb:(x607 : (unit -> unit) option) ->
            fun () ->
              ignore
                (let x612 = t_to_js x611 in
                 Ojs.call (Ojs.get_prop_ascii x612 "end") "apply"
                   [|x612;((let x608 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x608 "push"
                                 [|(or_string_to_js Uint8Array.t_to_js x606)|]);
                            (match x607 with
                             | Some x609 ->
                                 ignore
                                   (Ojs.call x608 "push"
                                      [|(Ojs.fun_to_js 1 (fun _ -> x609 ()))|])
                             | None -> ());
                            x608))|])
    let (end'' :
      t ->
        str:string ->
          ?encoding:BufferEncoding.t -> ?cb:(unit -> unit) -> unit -> unit)
      =
      fun (x619 : t) ->
        fun ~str:(x613 : string) ->
          fun ?encoding:(x614 : BufferEncoding.t option) ->
            fun ?cb:(x615 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x620 = t_to_js x619 in
                   Ojs.call (Ojs.get_prop_ascii x620 "end") "apply"
                     [|x620;((let x616 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x616 "push"
                                   [|(Ojs.string_to_js x613)|]);
                              (match x614 with
                               | Some x618 ->
                                   ignore
                                     (Ojs.call x616 "push"
                                        [|(BufferEncoding.t_to_js x618)|])
                               | None -> ());
                              (match x615 with
                               | Some x617 ->
                                   ignore
                                     (Ojs.call x616 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x617 ()))|])
                               | None -> ());
                              x616))|])
  end
module ReadableStream =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x622 : Ojs.t) -> x622
    and t_to_js : t -> Ojs.t = fun (x621 : Ojs.t) -> x621
    let (get_readable : t -> bool) =
      fun (x623 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x623) "readable")
    let (set_readable : t -> bool -> unit) =
      fun (x624 : t) ->
        fun (x625 : bool) ->
          Ojs.set_prop_ascii (t_to_js x624) "readable" (Ojs.bool_to_js x625)
    let (read : t -> ?size:int -> unit -> Buffer.t or_string) =
      fun (x629 : t) ->
        fun ?size:(x626 : int option) ->
          fun () ->
            or_string_of_js Buffer.t_of_js
              (let x630 = t_to_js x629 in
               Ojs.call (Ojs.get_prop_ascii x630 "read") "apply"
                 [|x630;((let x627 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x626 with
                           | Some x628 ->
                               ignore
                                 (Ojs.call x627 "push"
                                    [|(Ojs.int_to_js x628)|])
                           | None -> ());
                          x627))|])
    let (set_encoding : t -> encoding:BufferEncoding.t -> t) =
      fun (x633 : t) ->
        fun ~encoding:(x632 : BufferEncoding.t) ->
          t_of_js
            (Ojs.call (t_to_js x633) "setEncoding"
               [|(BufferEncoding.t_to_js x632)|])
    let (pause : t -> t) =
      fun (x634 : t) -> t_of_js (Ojs.call (t_to_js x634) "pause" [||])
    let (resume : t -> t) =
      fun (x635 : t) -> t_of_js (Ojs.call (t_to_js x635) "resume" [||])
    let (is_paused : t -> bool) =
      fun (x636 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x636) "isPaused" [||])
    let (pipe :
      t -> destination:'T -> ?options:AnonymousInterface0.t -> unit -> 'T) =
      fun (x641 : t) ->
        fun ~destination:(x637 : 'T) ->
          fun ?options:(x638 : AnonymousInterface0.t option) ->
            fun () ->
              Obj.magic
                (let x642 = t_to_js x641 in
                 Ojs.call (Ojs.get_prop_ascii x642 "pipe") "apply"
                   [|x642;((let x639 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x639 "push" [|(Obj.magic x637)|]);
                            (match x638 with
                             | Some x640 ->
                                 ignore
                                   (Ojs.call x639 "push"
                                      [|(AnonymousInterface0.t_to_js x640)|])
                             | None -> ());
                            x639))|])
    let (unpipe : t -> ?destination:WritableStream.t -> unit -> t) =
      fun (x646 : t) ->
        fun ?destination:(x643 : WritableStream.t option) ->
          fun () ->
            t_of_js
              (let x647 = t_to_js x646 in
               Ojs.call (Ojs.get_prop_ascii x647 "unpipe") "apply"
                 [|x647;((let x644 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          (match x643 with
                           | Some x645 ->
                               ignore
                                 (Ojs.call x644 "push"
                                    [|(WritableStream.t_to_js x645)|])
                           | None -> ());
                          x644))|])
    let (unshift :
      t ->
        chunk:Uint8Array.t or_string ->
          ?encoding:BufferEncoding.t -> unit -> unit)
      =
      fun (x653 : t) ->
        fun ~chunk:(x648 : Uint8Array.t or_string) ->
          fun ?encoding:(x649 : BufferEncoding.t option) ->
            fun () ->
              ignore
                (let x654 = t_to_js x653 in
                 Ojs.call (Ojs.get_prop_ascii x654 "unshift") "apply"
                   [|x654;((let x650 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x650 "push"
                                 [|(or_string_to_js Uint8Array.t_to_js x648)|]);
                            (match x649 with
                             | Some x651 ->
                                 ignore
                                   (Ojs.call x650 "push"
                                      [|(BufferEncoding.t_to_js x651)|])
                             | None -> ());
                            x650))|])
    let (wrap : t -> oldStream:t -> t) =
      fun (x656 : t) ->
        fun ~oldStream:(x655 : t) ->
          t_of_js (Ojs.call (t_to_js x656) "wrap" [|(t_to_js x655)|])
  end
module ReadWriteStream =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x658 : Ojs.t) -> x658
    and t_to_js : t -> Ojs.t = fun (x657 : Ojs.t) -> x657
    let (cast : t -> ReadableStream.t) =
      fun (x659 : t) -> ReadableStream.t_of_js (t_to_js x659)
    let (cast' : t -> WritableStream.t) =
      fun (x660 : t) -> WritableStream.t_of_js (t_to_js x660)
  end
module RefCounted =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x662 : Ojs.t) -> x662
    and t_to_js : t -> Ojs.t = fun (x661 : Ojs.t) -> x661
    let (ref : t -> t) =
      fun (x663 : t) -> t_of_js (Ojs.call (t_to_js x663) "ref" [||])
    let (unref : t -> t) =
      fun (x664 : t) -> t_of_js (Ojs.call (t_to_js x664) "unref" [||])
  end
module Timer =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x666 : Ojs.t) -> x666
    and t_to_js : t -> Ojs.t = fun (x665 : Ojs.t) -> x665
    let (has_ref : t -> bool) =
      fun (x667 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x667) "hasRef" [||])
    let (refresh : t -> t) =
      fun (x668 : t) -> t_of_js (Ojs.call (t_to_js x668) "refresh" [||])
    let (cast : t -> RefCounted.t) =
      fun (x669 : t) -> RefCounted.t_of_js (t_to_js x669)
  end
module Immediate =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x671 : Ojs.t) -> x671
    and t_to_js : t -> Ojs.t = fun (x670 : Ojs.t) -> x670
    let (has_ref : t -> bool) =
      fun (x672 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x672) "hasRef" [||])
    let (get_on_immediate : t -> untyped_function) =
      fun (x673 : t) ->
        untyped_function_of_js
          (Ojs.get_prop_ascii (t_to_js x673) "_onImmediate")
    let (set_on_immediate : t -> untyped_function -> unit) =
      fun (x674 : t) ->
        fun (x675 : untyped_function) ->
          Ojs.set_prop_ascii (t_to_js x674) "_onImmediate"
            (untyped_function_to_js x675)
    let (cast : t -> RefCounted.t) =
      fun (x676 : t) -> RefCounted.t_of_js (t_to_js x676)
  end
module Timeout =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x678 : Ojs.t) -> x678
    and t_to_js : t -> Ojs.t = fun (x677 : Ojs.t) -> x677
    let (has_ref : t -> bool) =
      fun (x679 : t) ->
        Ojs.bool_of_js (Ojs.call (t_to_js x679) "hasRef" [||])
    let (refresh : t -> t) =
      fun (x680 : t) -> t_of_js (Ojs.call (t_to_js x680) "refresh" [||])
    let (cast : t -> Timer.t) =
      fun (x681 : t) -> Timer.t_of_js (t_to_js x681)
  end
module Global =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x683 : Ojs.t) -> x683
    and t_to_js : t -> Ojs.t = fun (x682 : Ojs.t) -> x682
    let (get_array : t -> any) =
      fun (x684 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x684) "Array")
    let (set_array : t -> any -> unit) =
      fun (x685 : t) ->
        fun (x686 : any) ->
          Ojs.set_prop_ascii (t_to_js x685) "Array" (any_to_js x686)
    let (get_array_buffer : t -> any) =
      fun (x687 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x687) "ArrayBuffer")
    let (set_array_buffer : t -> any -> unit) =
      fun (x688 : t) ->
        fun (x689 : any) ->
          Ojs.set_prop_ascii (t_to_js x688) "ArrayBuffer" (any_to_js x689)
    let (get_boolean : t -> any) =
      fun (x690 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x690) "Boolean")
    let (set_boolean : t -> any -> unit) =
      fun (x691 : t) ->
        fun (x692 : any) ->
          Ojs.set_prop_ascii (t_to_js x691) "Boolean" (any_to_js x692)
    let (get_buffer : t -> any) =
      fun (x693 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x693) "Buffer")
    let (set_buffer : t -> any -> unit) =
      fun (x694 : t) ->
        fun (x695 : any) ->
          Ojs.set_prop_ascii (t_to_js x694) "Buffer" (any_to_js x695)
    let (get_data_view : t -> any) =
      fun (x696 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x696) "DataView")
    let (set_data_view : t -> any -> unit) =
      fun (x697 : t) ->
        fun (x698 : any) ->
          Ojs.set_prop_ascii (t_to_js x697) "DataView" (any_to_js x698)
    let (get_date : t -> any) =
      fun (x699 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x699) "Date")
    let (set_date : t -> any -> unit) =
      fun (x700 : t) ->
        fun (x701 : any) ->
          Ojs.set_prop_ascii (t_to_js x700) "Date" (any_to_js x701)
    let (get_error : t -> any) =
      fun (x702 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x702) "Error")
    let (set_error : t -> any -> unit) =
      fun (x703 : t) ->
        fun (x704 : any) ->
          Ojs.set_prop_ascii (t_to_js x703) "Error" (any_to_js x704)
    let (get_eval_error : t -> any) =
      fun (x705 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x705) "EvalError")
    let (set_eval_error : t -> any -> unit) =
      fun (x706 : t) ->
        fun (x707 : any) ->
          Ojs.set_prop_ascii (t_to_js x706) "EvalError" (any_to_js x707)
    let (get_float32_array : t -> any) =
      fun (x708 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x708) "Float32Array")
    let (set_float32_array : t -> any -> unit) =
      fun (x709 : t) ->
        fun (x710 : any) ->
          Ojs.set_prop_ascii (t_to_js x709) "Float32Array" (any_to_js x710)
    let (get_float64_array : t -> any) =
      fun (x711 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x711) "Float64Array")
    let (set_float64_array : t -> any -> unit) =
      fun (x712 : t) ->
        fun (x713 : any) ->
          Ojs.set_prop_ascii (t_to_js x712) "Float64Array" (any_to_js x713)
    let (get_function : t -> any) =
      fun (x714 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x714) "Function")
    let (set_function : t -> any -> unit) =
      fun (x715 : t) ->
        fun (x716 : any) ->
          Ojs.set_prop_ascii (t_to_js x715) "Function" (any_to_js x716)
    let (get_infinity : t -> any) =
      fun (x717 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x717) "Infinity")
    let (set_infinity : t -> any -> unit) =
      fun (x718 : t) ->
        fun (x719 : any) ->
          Ojs.set_prop_ascii (t_to_js x718) "Infinity" (any_to_js x719)
    let (get_int16_array : t -> any) =
      fun (x720 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x720) "Int16Array")
    let (set_int16_array : t -> any -> unit) =
      fun (x721 : t) ->
        fun (x722 : any) ->
          Ojs.set_prop_ascii (t_to_js x721) "Int16Array" (any_to_js x722)
    let (get_int32_array : t -> any) =
      fun (x723 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x723) "Int32Array")
    let (set_int32_array : t -> any -> unit) =
      fun (x724 : t) ->
        fun (x725 : any) ->
          Ojs.set_prop_ascii (t_to_js x724) "Int32Array" (any_to_js x725)
    let (get_int8_array : t -> any) =
      fun (x726 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x726) "Int8Array")
    let (set_int8_array : t -> any -> unit) =
      fun (x727 : t) ->
        fun (x728 : any) ->
          Ojs.set_prop_ascii (t_to_js x727) "Int8Array" (any_to_js x728)
    let (get_intl : t -> any) =
      fun (x729 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x729) "Intl")
    let (set_intl : t -> any -> unit) =
      fun (x730 : t) ->
        fun (x731 : any) ->
          Ojs.set_prop_ascii (t_to_js x730) "Intl" (any_to_js x731)
    let (get_json : t -> any) =
      fun (x732 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x732) "JSON")
    let (set_json : t -> any -> unit) =
      fun (x733 : t) ->
        fun (x734 : any) ->
          Ojs.set_prop_ascii (t_to_js x733) "JSON" (any_to_js x734)
    let (get_map : t -> MapConstructor.t) =
      fun (x735 : t) ->
        MapConstructor.t_of_js (Ojs.get_prop_ascii (t_to_js x735) "Map")
    let (set_map : t -> MapConstructor.t -> unit) =
      fun (x736 : t) ->
        fun (x737 : MapConstructor.t) ->
          Ojs.set_prop_ascii (t_to_js x736) "Map"
            (MapConstructor.t_to_js x737)
    let (get_math : t -> any) =
      fun (x738 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x738) "Math")
    let (set_math : t -> any -> unit) =
      fun (x739 : t) ->
        fun (x740 : any) ->
          Ojs.set_prop_ascii (t_to_js x739) "Math" (any_to_js x740)
    let (get_nan : t -> any) =
      fun (x741 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x741) "NaN")
    let (set_nan : t -> any -> unit) =
      fun (x742 : t) ->
        fun (x743 : any) ->
          Ojs.set_prop_ascii (t_to_js x742) "NaN" (any_to_js x743)
    let (get_number : t -> any) =
      fun (x744 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x744) "Number")
    let (set_number : t -> any -> unit) =
      fun (x745 : t) ->
        fun (x746 : any) ->
          Ojs.set_prop_ascii (t_to_js x745) "Number" (any_to_js x746)
    let (get_object : t -> any) =
      fun (x747 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x747) "Object")
    let (set_object : t -> any -> unit) =
      fun (x748 : t) ->
        fun (x749 : any) ->
          Ojs.set_prop_ascii (t_to_js x748) "Object" (any_to_js x749)
    let (get_promise : t -> any) =
      fun (x750 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x750) "Promise")
    let (set_promise : t -> any -> unit) =
      fun (x751 : t) ->
        fun (x752 : any) ->
          Ojs.set_prop_ascii (t_to_js x751) "Promise" (any_to_js x752)
    let (get_range_error : t -> any) =
      fun (x753 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x753) "RangeError")
    let (set_range_error : t -> any -> unit) =
      fun (x754 : t) ->
        fun (x755 : any) ->
          Ojs.set_prop_ascii (t_to_js x754) "RangeError" (any_to_js x755)
    let (get_reference_error : t -> any) =
      fun (x756 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x756) "ReferenceError")
    let (set_reference_error : t -> any -> unit) =
      fun (x757 : t) ->
        fun (x758 : any) ->
          Ojs.set_prop_ascii (t_to_js x757) "ReferenceError" (any_to_js x758)
    let (get_reg_exp : t -> any) =
      fun (x759 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x759) "RegExp")
    let (set_reg_exp : t -> any -> unit) =
      fun (x760 : t) ->
        fun (x761 : any) ->
          Ojs.set_prop_ascii (t_to_js x760) "RegExp" (any_to_js x761)
    let (get_set : t -> SetConstructor.t) =
      fun (x762 : t) ->
        SetConstructor.t_of_js (Ojs.get_prop_ascii (t_to_js x762) "Set")
    let (set_set : t -> SetConstructor.t -> unit) =
      fun (x763 : t) ->
        fun (x764 : SetConstructor.t) ->
          Ojs.set_prop_ascii (t_to_js x763) "Set"
            (SetConstructor.t_to_js x764)
    let (get_string : t -> any) =
      fun (x765 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x765) "String")
    let (set_string : t -> any -> unit) =
      fun (x766 : t) ->
        fun (x767 : any) ->
          Ojs.set_prop_ascii (t_to_js x766) "String" (any_to_js x767)
    let (get_symbol : t -> untyped_function) =
      fun (x768 : t) ->
        untyped_function_of_js (Ojs.get_prop_ascii (t_to_js x768) "Symbol")
    let (set_symbol : t -> untyped_function -> unit) =
      fun (x769 : t) ->
        fun (x770 : untyped_function) ->
          Ojs.set_prop_ascii (t_to_js x769) "Symbol"
            (untyped_function_to_js x770)
    let (get_syntax_error : t -> any) =
      fun (x771 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x771) "SyntaxError")
    let (set_syntax_error : t -> any -> unit) =
      fun (x772 : t) ->
        fun (x773 : any) ->
          Ojs.set_prop_ascii (t_to_js x772) "SyntaxError" (any_to_js x773)
    let (get_type_error : t -> any) =
      fun (x774 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x774) "TypeError")
    let (set_type_error : t -> any -> unit) =
      fun (x775 : t) ->
        fun (x776 : any) ->
          Ojs.set_prop_ascii (t_to_js x775) "TypeError" (any_to_js x776)
    let (get_uri_error : t -> any) =
      fun (x777 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x777) "URIError")
    let (set_uri_error : t -> any -> unit) =
      fun (x778 : t) ->
        fun (x779 : any) ->
          Ojs.set_prop_ascii (t_to_js x778) "URIError" (any_to_js x779)
    let (get_uint16_array : t -> any) =
      fun (x780 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x780) "Uint16Array")
    let (set_uint16_array : t -> any -> unit) =
      fun (x781 : t) ->
        fun (x782 : any) ->
          Ojs.set_prop_ascii (t_to_js x781) "Uint16Array" (any_to_js x782)
    let (get_uint32_array : t -> any) =
      fun (x783 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x783) "Uint32Array")
    let (set_uint32_array : t -> any -> unit) =
      fun (x784 : t) ->
        fun (x785 : any) ->
          Ojs.set_prop_ascii (t_to_js x784) "Uint32Array" (any_to_js x785)
    let (get_uint8_array : t -> any) =
      fun (x786 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x786) "Uint8Array")
    let (set_uint8_array : t -> any -> unit) =
      fun (x787 : t) ->
        fun (x788 : any) ->
          Ojs.set_prop_ascii (t_to_js x787) "Uint8Array" (any_to_js x788)
    let (get_uint8_clamped_array : t -> any) =
      fun (x789 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x789) "Uint8ClampedArray")
    let (set_uint8_clamped_array : t -> any -> unit) =
      fun (x790 : t) ->
        fun (x791 : any) ->
          Ojs.set_prop_ascii (t_to_js x790) "Uint8ClampedArray"
            (any_to_js x791)
    let (get_weak_map : t -> WeakMapConstructor.t) =
      fun (x792 : t) ->
        WeakMapConstructor.t_of_js
          (Ojs.get_prop_ascii (t_to_js x792) "WeakMap")
    let (set_weak_map : t -> WeakMapConstructor.t -> unit) =
      fun (x793 : t) ->
        fun (x794 : WeakMapConstructor.t) ->
          Ojs.set_prop_ascii (t_to_js x793) "WeakMap"
            (WeakMapConstructor.t_to_js x794)
    let (get_weak_set : t -> WeakSetConstructor.t) =
      fun (x795 : t) ->
        WeakSetConstructor.t_of_js
          (Ojs.get_prop_ascii (t_to_js x795) "WeakSet")
    let (set_weak_set : t -> WeakSetConstructor.t -> unit) =
      fun (x796 : t) ->
        fun (x797 : WeakSetConstructor.t) ->
          Ojs.set_prop_ascii (t_to_js x796) "WeakSet"
            (WeakSetConstructor.t_to_js x797)
    let (clear_immediate : t -> immediateId:Immediate.t -> unit) =
      fun (x799 : t) ->
        fun ~immediateId:(x798 : Immediate.t) ->
          ignore
            (Ojs.call (t_to_js x799) "clearImmediate"
               [|(Immediate.t_to_js x798)|])
    let (clear_interval : t -> intervalId:Timeout.t -> unit) =
      fun (x801 : t) ->
        fun ~intervalId:(x800 : Timeout.t) ->
          ignore
            (Ojs.call (t_to_js x801) "clearInterval"
               [|(Timeout.t_to_js x800)|])
    let (clear_timeout : t -> timeoutId:Timeout.t -> unit) =
      fun (x803 : t) ->
        fun ~timeoutId:(x802 : Timeout.t) ->
          ignore
            (Ojs.call (t_to_js x803) "clearTimeout"
               [|(Timeout.t_to_js x802)|])
    let (get_decode_uri : t -> any) =
      fun (x804 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x804) "decodeURI")
    let (set_decode_uri : t -> any -> unit) =
      fun (x805 : t) ->
        fun (x806 : any) ->
          Ojs.set_prop_ascii (t_to_js x805) "decodeURI" (any_to_js x806)
    let (get_decode_uri_component : t -> any) =
      fun (x807 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x807) "decodeURIComponent")
    let (set_decode_uri_component : t -> any -> unit) =
      fun (x808 : t) ->
        fun (x809 : any) ->
          Ojs.set_prop_ascii (t_to_js x808) "decodeURIComponent"
            (any_to_js x809)
    let (get_encode_uri : t -> any) =
      fun (x810 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x810) "encodeURI")
    let (set_encode_uri : t -> any -> unit) =
      fun (x811 : t) ->
        fun (x812 : any) ->
          Ojs.set_prop_ascii (t_to_js x811) "encodeURI" (any_to_js x812)
    let (get_encode_uri_component : t -> any) =
      fun (x813 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x813) "encodeURIComponent")
    let (set_encode_uri_component : t -> any -> unit) =
      fun (x814 : t) ->
        fun (x815 : any) ->
          Ojs.set_prop_ascii (t_to_js x814) "encodeURIComponent"
            (any_to_js x815)
    let (escape : t -> str:string -> string) =
      fun (x817 : t) ->
        fun ~str:(x816 : string) ->
          Ojs.string_of_js
            (Ojs.call (t_to_js x817) "escape" [|(Ojs.string_to_js x816)|])
    let (get_eval : t -> any) =
      fun (x818 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x818) "eval")
    let (set_eval : t -> any -> unit) =
      fun (x819 : t) ->
        fun (x820 : any) ->
          Ojs.set_prop_ascii (t_to_js x819) "eval" (any_to_js x820)
    let (get_global : t -> t) =
      fun (x821 : t) -> t_of_js (Ojs.get_prop_ascii (t_to_js x821) "global")
    let (set_global : t -> t -> unit) =
      fun (x822 : t) ->
        fun (x823 : t) ->
          Ojs.set_prop_ascii (t_to_js x822) "global" (t_to_js x823)
    let (get_is_finite : t -> any) =
      fun (x824 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x824) "isFinite")
    let (set_is_finite : t -> any -> unit) =
      fun (x825 : t) ->
        fun (x826 : any) ->
          Ojs.set_prop_ascii (t_to_js x825) "isFinite" (any_to_js x826)
    let (get_is_nan : t -> any) =
      fun (x827 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x827) "isNaN")
    let (set_is_nan : t -> any -> unit) =
      fun (x828 : t) ->
        fun (x829 : any) ->
          Ojs.set_prop_ascii (t_to_js x828) "isNaN" (any_to_js x829)
    let (get_parse_float : t -> any) =
      fun (x830 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x830) "parseFloat")
    let (set_parse_float : t -> any -> unit) =
      fun (x831 : t) ->
        fun (x832 : any) ->
          Ojs.set_prop_ascii (t_to_js x831) "parseFloat" (any_to_js x832)
    let (get_parse_int : t -> any) =
      fun (x833 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x833) "parseInt")
    let (set_parse_int : t -> any -> unit) =
      fun (x834 : t) ->
        fun (x835 : any) ->
          Ojs.set_prop_ascii (t_to_js x834) "parseInt" (any_to_js x835)
    let (set_immediate :
      t -> callback:(args:any list -> unit) -> args:any list -> Immediate.t)
      =
      fun (x842 : t) ->
        fun ~callback:(x836 : args:any list -> unit) ->
          fun ~args:(x837 : any list) ->
            Immediate.t_of_js
              (let x843 = t_to_js x842 in
               Ojs.call (Ojs.get_prop_ascii x843 "setImmediate") "apply"
                 [|x843;((let x838 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x838 "push"
                               [|(Ojs.fun_to_js_args
                                    (fun (x840 : _) ->
                                       x836
                                         ~args:(Ojs.list_of_js_from any_of_js
                                                  x840 0)))|]);
                          List.iter
                            (fun (x839 : any) ->
                               ignore
                                 (Ojs.call x838 "push" [|(any_to_js x839)|]))
                            x837;
                          x838))|])
    let (set_interval :
      t ->
        callback:(args:any list -> unit) ->
          ?ms:int -> args:any list -> Timeout.t)
      =
      fun (x852 : t) ->
        fun ~callback:(x844 : args:any list -> unit) ->
          fun ?ms:(x845 : int option) ->
            fun ~args:(x846 : any list) ->
              Timeout.t_of_js
                (let x853 = t_to_js x852 in
                 Ojs.call (Ojs.get_prop_ascii x853 "setInterval") "apply"
                   [|x853;((let x847 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x847 "push"
                                 [|(Ojs.fun_to_js_args
                                      (fun (x850 : _) ->
                                         x844
                                           ~args:(Ojs.list_of_js_from
                                                    any_of_js x850 0)))|]);
                            (match x845 with
                             | Some x849 ->
                                 ignore
                                   (Ojs.call x847 "push"
                                      [|(Ojs.int_to_js x849)|])
                             | None -> ());
                            List.iter
                              (fun (x848 : any) ->
                                 ignore
                                   (Ojs.call x847 "push" [|(any_to_js x848)|]))
                              x846;
                            x847))|])
    let (set_timeout :
      t ->
        callback:(args:any list -> unit) ->
          ?ms:int -> args:any list -> Timeout.t)
      =
      fun (x862 : t) ->
        fun ~callback:(x854 : args:any list -> unit) ->
          fun ?ms:(x855 : int option) ->
            fun ~args:(x856 : any list) ->
              Timeout.t_of_js
                (let x863 = t_to_js x862 in
                 Ojs.call (Ojs.get_prop_ascii x863 "setTimeout") "apply"
                   [|x863;((let x857 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x857 "push"
                                 [|(Ojs.fun_to_js_args
                                      (fun (x860 : _) ->
                                         x854
                                           ~args:(Ojs.list_of_js_from
                                                    any_of_js x860 0)))|]);
                            (match x855 with
                             | Some x859 ->
                                 ignore
                                   (Ojs.call x857 "push"
                                      [|(Ojs.int_to_js x859)|])
                             | None -> ());
                            List.iter
                              (fun (x858 : any) ->
                                 ignore
                                   (Ojs.call x857 "push" [|(any_to_js x858)|]))
                              x856;
                            x857))|])
    let (queue_microtask : t -> callback:(unit -> unit) -> unit) =
      fun (x865 : t) ->
        fun ~callback:(x864 : unit -> unit) ->
          ignore
            (Ojs.call (t_to_js x865) "queueMicrotask"
               [|(Ojs.fun_to_js 1 (fun _ -> x864 ()))|])
    let (get_undefined : t -> any) =
      fun (x866 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x866) "undefined")
    let (set_undefined : t -> any -> unit) =
      fun (x867 : t) ->
        fun (x868 : any) ->
          Ojs.set_prop_ascii (t_to_js x867) "undefined" (any_to_js x868)
    let (unescape : t -> str:string -> string) =
      fun (x870 : t) ->
        fun ~str:(x869 : string) ->
          Ojs.string_of_js
            (Ojs.call (t_to_js x870) "unescape" [|(Ojs.string_to_js x869)|])
    let (gc : t -> unit) =
      fun (x871 : t) -> ignore (Ojs.call (t_to_js x871) "gc" [||])
    let (get_v8debug : t -> any) =
      fun (x872 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x872) "v8debug")
    let (set_v8debug : t -> any -> unit) =
      fun (x873 : t) ->
        fun (x874 : any) ->
          Ojs.set_prop_ascii (t_to_js x873) "v8debug" (any_to_js x874)
  end
module TypedArray =
  struct
    type t =
      | Float64Array of Float64Array.t 
      | Int16Array of Int16Array.t 
      | Int32Array of Int32Array.t 
      | Int8Array of Int8Array.t 
      | Uint16Array of Uint16Array.t 
      | Uint32Array of Uint32Array.t 
      | Uint8Array of Uint8Array.t 
      | Uint8ClampedArray of Uint8ClampedArray.t 
      | Float32Array of Float32Array.t 
      | BigUint64Array of BigUint64Array.t 
      | BigInt64Array of BigInt64Array.t 
    let rec t_to_js : t -> Ojs.t =
      fun (x875 : t) ->
        match x875 with
        | Float64Array x876 -> Float64Array.t_to_js x876
        | Int16Array x877 -> Int16Array.t_to_js x877
        | Int32Array x878 -> Int32Array.t_to_js x878
        | Int8Array x879 -> Int8Array.t_to_js x879
        | Uint16Array x880 -> Uint16Array.t_to_js x880
        | Uint32Array x881 -> Uint32Array.t_to_js x881
        | Uint8Array x882 -> Uint8Array.t_to_js x882
        | Uint8ClampedArray x883 -> Uint8ClampedArray.t_to_js x883
        | Float32Array x884 -> Float32Array.t_to_js x884
        | BigUint64Array x885 -> BigUint64Array.t_to_js x885
        | BigInt64Array x886 -> BigInt64Array.t_to_js x886
    let t_to_js =
      function
      | Float64Array x -> Obj.magic x
      | Int16Array x -> Obj.magic x
      | Int32Array x -> Obj.magic x
      | Int8Array x -> Obj.magic x
      | Uint16Array x -> Obj.magic x
      | Uint32Array x -> Obj.magic x
      | Uint8Array x -> Obj.magic x
      | Uint8ClampedArray x -> Obj.magic x
      | Float32Array x -> Obj.magic x
      | BigUint64Array x -> Obj.magic x
      | BigInt64Array x -> Obj.magic x
    let t_of_js js =
      match Ojs.obj_type js with
      | "Float64Array" -> Float64Array (Obj.magic js)
      | "Int16Array" -> Int16Array (Obj.magic js)
      | "Int32Array" -> Int32Array (Obj.magic js)
      | "Int8Array" -> Int8Array (Obj.magic js)
      | "Uint16Array" -> Uint16Array (Obj.magic js)
      | "Uint32Array" -> Uint32Array (Obj.magic js)
      | "Uint8Array" -> Uint8Array (Obj.magic js)
      | "Uint8ClampedArray" -> Uint8ClampedArray (Obj.magic js)
      | "Float32Array" -> Float32Array (Obj.magic js)
      | "BigUint64Array" -> BigUint64Array (Obj.magic js)
      | "BigInt64Array" -> BigInt64Array (Obj.magic js)
      | _ -> assert false
  end
module ArrayBufferView =
  struct
    type t = (DataView.t, TypedArray.t) union2
    let rec t_of_js : Ojs.t -> t =
      fun (x892 : Ojs.t) ->
        union2_of_js DataView.t_of_js TypedArray.t_of_js x892
    and t_to_js : t -> Ojs.t =
      fun (x889 : (DataView.t, TypedArray.t) union2) ->
        union2_to_js DataView.t_to_js TypedArray.t_to_js x889
  end
module Dict =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x896 : Ojs.t) -> x896
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x895 : Ojs.t) -> x895
    let (get : 'T t -> string -> 'T or_undefined) =
      fun (x897 : 'T t) ->
        fun (x899 : string) ->
          or_undefined_of_js Obj.magic
            (Ojs.get_prop (t_to_js Obj.magic x897) (Ojs.string_to_js x899))
    let (set : 'T t -> string -> 'T or_undefined -> unit) =
      fun (x901 : 'T t) ->
        fun (x903 : string) ->
          fun (x904 : 'T or_undefined) ->
            Ojs.set_prop (t_to_js Obj.magic x901) (Ojs.string_to_js x903)
              (or_undefined_to_js Obj.magic x904)
  end
module ReadOnlyDict =
  struct
    type 'T t = Ojs.t
    let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type __T) ->
      fun (__T_of_js : Ojs.t -> __T) -> fun (x907 : Ojs.t) -> x907
    and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
      fun (__T_to_js : __T -> Ojs.t) -> fun (x906 : Ojs.t) -> x906
    let (get : 'T t -> string -> 'T or_undefined) =
      fun (x908 : 'T t) ->
        fun (x910 : string) ->
          or_undefined_of_js Obj.magic
            (Ojs.get_prop (t_to_js Obj.magic x908) (Ojs.string_to_js x910))
  end
module Module =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x913 : Ojs.t) -> x913
    and t_to_js : t -> Ojs.t = fun (x912 : Ojs.t) -> x912
    let (get_exports : t -> any) =
      fun (x914 : t) ->
        any_of_js (Ojs.get_prop_ascii (t_to_js x914) "exports")
    let (set_exports : t -> any -> unit) =
      fun (x915 : t) ->
        fun (x916 : any) ->
          Ojs.set_prop_ascii (t_to_js x915) "exports" (any_to_js x916)
    let (get_id : t -> string) =
      fun (x917 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x917) "id")
    let (set_id : t -> string -> unit) =
      fun (x918 : t) ->
        fun (x919 : string) ->
          Ojs.set_prop_ascii (t_to_js x918) "id" (Ojs.string_to_js x919)
    let (get_filename : t -> string) =
      fun (x920 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x920) "filename")
    let (set_filename : t -> string -> unit) =
      fun (x921 : t) ->
        fun (x922 : string) ->
          Ojs.set_prop_ascii (t_to_js x921) "filename"
            (Ojs.string_to_js x922)
    let (get_loaded : t -> bool) =
      fun (x923 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x923) "loaded")
    let (set_loaded : t -> bool -> unit) =
      fun (x924 : t) ->
        fun (x925 : bool) ->
          Ojs.set_prop_ascii (t_to_js x924) "loaded" (Ojs.bool_to_js x925)
    let (get_parent : t -> t or_null_or_undefined) =
      fun (x926 : t) ->
        or_null_or_undefined_of_js t_of_js
          (Ojs.get_prop_ascii (t_to_js x926) "parent")
    let (set_parent : t -> t or_null_or_undefined -> unit) =
      fun (x928 : t) ->
        fun (x929 : t or_null_or_undefined) ->
          Ojs.set_prop_ascii (t_to_js x928) "parent"
            (or_null_or_undefined_to_js t_to_js x929)
    let (get_children : t -> t list) =
      fun (x931 : t) ->
        Ojs.list_of_js t_of_js (Ojs.get_prop_ascii (t_to_js x931) "children")
    let (set_children : t -> t list -> unit) =
      fun (x933 : t) ->
        fun (x934 : t list) ->
          Ojs.set_prop_ascii (t_to_js x933) "children"
            (Ojs.list_to_js t_to_js x934)
    let (get_path : t -> string) =
      fun (x936 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x936) "path")
    let (set_path : t -> string -> unit) =
      fun (x937 : t) ->
        fun (x938 : string) ->
          Ojs.set_prop_ascii (t_to_js x937) "path" (Ojs.string_to_js x938)
    let (get_paths : t -> string list) =
      fun (x939 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x939) "paths")
    let (set_paths : t -> string list -> unit) =
      fun (x941 : t) ->
        fun (x942 : string list) ->
          Ojs.set_prop_ascii (t_to_js x941) "paths"
            (Ojs.list_to_js Ojs.string_to_js x942)
  end
module RequireResolve =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x945 : Ojs.t) -> x945
    and t_to_js : t -> Ojs.t = fun (x944 : Ojs.t) -> x944
    let (apply :
      t -> id:string -> ?options:AnonymousInterface1.t -> unit -> string) =
      fun (x950 : t) ->
        fun ~id:(x946 : string) ->
          fun ?options:(x947 : AnonymousInterface1.t option) ->
            fun () ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x950) "apply"
                   [|Ojs.null;((let x948 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x948 "push"
                                     [|(Ojs.string_to_js x946)|]);
                                (match x947 with
                                 | Some x949 ->
                                     ignore
                                       (Ojs.call x948 "push"
                                          [|(AnonymousInterface1.t_to_js x949)|])
                                 | None -> ());
                                x948))|])
    let (paths : t -> request:string -> string list or_null) =
      fun (x952 : t) ->
        fun ~request:(x951 : string) ->
          or_null_of_js
            (fun (x953 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x953)
            (Ojs.call (t_to_js x952) "paths" [|(Ojs.string_to_js x951)|])
  end
module RequireExtensions =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x956 : Ojs.t) -> x956
    and t_to_js : t -> Ojs.t = fun (x955 : Ojs.t) -> x955
    let (cast : t -> (m:Module.t -> filename:string -> any) Dict.t) =
      fun (x957 : t) ->
        Dict.t_of_js
          (fun (x958 : Ojs.t) ->
             fun ~m:(x959 : Module.t) ->
               fun ~filename:(x960 : string) ->
                 any_of_js
                   (Ojs.apply x958
                      [|(Module.t_to_js x959);(Ojs.string_to_js x960)|]))
          (t_to_js x957)
  end
module NodeModule =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x962 : Ojs.t) -> x962
    and t_to_js : t -> Ojs.t = fun (x961 : Ojs.t) -> x961
    let (cast : t -> Module.t) =
      fun (x963 : t) -> Module.t_of_js (t_to_js x963)
  end
module Require =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x965 : Ojs.t) -> x965
    and t_to_js : t -> Ojs.t = fun (x964 : Ojs.t) -> x964
    let (apply : t -> id:string -> any) =
      fun (x967 : t) ->
        fun ~id:(x966 : string) ->
          any_of_js (Ojs.apply (t_to_js x967) [|(Ojs.string_to_js x966)|])
    let (get_resolve : t -> RequireResolve.t) =
      fun (x968 : t) ->
        RequireResolve.t_of_js (Ojs.get_prop_ascii (t_to_js x968) "resolve")
    let (set_resolve : t -> RequireResolve.t -> unit) =
      fun (x969 : t) ->
        fun (x970 : RequireResolve.t) ->
          Ojs.set_prop_ascii (t_to_js x969) "resolve"
            (RequireResolve.t_to_js x970)
    let (get_cache : t -> NodeModule.t Dict.t) =
      fun (x971 : t) ->
        Dict.t_of_js NodeModule.t_of_js
          (Ojs.get_prop_ascii (t_to_js x971) "cache")
    let (set_cache : t -> NodeModule.t Dict.t -> unit) =
      fun (x973 : t) ->
        fun (x974 : NodeModule.t Dict.t) ->
          Ojs.set_prop_ascii (t_to_js x973) "cache"
            (Dict.t_to_js NodeModule.t_to_js x974)
    let (get_extensions : t -> RequireExtensions.t) =
      fun (x976 : t) ->
        RequireExtensions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x976) "extensions")
    let (set_extensions : t -> RequireExtensions.t -> unit) =
      fun (x977 : t) ->
        fun (x978 : RequireExtensions.t) ->
          Ojs.set_prop_ascii (t_to_js x977) "extensions"
            (RequireExtensions.t_to_js x978)
    let (get_main : t -> Module.t or_undefined) =
      fun (x979 : t) ->
        or_undefined_of_js Module.t_of_js
          (Ojs.get_prop_ascii (t_to_js x979) "main")
    let (set_main : t -> Module.t or_undefined -> unit) =
      fun (x981 : t) ->
        fun (x982 : Module.t or_undefined) ->
          Ojs.set_prop_ascii (t_to_js x981) "main"
            (or_undefined_to_js Module.t_to_js x982)
  end
module NodeRequire =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x985 : Ojs.t) -> x985
    and t_to_js : t -> Ojs.t = fun (x984 : Ojs.t) -> x984
    let (cast : t -> Require.t) =
      fun (x986 : t) -> Require.t_of_js (t_to_js x986)
  end
let __filename () =
  (Ojs.get_prop_ascii Ojs.global "__filename") |> Ojs.string_of_js
let __dirname () =
  (Ojs.get_prop_ascii Ojs.global "__dirname") |> Ojs.string_of_js
let (set_timeout :
  callback:(args:any list -> unit) -> ?ms:int -> args:any list -> Timeout.t)
  =
  fun ~callback:(x987 : args:any list -> unit) ->
    fun ?ms:(x988 : int option) ->
      fun ~args:(x989 : any list) ->
        Timeout.t_of_js
          (let x995 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x995 "setTimeout") "apply"
             [|x995;((let x990 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x990 "push"
                           [|(Ojs.fun_to_js_args
                                (fun (x993 : _) ->
                                   x987
                                     ~args:(Ojs.list_of_js_from any_of_js
                                              x993 0)))|]);
                      (match x988 with
                       | Some x992 ->
                           ignore
                             (Ojs.call x990 "push" [|(Ojs.int_to_js x992)|])
                       | None -> ());
                      List.iter
                        (fun (x991 : any) ->
                           ignore (Ojs.call x990 "push" [|(any_to_js x991)|]))
                        x989;
                      x990))|])
module SetTimeout =
  struct
    let (__promisify__ : ms:int -> unit Promise.t) =
      fun ~ms:(x996 : int) ->
        Promise.t_of_js Ojs.unit_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "setTimeout")
             "__promisify__" [|(Ojs.int_to_js x996)|])
    let (__promisify__ : ms:int -> value:'T -> 'T Promise.t) =
      fun ~ms:(x998 : int) ->
        fun ~value:(x999 : 'T) ->
          Promise.t_of_js Obj.magic
            (Ojs.call (Ojs.get_prop_ascii Ojs.global "setTimeout")
               "__promisify__" [|(Ojs.int_to_js x998);(Obj.magic x999)|])
  end
let (clear_timeout : timeoutId:Timeout.t -> unit) =
  fun ~timeoutId:(x1001 : Timeout.t) ->
    ignore (Ojs.call Ojs.global "clearTimeout" [|(Timeout.t_to_js x1001)|])
let (set_interval :
  callback:(args:any list -> unit) -> ?ms:int -> args:any list -> Timeout.t)
  =
  fun ~callback:(x1002 : args:any list -> unit) ->
    fun ?ms:(x1003 : int option) ->
      fun ~args:(x1004 : any list) ->
        Timeout.t_of_js
          (let x1010 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x1010 "setInterval") "apply"
             [|x1010;((let x1005 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       ignore
                         (Ojs.call x1005 "push"
                            [|(Ojs.fun_to_js_args
                                 (fun (x1008 : _) ->
                                    x1002
                                      ~args:(Ojs.list_of_js_from any_of_js
                                               x1008 0)))|]);
                       (match x1003 with
                        | Some x1007 ->
                            ignore
                              (Ojs.call x1005 "push"
                                 [|(Ojs.int_to_js x1007)|])
                        | None -> ());
                       List.iter
                         (fun (x1006 : any) ->
                            ignore
                              (Ojs.call x1005 "push" [|(any_to_js x1006)|]))
                         x1004;
                       x1005))|])
let (clear_interval : intervalId:Timeout.t -> unit) =
  fun ~intervalId:(x1011 : Timeout.t) ->
    ignore (Ojs.call Ojs.global "clearInterval" [|(Timeout.t_to_js x1011)|])
let (set_immediate :
  callback:(args:any list -> unit) -> args:any list -> Immediate.t) =
  fun ~callback:(x1012 : args:any list -> unit) ->
    fun ~args:(x1013 : any list) ->
      Immediate.t_of_js
        (let x1018 = Ojs.global in
         Ojs.call (Ojs.get_prop_ascii x1018 "setImmediate") "apply"
           [|x1018;((let x1014 =
                       Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                         [||] in
                     ignore
                       (Ojs.call x1014 "push"
                          [|(Ojs.fun_to_js_args
                               (fun (x1016 : _) ->
                                  x1012
                                    ~args:(Ojs.list_of_js_from any_of_js
                                             x1016 0)))|]);
                     List.iter
                       (fun (x1015 : any) ->
                          ignore
                            (Ojs.call x1014 "push" [|(any_to_js x1015)|]))
                       x1013;
                     x1014))|])
module SetImmediate =
  struct
    let (__promisify__ : unit -> unit Promise.t) =
      fun () ->
        Promise.t_of_js Ojs.unit_of_js
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "setImmediate")
             "__promisify__" [||])
    let (__promisify__ : value:'T -> 'T Promise.t) =
      fun ~value:(x1020 : 'T) ->
        Promise.t_of_js Obj.magic
          (Ojs.call (Ojs.get_prop_ascii Ojs.global "setImmediate")
             "__promisify__" [|(Obj.magic x1020)|])
  end
let (clear_immediate : immediateId:Immediate.t -> unit) =
  fun ~immediateId:(x1022 : Immediate.t) ->
    ignore
      (Ojs.call Ojs.global "clearImmediate" [|(Immediate.t_to_js x1022)|])
let (queue_microtask : callback:(unit -> unit) -> unit) =
  fun ~callback:(x1023 : unit -> unit) ->
    ignore
      (Ojs.call Ojs.global "queueMicrotask"
         [|(Ojs.fun_to_js 1 (fun _ -> x1023 ()))|])
let (require : NodeRequire.t) =
  NodeRequire.t_of_js (Ojs.get_prop_ascii Ojs.global "require")
let (module_ : NodeModule.t) =
  NodeModule.t_of_js (Ojs.get_prop_ascii Ojs.global "module")
let (exports : any) = any_of_js (Ojs.get_prop_ascii Ojs.global "exports")
