[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_chunk : t -> any) =
      fun (x3 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x3) "chunk")
    let (set_chunk : t -> any -> unit) =
      fun (x4 : t) ->
        fun (x5 : any) ->
          Ojs.set_prop_ascii (t_to_js x4) "chunk" (any_to_js x5)
    let (get_encoding : t -> BufferEncoding.t) =
      fun (x6 : t) ->
        BufferEncoding.t_of_js (Ojs.get_prop_ascii (t_to_js x6) "encoding")
    let (set_encoding : t -> BufferEncoding.t -> unit) =
      fun (x7 : t) ->
        fun (x8 : BufferEncoding.t) ->
          Ojs.set_prop_ascii (t_to_js x7) "encoding"
            (BufferEncoding.t_to_js x8)
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10 : Ojs.t) -> x10
    and t_to_js : t -> Ojs.t = fun (x9 : Ojs.t) -> x9
    let (get_end : t -> bool) =
      fun (x11 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x11) "end")
    let (set_end : t -> bool -> unit) =
      fun (x12 : t) ->
        fun (x13 : bool) ->
          Ojs.set_prop_ascii (t_to_js x12) "end" (Ojs.bool_to_js x13)
  end
module Stream =
  struct
    module Internal =
      struct
        module Base =
          struct
            include struct include Node_events.Events.EventEmitter end
            let (pipe :
              t -> 'T -> ?options:AnonymousInterface1.t -> unit -> 'T) =
              fun (x18 : t) ->
                fun (x14 : 'T) ->
                  fun ?options:(x15 : AnonymousInterface1.t option) ->
                    fun () ->
                      Obj.magic
                        (let x19 = t_to_js x18 in
                         Ojs.call (Ojs.get_prop_ascii x19 "pipe") "apply"
                           [|x19;((let x16 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x16 "push" [|(Obj.magic x14)|]);
                                   (match x15 with
                                    | Some x17 ->
                                        ignore
                                          (Ojs.call x16 "push"
                                             [|(AnonymousInterface1.t_to_js
                                                  x17)|])
                                    | None -> ());
                                   x16))|])
          end
        module Stream =
          struct
            include struct include Base end
            let (create : ?opts:stream_internal_ReadableOptions -> unit -> t)
              =
              fun ?opts:(x20 : stream_internal_ReadableOptions option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "Stream")
                       (let x21 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x20 with
                         | Some x22 ->
                             ignore
                               (Ojs.call x21 "push"
                                  [|(stream_internal_ReadableOptions_to_js
                                       x22)|])
                         | None -> ());
                        x21))
            let (cast : t -> stream_internal) =
              fun (x23 : t) -> stream_internal_of_js (t_to_js x23)
          end
        module ReadableOptions =
          struct
            type t = stream_internal_ReadableOptions
            let rec t_of_js : Ojs.t -> t =
              fun (x25 : Ojs.t) -> stream_internal_ReadableOptions_of_js x25
            and t_to_js : t -> Ojs.t =
              fun (x24 : stream_internal_ReadableOptions) ->
                stream_internal_ReadableOptions_to_js x24
            let (get_highWaterMark : t -> int) =
              fun (x26 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x26) "highWaterMark")
            let (set_highWaterMark : t -> int -> unit) =
              fun (x27 : t) ->
                fun (x28 : int) ->
                  Ojs.set_prop_ascii (t_to_js x27) "highWaterMark"
                    (Ojs.int_to_js x28)
            let (get_encoding : t -> BufferEncoding.t) =
              fun (x29 : t) ->
                BufferEncoding.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x29) "encoding")
            let (set_encoding : t -> BufferEncoding.t -> unit) =
              fun (x30 : t) ->
                fun (x31 : BufferEncoding.t) ->
                  Ojs.set_prop_ascii (t_to_js x30) "encoding"
                    (BufferEncoding.t_to_js x31)
            let (get_objectMode : t -> bool) =
              fun (x32 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x32) "objectMode")
            let (set_objectMode : t -> bool -> unit) =
              fun (x33 : t) ->
                fun (x34 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x33) "objectMode"
                    (Ojs.bool_to_js x34)
            let (read :
              t -> this:stream_internal_Readable -> size:int -> unit) =
              fun (x37 : t) ->
                fun ~this:(x35 : stream_internal_Readable) ->
                  fun ~size:(x36 : int) ->
                    ignore
                      (Ojs.call (t_to_js x37) "read"
                         [|(stream_internal_Readable_to_js x35);(Ojs.int_to_js
                                                                   x36)|])
            let (destroy :
              t ->
                this:stream_internal_Readable ->
                  error:Error.t or_null ->
                    callback:(error:Error.t or_null -> unit) -> unit)
              =
              fun (x44 : t) ->
                fun ~this:(x38 : stream_internal_Readable) ->
                  fun ~error:(x39 : Error.t or_null) ->
                    fun ~callback:(x41 : error:Error.t or_null -> unit) ->
                      ignore
                        (Ojs.call (t_to_js x44) "destroy"
                           [|(stream_internal_Readable_to_js x38);(or_null_to_js
                                                                    Error.t_to_js
                                                                    x39);(
                             Ojs.fun_to_js 1
                               (fun (x42 : Ojs.t) ->
                                  x41
                                    ~error:(or_null_of_js Error.t_of_js x42)))|])
            let (get_autoDestroy : t -> bool) =
              fun (x45 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x45) "autoDestroy")
            let (set_autoDestroy : t -> bool -> unit) =
              fun (x46 : t) ->
                fun (x47 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x46) "autoDestroy"
                    (Ojs.bool_to_js x47)
          end
        module Readable =
          struct
            include struct include Stream end
            let (from :
              iterable:(any AsyncIterable.t, any Iterable.t) union2 ->
                ?options:stream_internal_ReadableOptions -> unit -> t)
              =
              fun
                ~iterable:(x48 :
                            (any AsyncIterable.t, any Iterable.t) union2)
                ->
                fun ?options:(x49 : stream_internal_ReadableOptions option)
                  ->
                  fun () ->
                    t_of_js
                      (let x56 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Import.stream "internal")
                           "Readable" in
                       Ojs.call (Ojs.get_prop_ascii x56 "from") "apply"
                         [|x56;((let x50 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x50 "push"
                                      [|(union2_to_js
                                           (fun (x52 : any AsyncIterable.t)
                                              ->
                                              AsyncIterable.t_to_js any_to_js
                                                x52)
                                           (fun (x54 : any Iterable.t) ->
                                              Iterable.t_to_js any_to_js x54)
                                           x48)|]);
                                 (match x49 with
                                  | Some x51 ->
                                      ignore
                                        (Ojs.call x50 "push"
                                           [|(stream_internal_ReadableOptions_to_js
                                                x51)|])
                                  | None -> ());
                                 x50))|])
            let (get_readable : t -> bool) =
              fun (x57 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x57) "readable")
            let (set_readable : t -> bool -> unit) =
              fun (x58 : t) ->
                fun (x59 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x58) "readable"
                    (Ojs.bool_to_js x59)
            let (get_readableEncoding : t -> BufferEncoding.t or_null) =
              fun (x60 : t) ->
                or_null_of_js BufferEncoding.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x60) "readableEncoding")
            let (get_readableEnded : t -> bool) =
              fun (x62 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x62) "readableEnded")
            let (get_readableFlowing : t -> bool or_null) =
              fun (x63 : t) ->
                or_null_of_js Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x63) "readableFlowing")
            let (get_readableHighWaterMark : t -> int) =
              fun (x65 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x65) "readableHighWaterMark")
            let (get_readableLength : t -> int) =
              fun (x66 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x66) "readableLength")
            let (get_readableObjectMode : t -> bool) =
              fun (x67 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x67) "readableObjectMode")
            let (get_destroyed : t -> bool) =
              fun (x68 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x68) "destroyed")
            let (set_destroyed : t -> bool -> unit) =
              fun (x69 : t) ->
                fun (x70 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x69) "destroyed"
                    (Ojs.bool_to_js x70)
            let (create : ?opts:stream_internal_ReadableOptions -> unit -> t)
              =
              fun ?opts:(x71 : stream_internal_ReadableOptions option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "Readable")
                       (let x72 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x71 with
                         | Some x73 ->
                             ignore
                               (Ojs.call x72 "push"
                                  [|(stream_internal_ReadableOptions_to_js
                                       x73)|])
                         | None -> ());
                        x72))
            let (_read : t -> size:int -> unit) =
              fun (x75 : t) ->
                fun ~size:(x74 : int) ->
                  ignore
                    (Ojs.call (t_to_js x75) "_read" [|(Ojs.int_to_js x74)|])
            let (read : t -> ?size:int -> unit -> any) =
              fun (x79 : t) ->
                fun ?size:(x76 : int option) ->
                  fun () ->
                    any_of_js
                      (let x80 = t_to_js x79 in
                       Ojs.call (Ojs.get_prop_ascii x80 "read") "apply"
                         [|x80;((let x77 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x76 with
                                  | Some x78 ->
                                      ignore
                                        (Ojs.call x77 "push"
                                           [|(Ojs.int_to_js x78)|])
                                  | None -> ());
                                 x77))|])
            let (setEncoding : t -> encoding:BufferEncoding.t -> t) =
              fun (x82 : t) ->
                fun ~encoding:(x81 : BufferEncoding.t) ->
                  t_of_js
                    (Ojs.call (t_to_js x82) "setEncoding"
                       [|(BufferEncoding.t_to_js x81)|])
            let (pause : t -> t) =
              fun (x83 : t) -> t_of_js (Ojs.call (t_to_js x83) "pause" [||])
            let (resume : t -> t) =
              fun (x84 : t) -> t_of_js (Ojs.call (t_to_js x84) "resume" [||])
            let (isPaused : t -> bool) =
              fun (x85 : t) ->
                Ojs.bool_of_js (Ojs.call (t_to_js x85) "isPaused" [||])
            let (unpipe : t -> ?destination:WritableStream.t -> unit -> t) =
              fun (x89 : t) ->
                fun ?destination:(x86 : WritableStream.t option) ->
                  fun () ->
                    t_of_js
                      (let x90 = t_to_js x89 in
                       Ojs.call (Ojs.get_prop_ascii x90 "unpipe") "apply"
                         [|x90;((let x87 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x86 with
                                  | Some x88 ->
                                      ignore
                                        (Ojs.call x87 "push"
                                           [|(WritableStream.t_to_js x88)|])
                                  | None -> ());
                                 x87))|])
            let (unshift :
              t -> chunk:any -> ?encoding:BufferEncoding.t -> unit -> unit) =
              fun (x95 : t) ->
                fun ~chunk:(x91 : any) ->
                  fun ?encoding:(x92 : BufferEncoding.t option) ->
                    fun () ->
                      ignore
                        (let x96 = t_to_js x95 in
                         Ojs.call (Ojs.get_prop_ascii x96 "unshift") "apply"
                           [|x96;((let x93 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x93 "push" [|(any_to_js x91)|]);
                                   (match x92 with
                                    | Some x94 ->
                                        ignore
                                          (Ojs.call x93 "push"
                                             [|(BufferEncoding.t_to_js x94)|])
                                    | None -> ());
                                   x93))|])
            let (wrap : t -> oldStream:ReadableStream.t -> t) =
              fun (x98 : t) ->
                fun ~oldStream:(x97 : ReadableStream.t) ->
                  t_of_js
                    (Ojs.call (t_to_js x98) "wrap"
                       [|(ReadableStream.t_to_js x97)|])
            let (push :
              t -> chunk:any -> ?encoding:BufferEncoding.t -> unit -> bool) =
              fun (x103 : t) ->
                fun ~chunk:(x99 : any) ->
                  fun ?encoding:(x100 : BufferEncoding.t option) ->
                    fun () ->
                      Ojs.bool_of_js
                        (let x104 = t_to_js x103 in
                         Ojs.call (Ojs.get_prop_ascii x104 "push") "apply"
                           [|x104;((let x101 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x101 "push"
                                         [|(any_to_js x99)|]);
                                    (match x100 with
                                     | Some x102 ->
                                         ignore
                                           (Ojs.call x101 "push"
                                              [|(BufferEncoding.t_to_js x102)|])
                                     | None -> ());
                                    x101))|])
            let (_destroy :
              t ->
                error:Error.t or_null ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x111 : t) ->
                fun ~error:(x105 : Error.t or_null) ->
                  fun
                    ~callback:(x107 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x111) "_destroy"
                         [|(or_null_to_js Error.t_to_js x105);(Ojs.fun_to_js
                                                                 1
                                                                 (fun
                                                                    (x108 :
                                                                    Ojs.t) ->
                                                                    x107
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x109 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x109)
                                                                    x108) ()))|])
            let (destroy : t -> ?error:Error.t -> unit -> unit) =
              fun (x115 : t) ->
                fun ?error:(x112 : Error.t option) ->
                  fun () ->
                    ignore
                      (let x116 = t_to_js x115 in
                       Ojs.call (Ojs.get_prop_ascii x116 "destroy") "apply"
                         [|x116;((let x113 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x112 with
                                   | Some x114 ->
                                       ignore
                                         (Ojs.call x113 "push"
                                            [|(Error.t_to_js x114)|])
                                   | None -> ());
                                  x113))|])
            let (addListener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x119 : t) ->
                fun ~event:(x117 : [ `close ]) ->
                  fun ~listener:(x118 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x119) "addListener"
                         [|((match x117 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x118 ()))|])
            let (addListener' :
              t -> event:[ `data ] -> listener:(chunk:any -> unit) -> t) =
              fun (x123 : t) ->
                fun ~event:(x120 : [ `data ]) ->
                  fun ~listener:(x121 : chunk:any -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x123) "addListener"
                         [|((match x120 with
                             | `data -> Ojs.string_to_js "data"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x122 :
                                                                    Ojs.t) ->
                                                                    x121
                                                                    ~chunk:(
                                                                    any_of_js
                                                                    x122)))|])
            let (addListener'' :
              t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
              fun (x126 : t) ->
                fun ~event:(x124 : [ `end_ ]) ->
                  fun ~listener:(x125 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x126) "addListener"
                         [|((match x124 with
                             | `end_ -> Ojs.string_to_js "end"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x125 ()))|])
            let (addListener''' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x130 : t) ->
                fun ~event:(x127 : [ `error ]) ->
                  fun ~listener:(x128 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x130) "addListener"
                         [|((match x127 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x129 : Ojs.t) ->
                                x128 ~err:(Error.t_of_js x129)))|])
            let (addListener'''' :
              t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
              fun (x133 : t) ->
                fun ~event:(x131 : [ `pause ]) ->
                  fun ~listener:(x132 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x133) "addListener"
                         [|((match x131 with
                             | `pause -> Ojs.string_to_js "pause"));(
                           Ojs.fun_to_js 1 (fun _ -> x132 ()))|])
            let (addListener''''' :
              t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
              fun (x136 : t) ->
                fun ~event:(x134 : [ `readable ]) ->
                  fun ~listener:(x135 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x136) "addListener"
                         [|((match x134 with
                             | `readable -> Ojs.string_to_js "readable"));(
                           Ojs.fun_to_js 1 (fun _ -> x135 ()))|])
            let (addListener'''''' :
              t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
              fun (x139 : t) ->
                fun ~event:(x137 : [ `resume ]) ->
                  fun ~listener:(x138 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x139) "addListener"
                         [|((match x137 with
                             | `resume -> Ojs.string_to_js "resume"));(
                           Ojs.fun_to_js 1 (fun _ -> x138 ()))|])
            let (addListener''''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x145 : t) ->
                fun ~event:(x140 : symbol or_string) ->
                  fun ~listener:(x142 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x145) "addListener"
                         [|(or_string_to_js symbol_to_js x140);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x143 :
                                                                    _) ->
                                                                    x142
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x143 0)))|])
            let (emit : t -> event:[ `close ] -> bool) =
              fun (x147 : t) ->
                fun ~event:(x146 : [ `close ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x147) "emit"
                       [|((match x146 with
                           | `close -> Ojs.string_to_js "close"))|])
            let (emit' : t -> event:[ `data ] -> chunk:any -> bool) =
              fun (x150 : t) ->
                fun ~event:(x148 : [ `data ]) ->
                  fun ~chunk:(x149 : any) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x150) "emit"
                         [|((match x148 with
                             | `data -> Ojs.string_to_js "data"));(any_to_js
                                                                    x149)|])
            let (emit'' : t -> event:[ `end_ ] -> bool) =
              fun (x152 : t) ->
                fun ~event:(x151 : [ `end_ ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x152) "emit"
                       [|((match x151 with | `end_ -> Ojs.string_to_js "end"))|])
            let (emit''' : t -> event:[ `error ] -> err:Error.t -> bool) =
              fun (x155 : t) ->
                fun ~event:(x153 : [ `error ]) ->
                  fun ~err:(x154 : Error.t) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x155) "emit"
                         [|((match x153 with
                             | `error -> Ojs.string_to_js "error"));(
                           Error.t_to_js x154)|])
            let (emit'''' : t -> event:[ `pause ] -> bool) =
              fun (x157 : t) ->
                fun ~event:(x156 : [ `pause ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x157) "emit"
                       [|((match x156 with
                           | `pause -> Ojs.string_to_js "pause"))|])
            let (emit''''' : t -> event:[ `readable ] -> bool) =
              fun (x159 : t) ->
                fun ~event:(x158 : [ `readable ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x159) "emit"
                       [|((match x158 with
                           | `readable -> Ojs.string_to_js "readable"))|])
            let (emit'''''' : t -> event:[ `resume ] -> bool) =
              fun (x161 : t) ->
                fun ~event:(x160 : [ `resume ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x161) "emit"
                       [|((match x160 with
                           | `resume -> Ojs.string_to_js "resume"))|])
            let (emit''''''' :
              t -> event:symbol or_string -> args:any list -> bool) =
              fun (x167 : t) ->
                fun ~event:(x162 : symbol or_string) ->
                  fun ~args:(x163 : any list) ->
                    Ojs.bool_of_js
                      (let x168 = t_to_js x167 in
                       Ojs.call (Ojs.get_prop_ascii x168 "emit") "apply"
                         [|x168;((let x164 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x164 "push"
                                       [|(or_string_to_js symbol_to_js x162)|]);
                                  List.iter
                                    (fun (x165 : any) ->
                                       ignore
                                         (Ojs.call x164 "push"
                                            [|(any_to_js x165)|])) x163;
                                  x164))|])
            let (on : t -> event:[ `close ] -> listener:(unit -> unit) -> t)
              =
              fun (x171 : t) ->
                fun ~event:(x169 : [ `close ]) ->
                  fun ~listener:(x170 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x171) "on"
                         [|((match x169 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x170 ()))|])
            let (on' :
              t -> event:[ `data ] -> listener:(chunk:any -> unit) -> t) =
              fun (x175 : t) ->
                fun ~event:(x172 : [ `data ]) ->
                  fun ~listener:(x173 : chunk:any -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x175) "on"
                         [|((match x172 with
                             | `data -> Ojs.string_to_js "data"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x174 :
                                                                    Ojs.t) ->
                                                                    x173
                                                                    ~chunk:(
                                                                    any_of_js
                                                                    x174)))|])
            let (on'' : t -> event:[ `end_ ] -> listener:(unit -> unit) -> t)
              =
              fun (x178 : t) ->
                fun ~event:(x176 : [ `end_ ]) ->
                  fun ~listener:(x177 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x178) "on"
                         [|((match x176 with
                             | `end_ -> Ojs.string_to_js "end"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x177 ()))|])
            let (on''' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x182 : t) ->
                fun ~event:(x179 : [ `error ]) ->
                  fun ~listener:(x180 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x182) "on"
                         [|((match x179 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x181 : Ojs.t) ->
                                x180 ~err:(Error.t_of_js x181)))|])
            let (on'''' :
              t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
              fun (x185 : t) ->
                fun ~event:(x183 : [ `pause ]) ->
                  fun ~listener:(x184 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x185) "on"
                         [|((match x183 with
                             | `pause -> Ojs.string_to_js "pause"));(
                           Ojs.fun_to_js 1 (fun _ -> x184 ()))|])
            let (on''''' :
              t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
              fun (x188 : t) ->
                fun ~event:(x186 : [ `readable ]) ->
                  fun ~listener:(x187 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x188) "on"
                         [|((match x186 with
                             | `readable -> Ojs.string_to_js "readable"));(
                           Ojs.fun_to_js 1 (fun _ -> x187 ()))|])
            let (on'''''' :
              t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
              fun (x191 : t) ->
                fun ~event:(x189 : [ `resume ]) ->
                  fun ~listener:(x190 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x191) "on"
                         [|((match x189 with
                             | `resume -> Ojs.string_to_js "resume"));(
                           Ojs.fun_to_js 1 (fun _ -> x190 ()))|])
            let (on''''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x197 : t) ->
                fun ~event:(x192 : symbol or_string) ->
                  fun ~listener:(x194 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x197) "on"
                         [|(or_string_to_js symbol_to_js x192);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x195 :
                                                                    _) ->
                                                                    x194
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x195 0)))|])
            let (once :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x200 : t) ->
                fun ~event:(x198 : [ `close ]) ->
                  fun ~listener:(x199 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x200) "once"
                         [|((match x198 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x199 ()))|])
            let (once' :
              t -> event:[ `data ] -> listener:(chunk:any -> unit) -> t) =
              fun (x204 : t) ->
                fun ~event:(x201 : [ `data ]) ->
                  fun ~listener:(x202 : chunk:any -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x204) "once"
                         [|((match x201 with
                             | `data -> Ojs.string_to_js "data"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x203 :
                                                                    Ojs.t) ->
                                                                    x202
                                                                    ~chunk:(
                                                                    any_of_js
                                                                    x203)))|])
            let (once'' :
              t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
              fun (x207 : t) ->
                fun ~event:(x205 : [ `end_ ]) ->
                  fun ~listener:(x206 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x207) "once"
                         [|((match x205 with
                             | `end_ -> Ojs.string_to_js "end"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x206 ()))|])
            let (once''' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x211 : t) ->
                fun ~event:(x208 : [ `error ]) ->
                  fun ~listener:(x209 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x211) "once"
                         [|((match x208 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x210 : Ojs.t) ->
                                x209 ~err:(Error.t_of_js x210)))|])
            let (once'''' :
              t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
              fun (x214 : t) ->
                fun ~event:(x212 : [ `pause ]) ->
                  fun ~listener:(x213 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x214) "once"
                         [|((match x212 with
                             | `pause -> Ojs.string_to_js "pause"));(
                           Ojs.fun_to_js 1 (fun _ -> x213 ()))|])
            let (once''''' :
              t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
              fun (x217 : t) ->
                fun ~event:(x215 : [ `readable ]) ->
                  fun ~listener:(x216 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x217) "once"
                         [|((match x215 with
                             | `readable -> Ojs.string_to_js "readable"));(
                           Ojs.fun_to_js 1 (fun _ -> x216 ()))|])
            let (once'''''' :
              t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
              fun (x220 : t) ->
                fun ~event:(x218 : [ `resume ]) ->
                  fun ~listener:(x219 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x220) "once"
                         [|((match x218 with
                             | `resume -> Ojs.string_to_js "resume"));(
                           Ojs.fun_to_js 1 (fun _ -> x219 ()))|])
            let (once''''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x226 : t) ->
                fun ~event:(x221 : symbol or_string) ->
                  fun ~listener:(x223 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x226) "once"
                         [|(or_string_to_js symbol_to_js x221);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x224 :
                                                                    _) ->
                                                                    x223
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x224 0)))|])
            let (prependListener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x229 : t) ->
                fun ~event:(x227 : [ `close ]) ->
                  fun ~listener:(x228 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x229) "prependListener"
                         [|((match x227 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x228 ()))|])
            let (prependListener' :
              t -> event:[ `data ] -> listener:(chunk:any -> unit) -> t) =
              fun (x233 : t) ->
                fun ~event:(x230 : [ `data ]) ->
                  fun ~listener:(x231 : chunk:any -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x233) "prependListener"
                         [|((match x230 with
                             | `data -> Ojs.string_to_js "data"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x232 :
                                                                    Ojs.t) ->
                                                                    x231
                                                                    ~chunk:(
                                                                    any_of_js
                                                                    x232)))|])
            let (prependListener'' :
              t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
              fun (x236 : t) ->
                fun ~event:(x234 : [ `end_ ]) ->
                  fun ~listener:(x235 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x236) "prependListener"
                         [|((match x234 with
                             | `end_ -> Ojs.string_to_js "end"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x235 ()))|])
            let (prependListener''' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x240 : t) ->
                fun ~event:(x237 : [ `error ]) ->
                  fun ~listener:(x238 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x240) "prependListener"
                         [|((match x237 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x239 : Ojs.t) ->
                                x238 ~err:(Error.t_of_js x239)))|])
            let (prependListener'''' :
              t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
              fun (x243 : t) ->
                fun ~event:(x241 : [ `pause ]) ->
                  fun ~listener:(x242 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x243) "prependListener"
                         [|((match x241 with
                             | `pause -> Ojs.string_to_js "pause"));(
                           Ojs.fun_to_js 1 (fun _ -> x242 ()))|])
            let (prependListener''''' :
              t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
              fun (x246 : t) ->
                fun ~event:(x244 : [ `readable ]) ->
                  fun ~listener:(x245 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x246) "prependListener"
                         [|((match x244 with
                             | `readable -> Ojs.string_to_js "readable"));(
                           Ojs.fun_to_js 1 (fun _ -> x245 ()))|])
            let (prependListener'''''' :
              t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
              fun (x249 : t) ->
                fun ~event:(x247 : [ `resume ]) ->
                  fun ~listener:(x248 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x249) "prependListener"
                         [|((match x247 with
                             | `resume -> Ojs.string_to_js "resume"));(
                           Ojs.fun_to_js 1 (fun _ -> x248 ()))|])
            let (prependListener''''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x255 : t) ->
                fun ~event:(x250 : symbol or_string) ->
                  fun ~listener:(x252 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x255) "prependListener"
                         [|(or_string_to_js symbol_to_js x250);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x253 :
                                                                    _) ->
                                                                    x252
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x253 0)))|])
            let (prependOnceListener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x258 : t) ->
                fun ~event:(x256 : [ `close ]) ->
                  fun ~listener:(x257 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x258) "prependOnceListener"
                         [|((match x256 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x257 ()))|])
            let (prependOnceListener' :
              t -> event:[ `data ] -> listener:(chunk:any -> unit) -> t) =
              fun (x262 : t) ->
                fun ~event:(x259 : [ `data ]) ->
                  fun ~listener:(x260 : chunk:any -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x262) "prependOnceListener"
                         [|((match x259 with
                             | `data -> Ojs.string_to_js "data"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x261 :
                                                                    Ojs.t) ->
                                                                    x260
                                                                    ~chunk:(
                                                                    any_of_js
                                                                    x261)))|])
            let (prependOnceListener'' :
              t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
              fun (x265 : t) ->
                fun ~event:(x263 : [ `end_ ]) ->
                  fun ~listener:(x264 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x265) "prependOnceListener"
                         [|((match x263 with
                             | `end_ -> Ojs.string_to_js "end"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x264 ()))|])
            let (prependOnceListener''' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x269 : t) ->
                fun ~event:(x266 : [ `error ]) ->
                  fun ~listener:(x267 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x269) "prependOnceListener"
                         [|((match x266 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x268 : Ojs.t) ->
                                x267 ~err:(Error.t_of_js x268)))|])
            let (prependOnceListener'''' :
              t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
              fun (x272 : t) ->
                fun ~event:(x270 : [ `pause ]) ->
                  fun ~listener:(x271 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x272) "prependOnceListener"
                         [|((match x270 with
                             | `pause -> Ojs.string_to_js "pause"));(
                           Ojs.fun_to_js 1 (fun _ -> x271 ()))|])
            let (prependOnceListener''''' :
              t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
              fun (x275 : t) ->
                fun ~event:(x273 : [ `readable ]) ->
                  fun ~listener:(x274 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x275) "prependOnceListener"
                         [|((match x273 with
                             | `readable -> Ojs.string_to_js "readable"));(
                           Ojs.fun_to_js 1 (fun _ -> x274 ()))|])
            let (prependOnceListener'''''' :
              t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
              fun (x278 : t) ->
                fun ~event:(x276 : [ `resume ]) ->
                  fun ~listener:(x277 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x278) "prependOnceListener"
                         [|((match x276 with
                             | `resume -> Ojs.string_to_js "resume"));(
                           Ojs.fun_to_js 1 (fun _ -> x277 ()))|])
            let (prependOnceListener''''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x284 : t) ->
                fun ~event:(x279 : symbol or_string) ->
                  fun ~listener:(x281 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x284) "prependOnceListener"
                         [|(or_string_to_js symbol_to_js x279);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x282 :
                                                                    _) ->
                                                                    x281
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x282 0)))|])
            let (removeListener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x287 : t) ->
                fun ~event:(x285 : [ `close ]) ->
                  fun ~listener:(x286 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x287) "removeListener"
                         [|((match x285 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x286 ()))|])
            let (removeListener' :
              t -> event:[ `data ] -> listener:(chunk:any -> unit) -> t) =
              fun (x291 : t) ->
                fun ~event:(x288 : [ `data ]) ->
                  fun ~listener:(x289 : chunk:any -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x291) "removeListener"
                         [|((match x288 with
                             | `data -> Ojs.string_to_js "data"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x290 :
                                                                    Ojs.t) ->
                                                                    x289
                                                                    ~chunk:(
                                                                    any_of_js
                                                                    x290)))|])
            let (removeListener'' :
              t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
              fun (x294 : t) ->
                fun ~event:(x292 : [ `end_ ]) ->
                  fun ~listener:(x293 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x294) "removeListener"
                         [|((match x292 with
                             | `end_ -> Ojs.string_to_js "end"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x293 ()))|])
            let (removeListener''' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x298 : t) ->
                fun ~event:(x295 : [ `error ]) ->
                  fun ~listener:(x296 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x298) "removeListener"
                         [|((match x295 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x297 : Ojs.t) ->
                                x296 ~err:(Error.t_of_js x297)))|])
            let (removeListener'''' :
              t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
              fun (x301 : t) ->
                fun ~event:(x299 : [ `pause ]) ->
                  fun ~listener:(x300 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x301) "removeListener"
                         [|((match x299 with
                             | `pause -> Ojs.string_to_js "pause"));(
                           Ojs.fun_to_js 1 (fun _ -> x300 ()))|])
            let (removeListener''''' :
              t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
              fun (x304 : t) ->
                fun ~event:(x302 : [ `readable ]) ->
                  fun ~listener:(x303 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x304) "removeListener"
                         [|((match x302 with
                             | `readable -> Ojs.string_to_js "readable"));(
                           Ojs.fun_to_js 1 (fun _ -> x303 ()))|])
            let (removeListener'''''' :
              t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
              fun (x307 : t) ->
                fun ~event:(x305 : [ `resume ]) ->
                  fun ~listener:(x306 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x307) "removeListener"
                         [|((match x305 with
                             | `resume -> Ojs.string_to_js "resume"));(
                           Ojs.fun_to_js 1 (fun _ -> x306 ()))|])
            let (removeListener''''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x313 : t) ->
                fun ~event:(x308 : symbol or_string) ->
                  fun ~listener:(x310 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x313) "removeListener"
                         [|(or_string_to_js symbol_to_js x308);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x311 :
                                                                    _) ->
                                                                    x310
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x311 0)))|])
            let (cast : t -> stream_internal_Stream) =
              fun (x314 : t) -> stream_internal_Stream_of_js (t_to_js x314)
            let (cast' : t -> ReadableStream.t) =
              fun (x315 : t) -> ReadableStream.t_of_js (t_to_js x315)
          end
        module WritableOptions =
          struct
            type t = stream_internal_WritableOptions
            let rec t_of_js : Ojs.t -> t =
              fun (x317 : Ojs.t) ->
                stream_internal_WritableOptions_of_js x317
            and t_to_js : t -> Ojs.t =
              fun (x316 : stream_internal_WritableOptions) ->
                stream_internal_WritableOptions_to_js x316
            let (get_highWaterMark : t -> int) =
              fun (x318 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x318) "highWaterMark")
            let (set_highWaterMark : t -> int -> unit) =
              fun (x319 : t) ->
                fun (x320 : int) ->
                  Ojs.set_prop_ascii (t_to_js x319) "highWaterMark"
                    (Ojs.int_to_js x320)
            let (get_decodeStrings : t -> bool) =
              fun (x321 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x321) "decodeStrings")
            let (set_decodeStrings : t -> bool -> unit) =
              fun (x322 : t) ->
                fun (x323 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x322) "decodeStrings"
                    (Ojs.bool_to_js x323)
            let (get_defaultEncoding : t -> BufferEncoding.t) =
              fun (x324 : t) ->
                BufferEncoding.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x324) "defaultEncoding")
            let (set_defaultEncoding : t -> BufferEncoding.t -> unit) =
              fun (x325 : t) ->
                fun (x326 : BufferEncoding.t) ->
                  Ojs.set_prop_ascii (t_to_js x325) "defaultEncoding"
                    (BufferEncoding.t_to_js x326)
            let (get_objectMode : t -> bool) =
              fun (x327 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x327) "objectMode")
            let (set_objectMode : t -> bool -> unit) =
              fun (x328 : t) ->
                fun (x329 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x328) "objectMode"
                    (Ojs.bool_to_js x329)
            let (get_emitClose : t -> bool) =
              fun (x330 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x330) "emitClose")
            let (set_emitClose : t -> bool -> unit) =
              fun (x331 : t) ->
                fun (x332 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x331) "emitClose"
                    (Ojs.bool_to_js x332)
            let (write :
              t ->
                this:stream_internal_Writable ->
                  chunk:any ->
                    encoding:BufferEncoding.t ->
                      callback:(?error:Error.t or_null -> unit -> unit) ->
                        unit)
              =
              fun (x340 : t) ->
                fun ~this:(x333 : stream_internal_Writable) ->
                  fun ~chunk:(x334 : any) ->
                    fun ~encoding:(x335 : BufferEncoding.t) ->
                      fun
                        ~callback:(x336 :
                                    ?error:Error.t or_null -> unit -> unit)
                        ->
                        ignore
                          (Ojs.call (t_to_js x340) "write"
                             [|(stream_internal_Writable_to_js x333);(
                               any_to_js x334);(BufferEncoding.t_to_js x335);(
                               Ojs.fun_to_js 1
                                 (fun (x337 : Ojs.t) ->
                                    x336
                                      ?error:(Ojs.option_of_js
                                                (fun (x338 : Ojs.t) ->
                                                   or_null_of_js
                                                     Error.t_of_js x338) x337)
                                      ()))|])
            let (writev :
              t ->
                this:stream_internal_Writable ->
                  chunks:AnonymousInterface0.t list ->
                    callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x348 : t) ->
                fun ~this:(x341 : stream_internal_Writable) ->
                  fun ~chunks:(x342 : AnonymousInterface0.t list) ->
                    fun
                      ~callback:(x344 :
                                  ?error:Error.t or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x348) "writev"
                           [|(stream_internal_Writable_to_js x341);(Ojs.list_to_js
                                                                    AnonymousInterface0.t_to_js
                                                                    x342);(
                             Ojs.fun_to_js 1
                               (fun (x345 : Ojs.t) ->
                                  x344
                                    ?error:(Ojs.option_of_js
                                              (fun (x346 : Ojs.t) ->
                                                 or_null_of_js Error.t_of_js
                                                   x346) x345) ()))|])
            let (destroy :
              t ->
                this:stream_internal_Writable ->
                  error:Error.t or_null ->
                    callback:(error:Error.t or_null -> unit) -> unit)
              =
              fun (x355 : t) ->
                fun ~this:(x349 : stream_internal_Writable) ->
                  fun ~error:(x350 : Error.t or_null) ->
                    fun ~callback:(x352 : error:Error.t or_null -> unit) ->
                      ignore
                        (Ojs.call (t_to_js x355) "destroy"
                           [|(stream_internal_Writable_to_js x349);(or_null_to_js
                                                                    Error.t_to_js
                                                                    x350);(
                             Ojs.fun_to_js 1
                               (fun (x353 : Ojs.t) ->
                                  x352
                                    ~error:(or_null_of_js Error.t_of_js x353)))|])
            let (final :
              t ->
                this:stream_internal_Writable ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x361 : t) ->
                fun ~this:(x356 : stream_internal_Writable) ->
                  fun
                    ~callback:(x357 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x361) "final"
                         [|(stream_internal_Writable_to_js x356);(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun
                                                                    (x358 :
                                                                    Ojs.t) ->
                                                                    x357
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x359 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x359)
                                                                    x358) ()))|])
            let (get_autoDestroy : t -> bool) =
              fun (x362 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x362) "autoDestroy")
            let (set_autoDestroy : t -> bool -> unit) =
              fun (x363 : t) ->
                fun (x364 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x363) "autoDestroy"
                    (Ojs.bool_to_js x364)
          end
        module Writable =
          struct
            include struct include Stream end
            let (get_writable : t -> bool) =
              fun (x365 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x365) "writable")
            let (get_writableEnded : t -> bool) =
              fun (x366 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x366) "writableEnded")
            let (get_writableFinished : t -> bool) =
              fun (x367 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x367) "writableFinished")
            let (get_writableHighWaterMark : t -> int) =
              fun (x368 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x368) "writableHighWaterMark")
            let (get_writableLength : t -> int) =
              fun (x369 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x369) "writableLength")
            let (get_writableObjectMode : t -> bool) =
              fun (x370 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x370) "writableObjectMode")
            let (get_writableCorked : t -> int) =
              fun (x371 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x371) "writableCorked")
            let (get_destroyed : t -> bool) =
              fun (x372 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x372) "destroyed")
            let (set_destroyed : t -> bool -> unit) =
              fun (x373 : t) ->
                fun (x374 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x373) "destroyed"
                    (Ojs.bool_to_js x374)
            let (create : ?opts:stream_internal_WritableOptions -> unit -> t)
              =
              fun ?opts:(x375 : stream_internal_WritableOptions option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "Writable")
                       (let x376 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x375 with
                         | Some x377 ->
                             ignore
                               (Ojs.call x376 "push"
                                  [|(stream_internal_WritableOptions_to_js
                                       x377)|])
                         | None -> ());
                        x376))
            let (_write :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t ->
                    callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x384 : t) ->
                fun ~chunk:(x378 : any) ->
                  fun ~encoding:(x379 : BufferEncoding.t) ->
                    fun
                      ~callback:(x380 :
                                  ?error:Error.t or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x384) "_write"
                           [|(any_to_js x378);(BufferEncoding.t_to_js x379);(
                             Ojs.fun_to_js 1
                               (fun (x381 : Ojs.t) ->
                                  x380
                                    ?error:(Ojs.option_of_js
                                              (fun (x382 : Ojs.t) ->
                                                 or_null_of_js Error.t_of_js
                                                   x382) x381) ()))|])
            let (_writev :
              t ->
                chunks:AnonymousInterface0.t list ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x391 : t) ->
                fun ~chunks:(x385 : AnonymousInterface0.t list) ->
                  fun
                    ~callback:(x387 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x391) "_writev"
                         [|(Ojs.list_to_js AnonymousInterface0.t_to_js x385);(
                           Ojs.fun_to_js 1
                             (fun (x388 : Ojs.t) ->
                                x387
                                  ?error:(Ojs.option_of_js
                                            (fun (x389 : Ojs.t) ->
                                               or_null_of_js Error.t_of_js
                                                 x389) x388) ()))|])
            let (_destroy :
              t ->
                error:Error.t or_null ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x398 : t) ->
                fun ~error:(x392 : Error.t or_null) ->
                  fun
                    ~callback:(x394 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x398) "_destroy"
                         [|(or_null_to_js Error.t_to_js x392);(Ojs.fun_to_js
                                                                 1
                                                                 (fun
                                                                    (x395 :
                                                                    Ojs.t) ->
                                                                    x394
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x396 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x396)
                                                                    x395) ()))|])
            let (_final :
              t -> callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x403 : t) ->
                fun ~callback:(x399 : ?error:Error.t or_null -> unit -> unit)
                  ->
                  ignore
                    (Ojs.call (t_to_js x403) "_final"
                       [|(Ojs.fun_to_js 1
                            (fun (x400 : Ojs.t) ->
                               x399
                                 ?error:(Ojs.option_of_js
                                           (fun (x401 : Ojs.t) ->
                                              or_null_of_js Error.t_of_js
                                                x401) x400) ()))|])
            let (write :
              t ->
                chunk:any ->
                  ?cb:(error:Error.t or_null_or_undefined -> unit) ->
                    unit -> bool)
              =
              fun (x410 : t) ->
                fun ~chunk:(x404 : any) ->
                  fun
                    ?cb:(x405 :
                          (error:Error.t or_null_or_undefined -> unit) option)
                    ->
                    fun () ->
                      Ojs.bool_of_js
                        (let x411 = t_to_js x410 in
                         Ojs.call (Ojs.get_prop_ascii x411 "write") "apply"
                           [|x411;((let x406 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x406 "push"
                                         [|(any_to_js x404)|]);
                                    (match x405 with
                                     | Some x407 ->
                                         ignore
                                           (Ojs.call x406 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun (x408 : Ojs.t) ->
                                                      x407
                                                        ~error:(or_null_or_undefined_of_js
                                                                  Error.t_of_js
                                                                  x408)))|])
                                     | None -> ());
                                    x406))|])
            let (write' :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t ->
                    ?cb:(error:Error.t or_null_or_undefined -> unit) ->
                      unit -> bool)
              =
              fun (x419 : t) ->
                fun ~chunk:(x412 : any) ->
                  fun ~encoding:(x413 : BufferEncoding.t) ->
                    fun
                      ?cb:(x414 :
                            (error:Error.t or_null_or_undefined -> unit)
                              option)
                      ->
                      fun () ->
                        Ojs.bool_of_js
                          (let x420 = t_to_js x419 in
                           Ojs.call (Ojs.get_prop_ascii x420 "write") "apply"
                             [|x420;((let x415 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x415 "push"
                                           [|(any_to_js x412)|]);
                                      ignore
                                        (Ojs.call x415 "push"
                                           [|(BufferEncoding.t_to_js x413)|]);
                                      (match x414 with
                                       | Some x416 ->
                                           ignore
                                             (Ojs.call x415 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun (x417 : Ojs.t) ->
                                                        x416
                                                          ~error:(or_null_or_undefined_of_js
                                                                    Error.t_of_js
                                                                    x417)))|])
                                       | None -> ());
                                      x415))|])
            let (setDefaultEncoding : t -> encoding:BufferEncoding.t -> t) =
              fun (x422 : t) ->
                fun ~encoding:(x421 : BufferEncoding.t) ->
                  t_of_js
                    (Ojs.call (t_to_js x422) "setDefaultEncoding"
                       [|(BufferEncoding.t_to_js x421)|])
            let (end_ : t -> ?cb:(unit -> unit) -> unit -> unit) =
              fun (x426 : t) ->
                fun ?cb:(x423 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x427 = t_to_js x426 in
                       Ojs.call (Ojs.get_prop_ascii x427 "end") "apply"
                         [|x427;((let x424 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x423 with
                                   | Some x425 ->
                                       ignore
                                         (Ojs.call x424 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x425 ()))|])
                                   | None -> ());
                                  x424))|])
            let (end_' :
              t -> chunk:any -> ?cb:(unit -> unit) -> unit -> unit) =
              fun (x432 : t) ->
                fun ~chunk:(x428 : any) ->
                  fun ?cb:(x429 : (unit -> unit) option) ->
                    fun () ->
                      ignore
                        (let x433 = t_to_js x432 in
                         Ojs.call (Ojs.get_prop_ascii x433 "end") "apply"
                           [|x433;((let x430 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x430 "push"
                                         [|(any_to_js x428)|]);
                                    (match x429 with
                                     | Some x431 ->
                                         ignore
                                           (Ojs.call x430 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun _ -> x431 ()))|])
                                     | None -> ());
                                    x430))|])
            let (end_'' :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t ->
                    ?cb:(unit -> unit) -> unit -> unit)
              =
              fun (x439 : t) ->
                fun ~chunk:(x434 : any) ->
                  fun ~encoding:(x435 : BufferEncoding.t) ->
                    fun ?cb:(x436 : (unit -> unit) option) ->
                      fun () ->
                        ignore
                          (let x440 = t_to_js x439 in
                           Ojs.call (Ojs.get_prop_ascii x440 "end") "apply"
                             [|x440;((let x437 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x437 "push"
                                           [|(any_to_js x434)|]);
                                      ignore
                                        (Ojs.call x437 "push"
                                           [|(BufferEncoding.t_to_js x435)|]);
                                      (match x436 with
                                       | Some x438 ->
                                           ignore
                                             (Ojs.call x437 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun _ -> x438 ()))|])
                                       | None -> ());
                                      x437))|])
            let (cork : t -> unit) =
              fun (x441 : t) -> ignore (Ojs.call (t_to_js x441) "cork" [||])
            let (uncork : t -> unit) =
              fun (x442 : t) ->
                ignore (Ojs.call (t_to_js x442) "uncork" [||])
            let (destroy : t -> ?error:Error.t -> unit -> unit) =
              fun (x446 : t) ->
                fun ?error:(x443 : Error.t option) ->
                  fun () ->
                    ignore
                      (let x447 = t_to_js x446 in
                       Ojs.call (Ojs.get_prop_ascii x447 "destroy") "apply"
                         [|x447;((let x444 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x443 with
                                   | Some x445 ->
                                       ignore
                                         (Ojs.call x444 "push"
                                            [|(Error.t_to_js x445)|])
                                   | None -> ());
                                  x444))|])
            let (addListener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x450 : t) ->
                fun ~event:(x448 : [ `close ]) ->
                  fun ~listener:(x449 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x450) "addListener"
                         [|((match x448 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x449 ()))|])
            let (addListener' :
              t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
              fun (x453 : t) ->
                fun ~event:(x451 : [ `drain ]) ->
                  fun ~listener:(x452 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x453) "addListener"
                         [|((match x451 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x452 ()))|])
            let (addListener'' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x457 : t) ->
                fun ~event:(x454 : [ `error ]) ->
                  fun ~listener:(x455 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x457) "addListener"
                         [|((match x454 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x456 : Ojs.t) ->
                                x455 ~err:(Error.t_of_js x456)))|])
            let (addListener''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x460 : t) ->
                fun ~event:(x458 : [ `finish ]) ->
                  fun ~listener:(x459 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x460) "addListener"
                         [|((match x458 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x459 ()))|])
            let (addListener'''' :
              t ->
                event:[ `pipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x464 : t) ->
                fun ~event:(x461 : [ `pipe ]) ->
                  fun ~listener:(x462 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x464) "addListener"
                         [|((match x461 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x463 :
                                                                    Ojs.t) ->
                                                                    x462
                                                                    ~src:(
                                                                    stream_internal_Readable_of_js
                                                                    x463)))|])
            let (addListener''''' :
              t ->
                event:[ `unpipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x468 : t) ->
                fun ~event:(x465 : [ `unpipe ]) ->
                  fun ~listener:(x466 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x468) "addListener"
                         [|((match x465 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x467 : Ojs.t) ->
                                x466
                                  ~src:(stream_internal_Readable_of_js x467)))|])
            let (addListener'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x474 : t) ->
                fun ~event:(x469 : symbol or_string) ->
                  fun ~listener:(x471 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x474) "addListener"
                         [|(or_string_to_js symbol_to_js x469);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x472 :
                                                                    _) ->
                                                                    x471
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x472 0)))|])
            let (emit : t -> event:[ `close ] -> bool) =
              fun (x476 : t) ->
                fun ~event:(x475 : [ `close ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x476) "emit"
                       [|((match x475 with
                           | `close -> Ojs.string_to_js "close"))|])
            let (emit' : t -> event:[ `drain ] -> bool) =
              fun (x478 : t) ->
                fun ~event:(x477 : [ `drain ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x478) "emit"
                       [|((match x477 with
                           | `drain -> Ojs.string_to_js "drain"))|])
            let (emit'' : t -> event:[ `error ] -> err:Error.t -> bool) =
              fun (x481 : t) ->
                fun ~event:(x479 : [ `error ]) ->
                  fun ~err:(x480 : Error.t) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x481) "emit"
                         [|((match x479 with
                             | `error -> Ojs.string_to_js "error"));(
                           Error.t_to_js x480)|])
            let (emit''' : t -> event:[ `finish ] -> bool) =
              fun (x483 : t) ->
                fun ~event:(x482 : [ `finish ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x483) "emit"
                       [|((match x482 with
                           | `finish -> Ojs.string_to_js "finish"))|])
            let (emit'''' :
              t -> event:[ `pipe ] -> src:stream_internal_Readable -> bool) =
              fun (x486 : t) ->
                fun ~event:(x484 : [ `pipe ]) ->
                  fun ~src:(x485 : stream_internal_Readable) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x486) "emit"
                         [|((match x484 with
                             | `pipe -> Ojs.string_to_js "pipe"));(stream_internal_Readable_to_js
                                                                    x485)|])
            let (emit''''' :
              t -> event:[ `unpipe ] -> src:stream_internal_Readable -> bool)
              =
              fun (x489 : t) ->
                fun ~event:(x487 : [ `unpipe ]) ->
                  fun ~src:(x488 : stream_internal_Readable) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x489) "emit"
                         [|((match x487 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           stream_internal_Readable_to_js x488)|])
            let (emit'''''' :
              t -> event:symbol or_string -> args:any list -> bool) =
              fun (x495 : t) ->
                fun ~event:(x490 : symbol or_string) ->
                  fun ~args:(x491 : any list) ->
                    Ojs.bool_of_js
                      (let x496 = t_to_js x495 in
                       Ojs.call (Ojs.get_prop_ascii x496 "emit") "apply"
                         [|x496;((let x492 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x492 "push"
                                       [|(or_string_to_js symbol_to_js x490)|]);
                                  List.iter
                                    (fun (x493 : any) ->
                                       ignore
                                         (Ojs.call x492 "push"
                                            [|(any_to_js x493)|])) x491;
                                  x492))|])
            let (on : t -> event:[ `close ] -> listener:(unit -> unit) -> t)
              =
              fun (x499 : t) ->
                fun ~event:(x497 : [ `close ]) ->
                  fun ~listener:(x498 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x499) "on"
                         [|((match x497 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x498 ()))|])
            let (on' : t -> event:[ `drain ] -> listener:(unit -> unit) -> t)
              =
              fun (x502 : t) ->
                fun ~event:(x500 : [ `drain ]) ->
                  fun ~listener:(x501 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x502) "on"
                         [|((match x500 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x501 ()))|])
            let (on'' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x506 : t) ->
                fun ~event:(x503 : [ `error ]) ->
                  fun ~listener:(x504 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x506) "on"
                         [|((match x503 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x505 : Ojs.t) ->
                                x504 ~err:(Error.t_of_js x505)))|])
            let (on''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x509 : t) ->
                fun ~event:(x507 : [ `finish ]) ->
                  fun ~listener:(x508 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x509) "on"
                         [|((match x507 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x508 ()))|])
            let (on'''' :
              t ->
                event:[ `pipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x513 : t) ->
                fun ~event:(x510 : [ `pipe ]) ->
                  fun ~listener:(x511 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x513) "on"
                         [|((match x510 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x512 :
                                                                    Ojs.t) ->
                                                                    x511
                                                                    ~src:(
                                                                    stream_internal_Readable_of_js
                                                                    x512)))|])
            let (on''''' :
              t ->
                event:[ `unpipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x517 : t) ->
                fun ~event:(x514 : [ `unpipe ]) ->
                  fun ~listener:(x515 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x517) "on"
                         [|((match x514 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x516 : Ojs.t) ->
                                x515
                                  ~src:(stream_internal_Readable_of_js x516)))|])
            let (on'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x523 : t) ->
                fun ~event:(x518 : symbol or_string) ->
                  fun ~listener:(x520 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x523) "on"
                         [|(or_string_to_js symbol_to_js x518);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x521 :
                                                                    _) ->
                                                                    x520
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x521 0)))|])
            let (once :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x526 : t) ->
                fun ~event:(x524 : [ `close ]) ->
                  fun ~listener:(x525 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x526) "once"
                         [|((match x524 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x525 ()))|])
            let (once' :
              t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
              fun (x529 : t) ->
                fun ~event:(x527 : [ `drain ]) ->
                  fun ~listener:(x528 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x529) "once"
                         [|((match x527 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x528 ()))|])
            let (once'' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x533 : t) ->
                fun ~event:(x530 : [ `error ]) ->
                  fun ~listener:(x531 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x533) "once"
                         [|((match x530 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x532 : Ojs.t) ->
                                x531 ~err:(Error.t_of_js x532)))|])
            let (once''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x536 : t) ->
                fun ~event:(x534 : [ `finish ]) ->
                  fun ~listener:(x535 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x536) "once"
                         [|((match x534 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x535 ()))|])
            let (once'''' :
              t ->
                event:[ `pipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x540 : t) ->
                fun ~event:(x537 : [ `pipe ]) ->
                  fun ~listener:(x538 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x540) "once"
                         [|((match x537 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x539 :
                                                                    Ojs.t) ->
                                                                    x538
                                                                    ~src:(
                                                                    stream_internal_Readable_of_js
                                                                    x539)))|])
            let (once''''' :
              t ->
                event:[ `unpipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x544 : t) ->
                fun ~event:(x541 : [ `unpipe ]) ->
                  fun ~listener:(x542 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x544) "once"
                         [|((match x541 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x543 : Ojs.t) ->
                                x542
                                  ~src:(stream_internal_Readable_of_js x543)))|])
            let (once'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x550 : t) ->
                fun ~event:(x545 : symbol or_string) ->
                  fun ~listener:(x547 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x550) "once"
                         [|(or_string_to_js symbol_to_js x545);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x548 :
                                                                    _) ->
                                                                    x547
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x548 0)))|])
            let (prependListener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x553 : t) ->
                fun ~event:(x551 : [ `close ]) ->
                  fun ~listener:(x552 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x553) "prependListener"
                         [|((match x551 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x552 ()))|])
            let (prependListener' :
              t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
              fun (x556 : t) ->
                fun ~event:(x554 : [ `drain ]) ->
                  fun ~listener:(x555 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x556) "prependListener"
                         [|((match x554 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x555 ()))|])
            let (prependListener'' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x560 : t) ->
                fun ~event:(x557 : [ `error ]) ->
                  fun ~listener:(x558 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x560) "prependListener"
                         [|((match x557 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x559 : Ojs.t) ->
                                x558 ~err:(Error.t_of_js x559)))|])
            let (prependListener''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x563 : t) ->
                fun ~event:(x561 : [ `finish ]) ->
                  fun ~listener:(x562 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x563) "prependListener"
                         [|((match x561 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x562 ()))|])
            let (prependListener'''' :
              t ->
                event:[ `pipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x567 : t) ->
                fun ~event:(x564 : [ `pipe ]) ->
                  fun ~listener:(x565 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x567) "prependListener"
                         [|((match x564 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x566 :
                                                                    Ojs.t) ->
                                                                    x565
                                                                    ~src:(
                                                                    stream_internal_Readable_of_js
                                                                    x566)))|])
            let (prependListener''''' :
              t ->
                event:[ `unpipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x571 : t) ->
                fun ~event:(x568 : [ `unpipe ]) ->
                  fun ~listener:(x569 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x571) "prependListener"
                         [|((match x568 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x570 : Ojs.t) ->
                                x569
                                  ~src:(stream_internal_Readable_of_js x570)))|])
            let (prependListener'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x577 : t) ->
                fun ~event:(x572 : symbol or_string) ->
                  fun ~listener:(x574 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x577) "prependListener"
                         [|(or_string_to_js symbol_to_js x572);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x575 :
                                                                    _) ->
                                                                    x574
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x575 0)))|])
            let (prependOnceListener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x580 : t) ->
                fun ~event:(x578 : [ `close ]) ->
                  fun ~listener:(x579 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x580) "prependOnceListener"
                         [|((match x578 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x579 ()))|])
            let (prependOnceListener' :
              t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
              fun (x583 : t) ->
                fun ~event:(x581 : [ `drain ]) ->
                  fun ~listener:(x582 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x583) "prependOnceListener"
                         [|((match x581 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x582 ()))|])
            let (prependOnceListener'' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x587 : t) ->
                fun ~event:(x584 : [ `error ]) ->
                  fun ~listener:(x585 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x587) "prependOnceListener"
                         [|((match x584 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x586 : Ojs.t) ->
                                x585 ~err:(Error.t_of_js x586)))|])
            let (prependOnceListener''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x590 : t) ->
                fun ~event:(x588 : [ `finish ]) ->
                  fun ~listener:(x589 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x590) "prependOnceListener"
                         [|((match x588 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x589 ()))|])
            let (prependOnceListener'''' :
              t ->
                event:[ `pipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x594 : t) ->
                fun ~event:(x591 : [ `pipe ]) ->
                  fun ~listener:(x592 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x594) "prependOnceListener"
                         [|((match x591 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x593 :
                                                                    Ojs.t) ->
                                                                    x592
                                                                    ~src:(
                                                                    stream_internal_Readable_of_js
                                                                    x593)))|])
            let (prependOnceListener''''' :
              t ->
                event:[ `unpipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x598 : t) ->
                fun ~event:(x595 : [ `unpipe ]) ->
                  fun ~listener:(x596 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x598) "prependOnceListener"
                         [|((match x595 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x597 : Ojs.t) ->
                                x596
                                  ~src:(stream_internal_Readable_of_js x597)))|])
            let (prependOnceListener'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x604 : t) ->
                fun ~event:(x599 : symbol or_string) ->
                  fun ~listener:(x601 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x604) "prependOnceListener"
                         [|(or_string_to_js symbol_to_js x599);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x602 :
                                                                    _) ->
                                                                    x601
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x602 0)))|])
            let (removeListener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x607 : t) ->
                fun ~event:(x605 : [ `close ]) ->
                  fun ~listener:(x606 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x607) "removeListener"
                         [|((match x605 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x606 ()))|])
            let (removeListener' :
              t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
              fun (x610 : t) ->
                fun ~event:(x608 : [ `drain ]) ->
                  fun ~listener:(x609 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x610) "removeListener"
                         [|((match x608 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x609 ()))|])
            let (removeListener'' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x614 : t) ->
                fun ~event:(x611 : [ `error ]) ->
                  fun ~listener:(x612 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x614) "removeListener"
                         [|((match x611 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x613 : Ojs.t) ->
                                x612 ~err:(Error.t_of_js x613)))|])
            let (removeListener''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x617 : t) ->
                fun ~event:(x615 : [ `finish ]) ->
                  fun ~listener:(x616 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x617) "removeListener"
                         [|((match x615 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x616 ()))|])
            let (removeListener'''' :
              t ->
                event:[ `pipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x621 : t) ->
                fun ~event:(x618 : [ `pipe ]) ->
                  fun ~listener:(x619 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x621) "removeListener"
                         [|((match x618 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x620 :
                                                                    Ojs.t) ->
                                                                    x619
                                                                    ~src:(
                                                                    stream_internal_Readable_of_js
                                                                    x620)))|])
            let (removeListener''''' :
              t ->
                event:[ `unpipe ] ->
                  listener:(src:stream_internal_Readable -> unit) -> t)
              =
              fun (x625 : t) ->
                fun ~event:(x622 : [ `unpipe ]) ->
                  fun ~listener:(x623 : src:stream_internal_Readable -> unit)
                    ->
                    t_of_js
                      (Ojs.call (t_to_js x625) "removeListener"
                         [|((match x622 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x624 : Ojs.t) ->
                                x623
                                  ~src:(stream_internal_Readable_of_js x624)))|])
            let (removeListener'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x631 : t) ->
                fun ~event:(x626 : symbol or_string) ->
                  fun ~listener:(x628 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x631) "removeListener"
                         [|(or_string_to_js symbol_to_js x626);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x629 :
                                                                    _) ->
                                                                    x628
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x629 0)))|])
            let (cast : t -> stream_internal_Stream) =
              fun (x632 : t) -> stream_internal_Stream_of_js (t_to_js x632)
            let (cast' : t -> WritableStream.t) =
              fun (x633 : t) -> WritableStream.t_of_js (t_to_js x633)
          end
        module DuplexOptions =
          struct
            type t = stream_internal_DuplexOptions
            let rec t_of_js : Ojs.t -> t =
              fun (x635 : Ojs.t) -> stream_internal_DuplexOptions_of_js x635
            and t_to_js : t -> Ojs.t =
              fun (x634 : stream_internal_DuplexOptions) ->
                stream_internal_DuplexOptions_to_js x634
            let (get_allowHalfOpen : t -> bool) =
              fun (x636 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x636) "allowHalfOpen")
            let (set_allowHalfOpen : t -> bool -> unit) =
              fun (x637 : t) ->
                fun (x638 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x637) "allowHalfOpen"
                    (Ojs.bool_to_js x638)
            let (get_readableObjectMode : t -> bool) =
              fun (x639 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x639) "readableObjectMode")
            let (set_readableObjectMode : t -> bool -> unit) =
              fun (x640 : t) ->
                fun (x641 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x640) "readableObjectMode"
                    (Ojs.bool_to_js x641)
            let (get_writableObjectMode : t -> bool) =
              fun (x642 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x642) "writableObjectMode")
            let (set_writableObjectMode : t -> bool -> unit) =
              fun (x643 : t) ->
                fun (x644 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x643) "writableObjectMode"
                    (Ojs.bool_to_js x644)
            let (get_readableHighWaterMark : t -> int) =
              fun (x645 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x645) "readableHighWaterMark")
            let (set_readableHighWaterMark : t -> int -> unit) =
              fun (x646 : t) ->
                fun (x647 : int) ->
                  Ojs.set_prop_ascii (t_to_js x646) "readableHighWaterMark"
                    (Ojs.int_to_js x647)
            let (get_writableHighWaterMark : t -> int) =
              fun (x648 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x648) "writableHighWaterMark")
            let (set_writableHighWaterMark : t -> int -> unit) =
              fun (x649 : t) ->
                fun (x650 : int) ->
                  Ojs.set_prop_ascii (t_to_js x649) "writableHighWaterMark"
                    (Ojs.int_to_js x650)
            let (get_writableCorked : t -> int) =
              fun (x651 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x651) "writableCorked")
            let (set_writableCorked : t -> int -> unit) =
              fun (x652 : t) ->
                fun (x653 : int) ->
                  Ojs.set_prop_ascii (t_to_js x652) "writableCorked"
                    (Ojs.int_to_js x653)
            let (read : t -> this:stream_internal_Duplex -> size:int -> unit)
              =
              fun (x656 : t) ->
                fun ~this:(x654 : stream_internal_Duplex) ->
                  fun ~size:(x655 : int) ->
                    ignore
                      (Ojs.call (t_to_js x656) "read"
                         [|(stream_internal_Duplex_to_js x654);(Ojs.int_to_js
                                                                  x655)|])
            let (write :
              t ->
                this:stream_internal_Duplex ->
                  chunk:any ->
                    encoding:BufferEncoding.t ->
                      callback:(?error:Error.t or_null -> unit -> unit) ->
                        unit)
              =
              fun (x664 : t) ->
                fun ~this:(x657 : stream_internal_Duplex) ->
                  fun ~chunk:(x658 : any) ->
                    fun ~encoding:(x659 : BufferEncoding.t) ->
                      fun
                        ~callback:(x660 :
                                    ?error:Error.t or_null -> unit -> unit)
                        ->
                        ignore
                          (Ojs.call (t_to_js x664) "write"
                             [|(stream_internal_Duplex_to_js x657);(any_to_js
                                                                    x658);(
                               BufferEncoding.t_to_js x659);(Ojs.fun_to_js 1
                                                               (fun
                                                                  (x661 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x660
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x662 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x662)
                                                                    x661) ()))|])
            let (writev :
              t ->
                this:stream_internal_Duplex ->
                  chunks:AnonymousInterface0.t list ->
                    callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x672 : t) ->
                fun ~this:(x665 : stream_internal_Duplex) ->
                  fun ~chunks:(x666 : AnonymousInterface0.t list) ->
                    fun
                      ~callback:(x668 :
                                  ?error:Error.t or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x672) "writev"
                           [|(stream_internal_Duplex_to_js x665);(Ojs.list_to_js
                                                                    AnonymousInterface0.t_to_js
                                                                    x666);(
                             Ojs.fun_to_js 1
                               (fun (x669 : Ojs.t) ->
                                  x668
                                    ?error:(Ojs.option_of_js
                                              (fun (x670 : Ojs.t) ->
                                                 or_null_of_js Error.t_of_js
                                                   x670) x669) ()))|])
            let (final :
              t ->
                this:stream_internal_Duplex ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x678 : t) ->
                fun ~this:(x673 : stream_internal_Duplex) ->
                  fun
                    ~callback:(x674 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x678) "final"
                         [|(stream_internal_Duplex_to_js x673);(Ojs.fun_to_js
                                                                  1
                                                                  (fun
                                                                    (x675 :
                                                                    Ojs.t) ->
                                                                    x674
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x676 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x676)
                                                                    x675) ()))|])
            let (destroy :
              t ->
                this:stream_internal_Duplex ->
                  error:Error.t or_null ->
                    callback:(error:Error.t or_null -> unit) -> unit)
              =
              fun (x685 : t) ->
                fun ~this:(x679 : stream_internal_Duplex) ->
                  fun ~error:(x680 : Error.t or_null) ->
                    fun ~callback:(x682 : error:Error.t or_null -> unit) ->
                      ignore
                        (Ojs.call (t_to_js x685) "destroy"
                           [|(stream_internal_Duplex_to_js x679);(or_null_to_js
                                                                    Error.t_to_js
                                                                    x680);(
                             Ojs.fun_to_js 1
                               (fun (x683 : Ojs.t) ->
                                  x682
                                    ~error:(or_null_of_js Error.t_of_js x683)))|])
            let (cast : t -> stream_internal_ReadableOptions) =
              fun (x686 : t) ->
                stream_internal_ReadableOptions_of_js (t_to_js x686)
            let (cast' : t -> stream_internal_WritableOptions) =
              fun (x687 : t) ->
                stream_internal_WritableOptions_of_js (t_to_js x687)
          end
        module Duplex =
          struct
            include struct include Stream end
            let (get_writable : t -> bool) =
              fun (x688 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x688) "writable")
            let (get_writableEnded : t -> bool) =
              fun (x689 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x689) "writableEnded")
            let (get_writableFinished : t -> bool) =
              fun (x690 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x690) "writableFinished")
            let (get_writableHighWaterMark : t -> int) =
              fun (x691 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x691) "writableHighWaterMark")
            let (get_writableLength : t -> int) =
              fun (x692 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x692) "writableLength")
            let (get_writableObjectMode : t -> bool) =
              fun (x693 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x693) "writableObjectMode")
            let (get_writableCorked : t -> int) =
              fun (x694 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x694) "writableCorked")
            let (create : ?opts:stream_internal_DuplexOptions -> unit -> t) =
              fun ?opts:(x695 : stream_internal_DuplexOptions option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "Duplex")
                       (let x696 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x695 with
                         | Some x697 ->
                             ignore
                               (Ojs.call x696 "push"
                                  [|(stream_internal_DuplexOptions_to_js x697)|])
                         | None -> ());
                        x696))
            let (_write :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t ->
                    callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x704 : t) ->
                fun ~chunk:(x698 : any) ->
                  fun ~encoding:(x699 : BufferEncoding.t) ->
                    fun
                      ~callback:(x700 :
                                  ?error:Error.t or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x704) "_write"
                           [|(any_to_js x698);(BufferEncoding.t_to_js x699);(
                             Ojs.fun_to_js 1
                               (fun (x701 : Ojs.t) ->
                                  x700
                                    ?error:(Ojs.option_of_js
                                              (fun (x702 : Ojs.t) ->
                                                 or_null_of_js Error.t_of_js
                                                   x702) x701) ()))|])
            let (_writev :
              t ->
                chunks:AnonymousInterface0.t list ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x711 : t) ->
                fun ~chunks:(x705 : AnonymousInterface0.t list) ->
                  fun
                    ~callback:(x707 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x711) "_writev"
                         [|(Ojs.list_to_js AnonymousInterface0.t_to_js x705);(
                           Ojs.fun_to_js 1
                             (fun (x708 : Ojs.t) ->
                                x707
                                  ?error:(Ojs.option_of_js
                                            (fun (x709 : Ojs.t) ->
                                               or_null_of_js Error.t_of_js
                                                 x709) x708) ()))|])
            let (_destroy :
              t ->
                error:Error.t or_null ->
                  callback:(error:Error.t or_null -> unit) -> unit)
              =
              fun (x717 : t) ->
                fun ~error:(x712 : Error.t or_null) ->
                  fun ~callback:(x714 : error:Error.t or_null -> unit) ->
                    ignore
                      (Ojs.call (t_to_js x717) "_destroy"
                         [|(or_null_to_js Error.t_to_js x712);(Ojs.fun_to_js
                                                                 1
                                                                 (fun
                                                                    (x715 :
                                                                    Ojs.t) ->
                                                                    x714
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x715)))|])
            let (_final :
              t -> callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x722 : t) ->
                fun ~callback:(x718 : ?error:Error.t or_null -> unit -> unit)
                  ->
                  ignore
                    (Ojs.call (t_to_js x722) "_final"
                       [|(Ojs.fun_to_js 1
                            (fun (x719 : Ojs.t) ->
                               x718
                                 ?error:(Ojs.option_of_js
                                           (fun (x720 : Ojs.t) ->
                                              or_null_of_js Error.t_of_js
                                                x720) x719) ()))|])
            let (write :
              t ->
                chunk:any ->
                  ?encoding:BufferEncoding.t ->
                    ?cb:(error:Error.t or_null_or_undefined -> unit) ->
                      unit -> bool)
              =
              fun (x731 : t) ->
                fun ~chunk:(x723 : any) ->
                  fun ?encoding:(x724 : BufferEncoding.t option) ->
                    fun
                      ?cb:(x725 :
                            (error:Error.t or_null_or_undefined -> unit)
                              option)
                      ->
                      fun () ->
                        Ojs.bool_of_js
                          (let x732 = t_to_js x731 in
                           Ojs.call (Ojs.get_prop_ascii x732 "write") "apply"
                             [|x732;((let x726 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x726 "push"
                                           [|(any_to_js x723)|]);
                                      (match x724 with
                                       | Some x730 ->
                                           ignore
                                             (Ojs.call x726 "push"
                                                [|(BufferEncoding.t_to_js
                                                     x730)|])
                                       | None -> ());
                                      (match x725 with
                                       | Some x727 ->
                                           ignore
                                             (Ojs.call x726 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun (x728 : Ojs.t) ->
                                                        x727
                                                          ~error:(or_null_or_undefined_of_js
                                                                    Error.t_of_js
                                                                    x728)))|])
                                       | None -> ());
                                      x726))|])
            let (write' :
              t ->
                chunk:any ->
                  ?cb:(error:Error.t or_null_or_undefined -> unit) ->
                    unit -> bool)
              =
              fun (x739 : t) ->
                fun ~chunk:(x733 : any) ->
                  fun
                    ?cb:(x734 :
                          (error:Error.t or_null_or_undefined -> unit) option)
                    ->
                    fun () ->
                      Ojs.bool_of_js
                        (let x740 = t_to_js x739 in
                         Ojs.call (Ojs.get_prop_ascii x740 "write") "apply"
                           [|x740;((let x735 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x735 "push"
                                         [|(any_to_js x733)|]);
                                    (match x734 with
                                     | Some x736 ->
                                         ignore
                                           (Ojs.call x735 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun (x737 : Ojs.t) ->
                                                      x736
                                                        ~error:(or_null_or_undefined_of_js
                                                                  Error.t_of_js
                                                                  x737)))|])
                                     | None -> ());
                                    x735))|])
            let (setDefaultEncoding : t -> encoding:BufferEncoding.t -> t) =
              fun (x742 : t) ->
                fun ~encoding:(x741 : BufferEncoding.t) ->
                  t_of_js
                    (Ojs.call (t_to_js x742) "setDefaultEncoding"
                       [|(BufferEncoding.t_to_js x741)|])
            let (end_ : t -> ?cb:(unit -> unit) -> unit -> unit) =
              fun (x746 : t) ->
                fun ?cb:(x743 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x747 = t_to_js x746 in
                       Ojs.call (Ojs.get_prop_ascii x747 "end") "apply"
                         [|x747;((let x744 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x743 with
                                   | Some x745 ->
                                       ignore
                                         (Ojs.call x744 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x745 ()))|])
                                   | None -> ());
                                  x744))|])
            let (end_' :
              t -> chunk:any -> ?cb:(unit -> unit) -> unit -> unit) =
              fun (x752 : t) ->
                fun ~chunk:(x748 : any) ->
                  fun ?cb:(x749 : (unit -> unit) option) ->
                    fun () ->
                      ignore
                        (let x753 = t_to_js x752 in
                         Ojs.call (Ojs.get_prop_ascii x753 "end") "apply"
                           [|x753;((let x750 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x750 "push"
                                         [|(any_to_js x748)|]);
                                    (match x749 with
                                     | Some x751 ->
                                         ignore
                                           (Ojs.call x750 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun _ -> x751 ()))|])
                                     | None -> ());
                                    x750))|])
            let (end_'' :
              t ->
                chunk:any ->
                  ?encoding:BufferEncoding.t ->
                    ?cb:(unit -> unit) -> unit -> unit)
              =
              fun (x760 : t) ->
                fun ~chunk:(x754 : any) ->
                  fun ?encoding:(x755 : BufferEncoding.t option) ->
                    fun ?cb:(x756 : (unit -> unit) option) ->
                      fun () ->
                        ignore
                          (let x761 = t_to_js x760 in
                           Ojs.call (Ojs.get_prop_ascii x761 "end") "apply"
                             [|x761;((let x757 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x757 "push"
                                           [|(any_to_js x754)|]);
                                      (match x755 with
                                       | Some x759 ->
                                           ignore
                                             (Ojs.call x757 "push"
                                                [|(BufferEncoding.t_to_js
                                                     x759)|])
                                       | None -> ());
                                      (match x756 with
                                       | Some x758 ->
                                           ignore
                                             (Ojs.call x757 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun _ -> x758 ()))|])
                                       | None -> ());
                                      x757))|])
            let (cork : t -> unit) =
              fun (x762 : t) -> ignore (Ojs.call (t_to_js x762) "cork" [||])
            let (uncork : t -> unit) =
              fun (x763 : t) ->
                ignore (Ojs.call (t_to_js x763) "uncork" [||])
            let (cast : t -> stream_internal_Readable) =
              fun (x764 : t) -> stream_internal_Readable_of_js (t_to_js x764)
            let (cast' : t -> stream_internal_Writable) =
              fun (x765 : t) -> stream_internal_Writable_of_js (t_to_js x765)
          end
        module TransformCallback =
          struct
            type t = stream_internal_TransformCallback
            let rec t_of_js : Ojs.t -> t =
              fun (x767 : Ojs.t) ->
                stream_internal_TransformCallback_of_js x767
            and t_to_js : t -> Ojs.t =
              fun (x766 : stream_internal_TransformCallback) ->
                stream_internal_TransformCallback_to_js x766
            let (apply :
              t -> ?error:Error.t or_null -> ?data:any -> unit -> unit) =
              fun (x774 : t) ->
                fun ?error:(x768 : Error.t or_null option) ->
                  fun ?data:(x769 : any option) ->
                    fun () ->
                      ignore
                        (Ojs.call (t_to_js x774) "apply"
                           [|Ojs.null;((let x770 =
                                          Ojs.new_obj
                                            (Ojs.get_prop_ascii Ojs.global
                                               "Array") [||] in
                                        (match x768 with
                                         | Some x772 ->
                                             ignore
                                               (Ojs.call x770 "push"
                                                  [|(or_null_to_js
                                                       Error.t_to_js x772)|])
                                         | None -> ());
                                        (match x769 with
                                         | Some x771 ->
                                             ignore
                                               (Ojs.call x770 "push"
                                                  [|(any_to_js x771)|])
                                         | None -> ());
                                        x770))|])
          end
        module TransformOptions =
          struct
            include struct include DuplexOptions end
            let (read :
              t -> this:stream_internal_Transform -> size:int -> unit) =
              fun (x777 : t) ->
                fun ~this:(x775 : stream_internal_Transform) ->
                  fun ~size:(x776 : int) ->
                    ignore
                      (Ojs.call (t_to_js x777) "read"
                         [|(stream_internal_Transform_to_js x775);(Ojs.int_to_js
                                                                    x776)|])
            let (write :
              t ->
                this:stream_internal_Transform ->
                  chunk:any ->
                    encoding:BufferEncoding.t ->
                      callback:(?error:Error.t or_null -> unit -> unit) ->
                        unit)
              =
              fun (x785 : t) ->
                fun ~this:(x778 : stream_internal_Transform) ->
                  fun ~chunk:(x779 : any) ->
                    fun ~encoding:(x780 : BufferEncoding.t) ->
                      fun
                        ~callback:(x781 :
                                    ?error:Error.t or_null -> unit -> unit)
                        ->
                        ignore
                          (Ojs.call (t_to_js x785) "write"
                             [|(stream_internal_Transform_to_js x778);(
                               any_to_js x779);(BufferEncoding.t_to_js x780);(
                               Ojs.fun_to_js 1
                                 (fun (x782 : Ojs.t) ->
                                    x781
                                      ?error:(Ojs.option_of_js
                                                (fun (x783 : Ojs.t) ->
                                                   or_null_of_js
                                                     Error.t_of_js x783) x782)
                                      ()))|])
            let (writev :
              t ->
                this:stream_internal_Transform ->
                  chunks:AnonymousInterface0.t list ->
                    callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x793 : t) ->
                fun ~this:(x786 : stream_internal_Transform) ->
                  fun ~chunks:(x787 : AnonymousInterface0.t list) ->
                    fun
                      ~callback:(x789 :
                                  ?error:Error.t or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x793) "writev"
                           [|(stream_internal_Transform_to_js x786);(
                             Ojs.list_to_js AnonymousInterface0.t_to_js x787);(
                             Ojs.fun_to_js 1
                               (fun (x790 : Ojs.t) ->
                                  x789
                                    ?error:(Ojs.option_of_js
                                              (fun (x791 : Ojs.t) ->
                                                 or_null_of_js Error.t_of_js
                                                   x791) x790) ()))|])
            let (final :
              t ->
                this:stream_internal_Transform ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x799 : t) ->
                fun ~this:(x794 : stream_internal_Transform) ->
                  fun
                    ~callback:(x795 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x799) "final"
                         [|(stream_internal_Transform_to_js x794);(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x796 :
                                                                    Ojs.t) ->
                                                                    x795
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x797 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x797)
                                                                    x796) ()))|])
            let (destroy :
              t ->
                this:stream_internal_Transform ->
                  error:Error.t or_null ->
                    callback:(error:Error.t or_null -> unit) -> unit)
              =
              fun (x806 : t) ->
                fun ~this:(x800 : stream_internal_Transform) ->
                  fun ~error:(x801 : Error.t or_null) ->
                    fun ~callback:(x803 : error:Error.t or_null -> unit) ->
                      ignore
                        (Ojs.call (t_to_js x806) "destroy"
                           [|(stream_internal_Transform_to_js x800);(
                             or_null_to_js Error.t_to_js x801);(Ojs.fun_to_js
                                                                  1
                                                                  (fun
                                                                    (x804 :
                                                                    Ojs.t) ->
                                                                    x803
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x804)))|])
            let (transform :
              t ->
                this:stream_internal_Transform ->
                  chunk:any ->
                    encoding:BufferEncoding.t ->
                      callback:stream_internal_TransformCallback -> unit)
              =
              fun (x811 : t) ->
                fun ~this:(x807 : stream_internal_Transform) ->
                  fun ~chunk:(x808 : any) ->
                    fun ~encoding:(x809 : BufferEncoding.t) ->
                      fun
                        ~callback:(x810 : stream_internal_TransformCallback)
                        ->
                        ignore
                          (Ojs.call (t_to_js x811) "transform"
                             [|(stream_internal_Transform_to_js x807);(
                               any_to_js x808);(BufferEncoding.t_to_js x809);(
                               stream_internal_TransformCallback_to_js x810)|])
            let (flush :
              t ->
                this:stream_internal_Transform ->
                  callback:stream_internal_TransformCallback -> unit)
              =
              fun (x814 : t) ->
                fun ~this:(x812 : stream_internal_Transform) ->
                  fun ~callback:(x813 : stream_internal_TransformCallback) ->
                    ignore
                      (Ojs.call (t_to_js x814) "flush"
                         [|(stream_internal_Transform_to_js x812);(stream_internal_TransformCallback_to_js
                                                                    x813)|])
          end
        module Transform =
          struct
            include struct include Duplex end
            let (create :
              ?opts:stream_internal_TransformOptions -> unit -> t) =
              fun ?opts:(x815 : stream_internal_TransformOptions option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "Transform")
                       (let x816 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x815 with
                         | Some x817 ->
                             ignore
                               (Ojs.call x816 "push"
                                  [|(stream_internal_TransformOptions_to_js
                                       x817)|])
                         | None -> ());
                        x816))
            let (_transform :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t ->
                    callback:stream_internal_TransformCallback -> unit)
              =
              fun (x821 : t) ->
                fun ~chunk:(x818 : any) ->
                  fun ~encoding:(x819 : BufferEncoding.t) ->
                    fun ~callback:(x820 : stream_internal_TransformCallback)
                      ->
                      ignore
                        (Ojs.call (t_to_js x821) "_transform"
                           [|(any_to_js x818);(BufferEncoding.t_to_js x819);(
                             stream_internal_TransformCallback_to_js x820)|])
            let (_flush :
              t -> callback:stream_internal_TransformCallback -> unit) =
              fun (x823 : t) ->
                fun ~callback:(x822 : stream_internal_TransformCallback) ->
                  ignore
                    (Ojs.call (t_to_js x823) "_flush"
                       [|(stream_internal_TransformCallback_to_js x822)|])
          end
        module PassThrough = struct include struct include Transform end end
        module FinishedOptions =
          struct
            type t = stream_internal_FinishedOptions
            let rec t_of_js : Ojs.t -> t =
              fun (x825 : Ojs.t) ->
                stream_internal_FinishedOptions_of_js x825
            and t_to_js : t -> Ojs.t =
              fun (x824 : stream_internal_FinishedOptions) ->
                stream_internal_FinishedOptions_to_js x824
            let (get_error : t -> bool) =
              fun (x826 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x826) "error")
            let (set_error : t -> bool -> unit) =
              fun (x827 : t) ->
                fun (x828 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x827) "error"
                    (Ojs.bool_to_js x828)
            let (get_readable : t -> bool) =
              fun (x829 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x829) "readable")
            let (set_readable : t -> bool -> unit) =
              fun (x830 : t) ->
                fun (x831 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x830) "readable"
                    (Ojs.bool_to_js x831)
            let (get_writable : t -> bool) =
              fun (x832 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x832) "writable")
            let (set_writable : t -> bool -> unit) =
              fun (x833 : t) ->
                fun (x834 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x833) "writable"
                    (Ojs.bool_to_js x834)
          end
        let (finished :
          stream:(ReadWriteStream.t, ReadableStream.t, WritableStream.t)
            union3 ->
            options:stream_internal_FinishedOptions ->
              callback:(?err:ErrnoException.t or_null -> unit -> unit) ->
                unit -> unit)
          =
          fun
            ~stream:(x835 :
                      (ReadWriteStream.t, ReadableStream.t, WritableStream.t)
                        union3)
            ->
            fun ~options:(x839 : stream_internal_FinishedOptions) ->
              fun
                ~callback:(x840 :
                            ?err:ErrnoException.t or_null -> unit -> unit)
                ->
                fun () ->
                  ignore
                    (Ojs.apply
                       (Ojs.call
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "finished"
                          [|(union3_to_js ReadWriteStream.t_to_js
                               ReadableStream.t_to_js WritableStream.t_to_js
                               x835);(stream_internal_FinishedOptions_to_js
                                        x839);(Ojs.fun_to_js 1
                                                 (fun (x841 : Ojs.t) ->
                                                    x840
                                                      ?err:(Ojs.option_of_js
                                                              (fun
                                                                 (x842 :
                                                                   Ojs.t)
                                                                 ->
                                                                 or_null_of_js
                                                                   ErrnoException.t_of_js
                                                                   x842) x841)
                                                      ()))|]) [||])
        let (finished :
          stream:(ReadWriteStream.t, ReadableStream.t, WritableStream.t)
            union3 ->
            callback:(?err:ErrnoException.t or_null -> unit -> unit) ->
              unit -> unit)
          =
          fun
            ~stream:(x844 :
                      (ReadWriteStream.t, ReadableStream.t, WritableStream.t)
                        union3)
            ->
            fun
              ~callback:(x848 :
                          ?err:ErrnoException.t or_null -> unit -> unit)
              ->
              fun () ->
                ignore
                  (Ojs.apply
                     (Ojs.call (Ojs.get_prop_ascii Import.stream "internal")
                        "finished"
                        [|(union3_to_js ReadWriteStream.t_to_js
                             ReadableStream.t_to_js WritableStream.t_to_js
                             x844);(Ojs.fun_to_js 1
                                      (fun (x849 : Ojs.t) ->
                                         x848
                                           ?err:(Ojs.option_of_js
                                                   (fun (x850 : Ojs.t) ->
                                                      or_null_of_js
                                                        ErrnoException.t_of_js
                                                        x850) x849) ()))|])
                     [||])
        module Finished =
          struct
            let (__promisify__ :
              stream:(ReadWriteStream.t, ReadableStream.t, WritableStream.t)
                union3 ->
                ?options:stream_internal_FinishedOptions ->
                  unit -> unit Promise.t)
              =
              fun
                ~stream:(x852 :
                          (ReadWriteStream.t, ReadableStream.t,
                            WritableStream.t) union3)
                ->
                fun ?options:(x853 : stream_internal_FinishedOptions option)
                  ->
                  fun () ->
                    Promise.t_of_js Ojs.unit_of_js
                      (let x859 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Import.stream "internal")
                           "finished" in
                       Ojs.call (Ojs.get_prop_ascii x859 "__promisify__")
                         "apply"
                         [|x859;((let x854 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x854 "push"
                                       [|(union3_to_js
                                            ReadWriteStream.t_to_js
                                            ReadableStream.t_to_js
                                            WritableStream.t_to_js x852)|]);
                                  (match x853 with
                                   | Some x855 ->
                                       ignore
                                         (Ojs.call x854 "push"
                                            [|(stream_internal_FinishedOptions_to_js
                                                 x855)|])
                                   | None -> ());
                                  x854))|])
          end
        let (pipeline :
          stream1:ReadableStream.t ->
            stream2:'T ->
              ?callback:(err:ErrnoException.t or_null -> unit) -> unit -> 'T)
          =
          fun ~stream1:(x861 : ReadableStream.t) ->
            fun ~stream2:(x862 : 'T) ->
              fun
                ?callback:(x863 :
                            (err:ErrnoException.t or_null -> unit) option)
                ->
                fun () ->
                  Obj.magic
                    (let x868 = Ojs.get_prop_ascii Import.stream "internal" in
                     Ojs.call (Ojs.get_prop_ascii x868 "pipeline") "apply"
                       [|x868;((let x864 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x864 "push"
                                     [|(ReadableStream.t_to_js x861)|]);
                                ignore
                                  (Ojs.call x864 "push" [|(Obj.magic x862)|]);
                                (match x863 with
                                 | Some x865 ->
                                     ignore
                                       (Ojs.call x864 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun (x866 : Ojs.t) ->
                                                  x865
                                                    ~err:(or_null_of_js
                                                            ErrnoException.t_of_js
                                                            x866)))|])
                                 | None -> ());
                                x864))|])
        let (pipeline :
          stream1:ReadableStream.t ->
            stream2:ReadWriteStream.t ->
              stream3:'T ->
                ?callback:(err:ErrnoException.t or_null -> unit) ->
                  unit -> 'T)
          =
          fun ~stream1:(x869 : ReadableStream.t) ->
            fun ~stream2:(x870 : ReadWriteStream.t) ->
              fun ~stream3:(x871 : 'T) ->
                fun
                  ?callback:(x872 :
                              (err:ErrnoException.t or_null -> unit) option)
                  ->
                  fun () ->
                    Obj.magic
                      (let x877 = Ojs.get_prop_ascii Import.stream "internal" in
                       Ojs.call (Ojs.get_prop_ascii x877 "pipeline") "apply"
                         [|x877;((let x873 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x873 "push"
                                       [|(ReadableStream.t_to_js x869)|]);
                                  ignore
                                    (Ojs.call x873 "push"
                                       [|(ReadWriteStream.t_to_js x870)|]);
                                  ignore
                                    (Ojs.call x873 "push"
                                       [|(Obj.magic x871)|]);
                                  (match x872 with
                                   | Some x874 ->
                                       ignore
                                         (Ojs.call x873 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun (x875 : Ojs.t) ->
                                                    x874
                                                      ~err:(or_null_of_js
                                                              ErrnoException.t_of_js
                                                              x875)))|])
                                   | None -> ());
                                  x873))|])
        let (pipeline :
          stream1:ReadableStream.t ->
            stream2:ReadWriteStream.t ->
              stream3:ReadWriteStream.t ->
                stream4:'T ->
                  ?callback:(err:ErrnoException.t or_null -> unit) ->
                    unit -> 'T)
          =
          fun ~stream1:(x878 : ReadableStream.t) ->
            fun ~stream2:(x879 : ReadWriteStream.t) ->
              fun ~stream3:(x880 : ReadWriteStream.t) ->
                fun ~stream4:(x881 : 'T) ->
                  fun
                    ?callback:(x882 :
                                (err:ErrnoException.t or_null -> unit) option)
                    ->
                    fun () ->
                      Obj.magic
                        (let x887 =
                           Ojs.get_prop_ascii Import.stream "internal" in
                         Ojs.call (Ojs.get_prop_ascii x887 "pipeline")
                           "apply"
                           [|x887;((let x883 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x883 "push"
                                         [|(ReadableStream.t_to_js x878)|]);
                                    ignore
                                      (Ojs.call x883 "push"
                                         [|(ReadWriteStream.t_to_js x879)|]);
                                    ignore
                                      (Ojs.call x883 "push"
                                         [|(ReadWriteStream.t_to_js x880)|]);
                                    ignore
                                      (Ojs.call x883 "push"
                                         [|(Obj.magic x881)|]);
                                    (match x882 with
                                     | Some x884 ->
                                         ignore
                                           (Ojs.call x883 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun (x885 : Ojs.t) ->
                                                      x884
                                                        ~err:(or_null_of_js
                                                                ErrnoException.t_of_js
                                                                x885)))|])
                                     | None -> ());
                                    x883))|])
        let (pipeline :
          stream1:ReadableStream.t ->
            stream2:ReadWriteStream.t ->
              stream3:ReadWriteStream.t ->
                stream4:ReadWriteStream.t ->
                  stream5:'T ->
                    ?callback:(err:ErrnoException.t or_null -> unit) ->
                      unit -> 'T)
          =
          fun ~stream1:(x888 : ReadableStream.t) ->
            fun ~stream2:(x889 : ReadWriteStream.t) ->
              fun ~stream3:(x890 : ReadWriteStream.t) ->
                fun ~stream4:(x891 : ReadWriteStream.t) ->
                  fun ~stream5:(x892 : 'T) ->
                    fun
                      ?callback:(x893 :
                                  (err:ErrnoException.t or_null -> unit)
                                    option)
                      ->
                      fun () ->
                        Obj.magic
                          (let x898 =
                             Ojs.get_prop_ascii Import.stream "internal" in
                           Ojs.call (Ojs.get_prop_ascii x898 "pipeline")
                             "apply"
                             [|x898;((let x894 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x894 "push"
                                           [|(ReadableStream.t_to_js x888)|]);
                                      ignore
                                        (Ojs.call x894 "push"
                                           [|(ReadWriteStream.t_to_js x889)|]);
                                      ignore
                                        (Ojs.call x894 "push"
                                           [|(ReadWriteStream.t_to_js x890)|]);
                                      ignore
                                        (Ojs.call x894 "push"
                                           [|(ReadWriteStream.t_to_js x891)|]);
                                      ignore
                                        (Ojs.call x894 "push"
                                           [|(Obj.magic x892)|]);
                                      (match x893 with
                                       | Some x895 ->
                                           ignore
                                             (Ojs.call x894 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun (x896 : Ojs.t) ->
                                                        x895
                                                          ~err:(or_null_of_js
                                                                  ErrnoException.t_of_js
                                                                  x896)))|])
                                       | None -> ());
                                      x894))|])
        let (pipeline :
          streams:(ReadWriteStream.t, ReadableStream.t, WritableStream.t)
            union3 list ->
            ?callback:(err:ErrnoException.t or_null -> unit) ->
              unit -> WritableStream.t)
          =
          fun
            ~streams:(x899 :
                       (ReadWriteStream.t, ReadableStream.t,
                         WritableStream.t) union3 list)
            ->
            fun
              ?callback:(x900 :
                          (err:ErrnoException.t or_null -> unit) option)
              ->
              fun () ->
                WritableStream.t_of_js
                  (let x909 = Ojs.get_prop_ascii Import.stream "internal" in
                   Ojs.call (Ojs.get_prop_ascii x909 "pipeline") "apply"
                     [|x909;((let x901 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x901 "push"
                                   [|(Ojs.list_to_js
                                        (fun
                                           (x905 :
                                             (ReadWriteStream.t,
                                               ReadableStream.t,
                                               WritableStream.t) union3)
                                           ->
                                           union3_to_js
                                             ReadWriteStream.t_to_js
                                             ReadableStream.t_to_js
                                             WritableStream.t_to_js x905)
                                        x899)|]);
                              (match x900 with
                               | Some x902 ->
                                   ignore
                                     (Ojs.call x901 "push"
                                        [|(Ojs.fun_to_js 1
                                             (fun (x903 : Ojs.t) ->
                                                x902
                                                  ~err:(or_null_of_js
                                                          ErrnoException.t_of_js
                                                          x903)))|])
                               | None -> ());
                              x901))|])
        let (pipeline :
          stream1:ReadableStream.t ->
            stream2:(ReadWriteStream.t, WritableStream.t) union2 ->
              streams:any list -> WritableStream.t)
          =
          fun ~stream1:(x910 : ReadableStream.t) ->
            fun
              ~stream2:(x911 : (ReadWriteStream.t, WritableStream.t) union2)
              ->
              fun ~streams:(x912 : any list) ->
                WritableStream.t_of_js
                  (let x917 = Ojs.get_prop_ascii Import.stream "internal" in
                   Ojs.call (Ojs.get_prop_ascii x917 "pipeline") "apply"
                     [|x917;((let x913 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x913 "push"
                                   [|(ReadableStream.t_to_js x910)|]);
                              ignore
                                (Ojs.call x913 "push"
                                   [|(union2_to_js ReadWriteStream.t_to_js
                                        WritableStream.t_to_js x911)|]);
                              List.iter
                                (fun (x914 : any) ->
                                   ignore
                                     (Ojs.call x913 "push"
                                        [|(any_to_js x914)|])) x912;
                              x913))|])
        module Pipeline =
          struct
            let (__promisify__ :
              stream1:ReadableStream.t ->
                stream2:WritableStream.t -> unit Promise.t)
              =
              fun ~stream1:(x918 : ReadableStream.t) ->
                fun ~stream2:(x919 : WritableStream.t) ->
                  Promise.t_of_js Ojs.unit_of_js
                    (Ojs.call
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "pipeline") "__promisify__"
                       [|(ReadableStream.t_to_js x918);(WritableStream.t_to_js
                                                          x919)|])
            let (__promisify__ :
              stream1:ReadableStream.t ->
                stream2:ReadWriteStream.t ->
                  stream3:WritableStream.t -> unit Promise.t)
              =
              fun ~stream1:(x921 : ReadableStream.t) ->
                fun ~stream2:(x922 : ReadWriteStream.t) ->
                  fun ~stream3:(x923 : WritableStream.t) ->
                    Promise.t_of_js Ojs.unit_of_js
                      (Ojs.call
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Import.stream "internal")
                            "pipeline") "__promisify__"
                         [|(ReadableStream.t_to_js x921);(ReadWriteStream.t_to_js
                                                            x922);(WritableStream.t_to_js
                                                                    x923)|])
            let (__promisify__ :
              stream1:ReadableStream.t ->
                stream2:ReadWriteStream.t ->
                  stream3:ReadWriteStream.t ->
                    stream4:WritableStream.t -> unit Promise.t)
              =
              fun ~stream1:(x925 : ReadableStream.t) ->
                fun ~stream2:(x926 : ReadWriteStream.t) ->
                  fun ~stream3:(x927 : ReadWriteStream.t) ->
                    fun ~stream4:(x928 : WritableStream.t) ->
                      Promise.t_of_js Ojs.unit_of_js
                        (Ojs.call
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Import.stream "internal")
                              "pipeline") "__promisify__"
                           [|(ReadableStream.t_to_js x925);(ReadWriteStream.t_to_js
                                                              x926);(
                             ReadWriteStream.t_to_js x927);(WritableStream.t_to_js
                                                              x928)|])
            let (__promisify__ :
              stream1:ReadableStream.t ->
                stream2:ReadWriteStream.t ->
                  stream3:ReadWriteStream.t ->
                    stream4:ReadWriteStream.t ->
                      stream5:WritableStream.t -> unit Promise.t)
              =
              fun ~stream1:(x930 : ReadableStream.t) ->
                fun ~stream2:(x931 : ReadWriteStream.t) ->
                  fun ~stream3:(x932 : ReadWriteStream.t) ->
                    fun ~stream4:(x933 : ReadWriteStream.t) ->
                      fun ~stream5:(x934 : WritableStream.t) ->
                        Promise.t_of_js Ojs.unit_of_js
                          (Ojs.call
                             (Ojs.get_prop_ascii
                                (Ojs.get_prop_ascii Import.stream "internal")
                                "pipeline") "__promisify__"
                             [|(ReadableStream.t_to_js x930);(ReadWriteStream.t_to_js
                                                                x931);(
                               ReadWriteStream.t_to_js x932);(ReadWriteStream.t_to_js
                                                                x933);(
                               WritableStream.t_to_js x934)|])
            let (__promisify__ :
              streams:(ReadWriteStream.t, ReadableStream.t, WritableStream.t)
                union3 list -> unit Promise.t)
              =
              fun
                ~streams:(x936 :
                           (ReadWriteStream.t, ReadableStream.t,
                             WritableStream.t) union3 list)
                ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Import.stream "internal")
                        "pipeline") "__promisify__"
                     [|(Ojs.list_to_js
                          (fun
                             (x937 :
                               (ReadWriteStream.t, ReadableStream.t,
                                 WritableStream.t) union3)
                             ->
                             union3_to_js ReadWriteStream.t_to_js
                               ReadableStream.t_to_js WritableStream.t_to_js
                               x937) x936)|])
            let (__promisify__ :
              stream1:ReadableStream.t ->
                stream2:(ReadWriteStream.t, WritableStream.t) union2 ->
                  streams:any list -> unit Promise.t)
              =
              fun ~stream1:(x942 : ReadableStream.t) ->
                fun
                  ~stream2:(x943 :
                             (ReadWriteStream.t, WritableStream.t) union2)
                  ->
                  fun ~streams:(x944 : any list) ->
                    Promise.t_of_js Ojs.unit_of_js
                      (let x949 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Import.stream "internal")
                           "pipeline" in
                       Ojs.call (Ojs.get_prop_ascii x949 "__promisify__")
                         "apply"
                         [|x949;((let x945 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x945 "push"
                                       [|(ReadableStream.t_to_js x942)|]);
                                  ignore
                                    (Ojs.call x945 "push"
                                       [|(union2_to_js
                                            ReadWriteStream.t_to_js
                                            WritableStream.t_to_js x943)|]);
                                  List.iter
                                    (fun (x946 : any) ->
                                       ignore
                                         (Ojs.call x945 "push"
                                            [|(any_to_js x946)|])) x944;
                                  x945))|])
          end
        module Pipe =
          struct
            type t = stream_internal_Pipe
            let rec t_of_js : Ojs.t -> t =
              fun (x952 : Ojs.t) -> stream_internal_Pipe_of_js x952
            and t_to_js : t -> Ojs.t =
              fun (x951 : stream_internal_Pipe) ->
                stream_internal_Pipe_to_js x951
            let (close : t -> unit) =
              fun (x953 : t) -> ignore (Ojs.call (t_to_js x953) "close" [||])
            let (hasRef : t -> bool) =
              fun (x954 : t) ->
                Ojs.bool_of_js (Ojs.call (t_to_js x954) "hasRef" [||])
            let (ref : t -> unit) =
              fun (x955 : t) -> ignore (Ojs.call (t_to_js x955) "ref" [||])
            let (unref : t -> unit) =
              fun (x956 : t) -> ignore (Ojs.call (t_to_js x956) "unref" [||])
          end
      end
    include struct include Internal end
  end
