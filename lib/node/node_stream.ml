[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_chunk : t -> any) =
      fun (x3 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x3) "chunk")
    let (set_chunk : t -> any -> unit) =
      fun (x4 : t) ->
        fun (x5 : any) ->
          Ojs.set_prop_ascii (t_to_js x4) "chunk" (any_to_js x5)
    let (get_encoding : t -> BufferEncoding.t) =
      fun (x6 : t) ->
        BufferEncoding.t_of_js (Ojs.get_prop_ascii (t_to_js x6) "encoding")
    let (set_encoding : t -> BufferEncoding.t -> unit) =
      fun (x7 : t) ->
        fun (x8 : BufferEncoding.t) ->
          Ojs.set_prop_ascii (t_to_js x7) "encoding"
            (BufferEncoding.t_to_js x8)
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10 : Ojs.t) -> x10
    and t_to_js : t -> Ojs.t = fun (x9 : Ojs.t) -> x9
    let (get_end : t -> bool) =
      fun (x11 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x11) "end")
    let (set_end : t -> bool -> unit) =
      fun (x12 : t) ->
        fun (x13 : bool) ->
          Ojs.set_prop_ascii (t_to_js x12) "end" (Ojs.bool_to_js x13)
  end
module Stream =
  struct
    module Internal =
      struct
        type stream = Node_events.Events.EventEmitter.t
        let rec stream_of_js : Ojs.t -> stream =
          fun (x15 : Ojs.t) -> Node_events.Events.EventEmitter.t_of_js x15
        and stream_to_js : stream -> Ojs.t =
          fun (x14 : Node_events.Events.EventEmitter.t) ->
            Node_events.Events.EventEmitter.t_to_js x14
        module Base =
          struct
            include struct include Node_events.Events.EventEmitter end
            let (pipe :
              t -> 'T -> ?options:AnonymousInterface1.t -> unit -> 'T) =
              fun (x20 : t) ->
                fun (x16 : 'T) ->
                  fun ?options:(x17 : AnonymousInterface1.t option) ->
                    fun () ->
                      Obj.magic
                        (let x21 = t_to_js x20 in
                         Ojs.call (Ojs.get_prop_ascii x21 "pipe") "apply"
                           [|x21;((let x18 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x18 "push" [|(Obj.magic x16)|]);
                                   (match x17 with
                                    | Some x19 ->
                                        ignore
                                          (Ojs.call x18 "push"
                                             [|(AnonymousInterface1.t_to_js
                                                  x19)|])
                                    | None -> ());
                                   x18))|])
          end
        module ReadableOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x23 : Ojs.t) -> x23
            and t_to_js : t -> Ojs.t = fun (x22 : Ojs.t) -> x22
            let (get_high_water_mark : t -> int) =
              fun (x24 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x24) "highWaterMark")
            let (set_high_water_mark : t -> int -> unit) =
              fun (x25 : t) ->
                fun (x26 : int) ->
                  Ojs.set_prop_ascii (t_to_js x25) "highWaterMark"
                    (Ojs.int_to_js x26)
            let (get_encoding : t -> BufferEncoding.t) =
              fun (x27 : t) ->
                BufferEncoding.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x27) "encoding")
            let (set_encoding : t -> BufferEncoding.t -> unit) =
              fun (x28 : t) ->
                fun (x29 : BufferEncoding.t) ->
                  Ojs.set_prop_ascii (t_to_js x28) "encoding"
                    (BufferEncoding.t_to_js x29)
            let (get_object_mode : t -> bool) =
              fun (x30 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x30) "objectMode")
            let (set_object_mode : t -> bool -> unit) =
              fun (x31 : t) ->
                fun (x32 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x31) "objectMode"
                    (Ojs.bool_to_js x32)
            let (read : t -> this:stream -> size:int -> unit) =
              fun (x35 : t) ->
                fun ~this:(x33 : stream) ->
                  fun ~size:(x34 : int) ->
                    ignore
                      (Ojs.call (t_to_js x35) "read"
                         [|(stream_to_js x33);(Ojs.int_to_js x34)|])
            let (destroy :
              t ->
                this:stream ->
                  error:Error.t or_null ->
                    callback:(error:Error.t or_null -> unit) -> unit)
              =
              fun (x42 : t) ->
                fun ~this:(x36 : stream) ->
                  fun ~error:(x37 : Error.t or_null) ->
                    fun ~callback:(x39 : error:Error.t or_null -> unit) ->
                      ignore
                        (Ojs.call (t_to_js x42) "destroy"
                           [|(stream_to_js x36);(or_null_to_js Error.t_to_js
                                                   x37);(Ojs.fun_to_js 1
                                                           (fun (x40 : Ojs.t)
                                                              ->
                                                              x39
                                                                ~error:(
                                                                or_null_of_js
                                                                  Error.t_of_js
                                                                  x40)))|])
            let (get_auto_destroy : t -> bool) =
              fun (x43 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x43) "autoDestroy")
            let (set_auto_destroy : t -> bool -> unit) =
              fun (x44 : t) ->
                fun (x45 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x44) "autoDestroy"
                    (Ojs.bool_to_js x45)
          end
        module Stream =
          struct
            include struct include Base end
            let (create : ?opts:ReadableOptions.t -> unit -> t) =
              fun ?opts:(x46 : ReadableOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "Stream")
                       (let x47 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x46 with
                         | Some x48 ->
                             ignore
                               (Ojs.call x47 "push"
                                  [|(ReadableOptions.t_to_js x48)|])
                         | None -> ());
                        x47))
          end
        module Readable =
          struct
            include struct include Stream end
            let (from :
              iterable:(any AsyncIterable.t, any Iterable.t) union2 ->
                ?options:ReadableOptions.t -> unit -> t)
              =
              fun
                ~iterable:(x49 :
                            (any AsyncIterable.t, any Iterable.t) union2)
                ->
                fun ?options:(x50 : ReadableOptions.t option) ->
                  fun () ->
                    t_of_js
                      (let x57 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Import.stream "internal")
                           "Readable" in
                       Ojs.call (Ojs.get_prop_ascii x57 "from") "apply"
                         [|x57;((let x51 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x51 "push"
                                      [|(union2_to_js
                                           (fun (x53 : any AsyncIterable.t)
                                              ->
                                              AsyncIterable.t_to_js any_to_js
                                                x53)
                                           (fun (x55 : any Iterable.t) ->
                                              Iterable.t_to_js any_to_js x55)
                                           x49)|]);
                                 (match x50 with
                                  | Some x52 ->
                                      ignore
                                        (Ojs.call x51 "push"
                                           [|(ReadableOptions.t_to_js x52)|])
                                  | None -> ());
                                 x51))|])
            let (get_readable : t -> bool) =
              fun (x58 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x58) "readable")
            let (set_readable : t -> bool -> unit) =
              fun (x59 : t) ->
                fun (x60 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x59) "readable"
                    (Ojs.bool_to_js x60)
            let (get_readable_encoding : t -> BufferEncoding.t or_null) =
              fun (x61 : t) ->
                or_null_of_js BufferEncoding.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x61) "readableEncoding")
            let (get_readable_ended : t -> bool) =
              fun (x63 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x63) "readableEnded")
            let (get_readable_flowing : t -> bool or_null) =
              fun (x64 : t) ->
                or_null_of_js Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x64) "readableFlowing")
            let (get_readable_high_water_mark : t -> int) =
              fun (x66 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x66) "readableHighWaterMark")
            let (get_readable_length : t -> int) =
              fun (x67 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x67) "readableLength")
            let (get_readable_object_mode : t -> bool) =
              fun (x68 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x68) "readableObjectMode")
            let (get_destroyed : t -> bool) =
              fun (x69 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x69) "destroyed")
            let (set_destroyed : t -> bool -> unit) =
              fun (x70 : t) ->
                fun (x71 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x70) "destroyed"
                    (Ojs.bool_to_js x71)
            let (create : ?opts:ReadableOptions.t -> unit -> t) =
              fun ?opts:(x72 : ReadableOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "Readable")
                       (let x73 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x72 with
                         | Some x74 ->
                             ignore
                               (Ojs.call x73 "push"
                                  [|(ReadableOptions.t_to_js x74)|])
                         | None -> ());
                        x73))
            let (_read : t -> size:int -> unit) =
              fun (x76 : t) ->
                fun ~size:(x75 : int) ->
                  ignore
                    (Ojs.call (t_to_js x76) "_read" [|(Ojs.int_to_js x75)|])
            let (read : t -> ?size:int -> unit -> any) =
              fun (x80 : t) ->
                fun ?size:(x77 : int option) ->
                  fun () ->
                    any_of_js
                      (let x81 = t_to_js x80 in
                       Ojs.call (Ojs.get_prop_ascii x81 "read") "apply"
                         [|x81;((let x78 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x77 with
                                  | Some x79 ->
                                      ignore
                                        (Ojs.call x78 "push"
                                           [|(Ojs.int_to_js x79)|])
                                  | None -> ());
                                 x78))|])
            let (set_encoding : t -> encoding:BufferEncoding.t -> t) =
              fun (x83 : t) ->
                fun ~encoding:(x82 : BufferEncoding.t) ->
                  t_of_js
                    (Ojs.call (t_to_js x83) "setEncoding"
                       [|(BufferEncoding.t_to_js x82)|])
            let (pause : t -> t) =
              fun (x84 : t) -> t_of_js (Ojs.call (t_to_js x84) "pause" [||])
            let (resume : t -> t) =
              fun (x85 : t) -> t_of_js (Ojs.call (t_to_js x85) "resume" [||])
            let (is_paused : t -> bool) =
              fun (x86 : t) ->
                Ojs.bool_of_js (Ojs.call (t_to_js x86) "isPaused" [||])
            let (unpipe : t -> ?destination:WritableStream.t -> unit -> t) =
              fun (x90 : t) ->
                fun ?destination:(x87 : WritableStream.t option) ->
                  fun () ->
                    t_of_js
                      (let x91 = t_to_js x90 in
                       Ojs.call (Ojs.get_prop_ascii x91 "unpipe") "apply"
                         [|x91;((let x88 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x87 with
                                  | Some x89 ->
                                      ignore
                                        (Ojs.call x88 "push"
                                           [|(WritableStream.t_to_js x89)|])
                                  | None -> ());
                                 x88))|])
            let (unshift :
              t -> chunk:any -> ?encoding:BufferEncoding.t -> unit -> unit) =
              fun (x96 : t) ->
                fun ~chunk:(x92 : any) ->
                  fun ?encoding:(x93 : BufferEncoding.t option) ->
                    fun () ->
                      ignore
                        (let x97 = t_to_js x96 in
                         Ojs.call (Ojs.get_prop_ascii x97 "unshift") "apply"
                           [|x97;((let x94 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x94 "push" [|(any_to_js x92)|]);
                                   (match x93 with
                                    | Some x95 ->
                                        ignore
                                          (Ojs.call x94 "push"
                                             [|(BufferEncoding.t_to_js x95)|])
                                    | None -> ());
                                   x94))|])
            let (wrap : t -> old_stream:ReadableStream.t -> t) =
              fun (x99 : t) ->
                fun ~old_stream:(x98 : ReadableStream.t) ->
                  t_of_js
                    (Ojs.call (t_to_js x99) "wrap"
                       [|(ReadableStream.t_to_js x98)|])
            let (push :
              t -> chunk:any -> ?encoding:BufferEncoding.t -> unit -> bool) =
              fun (x104 : t) ->
                fun ~chunk:(x100 : any) ->
                  fun ?encoding:(x101 : BufferEncoding.t option) ->
                    fun () ->
                      Ojs.bool_of_js
                        (let x105 = t_to_js x104 in
                         Ojs.call (Ojs.get_prop_ascii x105 "push") "apply"
                           [|x105;((let x102 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x102 "push"
                                         [|(any_to_js x100)|]);
                                    (match x101 with
                                     | Some x103 ->
                                         ignore
                                           (Ojs.call x102 "push"
                                              [|(BufferEncoding.t_to_js x103)|])
                                     | None -> ());
                                    x102))|])
            let (_destroy :
              t ->
                error:Error.t or_null ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x112 : t) ->
                fun ~error:(x106 : Error.t or_null) ->
                  fun
                    ~callback:(x108 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x112) "_destroy"
                         [|(or_null_to_js Error.t_to_js x106);(Ojs.fun_to_js
                                                                 1
                                                                 (fun
                                                                    (x109 :
                                                                    Ojs.t) ->
                                                                    x108
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x110 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x110)
                                                                    x109) ()))|])
            let (destroy : t -> ?error:Error.t -> unit -> unit) =
              fun (x116 : t) ->
                fun ?error:(x113 : Error.t option) ->
                  fun () ->
                    ignore
                      (let x117 = t_to_js x116 in
                       Ojs.call (Ojs.get_prop_ascii x117 "destroy") "apply"
                         [|x117;((let x114 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x113 with
                                   | Some x115 ->
                                       ignore
                                         (Ojs.call x114 "push"
                                            [|(Error.t_to_js x115)|])
                                   | None -> ());
                                  x114))|])
            let (add_listener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x120 : t) ->
                fun ~event:(x118 : [ `close ]) ->
                  fun ~listener:(x119 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x120) "addListener"
                         [|((match x118 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x119 ()))|])
            let (add_listener' :
              t -> event:[ `data ] -> listener:(chunk:any -> unit) -> t) =
              fun (x124 : t) ->
                fun ~event:(x121 : [ `data ]) ->
                  fun ~listener:(x122 : chunk:any -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x124) "addListener"
                         [|((match x121 with
                             | `data -> Ojs.string_to_js "data"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x123 :
                                                                    Ojs.t) ->
                                                                    x122
                                                                    ~chunk:(
                                                                    any_of_js
                                                                    x123)))|])
            let (add_listener'' :
              t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
              fun (x127 : t) ->
                fun ~event:(x125 : [ `end_ ]) ->
                  fun ~listener:(x126 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x127) "addListener"
                         [|((match x125 with
                             | `end_ -> Ojs.string_to_js "end"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x126 ()))|])
            let (add_listener''' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x131 : t) ->
                fun ~event:(x128 : [ `error ]) ->
                  fun ~listener:(x129 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x131) "addListener"
                         [|((match x128 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x130 : Ojs.t) ->
                                x129 ~err:(Error.t_of_js x130)))|])
            let (add_listener'''' :
              t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
              fun (x134 : t) ->
                fun ~event:(x132 : [ `pause ]) ->
                  fun ~listener:(x133 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x134) "addListener"
                         [|((match x132 with
                             | `pause -> Ojs.string_to_js "pause"));(
                           Ojs.fun_to_js 1 (fun _ -> x133 ()))|])
            let (add_listener''''' :
              t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
              fun (x137 : t) ->
                fun ~event:(x135 : [ `readable ]) ->
                  fun ~listener:(x136 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x137) "addListener"
                         [|((match x135 with
                             | `readable -> Ojs.string_to_js "readable"));(
                           Ojs.fun_to_js 1 (fun _ -> x136 ()))|])
            let (add_listener'''''' :
              t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
              fun (x140 : t) ->
                fun ~event:(x138 : [ `resume ]) ->
                  fun ~listener:(x139 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x140) "addListener"
                         [|((match x138 with
                             | `resume -> Ojs.string_to_js "resume"));(
                           Ojs.fun_to_js 1 (fun _ -> x139 ()))|])
            let (add_listener''''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x146 : t) ->
                fun ~event:(x141 : symbol or_string) ->
                  fun ~listener:(x143 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x146) "addListener"
                         [|(or_string_to_js symbol_to_js x141);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x144 :
                                                                    _) ->
                                                                    x143
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x144 0)))|])
            let (emit : t -> event:[ `close ] -> bool) =
              fun (x148 : t) ->
                fun ~event:(x147 : [ `close ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x148) "emit"
                       [|((match x147 with
                           | `close -> Ojs.string_to_js "close"))|])
            let (emit' : t -> event:[ `data ] -> chunk:any -> bool) =
              fun (x151 : t) ->
                fun ~event:(x149 : [ `data ]) ->
                  fun ~chunk:(x150 : any) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x151) "emit"
                         [|((match x149 with
                             | `data -> Ojs.string_to_js "data"));(any_to_js
                                                                    x150)|])
            let (emit'' : t -> event:[ `end_ ] -> bool) =
              fun (x153 : t) ->
                fun ~event:(x152 : [ `end_ ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x153) "emit"
                       [|((match x152 with | `end_ -> Ojs.string_to_js "end"))|])
            let (emit''' : t -> event:[ `error ] -> err:Error.t -> bool) =
              fun (x156 : t) ->
                fun ~event:(x154 : [ `error ]) ->
                  fun ~err:(x155 : Error.t) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x156) "emit"
                         [|((match x154 with
                             | `error -> Ojs.string_to_js "error"));(
                           Error.t_to_js x155)|])
            let (emit'''' : t -> event:[ `pause ] -> bool) =
              fun (x158 : t) ->
                fun ~event:(x157 : [ `pause ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x158) "emit"
                       [|((match x157 with
                           | `pause -> Ojs.string_to_js "pause"))|])
            let (emit''''' : t -> event:[ `readable ] -> bool) =
              fun (x160 : t) ->
                fun ~event:(x159 : [ `readable ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x160) "emit"
                       [|((match x159 with
                           | `readable -> Ojs.string_to_js "readable"))|])
            let (emit'''''' : t -> event:[ `resume ] -> bool) =
              fun (x162 : t) ->
                fun ~event:(x161 : [ `resume ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x162) "emit"
                       [|((match x161 with
                           | `resume -> Ojs.string_to_js "resume"))|])
            let (emit''''''' :
              t -> event:symbol or_string -> args:any list -> bool) =
              fun (x168 : t) ->
                fun ~event:(x163 : symbol or_string) ->
                  fun ~args:(x164 : any list) ->
                    Ojs.bool_of_js
                      (let x169 = t_to_js x168 in
                       Ojs.call (Ojs.get_prop_ascii x169 "emit") "apply"
                         [|x169;((let x165 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x165 "push"
                                       [|(or_string_to_js symbol_to_js x163)|]);
                                  List.iter
                                    (fun (x166 : any) ->
                                       ignore
                                         (Ojs.call x165 "push"
                                            [|(any_to_js x166)|])) x164;
                                  x165))|])
            let (on : t -> event:[ `close ] -> listener:(unit -> unit) -> t)
              =
              fun (x172 : t) ->
                fun ~event:(x170 : [ `close ]) ->
                  fun ~listener:(x171 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x172) "on"
                         [|((match x170 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x171 ()))|])
            let (on' :
              t -> event:[ `data ] -> listener:(chunk:any -> unit) -> t) =
              fun (x176 : t) ->
                fun ~event:(x173 : [ `data ]) ->
                  fun ~listener:(x174 : chunk:any -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x176) "on"
                         [|((match x173 with
                             | `data -> Ojs.string_to_js "data"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x175 :
                                                                    Ojs.t) ->
                                                                    x174
                                                                    ~chunk:(
                                                                    any_of_js
                                                                    x175)))|])
            let (on'' : t -> event:[ `end_ ] -> listener:(unit -> unit) -> t)
              =
              fun (x179 : t) ->
                fun ~event:(x177 : [ `end_ ]) ->
                  fun ~listener:(x178 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x179) "on"
                         [|((match x177 with
                             | `end_ -> Ojs.string_to_js "end"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x178 ()))|])
            let (on''' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x183 : t) ->
                fun ~event:(x180 : [ `error ]) ->
                  fun ~listener:(x181 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x183) "on"
                         [|((match x180 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x182 : Ojs.t) ->
                                x181 ~err:(Error.t_of_js x182)))|])
            let (on'''' :
              t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
              fun (x186 : t) ->
                fun ~event:(x184 : [ `pause ]) ->
                  fun ~listener:(x185 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x186) "on"
                         [|((match x184 with
                             | `pause -> Ojs.string_to_js "pause"));(
                           Ojs.fun_to_js 1 (fun _ -> x185 ()))|])
            let (on''''' :
              t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
              fun (x189 : t) ->
                fun ~event:(x187 : [ `readable ]) ->
                  fun ~listener:(x188 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x189) "on"
                         [|((match x187 with
                             | `readable -> Ojs.string_to_js "readable"));(
                           Ojs.fun_to_js 1 (fun _ -> x188 ()))|])
            let (on'''''' :
              t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
              fun (x192 : t) ->
                fun ~event:(x190 : [ `resume ]) ->
                  fun ~listener:(x191 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x192) "on"
                         [|((match x190 with
                             | `resume -> Ojs.string_to_js "resume"));(
                           Ojs.fun_to_js 1 (fun _ -> x191 ()))|])
            let (on''''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x198 : t) ->
                fun ~event:(x193 : symbol or_string) ->
                  fun ~listener:(x195 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x198) "on"
                         [|(or_string_to_js symbol_to_js x193);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x196 :
                                                                    _) ->
                                                                    x195
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x196 0)))|])
            let (once :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x201 : t) ->
                fun ~event:(x199 : [ `close ]) ->
                  fun ~listener:(x200 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x201) "once"
                         [|((match x199 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x200 ()))|])
            let (once' :
              t -> event:[ `data ] -> listener:(chunk:any -> unit) -> t) =
              fun (x205 : t) ->
                fun ~event:(x202 : [ `data ]) ->
                  fun ~listener:(x203 : chunk:any -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x205) "once"
                         [|((match x202 with
                             | `data -> Ojs.string_to_js "data"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x204 :
                                                                    Ojs.t) ->
                                                                    x203
                                                                    ~chunk:(
                                                                    any_of_js
                                                                    x204)))|])
            let (once'' :
              t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
              fun (x208 : t) ->
                fun ~event:(x206 : [ `end_ ]) ->
                  fun ~listener:(x207 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x208) "once"
                         [|((match x206 with
                             | `end_ -> Ojs.string_to_js "end"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x207 ()))|])
            let (once''' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x212 : t) ->
                fun ~event:(x209 : [ `error ]) ->
                  fun ~listener:(x210 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x212) "once"
                         [|((match x209 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x211 : Ojs.t) ->
                                x210 ~err:(Error.t_of_js x211)))|])
            let (once'''' :
              t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
              fun (x215 : t) ->
                fun ~event:(x213 : [ `pause ]) ->
                  fun ~listener:(x214 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x215) "once"
                         [|((match x213 with
                             | `pause -> Ojs.string_to_js "pause"));(
                           Ojs.fun_to_js 1 (fun _ -> x214 ()))|])
            let (once''''' :
              t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
              fun (x218 : t) ->
                fun ~event:(x216 : [ `readable ]) ->
                  fun ~listener:(x217 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x218) "once"
                         [|((match x216 with
                             | `readable -> Ojs.string_to_js "readable"));(
                           Ojs.fun_to_js 1 (fun _ -> x217 ()))|])
            let (once'''''' :
              t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
              fun (x221 : t) ->
                fun ~event:(x219 : [ `resume ]) ->
                  fun ~listener:(x220 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x221) "once"
                         [|((match x219 with
                             | `resume -> Ojs.string_to_js "resume"));(
                           Ojs.fun_to_js 1 (fun _ -> x220 ()))|])
            let (once''''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x227 : t) ->
                fun ~event:(x222 : symbol or_string) ->
                  fun ~listener:(x224 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x227) "once"
                         [|(or_string_to_js symbol_to_js x222);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x225 :
                                                                    _) ->
                                                                    x224
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x225 0)))|])
            let (prepend_listener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x230 : t) ->
                fun ~event:(x228 : [ `close ]) ->
                  fun ~listener:(x229 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x230) "prependListener"
                         [|((match x228 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x229 ()))|])
            let (prepend_listener' :
              t -> event:[ `data ] -> listener:(chunk:any -> unit) -> t) =
              fun (x234 : t) ->
                fun ~event:(x231 : [ `data ]) ->
                  fun ~listener:(x232 : chunk:any -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x234) "prependListener"
                         [|((match x231 with
                             | `data -> Ojs.string_to_js "data"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x233 :
                                                                    Ojs.t) ->
                                                                    x232
                                                                    ~chunk:(
                                                                    any_of_js
                                                                    x233)))|])
            let (prepend_listener'' :
              t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
              fun (x237 : t) ->
                fun ~event:(x235 : [ `end_ ]) ->
                  fun ~listener:(x236 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x237) "prependListener"
                         [|((match x235 with
                             | `end_ -> Ojs.string_to_js "end"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x236 ()))|])
            let (prepend_listener''' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x241 : t) ->
                fun ~event:(x238 : [ `error ]) ->
                  fun ~listener:(x239 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x241) "prependListener"
                         [|((match x238 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x240 : Ojs.t) ->
                                x239 ~err:(Error.t_of_js x240)))|])
            let (prepend_listener'''' :
              t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
              fun (x244 : t) ->
                fun ~event:(x242 : [ `pause ]) ->
                  fun ~listener:(x243 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x244) "prependListener"
                         [|((match x242 with
                             | `pause -> Ojs.string_to_js "pause"));(
                           Ojs.fun_to_js 1 (fun _ -> x243 ()))|])
            let (prepend_listener''''' :
              t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
              fun (x247 : t) ->
                fun ~event:(x245 : [ `readable ]) ->
                  fun ~listener:(x246 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x247) "prependListener"
                         [|((match x245 with
                             | `readable -> Ojs.string_to_js "readable"));(
                           Ojs.fun_to_js 1 (fun _ -> x246 ()))|])
            let (prepend_listener'''''' :
              t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
              fun (x250 : t) ->
                fun ~event:(x248 : [ `resume ]) ->
                  fun ~listener:(x249 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x250) "prependListener"
                         [|((match x248 with
                             | `resume -> Ojs.string_to_js "resume"));(
                           Ojs.fun_to_js 1 (fun _ -> x249 ()))|])
            let (prepend_listener''''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x256 : t) ->
                fun ~event:(x251 : symbol or_string) ->
                  fun ~listener:(x253 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x256) "prependListener"
                         [|(or_string_to_js symbol_to_js x251);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x254 :
                                                                    _) ->
                                                                    x253
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x254 0)))|])
            let (prepend_once_listener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x259 : t) ->
                fun ~event:(x257 : [ `close ]) ->
                  fun ~listener:(x258 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x259) "prependOnceListener"
                         [|((match x257 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x258 ()))|])
            let (prepend_once_listener' :
              t -> event:[ `data ] -> listener:(chunk:any -> unit) -> t) =
              fun (x263 : t) ->
                fun ~event:(x260 : [ `data ]) ->
                  fun ~listener:(x261 : chunk:any -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x263) "prependOnceListener"
                         [|((match x260 with
                             | `data -> Ojs.string_to_js "data"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x262 :
                                                                    Ojs.t) ->
                                                                    x261
                                                                    ~chunk:(
                                                                    any_of_js
                                                                    x262)))|])
            let (prepend_once_listener'' :
              t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
              fun (x266 : t) ->
                fun ~event:(x264 : [ `end_ ]) ->
                  fun ~listener:(x265 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x266) "prependOnceListener"
                         [|((match x264 with
                             | `end_ -> Ojs.string_to_js "end"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x265 ()))|])
            let (prepend_once_listener''' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x270 : t) ->
                fun ~event:(x267 : [ `error ]) ->
                  fun ~listener:(x268 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x270) "prependOnceListener"
                         [|((match x267 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x269 : Ojs.t) ->
                                x268 ~err:(Error.t_of_js x269)))|])
            let (prepend_once_listener'''' :
              t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
              fun (x273 : t) ->
                fun ~event:(x271 : [ `pause ]) ->
                  fun ~listener:(x272 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x273) "prependOnceListener"
                         [|((match x271 with
                             | `pause -> Ojs.string_to_js "pause"));(
                           Ojs.fun_to_js 1 (fun _ -> x272 ()))|])
            let (prepend_once_listener''''' :
              t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
              fun (x276 : t) ->
                fun ~event:(x274 : [ `readable ]) ->
                  fun ~listener:(x275 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x276) "prependOnceListener"
                         [|((match x274 with
                             | `readable -> Ojs.string_to_js "readable"));(
                           Ojs.fun_to_js 1 (fun _ -> x275 ()))|])
            let (prepend_once_listener'''''' :
              t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
              fun (x279 : t) ->
                fun ~event:(x277 : [ `resume ]) ->
                  fun ~listener:(x278 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x279) "prependOnceListener"
                         [|((match x277 with
                             | `resume -> Ojs.string_to_js "resume"));(
                           Ojs.fun_to_js 1 (fun _ -> x278 ()))|])
            let (prepend_once_listener''''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x285 : t) ->
                fun ~event:(x280 : symbol or_string) ->
                  fun ~listener:(x282 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x285) "prependOnceListener"
                         [|(or_string_to_js symbol_to_js x280);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x283 :
                                                                    _) ->
                                                                    x282
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x283 0)))|])
            let (remove_listener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x288 : t) ->
                fun ~event:(x286 : [ `close ]) ->
                  fun ~listener:(x287 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x288) "removeListener"
                         [|((match x286 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x287 ()))|])
            let (remove_listener' :
              t -> event:[ `data ] -> listener:(chunk:any -> unit) -> t) =
              fun (x292 : t) ->
                fun ~event:(x289 : [ `data ]) ->
                  fun ~listener:(x290 : chunk:any -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x292) "removeListener"
                         [|((match x289 with
                             | `data -> Ojs.string_to_js "data"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x291 :
                                                                    Ojs.t) ->
                                                                    x290
                                                                    ~chunk:(
                                                                    any_of_js
                                                                    x291)))|])
            let (remove_listener'' :
              t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
              fun (x295 : t) ->
                fun ~event:(x293 : [ `end_ ]) ->
                  fun ~listener:(x294 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x295) "removeListener"
                         [|((match x293 with
                             | `end_ -> Ojs.string_to_js "end"));(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x294 ()))|])
            let (remove_listener''' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x299 : t) ->
                fun ~event:(x296 : [ `error ]) ->
                  fun ~listener:(x297 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x299) "removeListener"
                         [|((match x296 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x298 : Ojs.t) ->
                                x297 ~err:(Error.t_of_js x298)))|])
            let (remove_listener'''' :
              t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
              fun (x302 : t) ->
                fun ~event:(x300 : [ `pause ]) ->
                  fun ~listener:(x301 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x302) "removeListener"
                         [|((match x300 with
                             | `pause -> Ojs.string_to_js "pause"));(
                           Ojs.fun_to_js 1 (fun _ -> x301 ()))|])
            let (remove_listener''''' :
              t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
              fun (x305 : t) ->
                fun ~event:(x303 : [ `readable ]) ->
                  fun ~listener:(x304 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x305) "removeListener"
                         [|((match x303 with
                             | `readable -> Ojs.string_to_js "readable"));(
                           Ojs.fun_to_js 1 (fun _ -> x304 ()))|])
            let (remove_listener'''''' :
              t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
              fun (x308 : t) ->
                fun ~event:(x306 : [ `resume ]) ->
                  fun ~listener:(x307 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x308) "removeListener"
                         [|((match x306 with
                             | `resume -> Ojs.string_to_js "resume"));(
                           Ojs.fun_to_js 1 (fun _ -> x307 ()))|])
            let (remove_listener''''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x314 : t) ->
                fun ~event:(x309 : symbol or_string) ->
                  fun ~listener:(x311 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x314) "removeListener"
                         [|(or_string_to_js symbol_to_js x309);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x312 :
                                                                    _) ->
                                                                    x311
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x312 0)))|])
            let (cast : t -> Stream.t) =
              fun (x315 : t) -> Stream.t_of_js (t_to_js x315)
            let (cast' : t -> ReadableStream.t) =
              fun (x316 : t) -> ReadableStream.t_of_js (t_to_js x316)
          end
        module WritableOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x318 : Ojs.t) -> x318
            and t_to_js : t -> Ojs.t = fun (x317 : Ojs.t) -> x317
            let (get_high_water_mark : t -> int) =
              fun (x319 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x319) "highWaterMark")
            let (set_high_water_mark : t -> int -> unit) =
              fun (x320 : t) ->
                fun (x321 : int) ->
                  Ojs.set_prop_ascii (t_to_js x320) "highWaterMark"
                    (Ojs.int_to_js x321)
            let (get_decode_strings : t -> bool) =
              fun (x322 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x322) "decodeStrings")
            let (set_decode_strings : t -> bool -> unit) =
              fun (x323 : t) ->
                fun (x324 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x323) "decodeStrings"
                    (Ojs.bool_to_js x324)
            let (get_default_encoding : t -> BufferEncoding.t) =
              fun (x325 : t) ->
                BufferEncoding.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x325) "defaultEncoding")
            let (set_default_encoding : t -> BufferEncoding.t -> unit) =
              fun (x326 : t) ->
                fun (x327 : BufferEncoding.t) ->
                  Ojs.set_prop_ascii (t_to_js x326) "defaultEncoding"
                    (BufferEncoding.t_to_js x327)
            let (get_object_mode : t -> bool) =
              fun (x328 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x328) "objectMode")
            let (set_object_mode : t -> bool -> unit) =
              fun (x329 : t) ->
                fun (x330 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x329) "objectMode"
                    (Ojs.bool_to_js x330)
            let (get_emit_close : t -> bool) =
              fun (x331 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x331) "emitClose")
            let (set_emit_close : t -> bool -> unit) =
              fun (x332 : t) ->
                fun (x333 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x332) "emitClose"
                    (Ojs.bool_to_js x333)
            let (write :
              t ->
                this:stream ->
                  chunk:any ->
                    encoding:BufferEncoding.t ->
                      callback:(?error:Error.t or_null -> unit -> unit) ->
                        unit)
              =
              fun (x341 : t) ->
                fun ~this:(x334 : stream) ->
                  fun ~chunk:(x335 : any) ->
                    fun ~encoding:(x336 : BufferEncoding.t) ->
                      fun
                        ~callback:(x337 :
                                    ?error:Error.t or_null -> unit -> unit)
                        ->
                        ignore
                          (Ojs.call (t_to_js x341) "write"
                             [|(stream_to_js x334);(any_to_js x335);(
                               BufferEncoding.t_to_js x336);(Ojs.fun_to_js 1
                                                               (fun
                                                                  (x338 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x337
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x339 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x339)
                                                                    x338) ()))|])
            let (writev :
              t ->
                this:stream ->
                  chunks:AnonymousInterface0.t list ->
                    callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x349 : t) ->
                fun ~this:(x342 : stream) ->
                  fun ~chunks:(x343 : AnonymousInterface0.t list) ->
                    fun
                      ~callback:(x345 :
                                  ?error:Error.t or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x349) "writev"
                           [|(stream_to_js x342);(Ojs.list_to_js
                                                    AnonymousInterface0.t_to_js
                                                    x343);(Ojs.fun_to_js 1
                                                             (fun
                                                                (x346 :
                                                                  Ojs.t)
                                                                ->
                                                                x345
                                                                  ?error:(
                                                                  Ojs.option_of_js
                                                                    (
                                                                    fun
                                                                    (x347 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x347)
                                                                    x346) ()))|])
            let (destroy :
              t ->
                this:stream ->
                  error:Error.t or_null ->
                    callback:(error:Error.t or_null -> unit) -> unit)
              =
              fun (x356 : t) ->
                fun ~this:(x350 : stream) ->
                  fun ~error:(x351 : Error.t or_null) ->
                    fun ~callback:(x353 : error:Error.t or_null -> unit) ->
                      ignore
                        (Ojs.call (t_to_js x356) "destroy"
                           [|(stream_to_js x350);(or_null_to_js Error.t_to_js
                                                    x351);(Ojs.fun_to_js 1
                                                             (fun
                                                                (x354 :
                                                                  Ojs.t)
                                                                ->
                                                                x353
                                                                  ~error:(
                                                                  or_null_of_js
                                                                    Error.t_of_js
                                                                    x354)))|])
            let (final :
              t ->
                this:stream ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x362 : t) ->
                fun ~this:(x357 : stream) ->
                  fun
                    ~callback:(x358 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x362) "final"
                         [|(stream_to_js x357);(Ojs.fun_to_js 1
                                                  (fun (x359 : Ojs.t) ->
                                                     x358
                                                       ?error:(Ojs.option_of_js
                                                                 (fun
                                                                    (x360 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x360)
                                                                 x359) ()))|])
            let (get_auto_destroy : t -> bool) =
              fun (x363 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x363) "autoDestroy")
            let (set_auto_destroy : t -> bool -> unit) =
              fun (x364 : t) ->
                fun (x365 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x364) "autoDestroy"
                    (Ojs.bool_to_js x365)
          end
        module Writable =
          struct
            include struct include Stream end
            let (get_writable : t -> bool) =
              fun (x366 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x366) "writable")
            let (get_writable_ended : t -> bool) =
              fun (x367 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x367) "writableEnded")
            let (get_writable_finished : t -> bool) =
              fun (x368 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x368) "writableFinished")
            let (get_writable_high_water_mark : t -> int) =
              fun (x369 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x369) "writableHighWaterMark")
            let (get_writable_length : t -> int) =
              fun (x370 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x370) "writableLength")
            let (get_writable_object_mode : t -> bool) =
              fun (x371 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x371) "writableObjectMode")
            let (get_writable_corked : t -> int) =
              fun (x372 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x372) "writableCorked")
            let (get_destroyed : t -> bool) =
              fun (x373 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x373) "destroyed")
            let (set_destroyed : t -> bool -> unit) =
              fun (x374 : t) ->
                fun (x375 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x374) "destroyed"
                    (Ojs.bool_to_js x375)
            let (create : ?opts:WritableOptions.t -> unit -> t) =
              fun ?opts:(x376 : WritableOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "Writable")
                       (let x377 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x376 with
                         | Some x378 ->
                             ignore
                               (Ojs.call x377 "push"
                                  [|(WritableOptions.t_to_js x378)|])
                         | None -> ());
                        x377))
            let (_write :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t ->
                    callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x385 : t) ->
                fun ~chunk:(x379 : any) ->
                  fun ~encoding:(x380 : BufferEncoding.t) ->
                    fun
                      ~callback:(x381 :
                                  ?error:Error.t or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x385) "_write"
                           [|(any_to_js x379);(BufferEncoding.t_to_js x380);(
                             Ojs.fun_to_js 1
                               (fun (x382 : Ojs.t) ->
                                  x381
                                    ?error:(Ojs.option_of_js
                                              (fun (x383 : Ojs.t) ->
                                                 or_null_of_js Error.t_of_js
                                                   x383) x382) ()))|])
            let (_writev :
              t ->
                chunks:AnonymousInterface0.t list ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x392 : t) ->
                fun ~chunks:(x386 : AnonymousInterface0.t list) ->
                  fun
                    ~callback:(x388 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x392) "_writev"
                         [|(Ojs.list_to_js AnonymousInterface0.t_to_js x386);(
                           Ojs.fun_to_js 1
                             (fun (x389 : Ojs.t) ->
                                x388
                                  ?error:(Ojs.option_of_js
                                            (fun (x390 : Ojs.t) ->
                                               or_null_of_js Error.t_of_js
                                                 x390) x389) ()))|])
            let (_destroy :
              t ->
                error:Error.t or_null ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x399 : t) ->
                fun ~error:(x393 : Error.t or_null) ->
                  fun
                    ~callback:(x395 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x399) "_destroy"
                         [|(or_null_to_js Error.t_to_js x393);(Ojs.fun_to_js
                                                                 1
                                                                 (fun
                                                                    (x396 :
                                                                    Ojs.t) ->
                                                                    x395
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x397 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x397)
                                                                    x396) ()))|])
            let (_final :
              t -> callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x404 : t) ->
                fun ~callback:(x400 : ?error:Error.t or_null -> unit -> unit)
                  ->
                  ignore
                    (Ojs.call (t_to_js x404) "_final"
                       [|(Ojs.fun_to_js 1
                            (fun (x401 : Ojs.t) ->
                               x400
                                 ?error:(Ojs.option_of_js
                                           (fun (x402 : Ojs.t) ->
                                              or_null_of_js Error.t_of_js
                                                x402) x401) ()))|])
            let (write :
              t ->
                chunk:any ->
                  ?cb:(error:Error.t or_null_or_undefined -> unit) ->
                    unit -> bool)
              =
              fun (x411 : t) ->
                fun ~chunk:(x405 : any) ->
                  fun
                    ?cb:(x406 :
                          (error:Error.t or_null_or_undefined -> unit) option)
                    ->
                    fun () ->
                      Ojs.bool_of_js
                        (let x412 = t_to_js x411 in
                         Ojs.call (Ojs.get_prop_ascii x412 "write") "apply"
                           [|x412;((let x407 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x407 "push"
                                         [|(any_to_js x405)|]);
                                    (match x406 with
                                     | Some x408 ->
                                         ignore
                                           (Ojs.call x407 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun (x409 : Ojs.t) ->
                                                      x408
                                                        ~error:(or_null_or_undefined_of_js
                                                                  Error.t_of_js
                                                                  x409)))|])
                                     | None -> ());
                                    x407))|])
            let (write' :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t ->
                    ?cb:(error:Error.t or_null_or_undefined -> unit) ->
                      unit -> bool)
              =
              fun (x420 : t) ->
                fun ~chunk:(x413 : any) ->
                  fun ~encoding:(x414 : BufferEncoding.t) ->
                    fun
                      ?cb:(x415 :
                            (error:Error.t or_null_or_undefined -> unit)
                              option)
                      ->
                      fun () ->
                        Ojs.bool_of_js
                          (let x421 = t_to_js x420 in
                           Ojs.call (Ojs.get_prop_ascii x421 "write") "apply"
                             [|x421;((let x416 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x416 "push"
                                           [|(any_to_js x413)|]);
                                      ignore
                                        (Ojs.call x416 "push"
                                           [|(BufferEncoding.t_to_js x414)|]);
                                      (match x415 with
                                       | Some x417 ->
                                           ignore
                                             (Ojs.call x416 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun (x418 : Ojs.t) ->
                                                        x417
                                                          ~error:(or_null_or_undefined_of_js
                                                                    Error.t_of_js
                                                                    x418)))|])
                                       | None -> ());
                                      x416))|])
            let (set_default_encoding : t -> encoding:BufferEncoding.t -> t)
              =
              fun (x423 : t) ->
                fun ~encoding:(x422 : BufferEncoding.t) ->
                  t_of_js
                    (Ojs.call (t_to_js x423) "setDefaultEncoding"
                       [|(BufferEncoding.t_to_js x422)|])
            let (end_ : t -> ?cb:(unit -> unit) -> unit -> unit) =
              fun (x427 : t) ->
                fun ?cb:(x424 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x428 = t_to_js x427 in
                       Ojs.call (Ojs.get_prop_ascii x428 "end") "apply"
                         [|x428;((let x425 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x424 with
                                   | Some x426 ->
                                       ignore
                                         (Ojs.call x425 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x426 ()))|])
                                   | None -> ());
                                  x425))|])
            let (end_' :
              t -> chunk:any -> ?cb:(unit -> unit) -> unit -> unit) =
              fun (x433 : t) ->
                fun ~chunk:(x429 : any) ->
                  fun ?cb:(x430 : (unit -> unit) option) ->
                    fun () ->
                      ignore
                        (let x434 = t_to_js x433 in
                         Ojs.call (Ojs.get_prop_ascii x434 "end") "apply"
                           [|x434;((let x431 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x431 "push"
                                         [|(any_to_js x429)|]);
                                    (match x430 with
                                     | Some x432 ->
                                         ignore
                                           (Ojs.call x431 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun _ -> x432 ()))|])
                                     | None -> ());
                                    x431))|])
            let (end_'' :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t ->
                    ?cb:(unit -> unit) -> unit -> unit)
              =
              fun (x440 : t) ->
                fun ~chunk:(x435 : any) ->
                  fun ~encoding:(x436 : BufferEncoding.t) ->
                    fun ?cb:(x437 : (unit -> unit) option) ->
                      fun () ->
                        ignore
                          (let x441 = t_to_js x440 in
                           Ojs.call (Ojs.get_prop_ascii x441 "end") "apply"
                             [|x441;((let x438 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x438 "push"
                                           [|(any_to_js x435)|]);
                                      ignore
                                        (Ojs.call x438 "push"
                                           [|(BufferEncoding.t_to_js x436)|]);
                                      (match x437 with
                                       | Some x439 ->
                                           ignore
                                             (Ojs.call x438 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun _ -> x439 ()))|])
                                       | None -> ());
                                      x438))|])
            let (cork : t -> unit) =
              fun (x442 : t) -> ignore (Ojs.call (t_to_js x442) "cork" [||])
            let (uncork : t -> unit) =
              fun (x443 : t) ->
                ignore (Ojs.call (t_to_js x443) "uncork" [||])
            let (destroy : t -> ?error:Error.t -> unit -> unit) =
              fun (x447 : t) ->
                fun ?error:(x444 : Error.t option) ->
                  fun () ->
                    ignore
                      (let x448 = t_to_js x447 in
                       Ojs.call (Ojs.get_prop_ascii x448 "destroy") "apply"
                         [|x448;((let x445 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x444 with
                                   | Some x446 ->
                                       ignore
                                         (Ojs.call x445 "push"
                                            [|(Error.t_to_js x446)|])
                                   | None -> ());
                                  x445))|])
            let (add_listener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x451 : t) ->
                fun ~event:(x449 : [ `close ]) ->
                  fun ~listener:(x450 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x451) "addListener"
                         [|((match x449 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x450 ()))|])
            let (add_listener' :
              t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
              fun (x454 : t) ->
                fun ~event:(x452 : [ `drain ]) ->
                  fun ~listener:(x453 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x454) "addListener"
                         [|((match x452 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x453 ()))|])
            let (add_listener'' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x458 : t) ->
                fun ~event:(x455 : [ `error ]) ->
                  fun ~listener:(x456 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x458) "addListener"
                         [|((match x455 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x457 : Ojs.t) ->
                                x456 ~err:(Error.t_of_js x457)))|])
            let (add_listener''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x461 : t) ->
                fun ~event:(x459 : [ `finish ]) ->
                  fun ~listener:(x460 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x461) "addListener"
                         [|((match x459 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x460 ()))|])
            let (add_listener'''' :
              t -> event:[ `pipe ] -> listener:(src:Readable.t -> unit) -> t)
              =
              fun (x465 : t) ->
                fun ~event:(x462 : [ `pipe ]) ->
                  fun ~listener:(x463 : src:Readable.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x465) "addListener"
                         [|((match x462 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x464 :
                                                                    Ojs.t) ->
                                                                    x463
                                                                    ~src:(
                                                                    Readable.t_of_js
                                                                    x464)))|])
            let (add_listener''''' :
              t ->
                event:[ `unpipe ] -> listener:(src:Readable.t -> unit) -> t)
              =
              fun (x469 : t) ->
                fun ~event:(x466 : [ `unpipe ]) ->
                  fun ~listener:(x467 : src:Readable.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x469) "addListener"
                         [|((match x466 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x468 : Ojs.t) ->
                                x467 ~src:(Readable.t_of_js x468)))|])
            let (add_listener'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x475 : t) ->
                fun ~event:(x470 : symbol or_string) ->
                  fun ~listener:(x472 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x475) "addListener"
                         [|(or_string_to_js symbol_to_js x470);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x473 :
                                                                    _) ->
                                                                    x472
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x473 0)))|])
            let (emit : t -> event:[ `close ] -> bool) =
              fun (x477 : t) ->
                fun ~event:(x476 : [ `close ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x477) "emit"
                       [|((match x476 with
                           | `close -> Ojs.string_to_js "close"))|])
            let (emit' : t -> event:[ `drain ] -> bool) =
              fun (x479 : t) ->
                fun ~event:(x478 : [ `drain ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x479) "emit"
                       [|((match x478 with
                           | `drain -> Ojs.string_to_js "drain"))|])
            let (emit'' : t -> event:[ `error ] -> err:Error.t -> bool) =
              fun (x482 : t) ->
                fun ~event:(x480 : [ `error ]) ->
                  fun ~err:(x481 : Error.t) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x482) "emit"
                         [|((match x480 with
                             | `error -> Ojs.string_to_js "error"));(
                           Error.t_to_js x481)|])
            let (emit''' : t -> event:[ `finish ] -> bool) =
              fun (x484 : t) ->
                fun ~event:(x483 : [ `finish ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x484) "emit"
                       [|((match x483 with
                           | `finish -> Ojs.string_to_js "finish"))|])
            let (emit'''' : t -> event:[ `pipe ] -> src:Readable.t -> bool) =
              fun (x487 : t) ->
                fun ~event:(x485 : [ `pipe ]) ->
                  fun ~src:(x486 : Readable.t) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x487) "emit"
                         [|((match x485 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Readable.t_to_js
                                                                    x486)|])
            let (emit''''' :
              t -> event:[ `unpipe ] -> src:Readable.t -> bool) =
              fun (x490 : t) ->
                fun ~event:(x488 : [ `unpipe ]) ->
                  fun ~src:(x489 : Readable.t) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x490) "emit"
                         [|((match x488 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Readable.t_to_js x489)|])
            let (emit'''''' :
              t -> event:symbol or_string -> args:any list -> bool) =
              fun (x496 : t) ->
                fun ~event:(x491 : symbol or_string) ->
                  fun ~args:(x492 : any list) ->
                    Ojs.bool_of_js
                      (let x497 = t_to_js x496 in
                       Ojs.call (Ojs.get_prop_ascii x497 "emit") "apply"
                         [|x497;((let x493 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x493 "push"
                                       [|(or_string_to_js symbol_to_js x491)|]);
                                  List.iter
                                    (fun (x494 : any) ->
                                       ignore
                                         (Ojs.call x493 "push"
                                            [|(any_to_js x494)|])) x492;
                                  x493))|])
            let (on : t -> event:[ `close ] -> listener:(unit -> unit) -> t)
              =
              fun (x500 : t) ->
                fun ~event:(x498 : [ `close ]) ->
                  fun ~listener:(x499 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x500) "on"
                         [|((match x498 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x499 ()))|])
            let (on' : t -> event:[ `drain ] -> listener:(unit -> unit) -> t)
              =
              fun (x503 : t) ->
                fun ~event:(x501 : [ `drain ]) ->
                  fun ~listener:(x502 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x503) "on"
                         [|((match x501 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x502 ()))|])
            let (on'' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x507 : t) ->
                fun ~event:(x504 : [ `error ]) ->
                  fun ~listener:(x505 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x507) "on"
                         [|((match x504 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x506 : Ojs.t) ->
                                x505 ~err:(Error.t_of_js x506)))|])
            let (on''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x510 : t) ->
                fun ~event:(x508 : [ `finish ]) ->
                  fun ~listener:(x509 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x510) "on"
                         [|((match x508 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x509 ()))|])
            let (on'''' :
              t -> event:[ `pipe ] -> listener:(src:Readable.t -> unit) -> t)
              =
              fun (x514 : t) ->
                fun ~event:(x511 : [ `pipe ]) ->
                  fun ~listener:(x512 : src:Readable.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x514) "on"
                         [|((match x511 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x513 :
                                                                    Ojs.t) ->
                                                                    x512
                                                                    ~src:(
                                                                    Readable.t_of_js
                                                                    x513)))|])
            let (on''''' :
              t ->
                event:[ `unpipe ] -> listener:(src:Readable.t -> unit) -> t)
              =
              fun (x518 : t) ->
                fun ~event:(x515 : [ `unpipe ]) ->
                  fun ~listener:(x516 : src:Readable.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x518) "on"
                         [|((match x515 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x517 : Ojs.t) ->
                                x516 ~src:(Readable.t_of_js x517)))|])
            let (on'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x524 : t) ->
                fun ~event:(x519 : symbol or_string) ->
                  fun ~listener:(x521 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x524) "on"
                         [|(or_string_to_js symbol_to_js x519);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x522 :
                                                                    _) ->
                                                                    x521
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x522 0)))|])
            let (once :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x527 : t) ->
                fun ~event:(x525 : [ `close ]) ->
                  fun ~listener:(x526 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x527) "once"
                         [|((match x525 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x526 ()))|])
            let (once' :
              t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
              fun (x530 : t) ->
                fun ~event:(x528 : [ `drain ]) ->
                  fun ~listener:(x529 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x530) "once"
                         [|((match x528 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x529 ()))|])
            let (once'' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x534 : t) ->
                fun ~event:(x531 : [ `error ]) ->
                  fun ~listener:(x532 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x534) "once"
                         [|((match x531 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x533 : Ojs.t) ->
                                x532 ~err:(Error.t_of_js x533)))|])
            let (once''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x537 : t) ->
                fun ~event:(x535 : [ `finish ]) ->
                  fun ~listener:(x536 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x537) "once"
                         [|((match x535 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x536 ()))|])
            let (once'''' :
              t -> event:[ `pipe ] -> listener:(src:Readable.t -> unit) -> t)
              =
              fun (x541 : t) ->
                fun ~event:(x538 : [ `pipe ]) ->
                  fun ~listener:(x539 : src:Readable.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x541) "once"
                         [|((match x538 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x540 :
                                                                    Ojs.t) ->
                                                                    x539
                                                                    ~src:(
                                                                    Readable.t_of_js
                                                                    x540)))|])
            let (once''''' :
              t ->
                event:[ `unpipe ] -> listener:(src:Readable.t -> unit) -> t)
              =
              fun (x545 : t) ->
                fun ~event:(x542 : [ `unpipe ]) ->
                  fun ~listener:(x543 : src:Readable.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x545) "once"
                         [|((match x542 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x544 : Ojs.t) ->
                                x543 ~src:(Readable.t_of_js x544)))|])
            let (once'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x551 : t) ->
                fun ~event:(x546 : symbol or_string) ->
                  fun ~listener:(x548 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x551) "once"
                         [|(or_string_to_js symbol_to_js x546);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x549 :
                                                                    _) ->
                                                                    x548
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x549 0)))|])
            let (prepend_listener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x554 : t) ->
                fun ~event:(x552 : [ `close ]) ->
                  fun ~listener:(x553 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x554) "prependListener"
                         [|((match x552 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x553 ()))|])
            let (prepend_listener' :
              t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
              fun (x557 : t) ->
                fun ~event:(x555 : [ `drain ]) ->
                  fun ~listener:(x556 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x557) "prependListener"
                         [|((match x555 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x556 ()))|])
            let (prepend_listener'' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x561 : t) ->
                fun ~event:(x558 : [ `error ]) ->
                  fun ~listener:(x559 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x561) "prependListener"
                         [|((match x558 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x560 : Ojs.t) ->
                                x559 ~err:(Error.t_of_js x560)))|])
            let (prepend_listener''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x564 : t) ->
                fun ~event:(x562 : [ `finish ]) ->
                  fun ~listener:(x563 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x564) "prependListener"
                         [|((match x562 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x563 ()))|])
            let (prepend_listener'''' :
              t -> event:[ `pipe ] -> listener:(src:Readable.t -> unit) -> t)
              =
              fun (x568 : t) ->
                fun ~event:(x565 : [ `pipe ]) ->
                  fun ~listener:(x566 : src:Readable.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x568) "prependListener"
                         [|((match x565 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x567 :
                                                                    Ojs.t) ->
                                                                    x566
                                                                    ~src:(
                                                                    Readable.t_of_js
                                                                    x567)))|])
            let (prepend_listener''''' :
              t ->
                event:[ `unpipe ] -> listener:(src:Readable.t -> unit) -> t)
              =
              fun (x572 : t) ->
                fun ~event:(x569 : [ `unpipe ]) ->
                  fun ~listener:(x570 : src:Readable.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x572) "prependListener"
                         [|((match x569 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x571 : Ojs.t) ->
                                x570 ~src:(Readable.t_of_js x571)))|])
            let (prepend_listener'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x578 : t) ->
                fun ~event:(x573 : symbol or_string) ->
                  fun ~listener:(x575 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x578) "prependListener"
                         [|(or_string_to_js symbol_to_js x573);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x576 :
                                                                    _) ->
                                                                    x575
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x576 0)))|])
            let (prepend_once_listener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x581 : t) ->
                fun ~event:(x579 : [ `close ]) ->
                  fun ~listener:(x580 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x581) "prependOnceListener"
                         [|((match x579 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x580 ()))|])
            let (prepend_once_listener' :
              t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
              fun (x584 : t) ->
                fun ~event:(x582 : [ `drain ]) ->
                  fun ~listener:(x583 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x584) "prependOnceListener"
                         [|((match x582 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x583 ()))|])
            let (prepend_once_listener'' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x588 : t) ->
                fun ~event:(x585 : [ `error ]) ->
                  fun ~listener:(x586 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x588) "prependOnceListener"
                         [|((match x585 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x587 : Ojs.t) ->
                                x586 ~err:(Error.t_of_js x587)))|])
            let (prepend_once_listener''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x591 : t) ->
                fun ~event:(x589 : [ `finish ]) ->
                  fun ~listener:(x590 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x591) "prependOnceListener"
                         [|((match x589 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x590 ()))|])
            let (prepend_once_listener'''' :
              t -> event:[ `pipe ] -> listener:(src:Readable.t -> unit) -> t)
              =
              fun (x595 : t) ->
                fun ~event:(x592 : [ `pipe ]) ->
                  fun ~listener:(x593 : src:Readable.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x595) "prependOnceListener"
                         [|((match x592 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x594 :
                                                                    Ojs.t) ->
                                                                    x593
                                                                    ~src:(
                                                                    Readable.t_of_js
                                                                    x594)))|])
            let (prepend_once_listener''''' :
              t ->
                event:[ `unpipe ] -> listener:(src:Readable.t -> unit) -> t)
              =
              fun (x599 : t) ->
                fun ~event:(x596 : [ `unpipe ]) ->
                  fun ~listener:(x597 : src:Readable.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x599) "prependOnceListener"
                         [|((match x596 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x598 : Ojs.t) ->
                                x597 ~src:(Readable.t_of_js x598)))|])
            let (prepend_once_listener'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x605 : t) ->
                fun ~event:(x600 : symbol or_string) ->
                  fun ~listener:(x602 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x605) "prependOnceListener"
                         [|(or_string_to_js symbol_to_js x600);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x603 :
                                                                    _) ->
                                                                    x602
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x603 0)))|])
            let (remove_listener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x608 : t) ->
                fun ~event:(x606 : [ `close ]) ->
                  fun ~listener:(x607 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x608) "removeListener"
                         [|((match x606 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x607 ()))|])
            let (remove_listener' :
              t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
              fun (x611 : t) ->
                fun ~event:(x609 : [ `drain ]) ->
                  fun ~listener:(x610 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x611) "removeListener"
                         [|((match x609 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x610 ()))|])
            let (remove_listener'' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x615 : t) ->
                fun ~event:(x612 : [ `error ]) ->
                  fun ~listener:(x613 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x615) "removeListener"
                         [|((match x612 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x614 : Ojs.t) ->
                                x613 ~err:(Error.t_of_js x614)))|])
            let (remove_listener''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x618 : t) ->
                fun ~event:(x616 : [ `finish ]) ->
                  fun ~listener:(x617 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x618) "removeListener"
                         [|((match x616 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x617 ()))|])
            let (remove_listener'''' :
              t -> event:[ `pipe ] -> listener:(src:Readable.t -> unit) -> t)
              =
              fun (x622 : t) ->
                fun ~event:(x619 : [ `pipe ]) ->
                  fun ~listener:(x620 : src:Readable.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x622) "removeListener"
                         [|((match x619 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x621 :
                                                                    Ojs.t) ->
                                                                    x620
                                                                    ~src:(
                                                                    Readable.t_of_js
                                                                    x621)))|])
            let (remove_listener''''' :
              t ->
                event:[ `unpipe ] -> listener:(src:Readable.t -> unit) -> t)
              =
              fun (x626 : t) ->
                fun ~event:(x623 : [ `unpipe ]) ->
                  fun ~listener:(x624 : src:Readable.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x626) "removeListener"
                         [|((match x623 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x625 : Ojs.t) ->
                                x624 ~src:(Readable.t_of_js x625)))|])
            let (remove_listener'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x632 : t) ->
                fun ~event:(x627 : symbol or_string) ->
                  fun ~listener:(x629 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x632) "removeListener"
                         [|(or_string_to_js symbol_to_js x627);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x630 :
                                                                    _) ->
                                                                    x629
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x630 0)))|])
            let (cast : t -> Stream.t) =
              fun (x633 : t) -> Stream.t_of_js (t_to_js x633)
            let (cast' : t -> WritableStream.t) =
              fun (x634 : t) -> WritableStream.t_of_js (t_to_js x634)
          end
        module DuplexOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x636 : Ojs.t) -> x636
            and t_to_js : t -> Ojs.t = fun (x635 : Ojs.t) -> x635
            let (get_allow_half_open : t -> bool) =
              fun (x637 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x637) "allowHalfOpen")
            let (set_allow_half_open : t -> bool -> unit) =
              fun (x638 : t) ->
                fun (x639 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x638) "allowHalfOpen"
                    (Ojs.bool_to_js x639)
            let (get_readable_object_mode : t -> bool) =
              fun (x640 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x640) "readableObjectMode")
            let (set_readable_object_mode : t -> bool -> unit) =
              fun (x641 : t) ->
                fun (x642 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x641) "readableObjectMode"
                    (Ojs.bool_to_js x642)
            let (get_writable_object_mode : t -> bool) =
              fun (x643 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x643) "writableObjectMode")
            let (set_writable_object_mode : t -> bool -> unit) =
              fun (x644 : t) ->
                fun (x645 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x644) "writableObjectMode"
                    (Ojs.bool_to_js x645)
            let (get_readable_high_water_mark : t -> int) =
              fun (x646 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x646) "readableHighWaterMark")
            let (set_readable_high_water_mark : t -> int -> unit) =
              fun (x647 : t) ->
                fun (x648 : int) ->
                  Ojs.set_prop_ascii (t_to_js x647) "readableHighWaterMark"
                    (Ojs.int_to_js x648)
            let (get_writable_high_water_mark : t -> int) =
              fun (x649 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x649) "writableHighWaterMark")
            let (set_writable_high_water_mark : t -> int -> unit) =
              fun (x650 : t) ->
                fun (x651 : int) ->
                  Ojs.set_prop_ascii (t_to_js x650) "writableHighWaterMark"
                    (Ojs.int_to_js x651)
            let (get_writable_corked : t -> int) =
              fun (x652 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x652) "writableCorked")
            let (set_writable_corked : t -> int -> unit) =
              fun (x653 : t) ->
                fun (x654 : int) ->
                  Ojs.set_prop_ascii (t_to_js x653) "writableCorked"
                    (Ojs.int_to_js x654)
            let (read : t -> this:stream -> size:int -> unit) =
              fun (x657 : t) ->
                fun ~this:(x655 : stream) ->
                  fun ~size:(x656 : int) ->
                    ignore
                      (Ojs.call (t_to_js x657) "read"
                         [|(stream_to_js x655);(Ojs.int_to_js x656)|])
            let (write :
              t ->
                this:stream ->
                  chunk:any ->
                    encoding:BufferEncoding.t ->
                      callback:(?error:Error.t or_null -> unit -> unit) ->
                        unit)
              =
              fun (x665 : t) ->
                fun ~this:(x658 : stream) ->
                  fun ~chunk:(x659 : any) ->
                    fun ~encoding:(x660 : BufferEncoding.t) ->
                      fun
                        ~callback:(x661 :
                                    ?error:Error.t or_null -> unit -> unit)
                        ->
                        ignore
                          (Ojs.call (t_to_js x665) "write"
                             [|(stream_to_js x658);(any_to_js x659);(
                               BufferEncoding.t_to_js x660);(Ojs.fun_to_js 1
                                                               (fun
                                                                  (x662 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x661
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x663 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x663)
                                                                    x662) ()))|])
            let (writev :
              t ->
                this:stream ->
                  chunks:AnonymousInterface0.t list ->
                    callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x673 : t) ->
                fun ~this:(x666 : stream) ->
                  fun ~chunks:(x667 : AnonymousInterface0.t list) ->
                    fun
                      ~callback:(x669 :
                                  ?error:Error.t or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x673) "writev"
                           [|(stream_to_js x666);(Ojs.list_to_js
                                                    AnonymousInterface0.t_to_js
                                                    x667);(Ojs.fun_to_js 1
                                                             (fun
                                                                (x670 :
                                                                  Ojs.t)
                                                                ->
                                                                x669
                                                                  ?error:(
                                                                  Ojs.option_of_js
                                                                    (
                                                                    fun
                                                                    (x671 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x671)
                                                                    x670) ()))|])
            let (final :
              t ->
                this:stream ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x679 : t) ->
                fun ~this:(x674 : stream) ->
                  fun
                    ~callback:(x675 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x679) "final"
                         [|(stream_to_js x674);(Ojs.fun_to_js 1
                                                  (fun (x676 : Ojs.t) ->
                                                     x675
                                                       ?error:(Ojs.option_of_js
                                                                 (fun
                                                                    (x677 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x677)
                                                                 x676) ()))|])
            let (destroy :
              t ->
                this:stream ->
                  error:Error.t or_null ->
                    callback:(error:Error.t or_null -> unit) -> unit)
              =
              fun (x686 : t) ->
                fun ~this:(x680 : stream) ->
                  fun ~error:(x681 : Error.t or_null) ->
                    fun ~callback:(x683 : error:Error.t or_null -> unit) ->
                      ignore
                        (Ojs.call (t_to_js x686) "destroy"
                           [|(stream_to_js x680);(or_null_to_js Error.t_to_js
                                                    x681);(Ojs.fun_to_js 1
                                                             (fun
                                                                (x684 :
                                                                  Ojs.t)
                                                                ->
                                                                x683
                                                                  ~error:(
                                                                  or_null_of_js
                                                                    Error.t_of_js
                                                                    x684)))|])
            let (cast : t -> ReadableOptions.t) =
              fun (x687 : t) -> ReadableOptions.t_of_js (t_to_js x687)
            let (cast' : t -> WritableOptions.t) =
              fun (x688 : t) -> WritableOptions.t_of_js (t_to_js x688)
          end
        module Duplex =
          struct
            include struct include Stream end
            let (get_writable : t -> bool) =
              fun (x689 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x689) "writable")
            let (get_writable_ended : t -> bool) =
              fun (x690 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x690) "writableEnded")
            let (get_writable_finished : t -> bool) =
              fun (x691 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x691) "writableFinished")
            let (get_writable_high_water_mark : t -> int) =
              fun (x692 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x692) "writableHighWaterMark")
            let (get_writable_length : t -> int) =
              fun (x693 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x693) "writableLength")
            let (get_writable_object_mode : t -> bool) =
              fun (x694 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x694) "writableObjectMode")
            let (get_writable_corked : t -> int) =
              fun (x695 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x695) "writableCorked")
            let (create : ?opts:DuplexOptions.t -> unit -> t) =
              fun ?opts:(x696 : DuplexOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "Duplex")
                       (let x697 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x696 with
                         | Some x698 ->
                             ignore
                               (Ojs.call x697 "push"
                                  [|(DuplexOptions.t_to_js x698)|])
                         | None -> ());
                        x697))
            let (_write :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t ->
                    callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x705 : t) ->
                fun ~chunk:(x699 : any) ->
                  fun ~encoding:(x700 : BufferEncoding.t) ->
                    fun
                      ~callback:(x701 :
                                  ?error:Error.t or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x705) "_write"
                           [|(any_to_js x699);(BufferEncoding.t_to_js x700);(
                             Ojs.fun_to_js 1
                               (fun (x702 : Ojs.t) ->
                                  x701
                                    ?error:(Ojs.option_of_js
                                              (fun (x703 : Ojs.t) ->
                                                 or_null_of_js Error.t_of_js
                                                   x703) x702) ()))|])
            let (_writev :
              t ->
                chunks:AnonymousInterface0.t list ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x712 : t) ->
                fun ~chunks:(x706 : AnonymousInterface0.t list) ->
                  fun
                    ~callback:(x708 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x712) "_writev"
                         [|(Ojs.list_to_js AnonymousInterface0.t_to_js x706);(
                           Ojs.fun_to_js 1
                             (fun (x709 : Ojs.t) ->
                                x708
                                  ?error:(Ojs.option_of_js
                                            (fun (x710 : Ojs.t) ->
                                               or_null_of_js Error.t_of_js
                                                 x710) x709) ()))|])
            let (_destroy :
              t ->
                error:Error.t or_null ->
                  callback:(error:Error.t or_null -> unit) -> unit)
              =
              fun (x718 : t) ->
                fun ~error:(x713 : Error.t or_null) ->
                  fun ~callback:(x715 : error:Error.t or_null -> unit) ->
                    ignore
                      (Ojs.call (t_to_js x718) "_destroy"
                         [|(or_null_to_js Error.t_to_js x713);(Ojs.fun_to_js
                                                                 1
                                                                 (fun
                                                                    (x716 :
                                                                    Ojs.t) ->
                                                                    x715
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x716)))|])
            let (_final :
              t -> callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x723 : t) ->
                fun ~callback:(x719 : ?error:Error.t or_null -> unit -> unit)
                  ->
                  ignore
                    (Ojs.call (t_to_js x723) "_final"
                       [|(Ojs.fun_to_js 1
                            (fun (x720 : Ojs.t) ->
                               x719
                                 ?error:(Ojs.option_of_js
                                           (fun (x721 : Ojs.t) ->
                                              or_null_of_js Error.t_of_js
                                                x721) x720) ()))|])
            let (write :
              t ->
                chunk:any ->
                  ?encoding:BufferEncoding.t ->
                    ?cb:(error:Error.t or_null_or_undefined -> unit) ->
                      unit -> bool)
              =
              fun (x732 : t) ->
                fun ~chunk:(x724 : any) ->
                  fun ?encoding:(x725 : BufferEncoding.t option) ->
                    fun
                      ?cb:(x726 :
                            (error:Error.t or_null_or_undefined -> unit)
                              option)
                      ->
                      fun () ->
                        Ojs.bool_of_js
                          (let x733 = t_to_js x732 in
                           Ojs.call (Ojs.get_prop_ascii x733 "write") "apply"
                             [|x733;((let x727 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x727 "push"
                                           [|(any_to_js x724)|]);
                                      (match x725 with
                                       | Some x731 ->
                                           ignore
                                             (Ojs.call x727 "push"
                                                [|(BufferEncoding.t_to_js
                                                     x731)|])
                                       | None -> ());
                                      (match x726 with
                                       | Some x728 ->
                                           ignore
                                             (Ojs.call x727 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun (x729 : Ojs.t) ->
                                                        x728
                                                          ~error:(or_null_or_undefined_of_js
                                                                    Error.t_of_js
                                                                    x729)))|])
                                       | None -> ());
                                      x727))|])
            let (write' :
              t ->
                chunk:any ->
                  ?cb:(error:Error.t or_null_or_undefined -> unit) ->
                    unit -> bool)
              =
              fun (x740 : t) ->
                fun ~chunk:(x734 : any) ->
                  fun
                    ?cb:(x735 :
                          (error:Error.t or_null_or_undefined -> unit) option)
                    ->
                    fun () ->
                      Ojs.bool_of_js
                        (let x741 = t_to_js x740 in
                         Ojs.call (Ojs.get_prop_ascii x741 "write") "apply"
                           [|x741;((let x736 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x736 "push"
                                         [|(any_to_js x734)|]);
                                    (match x735 with
                                     | Some x737 ->
                                         ignore
                                           (Ojs.call x736 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun (x738 : Ojs.t) ->
                                                      x737
                                                        ~error:(or_null_or_undefined_of_js
                                                                  Error.t_of_js
                                                                  x738)))|])
                                     | None -> ());
                                    x736))|])
            let (set_default_encoding : t -> encoding:BufferEncoding.t -> t)
              =
              fun (x743 : t) ->
                fun ~encoding:(x742 : BufferEncoding.t) ->
                  t_of_js
                    (Ojs.call (t_to_js x743) "setDefaultEncoding"
                       [|(BufferEncoding.t_to_js x742)|])
            let (end_ : t -> ?cb:(unit -> unit) -> unit -> unit) =
              fun (x747 : t) ->
                fun ?cb:(x744 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x748 = t_to_js x747 in
                       Ojs.call (Ojs.get_prop_ascii x748 "end") "apply"
                         [|x748;((let x745 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x744 with
                                   | Some x746 ->
                                       ignore
                                         (Ojs.call x745 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x746 ()))|])
                                   | None -> ());
                                  x745))|])
            let (end_' :
              t -> chunk:any -> ?cb:(unit -> unit) -> unit -> unit) =
              fun (x753 : t) ->
                fun ~chunk:(x749 : any) ->
                  fun ?cb:(x750 : (unit -> unit) option) ->
                    fun () ->
                      ignore
                        (let x754 = t_to_js x753 in
                         Ojs.call (Ojs.get_prop_ascii x754 "end") "apply"
                           [|x754;((let x751 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x751 "push"
                                         [|(any_to_js x749)|]);
                                    (match x750 with
                                     | Some x752 ->
                                         ignore
                                           (Ojs.call x751 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun _ -> x752 ()))|])
                                     | None -> ());
                                    x751))|])
            let (end_'' :
              t ->
                chunk:any ->
                  ?encoding:BufferEncoding.t ->
                    ?cb:(unit -> unit) -> unit -> unit)
              =
              fun (x761 : t) ->
                fun ~chunk:(x755 : any) ->
                  fun ?encoding:(x756 : BufferEncoding.t option) ->
                    fun ?cb:(x757 : (unit -> unit) option) ->
                      fun () ->
                        ignore
                          (let x762 = t_to_js x761 in
                           Ojs.call (Ojs.get_prop_ascii x762 "end") "apply"
                             [|x762;((let x758 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x758 "push"
                                           [|(any_to_js x755)|]);
                                      (match x756 with
                                       | Some x760 ->
                                           ignore
                                             (Ojs.call x758 "push"
                                                [|(BufferEncoding.t_to_js
                                                     x760)|])
                                       | None -> ());
                                      (match x757 with
                                       | Some x759 ->
                                           ignore
                                             (Ojs.call x758 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun _ -> x759 ()))|])
                                       | None -> ());
                                      x758))|])
            let (cork : t -> unit) =
              fun (x763 : t) -> ignore (Ojs.call (t_to_js x763) "cork" [||])
            let (uncork : t -> unit) =
              fun (x764 : t) ->
                ignore (Ojs.call (t_to_js x764) "uncork" [||])
            let (cast : t -> Readable.t) =
              fun (x765 : t) -> Readable.t_of_js (t_to_js x765)
            let (cast' : t -> Writable.t) =
              fun (x766 : t) -> Writable.t_of_js (t_to_js x766)
          end
        module TransformCallback =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x768 : Ojs.t) -> x768
            and t_to_js : t -> Ojs.t = fun (x767 : Ojs.t) -> x767
            let (apply :
              t -> ?error:Error.t or_null -> ?data:any -> unit -> unit) =
              fun (x775 : t) ->
                fun ?error:(x769 : Error.t or_null option) ->
                  fun ?data:(x770 : any option) ->
                    fun () ->
                      ignore
                        (Ojs.call (t_to_js x775) "apply"
                           [|Ojs.null;((let x771 =
                                          Ojs.new_obj
                                            (Ojs.get_prop_ascii Ojs.global
                                               "Array") [||] in
                                        (match x769 with
                                         | Some x773 ->
                                             ignore
                                               (Ojs.call x771 "push"
                                                  [|(or_null_to_js
                                                       Error.t_to_js x773)|])
                                         | None -> ());
                                        (match x770 with
                                         | Some x772 ->
                                             ignore
                                               (Ojs.call x771 "push"
                                                  [|(any_to_js x772)|])
                                         | None -> ());
                                        x771))|])
          end
        module TransformOptions =
          struct
            include struct include DuplexOptions end
            let (read : t -> this:stream -> size:int -> unit) =
              fun (x778 : t) ->
                fun ~this:(x776 : stream) ->
                  fun ~size:(x777 : int) ->
                    ignore
                      (Ojs.call (t_to_js x778) "read"
                         [|(stream_to_js x776);(Ojs.int_to_js x777)|])
            let (write :
              t ->
                this:stream ->
                  chunk:any ->
                    encoding:BufferEncoding.t ->
                      callback:(?error:Error.t or_null -> unit -> unit) ->
                        unit)
              =
              fun (x786 : t) ->
                fun ~this:(x779 : stream) ->
                  fun ~chunk:(x780 : any) ->
                    fun ~encoding:(x781 : BufferEncoding.t) ->
                      fun
                        ~callback:(x782 :
                                    ?error:Error.t or_null -> unit -> unit)
                        ->
                        ignore
                          (Ojs.call (t_to_js x786) "write"
                             [|(stream_to_js x779);(any_to_js x780);(
                               BufferEncoding.t_to_js x781);(Ojs.fun_to_js 1
                                                               (fun
                                                                  (x783 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x782
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x784 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x784)
                                                                    x783) ()))|])
            let (writev :
              t ->
                this:stream ->
                  chunks:AnonymousInterface0.t list ->
                    callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x794 : t) ->
                fun ~this:(x787 : stream) ->
                  fun ~chunks:(x788 : AnonymousInterface0.t list) ->
                    fun
                      ~callback:(x790 :
                                  ?error:Error.t or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x794) "writev"
                           [|(stream_to_js x787);(Ojs.list_to_js
                                                    AnonymousInterface0.t_to_js
                                                    x788);(Ojs.fun_to_js 1
                                                             (fun
                                                                (x791 :
                                                                  Ojs.t)
                                                                ->
                                                                x790
                                                                  ?error:(
                                                                  Ojs.option_of_js
                                                                    (
                                                                    fun
                                                                    (x792 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x792)
                                                                    x791) ()))|])
            let (final :
              t ->
                this:stream ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x800 : t) ->
                fun ~this:(x795 : stream) ->
                  fun
                    ~callback:(x796 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x800) "final"
                         [|(stream_to_js x795);(Ojs.fun_to_js 1
                                                  (fun (x797 : Ojs.t) ->
                                                     x796
                                                       ?error:(Ojs.option_of_js
                                                                 (fun
                                                                    (x798 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x798)
                                                                 x797) ()))|])
            let (destroy :
              t ->
                this:stream ->
                  error:Error.t or_null ->
                    callback:(error:Error.t or_null -> unit) -> unit)
              =
              fun (x807 : t) ->
                fun ~this:(x801 : stream) ->
                  fun ~error:(x802 : Error.t or_null) ->
                    fun ~callback:(x804 : error:Error.t or_null -> unit) ->
                      ignore
                        (Ojs.call (t_to_js x807) "destroy"
                           [|(stream_to_js x801);(or_null_to_js Error.t_to_js
                                                    x802);(Ojs.fun_to_js 1
                                                             (fun
                                                                (x805 :
                                                                  Ojs.t)
                                                                ->
                                                                x804
                                                                  ~error:(
                                                                  or_null_of_js
                                                                    Error.t_of_js
                                                                    x805)))|])
            let (transform :
              t ->
                this:stream ->
                  chunk:any ->
                    encoding:BufferEncoding.t ->
                      callback:TransformCallback.t -> unit)
              =
              fun (x812 : t) ->
                fun ~this:(x808 : stream) ->
                  fun ~chunk:(x809 : any) ->
                    fun ~encoding:(x810 : BufferEncoding.t) ->
                      fun ~callback:(x811 : TransformCallback.t) ->
                        ignore
                          (Ojs.call (t_to_js x812) "transform"
                             [|(stream_to_js x808);(any_to_js x809);(
                               BufferEncoding.t_to_js x810);(TransformCallback.t_to_js
                                                               x811)|])
            let (flush :
              t -> this:stream -> callback:TransformCallback.t -> unit) =
              fun (x815 : t) ->
                fun ~this:(x813 : stream) ->
                  fun ~callback:(x814 : TransformCallback.t) ->
                    ignore
                      (Ojs.call (t_to_js x815) "flush"
                         [|(stream_to_js x813);(TransformCallback.t_to_js
                                                  x814)|])
          end
        module Transform =
          struct
            include struct include Duplex end
            let (create : ?opts:TransformOptions.t -> unit -> t) =
              fun ?opts:(x816 : TransformOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "Transform")
                       (let x817 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x816 with
                         | Some x818 ->
                             ignore
                               (Ojs.call x817 "push"
                                  [|(TransformOptions.t_to_js x818)|])
                         | None -> ());
                        x817))
            let (_transform :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t ->
                    callback:TransformCallback.t -> unit)
              =
              fun (x822 : t) ->
                fun ~chunk:(x819 : any) ->
                  fun ~encoding:(x820 : BufferEncoding.t) ->
                    fun ~callback:(x821 : TransformCallback.t) ->
                      ignore
                        (Ojs.call (t_to_js x822) "_transform"
                           [|(any_to_js x819);(BufferEncoding.t_to_js x820);(
                             TransformCallback.t_to_js x821)|])
            let (_flush : t -> callback:TransformCallback.t -> unit) =
              fun (x824 : t) ->
                fun ~callback:(x823 : TransformCallback.t) ->
                  ignore
                    (Ojs.call (t_to_js x824) "_flush"
                       [|(TransformCallback.t_to_js x823)|])
          end
        module PassThrough = struct include struct include Transform end end
        module FinishedOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x826 : Ojs.t) -> x826
            and t_to_js : t -> Ojs.t = fun (x825 : Ojs.t) -> x825
            let (get_error : t -> bool) =
              fun (x827 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x827) "error")
            let (set_error : t -> bool -> unit) =
              fun (x828 : t) ->
                fun (x829 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x828) "error"
                    (Ojs.bool_to_js x829)
            let (get_readable : t -> bool) =
              fun (x830 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x830) "readable")
            let (set_readable : t -> bool -> unit) =
              fun (x831 : t) ->
                fun (x832 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x831) "readable"
                    (Ojs.bool_to_js x832)
            let (get_writable : t -> bool) =
              fun (x833 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x833) "writable")
            let (set_writable : t -> bool -> unit) =
              fun (x834 : t) ->
                fun (x835 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x834) "writable"
                    (Ojs.bool_to_js x835)
          end
        let (finished :
          stream:(ReadWriteStream.t, ReadableStream.t, WritableStream.t)
            union3 ->
            options:FinishedOptions.t ->
              callback:(?err:ErrnoException.t or_null -> unit -> unit) ->
                unit -> unit)
          =
          fun
            ~stream:(x836 :
                      (ReadWriteStream.t, ReadableStream.t, WritableStream.t)
                        union3)
            ->
            fun ~options:(x840 : FinishedOptions.t) ->
              fun
                ~callback:(x841 :
                            ?err:ErrnoException.t or_null -> unit -> unit)
                ->
                fun () ->
                  ignore
                    (Ojs.apply
                       (Ojs.call
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "finished"
                          [|(union3_to_js ReadWriteStream.t_to_js
                               ReadableStream.t_to_js WritableStream.t_to_js
                               x836);(FinishedOptions.t_to_js x840);(
                            Ojs.fun_to_js 1
                              (fun (x842 : Ojs.t) ->
                                 x841
                                   ?err:(Ojs.option_of_js
                                           (fun (x843 : Ojs.t) ->
                                              or_null_of_js
                                                ErrnoException.t_of_js x843)
                                           x842) ()))|]) [||])
        let (finished :
          stream:(ReadWriteStream.t, ReadableStream.t, WritableStream.t)
            union3 ->
            callback:(?err:ErrnoException.t or_null -> unit -> unit) ->
              unit -> unit)
          =
          fun
            ~stream:(x845 :
                      (ReadWriteStream.t, ReadableStream.t, WritableStream.t)
                        union3)
            ->
            fun
              ~callback:(x849 :
                          ?err:ErrnoException.t or_null -> unit -> unit)
              ->
              fun () ->
                ignore
                  (Ojs.apply
                     (Ojs.call (Ojs.get_prop_ascii Import.stream "internal")
                        "finished"
                        [|(union3_to_js ReadWriteStream.t_to_js
                             ReadableStream.t_to_js WritableStream.t_to_js
                             x845);(Ojs.fun_to_js 1
                                      (fun (x850 : Ojs.t) ->
                                         x849
                                           ?err:(Ojs.option_of_js
                                                   (fun (x851 : Ojs.t) ->
                                                      or_null_of_js
                                                        ErrnoException.t_of_js
                                                        x851) x850) ()))|])
                     [||])
        module Finished =
          struct
            let (__promisify__ :
              stream:(ReadWriteStream.t, ReadableStream.t, WritableStream.t)
                union3 ->
                ?options:FinishedOptions.t -> unit -> unit Promise.t)
              =
              fun
                ~stream:(x853 :
                          (ReadWriteStream.t, ReadableStream.t,
                            WritableStream.t) union3)
                ->
                fun ?options:(x854 : FinishedOptions.t option) ->
                  fun () ->
                    Promise.t_of_js Ojs.unit_of_js
                      (let x860 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Import.stream "internal")
                           "finished" in
                       Ojs.call (Ojs.get_prop_ascii x860 "__promisify__")
                         "apply"
                         [|x860;((let x855 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x855 "push"
                                       [|(union3_to_js
                                            ReadWriteStream.t_to_js
                                            ReadableStream.t_to_js
                                            WritableStream.t_to_js x853)|]);
                                  (match x854 with
                                   | Some x856 ->
                                       ignore
                                         (Ojs.call x855 "push"
                                            [|(FinishedOptions.t_to_js x856)|])
                                   | None -> ());
                                  x855))|])
          end
        let (pipeline :
          stream1:ReadableStream.t ->
            stream2:'T ->
              ?callback:(err:ErrnoException.t or_null -> unit) -> unit -> 'T)
          =
          fun ~stream1:(x862 : ReadableStream.t) ->
            fun ~stream2:(x863 : 'T) ->
              fun
                ?callback:(x864 :
                            (err:ErrnoException.t or_null -> unit) option)
                ->
                fun () ->
                  Obj.magic
                    (let x869 = Ojs.get_prop_ascii Import.stream "internal" in
                     Ojs.call (Ojs.get_prop_ascii x869 "pipeline") "apply"
                       [|x869;((let x865 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x865 "push"
                                     [|(ReadableStream.t_to_js x862)|]);
                                ignore
                                  (Ojs.call x865 "push" [|(Obj.magic x863)|]);
                                (match x864 with
                                 | Some x866 ->
                                     ignore
                                       (Ojs.call x865 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun (x867 : Ojs.t) ->
                                                  x866
                                                    ~err:(or_null_of_js
                                                            ErrnoException.t_of_js
                                                            x867)))|])
                                 | None -> ());
                                x865))|])
        let (pipeline :
          stream1:ReadableStream.t ->
            stream2:ReadWriteStream.t ->
              stream3:'T ->
                ?callback:(err:ErrnoException.t or_null -> unit) ->
                  unit -> 'T)
          =
          fun ~stream1:(x870 : ReadableStream.t) ->
            fun ~stream2:(x871 : ReadWriteStream.t) ->
              fun ~stream3:(x872 : 'T) ->
                fun
                  ?callback:(x873 :
                              (err:ErrnoException.t or_null -> unit) option)
                  ->
                  fun () ->
                    Obj.magic
                      (let x878 = Ojs.get_prop_ascii Import.stream "internal" in
                       Ojs.call (Ojs.get_prop_ascii x878 "pipeline") "apply"
                         [|x878;((let x874 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x874 "push"
                                       [|(ReadableStream.t_to_js x870)|]);
                                  ignore
                                    (Ojs.call x874 "push"
                                       [|(ReadWriteStream.t_to_js x871)|]);
                                  ignore
                                    (Ojs.call x874 "push"
                                       [|(Obj.magic x872)|]);
                                  (match x873 with
                                   | Some x875 ->
                                       ignore
                                         (Ojs.call x874 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun (x876 : Ojs.t) ->
                                                    x875
                                                      ~err:(or_null_of_js
                                                              ErrnoException.t_of_js
                                                              x876)))|])
                                   | None -> ());
                                  x874))|])
        let (pipeline :
          stream1:ReadableStream.t ->
            stream2:ReadWriteStream.t ->
              stream3:ReadWriteStream.t ->
                stream4:'T ->
                  ?callback:(err:ErrnoException.t or_null -> unit) ->
                    unit -> 'T)
          =
          fun ~stream1:(x879 : ReadableStream.t) ->
            fun ~stream2:(x880 : ReadWriteStream.t) ->
              fun ~stream3:(x881 : ReadWriteStream.t) ->
                fun ~stream4:(x882 : 'T) ->
                  fun
                    ?callback:(x883 :
                                (err:ErrnoException.t or_null -> unit) option)
                    ->
                    fun () ->
                      Obj.magic
                        (let x888 =
                           Ojs.get_prop_ascii Import.stream "internal" in
                         Ojs.call (Ojs.get_prop_ascii x888 "pipeline")
                           "apply"
                           [|x888;((let x884 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x884 "push"
                                         [|(ReadableStream.t_to_js x879)|]);
                                    ignore
                                      (Ojs.call x884 "push"
                                         [|(ReadWriteStream.t_to_js x880)|]);
                                    ignore
                                      (Ojs.call x884 "push"
                                         [|(ReadWriteStream.t_to_js x881)|]);
                                    ignore
                                      (Ojs.call x884 "push"
                                         [|(Obj.magic x882)|]);
                                    (match x883 with
                                     | Some x885 ->
                                         ignore
                                           (Ojs.call x884 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun (x886 : Ojs.t) ->
                                                      x885
                                                        ~err:(or_null_of_js
                                                                ErrnoException.t_of_js
                                                                x886)))|])
                                     | None -> ());
                                    x884))|])
        let (pipeline :
          stream1:ReadableStream.t ->
            stream2:ReadWriteStream.t ->
              stream3:ReadWriteStream.t ->
                stream4:ReadWriteStream.t ->
                  stream5:'T ->
                    ?callback:(err:ErrnoException.t or_null -> unit) ->
                      unit -> 'T)
          =
          fun ~stream1:(x889 : ReadableStream.t) ->
            fun ~stream2:(x890 : ReadWriteStream.t) ->
              fun ~stream3:(x891 : ReadWriteStream.t) ->
                fun ~stream4:(x892 : ReadWriteStream.t) ->
                  fun ~stream5:(x893 : 'T) ->
                    fun
                      ?callback:(x894 :
                                  (err:ErrnoException.t or_null -> unit)
                                    option)
                      ->
                      fun () ->
                        Obj.magic
                          (let x899 =
                             Ojs.get_prop_ascii Import.stream "internal" in
                           Ojs.call (Ojs.get_prop_ascii x899 "pipeline")
                             "apply"
                             [|x899;((let x895 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x895 "push"
                                           [|(ReadableStream.t_to_js x889)|]);
                                      ignore
                                        (Ojs.call x895 "push"
                                           [|(ReadWriteStream.t_to_js x890)|]);
                                      ignore
                                        (Ojs.call x895 "push"
                                           [|(ReadWriteStream.t_to_js x891)|]);
                                      ignore
                                        (Ojs.call x895 "push"
                                           [|(ReadWriteStream.t_to_js x892)|]);
                                      ignore
                                        (Ojs.call x895 "push"
                                           [|(Obj.magic x893)|]);
                                      (match x894 with
                                       | Some x896 ->
                                           ignore
                                             (Ojs.call x895 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun (x897 : Ojs.t) ->
                                                        x896
                                                          ~err:(or_null_of_js
                                                                  ErrnoException.t_of_js
                                                                  x897)))|])
                                       | None -> ());
                                      x895))|])
        let (pipeline :
          streams:(ReadWriteStream.t, ReadableStream.t, WritableStream.t)
            union3 list ->
            ?callback:(err:ErrnoException.t or_null -> unit) ->
              unit -> WritableStream.t)
          =
          fun
            ~streams:(x900 :
                       (ReadWriteStream.t, ReadableStream.t,
                         WritableStream.t) union3 list)
            ->
            fun
              ?callback:(x901 :
                          (err:ErrnoException.t or_null -> unit) option)
              ->
              fun () ->
                WritableStream.t_of_js
                  (let x910 = Ojs.get_prop_ascii Import.stream "internal" in
                   Ojs.call (Ojs.get_prop_ascii x910 "pipeline") "apply"
                     [|x910;((let x902 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x902 "push"
                                   [|(Ojs.list_to_js
                                        (fun
                                           (x906 :
                                             (ReadWriteStream.t,
                                               ReadableStream.t,
                                               WritableStream.t) union3)
                                           ->
                                           union3_to_js
                                             ReadWriteStream.t_to_js
                                             ReadableStream.t_to_js
                                             WritableStream.t_to_js x906)
                                        x900)|]);
                              (match x901 with
                               | Some x903 ->
                                   ignore
                                     (Ojs.call x902 "push"
                                        [|(Ojs.fun_to_js 1
                                             (fun (x904 : Ojs.t) ->
                                                x903
                                                  ~err:(or_null_of_js
                                                          ErrnoException.t_of_js
                                                          x904)))|])
                               | None -> ());
                              x902))|])
        let (pipeline :
          stream1:ReadableStream.t ->
            stream2:(ReadWriteStream.t, WritableStream.t) union2 ->
              streams:any list -> WritableStream.t)
          =
          fun ~stream1:(x911 : ReadableStream.t) ->
            fun
              ~stream2:(x912 : (ReadWriteStream.t, WritableStream.t) union2)
              ->
              fun ~streams:(x913 : any list) ->
                WritableStream.t_of_js
                  (let x918 = Ojs.get_prop_ascii Import.stream "internal" in
                   Ojs.call (Ojs.get_prop_ascii x918 "pipeline") "apply"
                     [|x918;((let x914 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x914 "push"
                                   [|(ReadableStream.t_to_js x911)|]);
                              ignore
                                (Ojs.call x914 "push"
                                   [|(union2_to_js ReadWriteStream.t_to_js
                                        WritableStream.t_to_js x912)|]);
                              List.iter
                                (fun (x915 : any) ->
                                   ignore
                                     (Ojs.call x914 "push"
                                        [|(any_to_js x915)|])) x913;
                              x914))|])
        module Pipeline =
          struct
            let (__promisify__ :
              stream1:ReadableStream.t ->
                stream2:WritableStream.t -> unit Promise.t)
              =
              fun ~stream1:(x919 : ReadableStream.t) ->
                fun ~stream2:(x920 : WritableStream.t) ->
                  Promise.t_of_js Ojs.unit_of_js
                    (Ojs.call
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "pipeline") "__promisify__"
                       [|(ReadableStream.t_to_js x919);(WritableStream.t_to_js
                                                          x920)|])
            let (__promisify__ :
              stream1:ReadableStream.t ->
                stream2:ReadWriteStream.t ->
                  stream3:WritableStream.t -> unit Promise.t)
              =
              fun ~stream1:(x922 : ReadableStream.t) ->
                fun ~stream2:(x923 : ReadWriteStream.t) ->
                  fun ~stream3:(x924 : WritableStream.t) ->
                    Promise.t_of_js Ojs.unit_of_js
                      (Ojs.call
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Import.stream "internal")
                            "pipeline") "__promisify__"
                         [|(ReadableStream.t_to_js x922);(ReadWriteStream.t_to_js
                                                            x923);(WritableStream.t_to_js
                                                                    x924)|])
            let (__promisify__ :
              stream1:ReadableStream.t ->
                stream2:ReadWriteStream.t ->
                  stream3:ReadWriteStream.t ->
                    stream4:WritableStream.t -> unit Promise.t)
              =
              fun ~stream1:(x926 : ReadableStream.t) ->
                fun ~stream2:(x927 : ReadWriteStream.t) ->
                  fun ~stream3:(x928 : ReadWriteStream.t) ->
                    fun ~stream4:(x929 : WritableStream.t) ->
                      Promise.t_of_js Ojs.unit_of_js
                        (Ojs.call
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Import.stream "internal")
                              "pipeline") "__promisify__"
                           [|(ReadableStream.t_to_js x926);(ReadWriteStream.t_to_js
                                                              x927);(
                             ReadWriteStream.t_to_js x928);(WritableStream.t_to_js
                                                              x929)|])
            let (__promisify__ :
              stream1:ReadableStream.t ->
                stream2:ReadWriteStream.t ->
                  stream3:ReadWriteStream.t ->
                    stream4:ReadWriteStream.t ->
                      stream5:WritableStream.t -> unit Promise.t)
              =
              fun ~stream1:(x931 : ReadableStream.t) ->
                fun ~stream2:(x932 : ReadWriteStream.t) ->
                  fun ~stream3:(x933 : ReadWriteStream.t) ->
                    fun ~stream4:(x934 : ReadWriteStream.t) ->
                      fun ~stream5:(x935 : WritableStream.t) ->
                        Promise.t_of_js Ojs.unit_of_js
                          (Ojs.call
                             (Ojs.get_prop_ascii
                                (Ojs.get_prop_ascii Import.stream "internal")
                                "pipeline") "__promisify__"
                             [|(ReadableStream.t_to_js x931);(ReadWriteStream.t_to_js
                                                                x932);(
                               ReadWriteStream.t_to_js x933);(ReadWriteStream.t_to_js
                                                                x934);(
                               WritableStream.t_to_js x935)|])
            let (__promisify__ :
              streams:(ReadWriteStream.t, ReadableStream.t, WritableStream.t)
                union3 list -> unit Promise.t)
              =
              fun
                ~streams:(x937 :
                           (ReadWriteStream.t, ReadableStream.t,
                             WritableStream.t) union3 list)
                ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Import.stream "internal")
                        "pipeline") "__promisify__"
                     [|(Ojs.list_to_js
                          (fun
                             (x938 :
                               (ReadWriteStream.t, ReadableStream.t,
                                 WritableStream.t) union3)
                             ->
                             union3_to_js ReadWriteStream.t_to_js
                               ReadableStream.t_to_js WritableStream.t_to_js
                               x938) x937)|])
            let (__promisify__ :
              stream1:ReadableStream.t ->
                stream2:(ReadWriteStream.t, WritableStream.t) union2 ->
                  streams:any list -> unit Promise.t)
              =
              fun ~stream1:(x943 : ReadableStream.t) ->
                fun
                  ~stream2:(x944 :
                             (ReadWriteStream.t, WritableStream.t) union2)
                  ->
                  fun ~streams:(x945 : any list) ->
                    Promise.t_of_js Ojs.unit_of_js
                      (let x950 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Import.stream "internal")
                           "pipeline" in
                       Ojs.call (Ojs.get_prop_ascii x950 "__promisify__")
                         "apply"
                         [|x950;((let x946 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x946 "push"
                                       [|(ReadableStream.t_to_js x943)|]);
                                  ignore
                                    (Ojs.call x946 "push"
                                       [|(union2_to_js
                                            ReadWriteStream.t_to_js
                                            WritableStream.t_to_js x944)|]);
                                  List.iter
                                    (fun (x947 : any) ->
                                       ignore
                                         (Ojs.call x946 "push"
                                            [|(any_to_js x947)|])) x945;
                                  x946))|])
          end
        module Pipe =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x953 : Ojs.t) -> x953
            and t_to_js : t -> Ojs.t = fun (x952 : Ojs.t) -> x952
            let (close : t -> unit) =
              fun (x954 : t) -> ignore (Ojs.call (t_to_js x954) "close" [||])
            let (has_ref : t -> bool) =
              fun (x955 : t) ->
                Ojs.bool_of_js (Ojs.call (t_to_js x955) "hasRef" [||])
            let (ref : t -> unit) =
              fun (x956 : t) -> ignore (Ojs.call (t_to_js x956) "ref" [||])
            let (unref : t -> unit) =
              fun (x957 : t) -> ignore (Ojs.call (t_to_js x957) "unref" [||])
          end
      end
    include struct include Internal end
  end
