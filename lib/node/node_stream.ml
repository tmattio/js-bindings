[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_chunk : t -> any) =
      fun (x3 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x3) "chunk")
    let (set_chunk : t -> any -> unit) =
      fun (x4 : t) ->
        fun (x5 : any) ->
          Ojs.set_prop_ascii (t_to_js x4) "chunk" (any_to_js x5)
    let (get_encoding : t -> BufferEncoding.t) =
      fun (x6 : t) ->
        BufferEncoding.t_of_js (Ojs.get_prop_ascii (t_to_js x6) "encoding")
    let (set_encoding : t -> BufferEncoding.t -> unit) =
      fun (x7 : t) ->
        fun (x8 : BufferEncoding.t) ->
          Ojs.set_prop_ascii (t_to_js x7) "encoding"
            (BufferEncoding.t_to_js x8)
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10 : Ojs.t) -> x10
    and t_to_js : t -> Ojs.t = fun (x9 : Ojs.t) -> x9
    let (get_end : t -> bool) =
      fun (x11 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x11) "end")
    let (set_end : t -> bool -> unit) =
      fun (x12 : t) ->
        fun (x13 : bool) ->
          Ojs.set_prop_ascii (t_to_js x12) "end" (Ojs.bool_to_js x13)
  end
module Stream =
  struct
    module Internal =
      struct
        module Base =
          struct
            type t = stream
            let rec t_of_js : Ojs.t -> t =
              fun (x15 : Ojs.t) -> stream_of_js x15
            and t_to_js : t -> Ojs.t = fun (x14 : stream) -> stream_to_js x14
            let (pipe :
              t -> 'T -> ?options:AnonymousInterface1.t -> unit -> 'T) =
              fun (x20 : t) ->
                fun (x16 : 'T) ->
                  fun ?options:(x17 : AnonymousInterface1.t option) ->
                    fun () ->
                      Obj.magic
                        (let x21 = t_to_js x20 in
                         Ojs.call (Ojs.get_prop_ascii x21 "pipe") "apply"
                           [|x21;((let x18 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x18 "push" [|(Obj.magic x16)|]);
                                   (match x17 with
                                    | Some x19 ->
                                        ignore
                                          (Ojs.call x18 "push"
                                             [|(AnonymousInterface1.t_to_js
                                                  x19)|])
                                    | None -> ());
                                   x18))|])
          end
        module ReadableOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x23 : Ojs.t) -> x23
            and t_to_js : t -> Ojs.t = fun (x22 : Ojs.t) -> x22
            let (get_high_water_mark : t -> int) =
              fun (x24 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x24) "highWaterMark")
            let (set_high_water_mark : t -> int -> unit) =
              fun (x25 : t) ->
                fun (x26 : int) ->
                  Ojs.set_prop_ascii (t_to_js x25) "highWaterMark"
                    (Ojs.int_to_js x26)
            let (get_encoding : t -> BufferEncoding.t) =
              fun (x27 : t) ->
                BufferEncoding.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x27) "encoding")
            let (set_encoding : t -> BufferEncoding.t -> unit) =
              fun (x28 : t) ->
                fun (x29 : BufferEncoding.t) ->
                  Ojs.set_prop_ascii (t_to_js x28) "encoding"
                    (BufferEncoding.t_to_js x29)
            let (get_object_mode : t -> bool) =
              fun (x30 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x30) "objectMode")
            let (set_object_mode : t -> bool -> unit) =
              fun (x31 : t) ->
                fun (x32 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x31) "objectMode"
                    (Ojs.bool_to_js x32)
            let (read : t -> this:stream -> size:int -> unit) =
              fun (x35 : t) ->
                fun ~this:(x33 : stream) ->
                  fun ~size:(x34 : int) ->
                    ignore
                      (Ojs.call (t_to_js x35) "read"
                         [|(stream_to_js x33);(Ojs.int_to_js x34)|])
            let (destroy :
              t ->
                this:stream ->
                  error:Error.t or_null ->
                    callback:(error:Error.t or_null -> unit) -> unit)
              =
              fun (x42 : t) ->
                fun ~this:(x36 : stream) ->
                  fun ~error:(x37 : Error.t or_null) ->
                    fun ~callback:(x39 : error:Error.t or_null -> unit) ->
                      ignore
                        (Ojs.call (t_to_js x42) "destroy"
                           [|(stream_to_js x36);(or_null_to_js Error.t_to_js
                                                   x37);(Ojs.fun_to_js 1
                                                           (fun (x40 : Ojs.t)
                                                              ->
                                                              x39
                                                                ~error:(
                                                                or_null_of_js
                                                                  Error.t_of_js
                                                                  x40)))|])
            let (get_auto_destroy : t -> bool) =
              fun (x43 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x43) "autoDestroy")
            let (set_auto_destroy : t -> bool -> unit) =
              fun (x44 : t) ->
                fun (x45 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x44) "autoDestroy"
                    (Ojs.bool_to_js x45)
          end
        module Stream =
          struct
            include struct include Base end
            let (create : ?opts:ReadableOptions.t -> unit -> t) =
              fun ?opts:(x46 : ReadableOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "Stream")
                       (let x47 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x46 with
                         | Some x48 ->
                             ignore
                               (Ojs.call x47 "push"
                                  [|(ReadableOptions.t_to_js x48)|])
                         | None -> ());
                        x47))
          end
        module Readable =
          struct
            include struct include Stream end
            let (from :
              iterable:(any AsyncIterable.t, any Iterable.t) union2 ->
                ?options:ReadableOptions.t -> unit -> t)
              =
              fun
                ~iterable:(x49 :
                            (any AsyncIterable.t, any Iterable.t) union2)
                ->
                fun ?options:(x50 : ReadableOptions.t option) ->
                  fun () ->
                    t_of_js
                      (let x57 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Import.stream "internal")
                           "Readable" in
                       Ojs.call (Ojs.get_prop_ascii x57 "from") "apply"
                         [|x57;((let x51 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x51 "push"
                                      [|(union2_to_js
                                           (fun (x53 : any AsyncIterable.t)
                                              ->
                                              AsyncIterable.t_to_js any_to_js
                                                x53)
                                           (fun (x55 : any Iterable.t) ->
                                              Iterable.t_to_js any_to_js x55)
                                           x49)|]);
                                 (match x50 with
                                  | Some x52 ->
                                      ignore
                                        (Ojs.call x51 "push"
                                           [|(ReadableOptions.t_to_js x52)|])
                                  | None -> ());
                                 x51))|])
            let (get_readable : t -> bool) =
              fun (x58 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x58) "readable")
            let (set_readable : t -> bool -> unit) =
              fun (x59 : t) ->
                fun (x60 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x59) "readable"
                    (Ojs.bool_to_js x60)
            let (get_readable_encoding : t -> BufferEncoding.t or_null) =
              fun (x61 : t) ->
                or_null_of_js BufferEncoding.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x61) "readableEncoding")
            let (get_readable_ended : t -> bool) =
              fun (x63 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x63) "readableEnded")
            let (get_readable_flowing : t -> bool or_null) =
              fun (x64 : t) ->
                or_null_of_js Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x64) "readableFlowing")
            let (get_readable_high_water_mark : t -> int) =
              fun (x66 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x66) "readableHighWaterMark")
            let (get_readable_length : t -> int) =
              fun (x67 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x67) "readableLength")
            let (get_readable_object_mode : t -> bool) =
              fun (x68 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x68) "readableObjectMode")
            let (get_destroyed : t -> bool) =
              fun (x69 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x69) "destroyed")
            let (set_destroyed : t -> bool -> unit) =
              fun (x70 : t) ->
                fun (x71 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x70) "destroyed"
                    (Ojs.bool_to_js x71)
            let (create : ?opts:ReadableOptions.t -> unit -> t) =
              fun ?opts:(x72 : ReadableOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "Readable")
                       (let x73 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x72 with
                         | Some x74 ->
                             ignore
                               (Ojs.call x73 "push"
                                  [|(ReadableOptions.t_to_js x74)|])
                         | None -> ());
                        x73))
            let (_read : t -> size:int -> unit) =
              fun (x76 : t) ->
                fun ~size:(x75 : int) ->
                  ignore
                    (Ojs.call (t_to_js x76) "_read" [|(Ojs.int_to_js x75)|])
            let (read : t -> ?size:int -> unit -> any) =
              fun (x80 : t) ->
                fun ?size:(x77 : int option) ->
                  fun () ->
                    any_of_js
                      (let x81 = t_to_js x80 in
                       Ojs.call (Ojs.get_prop_ascii x81 "read") "apply"
                         [|x81;((let x78 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x77 with
                                  | Some x79 ->
                                      ignore
                                        (Ojs.call x78 "push"
                                           [|(Ojs.int_to_js x79)|])
                                  | None -> ());
                                 x78))|])
            let (set_encoding : t -> encoding:BufferEncoding.t -> t) =
              fun (x83 : t) ->
                fun ~encoding:(x82 : BufferEncoding.t) ->
                  t_of_js
                    (Ojs.call (t_to_js x83) "setEncoding"
                       [|(BufferEncoding.t_to_js x82)|])
            let (pause : t -> t) =
              fun (x84 : t) -> t_of_js (Ojs.call (t_to_js x84) "pause" [||])
            let (resume : t -> t) =
              fun (x85 : t) -> t_of_js (Ojs.call (t_to_js x85) "resume" [||])
            let (is_paused : t -> bool) =
              fun (x86 : t) ->
                Ojs.bool_of_js (Ojs.call (t_to_js x86) "isPaused" [||])
            let (unpipe : t -> ?destination:WritableStream.t -> unit -> t) =
              fun (x90 : t) ->
                fun ?destination:(x87 : WritableStream.t option) ->
                  fun () ->
                    t_of_js
                      (let x91 = t_to_js x90 in
                       Ojs.call (Ojs.get_prop_ascii x91 "unpipe") "apply"
                         [|x91;((let x88 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x87 with
                                  | Some x89 ->
                                      ignore
                                        (Ojs.call x88 "push"
                                           [|(WritableStream.t_to_js x89)|])
                                  | None -> ());
                                 x88))|])
            let (unshift :
              t -> chunk:any -> ?encoding:BufferEncoding.t -> unit -> unit) =
              fun (x96 : t) ->
                fun ~chunk:(x92 : any) ->
                  fun ?encoding:(x93 : BufferEncoding.t option) ->
                    fun () ->
                      ignore
                        (let x97 = t_to_js x96 in
                         Ojs.call (Ojs.get_prop_ascii x97 "unshift") "apply"
                           [|x97;((let x94 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x94 "push" [|(any_to_js x92)|]);
                                   (match x93 with
                                    | Some x95 ->
                                        ignore
                                          (Ojs.call x94 "push"
                                             [|(BufferEncoding.t_to_js x95)|])
                                    | None -> ());
                                   x94))|])
            let (wrap : t -> old_stream:ReadableStream.t -> t) =
              fun (x99 : t) ->
                fun ~old_stream:(x98 : ReadableStream.t) ->
                  t_of_js
                    (Ojs.call (t_to_js x99) "wrap"
                       [|(ReadableStream.t_to_js x98)|])
            let (push :
              t -> chunk:any -> ?encoding:BufferEncoding.t -> unit -> bool) =
              fun (x104 : t) ->
                fun ~chunk:(x100 : any) ->
                  fun ?encoding:(x101 : BufferEncoding.t option) ->
                    fun () ->
                      Ojs.bool_of_js
                        (let x105 = t_to_js x104 in
                         Ojs.call (Ojs.get_prop_ascii x105 "push") "apply"
                           [|x105;((let x102 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x102 "push"
                                         [|(any_to_js x100)|]);
                                    (match x101 with
                                     | Some x103 ->
                                         ignore
                                           (Ojs.call x102 "push"
                                              [|(BufferEncoding.t_to_js x103)|])
                                     | None -> ());
                                    x102))|])
            let (_destroy :
              t ->
                error:Error.t or_null ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x112 : t) ->
                fun ~error:(x106 : Error.t or_null) ->
                  fun
                    ~callback:(x108 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x112) "_destroy"
                         [|(or_null_to_js Error.t_to_js x106);(Ojs.fun_to_js
                                                                 1
                                                                 (fun
                                                                    (x109 :
                                                                    Ojs.t) ->
                                                                    x108
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x110 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x110)
                                                                    x109) ()))|])
            let (destroy : t -> ?error:Error.t -> unit -> unit) =
              fun (x116 : t) ->
                fun ?error:(x113 : Error.t option) ->
                  fun () ->
                    ignore
                      (let x117 = t_to_js x116 in
                       Ojs.call (Ojs.get_prop_ascii x117 "destroy") "apply"
                         [|x117;((let x114 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x113 with
                                   | Some x115 ->
                                       ignore
                                         (Ojs.call x114 "push"
                                            [|(Error.t_to_js x115)|])
                                   | None -> ());
                                  x114))|])
            module CloseListener =
              struct
                type t = unit -> unit
                let rec t_of_js : Ojs.t -> t =
                  fun (x119 : Ojs.t) ->
                    fun () -> ignore (Ojs.apply x119 [||])
                and t_to_js : t -> Ojs.t =
                  fun (x118 : unit -> unit) ->
                    Ojs.fun_to_js 1 (fun _ -> x118 ())
              end
            module DataListener =
              struct
                type t = chunk:any -> unit
                let rec t_of_js : Ojs.t -> t =
                  fun (x122 : Ojs.t) ->
                    fun ~chunk:(x123 : any) ->
                      ignore (Ojs.apply x122 [|(any_to_js x123)|])
                and t_to_js : t -> Ojs.t =
                  fun (x120 : chunk:any -> unit) ->
                    Ojs.fun_to_js 1
                      (fun (x121 : Ojs.t) -> x120 ~chunk:(any_of_js x121))
              end
            module EndListener =
              struct
                type t = unit -> unit
                let rec t_of_js : Ojs.t -> t =
                  fun (x125 : Ojs.t) ->
                    fun () -> ignore (Ojs.apply x125 [||])
                and t_to_js : t -> Ojs.t =
                  fun (x124 : unit -> unit) ->
                    Ojs.fun_to_js 1 (fun _ -> x124 ())
              end
            module ErrorListener =
              struct
                type t = err:Error.t -> unit
                let rec t_of_js : Ojs.t -> t =
                  fun (x128 : Ojs.t) ->
                    fun ~err:(x129 : Error.t) ->
                      ignore (Ojs.apply x128 [|(Error.t_to_js x129)|])
                and t_to_js : t -> Ojs.t =
                  fun (x126 : err:Error.t -> unit) ->
                    Ojs.fun_to_js 1
                      (fun (x127 : Ojs.t) -> x126 ~err:(Error.t_of_js x127))
              end
            module PauseListener =
              struct
                type t = unit -> unit
                let rec t_of_js : Ojs.t -> t =
                  fun (x131 : Ojs.t) ->
                    fun () -> ignore (Ojs.apply x131 [||])
                and t_to_js : t -> Ojs.t =
                  fun (x130 : unit -> unit) ->
                    Ojs.fun_to_js 1 (fun _ -> x130 ())
              end
            module ReadableListener =
              struct
                type t = unit -> unit
                let rec t_of_js : Ojs.t -> t =
                  fun (x133 : Ojs.t) ->
                    fun () -> ignore (Ojs.apply x133 [||])
                and t_to_js : t -> Ojs.t =
                  fun (x132 : unit -> unit) ->
                    Ojs.fun_to_js 1 (fun _ -> x132 ())
              end
            module ResumeListener =
              struct
                type t = unit -> unit
                let rec t_of_js : Ojs.t -> t =
                  fun (x135 : Ojs.t) ->
                    fun () -> ignore (Ojs.apply x135 [||])
                and t_to_js : t -> Ojs.t =
                  fun (x134 : unit -> unit) ->
                    Ojs.fun_to_js 1 (fun _ -> x134 ())
              end
            type listener =
              [ `Close of CloseListener.t  | `Data of DataListener.t 
              | `End of EndListener.t  | `Error of ErrorListener.t 
              | `Pause of PauseListener.t  | `Readable of ReadableListener.t 
              | `Resume of ResumeListener.t ]
            let rec listener_to_js : listener -> Ojs.t =
              fun
                (x136 :
                  [ `Close of CloseListener.t  | `Data of DataListener.t 
                  | `End of EndListener.t  | `Error of ErrorListener.t 
                  | `Pause of PauseListener.t 
                  | `Readable of ReadableListener.t 
                  | `Resume of ResumeListener.t ])
                ->
                match x136 with
                | `Close x137 -> CloseListener.t_to_js x137
                | `Data x138 -> DataListener.t_to_js x138
                | `End x139 -> EndListener.t_to_js x139
                | `Error x140 -> ErrorListener.t_to_js x140
                | `Pause x141 -> PauseListener.t_to_js x141
                | `Readable x142 -> ReadableListener.t_to_js x142
                | `Resume x143 -> ResumeListener.t_to_js x143
            let (on : t -> string -> Ojs.t -> unit) =
              fun (x148 : t) ->
                fun (x146 : string) ->
                  fun (x147 : Ojs.t) ->
                    ignore
                      (Ojs.call (t_to_js x148) "on"
                         [|(Ojs.string_to_js x146);x147|])
            let (add_listener : t -> string -> Ojs.t -> unit) =
              fun (x151 : t) ->
                fun (x149 : string) ->
                  fun (x150 : Ojs.t) ->
                    ignore
                      (Ojs.call (t_to_js x151) "addListener"
                         [|(Ojs.string_to_js x149);x150|])
            let (once : t -> string -> Ojs.t -> unit) =
              fun (x154 : t) ->
                fun (x152 : string) ->
                  fun (x153 : Ojs.t) ->
                    ignore
                      (Ojs.call (t_to_js x154) "once"
                         [|(Ojs.string_to_js x152);x153|])
            let (prepend_listener : t -> string -> Ojs.t -> unit) =
              fun (x157 : t) ->
                fun (x155 : string) ->
                  fun (x156 : Ojs.t) ->
                    ignore
                      (Ojs.call (t_to_js x157) "prependListener"
                         [|(Ojs.string_to_js x155);x156|])
            let (prepend_once_listener : t -> string -> Ojs.t -> unit) =
              fun (x160 : t) ->
                fun (x158 : string) ->
                  fun (x159 : Ojs.t) ->
                    ignore
                      (Ojs.call (t_to_js x160) "prependOnceListener"
                         [|(Ojs.string_to_js x158);x159|])
            let (remove_listener : t -> string -> Ojs.t -> unit) =
              fun (x163 : t) ->
                fun (x161 : string) ->
                  fun (x162 : Ojs.t) ->
                    ignore
                      (Ojs.call (t_to_js x163) "removeListener"
                         [|(Ojs.string_to_js x161);x162|])
            let with_listener_fn fn t =
              function
              | `Close f -> (fn t "close") @@ (CloseListener.t_to_js f)
              | `Data f -> (fn t "data") @@ (DataListener.t_to_js f)
              | `End f -> (fn t "end") @@ (EndListener.t_to_js f)
              | `Error f -> (fn t "error") @@ (ErrorListener.t_to_js f)
              | `Pause f -> (fn t "pause") @@ (PauseListener.t_to_js f)
              | `Readable f ->
                  (fn t "readable") @@ (ReadableListener.t_to_js f)
              | `Resume f -> (fn t "resume") @@ (ResumeListener.t_to_js f)
            let on = with_listener_fn on
            let add_listener = with_listener_fn add_listener
            let once = with_listener_fn once
            let prepend_listener = with_listener_fn prepend_listener
            let prepend_once_listener =
              with_listener_fn prepend_once_listener
            let remove_listener = with_listener_fn remove_listener
            let (cast' : t -> ReadableStream.t) =
              fun (x171 : t) -> ReadableStream.t_of_js (t_to_js x171)
          end
        module WritableOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x173 : Ojs.t) -> x173
            and t_to_js : t -> Ojs.t = fun (x172 : Ojs.t) -> x172
            let (get_high_water_mark : t -> int) =
              fun (x174 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x174) "highWaterMark")
            let (set_high_water_mark : t -> int -> unit) =
              fun (x175 : t) ->
                fun (x176 : int) ->
                  Ojs.set_prop_ascii (t_to_js x175) "highWaterMark"
                    (Ojs.int_to_js x176)
            let (get_decode_strings : t -> bool) =
              fun (x177 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x177) "decodeStrings")
            let (set_decode_strings : t -> bool -> unit) =
              fun (x178 : t) ->
                fun (x179 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x178) "decodeStrings"
                    (Ojs.bool_to_js x179)
            let (get_default_encoding : t -> BufferEncoding.t) =
              fun (x180 : t) ->
                BufferEncoding.t_of_js
                  (Ojs.get_prop_ascii (t_to_js x180) "defaultEncoding")
            let (set_default_encoding : t -> BufferEncoding.t -> unit) =
              fun (x181 : t) ->
                fun (x182 : BufferEncoding.t) ->
                  Ojs.set_prop_ascii (t_to_js x181) "defaultEncoding"
                    (BufferEncoding.t_to_js x182)
            let (get_object_mode : t -> bool) =
              fun (x183 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x183) "objectMode")
            let (set_object_mode : t -> bool -> unit) =
              fun (x184 : t) ->
                fun (x185 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x184) "objectMode"
                    (Ojs.bool_to_js x185)
            let (get_emit_close : t -> bool) =
              fun (x186 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x186) "emitClose")
            let (set_emit_close : t -> bool -> unit) =
              fun (x187 : t) ->
                fun (x188 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x187) "emitClose"
                    (Ojs.bool_to_js x188)
            let (write :
              t ->
                this:stream ->
                  chunk:any ->
                    encoding:BufferEncoding.t ->
                      callback:(?error:Error.t or_null -> unit -> unit) ->
                        unit)
              =
              fun (x196 : t) ->
                fun ~this:(x189 : stream) ->
                  fun ~chunk:(x190 : any) ->
                    fun ~encoding:(x191 : BufferEncoding.t) ->
                      fun
                        ~callback:(x192 :
                                    ?error:Error.t or_null -> unit -> unit)
                        ->
                        ignore
                          (Ojs.call (t_to_js x196) "write"
                             [|(stream_to_js x189);(any_to_js x190);(
                               BufferEncoding.t_to_js x191);(Ojs.fun_to_js 1
                                                               (fun
                                                                  (x193 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x192
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x194 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x194)
                                                                    x193) ()))|])
            let (writev :
              t ->
                this:stream ->
                  chunks:AnonymousInterface0.t list ->
                    callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x204 : t) ->
                fun ~this:(x197 : stream) ->
                  fun ~chunks:(x198 : AnonymousInterface0.t list) ->
                    fun
                      ~callback:(x200 :
                                  ?error:Error.t or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x204) "writev"
                           [|(stream_to_js x197);(Ojs.list_to_js
                                                    AnonymousInterface0.t_to_js
                                                    x198);(Ojs.fun_to_js 1
                                                             (fun
                                                                (x201 :
                                                                  Ojs.t)
                                                                ->
                                                                x200
                                                                  ?error:(
                                                                  Ojs.option_of_js
                                                                    (
                                                                    fun
                                                                    (x202 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x202)
                                                                    x201) ()))|])
            let (destroy :
              t ->
                this:stream ->
                  error:Error.t or_null ->
                    callback:(error:Error.t or_null -> unit) -> unit)
              =
              fun (x211 : t) ->
                fun ~this:(x205 : stream) ->
                  fun ~error:(x206 : Error.t or_null) ->
                    fun ~callback:(x208 : error:Error.t or_null -> unit) ->
                      ignore
                        (Ojs.call (t_to_js x211) "destroy"
                           [|(stream_to_js x205);(or_null_to_js Error.t_to_js
                                                    x206);(Ojs.fun_to_js 1
                                                             (fun
                                                                (x209 :
                                                                  Ojs.t)
                                                                ->
                                                                x208
                                                                  ~error:(
                                                                  or_null_of_js
                                                                    Error.t_of_js
                                                                    x209)))|])
            let (final :
              t ->
                this:stream ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x217 : t) ->
                fun ~this:(x212 : stream) ->
                  fun
                    ~callback:(x213 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x217) "final"
                         [|(stream_to_js x212);(Ojs.fun_to_js 1
                                                  (fun (x214 : Ojs.t) ->
                                                     x213
                                                       ?error:(Ojs.option_of_js
                                                                 (fun
                                                                    (x215 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x215)
                                                                 x214) ()))|])
            let (get_auto_destroy : t -> bool) =
              fun (x218 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x218) "autoDestroy")
            let (set_auto_destroy : t -> bool -> unit) =
              fun (x219 : t) ->
                fun (x220 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x219) "autoDestroy"
                    (Ojs.bool_to_js x220)
          end
        module Writable =
          struct
            include struct include Stream end
            let (get_writable : t -> bool) =
              fun (x221 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x221) "writable")
            let (get_writable_ended : t -> bool) =
              fun (x222 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x222) "writableEnded")
            let (get_writable_finished : t -> bool) =
              fun (x223 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x223) "writableFinished")
            let (get_writable_high_water_mark : t -> int) =
              fun (x224 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x224) "writableHighWaterMark")
            let (get_writable_length : t -> int) =
              fun (x225 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x225) "writableLength")
            let (get_writable_object_mode : t -> bool) =
              fun (x226 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x226) "writableObjectMode")
            let (get_writable_corked : t -> int) =
              fun (x227 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x227) "writableCorked")
            let (get_destroyed : t -> bool) =
              fun (x228 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x228) "destroyed")
            let (set_destroyed : t -> bool -> unit) =
              fun (x229 : t) ->
                fun (x230 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x229) "destroyed"
                    (Ojs.bool_to_js x230)
            let (create : ?opts:WritableOptions.t -> unit -> t) =
              fun ?opts:(x231 : WritableOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "Writable")
                       (let x232 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x231 with
                         | Some x233 ->
                             ignore
                               (Ojs.call x232 "push"
                                  [|(WritableOptions.t_to_js x233)|])
                         | None -> ());
                        x232))
            let (_write :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t ->
                    callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x240 : t) ->
                fun ~chunk:(x234 : any) ->
                  fun ~encoding:(x235 : BufferEncoding.t) ->
                    fun
                      ~callback:(x236 :
                                  ?error:Error.t or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x240) "_write"
                           [|(any_to_js x234);(BufferEncoding.t_to_js x235);(
                             Ojs.fun_to_js 1
                               (fun (x237 : Ojs.t) ->
                                  x236
                                    ?error:(Ojs.option_of_js
                                              (fun (x238 : Ojs.t) ->
                                                 or_null_of_js Error.t_of_js
                                                   x238) x237) ()))|])
            let (_writev :
              t ->
                chunks:AnonymousInterface0.t list ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x247 : t) ->
                fun ~chunks:(x241 : AnonymousInterface0.t list) ->
                  fun
                    ~callback:(x243 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x247) "_writev"
                         [|(Ojs.list_to_js AnonymousInterface0.t_to_js x241);(
                           Ojs.fun_to_js 1
                             (fun (x244 : Ojs.t) ->
                                x243
                                  ?error:(Ojs.option_of_js
                                            (fun (x245 : Ojs.t) ->
                                               or_null_of_js Error.t_of_js
                                                 x245) x244) ()))|])
            let (_destroy :
              t ->
                error:Error.t or_null ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x254 : t) ->
                fun ~error:(x248 : Error.t or_null) ->
                  fun
                    ~callback:(x250 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x254) "_destroy"
                         [|(or_null_to_js Error.t_to_js x248);(Ojs.fun_to_js
                                                                 1
                                                                 (fun
                                                                    (x251 :
                                                                    Ojs.t) ->
                                                                    x250
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x252 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x252)
                                                                    x251) ()))|])
            let (_final :
              t -> callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x259 : t) ->
                fun ~callback:(x255 : ?error:Error.t or_null -> unit -> unit)
                  ->
                  ignore
                    (Ojs.call (t_to_js x259) "_final"
                       [|(Ojs.fun_to_js 1
                            (fun (x256 : Ojs.t) ->
                               x255
                                 ?error:(Ojs.option_of_js
                                           (fun (x257 : Ojs.t) ->
                                              or_null_of_js Error.t_of_js
                                                x257) x256) ()))|])
            let (write :
              t ->
                chunk:any ->
                  ?cb:(error:Error.t or_null_or_undefined -> unit) ->
                    unit -> bool)
              =
              fun (x266 : t) ->
                fun ~chunk:(x260 : any) ->
                  fun
                    ?cb:(x261 :
                          (error:Error.t or_null_or_undefined -> unit) option)
                    ->
                    fun () ->
                      Ojs.bool_of_js
                        (let x267 = t_to_js x266 in
                         Ojs.call (Ojs.get_prop_ascii x267 "write") "apply"
                           [|x267;((let x262 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x262 "push"
                                         [|(any_to_js x260)|]);
                                    (match x261 with
                                     | Some x263 ->
                                         ignore
                                           (Ojs.call x262 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun (x264 : Ojs.t) ->
                                                      x263
                                                        ~error:(or_null_or_undefined_of_js
                                                                  Error.t_of_js
                                                                  x264)))|])
                                     | None -> ());
                                    x262))|])
            let (write' :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t ->
                    ?cb:(error:Error.t or_null_or_undefined -> unit) ->
                      unit -> bool)
              =
              fun (x275 : t) ->
                fun ~chunk:(x268 : any) ->
                  fun ~encoding:(x269 : BufferEncoding.t) ->
                    fun
                      ?cb:(x270 :
                            (error:Error.t or_null_or_undefined -> unit)
                              option)
                      ->
                      fun () ->
                        Ojs.bool_of_js
                          (let x276 = t_to_js x275 in
                           Ojs.call (Ojs.get_prop_ascii x276 "write") "apply"
                             [|x276;((let x271 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x271 "push"
                                           [|(any_to_js x268)|]);
                                      ignore
                                        (Ojs.call x271 "push"
                                           [|(BufferEncoding.t_to_js x269)|]);
                                      (match x270 with
                                       | Some x272 ->
                                           ignore
                                             (Ojs.call x271 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun (x273 : Ojs.t) ->
                                                        x272
                                                          ~error:(or_null_or_undefined_of_js
                                                                    Error.t_of_js
                                                                    x273)))|])
                                       | None -> ());
                                      x271))|])
            let (set_default_encoding : t -> encoding:BufferEncoding.t -> t)
              =
              fun (x278 : t) ->
                fun ~encoding:(x277 : BufferEncoding.t) ->
                  t_of_js
                    (Ojs.call (t_to_js x278) "setDefaultEncoding"
                       [|(BufferEncoding.t_to_js x277)|])
            let (end_ : t -> ?cb:(unit -> unit) -> unit -> unit) =
              fun (x282 : t) ->
                fun ?cb:(x279 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x283 = t_to_js x282 in
                       Ojs.call (Ojs.get_prop_ascii x283 "end") "apply"
                         [|x283;((let x280 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x279 with
                                   | Some x281 ->
                                       ignore
                                         (Ojs.call x280 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x281 ()))|])
                                   | None -> ());
                                  x280))|])
            let (end_' :
              t -> chunk:any -> ?cb:(unit -> unit) -> unit -> unit) =
              fun (x288 : t) ->
                fun ~chunk:(x284 : any) ->
                  fun ?cb:(x285 : (unit -> unit) option) ->
                    fun () ->
                      ignore
                        (let x289 = t_to_js x288 in
                         Ojs.call (Ojs.get_prop_ascii x289 "end") "apply"
                           [|x289;((let x286 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x286 "push"
                                         [|(any_to_js x284)|]);
                                    (match x285 with
                                     | Some x287 ->
                                         ignore
                                           (Ojs.call x286 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun _ -> x287 ()))|])
                                     | None -> ());
                                    x286))|])
            let (end_'' :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t ->
                    ?cb:(unit -> unit) -> unit -> unit)
              =
              fun (x295 : t) ->
                fun ~chunk:(x290 : any) ->
                  fun ~encoding:(x291 : BufferEncoding.t) ->
                    fun ?cb:(x292 : (unit -> unit) option) ->
                      fun () ->
                        ignore
                          (let x296 = t_to_js x295 in
                           Ojs.call (Ojs.get_prop_ascii x296 "end") "apply"
                             [|x296;((let x293 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x293 "push"
                                           [|(any_to_js x290)|]);
                                      ignore
                                        (Ojs.call x293 "push"
                                           [|(BufferEncoding.t_to_js x291)|]);
                                      (match x292 with
                                       | Some x294 ->
                                           ignore
                                             (Ojs.call x293 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun _ -> x294 ()))|])
                                       | None -> ());
                                      x293))|])
            let (cork : t -> unit) =
              fun (x297 : t) -> ignore (Ojs.call (t_to_js x297) "cork" [||])
            let (uncork : t -> unit) =
              fun (x298 : t) ->
                ignore (Ojs.call (t_to_js x298) "uncork" [||])
            let (destroy : t -> ?error:Error.t -> unit -> unit) =
              fun (x302 : t) ->
                fun ?error:(x299 : Error.t option) ->
                  fun () ->
                    ignore
                      (let x303 = t_to_js x302 in
                       Ojs.call (Ojs.get_prop_ascii x303 "destroy") "apply"
                         [|x303;((let x300 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x299 with
                                   | Some x301 ->
                                       ignore
                                         (Ojs.call x300 "push"
                                            [|(Error.t_to_js x301)|])
                                   | None -> ());
                                  x300))|])
            let (add_listener :
              t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
              fun (x306 : t) ->
                fun ~event:(x304 : [ `close ]) ->
                  fun ~listener:(x305 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x306) "addListener"
                         [|((match x304 with
                             | `close -> Ojs.string_to_js "close"));(
                           Ojs.fun_to_js 1 (fun _ -> x305 ()))|])
            let (add_listener' :
              t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
              fun (x309 : t) ->
                fun ~event:(x307 : [ `drain ]) ->
                  fun ~listener:(x308 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x309) "addListener"
                         [|((match x307 with
                             | `drain -> Ojs.string_to_js "drain"));(
                           Ojs.fun_to_js 1 (fun _ -> x308 ()))|])
            let (add_listener'' :
              t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
              fun (x313 : t) ->
                fun ~event:(x310 : [ `error ]) ->
                  fun ~listener:(x311 : err:Error.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x313) "addListener"
                         [|((match x310 with
                             | `error -> Ojs.string_to_js "error"));(
                           Ojs.fun_to_js 1
                             (fun (x312 : Ojs.t) ->
                                x311 ~err:(Error.t_of_js x312)))|])
            let (add_listener''' :
              t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
              fun (x316 : t) ->
                fun ~event:(x314 : [ `finish ]) ->
                  fun ~listener:(x315 : unit -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x316) "addListener"
                         [|((match x314 with
                             | `finish -> Ojs.string_to_js "finish"));(
                           Ojs.fun_to_js 1 (fun _ -> x315 ()))|])
            let (add_listener'''' :
              t -> event:[ `pipe ] -> listener:(src:Readable.t -> unit) -> t)
              =
              fun (x320 : t) ->
                fun ~event:(x317 : [ `pipe ]) ->
                  fun ~listener:(x318 : src:Readable.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x320) "addListener"
                         [|((match x317 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x319 :
                                                                    Ojs.t) ->
                                                                    x318
                                                                    ~src:(
                                                                    Readable.t_of_js
                                                                    x319)))|])
            let (add_listener''''' :
              t ->
                event:[ `unpipe ] -> listener:(src:Readable.t -> unit) -> t)
              =
              fun (x324 : t) ->
                fun ~event:(x321 : [ `unpipe ]) ->
                  fun ~listener:(x322 : src:Readable.t -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x324) "addListener"
                         [|((match x321 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Ojs.fun_to_js 1
                             (fun (x323 : Ojs.t) ->
                                x322 ~src:(Readable.t_of_js x323)))|])
            let (add_listener'''''' :
              t ->
                event:symbol or_string ->
                  listener:(args:any list -> unit) -> t)
              =
              fun (x330 : t) ->
                fun ~event:(x325 : symbol or_string) ->
                  fun ~listener:(x327 : args:any list -> unit) ->
                    t_of_js
                      (Ojs.call (t_to_js x330) "addListener"
                         [|(or_string_to_js symbol_to_js x325);(Ojs.fun_to_js_args
                                                                  (fun
                                                                    (x328 :
                                                                    _) ->
                                                                    x327
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x328 0)))|])
            let (emit : t -> event:[ `close ] -> bool) =
              fun (x332 : t) ->
                fun ~event:(x331 : [ `close ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x332) "emit"
                       [|((match x331 with
                           | `close -> Ojs.string_to_js "close"))|])
            let (emit' : t -> event:[ `drain ] -> bool) =
              fun (x334 : t) ->
                fun ~event:(x333 : [ `drain ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x334) "emit"
                       [|((match x333 with
                           | `drain -> Ojs.string_to_js "drain"))|])
            let (emit'' : t -> event:[ `error ] -> err:Error.t -> bool) =
              fun (x337 : t) ->
                fun ~event:(x335 : [ `error ]) ->
                  fun ~err:(x336 : Error.t) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x337) "emit"
                         [|((match x335 with
                             | `error -> Ojs.string_to_js "error"));(
                           Error.t_to_js x336)|])
            let (emit''' : t -> event:[ `finish ] -> bool) =
              fun (x339 : t) ->
                fun ~event:(x338 : [ `finish ]) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x339) "emit"
                       [|((match x338 with
                           | `finish -> Ojs.string_to_js "finish"))|])
            let (emit'''' : t -> event:[ `pipe ] -> src:Readable.t -> bool) =
              fun (x342 : t) ->
                fun ~event:(x340 : [ `pipe ]) ->
                  fun ~src:(x341 : Readable.t) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x342) "emit"
                         [|((match x340 with
                             | `pipe -> Ojs.string_to_js "pipe"));(Readable.t_to_js
                                                                    x341)|])
            let (emit''''' :
              t -> event:[ `unpipe ] -> src:Readable.t -> bool) =
              fun (x345 : t) ->
                fun ~event:(x343 : [ `unpipe ]) ->
                  fun ~src:(x344 : Readable.t) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x345) "emit"
                         [|((match x343 with
                             | `unpipe -> Ojs.string_to_js "unpipe"));(
                           Readable.t_to_js x344)|])
            let (emit'''''' :
              t -> event:symbol or_string -> args:any list -> bool) =
              fun (x351 : t) ->
                fun ~event:(x346 : symbol or_string) ->
                  fun ~args:(x347 : any list) ->
                    Ojs.bool_of_js
                      (let x352 = t_to_js x351 in
                       Ojs.call (Ojs.get_prop_ascii x352 "emit") "apply"
                         [|x352;((let x348 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x348 "push"
                                       [|(or_string_to_js symbol_to_js x346)|]);
                                  List.iter
                                    (fun (x349 : any) ->
                                       ignore
                                         (Ojs.call x348 "push"
                                            [|(any_to_js x349)|])) x347;
                                  x348))|])
            module CloseListener =
              struct
                type t = unit -> unit
                let rec t_of_js : Ojs.t -> t =
                  fun (x354 : Ojs.t) ->
                    fun () -> ignore (Ojs.apply x354 [||])
                and t_to_js : t -> Ojs.t =
                  fun (x353 : unit -> unit) ->
                    Ojs.fun_to_js 1 (fun _ -> x353 ())
              end
            module DrainListener =
              struct
                type t = unit -> unit
                let rec t_of_js : Ojs.t -> t =
                  fun (x356 : Ojs.t) ->
                    fun () -> ignore (Ojs.apply x356 [||])
                and t_to_js : t -> Ojs.t =
                  fun (x355 : unit -> unit) ->
                    Ojs.fun_to_js 1 (fun _ -> x355 ())
              end
            module ErrorListener =
              struct
                type t = err:Error.t -> unit
                let rec t_of_js : Ojs.t -> t =
                  fun (x359 : Ojs.t) ->
                    fun ~err:(x360 : Error.t) ->
                      ignore (Ojs.apply x359 [|(Error.t_to_js x360)|])
                and t_to_js : t -> Ojs.t =
                  fun (x357 : err:Error.t -> unit) ->
                    Ojs.fun_to_js 1
                      (fun (x358 : Ojs.t) -> x357 ~err:(Error.t_of_js x358))
              end
            module FinishListener =
              struct
                type t = unit -> unit
                let rec t_of_js : Ojs.t -> t =
                  fun (x362 : Ojs.t) ->
                    fun () -> ignore (Ojs.apply x362 [||])
                and t_to_js : t -> Ojs.t =
                  fun (x361 : unit -> unit) ->
                    Ojs.fun_to_js 1 (fun _ -> x361 ())
              end
            module PipeListener =
              struct
                type t = src:Readable.t -> unit
                let rec t_of_js : Ojs.t -> t =
                  fun (x365 : Ojs.t) ->
                    fun ~src:(x366 : Readable.t) ->
                      ignore (Ojs.apply x365 [|(Readable.t_to_js x366)|])
                and t_to_js : t -> Ojs.t =
                  fun (x363 : src:Readable.t -> unit) ->
                    Ojs.fun_to_js 1
                      (fun (x364 : Ojs.t) ->
                         x363 ~src:(Readable.t_of_js x364))
              end
            module UnpipeListener =
              struct
                type t = src:Readable.t -> unit
                let rec t_of_js : Ojs.t -> t =
                  fun (x369 : Ojs.t) ->
                    fun ~src:(x370 : Readable.t) ->
                      ignore (Ojs.apply x369 [|(Readable.t_to_js x370)|])
                and t_to_js : t -> Ojs.t =
                  fun (x367 : src:Readable.t -> unit) ->
                    Ojs.fun_to_js 1
                      (fun (x368 : Ojs.t) ->
                         x367 ~src:(Readable.t_of_js x368))
              end
            type listener =
              [ `Close of CloseListener.t  | `Drain of DrainListener.t 
              | `Error of ErrorListener.t  | `Finish of FinishListener.t 
              | `Pipe of PipeListener.t  | `Unpipe of UnpipeListener.t ]
            let rec listener_to_js : listener -> Ojs.t =
              fun
                (x371 :
                  [ `Close of CloseListener.t  | `Drain of DrainListener.t 
                  | `Error of ErrorListener.t  | `Finish of FinishListener.t 
                  | `Pipe of PipeListener.t  | `Unpipe of UnpipeListener.t ])
                ->
                match x371 with
                | `Close x372 -> CloseListener.t_to_js x372
                | `Drain x373 -> DrainListener.t_to_js x373
                | `Error x374 -> ErrorListener.t_to_js x374
                | `Finish x375 -> FinishListener.t_to_js x375
                | `Pipe x376 -> PipeListener.t_to_js x376
                | `Unpipe x377 -> UnpipeListener.t_to_js x377
            let (on : t -> string -> Ojs.t -> unit) =
              fun (x382 : t) ->
                fun (x380 : string) ->
                  fun (x381 : Ojs.t) ->
                    ignore
                      (Ojs.call (t_to_js x382) "on"
                         [|(Ojs.string_to_js x380);x381|])
            let (add_listener : t -> string -> Ojs.t -> unit) =
              fun (x385 : t) ->
                fun (x383 : string) ->
                  fun (x384 : Ojs.t) ->
                    ignore
                      (Ojs.call (t_to_js x385) "addListener"
                         [|(Ojs.string_to_js x383);x384|])
            let (once : t -> string -> Ojs.t -> unit) =
              fun (x388 : t) ->
                fun (x386 : string) ->
                  fun (x387 : Ojs.t) ->
                    ignore
                      (Ojs.call (t_to_js x388) "once"
                         [|(Ojs.string_to_js x386);x387|])
            let (prepend_listener : t -> string -> Ojs.t -> unit) =
              fun (x391 : t) ->
                fun (x389 : string) ->
                  fun (x390 : Ojs.t) ->
                    ignore
                      (Ojs.call (t_to_js x391) "prependListener"
                         [|(Ojs.string_to_js x389);x390|])
            let (prepend_once_listener : t -> string -> Ojs.t -> unit) =
              fun (x394 : t) ->
                fun (x392 : string) ->
                  fun (x393 : Ojs.t) ->
                    ignore
                      (Ojs.call (t_to_js x394) "prependOnceListener"
                         [|(Ojs.string_to_js x392);x393|])
            let (remove_listener : t -> string -> Ojs.t -> unit) =
              fun (x397 : t) ->
                fun (x395 : string) ->
                  fun (x396 : Ojs.t) ->
                    ignore
                      (Ojs.call (t_to_js x397) "removeListener"
                         [|(Ojs.string_to_js x395);x396|])
            let with_listener_fn fn t =
              function
              | `Close f -> (fn t "close") @@ (CloseListener.t_to_js f)
              | `Drain f -> (fn t "drain") @@ (DrainListener.t_to_js f)
              | `Error f -> (fn t "error") @@ (ErrorListener.t_to_js f)
              | `Finish f -> (fn t "finish") @@ (FinishListener.t_to_js f)
              | `Pipe f -> (fn t "pipe") @@ (PipeListener.t_to_js f)
              | `Unpipe f -> (fn t "unpipe") @@ (UnpipeListener.t_to_js f)
            let on = with_listener_fn on
            let add_listener = with_listener_fn add_listener
            let once = with_listener_fn once
            let prepend_listener = with_listener_fn prepend_listener
            let prepend_once_listener =
              with_listener_fn prepend_once_listener
            let remove_listener = with_listener_fn remove_listener
            let (cast' : t -> WritableStream.t) =
              fun (x404 : t) -> WritableStream.t_of_js (t_to_js x404)
          end
        module DuplexOptions =
          struct
            include struct include ReadableOptions end
            let (get_allow_half_open : t -> bool) =
              fun (x405 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x405) "allowHalfOpen")
            let (set_allow_half_open : t -> bool -> unit) =
              fun (x406 : t) ->
                fun (x407 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x406) "allowHalfOpen"
                    (Ojs.bool_to_js x407)
            let (get_readable_object_mode : t -> bool) =
              fun (x408 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x408) "readableObjectMode")
            let (set_readable_object_mode : t -> bool -> unit) =
              fun (x409 : t) ->
                fun (x410 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x409) "readableObjectMode"
                    (Ojs.bool_to_js x410)
            let (get_writable_object_mode : t -> bool) =
              fun (x411 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x411) "writableObjectMode")
            let (set_writable_object_mode : t -> bool -> unit) =
              fun (x412 : t) ->
                fun (x413 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x412) "writableObjectMode"
                    (Ojs.bool_to_js x413)
            let (get_readable_high_water_mark : t -> int) =
              fun (x414 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x414) "readableHighWaterMark")
            let (set_readable_high_water_mark : t -> int -> unit) =
              fun (x415 : t) ->
                fun (x416 : int) ->
                  Ojs.set_prop_ascii (t_to_js x415) "readableHighWaterMark"
                    (Ojs.int_to_js x416)
            let (get_writable_high_water_mark : t -> int) =
              fun (x417 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x417) "writableHighWaterMark")
            let (set_writable_high_water_mark : t -> int -> unit) =
              fun (x418 : t) ->
                fun (x419 : int) ->
                  Ojs.set_prop_ascii (t_to_js x418) "writableHighWaterMark"
                    (Ojs.int_to_js x419)
            let (get_writable_corked : t -> int) =
              fun (x420 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x420) "writableCorked")
            let (set_writable_corked : t -> int -> unit) =
              fun (x421 : t) ->
                fun (x422 : int) ->
                  Ojs.set_prop_ascii (t_to_js x421) "writableCorked"
                    (Ojs.int_to_js x422)
            let (read : t -> this:stream -> size:int -> unit) =
              fun (x425 : t) ->
                fun ~this:(x423 : stream) ->
                  fun ~size:(x424 : int) ->
                    ignore
                      (Ojs.call (t_to_js x425) "read"
                         [|(stream_to_js x423);(Ojs.int_to_js x424)|])
            let (write :
              t ->
                this:stream ->
                  chunk:any ->
                    encoding:BufferEncoding.t ->
                      callback:(?error:Error.t or_null -> unit -> unit) ->
                        unit)
              =
              fun (x433 : t) ->
                fun ~this:(x426 : stream) ->
                  fun ~chunk:(x427 : any) ->
                    fun ~encoding:(x428 : BufferEncoding.t) ->
                      fun
                        ~callback:(x429 :
                                    ?error:Error.t or_null -> unit -> unit)
                        ->
                        ignore
                          (Ojs.call (t_to_js x433) "write"
                             [|(stream_to_js x426);(any_to_js x427);(
                               BufferEncoding.t_to_js x428);(Ojs.fun_to_js 1
                                                               (fun
                                                                  (x430 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x429
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x431 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x431)
                                                                    x430) ()))|])
            let (writev :
              t ->
                this:stream ->
                  chunks:AnonymousInterface0.t list ->
                    callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x441 : t) ->
                fun ~this:(x434 : stream) ->
                  fun ~chunks:(x435 : AnonymousInterface0.t list) ->
                    fun
                      ~callback:(x437 :
                                  ?error:Error.t or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x441) "writev"
                           [|(stream_to_js x434);(Ojs.list_to_js
                                                    AnonymousInterface0.t_to_js
                                                    x435);(Ojs.fun_to_js 1
                                                             (fun
                                                                (x438 :
                                                                  Ojs.t)
                                                                ->
                                                                x437
                                                                  ?error:(
                                                                  Ojs.option_of_js
                                                                    (
                                                                    fun
                                                                    (x439 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x439)
                                                                    x438) ()))|])
            let (final :
              t ->
                this:stream ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x447 : t) ->
                fun ~this:(x442 : stream) ->
                  fun
                    ~callback:(x443 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x447) "final"
                         [|(stream_to_js x442);(Ojs.fun_to_js 1
                                                  (fun (x444 : Ojs.t) ->
                                                     x443
                                                       ?error:(Ojs.option_of_js
                                                                 (fun
                                                                    (x445 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x445)
                                                                 x444) ()))|])
            let (destroy :
              t ->
                this:stream ->
                  error:Error.t or_null ->
                    callback:(error:Error.t or_null -> unit) -> unit)
              =
              fun (x454 : t) ->
                fun ~this:(x448 : stream) ->
                  fun ~error:(x449 : Error.t or_null) ->
                    fun ~callback:(x451 : error:Error.t or_null -> unit) ->
                      ignore
                        (Ojs.call (t_to_js x454) "destroy"
                           [|(stream_to_js x448);(or_null_to_js Error.t_to_js
                                                    x449);(Ojs.fun_to_js 1
                                                             (fun
                                                                (x452 :
                                                                  Ojs.t)
                                                                ->
                                                                x451
                                                                  ~error:(
                                                                  or_null_of_js
                                                                    Error.t_of_js
                                                                    x452)))|])
            let (cast' : t -> WritableOptions.t) =
              fun (x455 : t) -> WritableOptions.t_of_js (t_to_js x455)
          end
        module Duplex =
          struct
            include struct include Stream end
            let (get_writable : t -> bool) =
              fun (x456 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x456) "writable")
            let (get_writable_ended : t -> bool) =
              fun (x457 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x457) "writableEnded")
            let (get_writable_finished : t -> bool) =
              fun (x458 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x458) "writableFinished")
            let (get_writable_high_water_mark : t -> int) =
              fun (x459 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x459) "writableHighWaterMark")
            let (get_writable_length : t -> int) =
              fun (x460 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x460) "writableLength")
            let (get_writable_object_mode : t -> bool) =
              fun (x461 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x461) "writableObjectMode")
            let (get_writable_corked : t -> int) =
              fun (x462 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x462) "writableCorked")
            let (create : ?opts:DuplexOptions.t -> unit -> t) =
              fun ?opts:(x463 : DuplexOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "Duplex")
                       (let x464 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x463 with
                         | Some x465 ->
                             ignore
                               (Ojs.call x464 "push"
                                  [|(DuplexOptions.t_to_js x465)|])
                         | None -> ());
                        x464))
            let (_write :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t ->
                    callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x472 : t) ->
                fun ~chunk:(x466 : any) ->
                  fun ~encoding:(x467 : BufferEncoding.t) ->
                    fun
                      ~callback:(x468 :
                                  ?error:Error.t or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x472) "_write"
                           [|(any_to_js x466);(BufferEncoding.t_to_js x467);(
                             Ojs.fun_to_js 1
                               (fun (x469 : Ojs.t) ->
                                  x468
                                    ?error:(Ojs.option_of_js
                                              (fun (x470 : Ojs.t) ->
                                                 or_null_of_js Error.t_of_js
                                                   x470) x469) ()))|])
            let (_writev :
              t ->
                chunks:AnonymousInterface0.t list ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x479 : t) ->
                fun ~chunks:(x473 : AnonymousInterface0.t list) ->
                  fun
                    ~callback:(x475 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x479) "_writev"
                         [|(Ojs.list_to_js AnonymousInterface0.t_to_js x473);(
                           Ojs.fun_to_js 1
                             (fun (x476 : Ojs.t) ->
                                x475
                                  ?error:(Ojs.option_of_js
                                            (fun (x477 : Ojs.t) ->
                                               or_null_of_js Error.t_of_js
                                                 x477) x476) ()))|])
            let (_destroy :
              t ->
                error:Error.t or_null ->
                  callback:(error:Error.t or_null -> unit) -> unit)
              =
              fun (x485 : t) ->
                fun ~error:(x480 : Error.t or_null) ->
                  fun ~callback:(x482 : error:Error.t or_null -> unit) ->
                    ignore
                      (Ojs.call (t_to_js x485) "_destroy"
                         [|(or_null_to_js Error.t_to_js x480);(Ojs.fun_to_js
                                                                 1
                                                                 (fun
                                                                    (x483 :
                                                                    Ojs.t) ->
                                                                    x482
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x483)))|])
            let (_final :
              t -> callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x490 : t) ->
                fun ~callback:(x486 : ?error:Error.t or_null -> unit -> unit)
                  ->
                  ignore
                    (Ojs.call (t_to_js x490) "_final"
                       [|(Ojs.fun_to_js 1
                            (fun (x487 : Ojs.t) ->
                               x486
                                 ?error:(Ojs.option_of_js
                                           (fun (x488 : Ojs.t) ->
                                              or_null_of_js Error.t_of_js
                                                x488) x487) ()))|])
            let (write :
              t ->
                chunk:any ->
                  ?encoding:BufferEncoding.t ->
                    ?cb:(error:Error.t or_null_or_undefined -> unit) ->
                      unit -> bool)
              =
              fun (x499 : t) ->
                fun ~chunk:(x491 : any) ->
                  fun ?encoding:(x492 : BufferEncoding.t option) ->
                    fun
                      ?cb:(x493 :
                            (error:Error.t or_null_or_undefined -> unit)
                              option)
                      ->
                      fun () ->
                        Ojs.bool_of_js
                          (let x500 = t_to_js x499 in
                           Ojs.call (Ojs.get_prop_ascii x500 "write") "apply"
                             [|x500;((let x494 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x494 "push"
                                           [|(any_to_js x491)|]);
                                      (match x492 with
                                       | Some x498 ->
                                           ignore
                                             (Ojs.call x494 "push"
                                                [|(BufferEncoding.t_to_js
                                                     x498)|])
                                       | None -> ());
                                      (match x493 with
                                       | Some x495 ->
                                           ignore
                                             (Ojs.call x494 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun (x496 : Ojs.t) ->
                                                        x495
                                                          ~error:(or_null_or_undefined_of_js
                                                                    Error.t_of_js
                                                                    x496)))|])
                                       | None -> ());
                                      x494))|])
            let (write' :
              t ->
                chunk:any ->
                  ?cb:(error:Error.t or_null_or_undefined -> unit) ->
                    unit -> bool)
              =
              fun (x507 : t) ->
                fun ~chunk:(x501 : any) ->
                  fun
                    ?cb:(x502 :
                          (error:Error.t or_null_or_undefined -> unit) option)
                    ->
                    fun () ->
                      Ojs.bool_of_js
                        (let x508 = t_to_js x507 in
                         Ojs.call (Ojs.get_prop_ascii x508 "write") "apply"
                           [|x508;((let x503 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x503 "push"
                                         [|(any_to_js x501)|]);
                                    (match x502 with
                                     | Some x504 ->
                                         ignore
                                           (Ojs.call x503 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun (x505 : Ojs.t) ->
                                                      x504
                                                        ~error:(or_null_or_undefined_of_js
                                                                  Error.t_of_js
                                                                  x505)))|])
                                     | None -> ());
                                    x503))|])
            let (set_default_encoding : t -> encoding:BufferEncoding.t -> t)
              =
              fun (x510 : t) ->
                fun ~encoding:(x509 : BufferEncoding.t) ->
                  t_of_js
                    (Ojs.call (t_to_js x510) "setDefaultEncoding"
                       [|(BufferEncoding.t_to_js x509)|])
            let (end_ : t -> ?cb:(unit -> unit) -> unit -> unit) =
              fun (x514 : t) ->
                fun ?cb:(x511 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x515 = t_to_js x514 in
                       Ojs.call (Ojs.get_prop_ascii x515 "end") "apply"
                         [|x515;((let x512 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  (match x511 with
                                   | Some x513 ->
                                       ignore
                                         (Ojs.call x512 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x513 ()))|])
                                   | None -> ());
                                  x512))|])
            let (end_' :
              t -> chunk:any -> ?cb:(unit -> unit) -> unit -> unit) =
              fun (x520 : t) ->
                fun ~chunk:(x516 : any) ->
                  fun ?cb:(x517 : (unit -> unit) option) ->
                    fun () ->
                      ignore
                        (let x521 = t_to_js x520 in
                         Ojs.call (Ojs.get_prop_ascii x521 "end") "apply"
                           [|x521;((let x518 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x518 "push"
                                         [|(any_to_js x516)|]);
                                    (match x517 with
                                     | Some x519 ->
                                         ignore
                                           (Ojs.call x518 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun _ -> x519 ()))|])
                                     | None -> ());
                                    x518))|])
            let (end_'' :
              t ->
                chunk:any ->
                  ?encoding:BufferEncoding.t ->
                    ?cb:(unit -> unit) -> unit -> unit)
              =
              fun (x528 : t) ->
                fun ~chunk:(x522 : any) ->
                  fun ?encoding:(x523 : BufferEncoding.t option) ->
                    fun ?cb:(x524 : (unit -> unit) option) ->
                      fun () ->
                        ignore
                          (let x529 = t_to_js x528 in
                           Ojs.call (Ojs.get_prop_ascii x529 "end") "apply"
                             [|x529;((let x525 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x525 "push"
                                           [|(any_to_js x522)|]);
                                      (match x523 with
                                       | Some x527 ->
                                           ignore
                                             (Ojs.call x525 "push"
                                                [|(BufferEncoding.t_to_js
                                                     x527)|])
                                       | None -> ());
                                      (match x524 with
                                       | Some x526 ->
                                           ignore
                                             (Ojs.call x525 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun _ -> x526 ()))|])
                                       | None -> ());
                                      x525))|])
            let (cork : t -> unit) =
              fun (x530 : t) -> ignore (Ojs.call (t_to_js x530) "cork" [||])
            let (uncork : t -> unit) =
              fun (x531 : t) ->
                ignore (Ojs.call (t_to_js x531) "uncork" [||])
            let (cast' : t -> Writable.t) =
              fun (x532 : t) -> Writable.t_of_js (t_to_js x532)
          end
        module TransformCallback =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x534 : Ojs.t) -> x534
            and t_to_js : t -> Ojs.t = fun (x533 : Ojs.t) -> x533
            let (apply :
              t -> ?error:Error.t or_null -> ?data:any -> unit -> unit) =
              fun (x541 : t) ->
                fun ?error:(x535 : Error.t or_null option) ->
                  fun ?data:(x536 : any option) ->
                    fun () ->
                      ignore
                        (Ojs.call (t_to_js x541) "apply"
                           [|Ojs.null;((let x537 =
                                          Ojs.new_obj
                                            (Ojs.get_prop_ascii Ojs.global
                                               "Array") [||] in
                                        (match x535 with
                                         | Some x539 ->
                                             ignore
                                               (Ojs.call x537 "push"
                                                  [|(or_null_to_js
                                                       Error.t_to_js x539)|])
                                         | None -> ());
                                        (match x536 with
                                         | Some x538 ->
                                             ignore
                                               (Ojs.call x537 "push"
                                                  [|(any_to_js x538)|])
                                         | None -> ());
                                        x537))|])
          end
        module TransformOptions =
          struct
            include struct include DuplexOptions end
            let (read : t -> this:stream -> size:int -> unit) =
              fun (x544 : t) ->
                fun ~this:(x542 : stream) ->
                  fun ~size:(x543 : int) ->
                    ignore
                      (Ojs.call (t_to_js x544) "read"
                         [|(stream_to_js x542);(Ojs.int_to_js x543)|])
            let (write :
              t ->
                this:stream ->
                  chunk:any ->
                    encoding:BufferEncoding.t ->
                      callback:(?error:Error.t or_null -> unit -> unit) ->
                        unit)
              =
              fun (x552 : t) ->
                fun ~this:(x545 : stream) ->
                  fun ~chunk:(x546 : any) ->
                    fun ~encoding:(x547 : BufferEncoding.t) ->
                      fun
                        ~callback:(x548 :
                                    ?error:Error.t or_null -> unit -> unit)
                        ->
                        ignore
                          (Ojs.call (t_to_js x552) "write"
                             [|(stream_to_js x545);(any_to_js x546);(
                               BufferEncoding.t_to_js x547);(Ojs.fun_to_js 1
                                                               (fun
                                                                  (x549 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x548
                                                                    ?error:(
                                                                    Ojs.option_of_js
                                                                    (fun
                                                                    (x550 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x550)
                                                                    x549) ()))|])
            let (writev :
              t ->
                this:stream ->
                  chunks:AnonymousInterface0.t list ->
                    callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x560 : t) ->
                fun ~this:(x553 : stream) ->
                  fun ~chunks:(x554 : AnonymousInterface0.t list) ->
                    fun
                      ~callback:(x556 :
                                  ?error:Error.t or_null -> unit -> unit)
                      ->
                      ignore
                        (Ojs.call (t_to_js x560) "writev"
                           [|(stream_to_js x553);(Ojs.list_to_js
                                                    AnonymousInterface0.t_to_js
                                                    x554);(Ojs.fun_to_js 1
                                                             (fun
                                                                (x557 :
                                                                  Ojs.t)
                                                                ->
                                                                x556
                                                                  ?error:(
                                                                  Ojs.option_of_js
                                                                    (
                                                                    fun
                                                                    (x558 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x558)
                                                                    x557) ()))|])
            let (final :
              t ->
                this:stream ->
                  callback:(?error:Error.t or_null -> unit -> unit) -> unit)
              =
              fun (x566 : t) ->
                fun ~this:(x561 : stream) ->
                  fun
                    ~callback:(x562 : ?error:Error.t or_null -> unit -> unit)
                    ->
                    ignore
                      (Ojs.call (t_to_js x566) "final"
                         [|(stream_to_js x561);(Ojs.fun_to_js 1
                                                  (fun (x563 : Ojs.t) ->
                                                     x562
                                                       ?error:(Ojs.option_of_js
                                                                 (fun
                                                                    (x564 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x564)
                                                                 x563) ()))|])
            let (destroy :
              t ->
                this:stream ->
                  error:Error.t or_null ->
                    callback:(error:Error.t or_null -> unit) -> unit)
              =
              fun (x573 : t) ->
                fun ~this:(x567 : stream) ->
                  fun ~error:(x568 : Error.t or_null) ->
                    fun ~callback:(x570 : error:Error.t or_null -> unit) ->
                      ignore
                        (Ojs.call (t_to_js x573) "destroy"
                           [|(stream_to_js x567);(or_null_to_js Error.t_to_js
                                                    x568);(Ojs.fun_to_js 1
                                                             (fun
                                                                (x571 :
                                                                  Ojs.t)
                                                                ->
                                                                x570
                                                                  ~error:(
                                                                  or_null_of_js
                                                                    Error.t_of_js
                                                                    x571)))|])
            let (transform :
              t ->
                this:stream ->
                  chunk:any ->
                    encoding:BufferEncoding.t ->
                      callback:TransformCallback.t -> unit)
              =
              fun (x578 : t) ->
                fun ~this:(x574 : stream) ->
                  fun ~chunk:(x575 : any) ->
                    fun ~encoding:(x576 : BufferEncoding.t) ->
                      fun ~callback:(x577 : TransformCallback.t) ->
                        ignore
                          (Ojs.call (t_to_js x578) "transform"
                             [|(stream_to_js x574);(any_to_js x575);(
                               BufferEncoding.t_to_js x576);(TransformCallback.t_to_js
                                                               x577)|])
            let (flush :
              t -> this:stream -> callback:TransformCallback.t -> unit) =
              fun (x581 : t) ->
                fun ~this:(x579 : stream) ->
                  fun ~callback:(x580 : TransformCallback.t) ->
                    ignore
                      (Ojs.call (t_to_js x581) "flush"
                         [|(stream_to_js x579);(TransformCallback.t_to_js
                                                  x580)|])
          end
        module Transform =
          struct
            include struct include Duplex end
            let (create : ?opts:TransformOptions.t -> unit -> t) =
              fun ?opts:(x582 : TransformOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "Transform")
                       (let x583 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x582 with
                         | Some x584 ->
                             ignore
                               (Ojs.call x583 "push"
                                  [|(TransformOptions.t_to_js x584)|])
                         | None -> ());
                        x583))
            let (_transform :
              t ->
                chunk:any ->
                  encoding:BufferEncoding.t ->
                    callback:TransformCallback.t -> unit)
              =
              fun (x588 : t) ->
                fun ~chunk:(x585 : any) ->
                  fun ~encoding:(x586 : BufferEncoding.t) ->
                    fun ~callback:(x587 : TransformCallback.t) ->
                      ignore
                        (Ojs.call (t_to_js x588) "_transform"
                           [|(any_to_js x585);(BufferEncoding.t_to_js x586);(
                             TransformCallback.t_to_js x587)|])
            let (_flush : t -> callback:TransformCallback.t -> unit) =
              fun (x590 : t) ->
                fun ~callback:(x589 : TransformCallback.t) ->
                  ignore
                    (Ojs.call (t_to_js x590) "_flush"
                       [|(TransformCallback.t_to_js x589)|])
          end
        module PassThrough = struct include struct include Transform end end
        module FinishedOptions =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x592 : Ojs.t) -> x592
            and t_to_js : t -> Ojs.t = fun (x591 : Ojs.t) -> x591
            let (get_error : t -> bool) =
              fun (x593 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x593) "error")
            let (set_error : t -> bool -> unit) =
              fun (x594 : t) ->
                fun (x595 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x594) "error"
                    (Ojs.bool_to_js x595)
            let (get_readable : t -> bool) =
              fun (x596 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x596) "readable")
            let (set_readable : t -> bool -> unit) =
              fun (x597 : t) ->
                fun (x598 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x597) "readable"
                    (Ojs.bool_to_js x598)
            let (get_writable : t -> bool) =
              fun (x599 : t) ->
                Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x599) "writable")
            let (set_writable : t -> bool -> unit) =
              fun (x600 : t) ->
                fun (x601 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x600) "writable"
                    (Ojs.bool_to_js x601)
          end
        let (finished :
          stream:(ReadWriteStream.t, ReadableStream.t, WritableStream.t)
            union3 ->
            options:FinishedOptions.t ->
              callback:(?err:ErrnoException.t or_null -> unit -> unit) ->
                unit -> unit)
          =
          fun
            ~stream:(x602 :
                      (ReadWriteStream.t, ReadableStream.t, WritableStream.t)
                        union3)
            ->
            fun ~options:(x606 : FinishedOptions.t) ->
              fun
                ~callback:(x607 :
                            ?err:ErrnoException.t or_null -> unit -> unit)
                ->
                fun () ->
                  ignore
                    (Ojs.apply
                       (Ojs.call
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "finished"
                          [|(union3_to_js ReadWriteStream.t_to_js
                               ReadableStream.t_to_js WritableStream.t_to_js
                               x602);(FinishedOptions.t_to_js x606);(
                            Ojs.fun_to_js 1
                              (fun (x608 : Ojs.t) ->
                                 x607
                                   ?err:(Ojs.option_of_js
                                           (fun (x609 : Ojs.t) ->
                                              or_null_of_js
                                                ErrnoException.t_of_js x609)
                                           x608) ()))|]) [||])
        let (finished :
          stream:(ReadWriteStream.t, ReadableStream.t, WritableStream.t)
            union3 ->
            callback:(?err:ErrnoException.t or_null -> unit -> unit) ->
              unit -> unit)
          =
          fun
            ~stream:(x611 :
                      (ReadWriteStream.t, ReadableStream.t, WritableStream.t)
                        union3)
            ->
            fun
              ~callback:(x615 :
                          ?err:ErrnoException.t or_null -> unit -> unit)
              ->
              fun () ->
                ignore
                  (Ojs.apply
                     (Ojs.call (Ojs.get_prop_ascii Import.stream "internal")
                        "finished"
                        [|(union3_to_js ReadWriteStream.t_to_js
                             ReadableStream.t_to_js WritableStream.t_to_js
                             x611);(Ojs.fun_to_js 1
                                      (fun (x616 : Ojs.t) ->
                                         x615
                                           ?err:(Ojs.option_of_js
                                                   (fun (x617 : Ojs.t) ->
                                                      or_null_of_js
                                                        ErrnoException.t_of_js
                                                        x617) x616) ()))|])
                     [||])
        module Finished =
          struct
            let (__promisify__ :
              stream:(ReadWriteStream.t, ReadableStream.t, WritableStream.t)
                union3 ->
                ?options:FinishedOptions.t -> unit -> unit Promise.t)
              =
              fun
                ~stream:(x619 :
                          (ReadWriteStream.t, ReadableStream.t,
                            WritableStream.t) union3)
                ->
                fun ?options:(x620 : FinishedOptions.t option) ->
                  fun () ->
                    Promise.t_of_js Ojs.unit_of_js
                      (let x626 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Import.stream "internal")
                           "finished" in
                       Ojs.call (Ojs.get_prop_ascii x626 "__promisify__")
                         "apply"
                         [|x626;((let x621 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x621 "push"
                                       [|(union3_to_js
                                            ReadWriteStream.t_to_js
                                            ReadableStream.t_to_js
                                            WritableStream.t_to_js x619)|]);
                                  (match x620 with
                                   | Some x622 ->
                                       ignore
                                         (Ojs.call x621 "push"
                                            [|(FinishedOptions.t_to_js x622)|])
                                   | None -> ());
                                  x621))|])
          end
        let (pipeline :
          stream1:ReadableStream.t ->
            stream2:'T ->
              ?callback:(err:ErrnoException.t or_null -> unit) -> unit -> 'T)
          =
          fun ~stream1:(x628 : ReadableStream.t) ->
            fun ~stream2:(x629 : 'T) ->
              fun
                ?callback:(x630 :
                            (err:ErrnoException.t or_null -> unit) option)
                ->
                fun () ->
                  Obj.magic
                    (let x635 = Ojs.get_prop_ascii Import.stream "internal" in
                     Ojs.call (Ojs.get_prop_ascii x635 "pipeline") "apply"
                       [|x635;((let x631 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x631 "push"
                                     [|(ReadableStream.t_to_js x628)|]);
                                ignore
                                  (Ojs.call x631 "push" [|(Obj.magic x629)|]);
                                (match x630 with
                                 | Some x632 ->
                                     ignore
                                       (Ojs.call x631 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun (x633 : Ojs.t) ->
                                                  x632
                                                    ~err:(or_null_of_js
                                                            ErrnoException.t_of_js
                                                            x633)))|])
                                 | None -> ());
                                x631))|])
        let (pipeline :
          stream1:ReadableStream.t ->
            stream2:ReadWriteStream.t ->
              stream3:'T ->
                ?callback:(err:ErrnoException.t or_null -> unit) ->
                  unit -> 'T)
          =
          fun ~stream1:(x636 : ReadableStream.t) ->
            fun ~stream2:(x637 : ReadWriteStream.t) ->
              fun ~stream3:(x638 : 'T) ->
                fun
                  ?callback:(x639 :
                              (err:ErrnoException.t or_null -> unit) option)
                  ->
                  fun () ->
                    Obj.magic
                      (let x644 = Ojs.get_prop_ascii Import.stream "internal" in
                       Ojs.call (Ojs.get_prop_ascii x644 "pipeline") "apply"
                         [|x644;((let x640 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x640 "push"
                                       [|(ReadableStream.t_to_js x636)|]);
                                  ignore
                                    (Ojs.call x640 "push"
                                       [|(ReadWriteStream.t_to_js x637)|]);
                                  ignore
                                    (Ojs.call x640 "push"
                                       [|(Obj.magic x638)|]);
                                  (match x639 with
                                   | Some x641 ->
                                       ignore
                                         (Ojs.call x640 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun (x642 : Ojs.t) ->
                                                    x641
                                                      ~err:(or_null_of_js
                                                              ErrnoException.t_of_js
                                                              x642)))|])
                                   | None -> ());
                                  x640))|])
        let (pipeline :
          stream1:ReadableStream.t ->
            stream2:ReadWriteStream.t ->
              stream3:ReadWriteStream.t ->
                stream4:'T ->
                  ?callback:(err:ErrnoException.t or_null -> unit) ->
                    unit -> 'T)
          =
          fun ~stream1:(x645 : ReadableStream.t) ->
            fun ~stream2:(x646 : ReadWriteStream.t) ->
              fun ~stream3:(x647 : ReadWriteStream.t) ->
                fun ~stream4:(x648 : 'T) ->
                  fun
                    ?callback:(x649 :
                                (err:ErrnoException.t or_null -> unit) option)
                    ->
                    fun () ->
                      Obj.magic
                        (let x654 =
                           Ojs.get_prop_ascii Import.stream "internal" in
                         Ojs.call (Ojs.get_prop_ascii x654 "pipeline")
                           "apply"
                           [|x654;((let x650 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x650 "push"
                                         [|(ReadableStream.t_to_js x645)|]);
                                    ignore
                                      (Ojs.call x650 "push"
                                         [|(ReadWriteStream.t_to_js x646)|]);
                                    ignore
                                      (Ojs.call x650 "push"
                                         [|(ReadWriteStream.t_to_js x647)|]);
                                    ignore
                                      (Ojs.call x650 "push"
                                         [|(Obj.magic x648)|]);
                                    (match x649 with
                                     | Some x651 ->
                                         ignore
                                           (Ojs.call x650 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun (x652 : Ojs.t) ->
                                                      x651
                                                        ~err:(or_null_of_js
                                                                ErrnoException.t_of_js
                                                                x652)))|])
                                     | None -> ());
                                    x650))|])
        let (pipeline :
          stream1:ReadableStream.t ->
            stream2:ReadWriteStream.t ->
              stream3:ReadWriteStream.t ->
                stream4:ReadWriteStream.t ->
                  stream5:'T ->
                    ?callback:(err:ErrnoException.t or_null -> unit) ->
                      unit -> 'T)
          =
          fun ~stream1:(x655 : ReadableStream.t) ->
            fun ~stream2:(x656 : ReadWriteStream.t) ->
              fun ~stream3:(x657 : ReadWriteStream.t) ->
                fun ~stream4:(x658 : ReadWriteStream.t) ->
                  fun ~stream5:(x659 : 'T) ->
                    fun
                      ?callback:(x660 :
                                  (err:ErrnoException.t or_null -> unit)
                                    option)
                      ->
                      fun () ->
                        Obj.magic
                          (let x665 =
                             Ojs.get_prop_ascii Import.stream "internal" in
                           Ojs.call (Ojs.get_prop_ascii x665 "pipeline")
                             "apply"
                             [|x665;((let x661 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x661 "push"
                                           [|(ReadableStream.t_to_js x655)|]);
                                      ignore
                                        (Ojs.call x661 "push"
                                           [|(ReadWriteStream.t_to_js x656)|]);
                                      ignore
                                        (Ojs.call x661 "push"
                                           [|(ReadWriteStream.t_to_js x657)|]);
                                      ignore
                                        (Ojs.call x661 "push"
                                           [|(ReadWriteStream.t_to_js x658)|]);
                                      ignore
                                        (Ojs.call x661 "push"
                                           [|(Obj.magic x659)|]);
                                      (match x660 with
                                       | Some x662 ->
                                           ignore
                                             (Ojs.call x661 "push"
                                                [|(Ojs.fun_to_js 1
                                                     (fun (x663 : Ojs.t) ->
                                                        x662
                                                          ~err:(or_null_of_js
                                                                  ErrnoException.t_of_js
                                                                  x663)))|])
                                       | None -> ());
                                      x661))|])
        let (pipeline :
          streams:(ReadWriteStream.t, ReadableStream.t, WritableStream.t)
            union3 list ->
            ?callback:(err:ErrnoException.t or_null -> unit) ->
              unit -> WritableStream.t)
          =
          fun
            ~streams:(x666 :
                       (ReadWriteStream.t, ReadableStream.t,
                         WritableStream.t) union3 list)
            ->
            fun
              ?callback:(x667 :
                          (err:ErrnoException.t or_null -> unit) option)
              ->
              fun () ->
                WritableStream.t_of_js
                  (let x676 = Ojs.get_prop_ascii Import.stream "internal" in
                   Ojs.call (Ojs.get_prop_ascii x676 "pipeline") "apply"
                     [|x676;((let x668 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x668 "push"
                                   [|(Ojs.list_to_js
                                        (fun
                                           (x672 :
                                             (ReadWriteStream.t,
                                               ReadableStream.t,
                                               WritableStream.t) union3)
                                           ->
                                           union3_to_js
                                             ReadWriteStream.t_to_js
                                             ReadableStream.t_to_js
                                             WritableStream.t_to_js x672)
                                        x666)|]);
                              (match x667 with
                               | Some x669 ->
                                   ignore
                                     (Ojs.call x668 "push"
                                        [|(Ojs.fun_to_js 1
                                             (fun (x670 : Ojs.t) ->
                                                x669
                                                  ~err:(or_null_of_js
                                                          ErrnoException.t_of_js
                                                          x670)))|])
                               | None -> ());
                              x668))|])
        let (pipeline :
          stream1:ReadableStream.t ->
            stream2:(ReadWriteStream.t, WritableStream.t) union2 ->
              streams:any list -> WritableStream.t)
          =
          fun ~stream1:(x677 : ReadableStream.t) ->
            fun
              ~stream2:(x678 : (ReadWriteStream.t, WritableStream.t) union2)
              ->
              fun ~streams:(x679 : any list) ->
                WritableStream.t_of_js
                  (let x684 = Ojs.get_prop_ascii Import.stream "internal" in
                   Ojs.call (Ojs.get_prop_ascii x684 "pipeline") "apply"
                     [|x684;((let x680 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x680 "push"
                                   [|(ReadableStream.t_to_js x677)|]);
                              ignore
                                (Ojs.call x680 "push"
                                   [|(union2_to_js ReadWriteStream.t_to_js
                                        WritableStream.t_to_js x678)|]);
                              List.iter
                                (fun (x681 : any) ->
                                   ignore
                                     (Ojs.call x680 "push"
                                        [|(any_to_js x681)|])) x679;
                              x680))|])
        module Pipeline =
          struct
            let (__promisify__ :
              stream1:ReadableStream.t ->
                stream2:WritableStream.t -> unit Promise.t)
              =
              fun ~stream1:(x685 : ReadableStream.t) ->
                fun ~stream2:(x686 : WritableStream.t) ->
                  Promise.t_of_js Ojs.unit_of_js
                    (Ojs.call
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.stream "internal")
                          "pipeline") "__promisify__"
                       [|(ReadableStream.t_to_js x685);(WritableStream.t_to_js
                                                          x686)|])
            let (__promisify__ :
              stream1:ReadableStream.t ->
                stream2:ReadWriteStream.t ->
                  stream3:WritableStream.t -> unit Promise.t)
              =
              fun ~stream1:(x688 : ReadableStream.t) ->
                fun ~stream2:(x689 : ReadWriteStream.t) ->
                  fun ~stream3:(x690 : WritableStream.t) ->
                    Promise.t_of_js Ojs.unit_of_js
                      (Ojs.call
                         (Ojs.get_prop_ascii
                            (Ojs.get_prop_ascii Import.stream "internal")
                            "pipeline") "__promisify__"
                         [|(ReadableStream.t_to_js x688);(ReadWriteStream.t_to_js
                                                            x689);(WritableStream.t_to_js
                                                                    x690)|])
            let (__promisify__ :
              stream1:ReadableStream.t ->
                stream2:ReadWriteStream.t ->
                  stream3:ReadWriteStream.t ->
                    stream4:WritableStream.t -> unit Promise.t)
              =
              fun ~stream1:(x692 : ReadableStream.t) ->
                fun ~stream2:(x693 : ReadWriteStream.t) ->
                  fun ~stream3:(x694 : ReadWriteStream.t) ->
                    fun ~stream4:(x695 : WritableStream.t) ->
                      Promise.t_of_js Ojs.unit_of_js
                        (Ojs.call
                           (Ojs.get_prop_ascii
                              (Ojs.get_prop_ascii Import.stream "internal")
                              "pipeline") "__promisify__"
                           [|(ReadableStream.t_to_js x692);(ReadWriteStream.t_to_js
                                                              x693);(
                             ReadWriteStream.t_to_js x694);(WritableStream.t_to_js
                                                              x695)|])
            let (__promisify__ :
              stream1:ReadableStream.t ->
                stream2:ReadWriteStream.t ->
                  stream3:ReadWriteStream.t ->
                    stream4:ReadWriteStream.t ->
                      stream5:WritableStream.t -> unit Promise.t)
              =
              fun ~stream1:(x697 : ReadableStream.t) ->
                fun ~stream2:(x698 : ReadWriteStream.t) ->
                  fun ~stream3:(x699 : ReadWriteStream.t) ->
                    fun ~stream4:(x700 : ReadWriteStream.t) ->
                      fun ~stream5:(x701 : WritableStream.t) ->
                        Promise.t_of_js Ojs.unit_of_js
                          (Ojs.call
                             (Ojs.get_prop_ascii
                                (Ojs.get_prop_ascii Import.stream "internal")
                                "pipeline") "__promisify__"
                             [|(ReadableStream.t_to_js x697);(ReadWriteStream.t_to_js
                                                                x698);(
                               ReadWriteStream.t_to_js x699);(ReadWriteStream.t_to_js
                                                                x700);(
                               WritableStream.t_to_js x701)|])
            let (__promisify__ :
              streams:(ReadWriteStream.t, ReadableStream.t, WritableStream.t)
                union3 list -> unit Promise.t)
              =
              fun
                ~streams:(x703 :
                           (ReadWriteStream.t, ReadableStream.t,
                             WritableStream.t) union3 list)
                ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Import.stream "internal")
                        "pipeline") "__promisify__"
                     [|(Ojs.list_to_js
                          (fun
                             (x704 :
                               (ReadWriteStream.t, ReadableStream.t,
                                 WritableStream.t) union3)
                             ->
                             union3_to_js ReadWriteStream.t_to_js
                               ReadableStream.t_to_js WritableStream.t_to_js
                               x704) x703)|])
            let (__promisify__ :
              stream1:ReadableStream.t ->
                stream2:(ReadWriteStream.t, WritableStream.t) union2 ->
                  streams:any list -> unit Promise.t)
              =
              fun ~stream1:(x709 : ReadableStream.t) ->
                fun
                  ~stream2:(x710 :
                             (ReadWriteStream.t, WritableStream.t) union2)
                  ->
                  fun ~streams:(x711 : any list) ->
                    Promise.t_of_js Ojs.unit_of_js
                      (let x716 =
                         Ojs.get_prop_ascii
                           (Ojs.get_prop_ascii Import.stream "internal")
                           "pipeline" in
                       Ojs.call (Ojs.get_prop_ascii x716 "__promisify__")
                         "apply"
                         [|x716;((let x712 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x712 "push"
                                       [|(ReadableStream.t_to_js x709)|]);
                                  ignore
                                    (Ojs.call x712 "push"
                                       [|(union2_to_js
                                            ReadWriteStream.t_to_js
                                            WritableStream.t_to_js x710)|]);
                                  List.iter
                                    (fun (x713 : any) ->
                                       ignore
                                         (Ojs.call x712 "push"
                                            [|(any_to_js x713)|])) x711;
                                  x712))|])
          end
        module Pipe =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x719 : Ojs.t) -> x719
            and t_to_js : t -> Ojs.t = fun (x718 : Ojs.t) -> x718
            let (close : t -> unit) =
              fun (x720 : t) -> ignore (Ojs.call (t_to_js x720) "close" [||])
            let (has_ref : t -> bool) =
              fun (x721 : t) ->
                Ojs.bool_of_js (Ojs.call (t_to_js x721) "hasRef" [||])
            let (ref : t -> unit) =
              fun (x722 : t) -> ignore (Ojs.call (t_to_js x722) "ref" [||])
            let (unref : t -> unit) =
              fun (x723 : t) -> ignore (Ojs.call (t_to_js x723) "unref" [||])
          end
      end
    include struct include Internal end
  end
