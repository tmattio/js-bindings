[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
open Node_http
open Node_tls
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type https_Agent = [ `Https_Agent ] intf
        and https_AgentOptions = [ `Https_AgentOptions ] intf
        and https_RequestOptions =
          (Http.RequestOptions.t, Tls.SecureContextOptions.t,
            anonymous_interface_0) intersection3
        and https_Server = [ `Https_Server ] intf
        and https_ServerOptions =
          (Tls.SecureContextOptions.t, Tls.TlsOptions.t,
            Http.ServerOptions.t) intersection3
        let rec https_Agent_of_js : Ojs.t -> https_Agent = Obj.magic
        and https_Agent_to_js : https_Agent -> Ojs.t = Obj.magic
        and https_AgentOptions_of_js : Ojs.t -> https_AgentOptions =
          Obj.magic
        and https_AgentOptions_to_js : https_AgentOptions -> Ojs.t =
          Obj.magic
        and https_RequestOptions_of_js : Ojs.t -> https_RequestOptions =
          fun (x5 : Ojs.t) ->
            intersection3_of_js Http.RequestOptions.t_of_js
              Tls.SecureContextOptions.t_of_js anonymous_interface_0_of_js x5
        and https_RequestOptions_to_js : https_RequestOptions -> Ojs.t =
          fun
            (x1 :
              (Http.RequestOptions.t, Tls.SecureContextOptions.t,
                anonymous_interface_0) intersection3)
            ->
            intersection3_to_js Http.RequestOptions.t_to_js
              Tls.SecureContextOptions.t_to_js anonymous_interface_0_to_js x1
        and https_Server_of_js : Ojs.t -> https_Server = Obj.magic
        and https_Server_to_js : https_Server -> Ojs.t = Obj.magic
        and https_ServerOptions_of_js : Ojs.t -> https_ServerOptions =
          fun (x13 : Ojs.t) ->
            intersection3_of_js Tls.SecureContextOptions.t_of_js
              Tls.TlsOptions.t_of_js Http.ServerOptions.t_of_js x13
        and https_ServerOptions_to_js : https_ServerOptions -> Ojs.t =
          fun
            (x9 :
              (Tls.SecureContextOptions.t, Tls.TlsOptions.t,
                Http.ServerOptions.t) intersection3)
            ->
            intersection3_to_js Tls.SecureContextOptions.t_to_js
              Tls.TlsOptions.t_to_js Http.ServerOptions.t_to_js x9
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x18 : Ojs.t) -> anonymous_interface_0_of_js x18
    and t_to_js : t -> Ojs.t =
      fun (x17 : anonymous_interface_0) -> anonymous_interface_0_to_js x17
    let (get_rejectUnauthorized : t -> bool) =
      fun (x19 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x19) "rejectUnauthorized")
    let (set_rejectUnauthorized : t -> bool -> unit) =
      fun (x20 : t) ->
        fun (x21 : bool) ->
          Ojs.set_prop_ascii (t_to_js x20) "rejectUnauthorized"
            (Ojs.bool_to_js x21)
    let (get_servername : t -> string) =
      fun (x22 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x22) "servername")
    let (set_servername : t -> string -> unit) =
      fun (x23 : t) ->
        fun (x24 : string) ->
          Ojs.set_prop_ascii (t_to_js x23) "servername"
            (Ojs.string_to_js x24)
  end
module Https =
  struct
    open Node_tls
    open Node_http
    module ServerOptions =
      struct
        type t = https_ServerOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x26 : Ojs.t) -> https_ServerOptions_of_js x26
        and t_to_js : t -> Ojs.t =
          fun (x25 : https_ServerOptions) -> https_ServerOptions_to_js x25
      end
    module RequestOptions =
      struct
        type t = https_RequestOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x28 : Ojs.t) -> https_RequestOptions_of_js x28
        and t_to_js : t -> Ojs.t =
          fun (x27 : https_RequestOptions) -> https_RequestOptions_to_js x27
      end
    module AgentOptions =
      struct
        type t = https_AgentOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x30 : Ojs.t) -> https_AgentOptions_of_js x30
        and t_to_js : t -> Ojs.t =
          fun (x29 : https_AgentOptions) -> https_AgentOptions_to_js x29
        let (get_rejectUnauthorized : t -> bool) =
          fun (x31 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x31) "rejectUnauthorized")
        let (set_rejectUnauthorized : t -> bool -> unit) =
          fun (x32 : t) ->
            fun (x33 : bool) ->
              Ojs.set_prop_ascii (t_to_js x32) "rejectUnauthorized"
                (Ojs.bool_to_js x33)
        let (get_maxCachedSessions : t -> float) =
          fun (x34 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x34) "maxCachedSessions")
        let (set_maxCachedSessions : t -> float -> unit) =
          fun (x35 : t) ->
            fun (x36 : float) ->
              Ojs.set_prop_ascii (t_to_js x35) "maxCachedSessions"
                (Ojs.float_to_js x36)
        let (cast : t -> Http.AgentOptions.t) =
          fun (x37 : t) -> Http.AgentOptions.t_of_js (t_to_js x37)
        let (cast' : t -> Tls.ConnectionOptions.t) =
          fun (x38 : t) -> Tls.ConnectionOptions.t_of_js (t_to_js x38)
      end
    module Agent =
      struct
        type t = https_Agent
        let rec t_of_js : Ojs.t -> t =
          fun (x40 : Ojs.t) -> https_Agent_of_js x40
        and t_to_js : t -> Ojs.t =
          fun (x39 : https_Agent) -> https_Agent_to_js x39
        let (create : ?options:https_AgentOptions -> unit -> t) =
          fun ?options:(x41 : https_AgentOptions option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.https "Agent")
                   (let x42 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x41 with
                     | Some x43 ->
                         ignore
                           (Ojs.call x42 "push"
                              [|(https_AgentOptions_to_js x43)|])
                     | None -> ());
                    x42))
        let (get_options : t -> https_AgentOptions) =
          fun (x44 : t) ->
            https_AgentOptions_of_js
              (Ojs.get_prop_ascii (t_to_js x44) "options")
        let (set_options : t -> https_AgentOptions -> unit) =
          fun (x45 : t) ->
            fun (x46 : https_AgentOptions) ->
              Ojs.set_prop_ascii (t_to_js x45) "options"
                (https_AgentOptions_to_js x46)
        let (cast : t -> Http.Agent.t) =
          fun (x47 : t) -> Http.Agent.t_of_js (t_to_js x47)
      end
    module Server =
      struct
        type t = https_Server
        let rec t_of_js : Ojs.t -> t =
          fun (x49 : Ojs.t) -> https_Server_of_js x49
        and t_to_js : t -> Ojs.t =
          fun (x48 : https_Server) -> https_Server_to_js x48
        let (cast : t -> Http.HttpBase.t) =
          fun (x50 : t) -> Http.HttpBase.t_of_js (t_to_js x50)
        let (create : ?requestListener:Http.RequestListener.t -> unit -> t) =
          fun ?requestListener:(x51 : Http.RequestListener.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.https "Server")
                   (let x52 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x51 with
                     | Some x53 ->
                         ignore
                           (Ojs.call x52 "push"
                              [|(Http.RequestListener.t_to_js x53)|])
                     | None -> ());
                    x52))
        let (create' :
          options:https_ServerOptions ->
            ?requestListener:Http.RequestListener.t -> unit -> t)
          =
          fun ~options:(x54 : https_ServerOptions) ->
            fun ?requestListener:(x55 : Http.RequestListener.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.https "Server")
                     (let x56 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x56 "push"
                           [|(https_ServerOptions_to_js x54)|]);
                      (match x55 with
                       | Some x57 ->
                           ignore
                             (Ojs.call x56 "push"
                                [|(Http.RequestListener.t_to_js x57)|])
                       | None -> ());
                      x56))
        let (cast : t -> Tls.Server.t) =
          fun (x58 : t) -> Tls.Server.t_of_js (t_to_js x58)
      end
    let (createServer :
      options:https_ServerOptions ->
        ?requestListener:Http.RequestListener.t -> unit -> https_Server)
      =
      fun ~options:(x59 : https_ServerOptions) ->
        fun ?requestListener:(x60 : Http.RequestListener.t option) ->
          fun () ->
            https_Server_of_js
              (let x63 = Import.https in
               Ojs.call (Ojs.get_prop_ascii x63 "createServer") "apply"
                 [|x63;((let x61 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         ignore
                           (Ojs.call x61 "push"
                              [|(https_ServerOptions_to_js x59)|]);
                         (match x60 with
                          | Some x62 ->
                              ignore
                                (Ojs.call x61 "push"
                                   [|(Http.RequestListener.t_to_js x62)|])
                          | None -> ());
                         x61))|])
    let (request :
      url:Node_url.Url.Url.t or_string ->
        ?options:https_RequestOptions ->
          ?callback:(res:Http.IncomingMessage.t -> unit) ->
            unit -> Http.ClientRequest.t)
      =
      fun ~url:(x64 : Node_url.Url.Url.t or_string) ->
        fun ?options:(x65 : https_RequestOptions option) ->
          fun ?callback:(x66 : (res:Http.IncomingMessage.t -> unit) option)
            ->
            fun () ->
              Http.ClientRequest.t_of_js
                (let x72 = Import.https in
                 Ojs.call (Ojs.get_prop_ascii x72 "request") "apply"
                   [|x72;((let x67 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x67 "push"
                                [|(or_string_to_js Node_url.Url.Url.t_to_js
                                     x64)|]);
                           (match x65 with
                            | Some x70 ->
                                ignore
                                  (Ojs.call x67 "push"
                                     [|(https_RequestOptions_to_js x70)|])
                            | None -> ());
                           (match x66 with
                            | Some x68 ->
                                ignore
                                  (Ojs.call x67 "push"
                                     [|(Ojs.fun_to_js 1
                                          (fun (x69 : Ojs.t) ->
                                             x68
                                               ~res:(Http.IncomingMessage.t_of_js
                                                       x69)))|])
                            | None -> ());
                           x67))|])
    let (get :
      url:Node_url.Url.Url.t or_string ->
        ?options:https_RequestOptions ->
          ?callback:(res:Http.IncomingMessage.t -> unit) ->
            unit -> Http.ClientRequest.t)
      =
      fun ~url:(x73 : Node_url.Url.Url.t or_string) ->
        fun ?options:(x74 : https_RequestOptions option) ->
          fun ?callback:(x75 : (res:Http.IncomingMessage.t -> unit) option)
            ->
            fun () ->
              Http.ClientRequest.t_of_js
                (let x81 = Import.https in
                 Ojs.call (Ojs.get_prop_ascii x81 "get") "apply"
                   [|x81;((let x76 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x76 "push"
                                [|(or_string_to_js Node_url.Url.Url.t_to_js
                                     x73)|]);
                           (match x74 with
                            | Some x79 ->
                                ignore
                                  (Ojs.call x76 "push"
                                     [|(https_RequestOptions_to_js x79)|])
                            | None -> ());
                           (match x75 with
                            | Some x77 ->
                                ignore
                                  (Ojs.call x76 "push"
                                     [|(Ojs.fun_to_js 1
                                          (fun (x78 : Ojs.t) ->
                                             x77
                                               ~res:(Http.IncomingMessage.t_of_js
                                                       x78)))|])
                            | None -> ());
                           x76))|])
    let (globalAgent : https_Agent) =
      https_Agent_of_js (Ojs.get_prop_ascii Import.https "globalAgent")
  end
