[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
open Node_events
open Node_net
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_encoding : t -> BufferEncoding.t) =
      fun (x3 : t) ->
        BufferEncoding.t_of_js (Ojs.get_prop_ascii (t_to_js x3) "encoding")
    let (set_encoding : t -> BufferEncoding.t -> unit) =
      fun (x4 : t) ->
        fun (x5 : BufferEncoding.t) ->
          Ojs.set_prop_ascii (t_to_js x4) "encoding"
            (BufferEncoding.t_to_js x5)
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7 : Ojs.t) -> x7
    and t_to_js : t -> Ojs.t = fun (x6 : Ojs.t) -> x6
    let (get_encoding : t -> [ `buffer ] or_null) =
      fun (x8 : t) ->
        or_null_of_js
          (fun (x9 : Ojs.t) ->
             let x10 = x9 in
             match Ojs.string_of_js x10 with
             | "buffer" -> `buffer
             | _ -> assert false)
          (Ojs.get_prop_ascii (t_to_js x8) "encoding")
    let (set_encoding : t -> [ `buffer ] or_null -> unit) =
      fun (x11 : t) ->
        fun (x12 : [ `buffer ] or_null) ->
          Ojs.set_prop_ascii (t_to_js x11) "encoding"
            (or_null_to_js
               (fun (x13 : [ `buffer ]) ->
                  match x13 with | `buffer -> Ojs.string_to_js "buffer") x12)
  end
module AnonymousInterface2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15 : Ojs.t) -> x15
    and t_to_js : t -> Ojs.t = fun (x14 : Ojs.t) -> x14
    let (get_stdout : t -> Buffer.t) =
      fun (x16 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x16) "stdout")
    let (set_stdout : t -> Buffer.t -> unit) =
      fun (x17 : t) ->
        fun (x18 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x17) "stdout" (Buffer.t_to_js x18)
    let (get_stderr : t -> Buffer.t) =
      fun (x19 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x19) "stderr")
    let (set_stderr : t -> Buffer.t -> unit) =
      fun (x20 : t) ->
        fun (x21 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x20) "stderr" (Buffer.t_to_js x21)
  end
module AnonymousInterface3 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x23 : Ojs.t) -> x23
    and t_to_js : t -> Ojs.t = fun (x22 : Ojs.t) -> x22
    let (get_stdout : t -> string) =
      fun (x24 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x24) "stdout")
    let (set_stdout : t -> string -> unit) =
      fun (x25 : t) ->
        fun (x26 : string) ->
          Ojs.set_prop_ascii (t_to_js x25) "stdout" (Ojs.string_to_js x26)
    let (get_stderr : t -> string) =
      fun (x27 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x27) "stderr")
    let (set_stderr : t -> string -> unit) =
      fun (x28 : t) ->
        fun (x29 : string) ->
          Ojs.set_prop_ascii (t_to_js x28) "stderr" (Ojs.string_to_js x29)
  end
module AnonymousInterface4 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x31 : Ojs.t) -> x31
    and t_to_js : t -> Ojs.t = fun (x30 : Ojs.t) -> x30
    let (get_stdout : t -> Buffer.t or_string) =
      fun (x32 : t) ->
        or_string_of_js Buffer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x32) "stdout")
    let (set_stdout : t -> Buffer.t or_string -> unit) =
      fun (x34 : t) ->
        fun (x35 : Buffer.t or_string) ->
          Ojs.set_prop_ascii (t_to_js x34) "stdout"
            (or_string_to_js Buffer.t_to_js x35)
    let (get_stderr : t -> Buffer.t or_string) =
      fun (x37 : t) ->
        or_string_of_js Buffer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x37) "stderr")
    let (set_stderr : t -> Buffer.t or_string -> unit) =
      fun (x39 : t) ->
        fun (x40 : Buffer.t or_string) ->
          Ojs.set_prop_ascii (t_to_js x39) "stderr"
            (or_string_to_js Buffer.t_to_js x40)
  end
module Child_process =
  struct
    module Serializable =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x43 : Ojs.t) -> x43
        and t_to_js : t -> Ojs.t = fun (x42 : Ojs.t) -> x42
      end
    module SendHandle =
      struct
        type t = (Net.Server.t, Net.Socket.t) union2
        let rec t_of_js : Ojs.t -> t =
          fun (x47 : Ojs.t) ->
            union2_of_js Net.Server.t_of_js Net.Socket.t_of_js x47
        and t_to_js : t -> Ojs.t =
          fun (x44 : (Net.Server.t, Net.Socket.t) union2) ->
            union2_to_js Net.Server.t_to_js Net.Socket.t_to_js x44
      end
    module ChildProcess =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x51 : Ojs.t) -> x51
        and t_to_js : t -> Ojs.t = fun (x50 : Ojs.t) -> x50
        let (get_stdin : t -> Node_stream.Stream.Writable.t or_null) =
          fun (x52 : t) ->
            or_null_of_js Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x52) "stdin")
        let (set_stdin : t -> Node_stream.Stream.Writable.t or_null -> unit)
          =
          fun (x54 : t) ->
            fun (x55 : Node_stream.Stream.Writable.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x54) "stdin"
                (or_null_to_js Node_stream.Stream.Writable.t_to_js x55)
        let (get_stdout : t -> Node_stream.Stream.Readable.t or_null) =
          fun (x57 : t) ->
            or_null_of_js Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x57) "stdout")
        let (set_stdout : t -> Node_stream.Stream.Readable.t or_null -> unit)
          =
          fun (x59 : t) ->
            fun (x60 : Node_stream.Stream.Readable.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x59) "stdout"
                (or_null_to_js Node_stream.Stream.Readable.t_to_js x60)
        let (get_stderr : t -> Node_stream.Stream.Readable.t or_null) =
          fun (x62 : t) ->
            or_null_of_js Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x62) "stderr")
        let (set_stderr : t -> Node_stream.Stream.Readable.t or_null -> unit)
          =
          fun (x64 : t) ->
            fun (x65 : Node_stream.Stream.Readable.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x64) "stderr"
                (or_null_to_js Node_stream.Stream.Readable.t_to_js x65)
        let (get_channel : t -> Node_stream.Stream.Pipe.t or_null) =
          fun (x67 : t) ->
            or_null_of_js Node_stream.Stream.Pipe.t_of_js
              (Ojs.get_prop_ascii (t_to_js x67) "channel")
        let (get_stdio :
          t ->
            (Node_stream.Stream.Writable.t or_null *
              Node_stream.Stream.Readable.t or_null *
              Node_stream.Stream.Readable.t or_null *
              (Node_stream.Stream.Readable.t, Node_stream.Stream.Writable.t)
              union2 or_null_or_undefined * (Node_stream.Stream.Readable.t,
              Node_stream.Stream.Writable.t) union2 or_null_or_undefined))
          =
          fun (x69 : t) ->
            let x70 = Ojs.get_prop_ascii (t_to_js x69) "stdio" in
            ((or_null_of_js Node_stream.Stream.Writable.t_of_js
                (Ojs.array_get x70 0)),
              (or_null_of_js Node_stream.Stream.Readable.t_of_js
                 (Ojs.array_get x70 1)),
              (or_null_of_js Node_stream.Stream.Readable.t_of_js
                 (Ojs.array_get x70 2)),
              (or_null_or_undefined_of_js
                 (fun (x74 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x74)
                 (Ojs.array_get x70 3)),
              (or_null_or_undefined_of_js
                 (fun (x77 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x77)
                 (Ojs.array_get x70 4)))
        let (get_killed : t -> bool) =
          fun (x80 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x80) "killed")
        let (get_pid : t -> int) =
          fun (x81 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x81) "pid")
        let (get_connected : t -> bool) =
          fun (x82 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x82) "connected")
        let (get_exit_code : t -> int or_null) =
          fun (x83 : t) ->
            or_null_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x83) "exitCode")
        let (get_signal_code : t -> Node_process.Process.Signals.t or_null) =
          fun (x85 : t) ->
            or_null_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x85) "signalCode")
        let (get_spawnargs : t -> string list) =
          fun (x87 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x87) "spawnargs")
        let (get_spawnfile : t -> string) =
          fun (x89 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x89) "spawnfile")
        let (kill :
          t ->
            ?signal:Node_process.Process.Signals.t or_number -> unit -> bool)
          =
          fun (x94 : t) ->
            fun
              ?signal:(x90 : Node_process.Process.Signals.t or_number option)
              ->
              fun () ->
                Ojs.bool_of_js
                  (let x95 = t_to_js x94 in
                   Ojs.call (Ojs.get_prop_ascii x95 "kill") "apply"
                     [|x95;((let x91 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x90 with
                              | Some x92 ->
                                  ignore
                                    (Ojs.call x91 "push"
                                       [|(or_number_to_js
                                            Node_process.Process.Signals.t_to_js
                                            x92)|])
                              | None -> ());
                             x91))|])
        let (send :
          t ->
            message:Serializable.t ->
              ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
          =
          fun (x102 : t) ->
            fun ~message:(x96 : Serializable.t) ->
              fun ?callback:(x97 : (error:Error.t or_null -> unit) option) ->
                fun () ->
                  Ojs.bool_of_js
                    (let x103 = t_to_js x102 in
                     Ojs.call (Ojs.get_prop_ascii x103 "send") "apply"
                       [|x103;((let x98 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x98 "push"
                                     [|(Serializable.t_to_js x96)|]);
                                (match x97 with
                                 | Some x99 ->
                                     ignore
                                       (Ojs.call x98 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun (x100 : Ojs.t) ->
                                                  x99
                                                    ~error:(or_null_of_js
                                                              Error.t_of_js
                                                              x100)))|])
                                 | None -> ());
                                x98))|])
        let (send' :
          t ->
            message:Serializable.t ->
              ?send_handle:SendHandle.t ->
                ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
          =
          fun (x112 : t) ->
            fun ~message:(x104 : Serializable.t) ->
              fun ?send_handle:(x105 : SendHandle.t option) ->
                fun ?callback:(x106 : (error:Error.t or_null -> unit) option)
                  ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x113 = t_to_js x112 in
                       Ojs.call (Ojs.get_prop_ascii x113 "send") "apply"
                         [|x113;((let x107 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x107 "push"
                                       [|(Serializable.t_to_js x104)|]);
                                  (match x105 with
                                   | Some x111 ->
                                       ignore
                                         (Ojs.call x107 "push"
                                            [|(SendHandle.t_to_js x111)|])
                                   | None -> ());
                                  (match x106 with
                                   | Some x108 ->
                                       ignore
                                         (Ojs.call x107 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun (x109 : Ojs.t) ->
                                                    x108
                                                      ~error:(or_null_of_js
                                                                Error.t_of_js
                                                                x109)))|])
                                   | None -> ());
                                  x107))|])
        let (send'' :
          t ->
            message:Serializable.t ->
              ?send_handle:SendHandle.t ->
                ?options:MessageOptions.t ->
                  ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
          =
          fun (x124 : t) ->
            fun ~message:(x114 : Serializable.t) ->
              fun ?send_handle:(x115 : SendHandle.t option) ->
                fun ?options:(x116 : MessageOptions.t option) ->
                  fun
                    ?callback:(x117 : (error:Error.t or_null -> unit) option)
                    ->
                    fun () ->
                      Ojs.bool_of_js
                        (let x125 = t_to_js x124 in
                         Ojs.call (Ojs.get_prop_ascii x125 "send") "apply"
                           [|x125;((let x118 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x118 "push"
                                         [|(Serializable.t_to_js x114)|]);
                                    (match x115 with
                                     | Some x123 ->
                                         ignore
                                           (Ojs.call x118 "push"
                                              [|(SendHandle.t_to_js x123)|])
                                     | None -> ());
                                    (match x116 with
                                     | Some x122 ->
                                         ignore
                                           (Ojs.call x118 "push"
                                              [|(MessageOptions.t_to_js x122)|])
                                     | None -> ());
                                    (match x117 with
                                     | Some x119 ->
                                         ignore
                                           (Ojs.call x118 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun (x120 : Ojs.t) ->
                                                      x119
                                                        ~error:(or_null_of_js
                                                                  Error.t_of_js
                                                                  x120)))|])
                                     | None -> ());
                                    x118))|])
        let (disconnect : t -> unit) =
          fun (x126 : t) ->
            ignore (Ojs.call (t_to_js x126) "disconnect" [||])
        let (unref : t -> unit) =
          fun (x127 : t) -> ignore (Ojs.call (t_to_js x127) "unref" [||])
        let (ref : t -> unit) =
          fun (x128 : t) -> ignore (Ojs.call (t_to_js x128) "ref" [||])
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x133 : t) ->
            fun ~event:(x129 : string) ->
              fun ~listener:(x130 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x133) "addListener"
                     [|(Ojs.string_to_js x129);(Ojs.fun_to_js_args
                                                  (fun (x131 : _) ->
                                                     x130
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x131 0)))|])
        let (add_listener' :
          t ->
            event:[ `close ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x140 : t) ->
            fun ~event:(x134 : [ `close ]) ->
              fun
                ~listener:(x135 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x140) "addListener"
                     [|((match x134 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x136 : Ojs.t) ->
                            fun (x138 : Ojs.t) ->
                              x135 ~code:(or_null_of_js Ojs.int_of_js x136)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x138)))|])
        let (add_listener'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x143 : t) ->
            fun ~event:(x141 : [ `disconnect ]) ->
              fun ~listener:(x142 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x143) "addListener"
                     [|((match x141 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x142 ()))|])
        let (add_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x147 : t) ->
            fun ~event:(x144 : [ `error ]) ->
              fun ~listener:(x145 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x147) "addListener"
                     [|((match x144 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x146 : Ojs.t) ->
                            x145 ~err:(Error.t_of_js x146)))|])
        let (add_listener'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x154 : t) ->
            fun ~event:(x148 : [ `exit ]) ->
              fun
                ~listener:(x149 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x154) "addListener"
                     [|((match x148 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x150 : Ojs.t) ->
                            fun (x152 : Ojs.t) ->
                              x149 ~code:(or_null_of_js Ojs.int_of_js x150)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x152)))|])
        let (add_listener''''' :
          t ->
            event:[ `message ] ->
              listener:(message:Serializable.t ->
                          send_handle:SendHandle.t -> unit)
                -> t)
          =
          fun (x159 : t) ->
            fun ~event:(x155 : [ `message ]) ->
              fun
                ~listener:(x156 :
                            message:Serializable.t ->
                              send_handle:SendHandle.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x159) "addListener"
                     [|((match x155 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x157 : Ojs.t) ->
                            fun (x158 : Ojs.t) ->
                              x156 ~message:(Serializable.t_of_js x157)
                                ~send_handle:(SendHandle.t_of_js x158)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x165 : t) ->
            fun ~event:(x160 : symbol or_string) ->
              fun ~args:(x161 : any list) ->
                Ojs.bool_of_js
                  (let x166 = t_to_js x165 in
                   Ojs.call (Ojs.get_prop_ascii x166 "emit") "apply"
                     [|x166;((let x162 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x162 "push"
                                   [|(or_string_to_js symbol_to_js x160)|]);
                              List.iter
                                (fun (x163 : any) ->
                                   ignore
                                     (Ojs.call x162 "push"
                                        [|(any_to_js x163)|])) x161;
                              x162))|])
        let (emit' :
          t ->
            event:[ `close ] ->
              code:int or_null ->
                signal:Node_process.Process.Signals.t or_null -> bool)
          =
          fun (x172 : t) ->
            fun ~event:(x167 : [ `close ]) ->
              fun ~code:(x168 : int or_null) ->
                fun ~signal:(x170 : Node_process.Process.Signals.t or_null)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x172) "emit"
                       [|((match x167 with
                           | `close -> Ojs.string_to_js "close"));(or_null_to_js
                                                                    Ojs.int_to_js
                                                                    x168);(
                         or_null_to_js Node_process.Process.Signals.t_to_js
                           x170)|])
        let (emit'' : t -> event:[ `disconnect ] -> bool) =
          fun (x174 : t) ->
            fun ~event:(x173 : [ `disconnect ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x174) "emit"
                   [|((match x173 with
                       | `disconnect -> Ojs.string_to_js "disconnect"))|])
        let (emit''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x177 : t) ->
            fun ~event:(x175 : [ `error ]) ->
              fun ~err:(x176 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x177) "emit"
                     [|((match x175 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x176)|])
        let (emit'''' :
          t ->
            event:[ `exit ] ->
              code:int or_null ->
                signal:Node_process.Process.Signals.t or_null -> bool)
          =
          fun (x183 : t) ->
            fun ~event:(x178 : [ `exit ]) ->
              fun ~code:(x179 : int or_null) ->
                fun ~signal:(x181 : Node_process.Process.Signals.t or_null)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x183) "emit"
                       [|((match x178 with | `exit -> Ojs.string_to_js "exit"));(
                         or_null_to_js Ojs.int_to_js x179);(or_null_to_js
                                                              Node_process.Process.Signals.t_to_js
                                                              x181)|])
        let (emit''''' :
          t ->
            event:[ `message ] ->
              message:Serializable.t -> send_handle:SendHandle.t -> bool)
          =
          fun (x187 : t) ->
            fun ~event:(x184 : [ `message ]) ->
              fun ~message:(x185 : Serializable.t) ->
                fun ~send_handle:(x186 : SendHandle.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x187) "emit"
                       [|((match x184 with
                           | `message -> Ojs.string_to_js "message"));(
                         Serializable.t_to_js x185);(SendHandle.t_to_js x186)|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x192 : t) ->
            fun ~event:(x188 : string) ->
              fun ~listener:(x189 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x192) "on"
                     [|(Ojs.string_to_js x188);(Ojs.fun_to_js_args
                                                  (fun (x190 : _) ->
                                                     x189
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x190 0)))|])
        let (on' :
          t ->
            event:[ `close ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x199 : t) ->
            fun ~event:(x193 : [ `close ]) ->
              fun
                ~listener:(x194 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x199) "on"
                     [|((match x193 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x195 : Ojs.t) ->
                            fun (x197 : Ojs.t) ->
                              x194 ~code:(or_null_of_js Ojs.int_of_js x195)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x197)))|])
        let (on'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x202 : t) ->
            fun ~event:(x200 : [ `disconnect ]) ->
              fun ~listener:(x201 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x202) "on"
                     [|((match x200 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x201 ()))|])
        let (on''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x206 : t) ->
            fun ~event:(x203 : [ `error ]) ->
              fun ~listener:(x204 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x206) "on"
                     [|((match x203 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x205 : Ojs.t) ->
                            x204 ~err:(Error.t_of_js x205)))|])
        let (on'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x213 : t) ->
            fun ~event:(x207 : [ `exit ]) ->
              fun
                ~listener:(x208 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x213) "on"
                     [|((match x207 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x209 : Ojs.t) ->
                            fun (x211 : Ojs.t) ->
                              x208 ~code:(or_null_of_js Ojs.int_of_js x209)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x211)))|])
        let (on''''' :
          t ->
            event:[ `message ] ->
              listener:(message:Serializable.t ->
                          send_handle:SendHandle.t -> unit)
                -> t)
          =
          fun (x218 : t) ->
            fun ~event:(x214 : [ `message ]) ->
              fun
                ~listener:(x215 :
                            message:Serializable.t ->
                              send_handle:SendHandle.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x218) "on"
                     [|((match x214 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x216 : Ojs.t) ->
                            fun (x217 : Ojs.t) ->
                              x215 ~message:(Serializable.t_of_js x216)
                                ~send_handle:(SendHandle.t_of_js x217)))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x223 : t) ->
            fun ~event:(x219 : string) ->
              fun ~listener:(x220 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x223) "once"
                     [|(Ojs.string_to_js x219);(Ojs.fun_to_js_args
                                                  (fun (x221 : _) ->
                                                     x220
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x221 0)))|])
        let (once' :
          t ->
            event:[ `close ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x230 : t) ->
            fun ~event:(x224 : [ `close ]) ->
              fun
                ~listener:(x225 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x230) "once"
                     [|((match x224 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x226 : Ojs.t) ->
                            fun (x228 : Ojs.t) ->
                              x225 ~code:(or_null_of_js Ojs.int_of_js x226)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x228)))|])
        let (once'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x233 : t) ->
            fun ~event:(x231 : [ `disconnect ]) ->
              fun ~listener:(x232 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x233) "once"
                     [|((match x231 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x232 ()))|])
        let (once''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x237 : t) ->
            fun ~event:(x234 : [ `error ]) ->
              fun ~listener:(x235 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x237) "once"
                     [|((match x234 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x236 : Ojs.t) ->
                            x235 ~err:(Error.t_of_js x236)))|])
        let (once'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x244 : t) ->
            fun ~event:(x238 : [ `exit ]) ->
              fun
                ~listener:(x239 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x244) "once"
                     [|((match x238 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x240 : Ojs.t) ->
                            fun (x242 : Ojs.t) ->
                              x239 ~code:(or_null_of_js Ojs.int_of_js x240)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x242)))|])
        let (once''''' :
          t ->
            event:[ `message ] ->
              listener:(message:Serializable.t ->
                          send_handle:SendHandle.t -> unit)
                -> t)
          =
          fun (x249 : t) ->
            fun ~event:(x245 : [ `message ]) ->
              fun
                ~listener:(x246 :
                            message:Serializable.t ->
                              send_handle:SendHandle.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x249) "once"
                     [|((match x245 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x247 : Ojs.t) ->
                            fun (x248 : Ojs.t) ->
                              x246 ~message:(Serializable.t_of_js x247)
                                ~send_handle:(SendHandle.t_of_js x248)))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x254 : t) ->
            fun ~event:(x250 : string) ->
              fun ~listener:(x251 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x254) "prependListener"
                     [|(Ojs.string_to_js x250);(Ojs.fun_to_js_args
                                                  (fun (x252 : _) ->
                                                     x251
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x252 0)))|])
        let (prepend_listener' :
          t ->
            event:[ `close ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x261 : t) ->
            fun ~event:(x255 : [ `close ]) ->
              fun
                ~listener:(x256 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x261) "prependListener"
                     [|((match x255 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x257 : Ojs.t) ->
                            fun (x259 : Ojs.t) ->
                              x256 ~code:(or_null_of_js Ojs.int_of_js x257)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x259)))|])
        let (prepend_listener'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x264 : t) ->
            fun ~event:(x262 : [ `disconnect ]) ->
              fun ~listener:(x263 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x264) "prependListener"
                     [|((match x262 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x263 ()))|])
        let (prepend_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x268 : t) ->
            fun ~event:(x265 : [ `error ]) ->
              fun ~listener:(x266 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x268) "prependListener"
                     [|((match x265 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x267 : Ojs.t) ->
                            x266 ~err:(Error.t_of_js x267)))|])
        let (prepend_listener'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x275 : t) ->
            fun ~event:(x269 : [ `exit ]) ->
              fun
                ~listener:(x270 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x275) "prependListener"
                     [|((match x269 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x271 : Ojs.t) ->
                            fun (x273 : Ojs.t) ->
                              x270 ~code:(or_null_of_js Ojs.int_of_js x271)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x273)))|])
        let (prepend_listener''''' :
          t ->
            event:[ `message ] ->
              listener:(message:Serializable.t ->
                          send_handle:SendHandle.t -> unit)
                -> t)
          =
          fun (x280 : t) ->
            fun ~event:(x276 : [ `message ]) ->
              fun
                ~listener:(x277 :
                            message:Serializable.t ->
                              send_handle:SendHandle.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x280) "prependListener"
                     [|((match x276 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x278 : Ojs.t) ->
                            fun (x279 : Ojs.t) ->
                              x277 ~message:(Serializable.t_of_js x278)
                                ~send_handle:(SendHandle.t_of_js x279)))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x285 : t) ->
            fun ~event:(x281 : string) ->
              fun ~listener:(x282 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x285) "prependOnceListener"
                     [|(Ojs.string_to_js x281);(Ojs.fun_to_js_args
                                                  (fun (x283 : _) ->
                                                     x282
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x283 0)))|])
        let (prepend_once_listener' :
          t ->
            event:[ `close ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x292 : t) ->
            fun ~event:(x286 : [ `close ]) ->
              fun
                ~listener:(x287 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x292) "prependOnceListener"
                     [|((match x286 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x288 : Ojs.t) ->
                            fun (x290 : Ojs.t) ->
                              x287 ~code:(or_null_of_js Ojs.int_of_js x288)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x290)))|])
        let (prepend_once_listener'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x295 : t) ->
            fun ~event:(x293 : [ `disconnect ]) ->
              fun ~listener:(x294 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x295) "prependOnceListener"
                     [|((match x293 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x294 ()))|])
        let (prepend_once_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x299 : t) ->
            fun ~event:(x296 : [ `error ]) ->
              fun ~listener:(x297 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x299) "prependOnceListener"
                     [|((match x296 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x298 : Ojs.t) ->
                            x297 ~err:(Error.t_of_js x298)))|])
        let (prepend_once_listener'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x306 : t) ->
            fun ~event:(x300 : [ `exit ]) ->
              fun
                ~listener:(x301 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x306) "prependOnceListener"
                     [|((match x300 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x302 : Ojs.t) ->
                            fun (x304 : Ojs.t) ->
                              x301 ~code:(or_null_of_js Ojs.int_of_js x302)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x304)))|])
        let (prepend_once_listener''''' :
          t ->
            event:[ `message ] ->
              listener:(message:Serializable.t ->
                          send_handle:SendHandle.t -> unit)
                -> t)
          =
          fun (x311 : t) ->
            fun ~event:(x307 : [ `message ]) ->
              fun
                ~listener:(x308 :
                            message:Serializable.t ->
                              send_handle:SendHandle.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x311) "prependOnceListener"
                     [|((match x307 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x309 : Ojs.t) ->
                            fun (x310 : Ojs.t) ->
                              x308 ~message:(Serializable.t_of_js x309)
                                ~send_handle:(SendHandle.t_of_js x310)))|])
        let (cast : t -> Events.EventEmitter.t) =
          fun (x312 : t) -> Events.EventEmitter.t_of_js (t_to_js x312)
      end
    module ChildProcessWithoutNullStreams =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x314 : Ojs.t) -> x314
        and t_to_js : t -> Ojs.t = fun (x313 : Ojs.t) -> x313
        let (get_stdin : t -> Node_stream.Stream.Writable.t) =
          fun (x315 : t) ->
            Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x315) "stdin")
        let (set_stdin : t -> Node_stream.Stream.Writable.t -> unit) =
          fun (x316 : t) ->
            fun (x317 : Node_stream.Stream.Writable.t) ->
              Ojs.set_prop_ascii (t_to_js x316) "stdin"
                (Node_stream.Stream.Writable.t_to_js x317)
        let (get_stdout : t -> Node_stream.Stream.Readable.t) =
          fun (x318 : t) ->
            Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x318) "stdout")
        let (set_stdout : t -> Node_stream.Stream.Readable.t -> unit) =
          fun (x319 : t) ->
            fun (x320 : Node_stream.Stream.Readable.t) ->
              Ojs.set_prop_ascii (t_to_js x319) "stdout"
                (Node_stream.Stream.Readable.t_to_js x320)
        let (get_stderr : t -> Node_stream.Stream.Readable.t) =
          fun (x321 : t) ->
            Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x321) "stderr")
        let (set_stderr : t -> Node_stream.Stream.Readable.t -> unit) =
          fun (x322 : t) ->
            fun (x323 : Node_stream.Stream.Readable.t) ->
              Ojs.set_prop_ascii (t_to_js x322) "stderr"
                (Node_stream.Stream.Readable.t_to_js x323)
        let (get_stdio :
          t ->
            (Node_stream.Stream.Writable.t * Node_stream.Stream.Readable.t *
              Node_stream.Stream.Readable.t * (Node_stream.Stream.Readable.t,
              Node_stream.Stream.Writable.t) union2 or_null_or_undefined *
              (Node_stream.Stream.Readable.t, Node_stream.Stream.Writable.t)
              union2 or_null_or_undefined))
          =
          fun (x324 : t) ->
            let x325 = Ojs.get_prop_ascii (t_to_js x324) "stdio" in
            ((Node_stream.Stream.Writable.t_of_js (Ojs.array_get x325 0)),
              (Node_stream.Stream.Readable.t_of_js (Ojs.array_get x325 1)),
              (Node_stream.Stream.Readable.t_of_js (Ojs.array_get x325 2)),
              (or_null_or_undefined_of_js
                 (fun (x326 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x326)
                 (Ojs.array_get x325 3)),
              (or_null_or_undefined_of_js
                 (fun (x329 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x329)
                 (Ojs.array_get x325 4)))
        let (cast : t -> ChildProcess.t) =
          fun (x332 : t) -> ChildProcess.t_of_js (t_to_js x332)
      end
    module ChildProcessByStdio =
      struct
        type ('I, 'O, 'E) t = ('I, 'O, 'E) ChildProcessByStdio.t
        let rec t_of_js :
          'I 'O 'E .
            (Ojs.t -> 'I) ->
              (Ojs.t -> 'O) -> (Ojs.t -> 'E) -> Ojs.t -> ('I, 'O, 'E) t
          = fun (type __I) -> fun (type __O) -> fun (type __E) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (__E_of_js : Ojs.t -> __E) ->
                fun (x337 : Ojs.t) ->
                  ChildProcessByStdio.t_of_js __I_of_js __O_of_js __E_of_js
                    x337
        and t_to_js :
          'I 'O 'E .
            ('I -> Ojs.t) ->
              ('O -> Ojs.t) -> ('E -> Ojs.t) -> ('I, 'O, 'E) t -> Ojs.t
          = fun (type __I) -> fun (type __O) -> fun (type __E) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (__E_to_js : __E -> Ojs.t) ->
                fun (x333 : (__I, __O, __E) ChildProcessByStdio.t) ->
                  ChildProcessByStdio.t_to_js __I_to_js __O_to_js __E_to_js
                    x333
        let (get_stdin : ('I, 'O, 'E) t -> 'I) =
          fun (x341 : ('I, 'O, 'E) t) ->
            Obj.magic
              (Ojs.get_prop_ascii
                 (t_to_js Obj.magic Obj.magic Obj.magic x341) "stdin")
        let (set_stdin : ('I, 'O, 'E) t -> 'I -> unit) =
          fun (x345 : ('I, 'O, 'E) t) ->
            fun (x346 : 'I) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x345)
                "stdin" (Obj.magic x346)
        let (get_stdout : ('I, 'O, 'E) t -> 'O) =
          fun (x350 : ('I, 'O, 'E) t) ->
            Obj.magic
              (Ojs.get_prop_ascii
                 (t_to_js Obj.magic Obj.magic Obj.magic x350) "stdout")
        let (set_stdout : ('I, 'O, 'E) t -> 'O -> unit) =
          fun (x354 : ('I, 'O, 'E) t) ->
            fun (x355 : 'O) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x354)
                "stdout" (Obj.magic x355)
        let (get_stderr : ('I, 'O, 'E) t -> 'E) =
          fun (x359 : ('I, 'O, 'E) t) ->
            Obj.magic
              (Ojs.get_prop_ascii
                 (t_to_js Obj.magic Obj.magic Obj.magic x359) "stderr")
        let (set_stderr : ('I, 'O, 'E) t -> 'E -> unit) =
          fun (x363 : ('I, 'O, 'E) t) ->
            fun (x364 : 'E) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x363)
                "stderr" (Obj.magic x364)
        let (get_stdio :
          ('I, 'O, 'E) t ->
            ('I * 'O * 'E * (Node_stream.Stream.Readable.t,
              Node_stream.Stream.Writable.t) union2 or_null_or_undefined *
              (Node_stream.Stream.Readable.t, Node_stream.Stream.Writable.t)
              union2 or_null_or_undefined))
          =
          fun (x368 : ('I, 'O, 'E) t) ->
            let x372 =
              Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x368)
                "stdio" in
            ((Obj.magic (Ojs.array_get x372 0)),
              (Obj.magic (Ojs.array_get x372 1)),
              (Obj.magic (Ojs.array_get x372 2)),
              (or_null_or_undefined_of_js
                 (fun (x373 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x373)
                 (Ojs.array_get x372 3)),
              (or_null_or_undefined_of_js
                 (fun (x376 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x376)
                 (Ojs.array_get x372 4)))
        let (cast : ('I, 'O, 'E) t -> ChildProcess.t) =
          fun (x379 : ('I, 'O, 'E) t) ->
            ChildProcess.t_of_js (t_to_js Obj.magic Obj.magic Obj.magic x379)
      end
    module MessageOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x384 : Ojs.t) -> x384
        and t_to_js : t -> Ojs.t = fun (x383 : Ojs.t) -> x383
        let (get_keep_open : t -> bool) =
          fun (x385 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x385) "keepOpen")
        let (set_keep_open : t -> bool -> unit) =
          fun (x386 : t) ->
            fun (x387 : bool) ->
              Ojs.set_prop_ascii (t_to_js x386) "keepOpen"
                (Ojs.bool_to_js x387)
      end
    module StdioOptions =
      struct
        type t =
          ((Node_stream.Stream.Stream.t,
             [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum or_number
             or_null_or_undefined list,
            [ `ignore  | `inherit_  | `pipe ]) or_enum
        let rec t_of_js : Ojs.t -> t =
          fun (x396 : Ojs.t) ->
            or_enum_of_js
              (fun (x397 : Ojs.t) ->
                 Ojs.list_of_js
                   (fun (x398 : Ojs.t) ->
                      or_null_or_undefined_of_js
                        (fun (x399 : Ojs.t) ->
                           or_number_of_js
                             (fun (x400 : Ojs.t) ->
                                or_enum_of_js
                                  Node_stream.Stream.Stream.t_of_js
                                  (fun (x402 : Ojs.t) ->
                                     let x403 = x402 in
                                     match Ojs.string_of_js x403 with
                                     | "ignore" -> `ignore
                                     | "inherit" -> `inherit_
                                     | "ipc" -> `ipc
                                     | "pipe" -> `pipe
                                     | _ -> assert false) x400) x399) x398)
                   x397)
              (fun (x404 : Ojs.t) ->
                 let x405 = x404 in
                 match Ojs.string_of_js x405 with
                 | "ignore" -> `ignore
                 | "inherit" -> `inherit_
                 | "pipe" -> `pipe
                 | _ -> assert false) x396
        and t_to_js : t -> Ojs.t =
          fun
            (x388 :
              ((Node_stream.Stream.Stream.t,
                 [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum or_number
                 or_null_or_undefined list,
                [ `ignore  | `inherit_  | `pipe ]) or_enum)
            ->
            or_enum_to_js
              (fun
                 (x389 :
                   (Node_stream.Stream.Stream.t,
                     [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum
                     or_number or_null_or_undefined list)
                 ->
                 Ojs.list_to_js
                   (fun
                      (x390 :
                        (Node_stream.Stream.Stream.t,
                          [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum
                          or_number or_null_or_undefined)
                      ->
                      or_null_or_undefined_to_js
                        (fun
                           (x391 :
                             (Node_stream.Stream.Stream.t,
                               [ `ignore  | `inherit_  | `ipc  | `pipe ])
                               or_enum or_number)
                           ->
                           or_number_to_js
                             (fun
                                (x392 :
                                  (Node_stream.Stream.Stream.t,
                                    [ `ignore  | `inherit_  | `ipc  | `pipe ])
                                    or_enum)
                                ->
                                or_enum_to_js
                                  Node_stream.Stream.Stream.t_to_js
                                  (fun
                                     (x394 :
                                       [ `ignore  | `inherit_  | `ipc 
                                       | `pipe ])
                                     ->
                                     match x394 with
                                     | `ignore -> Ojs.string_to_js "ignore"
                                     | `inherit_ ->
                                         Ojs.string_to_js "inherit"
                                     | `ipc -> Ojs.string_to_js "ipc"
                                     | `pipe -> Ojs.string_to_js "pipe") x392)
                             x391) x390) x389)
              (fun (x395 : [ `ignore  | `inherit_  | `pipe ]) ->
                 match x395 with
                 | `ignore -> Ojs.string_to_js "ignore"
                 | `inherit_ -> Ojs.string_to_js "inherit"
                 | `pipe -> Ojs.string_to_js "pipe") x388
      end
    module SerializationType =
      struct
        type t = [ `advanced  | `json ]
        let rec t_of_js : Ojs.t -> t =
          fun (x407 : Ojs.t) ->
            let x408 = x407 in
            match Ojs.string_of_js x408 with
            | "advanced" -> `advanced
            | "json" -> `json
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x406 : [ `advanced  | `json ]) ->
            match x406 with
            | `advanced -> Ojs.string_to_js "advanced"
            | `json -> Ojs.string_to_js "json"
      end
    module MessagingOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x410 : Ojs.t) -> x410
        and t_to_js : t -> Ojs.t = fun (x409 : Ojs.t) -> x409
        let (get_serialization : t -> SerializationType.t) =
          fun (x411 : t) ->
            SerializationType.t_of_js
              (Ojs.get_prop_ascii (t_to_js x411) "serialization")
        let (set_serialization : t -> SerializationType.t -> unit) =
          fun (x412 : t) ->
            fun (x413 : SerializationType.t) ->
              Ojs.set_prop_ascii (t_to_js x412) "serialization"
                (SerializationType.t_to_js x413)
      end
    module ProcessEnvOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x415 : Ojs.t) -> x415
        and t_to_js : t -> Ojs.t = fun (x414 : Ojs.t) -> x414
        let (get_uid : t -> int) =
          fun (x416 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x416) "uid")
        let (set_uid : t -> int -> unit) =
          fun (x417 : t) ->
            fun (x418 : int) ->
              Ojs.set_prop_ascii (t_to_js x417) "uid" (Ojs.int_to_js x418)
        let (get_gid : t -> int) =
          fun (x419 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x419) "gid")
        let (set_gid : t -> int -> unit) =
          fun (x420 : t) ->
            fun (x421 : int) ->
              Ojs.set_prop_ascii (t_to_js x420) "gid" (Ojs.int_to_js x421)
        let (get_cwd : t -> string) =
          fun (x422 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x422) "cwd")
        let (set_cwd : t -> string -> unit) =
          fun (x423 : t) ->
            fun (x424 : string) ->
              Ojs.set_prop_ascii (t_to_js x423) "cwd" (Ojs.string_to_js x424)
        let (get_env : t -> Node_process.Process.ProcessEnv.t) =
          fun (x425 : t) ->
            Node_process.Process.ProcessEnv.t_of_js
              (Ojs.get_prop_ascii (t_to_js x425) "env")
        let (set_env : t -> Node_process.Process.ProcessEnv.t -> unit) =
          fun (x426 : t) ->
            fun (x427 : Node_process.Process.ProcessEnv.t) ->
              Ojs.set_prop_ascii (t_to_js x426) "env"
                (Node_process.Process.ProcessEnv.t_to_js x427)
      end
    module CommonOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x429 : Ojs.t) -> x429
        and t_to_js : t -> Ojs.t = fun (x428 : Ojs.t) -> x428
        let (get_windows_hide : t -> bool) =
          fun (x430 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x430) "windowsHide")
        let (set_windows_hide : t -> bool -> unit) =
          fun (x431 : t) ->
            fun (x432 : bool) ->
              Ojs.set_prop_ascii (t_to_js x431) "windowsHide"
                (Ojs.bool_to_js x432)
        let (get_timeout : t -> int) =
          fun (x433 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x433) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x434 : t) ->
            fun (x435 : int) ->
              Ojs.set_prop_ascii (t_to_js x434) "timeout"
                (Ojs.int_to_js x435)
        let (cast : t -> ProcessEnvOptions.t) =
          fun (x436 : t) -> ProcessEnvOptions.t_of_js (t_to_js x436)
      end
    module CommonSpawnOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x438 : Ojs.t) -> x438
        and t_to_js : t -> Ojs.t = fun (x437 : Ojs.t) -> x437
        let (get_argv0 : t -> string) =
          fun (x439 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x439) "argv0")
        let (set_argv0 : t -> string -> unit) =
          fun (x440 : t) ->
            fun (x441 : string) ->
              Ojs.set_prop_ascii (t_to_js x440) "argv0"
                (Ojs.string_to_js x441)
        let (get_stdio : t -> StdioOptions.t) =
          fun (x442 : t) ->
            StdioOptions.t_of_js (Ojs.get_prop_ascii (t_to_js x442) "stdio")
        let (set_stdio : t -> StdioOptions.t -> unit) =
          fun (x443 : t) ->
            fun (x444 : StdioOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x443) "stdio"
                (StdioOptions.t_to_js x444)
        let (get_shell : t -> bool or_string) =
          fun (x445 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x445) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x447 : t) ->
            fun (x448 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x447) "shell"
                (or_string_to_js Ojs.bool_to_js x448)
        let (get_windows_verbatim_arguments : t -> bool) =
          fun (x450 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x450) "windowsVerbatimArguments")
        let (set_windows_verbatim_arguments : t -> bool -> unit) =
          fun (x451 : t) ->
            fun (x452 : bool) ->
              Ojs.set_prop_ascii (t_to_js x451) "windowsVerbatimArguments"
                (Ojs.bool_to_js x452)
        let (cast : t -> CommonOptions.t) =
          fun (x453 : t) -> CommonOptions.t_of_js (t_to_js x453)
        let (cast' : t -> MessagingOptions.t) =
          fun (x454 : t) -> MessagingOptions.t_of_js (t_to_js x454)
      end
    module SpawnOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x456 : Ojs.t) -> x456
        and t_to_js : t -> Ojs.t = fun (x455 : Ojs.t) -> x455
        let (get_detached : t -> bool) =
          fun (x457 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x457) "detached")
        let (set_detached : t -> bool -> unit) =
          fun (x458 : t) ->
            fun (x459 : bool) ->
              Ojs.set_prop_ascii (t_to_js x458) "detached"
                (Ojs.bool_to_js x459)
        let (cast : t -> CommonSpawnOptions.t) =
          fun (x460 : t) -> CommonSpawnOptions.t_of_js (t_to_js x460)
      end
    module SpawnOptionsWithoutStdio =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x462 : Ojs.t) -> x462
        and t_to_js : t -> Ojs.t = fun (x461 : Ojs.t) -> x461
        let (get_stdio :
          t -> ([ `pipe ] or_null_or_undefined list, [ `pipe ]) or_enum) =
          fun (x463 : t) ->
            or_enum_of_js
              (fun (x464 : Ojs.t) ->
                 Ojs.list_of_js
                   (fun (x465 : Ojs.t) ->
                      or_null_or_undefined_of_js
                        (fun (x466 : Ojs.t) ->
                           let x467 = x466 in
                           match Ojs.string_of_js x467 with
                           | "pipe" -> `pipe
                           | _ -> assert false) x465) x464)
              (fun (x468 : Ojs.t) ->
                 let x469 = x468 in
                 match Ojs.string_of_js x469 with
                 | "pipe" -> `pipe
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x463) "stdio")
        let (set_stdio :
          t ->
            ([ `pipe ] or_null_or_undefined list, [ `pipe ]) or_enum -> unit)
          =
          fun (x470 : t) ->
            fun
              (x471 :
                ([ `pipe ] or_null_or_undefined list, [ `pipe ]) or_enum)
              ->
              Ojs.set_prop_ascii (t_to_js x470) "stdio"
                (or_enum_to_js
                   (fun (x472 : [ `pipe ] or_null_or_undefined list) ->
                      Ojs.list_to_js
                        (fun (x473 : [ `pipe ] or_null_or_undefined) ->
                           or_null_or_undefined_to_js
                             (fun (x474 : [ `pipe ]) ->
                                match x474 with
                                | `pipe -> Ojs.string_to_js "pipe") x473)
                        x472)
                   (fun (x475 : [ `pipe ]) ->
                      match x475 with | `pipe -> Ojs.string_to_js "pipe")
                   x471)
        let (cast : t -> SpawnOptions.t) =
          fun (x476 : t) -> SpawnOptions.t_of_js (t_to_js x476)
      end
    module StdioNull =
      struct
        type t =
          (Node_stream.Stream.Stream.t, [ `ignore  | `inherit_ ]) or_enum
        let rec t_of_js : Ojs.t -> t =
          fun (x480 : Ojs.t) ->
            or_enum_of_js Node_stream.Stream.Stream.t_of_js
              (fun (x482 : Ojs.t) ->
                 let x483 = x482 in
                 match Ojs.string_of_js x483 with
                 | "ignore" -> `ignore
                 | "inherit" -> `inherit_
                 | _ -> assert false) x480
        and t_to_js : t -> Ojs.t =
          fun
            (x477 :
              (Node_stream.Stream.Stream.t, [ `ignore  | `inherit_ ]) or_enum)
            ->
            or_enum_to_js Node_stream.Stream.Stream.t_to_js
              (fun (x479 : [ `ignore  | `inherit_ ]) ->
                 match x479 with
                 | `ignore -> Ojs.string_to_js "ignore"
                 | `inherit_ -> Ojs.string_to_js "inherit") x477
      end
    module StdioPipe =
      struct
        type t = [ `pipe ] or_null_or_undefined
        let rec t_of_js : Ojs.t -> t =
          fun (x486 : Ojs.t) ->
            or_null_or_undefined_of_js
              (fun (x487 : Ojs.t) ->
                 let x488 = x487 in
                 match Ojs.string_of_js x488 with
                 | "pipe" -> `pipe
                 | _ -> assert false) x486
        and t_to_js : t -> Ojs.t =
          fun (x484 : [ `pipe ] or_null_or_undefined) ->
            or_null_or_undefined_to_js
              (fun (x485 : [ `pipe ]) ->
                 match x485 with | `pipe -> Ojs.string_to_js "pipe") x484
      end
    module SpawnOptionsWithStdioTuple =
      struct
        type ('Stdin, 'Stdout, 'Stderr) t =
          ('Stdin, 'Stdout, 'Stderr) SpawnOptionsWithStdioTuple.t
        let rec t_of_js :
          'Stdin 'Stdout 'Stderr .
            (Ojs.t -> 'Stdin) ->
              (Ojs.t -> 'Stdout) ->
                (Ojs.t -> 'Stderr) -> Ojs.t -> ('Stdin, 'Stdout, 'Stderr) t
          = fun (type __Stdin) -> fun (type __Stdout) -> fun (type __Stderr)
          ->
          fun (__Stdin_of_js : Ojs.t -> __Stdin) ->
            fun (__Stdout_of_js : Ojs.t -> __Stdout) ->
              fun (__Stderr_of_js : Ojs.t -> __Stderr) ->
                fun (x493 : Ojs.t) ->
                  SpawnOptionsWithStdioTuple.t_of_js __Stdin_of_js
                    __Stdout_of_js __Stderr_of_js x493
        and t_to_js :
          'Stdin 'Stdout 'Stderr .
            ('Stdin -> Ojs.t) ->
              ('Stdout -> Ojs.t) ->
                ('Stderr -> Ojs.t) -> ('Stdin, 'Stdout, 'Stderr) t -> Ojs.t
          = fun (type __Stdin) -> fun (type __Stdout) -> fun (type __Stderr)
          ->
          fun (__Stdin_to_js : __Stdin -> Ojs.t) ->
            fun (__Stdout_to_js : __Stdout -> Ojs.t) ->
              fun (__Stderr_to_js : __Stderr -> Ojs.t) ->
                fun
                  (x489 :
                    (__Stdin, __Stdout, __Stderr)
                      SpawnOptionsWithStdioTuple.t)
                  ->
                  SpawnOptionsWithStdioTuple.t_to_js __Stdin_to_js
                    __Stdout_to_js __Stderr_to_js x489
        type ('Stdin, 'Stdout, 'Stderr) t_3 = ('Stdin, 'Stdout, 'Stderr) t
        let rec t_3_of_js :
          'Stdin 'Stdout 'Stderr .
            (Ojs.t -> 'Stdin) ->
              (Ojs.t -> 'Stdout) ->
                (Ojs.t -> 'Stderr) -> Ojs.t -> ('Stdin, 'Stdout, 'Stderr) t_3
          = fun (type __Stdin) -> fun (type __Stdout) -> fun (type __Stderr)
          ->
          fun (__Stdin_of_js : Ojs.t -> __Stdin) ->
            fun (__Stdout_of_js : Ojs.t -> __Stdout) ->
              fun (__Stderr_of_js : Ojs.t -> __Stderr) ->
                fun (x501 : Ojs.t) ->
                  t_of_js __Stdin_of_js __Stdout_of_js __Stderr_of_js x501
        and t_3_to_js :
          'Stdin 'Stdout 'Stderr .
            ('Stdin -> Ojs.t) ->
              ('Stdout -> Ojs.t) ->
                ('Stderr -> Ojs.t) -> ('Stdin, 'Stdout, 'Stderr) t_3 -> Ojs.t
          = fun (type __Stdin) -> fun (type __Stdout) -> fun (type __Stderr)
          ->
          fun (__Stdin_to_js : __Stdin -> Ojs.t) ->
            fun (__Stdout_to_js : __Stdout -> Ojs.t) ->
              fun (__Stderr_to_js : __Stderr -> Ojs.t) ->
                fun (x497 : (__Stdin, __Stdout, __Stderr) t) ->
                  t_to_js __Stdin_to_js __Stdout_to_js __Stderr_to_js x497
        let (get_stdio :
          ('Stdin, 'Stdout, 'Stderr) t -> ('Stdin * 'Stdout * 'Stderr)) =
          fun (x505 : ('Stdin, 'Stdout, 'Stderr) t) ->
            let x509 =
              Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x505)
                "stdio" in
            ((Obj.magic (Ojs.array_get x509 0)),
              (Obj.magic (Ojs.array_get x509 1)),
              (Obj.magic (Ojs.array_get x509 2)))
        let (set_stdio :
          ('Stdin, 'Stdout, 'Stderr) t ->
            ('Stdin * 'Stdout * 'Stderr) -> unit)
          =
          fun (x510 : ('Stdin, 'Stdout, 'Stderr) t) ->
            fun (x511 : ('Stdin * 'Stdout * 'Stderr)) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x510)
                "stdio"
                (let (x512, x513, x514) = x511 in
                 let x515 = Ojs.array_make 3 in
                 Ojs.array_set x515 0 (Obj.magic x512);
                 Ojs.array_set x515 1 (Obj.magic x513);
                 Ojs.array_set x515 2 (Obj.magic x514);
                 x515)
        let (cast : ('Stdin, 'Stdout, 'Stderr) t -> SpawnOptions.t) =
          fun (x519 : ('Stdin, 'Stdout, 'Stderr) t) ->
            SpawnOptions.t_of_js (t_to_js Obj.magic Obj.magic Obj.magic x519)
      end
    let (spawn :
      command:string ->
        ?args:string list ->
          ?options:SpawnOptionsWithoutStdio.t ->
            unit -> ChildProcessWithoutNullStreams.t)
      =
      fun ~command:(x523 : string) ->
        fun ?args:(x524 : string list option) ->
          fun ?options:(x525 : SpawnOptionsWithoutStdio.t option) ->
            fun () ->
              ChildProcessWithoutNullStreams.t_of_js
                (let x530 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x530 "spawn") "apply"
                   [|x530;((let x526 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x526 "push"
                                 [|(Ojs.string_to_js x523)|]);
                            (match x524 with
                             | Some x528 ->
                                 ignore
                                   (Ojs.call x526 "push"
                                      [|(Ojs.list_to_js Ojs.string_to_js x528)|])
                             | None -> ());
                            (match x525 with
                             | Some x527 ->
                                 ignore
                                   (Ojs.call x526 "push"
                                      [|(SpawnOptionsWithoutStdio.t_to_js
                                           x527)|])
                             | None -> ());
                            x526))|])
    let (spawn' :
      command:string ->
        options:(StdioPipe.t, StdioPipe.t, StdioPipe.t)
          SpawnOptionsWithStdioTuple.t ->
          (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
            Node_stream.Stream.Readable.t) ChildProcessByStdio.t)
      =
      fun ~command:(x531 : string) ->
        fun
          ~options:(x532 :
                     (StdioPipe.t, StdioPipe.t, StdioPipe.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x531);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioPipe.t_to_js
                                            StdioPipe.t_to_js
                                            StdioPipe.t_to_js x532)|])
    let (spawn' :
      command:string ->
        options:(StdioPipe.t, StdioPipe.t, StdioNull.t)
          SpawnOptionsWithStdioTuple.t ->
          (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
            never or_null) ChildProcessByStdio.t)
      =
      fun ~command:(x539 : string) ->
        fun
          ~options:(x540 :
                     (StdioPipe.t, StdioPipe.t, StdioNull.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            (fun (x546 : Ojs.t) -> or_null_of_js never_of_js x546)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x539);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioPipe.t_to_js
                                            StdioPipe.t_to_js
                                            StdioNull.t_to_js x540)|])
    let (spawn' :
      command:string ->
        options:(StdioPipe.t, StdioNull.t, StdioPipe.t)
          SpawnOptionsWithStdioTuple.t ->
          (Node_stream.Stream.Writable.t, never or_null,
            Node_stream.Stream.Readable.t) ChildProcessByStdio.t)
      =
      fun ~command:(x548 : string) ->
        fun
          ~options:(x549 :
                     (StdioPipe.t, StdioNull.t, StdioPipe.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
            (fun (x554 : Ojs.t) -> or_null_of_js never_of_js x554)
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x548);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioPipe.t_to_js
                                            StdioNull.t_to_js
                                            StdioPipe.t_to_js x549)|])
    let (spawn' :
      command:string ->
        options:(StdioNull.t, StdioPipe.t, StdioPipe.t)
          SpawnOptionsWithStdioTuple.t ->
          (never or_null, Node_stream.Stream.Readable.t,
            Node_stream.Stream.Readable.t) ChildProcessByStdio.t)
      =
      fun ~command:(x557 : string) ->
        fun
          ~options:(x558 :
                     (StdioNull.t, StdioPipe.t, StdioPipe.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js
            (fun (x562 : Ojs.t) -> or_null_of_js never_of_js x562)
            Node_stream.Stream.Readable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x557);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioNull.t_to_js
                                            StdioPipe.t_to_js
                                            StdioPipe.t_to_js x558)|])
    let (spawn' :
      command:string ->
        options:(StdioPipe.t, StdioNull.t, StdioNull.t)
          SpawnOptionsWithStdioTuple.t ->
          (Node_stream.Stream.Writable.t, never or_null, never or_null)
            ChildProcessByStdio.t)
      =
      fun ~command:(x566 : string) ->
        fun
          ~options:(x567 :
                     (StdioPipe.t, StdioNull.t, StdioNull.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
            (fun (x572 : Ojs.t) -> or_null_of_js never_of_js x572)
            (fun (x574 : Ojs.t) -> or_null_of_js never_of_js x574)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x566);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioPipe.t_to_js
                                            StdioNull.t_to_js
                                            StdioNull.t_to_js x567)|])
    let (spawn' :
      command:string ->
        options:(StdioNull.t, StdioPipe.t, StdioNull.t)
          SpawnOptionsWithStdioTuple.t ->
          (never or_null, Node_stream.Stream.Readable.t, never or_null)
            ChildProcessByStdio.t)
      =
      fun ~command:(x576 : string) ->
        fun
          ~options:(x577 :
                     (StdioNull.t, StdioPipe.t, StdioNull.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js
            (fun (x581 : Ojs.t) -> or_null_of_js never_of_js x581)
            Node_stream.Stream.Readable.t_of_js
            (fun (x584 : Ojs.t) -> or_null_of_js never_of_js x584)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x576);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioNull.t_to_js
                                            StdioPipe.t_to_js
                                            StdioNull.t_to_js x577)|])
    let (spawn' :
      command:string ->
        options:(StdioNull.t, StdioNull.t, StdioPipe.t)
          SpawnOptionsWithStdioTuple.t ->
          (never or_null, never or_null, Node_stream.Stream.Readable.t)
            ChildProcessByStdio.t)
      =
      fun ~command:(x586 : string) ->
        fun
          ~options:(x587 :
                     (StdioNull.t, StdioNull.t, StdioPipe.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js
            (fun (x591 : Ojs.t) -> or_null_of_js never_of_js x591)
            (fun (x593 : Ojs.t) -> or_null_of_js never_of_js x593)
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x586);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioNull.t_to_js
                                            StdioNull.t_to_js
                                            StdioPipe.t_to_js x587)|])
    let (spawn' :
      command:string ->
        options:(StdioNull.t, StdioNull.t, StdioNull.t)
          SpawnOptionsWithStdioTuple.t ->
          (never or_null, never or_null, never or_null) ChildProcessByStdio.t)
      =
      fun ~command:(x596 : string) ->
        fun
          ~options:(x597 :
                     (StdioNull.t, StdioNull.t, StdioNull.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js
            (fun (x601 : Ojs.t) -> or_null_of_js never_of_js x601)
            (fun (x603 : Ojs.t) -> or_null_of_js never_of_js x603)
            (fun (x605 : Ojs.t) -> or_null_of_js never_of_js x605)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x596);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioNull.t_to_js
                                            StdioNull.t_to_js
                                            StdioNull.t_to_js x597)|])
    let (spawn' : command:string -> options:SpawnOptions.t -> ChildProcess.t)
      =
      fun ~command:(x607 : string) ->
        fun ~options:(x608 : SpawnOptions.t) ->
          ChildProcess.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x607);(SpawnOptions.t_to_js x608)|])
    let (spawn' :
      command:string ->
        ?args:string list ->
          ?options:SpawnOptionsWithoutStdio.t ->
            unit -> ChildProcessWithoutNullStreams.t)
      =
      fun ~command:(x609 : string) ->
        fun ?args:(x610 : string list option) ->
          fun ?options:(x611 : SpawnOptionsWithoutStdio.t option) ->
            fun () ->
              ChildProcessWithoutNullStreams.t_of_js
                (let x616 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x616 "spawn") "apply"
                   [|x616;((let x612 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x612 "push"
                                 [|(Ojs.string_to_js x609)|]);
                            (match x610 with
                             | Some x614 ->
                                 ignore
                                   (Ojs.call x612 "push"
                                      [|(Ojs.list_to_js Ojs.string_to_js x614)|])
                             | None -> ());
                            (match x611 with
                             | Some x613 ->
                                 ignore
                                   (Ojs.call x612 "push"
                                      [|(SpawnOptionsWithoutStdio.t_to_js
                                           x613)|])
                             | None -> ());
                            x612))|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioPipe.t, StdioPipe.t, StdioPipe.t)
            SpawnOptionsWithStdioTuple.t ->
            (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
              Node_stream.Stream.Readable.t) ChildProcessByStdio.t)
      =
      fun ~command:(x617 : string) ->
        fun ~args:(x618 : string list) ->
          fun
            ~options:(x620 :
                       (StdioPipe.t, StdioPipe.t, StdioPipe.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x617);(Ojs.list_to_js Ojs.string_to_js
                                              x618);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioPipe.t_to_js x620)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioPipe.t, StdioPipe.t, StdioNull.t)
            SpawnOptionsWithStdioTuple.t ->
            (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
              never or_null) ChildProcessByStdio.t)
      =
      fun ~command:(x627 : string) ->
        fun ~args:(x628 : string list) ->
          fun
            ~options:(x630 :
                       (StdioPipe.t, StdioPipe.t, StdioNull.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              (fun (x636 : Ojs.t) -> or_null_of_js never_of_js x636)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x627);(Ojs.list_to_js Ojs.string_to_js
                                              x628);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioNull.t_to_js x630)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioPipe.t, StdioNull.t, StdioPipe.t)
            SpawnOptionsWithStdioTuple.t ->
            (Node_stream.Stream.Writable.t, never or_null,
              Node_stream.Stream.Readable.t) ChildProcessByStdio.t)
      =
      fun ~command:(x638 : string) ->
        fun ~args:(x639 : string list) ->
          fun
            ~options:(x641 :
                       (StdioPipe.t, StdioNull.t, StdioPipe.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
              (fun (x646 : Ojs.t) -> or_null_of_js never_of_js x646)
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x638);(Ojs.list_to_js Ojs.string_to_js
                                              x639);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioPipe.t_to_js x641)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioNull.t, StdioPipe.t, StdioPipe.t)
            SpawnOptionsWithStdioTuple.t ->
            (never or_null, Node_stream.Stream.Readable.t,
              Node_stream.Stream.Readable.t) ChildProcessByStdio.t)
      =
      fun ~command:(x649 : string) ->
        fun ~args:(x650 : string list) ->
          fun
            ~options:(x652 :
                       (StdioNull.t, StdioPipe.t, StdioPipe.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js
              (fun (x656 : Ojs.t) -> or_null_of_js never_of_js x656)
              Node_stream.Stream.Readable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x649);(Ojs.list_to_js Ojs.string_to_js
                                              x650);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioPipe.t_to_js x652)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioPipe.t, StdioNull.t, StdioNull.t)
            SpawnOptionsWithStdioTuple.t ->
            (Node_stream.Stream.Writable.t, never or_null, never or_null)
              ChildProcessByStdio.t)
      =
      fun ~command:(x660 : string) ->
        fun ~args:(x661 : string list) ->
          fun
            ~options:(x663 :
                       (StdioPipe.t, StdioNull.t, StdioNull.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
              (fun (x668 : Ojs.t) -> or_null_of_js never_of_js x668)
              (fun (x670 : Ojs.t) -> or_null_of_js never_of_js x670)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x660);(Ojs.list_to_js Ojs.string_to_js
                                              x661);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioNull.t_to_js x663)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioNull.t, StdioPipe.t, StdioNull.t)
            SpawnOptionsWithStdioTuple.t ->
            (never or_null, Node_stream.Stream.Readable.t, never or_null)
              ChildProcessByStdio.t)
      =
      fun ~command:(x672 : string) ->
        fun ~args:(x673 : string list) ->
          fun
            ~options:(x675 :
                       (StdioNull.t, StdioPipe.t, StdioNull.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js
              (fun (x679 : Ojs.t) -> or_null_of_js never_of_js x679)
              Node_stream.Stream.Readable.t_of_js
              (fun (x682 : Ojs.t) -> or_null_of_js never_of_js x682)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x672);(Ojs.list_to_js Ojs.string_to_js
                                              x673);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioNull.t_to_js x675)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioNull.t, StdioNull.t, StdioPipe.t)
            SpawnOptionsWithStdioTuple.t ->
            (never or_null, never or_null, Node_stream.Stream.Readable.t)
              ChildProcessByStdio.t)
      =
      fun ~command:(x684 : string) ->
        fun ~args:(x685 : string list) ->
          fun
            ~options:(x687 :
                       (StdioNull.t, StdioNull.t, StdioPipe.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js
              (fun (x691 : Ojs.t) -> or_null_of_js never_of_js x691)
              (fun (x693 : Ojs.t) -> or_null_of_js never_of_js x693)
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x684);(Ojs.list_to_js Ojs.string_to_js
                                              x685);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioPipe.t_to_js x687)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioNull.t, StdioNull.t, StdioNull.t)
            SpawnOptionsWithStdioTuple.t ->
            (never or_null, never or_null, never or_null)
              ChildProcessByStdio.t)
      =
      fun ~command:(x696 : string) ->
        fun ~args:(x697 : string list) ->
          fun
            ~options:(x699 :
                       (StdioNull.t, StdioNull.t, StdioNull.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js
              (fun (x703 : Ojs.t) -> or_null_of_js never_of_js x703)
              (fun (x705 : Ojs.t) -> or_null_of_js never_of_js x705)
              (fun (x707 : Ojs.t) -> or_null_of_js never_of_js x707)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x696);(Ojs.list_to_js Ojs.string_to_js
                                              x697);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioNull.t_to_js x699)|])
    let (spawn' :
      command:string ->
        args:string list -> options:SpawnOptions.t -> ChildProcess.t)
      =
      fun ~command:(x709 : string) ->
        fun ~args:(x710 : string list) ->
          fun ~options:(x712 : SpawnOptions.t) ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x709);(Ojs.list_to_js Ojs.string_to_js
                                              x710);(SpawnOptions.t_to_js
                                                       x712)|])
    module ExecOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x714 : Ojs.t) -> x714
        and t_to_js : t -> Ojs.t = fun (x713 : Ojs.t) -> x713
        let (get_shell : t -> string) =
          fun (x715 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x715) "shell")
        let (set_shell : t -> string -> unit) =
          fun (x716 : t) ->
            fun (x717 : string) ->
              Ojs.set_prop_ascii (t_to_js x716) "shell"
                (Ojs.string_to_js x717)
        let (get_max_buffer : t -> int) =
          fun (x718 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x718) "maxBuffer")
        let (set_max_buffer : t -> int -> unit) =
          fun (x719 : t) ->
            fun (x720 : int) ->
              Ojs.set_prop_ascii (t_to_js x719) "maxBuffer"
                (Ojs.int_to_js x720)
        let (get_kill_signal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x721 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x721) "killSignal")
        let (set_kill_signal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x723 : t) ->
            fun (x724 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x723) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x724)
        let (cast : t -> CommonOptions.t) =
          fun (x726 : t) -> CommonOptions.t_of_js (t_to_js x726)
      end
    module ExecOptionsWithStringEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x728 : Ojs.t) -> x728
        and t_to_js : t -> Ojs.t = fun (x727 : Ojs.t) -> x727
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x729 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x729) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x730 : t) ->
            fun (x731 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x730) "encoding"
                (BufferEncoding.t_to_js x731)
        let (cast : t -> ExecOptions.t) =
          fun (x732 : t) -> ExecOptions.t_of_js (t_to_js x732)
      end
    module ExecOptionsWithBufferEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x734 : Ojs.t) -> x734
        and t_to_js : t -> Ojs.t = fun (x733 : Ojs.t) -> x733
        let (get_encoding : t -> BufferEncoding.t or_null) =
          fun (x735 : t) ->
            or_null_of_js BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x735) "encoding")
        let (set_encoding : t -> BufferEncoding.t or_null -> unit) =
          fun (x737 : t) ->
            fun (x738 : BufferEncoding.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x737) "encoding"
                (or_null_to_js BufferEncoding.t_to_js x738)
        let (cast : t -> ExecOptions.t) =
          fun (x740 : t) -> ExecOptions.t_of_js (t_to_js x740)
      end
    module ExecException =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x742 : Ojs.t) -> x742
        and t_to_js : t -> Ojs.t = fun (x741 : Ojs.t) -> x741
        let (get_cmd : t -> string) =
          fun (x743 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x743) "cmd")
        let (set_cmd : t -> string -> unit) =
          fun (x744 : t) ->
            fun (x745 : string) ->
              Ojs.set_prop_ascii (t_to_js x744) "cmd" (Ojs.string_to_js x745)
        let (get_killed : t -> bool) =
          fun (x746 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x746) "killed")
        let (set_killed : t -> bool -> unit) =
          fun (x747 : t) ->
            fun (x748 : bool) ->
              Ojs.set_prop_ascii (t_to_js x747) "killed"
                (Ojs.bool_to_js x748)
        let (get_code : t -> int) =
          fun (x749 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x749) "code")
        let (set_code : t -> int -> unit) =
          fun (x750 : t) ->
            fun (x751 : int) ->
              Ojs.set_prop_ascii (t_to_js x750) "code" (Ojs.int_to_js x751)
        let (get_signal : t -> Node_process.Process.Signals.t) =
          fun (x752 : t) ->
            Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x752) "signal")
        let (set_signal : t -> Node_process.Process.Signals.t -> unit) =
          fun (x753 : t) ->
            fun (x754 : Node_process.Process.Signals.t) ->
              Ojs.set_prop_ascii (t_to_js x753) "signal"
                (Node_process.Process.Signals.t_to_js x754)
        let (cast : t -> Error.t) =
          fun (x755 : t) -> Error.t_of_js (t_to_js x755)
      end
    let (exec :
      command:string ->
        ?callback:(error:ExecException.t or_null ->
                     stdout:string -> stderr:string -> unit)
          -> unit -> ChildProcess.t)
      =
      fun ~command:(x756 : string) ->
        fun
          ?callback:(x757 :
                      (error:ExecException.t or_null ->
                         stdout:string -> stderr:string -> unit)
                        option)
          ->
          fun () ->
            ChildProcess.t_of_js
              (let x764 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x764 "exec") "apply"
                 [|x764;((let x758 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x758 "push" [|(Ojs.string_to_js x756)|]);
                          (match x757 with
                           | Some x759 ->
                               ignore
                                 (Ojs.call x758 "push"
                                    [|(Ojs.fun_to_js 3
                                         (fun (x760 : Ojs.t) ->
                                            fun (x762 : Ojs.t) ->
                                              fun (x763 : Ojs.t) ->
                                                x759
                                                  ~error:(or_null_of_js
                                                            ExecException.t_of_js
                                                            x760)
                                                  ~stdout:(Ojs.string_of_js
                                                             x762)
                                                  ~stderr:(Ojs.string_of_js
                                                             x763)))|])
                           | None -> ());
                          x758))|])
    let (exec :
      command:string ->
        options:(AnonymousInterface1.t, ExecOptions.t) intersection2 ->
          ?callback:(error:ExecException.t or_null ->
                       stdout:Buffer.t -> stderr:Buffer.t -> unit)
            -> unit -> ChildProcess.t)
      =
      fun ~command:(x765 : string) ->
        fun
          ~options:(x766 :
                     (AnonymousInterface1.t, ExecOptions.t) intersection2)
          ->
          fun
            ?callback:(x767 :
                        (error:ExecException.t or_null ->
                           stdout:Buffer.t -> stderr:Buffer.t -> unit)
                          option)
            ->
            fun () ->
              ChildProcess.t_of_js
                (let x776 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x776 "exec") "apply"
                   [|x776;((let x768 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x768 "push"
                                 [|(Ojs.string_to_js x765)|]);
                            ignore
                              (Ojs.call x768 "push"
                                 [|(intersection2_to_js
                                      AnonymousInterface1.t_to_js
                                      ExecOptions.t_to_js x766)|]);
                            (match x767 with
                             | Some x769 ->
                                 ignore
                                   (Ojs.call x768 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x770 : Ojs.t) ->
                                              fun (x772 : Ojs.t) ->
                                                fun (x773 : Ojs.t) ->
                                                  x769
                                                    ~error:(or_null_of_js
                                                              ExecException.t_of_js
                                                              x770)
                                                    ~stdout:(Buffer.t_of_js
                                                               x772)
                                                    ~stderr:(Buffer.t_of_js
                                                               x773)))|])
                             | None -> ());
                            x768))|])
    let (exec :
      command:string ->
        options:(AnonymousInterface0.t, ExecOptions.t) intersection2 ->
          ?callback:(error:ExecException.t or_null ->
                       stdout:string -> stderr:string -> unit)
            -> unit -> ChildProcess.t)
      =
      fun ~command:(x777 : string) ->
        fun
          ~options:(x778 :
                     (AnonymousInterface0.t, ExecOptions.t) intersection2)
          ->
          fun
            ?callback:(x779 :
                        (error:ExecException.t or_null ->
                           stdout:string -> stderr:string -> unit)
                          option)
            ->
            fun () ->
              ChildProcess.t_of_js
                (let x788 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x788 "exec") "apply"
                   [|x788;((let x780 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x780 "push"
                                 [|(Ojs.string_to_js x777)|]);
                            ignore
                              (Ojs.call x780 "push"
                                 [|(intersection2_to_js
                                      AnonymousInterface0.t_to_js
                                      ExecOptions.t_to_js x778)|]);
                            (match x779 with
                             | Some x781 ->
                                 ignore
                                   (Ojs.call x780 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x782 : Ojs.t) ->
                                              fun (x784 : Ojs.t) ->
                                                fun (x785 : Ojs.t) ->
                                                  x781
                                                    ~error:(or_null_of_js
                                                              ExecException.t_of_js
                                                              x782)
                                                    ~stdout:(Ojs.string_of_js
                                                               x784)
                                                    ~stderr:(Ojs.string_of_js
                                                               x785)))|])
                             | None -> ());
                            x780))|])
    let (exec :
      command:string ->
        options:(AnonymousInterface0.t, ExecOptions.t) intersection2 ->
          ?callback:(error:ExecException.t or_null ->
                       stdout:Buffer.t or_string ->
                         stderr:Buffer.t or_string -> unit)
            -> unit -> ChildProcess.t)
      =
      fun ~command:(x789 : string) ->
        fun
          ~options:(x790 :
                     (AnonymousInterface0.t, ExecOptions.t) intersection2)
          ->
          fun
            ?callback:(x791 :
                        (error:ExecException.t or_null ->
                           stdout:Buffer.t or_string ->
                             stderr:Buffer.t or_string -> unit)
                          option)
            ->
            fun () ->
              ChildProcess.t_of_js
                (let x802 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x802 "exec") "apply"
                   [|x802;((let x792 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x792 "push"
                                 [|(Ojs.string_to_js x789)|]);
                            ignore
                              (Ojs.call x792 "push"
                                 [|(intersection2_to_js
                                      AnonymousInterface0.t_to_js
                                      ExecOptions.t_to_js x790)|]);
                            (match x791 with
                             | Some x793 ->
                                 ignore
                                   (Ojs.call x792 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x794 : Ojs.t) ->
                                              fun (x796 : Ojs.t) ->
                                                fun (x798 : Ojs.t) ->
                                                  x793
                                                    ~error:(or_null_of_js
                                                              ExecException.t_of_js
                                                              x794)
                                                    ~stdout:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x796)
                                                    ~stderr:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x798)))|])
                             | None -> ());
                            x792))|])
    let (exec :
      command:string ->
        options:ExecOptions.t ->
          ?callback:(error:ExecException.t or_null ->
                       stdout:string -> stderr:string -> unit)
            -> unit -> ChildProcess.t)
      =
      fun ~command:(x803 : string) ->
        fun ~options:(x804 : ExecOptions.t) ->
          fun
            ?callback:(x805 :
                        (error:ExecException.t or_null ->
                           stdout:string -> stderr:string -> unit)
                          option)
            ->
            fun () ->
              ChildProcess.t_of_js
                (let x812 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x812 "exec") "apply"
                   [|x812;((let x806 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x806 "push"
                                 [|(Ojs.string_to_js x803)|]);
                            ignore
                              (Ojs.call x806 "push"
                                 [|(ExecOptions.t_to_js x804)|]);
                            (match x805 with
                             | Some x807 ->
                                 ignore
                                   (Ojs.call x806 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x808 : Ojs.t) ->
                                              fun (x810 : Ojs.t) ->
                                                fun (x811 : Ojs.t) ->
                                                  x807
                                                    ~error:(or_null_of_js
                                                              ExecException.t_of_js
                                                              x808)
                                                    ~stdout:(Ojs.string_of_js
                                                               x810)
                                                    ~stderr:(Ojs.string_of_js
                                                               x811)))|])
                             | None -> ());
                            x806))|])
    let (exec :
      command:string ->
        options:(Node_fs.Fs.BaseEncodingOptions.t, ExecOptions.t)
          intersection2 or_null_or_undefined ->
          ?callback:(error:ExecException.t or_null ->
                       stdout:Buffer.t or_string ->
                         stderr:Buffer.t or_string -> unit)
            -> unit -> ChildProcess.t)
      =
      fun ~command:(x813 : string) ->
        fun
          ~options:(x814 :
                     (Node_fs.Fs.BaseEncodingOptions.t, ExecOptions.t)
                       intersection2 or_null_or_undefined)
          ->
          fun
            ?callback:(x815 :
                        (error:ExecException.t or_null ->
                           stdout:Buffer.t or_string ->
                             stderr:Buffer.t or_string -> unit)
                          option)
            ->
            fun () ->
              ChildProcess.t_of_js
                (let x827 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x827 "exec") "apply"
                   [|x827;((let x816 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x816 "push"
                                 [|(Ojs.string_to_js x813)|]);
                            ignore
                              (Ojs.call x816 "push"
                                 [|(or_null_or_undefined_to_js
                                      (fun
                                         (x824 :
                                           (Node_fs.Fs.BaseEncodingOptions.t,
                                             ExecOptions.t) intersection2)
                                         ->
                                         intersection2_to_js
                                           Node_fs.Fs.BaseEncodingOptions.t_to_js
                                           ExecOptions.t_to_js x824) x814)|]);
                            (match x815 with
                             | Some x817 ->
                                 ignore
                                   (Ojs.call x816 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x818 : Ojs.t) ->
                                              fun (x820 : Ojs.t) ->
                                                fun (x822 : Ojs.t) ->
                                                  x817
                                                    ~error:(or_null_of_js
                                                              ExecException.t_of_js
                                                              x818)
                                                    ~stdout:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x820)
                                                    ~stderr:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x822)))|])
                             | None -> ());
                            x816))|])
    module PromiseWithChild =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x829 : Ojs.t) -> x829
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x828 : Ojs.t) -> x828
        let (get_child : 'T t -> ChildProcess.t) =
          fun (x830 : 'T t) ->
            ChildProcess.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x830) "child")
        let (set_child : 'T t -> ChildProcess.t -> unit) =
          fun (x832 : 'T t) ->
            fun (x833 : ChildProcess.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x832) "child"
                (ChildProcess.t_to_js x833)
        let (cast : 'T t -> 'T Promise.t) =
          fun (x835 : 'T t) ->
            Promise.t_of_js Obj.magic (t_to_js Obj.magic x835)
      end
    module Exec =
      struct
        let (__promisify__ :
          command:string -> AnonymousInterface3.t PromiseWithChild.t) =
          fun ~command:(x838 : string) ->
            PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                 "__promisify__" [|(Ojs.string_to_js x838)|])
        let (__promisify__ :
          command:string ->
            options:(AnonymousInterface1.t, ExecOptions.t) intersection2 ->
              AnonymousInterface2.t PromiseWithChild.t)
          =
          fun ~command:(x840 : string) ->
            fun
              ~options:(x841 :
                         (AnonymousInterface1.t, ExecOptions.t) intersection2)
              ->
              PromiseWithChild.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                   "__promisify__"
                   [|(Ojs.string_to_js x840);(intersection2_to_js
                                                AnonymousInterface1.t_to_js
                                                ExecOptions.t_to_js x841)|])
        let (__promisify__ :
          command:string ->
            options:(AnonymousInterface0.t, ExecOptions.t) intersection2 ->
              AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~command:(x845 : string) ->
            fun
              ~options:(x846 :
                         (AnonymousInterface0.t, ExecOptions.t) intersection2)
              ->
              PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                   "__promisify__"
                   [|(Ojs.string_to_js x845);(intersection2_to_js
                                                AnonymousInterface0.t_to_js
                                                ExecOptions.t_to_js x846)|])
        let (__promisify__ :
          command:string ->
            options:ExecOptions.t -> AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~command:(x850 : string) ->
            fun ~options:(x851 : ExecOptions.t) ->
              PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                   "__promisify__"
                   [|(Ojs.string_to_js x850);(ExecOptions.t_to_js x851)|])
        let (__promisify__ :
          command:string ->
            ?options:(Node_fs.Fs.BaseEncodingOptions.t, ExecOptions.t)
              intersection2 or_null ->
              unit -> AnonymousInterface4.t PromiseWithChild.t)
          =
          fun ~command:(x853 : string) ->
            fun
              ?options:(x854 :
                         (Node_fs.Fs.BaseEncodingOptions.t, ExecOptions.t)
                           intersection2 or_null option)
              ->
              fun () ->
                PromiseWithChild.t_of_js AnonymousInterface4.t_of_js
                  (let x860 = Ojs.get_prop_ascii Import.child_process "exec" in
                   Ojs.call (Ojs.get_prop_ascii x860 "__promisify__") "apply"
                     [|x860;((let x855 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x855 "push"
                                   [|(Ojs.string_to_js x853)|]);
                              (match x854 with
                               | Some x856 ->
                                   ignore
                                     (Ojs.call x855 "push"
                                        [|(or_null_to_js
                                             (fun
                                                (x857 :
                                                  (Node_fs.Fs.BaseEncodingOptions.t,
                                                    ExecOptions.t)
                                                    intersection2)
                                                ->
                                                intersection2_to_js
                                                  Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                  ExecOptions.t_to_js x857)
                                             x856)|])
                               | None -> ());
                              x855))|])
      end
    module ExecFileOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x863 : Ojs.t) -> x863
        and t_to_js : t -> Ojs.t = fun (x862 : Ojs.t) -> x862
        let (get_max_buffer : t -> int) =
          fun (x864 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x864) "maxBuffer")
        let (set_max_buffer : t -> int -> unit) =
          fun (x865 : t) ->
            fun (x866 : int) ->
              Ojs.set_prop_ascii (t_to_js x865) "maxBuffer"
                (Ojs.int_to_js x866)
        let (get_kill_signal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x867 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x867) "killSignal")
        let (set_kill_signal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x869 : t) ->
            fun (x870 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x869) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x870)
        let (get_windows_verbatim_arguments : t -> bool) =
          fun (x872 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x872) "windowsVerbatimArguments")
        let (set_windows_verbatim_arguments : t -> bool -> unit) =
          fun (x873 : t) ->
            fun (x874 : bool) ->
              Ojs.set_prop_ascii (t_to_js x873) "windowsVerbatimArguments"
                (Ojs.bool_to_js x874)
        let (get_shell : t -> bool or_string) =
          fun (x875 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x875) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x877 : t) ->
            fun (x878 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x877) "shell"
                (or_string_to_js Ojs.bool_to_js x878)
        let (cast : t -> CommonOptions.t) =
          fun (x880 : t) -> CommonOptions.t_of_js (t_to_js x880)
      end
    module ExecFileOptionsWithStringEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x882 : Ojs.t) -> x882
        and t_to_js : t -> Ojs.t = fun (x881 : Ojs.t) -> x881
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x883 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x883) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x884 : t) ->
            fun (x885 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x884) "encoding"
                (BufferEncoding.t_to_js x885)
        let (cast : t -> ExecFileOptions.t) =
          fun (x886 : t) -> ExecFileOptions.t_of_js (t_to_js x886)
      end
    module ExecFileOptionsWithBufferEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x888 : Ojs.t) -> x888
        and t_to_js : t -> Ojs.t = fun (x887 : Ojs.t) -> x887
        let (get_encoding : t -> [ `buffer ] or_null) =
          fun (x889 : t) ->
            or_null_of_js
              (fun (x890 : Ojs.t) ->
                 let x891 = x890 in
                 match Ojs.string_of_js x891 with
                 | "buffer" -> `buffer
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x889) "encoding")
        let (set_encoding : t -> [ `buffer ] or_null -> unit) =
          fun (x892 : t) ->
            fun (x893 : [ `buffer ] or_null) ->
              Ojs.set_prop_ascii (t_to_js x892) "encoding"
                (or_null_to_js
                   (fun (x894 : [ `buffer ]) ->
                      match x894 with | `buffer -> Ojs.string_to_js "buffer")
                   x893)
        let (cast : t -> ExecFileOptions.t) =
          fun (x895 : t) -> ExecFileOptions.t_of_js (t_to_js x895)
      end
    module ExecFileOptionsWithOtherEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x897 : Ojs.t) -> x897
        and t_to_js : t -> Ojs.t = fun (x896 : Ojs.t) -> x896
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x898 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x898) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x899 : t) ->
            fun (x900 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x899) "encoding"
                (BufferEncoding.t_to_js x900)
        let (cast : t -> ExecFileOptions.t) =
          fun (x901 : t) -> ExecFileOptions.t_of_js (t_to_js x901)
      end
    module ExecFileException =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x903 : Ojs.t) -> x903
        and t_to_js : t -> Ojs.t = fun (x902 : Ojs.t) -> x902
      end
    let (exec_file : file:string -> ChildProcess.t) =
      fun ~file:(x904 : string) ->
        ChildProcess.t_of_js
          (Ojs.call Import.child_process "execFile"
             [|(Ojs.string_to_js x904)|])
    let (exec_file :
      file:string ->
        options:(Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
          intersection2 or_null_or_undefined -> ChildProcess.t)
      =
      fun ~file:(x905 : string) ->
        fun
          ~options:(x906 :
                     (Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
                       intersection2 or_null_or_undefined)
          ->
          ChildProcess.t_of_js
            (Ojs.call Import.child_process "execFile"
               [|(Ojs.string_to_js x905);(or_null_or_undefined_to_js
                                            (fun
                                               (x907 :
                                                 (Node_fs.Fs.BaseEncodingOptions.t,
                                                   ExecFileOptions.t)
                                                   intersection2)
                                               ->
                                               intersection2_to_js
                                                 Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                 ExecFileOptions.t_to_js x907)
                                            x906)|])
    let (exec_file :
      file:string -> ?args:string list or_null -> unit -> ChildProcess.t) =
      fun ~file:(x910 : string) ->
        fun ?args:(x911 : string list or_null option) ->
          fun () ->
            ChildProcess.t_of_js
              (let x916 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x916 "execFile") "apply"
                 [|x916;((let x912 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x912 "push" [|(Ojs.string_to_js x910)|]);
                          (match x911 with
                           | Some x913 ->
                               ignore
                                 (Ojs.call x912 "push"
                                    [|(or_null_to_js
                                         (fun (x914 : string list) ->
                                            Ojs.list_to_js Ojs.string_to_js
                                              x914) x913)|])
                           | None -> ());
                          x912))|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          options:(Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
            intersection2 or_null_or_undefined -> ChildProcess.t)
      =
      fun ~file:(x917 : string) ->
        fun ~args:(x918 : string list or_null_or_undefined) ->
          fun
            ~options:(x921 :
                       (Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
                         intersection2 or_null_or_undefined)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x917);(or_null_or_undefined_to_js
                                              (fun (x919 : string list) ->
                                                 Ojs.list_to_js
                                                   Ojs.string_to_js x919)
                                              x918);(or_null_or_undefined_to_js
                                                       (fun
                                                          (x922 :
                                                            (Node_fs.Fs.BaseEncodingOptions.t,
                                                              ExecFileOptions.t)
                                                              intersection2)
                                                          ->
                                                          intersection2_to_js
                                                            Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                            ExecFileOptions.t_to_js
                                                            x922) x921)|])
    let (exec_file :
      file:string ->
        callback:(error:ExecFileException.t or_null ->
                    stdout:string -> stderr:string -> unit)
          -> ChildProcess.t)
      =
      fun ~file:(x925 : string) ->
        fun
          ~callback:(x926 :
                      error:ExecFileException.t or_null ->
                        stdout:string -> stderr:string -> unit)
          ->
          ChildProcess.t_of_js
            (Ojs.call Import.child_process "execFile"
               [|(Ojs.string_to_js x925);(Ojs.fun_to_js 3
                                            (fun (x927 : Ojs.t) ->
                                               fun (x929 : Ojs.t) ->
                                                 fun (x930 : Ojs.t) ->
                                                   x926
                                                     ~error:(or_null_of_js
                                                               ExecFileException.t_of_js
                                                               x927)
                                                     ~stdout:(Ojs.string_of_js
                                                                x929)
                                                     ~stderr:(Ojs.string_of_js
                                                                x930)))|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          callback:(error:ExecFileException.t or_null ->
                      stdout:string -> stderr:string -> unit)
            -> ChildProcess.t)
      =
      fun ~file:(x931 : string) ->
        fun ~args:(x932 : string list or_null_or_undefined) ->
          fun
            ~callback:(x935 :
                        error:ExecFileException.t or_null ->
                          stdout:string -> stderr:string -> unit)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x931);(or_null_or_undefined_to_js
                                              (fun (x933 : string list) ->
                                                 Ojs.list_to_js
                                                   Ojs.string_to_js x933)
                                              x932);(Ojs.fun_to_js 3
                                                       (fun (x936 : Ojs.t) ->
                                                          fun (x938 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x939 : Ojs.t)
                                                              ->
                                                              x935
                                                                ~error:(
                                                                or_null_of_js
                                                                  ExecFileException.t_of_js
                                                                  x936)
                                                                ~stdout:(
                                                                Ojs.string_of_js
                                                                  x938)
                                                                ~stderr:(
                                                                Ojs.string_of_js
                                                                  x939)))|])
    let (exec_file :
      file:string ->
        options:ExecFileOptionsWithBufferEncoding.t ->
          callback:(error:ExecFileException.t or_null ->
                      stdout:Buffer.t -> stderr:Buffer.t -> unit)
            -> ChildProcess.t)
      =
      fun ~file:(x940 : string) ->
        fun ~options:(x941 : ExecFileOptionsWithBufferEncoding.t) ->
          fun
            ~callback:(x942 :
                        error:ExecFileException.t or_null ->
                          stdout:Buffer.t -> stderr:Buffer.t -> unit)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x940);(ExecFileOptionsWithBufferEncoding.t_to_js
                                              x941);(Ojs.fun_to_js 3
                                                       (fun (x943 : Ojs.t) ->
                                                          fun (x945 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x946 : Ojs.t)
                                                              ->
                                                              x942
                                                                ~error:(
                                                                or_null_of_js
                                                                  ExecFileException.t_of_js
                                                                  x943)
                                                                ~stdout:(
                                                                Buffer.t_of_js
                                                                  x945)
                                                                ~stderr:(
                                                                Buffer.t_of_js
                                                                  x946)))|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          options:ExecFileOptionsWithBufferEncoding.t ->
            callback:(error:ExecFileException.t or_null ->
                        stdout:Buffer.t -> stderr:Buffer.t -> unit)
              -> ChildProcess.t)
      =
      fun ~file:(x947 : string) ->
        fun ~args:(x948 : string list or_null_or_undefined) ->
          fun ~options:(x951 : ExecFileOptionsWithBufferEncoding.t) ->
            fun
              ~callback:(x952 :
                          error:ExecFileException.t or_null ->
                            stdout:Buffer.t -> stderr:Buffer.t -> unit)
              ->
              ChildProcess.t_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x947);(or_null_or_undefined_to_js
                                                (fun (x949 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x949)
                                                x948);(ExecFileOptionsWithBufferEncoding.t_to_js
                                                         x951);(Ojs.fun_to_js
                                                                  3
                                                                  (fun
                                                                    (x953 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x955 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x956 :
                                                                    Ojs.t) ->
                                                                    x952
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    ExecFileException.t_of_js
                                                                    x953)
                                                                    ~stdout:(
                                                                    Buffer.t_of_js
                                                                    x955)
                                                                    ~stderr:(
                                                                    Buffer.t_of_js
                                                                    x956)))|])
    let (exec_file :
      file:string ->
        options:ExecFileOptionsWithStringEncoding.t ->
          callback:(error:ExecFileException.t or_null ->
                      stdout:string -> stderr:string -> unit)
            -> ChildProcess.t)
      =
      fun ~file:(x957 : string) ->
        fun ~options:(x958 : ExecFileOptionsWithStringEncoding.t) ->
          fun
            ~callback:(x959 :
                        error:ExecFileException.t or_null ->
                          stdout:string -> stderr:string -> unit)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x957);(ExecFileOptionsWithStringEncoding.t_to_js
                                              x958);(Ojs.fun_to_js 3
                                                       (fun (x960 : Ojs.t) ->
                                                          fun (x962 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x963 : Ojs.t)
                                                              ->
                                                              x959
                                                                ~error:(
                                                                or_null_of_js
                                                                  ExecFileException.t_of_js
                                                                  x960)
                                                                ~stdout:(
                                                                Ojs.string_of_js
                                                                  x962)
                                                                ~stderr:(
                                                                Ojs.string_of_js
                                                                  x963)))|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          options:ExecFileOptionsWithStringEncoding.t ->
            callback:(error:ExecFileException.t or_null ->
                        stdout:string -> stderr:string -> unit)
              -> ChildProcess.t)
      =
      fun ~file:(x964 : string) ->
        fun ~args:(x965 : string list or_null_or_undefined) ->
          fun ~options:(x968 : ExecFileOptionsWithStringEncoding.t) ->
            fun
              ~callback:(x969 :
                          error:ExecFileException.t or_null ->
                            stdout:string -> stderr:string -> unit)
              ->
              ChildProcess.t_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x964);(or_null_or_undefined_to_js
                                                (fun (x966 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x966)
                                                x965);(ExecFileOptionsWithStringEncoding.t_to_js
                                                         x968);(Ojs.fun_to_js
                                                                  3
                                                                  (fun
                                                                    (x970 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x972 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x973 :
                                                                    Ojs.t) ->
                                                                    x969
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    ExecFileException.t_of_js
                                                                    x970)
                                                                    ~stdout:(
                                                                    Ojs.string_of_js
                                                                    x972)
                                                                    ~stderr:(
                                                                    Ojs.string_of_js
                                                                    x973)))|])
    let (exec_file :
      file:string ->
        options:ExecFileOptionsWithOtherEncoding.t ->
          callback:(error:ExecFileException.t or_null ->
                      stdout:Buffer.t or_string ->
                        stderr:Buffer.t or_string -> unit)
            -> ChildProcess.t)
      =
      fun ~file:(x974 : string) ->
        fun ~options:(x975 : ExecFileOptionsWithOtherEncoding.t) ->
          fun
            ~callback:(x976 :
                        error:ExecFileException.t or_null ->
                          stdout:Buffer.t or_string ->
                            stderr:Buffer.t or_string -> unit)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x974);(ExecFileOptionsWithOtherEncoding.t_to_js
                                              x975);(Ojs.fun_to_js 3
                                                       (fun (x977 : Ojs.t) ->
                                                          fun (x979 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x981 : Ojs.t)
                                                              ->
                                                              x976
                                                                ~error:(
                                                                or_null_of_js
                                                                  ExecFileException.t_of_js
                                                                  x977)
                                                                ~stdout:(
                                                                or_string_of_js
                                                                  Buffer.t_of_js
                                                                  x979)
                                                                ~stderr:(
                                                                or_string_of_js
                                                                  Buffer.t_of_js
                                                                  x981)))|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          options:ExecFileOptionsWithOtherEncoding.t ->
            callback:(error:ExecFileException.t or_null ->
                        stdout:Buffer.t or_string ->
                          stderr:Buffer.t or_string -> unit)
              -> ChildProcess.t)
      =
      fun ~file:(x983 : string) ->
        fun ~args:(x984 : string list or_null_or_undefined) ->
          fun ~options:(x987 : ExecFileOptionsWithOtherEncoding.t) ->
            fun
              ~callback:(x988 :
                          error:ExecFileException.t or_null ->
                            stdout:Buffer.t or_string ->
                              stderr:Buffer.t or_string -> unit)
              ->
              ChildProcess.t_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x983);(or_null_or_undefined_to_js
                                                (fun (x985 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x985)
                                                x984);(ExecFileOptionsWithOtherEncoding.t_to_js
                                                         x987);(Ojs.fun_to_js
                                                                  3
                                                                  (fun
                                                                    (x989 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x991 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x993 :
                                                                    Ojs.t) ->
                                                                    x988
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    ExecFileException.t_of_js
                                                                    x989)
                                                                    ~stdout:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x991)
                                                                    ~stderr:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x993)))|])
    let (exec_file :
      file:string ->
        options:ExecFileOptions.t ->
          callback:(error:ExecFileException.t or_null ->
                      stdout:string -> stderr:string -> unit)
            -> ChildProcess.t)
      =
      fun ~file:(x995 : string) ->
        fun ~options:(x996 : ExecFileOptions.t) ->
          fun
            ~callback:(x997 :
                        error:ExecFileException.t or_null ->
                          stdout:string -> stderr:string -> unit)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x995);(ExecFileOptions.t_to_js x996);(
                   Ojs.fun_to_js 3
                     (fun (x998 : Ojs.t) ->
                        fun (x1000 : Ojs.t) ->
                          fun (x1001 : Ojs.t) ->
                            x997
                              ~error:(or_null_of_js ExecFileException.t_of_js
                                        x998)
                              ~stdout:(Ojs.string_of_js x1000)
                              ~stderr:(Ojs.string_of_js x1001)))|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          options:ExecFileOptions.t ->
            callback:(error:ExecFileException.t or_null ->
                        stdout:string -> stderr:string -> unit)
              -> ChildProcess.t)
      =
      fun ~file:(x1002 : string) ->
        fun ~args:(x1003 : string list or_null_or_undefined) ->
          fun ~options:(x1006 : ExecFileOptions.t) ->
            fun
              ~callback:(x1007 :
                          error:ExecFileException.t or_null ->
                            stdout:string -> stderr:string -> unit)
              ->
              ChildProcess.t_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x1002);(or_null_or_undefined_to_js
                                                 (fun (x1004 : string list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Ojs.string_to_js x1004)
                                                 x1003);(ExecFileOptions.t_to_js
                                                           x1006);(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1008 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1010 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1011 :
                                                                    Ojs.t) ->
                                                                    x1007
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    ExecFileException.t_of_js
                                                                    x1008)
                                                                    ~stdout:(
                                                                    Ojs.string_of_js
                                                                    x1010)
                                                                    ~stderr:(
                                                                    Ojs.string_of_js
                                                                    x1011)))|])
    let (exec_file :
      file:string ->
        options:(Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
          intersection2 or_null_or_undefined ->
          callback:(error:ExecFileException.t or_null ->
                      stdout:Buffer.t or_string ->
                        stderr:Buffer.t or_string -> unit)
            or_null_or_undefined -> ChildProcess.t)
      =
      fun ~file:(x1012 : string) ->
        fun
          ~options:(x1013 :
                     (Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
                       intersection2 or_null_or_undefined)
          ->
          fun
            ~callback:(x1017 :
                        (error:ExecFileException.t or_null ->
                           stdout:Buffer.t or_string ->
                             stderr:Buffer.t or_string -> unit)
                          or_null_or_undefined)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x1012);(or_null_or_undefined_to_js
                                               (fun
                                                  (x1014 :
                                                    (Node_fs.Fs.BaseEncodingOptions.t,
                                                      ExecFileOptions.t)
                                                      intersection2)
                                                  ->
                                                  intersection2_to_js
                                                    Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                    ExecFileOptions.t_to_js
                                                    x1014) x1013);(or_null_or_undefined_to_js
                                                                    (fun
                                                                    (x1018 :
                                                                    error:ExecFileException.t
                                                                    or_null
                                                                    ->
                                                                    stdout:Buffer.t
                                                                    or_string
                                                                    ->
                                                                    stderr:Buffer.t
                                                                    or_string
                                                                    -> 
                                                                    unit) ->
                                                                    Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1019 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1021 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1023 :
                                                                    Ojs.t) ->
                                                                    x1018
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    ExecFileException.t_of_js
                                                                    x1019)
                                                                    ~stdout:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1021)
                                                                    ~stderr:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1023)))
                                                                    x1017)|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          options:(Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
            intersection2 or_null_or_undefined ->
            callback:(error:ExecFileException.t or_null ->
                        stdout:Buffer.t or_string ->
                          stderr:Buffer.t or_string -> unit)
              or_null_or_undefined -> ChildProcess.t)
      =
      fun ~file:(x1025 : string) ->
        fun ~args:(x1026 : string list or_null_or_undefined) ->
          fun
            ~options:(x1029 :
                       (Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
                         intersection2 or_null_or_undefined)
            ->
            fun
              ~callback:(x1033 :
                          (error:ExecFileException.t or_null ->
                             stdout:Buffer.t or_string ->
                               stderr:Buffer.t or_string -> unit)
                            or_null_or_undefined)
              ->
              ChildProcess.t_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x1025);(or_null_or_undefined_to_js
                                                 (fun (x1027 : string list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Ojs.string_to_js x1027)
                                                 x1026);(or_null_or_undefined_to_js
                                                           (fun
                                                              (x1030 :
                                                                (Node_fs.Fs.BaseEncodingOptions.t,
                                                                  ExecFileOptions.t)
                                                                  intersection2)
                                                              ->
                                                              intersection2_to_js
                                                                Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                                ExecFileOptions.t_to_js
                                                                x1030) x1029);(
                     or_null_or_undefined_to_js
                       (fun
                          (x1034 :
                            error:ExecFileException.t or_null ->
                              stdout:Buffer.t or_string ->
                                stderr:Buffer.t or_string -> unit)
                          ->
                          Ojs.fun_to_js 3
                            (fun (x1035 : Ojs.t) ->
                               fun (x1037 : Ojs.t) ->
                                 fun (x1039 : Ojs.t) ->
                                   x1034
                                     ~error:(or_null_of_js
                                               ExecFileException.t_of_js
                                               x1035)
                                     ~stdout:(or_string_of_js Buffer.t_of_js
                                                x1037)
                                     ~stderr:(or_string_of_js Buffer.t_of_js
                                                x1039))) x1033)|])
    module ExecFile =
      struct
        let (__promisify__ :
          file:string -> AnonymousInterface3.t PromiseWithChild.t) =
          fun ~file:(x1041 : string) ->
            PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.child_process "execFile")
                 "__promisify__" [|(Ojs.string_to_js x1041)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~file:(x1043 : string) ->
            fun ~args:(x1044 : string list or_null_or_undefined) ->
              PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1043);(or_null_or_undefined_to_js
                                                 (fun (x1045 : string list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Ojs.string_to_js x1045)
                                                 x1044)|])
        let (__promisify__ :
          file:string ->
            options:ExecFileOptionsWithBufferEncoding.t ->
              AnonymousInterface2.t PromiseWithChild.t)
          =
          fun ~file:(x1048 : string) ->
            fun ~options:(x1049 : ExecFileOptionsWithBufferEncoding.t) ->
              PromiseWithChild.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1048);(ExecFileOptionsWithBufferEncoding.t_to_js
                                                 x1049)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:ExecFileOptionsWithBufferEncoding.t ->
                AnonymousInterface2.t PromiseWithChild.t)
          =
          fun ~file:(x1051 : string) ->
            fun ~args:(x1052 : string list or_null_or_undefined) ->
              fun ~options:(x1055 : ExecFileOptionsWithBufferEncoding.t) ->
                PromiseWithChild.t_of_js AnonymousInterface2.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1051);(or_null_or_undefined_to_js
                                                   (fun (x1053 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1053) x1052);(
                       ExecFileOptionsWithBufferEncoding.t_to_js x1055)|])
        let (__promisify__ :
          file:string ->
            options:ExecFileOptionsWithStringEncoding.t ->
              AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~file:(x1057 : string) ->
            fun ~options:(x1058 : ExecFileOptionsWithStringEncoding.t) ->
              PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1057);(ExecFileOptionsWithStringEncoding.t_to_js
                                                 x1058)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:ExecFileOptionsWithStringEncoding.t ->
                AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~file:(x1060 : string) ->
            fun ~args:(x1061 : string list or_null_or_undefined) ->
              fun ~options:(x1064 : ExecFileOptionsWithStringEncoding.t) ->
                PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1060);(or_null_or_undefined_to_js
                                                   (fun (x1062 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1062) x1061);(
                       ExecFileOptionsWithStringEncoding.t_to_js x1064)|])
        let (__promisify__ :
          file:string ->
            options:ExecFileOptionsWithOtherEncoding.t ->
              AnonymousInterface4.t PromiseWithChild.t)
          =
          fun ~file:(x1066 : string) ->
            fun ~options:(x1067 : ExecFileOptionsWithOtherEncoding.t) ->
              PromiseWithChild.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1066);(ExecFileOptionsWithOtherEncoding.t_to_js
                                                 x1067)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:ExecFileOptionsWithOtherEncoding.t ->
                AnonymousInterface4.t PromiseWithChild.t)
          =
          fun ~file:(x1069 : string) ->
            fun ~args:(x1070 : string list or_null_or_undefined) ->
              fun ~options:(x1073 : ExecFileOptionsWithOtherEncoding.t) ->
                PromiseWithChild.t_of_js AnonymousInterface4.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1069);(or_null_or_undefined_to_js
                                                   (fun (x1071 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1071) x1070);(
                       ExecFileOptionsWithOtherEncoding.t_to_js x1073)|])
        let (__promisify__ :
          file:string ->
            options:ExecFileOptions.t ->
              AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~file:(x1075 : string) ->
            fun ~options:(x1076 : ExecFileOptions.t) ->
              PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1075);(ExecFileOptions.t_to_js x1076)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:ExecFileOptions.t ->
                AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~file:(x1078 : string) ->
            fun ~args:(x1079 : string list or_null_or_undefined) ->
              fun ~options:(x1082 : ExecFileOptions.t) ->
                PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1078);(or_null_or_undefined_to_js
                                                   (fun (x1080 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1080) x1079);(
                       ExecFileOptions.t_to_js x1082)|])
        let (__promisify__ :
          file:string ->
            options:(Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
              intersection2 or_null_or_undefined ->
              AnonymousInterface4.t PromiseWithChild.t)
          =
          fun ~file:(x1084 : string) ->
            fun
              ~options:(x1085 :
                         (Node_fs.Fs.BaseEncodingOptions.t,
                           ExecFileOptions.t) intersection2
                           or_null_or_undefined)
              ->
              PromiseWithChild.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1084);(or_null_or_undefined_to_js
                                                 (fun
                                                    (x1086 :
                                                      (Node_fs.Fs.BaseEncodingOptions.t,
                                                        ExecFileOptions.t)
                                                        intersection2)
                                                    ->
                                                    intersection2_to_js
                                                      Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                      ExecFileOptions.t_to_js
                                                      x1086) x1085)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:(Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
                intersection2 or_null_or_undefined ->
                AnonymousInterface4.t PromiseWithChild.t)
          =
          fun ~file:(x1090 : string) ->
            fun ~args:(x1091 : string list or_null_or_undefined) ->
              fun
                ~options:(x1094 :
                           (Node_fs.Fs.BaseEncodingOptions.t,
                             ExecFileOptions.t) intersection2
                             or_null_or_undefined)
                ->
                PromiseWithChild.t_of_js AnonymousInterface4.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1090);(or_null_or_undefined_to_js
                                                   (fun (x1092 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1092) x1091);(
                       or_null_or_undefined_to_js
                         (fun
                            (x1095 :
                              (Node_fs.Fs.BaseEncodingOptions.t,
                                ExecFileOptions.t) intersection2)
                            ->
                            intersection2_to_js
                              Node_fs.Fs.BaseEncodingOptions.t_to_js
                              ExecFileOptions.t_to_js x1095) x1094)|])
      end
    module ForkOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1100 : Ojs.t) -> x1100
        and t_to_js : t -> Ojs.t = fun (x1099 : Ojs.t) -> x1099
        let (get_exec_path : t -> string) =
          fun (x1101 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1101) "execPath")
        let (set_exec_path : t -> string -> unit) =
          fun (x1102 : t) ->
            fun (x1103 : string) ->
              Ojs.set_prop_ascii (t_to_js x1102) "execPath"
                (Ojs.string_to_js x1103)
        let (get_exec_argv : t -> string list) =
          fun (x1104 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1104) "execArgv")
        let (set_exec_argv : t -> string list -> unit) =
          fun (x1106 : t) ->
            fun (x1107 : string list) ->
              Ojs.set_prop_ascii (t_to_js x1106) "execArgv"
                (Ojs.list_to_js Ojs.string_to_js x1107)
        let (get_silent : t -> bool) =
          fun (x1109 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1109) "silent")
        let (set_silent : t -> bool -> unit) =
          fun (x1110 : t) ->
            fun (x1111 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1110) "silent"
                (Ojs.bool_to_js x1111)
        let (get_stdio : t -> StdioOptions.t) =
          fun (x1112 : t) ->
            StdioOptions.t_of_js (Ojs.get_prop_ascii (t_to_js x1112) "stdio")
        let (set_stdio : t -> StdioOptions.t -> unit) =
          fun (x1113 : t) ->
            fun (x1114 : StdioOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x1113) "stdio"
                (StdioOptions.t_to_js x1114)
        let (get_detached : t -> bool) =
          fun (x1115 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1115) "detached")
        let (set_detached : t -> bool -> unit) =
          fun (x1116 : t) ->
            fun (x1117 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1116) "detached"
                (Ojs.bool_to_js x1117)
        let (get_windows_verbatim_arguments : t -> bool) =
          fun (x1118 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1118) "windowsVerbatimArguments")
        let (set_windows_verbatim_arguments : t -> bool -> unit) =
          fun (x1119 : t) ->
            fun (x1120 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1119) "windowsVerbatimArguments"
                (Ojs.bool_to_js x1120)
        let (cast : t -> ProcessEnvOptions.t) =
          fun (x1121 : t) -> ProcessEnvOptions.t_of_js (t_to_js x1121)
        let (cast' : t -> MessagingOptions.t) =
          fun (x1122 : t) -> MessagingOptions.t_of_js (t_to_js x1122)
      end
    let (fork :
      module_path:string -> ?options:ForkOptions.t -> unit -> ChildProcess.t)
      =
      fun ~module_path:(x1123 : string) ->
        fun ?options:(x1124 : ForkOptions.t option) ->
          fun () ->
            ChildProcess.t_of_js
              (let x1127 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1127 "fork") "apply"
                 [|x1127;((let x1125 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1125 "push"
                                [|(Ojs.string_to_js x1123)|]);
                           (match x1124 with
                            | Some x1126 ->
                                ignore
                                  (Ojs.call x1125 "push"
                                     [|(ForkOptions.t_to_js x1126)|])
                            | None -> ());
                           x1125))|])
    let (fork :
      module_path:string ->
        ?args:string list -> ?options:ForkOptions.t -> unit -> ChildProcess.t)
      =
      fun ~module_path:(x1128 : string) ->
        fun ?args:(x1129 : string list option) ->
          fun ?options:(x1130 : ForkOptions.t option) ->
            fun () ->
              ChildProcess.t_of_js
                (let x1135 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1135 "fork") "apply"
                   [|x1135;((let x1131 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1131 "push"
                                  [|(Ojs.string_to_js x1128)|]);
                             (match x1129 with
                              | Some x1133 ->
                                  ignore
                                    (Ojs.call x1131 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1133)|])
                              | None -> ());
                             (match x1130 with
                              | Some x1132 ->
                                  ignore
                                    (Ojs.call x1131 "push"
                                       [|(ForkOptions.t_to_js x1132)|])
                              | None -> ());
                             x1131))|])
    module SpawnSyncOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1137 : Ojs.t) -> x1137
        and t_to_js : t -> Ojs.t = fun (x1136 : Ojs.t) -> x1136
        let (get_input : t -> ArrayBufferView.t or_string) =
          fun (x1138 : t) ->
            or_string_of_js ArrayBufferView.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1138) "input")
        let (set_input : t -> ArrayBufferView.t or_string -> unit) =
          fun (x1140 : t) ->
            fun (x1141 : ArrayBufferView.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1140) "input"
                (or_string_to_js ArrayBufferView.t_to_js x1141)
        let (get_kill_signal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x1143 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1143) "killSignal")
        let (set_kill_signal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x1145 : t) ->
            fun (x1146 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x1145) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x1146)
        let (get_max_buffer : t -> int) =
          fun (x1148 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1148) "maxBuffer")
        let (set_max_buffer : t -> int -> unit) =
          fun (x1149 : t) ->
            fun (x1150 : int) ->
              Ojs.set_prop_ascii (t_to_js x1149) "maxBuffer"
                (Ojs.int_to_js x1150)
        let (get_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null) =
          fun (x1151 : t) ->
            or_null_of_js
              (fun (x1152 : Ojs.t) ->
                 or_enum_of_js BufferEncoding.t_of_js
                   (fun (x1154 : Ojs.t) ->
                      let x1155 = x1154 in
                      match Ojs.string_of_js x1155 with
                      | "buffer" -> `buffer
                      | _ -> assert false) x1152)
              (Ojs.get_prop_ascii (t_to_js x1151) "encoding")
        let (set_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null -> unit) =
          fun (x1156 : t) ->
            fun (x1157 : (BufferEncoding.t, [ `buffer ]) or_enum or_null) ->
              Ojs.set_prop_ascii (t_to_js x1156) "encoding"
                (or_null_to_js
                   (fun (x1158 : (BufferEncoding.t, [ `buffer ]) or_enum) ->
                      or_enum_to_js BufferEncoding.t_to_js
                        (fun (x1160 : [ `buffer ]) ->
                           match x1160 with
                           | `buffer -> Ojs.string_to_js "buffer") x1158)
                   x1157)
        let (cast : t -> CommonSpawnOptions.t) =
          fun (x1161 : t) -> CommonSpawnOptions.t_of_js (t_to_js x1161)
      end
    module SpawnSyncOptionsWithStringEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1163 : Ojs.t) -> x1163
        and t_to_js : t -> Ojs.t = fun (x1162 : Ojs.t) -> x1162
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1164 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1164) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1165 : t) ->
            fun (x1166 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1165) "encoding"
                (BufferEncoding.t_to_js x1166)
        let (cast : t -> SpawnSyncOptions.t) =
          fun (x1167 : t) -> SpawnSyncOptions.t_of_js (t_to_js x1167)
      end
    module SpawnSyncOptionsWithBufferEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1169 : Ojs.t) -> x1169
        and t_to_js : t -> Ojs.t = fun (x1168 : Ojs.t) -> x1168
        let (get_encoding : t -> [ `buffer ] or_null) =
          fun (x1170 : t) ->
            or_null_of_js
              (fun (x1171 : Ojs.t) ->
                 let x1172 = x1171 in
                 match Ojs.string_of_js x1172 with
                 | "buffer" -> `buffer
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x1170) "encoding")
        let (set_encoding : t -> [ `buffer ] or_null -> unit) =
          fun (x1173 : t) ->
            fun (x1174 : [ `buffer ] or_null) ->
              Ojs.set_prop_ascii (t_to_js x1173) "encoding"
                (or_null_to_js
                   (fun (x1175 : [ `buffer ]) ->
                      match x1175 with | `buffer -> Ojs.string_to_js "buffer")
                   x1174)
        let (cast : t -> SpawnSyncOptions.t) =
          fun (x1176 : t) -> SpawnSyncOptions.t_of_js (t_to_js x1176)
      end
    module SpawnSyncReturns =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1178 : Ojs.t) -> x1178
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1177 : Ojs.t) -> x1177
        let (get_pid : 'T t -> int) =
          fun (x1179 : 'T t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1179) "pid")
        let (set_pid : 'T t -> int -> unit) =
          fun (x1181 : 'T t) ->
            fun (x1182 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1181) "pid"
                (Ojs.int_to_js x1182)
        let (get_output : 'T t -> string list) =
          fun (x1184 : 'T t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1184) "output")
        let (set_output : 'T t -> string list -> unit) =
          fun (x1187 : 'T t) ->
            fun (x1188 : string list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1187) "output"
                (Ojs.list_to_js Ojs.string_to_js x1188)
        let (get_stdout : 'T t -> 'T) =
          fun (x1191 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x1191) "stdout")
        let (set_stdout : 'T t -> 'T -> unit) =
          fun (x1193 : 'T t) ->
            fun (x1194 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1193) "stdout"
                (Obj.magic x1194)
        let (get_stderr : 'T t -> 'T) =
          fun (x1196 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x1196) "stderr")
        let (set_stderr : 'T t -> 'T -> unit) =
          fun (x1198 : 'T t) ->
            fun (x1199 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1198) "stderr"
                (Obj.magic x1199)
        let (get_status : 'T t -> int or_null) =
          fun (x1201 : 'T t) ->
            or_null_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1201) "status")
        let (set_status : 'T t -> int or_null -> unit) =
          fun (x1204 : 'T t) ->
            fun (x1205 : int or_null) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1204) "status"
                (or_null_to_js Ojs.int_to_js x1205)
        let (get_signal : 'T t -> Node_process.Process.Signals.t or_null) =
          fun (x1208 : 'T t) ->
            or_null_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1208) "signal")
        let (set_signal :
          'T t -> Node_process.Process.Signals.t or_null -> unit) =
          fun (x1211 : 'T t) ->
            fun (x1212 : Node_process.Process.Signals.t or_null) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1211) "signal"
                (or_null_to_js Node_process.Process.Signals.t_to_js x1212)
        let (get_error : 'T t -> Error.t) =
          fun (x1215 : 'T t) ->
            Error.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1215) "error")
        let (set_error : 'T t -> Error.t -> unit) =
          fun (x1217 : 'T t) ->
            fun (x1218 : Error.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1217) "error"
                (Error.t_to_js x1218)
      end
    let (spawn'Sync : command:string -> Buffer.t SpawnSyncReturns.t) =
      fun ~command:(x1220 : string) ->
        SpawnSyncReturns.t_of_js Buffer.t_of_js
          (Ojs.call Import.child_process "spawnSync"
             [|(Ojs.string_to_js x1220)|])
    let (spawn'Sync :
      command:string ->
        ?options:SpawnSyncOptionsWithStringEncoding.t ->
          unit -> string SpawnSyncReturns.t)
      =
      fun ~command:(x1222 : string) ->
        fun ?options:(x1223 : SpawnSyncOptionsWithStringEncoding.t option) ->
          fun () ->
            SpawnSyncReturns.t_of_js Ojs.string_of_js
              (let x1226 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1226 "spawnSync") "apply"
                 [|x1226;((let x1224 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1224 "push"
                                [|(Ojs.string_to_js x1222)|]);
                           (match x1223 with
                            | Some x1225 ->
                                ignore
                                  (Ojs.call x1224 "push"
                                     [|(SpawnSyncOptionsWithStringEncoding.t_to_js
                                          x1225)|])
                            | None -> ());
                           x1224))|])
    let (spawn'Sync :
      command:string ->
        ?options:SpawnSyncOptionsWithBufferEncoding.t ->
          unit -> Buffer.t SpawnSyncReturns.t)
      =
      fun ~command:(x1228 : string) ->
        fun ?options:(x1229 : SpawnSyncOptionsWithBufferEncoding.t option) ->
          fun () ->
            SpawnSyncReturns.t_of_js Buffer.t_of_js
              (let x1232 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1232 "spawnSync") "apply"
                 [|x1232;((let x1230 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1230 "push"
                                [|(Ojs.string_to_js x1228)|]);
                           (match x1229 with
                            | Some x1231 ->
                                ignore
                                  (Ojs.call x1230 "push"
                                     [|(SpawnSyncOptionsWithBufferEncoding.t_to_js
                                          x1231)|])
                            | None -> ());
                           x1230))|])
    let (spawn'Sync :
      command:string ->
        ?options:SpawnSyncOptions.t -> unit -> Buffer.t SpawnSyncReturns.t)
      =
      fun ~command:(x1234 : string) ->
        fun ?options:(x1235 : SpawnSyncOptions.t option) ->
          fun () ->
            SpawnSyncReturns.t_of_js Buffer.t_of_js
              (let x1238 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1238 "spawnSync") "apply"
                 [|x1238;((let x1236 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1236 "push"
                                [|(Ojs.string_to_js x1234)|]);
                           (match x1235 with
                            | Some x1237 ->
                                ignore
                                  (Ojs.call x1236 "push"
                                     [|(SpawnSyncOptions.t_to_js x1237)|])
                            | None -> ());
                           x1236))|])
    let (spawn'Sync :
      command:string ->
        ?args:string list ->
          ?options:SpawnSyncOptionsWithStringEncoding.t ->
            unit -> string SpawnSyncReturns.t)
      =
      fun ~command:(x1240 : string) ->
        fun ?args:(x1241 : string list option) ->
          fun ?options:(x1242 : SpawnSyncOptionsWithStringEncoding.t option)
            ->
            fun () ->
              SpawnSyncReturns.t_of_js Ojs.string_of_js
                (let x1247 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1247 "spawnSync") "apply"
                   [|x1247;((let x1243 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1243 "push"
                                  [|(Ojs.string_to_js x1240)|]);
                             (match x1241 with
                              | Some x1245 ->
                                  ignore
                                    (Ojs.call x1243 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1245)|])
                              | None -> ());
                             (match x1242 with
                              | Some x1244 ->
                                  ignore
                                    (Ojs.call x1243 "push"
                                       [|(SpawnSyncOptionsWithStringEncoding.t_to_js
                                            x1244)|])
                              | None -> ());
                             x1243))|])
    let (spawn'Sync :
      command:string ->
        ?args:string list ->
          ?options:SpawnSyncOptionsWithBufferEncoding.t ->
            unit -> Buffer.t SpawnSyncReturns.t)
      =
      fun ~command:(x1249 : string) ->
        fun ?args:(x1250 : string list option) ->
          fun ?options:(x1251 : SpawnSyncOptionsWithBufferEncoding.t option)
            ->
            fun () ->
              SpawnSyncReturns.t_of_js Buffer.t_of_js
                (let x1256 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1256 "spawnSync") "apply"
                   [|x1256;((let x1252 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1252 "push"
                                  [|(Ojs.string_to_js x1249)|]);
                             (match x1250 with
                              | Some x1254 ->
                                  ignore
                                    (Ojs.call x1252 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1254)|])
                              | None -> ());
                             (match x1251 with
                              | Some x1253 ->
                                  ignore
                                    (Ojs.call x1252 "push"
                                       [|(SpawnSyncOptionsWithBufferEncoding.t_to_js
                                            x1253)|])
                              | None -> ());
                             x1252))|])
    let (spawn'Sync :
      command:string ->
        ?args:string list ->
          ?options:SpawnSyncOptions.t -> unit -> Buffer.t SpawnSyncReturns.t)
      =
      fun ~command:(x1258 : string) ->
        fun ?args:(x1259 : string list option) ->
          fun ?options:(x1260 : SpawnSyncOptions.t option) ->
            fun () ->
              SpawnSyncReturns.t_of_js Buffer.t_of_js
                (let x1265 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1265 "spawnSync") "apply"
                   [|x1265;((let x1261 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1261 "push"
                                  [|(Ojs.string_to_js x1258)|]);
                             (match x1259 with
                              | Some x1263 ->
                                  ignore
                                    (Ojs.call x1261 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1263)|])
                              | None -> ());
                             (match x1260 with
                              | Some x1262 ->
                                  ignore
                                    (Ojs.call x1261 "push"
                                       [|(SpawnSyncOptions.t_to_js x1262)|])
                              | None -> ());
                             x1261))|])
    module ExecSyncOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1268 : Ojs.t) -> x1268
        and t_to_js : t -> Ojs.t = fun (x1267 : Ojs.t) -> x1267
        let (get_input : t -> Uint8Array.t or_string) =
          fun (x1269 : t) ->
            or_string_of_js Uint8Array.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1269) "input")
        let (set_input : t -> Uint8Array.t or_string -> unit) =
          fun (x1271 : t) ->
            fun (x1272 : Uint8Array.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1271) "input"
                (or_string_to_js Uint8Array.t_to_js x1272)
        let (get_stdio : t -> StdioOptions.t) =
          fun (x1274 : t) ->
            StdioOptions.t_of_js (Ojs.get_prop_ascii (t_to_js x1274) "stdio")
        let (set_stdio : t -> StdioOptions.t -> unit) =
          fun (x1275 : t) ->
            fun (x1276 : StdioOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x1275) "stdio"
                (StdioOptions.t_to_js x1276)
        let (get_shell : t -> string) =
          fun (x1277 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1277) "shell")
        let (set_shell : t -> string -> unit) =
          fun (x1278 : t) ->
            fun (x1279 : string) ->
              Ojs.set_prop_ascii (t_to_js x1278) "shell"
                (Ojs.string_to_js x1279)
        let (get_kill_signal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x1280 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1280) "killSignal")
        let (set_kill_signal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x1282 : t) ->
            fun (x1283 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x1282) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x1283)
        let (get_max_buffer : t -> int) =
          fun (x1285 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1285) "maxBuffer")
        let (set_max_buffer : t -> int -> unit) =
          fun (x1286 : t) ->
            fun (x1287 : int) ->
              Ojs.set_prop_ascii (t_to_js x1286) "maxBuffer"
                (Ojs.int_to_js x1287)
        let (get_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null) =
          fun (x1288 : t) ->
            or_null_of_js
              (fun (x1289 : Ojs.t) ->
                 or_enum_of_js BufferEncoding.t_of_js
                   (fun (x1291 : Ojs.t) ->
                      let x1292 = x1291 in
                      match Ojs.string_of_js x1292 with
                      | "buffer" -> `buffer
                      | _ -> assert false) x1289)
              (Ojs.get_prop_ascii (t_to_js x1288) "encoding")
        let (set_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null -> unit) =
          fun (x1293 : t) ->
            fun (x1294 : (BufferEncoding.t, [ `buffer ]) or_enum or_null) ->
              Ojs.set_prop_ascii (t_to_js x1293) "encoding"
                (or_null_to_js
                   (fun (x1295 : (BufferEncoding.t, [ `buffer ]) or_enum) ->
                      or_enum_to_js BufferEncoding.t_to_js
                        (fun (x1297 : [ `buffer ]) ->
                           match x1297 with
                           | `buffer -> Ojs.string_to_js "buffer") x1295)
                   x1294)
        let (cast : t -> CommonOptions.t) =
          fun (x1298 : t) -> CommonOptions.t_of_js (t_to_js x1298)
      end
    module ExecSyncOptionsWithStringEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1300 : Ojs.t) -> x1300
        and t_to_js : t -> Ojs.t = fun (x1299 : Ojs.t) -> x1299
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1301 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1301) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1302 : t) ->
            fun (x1303 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1302) "encoding"
                (BufferEncoding.t_to_js x1303)
        let (cast : t -> ExecSyncOptions.t) =
          fun (x1304 : t) -> ExecSyncOptions.t_of_js (t_to_js x1304)
      end
    module ExecSyncOptionsWithBufferEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1306 : Ojs.t) -> x1306
        and t_to_js : t -> Ojs.t = fun (x1305 : Ojs.t) -> x1305
        let (get_encoding : t -> [ `buffer ] or_null) =
          fun (x1307 : t) ->
            or_null_of_js
              (fun (x1308 : Ojs.t) ->
                 let x1309 = x1308 in
                 match Ojs.string_of_js x1309 with
                 | "buffer" -> `buffer
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x1307) "encoding")
        let (set_encoding : t -> [ `buffer ] or_null -> unit) =
          fun (x1310 : t) ->
            fun (x1311 : [ `buffer ] or_null) ->
              Ojs.set_prop_ascii (t_to_js x1310) "encoding"
                (or_null_to_js
                   (fun (x1312 : [ `buffer ]) ->
                      match x1312 with | `buffer -> Ojs.string_to_js "buffer")
                   x1311)
        let (cast : t -> ExecSyncOptions.t) =
          fun (x1313 : t) -> ExecSyncOptions.t_of_js (t_to_js x1313)
      end
    let (exec_sync : command:string -> Buffer.t) =
      fun ~command:(x1314 : string) ->
        Buffer.t_of_js
          (Ojs.call Import.child_process "execSync"
             [|(Ojs.string_to_js x1314)|])
    let (exec_sync :
      command:string ->
        ?options:ExecSyncOptionsWithStringEncoding.t -> unit -> string)
      =
      fun ~command:(x1315 : string) ->
        fun ?options:(x1316 : ExecSyncOptionsWithStringEncoding.t option) ->
          fun () ->
            Ojs.string_of_js
              (let x1319 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1319 "execSync") "apply"
                 [|x1319;((let x1317 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1317 "push"
                                [|(Ojs.string_to_js x1315)|]);
                           (match x1316 with
                            | Some x1318 ->
                                ignore
                                  (Ojs.call x1317 "push"
                                     [|(ExecSyncOptionsWithStringEncoding.t_to_js
                                          x1318)|])
                            | None -> ());
                           x1317))|])
    let (exec_sync :
      command:string ->
        ?options:ExecSyncOptionsWithBufferEncoding.t -> unit -> Buffer.t)
      =
      fun ~command:(x1320 : string) ->
        fun ?options:(x1321 : ExecSyncOptionsWithBufferEncoding.t option) ->
          fun () ->
            Buffer.t_of_js
              (let x1324 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1324 "execSync") "apply"
                 [|x1324;((let x1322 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1322 "push"
                                [|(Ojs.string_to_js x1320)|]);
                           (match x1321 with
                            | Some x1323 ->
                                ignore
                                  (Ojs.call x1322 "push"
                                     [|(ExecSyncOptionsWithBufferEncoding.t_to_js
                                          x1323)|])
                            | None -> ());
                           x1322))|])
    let (exec_sync :
      command:string -> ?options:ExecSyncOptions.t -> unit -> Buffer.t) =
      fun ~command:(x1325 : string) ->
        fun ?options:(x1326 : ExecSyncOptions.t option) ->
          fun () ->
            Buffer.t_of_js
              (let x1329 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1329 "execSync") "apply"
                 [|x1329;((let x1327 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1327 "push"
                                [|(Ojs.string_to_js x1325)|]);
                           (match x1326 with
                            | Some x1328 ->
                                ignore
                                  (Ojs.call x1327 "push"
                                     [|(ExecSyncOptions.t_to_js x1328)|])
                            | None -> ());
                           x1327))|])
    module ExecFileSyncOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1331 : Ojs.t) -> x1331
        and t_to_js : t -> Ojs.t = fun (x1330 : Ojs.t) -> x1330
        let (get_input : t -> ArrayBufferView.t or_string) =
          fun (x1332 : t) ->
            or_string_of_js ArrayBufferView.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1332) "input")
        let (set_input : t -> ArrayBufferView.t or_string -> unit) =
          fun (x1334 : t) ->
            fun (x1335 : ArrayBufferView.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1334) "input"
                (or_string_to_js ArrayBufferView.t_to_js x1335)
        let (get_stdio : t -> StdioOptions.t) =
          fun (x1337 : t) ->
            StdioOptions.t_of_js (Ojs.get_prop_ascii (t_to_js x1337) "stdio")
        let (set_stdio : t -> StdioOptions.t -> unit) =
          fun (x1338 : t) ->
            fun (x1339 : StdioOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x1338) "stdio"
                (StdioOptions.t_to_js x1339)
        let (get_kill_signal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x1340 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1340) "killSignal")
        let (set_kill_signal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x1342 : t) ->
            fun (x1343 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x1342) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x1343)
        let (get_max_buffer : t -> int) =
          fun (x1345 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1345) "maxBuffer")
        let (set_max_buffer : t -> int -> unit) =
          fun (x1346 : t) ->
            fun (x1347 : int) ->
              Ojs.set_prop_ascii (t_to_js x1346) "maxBuffer"
                (Ojs.int_to_js x1347)
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1348 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1348) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1349 : t) ->
            fun (x1350 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1349) "encoding"
                (BufferEncoding.t_to_js x1350)
        let (get_shell : t -> bool or_string) =
          fun (x1351 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1351) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x1353 : t) ->
            fun (x1354 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x1353) "shell"
                (or_string_to_js Ojs.bool_to_js x1354)
        let (cast : t -> CommonOptions.t) =
          fun (x1356 : t) -> CommonOptions.t_of_js (t_to_js x1356)
      end
    module ExecFileSyncOptionsWithStringEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1358 : Ojs.t) -> x1358
        and t_to_js : t -> Ojs.t = fun (x1357 : Ojs.t) -> x1357
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1359 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1359) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1360 : t) ->
            fun (x1361 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1360) "encoding"
                (BufferEncoding.t_to_js x1361)
        let (cast : t -> ExecFileSyncOptions.t) =
          fun (x1362 : t) -> ExecFileSyncOptions.t_of_js (t_to_js x1362)
      end
    module ExecFileSyncOptionsWithBufferEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1364 : Ojs.t) -> x1364
        and t_to_js : t -> Ojs.t = fun (x1363 : Ojs.t) -> x1363
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1365 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1365) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1366 : t) ->
            fun (x1367 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1366) "encoding"
                (BufferEncoding.t_to_js x1367)
        let (cast : t -> ExecFileSyncOptions.t) =
          fun (x1368 : t) -> ExecFileSyncOptions.t_of_js (t_to_js x1368)
      end
    let (exec_file_sync : command:string -> Buffer.t) =
      fun ~command:(x1369 : string) ->
        Buffer.t_of_js
          (Ojs.call Import.child_process "execFileSync"
             [|(Ojs.string_to_js x1369)|])
    let (exec_file_sync :
      command:string ->
        ?options:ExecFileSyncOptionsWithStringEncoding.t -> unit -> string)
      =
      fun ~command:(x1370 : string) ->
        fun ?options:(x1371 : ExecFileSyncOptionsWithStringEncoding.t option)
          ->
          fun () ->
            Ojs.string_of_js
              (let x1374 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1374 "execFileSync") "apply"
                 [|x1374;((let x1372 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1372 "push"
                                [|(Ojs.string_to_js x1370)|]);
                           (match x1371 with
                            | Some x1373 ->
                                ignore
                                  (Ojs.call x1372 "push"
                                     [|(ExecFileSyncOptionsWithStringEncoding.t_to_js
                                          x1373)|])
                            | None -> ());
                           x1372))|])
    let (exec_file_sync :
      command:string ->
        ?options:ExecFileSyncOptionsWithBufferEncoding.t -> unit -> Buffer.t)
      =
      fun ~command:(x1375 : string) ->
        fun ?options:(x1376 : ExecFileSyncOptionsWithBufferEncoding.t option)
          ->
          fun () ->
            Buffer.t_of_js
              (let x1379 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1379 "execFileSync") "apply"
                 [|x1379;((let x1377 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1377 "push"
                                [|(Ojs.string_to_js x1375)|]);
                           (match x1376 with
                            | Some x1378 ->
                                ignore
                                  (Ojs.call x1377 "push"
                                     [|(ExecFileSyncOptionsWithBufferEncoding.t_to_js
                                          x1378)|])
                            | None -> ());
                           x1377))|])
    let (exec_file_sync :
      command:string -> ?options:ExecFileSyncOptions.t -> unit -> Buffer.t) =
      fun ~command:(x1380 : string) ->
        fun ?options:(x1381 : ExecFileSyncOptions.t option) ->
          fun () ->
            Buffer.t_of_js
              (let x1384 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1384 "execFileSync") "apply"
                 [|x1384;((let x1382 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1382 "push"
                                [|(Ojs.string_to_js x1380)|]);
                           (match x1381 with
                            | Some x1383 ->
                                ignore
                                  (Ojs.call x1382 "push"
                                     [|(ExecFileSyncOptions.t_to_js x1383)|])
                            | None -> ());
                           x1382))|])
    let (exec_file_sync :
      command:string ->
        ?args:string list ->
          ?options:ExecFileSyncOptionsWithStringEncoding.t -> unit -> string)
      =
      fun ~command:(x1385 : string) ->
        fun ?args:(x1386 : string list option) ->
          fun
            ?options:(x1387 : ExecFileSyncOptionsWithStringEncoding.t option)
            ->
            fun () ->
              Ojs.string_of_js
                (let x1392 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1392 "execFileSync") "apply"
                   [|x1392;((let x1388 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1388 "push"
                                  [|(Ojs.string_to_js x1385)|]);
                             (match x1386 with
                              | Some x1390 ->
                                  ignore
                                    (Ojs.call x1388 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1390)|])
                              | None -> ());
                             (match x1387 with
                              | Some x1389 ->
                                  ignore
                                    (Ojs.call x1388 "push"
                                       [|(ExecFileSyncOptionsWithStringEncoding.t_to_js
                                            x1389)|])
                              | None -> ());
                             x1388))|])
    let (exec_file_sync :
      command:string ->
        ?args:string list ->
          ?options:ExecFileSyncOptionsWithBufferEncoding.t ->
            unit -> Buffer.t)
      =
      fun ~command:(x1393 : string) ->
        fun ?args:(x1394 : string list option) ->
          fun
            ?options:(x1395 : ExecFileSyncOptionsWithBufferEncoding.t option)
            ->
            fun () ->
              Buffer.t_of_js
                (let x1400 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1400 "execFileSync") "apply"
                   [|x1400;((let x1396 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1396 "push"
                                  [|(Ojs.string_to_js x1393)|]);
                             (match x1394 with
                              | Some x1398 ->
                                  ignore
                                    (Ojs.call x1396 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1398)|])
                              | None -> ());
                             (match x1395 with
                              | Some x1397 ->
                                  ignore
                                    (Ojs.call x1396 "push"
                                       [|(ExecFileSyncOptionsWithBufferEncoding.t_to_js
                                            x1397)|])
                              | None -> ());
                             x1396))|])
    let (exec_file_sync :
      command:string ->
        ?args:string list ->
          ?options:ExecFileSyncOptions.t -> unit -> Buffer.t)
      =
      fun ~command:(x1401 : string) ->
        fun ?args:(x1402 : string list option) ->
          fun ?options:(x1403 : ExecFileSyncOptions.t option) ->
            fun () ->
              Buffer.t_of_js
                (let x1408 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1408 "execFileSync") "apply"
                   [|x1408;((let x1404 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1404 "push"
                                  [|(Ojs.string_to_js x1401)|]);
                             (match x1402 with
                              | Some x1406 ->
                                  ignore
                                    (Ojs.call x1404 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1406)|])
                              | None -> ());
                             (match x1403 with
                              | Some x1405 ->
                                  ignore
                                    (Ojs.call x1404 "push"
                                       [|(ExecFileSyncOptions.t_to_js x1405)|])
                              | None -> ());
                             x1404))|])
  end
