[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
open Node_events
open Node_net
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_encoding : t -> BufferEncoding.t) =
      fun (x3 : t) ->
        BufferEncoding.t_of_js (Ojs.get_prop_ascii (t_to_js x3) "encoding")
    let (set_encoding : t -> BufferEncoding.t -> unit) =
      fun (x4 : t) ->
        fun (x5 : BufferEncoding.t) ->
          Ojs.set_prop_ascii (t_to_js x4) "encoding"
            (BufferEncoding.t_to_js x5)
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7 : Ojs.t) -> x7
    and t_to_js : t -> Ojs.t = fun (x6 : Ojs.t) -> x6
    let (get_encoding : t -> [ `buffer ] or_null) =
      fun (x8 : t) ->
        or_null_of_js
          (fun (x9 : Ojs.t) ->
             let x10 = x9 in
             match Ojs.string_of_js x10 with
             | "buffer" -> `buffer
             | _ -> assert false)
          (Ojs.get_prop_ascii (t_to_js x8) "encoding")
    let (set_encoding : t -> [ `buffer ] or_null -> unit) =
      fun (x11 : t) ->
        fun (x12 : [ `buffer ] or_null) ->
          Ojs.set_prop_ascii (t_to_js x11) "encoding"
            (or_null_to_js
               (fun (x13 : [ `buffer ]) ->
                  match x13 with | `buffer -> Ojs.string_to_js "buffer") x12)
  end
module AnonymousInterface2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15 : Ojs.t) -> x15
    and t_to_js : t -> Ojs.t = fun (x14 : Ojs.t) -> x14
    let (get_stdout : t -> Buffer.t) =
      fun (x16 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x16) "stdout")
    let (set_stdout : t -> Buffer.t -> unit) =
      fun (x17 : t) ->
        fun (x18 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x17) "stdout" (Buffer.t_to_js x18)
    let (get_stderr : t -> Buffer.t) =
      fun (x19 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x19) "stderr")
    let (set_stderr : t -> Buffer.t -> unit) =
      fun (x20 : t) ->
        fun (x21 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x20) "stderr" (Buffer.t_to_js x21)
  end
module AnonymousInterface3 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x23 : Ojs.t) -> x23
    and t_to_js : t -> Ojs.t = fun (x22 : Ojs.t) -> x22
    let (get_stdout : t -> string) =
      fun (x24 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x24) "stdout")
    let (set_stdout : t -> string -> unit) =
      fun (x25 : t) ->
        fun (x26 : string) ->
          Ojs.set_prop_ascii (t_to_js x25) "stdout" (Ojs.string_to_js x26)
    let (get_stderr : t -> string) =
      fun (x27 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x27) "stderr")
    let (set_stderr : t -> string -> unit) =
      fun (x28 : t) ->
        fun (x29 : string) ->
          Ojs.set_prop_ascii (t_to_js x28) "stderr" (Ojs.string_to_js x29)
  end
module AnonymousInterface4 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x31 : Ojs.t) -> x31
    and t_to_js : t -> Ojs.t = fun (x30 : Ojs.t) -> x30
    let (get_stdout : t -> Buffer.t or_string) =
      fun (x32 : t) ->
        or_string_of_js Buffer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x32) "stdout")
    let (set_stdout : t -> Buffer.t or_string -> unit) =
      fun (x34 : t) ->
        fun (x35 : Buffer.t or_string) ->
          Ojs.set_prop_ascii (t_to_js x34) "stdout"
            (or_string_to_js Buffer.t_to_js x35)
    let (get_stderr : t -> Buffer.t or_string) =
      fun (x37 : t) ->
        or_string_of_js Buffer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x37) "stderr")
    let (set_stderr : t -> Buffer.t or_string -> unit) =
      fun (x39 : t) ->
        fun (x40 : Buffer.t or_string) ->
          Ojs.set_prop_ascii (t_to_js x39) "stderr"
            (or_string_to_js Buffer.t_to_js x40)
  end
module Child_process =
  struct
    module Serializable =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x43 : Ojs.t) -> x43
        and t_to_js : t -> Ojs.t = fun (x42 : Ojs.t) -> x42
      end
    module SendHandle =
      struct
        type t = (Net.Server.t, Net.Socket.t) union2
        let rec t_of_js : Ojs.t -> t =
          fun (x47 : Ojs.t) ->
            union2_of_js Net.Server.t_of_js Net.Socket.t_of_js x47
        and t_to_js : t -> Ojs.t =
          fun (x44 : (Net.Server.t, Net.Socket.t) union2) ->
            union2_to_js Net.Server.t_to_js Net.Socket.t_to_js x44
      end
    module MessageOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x51 : Ojs.t) -> x51
        and t_to_js : t -> Ojs.t = fun (x50 : Ojs.t) -> x50
        let (get_keep_open : t -> bool) =
          fun (x52 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x52) "keepOpen")
        let (set_keep_open : t -> bool -> unit) =
          fun (x53 : t) ->
            fun (x54 : bool) ->
              Ojs.set_prop_ascii (t_to_js x53) "keepOpen"
                (Ojs.bool_to_js x54)
      end
    module ChildProcess =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x56 : Ojs.t) -> x56
        and t_to_js : t -> Ojs.t = fun (x55 : Ojs.t) -> x55
        let (get_stdin : t -> Node_stream.Stream.Writable.t or_null) =
          fun (x57 : t) ->
            or_null_of_js Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x57) "stdin")
        let (set_stdin : t -> Node_stream.Stream.Writable.t or_null -> unit)
          =
          fun (x59 : t) ->
            fun (x60 : Node_stream.Stream.Writable.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x59) "stdin"
                (or_null_to_js Node_stream.Stream.Writable.t_to_js x60)
        let (get_stdout : t -> Node_stream.Stream.Readable.t or_null) =
          fun (x62 : t) ->
            or_null_of_js Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x62) "stdout")
        let (set_stdout : t -> Node_stream.Stream.Readable.t or_null -> unit)
          =
          fun (x64 : t) ->
            fun (x65 : Node_stream.Stream.Readable.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x64) "stdout"
                (or_null_to_js Node_stream.Stream.Readable.t_to_js x65)
        let (get_stderr : t -> Node_stream.Stream.Readable.t or_null) =
          fun (x67 : t) ->
            or_null_of_js Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x67) "stderr")
        let (set_stderr : t -> Node_stream.Stream.Readable.t or_null -> unit)
          =
          fun (x69 : t) ->
            fun (x70 : Node_stream.Stream.Readable.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x69) "stderr"
                (or_null_to_js Node_stream.Stream.Readable.t_to_js x70)
        let (get_channel : t -> Node_stream.Stream.Pipe.t or_null) =
          fun (x72 : t) ->
            or_null_of_js Node_stream.Stream.Pipe.t_of_js
              (Ojs.get_prop_ascii (t_to_js x72) "channel")
        let (get_stdio :
          t ->
            (Node_stream.Stream.Writable.t or_null *
              Node_stream.Stream.Readable.t or_null *
              Node_stream.Stream.Readable.t or_null *
              (Node_stream.Stream.Readable.t, Node_stream.Stream.Writable.t)
              union2 or_null_or_undefined * (Node_stream.Stream.Readable.t,
              Node_stream.Stream.Writable.t) union2 or_null_or_undefined))
          =
          fun (x74 : t) ->
            let x75 = Ojs.get_prop_ascii (t_to_js x74) "stdio" in
            ((or_null_of_js Node_stream.Stream.Writable.t_of_js
                (Ojs.array_get x75 0)),
              (or_null_of_js Node_stream.Stream.Readable.t_of_js
                 (Ojs.array_get x75 1)),
              (or_null_of_js Node_stream.Stream.Readable.t_of_js
                 (Ojs.array_get x75 2)),
              (or_null_or_undefined_of_js
                 (fun (x79 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x79)
                 (Ojs.array_get x75 3)),
              (or_null_or_undefined_of_js
                 (fun (x82 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x82)
                 (Ojs.array_get x75 4)))
        let (get_killed : t -> bool) =
          fun (x85 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x85) "killed")
        let (get_pid : t -> int) =
          fun (x86 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x86) "pid")
        let (get_connected : t -> bool) =
          fun (x87 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x87) "connected")
        let (get_exit_code : t -> int or_null) =
          fun (x88 : t) ->
            or_null_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x88) "exitCode")
        let (get_signal_code : t -> Node_process.Process.Signals.t or_null) =
          fun (x90 : t) ->
            or_null_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x90) "signalCode")
        let (get_spawnargs : t -> string list) =
          fun (x92 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x92) "spawnargs")
        let (get_spawnfile : t -> string) =
          fun (x94 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x94) "spawnfile")
        let (kill :
          t ->
            ?signal:Node_process.Process.Signals.t or_number -> unit -> bool)
          =
          fun (x99 : t) ->
            fun
              ?signal:(x95 : Node_process.Process.Signals.t or_number option)
              ->
              fun () ->
                Ojs.bool_of_js
                  (let x100 = t_to_js x99 in
                   Ojs.call (Ojs.get_prop_ascii x100 "kill") "apply"
                     [|x100;((let x96 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x95 with
                               | Some x97 ->
                                   ignore
                                     (Ojs.call x96 "push"
                                        [|(or_number_to_js
                                             Node_process.Process.Signals.t_to_js
                                             x97)|])
                               | None -> ());
                              x96))|])
        let (send :
          t ->
            message:Serializable.t ->
              ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
          =
          fun (x107 : t) ->
            fun ~message:(x101 : Serializable.t) ->
              fun ?callback:(x102 : (error:Error.t or_null -> unit) option)
                ->
                fun () ->
                  Ojs.bool_of_js
                    (let x108 = t_to_js x107 in
                     Ojs.call (Ojs.get_prop_ascii x108 "send") "apply"
                       [|x108;((let x103 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x103 "push"
                                     [|(Serializable.t_to_js x101)|]);
                                (match x102 with
                                 | Some x104 ->
                                     ignore
                                       (Ojs.call x103 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun (x105 : Ojs.t) ->
                                                  x104
                                                    ~error:(or_null_of_js
                                                              Error.t_of_js
                                                              x105)))|])
                                 | None -> ());
                                x103))|])
        let (send' :
          t ->
            message:Serializable.t ->
              ?send_handle:SendHandle.t ->
                ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
          =
          fun (x117 : t) ->
            fun ~message:(x109 : Serializable.t) ->
              fun ?send_handle:(x110 : SendHandle.t option) ->
                fun ?callback:(x111 : (error:Error.t or_null -> unit) option)
                  ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x118 = t_to_js x117 in
                       Ojs.call (Ojs.get_prop_ascii x118 "send") "apply"
                         [|x118;((let x112 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x112 "push"
                                       [|(Serializable.t_to_js x109)|]);
                                  (match x110 with
                                   | Some x116 ->
                                       ignore
                                         (Ojs.call x112 "push"
                                            [|(SendHandle.t_to_js x116)|])
                                   | None -> ());
                                  (match x111 with
                                   | Some x113 ->
                                       ignore
                                         (Ojs.call x112 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun (x114 : Ojs.t) ->
                                                    x113
                                                      ~error:(or_null_of_js
                                                                Error.t_of_js
                                                                x114)))|])
                                   | None -> ());
                                  x112))|])
        let (send'' :
          t ->
            message:Serializable.t ->
              ?send_handle:SendHandle.t ->
                ?options:MessageOptions.t ->
                  ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
          =
          fun (x129 : t) ->
            fun ~message:(x119 : Serializable.t) ->
              fun ?send_handle:(x120 : SendHandle.t option) ->
                fun ?options:(x121 : MessageOptions.t option) ->
                  fun
                    ?callback:(x122 : (error:Error.t or_null -> unit) option)
                    ->
                    fun () ->
                      Ojs.bool_of_js
                        (let x130 = t_to_js x129 in
                         Ojs.call (Ojs.get_prop_ascii x130 "send") "apply"
                           [|x130;((let x123 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x123 "push"
                                         [|(Serializable.t_to_js x119)|]);
                                    (match x120 with
                                     | Some x128 ->
                                         ignore
                                           (Ojs.call x123 "push"
                                              [|(SendHandle.t_to_js x128)|])
                                     | None -> ());
                                    (match x121 with
                                     | Some x127 ->
                                         ignore
                                           (Ojs.call x123 "push"
                                              [|(MessageOptions.t_to_js x127)|])
                                     | None -> ());
                                    (match x122 with
                                     | Some x124 ->
                                         ignore
                                           (Ojs.call x123 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun (x125 : Ojs.t) ->
                                                      x124
                                                        ~error:(or_null_of_js
                                                                  Error.t_of_js
                                                                  x125)))|])
                                     | None -> ());
                                    x123))|])
        let (disconnect : t -> unit) =
          fun (x131 : t) ->
            ignore (Ojs.call (t_to_js x131) "disconnect" [||])
        let (unref : t -> unit) =
          fun (x132 : t) -> ignore (Ojs.call (t_to_js x132) "unref" [||])
        let (ref : t -> unit) =
          fun (x133 : t) -> ignore (Ojs.call (t_to_js x133) "ref" [||])
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x138 : t) ->
            fun ~event:(x134 : string) ->
              fun ~listener:(x135 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x138) "addListener"
                     [|(Ojs.string_to_js x134);(Ojs.fun_to_js_args
                                                  (fun (x136 : _) ->
                                                     x135
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x136 0)))|])
        let (add_listener' :
          t ->
            event:[ `close ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x145 : t) ->
            fun ~event:(x139 : [ `close ]) ->
              fun
                ~listener:(x140 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x145) "addListener"
                     [|((match x139 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x141 : Ojs.t) ->
                            fun (x143 : Ojs.t) ->
                              x140 ~code:(or_null_of_js Ojs.int_of_js x141)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x143)))|])
        let (add_listener'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x148 : t) ->
            fun ~event:(x146 : [ `disconnect ]) ->
              fun ~listener:(x147 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x148) "addListener"
                     [|((match x146 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x147 ()))|])
        let (add_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x152 : t) ->
            fun ~event:(x149 : [ `error ]) ->
              fun ~listener:(x150 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x152) "addListener"
                     [|((match x149 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x151 : Ojs.t) ->
                            x150 ~err:(Error.t_of_js x151)))|])
        let (add_listener'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x159 : t) ->
            fun ~event:(x153 : [ `exit ]) ->
              fun
                ~listener:(x154 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x159) "addListener"
                     [|((match x153 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x155 : Ojs.t) ->
                            fun (x157 : Ojs.t) ->
                              x154 ~code:(or_null_of_js Ojs.int_of_js x155)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x157)))|])
        let (add_listener''''' :
          t ->
            event:[ `message ] ->
              listener:(message:Serializable.t ->
                          send_handle:SendHandle.t -> unit)
                -> t)
          =
          fun (x164 : t) ->
            fun ~event:(x160 : [ `message ]) ->
              fun
                ~listener:(x161 :
                            message:Serializable.t ->
                              send_handle:SendHandle.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x164) "addListener"
                     [|((match x160 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x162 : Ojs.t) ->
                            fun (x163 : Ojs.t) ->
                              x161 ~message:(Serializable.t_of_js x162)
                                ~send_handle:(SendHandle.t_of_js x163)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x170 : t) ->
            fun ~event:(x165 : symbol or_string) ->
              fun ~args:(x166 : any list) ->
                Ojs.bool_of_js
                  (let x171 = t_to_js x170 in
                   Ojs.call (Ojs.get_prop_ascii x171 "emit") "apply"
                     [|x171;((let x167 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x167 "push"
                                   [|(or_string_to_js symbol_to_js x165)|]);
                              List.iter
                                (fun (x168 : any) ->
                                   ignore
                                     (Ojs.call x167 "push"
                                        [|(any_to_js x168)|])) x166;
                              x167))|])
        let (emit' :
          t ->
            event:[ `close ] ->
              code:int or_null ->
                signal:Node_process.Process.Signals.t or_null -> bool)
          =
          fun (x177 : t) ->
            fun ~event:(x172 : [ `close ]) ->
              fun ~code:(x173 : int or_null) ->
                fun ~signal:(x175 : Node_process.Process.Signals.t or_null)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x177) "emit"
                       [|((match x172 with
                           | `close -> Ojs.string_to_js "close"));(or_null_to_js
                                                                    Ojs.int_to_js
                                                                    x173);(
                         or_null_to_js Node_process.Process.Signals.t_to_js
                           x175)|])
        let (emit'' : t -> event:[ `disconnect ] -> bool) =
          fun (x179 : t) ->
            fun ~event:(x178 : [ `disconnect ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x179) "emit"
                   [|((match x178 with
                       | `disconnect -> Ojs.string_to_js "disconnect"))|])
        let (emit''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x182 : t) ->
            fun ~event:(x180 : [ `error ]) ->
              fun ~err:(x181 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x182) "emit"
                     [|((match x180 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x181)|])
        let (emit'''' :
          t ->
            event:[ `exit ] ->
              code:int or_null ->
                signal:Node_process.Process.Signals.t or_null -> bool)
          =
          fun (x188 : t) ->
            fun ~event:(x183 : [ `exit ]) ->
              fun ~code:(x184 : int or_null) ->
                fun ~signal:(x186 : Node_process.Process.Signals.t or_null)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x188) "emit"
                       [|((match x183 with | `exit -> Ojs.string_to_js "exit"));(
                         or_null_to_js Ojs.int_to_js x184);(or_null_to_js
                                                              Node_process.Process.Signals.t_to_js
                                                              x186)|])
        let (emit''''' :
          t ->
            event:[ `message ] ->
              message:Serializable.t -> send_handle:SendHandle.t -> bool)
          =
          fun (x192 : t) ->
            fun ~event:(x189 : [ `message ]) ->
              fun ~message:(x190 : Serializable.t) ->
                fun ~send_handle:(x191 : SendHandle.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x192) "emit"
                       [|((match x189 with
                           | `message -> Ojs.string_to_js "message"));(
                         Serializable.t_to_js x190);(SendHandle.t_to_js x191)|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x197 : t) ->
            fun ~event:(x193 : string) ->
              fun ~listener:(x194 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x197) "on"
                     [|(Ojs.string_to_js x193);(Ojs.fun_to_js_args
                                                  (fun (x195 : _) ->
                                                     x194
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x195 0)))|])
        let (on' :
          t ->
            event:[ `close ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x204 : t) ->
            fun ~event:(x198 : [ `close ]) ->
              fun
                ~listener:(x199 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x204) "on"
                     [|((match x198 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x200 : Ojs.t) ->
                            fun (x202 : Ojs.t) ->
                              x199 ~code:(or_null_of_js Ojs.int_of_js x200)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x202)))|])
        let (on'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x207 : t) ->
            fun ~event:(x205 : [ `disconnect ]) ->
              fun ~listener:(x206 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x207) "on"
                     [|((match x205 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x206 ()))|])
        let (on''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x211 : t) ->
            fun ~event:(x208 : [ `error ]) ->
              fun ~listener:(x209 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x211) "on"
                     [|((match x208 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x210 : Ojs.t) ->
                            x209 ~err:(Error.t_of_js x210)))|])
        let (on'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x218 : t) ->
            fun ~event:(x212 : [ `exit ]) ->
              fun
                ~listener:(x213 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x218) "on"
                     [|((match x212 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x214 : Ojs.t) ->
                            fun (x216 : Ojs.t) ->
                              x213 ~code:(or_null_of_js Ojs.int_of_js x214)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x216)))|])
        let (on''''' :
          t ->
            event:[ `message ] ->
              listener:(message:Serializable.t ->
                          send_handle:SendHandle.t -> unit)
                -> t)
          =
          fun (x223 : t) ->
            fun ~event:(x219 : [ `message ]) ->
              fun
                ~listener:(x220 :
                            message:Serializable.t ->
                              send_handle:SendHandle.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x223) "on"
                     [|((match x219 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x221 : Ojs.t) ->
                            fun (x222 : Ojs.t) ->
                              x220 ~message:(Serializable.t_of_js x221)
                                ~send_handle:(SendHandle.t_of_js x222)))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x228 : t) ->
            fun ~event:(x224 : string) ->
              fun ~listener:(x225 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x228) "once"
                     [|(Ojs.string_to_js x224);(Ojs.fun_to_js_args
                                                  (fun (x226 : _) ->
                                                     x225
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x226 0)))|])
        let (once' :
          t ->
            event:[ `close ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x235 : t) ->
            fun ~event:(x229 : [ `close ]) ->
              fun
                ~listener:(x230 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x235) "once"
                     [|((match x229 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x231 : Ojs.t) ->
                            fun (x233 : Ojs.t) ->
                              x230 ~code:(or_null_of_js Ojs.int_of_js x231)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x233)))|])
        let (once'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x238 : t) ->
            fun ~event:(x236 : [ `disconnect ]) ->
              fun ~listener:(x237 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x238) "once"
                     [|((match x236 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x237 ()))|])
        let (once''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x242 : t) ->
            fun ~event:(x239 : [ `error ]) ->
              fun ~listener:(x240 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x242) "once"
                     [|((match x239 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x241 : Ojs.t) ->
                            x240 ~err:(Error.t_of_js x241)))|])
        let (once'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x249 : t) ->
            fun ~event:(x243 : [ `exit ]) ->
              fun
                ~listener:(x244 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x249) "once"
                     [|((match x243 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x245 : Ojs.t) ->
                            fun (x247 : Ojs.t) ->
                              x244 ~code:(or_null_of_js Ojs.int_of_js x245)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x247)))|])
        let (once''''' :
          t ->
            event:[ `message ] ->
              listener:(message:Serializable.t ->
                          send_handle:SendHandle.t -> unit)
                -> t)
          =
          fun (x254 : t) ->
            fun ~event:(x250 : [ `message ]) ->
              fun
                ~listener:(x251 :
                            message:Serializable.t ->
                              send_handle:SendHandle.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x254) "once"
                     [|((match x250 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x252 : Ojs.t) ->
                            fun (x253 : Ojs.t) ->
                              x251 ~message:(Serializable.t_of_js x252)
                                ~send_handle:(SendHandle.t_of_js x253)))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x259 : t) ->
            fun ~event:(x255 : string) ->
              fun ~listener:(x256 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x259) "prependListener"
                     [|(Ojs.string_to_js x255);(Ojs.fun_to_js_args
                                                  (fun (x257 : _) ->
                                                     x256
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x257 0)))|])
        let (prepend_listener' :
          t ->
            event:[ `close ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x266 : t) ->
            fun ~event:(x260 : [ `close ]) ->
              fun
                ~listener:(x261 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x266) "prependListener"
                     [|((match x260 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x262 : Ojs.t) ->
                            fun (x264 : Ojs.t) ->
                              x261 ~code:(or_null_of_js Ojs.int_of_js x262)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x264)))|])
        let (prepend_listener'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x269 : t) ->
            fun ~event:(x267 : [ `disconnect ]) ->
              fun ~listener:(x268 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x269) "prependListener"
                     [|((match x267 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x268 ()))|])
        let (prepend_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x273 : t) ->
            fun ~event:(x270 : [ `error ]) ->
              fun ~listener:(x271 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x273) "prependListener"
                     [|((match x270 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x272 : Ojs.t) ->
                            x271 ~err:(Error.t_of_js x272)))|])
        let (prepend_listener'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x280 : t) ->
            fun ~event:(x274 : [ `exit ]) ->
              fun
                ~listener:(x275 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x280) "prependListener"
                     [|((match x274 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x276 : Ojs.t) ->
                            fun (x278 : Ojs.t) ->
                              x275 ~code:(or_null_of_js Ojs.int_of_js x276)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x278)))|])
        let (prepend_listener''''' :
          t ->
            event:[ `message ] ->
              listener:(message:Serializable.t ->
                          send_handle:SendHandle.t -> unit)
                -> t)
          =
          fun (x285 : t) ->
            fun ~event:(x281 : [ `message ]) ->
              fun
                ~listener:(x282 :
                            message:Serializable.t ->
                              send_handle:SendHandle.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x285) "prependListener"
                     [|((match x281 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x283 : Ojs.t) ->
                            fun (x284 : Ojs.t) ->
                              x282 ~message:(Serializable.t_of_js x283)
                                ~send_handle:(SendHandle.t_of_js x284)))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x290 : t) ->
            fun ~event:(x286 : string) ->
              fun ~listener:(x287 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x290) "prependOnceListener"
                     [|(Ojs.string_to_js x286);(Ojs.fun_to_js_args
                                                  (fun (x288 : _) ->
                                                     x287
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x288 0)))|])
        let (prepend_once_listener' :
          t ->
            event:[ `close ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x297 : t) ->
            fun ~event:(x291 : [ `close ]) ->
              fun
                ~listener:(x292 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x297) "prependOnceListener"
                     [|((match x291 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x293 : Ojs.t) ->
                            fun (x295 : Ojs.t) ->
                              x292 ~code:(or_null_of_js Ojs.int_of_js x293)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x295)))|])
        let (prepend_once_listener'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x300 : t) ->
            fun ~event:(x298 : [ `disconnect ]) ->
              fun ~listener:(x299 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x300) "prependOnceListener"
                     [|((match x298 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x299 ()))|])
        let (prepend_once_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x304 : t) ->
            fun ~event:(x301 : [ `error ]) ->
              fun ~listener:(x302 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x304) "prependOnceListener"
                     [|((match x301 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x303 : Ojs.t) ->
                            x302 ~err:(Error.t_of_js x303)))|])
        let (prepend_once_listener'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:int or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x311 : t) ->
            fun ~event:(x305 : [ `exit ]) ->
              fun
                ~listener:(x306 :
                            code:int or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x311) "prependOnceListener"
                     [|((match x305 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x307 : Ojs.t) ->
                            fun (x309 : Ojs.t) ->
                              x306 ~code:(or_null_of_js Ojs.int_of_js x307)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x309)))|])
        let (prepend_once_listener''''' :
          t ->
            event:[ `message ] ->
              listener:(message:Serializable.t ->
                          send_handle:SendHandle.t -> unit)
                -> t)
          =
          fun (x316 : t) ->
            fun ~event:(x312 : [ `message ]) ->
              fun
                ~listener:(x313 :
                            message:Serializable.t ->
                              send_handle:SendHandle.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x316) "prependOnceListener"
                     [|((match x312 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x314 : Ojs.t) ->
                            fun (x315 : Ojs.t) ->
                              x313 ~message:(Serializable.t_of_js x314)
                                ~send_handle:(SendHandle.t_of_js x315)))|])
        let (cast : t -> Events.EventEmitter.t) =
          fun (x317 : t) -> Events.EventEmitter.t_of_js (t_to_js x317)
      end
    module ChildProcessWithoutNullStreams =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x319 : Ojs.t) -> x319
        and t_to_js : t -> Ojs.t = fun (x318 : Ojs.t) -> x318
        let (get_stdin : t -> Node_stream.Stream.Writable.t) =
          fun (x320 : t) ->
            Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x320) "stdin")
        let (set_stdin : t -> Node_stream.Stream.Writable.t -> unit) =
          fun (x321 : t) ->
            fun (x322 : Node_stream.Stream.Writable.t) ->
              Ojs.set_prop_ascii (t_to_js x321) "stdin"
                (Node_stream.Stream.Writable.t_to_js x322)
        let (get_stdout : t -> Node_stream.Stream.Readable.t) =
          fun (x323 : t) ->
            Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x323) "stdout")
        let (set_stdout : t -> Node_stream.Stream.Readable.t -> unit) =
          fun (x324 : t) ->
            fun (x325 : Node_stream.Stream.Readable.t) ->
              Ojs.set_prop_ascii (t_to_js x324) "stdout"
                (Node_stream.Stream.Readable.t_to_js x325)
        let (get_stderr : t -> Node_stream.Stream.Readable.t) =
          fun (x326 : t) ->
            Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x326) "stderr")
        let (set_stderr : t -> Node_stream.Stream.Readable.t -> unit) =
          fun (x327 : t) ->
            fun (x328 : Node_stream.Stream.Readable.t) ->
              Ojs.set_prop_ascii (t_to_js x327) "stderr"
                (Node_stream.Stream.Readable.t_to_js x328)
        let (get_stdio :
          t ->
            (Node_stream.Stream.Writable.t * Node_stream.Stream.Readable.t *
              Node_stream.Stream.Readable.t * (Node_stream.Stream.Readable.t,
              Node_stream.Stream.Writable.t) union2 or_null_or_undefined *
              (Node_stream.Stream.Readable.t, Node_stream.Stream.Writable.t)
              union2 or_null_or_undefined))
          =
          fun (x329 : t) ->
            let x330 = Ojs.get_prop_ascii (t_to_js x329) "stdio" in
            ((Node_stream.Stream.Writable.t_of_js (Ojs.array_get x330 0)),
              (Node_stream.Stream.Readable.t_of_js (Ojs.array_get x330 1)),
              (Node_stream.Stream.Readable.t_of_js (Ojs.array_get x330 2)),
              (or_null_or_undefined_of_js
                 (fun (x331 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x331)
                 (Ojs.array_get x330 3)),
              (or_null_or_undefined_of_js
                 (fun (x334 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x334)
                 (Ojs.array_get x330 4)))
        let (cast : t -> ChildProcess.t) =
          fun (x337 : t) -> ChildProcess.t_of_js (t_to_js x337)
      end
    module ChildProcessByStdio =
      struct
        type ('I, 'O, 'E) t = Ojs.t
        let rec t_of_js :
          'I 'O 'E .
            (Ojs.t -> 'I) ->
              (Ojs.t -> 'O) -> (Ojs.t -> 'E) -> Ojs.t -> ('I, 'O, 'E) t
          = fun (type __I) -> fun (type __O) -> fun (type __E) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (__E_of_js : Ojs.t -> __E) -> fun (x339 : Ojs.t) -> x339
        and t_to_js :
          'I 'O 'E .
            ('I -> Ojs.t) ->
              ('O -> Ojs.t) -> ('E -> Ojs.t) -> ('I, 'O, 'E) t -> Ojs.t
          = fun (type __I) -> fun (type __O) -> fun (type __E) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (__E_to_js : __E -> Ojs.t) -> fun (x338 : Ojs.t) -> x338
        let (get_stdin : ('I, 'O, 'E) t -> 'I) =
          fun (x340 : ('I, 'O, 'E) t) ->
            Obj.magic
              (Ojs.get_prop_ascii
                 (t_to_js Obj.magic Obj.magic Obj.magic x340) "stdin")
        let (set_stdin : ('I, 'O, 'E) t -> 'I -> unit) =
          fun (x344 : ('I, 'O, 'E) t) ->
            fun (x345 : 'I) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x344)
                "stdin" (Obj.magic x345)
        let (get_stdout : ('I, 'O, 'E) t -> 'O) =
          fun (x349 : ('I, 'O, 'E) t) ->
            Obj.magic
              (Ojs.get_prop_ascii
                 (t_to_js Obj.magic Obj.magic Obj.magic x349) "stdout")
        let (set_stdout : ('I, 'O, 'E) t -> 'O -> unit) =
          fun (x353 : ('I, 'O, 'E) t) ->
            fun (x354 : 'O) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x353)
                "stdout" (Obj.magic x354)
        let (get_stderr : ('I, 'O, 'E) t -> 'E) =
          fun (x358 : ('I, 'O, 'E) t) ->
            Obj.magic
              (Ojs.get_prop_ascii
                 (t_to_js Obj.magic Obj.magic Obj.magic x358) "stderr")
        let (set_stderr : ('I, 'O, 'E) t -> 'E -> unit) =
          fun (x362 : ('I, 'O, 'E) t) ->
            fun (x363 : 'E) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x362)
                "stderr" (Obj.magic x363)
        let (get_stdio :
          ('I, 'O, 'E) t ->
            ('I * 'O * 'E * (Node_stream.Stream.Readable.t,
              Node_stream.Stream.Writable.t) union2 or_null_or_undefined *
              (Node_stream.Stream.Readable.t, Node_stream.Stream.Writable.t)
              union2 or_null_or_undefined))
          =
          fun (x367 : ('I, 'O, 'E) t) ->
            let x371 =
              Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x367)
                "stdio" in
            ((Obj.magic (Ojs.array_get x371 0)),
              (Obj.magic (Ojs.array_get x371 1)),
              (Obj.magic (Ojs.array_get x371 2)),
              (or_null_or_undefined_of_js
                 (fun (x372 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x372)
                 (Ojs.array_get x371 3)),
              (or_null_or_undefined_of_js
                 (fun (x375 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x375)
                 (Ojs.array_get x371 4)))
        let (cast : ('I, 'O, 'E) t -> ChildProcess.t) =
          fun (x378 : ('I, 'O, 'E) t) ->
            ChildProcess.t_of_js (t_to_js Obj.magic Obj.magic Obj.magic x378)
      end
    module StdioOptions =
      struct
        type t =
          ((Node_stream.Stream.Stream.t,
             [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum or_number
             or_null_or_undefined list,
            [ `ignore  | `inherit_  | `pipe ]) or_enum
        let rec t_of_js : Ojs.t -> t =
          fun (x390 : Ojs.t) ->
            or_enum_of_js
              (fun (x391 : Ojs.t) ->
                 Ojs.list_of_js
                   (fun (x392 : Ojs.t) ->
                      or_null_or_undefined_of_js
                        (fun (x393 : Ojs.t) ->
                           or_number_of_js
                             (fun (x394 : Ojs.t) ->
                                or_enum_of_js
                                  Node_stream.Stream.Stream.t_of_js
                                  (fun (x396 : Ojs.t) ->
                                     let x397 = x396 in
                                     match Ojs.string_of_js x397 with
                                     | "ignore" -> `ignore
                                     | "inherit" -> `inherit_
                                     | "ipc" -> `ipc
                                     | "pipe" -> `pipe
                                     | _ -> assert false) x394) x393) x392)
                   x391)
              (fun (x398 : Ojs.t) ->
                 let x399 = x398 in
                 match Ojs.string_of_js x399 with
                 | "ignore" -> `ignore
                 | "inherit" -> `inherit_
                 | "pipe" -> `pipe
                 | _ -> assert false) x390
        and t_to_js : t -> Ojs.t =
          fun
            (x382 :
              ((Node_stream.Stream.Stream.t,
                 [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum or_number
                 or_null_or_undefined list,
                [ `ignore  | `inherit_  | `pipe ]) or_enum)
            ->
            or_enum_to_js
              (fun
                 (x383 :
                   (Node_stream.Stream.Stream.t,
                     [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum
                     or_number or_null_or_undefined list)
                 ->
                 Ojs.list_to_js
                   (fun
                      (x384 :
                        (Node_stream.Stream.Stream.t,
                          [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum
                          or_number or_null_or_undefined)
                      ->
                      or_null_or_undefined_to_js
                        (fun
                           (x385 :
                             (Node_stream.Stream.Stream.t,
                               [ `ignore  | `inherit_  | `ipc  | `pipe ])
                               or_enum or_number)
                           ->
                           or_number_to_js
                             (fun
                                (x386 :
                                  (Node_stream.Stream.Stream.t,
                                    [ `ignore  | `inherit_  | `ipc  | `pipe ])
                                    or_enum)
                                ->
                                or_enum_to_js
                                  Node_stream.Stream.Stream.t_to_js
                                  (fun
                                     (x388 :
                                       [ `ignore  | `inherit_  | `ipc 
                                       | `pipe ])
                                     ->
                                     match x388 with
                                     | `ignore -> Ojs.string_to_js "ignore"
                                     | `inherit_ ->
                                         Ojs.string_to_js "inherit"
                                     | `ipc -> Ojs.string_to_js "ipc"
                                     | `pipe -> Ojs.string_to_js "pipe") x386)
                             x385) x384) x383)
              (fun (x389 : [ `ignore  | `inherit_  | `pipe ]) ->
                 match x389 with
                 | `ignore -> Ojs.string_to_js "ignore"
                 | `inherit_ -> Ojs.string_to_js "inherit"
                 | `pipe -> Ojs.string_to_js "pipe") x382
      end
    module SerializationType =
      struct
        type t = [ `advanced  | `json ]
        let rec t_of_js : Ojs.t -> t =
          fun (x401 : Ojs.t) ->
            let x402 = x401 in
            match Ojs.string_of_js x402 with
            | "advanced" -> `advanced
            | "json" -> `json
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x400 : [ `advanced  | `json ]) ->
            match x400 with
            | `advanced -> Ojs.string_to_js "advanced"
            | `json -> Ojs.string_to_js "json"
      end
    module MessagingOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x404 : Ojs.t) -> x404
        and t_to_js : t -> Ojs.t = fun (x403 : Ojs.t) -> x403
        let (get_serialization : t -> SerializationType.t) =
          fun (x405 : t) ->
            SerializationType.t_of_js
              (Ojs.get_prop_ascii (t_to_js x405) "serialization")
        let (set_serialization : t -> SerializationType.t -> unit) =
          fun (x406 : t) ->
            fun (x407 : SerializationType.t) ->
              Ojs.set_prop_ascii (t_to_js x406) "serialization"
                (SerializationType.t_to_js x407)
      end
    module ProcessEnvOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x409 : Ojs.t) -> x409
        and t_to_js : t -> Ojs.t = fun (x408 : Ojs.t) -> x408
        let (get_uid : t -> int) =
          fun (x410 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x410) "uid")
        let (set_uid : t -> int -> unit) =
          fun (x411 : t) ->
            fun (x412 : int) ->
              Ojs.set_prop_ascii (t_to_js x411) "uid" (Ojs.int_to_js x412)
        let (get_gid : t -> int) =
          fun (x413 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x413) "gid")
        let (set_gid : t -> int -> unit) =
          fun (x414 : t) ->
            fun (x415 : int) ->
              Ojs.set_prop_ascii (t_to_js x414) "gid" (Ojs.int_to_js x415)
        let (get_cwd : t -> string) =
          fun (x416 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x416) "cwd")
        let (set_cwd : t -> string -> unit) =
          fun (x417 : t) ->
            fun (x418 : string) ->
              Ojs.set_prop_ascii (t_to_js x417) "cwd" (Ojs.string_to_js x418)
        let (get_env : t -> Node_process.Process.ProcessEnv.t) =
          fun (x419 : t) ->
            Node_process.Process.ProcessEnv.t_of_js
              (Ojs.get_prop_ascii (t_to_js x419) "env")
        let (set_env : t -> Node_process.Process.ProcessEnv.t -> unit) =
          fun (x420 : t) ->
            fun (x421 : Node_process.Process.ProcessEnv.t) ->
              Ojs.set_prop_ascii (t_to_js x420) "env"
                (Node_process.Process.ProcessEnv.t_to_js x421)
      end
    module CommonOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x423 : Ojs.t) -> x423
        and t_to_js : t -> Ojs.t = fun (x422 : Ojs.t) -> x422
        let (get_windows_hide : t -> bool) =
          fun (x424 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x424) "windowsHide")
        let (set_windows_hide : t -> bool -> unit) =
          fun (x425 : t) ->
            fun (x426 : bool) ->
              Ojs.set_prop_ascii (t_to_js x425) "windowsHide"
                (Ojs.bool_to_js x426)
        let (get_timeout : t -> int) =
          fun (x427 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x427) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x428 : t) ->
            fun (x429 : int) ->
              Ojs.set_prop_ascii (t_to_js x428) "timeout"
                (Ojs.int_to_js x429)
        let (cast : t -> ProcessEnvOptions.t) =
          fun (x430 : t) -> ProcessEnvOptions.t_of_js (t_to_js x430)
      end
    module CommonSpawnOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x432 : Ojs.t) -> x432
        and t_to_js : t -> Ojs.t = fun (x431 : Ojs.t) -> x431
        let (get_argv0 : t -> string) =
          fun (x433 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x433) "argv0")
        let (set_argv0 : t -> string -> unit) =
          fun (x434 : t) ->
            fun (x435 : string) ->
              Ojs.set_prop_ascii (t_to_js x434) "argv0"
                (Ojs.string_to_js x435)
        let (get_stdio : t -> StdioOptions.t) =
          fun (x436 : t) ->
            StdioOptions.t_of_js (Ojs.get_prop_ascii (t_to_js x436) "stdio")
        let (set_stdio : t -> StdioOptions.t -> unit) =
          fun (x437 : t) ->
            fun (x438 : StdioOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x437) "stdio"
                (StdioOptions.t_to_js x438)
        let (get_shell : t -> bool or_string) =
          fun (x439 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x439) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x441 : t) ->
            fun (x442 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x441) "shell"
                (or_string_to_js Ojs.bool_to_js x442)
        let (get_windows_verbatim_arguments : t -> bool) =
          fun (x444 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x444) "windowsVerbatimArguments")
        let (set_windows_verbatim_arguments : t -> bool -> unit) =
          fun (x445 : t) ->
            fun (x446 : bool) ->
              Ojs.set_prop_ascii (t_to_js x445) "windowsVerbatimArguments"
                (Ojs.bool_to_js x446)
        let (cast : t -> CommonOptions.t) =
          fun (x447 : t) -> CommonOptions.t_of_js (t_to_js x447)
        let (cast' : t -> MessagingOptions.t) =
          fun (x448 : t) -> MessagingOptions.t_of_js (t_to_js x448)
      end
    module SpawnOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x450 : Ojs.t) -> x450
        and t_to_js : t -> Ojs.t = fun (x449 : Ojs.t) -> x449
        let (get_detached : t -> bool) =
          fun (x451 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x451) "detached")
        let (set_detached : t -> bool -> unit) =
          fun (x452 : t) ->
            fun (x453 : bool) ->
              Ojs.set_prop_ascii (t_to_js x452) "detached"
                (Ojs.bool_to_js x453)
        let (cast : t -> CommonSpawnOptions.t) =
          fun (x454 : t) -> CommonSpawnOptions.t_of_js (t_to_js x454)
      end
    module SpawnOptionsWithoutStdio =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x456 : Ojs.t) -> x456
        and t_to_js : t -> Ojs.t = fun (x455 : Ojs.t) -> x455
        let (get_stdio :
          t -> ([ `pipe ] or_null_or_undefined list, [ `pipe ]) or_enum) =
          fun (x457 : t) ->
            or_enum_of_js
              (fun (x458 : Ojs.t) ->
                 Ojs.list_of_js
                   (fun (x459 : Ojs.t) ->
                      or_null_or_undefined_of_js
                        (fun (x460 : Ojs.t) ->
                           let x461 = x460 in
                           match Ojs.string_of_js x461 with
                           | "pipe" -> `pipe
                           | _ -> assert false) x459) x458)
              (fun (x462 : Ojs.t) ->
                 let x463 = x462 in
                 match Ojs.string_of_js x463 with
                 | "pipe" -> `pipe
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x457) "stdio")
        let (set_stdio :
          t ->
            ([ `pipe ] or_null_or_undefined list, [ `pipe ]) or_enum -> unit)
          =
          fun (x464 : t) ->
            fun
              (x465 :
                ([ `pipe ] or_null_or_undefined list, [ `pipe ]) or_enum)
              ->
              Ojs.set_prop_ascii (t_to_js x464) "stdio"
                (or_enum_to_js
                   (fun (x466 : [ `pipe ] or_null_or_undefined list) ->
                      Ojs.list_to_js
                        (fun (x467 : [ `pipe ] or_null_or_undefined) ->
                           or_null_or_undefined_to_js
                             (fun (x468 : [ `pipe ]) ->
                                match x468 with
                                | `pipe -> Ojs.string_to_js "pipe") x467)
                        x466)
                   (fun (x469 : [ `pipe ]) ->
                      match x469 with | `pipe -> Ojs.string_to_js "pipe")
                   x465)
        let (cast : t -> SpawnOptions.t) =
          fun (x470 : t) -> SpawnOptions.t_of_js (t_to_js x470)
      end
    module StdioNull =
      struct
        type t =
          (Node_stream.Stream.Stream.t, [ `ignore  | `inherit_ ]) or_enum
        let rec t_of_js : Ojs.t -> t =
          fun (x474 : Ojs.t) ->
            or_enum_of_js Node_stream.Stream.Stream.t_of_js
              (fun (x476 : Ojs.t) ->
                 let x477 = x476 in
                 match Ojs.string_of_js x477 with
                 | "ignore" -> `ignore
                 | "inherit" -> `inherit_
                 | _ -> assert false) x474
        and t_to_js : t -> Ojs.t =
          fun
            (x471 :
              (Node_stream.Stream.Stream.t, [ `ignore  | `inherit_ ]) or_enum)
            ->
            or_enum_to_js Node_stream.Stream.Stream.t_to_js
              (fun (x473 : [ `ignore  | `inherit_ ]) ->
                 match x473 with
                 | `ignore -> Ojs.string_to_js "ignore"
                 | `inherit_ -> Ojs.string_to_js "inherit") x471
      end
    module StdioPipe =
      struct
        type t = [ `pipe ] or_null_or_undefined
        let rec t_of_js : Ojs.t -> t =
          fun (x480 : Ojs.t) ->
            or_null_or_undefined_of_js
              (fun (x481 : Ojs.t) ->
                 let x482 = x481 in
                 match Ojs.string_of_js x482 with
                 | "pipe" -> `pipe
                 | _ -> assert false) x480
        and t_to_js : t -> Ojs.t =
          fun (x478 : [ `pipe ] or_null_or_undefined) ->
            or_null_or_undefined_to_js
              (fun (x479 : [ `pipe ]) ->
                 match x479 with | `pipe -> Ojs.string_to_js "pipe") x478
      end
    module SpawnOptionsWithStdioTuple =
      struct
        type ('Stdin, 'Stdout, 'Stderr) t = Ojs.t
        let rec t_of_js :
          'Stdin 'Stdout 'Stderr .
            (Ojs.t -> 'Stdin) ->
              (Ojs.t -> 'Stdout) ->
                (Ojs.t -> 'Stderr) -> Ojs.t -> ('Stdin, 'Stdout, 'Stderr) t
          = fun (type __Stdin) -> fun (type __Stdout) -> fun (type __Stderr)
          ->
          fun (__Stdin_of_js : Ojs.t -> __Stdin) ->
            fun (__Stdout_of_js : Ojs.t -> __Stdout) ->
              fun (__Stderr_of_js : Ojs.t -> __Stderr) ->
                fun (x484 : Ojs.t) -> x484
        and t_to_js :
          'Stdin 'Stdout 'Stderr .
            ('Stdin -> Ojs.t) ->
              ('Stdout -> Ojs.t) ->
                ('Stderr -> Ojs.t) -> ('Stdin, 'Stdout, 'Stderr) t -> Ojs.t
          = fun (type __Stdin) -> fun (type __Stdout) -> fun (type __Stderr)
          ->
          fun (__Stdin_to_js : __Stdin -> Ojs.t) ->
            fun (__Stdout_to_js : __Stdout -> Ojs.t) ->
              fun (__Stderr_to_js : __Stderr -> Ojs.t) ->
                fun (x483 : Ojs.t) -> x483
        let (get_stdio :
          ('Stdin, 'Stdout, 'Stderr) t -> ('Stdin * 'Stdout * 'Stderr)) =
          fun (x485 : ('Stdin, 'Stdout, 'Stderr) t) ->
            let x489 =
              Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x485)
                "stdio" in
            ((Obj.magic (Ojs.array_get x489 0)),
              (Obj.magic (Ojs.array_get x489 1)),
              (Obj.magic (Ojs.array_get x489 2)))
        let (set_stdio :
          ('Stdin, 'Stdout, 'Stderr) t ->
            ('Stdin * 'Stdout * 'Stderr) -> unit)
          =
          fun (x490 : ('Stdin, 'Stdout, 'Stderr) t) ->
            fun (x491 : ('Stdin * 'Stdout * 'Stderr)) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x490)
                "stdio"
                (let (x492, x493, x494) = x491 in
                 let x495 = Ojs.array_make 3 in
                 Ojs.array_set x495 0 (Obj.magic x492);
                 Ojs.array_set x495 1 (Obj.magic x493);
                 Ojs.array_set x495 2 (Obj.magic x494);
                 x495)
        let (cast : ('Stdin, 'Stdout, 'Stderr) t -> SpawnOptions.t) =
          fun (x499 : ('Stdin, 'Stdout, 'Stderr) t) ->
            SpawnOptions.t_of_js (t_to_js Obj.magic Obj.magic Obj.magic x499)
      end
    let (spawn :
      command:string ->
        ?args:string list ->
          ?options:SpawnOptionsWithoutStdio.t ->
            unit -> ChildProcessWithoutNullStreams.t)
      =
      fun ~command:(x503 : string) ->
        fun ?args:(x504 : string list option) ->
          fun ?options:(x505 : SpawnOptionsWithoutStdio.t option) ->
            fun () ->
              ChildProcessWithoutNullStreams.t_of_js
                (let x510 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x510 "spawn") "apply"
                   [|x510;((let x506 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x506 "push"
                                 [|(Ojs.string_to_js x503)|]);
                            (match x504 with
                             | Some x508 ->
                                 ignore
                                   (Ojs.call x506 "push"
                                      [|(Ojs.list_to_js Ojs.string_to_js x508)|])
                             | None -> ());
                            (match x505 with
                             | Some x507 ->
                                 ignore
                                   (Ojs.call x506 "push"
                                      [|(SpawnOptionsWithoutStdio.t_to_js
                                           x507)|])
                             | None -> ());
                            x506))|])
    let (spawn' :
      command:string ->
        options:(StdioPipe.t, StdioPipe.t, StdioPipe.t)
          SpawnOptionsWithStdioTuple.t ->
          (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
            Node_stream.Stream.Readable.t) ChildProcessByStdio.t)
      =
      fun ~command:(x511 : string) ->
        fun
          ~options:(x512 :
                     (StdioPipe.t, StdioPipe.t, StdioPipe.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x511);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioPipe.t_to_js
                                            StdioPipe.t_to_js
                                            StdioPipe.t_to_js x512)|])
    let (spawn' :
      command:string ->
        options:(StdioPipe.t, StdioPipe.t, StdioNull.t)
          SpawnOptionsWithStdioTuple.t ->
          (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
            never or_null) ChildProcessByStdio.t)
      =
      fun ~command:(x519 : string) ->
        fun
          ~options:(x520 :
                     (StdioPipe.t, StdioPipe.t, StdioNull.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            (fun (x526 : Ojs.t) -> or_null_of_js never_of_js x526)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x519);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioPipe.t_to_js
                                            StdioPipe.t_to_js
                                            StdioNull.t_to_js x520)|])
    let (spawn' :
      command:string ->
        options:(StdioPipe.t, StdioNull.t, StdioPipe.t)
          SpawnOptionsWithStdioTuple.t ->
          (Node_stream.Stream.Writable.t, never or_null,
            Node_stream.Stream.Readable.t) ChildProcessByStdio.t)
      =
      fun ~command:(x528 : string) ->
        fun
          ~options:(x529 :
                     (StdioPipe.t, StdioNull.t, StdioPipe.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
            (fun (x534 : Ojs.t) -> or_null_of_js never_of_js x534)
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x528);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioPipe.t_to_js
                                            StdioNull.t_to_js
                                            StdioPipe.t_to_js x529)|])
    let (spawn' :
      command:string ->
        options:(StdioNull.t, StdioPipe.t, StdioPipe.t)
          SpawnOptionsWithStdioTuple.t ->
          (never or_null, Node_stream.Stream.Readable.t,
            Node_stream.Stream.Readable.t) ChildProcessByStdio.t)
      =
      fun ~command:(x537 : string) ->
        fun
          ~options:(x538 :
                     (StdioNull.t, StdioPipe.t, StdioPipe.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js
            (fun (x542 : Ojs.t) -> or_null_of_js never_of_js x542)
            Node_stream.Stream.Readable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x537);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioNull.t_to_js
                                            StdioPipe.t_to_js
                                            StdioPipe.t_to_js x538)|])
    let (spawn' :
      command:string ->
        options:(StdioPipe.t, StdioNull.t, StdioNull.t)
          SpawnOptionsWithStdioTuple.t ->
          (Node_stream.Stream.Writable.t, never or_null, never or_null)
            ChildProcessByStdio.t)
      =
      fun ~command:(x546 : string) ->
        fun
          ~options:(x547 :
                     (StdioPipe.t, StdioNull.t, StdioNull.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
            (fun (x552 : Ojs.t) -> or_null_of_js never_of_js x552)
            (fun (x554 : Ojs.t) -> or_null_of_js never_of_js x554)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x546);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioPipe.t_to_js
                                            StdioNull.t_to_js
                                            StdioNull.t_to_js x547)|])
    let (spawn' :
      command:string ->
        options:(StdioNull.t, StdioPipe.t, StdioNull.t)
          SpawnOptionsWithStdioTuple.t ->
          (never or_null, Node_stream.Stream.Readable.t, never or_null)
            ChildProcessByStdio.t)
      =
      fun ~command:(x556 : string) ->
        fun
          ~options:(x557 :
                     (StdioNull.t, StdioPipe.t, StdioNull.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js
            (fun (x561 : Ojs.t) -> or_null_of_js never_of_js x561)
            Node_stream.Stream.Readable.t_of_js
            (fun (x564 : Ojs.t) -> or_null_of_js never_of_js x564)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x556);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioNull.t_to_js
                                            StdioPipe.t_to_js
                                            StdioNull.t_to_js x557)|])
    let (spawn' :
      command:string ->
        options:(StdioNull.t, StdioNull.t, StdioPipe.t)
          SpawnOptionsWithStdioTuple.t ->
          (never or_null, never or_null, Node_stream.Stream.Readable.t)
            ChildProcessByStdio.t)
      =
      fun ~command:(x566 : string) ->
        fun
          ~options:(x567 :
                     (StdioNull.t, StdioNull.t, StdioPipe.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js
            (fun (x571 : Ojs.t) -> or_null_of_js never_of_js x571)
            (fun (x573 : Ojs.t) -> or_null_of_js never_of_js x573)
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x566);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioNull.t_to_js
                                            StdioNull.t_to_js
                                            StdioPipe.t_to_js x567)|])
    let (spawn' :
      command:string ->
        options:(StdioNull.t, StdioNull.t, StdioNull.t)
          SpawnOptionsWithStdioTuple.t ->
          (never or_null, never or_null, never or_null) ChildProcessByStdio.t)
      =
      fun ~command:(x576 : string) ->
        fun
          ~options:(x577 :
                     (StdioNull.t, StdioNull.t, StdioNull.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js
            (fun (x581 : Ojs.t) -> or_null_of_js never_of_js x581)
            (fun (x583 : Ojs.t) -> or_null_of_js never_of_js x583)
            (fun (x585 : Ojs.t) -> or_null_of_js never_of_js x585)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x576);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioNull.t_to_js
                                            StdioNull.t_to_js
                                            StdioNull.t_to_js x577)|])
    let (spawn' : command:string -> options:SpawnOptions.t -> ChildProcess.t)
      =
      fun ~command:(x587 : string) ->
        fun ~options:(x588 : SpawnOptions.t) ->
          ChildProcess.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x587);(SpawnOptions.t_to_js x588)|])
    let (spawn' :
      command:string ->
        ?args:string list ->
          ?options:SpawnOptionsWithoutStdio.t ->
            unit -> ChildProcessWithoutNullStreams.t)
      =
      fun ~command:(x589 : string) ->
        fun ?args:(x590 : string list option) ->
          fun ?options:(x591 : SpawnOptionsWithoutStdio.t option) ->
            fun () ->
              ChildProcessWithoutNullStreams.t_of_js
                (let x596 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x596 "spawn") "apply"
                   [|x596;((let x592 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x592 "push"
                                 [|(Ojs.string_to_js x589)|]);
                            (match x590 with
                             | Some x594 ->
                                 ignore
                                   (Ojs.call x592 "push"
                                      [|(Ojs.list_to_js Ojs.string_to_js x594)|])
                             | None -> ());
                            (match x591 with
                             | Some x593 ->
                                 ignore
                                   (Ojs.call x592 "push"
                                      [|(SpawnOptionsWithoutStdio.t_to_js
                                           x593)|])
                             | None -> ());
                            x592))|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioPipe.t, StdioPipe.t, StdioPipe.t)
            SpawnOptionsWithStdioTuple.t ->
            (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
              Node_stream.Stream.Readable.t) ChildProcessByStdio.t)
      =
      fun ~command:(x597 : string) ->
        fun ~args:(x598 : string list) ->
          fun
            ~options:(x600 :
                       (StdioPipe.t, StdioPipe.t, StdioPipe.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x597);(Ojs.list_to_js Ojs.string_to_js
                                              x598);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioPipe.t_to_js x600)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioPipe.t, StdioPipe.t, StdioNull.t)
            SpawnOptionsWithStdioTuple.t ->
            (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
              never or_null) ChildProcessByStdio.t)
      =
      fun ~command:(x607 : string) ->
        fun ~args:(x608 : string list) ->
          fun
            ~options:(x610 :
                       (StdioPipe.t, StdioPipe.t, StdioNull.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              (fun (x616 : Ojs.t) -> or_null_of_js never_of_js x616)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x607);(Ojs.list_to_js Ojs.string_to_js
                                              x608);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioNull.t_to_js x610)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioPipe.t, StdioNull.t, StdioPipe.t)
            SpawnOptionsWithStdioTuple.t ->
            (Node_stream.Stream.Writable.t, never or_null,
              Node_stream.Stream.Readable.t) ChildProcessByStdio.t)
      =
      fun ~command:(x618 : string) ->
        fun ~args:(x619 : string list) ->
          fun
            ~options:(x621 :
                       (StdioPipe.t, StdioNull.t, StdioPipe.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
              (fun (x626 : Ojs.t) -> or_null_of_js never_of_js x626)
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x618);(Ojs.list_to_js Ojs.string_to_js
                                              x619);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioPipe.t_to_js x621)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioNull.t, StdioPipe.t, StdioPipe.t)
            SpawnOptionsWithStdioTuple.t ->
            (never or_null, Node_stream.Stream.Readable.t,
              Node_stream.Stream.Readable.t) ChildProcessByStdio.t)
      =
      fun ~command:(x629 : string) ->
        fun ~args:(x630 : string list) ->
          fun
            ~options:(x632 :
                       (StdioNull.t, StdioPipe.t, StdioPipe.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js
              (fun (x636 : Ojs.t) -> or_null_of_js never_of_js x636)
              Node_stream.Stream.Readable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x629);(Ojs.list_to_js Ojs.string_to_js
                                              x630);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioPipe.t_to_js x632)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioPipe.t, StdioNull.t, StdioNull.t)
            SpawnOptionsWithStdioTuple.t ->
            (Node_stream.Stream.Writable.t, never or_null, never or_null)
              ChildProcessByStdio.t)
      =
      fun ~command:(x640 : string) ->
        fun ~args:(x641 : string list) ->
          fun
            ~options:(x643 :
                       (StdioPipe.t, StdioNull.t, StdioNull.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
              (fun (x648 : Ojs.t) -> or_null_of_js never_of_js x648)
              (fun (x650 : Ojs.t) -> or_null_of_js never_of_js x650)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x640);(Ojs.list_to_js Ojs.string_to_js
                                              x641);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioNull.t_to_js x643)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioNull.t, StdioPipe.t, StdioNull.t)
            SpawnOptionsWithStdioTuple.t ->
            (never or_null, Node_stream.Stream.Readable.t, never or_null)
              ChildProcessByStdio.t)
      =
      fun ~command:(x652 : string) ->
        fun ~args:(x653 : string list) ->
          fun
            ~options:(x655 :
                       (StdioNull.t, StdioPipe.t, StdioNull.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js
              (fun (x659 : Ojs.t) -> or_null_of_js never_of_js x659)
              Node_stream.Stream.Readable.t_of_js
              (fun (x662 : Ojs.t) -> or_null_of_js never_of_js x662)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x652);(Ojs.list_to_js Ojs.string_to_js
                                              x653);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioNull.t_to_js x655)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioNull.t, StdioNull.t, StdioPipe.t)
            SpawnOptionsWithStdioTuple.t ->
            (never or_null, never or_null, Node_stream.Stream.Readable.t)
              ChildProcessByStdio.t)
      =
      fun ~command:(x664 : string) ->
        fun ~args:(x665 : string list) ->
          fun
            ~options:(x667 :
                       (StdioNull.t, StdioNull.t, StdioPipe.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js
              (fun (x671 : Ojs.t) -> or_null_of_js never_of_js x671)
              (fun (x673 : Ojs.t) -> or_null_of_js never_of_js x673)
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x664);(Ojs.list_to_js Ojs.string_to_js
                                              x665);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioPipe.t_to_js x667)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioNull.t, StdioNull.t, StdioNull.t)
            SpawnOptionsWithStdioTuple.t ->
            (never or_null, never or_null, never or_null)
              ChildProcessByStdio.t)
      =
      fun ~command:(x676 : string) ->
        fun ~args:(x677 : string list) ->
          fun
            ~options:(x679 :
                       (StdioNull.t, StdioNull.t, StdioNull.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js
              (fun (x683 : Ojs.t) -> or_null_of_js never_of_js x683)
              (fun (x685 : Ojs.t) -> or_null_of_js never_of_js x685)
              (fun (x687 : Ojs.t) -> or_null_of_js never_of_js x687)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x676);(Ojs.list_to_js Ojs.string_to_js
                                              x677);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioNull.t_to_js x679)|])
    let (spawn' :
      command:string ->
        args:string list -> options:SpawnOptions.t -> ChildProcess.t)
      =
      fun ~command:(x689 : string) ->
        fun ~args:(x690 : string list) ->
          fun ~options:(x692 : SpawnOptions.t) ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x689);(Ojs.list_to_js Ojs.string_to_js
                                              x690);(SpawnOptions.t_to_js
                                                       x692)|])
    module ExecOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x694 : Ojs.t) -> x694
        and t_to_js : t -> Ojs.t = fun (x693 : Ojs.t) -> x693
        let (get_shell : t -> string) =
          fun (x695 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x695) "shell")
        let (set_shell : t -> string -> unit) =
          fun (x696 : t) ->
            fun (x697 : string) ->
              Ojs.set_prop_ascii (t_to_js x696) "shell"
                (Ojs.string_to_js x697)
        let (get_max_buffer : t -> int) =
          fun (x698 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x698) "maxBuffer")
        let (set_max_buffer : t -> int -> unit) =
          fun (x699 : t) ->
            fun (x700 : int) ->
              Ojs.set_prop_ascii (t_to_js x699) "maxBuffer"
                (Ojs.int_to_js x700)
        let (get_kill_signal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x701 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x701) "killSignal")
        let (set_kill_signal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x703 : t) ->
            fun (x704 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x703) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x704)
        let (cast : t -> CommonOptions.t) =
          fun (x706 : t) -> CommonOptions.t_of_js (t_to_js x706)
      end
    module ExecOptionsWithStringEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x708 : Ojs.t) -> x708
        and t_to_js : t -> Ojs.t = fun (x707 : Ojs.t) -> x707
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x709 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x709) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x710 : t) ->
            fun (x711 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x710) "encoding"
                (BufferEncoding.t_to_js x711)
        let (cast : t -> ExecOptions.t) =
          fun (x712 : t) -> ExecOptions.t_of_js (t_to_js x712)
      end
    module ExecOptionsWithBufferEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x714 : Ojs.t) -> x714
        and t_to_js : t -> Ojs.t = fun (x713 : Ojs.t) -> x713
        let (get_encoding : t -> BufferEncoding.t or_null) =
          fun (x715 : t) ->
            or_null_of_js BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x715) "encoding")
        let (set_encoding : t -> BufferEncoding.t or_null -> unit) =
          fun (x717 : t) ->
            fun (x718 : BufferEncoding.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x717) "encoding"
                (or_null_to_js BufferEncoding.t_to_js x718)
        let (cast : t -> ExecOptions.t) =
          fun (x720 : t) -> ExecOptions.t_of_js (t_to_js x720)
      end
    module ExecException =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x722 : Ojs.t) -> x722
        and t_to_js : t -> Ojs.t = fun (x721 : Ojs.t) -> x721
        let (get_cmd : t -> string) =
          fun (x723 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x723) "cmd")
        let (set_cmd : t -> string -> unit) =
          fun (x724 : t) ->
            fun (x725 : string) ->
              Ojs.set_prop_ascii (t_to_js x724) "cmd" (Ojs.string_to_js x725)
        let (get_killed : t -> bool) =
          fun (x726 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x726) "killed")
        let (set_killed : t -> bool -> unit) =
          fun (x727 : t) ->
            fun (x728 : bool) ->
              Ojs.set_prop_ascii (t_to_js x727) "killed"
                (Ojs.bool_to_js x728)
        let (get_code : t -> int) =
          fun (x729 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x729) "code")
        let (set_code : t -> int -> unit) =
          fun (x730 : t) ->
            fun (x731 : int) ->
              Ojs.set_prop_ascii (t_to_js x730) "code" (Ojs.int_to_js x731)
        let (get_signal : t -> Node_process.Process.Signals.t) =
          fun (x732 : t) ->
            Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x732) "signal")
        let (set_signal : t -> Node_process.Process.Signals.t -> unit) =
          fun (x733 : t) ->
            fun (x734 : Node_process.Process.Signals.t) ->
              Ojs.set_prop_ascii (t_to_js x733) "signal"
                (Node_process.Process.Signals.t_to_js x734)
        let (cast : t -> Error.t) =
          fun (x735 : t) -> Error.t_of_js (t_to_js x735)
      end
    let (exec :
      command:string ->
        ?callback:(error:ExecException.t or_null ->
                     stdout:string -> stderr:string -> unit)
          -> unit -> ChildProcess.t)
      =
      fun ~command:(x736 : string) ->
        fun
          ?callback:(x737 :
                      (error:ExecException.t or_null ->
                         stdout:string -> stderr:string -> unit)
                        option)
          ->
          fun () ->
            ChildProcess.t_of_js
              (let x744 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x744 "exec") "apply"
                 [|x744;((let x738 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x738 "push" [|(Ojs.string_to_js x736)|]);
                          (match x737 with
                           | Some x739 ->
                               ignore
                                 (Ojs.call x738 "push"
                                    [|(Ojs.fun_to_js 3
                                         (fun (x740 : Ojs.t) ->
                                            fun (x742 : Ojs.t) ->
                                              fun (x743 : Ojs.t) ->
                                                x739
                                                  ~error:(or_null_of_js
                                                            ExecException.t_of_js
                                                            x740)
                                                  ~stdout:(Ojs.string_of_js
                                                             x742)
                                                  ~stderr:(Ojs.string_of_js
                                                             x743)))|])
                           | None -> ());
                          x738))|])
    let (exec :
      command:string ->
        options:(AnonymousInterface1.t, ExecOptions.t) intersection2 ->
          ?callback:(error:ExecException.t or_null ->
                       stdout:Buffer.t -> stderr:Buffer.t -> unit)
            -> unit -> ChildProcess.t)
      =
      fun ~command:(x745 : string) ->
        fun
          ~options:(x746 :
                     (AnonymousInterface1.t, ExecOptions.t) intersection2)
          ->
          fun
            ?callback:(x747 :
                        (error:ExecException.t or_null ->
                           stdout:Buffer.t -> stderr:Buffer.t -> unit)
                          option)
            ->
            fun () ->
              ChildProcess.t_of_js
                (let x756 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x756 "exec") "apply"
                   [|x756;((let x748 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x748 "push"
                                 [|(Ojs.string_to_js x745)|]);
                            ignore
                              (Ojs.call x748 "push"
                                 [|(intersection2_to_js
                                      AnonymousInterface1.t_to_js
                                      ExecOptions.t_to_js x746)|]);
                            (match x747 with
                             | Some x749 ->
                                 ignore
                                   (Ojs.call x748 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x750 : Ojs.t) ->
                                              fun (x752 : Ojs.t) ->
                                                fun (x753 : Ojs.t) ->
                                                  x749
                                                    ~error:(or_null_of_js
                                                              ExecException.t_of_js
                                                              x750)
                                                    ~stdout:(Buffer.t_of_js
                                                               x752)
                                                    ~stderr:(Buffer.t_of_js
                                                               x753)))|])
                             | None -> ());
                            x748))|])
    let (exec :
      command:string ->
        options:(AnonymousInterface0.t, ExecOptions.t) intersection2 ->
          ?callback:(error:ExecException.t or_null ->
                       stdout:string -> stderr:string -> unit)
            -> unit -> ChildProcess.t)
      =
      fun ~command:(x757 : string) ->
        fun
          ~options:(x758 :
                     (AnonymousInterface0.t, ExecOptions.t) intersection2)
          ->
          fun
            ?callback:(x759 :
                        (error:ExecException.t or_null ->
                           stdout:string -> stderr:string -> unit)
                          option)
            ->
            fun () ->
              ChildProcess.t_of_js
                (let x768 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x768 "exec") "apply"
                   [|x768;((let x760 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x760 "push"
                                 [|(Ojs.string_to_js x757)|]);
                            ignore
                              (Ojs.call x760 "push"
                                 [|(intersection2_to_js
                                      AnonymousInterface0.t_to_js
                                      ExecOptions.t_to_js x758)|]);
                            (match x759 with
                             | Some x761 ->
                                 ignore
                                   (Ojs.call x760 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x762 : Ojs.t) ->
                                              fun (x764 : Ojs.t) ->
                                                fun (x765 : Ojs.t) ->
                                                  x761
                                                    ~error:(or_null_of_js
                                                              ExecException.t_of_js
                                                              x762)
                                                    ~stdout:(Ojs.string_of_js
                                                               x764)
                                                    ~stderr:(Ojs.string_of_js
                                                               x765)))|])
                             | None -> ());
                            x760))|])
    let (exec :
      command:string ->
        options:(AnonymousInterface0.t, ExecOptions.t) intersection2 ->
          ?callback:(error:ExecException.t or_null ->
                       stdout:Buffer.t or_string ->
                         stderr:Buffer.t or_string -> unit)
            -> unit -> ChildProcess.t)
      =
      fun ~command:(x769 : string) ->
        fun
          ~options:(x770 :
                     (AnonymousInterface0.t, ExecOptions.t) intersection2)
          ->
          fun
            ?callback:(x771 :
                        (error:ExecException.t or_null ->
                           stdout:Buffer.t or_string ->
                             stderr:Buffer.t or_string -> unit)
                          option)
            ->
            fun () ->
              ChildProcess.t_of_js
                (let x782 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x782 "exec") "apply"
                   [|x782;((let x772 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x772 "push"
                                 [|(Ojs.string_to_js x769)|]);
                            ignore
                              (Ojs.call x772 "push"
                                 [|(intersection2_to_js
                                      AnonymousInterface0.t_to_js
                                      ExecOptions.t_to_js x770)|]);
                            (match x771 with
                             | Some x773 ->
                                 ignore
                                   (Ojs.call x772 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x774 : Ojs.t) ->
                                              fun (x776 : Ojs.t) ->
                                                fun (x778 : Ojs.t) ->
                                                  x773
                                                    ~error:(or_null_of_js
                                                              ExecException.t_of_js
                                                              x774)
                                                    ~stdout:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x776)
                                                    ~stderr:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x778)))|])
                             | None -> ());
                            x772))|])
    let (exec :
      command:string ->
        options:ExecOptions.t ->
          ?callback:(error:ExecException.t or_null ->
                       stdout:string -> stderr:string -> unit)
            -> unit -> ChildProcess.t)
      =
      fun ~command:(x783 : string) ->
        fun ~options:(x784 : ExecOptions.t) ->
          fun
            ?callback:(x785 :
                        (error:ExecException.t or_null ->
                           stdout:string -> stderr:string -> unit)
                          option)
            ->
            fun () ->
              ChildProcess.t_of_js
                (let x792 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x792 "exec") "apply"
                   [|x792;((let x786 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x786 "push"
                                 [|(Ojs.string_to_js x783)|]);
                            ignore
                              (Ojs.call x786 "push"
                                 [|(ExecOptions.t_to_js x784)|]);
                            (match x785 with
                             | Some x787 ->
                                 ignore
                                   (Ojs.call x786 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x788 : Ojs.t) ->
                                              fun (x790 : Ojs.t) ->
                                                fun (x791 : Ojs.t) ->
                                                  x787
                                                    ~error:(or_null_of_js
                                                              ExecException.t_of_js
                                                              x788)
                                                    ~stdout:(Ojs.string_of_js
                                                               x790)
                                                    ~stderr:(Ojs.string_of_js
                                                               x791)))|])
                             | None -> ());
                            x786))|])
    let (exec :
      command:string ->
        options:(Node_fs.Fs.BaseEncodingOptions.t, ExecOptions.t)
          intersection2 or_null_or_undefined ->
          ?callback:(error:ExecException.t or_null ->
                       stdout:Buffer.t or_string ->
                         stderr:Buffer.t or_string -> unit)
            -> unit -> ChildProcess.t)
      =
      fun ~command:(x793 : string) ->
        fun
          ~options:(x794 :
                     (Node_fs.Fs.BaseEncodingOptions.t, ExecOptions.t)
                       intersection2 or_null_or_undefined)
          ->
          fun
            ?callback:(x795 :
                        (error:ExecException.t or_null ->
                           stdout:Buffer.t or_string ->
                             stderr:Buffer.t or_string -> unit)
                          option)
            ->
            fun () ->
              ChildProcess.t_of_js
                (let x807 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x807 "exec") "apply"
                   [|x807;((let x796 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x796 "push"
                                 [|(Ojs.string_to_js x793)|]);
                            ignore
                              (Ojs.call x796 "push"
                                 [|(or_null_or_undefined_to_js
                                      (fun
                                         (x804 :
                                           (Node_fs.Fs.BaseEncodingOptions.t,
                                             ExecOptions.t) intersection2)
                                         ->
                                         intersection2_to_js
                                           Node_fs.Fs.BaseEncodingOptions.t_to_js
                                           ExecOptions.t_to_js x804) x794)|]);
                            (match x795 with
                             | Some x797 ->
                                 ignore
                                   (Ojs.call x796 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x798 : Ojs.t) ->
                                              fun (x800 : Ojs.t) ->
                                                fun (x802 : Ojs.t) ->
                                                  x797
                                                    ~error:(or_null_of_js
                                                              ExecException.t_of_js
                                                              x798)
                                                    ~stdout:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x800)
                                                    ~stderr:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x802)))|])
                             | None -> ());
                            x796))|])
    module PromiseWithChild =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x809 : Ojs.t) -> x809
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x808 : Ojs.t) -> x808
        let (get_child : 'T t -> ChildProcess.t) =
          fun (x810 : 'T t) ->
            ChildProcess.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x810) "child")
        let (set_child : 'T t -> ChildProcess.t -> unit) =
          fun (x812 : 'T t) ->
            fun (x813 : ChildProcess.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x812) "child"
                (ChildProcess.t_to_js x813)
        let (cast : 'T t -> 'T Promise.t) =
          fun (x815 : 'T t) ->
            Promise.t_of_js Obj.magic (t_to_js Obj.magic x815)
      end
    module Exec =
      struct
        let (__promisify__ :
          command:string -> AnonymousInterface3.t PromiseWithChild.t) =
          fun ~command:(x818 : string) ->
            PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                 "__promisify__" [|(Ojs.string_to_js x818)|])
        let (__promisify__ :
          command:string ->
            options:(AnonymousInterface1.t, ExecOptions.t) intersection2 ->
              AnonymousInterface2.t PromiseWithChild.t)
          =
          fun ~command:(x820 : string) ->
            fun
              ~options:(x821 :
                         (AnonymousInterface1.t, ExecOptions.t) intersection2)
              ->
              PromiseWithChild.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                   "__promisify__"
                   [|(Ojs.string_to_js x820);(intersection2_to_js
                                                AnonymousInterface1.t_to_js
                                                ExecOptions.t_to_js x821)|])
        let (__promisify__ :
          command:string ->
            options:(AnonymousInterface0.t, ExecOptions.t) intersection2 ->
              AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~command:(x825 : string) ->
            fun
              ~options:(x826 :
                         (AnonymousInterface0.t, ExecOptions.t) intersection2)
              ->
              PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                   "__promisify__"
                   [|(Ojs.string_to_js x825);(intersection2_to_js
                                                AnonymousInterface0.t_to_js
                                                ExecOptions.t_to_js x826)|])
        let (__promisify__ :
          command:string ->
            options:ExecOptions.t -> AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~command:(x830 : string) ->
            fun ~options:(x831 : ExecOptions.t) ->
              PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                   "__promisify__"
                   [|(Ojs.string_to_js x830);(ExecOptions.t_to_js x831)|])
        let (__promisify__ :
          command:string ->
            ?options:(Node_fs.Fs.BaseEncodingOptions.t, ExecOptions.t)
              intersection2 or_null ->
              unit -> AnonymousInterface4.t PromiseWithChild.t)
          =
          fun ~command:(x833 : string) ->
            fun
              ?options:(x834 :
                         (Node_fs.Fs.BaseEncodingOptions.t, ExecOptions.t)
                           intersection2 or_null option)
              ->
              fun () ->
                PromiseWithChild.t_of_js AnonymousInterface4.t_of_js
                  (let x840 = Ojs.get_prop_ascii Import.child_process "exec" in
                   Ojs.call (Ojs.get_prop_ascii x840 "__promisify__") "apply"
                     [|x840;((let x835 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x835 "push"
                                   [|(Ojs.string_to_js x833)|]);
                              (match x834 with
                               | Some x836 ->
                                   ignore
                                     (Ojs.call x835 "push"
                                        [|(or_null_to_js
                                             (fun
                                                (x837 :
                                                  (Node_fs.Fs.BaseEncodingOptions.t,
                                                    ExecOptions.t)
                                                    intersection2)
                                                ->
                                                intersection2_to_js
                                                  Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                  ExecOptions.t_to_js x837)
                                             x836)|])
                               | None -> ());
                              x835))|])
      end
    module ExecFileOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x843 : Ojs.t) -> x843
        and t_to_js : t -> Ojs.t = fun (x842 : Ojs.t) -> x842
        let (get_max_buffer : t -> int) =
          fun (x844 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x844) "maxBuffer")
        let (set_max_buffer : t -> int -> unit) =
          fun (x845 : t) ->
            fun (x846 : int) ->
              Ojs.set_prop_ascii (t_to_js x845) "maxBuffer"
                (Ojs.int_to_js x846)
        let (get_kill_signal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x847 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x847) "killSignal")
        let (set_kill_signal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x849 : t) ->
            fun (x850 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x849) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x850)
        let (get_windows_verbatim_arguments : t -> bool) =
          fun (x852 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x852) "windowsVerbatimArguments")
        let (set_windows_verbatim_arguments : t -> bool -> unit) =
          fun (x853 : t) ->
            fun (x854 : bool) ->
              Ojs.set_prop_ascii (t_to_js x853) "windowsVerbatimArguments"
                (Ojs.bool_to_js x854)
        let (get_shell : t -> bool or_string) =
          fun (x855 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x855) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x857 : t) ->
            fun (x858 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x857) "shell"
                (or_string_to_js Ojs.bool_to_js x858)
        let (cast : t -> CommonOptions.t) =
          fun (x860 : t) -> CommonOptions.t_of_js (t_to_js x860)
      end
    module ExecFileOptionsWithStringEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x862 : Ojs.t) -> x862
        and t_to_js : t -> Ojs.t = fun (x861 : Ojs.t) -> x861
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x863 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x863) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x864 : t) ->
            fun (x865 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x864) "encoding"
                (BufferEncoding.t_to_js x865)
        let (cast : t -> ExecFileOptions.t) =
          fun (x866 : t) -> ExecFileOptions.t_of_js (t_to_js x866)
      end
    module ExecFileOptionsWithBufferEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x868 : Ojs.t) -> x868
        and t_to_js : t -> Ojs.t = fun (x867 : Ojs.t) -> x867
        let (get_encoding : t -> [ `buffer ] or_null) =
          fun (x869 : t) ->
            or_null_of_js
              (fun (x870 : Ojs.t) ->
                 let x871 = x870 in
                 match Ojs.string_of_js x871 with
                 | "buffer" -> `buffer
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x869) "encoding")
        let (set_encoding : t -> [ `buffer ] or_null -> unit) =
          fun (x872 : t) ->
            fun (x873 : [ `buffer ] or_null) ->
              Ojs.set_prop_ascii (t_to_js x872) "encoding"
                (or_null_to_js
                   (fun (x874 : [ `buffer ]) ->
                      match x874 with | `buffer -> Ojs.string_to_js "buffer")
                   x873)
        let (cast : t -> ExecFileOptions.t) =
          fun (x875 : t) -> ExecFileOptions.t_of_js (t_to_js x875)
      end
    module ExecFileOptionsWithOtherEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x877 : Ojs.t) -> x877
        and t_to_js : t -> Ojs.t = fun (x876 : Ojs.t) -> x876
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x878 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x878) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x879 : t) ->
            fun (x880 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x879) "encoding"
                (BufferEncoding.t_to_js x880)
        let (cast : t -> ExecFileOptions.t) =
          fun (x881 : t) -> ExecFileOptions.t_of_js (t_to_js x881)
      end
    module ExecFileException =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x883 : Ojs.t) -> x883
        and t_to_js : t -> Ojs.t = fun (x882 : Ojs.t) -> x882
      end
    let (exec_file : file:string -> ChildProcess.t) =
      fun ~file:(x884 : string) ->
        ChildProcess.t_of_js
          (Ojs.call Import.child_process "execFile"
             [|(Ojs.string_to_js x884)|])
    let (exec_file :
      file:string ->
        options:(Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
          intersection2 or_null_or_undefined -> ChildProcess.t)
      =
      fun ~file:(x885 : string) ->
        fun
          ~options:(x886 :
                     (Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
                       intersection2 or_null_or_undefined)
          ->
          ChildProcess.t_of_js
            (Ojs.call Import.child_process "execFile"
               [|(Ojs.string_to_js x885);(or_null_or_undefined_to_js
                                            (fun
                                               (x887 :
                                                 (Node_fs.Fs.BaseEncodingOptions.t,
                                                   ExecFileOptions.t)
                                                   intersection2)
                                               ->
                                               intersection2_to_js
                                                 Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                 ExecFileOptions.t_to_js x887)
                                            x886)|])
    let (exec_file :
      file:string -> ?args:string list or_null -> unit -> ChildProcess.t) =
      fun ~file:(x890 : string) ->
        fun ?args:(x891 : string list or_null option) ->
          fun () ->
            ChildProcess.t_of_js
              (let x896 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x896 "execFile") "apply"
                 [|x896;((let x892 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x892 "push" [|(Ojs.string_to_js x890)|]);
                          (match x891 with
                           | Some x893 ->
                               ignore
                                 (Ojs.call x892 "push"
                                    [|(or_null_to_js
                                         (fun (x894 : string list) ->
                                            Ojs.list_to_js Ojs.string_to_js
                                              x894) x893)|])
                           | None -> ());
                          x892))|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          options:(Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
            intersection2 or_null_or_undefined -> ChildProcess.t)
      =
      fun ~file:(x897 : string) ->
        fun ~args:(x898 : string list or_null_or_undefined) ->
          fun
            ~options:(x901 :
                       (Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
                         intersection2 or_null_or_undefined)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x897);(or_null_or_undefined_to_js
                                              (fun (x899 : string list) ->
                                                 Ojs.list_to_js
                                                   Ojs.string_to_js x899)
                                              x898);(or_null_or_undefined_to_js
                                                       (fun
                                                          (x902 :
                                                            (Node_fs.Fs.BaseEncodingOptions.t,
                                                              ExecFileOptions.t)
                                                              intersection2)
                                                          ->
                                                          intersection2_to_js
                                                            Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                            ExecFileOptions.t_to_js
                                                            x902) x901)|])
    let (exec_file :
      file:string ->
        callback:(error:ExecFileException.t or_null ->
                    stdout:string -> stderr:string -> unit)
          -> ChildProcess.t)
      =
      fun ~file:(x905 : string) ->
        fun
          ~callback:(x906 :
                      error:ExecFileException.t or_null ->
                        stdout:string -> stderr:string -> unit)
          ->
          ChildProcess.t_of_js
            (Ojs.call Import.child_process "execFile"
               [|(Ojs.string_to_js x905);(Ojs.fun_to_js 3
                                            (fun (x907 : Ojs.t) ->
                                               fun (x909 : Ojs.t) ->
                                                 fun (x910 : Ojs.t) ->
                                                   x906
                                                     ~error:(or_null_of_js
                                                               ExecFileException.t_of_js
                                                               x907)
                                                     ~stdout:(Ojs.string_of_js
                                                                x909)
                                                     ~stderr:(Ojs.string_of_js
                                                                x910)))|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          callback:(error:ExecFileException.t or_null ->
                      stdout:string -> stderr:string -> unit)
            -> ChildProcess.t)
      =
      fun ~file:(x911 : string) ->
        fun ~args:(x912 : string list or_null_or_undefined) ->
          fun
            ~callback:(x915 :
                        error:ExecFileException.t or_null ->
                          stdout:string -> stderr:string -> unit)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x911);(or_null_or_undefined_to_js
                                              (fun (x913 : string list) ->
                                                 Ojs.list_to_js
                                                   Ojs.string_to_js x913)
                                              x912);(Ojs.fun_to_js 3
                                                       (fun (x916 : Ojs.t) ->
                                                          fun (x918 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x919 : Ojs.t)
                                                              ->
                                                              x915
                                                                ~error:(
                                                                or_null_of_js
                                                                  ExecFileException.t_of_js
                                                                  x916)
                                                                ~stdout:(
                                                                Ojs.string_of_js
                                                                  x918)
                                                                ~stderr:(
                                                                Ojs.string_of_js
                                                                  x919)))|])
    let (exec_file :
      file:string ->
        options:ExecFileOptionsWithBufferEncoding.t ->
          callback:(error:ExecFileException.t or_null ->
                      stdout:Buffer.t -> stderr:Buffer.t -> unit)
            -> ChildProcess.t)
      =
      fun ~file:(x920 : string) ->
        fun ~options:(x921 : ExecFileOptionsWithBufferEncoding.t) ->
          fun
            ~callback:(x922 :
                        error:ExecFileException.t or_null ->
                          stdout:Buffer.t -> stderr:Buffer.t -> unit)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x920);(ExecFileOptionsWithBufferEncoding.t_to_js
                                              x921);(Ojs.fun_to_js 3
                                                       (fun (x923 : Ojs.t) ->
                                                          fun (x925 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x926 : Ojs.t)
                                                              ->
                                                              x922
                                                                ~error:(
                                                                or_null_of_js
                                                                  ExecFileException.t_of_js
                                                                  x923)
                                                                ~stdout:(
                                                                Buffer.t_of_js
                                                                  x925)
                                                                ~stderr:(
                                                                Buffer.t_of_js
                                                                  x926)))|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          options:ExecFileOptionsWithBufferEncoding.t ->
            callback:(error:ExecFileException.t or_null ->
                        stdout:Buffer.t -> stderr:Buffer.t -> unit)
              -> ChildProcess.t)
      =
      fun ~file:(x927 : string) ->
        fun ~args:(x928 : string list or_null_or_undefined) ->
          fun ~options:(x931 : ExecFileOptionsWithBufferEncoding.t) ->
            fun
              ~callback:(x932 :
                          error:ExecFileException.t or_null ->
                            stdout:Buffer.t -> stderr:Buffer.t -> unit)
              ->
              ChildProcess.t_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x927);(or_null_or_undefined_to_js
                                                (fun (x929 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x929)
                                                x928);(ExecFileOptionsWithBufferEncoding.t_to_js
                                                         x931);(Ojs.fun_to_js
                                                                  3
                                                                  (fun
                                                                    (x933 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x935 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x936 :
                                                                    Ojs.t) ->
                                                                    x932
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    ExecFileException.t_of_js
                                                                    x933)
                                                                    ~stdout:(
                                                                    Buffer.t_of_js
                                                                    x935)
                                                                    ~stderr:(
                                                                    Buffer.t_of_js
                                                                    x936)))|])
    let (exec_file :
      file:string ->
        options:ExecFileOptionsWithStringEncoding.t ->
          callback:(error:ExecFileException.t or_null ->
                      stdout:string -> stderr:string -> unit)
            -> ChildProcess.t)
      =
      fun ~file:(x937 : string) ->
        fun ~options:(x938 : ExecFileOptionsWithStringEncoding.t) ->
          fun
            ~callback:(x939 :
                        error:ExecFileException.t or_null ->
                          stdout:string -> stderr:string -> unit)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x937);(ExecFileOptionsWithStringEncoding.t_to_js
                                              x938);(Ojs.fun_to_js 3
                                                       (fun (x940 : Ojs.t) ->
                                                          fun (x942 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x943 : Ojs.t)
                                                              ->
                                                              x939
                                                                ~error:(
                                                                or_null_of_js
                                                                  ExecFileException.t_of_js
                                                                  x940)
                                                                ~stdout:(
                                                                Ojs.string_of_js
                                                                  x942)
                                                                ~stderr:(
                                                                Ojs.string_of_js
                                                                  x943)))|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          options:ExecFileOptionsWithStringEncoding.t ->
            callback:(error:ExecFileException.t or_null ->
                        stdout:string -> stderr:string -> unit)
              -> ChildProcess.t)
      =
      fun ~file:(x944 : string) ->
        fun ~args:(x945 : string list or_null_or_undefined) ->
          fun ~options:(x948 : ExecFileOptionsWithStringEncoding.t) ->
            fun
              ~callback:(x949 :
                          error:ExecFileException.t or_null ->
                            stdout:string -> stderr:string -> unit)
              ->
              ChildProcess.t_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x944);(or_null_or_undefined_to_js
                                                (fun (x946 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x946)
                                                x945);(ExecFileOptionsWithStringEncoding.t_to_js
                                                         x948);(Ojs.fun_to_js
                                                                  3
                                                                  (fun
                                                                    (x950 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x952 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x953 :
                                                                    Ojs.t) ->
                                                                    x949
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    ExecFileException.t_of_js
                                                                    x950)
                                                                    ~stdout:(
                                                                    Ojs.string_of_js
                                                                    x952)
                                                                    ~stderr:(
                                                                    Ojs.string_of_js
                                                                    x953)))|])
    let (exec_file :
      file:string ->
        options:ExecFileOptionsWithOtherEncoding.t ->
          callback:(error:ExecFileException.t or_null ->
                      stdout:Buffer.t or_string ->
                        stderr:Buffer.t or_string -> unit)
            -> ChildProcess.t)
      =
      fun ~file:(x954 : string) ->
        fun ~options:(x955 : ExecFileOptionsWithOtherEncoding.t) ->
          fun
            ~callback:(x956 :
                        error:ExecFileException.t or_null ->
                          stdout:Buffer.t or_string ->
                            stderr:Buffer.t or_string -> unit)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x954);(ExecFileOptionsWithOtherEncoding.t_to_js
                                              x955);(Ojs.fun_to_js 3
                                                       (fun (x957 : Ojs.t) ->
                                                          fun (x959 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x961 : Ojs.t)
                                                              ->
                                                              x956
                                                                ~error:(
                                                                or_null_of_js
                                                                  ExecFileException.t_of_js
                                                                  x957)
                                                                ~stdout:(
                                                                or_string_of_js
                                                                  Buffer.t_of_js
                                                                  x959)
                                                                ~stderr:(
                                                                or_string_of_js
                                                                  Buffer.t_of_js
                                                                  x961)))|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          options:ExecFileOptionsWithOtherEncoding.t ->
            callback:(error:ExecFileException.t or_null ->
                        stdout:Buffer.t or_string ->
                          stderr:Buffer.t or_string -> unit)
              -> ChildProcess.t)
      =
      fun ~file:(x963 : string) ->
        fun ~args:(x964 : string list or_null_or_undefined) ->
          fun ~options:(x967 : ExecFileOptionsWithOtherEncoding.t) ->
            fun
              ~callback:(x968 :
                          error:ExecFileException.t or_null ->
                            stdout:Buffer.t or_string ->
                              stderr:Buffer.t or_string -> unit)
              ->
              ChildProcess.t_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x963);(or_null_or_undefined_to_js
                                                (fun (x965 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x965)
                                                x964);(ExecFileOptionsWithOtherEncoding.t_to_js
                                                         x967);(Ojs.fun_to_js
                                                                  3
                                                                  (fun
                                                                    (x969 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x971 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x973 :
                                                                    Ojs.t) ->
                                                                    x968
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    ExecFileException.t_of_js
                                                                    x969)
                                                                    ~stdout:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x971)
                                                                    ~stderr:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x973)))|])
    let (exec_file :
      file:string ->
        options:ExecFileOptions.t ->
          callback:(error:ExecFileException.t or_null ->
                      stdout:string -> stderr:string -> unit)
            -> ChildProcess.t)
      =
      fun ~file:(x975 : string) ->
        fun ~options:(x976 : ExecFileOptions.t) ->
          fun
            ~callback:(x977 :
                        error:ExecFileException.t or_null ->
                          stdout:string -> stderr:string -> unit)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x975);(ExecFileOptions.t_to_js x976);(
                   Ojs.fun_to_js 3
                     (fun (x978 : Ojs.t) ->
                        fun (x980 : Ojs.t) ->
                          fun (x981 : Ojs.t) ->
                            x977
                              ~error:(or_null_of_js ExecFileException.t_of_js
                                        x978) ~stdout:(Ojs.string_of_js x980)
                              ~stderr:(Ojs.string_of_js x981)))|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          options:ExecFileOptions.t ->
            callback:(error:ExecFileException.t or_null ->
                        stdout:string -> stderr:string -> unit)
              -> ChildProcess.t)
      =
      fun ~file:(x982 : string) ->
        fun ~args:(x983 : string list or_null_or_undefined) ->
          fun ~options:(x986 : ExecFileOptions.t) ->
            fun
              ~callback:(x987 :
                          error:ExecFileException.t or_null ->
                            stdout:string -> stderr:string -> unit)
              ->
              ChildProcess.t_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x982);(or_null_or_undefined_to_js
                                                (fun (x984 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x984)
                                                x983);(ExecFileOptions.t_to_js
                                                         x986);(Ojs.fun_to_js
                                                                  3
                                                                  (fun
                                                                    (x988 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x990 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x991 :
                                                                    Ojs.t) ->
                                                                    x987
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    ExecFileException.t_of_js
                                                                    x988)
                                                                    ~stdout:(
                                                                    Ojs.string_of_js
                                                                    x990)
                                                                    ~stderr:(
                                                                    Ojs.string_of_js
                                                                    x991)))|])
    let (exec_file :
      file:string ->
        options:(Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
          intersection2 or_null_or_undefined ->
          callback:(error:ExecFileException.t or_null ->
                      stdout:Buffer.t or_string ->
                        stderr:Buffer.t or_string -> unit)
            or_null_or_undefined -> ChildProcess.t)
      =
      fun ~file:(x992 : string) ->
        fun
          ~options:(x993 :
                     (Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
                       intersection2 or_null_or_undefined)
          ->
          fun
            ~callback:(x997 :
                        (error:ExecFileException.t or_null ->
                           stdout:Buffer.t or_string ->
                             stderr:Buffer.t or_string -> unit)
                          or_null_or_undefined)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x992);(or_null_or_undefined_to_js
                                              (fun
                                                 (x994 :
                                                   (Node_fs.Fs.BaseEncodingOptions.t,
                                                     ExecFileOptions.t)
                                                     intersection2)
                                                 ->
                                                 intersection2_to_js
                                                   Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                   ExecFileOptions.t_to_js
                                                   x994) x993);(or_null_or_undefined_to_js
                                                                  (fun
                                                                    (x998 :
                                                                    error:ExecFileException.t
                                                                    or_null
                                                                    ->
                                                                    stdout:Buffer.t
                                                                    or_string
                                                                    ->
                                                                    stderr:Buffer.t
                                                                    or_string
                                                                    -> 
                                                                    unit) ->
                                                                    Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x999 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1001 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1003 :
                                                                    Ojs.t) ->
                                                                    x998
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    ExecFileException.t_of_js
                                                                    x999)
                                                                    ~stdout:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1001)
                                                                    ~stderr:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1003)))
                                                                  x997)|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          options:(Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
            intersection2 or_null_or_undefined ->
            callback:(error:ExecFileException.t or_null ->
                        stdout:Buffer.t or_string ->
                          stderr:Buffer.t or_string -> unit)
              or_null_or_undefined -> ChildProcess.t)
      =
      fun ~file:(x1005 : string) ->
        fun ~args:(x1006 : string list or_null_or_undefined) ->
          fun
            ~options:(x1009 :
                       (Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
                         intersection2 or_null_or_undefined)
            ->
            fun
              ~callback:(x1013 :
                          (error:ExecFileException.t or_null ->
                             stdout:Buffer.t or_string ->
                               stderr:Buffer.t or_string -> unit)
                            or_null_or_undefined)
              ->
              ChildProcess.t_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x1005);(or_null_or_undefined_to_js
                                                 (fun (x1007 : string list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Ojs.string_to_js x1007)
                                                 x1006);(or_null_or_undefined_to_js
                                                           (fun
                                                              (x1010 :
                                                                (Node_fs.Fs.BaseEncodingOptions.t,
                                                                  ExecFileOptions.t)
                                                                  intersection2)
                                                              ->
                                                              intersection2_to_js
                                                                Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                                ExecFileOptions.t_to_js
                                                                x1010) x1009);(
                     or_null_or_undefined_to_js
                       (fun
                          (x1014 :
                            error:ExecFileException.t or_null ->
                              stdout:Buffer.t or_string ->
                                stderr:Buffer.t or_string -> unit)
                          ->
                          Ojs.fun_to_js 3
                            (fun (x1015 : Ojs.t) ->
                               fun (x1017 : Ojs.t) ->
                                 fun (x1019 : Ojs.t) ->
                                   x1014
                                     ~error:(or_null_of_js
                                               ExecFileException.t_of_js
                                               x1015)
                                     ~stdout:(or_string_of_js Buffer.t_of_js
                                                x1017)
                                     ~stderr:(or_string_of_js Buffer.t_of_js
                                                x1019))) x1013)|])
    module ExecFile =
      struct
        let (__promisify__ :
          file:string -> AnonymousInterface3.t PromiseWithChild.t) =
          fun ~file:(x1021 : string) ->
            PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.child_process "execFile")
                 "__promisify__" [|(Ojs.string_to_js x1021)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~file:(x1023 : string) ->
            fun ~args:(x1024 : string list or_null_or_undefined) ->
              PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1023);(or_null_or_undefined_to_js
                                                 (fun (x1025 : string list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Ojs.string_to_js x1025)
                                                 x1024)|])
        let (__promisify__ :
          file:string ->
            options:ExecFileOptionsWithBufferEncoding.t ->
              AnonymousInterface2.t PromiseWithChild.t)
          =
          fun ~file:(x1028 : string) ->
            fun ~options:(x1029 : ExecFileOptionsWithBufferEncoding.t) ->
              PromiseWithChild.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1028);(ExecFileOptionsWithBufferEncoding.t_to_js
                                                 x1029)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:ExecFileOptionsWithBufferEncoding.t ->
                AnonymousInterface2.t PromiseWithChild.t)
          =
          fun ~file:(x1031 : string) ->
            fun ~args:(x1032 : string list or_null_or_undefined) ->
              fun ~options:(x1035 : ExecFileOptionsWithBufferEncoding.t) ->
                PromiseWithChild.t_of_js AnonymousInterface2.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1031);(or_null_or_undefined_to_js
                                                   (fun (x1033 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1033) x1032);(
                       ExecFileOptionsWithBufferEncoding.t_to_js x1035)|])
        let (__promisify__ :
          file:string ->
            options:ExecFileOptionsWithStringEncoding.t ->
              AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~file:(x1037 : string) ->
            fun ~options:(x1038 : ExecFileOptionsWithStringEncoding.t) ->
              PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1037);(ExecFileOptionsWithStringEncoding.t_to_js
                                                 x1038)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:ExecFileOptionsWithStringEncoding.t ->
                AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~file:(x1040 : string) ->
            fun ~args:(x1041 : string list or_null_or_undefined) ->
              fun ~options:(x1044 : ExecFileOptionsWithStringEncoding.t) ->
                PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1040);(or_null_or_undefined_to_js
                                                   (fun (x1042 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1042) x1041);(
                       ExecFileOptionsWithStringEncoding.t_to_js x1044)|])
        let (__promisify__ :
          file:string ->
            options:ExecFileOptionsWithOtherEncoding.t ->
              AnonymousInterface4.t PromiseWithChild.t)
          =
          fun ~file:(x1046 : string) ->
            fun ~options:(x1047 : ExecFileOptionsWithOtherEncoding.t) ->
              PromiseWithChild.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1046);(ExecFileOptionsWithOtherEncoding.t_to_js
                                                 x1047)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:ExecFileOptionsWithOtherEncoding.t ->
                AnonymousInterface4.t PromiseWithChild.t)
          =
          fun ~file:(x1049 : string) ->
            fun ~args:(x1050 : string list or_null_or_undefined) ->
              fun ~options:(x1053 : ExecFileOptionsWithOtherEncoding.t) ->
                PromiseWithChild.t_of_js AnonymousInterface4.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1049);(or_null_or_undefined_to_js
                                                   (fun (x1051 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1051) x1050);(
                       ExecFileOptionsWithOtherEncoding.t_to_js x1053)|])
        let (__promisify__ :
          file:string ->
            options:ExecFileOptions.t ->
              AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~file:(x1055 : string) ->
            fun ~options:(x1056 : ExecFileOptions.t) ->
              PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1055);(ExecFileOptions.t_to_js x1056)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:ExecFileOptions.t ->
                AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~file:(x1058 : string) ->
            fun ~args:(x1059 : string list or_null_or_undefined) ->
              fun ~options:(x1062 : ExecFileOptions.t) ->
                PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1058);(or_null_or_undefined_to_js
                                                   (fun (x1060 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1060) x1059);(
                       ExecFileOptions.t_to_js x1062)|])
        let (__promisify__ :
          file:string ->
            options:(Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
              intersection2 or_null_or_undefined ->
              AnonymousInterface4.t PromiseWithChild.t)
          =
          fun ~file:(x1064 : string) ->
            fun
              ~options:(x1065 :
                         (Node_fs.Fs.BaseEncodingOptions.t,
                           ExecFileOptions.t) intersection2
                           or_null_or_undefined)
              ->
              PromiseWithChild.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1064);(or_null_or_undefined_to_js
                                                 (fun
                                                    (x1066 :
                                                      (Node_fs.Fs.BaseEncodingOptions.t,
                                                        ExecFileOptions.t)
                                                        intersection2)
                                                    ->
                                                    intersection2_to_js
                                                      Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                      ExecFileOptions.t_to_js
                                                      x1066) x1065)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:(Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
                intersection2 or_null_or_undefined ->
                AnonymousInterface4.t PromiseWithChild.t)
          =
          fun ~file:(x1070 : string) ->
            fun ~args:(x1071 : string list or_null_or_undefined) ->
              fun
                ~options:(x1074 :
                           (Node_fs.Fs.BaseEncodingOptions.t,
                             ExecFileOptions.t) intersection2
                             or_null_or_undefined)
                ->
                PromiseWithChild.t_of_js AnonymousInterface4.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1070);(or_null_or_undefined_to_js
                                                   (fun (x1072 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1072) x1071);(
                       or_null_or_undefined_to_js
                         (fun
                            (x1075 :
                              (Node_fs.Fs.BaseEncodingOptions.t,
                                ExecFileOptions.t) intersection2)
                            ->
                            intersection2_to_js
                              Node_fs.Fs.BaseEncodingOptions.t_to_js
                              ExecFileOptions.t_to_js x1075) x1074)|])
      end
    module ForkOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1080 : Ojs.t) -> x1080
        and t_to_js : t -> Ojs.t = fun (x1079 : Ojs.t) -> x1079
        let (get_exec_path : t -> string) =
          fun (x1081 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1081) "execPath")
        let (set_exec_path : t -> string -> unit) =
          fun (x1082 : t) ->
            fun (x1083 : string) ->
              Ojs.set_prop_ascii (t_to_js x1082) "execPath"
                (Ojs.string_to_js x1083)
        let (get_exec_argv : t -> string list) =
          fun (x1084 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1084) "execArgv")
        let (set_exec_argv : t -> string list -> unit) =
          fun (x1086 : t) ->
            fun (x1087 : string list) ->
              Ojs.set_prop_ascii (t_to_js x1086) "execArgv"
                (Ojs.list_to_js Ojs.string_to_js x1087)
        let (get_silent : t -> bool) =
          fun (x1089 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1089) "silent")
        let (set_silent : t -> bool -> unit) =
          fun (x1090 : t) ->
            fun (x1091 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1090) "silent"
                (Ojs.bool_to_js x1091)
        let (get_stdio : t -> StdioOptions.t) =
          fun (x1092 : t) ->
            StdioOptions.t_of_js (Ojs.get_prop_ascii (t_to_js x1092) "stdio")
        let (set_stdio : t -> StdioOptions.t -> unit) =
          fun (x1093 : t) ->
            fun (x1094 : StdioOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x1093) "stdio"
                (StdioOptions.t_to_js x1094)
        let (get_detached : t -> bool) =
          fun (x1095 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1095) "detached")
        let (set_detached : t -> bool -> unit) =
          fun (x1096 : t) ->
            fun (x1097 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1096) "detached"
                (Ojs.bool_to_js x1097)
        let (get_windows_verbatim_arguments : t -> bool) =
          fun (x1098 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1098) "windowsVerbatimArguments")
        let (set_windows_verbatim_arguments : t -> bool -> unit) =
          fun (x1099 : t) ->
            fun (x1100 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1099) "windowsVerbatimArguments"
                (Ojs.bool_to_js x1100)
        let (cast : t -> ProcessEnvOptions.t) =
          fun (x1101 : t) -> ProcessEnvOptions.t_of_js (t_to_js x1101)
        let (cast' : t -> MessagingOptions.t) =
          fun (x1102 : t) -> MessagingOptions.t_of_js (t_to_js x1102)
      end
    let (fork :
      module_path:string -> ?options:ForkOptions.t -> unit -> ChildProcess.t)
      =
      fun ~module_path:(x1103 : string) ->
        fun ?options:(x1104 : ForkOptions.t option) ->
          fun () ->
            ChildProcess.t_of_js
              (let x1107 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1107 "fork") "apply"
                 [|x1107;((let x1105 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1105 "push"
                                [|(Ojs.string_to_js x1103)|]);
                           (match x1104 with
                            | Some x1106 ->
                                ignore
                                  (Ojs.call x1105 "push"
                                     [|(ForkOptions.t_to_js x1106)|])
                            | None -> ());
                           x1105))|])
    let (fork :
      module_path:string ->
        ?args:string list -> ?options:ForkOptions.t -> unit -> ChildProcess.t)
      =
      fun ~module_path:(x1108 : string) ->
        fun ?args:(x1109 : string list option) ->
          fun ?options:(x1110 : ForkOptions.t option) ->
            fun () ->
              ChildProcess.t_of_js
                (let x1115 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1115 "fork") "apply"
                   [|x1115;((let x1111 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1111 "push"
                                  [|(Ojs.string_to_js x1108)|]);
                             (match x1109 with
                              | Some x1113 ->
                                  ignore
                                    (Ojs.call x1111 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1113)|])
                              | None -> ());
                             (match x1110 with
                              | Some x1112 ->
                                  ignore
                                    (Ojs.call x1111 "push"
                                       [|(ForkOptions.t_to_js x1112)|])
                              | None -> ());
                             x1111))|])
    module SpawnSyncOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1117 : Ojs.t) -> x1117
        and t_to_js : t -> Ojs.t = fun (x1116 : Ojs.t) -> x1116
        let (get_input : t -> ArrayBufferView.t or_string) =
          fun (x1118 : t) ->
            or_string_of_js ArrayBufferView.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1118) "input")
        let (set_input : t -> ArrayBufferView.t or_string -> unit) =
          fun (x1120 : t) ->
            fun (x1121 : ArrayBufferView.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1120) "input"
                (or_string_to_js ArrayBufferView.t_to_js x1121)
        let (get_kill_signal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x1123 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1123) "killSignal")
        let (set_kill_signal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x1125 : t) ->
            fun (x1126 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x1125) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x1126)
        let (get_max_buffer : t -> int) =
          fun (x1128 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1128) "maxBuffer")
        let (set_max_buffer : t -> int -> unit) =
          fun (x1129 : t) ->
            fun (x1130 : int) ->
              Ojs.set_prop_ascii (t_to_js x1129) "maxBuffer"
                (Ojs.int_to_js x1130)
        let (get_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null) =
          fun (x1131 : t) ->
            or_null_of_js
              (fun (x1132 : Ojs.t) ->
                 or_enum_of_js BufferEncoding.t_of_js
                   (fun (x1134 : Ojs.t) ->
                      let x1135 = x1134 in
                      match Ojs.string_of_js x1135 with
                      | "buffer" -> `buffer
                      | _ -> assert false) x1132)
              (Ojs.get_prop_ascii (t_to_js x1131) "encoding")
        let (set_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null -> unit) =
          fun (x1136 : t) ->
            fun (x1137 : (BufferEncoding.t, [ `buffer ]) or_enum or_null) ->
              Ojs.set_prop_ascii (t_to_js x1136) "encoding"
                (or_null_to_js
                   (fun (x1138 : (BufferEncoding.t, [ `buffer ]) or_enum) ->
                      or_enum_to_js BufferEncoding.t_to_js
                        (fun (x1140 : [ `buffer ]) ->
                           match x1140 with
                           | `buffer -> Ojs.string_to_js "buffer") x1138)
                   x1137)
        let (cast : t -> CommonSpawnOptions.t) =
          fun (x1141 : t) -> CommonSpawnOptions.t_of_js (t_to_js x1141)
      end
    module SpawnSyncOptionsWithStringEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1143 : Ojs.t) -> x1143
        and t_to_js : t -> Ojs.t = fun (x1142 : Ojs.t) -> x1142
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1144 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1144) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1145 : t) ->
            fun (x1146 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1145) "encoding"
                (BufferEncoding.t_to_js x1146)
        let (cast : t -> SpawnSyncOptions.t) =
          fun (x1147 : t) -> SpawnSyncOptions.t_of_js (t_to_js x1147)
      end
    module SpawnSyncOptionsWithBufferEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1149 : Ojs.t) -> x1149
        and t_to_js : t -> Ojs.t = fun (x1148 : Ojs.t) -> x1148
        let (get_encoding : t -> [ `buffer ] or_null) =
          fun (x1150 : t) ->
            or_null_of_js
              (fun (x1151 : Ojs.t) ->
                 let x1152 = x1151 in
                 match Ojs.string_of_js x1152 with
                 | "buffer" -> `buffer
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x1150) "encoding")
        let (set_encoding : t -> [ `buffer ] or_null -> unit) =
          fun (x1153 : t) ->
            fun (x1154 : [ `buffer ] or_null) ->
              Ojs.set_prop_ascii (t_to_js x1153) "encoding"
                (or_null_to_js
                   (fun (x1155 : [ `buffer ]) ->
                      match x1155 with | `buffer -> Ojs.string_to_js "buffer")
                   x1154)
        let (cast : t -> SpawnSyncOptions.t) =
          fun (x1156 : t) -> SpawnSyncOptions.t_of_js (t_to_js x1156)
      end
    module SpawnSyncReturns =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1158 : Ojs.t) -> x1158
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1157 : Ojs.t) -> x1157
        let (get_pid : 'T t -> int) =
          fun (x1159 : 'T t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1159) "pid")
        let (set_pid : 'T t -> int -> unit) =
          fun (x1161 : 'T t) ->
            fun (x1162 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1161) "pid"
                (Ojs.int_to_js x1162)
        let (get_output : 'T t -> string list) =
          fun (x1164 : 'T t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1164) "output")
        let (set_output : 'T t -> string list -> unit) =
          fun (x1167 : 'T t) ->
            fun (x1168 : string list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1167) "output"
                (Ojs.list_to_js Ojs.string_to_js x1168)
        let (get_stdout : 'T t -> 'T) =
          fun (x1171 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x1171) "stdout")
        let (set_stdout : 'T t -> 'T -> unit) =
          fun (x1173 : 'T t) ->
            fun (x1174 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1173) "stdout"
                (Obj.magic x1174)
        let (get_stderr : 'T t -> 'T) =
          fun (x1176 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x1176) "stderr")
        let (set_stderr : 'T t -> 'T -> unit) =
          fun (x1178 : 'T t) ->
            fun (x1179 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1178) "stderr"
                (Obj.magic x1179)
        let (get_status : 'T t -> int or_null) =
          fun (x1181 : 'T t) ->
            or_null_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1181) "status")
        let (set_status : 'T t -> int or_null -> unit) =
          fun (x1184 : 'T t) ->
            fun (x1185 : int or_null) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1184) "status"
                (or_null_to_js Ojs.int_to_js x1185)
        let (get_signal : 'T t -> Node_process.Process.Signals.t or_null) =
          fun (x1188 : 'T t) ->
            or_null_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1188) "signal")
        let (set_signal :
          'T t -> Node_process.Process.Signals.t or_null -> unit) =
          fun (x1191 : 'T t) ->
            fun (x1192 : Node_process.Process.Signals.t or_null) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1191) "signal"
                (or_null_to_js Node_process.Process.Signals.t_to_js x1192)
        let (get_error : 'T t -> Error.t) =
          fun (x1195 : 'T t) ->
            Error.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1195) "error")
        let (set_error : 'T t -> Error.t -> unit) =
          fun (x1197 : 'T t) ->
            fun (x1198 : Error.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1197) "error"
                (Error.t_to_js x1198)
      end
    let (spawn'Sync : command:string -> Buffer.t SpawnSyncReturns.t) =
      fun ~command:(x1200 : string) ->
        SpawnSyncReturns.t_of_js Buffer.t_of_js
          (Ojs.call Import.child_process "spawnSync"
             [|(Ojs.string_to_js x1200)|])
    let (spawn'Sync :
      command:string ->
        ?options:SpawnSyncOptionsWithStringEncoding.t ->
          unit -> string SpawnSyncReturns.t)
      =
      fun ~command:(x1202 : string) ->
        fun ?options:(x1203 : SpawnSyncOptionsWithStringEncoding.t option) ->
          fun () ->
            SpawnSyncReturns.t_of_js Ojs.string_of_js
              (let x1206 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1206 "spawnSync") "apply"
                 [|x1206;((let x1204 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1204 "push"
                                [|(Ojs.string_to_js x1202)|]);
                           (match x1203 with
                            | Some x1205 ->
                                ignore
                                  (Ojs.call x1204 "push"
                                     [|(SpawnSyncOptionsWithStringEncoding.t_to_js
                                          x1205)|])
                            | None -> ());
                           x1204))|])
    let (spawn'Sync :
      command:string ->
        ?options:SpawnSyncOptionsWithBufferEncoding.t ->
          unit -> Buffer.t SpawnSyncReturns.t)
      =
      fun ~command:(x1208 : string) ->
        fun ?options:(x1209 : SpawnSyncOptionsWithBufferEncoding.t option) ->
          fun () ->
            SpawnSyncReturns.t_of_js Buffer.t_of_js
              (let x1212 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1212 "spawnSync") "apply"
                 [|x1212;((let x1210 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1210 "push"
                                [|(Ojs.string_to_js x1208)|]);
                           (match x1209 with
                            | Some x1211 ->
                                ignore
                                  (Ojs.call x1210 "push"
                                     [|(SpawnSyncOptionsWithBufferEncoding.t_to_js
                                          x1211)|])
                            | None -> ());
                           x1210))|])
    let (spawn'Sync :
      command:string ->
        ?options:SpawnSyncOptions.t -> unit -> Buffer.t SpawnSyncReturns.t)
      =
      fun ~command:(x1214 : string) ->
        fun ?options:(x1215 : SpawnSyncOptions.t option) ->
          fun () ->
            SpawnSyncReturns.t_of_js Buffer.t_of_js
              (let x1218 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1218 "spawnSync") "apply"
                 [|x1218;((let x1216 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1216 "push"
                                [|(Ojs.string_to_js x1214)|]);
                           (match x1215 with
                            | Some x1217 ->
                                ignore
                                  (Ojs.call x1216 "push"
                                     [|(SpawnSyncOptions.t_to_js x1217)|])
                            | None -> ());
                           x1216))|])
    let (spawn'Sync :
      command:string ->
        ?args:string list ->
          ?options:SpawnSyncOptionsWithStringEncoding.t ->
            unit -> string SpawnSyncReturns.t)
      =
      fun ~command:(x1220 : string) ->
        fun ?args:(x1221 : string list option) ->
          fun ?options:(x1222 : SpawnSyncOptionsWithStringEncoding.t option)
            ->
            fun () ->
              SpawnSyncReturns.t_of_js Ojs.string_of_js
                (let x1227 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1227 "spawnSync") "apply"
                   [|x1227;((let x1223 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1223 "push"
                                  [|(Ojs.string_to_js x1220)|]);
                             (match x1221 with
                              | Some x1225 ->
                                  ignore
                                    (Ojs.call x1223 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1225)|])
                              | None -> ());
                             (match x1222 with
                              | Some x1224 ->
                                  ignore
                                    (Ojs.call x1223 "push"
                                       [|(SpawnSyncOptionsWithStringEncoding.t_to_js
                                            x1224)|])
                              | None -> ());
                             x1223))|])
    let (spawn'Sync :
      command:string ->
        ?args:string list ->
          ?options:SpawnSyncOptionsWithBufferEncoding.t ->
            unit -> Buffer.t SpawnSyncReturns.t)
      =
      fun ~command:(x1229 : string) ->
        fun ?args:(x1230 : string list option) ->
          fun ?options:(x1231 : SpawnSyncOptionsWithBufferEncoding.t option)
            ->
            fun () ->
              SpawnSyncReturns.t_of_js Buffer.t_of_js
                (let x1236 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1236 "spawnSync") "apply"
                   [|x1236;((let x1232 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1232 "push"
                                  [|(Ojs.string_to_js x1229)|]);
                             (match x1230 with
                              | Some x1234 ->
                                  ignore
                                    (Ojs.call x1232 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1234)|])
                              | None -> ());
                             (match x1231 with
                              | Some x1233 ->
                                  ignore
                                    (Ojs.call x1232 "push"
                                       [|(SpawnSyncOptionsWithBufferEncoding.t_to_js
                                            x1233)|])
                              | None -> ());
                             x1232))|])
    let (spawn'Sync :
      command:string ->
        ?args:string list ->
          ?options:SpawnSyncOptions.t -> unit -> Buffer.t SpawnSyncReturns.t)
      =
      fun ~command:(x1238 : string) ->
        fun ?args:(x1239 : string list option) ->
          fun ?options:(x1240 : SpawnSyncOptions.t option) ->
            fun () ->
              SpawnSyncReturns.t_of_js Buffer.t_of_js
                (let x1245 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1245 "spawnSync") "apply"
                   [|x1245;((let x1241 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1241 "push"
                                  [|(Ojs.string_to_js x1238)|]);
                             (match x1239 with
                              | Some x1243 ->
                                  ignore
                                    (Ojs.call x1241 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1243)|])
                              | None -> ());
                             (match x1240 with
                              | Some x1242 ->
                                  ignore
                                    (Ojs.call x1241 "push"
                                       [|(SpawnSyncOptions.t_to_js x1242)|])
                              | None -> ());
                             x1241))|])
    module ExecSyncOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1248 : Ojs.t) -> x1248
        and t_to_js : t -> Ojs.t = fun (x1247 : Ojs.t) -> x1247
        let (get_input : t -> Uint8Array.t or_string) =
          fun (x1249 : t) ->
            or_string_of_js Uint8Array.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1249) "input")
        let (set_input : t -> Uint8Array.t or_string -> unit) =
          fun (x1251 : t) ->
            fun (x1252 : Uint8Array.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1251) "input"
                (or_string_to_js Uint8Array.t_to_js x1252)
        let (get_stdio : t -> StdioOptions.t) =
          fun (x1254 : t) ->
            StdioOptions.t_of_js (Ojs.get_prop_ascii (t_to_js x1254) "stdio")
        let (set_stdio : t -> StdioOptions.t -> unit) =
          fun (x1255 : t) ->
            fun (x1256 : StdioOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x1255) "stdio"
                (StdioOptions.t_to_js x1256)
        let (get_shell : t -> string) =
          fun (x1257 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1257) "shell")
        let (set_shell : t -> string -> unit) =
          fun (x1258 : t) ->
            fun (x1259 : string) ->
              Ojs.set_prop_ascii (t_to_js x1258) "shell"
                (Ojs.string_to_js x1259)
        let (get_kill_signal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x1260 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1260) "killSignal")
        let (set_kill_signal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x1262 : t) ->
            fun (x1263 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x1262) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x1263)
        let (get_max_buffer : t -> int) =
          fun (x1265 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1265) "maxBuffer")
        let (set_max_buffer : t -> int -> unit) =
          fun (x1266 : t) ->
            fun (x1267 : int) ->
              Ojs.set_prop_ascii (t_to_js x1266) "maxBuffer"
                (Ojs.int_to_js x1267)
        let (get_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null) =
          fun (x1268 : t) ->
            or_null_of_js
              (fun (x1269 : Ojs.t) ->
                 or_enum_of_js BufferEncoding.t_of_js
                   (fun (x1271 : Ojs.t) ->
                      let x1272 = x1271 in
                      match Ojs.string_of_js x1272 with
                      | "buffer" -> `buffer
                      | _ -> assert false) x1269)
              (Ojs.get_prop_ascii (t_to_js x1268) "encoding")
        let (set_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null -> unit) =
          fun (x1273 : t) ->
            fun (x1274 : (BufferEncoding.t, [ `buffer ]) or_enum or_null) ->
              Ojs.set_prop_ascii (t_to_js x1273) "encoding"
                (or_null_to_js
                   (fun (x1275 : (BufferEncoding.t, [ `buffer ]) or_enum) ->
                      or_enum_to_js BufferEncoding.t_to_js
                        (fun (x1277 : [ `buffer ]) ->
                           match x1277 with
                           | `buffer -> Ojs.string_to_js "buffer") x1275)
                   x1274)
        let (cast : t -> CommonOptions.t) =
          fun (x1278 : t) -> CommonOptions.t_of_js (t_to_js x1278)
      end
    module ExecSyncOptionsWithStringEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1280 : Ojs.t) -> x1280
        and t_to_js : t -> Ojs.t = fun (x1279 : Ojs.t) -> x1279
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1281 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1281) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1282 : t) ->
            fun (x1283 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1282) "encoding"
                (BufferEncoding.t_to_js x1283)
        let (cast : t -> ExecSyncOptions.t) =
          fun (x1284 : t) -> ExecSyncOptions.t_of_js (t_to_js x1284)
      end
    module ExecSyncOptionsWithBufferEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1286 : Ojs.t) -> x1286
        and t_to_js : t -> Ojs.t = fun (x1285 : Ojs.t) -> x1285
        let (get_encoding : t -> [ `buffer ] or_null) =
          fun (x1287 : t) ->
            or_null_of_js
              (fun (x1288 : Ojs.t) ->
                 let x1289 = x1288 in
                 match Ojs.string_of_js x1289 with
                 | "buffer" -> `buffer
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x1287) "encoding")
        let (set_encoding : t -> [ `buffer ] or_null -> unit) =
          fun (x1290 : t) ->
            fun (x1291 : [ `buffer ] or_null) ->
              Ojs.set_prop_ascii (t_to_js x1290) "encoding"
                (or_null_to_js
                   (fun (x1292 : [ `buffer ]) ->
                      match x1292 with | `buffer -> Ojs.string_to_js "buffer")
                   x1291)
        let (cast : t -> ExecSyncOptions.t) =
          fun (x1293 : t) -> ExecSyncOptions.t_of_js (t_to_js x1293)
      end
    let (exec_sync : command:string -> Buffer.t) =
      fun ~command:(x1294 : string) ->
        Buffer.t_of_js
          (Ojs.call Import.child_process "execSync"
             [|(Ojs.string_to_js x1294)|])
    let (exec_sync :
      command:string ->
        ?options:ExecSyncOptionsWithStringEncoding.t -> unit -> string)
      =
      fun ~command:(x1295 : string) ->
        fun ?options:(x1296 : ExecSyncOptionsWithStringEncoding.t option) ->
          fun () ->
            Ojs.string_of_js
              (let x1299 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1299 "execSync") "apply"
                 [|x1299;((let x1297 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1297 "push"
                                [|(Ojs.string_to_js x1295)|]);
                           (match x1296 with
                            | Some x1298 ->
                                ignore
                                  (Ojs.call x1297 "push"
                                     [|(ExecSyncOptionsWithStringEncoding.t_to_js
                                          x1298)|])
                            | None -> ());
                           x1297))|])
    let (exec_sync :
      command:string ->
        ?options:ExecSyncOptionsWithBufferEncoding.t -> unit -> Buffer.t)
      =
      fun ~command:(x1300 : string) ->
        fun ?options:(x1301 : ExecSyncOptionsWithBufferEncoding.t option) ->
          fun () ->
            Buffer.t_of_js
              (let x1304 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1304 "execSync") "apply"
                 [|x1304;((let x1302 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1302 "push"
                                [|(Ojs.string_to_js x1300)|]);
                           (match x1301 with
                            | Some x1303 ->
                                ignore
                                  (Ojs.call x1302 "push"
                                     [|(ExecSyncOptionsWithBufferEncoding.t_to_js
                                          x1303)|])
                            | None -> ());
                           x1302))|])
    let (exec_sync :
      command:string -> ?options:ExecSyncOptions.t -> unit -> Buffer.t) =
      fun ~command:(x1305 : string) ->
        fun ?options:(x1306 : ExecSyncOptions.t option) ->
          fun () ->
            Buffer.t_of_js
              (let x1309 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1309 "execSync") "apply"
                 [|x1309;((let x1307 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1307 "push"
                                [|(Ojs.string_to_js x1305)|]);
                           (match x1306 with
                            | Some x1308 ->
                                ignore
                                  (Ojs.call x1307 "push"
                                     [|(ExecSyncOptions.t_to_js x1308)|])
                            | None -> ());
                           x1307))|])
    module ExecFileSyncOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1311 : Ojs.t) -> x1311
        and t_to_js : t -> Ojs.t = fun (x1310 : Ojs.t) -> x1310
        let (get_input : t -> ArrayBufferView.t or_string) =
          fun (x1312 : t) ->
            or_string_of_js ArrayBufferView.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1312) "input")
        let (set_input : t -> ArrayBufferView.t or_string -> unit) =
          fun (x1314 : t) ->
            fun (x1315 : ArrayBufferView.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1314) "input"
                (or_string_to_js ArrayBufferView.t_to_js x1315)
        let (get_stdio : t -> StdioOptions.t) =
          fun (x1317 : t) ->
            StdioOptions.t_of_js (Ojs.get_prop_ascii (t_to_js x1317) "stdio")
        let (set_stdio : t -> StdioOptions.t -> unit) =
          fun (x1318 : t) ->
            fun (x1319 : StdioOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x1318) "stdio"
                (StdioOptions.t_to_js x1319)
        let (get_kill_signal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x1320 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1320) "killSignal")
        let (set_kill_signal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x1322 : t) ->
            fun (x1323 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x1322) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x1323)
        let (get_max_buffer : t -> int) =
          fun (x1325 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1325) "maxBuffer")
        let (set_max_buffer : t -> int -> unit) =
          fun (x1326 : t) ->
            fun (x1327 : int) ->
              Ojs.set_prop_ascii (t_to_js x1326) "maxBuffer"
                (Ojs.int_to_js x1327)
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1328 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1328) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1329 : t) ->
            fun (x1330 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1329) "encoding"
                (BufferEncoding.t_to_js x1330)
        let (get_shell : t -> bool or_string) =
          fun (x1331 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1331) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x1333 : t) ->
            fun (x1334 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x1333) "shell"
                (or_string_to_js Ojs.bool_to_js x1334)
        let (cast : t -> CommonOptions.t) =
          fun (x1336 : t) -> CommonOptions.t_of_js (t_to_js x1336)
      end
    module ExecFileSyncOptionsWithStringEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1338 : Ojs.t) -> x1338
        and t_to_js : t -> Ojs.t = fun (x1337 : Ojs.t) -> x1337
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1339 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1339) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1340 : t) ->
            fun (x1341 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1340) "encoding"
                (BufferEncoding.t_to_js x1341)
        let (cast : t -> ExecFileSyncOptions.t) =
          fun (x1342 : t) -> ExecFileSyncOptions.t_of_js (t_to_js x1342)
      end
    module ExecFileSyncOptionsWithBufferEncoding =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1344 : Ojs.t) -> x1344
        and t_to_js : t -> Ojs.t = fun (x1343 : Ojs.t) -> x1343
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1345 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1345) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1346 : t) ->
            fun (x1347 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1346) "encoding"
                (BufferEncoding.t_to_js x1347)
        let (cast : t -> ExecFileSyncOptions.t) =
          fun (x1348 : t) -> ExecFileSyncOptions.t_of_js (t_to_js x1348)
      end
    let (exec_file_sync : command:string -> Buffer.t) =
      fun ~command:(x1349 : string) ->
        Buffer.t_of_js
          (Ojs.call Import.child_process "execFileSync"
             [|(Ojs.string_to_js x1349)|])
    let (exec_file_sync :
      command:string ->
        ?options:ExecFileSyncOptionsWithStringEncoding.t -> unit -> string)
      =
      fun ~command:(x1350 : string) ->
        fun ?options:(x1351 : ExecFileSyncOptionsWithStringEncoding.t option)
          ->
          fun () ->
            Ojs.string_of_js
              (let x1354 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1354 "execFileSync") "apply"
                 [|x1354;((let x1352 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1352 "push"
                                [|(Ojs.string_to_js x1350)|]);
                           (match x1351 with
                            | Some x1353 ->
                                ignore
                                  (Ojs.call x1352 "push"
                                     [|(ExecFileSyncOptionsWithStringEncoding.t_to_js
                                          x1353)|])
                            | None -> ());
                           x1352))|])
    let (exec_file_sync :
      command:string ->
        ?options:ExecFileSyncOptionsWithBufferEncoding.t -> unit -> Buffer.t)
      =
      fun ~command:(x1355 : string) ->
        fun ?options:(x1356 : ExecFileSyncOptionsWithBufferEncoding.t option)
          ->
          fun () ->
            Buffer.t_of_js
              (let x1359 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1359 "execFileSync") "apply"
                 [|x1359;((let x1357 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1357 "push"
                                [|(Ojs.string_to_js x1355)|]);
                           (match x1356 with
                            | Some x1358 ->
                                ignore
                                  (Ojs.call x1357 "push"
                                     [|(ExecFileSyncOptionsWithBufferEncoding.t_to_js
                                          x1358)|])
                            | None -> ());
                           x1357))|])
    let (exec_file_sync :
      command:string -> ?options:ExecFileSyncOptions.t -> unit -> Buffer.t) =
      fun ~command:(x1360 : string) ->
        fun ?options:(x1361 : ExecFileSyncOptions.t option) ->
          fun () ->
            Buffer.t_of_js
              (let x1364 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1364 "execFileSync") "apply"
                 [|x1364;((let x1362 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1362 "push"
                                [|(Ojs.string_to_js x1360)|]);
                           (match x1361 with
                            | Some x1363 ->
                                ignore
                                  (Ojs.call x1362 "push"
                                     [|(ExecFileSyncOptions.t_to_js x1363)|])
                            | None -> ());
                           x1362))|])
    let (exec_file_sync :
      command:string ->
        ?args:string list ->
          ?options:ExecFileSyncOptionsWithStringEncoding.t -> unit -> string)
      =
      fun ~command:(x1365 : string) ->
        fun ?args:(x1366 : string list option) ->
          fun
            ?options:(x1367 : ExecFileSyncOptionsWithStringEncoding.t option)
            ->
            fun () ->
              Ojs.string_of_js
                (let x1372 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1372 "execFileSync") "apply"
                   [|x1372;((let x1368 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1368 "push"
                                  [|(Ojs.string_to_js x1365)|]);
                             (match x1366 with
                              | Some x1370 ->
                                  ignore
                                    (Ojs.call x1368 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1370)|])
                              | None -> ());
                             (match x1367 with
                              | Some x1369 ->
                                  ignore
                                    (Ojs.call x1368 "push"
                                       [|(ExecFileSyncOptionsWithStringEncoding.t_to_js
                                            x1369)|])
                              | None -> ());
                             x1368))|])
    let (exec_file_sync :
      command:string ->
        ?args:string list ->
          ?options:ExecFileSyncOptionsWithBufferEncoding.t ->
            unit -> Buffer.t)
      =
      fun ~command:(x1373 : string) ->
        fun ?args:(x1374 : string list option) ->
          fun
            ?options:(x1375 : ExecFileSyncOptionsWithBufferEncoding.t option)
            ->
            fun () ->
              Buffer.t_of_js
                (let x1380 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1380 "execFileSync") "apply"
                   [|x1380;((let x1376 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1376 "push"
                                  [|(Ojs.string_to_js x1373)|]);
                             (match x1374 with
                              | Some x1378 ->
                                  ignore
                                    (Ojs.call x1376 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1378)|])
                              | None -> ());
                             (match x1375 with
                              | Some x1377 ->
                                  ignore
                                    (Ojs.call x1376 "push"
                                       [|(ExecFileSyncOptionsWithBufferEncoding.t_to_js
                                            x1377)|])
                              | None -> ());
                             x1376))|])
    let (exec_file_sync :
      command:string ->
        ?args:string list ->
          ?options:ExecFileSyncOptions.t -> unit -> Buffer.t)
      =
      fun ~command:(x1381 : string) ->
        fun ?args:(x1382 : string list option) ->
          fun ?options:(x1383 : ExecFileSyncOptions.t option) ->
            fun () ->
              Buffer.t_of_js
                (let x1388 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1388 "execFileSync") "apply"
                   [|x1388;((let x1384 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1384 "push"
                                  [|(Ojs.string_to_js x1381)|]);
                             (match x1382 with
                              | Some x1386 ->
                                  ignore
                                    (Ojs.call x1384 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1386)|])
                              | None -> ());
                             (match x1383 with
                              | Some x1385 ->
                                  ignore
                                    (Ojs.call x1384 "push"
                                       [|(ExecFileSyncOptions.t_to_js x1385)|])
                              | None -> ());
                             x1384))|])
  end
