[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
open Node_events
open Node_net
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
        type anonymous_interface_1 = [ `anonymous_interface_1 ] intf
        let rec anonymous_interface_1_of_js : Ojs.t -> anonymous_interface_1
          = Obj.magic
        and anonymous_interface_1_to_js : anonymous_interface_1 -> Ojs.t =
          Obj.magic
        type anonymous_interface_2 = [ `anonymous_interface_2 ] intf
        let rec anonymous_interface_2_of_js : Ojs.t -> anonymous_interface_2
          = Obj.magic
        and anonymous_interface_2_to_js : anonymous_interface_2 -> Ojs.t =
          Obj.magic
        type anonymous_interface_3 = [ `anonymous_interface_3 ] intf
        let rec anonymous_interface_3_of_js : Ojs.t -> anonymous_interface_3
          = Obj.magic
        and anonymous_interface_3_to_js : anonymous_interface_3 -> Ojs.t =
          Obj.magic
        type anonymous_interface_4 = [ `anonymous_interface_4 ] intf
        let rec anonymous_interface_4_of_js : Ojs.t -> anonymous_interface_4
          = Obj.magic
        and anonymous_interface_4_to_js : anonymous_interface_4 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type child_process_ChildProcess =
          [ `Child_process_ChildProcess ] intf
        and ('I, 'O, 'E) child_process_ChildProcessByStdio =
          [ `Child_process_ChildProcessByStdio of ('I * 'O * 'E) 
          | `Child_process_ChildProcess ] intf
        and child_process_ChildProcessWithoutNullStreams =
          [ `Child_process_ChildProcessWithoutNullStreams 
          | `Child_process_ChildProcess ] intf
        and child_process_CommonOptions =
          [ `Child_process_CommonOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_CommonSpawnOptions =
          [ `Child_process_CommonSpawnOptions 
          | `Child_process_CommonOptions  | `Child_process_MessagingOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecException =
          [ `Child_process_ExecException ] intf
        and child_process_ExecFileException =
          (child_process_ExecException, ErrnoException.t) intersection2
        and child_process_ExecFileOptions =
          [ `Child_process_ExecFileOptions  | `Child_process_CommonOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecFileOptionsWithBufferEncoding =
          [ `Child_process_ExecFileOptionsWithBufferEncoding 
          | `Child_process_CommonOptions  | `Child_process_ExecFileOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecFileOptionsWithOtherEncoding =
          [ `Child_process_ExecFileOptionsWithOtherEncoding 
          | `Child_process_CommonOptions  | `Child_process_ExecFileOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecFileOptionsWithStringEncoding =
          [ `Child_process_ExecFileOptionsWithStringEncoding 
          | `Child_process_CommonOptions  | `Child_process_ExecFileOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecFileSyncOptions =
          [ `Child_process_ExecFileSyncOptions 
          | `Child_process_CommonOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecFileSyncOptionsWithBufferEncoding =
          [ `Child_process_ExecFileSyncOptionsWithBufferEncoding 
          | `Child_process_CommonOptions 
          | `Child_process_ExecFileSyncOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecFileSyncOptionsWithStringEncoding =
          [ `Child_process_ExecFileSyncOptionsWithStringEncoding 
          | `Child_process_CommonOptions 
          | `Child_process_ExecFileSyncOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecOptions =
          [ `Child_process_ExecOptions  | `Child_process_CommonOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecOptionsWithBufferEncoding =
          [ `Child_process_ExecOptionsWithBufferEncoding 
          | `Child_process_CommonOptions  | `Child_process_ExecOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecOptionsWithStringEncoding =
          [ `Child_process_ExecOptionsWithStringEncoding 
          | `Child_process_CommonOptions  | `Child_process_ExecOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecSyncOptions =
          [ `Child_process_ExecSyncOptions  | `Child_process_CommonOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecSyncOptionsWithBufferEncoding =
          [ `Child_process_ExecSyncOptionsWithBufferEncoding 
          | `Child_process_CommonOptions  | `Child_process_ExecSyncOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecSyncOptionsWithStringEncoding =
          [ `Child_process_ExecSyncOptionsWithStringEncoding 
          | `Child_process_CommonOptions  | `Child_process_ExecSyncOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ForkOptions =
          [ `Child_process_ForkOptions  | `Child_process_MessagingOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_MessageOptions =
          [ `Child_process_MessageOptions ] intf
        and child_process_MessagingOptions =
          [ `Child_process_MessagingOptions ] intf
        and child_process_ProcessEnvOptions =
          [ `Child_process_ProcessEnvOptions ] intf
        and 'T child_process_PromiseWithChild =
          [ `Child_process_PromiseWithChild of 'T ] intf
        and child_process_SendHandle = (Net.Server.t, Net.Socket.t) union2
        and child_process_Serializable =
          untyped_object or_boolean or_string or_number
        and child_process_SerializationType = [ `advanced  | `json ]
        and child_process_SpawnOptions =
          [ `Child_process_SpawnOptions  | `Child_process_CommonOptions 
          | `Child_process_CommonSpawnOptions 
          | `Child_process_MessagingOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and ('Stdin, 'Stdout,
          'Stderr) child_process_SpawnOptionsWithStdioTuple =
          [
            `Child_process_SpawnOptionsWithStdioTuple of
              ('Stdin * 'Stdout * 'Stderr) 
          | `Child_process_CommonOptions 
          | `Child_process_CommonSpawnOptions 
          | `Child_process_MessagingOptions 
          | `Child_process_ProcessEnvOptions  | `Child_process_SpawnOptions ]
            intf
        and child_process_SpawnOptionsWithoutStdio =
          [ `Child_process_SpawnOptionsWithoutStdio 
          | `Child_process_CommonOptions 
          | `Child_process_CommonSpawnOptions 
          | `Child_process_MessagingOptions 
          | `Child_process_ProcessEnvOptions  | `Child_process_SpawnOptions ]
            intf
        and child_process_SpawnSyncOptions =
          [ `Child_process_SpawnSyncOptions  | `Child_process_CommonOptions 
          | `Child_process_CommonSpawnOptions 
          | `Child_process_MessagingOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_SpawnSyncOptionsWithBufferEncoding =
          [ `Child_process_SpawnSyncOptionsWithBufferEncoding 
          | `Child_process_CommonOptions 
          | `Child_process_CommonSpawnOptions 
          | `Child_process_MessagingOptions 
          | `Child_process_ProcessEnvOptions 
          | `Child_process_SpawnSyncOptions ] intf
        and child_process_SpawnSyncOptionsWithStringEncoding =
          [ `Child_process_SpawnSyncOptionsWithStringEncoding 
          | `Child_process_CommonOptions 
          | `Child_process_CommonSpawnOptions 
          | `Child_process_MessagingOptions 
          | `Child_process_ProcessEnvOptions 
          | `Child_process_SpawnSyncOptions ] intf
        and 'T child_process_SpawnSyncReturns =
          [ `Child_process_SpawnSyncReturns of 'T ] intf
        and child_process_StdioNull =
          (Node_stream.Stream.Stream.t, [ `ignore  | `inherit_ ]) or_enum
        and child_process_StdioOptions =
          ((Node_stream.Stream.Stream.t,
             [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum or_number
             or_null_or_undefined list,
            [ `ignore  | `inherit_  | `pipe ]) or_enum
        and child_process_StdioPipe = [ `pipe ] or_null_or_undefined
        let rec child_process_ChildProcess_of_js :
          Ojs.t -> child_process_ChildProcess = Obj.magic
        and child_process_ChildProcess_to_js :
          child_process_ChildProcess -> Ojs.t = Obj.magic
        and child_process_ChildProcessByStdio_of_js :
          'I 'O 'E .
            (Ojs.t -> 'I) ->
              (Ojs.t -> 'O) ->
                (Ojs.t -> 'E) ->
                  Ojs.t -> ('I, 'O, 'E) child_process_ChildProcessByStdio
          = fun _I -> fun _O -> fun _E -> Obj.magic
        and child_process_ChildProcessByStdio_to_js :
          'I 'O 'E .
            ('I -> Ojs.t) ->
              ('O -> Ojs.t) ->
                ('E -> Ojs.t) ->
                  ('I, 'O, 'E) child_process_ChildProcessByStdio -> Ojs.t
          = fun _I -> fun _O -> fun _E -> Obj.magic
        and child_process_ChildProcessWithoutNullStreams_of_js :
          Ojs.t -> child_process_ChildProcessWithoutNullStreams = Obj.magic
        and child_process_ChildProcessWithoutNullStreams_to_js :
          child_process_ChildProcessWithoutNullStreams -> Ojs.t = Obj.magic
        and child_process_CommonOptions_of_js :
          Ojs.t -> child_process_CommonOptions = Obj.magic
        and child_process_CommonOptions_to_js :
          child_process_CommonOptions -> Ojs.t = Obj.magic
        and child_process_CommonSpawnOptions_of_js :
          Ojs.t -> child_process_CommonSpawnOptions = Obj.magic
        and child_process_CommonSpawnOptions_to_js :
          child_process_CommonSpawnOptions -> Ojs.t = Obj.magic
        and child_process_ExecException_of_js :
          Ojs.t -> child_process_ExecException = Obj.magic
        and child_process_ExecException_to_js :
          child_process_ExecException -> Ojs.t = Obj.magic
        and child_process_ExecFileException_of_js :
          Ojs.t -> child_process_ExecFileException =
          fun (x4 : Ojs.t) ->
            intersection2_of_js child_process_ExecException_of_js
              ErrnoException.t_of_js x4
        and child_process_ExecFileException_to_js :
          child_process_ExecFileException -> Ojs.t =
          fun
            (x1 :
              (child_process_ExecException, ErrnoException.t) intersection2)
            ->
            intersection2_to_js child_process_ExecException_to_js
              ErrnoException.t_to_js x1
        and child_process_ExecFileOptions_of_js :
          Ojs.t -> child_process_ExecFileOptions = Obj.magic
        and child_process_ExecFileOptions_to_js :
          child_process_ExecFileOptions -> Ojs.t = Obj.magic
        and child_process_ExecFileOptionsWithBufferEncoding_of_js :
          Ojs.t -> child_process_ExecFileOptionsWithBufferEncoding =
          Obj.magic
        and child_process_ExecFileOptionsWithBufferEncoding_to_js :
          child_process_ExecFileOptionsWithBufferEncoding -> Ojs.t =
          Obj.magic
        and child_process_ExecFileOptionsWithOtherEncoding_of_js :
          Ojs.t -> child_process_ExecFileOptionsWithOtherEncoding = Obj.magic
        and child_process_ExecFileOptionsWithOtherEncoding_to_js :
          child_process_ExecFileOptionsWithOtherEncoding -> Ojs.t = Obj.magic
        and child_process_ExecFileOptionsWithStringEncoding_of_js :
          Ojs.t -> child_process_ExecFileOptionsWithStringEncoding =
          Obj.magic
        and child_process_ExecFileOptionsWithStringEncoding_to_js :
          child_process_ExecFileOptionsWithStringEncoding -> Ojs.t =
          Obj.magic
        and child_process_ExecFileSyncOptions_of_js :
          Ojs.t -> child_process_ExecFileSyncOptions = Obj.magic
        and child_process_ExecFileSyncOptions_to_js :
          child_process_ExecFileSyncOptions -> Ojs.t = Obj.magic
        and child_process_ExecFileSyncOptionsWithBufferEncoding_of_js :
          Ojs.t -> child_process_ExecFileSyncOptionsWithBufferEncoding =
          Obj.magic
        and child_process_ExecFileSyncOptionsWithBufferEncoding_to_js :
          child_process_ExecFileSyncOptionsWithBufferEncoding -> Ojs.t =
          Obj.magic
        and child_process_ExecFileSyncOptionsWithStringEncoding_of_js :
          Ojs.t -> child_process_ExecFileSyncOptionsWithStringEncoding =
          Obj.magic
        and child_process_ExecFileSyncOptionsWithStringEncoding_to_js :
          child_process_ExecFileSyncOptionsWithStringEncoding -> Ojs.t =
          Obj.magic
        and child_process_ExecOptions_of_js :
          Ojs.t -> child_process_ExecOptions = Obj.magic
        and child_process_ExecOptions_to_js :
          child_process_ExecOptions -> Ojs.t = Obj.magic
        and child_process_ExecOptionsWithBufferEncoding_of_js :
          Ojs.t -> child_process_ExecOptionsWithBufferEncoding = Obj.magic
        and child_process_ExecOptionsWithBufferEncoding_to_js :
          child_process_ExecOptionsWithBufferEncoding -> Ojs.t = Obj.magic
        and child_process_ExecOptionsWithStringEncoding_of_js :
          Ojs.t -> child_process_ExecOptionsWithStringEncoding = Obj.magic
        and child_process_ExecOptionsWithStringEncoding_to_js :
          child_process_ExecOptionsWithStringEncoding -> Ojs.t = Obj.magic
        and child_process_ExecSyncOptions_of_js :
          Ojs.t -> child_process_ExecSyncOptions = Obj.magic
        and child_process_ExecSyncOptions_to_js :
          child_process_ExecSyncOptions -> Ojs.t = Obj.magic
        and child_process_ExecSyncOptionsWithBufferEncoding_of_js :
          Ojs.t -> child_process_ExecSyncOptionsWithBufferEncoding =
          Obj.magic
        and child_process_ExecSyncOptionsWithBufferEncoding_to_js :
          child_process_ExecSyncOptionsWithBufferEncoding -> Ojs.t =
          Obj.magic
        and child_process_ExecSyncOptionsWithStringEncoding_of_js :
          Ojs.t -> child_process_ExecSyncOptionsWithStringEncoding =
          Obj.magic
        and child_process_ExecSyncOptionsWithStringEncoding_to_js :
          child_process_ExecSyncOptionsWithStringEncoding -> Ojs.t =
          Obj.magic
        and child_process_ForkOptions_of_js :
          Ojs.t -> child_process_ForkOptions = Obj.magic
        and child_process_ForkOptions_to_js :
          child_process_ForkOptions -> Ojs.t = Obj.magic
        and child_process_MessageOptions_of_js :
          Ojs.t -> child_process_MessageOptions = Obj.magic
        and child_process_MessageOptions_to_js :
          child_process_MessageOptions -> Ojs.t = Obj.magic
        and child_process_MessagingOptions_of_js :
          Ojs.t -> child_process_MessagingOptions = Obj.magic
        and child_process_MessagingOptions_to_js :
          child_process_MessagingOptions -> Ojs.t = Obj.magic
        and child_process_ProcessEnvOptions_of_js :
          Ojs.t -> child_process_ProcessEnvOptions = Obj.magic
        and child_process_ProcessEnvOptions_to_js :
          child_process_ProcessEnvOptions -> Ojs.t = Obj.magic
        and child_process_PromiseWithChild_of_js :
          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T child_process_PromiseWithChild =
          fun _T -> Obj.magic
        and child_process_PromiseWithChild_to_js :
          'T . ('T -> Ojs.t) -> 'T child_process_PromiseWithChild -> Ojs.t =
          fun _T -> Obj.magic
        and child_process_SendHandle_of_js :
          Ojs.t -> child_process_SendHandle =
          fun (x10 : Ojs.t) ->
            union2_of_js Net.Server.t_of_js Net.Socket.t_of_js x10
        and child_process_SendHandle_to_js :
          child_process_SendHandle -> Ojs.t =
          fun (x7 : (Net.Server.t, Net.Socket.t) union2) ->
            union2_to_js Net.Server.t_to_js Net.Socket.t_to_js x7
        and child_process_Serializable_of_js :
          Ojs.t -> child_process_Serializable =
          fun (x17 : Ojs.t) ->
            or_number_of_js
              (fun (x18 : Ojs.t) ->
                 or_string_of_js
                   (fun (x19 : Ojs.t) ->
                      or_boolean_of_js untyped_object_of_js x19) x18) x17
        and child_process_Serializable_to_js :
          child_process_Serializable -> Ojs.t =
          fun (x13 : untyped_object or_boolean or_string or_number) ->
            or_number_to_js
              (fun (x14 : untyped_object or_boolean or_string) ->
                 or_string_to_js
                   (fun (x15 : untyped_object or_boolean) ->
                      or_boolean_to_js untyped_object_to_js x15) x14) x13
        and child_process_SerializationType_of_js :
          Ojs.t -> child_process_SerializationType =
          fun (x22 : Ojs.t) ->
            let x23 = x22 in
            match Ojs.string_of_js x23 with
            | "advanced" -> `advanced
            | "json" -> `json
            | _ -> assert false
        and child_process_SerializationType_to_js :
          child_process_SerializationType -> Ojs.t =
          fun (x21 : [ `advanced  | `json ]) ->
            match x21 with
            | `advanced -> Ojs.string_to_js "advanced"
            | `json -> Ojs.string_to_js "json"
        and child_process_SpawnOptions_of_js :
          Ojs.t -> child_process_SpawnOptions = Obj.magic
        and child_process_SpawnOptions_to_js :
          child_process_SpawnOptions -> Ojs.t = Obj.magic
        and child_process_SpawnOptionsWithStdioTuple_of_js :
          'Stdin 'Stdout 'Stderr .
            (Ojs.t -> 'Stdin) ->
              (Ojs.t -> 'Stdout) ->
                (Ojs.t -> 'Stderr) ->
                  Ojs.t ->
                    ('Stdin, 'Stdout, 'Stderr)
                      child_process_SpawnOptionsWithStdioTuple
          = fun _Stdin -> fun _Stdout -> fun _Stderr -> Obj.magic
        and child_process_SpawnOptionsWithStdioTuple_to_js :
          'Stdin 'Stdout 'Stderr .
            ('Stdin -> Ojs.t) ->
              ('Stdout -> Ojs.t) ->
                ('Stderr -> Ojs.t) ->
                  ('Stdin, 'Stdout, 'Stderr)
                    child_process_SpawnOptionsWithStdioTuple -> Ojs.t
          = fun _Stdin -> fun _Stdout -> fun _Stderr -> Obj.magic
        and child_process_SpawnOptionsWithoutStdio_of_js :
          Ojs.t -> child_process_SpawnOptionsWithoutStdio = Obj.magic
        and child_process_SpawnOptionsWithoutStdio_to_js :
          child_process_SpawnOptionsWithoutStdio -> Ojs.t = Obj.magic
        and child_process_SpawnSyncOptions_of_js :
          Ojs.t -> child_process_SpawnSyncOptions = Obj.magic
        and child_process_SpawnSyncOptions_to_js :
          child_process_SpawnSyncOptions -> Ojs.t = Obj.magic
        and child_process_SpawnSyncOptionsWithBufferEncoding_of_js :
          Ojs.t -> child_process_SpawnSyncOptionsWithBufferEncoding =
          Obj.magic
        and child_process_SpawnSyncOptionsWithBufferEncoding_to_js :
          child_process_SpawnSyncOptionsWithBufferEncoding -> Ojs.t =
          Obj.magic
        and child_process_SpawnSyncOptionsWithStringEncoding_of_js :
          Ojs.t -> child_process_SpawnSyncOptionsWithStringEncoding =
          Obj.magic
        and child_process_SpawnSyncOptionsWithStringEncoding_to_js :
          child_process_SpawnSyncOptionsWithStringEncoding -> Ojs.t =
          Obj.magic
        and child_process_SpawnSyncReturns_of_js :
          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T child_process_SpawnSyncReturns =
          fun _T -> Obj.magic
        and child_process_SpawnSyncReturns_to_js :
          'T . ('T -> Ojs.t) -> 'T child_process_SpawnSyncReturns -> Ojs.t =
          fun _T -> Obj.magic
        and child_process_StdioNull_of_js : Ojs.t -> child_process_StdioNull
          =
          fun (x27 : Ojs.t) ->
            or_enum_of_js Node_stream.Stream.Stream.t_of_js
              (fun (x29 : Ojs.t) ->
                 let x30 = x29 in
                 match Ojs.string_of_js x30 with
                 | "ignore" -> `ignore
                 | "inherit" -> `inherit_
                 | _ -> assert false) x27
        and child_process_StdioNull_to_js : child_process_StdioNull -> Ojs.t
          =
          fun
            (x24 :
              (Node_stream.Stream.Stream.t, [ `ignore  | `inherit_ ]) or_enum)
            ->
            or_enum_to_js Node_stream.Stream.Stream.t_to_js
              (fun (x26 : [ `ignore  | `inherit_ ]) ->
                 match x26 with
                 | `ignore -> Ojs.string_to_js "ignore"
                 | `inherit_ -> Ojs.string_to_js "inherit") x24
        and child_process_StdioOptions_of_js :
          Ojs.t -> child_process_StdioOptions =
          fun (x39 : Ojs.t) ->
            or_enum_of_js
              (fun (x40 : Ojs.t) ->
                 Ojs.list_of_js
                   (fun (x41 : Ojs.t) ->
                      or_null_or_undefined_of_js
                        (fun (x42 : Ojs.t) ->
                           or_number_of_js
                             (fun (x43 : Ojs.t) ->
                                or_enum_of_js
                                  Node_stream.Stream.Stream.t_of_js
                                  (fun (x45 : Ojs.t) ->
                                     let x46 = x45 in
                                     match Ojs.string_of_js x46 with
                                     | "ignore" -> `ignore
                                     | "inherit" -> `inherit_
                                     | "ipc" -> `ipc
                                     | "pipe" -> `pipe
                                     | _ -> assert false) x43) x42) x41) x40)
              (fun (x47 : Ojs.t) ->
                 let x48 = x47 in
                 match Ojs.string_of_js x48 with
                 | "ignore" -> `ignore
                 | "inherit" -> `inherit_
                 | "pipe" -> `pipe
                 | _ -> assert false) x39
        and child_process_StdioOptions_to_js :
          child_process_StdioOptions -> Ojs.t =
          fun
            (x31 :
              ((Node_stream.Stream.Stream.t,
                 [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum or_number
                 or_null_or_undefined list,
                [ `ignore  | `inherit_  | `pipe ]) or_enum)
            ->
            or_enum_to_js
              (fun
                 (x32 :
                   (Node_stream.Stream.Stream.t,
                     [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum
                     or_number or_null_or_undefined list)
                 ->
                 Ojs.list_to_js
                   (fun
                      (x33 :
                        (Node_stream.Stream.Stream.t,
                          [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum
                          or_number or_null_or_undefined)
                      ->
                      or_null_or_undefined_to_js
                        (fun
                           (x34 :
                             (Node_stream.Stream.Stream.t,
                               [ `ignore  | `inherit_  | `ipc  | `pipe ])
                               or_enum or_number)
                           ->
                           or_number_to_js
                             (fun
                                (x35 :
                                  (Node_stream.Stream.Stream.t,
                                    [ `ignore  | `inherit_  | `ipc  | `pipe ])
                                    or_enum)
                                ->
                                or_enum_to_js
                                  Node_stream.Stream.Stream.t_to_js
                                  (fun
                                     (x37 :
                                       [ `ignore  | `inherit_  | `ipc 
                                       | `pipe ])
                                     ->
                                     match x37 with
                                     | `ignore -> Ojs.string_to_js "ignore"
                                     | `inherit_ ->
                                         Ojs.string_to_js "inherit"
                                     | `ipc -> Ojs.string_to_js "ipc"
                                     | `pipe -> Ojs.string_to_js "pipe") x35)
                             x34) x33) x32)
              (fun (x38 : [ `ignore  | `inherit_  | `pipe ]) ->
                 match x38 with
                 | `ignore -> Ojs.string_to_js "ignore"
                 | `inherit_ -> Ojs.string_to_js "inherit"
                 | `pipe -> Ojs.string_to_js "pipe") x31
        and child_process_StdioPipe_of_js : Ojs.t -> child_process_StdioPipe
          =
          fun (x51 : Ojs.t) ->
            or_null_or_undefined_of_js
              (fun (x52 : Ojs.t) ->
                 let x53 = x52 in
                 match Ojs.string_of_js x53 with
                 | "pipe" -> `pipe
                 | _ -> assert false) x51
        and child_process_StdioPipe_to_js : child_process_StdioPipe -> Ojs.t
          =
          fun (x49 : [ `pipe ] or_null_or_undefined) ->
            or_null_or_undefined_to_js
              (fun (x50 : [ `pipe ]) ->
                 match x50 with | `pipe -> Ojs.string_to_js "pipe") x49
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x55 : Ojs.t) -> anonymous_interface_0_of_js x55
    and t_to_js : t -> Ojs.t =
      fun (x54 : anonymous_interface_0) -> anonymous_interface_0_to_js x54
    let (get_encoding : t -> BufferEncoding.t) =
      fun (x56 : t) ->
        BufferEncoding.t_of_js (Ojs.get_prop_ascii (t_to_js x56) "encoding")
    let (set_encoding : t -> BufferEncoding.t -> unit) =
      fun (x57 : t) ->
        fun (x58 : BufferEncoding.t) ->
          Ojs.set_prop_ascii (t_to_js x57) "encoding"
            (BufferEncoding.t_to_js x58)
  end
module AnonymousInterface1 =
  struct
    type t = anonymous_interface_1
    let rec t_of_js : Ojs.t -> t =
      fun (x60 : Ojs.t) -> anonymous_interface_1_of_js x60
    and t_to_js : t -> Ojs.t =
      fun (x59 : anonymous_interface_1) -> anonymous_interface_1_to_js x59
    let (get_encoding : t -> [ `buffer ] or_null) =
      fun (x61 : t) ->
        or_null_of_js
          (fun (x62 : Ojs.t) ->
             let x63 = x62 in
             match Ojs.string_of_js x63 with
             | "buffer" -> `buffer
             | _ -> assert false)
          (Ojs.get_prop_ascii (t_to_js x61) "encoding")
    let (set_encoding : t -> [ `buffer ] or_null -> unit) =
      fun (x64 : t) ->
        fun (x65 : [ `buffer ] or_null) ->
          Ojs.set_prop_ascii (t_to_js x64) "encoding"
            (or_null_to_js
               (fun (x66 : [ `buffer ]) ->
                  match x66 with | `buffer -> Ojs.string_to_js "buffer") x65)
  end
module AnonymousInterface2 =
  struct
    type t = anonymous_interface_2
    let rec t_of_js : Ojs.t -> t =
      fun (x68 : Ojs.t) -> anonymous_interface_2_of_js x68
    and t_to_js : t -> Ojs.t =
      fun (x67 : anonymous_interface_2) -> anonymous_interface_2_to_js x67
    let (get_stdout : t -> Buffer.t) =
      fun (x69 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x69) "stdout")
    let (set_stdout : t -> Buffer.t -> unit) =
      fun (x70 : t) ->
        fun (x71 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x70) "stdout" (Buffer.t_to_js x71)
    let (get_stderr : t -> Buffer.t) =
      fun (x72 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x72) "stderr")
    let (set_stderr : t -> Buffer.t -> unit) =
      fun (x73 : t) ->
        fun (x74 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x73) "stderr" (Buffer.t_to_js x74)
  end
module AnonymousInterface3 =
  struct
    type t = anonymous_interface_3
    let rec t_of_js : Ojs.t -> t =
      fun (x76 : Ojs.t) -> anonymous_interface_3_of_js x76
    and t_to_js : t -> Ojs.t =
      fun (x75 : anonymous_interface_3) -> anonymous_interface_3_to_js x75
    let (get_stdout : t -> string) =
      fun (x77 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x77) "stdout")
    let (set_stdout : t -> string -> unit) =
      fun (x78 : t) ->
        fun (x79 : string) ->
          Ojs.set_prop_ascii (t_to_js x78) "stdout" (Ojs.string_to_js x79)
    let (get_stderr : t -> string) =
      fun (x80 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x80) "stderr")
    let (set_stderr : t -> string -> unit) =
      fun (x81 : t) ->
        fun (x82 : string) ->
          Ojs.set_prop_ascii (t_to_js x81) "stderr" (Ojs.string_to_js x82)
  end
module AnonymousInterface4 =
  struct
    type t = anonymous_interface_4
    let rec t_of_js : Ojs.t -> t =
      fun (x84 : Ojs.t) -> anonymous_interface_4_of_js x84
    and t_to_js : t -> Ojs.t =
      fun (x83 : anonymous_interface_4) -> anonymous_interface_4_to_js x83
    let (get_stdout : t -> Buffer.t or_string) =
      fun (x85 : t) ->
        or_string_of_js Buffer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x85) "stdout")
    let (set_stdout : t -> Buffer.t or_string -> unit) =
      fun (x87 : t) ->
        fun (x88 : Buffer.t or_string) ->
          Ojs.set_prop_ascii (t_to_js x87) "stdout"
            (or_string_to_js Buffer.t_to_js x88)
    let (get_stderr : t -> Buffer.t or_string) =
      fun (x90 : t) ->
        or_string_of_js Buffer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x90) "stderr")
    let (set_stderr : t -> Buffer.t or_string -> unit) =
      fun (x92 : t) ->
        fun (x93 : Buffer.t or_string) ->
          Ojs.set_prop_ascii (t_to_js x92) "stderr"
            (or_string_to_js Buffer.t_to_js x93)
  end
module Child_process =
  struct
    module Serializable =
      struct
        type t = child_process_Serializable
        let rec t_of_js : Ojs.t -> t =
          fun (x96 : Ojs.t) -> child_process_Serializable_of_js x96
        and t_to_js : t -> Ojs.t =
          fun (x95 : child_process_Serializable) ->
            child_process_Serializable_to_js x95
      end
    module SendHandle =
      struct
        type t = child_process_SendHandle
        let rec t_of_js : Ojs.t -> t =
          fun (x98 : Ojs.t) -> child_process_SendHandle_of_js x98
        and t_to_js : t -> Ojs.t =
          fun (x97 : child_process_SendHandle) ->
            child_process_SendHandle_to_js x97
      end
    module ChildProcess =
      struct
        type t = child_process_ChildProcess
        let rec t_of_js : Ojs.t -> t =
          fun (x100 : Ojs.t) -> child_process_ChildProcess_of_js x100
        and t_to_js : t -> Ojs.t =
          fun (x99 : child_process_ChildProcess) ->
            child_process_ChildProcess_to_js x99
        let (get_stdin : t -> Node_stream.Stream.Writable.t or_null) =
          fun (x101 : t) ->
            or_null_of_js Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x101) "stdin")
        let (set_stdin : t -> Node_stream.Stream.Writable.t or_null -> unit)
          =
          fun (x103 : t) ->
            fun (x104 : Node_stream.Stream.Writable.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x103) "stdin"
                (or_null_to_js Node_stream.Stream.Writable.t_to_js x104)
        let (get_stdout : t -> Node_stream.Stream.Readable.t or_null) =
          fun (x106 : t) ->
            or_null_of_js Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x106) "stdout")
        let (set_stdout : t -> Node_stream.Stream.Readable.t or_null -> unit)
          =
          fun (x108 : t) ->
            fun (x109 : Node_stream.Stream.Readable.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x108) "stdout"
                (or_null_to_js Node_stream.Stream.Readable.t_to_js x109)
        let (get_stderr : t -> Node_stream.Stream.Readable.t or_null) =
          fun (x111 : t) ->
            or_null_of_js Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x111) "stderr")
        let (set_stderr : t -> Node_stream.Stream.Readable.t or_null -> unit)
          =
          fun (x113 : t) ->
            fun (x114 : Node_stream.Stream.Readable.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x113) "stderr"
                (or_null_to_js Node_stream.Stream.Readable.t_to_js x114)
        let (get_channel : t -> Node_stream.Stream.Pipe.t or_null) =
          fun (x116 : t) ->
            or_null_of_js Node_stream.Stream.Pipe.t_of_js
              (Ojs.get_prop_ascii (t_to_js x116) "channel")
        let (get_stdio :
          t ->
            (Node_stream.Stream.Writable.t or_null *
              Node_stream.Stream.Readable.t or_null *
              Node_stream.Stream.Readable.t or_null *
              (Node_stream.Stream.Readable.t, Node_stream.Stream.Writable.t)
              union2 or_null_or_undefined * (Node_stream.Stream.Readable.t,
              Node_stream.Stream.Writable.t) union2 or_null_or_undefined))
          =
          fun (x118 : t) ->
            let x119 = Ojs.get_prop_ascii (t_to_js x118) "stdio" in
            ((or_null_of_js Node_stream.Stream.Writable.t_of_js
                (Ojs.array_get x119 0)),
              (or_null_of_js Node_stream.Stream.Readable.t_of_js
                 (Ojs.array_get x119 1)),
              (or_null_of_js Node_stream.Stream.Readable.t_of_js
                 (Ojs.array_get x119 2)),
              (or_null_or_undefined_of_js
                 (fun (x123 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x123)
                 (Ojs.array_get x119 3)),
              (or_null_or_undefined_of_js
                 (fun (x126 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x126)
                 (Ojs.array_get x119 4)))
        let (get_killed : t -> bool) =
          fun (x129 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x129) "killed")
        let (get_pid : t -> float) =
          fun (x130 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x130) "pid")
        let (get_connected : t -> bool) =
          fun (x131 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x131) "connected")
        let (get_exitCode : t -> float or_null) =
          fun (x132 : t) ->
            or_null_of_js Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x132) "exitCode")
        let (get_signalCode : t -> Node_process.Process.Signals.t or_null) =
          fun (x134 : t) ->
            or_null_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x134) "signalCode")
        let (get_spawnargs : t -> string list) =
          fun (x136 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x136) "spawnargs")
        let (get_spawnfile : t -> string) =
          fun (x138 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x138) "spawnfile")
        let (kill :
          t ->
            ?signal:Node_process.Process.Signals.t or_number -> unit -> bool)
          =
          fun (x143 : t) ->
            fun
              ?signal:(x139 :
                        Node_process.Process.Signals.t or_number option)
              ->
              fun () ->
                Ojs.bool_of_js
                  (let x144 = t_to_js x143 in
                   Ojs.call (Ojs.get_prop_ascii x144 "kill") "apply"
                     [|x144;((let x140 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x139 with
                               | Some x141 ->
                                   ignore
                                     (Ojs.call x140 "push"
                                        [|(or_number_to_js
                                             Node_process.Process.Signals.t_to_js
                                             x141)|])
                               | None -> ());
                              x140))|])
        let (send :
          t ->
            message:child_process_Serializable ->
              ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
          =
          fun (x151 : t) ->
            fun ~message:(x145 : child_process_Serializable) ->
              fun ?callback:(x146 : (error:Error.t or_null -> unit) option)
                ->
                fun () ->
                  Ojs.bool_of_js
                    (let x152 = t_to_js x151 in
                     Ojs.call (Ojs.get_prop_ascii x152 "send") "apply"
                       [|x152;((let x147 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x147 "push"
                                     [|(child_process_Serializable_to_js x145)|]);
                                (match x146 with
                                 | Some x148 ->
                                     ignore
                                       (Ojs.call x147 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun (x149 : Ojs.t) ->
                                                  x148
                                                    ~error:(or_null_of_js
                                                              Error.t_of_js
                                                              x149)))|])
                                 | None -> ());
                                x147))|])
        let (send' :
          t ->
            message:child_process_Serializable ->
              ?sendHandle:child_process_SendHandle ->
                ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
          =
          fun (x161 : t) ->
            fun ~message:(x153 : child_process_Serializable) ->
              fun ?sendHandle:(x154 : child_process_SendHandle option) ->
                fun ?callback:(x155 : (error:Error.t or_null -> unit) option)
                  ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x162 = t_to_js x161 in
                       Ojs.call (Ojs.get_prop_ascii x162 "send") "apply"
                         [|x162;((let x156 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x156 "push"
                                       [|(child_process_Serializable_to_js
                                            x153)|]);
                                  (match x154 with
                                   | Some x160 ->
                                       ignore
                                         (Ojs.call x156 "push"
                                            [|(child_process_SendHandle_to_js
                                                 x160)|])
                                   | None -> ());
                                  (match x155 with
                                   | Some x157 ->
                                       ignore
                                         (Ojs.call x156 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun (x158 : Ojs.t) ->
                                                    x157
                                                      ~error:(or_null_of_js
                                                                Error.t_of_js
                                                                x158)))|])
                                   | None -> ());
                                  x156))|])
        let (send'' :
          t ->
            message:child_process_Serializable ->
              ?sendHandle:child_process_SendHandle ->
                ?options:child_process_MessageOptions ->
                  ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
          =
          fun (x173 : t) ->
            fun ~message:(x163 : child_process_Serializable) ->
              fun ?sendHandle:(x164 : child_process_SendHandle option) ->
                fun ?options:(x165 : child_process_MessageOptions option) ->
                  fun
                    ?callback:(x166 : (error:Error.t or_null -> unit) option)
                    ->
                    fun () ->
                      Ojs.bool_of_js
                        (let x174 = t_to_js x173 in
                         Ojs.call (Ojs.get_prop_ascii x174 "send") "apply"
                           [|x174;((let x167 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x167 "push"
                                         [|(child_process_Serializable_to_js
                                              x163)|]);
                                    (match x164 with
                                     | Some x172 ->
                                         ignore
                                           (Ojs.call x167 "push"
                                              [|(child_process_SendHandle_to_js
                                                   x172)|])
                                     | None -> ());
                                    (match x165 with
                                     | Some x171 ->
                                         ignore
                                           (Ojs.call x167 "push"
                                              [|(child_process_MessageOptions_to_js
                                                   x171)|])
                                     | None -> ());
                                    (match x166 with
                                     | Some x168 ->
                                         ignore
                                           (Ojs.call x167 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun (x169 : Ojs.t) ->
                                                      x168
                                                        ~error:(or_null_of_js
                                                                  Error.t_of_js
                                                                  x169)))|])
                                     | None -> ());
                                    x167))|])
        let (disconnect : t -> unit) =
          fun (x175 : t) ->
            ignore (Ojs.call (t_to_js x175) "disconnect" [||])
        let (unref : t -> unit) =
          fun (x176 : t) -> ignore (Ojs.call (t_to_js x176) "unref" [||])
        let (ref : t -> unit) =
          fun (x177 : t) -> ignore (Ojs.call (t_to_js x177) "ref" [||])
        let (addListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x182 : t) ->
            fun ~event:(x178 : string) ->
              fun ~listener:(x179 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x182) "addListener"
                     [|(Ojs.string_to_js x178);(Ojs.fun_to_js_args
                                                  (fun (x180 : _) ->
                                                     x179
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x180 0)))|])
        let (addListener' :
          t ->
            event:[ `close ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x189 : t) ->
            fun ~event:(x183 : [ `close ]) ->
              fun
                ~listener:(x184 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x189) "addListener"
                     [|((match x183 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x185 : Ojs.t) ->
                            fun (x187 : Ojs.t) ->
                              x184 ~code:(or_null_of_js Ojs.float_of_js x185)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x187)))|])
        let (addListener'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x192 : t) ->
            fun ~event:(x190 : [ `disconnect ]) ->
              fun ~listener:(x191 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x192) "addListener"
                     [|((match x190 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x191 ()))|])
        let (addListener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x196 : t) ->
            fun ~event:(x193 : [ `error ]) ->
              fun ~listener:(x194 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x196) "addListener"
                     [|((match x193 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x195 : Ojs.t) ->
                            x194 ~err:(Error.t_of_js x195)))|])
        let (addListener'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x203 : t) ->
            fun ~event:(x197 : [ `exit ]) ->
              fun
                ~listener:(x198 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x203) "addListener"
                     [|((match x197 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x199 : Ojs.t) ->
                            fun (x201 : Ojs.t) ->
                              x198 ~code:(or_null_of_js Ojs.float_of_js x199)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x201)))|])
        let (addListener''''' :
          t ->
            event:[ `message ] ->
              listener:(message:child_process_Serializable ->
                          sendHandle:child_process_SendHandle -> unit)
                -> t)
          =
          fun (x208 : t) ->
            fun ~event:(x204 : [ `message ]) ->
              fun
                ~listener:(x205 :
                            message:child_process_Serializable ->
                              sendHandle:child_process_SendHandle -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x208) "addListener"
                     [|((match x204 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x206 : Ojs.t) ->
                            fun (x207 : Ojs.t) ->
                              x205
                                ~message:(child_process_Serializable_of_js
                                            x206)
                                ~sendHandle:(child_process_SendHandle_of_js
                                               x207)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x214 : t) ->
            fun ~event:(x209 : symbol or_string) ->
              fun ~args:(x210 : any list) ->
                Ojs.bool_of_js
                  (let x215 = t_to_js x214 in
                   Ojs.call (Ojs.get_prop_ascii x215 "emit") "apply"
                     [|x215;((let x211 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x211 "push"
                                   [|(or_string_to_js symbol_to_js x209)|]);
                              List.iter
                                (fun (x212 : any) ->
                                   ignore
                                     (Ojs.call x211 "push"
                                        [|(any_to_js x212)|])) x210;
                              x211))|])
        let (emit' :
          t ->
            event:[ `close ] ->
              code:float or_null ->
                signal:Node_process.Process.Signals.t or_null -> bool)
          =
          fun (x221 : t) ->
            fun ~event:(x216 : [ `close ]) ->
              fun ~code:(x217 : float or_null) ->
                fun ~signal:(x219 : Node_process.Process.Signals.t or_null)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x221) "emit"
                       [|((match x216 with
                           | `close -> Ojs.string_to_js "close"));(or_null_to_js
                                                                    Ojs.float_to_js
                                                                    x217);(
                         or_null_to_js Node_process.Process.Signals.t_to_js
                           x219)|])
        let (emit'' : t -> event:[ `disconnect ] -> bool) =
          fun (x223 : t) ->
            fun ~event:(x222 : [ `disconnect ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x223) "emit"
                   [|((match x222 with
                       | `disconnect -> Ojs.string_to_js "disconnect"))|])
        let (emit''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x226 : t) ->
            fun ~event:(x224 : [ `error ]) ->
              fun ~err:(x225 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x226) "emit"
                     [|((match x224 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x225)|])
        let (emit'''' :
          t ->
            event:[ `exit ] ->
              code:float or_null ->
                signal:Node_process.Process.Signals.t or_null -> bool)
          =
          fun (x232 : t) ->
            fun ~event:(x227 : [ `exit ]) ->
              fun ~code:(x228 : float or_null) ->
                fun ~signal:(x230 : Node_process.Process.Signals.t or_null)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x232) "emit"
                       [|((match x227 with | `exit -> Ojs.string_to_js "exit"));(
                         or_null_to_js Ojs.float_to_js x228);(or_null_to_js
                                                                Node_process.Process.Signals.t_to_js
                                                                x230)|])
        let (emit''''' :
          t ->
            event:[ `message ] ->
              message:child_process_Serializable ->
                sendHandle:child_process_SendHandle -> bool)
          =
          fun (x236 : t) ->
            fun ~event:(x233 : [ `message ]) ->
              fun ~message:(x234 : child_process_Serializable) ->
                fun ~sendHandle:(x235 : child_process_SendHandle) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x236) "emit"
                       [|((match x233 with
                           | `message -> Ojs.string_to_js "message"));(
                         child_process_Serializable_to_js x234);(child_process_SendHandle_to_js
                                                                   x235)|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x241 : t) ->
            fun ~event:(x237 : string) ->
              fun ~listener:(x238 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x241) "on"
                     [|(Ojs.string_to_js x237);(Ojs.fun_to_js_args
                                                  (fun (x239 : _) ->
                                                     x238
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x239 0)))|])
        let (on' :
          t ->
            event:[ `close ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x248 : t) ->
            fun ~event:(x242 : [ `close ]) ->
              fun
                ~listener:(x243 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x248) "on"
                     [|((match x242 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x244 : Ojs.t) ->
                            fun (x246 : Ojs.t) ->
                              x243 ~code:(or_null_of_js Ojs.float_of_js x244)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x246)))|])
        let (on'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x251 : t) ->
            fun ~event:(x249 : [ `disconnect ]) ->
              fun ~listener:(x250 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x251) "on"
                     [|((match x249 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x250 ()))|])
        let (on''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x255 : t) ->
            fun ~event:(x252 : [ `error ]) ->
              fun ~listener:(x253 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x255) "on"
                     [|((match x252 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x254 : Ojs.t) ->
                            x253 ~err:(Error.t_of_js x254)))|])
        let (on'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x262 : t) ->
            fun ~event:(x256 : [ `exit ]) ->
              fun
                ~listener:(x257 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x262) "on"
                     [|((match x256 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x258 : Ojs.t) ->
                            fun (x260 : Ojs.t) ->
                              x257 ~code:(or_null_of_js Ojs.float_of_js x258)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x260)))|])
        let (on''''' :
          t ->
            event:[ `message ] ->
              listener:(message:child_process_Serializable ->
                          sendHandle:child_process_SendHandle -> unit)
                -> t)
          =
          fun (x267 : t) ->
            fun ~event:(x263 : [ `message ]) ->
              fun
                ~listener:(x264 :
                            message:child_process_Serializable ->
                              sendHandle:child_process_SendHandle -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x267) "on"
                     [|((match x263 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x265 : Ojs.t) ->
                            fun (x266 : Ojs.t) ->
                              x264
                                ~message:(child_process_Serializable_of_js
                                            x265)
                                ~sendHandle:(child_process_SendHandle_of_js
                                               x266)))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x272 : t) ->
            fun ~event:(x268 : string) ->
              fun ~listener:(x269 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x272) "once"
                     [|(Ojs.string_to_js x268);(Ojs.fun_to_js_args
                                                  (fun (x270 : _) ->
                                                     x269
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x270 0)))|])
        let (once' :
          t ->
            event:[ `close ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x279 : t) ->
            fun ~event:(x273 : [ `close ]) ->
              fun
                ~listener:(x274 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x279) "once"
                     [|((match x273 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x275 : Ojs.t) ->
                            fun (x277 : Ojs.t) ->
                              x274 ~code:(or_null_of_js Ojs.float_of_js x275)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x277)))|])
        let (once'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x282 : t) ->
            fun ~event:(x280 : [ `disconnect ]) ->
              fun ~listener:(x281 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x282) "once"
                     [|((match x280 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x281 ()))|])
        let (once''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x286 : t) ->
            fun ~event:(x283 : [ `error ]) ->
              fun ~listener:(x284 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x286) "once"
                     [|((match x283 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x285 : Ojs.t) ->
                            x284 ~err:(Error.t_of_js x285)))|])
        let (once'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x293 : t) ->
            fun ~event:(x287 : [ `exit ]) ->
              fun
                ~listener:(x288 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x293) "once"
                     [|((match x287 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x289 : Ojs.t) ->
                            fun (x291 : Ojs.t) ->
                              x288 ~code:(or_null_of_js Ojs.float_of_js x289)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x291)))|])
        let (once''''' :
          t ->
            event:[ `message ] ->
              listener:(message:child_process_Serializable ->
                          sendHandle:child_process_SendHandle -> unit)
                -> t)
          =
          fun (x298 : t) ->
            fun ~event:(x294 : [ `message ]) ->
              fun
                ~listener:(x295 :
                            message:child_process_Serializable ->
                              sendHandle:child_process_SendHandle -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x298) "once"
                     [|((match x294 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x296 : Ojs.t) ->
                            fun (x297 : Ojs.t) ->
                              x295
                                ~message:(child_process_Serializable_of_js
                                            x296)
                                ~sendHandle:(child_process_SendHandle_of_js
                                               x297)))|])
        let (prependListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x303 : t) ->
            fun ~event:(x299 : string) ->
              fun ~listener:(x300 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x303) "prependListener"
                     [|(Ojs.string_to_js x299);(Ojs.fun_to_js_args
                                                  (fun (x301 : _) ->
                                                     x300
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x301 0)))|])
        let (prependListener' :
          t ->
            event:[ `close ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x310 : t) ->
            fun ~event:(x304 : [ `close ]) ->
              fun
                ~listener:(x305 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x310) "prependListener"
                     [|((match x304 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x306 : Ojs.t) ->
                            fun (x308 : Ojs.t) ->
                              x305 ~code:(or_null_of_js Ojs.float_of_js x306)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x308)))|])
        let (prependListener'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x313 : t) ->
            fun ~event:(x311 : [ `disconnect ]) ->
              fun ~listener:(x312 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x313) "prependListener"
                     [|((match x311 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x312 ()))|])
        let (prependListener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x317 : t) ->
            fun ~event:(x314 : [ `error ]) ->
              fun ~listener:(x315 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x317) "prependListener"
                     [|((match x314 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x316 : Ojs.t) ->
                            x315 ~err:(Error.t_of_js x316)))|])
        let (prependListener'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x324 : t) ->
            fun ~event:(x318 : [ `exit ]) ->
              fun
                ~listener:(x319 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x324) "prependListener"
                     [|((match x318 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x320 : Ojs.t) ->
                            fun (x322 : Ojs.t) ->
                              x319 ~code:(or_null_of_js Ojs.float_of_js x320)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x322)))|])
        let (prependListener''''' :
          t ->
            event:[ `message ] ->
              listener:(message:child_process_Serializable ->
                          sendHandle:child_process_SendHandle -> unit)
                -> t)
          =
          fun (x329 : t) ->
            fun ~event:(x325 : [ `message ]) ->
              fun
                ~listener:(x326 :
                            message:child_process_Serializable ->
                              sendHandle:child_process_SendHandle -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x329) "prependListener"
                     [|((match x325 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x327 : Ojs.t) ->
                            fun (x328 : Ojs.t) ->
                              x326
                                ~message:(child_process_Serializable_of_js
                                            x327)
                                ~sendHandle:(child_process_SendHandle_of_js
                                               x328)))|])
        let (prependOnceListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x334 : t) ->
            fun ~event:(x330 : string) ->
              fun ~listener:(x331 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x334) "prependOnceListener"
                     [|(Ojs.string_to_js x330);(Ojs.fun_to_js_args
                                                  (fun (x332 : _) ->
                                                     x331
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x332 0)))|])
        let (prependOnceListener' :
          t ->
            event:[ `close ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x341 : t) ->
            fun ~event:(x335 : [ `close ]) ->
              fun
                ~listener:(x336 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x341) "prependOnceListener"
                     [|((match x335 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x337 : Ojs.t) ->
                            fun (x339 : Ojs.t) ->
                              x336 ~code:(or_null_of_js Ojs.float_of_js x337)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x339)))|])
        let (prependOnceListener'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x344 : t) ->
            fun ~event:(x342 : [ `disconnect ]) ->
              fun ~listener:(x343 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x344) "prependOnceListener"
                     [|((match x342 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x343 ()))|])
        let (prependOnceListener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x348 : t) ->
            fun ~event:(x345 : [ `error ]) ->
              fun ~listener:(x346 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x348) "prependOnceListener"
                     [|((match x345 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x347 : Ojs.t) ->
                            x346 ~err:(Error.t_of_js x347)))|])
        let (prependOnceListener'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x355 : t) ->
            fun ~event:(x349 : [ `exit ]) ->
              fun
                ~listener:(x350 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x355) "prependOnceListener"
                     [|((match x349 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x351 : Ojs.t) ->
                            fun (x353 : Ojs.t) ->
                              x350 ~code:(or_null_of_js Ojs.float_of_js x351)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x353)))|])
        let (prependOnceListener''''' :
          t ->
            event:[ `message ] ->
              listener:(message:child_process_Serializable ->
                          sendHandle:child_process_SendHandle -> unit)
                -> t)
          =
          fun (x360 : t) ->
            fun ~event:(x356 : [ `message ]) ->
              fun
                ~listener:(x357 :
                            message:child_process_Serializable ->
                              sendHandle:child_process_SendHandle -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x360) "prependOnceListener"
                     [|((match x356 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x358 : Ojs.t) ->
                            fun (x359 : Ojs.t) ->
                              x357
                                ~message:(child_process_Serializable_of_js
                                            x358)
                                ~sendHandle:(child_process_SendHandle_of_js
                                               x359)))|])
        let (cast : t -> Events.EventEmitter.t) =
          fun (x361 : t) -> Events.EventEmitter.t_of_js (t_to_js x361)
      end
    module ChildProcessWithoutNullStreams =
      struct
        type t = child_process_ChildProcessWithoutNullStreams
        let rec t_of_js : Ojs.t -> t =
          fun (x363 : Ojs.t) ->
            child_process_ChildProcessWithoutNullStreams_of_js x363
        and t_to_js : t -> Ojs.t =
          fun (x362 : child_process_ChildProcessWithoutNullStreams) ->
            child_process_ChildProcessWithoutNullStreams_to_js x362
        let (get_stdin : t -> Node_stream.Stream.Writable.t) =
          fun (x364 : t) ->
            Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x364) "stdin")
        let (set_stdin : t -> Node_stream.Stream.Writable.t -> unit) =
          fun (x365 : t) ->
            fun (x366 : Node_stream.Stream.Writable.t) ->
              Ojs.set_prop_ascii (t_to_js x365) "stdin"
                (Node_stream.Stream.Writable.t_to_js x366)
        let (get_stdout : t -> Node_stream.Stream.Readable.t) =
          fun (x367 : t) ->
            Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x367) "stdout")
        let (set_stdout : t -> Node_stream.Stream.Readable.t -> unit) =
          fun (x368 : t) ->
            fun (x369 : Node_stream.Stream.Readable.t) ->
              Ojs.set_prop_ascii (t_to_js x368) "stdout"
                (Node_stream.Stream.Readable.t_to_js x369)
        let (get_stderr : t -> Node_stream.Stream.Readable.t) =
          fun (x370 : t) ->
            Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x370) "stderr")
        let (set_stderr : t -> Node_stream.Stream.Readable.t -> unit) =
          fun (x371 : t) ->
            fun (x372 : Node_stream.Stream.Readable.t) ->
              Ojs.set_prop_ascii (t_to_js x371) "stderr"
                (Node_stream.Stream.Readable.t_to_js x372)
        let (get_stdio :
          t ->
            (Node_stream.Stream.Writable.t * Node_stream.Stream.Readable.t *
              Node_stream.Stream.Readable.t * (Node_stream.Stream.Readable.t,
              Node_stream.Stream.Writable.t) union2 or_null_or_undefined *
              (Node_stream.Stream.Readable.t, Node_stream.Stream.Writable.t)
              union2 or_null_or_undefined))
          =
          fun (x373 : t) ->
            let x374 = Ojs.get_prop_ascii (t_to_js x373) "stdio" in
            ((Node_stream.Stream.Writable.t_of_js (Ojs.array_get x374 0)),
              (Node_stream.Stream.Readable.t_of_js (Ojs.array_get x374 1)),
              (Node_stream.Stream.Readable.t_of_js (Ojs.array_get x374 2)),
              (or_null_or_undefined_of_js
                 (fun (x375 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x375)
                 (Ojs.array_get x374 3)),
              (or_null_or_undefined_of_js
                 (fun (x378 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x378)
                 (Ojs.array_get x374 4)))
        let (cast : t -> child_process_ChildProcess) =
          fun (x381 : t) -> child_process_ChildProcess_of_js (t_to_js x381)
      end
    module ChildProcessByStdio =
      struct
        type ('I, 'O, 'E) t = ('I, 'O, 'E) child_process_ChildProcessByStdio
        let rec t_of_js :
          'I 'O 'E .
            (Ojs.t -> 'I) ->
              (Ojs.t -> 'O) -> (Ojs.t -> 'E) -> Ojs.t -> ('I, 'O, 'E) t
          = fun (type __I) -> fun (type __O) -> fun (type __E) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (__E_of_js : Ojs.t -> __E) ->
                fun (x386 : Ojs.t) ->
                  child_process_ChildProcessByStdio_of_js __I_of_js __O_of_js
                    __E_of_js x386
        and t_to_js :
          'I 'O 'E .
            ('I -> Ojs.t) ->
              ('O -> Ojs.t) -> ('E -> Ojs.t) -> ('I, 'O, 'E) t -> Ojs.t
          = fun (type __I) -> fun (type __O) -> fun (type __E) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (__E_to_js : __E -> Ojs.t) ->
                fun
                  (x382 : (__I, __O, __E) child_process_ChildProcessByStdio)
                  ->
                  child_process_ChildProcessByStdio_to_js __I_to_js __O_to_js
                    __E_to_js x382
        let (get_stdin : ('I, 'O, 'E) t -> 'I) =
          fun (x390 : ('I, 'O, 'E) t) ->
            Obj.magic
              (Ojs.get_prop_ascii
                 (t_to_js Obj.magic Obj.magic Obj.magic x390) "stdin")
        let (set_stdin : ('I, 'O, 'E) t -> 'I -> unit) =
          fun (x394 : ('I, 'O, 'E) t) ->
            fun (x395 : 'I) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x394)
                "stdin" (Obj.magic x395)
        let (get_stdout : ('I, 'O, 'E) t -> 'O) =
          fun (x399 : ('I, 'O, 'E) t) ->
            Obj.magic
              (Ojs.get_prop_ascii
                 (t_to_js Obj.magic Obj.magic Obj.magic x399) "stdout")
        let (set_stdout : ('I, 'O, 'E) t -> 'O -> unit) =
          fun (x403 : ('I, 'O, 'E) t) ->
            fun (x404 : 'O) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x403)
                "stdout" (Obj.magic x404)
        let (get_stderr : ('I, 'O, 'E) t -> 'E) =
          fun (x408 : ('I, 'O, 'E) t) ->
            Obj.magic
              (Ojs.get_prop_ascii
                 (t_to_js Obj.magic Obj.magic Obj.magic x408) "stderr")
        let (set_stderr : ('I, 'O, 'E) t -> 'E -> unit) =
          fun (x412 : ('I, 'O, 'E) t) ->
            fun (x413 : 'E) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x412)
                "stderr" (Obj.magic x413)
        let (get_stdio :
          ('I, 'O, 'E) t ->
            ('I * 'O * 'E * (Node_stream.Stream.Readable.t,
              Node_stream.Stream.Writable.t) union2 or_null_or_undefined *
              (Node_stream.Stream.Readable.t, Node_stream.Stream.Writable.t)
              union2 or_null_or_undefined))
          =
          fun (x417 : ('I, 'O, 'E) t) ->
            let x421 =
              Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x417)
                "stdio" in
            ((Obj.magic (Ojs.array_get x421 0)),
              (Obj.magic (Ojs.array_get x421 1)),
              (Obj.magic (Ojs.array_get x421 2)),
              (or_null_or_undefined_of_js
                 (fun (x422 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x422)
                 (Ojs.array_get x421 3)),
              (or_null_or_undefined_of_js
                 (fun (x425 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x425)
                 (Ojs.array_get x421 4)))
        let (cast : ('I, 'O, 'E) t -> child_process_ChildProcess) =
          fun (x428 : ('I, 'O, 'E) t) ->
            child_process_ChildProcess_of_js
              (t_to_js Obj.magic Obj.magic Obj.magic x428)
      end
    module MessageOptions =
      struct
        type t = child_process_MessageOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x433 : Ojs.t) -> child_process_MessageOptions_of_js x433
        and t_to_js : t -> Ojs.t =
          fun (x432 : child_process_MessageOptions) ->
            child_process_MessageOptions_to_js x432
        let (get_keepOpen : t -> bool) =
          fun (x434 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x434) "keepOpen")
        let (set_keepOpen : t -> bool -> unit) =
          fun (x435 : t) ->
            fun (x436 : bool) ->
              Ojs.set_prop_ascii (t_to_js x435) "keepOpen"
                (Ojs.bool_to_js x436)
      end
    module StdioOptions =
      struct
        type t = child_process_StdioOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x438 : Ojs.t) -> child_process_StdioOptions_of_js x438
        and t_to_js : t -> Ojs.t =
          fun (x437 : child_process_StdioOptions) ->
            child_process_StdioOptions_to_js x437
      end
    module SerializationType =
      struct
        type t = child_process_SerializationType
        let rec t_of_js : Ojs.t -> t =
          fun (x440 : Ojs.t) -> child_process_SerializationType_of_js x440
        and t_to_js : t -> Ojs.t =
          fun (x439 : child_process_SerializationType) ->
            child_process_SerializationType_to_js x439
      end
    module MessagingOptions =
      struct
        type t = child_process_MessagingOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x442 : Ojs.t) -> child_process_MessagingOptions_of_js x442
        and t_to_js : t -> Ojs.t =
          fun (x441 : child_process_MessagingOptions) ->
            child_process_MessagingOptions_to_js x441
        let (get_serialization : t -> child_process_SerializationType) =
          fun (x443 : t) ->
            child_process_SerializationType_of_js
              (Ojs.get_prop_ascii (t_to_js x443) "serialization")
        let (set_serialization :
          t -> child_process_SerializationType -> unit) =
          fun (x444 : t) ->
            fun (x445 : child_process_SerializationType) ->
              Ojs.set_prop_ascii (t_to_js x444) "serialization"
                (child_process_SerializationType_to_js x445)
      end
    module ProcessEnvOptions =
      struct
        type t = child_process_ProcessEnvOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x447 : Ojs.t) -> child_process_ProcessEnvOptions_of_js x447
        and t_to_js : t -> Ojs.t =
          fun (x446 : child_process_ProcessEnvOptions) ->
            child_process_ProcessEnvOptions_to_js x446
        let (get_uid : t -> float) =
          fun (x448 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x448) "uid")
        let (set_uid : t -> float -> unit) =
          fun (x449 : t) ->
            fun (x450 : float) ->
              Ojs.set_prop_ascii (t_to_js x449) "uid" (Ojs.float_to_js x450)
        let (get_gid : t -> float) =
          fun (x451 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x451) "gid")
        let (set_gid : t -> float -> unit) =
          fun (x452 : t) ->
            fun (x453 : float) ->
              Ojs.set_prop_ascii (t_to_js x452) "gid" (Ojs.float_to_js x453)
        let (get_cwd : t -> string) =
          fun (x454 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x454) "cwd")
        let (set_cwd : t -> string -> unit) =
          fun (x455 : t) ->
            fun (x456 : string) ->
              Ojs.set_prop_ascii (t_to_js x455) "cwd" (Ojs.string_to_js x456)
        let (get_env : t -> Node_process.Process.ProcessEnv.t) =
          fun (x457 : t) ->
            Node_process.Process.ProcessEnv.t_of_js
              (Ojs.get_prop_ascii (t_to_js x457) "env")
        let (set_env : t -> Node_process.Process.ProcessEnv.t -> unit) =
          fun (x458 : t) ->
            fun (x459 : Node_process.Process.ProcessEnv.t) ->
              Ojs.set_prop_ascii (t_to_js x458) "env"
                (Node_process.Process.ProcessEnv.t_to_js x459)
      end
    module CommonOptions =
      struct
        type t = child_process_CommonOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x461 : Ojs.t) -> child_process_CommonOptions_of_js x461
        and t_to_js : t -> Ojs.t =
          fun (x460 : child_process_CommonOptions) ->
            child_process_CommonOptions_to_js x460
        let (get_windowsHide : t -> bool) =
          fun (x462 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x462) "windowsHide")
        let (set_windowsHide : t -> bool -> unit) =
          fun (x463 : t) ->
            fun (x464 : bool) ->
              Ojs.set_prop_ascii (t_to_js x463) "windowsHide"
                (Ojs.bool_to_js x464)
        let (get_timeout : t -> float) =
          fun (x465 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x465) "timeout")
        let (set_timeout : t -> float -> unit) =
          fun (x466 : t) ->
            fun (x467 : float) ->
              Ojs.set_prop_ascii (t_to_js x466) "timeout"
                (Ojs.float_to_js x467)
        let (cast : t -> child_process_ProcessEnvOptions) =
          fun (x468 : t) ->
            child_process_ProcessEnvOptions_of_js (t_to_js x468)
      end
    module CommonSpawnOptions =
      struct
        type t = child_process_CommonSpawnOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x470 : Ojs.t) -> child_process_CommonSpawnOptions_of_js x470
        and t_to_js : t -> Ojs.t =
          fun (x469 : child_process_CommonSpawnOptions) ->
            child_process_CommonSpawnOptions_to_js x469
        let (get_argv0 : t -> string) =
          fun (x471 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x471) "argv0")
        let (set_argv0 : t -> string -> unit) =
          fun (x472 : t) ->
            fun (x473 : string) ->
              Ojs.set_prop_ascii (t_to_js x472) "argv0"
                (Ojs.string_to_js x473)
        let (get_stdio : t -> child_process_StdioOptions) =
          fun (x474 : t) ->
            child_process_StdioOptions_of_js
              (Ojs.get_prop_ascii (t_to_js x474) "stdio")
        let (set_stdio : t -> child_process_StdioOptions -> unit) =
          fun (x475 : t) ->
            fun (x476 : child_process_StdioOptions) ->
              Ojs.set_prop_ascii (t_to_js x475) "stdio"
                (child_process_StdioOptions_to_js x476)
        let (get_shell : t -> bool or_string) =
          fun (x477 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x477) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x479 : t) ->
            fun (x480 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x479) "shell"
                (or_string_to_js Ojs.bool_to_js x480)
        let (get_windowsVerbatimArguments : t -> bool) =
          fun (x482 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x482) "windowsVerbatimArguments")
        let (set_windowsVerbatimArguments : t -> bool -> unit) =
          fun (x483 : t) ->
            fun (x484 : bool) ->
              Ojs.set_prop_ascii (t_to_js x483) "windowsVerbatimArguments"
                (Ojs.bool_to_js x484)
        let (cast : t -> child_process_CommonOptions) =
          fun (x485 : t) -> child_process_CommonOptions_of_js (t_to_js x485)
        let (cast' : t -> child_process_MessagingOptions) =
          fun (x486 : t) ->
            child_process_MessagingOptions_of_js (t_to_js x486)
      end
    module SpawnOptions =
      struct
        type t = child_process_SpawnOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x488 : Ojs.t) -> child_process_SpawnOptions_of_js x488
        and t_to_js : t -> Ojs.t =
          fun (x487 : child_process_SpawnOptions) ->
            child_process_SpawnOptions_to_js x487
        let (get_detached : t -> bool) =
          fun (x489 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x489) "detached")
        let (set_detached : t -> bool -> unit) =
          fun (x490 : t) ->
            fun (x491 : bool) ->
              Ojs.set_prop_ascii (t_to_js x490) "detached"
                (Ojs.bool_to_js x491)
        let (cast : t -> child_process_CommonSpawnOptions) =
          fun (x492 : t) ->
            child_process_CommonSpawnOptions_of_js (t_to_js x492)
      end
    module SpawnOptionsWithoutStdio =
      struct
        type t = child_process_SpawnOptionsWithoutStdio
        let rec t_of_js : Ojs.t -> t =
          fun (x494 : Ojs.t) ->
            child_process_SpawnOptionsWithoutStdio_of_js x494
        and t_to_js : t -> Ojs.t =
          fun (x493 : child_process_SpawnOptionsWithoutStdio) ->
            child_process_SpawnOptionsWithoutStdio_to_js x493
        let (get_stdio :
          t -> ([ `pipe ] or_null_or_undefined list, [ `pipe ]) or_enum) =
          fun (x495 : t) ->
            or_enum_of_js
              (fun (x496 : Ojs.t) ->
                 Ojs.list_of_js
                   (fun (x497 : Ojs.t) ->
                      or_null_or_undefined_of_js
                        (fun (x498 : Ojs.t) ->
                           let x499 = x498 in
                           match Ojs.string_of_js x499 with
                           | "pipe" -> `pipe
                           | _ -> assert false) x497) x496)
              (fun (x500 : Ojs.t) ->
                 let x501 = x500 in
                 match Ojs.string_of_js x501 with
                 | "pipe" -> `pipe
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x495) "stdio")
        let (set_stdio :
          t ->
            ([ `pipe ] or_null_or_undefined list, [ `pipe ]) or_enum -> unit)
          =
          fun (x502 : t) ->
            fun
              (x503 :
                ([ `pipe ] or_null_or_undefined list, [ `pipe ]) or_enum)
              ->
              Ojs.set_prop_ascii (t_to_js x502) "stdio"
                (or_enum_to_js
                   (fun (x504 : [ `pipe ] or_null_or_undefined list) ->
                      Ojs.list_to_js
                        (fun (x505 : [ `pipe ] or_null_or_undefined) ->
                           or_null_or_undefined_to_js
                             (fun (x506 : [ `pipe ]) ->
                                match x506 with
                                | `pipe -> Ojs.string_to_js "pipe") x505)
                        x504)
                   (fun (x507 : [ `pipe ]) ->
                      match x507 with | `pipe -> Ojs.string_to_js "pipe")
                   x503)
        let (cast : t -> child_process_SpawnOptions) =
          fun (x508 : t) -> child_process_SpawnOptions_of_js (t_to_js x508)
      end
    module StdioNull =
      struct
        type t = child_process_StdioNull
        let rec t_of_js : Ojs.t -> t =
          fun (x510 : Ojs.t) -> child_process_StdioNull_of_js x510
        and t_to_js : t -> Ojs.t =
          fun (x509 : child_process_StdioNull) ->
            child_process_StdioNull_to_js x509
      end
    module StdioPipe =
      struct
        type t = child_process_StdioPipe
        let rec t_of_js : Ojs.t -> t =
          fun (x512 : Ojs.t) -> child_process_StdioPipe_of_js x512
        and t_to_js : t -> Ojs.t =
          fun (x511 : child_process_StdioPipe) ->
            child_process_StdioPipe_to_js x511
      end
    module SpawnOptionsWithStdioTuple =
      struct
        type ('Stdin, 'Stdout, 'Stderr) t =
          ('Stdin, 'Stdout, 'Stderr) child_process_SpawnOptionsWithStdioTuple
        let rec t_of_js :
          'Stdin 'Stdout 'Stderr .
            (Ojs.t -> 'Stdin) ->
              (Ojs.t -> 'Stdout) ->
                (Ojs.t -> 'Stderr) -> Ojs.t -> ('Stdin, 'Stdout, 'Stderr) t
          = fun (type __Stdin) -> fun (type __Stdout) -> fun (type __Stderr)
          ->
          fun (__Stdin_of_js : Ojs.t -> __Stdin) ->
            fun (__Stdout_of_js : Ojs.t -> __Stdout) ->
              fun (__Stderr_of_js : Ojs.t -> __Stderr) ->
                fun (x517 : Ojs.t) ->
                  child_process_SpawnOptionsWithStdioTuple_of_js
                    __Stdin_of_js __Stdout_of_js __Stderr_of_js x517
        and t_to_js :
          'Stdin 'Stdout 'Stderr .
            ('Stdin -> Ojs.t) ->
              ('Stdout -> Ojs.t) ->
                ('Stderr -> Ojs.t) -> ('Stdin, 'Stdout, 'Stderr) t -> Ojs.t
          = fun (type __Stdin) -> fun (type __Stdout) -> fun (type __Stderr)
          ->
          fun (__Stdin_to_js : __Stdin -> Ojs.t) ->
            fun (__Stdout_to_js : __Stdout -> Ojs.t) ->
              fun (__Stderr_to_js : __Stderr -> Ojs.t) ->
                fun
                  (x513 :
                    (__Stdin, __Stdout, __Stderr)
                      child_process_SpawnOptionsWithStdioTuple)
                  ->
                  child_process_SpawnOptionsWithStdioTuple_to_js
                    __Stdin_to_js __Stdout_to_js __Stderr_to_js x513
        type ('Stdin, 'Stdout, 'Stderr) t_3 = ('Stdin, 'Stdout, 'Stderr) t
        let rec t_3_of_js :
          'Stdin 'Stdout 'Stderr .
            (Ojs.t -> 'Stdin) ->
              (Ojs.t -> 'Stdout) ->
                (Ojs.t -> 'Stderr) -> Ojs.t -> ('Stdin, 'Stdout, 'Stderr) t_3
          = fun (type __Stdin) -> fun (type __Stdout) -> fun (type __Stderr)
          ->
          fun (__Stdin_of_js : Ojs.t -> __Stdin) ->
            fun (__Stdout_of_js : Ojs.t -> __Stdout) ->
              fun (__Stderr_of_js : Ojs.t -> __Stderr) ->
                fun (x525 : Ojs.t) ->
                  t_of_js __Stdin_of_js __Stdout_of_js __Stderr_of_js x525
        and t_3_to_js :
          'Stdin 'Stdout 'Stderr .
            ('Stdin -> Ojs.t) ->
              ('Stdout -> Ojs.t) ->
                ('Stderr -> Ojs.t) -> ('Stdin, 'Stdout, 'Stderr) t_3 -> Ojs.t
          = fun (type __Stdin) -> fun (type __Stdout) -> fun (type __Stderr)
          ->
          fun (__Stdin_to_js : __Stdin -> Ojs.t) ->
            fun (__Stdout_to_js : __Stdout -> Ojs.t) ->
              fun (__Stderr_to_js : __Stderr -> Ojs.t) ->
                fun (x521 : (__Stdin, __Stdout, __Stderr) t) ->
                  t_to_js __Stdin_to_js __Stdout_to_js __Stderr_to_js x521
        let (get_stdio :
          ('Stdin, 'Stdout, 'Stderr) t -> ('Stdin * 'Stdout * 'Stderr)) =
          fun (x529 : ('Stdin, 'Stdout, 'Stderr) t) ->
            let x533 =
              Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x529)
                "stdio" in
            ((Obj.magic (Ojs.array_get x533 0)),
              (Obj.magic (Ojs.array_get x533 1)),
              (Obj.magic (Ojs.array_get x533 2)))
        let (set_stdio :
          ('Stdin, 'Stdout, 'Stderr) t ->
            ('Stdin * 'Stdout * 'Stderr) -> unit)
          =
          fun (x534 : ('Stdin, 'Stdout, 'Stderr) t) ->
            fun (x535 : ('Stdin * 'Stdout * 'Stderr)) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x534)
                "stdio"
                (let (x536, x537, x538) = x535 in
                 let x539 = Ojs.array_make 3 in
                 Ojs.array_set x539 0 (Obj.magic x536);
                 Ojs.array_set x539 1 (Obj.magic x537);
                 Ojs.array_set x539 2 (Obj.magic x538);
                 x539)
        let (cast :
          ('Stdin, 'Stdout, 'Stderr) t -> child_process_SpawnOptions) =
          fun (x543 : ('Stdin, 'Stdout, 'Stderr) t) ->
            child_process_SpawnOptions_of_js
              (t_to_js Obj.magic Obj.magic Obj.magic x543)
      end
    let (spawn :
      command:string ->
        ?options:child_process_SpawnOptionsWithoutStdio ->
          unit -> child_process_ChildProcessWithoutNullStreams)
      =
      fun ~command:(x547 : string) ->
        fun ?options:(x548 : child_process_SpawnOptionsWithoutStdio option)
          ->
          fun () ->
            child_process_ChildProcessWithoutNullStreams_of_js
              (let x551 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x551 "spawn") "apply"
                 [|x551;((let x549 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x549 "push" [|(Ojs.string_to_js x547)|]);
                          (match x548 with
                           | Some x550 ->
                               ignore
                                 (Ojs.call x549 "push"
                                    [|(child_process_SpawnOptionsWithoutStdio_to_js
                                         x550)|])
                           | None -> ());
                          x549))|])
    let (spawn :
      command:string ->
        options:(child_process_StdioPipe, child_process_StdioPipe,
          child_process_StdioPipe) child_process_SpawnOptionsWithStdioTuple
          ->
          (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
            Node_stream.Stream.Readable.t) child_process_ChildProcessByStdio)
      =
      fun ~command:(x552 : string) ->
        fun
          ~options:(x553 :
                     (child_process_StdioPipe, child_process_StdioPipe,
                       child_process_StdioPipe)
                       child_process_SpawnOptionsWithStdioTuple)
          ->
          child_process_ChildProcessByStdio_of_js
            Node_stream.Stream.Writable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x552);(child_process_SpawnOptionsWithStdioTuple_to_js
                                            child_process_StdioPipe_to_js
                                            child_process_StdioPipe_to_js
                                            child_process_StdioPipe_to_js
                                            x553)|])
    let (spawn :
      command:string ->
        options:(child_process_StdioPipe, child_process_StdioPipe,
          child_process_StdioNull) child_process_SpawnOptionsWithStdioTuple
          ->
          (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
            never or_null) child_process_ChildProcessByStdio)
      =
      fun ~command:(x560 : string) ->
        fun
          ~options:(x561 :
                     (child_process_StdioPipe, child_process_StdioPipe,
                       child_process_StdioNull)
                       child_process_SpawnOptionsWithStdioTuple)
          ->
          child_process_ChildProcessByStdio_of_js
            Node_stream.Stream.Writable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            (fun (x567 : Ojs.t) -> or_null_of_js never_of_js x567)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x560);(child_process_SpawnOptionsWithStdioTuple_to_js
                                            child_process_StdioPipe_to_js
                                            child_process_StdioPipe_to_js
                                            child_process_StdioNull_to_js
                                            x561)|])
    let (spawn :
      command:string ->
        options:(child_process_StdioPipe, child_process_StdioNull,
          child_process_StdioPipe) child_process_SpawnOptionsWithStdioTuple
          ->
          (Node_stream.Stream.Writable.t, never or_null,
            Node_stream.Stream.Readable.t) child_process_ChildProcessByStdio)
      =
      fun ~command:(x569 : string) ->
        fun
          ~options:(x570 :
                     (child_process_StdioPipe, child_process_StdioNull,
                       child_process_StdioPipe)
                       child_process_SpawnOptionsWithStdioTuple)
          ->
          child_process_ChildProcessByStdio_of_js
            Node_stream.Stream.Writable.t_of_js
            (fun (x575 : Ojs.t) -> or_null_of_js never_of_js x575)
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x569);(child_process_SpawnOptionsWithStdioTuple_to_js
                                            child_process_StdioPipe_to_js
                                            child_process_StdioNull_to_js
                                            child_process_StdioPipe_to_js
                                            x570)|])
    let (spawn :
      command:string ->
        options:(child_process_StdioNull, child_process_StdioPipe,
          child_process_StdioPipe) child_process_SpawnOptionsWithStdioTuple
          ->
          (never or_null, Node_stream.Stream.Readable.t,
            Node_stream.Stream.Readable.t) child_process_ChildProcessByStdio)
      =
      fun ~command:(x578 : string) ->
        fun
          ~options:(x579 :
                     (child_process_StdioNull, child_process_StdioPipe,
                       child_process_StdioPipe)
                       child_process_SpawnOptionsWithStdioTuple)
          ->
          child_process_ChildProcessByStdio_of_js
            (fun (x583 : Ojs.t) -> or_null_of_js never_of_js x583)
            Node_stream.Stream.Readable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x578);(child_process_SpawnOptionsWithStdioTuple_to_js
                                            child_process_StdioNull_to_js
                                            child_process_StdioPipe_to_js
                                            child_process_StdioPipe_to_js
                                            x579)|])
    let (spawn :
      command:string ->
        options:(child_process_StdioPipe, child_process_StdioNull,
          child_process_StdioNull) child_process_SpawnOptionsWithStdioTuple
          ->
          (Node_stream.Stream.Writable.t, never or_null, never or_null)
            child_process_ChildProcessByStdio)
      =
      fun ~command:(x587 : string) ->
        fun
          ~options:(x588 :
                     (child_process_StdioPipe, child_process_StdioNull,
                       child_process_StdioNull)
                       child_process_SpawnOptionsWithStdioTuple)
          ->
          child_process_ChildProcessByStdio_of_js
            Node_stream.Stream.Writable.t_of_js
            (fun (x593 : Ojs.t) -> or_null_of_js never_of_js x593)
            (fun (x595 : Ojs.t) -> or_null_of_js never_of_js x595)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x587);(child_process_SpawnOptionsWithStdioTuple_to_js
                                            child_process_StdioPipe_to_js
                                            child_process_StdioNull_to_js
                                            child_process_StdioNull_to_js
                                            x588)|])
    let (spawn :
      command:string ->
        options:(child_process_StdioNull, child_process_StdioPipe,
          child_process_StdioNull) child_process_SpawnOptionsWithStdioTuple
          ->
          (never or_null, Node_stream.Stream.Readable.t, never or_null)
            child_process_ChildProcessByStdio)
      =
      fun ~command:(x597 : string) ->
        fun
          ~options:(x598 :
                     (child_process_StdioNull, child_process_StdioPipe,
                       child_process_StdioNull)
                       child_process_SpawnOptionsWithStdioTuple)
          ->
          child_process_ChildProcessByStdio_of_js
            (fun (x602 : Ojs.t) -> or_null_of_js never_of_js x602)
            Node_stream.Stream.Readable.t_of_js
            (fun (x605 : Ojs.t) -> or_null_of_js never_of_js x605)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x597);(child_process_SpawnOptionsWithStdioTuple_to_js
                                            child_process_StdioNull_to_js
                                            child_process_StdioPipe_to_js
                                            child_process_StdioNull_to_js
                                            x598)|])
    let (spawn :
      command:string ->
        options:(child_process_StdioNull, child_process_StdioNull,
          child_process_StdioPipe) child_process_SpawnOptionsWithStdioTuple
          ->
          (never or_null, never or_null, Node_stream.Stream.Readable.t)
            child_process_ChildProcessByStdio)
      =
      fun ~command:(x607 : string) ->
        fun
          ~options:(x608 :
                     (child_process_StdioNull, child_process_StdioNull,
                       child_process_StdioPipe)
                       child_process_SpawnOptionsWithStdioTuple)
          ->
          child_process_ChildProcessByStdio_of_js
            (fun (x612 : Ojs.t) -> or_null_of_js never_of_js x612)
            (fun (x614 : Ojs.t) -> or_null_of_js never_of_js x614)
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x607);(child_process_SpawnOptionsWithStdioTuple_to_js
                                            child_process_StdioNull_to_js
                                            child_process_StdioNull_to_js
                                            child_process_StdioPipe_to_js
                                            x608)|])
    let (spawn :
      command:string ->
        options:(child_process_StdioNull, child_process_StdioNull,
          child_process_StdioNull) child_process_SpawnOptionsWithStdioTuple
          ->
          (never or_null, never or_null, never or_null)
            child_process_ChildProcessByStdio)
      =
      fun ~command:(x617 : string) ->
        fun
          ~options:(x618 :
                     (child_process_StdioNull, child_process_StdioNull,
                       child_process_StdioNull)
                       child_process_SpawnOptionsWithStdioTuple)
          ->
          child_process_ChildProcessByStdio_of_js
            (fun (x622 : Ojs.t) -> or_null_of_js never_of_js x622)
            (fun (x624 : Ojs.t) -> or_null_of_js never_of_js x624)
            (fun (x626 : Ojs.t) -> or_null_of_js never_of_js x626)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x617);(child_process_SpawnOptionsWithStdioTuple_to_js
                                            child_process_StdioNull_to_js
                                            child_process_StdioNull_to_js
                                            child_process_StdioNull_to_js
                                            x618)|])
    let (spawn :
      command:string ->
        options:child_process_SpawnOptions -> child_process_ChildProcess)
      =
      fun ~command:(x628 : string) ->
        fun ~options:(x629 : child_process_SpawnOptions) ->
          child_process_ChildProcess_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x628);(child_process_SpawnOptions_to_js
                                            x629)|])
    let (spawn :
      command:string ->
        ?args:string list ->
          ?options:child_process_SpawnOptionsWithoutStdio ->
            unit -> child_process_ChildProcessWithoutNullStreams)
      =
      fun ~command:(x630 : string) ->
        fun ?args:(x631 : string list option) ->
          fun ?options:(x632 : child_process_SpawnOptionsWithoutStdio option)
            ->
            fun () ->
              child_process_ChildProcessWithoutNullStreams_of_js
                (let x637 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x637 "spawn") "apply"
                   [|x637;((let x633 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x633 "push"
                                 [|(Ojs.string_to_js x630)|]);
                            (match x631 with
                             | Some x635 ->
                                 ignore
                                   (Ojs.call x633 "push"
                                      [|(Ojs.list_to_js Ojs.string_to_js x635)|])
                             | None -> ());
                            (match x632 with
                             | Some x634 ->
                                 ignore
                                   (Ojs.call x633 "push"
                                      [|(child_process_SpawnOptionsWithoutStdio_to_js
                                           x634)|])
                             | None -> ());
                            x633))|])
    let (spawn :
      command:string ->
        args:string list ->
          options:(child_process_StdioPipe, child_process_StdioPipe,
            child_process_StdioPipe) child_process_SpawnOptionsWithStdioTuple
            ->
            (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
              Node_stream.Stream.Readable.t)
              child_process_ChildProcessByStdio)
      =
      fun ~command:(x638 : string) ->
        fun ~args:(x639 : string list) ->
          fun
            ~options:(x641 :
                       (child_process_StdioPipe, child_process_StdioPipe,
                         child_process_StdioPipe)
                         child_process_SpawnOptionsWithStdioTuple)
            ->
            child_process_ChildProcessByStdio_of_js
              Node_stream.Stream.Writable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x638);(Ojs.list_to_js Ojs.string_to_js
                                              x639);(child_process_SpawnOptionsWithStdioTuple_to_js
                                                       child_process_StdioPipe_to_js
                                                       child_process_StdioPipe_to_js
                                                       child_process_StdioPipe_to_js
                                                       x641)|])
    let (spawn :
      command:string ->
        args:string list ->
          options:(child_process_StdioPipe, child_process_StdioPipe,
            child_process_StdioNull) child_process_SpawnOptionsWithStdioTuple
            ->
            (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
              never or_null) child_process_ChildProcessByStdio)
      =
      fun ~command:(x648 : string) ->
        fun ~args:(x649 : string list) ->
          fun
            ~options:(x651 :
                       (child_process_StdioPipe, child_process_StdioPipe,
                         child_process_StdioNull)
                         child_process_SpawnOptionsWithStdioTuple)
            ->
            child_process_ChildProcessByStdio_of_js
              Node_stream.Stream.Writable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              (fun (x657 : Ojs.t) -> or_null_of_js never_of_js x657)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x648);(Ojs.list_to_js Ojs.string_to_js
                                              x649);(child_process_SpawnOptionsWithStdioTuple_to_js
                                                       child_process_StdioPipe_to_js
                                                       child_process_StdioPipe_to_js
                                                       child_process_StdioNull_to_js
                                                       x651)|])
    let (spawn :
      command:string ->
        args:string list ->
          options:(child_process_StdioPipe, child_process_StdioNull,
            child_process_StdioPipe) child_process_SpawnOptionsWithStdioTuple
            ->
            (Node_stream.Stream.Writable.t, never or_null,
              Node_stream.Stream.Readable.t)
              child_process_ChildProcessByStdio)
      =
      fun ~command:(x659 : string) ->
        fun ~args:(x660 : string list) ->
          fun
            ~options:(x662 :
                       (child_process_StdioPipe, child_process_StdioNull,
                         child_process_StdioPipe)
                         child_process_SpawnOptionsWithStdioTuple)
            ->
            child_process_ChildProcessByStdio_of_js
              Node_stream.Stream.Writable.t_of_js
              (fun (x667 : Ojs.t) -> or_null_of_js never_of_js x667)
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x659);(Ojs.list_to_js Ojs.string_to_js
                                              x660);(child_process_SpawnOptionsWithStdioTuple_to_js
                                                       child_process_StdioPipe_to_js
                                                       child_process_StdioNull_to_js
                                                       child_process_StdioPipe_to_js
                                                       x662)|])
    let (spawn :
      command:string ->
        args:string list ->
          options:(child_process_StdioNull, child_process_StdioPipe,
            child_process_StdioPipe) child_process_SpawnOptionsWithStdioTuple
            ->
            (never or_null, Node_stream.Stream.Readable.t,
              Node_stream.Stream.Readable.t)
              child_process_ChildProcessByStdio)
      =
      fun ~command:(x670 : string) ->
        fun ~args:(x671 : string list) ->
          fun
            ~options:(x673 :
                       (child_process_StdioNull, child_process_StdioPipe,
                         child_process_StdioPipe)
                         child_process_SpawnOptionsWithStdioTuple)
            ->
            child_process_ChildProcessByStdio_of_js
              (fun (x677 : Ojs.t) -> or_null_of_js never_of_js x677)
              Node_stream.Stream.Readable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x670);(Ojs.list_to_js Ojs.string_to_js
                                              x671);(child_process_SpawnOptionsWithStdioTuple_to_js
                                                       child_process_StdioNull_to_js
                                                       child_process_StdioPipe_to_js
                                                       child_process_StdioPipe_to_js
                                                       x673)|])
    let (spawn :
      command:string ->
        args:string list ->
          options:(child_process_StdioPipe, child_process_StdioNull,
            child_process_StdioNull) child_process_SpawnOptionsWithStdioTuple
            ->
            (Node_stream.Stream.Writable.t, never or_null, never or_null)
              child_process_ChildProcessByStdio)
      =
      fun ~command:(x681 : string) ->
        fun ~args:(x682 : string list) ->
          fun
            ~options:(x684 :
                       (child_process_StdioPipe, child_process_StdioNull,
                         child_process_StdioNull)
                         child_process_SpawnOptionsWithStdioTuple)
            ->
            child_process_ChildProcessByStdio_of_js
              Node_stream.Stream.Writable.t_of_js
              (fun (x689 : Ojs.t) -> or_null_of_js never_of_js x689)
              (fun (x691 : Ojs.t) -> or_null_of_js never_of_js x691)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x681);(Ojs.list_to_js Ojs.string_to_js
                                              x682);(child_process_SpawnOptionsWithStdioTuple_to_js
                                                       child_process_StdioPipe_to_js
                                                       child_process_StdioNull_to_js
                                                       child_process_StdioNull_to_js
                                                       x684)|])
    let (spawn :
      command:string ->
        args:string list ->
          options:(child_process_StdioNull, child_process_StdioPipe,
            child_process_StdioNull) child_process_SpawnOptionsWithStdioTuple
            ->
            (never or_null, Node_stream.Stream.Readable.t, never or_null)
              child_process_ChildProcessByStdio)
      =
      fun ~command:(x693 : string) ->
        fun ~args:(x694 : string list) ->
          fun
            ~options:(x696 :
                       (child_process_StdioNull, child_process_StdioPipe,
                         child_process_StdioNull)
                         child_process_SpawnOptionsWithStdioTuple)
            ->
            child_process_ChildProcessByStdio_of_js
              (fun (x700 : Ojs.t) -> or_null_of_js never_of_js x700)
              Node_stream.Stream.Readable.t_of_js
              (fun (x703 : Ojs.t) -> or_null_of_js never_of_js x703)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x693);(Ojs.list_to_js Ojs.string_to_js
                                              x694);(child_process_SpawnOptionsWithStdioTuple_to_js
                                                       child_process_StdioNull_to_js
                                                       child_process_StdioPipe_to_js
                                                       child_process_StdioNull_to_js
                                                       x696)|])
    let (spawn :
      command:string ->
        args:string list ->
          options:(child_process_StdioNull, child_process_StdioNull,
            child_process_StdioPipe) child_process_SpawnOptionsWithStdioTuple
            ->
            (never or_null, never or_null, Node_stream.Stream.Readable.t)
              child_process_ChildProcessByStdio)
      =
      fun ~command:(x705 : string) ->
        fun ~args:(x706 : string list) ->
          fun
            ~options:(x708 :
                       (child_process_StdioNull, child_process_StdioNull,
                         child_process_StdioPipe)
                         child_process_SpawnOptionsWithStdioTuple)
            ->
            child_process_ChildProcessByStdio_of_js
              (fun (x712 : Ojs.t) -> or_null_of_js never_of_js x712)
              (fun (x714 : Ojs.t) -> or_null_of_js never_of_js x714)
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x705);(Ojs.list_to_js Ojs.string_to_js
                                              x706);(child_process_SpawnOptionsWithStdioTuple_to_js
                                                       child_process_StdioNull_to_js
                                                       child_process_StdioNull_to_js
                                                       child_process_StdioPipe_to_js
                                                       x708)|])
    let (spawn :
      command:string ->
        args:string list ->
          options:(child_process_StdioNull, child_process_StdioNull,
            child_process_StdioNull) child_process_SpawnOptionsWithStdioTuple
            ->
            (never or_null, never or_null, never or_null)
              child_process_ChildProcessByStdio)
      =
      fun ~command:(x717 : string) ->
        fun ~args:(x718 : string list) ->
          fun
            ~options:(x720 :
                       (child_process_StdioNull, child_process_StdioNull,
                         child_process_StdioNull)
                         child_process_SpawnOptionsWithStdioTuple)
            ->
            child_process_ChildProcessByStdio_of_js
              (fun (x724 : Ojs.t) -> or_null_of_js never_of_js x724)
              (fun (x726 : Ojs.t) -> or_null_of_js never_of_js x726)
              (fun (x728 : Ojs.t) -> or_null_of_js never_of_js x728)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x717);(Ojs.list_to_js Ojs.string_to_js
                                              x718);(child_process_SpawnOptionsWithStdioTuple_to_js
                                                       child_process_StdioNull_to_js
                                                       child_process_StdioNull_to_js
                                                       child_process_StdioNull_to_js
                                                       x720)|])
    let (spawn :
      command:string ->
        args:string list ->
          options:child_process_SpawnOptions -> child_process_ChildProcess)
      =
      fun ~command:(x730 : string) ->
        fun ~args:(x731 : string list) ->
          fun ~options:(x733 : child_process_SpawnOptions) ->
            child_process_ChildProcess_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x730);(Ojs.list_to_js Ojs.string_to_js
                                              x731);(child_process_SpawnOptions_to_js
                                                       x733)|])
    module ExecOptions =
      struct
        type t = child_process_ExecOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x735 : Ojs.t) -> child_process_ExecOptions_of_js x735
        and t_to_js : t -> Ojs.t =
          fun (x734 : child_process_ExecOptions) ->
            child_process_ExecOptions_to_js x734
        let (get_shell : t -> string) =
          fun (x736 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x736) "shell")
        let (set_shell : t -> string -> unit) =
          fun (x737 : t) ->
            fun (x738 : string) ->
              Ojs.set_prop_ascii (t_to_js x737) "shell"
                (Ojs.string_to_js x738)
        let (get_maxBuffer : t -> float) =
          fun (x739 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x739) "maxBuffer")
        let (set_maxBuffer : t -> float -> unit) =
          fun (x740 : t) ->
            fun (x741 : float) ->
              Ojs.set_prop_ascii (t_to_js x740) "maxBuffer"
                (Ojs.float_to_js x741)
        let (get_killSignal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x742 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x742) "killSignal")
        let (set_killSignal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x744 : t) ->
            fun (x745 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x744) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x745)
        let (cast : t -> child_process_CommonOptions) =
          fun (x747 : t) -> child_process_CommonOptions_of_js (t_to_js x747)
      end
    module ExecOptionsWithStringEncoding =
      struct
        type t = child_process_ExecOptionsWithStringEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x749 : Ojs.t) ->
            child_process_ExecOptionsWithStringEncoding_of_js x749
        and t_to_js : t -> Ojs.t =
          fun (x748 : child_process_ExecOptionsWithStringEncoding) ->
            child_process_ExecOptionsWithStringEncoding_to_js x748
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x750 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x750) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x751 : t) ->
            fun (x752 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x751) "encoding"
                (BufferEncoding.t_to_js x752)
        let (cast : t -> child_process_ExecOptions) =
          fun (x753 : t) -> child_process_ExecOptions_of_js (t_to_js x753)
      end
    module ExecOptionsWithBufferEncoding =
      struct
        type t = child_process_ExecOptionsWithBufferEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x755 : Ojs.t) ->
            child_process_ExecOptionsWithBufferEncoding_of_js x755
        and t_to_js : t -> Ojs.t =
          fun (x754 : child_process_ExecOptionsWithBufferEncoding) ->
            child_process_ExecOptionsWithBufferEncoding_to_js x754
        let (get_encoding : t -> BufferEncoding.t or_null) =
          fun (x756 : t) ->
            or_null_of_js BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x756) "encoding")
        let (set_encoding : t -> BufferEncoding.t or_null -> unit) =
          fun (x758 : t) ->
            fun (x759 : BufferEncoding.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x758) "encoding"
                (or_null_to_js BufferEncoding.t_to_js x759)
        let (cast : t -> child_process_ExecOptions) =
          fun (x761 : t) -> child_process_ExecOptions_of_js (t_to_js x761)
      end
    module ExecException =
      struct
        type t = child_process_ExecException
        let rec t_of_js : Ojs.t -> t =
          fun (x763 : Ojs.t) -> child_process_ExecException_of_js x763
        and t_to_js : t -> Ojs.t =
          fun (x762 : child_process_ExecException) ->
            child_process_ExecException_to_js x762
        let (get_cmd : t -> string) =
          fun (x764 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x764) "cmd")
        let (set_cmd : t -> string -> unit) =
          fun (x765 : t) ->
            fun (x766 : string) ->
              Ojs.set_prop_ascii (t_to_js x765) "cmd" (Ojs.string_to_js x766)
        let (get_killed : t -> bool) =
          fun (x767 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x767) "killed")
        let (set_killed : t -> bool -> unit) =
          fun (x768 : t) ->
            fun (x769 : bool) ->
              Ojs.set_prop_ascii (t_to_js x768) "killed"
                (Ojs.bool_to_js x769)
        let (get_code : t -> float) =
          fun (x770 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x770) "code")
        let (set_code : t -> float -> unit) =
          fun (x771 : t) ->
            fun (x772 : float) ->
              Ojs.set_prop_ascii (t_to_js x771) "code" (Ojs.float_to_js x772)
        let (get_signal : t -> Node_process.Process.Signals.t) =
          fun (x773 : t) ->
            Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x773) "signal")
        let (set_signal : t -> Node_process.Process.Signals.t -> unit) =
          fun (x774 : t) ->
            fun (x775 : Node_process.Process.Signals.t) ->
              Ojs.set_prop_ascii (t_to_js x774) "signal"
                (Node_process.Process.Signals.t_to_js x775)
        let (cast : t -> Error.t) =
          fun (x776 : t) -> Error.t_of_js (t_to_js x776)
      end
    let (exec :
      command:string ->
        ?callback:(error:child_process_ExecException or_null ->
                     stdout:string -> stderr:string -> unit)
          -> unit -> child_process_ChildProcess)
      =
      fun ~command:(x777 : string) ->
        fun
          ?callback:(x778 :
                      (error:child_process_ExecException or_null ->
                         stdout:string -> stderr:string -> unit)
                        option)
          ->
          fun () ->
            child_process_ChildProcess_of_js
              (let x785 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x785 "exec") "apply"
                 [|x785;((let x779 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x779 "push" [|(Ojs.string_to_js x777)|]);
                          (match x778 with
                           | Some x780 ->
                               ignore
                                 (Ojs.call x779 "push"
                                    [|(Ojs.fun_to_js 3
                                         (fun (x781 : Ojs.t) ->
                                            fun (x783 : Ojs.t) ->
                                              fun (x784 : Ojs.t) ->
                                                x780
                                                  ~error:(or_null_of_js
                                                            child_process_ExecException_of_js
                                                            x781)
                                                  ~stdout:(Ojs.string_of_js
                                                             x783)
                                                  ~stderr:(Ojs.string_of_js
                                                             x784)))|])
                           | None -> ());
                          x779))|])
    let (exec :
      command:string ->
        options:(anonymous_interface_1, child_process_ExecOptions)
          intersection2 ->
          ?callback:(error:child_process_ExecException or_null ->
                       stdout:Buffer.t -> stderr:Buffer.t -> unit)
            -> unit -> child_process_ChildProcess)
      =
      fun ~command:(x786 : string) ->
        fun
          ~options:(x787 :
                     (anonymous_interface_1, child_process_ExecOptions)
                       intersection2)
          ->
          fun
            ?callback:(x788 :
                        (error:child_process_ExecException or_null ->
                           stdout:Buffer.t -> stderr:Buffer.t -> unit)
                          option)
            ->
            fun () ->
              child_process_ChildProcess_of_js
                (let x797 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x797 "exec") "apply"
                   [|x797;((let x789 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x789 "push"
                                 [|(Ojs.string_to_js x786)|]);
                            ignore
                              (Ojs.call x789 "push"
                                 [|(intersection2_to_js
                                      anonymous_interface_1_to_js
                                      child_process_ExecOptions_to_js x787)|]);
                            (match x788 with
                             | Some x790 ->
                                 ignore
                                   (Ojs.call x789 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x791 : Ojs.t) ->
                                              fun (x793 : Ojs.t) ->
                                                fun (x794 : Ojs.t) ->
                                                  x790
                                                    ~error:(or_null_of_js
                                                              child_process_ExecException_of_js
                                                              x791)
                                                    ~stdout:(Buffer.t_of_js
                                                               x793)
                                                    ~stderr:(Buffer.t_of_js
                                                               x794)))|])
                             | None -> ());
                            x789))|])
    let (exec :
      command:string ->
        options:(anonymous_interface_0, child_process_ExecOptions)
          intersection2 ->
          ?callback:(error:child_process_ExecException or_null ->
                       stdout:string -> stderr:string -> unit)
            -> unit -> child_process_ChildProcess)
      =
      fun ~command:(x798 : string) ->
        fun
          ~options:(x799 :
                     (anonymous_interface_0, child_process_ExecOptions)
                       intersection2)
          ->
          fun
            ?callback:(x800 :
                        (error:child_process_ExecException or_null ->
                           stdout:string -> stderr:string -> unit)
                          option)
            ->
            fun () ->
              child_process_ChildProcess_of_js
                (let x809 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x809 "exec") "apply"
                   [|x809;((let x801 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x801 "push"
                                 [|(Ojs.string_to_js x798)|]);
                            ignore
                              (Ojs.call x801 "push"
                                 [|(intersection2_to_js
                                      anonymous_interface_0_to_js
                                      child_process_ExecOptions_to_js x799)|]);
                            (match x800 with
                             | Some x802 ->
                                 ignore
                                   (Ojs.call x801 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x803 : Ojs.t) ->
                                              fun (x805 : Ojs.t) ->
                                                fun (x806 : Ojs.t) ->
                                                  x802
                                                    ~error:(or_null_of_js
                                                              child_process_ExecException_of_js
                                                              x803)
                                                    ~stdout:(Ojs.string_of_js
                                                               x805)
                                                    ~stderr:(Ojs.string_of_js
                                                               x806)))|])
                             | None -> ());
                            x801))|])
    let (exec :
      command:string ->
        options:(anonymous_interface_0, child_process_ExecOptions)
          intersection2 ->
          ?callback:(error:child_process_ExecException or_null ->
                       stdout:Buffer.t or_string ->
                         stderr:Buffer.t or_string -> unit)
            -> unit -> child_process_ChildProcess)
      =
      fun ~command:(x810 : string) ->
        fun
          ~options:(x811 :
                     (anonymous_interface_0, child_process_ExecOptions)
                       intersection2)
          ->
          fun
            ?callback:(x812 :
                        (error:child_process_ExecException or_null ->
                           stdout:Buffer.t or_string ->
                             stderr:Buffer.t or_string -> unit)
                          option)
            ->
            fun () ->
              child_process_ChildProcess_of_js
                (let x823 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x823 "exec") "apply"
                   [|x823;((let x813 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x813 "push"
                                 [|(Ojs.string_to_js x810)|]);
                            ignore
                              (Ojs.call x813 "push"
                                 [|(intersection2_to_js
                                      anonymous_interface_0_to_js
                                      child_process_ExecOptions_to_js x811)|]);
                            (match x812 with
                             | Some x814 ->
                                 ignore
                                   (Ojs.call x813 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x815 : Ojs.t) ->
                                              fun (x817 : Ojs.t) ->
                                                fun (x819 : Ojs.t) ->
                                                  x814
                                                    ~error:(or_null_of_js
                                                              child_process_ExecException_of_js
                                                              x815)
                                                    ~stdout:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x817)
                                                    ~stderr:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x819)))|])
                             | None -> ());
                            x813))|])
    let (exec :
      command:string ->
        options:child_process_ExecOptions ->
          ?callback:(error:child_process_ExecException or_null ->
                       stdout:string -> stderr:string -> unit)
            -> unit -> child_process_ChildProcess)
      =
      fun ~command:(x824 : string) ->
        fun ~options:(x825 : child_process_ExecOptions) ->
          fun
            ?callback:(x826 :
                        (error:child_process_ExecException or_null ->
                           stdout:string -> stderr:string -> unit)
                          option)
            ->
            fun () ->
              child_process_ChildProcess_of_js
                (let x833 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x833 "exec") "apply"
                   [|x833;((let x827 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x827 "push"
                                 [|(Ojs.string_to_js x824)|]);
                            ignore
                              (Ojs.call x827 "push"
                                 [|(child_process_ExecOptions_to_js x825)|]);
                            (match x826 with
                             | Some x828 ->
                                 ignore
                                   (Ojs.call x827 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x829 : Ojs.t) ->
                                              fun (x831 : Ojs.t) ->
                                                fun (x832 : Ojs.t) ->
                                                  x828
                                                    ~error:(or_null_of_js
                                                              child_process_ExecException_of_js
                                                              x829)
                                                    ~stdout:(Ojs.string_of_js
                                                               x831)
                                                    ~stderr:(Ojs.string_of_js
                                                               x832)))|])
                             | None -> ());
                            x827))|])
    let (exec :
      command:string ->
        options:(Node_fs.Fs.BaseEncodingOptions.t, child_process_ExecOptions)
          intersection2 or_null_or_undefined ->
          ?callback:(error:child_process_ExecException or_null ->
                       stdout:Buffer.t or_string ->
                         stderr:Buffer.t or_string -> unit)
            -> unit -> child_process_ChildProcess)
      =
      fun ~command:(x834 : string) ->
        fun
          ~options:(x835 :
                     (Node_fs.Fs.BaseEncodingOptions.t,
                       child_process_ExecOptions) intersection2
                       or_null_or_undefined)
          ->
          fun
            ?callback:(x836 :
                        (error:child_process_ExecException or_null ->
                           stdout:Buffer.t or_string ->
                             stderr:Buffer.t or_string -> unit)
                          option)
            ->
            fun () ->
              child_process_ChildProcess_of_js
                (let x848 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x848 "exec") "apply"
                   [|x848;((let x837 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x837 "push"
                                 [|(Ojs.string_to_js x834)|]);
                            ignore
                              (Ojs.call x837 "push"
                                 [|(or_null_or_undefined_to_js
                                      (fun
                                         (x845 :
                                           (Node_fs.Fs.BaseEncodingOptions.t,
                                             child_process_ExecOptions)
                                             intersection2)
                                         ->
                                         intersection2_to_js
                                           Node_fs.Fs.BaseEncodingOptions.t_to_js
                                           child_process_ExecOptions_to_js
                                           x845) x835)|]);
                            (match x836 with
                             | Some x838 ->
                                 ignore
                                   (Ojs.call x837 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x839 : Ojs.t) ->
                                              fun (x841 : Ojs.t) ->
                                                fun (x843 : Ojs.t) ->
                                                  x838
                                                    ~error:(or_null_of_js
                                                              child_process_ExecException_of_js
                                                              x839)
                                                    ~stdout:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x841)
                                                    ~stderr:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x843)))|])
                             | None -> ());
                            x837))|])
    module PromiseWithChild =
      struct
        type 'T t = 'T child_process_PromiseWithChild
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x851 : Ojs.t) ->
              child_process_PromiseWithChild_of_js __T_of_js x851
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x849 : __T child_process_PromiseWithChild) ->
              child_process_PromiseWithChild_to_js __T_to_js x849
        let (get_child : 'T t -> child_process_ChildProcess) =
          fun (x853 : 'T t) ->
            child_process_ChildProcess_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x853) "child")
        let (set_child : 'T t -> child_process_ChildProcess -> unit) =
          fun (x855 : 'T t) ->
            fun (x856 : child_process_ChildProcess) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x855) "child"
                (child_process_ChildProcess_to_js x856)
        let (cast : 'T t -> 'T Promise.t) =
          fun (x858 : 'T t) ->
            Promise.t_of_js Obj.magic (t_to_js Obj.magic x858)
      end
    module Exec =
      struct
        let (__promisify__ :
          command:string ->
            anonymous_interface_3 child_process_PromiseWithChild)
          =
          fun ~command:(x861 : string) ->
            child_process_PromiseWithChild_of_js anonymous_interface_3_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                 "__promisify__" [|(Ojs.string_to_js x861)|])
        let (__promisify__ :
          command:string ->
            options:(anonymous_interface_1, child_process_ExecOptions)
              intersection2 ->
              anonymous_interface_2 child_process_PromiseWithChild)
          =
          fun ~command:(x863 : string) ->
            fun
              ~options:(x864 :
                         (anonymous_interface_1, child_process_ExecOptions)
                           intersection2)
              ->
              child_process_PromiseWithChild_of_js
                anonymous_interface_2_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                   "__promisify__"
                   [|(Ojs.string_to_js x863);(intersection2_to_js
                                                anonymous_interface_1_to_js
                                                child_process_ExecOptions_to_js
                                                x864)|])
        let (__promisify__ :
          command:string ->
            options:(anonymous_interface_0, child_process_ExecOptions)
              intersection2 ->
              anonymous_interface_3 child_process_PromiseWithChild)
          =
          fun ~command:(x868 : string) ->
            fun
              ~options:(x869 :
                         (anonymous_interface_0, child_process_ExecOptions)
                           intersection2)
              ->
              child_process_PromiseWithChild_of_js
                anonymous_interface_3_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                   "__promisify__"
                   [|(Ojs.string_to_js x868);(intersection2_to_js
                                                anonymous_interface_0_to_js
                                                child_process_ExecOptions_to_js
                                                x869)|])
        let (__promisify__ :
          command:string ->
            options:child_process_ExecOptions ->
              anonymous_interface_3 child_process_PromiseWithChild)
          =
          fun ~command:(x873 : string) ->
            fun ~options:(x874 : child_process_ExecOptions) ->
              child_process_PromiseWithChild_of_js
                anonymous_interface_3_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                   "__promisify__"
                   [|(Ojs.string_to_js x873);(child_process_ExecOptions_to_js
                                                x874)|])
        let (__promisify__ :
          command:string ->
            ?options:(Node_fs.Fs.BaseEncodingOptions.t,
              child_process_ExecOptions) intersection2 or_null ->
              unit -> anonymous_interface_4 child_process_PromiseWithChild)
          =
          fun ~command:(x876 : string) ->
            fun
              ?options:(x877 :
                         (Node_fs.Fs.BaseEncodingOptions.t,
                           child_process_ExecOptions) intersection2 or_null
                           option)
              ->
              fun () ->
                child_process_PromiseWithChild_of_js
                  anonymous_interface_4_of_js
                  (let x883 = Ojs.get_prop_ascii Import.child_process "exec" in
                   Ojs.call (Ojs.get_prop_ascii x883 "__promisify__") "apply"
                     [|x883;((let x878 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x878 "push"
                                   [|(Ojs.string_to_js x876)|]);
                              (match x877 with
                               | Some x879 ->
                                   ignore
                                     (Ojs.call x878 "push"
                                        [|(or_null_to_js
                                             (fun
                                                (x880 :
                                                  (Node_fs.Fs.BaseEncodingOptions.t,
                                                    child_process_ExecOptions)
                                                    intersection2)
                                                ->
                                                intersection2_to_js
                                                  Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                  child_process_ExecOptions_to_js
                                                  x880) x879)|])
                               | None -> ());
                              x878))|])
      end
    module ExecFileOptions =
      struct
        type t = child_process_ExecFileOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x886 : Ojs.t) -> child_process_ExecFileOptions_of_js x886
        and t_to_js : t -> Ojs.t =
          fun (x885 : child_process_ExecFileOptions) ->
            child_process_ExecFileOptions_to_js x885
        let (get_maxBuffer : t -> float) =
          fun (x887 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x887) "maxBuffer")
        let (set_maxBuffer : t -> float -> unit) =
          fun (x888 : t) ->
            fun (x889 : float) ->
              Ojs.set_prop_ascii (t_to_js x888) "maxBuffer"
                (Ojs.float_to_js x889)
        let (get_killSignal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x890 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x890) "killSignal")
        let (set_killSignal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x892 : t) ->
            fun (x893 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x892) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x893)
        let (get_windowsVerbatimArguments : t -> bool) =
          fun (x895 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x895) "windowsVerbatimArguments")
        let (set_windowsVerbatimArguments : t -> bool -> unit) =
          fun (x896 : t) ->
            fun (x897 : bool) ->
              Ojs.set_prop_ascii (t_to_js x896) "windowsVerbatimArguments"
                (Ojs.bool_to_js x897)
        let (get_shell : t -> bool or_string) =
          fun (x898 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x898) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x900 : t) ->
            fun (x901 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x900) "shell"
                (or_string_to_js Ojs.bool_to_js x901)
        let (cast : t -> child_process_CommonOptions) =
          fun (x903 : t) -> child_process_CommonOptions_of_js (t_to_js x903)
      end
    module ExecFileOptionsWithStringEncoding =
      struct
        type t = child_process_ExecFileOptionsWithStringEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x905 : Ojs.t) ->
            child_process_ExecFileOptionsWithStringEncoding_of_js x905
        and t_to_js : t -> Ojs.t =
          fun (x904 : child_process_ExecFileOptionsWithStringEncoding) ->
            child_process_ExecFileOptionsWithStringEncoding_to_js x904
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x906 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x906) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x907 : t) ->
            fun (x908 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x907) "encoding"
                (BufferEncoding.t_to_js x908)
        let (cast : t -> child_process_ExecFileOptions) =
          fun (x909 : t) ->
            child_process_ExecFileOptions_of_js (t_to_js x909)
      end
    module ExecFileOptionsWithBufferEncoding =
      struct
        type t = child_process_ExecFileOptionsWithBufferEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x911 : Ojs.t) ->
            child_process_ExecFileOptionsWithBufferEncoding_of_js x911
        and t_to_js : t -> Ojs.t =
          fun (x910 : child_process_ExecFileOptionsWithBufferEncoding) ->
            child_process_ExecFileOptionsWithBufferEncoding_to_js x910
        let (get_encoding : t -> [ `buffer ] or_null) =
          fun (x912 : t) ->
            or_null_of_js
              (fun (x913 : Ojs.t) ->
                 let x914 = x913 in
                 match Ojs.string_of_js x914 with
                 | "buffer" -> `buffer
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x912) "encoding")
        let (set_encoding : t -> [ `buffer ] or_null -> unit) =
          fun (x915 : t) ->
            fun (x916 : [ `buffer ] or_null) ->
              Ojs.set_prop_ascii (t_to_js x915) "encoding"
                (or_null_to_js
                   (fun (x917 : [ `buffer ]) ->
                      match x917 with | `buffer -> Ojs.string_to_js "buffer")
                   x916)
        let (cast : t -> child_process_ExecFileOptions) =
          fun (x918 : t) ->
            child_process_ExecFileOptions_of_js (t_to_js x918)
      end
    module ExecFileOptionsWithOtherEncoding =
      struct
        type t = child_process_ExecFileOptionsWithOtherEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x920 : Ojs.t) ->
            child_process_ExecFileOptionsWithOtherEncoding_of_js x920
        and t_to_js : t -> Ojs.t =
          fun (x919 : child_process_ExecFileOptionsWithOtherEncoding) ->
            child_process_ExecFileOptionsWithOtherEncoding_to_js x919
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x921 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x921) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x922 : t) ->
            fun (x923 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x922) "encoding"
                (BufferEncoding.t_to_js x923)
        let (cast : t -> child_process_ExecFileOptions) =
          fun (x924 : t) ->
            child_process_ExecFileOptions_of_js (t_to_js x924)
      end
    module ExecFileException =
      struct
        type t = child_process_ExecFileException
        let rec t_of_js : Ojs.t -> t =
          fun (x926 : Ojs.t) -> child_process_ExecFileException_of_js x926
        and t_to_js : t -> Ojs.t =
          fun (x925 : child_process_ExecFileException) ->
            child_process_ExecFileException_to_js x925
      end
    let (execFile : file:string -> child_process_ChildProcess) =
      fun ~file:(x927 : string) ->
        child_process_ChildProcess_of_js
          (Ojs.call Import.child_process "execFile"
             [|(Ojs.string_to_js x927)|])
    let (execFile :
      file:string ->
        options:(Node_fs.Fs.BaseEncodingOptions.t,
          child_process_ExecFileOptions) intersection2 or_null_or_undefined
          -> child_process_ChildProcess)
      =
      fun ~file:(x928 : string) ->
        fun
          ~options:(x929 :
                     (Node_fs.Fs.BaseEncodingOptions.t,
                       child_process_ExecFileOptions) intersection2
                       or_null_or_undefined)
          ->
          child_process_ChildProcess_of_js
            (Ojs.call Import.child_process "execFile"
               [|(Ojs.string_to_js x928);(or_null_or_undefined_to_js
                                            (fun
                                               (x930 :
                                                 (Node_fs.Fs.BaseEncodingOptions.t,
                                                   child_process_ExecFileOptions)
                                                   intersection2)
                                               ->
                                               intersection2_to_js
                                                 Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                 child_process_ExecFileOptions_to_js
                                                 x930) x929)|])
    let (execFile :
      file:string ->
        ?args:string list or_null -> unit -> child_process_ChildProcess)
      =
      fun ~file:(x933 : string) ->
        fun ?args:(x934 : string list or_null option) ->
          fun () ->
            child_process_ChildProcess_of_js
              (let x939 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x939 "execFile") "apply"
                 [|x939;((let x935 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x935 "push" [|(Ojs.string_to_js x933)|]);
                          (match x934 with
                           | Some x936 ->
                               ignore
                                 (Ojs.call x935 "push"
                                    [|(or_null_to_js
                                         (fun (x937 : string list) ->
                                            Ojs.list_to_js Ojs.string_to_js
                                              x937) x936)|])
                           | None -> ());
                          x935))|])
    let (execFile :
      file:string ->
        args:string list or_null_or_undefined ->
          options:(Node_fs.Fs.BaseEncodingOptions.t,
            child_process_ExecFileOptions) intersection2 or_null_or_undefined
            -> child_process_ChildProcess)
      =
      fun ~file:(x940 : string) ->
        fun ~args:(x941 : string list or_null_or_undefined) ->
          fun
            ~options:(x944 :
                       (Node_fs.Fs.BaseEncodingOptions.t,
                         child_process_ExecFileOptions) intersection2
                         or_null_or_undefined)
            ->
            child_process_ChildProcess_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x940);(or_null_or_undefined_to_js
                                              (fun (x942 : string list) ->
                                                 Ojs.list_to_js
                                                   Ojs.string_to_js x942)
                                              x941);(or_null_or_undefined_to_js
                                                       (fun
                                                          (x945 :
                                                            (Node_fs.Fs.BaseEncodingOptions.t,
                                                              child_process_ExecFileOptions)
                                                              intersection2)
                                                          ->
                                                          intersection2_to_js
                                                            Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                            child_process_ExecFileOptions_to_js
                                                            x945) x944)|])
    let (execFile :
      file:string ->
        callback:(error:child_process_ExecFileException or_null ->
                    stdout:string -> stderr:string -> unit)
          -> child_process_ChildProcess)
      =
      fun ~file:(x948 : string) ->
        fun
          ~callback:(x949 :
                      error:child_process_ExecFileException or_null ->
                        stdout:string -> stderr:string -> unit)
          ->
          child_process_ChildProcess_of_js
            (Ojs.call Import.child_process "execFile"
               [|(Ojs.string_to_js x948);(Ojs.fun_to_js 3
                                            (fun (x950 : Ojs.t) ->
                                               fun (x952 : Ojs.t) ->
                                                 fun (x953 : Ojs.t) ->
                                                   x949
                                                     ~error:(or_null_of_js
                                                               child_process_ExecFileException_of_js
                                                               x950)
                                                     ~stdout:(Ojs.string_of_js
                                                                x952)
                                                     ~stderr:(Ojs.string_of_js
                                                                x953)))|])
    let (execFile :
      file:string ->
        args:string list or_null_or_undefined ->
          callback:(error:child_process_ExecFileException or_null ->
                      stdout:string -> stderr:string -> unit)
            -> child_process_ChildProcess)
      =
      fun ~file:(x954 : string) ->
        fun ~args:(x955 : string list or_null_or_undefined) ->
          fun
            ~callback:(x958 :
                        error:child_process_ExecFileException or_null ->
                          stdout:string -> stderr:string -> unit)
            ->
            child_process_ChildProcess_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x954);(or_null_or_undefined_to_js
                                              (fun (x956 : string list) ->
                                                 Ojs.list_to_js
                                                   Ojs.string_to_js x956)
                                              x955);(Ojs.fun_to_js 3
                                                       (fun (x959 : Ojs.t) ->
                                                          fun (x961 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x962 : Ojs.t)
                                                              ->
                                                              x958
                                                                ~error:(
                                                                or_null_of_js
                                                                  child_process_ExecFileException_of_js
                                                                  x959)
                                                                ~stdout:(
                                                                Ojs.string_of_js
                                                                  x961)
                                                                ~stderr:(
                                                                Ojs.string_of_js
                                                                  x962)))|])
    let (execFile :
      file:string ->
        options:child_process_ExecFileOptionsWithBufferEncoding ->
          callback:(error:child_process_ExecFileException or_null ->
                      stdout:Buffer.t -> stderr:Buffer.t -> unit)
            -> child_process_ChildProcess)
      =
      fun ~file:(x963 : string) ->
        fun ~options:(x964 : child_process_ExecFileOptionsWithBufferEncoding)
          ->
          fun
            ~callback:(x965 :
                        error:child_process_ExecFileException or_null ->
                          stdout:Buffer.t -> stderr:Buffer.t -> unit)
            ->
            child_process_ChildProcess_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x963);(child_process_ExecFileOptionsWithBufferEncoding_to_js
                                              x964);(Ojs.fun_to_js 3
                                                       (fun (x966 : Ojs.t) ->
                                                          fun (x968 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x969 : Ojs.t)
                                                              ->
                                                              x965
                                                                ~error:(
                                                                or_null_of_js
                                                                  child_process_ExecFileException_of_js
                                                                  x966)
                                                                ~stdout:(
                                                                Buffer.t_of_js
                                                                  x968)
                                                                ~stderr:(
                                                                Buffer.t_of_js
                                                                  x969)))|])
    let (execFile :
      file:string ->
        args:string list or_null_or_undefined ->
          options:child_process_ExecFileOptionsWithBufferEncoding ->
            callback:(error:child_process_ExecFileException or_null ->
                        stdout:Buffer.t -> stderr:Buffer.t -> unit)
              -> child_process_ChildProcess)
      =
      fun ~file:(x970 : string) ->
        fun ~args:(x971 : string list or_null_or_undefined) ->
          fun
            ~options:(x974 : child_process_ExecFileOptionsWithBufferEncoding)
            ->
            fun
              ~callback:(x975 :
                          error:child_process_ExecFileException or_null ->
                            stdout:Buffer.t -> stderr:Buffer.t -> unit)
              ->
              child_process_ChildProcess_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x970);(or_null_or_undefined_to_js
                                                (fun (x972 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x972)
                                                x971);(child_process_ExecFileOptionsWithBufferEncoding_to_js
                                                         x974);(Ojs.fun_to_js
                                                                  3
                                                                  (fun
                                                                    (x976 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x978 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x979 :
                                                                    Ojs.t) ->
                                                                    x975
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    child_process_ExecFileException_of_js
                                                                    x976)
                                                                    ~stdout:(
                                                                    Buffer.t_of_js
                                                                    x978)
                                                                    ~stderr:(
                                                                    Buffer.t_of_js
                                                                    x979)))|])
    let (execFile :
      file:string ->
        options:child_process_ExecFileOptionsWithStringEncoding ->
          callback:(error:child_process_ExecFileException or_null ->
                      stdout:string -> stderr:string -> unit)
            -> child_process_ChildProcess)
      =
      fun ~file:(x980 : string) ->
        fun ~options:(x981 : child_process_ExecFileOptionsWithStringEncoding)
          ->
          fun
            ~callback:(x982 :
                        error:child_process_ExecFileException or_null ->
                          stdout:string -> stderr:string -> unit)
            ->
            child_process_ChildProcess_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x980);(child_process_ExecFileOptionsWithStringEncoding_to_js
                                              x981);(Ojs.fun_to_js 3
                                                       (fun (x983 : Ojs.t) ->
                                                          fun (x985 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x986 : Ojs.t)
                                                              ->
                                                              x982
                                                                ~error:(
                                                                or_null_of_js
                                                                  child_process_ExecFileException_of_js
                                                                  x983)
                                                                ~stdout:(
                                                                Ojs.string_of_js
                                                                  x985)
                                                                ~stderr:(
                                                                Ojs.string_of_js
                                                                  x986)))|])
    let (execFile :
      file:string ->
        args:string list or_null_or_undefined ->
          options:child_process_ExecFileOptionsWithStringEncoding ->
            callback:(error:child_process_ExecFileException or_null ->
                        stdout:string -> stderr:string -> unit)
              -> child_process_ChildProcess)
      =
      fun ~file:(x987 : string) ->
        fun ~args:(x988 : string list or_null_or_undefined) ->
          fun
            ~options:(x991 : child_process_ExecFileOptionsWithStringEncoding)
            ->
            fun
              ~callback:(x992 :
                          error:child_process_ExecFileException or_null ->
                            stdout:string -> stderr:string -> unit)
              ->
              child_process_ChildProcess_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x987);(or_null_or_undefined_to_js
                                                (fun (x989 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x989)
                                                x988);(child_process_ExecFileOptionsWithStringEncoding_to_js
                                                         x991);(Ojs.fun_to_js
                                                                  3
                                                                  (fun
                                                                    (x993 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x995 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x996 :
                                                                    Ojs.t) ->
                                                                    x992
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    child_process_ExecFileException_of_js
                                                                    x993)
                                                                    ~stdout:(
                                                                    Ojs.string_of_js
                                                                    x995)
                                                                    ~stderr:(
                                                                    Ojs.string_of_js
                                                                    x996)))|])
    let (execFile :
      file:string ->
        options:child_process_ExecFileOptionsWithOtherEncoding ->
          callback:(error:child_process_ExecFileException or_null ->
                      stdout:Buffer.t or_string ->
                        stderr:Buffer.t or_string -> unit)
            -> child_process_ChildProcess)
      =
      fun ~file:(x997 : string) ->
        fun ~options:(x998 : child_process_ExecFileOptionsWithOtherEncoding)
          ->
          fun
            ~callback:(x999 :
                        error:child_process_ExecFileException or_null ->
                          stdout:Buffer.t or_string ->
                            stderr:Buffer.t or_string -> unit)
            ->
            child_process_ChildProcess_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x997);(child_process_ExecFileOptionsWithOtherEncoding_to_js
                                              x998);(Ojs.fun_to_js 3
                                                       (fun (x1000 : Ojs.t)
                                                          ->
                                                          fun (x1002 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x1004 : Ojs.t)
                                                              ->
                                                              x999
                                                                ~error:(
                                                                or_null_of_js
                                                                  child_process_ExecFileException_of_js
                                                                  x1000)
                                                                ~stdout:(
                                                                or_string_of_js
                                                                  Buffer.t_of_js
                                                                  x1002)
                                                                ~stderr:(
                                                                or_string_of_js
                                                                  Buffer.t_of_js
                                                                  x1004)))|])
    let (execFile :
      file:string ->
        args:string list or_null_or_undefined ->
          options:child_process_ExecFileOptionsWithOtherEncoding ->
            callback:(error:child_process_ExecFileException or_null ->
                        stdout:Buffer.t or_string ->
                          stderr:Buffer.t or_string -> unit)
              -> child_process_ChildProcess)
      =
      fun ~file:(x1006 : string) ->
        fun ~args:(x1007 : string list or_null_or_undefined) ->
          fun
            ~options:(x1010 : child_process_ExecFileOptionsWithOtherEncoding)
            ->
            fun
              ~callback:(x1011 :
                          error:child_process_ExecFileException or_null ->
                            stdout:Buffer.t or_string ->
                              stderr:Buffer.t or_string -> unit)
              ->
              child_process_ChildProcess_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x1006);(or_null_or_undefined_to_js
                                                 (fun (x1008 : string list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Ojs.string_to_js x1008)
                                                 x1007);(child_process_ExecFileOptionsWithOtherEncoding_to_js
                                                           x1010);(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1012 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1014 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1016 :
                                                                    Ojs.t) ->
                                                                    x1011
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    child_process_ExecFileException_of_js
                                                                    x1012)
                                                                    ~stdout:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1014)
                                                                    ~stderr:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1016)))|])
    let (execFile :
      file:string ->
        options:child_process_ExecFileOptions ->
          callback:(error:child_process_ExecFileException or_null ->
                      stdout:string -> stderr:string -> unit)
            -> child_process_ChildProcess)
      =
      fun ~file:(x1018 : string) ->
        fun ~options:(x1019 : child_process_ExecFileOptions) ->
          fun
            ~callback:(x1020 :
                        error:child_process_ExecFileException or_null ->
                          stdout:string -> stderr:string -> unit)
            ->
            child_process_ChildProcess_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x1018);(child_process_ExecFileOptions_to_js
                                               x1019);(Ojs.fun_to_js 3
                                                         (fun (x1021 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x1023 : Ojs.t)
                                                              ->
                                                              fun
                                                                (x1024 :
                                                                  Ojs.t)
                                                                ->
                                                                x1020
                                                                  ~error:(
                                                                  or_null_of_js
                                                                    child_process_ExecFileException_of_js
                                                                    x1021)
                                                                  ~stdout:(
                                                                  Ojs.string_of_js
                                                                    x1023)
                                                                  ~stderr:(
                                                                  Ojs.string_of_js
                                                                    x1024)))|])
    let (execFile :
      file:string ->
        args:string list or_null_or_undefined ->
          options:child_process_ExecFileOptions ->
            callback:(error:child_process_ExecFileException or_null ->
                        stdout:string -> stderr:string -> unit)
              -> child_process_ChildProcess)
      =
      fun ~file:(x1025 : string) ->
        fun ~args:(x1026 : string list or_null_or_undefined) ->
          fun ~options:(x1029 : child_process_ExecFileOptions) ->
            fun
              ~callback:(x1030 :
                          error:child_process_ExecFileException or_null ->
                            stdout:string -> stderr:string -> unit)
              ->
              child_process_ChildProcess_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x1025);(or_null_or_undefined_to_js
                                                 (fun (x1027 : string list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Ojs.string_to_js x1027)
                                                 x1026);(child_process_ExecFileOptions_to_js
                                                           x1029);(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1031 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1033 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1034 :
                                                                    Ojs.t) ->
                                                                    x1030
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    child_process_ExecFileException_of_js
                                                                    x1031)
                                                                    ~stdout:(
                                                                    Ojs.string_of_js
                                                                    x1033)
                                                                    ~stderr:(
                                                                    Ojs.string_of_js
                                                                    x1034)))|])
    let (execFile :
      file:string ->
        options:(Node_fs.Fs.BaseEncodingOptions.t,
          child_process_ExecFileOptions) intersection2 or_null_or_undefined
          ->
          callback:(error:child_process_ExecFileException or_null ->
                      stdout:Buffer.t or_string ->
                        stderr:Buffer.t or_string -> unit)
            or_null_or_undefined -> child_process_ChildProcess)
      =
      fun ~file:(x1035 : string) ->
        fun
          ~options:(x1036 :
                     (Node_fs.Fs.BaseEncodingOptions.t,
                       child_process_ExecFileOptions) intersection2
                       or_null_or_undefined)
          ->
          fun
            ~callback:(x1040 :
                        (error:child_process_ExecFileException or_null ->
                           stdout:Buffer.t or_string ->
                             stderr:Buffer.t or_string -> unit)
                          or_null_or_undefined)
            ->
            child_process_ChildProcess_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x1035);(or_null_or_undefined_to_js
                                               (fun
                                                  (x1037 :
                                                    (Node_fs.Fs.BaseEncodingOptions.t,
                                                      child_process_ExecFileOptions)
                                                      intersection2)
                                                  ->
                                                  intersection2_to_js
                                                    Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                    child_process_ExecFileOptions_to_js
                                                    x1037) x1036);(or_null_or_undefined_to_js
                                                                    (fun
                                                                    (x1041 :
                                                                    error:child_process_ExecFileException
                                                                    or_null
                                                                    ->
                                                                    stdout:Buffer.t
                                                                    or_string
                                                                    ->
                                                                    stderr:Buffer.t
                                                                    or_string
                                                                    -> 
                                                                    unit) ->
                                                                    Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1042 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1044 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1046 :
                                                                    Ojs.t) ->
                                                                    x1041
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    child_process_ExecFileException_of_js
                                                                    x1042)
                                                                    ~stdout:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1044)
                                                                    ~stderr:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1046)))
                                                                    x1040)|])
    let (execFile :
      file:string ->
        args:string list or_null_or_undefined ->
          options:(Node_fs.Fs.BaseEncodingOptions.t,
            child_process_ExecFileOptions) intersection2 or_null_or_undefined
            ->
            callback:(error:child_process_ExecFileException or_null ->
                        stdout:Buffer.t or_string ->
                          stderr:Buffer.t or_string -> unit)
              or_null_or_undefined -> child_process_ChildProcess)
      =
      fun ~file:(x1048 : string) ->
        fun ~args:(x1049 : string list or_null_or_undefined) ->
          fun
            ~options:(x1052 :
                       (Node_fs.Fs.BaseEncodingOptions.t,
                         child_process_ExecFileOptions) intersection2
                         or_null_or_undefined)
            ->
            fun
              ~callback:(x1056 :
                          (error:child_process_ExecFileException or_null ->
                             stdout:Buffer.t or_string ->
                               stderr:Buffer.t or_string -> unit)
                            or_null_or_undefined)
              ->
              child_process_ChildProcess_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x1048);(or_null_or_undefined_to_js
                                                 (fun (x1050 : string list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Ojs.string_to_js x1050)
                                                 x1049);(or_null_or_undefined_to_js
                                                           (fun
                                                              (x1053 :
                                                                (Node_fs.Fs.BaseEncodingOptions.t,
                                                                  child_process_ExecFileOptions)
                                                                  intersection2)
                                                              ->
                                                              intersection2_to_js
                                                                Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                                child_process_ExecFileOptions_to_js
                                                                x1053) x1052);(
                     or_null_or_undefined_to_js
                       (fun
                          (x1057 :
                            error:child_process_ExecFileException or_null ->
                              stdout:Buffer.t or_string ->
                                stderr:Buffer.t or_string -> unit)
                          ->
                          Ojs.fun_to_js 3
                            (fun (x1058 : Ojs.t) ->
                               fun (x1060 : Ojs.t) ->
                                 fun (x1062 : Ojs.t) ->
                                   x1057
                                     ~error:(or_null_of_js
                                               child_process_ExecFileException_of_js
                                               x1058)
                                     ~stdout:(or_string_of_js Buffer.t_of_js
                                                x1060)
                                     ~stderr:(or_string_of_js Buffer.t_of_js
                                                x1062))) x1056)|])
    module ExecFile =
      struct
        let (__promisify__ :
          file:string -> anonymous_interface_3 child_process_PromiseWithChild)
          =
          fun ~file:(x1064 : string) ->
            child_process_PromiseWithChild_of_js anonymous_interface_3_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.child_process "execFile")
                 "__promisify__" [|(Ojs.string_to_js x1064)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              anonymous_interface_3 child_process_PromiseWithChild)
          =
          fun ~file:(x1066 : string) ->
            fun ~args:(x1067 : string list or_null_or_undefined) ->
              child_process_PromiseWithChild_of_js
                anonymous_interface_3_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1066);(or_null_or_undefined_to_js
                                                 (fun (x1068 : string list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Ojs.string_to_js x1068)
                                                 x1067)|])
        let (__promisify__ :
          file:string ->
            options:child_process_ExecFileOptionsWithBufferEncoding ->
              anonymous_interface_2 child_process_PromiseWithChild)
          =
          fun ~file:(x1071 : string) ->
            fun
              ~options:(x1072 :
                         child_process_ExecFileOptionsWithBufferEncoding)
              ->
              child_process_PromiseWithChild_of_js
                anonymous_interface_2_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1071);(child_process_ExecFileOptionsWithBufferEncoding_to_js
                                                 x1072)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:child_process_ExecFileOptionsWithBufferEncoding ->
                anonymous_interface_2 child_process_PromiseWithChild)
          =
          fun ~file:(x1074 : string) ->
            fun ~args:(x1075 : string list or_null_or_undefined) ->
              fun
                ~options:(x1078 :
                           child_process_ExecFileOptionsWithBufferEncoding)
                ->
                child_process_PromiseWithChild_of_js
                  anonymous_interface_2_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1074);(or_null_or_undefined_to_js
                                                   (fun (x1076 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1076) x1075);(
                       child_process_ExecFileOptionsWithBufferEncoding_to_js
                         x1078)|])
        let (__promisify__ :
          file:string ->
            options:child_process_ExecFileOptionsWithStringEncoding ->
              anonymous_interface_3 child_process_PromiseWithChild)
          =
          fun ~file:(x1080 : string) ->
            fun
              ~options:(x1081 :
                         child_process_ExecFileOptionsWithStringEncoding)
              ->
              child_process_PromiseWithChild_of_js
                anonymous_interface_3_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1080);(child_process_ExecFileOptionsWithStringEncoding_to_js
                                                 x1081)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:child_process_ExecFileOptionsWithStringEncoding ->
                anonymous_interface_3 child_process_PromiseWithChild)
          =
          fun ~file:(x1083 : string) ->
            fun ~args:(x1084 : string list or_null_or_undefined) ->
              fun
                ~options:(x1087 :
                           child_process_ExecFileOptionsWithStringEncoding)
                ->
                child_process_PromiseWithChild_of_js
                  anonymous_interface_3_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1083);(or_null_or_undefined_to_js
                                                   (fun (x1085 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1085) x1084);(
                       child_process_ExecFileOptionsWithStringEncoding_to_js
                         x1087)|])
        let (__promisify__ :
          file:string ->
            options:child_process_ExecFileOptionsWithOtherEncoding ->
              anonymous_interface_4 child_process_PromiseWithChild)
          =
          fun ~file:(x1089 : string) ->
            fun
              ~options:(x1090 :
                         child_process_ExecFileOptionsWithOtherEncoding)
              ->
              child_process_PromiseWithChild_of_js
                anonymous_interface_4_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1089);(child_process_ExecFileOptionsWithOtherEncoding_to_js
                                                 x1090)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:child_process_ExecFileOptionsWithOtherEncoding ->
                anonymous_interface_4 child_process_PromiseWithChild)
          =
          fun ~file:(x1092 : string) ->
            fun ~args:(x1093 : string list or_null_or_undefined) ->
              fun
                ~options:(x1096 :
                           child_process_ExecFileOptionsWithOtherEncoding)
                ->
                child_process_PromiseWithChild_of_js
                  anonymous_interface_4_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1092);(or_null_or_undefined_to_js
                                                   (fun (x1094 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1094) x1093);(
                       child_process_ExecFileOptionsWithOtherEncoding_to_js
                         x1096)|])
        let (__promisify__ :
          file:string ->
            options:child_process_ExecFileOptions ->
              anonymous_interface_3 child_process_PromiseWithChild)
          =
          fun ~file:(x1098 : string) ->
            fun ~options:(x1099 : child_process_ExecFileOptions) ->
              child_process_PromiseWithChild_of_js
                anonymous_interface_3_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1098);(child_process_ExecFileOptions_to_js
                                                 x1099)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:child_process_ExecFileOptions ->
                anonymous_interface_3 child_process_PromiseWithChild)
          =
          fun ~file:(x1101 : string) ->
            fun ~args:(x1102 : string list or_null_or_undefined) ->
              fun ~options:(x1105 : child_process_ExecFileOptions) ->
                child_process_PromiseWithChild_of_js
                  anonymous_interface_3_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1101);(or_null_or_undefined_to_js
                                                   (fun (x1103 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1103) x1102);(
                       child_process_ExecFileOptions_to_js x1105)|])
        let (__promisify__ :
          file:string ->
            options:(Node_fs.Fs.BaseEncodingOptions.t,
              child_process_ExecFileOptions) intersection2
              or_null_or_undefined ->
              anonymous_interface_4 child_process_PromiseWithChild)
          =
          fun ~file:(x1107 : string) ->
            fun
              ~options:(x1108 :
                         (Node_fs.Fs.BaseEncodingOptions.t,
                           child_process_ExecFileOptions) intersection2
                           or_null_or_undefined)
              ->
              child_process_PromiseWithChild_of_js
                anonymous_interface_4_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1107);(or_null_or_undefined_to_js
                                                 (fun
                                                    (x1109 :
                                                      (Node_fs.Fs.BaseEncodingOptions.t,
                                                        child_process_ExecFileOptions)
                                                        intersection2)
                                                    ->
                                                    intersection2_to_js
                                                      Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                      child_process_ExecFileOptions_to_js
                                                      x1109) x1108)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:(Node_fs.Fs.BaseEncodingOptions.t,
                child_process_ExecFileOptions) intersection2
                or_null_or_undefined ->
                anonymous_interface_4 child_process_PromiseWithChild)
          =
          fun ~file:(x1113 : string) ->
            fun ~args:(x1114 : string list or_null_or_undefined) ->
              fun
                ~options:(x1117 :
                           (Node_fs.Fs.BaseEncodingOptions.t,
                             child_process_ExecFileOptions) intersection2
                             or_null_or_undefined)
                ->
                child_process_PromiseWithChild_of_js
                  anonymous_interface_4_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1113);(or_null_or_undefined_to_js
                                                   (fun (x1115 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1115) x1114);(
                       or_null_or_undefined_to_js
                         (fun
                            (x1118 :
                              (Node_fs.Fs.BaseEncodingOptions.t,
                                child_process_ExecFileOptions) intersection2)
                            ->
                            intersection2_to_js
                              Node_fs.Fs.BaseEncodingOptions.t_to_js
                              child_process_ExecFileOptions_to_js x1118)
                         x1117)|])
      end
    module ForkOptions =
      struct
        type t = child_process_ForkOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x1123 : Ojs.t) -> child_process_ForkOptions_of_js x1123
        and t_to_js : t -> Ojs.t =
          fun (x1122 : child_process_ForkOptions) ->
            child_process_ForkOptions_to_js x1122
        let (get_execPath : t -> string) =
          fun (x1124 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1124) "execPath")
        let (set_execPath : t -> string -> unit) =
          fun (x1125 : t) ->
            fun (x1126 : string) ->
              Ojs.set_prop_ascii (t_to_js x1125) "execPath"
                (Ojs.string_to_js x1126)
        let (get_execArgv : t -> string list) =
          fun (x1127 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1127) "execArgv")
        let (set_execArgv : t -> string list -> unit) =
          fun (x1129 : t) ->
            fun (x1130 : string list) ->
              Ojs.set_prop_ascii (t_to_js x1129) "execArgv"
                (Ojs.list_to_js Ojs.string_to_js x1130)
        let (get_silent : t -> bool) =
          fun (x1132 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1132) "silent")
        let (set_silent : t -> bool -> unit) =
          fun (x1133 : t) ->
            fun (x1134 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1133) "silent"
                (Ojs.bool_to_js x1134)
        let (get_stdio : t -> child_process_StdioOptions) =
          fun (x1135 : t) ->
            child_process_StdioOptions_of_js
              (Ojs.get_prop_ascii (t_to_js x1135) "stdio")
        let (set_stdio : t -> child_process_StdioOptions -> unit) =
          fun (x1136 : t) ->
            fun (x1137 : child_process_StdioOptions) ->
              Ojs.set_prop_ascii (t_to_js x1136) "stdio"
                (child_process_StdioOptions_to_js x1137)
        let (get_detached : t -> bool) =
          fun (x1138 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1138) "detached")
        let (set_detached : t -> bool -> unit) =
          fun (x1139 : t) ->
            fun (x1140 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1139) "detached"
                (Ojs.bool_to_js x1140)
        let (get_windowsVerbatimArguments : t -> bool) =
          fun (x1141 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1141) "windowsVerbatimArguments")
        let (set_windowsVerbatimArguments : t -> bool -> unit) =
          fun (x1142 : t) ->
            fun (x1143 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1142) "windowsVerbatimArguments"
                (Ojs.bool_to_js x1143)
        let (cast : t -> child_process_ProcessEnvOptions) =
          fun (x1144 : t) ->
            child_process_ProcessEnvOptions_of_js (t_to_js x1144)
        let (cast' : t -> child_process_MessagingOptions) =
          fun (x1145 : t) ->
            child_process_MessagingOptions_of_js (t_to_js x1145)
      end
    let (fork :
      modulePath:string ->
        ?options:child_process_ForkOptions ->
          unit -> child_process_ChildProcess)
      =
      fun ~modulePath:(x1146 : string) ->
        fun ?options:(x1147 : child_process_ForkOptions option) ->
          fun () ->
            child_process_ChildProcess_of_js
              (let x1150 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1150 "fork") "apply"
                 [|x1150;((let x1148 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1148 "push"
                                [|(Ojs.string_to_js x1146)|]);
                           (match x1147 with
                            | Some x1149 ->
                                ignore
                                  (Ojs.call x1148 "push"
                                     [|(child_process_ForkOptions_to_js x1149)|])
                            | None -> ());
                           x1148))|])
    let (fork :
      modulePath:string ->
        ?args:string list ->
          ?options:child_process_ForkOptions ->
            unit -> child_process_ChildProcess)
      =
      fun ~modulePath:(x1151 : string) ->
        fun ?args:(x1152 : string list option) ->
          fun ?options:(x1153 : child_process_ForkOptions option) ->
            fun () ->
              child_process_ChildProcess_of_js
                (let x1158 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1158 "fork") "apply"
                   [|x1158;((let x1154 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1154 "push"
                                  [|(Ojs.string_to_js x1151)|]);
                             (match x1152 with
                              | Some x1156 ->
                                  ignore
                                    (Ojs.call x1154 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1156)|])
                              | None -> ());
                             (match x1153 with
                              | Some x1155 ->
                                  ignore
                                    (Ojs.call x1154 "push"
                                       [|(child_process_ForkOptions_to_js
                                            x1155)|])
                              | None -> ());
                             x1154))|])
    module SpawnSyncOptions =
      struct
        type t = child_process_SpawnSyncOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x1160 : Ojs.t) -> child_process_SpawnSyncOptions_of_js x1160
        and t_to_js : t -> Ojs.t =
          fun (x1159 : child_process_SpawnSyncOptions) ->
            child_process_SpawnSyncOptions_to_js x1159
        let (get_input : t -> ArrayBufferView.t or_string) =
          fun (x1161 : t) ->
            or_string_of_js ArrayBufferView.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1161) "input")
        let (set_input : t -> ArrayBufferView.t or_string -> unit) =
          fun (x1163 : t) ->
            fun (x1164 : ArrayBufferView.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1163) "input"
                (or_string_to_js ArrayBufferView.t_to_js x1164)
        let (get_killSignal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x1166 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1166) "killSignal")
        let (set_killSignal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x1168 : t) ->
            fun (x1169 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x1168) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x1169)
        let (get_maxBuffer : t -> float) =
          fun (x1171 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1171) "maxBuffer")
        let (set_maxBuffer : t -> float -> unit) =
          fun (x1172 : t) ->
            fun (x1173 : float) ->
              Ojs.set_prop_ascii (t_to_js x1172) "maxBuffer"
                (Ojs.float_to_js x1173)
        let (get_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null) =
          fun (x1174 : t) ->
            or_null_of_js
              (fun (x1175 : Ojs.t) ->
                 or_enum_of_js BufferEncoding.t_of_js
                   (fun (x1177 : Ojs.t) ->
                      let x1178 = x1177 in
                      match Ojs.string_of_js x1178 with
                      | "buffer" -> `buffer
                      | _ -> assert false) x1175)
              (Ojs.get_prop_ascii (t_to_js x1174) "encoding")
        let (set_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null -> unit) =
          fun (x1179 : t) ->
            fun (x1180 : (BufferEncoding.t, [ `buffer ]) or_enum or_null) ->
              Ojs.set_prop_ascii (t_to_js x1179) "encoding"
                (or_null_to_js
                   (fun (x1181 : (BufferEncoding.t, [ `buffer ]) or_enum) ->
                      or_enum_to_js BufferEncoding.t_to_js
                        (fun (x1183 : [ `buffer ]) ->
                           match x1183 with
                           | `buffer -> Ojs.string_to_js "buffer") x1181)
                   x1180)
        let (cast : t -> child_process_CommonSpawnOptions) =
          fun (x1184 : t) ->
            child_process_CommonSpawnOptions_of_js (t_to_js x1184)
      end
    module SpawnSyncOptionsWithStringEncoding =
      struct
        type t = child_process_SpawnSyncOptionsWithStringEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x1186 : Ojs.t) ->
            child_process_SpawnSyncOptionsWithStringEncoding_of_js x1186
        and t_to_js : t -> Ojs.t =
          fun (x1185 : child_process_SpawnSyncOptionsWithStringEncoding) ->
            child_process_SpawnSyncOptionsWithStringEncoding_to_js x1185
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1187 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1187) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1188 : t) ->
            fun (x1189 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1188) "encoding"
                (BufferEncoding.t_to_js x1189)
        let (cast : t -> child_process_SpawnSyncOptions) =
          fun (x1190 : t) ->
            child_process_SpawnSyncOptions_of_js (t_to_js x1190)
      end
    module SpawnSyncOptionsWithBufferEncoding =
      struct
        type t = child_process_SpawnSyncOptionsWithBufferEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x1192 : Ojs.t) ->
            child_process_SpawnSyncOptionsWithBufferEncoding_of_js x1192
        and t_to_js : t -> Ojs.t =
          fun (x1191 : child_process_SpawnSyncOptionsWithBufferEncoding) ->
            child_process_SpawnSyncOptionsWithBufferEncoding_to_js x1191
        let (get_encoding : t -> [ `buffer ] or_null) =
          fun (x1193 : t) ->
            or_null_of_js
              (fun (x1194 : Ojs.t) ->
                 let x1195 = x1194 in
                 match Ojs.string_of_js x1195 with
                 | "buffer" -> `buffer
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x1193) "encoding")
        let (set_encoding : t -> [ `buffer ] or_null -> unit) =
          fun (x1196 : t) ->
            fun (x1197 : [ `buffer ] or_null) ->
              Ojs.set_prop_ascii (t_to_js x1196) "encoding"
                (or_null_to_js
                   (fun (x1198 : [ `buffer ]) ->
                      match x1198 with | `buffer -> Ojs.string_to_js "buffer")
                   x1197)
        let (cast : t -> child_process_SpawnSyncOptions) =
          fun (x1199 : t) ->
            child_process_SpawnSyncOptions_of_js (t_to_js x1199)
      end
    module SpawnSyncReturns =
      struct
        type 'T t = 'T child_process_SpawnSyncReturns
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x1202 : Ojs.t) ->
              child_process_SpawnSyncReturns_of_js __T_of_js x1202
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x1200 : __T child_process_SpawnSyncReturns) ->
              child_process_SpawnSyncReturns_to_js __T_to_js x1200
        let (get_pid : 'T t -> float) =
          fun (x1204 : 'T t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1204) "pid")
        let (set_pid : 'T t -> float -> unit) =
          fun (x1206 : 'T t) ->
            fun (x1207 : float) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1206) "pid"
                (Ojs.float_to_js x1207)
        let (get_output : 'T t -> string list) =
          fun (x1209 : 'T t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1209) "output")
        let (set_output : 'T t -> string list -> unit) =
          fun (x1212 : 'T t) ->
            fun (x1213 : string list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1212) "output"
                (Ojs.list_to_js Ojs.string_to_js x1213)
        let (get_stdout : 'T t -> 'T) =
          fun (x1216 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x1216) "stdout")
        let (set_stdout : 'T t -> 'T -> unit) =
          fun (x1218 : 'T t) ->
            fun (x1219 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1218) "stdout"
                (Obj.magic x1219)
        let (get_stderr : 'T t -> 'T) =
          fun (x1221 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x1221) "stderr")
        let (set_stderr : 'T t -> 'T -> unit) =
          fun (x1223 : 'T t) ->
            fun (x1224 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1223) "stderr"
                (Obj.magic x1224)
        let (get_status : 'T t -> float or_null) =
          fun (x1226 : 'T t) ->
            or_null_of_js Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1226) "status")
        let (set_status : 'T t -> float or_null -> unit) =
          fun (x1229 : 'T t) ->
            fun (x1230 : float or_null) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1229) "status"
                (or_null_to_js Ojs.float_to_js x1230)
        let (get_signal : 'T t -> Node_process.Process.Signals.t or_null) =
          fun (x1233 : 'T t) ->
            or_null_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1233) "signal")
        let (set_signal :
          'T t -> Node_process.Process.Signals.t or_null -> unit) =
          fun (x1236 : 'T t) ->
            fun (x1237 : Node_process.Process.Signals.t or_null) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1236) "signal"
                (or_null_to_js Node_process.Process.Signals.t_to_js x1237)
        let (get_error : 'T t -> Error.t) =
          fun (x1240 : 'T t) ->
            Error.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1240) "error")
        let (set_error : 'T t -> Error.t -> unit) =
          fun (x1242 : 'T t) ->
            fun (x1243 : Error.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1242) "error"
                (Error.t_to_js x1243)
      end
    let (spawnSync :
      command:string -> Buffer.t child_process_SpawnSyncReturns) =
      fun ~command:(x1245 : string) ->
        child_process_SpawnSyncReturns_of_js Buffer.t_of_js
          (Ojs.call Import.child_process "spawnSync"
             [|(Ojs.string_to_js x1245)|])
    let (spawnSync :
      command:string ->
        ?options:child_process_SpawnSyncOptionsWithStringEncoding ->
          unit -> string child_process_SpawnSyncReturns)
      =
      fun ~command:(x1247 : string) ->
        fun
          ?options:(x1248 :
                     child_process_SpawnSyncOptionsWithStringEncoding option)
          ->
          fun () ->
            child_process_SpawnSyncReturns_of_js Ojs.string_of_js
              (let x1251 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1251 "spawnSync") "apply"
                 [|x1251;((let x1249 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1249 "push"
                                [|(Ojs.string_to_js x1247)|]);
                           (match x1248 with
                            | Some x1250 ->
                                ignore
                                  (Ojs.call x1249 "push"
                                     [|(child_process_SpawnSyncOptionsWithStringEncoding_to_js
                                          x1250)|])
                            | None -> ());
                           x1249))|])
    let (spawnSync :
      command:string ->
        ?options:child_process_SpawnSyncOptionsWithBufferEncoding ->
          unit -> Buffer.t child_process_SpawnSyncReturns)
      =
      fun ~command:(x1253 : string) ->
        fun
          ?options:(x1254 :
                     child_process_SpawnSyncOptionsWithBufferEncoding option)
          ->
          fun () ->
            child_process_SpawnSyncReturns_of_js Buffer.t_of_js
              (let x1257 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1257 "spawnSync") "apply"
                 [|x1257;((let x1255 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1255 "push"
                                [|(Ojs.string_to_js x1253)|]);
                           (match x1254 with
                            | Some x1256 ->
                                ignore
                                  (Ojs.call x1255 "push"
                                     [|(child_process_SpawnSyncOptionsWithBufferEncoding_to_js
                                          x1256)|])
                            | None -> ());
                           x1255))|])
    let (spawnSync :
      command:string ->
        ?options:child_process_SpawnSyncOptions ->
          unit -> Buffer.t child_process_SpawnSyncReturns)
      =
      fun ~command:(x1259 : string) ->
        fun ?options:(x1260 : child_process_SpawnSyncOptions option) ->
          fun () ->
            child_process_SpawnSyncReturns_of_js Buffer.t_of_js
              (let x1263 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1263 "spawnSync") "apply"
                 [|x1263;((let x1261 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1261 "push"
                                [|(Ojs.string_to_js x1259)|]);
                           (match x1260 with
                            | Some x1262 ->
                                ignore
                                  (Ojs.call x1261 "push"
                                     [|(child_process_SpawnSyncOptions_to_js
                                          x1262)|])
                            | None -> ());
                           x1261))|])
    let (spawnSync :
      command:string ->
        ?args:string list ->
          ?options:child_process_SpawnSyncOptionsWithStringEncoding ->
            unit -> string child_process_SpawnSyncReturns)
      =
      fun ~command:(x1265 : string) ->
        fun ?args:(x1266 : string list option) ->
          fun
            ?options:(x1267 :
                       child_process_SpawnSyncOptionsWithStringEncoding
                         option)
            ->
            fun () ->
              child_process_SpawnSyncReturns_of_js Ojs.string_of_js
                (let x1272 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1272 "spawnSync") "apply"
                   [|x1272;((let x1268 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1268 "push"
                                  [|(Ojs.string_to_js x1265)|]);
                             (match x1266 with
                              | Some x1270 ->
                                  ignore
                                    (Ojs.call x1268 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1270)|])
                              | None -> ());
                             (match x1267 with
                              | Some x1269 ->
                                  ignore
                                    (Ojs.call x1268 "push"
                                       [|(child_process_SpawnSyncOptionsWithStringEncoding_to_js
                                            x1269)|])
                              | None -> ());
                             x1268))|])
    let (spawnSync :
      command:string ->
        ?args:string list ->
          ?options:child_process_SpawnSyncOptionsWithBufferEncoding ->
            unit -> Buffer.t child_process_SpawnSyncReturns)
      =
      fun ~command:(x1274 : string) ->
        fun ?args:(x1275 : string list option) ->
          fun
            ?options:(x1276 :
                       child_process_SpawnSyncOptionsWithBufferEncoding
                         option)
            ->
            fun () ->
              child_process_SpawnSyncReturns_of_js Buffer.t_of_js
                (let x1281 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1281 "spawnSync") "apply"
                   [|x1281;((let x1277 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1277 "push"
                                  [|(Ojs.string_to_js x1274)|]);
                             (match x1275 with
                              | Some x1279 ->
                                  ignore
                                    (Ojs.call x1277 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1279)|])
                              | None -> ());
                             (match x1276 with
                              | Some x1278 ->
                                  ignore
                                    (Ojs.call x1277 "push"
                                       [|(child_process_SpawnSyncOptionsWithBufferEncoding_to_js
                                            x1278)|])
                              | None -> ());
                             x1277))|])
    let (spawnSync :
      command:string ->
        ?args:string list ->
          ?options:child_process_SpawnSyncOptions ->
            unit -> Buffer.t child_process_SpawnSyncReturns)
      =
      fun ~command:(x1283 : string) ->
        fun ?args:(x1284 : string list option) ->
          fun ?options:(x1285 : child_process_SpawnSyncOptions option) ->
            fun () ->
              child_process_SpawnSyncReturns_of_js Buffer.t_of_js
                (let x1290 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1290 "spawnSync") "apply"
                   [|x1290;((let x1286 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1286 "push"
                                  [|(Ojs.string_to_js x1283)|]);
                             (match x1284 with
                              | Some x1288 ->
                                  ignore
                                    (Ojs.call x1286 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1288)|])
                              | None -> ());
                             (match x1285 with
                              | Some x1287 ->
                                  ignore
                                    (Ojs.call x1286 "push"
                                       [|(child_process_SpawnSyncOptions_to_js
                                            x1287)|])
                              | None -> ());
                             x1286))|])
    module ExecSyncOptions =
      struct
        type t = child_process_ExecSyncOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x1293 : Ojs.t) -> child_process_ExecSyncOptions_of_js x1293
        and t_to_js : t -> Ojs.t =
          fun (x1292 : child_process_ExecSyncOptions) ->
            child_process_ExecSyncOptions_to_js x1292
        let (get_input : t -> Uint8Array.t or_string) =
          fun (x1294 : t) ->
            or_string_of_js Uint8Array.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1294) "input")
        let (set_input : t -> Uint8Array.t or_string -> unit) =
          fun (x1296 : t) ->
            fun (x1297 : Uint8Array.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1296) "input"
                (or_string_to_js Uint8Array.t_to_js x1297)
        let (get_stdio : t -> child_process_StdioOptions) =
          fun (x1299 : t) ->
            child_process_StdioOptions_of_js
              (Ojs.get_prop_ascii (t_to_js x1299) "stdio")
        let (set_stdio : t -> child_process_StdioOptions -> unit) =
          fun (x1300 : t) ->
            fun (x1301 : child_process_StdioOptions) ->
              Ojs.set_prop_ascii (t_to_js x1300) "stdio"
                (child_process_StdioOptions_to_js x1301)
        let (get_shell : t -> string) =
          fun (x1302 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1302) "shell")
        let (set_shell : t -> string -> unit) =
          fun (x1303 : t) ->
            fun (x1304 : string) ->
              Ojs.set_prop_ascii (t_to_js x1303) "shell"
                (Ojs.string_to_js x1304)
        let (get_killSignal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x1305 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1305) "killSignal")
        let (set_killSignal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x1307 : t) ->
            fun (x1308 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x1307) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x1308)
        let (get_maxBuffer : t -> float) =
          fun (x1310 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1310) "maxBuffer")
        let (set_maxBuffer : t -> float -> unit) =
          fun (x1311 : t) ->
            fun (x1312 : float) ->
              Ojs.set_prop_ascii (t_to_js x1311) "maxBuffer"
                (Ojs.float_to_js x1312)
        let (get_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null) =
          fun (x1313 : t) ->
            or_null_of_js
              (fun (x1314 : Ojs.t) ->
                 or_enum_of_js BufferEncoding.t_of_js
                   (fun (x1316 : Ojs.t) ->
                      let x1317 = x1316 in
                      match Ojs.string_of_js x1317 with
                      | "buffer" -> `buffer
                      | _ -> assert false) x1314)
              (Ojs.get_prop_ascii (t_to_js x1313) "encoding")
        let (set_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null -> unit) =
          fun (x1318 : t) ->
            fun (x1319 : (BufferEncoding.t, [ `buffer ]) or_enum or_null) ->
              Ojs.set_prop_ascii (t_to_js x1318) "encoding"
                (or_null_to_js
                   (fun (x1320 : (BufferEncoding.t, [ `buffer ]) or_enum) ->
                      or_enum_to_js BufferEncoding.t_to_js
                        (fun (x1322 : [ `buffer ]) ->
                           match x1322 with
                           | `buffer -> Ojs.string_to_js "buffer") x1320)
                   x1319)
        let (cast : t -> child_process_CommonOptions) =
          fun (x1323 : t) ->
            child_process_CommonOptions_of_js (t_to_js x1323)
      end
    module ExecSyncOptionsWithStringEncoding =
      struct
        type t = child_process_ExecSyncOptionsWithStringEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x1325 : Ojs.t) ->
            child_process_ExecSyncOptionsWithStringEncoding_of_js x1325
        and t_to_js : t -> Ojs.t =
          fun (x1324 : child_process_ExecSyncOptionsWithStringEncoding) ->
            child_process_ExecSyncOptionsWithStringEncoding_to_js x1324
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1326 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1326) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1327 : t) ->
            fun (x1328 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1327) "encoding"
                (BufferEncoding.t_to_js x1328)
        let (cast : t -> child_process_ExecSyncOptions) =
          fun (x1329 : t) ->
            child_process_ExecSyncOptions_of_js (t_to_js x1329)
      end
    module ExecSyncOptionsWithBufferEncoding =
      struct
        type t = child_process_ExecSyncOptionsWithBufferEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x1331 : Ojs.t) ->
            child_process_ExecSyncOptionsWithBufferEncoding_of_js x1331
        and t_to_js : t -> Ojs.t =
          fun (x1330 : child_process_ExecSyncOptionsWithBufferEncoding) ->
            child_process_ExecSyncOptionsWithBufferEncoding_to_js x1330
        let (get_encoding : t -> [ `buffer ] or_null) =
          fun (x1332 : t) ->
            or_null_of_js
              (fun (x1333 : Ojs.t) ->
                 let x1334 = x1333 in
                 match Ojs.string_of_js x1334 with
                 | "buffer" -> `buffer
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x1332) "encoding")
        let (set_encoding : t -> [ `buffer ] or_null -> unit) =
          fun (x1335 : t) ->
            fun (x1336 : [ `buffer ] or_null) ->
              Ojs.set_prop_ascii (t_to_js x1335) "encoding"
                (or_null_to_js
                   (fun (x1337 : [ `buffer ]) ->
                      match x1337 with | `buffer -> Ojs.string_to_js "buffer")
                   x1336)
        let (cast : t -> child_process_ExecSyncOptions) =
          fun (x1338 : t) ->
            child_process_ExecSyncOptions_of_js (t_to_js x1338)
      end
    let (execSync : command:string -> Buffer.t) =
      fun ~command:(x1339 : string) ->
        Buffer.t_of_js
          (Ojs.call Import.child_process "execSync"
             [|(Ojs.string_to_js x1339)|])
    let (execSync :
      command:string ->
        ?options:child_process_ExecSyncOptionsWithStringEncoding ->
          unit -> string)
      =
      fun ~command:(x1340 : string) ->
        fun
          ?options:(x1341 :
                     child_process_ExecSyncOptionsWithStringEncoding option)
          ->
          fun () ->
            Ojs.string_of_js
              (let x1344 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1344 "execSync") "apply"
                 [|x1344;((let x1342 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1342 "push"
                                [|(Ojs.string_to_js x1340)|]);
                           (match x1341 with
                            | Some x1343 ->
                                ignore
                                  (Ojs.call x1342 "push"
                                     [|(child_process_ExecSyncOptionsWithStringEncoding_to_js
                                          x1343)|])
                            | None -> ());
                           x1342))|])
    let (execSync :
      command:string ->
        ?options:child_process_ExecSyncOptionsWithBufferEncoding ->
          unit -> Buffer.t)
      =
      fun ~command:(x1345 : string) ->
        fun
          ?options:(x1346 :
                     child_process_ExecSyncOptionsWithBufferEncoding option)
          ->
          fun () ->
            Buffer.t_of_js
              (let x1349 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1349 "execSync") "apply"
                 [|x1349;((let x1347 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1347 "push"
                                [|(Ojs.string_to_js x1345)|]);
                           (match x1346 with
                            | Some x1348 ->
                                ignore
                                  (Ojs.call x1347 "push"
                                     [|(child_process_ExecSyncOptionsWithBufferEncoding_to_js
                                          x1348)|])
                            | None -> ());
                           x1347))|])
    let (execSync :
      command:string ->
        ?options:child_process_ExecSyncOptions -> unit -> Buffer.t)
      =
      fun ~command:(x1350 : string) ->
        fun ?options:(x1351 : child_process_ExecSyncOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x1354 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1354 "execSync") "apply"
                 [|x1354;((let x1352 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1352 "push"
                                [|(Ojs.string_to_js x1350)|]);
                           (match x1351 with
                            | Some x1353 ->
                                ignore
                                  (Ojs.call x1352 "push"
                                     [|(child_process_ExecSyncOptions_to_js
                                          x1353)|])
                            | None -> ());
                           x1352))|])
    module ExecFileSyncOptions =
      struct
        type t = child_process_ExecFileSyncOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x1356 : Ojs.t) ->
            child_process_ExecFileSyncOptions_of_js x1356
        and t_to_js : t -> Ojs.t =
          fun (x1355 : child_process_ExecFileSyncOptions) ->
            child_process_ExecFileSyncOptions_to_js x1355
        let (get_input : t -> ArrayBufferView.t or_string) =
          fun (x1357 : t) ->
            or_string_of_js ArrayBufferView.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1357) "input")
        let (set_input : t -> ArrayBufferView.t or_string -> unit) =
          fun (x1359 : t) ->
            fun (x1360 : ArrayBufferView.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1359) "input"
                (or_string_to_js ArrayBufferView.t_to_js x1360)
        let (get_stdio : t -> child_process_StdioOptions) =
          fun (x1362 : t) ->
            child_process_StdioOptions_of_js
              (Ojs.get_prop_ascii (t_to_js x1362) "stdio")
        let (set_stdio : t -> child_process_StdioOptions -> unit) =
          fun (x1363 : t) ->
            fun (x1364 : child_process_StdioOptions) ->
              Ojs.set_prop_ascii (t_to_js x1363) "stdio"
                (child_process_StdioOptions_to_js x1364)
        let (get_killSignal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x1365 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1365) "killSignal")
        let (set_killSignal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x1367 : t) ->
            fun (x1368 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x1367) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x1368)
        let (get_maxBuffer : t -> float) =
          fun (x1370 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1370) "maxBuffer")
        let (set_maxBuffer : t -> float -> unit) =
          fun (x1371 : t) ->
            fun (x1372 : float) ->
              Ojs.set_prop_ascii (t_to_js x1371) "maxBuffer"
                (Ojs.float_to_js x1372)
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1373 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1373) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1374 : t) ->
            fun (x1375 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1374) "encoding"
                (BufferEncoding.t_to_js x1375)
        let (get_shell : t -> bool or_string) =
          fun (x1376 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1376) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x1378 : t) ->
            fun (x1379 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x1378) "shell"
                (or_string_to_js Ojs.bool_to_js x1379)
        let (cast : t -> child_process_CommonOptions) =
          fun (x1381 : t) ->
            child_process_CommonOptions_of_js (t_to_js x1381)
      end
    module ExecFileSyncOptionsWithStringEncoding =
      struct
        type t = child_process_ExecFileSyncOptionsWithStringEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x1383 : Ojs.t) ->
            child_process_ExecFileSyncOptionsWithStringEncoding_of_js x1383
        and t_to_js : t -> Ojs.t =
          fun (x1382 : child_process_ExecFileSyncOptionsWithStringEncoding)
            ->
            child_process_ExecFileSyncOptionsWithStringEncoding_to_js x1382
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1384 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1384) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1385 : t) ->
            fun (x1386 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1385) "encoding"
                (BufferEncoding.t_to_js x1386)
        let (cast : t -> child_process_ExecFileSyncOptions) =
          fun (x1387 : t) ->
            child_process_ExecFileSyncOptions_of_js (t_to_js x1387)
      end
    module ExecFileSyncOptionsWithBufferEncoding =
      struct
        type t = child_process_ExecFileSyncOptionsWithBufferEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x1389 : Ojs.t) ->
            child_process_ExecFileSyncOptionsWithBufferEncoding_of_js x1389
        and t_to_js : t -> Ojs.t =
          fun (x1388 : child_process_ExecFileSyncOptionsWithBufferEncoding)
            ->
            child_process_ExecFileSyncOptionsWithBufferEncoding_to_js x1388
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1390 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1390) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1391 : t) ->
            fun (x1392 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1391) "encoding"
                (BufferEncoding.t_to_js x1392)
        let (cast : t -> child_process_ExecFileSyncOptions) =
          fun (x1393 : t) ->
            child_process_ExecFileSyncOptions_of_js (t_to_js x1393)
      end
    let (execFileSync : command:string -> Buffer.t) =
      fun ~command:(x1394 : string) ->
        Buffer.t_of_js
          (Ojs.call Import.child_process "execFileSync"
             [|(Ojs.string_to_js x1394)|])
    let (execFileSync :
      command:string ->
        ?options:child_process_ExecFileSyncOptionsWithStringEncoding ->
          unit -> string)
      =
      fun ~command:(x1395 : string) ->
        fun
          ?options:(x1396 :
                     child_process_ExecFileSyncOptionsWithStringEncoding
                       option)
          ->
          fun () ->
            Ojs.string_of_js
              (let x1399 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1399 "execFileSync") "apply"
                 [|x1399;((let x1397 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1397 "push"
                                [|(Ojs.string_to_js x1395)|]);
                           (match x1396 with
                            | Some x1398 ->
                                ignore
                                  (Ojs.call x1397 "push"
                                     [|(child_process_ExecFileSyncOptionsWithStringEncoding_to_js
                                          x1398)|])
                            | None -> ());
                           x1397))|])
    let (execFileSync :
      command:string ->
        ?options:child_process_ExecFileSyncOptionsWithBufferEncoding ->
          unit -> Buffer.t)
      =
      fun ~command:(x1400 : string) ->
        fun
          ?options:(x1401 :
                     child_process_ExecFileSyncOptionsWithBufferEncoding
                       option)
          ->
          fun () ->
            Buffer.t_of_js
              (let x1404 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1404 "execFileSync") "apply"
                 [|x1404;((let x1402 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1402 "push"
                                [|(Ojs.string_to_js x1400)|]);
                           (match x1401 with
                            | Some x1403 ->
                                ignore
                                  (Ojs.call x1402 "push"
                                     [|(child_process_ExecFileSyncOptionsWithBufferEncoding_to_js
                                          x1403)|])
                            | None -> ());
                           x1402))|])
    let (execFileSync :
      command:string ->
        ?options:child_process_ExecFileSyncOptions -> unit -> Buffer.t)
      =
      fun ~command:(x1405 : string) ->
        fun ?options:(x1406 : child_process_ExecFileSyncOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x1409 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1409 "execFileSync") "apply"
                 [|x1409;((let x1407 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1407 "push"
                                [|(Ojs.string_to_js x1405)|]);
                           (match x1406 with
                            | Some x1408 ->
                                ignore
                                  (Ojs.call x1407 "push"
                                     [|(child_process_ExecFileSyncOptions_to_js
                                          x1408)|])
                            | None -> ());
                           x1407))|])
    let (execFileSync :
      command:string ->
        ?args:string list ->
          ?options:child_process_ExecFileSyncOptionsWithStringEncoding ->
            unit -> string)
      =
      fun ~command:(x1410 : string) ->
        fun ?args:(x1411 : string list option) ->
          fun
            ?options:(x1412 :
                       child_process_ExecFileSyncOptionsWithStringEncoding
                         option)
            ->
            fun () ->
              Ojs.string_of_js
                (let x1417 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1417 "execFileSync") "apply"
                   [|x1417;((let x1413 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1413 "push"
                                  [|(Ojs.string_to_js x1410)|]);
                             (match x1411 with
                              | Some x1415 ->
                                  ignore
                                    (Ojs.call x1413 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1415)|])
                              | None -> ());
                             (match x1412 with
                              | Some x1414 ->
                                  ignore
                                    (Ojs.call x1413 "push"
                                       [|(child_process_ExecFileSyncOptionsWithStringEncoding_to_js
                                            x1414)|])
                              | None -> ());
                             x1413))|])
    let (execFileSync :
      command:string ->
        ?args:string list ->
          ?options:child_process_ExecFileSyncOptionsWithBufferEncoding ->
            unit -> Buffer.t)
      =
      fun ~command:(x1418 : string) ->
        fun ?args:(x1419 : string list option) ->
          fun
            ?options:(x1420 :
                       child_process_ExecFileSyncOptionsWithBufferEncoding
                         option)
            ->
            fun () ->
              Buffer.t_of_js
                (let x1425 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1425 "execFileSync") "apply"
                   [|x1425;((let x1421 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1421 "push"
                                  [|(Ojs.string_to_js x1418)|]);
                             (match x1419 with
                              | Some x1423 ->
                                  ignore
                                    (Ojs.call x1421 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1423)|])
                              | None -> ());
                             (match x1420 with
                              | Some x1422 ->
                                  ignore
                                    (Ojs.call x1421 "push"
                                       [|(child_process_ExecFileSyncOptionsWithBufferEncoding_to_js
                                            x1422)|])
                              | None -> ());
                             x1421))|])
    let (execFileSync :
      command:string ->
        ?args:string list ->
          ?options:child_process_ExecFileSyncOptions -> unit -> Buffer.t)
      =
      fun ~command:(x1426 : string) ->
        fun ?args:(x1427 : string list option) ->
          fun ?options:(x1428 : child_process_ExecFileSyncOptions option) ->
            fun () ->
              Buffer.t_of_js
                (let x1433 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1433 "execFileSync") "apply"
                   [|x1433;((let x1429 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1429 "push"
                                  [|(Ojs.string_to_js x1426)|]);
                             (match x1427 with
                              | Some x1431 ->
                                  ignore
                                    (Ojs.call x1429 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1431)|])
                              | None -> ());
                             (match x1428 with
                              | Some x1430 ->
                                  ignore
                                    (Ojs.call x1429 "push"
                                       [|(child_process_ExecFileSyncOptions_to_js
                                            x1430)|])
                              | None -> ());
                             x1429))|])
  end
