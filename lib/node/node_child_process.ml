[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
open Node_events
open Node_net
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_encoding : t -> BufferEncoding.t) =
      fun (x3 : t) ->
        BufferEncoding.t_of_js (Ojs.get_prop_ascii (t_to_js x3) "encoding")
    let (set_encoding : t -> BufferEncoding.t -> unit) =
      fun (x4 : t) ->
        fun (x5 : BufferEncoding.t) ->
          Ojs.set_prop_ascii (t_to_js x4) "encoding"
            (BufferEncoding.t_to_js x5)
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7 : Ojs.t) -> x7
    and t_to_js : t -> Ojs.t = fun (x6 : Ojs.t) -> x6
    let (get_encoding : t -> [ `buffer ] or_null) =
      fun (x8 : t) ->
        or_null_of_js
          (fun (x9 : Ojs.t) ->
             let x10 = x9 in
             match Ojs.string_of_js x10 with
             | "buffer" -> `buffer
             | _ -> assert false)
          (Ojs.get_prop_ascii (t_to_js x8) "encoding")
    let (set_encoding : t -> [ `buffer ] or_null -> unit) =
      fun (x11 : t) ->
        fun (x12 : [ `buffer ] or_null) ->
          Ojs.set_prop_ascii (t_to_js x11) "encoding"
            (or_null_to_js
               (fun (x13 : [ `buffer ]) ->
                  match x13 with | `buffer -> Ojs.string_to_js "buffer") x12)
  end
module AnonymousInterface2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15 : Ojs.t) -> x15
    and t_to_js : t -> Ojs.t = fun (x14 : Ojs.t) -> x14
    let (get_stdout : t -> Buffer.t) =
      fun (x16 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x16) "stdout")
    let (set_stdout : t -> Buffer.t -> unit) =
      fun (x17 : t) ->
        fun (x18 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x17) "stdout" (Buffer.t_to_js x18)
    let (get_stderr : t -> Buffer.t) =
      fun (x19 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x19) "stderr")
    let (set_stderr : t -> Buffer.t -> unit) =
      fun (x20 : t) ->
        fun (x21 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x20) "stderr" (Buffer.t_to_js x21)
  end
module AnonymousInterface3 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x23 : Ojs.t) -> x23
    and t_to_js : t -> Ojs.t = fun (x22 : Ojs.t) -> x22
    let (get_stdout : t -> string) =
      fun (x24 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x24) "stdout")
    let (set_stdout : t -> string -> unit) =
      fun (x25 : t) ->
        fun (x26 : string) ->
          Ojs.set_prop_ascii (t_to_js x25) "stdout" (Ojs.string_to_js x26)
    let (get_stderr : t -> string) =
      fun (x27 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x27) "stderr")
    let (set_stderr : t -> string -> unit) =
      fun (x28 : t) ->
        fun (x29 : string) ->
          Ojs.set_prop_ascii (t_to_js x28) "stderr" (Ojs.string_to_js x29)
  end
module AnonymousInterface4 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x31 : Ojs.t) -> x31
    and t_to_js : t -> Ojs.t = fun (x30 : Ojs.t) -> x30
    let (get_stdout : t -> Buffer.t or_string) =
      fun (x32 : t) ->
        or_string_of_js Buffer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x32) "stdout")
    let (set_stdout : t -> Buffer.t or_string -> unit) =
      fun (x34 : t) ->
        fun (x35 : Buffer.t or_string) ->
          Ojs.set_prop_ascii (t_to_js x34) "stdout"
            (or_string_to_js Buffer.t_to_js x35)
    let (get_stderr : t -> Buffer.t or_string) =
      fun (x37 : t) ->
        or_string_of_js Buffer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x37) "stderr")
    let (set_stderr : t -> Buffer.t or_string -> unit) =
      fun (x39 : t) ->
        fun (x40 : Buffer.t or_string) ->
          Ojs.set_prop_ascii (t_to_js x39) "stderr"
            (or_string_to_js Buffer.t_to_js x40)
  end
module Child_process =
  struct
    module Serializable =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x43 : Ojs.t) -> x43
        and t_to_js : t -> Ojs.t = fun (x42 : Ojs.t) -> x42
      end
    module SendHandle =
      struct
        type t = (Net.Server.t, Net.Socket.t) union2
        let rec t_of_js : Ojs.t -> t =
          fun (x47 : Ojs.t) ->
            union2_of_js Net.Server.t_of_js Net.Socket.t_of_js x47
        and t_to_js : t -> Ojs.t =
          fun (x44 : (Net.Server.t, Net.Socket.t) union2) ->
            union2_to_js Net.Server.t_to_js Net.Socket.t_to_js x44
      end
    module MessageOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x51 : Ojs.t) -> x51
        and t_to_js : t -> Ojs.t = fun (x50 : Ojs.t) -> x50
        let (get_keep_open : t -> bool) =
          fun (x52 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x52) "keepOpen")
        let (set_keep_open : t -> bool -> unit) =
          fun (x53 : t) ->
            fun (x54 : bool) ->
              Ojs.set_prop_ascii (t_to_js x53) "keepOpen"
                (Ojs.bool_to_js x54)
      end
    module ChildProcess =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x56 : Ojs.t) -> x56
        and t_to_js : t -> Ojs.t = fun (x55 : Ojs.t) -> x55
        let (get_stdin : t -> Node_stream.Stream.Writable.t or_null) =
          fun (x57 : t) ->
            or_null_of_js Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x57) "stdin")
        let (set_stdin : t -> Node_stream.Stream.Writable.t or_null -> unit)
          =
          fun (x59 : t) ->
            fun (x60 : Node_stream.Stream.Writable.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x59) "stdin"
                (or_null_to_js Node_stream.Stream.Writable.t_to_js x60)
        let (get_stdout : t -> Node_stream.Stream.Readable.t or_null) =
          fun (x62 : t) ->
            or_null_of_js Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x62) "stdout")
        let (set_stdout : t -> Node_stream.Stream.Readable.t or_null -> unit)
          =
          fun (x64 : t) ->
            fun (x65 : Node_stream.Stream.Readable.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x64) "stdout"
                (or_null_to_js Node_stream.Stream.Readable.t_to_js x65)
        let (get_stderr : t -> Node_stream.Stream.Readable.t or_null) =
          fun (x67 : t) ->
            or_null_of_js Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x67) "stderr")
        let (set_stderr : t -> Node_stream.Stream.Readable.t or_null -> unit)
          =
          fun (x69 : t) ->
            fun (x70 : Node_stream.Stream.Readable.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x69) "stderr"
                (or_null_to_js Node_stream.Stream.Readable.t_to_js x70)
        let (get_channel : t -> Node_stream.Stream.Pipe.t or_null) =
          fun (x72 : t) ->
            or_null_of_js Node_stream.Stream.Pipe.t_of_js
              (Ojs.get_prop_ascii (t_to_js x72) "channel")
        let (get_stdio :
          t ->
            (Node_stream.Stream.Writable.t or_null *
              Node_stream.Stream.Readable.t or_null *
              Node_stream.Stream.Readable.t or_null *
              (Node_stream.Stream.Readable.t, Node_stream.Stream.Writable.t)
              union2 or_null_or_undefined * (Node_stream.Stream.Readable.t,
              Node_stream.Stream.Writable.t) union2 or_null_or_undefined))
          =
          fun (x74 : t) ->
            let x75 = Ojs.get_prop_ascii (t_to_js x74) "stdio" in
            ((or_null_of_js Node_stream.Stream.Writable.t_of_js
                (Ojs.array_get x75 0)),
              (or_null_of_js Node_stream.Stream.Readable.t_of_js
                 (Ojs.array_get x75 1)),
              (or_null_of_js Node_stream.Stream.Readable.t_of_js
                 (Ojs.array_get x75 2)),
              (or_null_or_undefined_of_js
                 (fun (x79 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x79)
                 (Ojs.array_get x75 3)),
              (or_null_or_undefined_of_js
                 (fun (x82 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x82)
                 (Ojs.array_get x75 4)))
        let (get_killed : t -> bool) =
          fun (x85 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x85) "killed")
        let (get_pid : t -> int) =
          fun (x86 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x86) "pid")
        let (get_connected : t -> bool) =
          fun (x87 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x87) "connected")
        let (get_exit_code : t -> int or_null) =
          fun (x88 : t) ->
            or_null_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x88) "exitCode")
        let (get_signal_code : t -> Node_process.Process.Signals.t or_null) =
          fun (x90 : t) ->
            or_null_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x90) "signalCode")
        let (get_spawnargs : t -> string list) =
          fun (x92 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x92) "spawnargs")
        let (get_spawnfile : t -> string) =
          fun (x94 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x94) "spawnfile")
        let (kill :
          t ->
            ?signal:Node_process.Process.Signals.t or_number -> unit -> bool)
          =
          fun (x99 : t) ->
            fun
              ?signal:(x95 : Node_process.Process.Signals.t or_number option)
              ->
              fun () ->
                Ojs.bool_of_js
                  (let x100 = t_to_js x99 in
                   Ojs.call (Ojs.get_prop_ascii x100 "kill") "apply"
                     [|x100;((let x96 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x95 with
                               | Some x97 ->
                                   ignore
                                     (Ojs.call x96 "push"
                                        [|(or_number_to_js
                                             Node_process.Process.Signals.t_to_js
                                             x97)|])
                               | None -> ());
                              x96))|])
        let (send :
          t ->
            message:Serializable.t ->
              ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
          =
          fun (x107 : t) ->
            fun ~message:(x101 : Serializable.t) ->
              fun ?callback:(x102 : (error:Error.t or_null -> unit) option)
                ->
                fun () ->
                  Ojs.bool_of_js
                    (let x108 = t_to_js x107 in
                     Ojs.call (Ojs.get_prop_ascii x108 "send") "apply"
                       [|x108;((let x103 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x103 "push"
                                     [|(Serializable.t_to_js x101)|]);
                                (match x102 with
                                 | Some x104 ->
                                     ignore
                                       (Ojs.call x103 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun (x105 : Ojs.t) ->
                                                  x104
                                                    ~error:(or_null_of_js
                                                              Error.t_of_js
                                                              x105)))|])
                                 | None -> ());
                                x103))|])
        let (send' :
          t ->
            message:Serializable.t ->
              ?send_handle:SendHandle.t ->
                ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
          =
          fun (x117 : t) ->
            fun ~message:(x109 : Serializable.t) ->
              fun ?send_handle:(x110 : SendHandle.t option) ->
                fun ?callback:(x111 : (error:Error.t or_null -> unit) option)
                  ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x118 = t_to_js x117 in
                       Ojs.call (Ojs.get_prop_ascii x118 "send") "apply"
                         [|x118;((let x112 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x112 "push"
                                       [|(Serializable.t_to_js x109)|]);
                                  (match x110 with
                                   | Some x116 ->
                                       ignore
                                         (Ojs.call x112 "push"
                                            [|(SendHandle.t_to_js x116)|])
                                   | None -> ());
                                  (match x111 with
                                   | Some x113 ->
                                       ignore
                                         (Ojs.call x112 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun (x114 : Ojs.t) ->
                                                    x113
                                                      ~error:(or_null_of_js
                                                                Error.t_of_js
                                                                x114)))|])
                                   | None -> ());
                                  x112))|])
        let (send'' :
          t ->
            message:Serializable.t ->
              ?send_handle:SendHandle.t ->
                ?options:MessageOptions.t ->
                  ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
          =
          fun (x129 : t) ->
            fun ~message:(x119 : Serializable.t) ->
              fun ?send_handle:(x120 : SendHandle.t option) ->
                fun ?options:(x121 : MessageOptions.t option) ->
                  fun
                    ?callback:(x122 : (error:Error.t or_null -> unit) option)
                    ->
                    fun () ->
                      Ojs.bool_of_js
                        (let x130 = t_to_js x129 in
                         Ojs.call (Ojs.get_prop_ascii x130 "send") "apply"
                           [|x130;((let x123 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x123 "push"
                                         [|(Serializable.t_to_js x119)|]);
                                    (match x120 with
                                     | Some x128 ->
                                         ignore
                                           (Ojs.call x123 "push"
                                              [|(SendHandle.t_to_js x128)|])
                                     | None -> ());
                                    (match x121 with
                                     | Some x127 ->
                                         ignore
                                           (Ojs.call x123 "push"
                                              [|(MessageOptions.t_to_js x127)|])
                                     | None -> ());
                                    (match x122 with
                                     | Some x124 ->
                                         ignore
                                           (Ojs.call x123 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun (x125 : Ojs.t) ->
                                                      x124
                                                        ~error:(or_null_of_js
                                                                  Error.t_of_js
                                                                  x125)))|])
                                     | None -> ());
                                    x123))|])
        let (disconnect : t -> unit) =
          fun (x131 : t) ->
            ignore (Ojs.call (t_to_js x131) "disconnect" [||])
        let (unref : t -> unit) =
          fun (x132 : t) -> ignore (Ojs.call (t_to_js x132) "unref" [||])
        let (ref : t -> unit) =
          fun (x133 : t) -> ignore (Ojs.call (t_to_js x133) "ref" [||])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x139 : t) ->
            fun ~event:(x134 : symbol or_string) ->
              fun ~args:(x135 : any list) ->
                Ojs.bool_of_js
                  (let x140 = t_to_js x139 in
                   Ojs.call (Ojs.get_prop_ascii x140 "emit") "apply"
                     [|x140;((let x136 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x136 "push"
                                   [|(or_string_to_js symbol_to_js x134)|]);
                              List.iter
                                (fun (x137 : any) ->
                                   ignore
                                     (Ojs.call x136 "push"
                                        [|(any_to_js x137)|])) x135;
                              x136))|])
        let (emit' :
          t ->
            event:[ `close ] ->
              code:int or_null ->
                signal:Node_process.Process.Signals.t or_null -> bool)
          =
          fun (x146 : t) ->
            fun ~event:(x141 : [ `close ]) ->
              fun ~code:(x142 : int or_null) ->
                fun ~signal:(x144 : Node_process.Process.Signals.t or_null)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x146) "emit"
                       [|((match x141 with
                           | `close -> Ojs.string_to_js "close"));(or_null_to_js
                                                                    Ojs.int_to_js
                                                                    x142);(
                         or_null_to_js Node_process.Process.Signals.t_to_js
                           x144)|])
        let (emit'' : t -> event:[ `disconnect ] -> bool) =
          fun (x148 : t) ->
            fun ~event:(x147 : [ `disconnect ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x148) "emit"
                   [|((match x147 with
                       | `disconnect -> Ojs.string_to_js "disconnect"))|])
        let (emit''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x151 : t) ->
            fun ~event:(x149 : [ `error ]) ->
              fun ~err:(x150 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x151) "emit"
                     [|((match x149 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x150)|])
        let (emit'''' :
          t ->
            event:[ `exit ] ->
              code:int or_null ->
                signal:Node_process.Process.Signals.t or_null -> bool)
          =
          fun (x157 : t) ->
            fun ~event:(x152 : [ `exit ]) ->
              fun ~code:(x153 : int or_null) ->
                fun ~signal:(x155 : Node_process.Process.Signals.t or_null)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x157) "emit"
                       [|((match x152 with | `exit -> Ojs.string_to_js "exit"));(
                         or_null_to_js Ojs.int_to_js x153);(or_null_to_js
                                                              Node_process.Process.Signals.t_to_js
                                                              x155)|])
        let (emit''''' :
          t ->
            event:[ `message ] ->
              message:Serializable.t -> send_handle:SendHandle.t -> bool)
          =
          fun (x161 : t) ->
            fun ~event:(x158 : [ `message ]) ->
              fun ~message:(x159 : Serializable.t) ->
                fun ~send_handle:(x160 : SendHandle.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x161) "emit"
                       [|((match x158 with
                           | `message -> Ojs.string_to_js "message"));(
                         Serializable.t_to_js x159);(SendHandle.t_to_js x160)|])
        module CloseListener =
          struct
            type t =
              code:int or_null ->
                signal:Node_process.Process.Signals.t or_null -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x167 : Ojs.t) ->
                fun ~code:(x168 : int or_null) ->
                  fun ~signal:(x170 : Node_process.Process.Signals.t or_null)
                    ->
                    ignore
                      (Ojs.apply x167
                         [|(or_null_to_js Ojs.int_to_js x168);(or_null_to_js
                                                                 Node_process.Process.Signals.t_to_js
                                                                 x170)|])
            and t_to_js : t -> Ojs.t =
              fun
                (x162 :
                  code:int or_null ->
                    signal:Node_process.Process.Signals.t or_null -> unit)
                ->
                Ojs.fun_to_js 2
                  (fun (x163 : Ojs.t) ->
                     fun (x165 : Ojs.t) ->
                       x162 ~code:(or_null_of_js Ojs.int_of_js x163)
                         ~signal:(or_null_of_js
                                    Node_process.Process.Signals.t_of_js x165))
          end
        module DisconnectListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x173 : Ojs.t) -> fun () -> ignore (Ojs.apply x173 [||])
            and t_to_js : t -> Ojs.t =
              fun (x172 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x172 ())
          end
        module ErrorListener =
          struct
            type t = err:Error.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x176 : Ojs.t) ->
                fun ~err:(x177 : Error.t) ->
                  ignore (Ojs.apply x176 [|(Error.t_to_js x177)|])
            and t_to_js : t -> Ojs.t =
              fun (x174 : err:Error.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x175 : Ojs.t) -> x174 ~err:(Error.t_of_js x175))
          end
        module ExitListener =
          struct
            type t =
              code:int or_null ->
                signal:Node_process.Process.Signals.t or_null -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x183 : Ojs.t) ->
                fun ~code:(x184 : int or_null) ->
                  fun ~signal:(x186 : Node_process.Process.Signals.t or_null)
                    ->
                    ignore
                      (Ojs.apply x183
                         [|(or_null_to_js Ojs.int_to_js x184);(or_null_to_js
                                                                 Node_process.Process.Signals.t_to_js
                                                                 x186)|])
            and t_to_js : t -> Ojs.t =
              fun
                (x178 :
                  code:int or_null ->
                    signal:Node_process.Process.Signals.t or_null -> unit)
                ->
                Ojs.fun_to_js 2
                  (fun (x179 : Ojs.t) ->
                     fun (x181 : Ojs.t) ->
                       x178 ~code:(or_null_of_js Ojs.int_of_js x179)
                         ~signal:(or_null_of_js
                                    Node_process.Process.Signals.t_of_js x181))
          end
        module MessageListener =
          struct
            type t =
              message:Serializable.t -> send_handle:SendHandle.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x191 : Ojs.t) ->
                fun ~message:(x192 : Serializable.t) ->
                  fun ~send_handle:(x193 : SendHandle.t) ->
                    ignore
                      (Ojs.apply x191
                         [|(Serializable.t_to_js x192);(SendHandle.t_to_js
                                                          x193)|])
            and t_to_js : t -> Ojs.t =
              fun
                (x188 :
                  message:Serializable.t -> send_handle:SendHandle.t -> unit)
                ->
                Ojs.fun_to_js 2
                  (fun (x189 : Ojs.t) ->
                     fun (x190 : Ojs.t) ->
                       x188 ~message:(Serializable.t_of_js x189)
                         ~send_handle:(SendHandle.t_of_js x190))
          end
        module SpawnListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x195 : Ojs.t) -> fun () -> ignore (Ojs.apply x195 [||])
            and t_to_js : t -> Ojs.t =
              fun (x194 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x194 ())
          end
        type listener =
          [ `Close of CloseListener.t  | `Disconnect of DisconnectListener.t 
          | `Error of ErrorListener.t  | `Exit of ExitListener.t 
          | `Message of MessageListener.t  | `Spawn of SpawnListener.t ]
        let rec listener_to_js : listener -> Ojs.t =
          fun
            (x196 :
              [ `Close of CloseListener.t 
              | `Disconnect of DisconnectListener.t 
              | `Error of ErrorListener.t  | `Exit of ExitListener.t 
              | `Message of MessageListener.t  | `Spawn of SpawnListener.t ])
            ->
            match x196 with
            | `Close x197 -> CloseListener.t_to_js x197
            | `Disconnect x198 -> DisconnectListener.t_to_js x198
            | `Error x199 -> ErrorListener.t_to_js x199
            | `Exit x200 -> ExitListener.t_to_js x200
            | `Message x201 -> MessageListener.t_to_js x201
            | `Spawn x202 -> SpawnListener.t_to_js x202
        let (on : t -> string -> Ojs.t -> unit) =
          fun (x207 : t) ->
            fun (x205 : string) ->
              fun (x206 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x207) "on"
                     [|(Ojs.string_to_js x205);x206|])
        let (add_listener : t -> string -> Ojs.t -> unit) =
          fun (x210 : t) ->
            fun (x208 : string) ->
              fun (x209 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x210) "addListener"
                     [|(Ojs.string_to_js x208);x209|])
        let (once : t -> string -> Ojs.t -> unit) =
          fun (x213 : t) ->
            fun (x211 : string) ->
              fun (x212 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x213) "once"
                     [|(Ojs.string_to_js x211);x212|])
        let (prepend_listener : t -> string -> Ojs.t -> unit) =
          fun (x216 : t) ->
            fun (x214 : string) ->
              fun (x215 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x216) "prependListener"
                     [|(Ojs.string_to_js x214);x215|])
        let with_listener_fn fn t =
          function
          | `Close f -> (fn t "close") @@ (CloseListener.t_to_js f)
          | `Disconnect f ->
              (fn t "disconnect") @@ (DisconnectListener.t_to_js f)
          | `Error f -> (fn t "error") @@ (ErrorListener.t_to_js f)
          | `Exit f -> (fn t "exit") @@ (ExitListener.t_to_js f)
          | `Message f -> (fn t "message") @@ (MessageListener.t_to_js f)
          | `Spawn f -> (fn t "spawn") @@ (SpawnListener.t_to_js f)
        let on = with_listener_fn on
        let add_listener = with_listener_fn add_listener
        let once = with_listener_fn once
        let prepend_listener = with_listener_fn prepend_listener
      end
    module ChildProcessWithoutNullStreams =
      struct
        include struct include ChildProcess end
        let (get_stdin : t -> Node_stream.Stream.Writable.t) =
          fun (x223 : t) ->
            Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x223) "stdin")
        let (set_stdin : t -> Node_stream.Stream.Writable.t -> unit) =
          fun (x224 : t) ->
            fun (x225 : Node_stream.Stream.Writable.t) ->
              Ojs.set_prop_ascii (t_to_js x224) "stdin"
                (Node_stream.Stream.Writable.t_to_js x225)
        let (get_stdout : t -> Node_stream.Stream.Readable.t) =
          fun (x226 : t) ->
            Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x226) "stdout")
        let (set_stdout : t -> Node_stream.Stream.Readable.t -> unit) =
          fun (x227 : t) ->
            fun (x228 : Node_stream.Stream.Readable.t) ->
              Ojs.set_prop_ascii (t_to_js x227) "stdout"
                (Node_stream.Stream.Readable.t_to_js x228)
        let (get_stderr : t -> Node_stream.Stream.Readable.t) =
          fun (x229 : t) ->
            Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x229) "stderr")
        let (set_stderr : t -> Node_stream.Stream.Readable.t -> unit) =
          fun (x230 : t) ->
            fun (x231 : Node_stream.Stream.Readable.t) ->
              Ojs.set_prop_ascii (t_to_js x230) "stderr"
                (Node_stream.Stream.Readable.t_to_js x231)
        let (get_stdio :
          t ->
            (Node_stream.Stream.Writable.t * Node_stream.Stream.Readable.t *
              Node_stream.Stream.Readable.t * (Node_stream.Stream.Readable.t,
              Node_stream.Stream.Writable.t) union2 or_null_or_undefined *
              (Node_stream.Stream.Readable.t, Node_stream.Stream.Writable.t)
              union2 or_null_or_undefined))
          =
          fun (x232 : t) ->
            let x233 = Ojs.get_prop_ascii (t_to_js x232) "stdio" in
            ((Node_stream.Stream.Writable.t_of_js (Ojs.array_get x233 0)),
              (Node_stream.Stream.Readable.t_of_js (Ojs.array_get x233 1)),
              (Node_stream.Stream.Readable.t_of_js (Ojs.array_get x233 2)),
              (or_null_or_undefined_of_js
                 (fun (x234 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x234)
                 (Ojs.array_get x233 3)),
              (or_null_or_undefined_of_js
                 (fun (x237 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x237)
                 (Ojs.array_get x233 4)))
      end
    module ChildProcessByStdio =
      struct
        type ('I, 'O, 'E) t = Ojs.t
        let rec t_of_js :
          'I 'O 'E .
            (Ojs.t -> 'I) ->
              (Ojs.t -> 'O) -> (Ojs.t -> 'E) -> Ojs.t -> ('I, 'O, 'E) t
          = fun (type __I) -> fun (type __O) -> fun (type __E) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (__E_of_js : Ojs.t -> __E) -> fun (x241 : Ojs.t) -> x241
        and t_to_js :
          'I 'O 'E .
            ('I -> Ojs.t) ->
              ('O -> Ojs.t) -> ('E -> Ojs.t) -> ('I, 'O, 'E) t -> Ojs.t
          = fun (type __I) -> fun (type __O) -> fun (type __E) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (__E_to_js : __E -> Ojs.t) -> fun (x240 : Ojs.t) -> x240
        let (get_stdin : ('I, 'O, 'E) t -> 'I) =
          fun (x242 : ('I, 'O, 'E) t) ->
            Obj.magic
              (Ojs.get_prop_ascii
                 (t_to_js Obj.magic Obj.magic Obj.magic x242) "stdin")
        let (set_stdin : ('I, 'O, 'E) t -> 'I -> unit) =
          fun (x246 : ('I, 'O, 'E) t) ->
            fun (x247 : 'I) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x246)
                "stdin" (Obj.magic x247)
        let (get_stdout : ('I, 'O, 'E) t -> 'O) =
          fun (x251 : ('I, 'O, 'E) t) ->
            Obj.magic
              (Ojs.get_prop_ascii
                 (t_to_js Obj.magic Obj.magic Obj.magic x251) "stdout")
        let (set_stdout : ('I, 'O, 'E) t -> 'O -> unit) =
          fun (x255 : ('I, 'O, 'E) t) ->
            fun (x256 : 'O) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x255)
                "stdout" (Obj.magic x256)
        let (get_stderr : ('I, 'O, 'E) t -> 'E) =
          fun (x260 : ('I, 'O, 'E) t) ->
            Obj.magic
              (Ojs.get_prop_ascii
                 (t_to_js Obj.magic Obj.magic Obj.magic x260) "stderr")
        let (set_stderr : ('I, 'O, 'E) t -> 'E -> unit) =
          fun (x264 : ('I, 'O, 'E) t) ->
            fun (x265 : 'E) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x264)
                "stderr" (Obj.magic x265)
        let (get_stdio :
          ('I, 'O, 'E) t ->
            ('I * 'O * 'E * (Node_stream.Stream.Readable.t,
              Node_stream.Stream.Writable.t) union2 or_null_or_undefined *
              (Node_stream.Stream.Readable.t, Node_stream.Stream.Writable.t)
              union2 or_null_or_undefined))
          =
          fun (x269 : ('I, 'O, 'E) t) ->
            let x273 =
              Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x269)
                "stdio" in
            ((Obj.magic (Ojs.array_get x273 0)),
              (Obj.magic (Ojs.array_get x273 1)),
              (Obj.magic (Ojs.array_get x273 2)),
              (or_null_or_undefined_of_js
                 (fun (x274 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x274)
                 (Ojs.array_get x273 3)),
              (or_null_or_undefined_of_js
                 (fun (x277 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x277)
                 (Ojs.array_get x273 4)))
        let (cast : ('I, 'O, 'E) t -> ChildProcess.t) =
          fun (x280 : ('I, 'O, 'E) t) ->
            ChildProcess.t_of_js (t_to_js Obj.magic Obj.magic Obj.magic x280)
      end
    module StdioOptions =
      struct
        type t =
          ((Node_stream.Stream.Stream.t,
             [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum or_number
             or_null_or_undefined list,
            [ `ignore  | `inherit_  | `pipe ]) or_enum
        let rec t_of_js : Ojs.t -> t =
          fun (x292 : Ojs.t) ->
            or_enum_of_js
              (fun (x293 : Ojs.t) ->
                 Ojs.list_of_js
                   (fun (x294 : Ojs.t) ->
                      or_null_or_undefined_of_js
                        (fun (x295 : Ojs.t) ->
                           or_number_of_js
                             (fun (x296 : Ojs.t) ->
                                or_enum_of_js
                                  Node_stream.Stream.Stream.t_of_js
                                  (fun (x298 : Ojs.t) ->
                                     let x299 = x298 in
                                     match Ojs.string_of_js x299 with
                                     | "ignore" -> `ignore
                                     | "inherit" -> `inherit_
                                     | "ipc" -> `ipc
                                     | "pipe" -> `pipe
                                     | _ -> assert false) x296) x295) x294)
                   x293)
              (fun (x300 : Ojs.t) ->
                 let x301 = x300 in
                 match Ojs.string_of_js x301 with
                 | "ignore" -> `ignore
                 | "inherit" -> `inherit_
                 | "pipe" -> `pipe
                 | _ -> assert false) x292
        and t_to_js : t -> Ojs.t =
          fun
            (x284 :
              ((Node_stream.Stream.Stream.t,
                 [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum or_number
                 or_null_or_undefined list,
                [ `ignore  | `inherit_  | `pipe ]) or_enum)
            ->
            or_enum_to_js
              (fun
                 (x285 :
                   (Node_stream.Stream.Stream.t,
                     [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum
                     or_number or_null_or_undefined list)
                 ->
                 Ojs.list_to_js
                   (fun
                      (x286 :
                        (Node_stream.Stream.Stream.t,
                          [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum
                          or_number or_null_or_undefined)
                      ->
                      or_null_or_undefined_to_js
                        (fun
                           (x287 :
                             (Node_stream.Stream.Stream.t,
                               [ `ignore  | `inherit_  | `ipc  | `pipe ])
                               or_enum or_number)
                           ->
                           or_number_to_js
                             (fun
                                (x288 :
                                  (Node_stream.Stream.Stream.t,
                                    [ `ignore  | `inherit_  | `ipc  | `pipe ])
                                    or_enum)
                                ->
                                or_enum_to_js
                                  Node_stream.Stream.Stream.t_to_js
                                  (fun
                                     (x290 :
                                       [ `ignore  | `inherit_  | `ipc 
                                       | `pipe ])
                                     ->
                                     match x290 with
                                     | `ignore -> Ojs.string_to_js "ignore"
                                     | `inherit_ ->
                                         Ojs.string_to_js "inherit"
                                     | `ipc -> Ojs.string_to_js "ipc"
                                     | `pipe -> Ojs.string_to_js "pipe") x288)
                             x287) x286) x285)
              (fun (x291 : [ `ignore  | `inherit_  | `pipe ]) ->
                 match x291 with
                 | `ignore -> Ojs.string_to_js "ignore"
                 | `inherit_ -> Ojs.string_to_js "inherit"
                 | `pipe -> Ojs.string_to_js "pipe") x284
      end
    module SerializationType =
      struct
        type t = [ `advanced  | `json ]
        let rec t_of_js : Ojs.t -> t =
          fun (x303 : Ojs.t) ->
            let x304 = x303 in
            match Ojs.string_of_js x304 with
            | "advanced" -> `advanced
            | "json" -> `json
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x302 : [ `advanced  | `json ]) ->
            match x302 with
            | `advanced -> Ojs.string_to_js "advanced"
            | `json -> Ojs.string_to_js "json"
      end
    module MessagingOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x306 : Ojs.t) -> x306
        and t_to_js : t -> Ojs.t = fun (x305 : Ojs.t) -> x305
        let (get_serialization : t -> SerializationType.t) =
          fun (x307 : t) ->
            SerializationType.t_of_js
              (Ojs.get_prop_ascii (t_to_js x307) "serialization")
        let (set_serialization : t -> SerializationType.t -> unit) =
          fun (x308 : t) ->
            fun (x309 : SerializationType.t) ->
              Ojs.set_prop_ascii (t_to_js x308) "serialization"
                (SerializationType.t_to_js x309)
      end
    module ProcessEnvOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x311 : Ojs.t) -> x311
        and t_to_js : t -> Ojs.t = fun (x310 : Ojs.t) -> x310
        let (get_uid : t -> int) =
          fun (x312 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x312) "uid")
        let (set_uid : t -> int -> unit) =
          fun (x313 : t) ->
            fun (x314 : int) ->
              Ojs.set_prop_ascii (t_to_js x313) "uid" (Ojs.int_to_js x314)
        let (get_gid : t -> int) =
          fun (x315 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x315) "gid")
        let (set_gid : t -> int -> unit) =
          fun (x316 : t) ->
            fun (x317 : int) ->
              Ojs.set_prop_ascii (t_to_js x316) "gid" (Ojs.int_to_js x317)
        let (get_cwd : t -> string) =
          fun (x318 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x318) "cwd")
        let (set_cwd : t -> string -> unit) =
          fun (x319 : t) ->
            fun (x320 : string) ->
              Ojs.set_prop_ascii (t_to_js x319) "cwd" (Ojs.string_to_js x320)
        let (get_env : t -> Node_process.Process.ProcessEnv.t) =
          fun (x321 : t) ->
            Node_process.Process.ProcessEnv.t_of_js
              (Ojs.get_prop_ascii (t_to_js x321) "env")
        let (set_env : t -> Node_process.Process.ProcessEnv.t -> unit) =
          fun (x322 : t) ->
            fun (x323 : Node_process.Process.ProcessEnv.t) ->
              Ojs.set_prop_ascii (t_to_js x322) "env"
                (Node_process.Process.ProcessEnv.t_to_js x323)
      end
    module CommonOptions =
      struct
        include struct include ProcessEnvOptions end
        let (get_windows_hide : t -> bool) =
          fun (x324 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x324) "windowsHide")
        let (set_windows_hide : t -> bool -> unit) =
          fun (x325 : t) ->
            fun (x326 : bool) ->
              Ojs.set_prop_ascii (t_to_js x325) "windowsHide"
                (Ojs.bool_to_js x326)
        let (get_timeout : t -> int) =
          fun (x327 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x327) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x328 : t) ->
            fun (x329 : int) ->
              Ojs.set_prop_ascii (t_to_js x328) "timeout"
                (Ojs.int_to_js x329)
      end
    module CommonSpawnOptions =
      struct
        include struct include CommonOptions end
        let (get_argv0 : t -> string) =
          fun (x330 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x330) "argv0")
        let (set_argv0 : t -> string -> unit) =
          fun (x331 : t) ->
            fun (x332 : string) ->
              Ojs.set_prop_ascii (t_to_js x331) "argv0"
                (Ojs.string_to_js x332)
        let (get_stdio : t -> StdioOptions.t) =
          fun (x333 : t) ->
            StdioOptions.t_of_js (Ojs.get_prop_ascii (t_to_js x333) "stdio")
        let (set_stdio : t -> StdioOptions.t -> unit) =
          fun (x334 : t) ->
            fun (x335 : StdioOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x334) "stdio"
                (StdioOptions.t_to_js x335)
        let (get_shell : t -> bool or_string) =
          fun (x336 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x336) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x338 : t) ->
            fun (x339 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x338) "shell"
                (or_string_to_js Ojs.bool_to_js x339)
        let (get_windows_verbatim_arguments : t -> bool) =
          fun (x341 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x341) "windowsVerbatimArguments")
        let (set_windows_verbatim_arguments : t -> bool -> unit) =
          fun (x342 : t) ->
            fun (x343 : bool) ->
              Ojs.set_prop_ascii (t_to_js x342) "windowsVerbatimArguments"
                (Ojs.bool_to_js x343)
        let (cast' : t -> MessagingOptions.t) =
          fun (x344 : t) -> MessagingOptions.t_of_js (t_to_js x344)
      end
    module SpawnOptions =
      struct
        include struct include CommonSpawnOptions end
        let (get_detached : t -> bool) =
          fun (x345 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x345) "detached")
        let (set_detached : t -> bool -> unit) =
          fun (x346 : t) ->
            fun (x347 : bool) ->
              Ojs.set_prop_ascii (t_to_js x346) "detached"
                (Ojs.bool_to_js x347)
      end
    module SpawnOptionsWithoutStdio =
      struct
        include struct include SpawnOptions end
        let (get_stdio :
          t -> ([ `pipe ] or_null_or_undefined list, [ `pipe ]) or_enum) =
          fun (x348 : t) ->
            or_enum_of_js
              (fun (x349 : Ojs.t) ->
                 Ojs.list_of_js
                   (fun (x350 : Ojs.t) ->
                      or_null_or_undefined_of_js
                        (fun (x351 : Ojs.t) ->
                           let x352 = x351 in
                           match Ojs.string_of_js x352 with
                           | "pipe" -> `pipe
                           | _ -> assert false) x350) x349)
              (fun (x353 : Ojs.t) ->
                 let x354 = x353 in
                 match Ojs.string_of_js x354 with
                 | "pipe" -> `pipe
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x348) "stdio")
        let (set_stdio :
          t ->
            ([ `pipe ] or_null_or_undefined list, [ `pipe ]) or_enum -> unit)
          =
          fun (x355 : t) ->
            fun
              (x356 :
                ([ `pipe ] or_null_or_undefined list, [ `pipe ]) or_enum)
              ->
              Ojs.set_prop_ascii (t_to_js x355) "stdio"
                (or_enum_to_js
                   (fun (x357 : [ `pipe ] or_null_or_undefined list) ->
                      Ojs.list_to_js
                        (fun (x358 : [ `pipe ] or_null_or_undefined) ->
                           or_null_or_undefined_to_js
                             (fun (x359 : [ `pipe ]) ->
                                match x359 with
                                | `pipe -> Ojs.string_to_js "pipe") x358)
                        x357)
                   (fun (x360 : [ `pipe ]) ->
                      match x360 with | `pipe -> Ojs.string_to_js "pipe")
                   x356)
      end
    module StdioNull =
      struct
        type t =
          (Node_stream.Stream.Stream.t, [ `ignore  | `inherit_ ]) or_enum
        let rec t_of_js : Ojs.t -> t =
          fun (x364 : Ojs.t) ->
            or_enum_of_js Node_stream.Stream.Stream.t_of_js
              (fun (x366 : Ojs.t) ->
                 let x367 = x366 in
                 match Ojs.string_of_js x367 with
                 | "ignore" -> `ignore
                 | "inherit" -> `inherit_
                 | _ -> assert false) x364
        and t_to_js : t -> Ojs.t =
          fun
            (x361 :
              (Node_stream.Stream.Stream.t, [ `ignore  | `inherit_ ]) or_enum)
            ->
            or_enum_to_js Node_stream.Stream.Stream.t_to_js
              (fun (x363 : [ `ignore  | `inherit_ ]) ->
                 match x363 with
                 | `ignore -> Ojs.string_to_js "ignore"
                 | `inherit_ -> Ojs.string_to_js "inherit") x361
      end
    module StdioPipe =
      struct
        type t = [ `pipe ] or_null_or_undefined
        let rec t_of_js : Ojs.t -> t =
          fun (x370 : Ojs.t) ->
            or_null_or_undefined_of_js
              (fun (x371 : Ojs.t) ->
                 let x372 = x371 in
                 match Ojs.string_of_js x372 with
                 | "pipe" -> `pipe
                 | _ -> assert false) x370
        and t_to_js : t -> Ojs.t =
          fun (x368 : [ `pipe ] or_null_or_undefined) ->
            or_null_or_undefined_to_js
              (fun (x369 : [ `pipe ]) ->
                 match x369 with | `pipe -> Ojs.string_to_js "pipe") x368
      end
    module SpawnOptionsWithStdioTuple =
      struct
        type ('Stdin, 'Stdout, 'Stderr) t = Ojs.t
        let rec t_of_js :
          'Stdin 'Stdout 'Stderr .
            (Ojs.t -> 'Stdin) ->
              (Ojs.t -> 'Stdout) ->
                (Ojs.t -> 'Stderr) -> Ojs.t -> ('Stdin, 'Stdout, 'Stderr) t
          = fun (type __Stdin) -> fun (type __Stdout) -> fun (type __Stderr)
          ->
          fun (__Stdin_of_js : Ojs.t -> __Stdin) ->
            fun (__Stdout_of_js : Ojs.t -> __Stdout) ->
              fun (__Stderr_of_js : Ojs.t -> __Stderr) ->
                fun (x374 : Ojs.t) -> x374
        and t_to_js :
          'Stdin 'Stdout 'Stderr .
            ('Stdin -> Ojs.t) ->
              ('Stdout -> Ojs.t) ->
                ('Stderr -> Ojs.t) -> ('Stdin, 'Stdout, 'Stderr) t -> Ojs.t
          = fun (type __Stdin) -> fun (type __Stdout) -> fun (type __Stderr)
          ->
          fun (__Stdin_to_js : __Stdin -> Ojs.t) ->
            fun (__Stdout_to_js : __Stdout -> Ojs.t) ->
              fun (__Stderr_to_js : __Stderr -> Ojs.t) ->
                fun (x373 : Ojs.t) -> x373
        let (get_stdio :
          ('Stdin, 'Stdout, 'Stderr) t -> ('Stdin * 'Stdout * 'Stderr)) =
          fun (x375 : ('Stdin, 'Stdout, 'Stderr) t) ->
            let x379 =
              Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x375)
                "stdio" in
            ((Obj.magic (Ojs.array_get x379 0)),
              (Obj.magic (Ojs.array_get x379 1)),
              (Obj.magic (Ojs.array_get x379 2)))
        let (set_stdio :
          ('Stdin, 'Stdout, 'Stderr) t ->
            ('Stdin * 'Stdout * 'Stderr) -> unit)
          =
          fun (x380 : ('Stdin, 'Stdout, 'Stderr) t) ->
            fun (x381 : ('Stdin * 'Stdout * 'Stderr)) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x380)
                "stdio"
                (let (x382, x383, x384) = x381 in
                 let x385 = Ojs.array_make 3 in
                 Ojs.array_set x385 0 (Obj.magic x382);
                 Ojs.array_set x385 1 (Obj.magic x383);
                 Ojs.array_set x385 2 (Obj.magic x384);
                 x385)
        let (cast : ('Stdin, 'Stdout, 'Stderr) t -> SpawnOptions.t) =
          fun (x389 : ('Stdin, 'Stdout, 'Stderr) t) ->
            SpawnOptions.t_of_js (t_to_js Obj.magic Obj.magic Obj.magic x389)
      end
    let (spawn :
      command:string ->
        ?args:string list ->
          ?options:SpawnOptionsWithoutStdio.t ->
            unit -> ChildProcessWithoutNullStreams.t)
      =
      fun ~command:(x393 : string) ->
        fun ?args:(x394 : string list option) ->
          fun ?options:(x395 : SpawnOptionsWithoutStdio.t option) ->
            fun () ->
              ChildProcessWithoutNullStreams.t_of_js
                (let x400 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x400 "spawn") "apply"
                   [|x400;((let x396 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x396 "push"
                                 [|(Ojs.string_to_js x393)|]);
                            (match x394 with
                             | Some x398 ->
                                 ignore
                                   (Ojs.call x396 "push"
                                      [|(Ojs.list_to_js Ojs.string_to_js x398)|])
                             | None -> ());
                            (match x395 with
                             | Some x397 ->
                                 ignore
                                   (Ojs.call x396 "push"
                                      [|(SpawnOptionsWithoutStdio.t_to_js
                                           x397)|])
                             | None -> ());
                            x396))|])
    let (spawn' :
      command:string ->
        options:(StdioPipe.t, StdioPipe.t, StdioPipe.t)
          SpawnOptionsWithStdioTuple.t ->
          (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
            Node_stream.Stream.Readable.t) ChildProcessByStdio.t)
      =
      fun ~command:(x401 : string) ->
        fun
          ~options:(x402 :
                     (StdioPipe.t, StdioPipe.t, StdioPipe.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x401);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioPipe.t_to_js
                                            StdioPipe.t_to_js
                                            StdioPipe.t_to_js x402)|])
    let (spawn' :
      command:string ->
        options:(StdioPipe.t, StdioPipe.t, StdioNull.t)
          SpawnOptionsWithStdioTuple.t ->
          (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
            never or_null) ChildProcessByStdio.t)
      =
      fun ~command:(x409 : string) ->
        fun
          ~options:(x410 :
                     (StdioPipe.t, StdioPipe.t, StdioNull.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            (fun (x416 : Ojs.t) -> or_null_of_js never_of_js x416)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x409);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioPipe.t_to_js
                                            StdioPipe.t_to_js
                                            StdioNull.t_to_js x410)|])
    let (spawn' :
      command:string ->
        options:(StdioPipe.t, StdioNull.t, StdioPipe.t)
          SpawnOptionsWithStdioTuple.t ->
          (Node_stream.Stream.Writable.t, never or_null,
            Node_stream.Stream.Readable.t) ChildProcessByStdio.t)
      =
      fun ~command:(x418 : string) ->
        fun
          ~options:(x419 :
                     (StdioPipe.t, StdioNull.t, StdioPipe.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
            (fun (x424 : Ojs.t) -> or_null_of_js never_of_js x424)
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x418);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioPipe.t_to_js
                                            StdioNull.t_to_js
                                            StdioPipe.t_to_js x419)|])
    let (spawn' :
      command:string ->
        options:(StdioNull.t, StdioPipe.t, StdioPipe.t)
          SpawnOptionsWithStdioTuple.t ->
          (never or_null, Node_stream.Stream.Readable.t,
            Node_stream.Stream.Readable.t) ChildProcessByStdio.t)
      =
      fun ~command:(x427 : string) ->
        fun
          ~options:(x428 :
                     (StdioNull.t, StdioPipe.t, StdioPipe.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js
            (fun (x432 : Ojs.t) -> or_null_of_js never_of_js x432)
            Node_stream.Stream.Readable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x427);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioNull.t_to_js
                                            StdioPipe.t_to_js
                                            StdioPipe.t_to_js x428)|])
    let (spawn' :
      command:string ->
        options:(StdioPipe.t, StdioNull.t, StdioNull.t)
          SpawnOptionsWithStdioTuple.t ->
          (Node_stream.Stream.Writable.t, never or_null, never or_null)
            ChildProcessByStdio.t)
      =
      fun ~command:(x436 : string) ->
        fun
          ~options:(x437 :
                     (StdioPipe.t, StdioNull.t, StdioNull.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
            (fun (x442 : Ojs.t) -> or_null_of_js never_of_js x442)
            (fun (x444 : Ojs.t) -> or_null_of_js never_of_js x444)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x436);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioPipe.t_to_js
                                            StdioNull.t_to_js
                                            StdioNull.t_to_js x437)|])
    let (spawn' :
      command:string ->
        options:(StdioNull.t, StdioPipe.t, StdioNull.t)
          SpawnOptionsWithStdioTuple.t ->
          (never or_null, Node_stream.Stream.Readable.t, never or_null)
            ChildProcessByStdio.t)
      =
      fun ~command:(x446 : string) ->
        fun
          ~options:(x447 :
                     (StdioNull.t, StdioPipe.t, StdioNull.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js
            (fun (x451 : Ojs.t) -> or_null_of_js never_of_js x451)
            Node_stream.Stream.Readable.t_of_js
            (fun (x454 : Ojs.t) -> or_null_of_js never_of_js x454)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x446);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioNull.t_to_js
                                            StdioPipe.t_to_js
                                            StdioNull.t_to_js x447)|])
    let (spawn' :
      command:string ->
        options:(StdioNull.t, StdioNull.t, StdioPipe.t)
          SpawnOptionsWithStdioTuple.t ->
          (never or_null, never or_null, Node_stream.Stream.Readable.t)
            ChildProcessByStdio.t)
      =
      fun ~command:(x456 : string) ->
        fun
          ~options:(x457 :
                     (StdioNull.t, StdioNull.t, StdioPipe.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js
            (fun (x461 : Ojs.t) -> or_null_of_js never_of_js x461)
            (fun (x463 : Ojs.t) -> or_null_of_js never_of_js x463)
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x456);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioNull.t_to_js
                                            StdioNull.t_to_js
                                            StdioPipe.t_to_js x457)|])
    let (spawn' :
      command:string ->
        options:(StdioNull.t, StdioNull.t, StdioNull.t)
          SpawnOptionsWithStdioTuple.t ->
          (never or_null, never or_null, never or_null) ChildProcessByStdio.t)
      =
      fun ~command:(x466 : string) ->
        fun
          ~options:(x467 :
                     (StdioNull.t, StdioNull.t, StdioNull.t)
                       SpawnOptionsWithStdioTuple.t)
          ->
          ChildProcessByStdio.t_of_js
            (fun (x471 : Ojs.t) -> or_null_of_js never_of_js x471)
            (fun (x473 : Ojs.t) -> or_null_of_js never_of_js x473)
            (fun (x475 : Ojs.t) -> or_null_of_js never_of_js x475)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x466);(SpawnOptionsWithStdioTuple.t_to_js
                                            StdioNull.t_to_js
                                            StdioNull.t_to_js
                                            StdioNull.t_to_js x467)|])
    let (spawn' : command:string -> options:SpawnOptions.t -> ChildProcess.t)
      =
      fun ~command:(x477 : string) ->
        fun ~options:(x478 : SpawnOptions.t) ->
          ChildProcess.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x477);(SpawnOptions.t_to_js x478)|])
    let (spawn' :
      command:string ->
        ?args:string list ->
          ?options:SpawnOptionsWithoutStdio.t ->
            unit -> ChildProcessWithoutNullStreams.t)
      =
      fun ~command:(x479 : string) ->
        fun ?args:(x480 : string list option) ->
          fun ?options:(x481 : SpawnOptionsWithoutStdio.t option) ->
            fun () ->
              ChildProcessWithoutNullStreams.t_of_js
                (let x486 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x486 "spawn") "apply"
                   [|x486;((let x482 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x482 "push"
                                 [|(Ojs.string_to_js x479)|]);
                            (match x480 with
                             | Some x484 ->
                                 ignore
                                   (Ojs.call x482 "push"
                                      [|(Ojs.list_to_js Ojs.string_to_js x484)|])
                             | None -> ());
                            (match x481 with
                             | Some x483 ->
                                 ignore
                                   (Ojs.call x482 "push"
                                      [|(SpawnOptionsWithoutStdio.t_to_js
                                           x483)|])
                             | None -> ());
                            x482))|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioPipe.t, StdioPipe.t, StdioPipe.t)
            SpawnOptionsWithStdioTuple.t ->
            (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
              Node_stream.Stream.Readable.t) ChildProcessByStdio.t)
      =
      fun ~command:(x487 : string) ->
        fun ~args:(x488 : string list) ->
          fun
            ~options:(x490 :
                       (StdioPipe.t, StdioPipe.t, StdioPipe.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x487);(Ojs.list_to_js Ojs.string_to_js
                                              x488);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioPipe.t_to_js x490)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioPipe.t, StdioPipe.t, StdioNull.t)
            SpawnOptionsWithStdioTuple.t ->
            (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
              never or_null) ChildProcessByStdio.t)
      =
      fun ~command:(x497 : string) ->
        fun ~args:(x498 : string list) ->
          fun
            ~options:(x500 :
                       (StdioPipe.t, StdioPipe.t, StdioNull.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              (fun (x506 : Ojs.t) -> or_null_of_js never_of_js x506)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x497);(Ojs.list_to_js Ojs.string_to_js
                                              x498);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioNull.t_to_js x500)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioPipe.t, StdioNull.t, StdioPipe.t)
            SpawnOptionsWithStdioTuple.t ->
            (Node_stream.Stream.Writable.t, never or_null,
              Node_stream.Stream.Readable.t) ChildProcessByStdio.t)
      =
      fun ~command:(x508 : string) ->
        fun ~args:(x509 : string list) ->
          fun
            ~options:(x511 :
                       (StdioPipe.t, StdioNull.t, StdioPipe.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
              (fun (x516 : Ojs.t) -> or_null_of_js never_of_js x516)
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x508);(Ojs.list_to_js Ojs.string_to_js
                                              x509);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioPipe.t_to_js x511)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioNull.t, StdioPipe.t, StdioPipe.t)
            SpawnOptionsWithStdioTuple.t ->
            (never or_null, Node_stream.Stream.Readable.t,
              Node_stream.Stream.Readable.t) ChildProcessByStdio.t)
      =
      fun ~command:(x519 : string) ->
        fun ~args:(x520 : string list) ->
          fun
            ~options:(x522 :
                       (StdioNull.t, StdioPipe.t, StdioPipe.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js
              (fun (x526 : Ojs.t) -> or_null_of_js never_of_js x526)
              Node_stream.Stream.Readable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x519);(Ojs.list_to_js Ojs.string_to_js
                                              x520);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioPipe.t_to_js x522)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioPipe.t, StdioNull.t, StdioNull.t)
            SpawnOptionsWithStdioTuple.t ->
            (Node_stream.Stream.Writable.t, never or_null, never or_null)
              ChildProcessByStdio.t)
      =
      fun ~command:(x530 : string) ->
        fun ~args:(x531 : string list) ->
          fun
            ~options:(x533 :
                       (StdioPipe.t, StdioNull.t, StdioNull.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js Node_stream.Stream.Writable.t_of_js
              (fun (x538 : Ojs.t) -> or_null_of_js never_of_js x538)
              (fun (x540 : Ojs.t) -> or_null_of_js never_of_js x540)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x530);(Ojs.list_to_js Ojs.string_to_js
                                              x531);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioNull.t_to_js x533)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioNull.t, StdioPipe.t, StdioNull.t)
            SpawnOptionsWithStdioTuple.t ->
            (never or_null, Node_stream.Stream.Readable.t, never or_null)
              ChildProcessByStdio.t)
      =
      fun ~command:(x542 : string) ->
        fun ~args:(x543 : string list) ->
          fun
            ~options:(x545 :
                       (StdioNull.t, StdioPipe.t, StdioNull.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js
              (fun (x549 : Ojs.t) -> or_null_of_js never_of_js x549)
              Node_stream.Stream.Readable.t_of_js
              (fun (x552 : Ojs.t) -> or_null_of_js never_of_js x552)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x542);(Ojs.list_to_js Ojs.string_to_js
                                              x543);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioPipe.t_to_js
                                                       StdioNull.t_to_js x545)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioNull.t, StdioNull.t, StdioPipe.t)
            SpawnOptionsWithStdioTuple.t ->
            (never or_null, never or_null, Node_stream.Stream.Readable.t)
              ChildProcessByStdio.t)
      =
      fun ~command:(x554 : string) ->
        fun ~args:(x555 : string list) ->
          fun
            ~options:(x557 :
                       (StdioNull.t, StdioNull.t, StdioPipe.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js
              (fun (x561 : Ojs.t) -> or_null_of_js never_of_js x561)
              (fun (x563 : Ojs.t) -> or_null_of_js never_of_js x563)
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x554);(Ojs.list_to_js Ojs.string_to_js
                                              x555);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioPipe.t_to_js x557)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(StdioNull.t, StdioNull.t, StdioNull.t)
            SpawnOptionsWithStdioTuple.t ->
            (never or_null, never or_null, never or_null)
              ChildProcessByStdio.t)
      =
      fun ~command:(x566 : string) ->
        fun ~args:(x567 : string list) ->
          fun
            ~options:(x569 :
                       (StdioNull.t, StdioNull.t, StdioNull.t)
                         SpawnOptionsWithStdioTuple.t)
            ->
            ChildProcessByStdio.t_of_js
              (fun (x573 : Ojs.t) -> or_null_of_js never_of_js x573)
              (fun (x575 : Ojs.t) -> or_null_of_js never_of_js x575)
              (fun (x577 : Ojs.t) -> or_null_of_js never_of_js x577)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x566);(Ojs.list_to_js Ojs.string_to_js
                                              x567);(SpawnOptionsWithStdioTuple.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioNull.t_to_js
                                                       StdioNull.t_to_js x569)|])
    let (spawn' :
      command:string ->
        args:string list -> options:SpawnOptions.t -> ChildProcess.t)
      =
      fun ~command:(x579 : string) ->
        fun ~args:(x580 : string list) ->
          fun ~options:(x582 : SpawnOptions.t) ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x579);(Ojs.list_to_js Ojs.string_to_js
                                              x580);(SpawnOptions.t_to_js
                                                       x582)|])
    module ExecOptions =
      struct
        include struct include CommonOptions end
        let (get_shell : t -> string) =
          fun (x583 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x583) "shell")
        let (set_shell : t -> string -> unit) =
          fun (x584 : t) ->
            fun (x585 : string) ->
              Ojs.set_prop_ascii (t_to_js x584) "shell"
                (Ojs.string_to_js x585)
        let (get_max_buffer : t -> int) =
          fun (x586 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x586) "maxBuffer")
        let (set_max_buffer : t -> int -> unit) =
          fun (x587 : t) ->
            fun (x588 : int) ->
              Ojs.set_prop_ascii (t_to_js x587) "maxBuffer"
                (Ojs.int_to_js x588)
        let (get_kill_signal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x589 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x589) "killSignal")
        let (set_kill_signal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x591 : t) ->
            fun (x592 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x591) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x592)
      end
    module ExecOptionsWithStringEncoding =
      struct
        include struct include ExecOptions end
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x594 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x594) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x595 : t) ->
            fun (x596 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x595) "encoding"
                (BufferEncoding.t_to_js x596)
      end
    module ExecOptionsWithBufferEncoding =
      struct
        include struct include ExecOptions end
        let (get_encoding : t -> BufferEncoding.t or_null) =
          fun (x597 : t) ->
            or_null_of_js BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x597) "encoding")
        let (set_encoding : t -> BufferEncoding.t or_null -> unit) =
          fun (x599 : t) ->
            fun (x600 : BufferEncoding.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x599) "encoding"
                (or_null_to_js BufferEncoding.t_to_js x600)
      end
    module ExecException =
      struct
        include struct include Error end
        let (get_cmd : t -> string) =
          fun (x602 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x602) "cmd")
        let (set_cmd : t -> string -> unit) =
          fun (x603 : t) ->
            fun (x604 : string) ->
              Ojs.set_prop_ascii (t_to_js x603) "cmd" (Ojs.string_to_js x604)
        let (get_killed : t -> bool) =
          fun (x605 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x605) "killed")
        let (set_killed : t -> bool -> unit) =
          fun (x606 : t) ->
            fun (x607 : bool) ->
              Ojs.set_prop_ascii (t_to_js x606) "killed"
                (Ojs.bool_to_js x607)
        let (get_code : t -> int) =
          fun (x608 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x608) "code")
        let (set_code : t -> int -> unit) =
          fun (x609 : t) ->
            fun (x610 : int) ->
              Ojs.set_prop_ascii (t_to_js x609) "code" (Ojs.int_to_js x610)
        let (get_signal : t -> Node_process.Process.Signals.t) =
          fun (x611 : t) ->
            Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x611) "signal")
        let (set_signal : t -> Node_process.Process.Signals.t -> unit) =
          fun (x612 : t) ->
            fun (x613 : Node_process.Process.Signals.t) ->
              Ojs.set_prop_ascii (t_to_js x612) "signal"
                (Node_process.Process.Signals.t_to_js x613)
      end
    let (exec :
      command:string ->
        ?callback:(error:ExecException.t or_null ->
                     stdout:string -> stderr:string -> unit)
          -> unit -> ChildProcess.t)
      =
      fun ~command:(x614 : string) ->
        fun
          ?callback:(x615 :
                      (error:ExecException.t or_null ->
                         stdout:string -> stderr:string -> unit)
                        option)
          ->
          fun () ->
            ChildProcess.t_of_js
              (let x622 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x622 "exec") "apply"
                 [|x622;((let x616 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x616 "push" [|(Ojs.string_to_js x614)|]);
                          (match x615 with
                           | Some x617 ->
                               ignore
                                 (Ojs.call x616 "push"
                                    [|(Ojs.fun_to_js 3
                                         (fun (x618 : Ojs.t) ->
                                            fun (x620 : Ojs.t) ->
                                              fun (x621 : Ojs.t) ->
                                                x617
                                                  ~error:(or_null_of_js
                                                            ExecException.t_of_js
                                                            x618)
                                                  ~stdout:(Ojs.string_of_js
                                                             x620)
                                                  ~stderr:(Ojs.string_of_js
                                                             x621)))|])
                           | None -> ());
                          x616))|])
    let (exec :
      command:string ->
        options:(AnonymousInterface1.t, ExecOptions.t) intersection2 ->
          ?callback:(error:ExecException.t or_null ->
                       stdout:Buffer.t -> stderr:Buffer.t -> unit)
            -> unit -> ChildProcess.t)
      =
      fun ~command:(x623 : string) ->
        fun
          ~options:(x624 :
                     (AnonymousInterface1.t, ExecOptions.t) intersection2)
          ->
          fun
            ?callback:(x625 :
                        (error:ExecException.t or_null ->
                           stdout:Buffer.t -> stderr:Buffer.t -> unit)
                          option)
            ->
            fun () ->
              ChildProcess.t_of_js
                (let x634 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x634 "exec") "apply"
                   [|x634;((let x626 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x626 "push"
                                 [|(Ojs.string_to_js x623)|]);
                            ignore
                              (Ojs.call x626 "push"
                                 [|(intersection2_to_js
                                      AnonymousInterface1.t_to_js
                                      ExecOptions.t_to_js x624)|]);
                            (match x625 with
                             | Some x627 ->
                                 ignore
                                   (Ojs.call x626 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x628 : Ojs.t) ->
                                              fun (x630 : Ojs.t) ->
                                                fun (x631 : Ojs.t) ->
                                                  x627
                                                    ~error:(or_null_of_js
                                                              ExecException.t_of_js
                                                              x628)
                                                    ~stdout:(Buffer.t_of_js
                                                               x630)
                                                    ~stderr:(Buffer.t_of_js
                                                               x631)))|])
                             | None -> ());
                            x626))|])
    let (exec :
      command:string ->
        options:(AnonymousInterface0.t, ExecOptions.t) intersection2 ->
          ?callback:(error:ExecException.t or_null ->
                       stdout:string -> stderr:string -> unit)
            -> unit -> ChildProcess.t)
      =
      fun ~command:(x635 : string) ->
        fun
          ~options:(x636 :
                     (AnonymousInterface0.t, ExecOptions.t) intersection2)
          ->
          fun
            ?callback:(x637 :
                        (error:ExecException.t or_null ->
                           stdout:string -> stderr:string -> unit)
                          option)
            ->
            fun () ->
              ChildProcess.t_of_js
                (let x646 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x646 "exec") "apply"
                   [|x646;((let x638 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x638 "push"
                                 [|(Ojs.string_to_js x635)|]);
                            ignore
                              (Ojs.call x638 "push"
                                 [|(intersection2_to_js
                                      AnonymousInterface0.t_to_js
                                      ExecOptions.t_to_js x636)|]);
                            (match x637 with
                             | Some x639 ->
                                 ignore
                                   (Ojs.call x638 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x640 : Ojs.t) ->
                                              fun (x642 : Ojs.t) ->
                                                fun (x643 : Ojs.t) ->
                                                  x639
                                                    ~error:(or_null_of_js
                                                              ExecException.t_of_js
                                                              x640)
                                                    ~stdout:(Ojs.string_of_js
                                                               x642)
                                                    ~stderr:(Ojs.string_of_js
                                                               x643)))|])
                             | None -> ());
                            x638))|])
    let (exec :
      command:string ->
        options:(AnonymousInterface0.t, ExecOptions.t) intersection2 ->
          ?callback:(error:ExecException.t or_null ->
                       stdout:Buffer.t or_string ->
                         stderr:Buffer.t or_string -> unit)
            -> unit -> ChildProcess.t)
      =
      fun ~command:(x647 : string) ->
        fun
          ~options:(x648 :
                     (AnonymousInterface0.t, ExecOptions.t) intersection2)
          ->
          fun
            ?callback:(x649 :
                        (error:ExecException.t or_null ->
                           stdout:Buffer.t or_string ->
                             stderr:Buffer.t or_string -> unit)
                          option)
            ->
            fun () ->
              ChildProcess.t_of_js
                (let x660 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x660 "exec") "apply"
                   [|x660;((let x650 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x650 "push"
                                 [|(Ojs.string_to_js x647)|]);
                            ignore
                              (Ojs.call x650 "push"
                                 [|(intersection2_to_js
                                      AnonymousInterface0.t_to_js
                                      ExecOptions.t_to_js x648)|]);
                            (match x649 with
                             | Some x651 ->
                                 ignore
                                   (Ojs.call x650 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x652 : Ojs.t) ->
                                              fun (x654 : Ojs.t) ->
                                                fun (x656 : Ojs.t) ->
                                                  x651
                                                    ~error:(or_null_of_js
                                                              ExecException.t_of_js
                                                              x652)
                                                    ~stdout:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x654)
                                                    ~stderr:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x656)))|])
                             | None -> ());
                            x650))|])
    let (exec :
      command:string ->
        options:ExecOptions.t ->
          ?callback:(error:ExecException.t or_null ->
                       stdout:string -> stderr:string -> unit)
            -> unit -> ChildProcess.t)
      =
      fun ~command:(x661 : string) ->
        fun ~options:(x662 : ExecOptions.t) ->
          fun
            ?callback:(x663 :
                        (error:ExecException.t or_null ->
                           stdout:string -> stderr:string -> unit)
                          option)
            ->
            fun () ->
              ChildProcess.t_of_js
                (let x670 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x670 "exec") "apply"
                   [|x670;((let x664 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x664 "push"
                                 [|(Ojs.string_to_js x661)|]);
                            ignore
                              (Ojs.call x664 "push"
                                 [|(ExecOptions.t_to_js x662)|]);
                            (match x663 with
                             | Some x665 ->
                                 ignore
                                   (Ojs.call x664 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x666 : Ojs.t) ->
                                              fun (x668 : Ojs.t) ->
                                                fun (x669 : Ojs.t) ->
                                                  x665
                                                    ~error:(or_null_of_js
                                                              ExecException.t_of_js
                                                              x666)
                                                    ~stdout:(Ojs.string_of_js
                                                               x668)
                                                    ~stderr:(Ojs.string_of_js
                                                               x669)))|])
                             | None -> ());
                            x664))|])
    let (exec :
      command:string ->
        options:(Node_fs.Fs.BaseEncodingOptions.t, ExecOptions.t)
          intersection2 or_null_or_undefined ->
          ?callback:(error:ExecException.t or_null ->
                       stdout:Buffer.t or_string ->
                         stderr:Buffer.t or_string -> unit)
            -> unit -> ChildProcess.t)
      =
      fun ~command:(x671 : string) ->
        fun
          ~options:(x672 :
                     (Node_fs.Fs.BaseEncodingOptions.t, ExecOptions.t)
                       intersection2 or_null_or_undefined)
          ->
          fun
            ?callback:(x673 :
                        (error:ExecException.t or_null ->
                           stdout:Buffer.t or_string ->
                             stderr:Buffer.t or_string -> unit)
                          option)
            ->
            fun () ->
              ChildProcess.t_of_js
                (let x685 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x685 "exec") "apply"
                   [|x685;((let x674 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x674 "push"
                                 [|(Ojs.string_to_js x671)|]);
                            ignore
                              (Ojs.call x674 "push"
                                 [|(or_null_or_undefined_to_js
                                      (fun
                                         (x682 :
                                           (Node_fs.Fs.BaseEncodingOptions.t,
                                             ExecOptions.t) intersection2)
                                         ->
                                         intersection2_to_js
                                           Node_fs.Fs.BaseEncodingOptions.t_to_js
                                           ExecOptions.t_to_js x682) x672)|]);
                            (match x673 with
                             | Some x675 ->
                                 ignore
                                   (Ojs.call x674 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x676 : Ojs.t) ->
                                              fun (x678 : Ojs.t) ->
                                                fun (x680 : Ojs.t) ->
                                                  x675
                                                    ~error:(or_null_of_js
                                                              ExecException.t_of_js
                                                              x676)
                                                    ~stdout:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x678)
                                                    ~stderr:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x680)))|])
                             | None -> ());
                            x674))|])
    module PromiseWithChild =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x687 : Ojs.t) -> x687
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x686 : Ojs.t) -> x686
        let (get_child : 'T t -> ChildProcess.t) =
          fun (x688 : 'T t) ->
            ChildProcess.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x688) "child")
        let (set_child : 'T t -> ChildProcess.t -> unit) =
          fun (x690 : 'T t) ->
            fun (x691 : ChildProcess.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x690) "child"
                (ChildProcess.t_to_js x691)
        let (cast : 'T t -> 'T Promise.t) =
          fun (x693 : 'T t) ->
            Promise.t_of_js Obj.magic (t_to_js Obj.magic x693)
      end
    module Exec =
      struct
        let (__promisify__ :
          command:string -> AnonymousInterface3.t PromiseWithChild.t) =
          fun ~command:(x696 : string) ->
            PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                 "__promisify__" [|(Ojs.string_to_js x696)|])
        let (__promisify__ :
          command:string ->
            options:(AnonymousInterface1.t, ExecOptions.t) intersection2 ->
              AnonymousInterface2.t PromiseWithChild.t)
          =
          fun ~command:(x698 : string) ->
            fun
              ~options:(x699 :
                         (AnonymousInterface1.t, ExecOptions.t) intersection2)
              ->
              PromiseWithChild.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                   "__promisify__"
                   [|(Ojs.string_to_js x698);(intersection2_to_js
                                                AnonymousInterface1.t_to_js
                                                ExecOptions.t_to_js x699)|])
        let (__promisify__ :
          command:string ->
            options:(AnonymousInterface0.t, ExecOptions.t) intersection2 ->
              AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~command:(x703 : string) ->
            fun
              ~options:(x704 :
                         (AnonymousInterface0.t, ExecOptions.t) intersection2)
              ->
              PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                   "__promisify__"
                   [|(Ojs.string_to_js x703);(intersection2_to_js
                                                AnonymousInterface0.t_to_js
                                                ExecOptions.t_to_js x704)|])
        let (__promisify__ :
          command:string ->
            options:ExecOptions.t -> AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~command:(x708 : string) ->
            fun ~options:(x709 : ExecOptions.t) ->
              PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                   "__promisify__"
                   [|(Ojs.string_to_js x708);(ExecOptions.t_to_js x709)|])
        let (__promisify__ :
          command:string ->
            ?options:(Node_fs.Fs.BaseEncodingOptions.t, ExecOptions.t)
              intersection2 or_null ->
              unit -> AnonymousInterface4.t PromiseWithChild.t)
          =
          fun ~command:(x711 : string) ->
            fun
              ?options:(x712 :
                         (Node_fs.Fs.BaseEncodingOptions.t, ExecOptions.t)
                           intersection2 or_null option)
              ->
              fun () ->
                PromiseWithChild.t_of_js AnonymousInterface4.t_of_js
                  (let x718 = Ojs.get_prop_ascii Import.child_process "exec" in
                   Ojs.call (Ojs.get_prop_ascii x718 "__promisify__") "apply"
                     [|x718;((let x713 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x713 "push"
                                   [|(Ojs.string_to_js x711)|]);
                              (match x712 with
                               | Some x714 ->
                                   ignore
                                     (Ojs.call x713 "push"
                                        [|(or_null_to_js
                                             (fun
                                                (x715 :
                                                  (Node_fs.Fs.BaseEncodingOptions.t,
                                                    ExecOptions.t)
                                                    intersection2)
                                                ->
                                                intersection2_to_js
                                                  Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                  ExecOptions.t_to_js x715)
                                             x714)|])
                               | None -> ());
                              x713))|])
      end
    module ExecFileOptions =
      struct
        include struct include CommonOptions end
        let (get_max_buffer : t -> int) =
          fun (x720 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x720) "maxBuffer")
        let (set_max_buffer : t -> int -> unit) =
          fun (x721 : t) ->
            fun (x722 : int) ->
              Ojs.set_prop_ascii (t_to_js x721) "maxBuffer"
                (Ojs.int_to_js x722)
        let (get_kill_signal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x723 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x723) "killSignal")
        let (set_kill_signal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x725 : t) ->
            fun (x726 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x725) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x726)
        let (get_windows_verbatim_arguments : t -> bool) =
          fun (x728 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x728) "windowsVerbatimArguments")
        let (set_windows_verbatim_arguments : t -> bool -> unit) =
          fun (x729 : t) ->
            fun (x730 : bool) ->
              Ojs.set_prop_ascii (t_to_js x729) "windowsVerbatimArguments"
                (Ojs.bool_to_js x730)
        let (get_shell : t -> bool or_string) =
          fun (x731 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x731) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x733 : t) ->
            fun (x734 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x733) "shell"
                (or_string_to_js Ojs.bool_to_js x734)
      end
    module ExecFileOptionsWithStringEncoding =
      struct
        include struct include ExecFileOptions end
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x736 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x736) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x737 : t) ->
            fun (x738 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x737) "encoding"
                (BufferEncoding.t_to_js x738)
      end
    module ExecFileOptionsWithBufferEncoding =
      struct
        include struct include ExecFileOptions end
        let (get_encoding : t -> [ `buffer ] or_null) =
          fun (x739 : t) ->
            or_null_of_js
              (fun (x740 : Ojs.t) ->
                 let x741 = x740 in
                 match Ojs.string_of_js x741 with
                 | "buffer" -> `buffer
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x739) "encoding")
        let (set_encoding : t -> [ `buffer ] or_null -> unit) =
          fun (x742 : t) ->
            fun (x743 : [ `buffer ] or_null) ->
              Ojs.set_prop_ascii (t_to_js x742) "encoding"
                (or_null_to_js
                   (fun (x744 : [ `buffer ]) ->
                      match x744 with | `buffer -> Ojs.string_to_js "buffer")
                   x743)
      end
    module ExecFileOptionsWithOtherEncoding =
      struct
        include struct include ExecFileOptions end
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x745 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x745) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x746 : t) ->
            fun (x747 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x746) "encoding"
                (BufferEncoding.t_to_js x747)
      end
    module ExecFileException =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x749 : Ojs.t) -> x749
        and t_to_js : t -> Ojs.t = fun (x748 : Ojs.t) -> x748
      end
    let (exec_file : file:string -> ChildProcess.t) =
      fun ~file:(x750 : string) ->
        ChildProcess.t_of_js
          (Ojs.call Import.child_process "execFile"
             [|(Ojs.string_to_js x750)|])
    let (exec_file :
      file:string ->
        options:(Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
          intersection2 or_null_or_undefined -> ChildProcess.t)
      =
      fun ~file:(x751 : string) ->
        fun
          ~options:(x752 :
                     (Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
                       intersection2 or_null_or_undefined)
          ->
          ChildProcess.t_of_js
            (Ojs.call Import.child_process "execFile"
               [|(Ojs.string_to_js x751);(or_null_or_undefined_to_js
                                            (fun
                                               (x753 :
                                                 (Node_fs.Fs.BaseEncodingOptions.t,
                                                   ExecFileOptions.t)
                                                   intersection2)
                                               ->
                                               intersection2_to_js
                                                 Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                 ExecFileOptions.t_to_js x753)
                                            x752)|])
    let (exec_file :
      file:string -> ?args:string list or_null -> unit -> ChildProcess.t) =
      fun ~file:(x756 : string) ->
        fun ?args:(x757 : string list or_null option) ->
          fun () ->
            ChildProcess.t_of_js
              (let x762 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x762 "execFile") "apply"
                 [|x762;((let x758 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x758 "push" [|(Ojs.string_to_js x756)|]);
                          (match x757 with
                           | Some x759 ->
                               ignore
                                 (Ojs.call x758 "push"
                                    [|(or_null_to_js
                                         (fun (x760 : string list) ->
                                            Ojs.list_to_js Ojs.string_to_js
                                              x760) x759)|])
                           | None -> ());
                          x758))|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          options:(Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
            intersection2 or_null_or_undefined -> ChildProcess.t)
      =
      fun ~file:(x763 : string) ->
        fun ~args:(x764 : string list or_null_or_undefined) ->
          fun
            ~options:(x767 :
                       (Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
                         intersection2 or_null_or_undefined)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x763);(or_null_or_undefined_to_js
                                              (fun (x765 : string list) ->
                                                 Ojs.list_to_js
                                                   Ojs.string_to_js x765)
                                              x764);(or_null_or_undefined_to_js
                                                       (fun
                                                          (x768 :
                                                            (Node_fs.Fs.BaseEncodingOptions.t,
                                                              ExecFileOptions.t)
                                                              intersection2)
                                                          ->
                                                          intersection2_to_js
                                                            Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                            ExecFileOptions.t_to_js
                                                            x768) x767)|])
    let (exec_file :
      file:string ->
        callback:(error:ExecFileException.t or_null ->
                    stdout:string -> stderr:string -> unit)
          -> ChildProcess.t)
      =
      fun ~file:(x771 : string) ->
        fun
          ~callback:(x772 :
                      error:ExecFileException.t or_null ->
                        stdout:string -> stderr:string -> unit)
          ->
          ChildProcess.t_of_js
            (Ojs.call Import.child_process "execFile"
               [|(Ojs.string_to_js x771);(Ojs.fun_to_js 3
                                            (fun (x773 : Ojs.t) ->
                                               fun (x775 : Ojs.t) ->
                                                 fun (x776 : Ojs.t) ->
                                                   x772
                                                     ~error:(or_null_of_js
                                                               ExecFileException.t_of_js
                                                               x773)
                                                     ~stdout:(Ojs.string_of_js
                                                                x775)
                                                     ~stderr:(Ojs.string_of_js
                                                                x776)))|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          callback:(error:ExecFileException.t or_null ->
                      stdout:string -> stderr:string -> unit)
            -> ChildProcess.t)
      =
      fun ~file:(x777 : string) ->
        fun ~args:(x778 : string list or_null_or_undefined) ->
          fun
            ~callback:(x781 :
                        error:ExecFileException.t or_null ->
                          stdout:string -> stderr:string -> unit)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x777);(or_null_or_undefined_to_js
                                              (fun (x779 : string list) ->
                                                 Ojs.list_to_js
                                                   Ojs.string_to_js x779)
                                              x778);(Ojs.fun_to_js 3
                                                       (fun (x782 : Ojs.t) ->
                                                          fun (x784 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x785 : Ojs.t)
                                                              ->
                                                              x781
                                                                ~error:(
                                                                or_null_of_js
                                                                  ExecFileException.t_of_js
                                                                  x782)
                                                                ~stdout:(
                                                                Ojs.string_of_js
                                                                  x784)
                                                                ~stderr:(
                                                                Ojs.string_of_js
                                                                  x785)))|])
    let (exec_file :
      file:string ->
        options:ExecFileOptionsWithBufferEncoding.t ->
          callback:(error:ExecFileException.t or_null ->
                      stdout:Buffer.t -> stderr:Buffer.t -> unit)
            -> ChildProcess.t)
      =
      fun ~file:(x786 : string) ->
        fun ~options:(x787 : ExecFileOptionsWithBufferEncoding.t) ->
          fun
            ~callback:(x788 :
                        error:ExecFileException.t or_null ->
                          stdout:Buffer.t -> stderr:Buffer.t -> unit)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x786);(ExecFileOptionsWithBufferEncoding.t_to_js
                                              x787);(Ojs.fun_to_js 3
                                                       (fun (x789 : Ojs.t) ->
                                                          fun (x791 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x792 : Ojs.t)
                                                              ->
                                                              x788
                                                                ~error:(
                                                                or_null_of_js
                                                                  ExecFileException.t_of_js
                                                                  x789)
                                                                ~stdout:(
                                                                Buffer.t_of_js
                                                                  x791)
                                                                ~stderr:(
                                                                Buffer.t_of_js
                                                                  x792)))|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          options:ExecFileOptionsWithBufferEncoding.t ->
            callback:(error:ExecFileException.t or_null ->
                        stdout:Buffer.t -> stderr:Buffer.t -> unit)
              -> ChildProcess.t)
      =
      fun ~file:(x793 : string) ->
        fun ~args:(x794 : string list or_null_or_undefined) ->
          fun ~options:(x797 : ExecFileOptionsWithBufferEncoding.t) ->
            fun
              ~callback:(x798 :
                          error:ExecFileException.t or_null ->
                            stdout:Buffer.t -> stderr:Buffer.t -> unit)
              ->
              ChildProcess.t_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x793);(or_null_or_undefined_to_js
                                                (fun (x795 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x795)
                                                x794);(ExecFileOptionsWithBufferEncoding.t_to_js
                                                         x797);(Ojs.fun_to_js
                                                                  3
                                                                  (fun
                                                                    (x799 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x801 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x802 :
                                                                    Ojs.t) ->
                                                                    x798
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    ExecFileException.t_of_js
                                                                    x799)
                                                                    ~stdout:(
                                                                    Buffer.t_of_js
                                                                    x801)
                                                                    ~stderr:(
                                                                    Buffer.t_of_js
                                                                    x802)))|])
    let (exec_file :
      file:string ->
        options:ExecFileOptionsWithStringEncoding.t ->
          callback:(error:ExecFileException.t or_null ->
                      stdout:string -> stderr:string -> unit)
            -> ChildProcess.t)
      =
      fun ~file:(x803 : string) ->
        fun ~options:(x804 : ExecFileOptionsWithStringEncoding.t) ->
          fun
            ~callback:(x805 :
                        error:ExecFileException.t or_null ->
                          stdout:string -> stderr:string -> unit)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x803);(ExecFileOptionsWithStringEncoding.t_to_js
                                              x804);(Ojs.fun_to_js 3
                                                       (fun (x806 : Ojs.t) ->
                                                          fun (x808 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x809 : Ojs.t)
                                                              ->
                                                              x805
                                                                ~error:(
                                                                or_null_of_js
                                                                  ExecFileException.t_of_js
                                                                  x806)
                                                                ~stdout:(
                                                                Ojs.string_of_js
                                                                  x808)
                                                                ~stderr:(
                                                                Ojs.string_of_js
                                                                  x809)))|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          options:ExecFileOptionsWithStringEncoding.t ->
            callback:(error:ExecFileException.t or_null ->
                        stdout:string -> stderr:string -> unit)
              -> ChildProcess.t)
      =
      fun ~file:(x810 : string) ->
        fun ~args:(x811 : string list or_null_or_undefined) ->
          fun ~options:(x814 : ExecFileOptionsWithStringEncoding.t) ->
            fun
              ~callback:(x815 :
                          error:ExecFileException.t or_null ->
                            stdout:string -> stderr:string -> unit)
              ->
              ChildProcess.t_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x810);(or_null_or_undefined_to_js
                                                (fun (x812 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x812)
                                                x811);(ExecFileOptionsWithStringEncoding.t_to_js
                                                         x814);(Ojs.fun_to_js
                                                                  3
                                                                  (fun
                                                                    (x816 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x818 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x819 :
                                                                    Ojs.t) ->
                                                                    x815
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    ExecFileException.t_of_js
                                                                    x816)
                                                                    ~stdout:(
                                                                    Ojs.string_of_js
                                                                    x818)
                                                                    ~stderr:(
                                                                    Ojs.string_of_js
                                                                    x819)))|])
    let (exec_file :
      file:string ->
        options:ExecFileOptionsWithOtherEncoding.t ->
          callback:(error:ExecFileException.t or_null ->
                      stdout:Buffer.t or_string ->
                        stderr:Buffer.t or_string -> unit)
            -> ChildProcess.t)
      =
      fun ~file:(x820 : string) ->
        fun ~options:(x821 : ExecFileOptionsWithOtherEncoding.t) ->
          fun
            ~callback:(x822 :
                        error:ExecFileException.t or_null ->
                          stdout:Buffer.t or_string ->
                            stderr:Buffer.t or_string -> unit)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x820);(ExecFileOptionsWithOtherEncoding.t_to_js
                                              x821);(Ojs.fun_to_js 3
                                                       (fun (x823 : Ojs.t) ->
                                                          fun (x825 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x827 : Ojs.t)
                                                              ->
                                                              x822
                                                                ~error:(
                                                                or_null_of_js
                                                                  ExecFileException.t_of_js
                                                                  x823)
                                                                ~stdout:(
                                                                or_string_of_js
                                                                  Buffer.t_of_js
                                                                  x825)
                                                                ~stderr:(
                                                                or_string_of_js
                                                                  Buffer.t_of_js
                                                                  x827)))|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          options:ExecFileOptionsWithOtherEncoding.t ->
            callback:(error:ExecFileException.t or_null ->
                        stdout:Buffer.t or_string ->
                          stderr:Buffer.t or_string -> unit)
              -> ChildProcess.t)
      =
      fun ~file:(x829 : string) ->
        fun ~args:(x830 : string list or_null_or_undefined) ->
          fun ~options:(x833 : ExecFileOptionsWithOtherEncoding.t) ->
            fun
              ~callback:(x834 :
                          error:ExecFileException.t or_null ->
                            stdout:Buffer.t or_string ->
                              stderr:Buffer.t or_string -> unit)
              ->
              ChildProcess.t_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x829);(or_null_or_undefined_to_js
                                                (fun (x831 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x831)
                                                x830);(ExecFileOptionsWithOtherEncoding.t_to_js
                                                         x833);(Ojs.fun_to_js
                                                                  3
                                                                  (fun
                                                                    (x835 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x837 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x839 :
                                                                    Ojs.t) ->
                                                                    x834
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    ExecFileException.t_of_js
                                                                    x835)
                                                                    ~stdout:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x837)
                                                                    ~stderr:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x839)))|])
    let (exec_file :
      file:string ->
        options:ExecFileOptions.t ->
          callback:(error:ExecFileException.t or_null ->
                      stdout:string -> stderr:string -> unit)
            -> ChildProcess.t)
      =
      fun ~file:(x841 : string) ->
        fun ~options:(x842 : ExecFileOptions.t) ->
          fun
            ~callback:(x843 :
                        error:ExecFileException.t or_null ->
                          stdout:string -> stderr:string -> unit)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x841);(ExecFileOptions.t_to_js x842);(
                   Ojs.fun_to_js 3
                     (fun (x844 : Ojs.t) ->
                        fun (x846 : Ojs.t) ->
                          fun (x847 : Ojs.t) ->
                            x843
                              ~error:(or_null_of_js ExecFileException.t_of_js
                                        x844) ~stdout:(Ojs.string_of_js x846)
                              ~stderr:(Ojs.string_of_js x847)))|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          options:ExecFileOptions.t ->
            callback:(error:ExecFileException.t or_null ->
                        stdout:string -> stderr:string -> unit)
              -> ChildProcess.t)
      =
      fun ~file:(x848 : string) ->
        fun ~args:(x849 : string list or_null_or_undefined) ->
          fun ~options:(x852 : ExecFileOptions.t) ->
            fun
              ~callback:(x853 :
                          error:ExecFileException.t or_null ->
                            stdout:string -> stderr:string -> unit)
              ->
              ChildProcess.t_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x848);(or_null_or_undefined_to_js
                                                (fun (x850 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x850)
                                                x849);(ExecFileOptions.t_to_js
                                                         x852);(Ojs.fun_to_js
                                                                  3
                                                                  (fun
                                                                    (x854 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x856 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x857 :
                                                                    Ojs.t) ->
                                                                    x853
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    ExecFileException.t_of_js
                                                                    x854)
                                                                    ~stdout:(
                                                                    Ojs.string_of_js
                                                                    x856)
                                                                    ~stderr:(
                                                                    Ojs.string_of_js
                                                                    x857)))|])
    let (exec_file :
      file:string ->
        options:(Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
          intersection2 or_null_or_undefined ->
          callback:(error:ExecFileException.t or_null ->
                      stdout:Buffer.t or_string ->
                        stderr:Buffer.t or_string -> unit)
            or_null_or_undefined -> ChildProcess.t)
      =
      fun ~file:(x858 : string) ->
        fun
          ~options:(x859 :
                     (Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
                       intersection2 or_null_or_undefined)
          ->
          fun
            ~callback:(x863 :
                        (error:ExecFileException.t or_null ->
                           stdout:Buffer.t or_string ->
                             stderr:Buffer.t or_string -> unit)
                          or_null_or_undefined)
            ->
            ChildProcess.t_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x858);(or_null_or_undefined_to_js
                                              (fun
                                                 (x860 :
                                                   (Node_fs.Fs.BaseEncodingOptions.t,
                                                     ExecFileOptions.t)
                                                     intersection2)
                                                 ->
                                                 intersection2_to_js
                                                   Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                   ExecFileOptions.t_to_js
                                                   x860) x859);(or_null_or_undefined_to_js
                                                                  (fun
                                                                    (x864 :
                                                                    error:ExecFileException.t
                                                                    or_null
                                                                    ->
                                                                    stdout:Buffer.t
                                                                    or_string
                                                                    ->
                                                                    stderr:Buffer.t
                                                                    or_string
                                                                    -> 
                                                                    unit) ->
                                                                    Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x865 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x867 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x869 :
                                                                    Ojs.t) ->
                                                                    x864
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    ExecFileException.t_of_js
                                                                    x865)
                                                                    ~stdout:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x867)
                                                                    ~stderr:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x869)))
                                                                  x863)|])
    let (exec_file :
      file:string ->
        args:string list or_null_or_undefined ->
          options:(Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
            intersection2 or_null_or_undefined ->
            callback:(error:ExecFileException.t or_null ->
                        stdout:Buffer.t or_string ->
                          stderr:Buffer.t or_string -> unit)
              or_null_or_undefined -> ChildProcess.t)
      =
      fun ~file:(x871 : string) ->
        fun ~args:(x872 : string list or_null_or_undefined) ->
          fun
            ~options:(x875 :
                       (Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
                         intersection2 or_null_or_undefined)
            ->
            fun
              ~callback:(x879 :
                          (error:ExecFileException.t or_null ->
                             stdout:Buffer.t or_string ->
                               stderr:Buffer.t or_string -> unit)
                            or_null_or_undefined)
              ->
              ChildProcess.t_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x871);(or_null_or_undefined_to_js
                                                (fun (x873 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x873)
                                                x872);(or_null_or_undefined_to_js
                                                         (fun
                                                            (x876 :
                                                              (Node_fs.Fs.BaseEncodingOptions.t,
                                                                ExecFileOptions.t)
                                                                intersection2)
                                                            ->
                                                            intersection2_to_js
                                                              Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                              ExecFileOptions.t_to_js
                                                              x876) x875);(
                     or_null_or_undefined_to_js
                       (fun
                          (x880 :
                            error:ExecFileException.t or_null ->
                              stdout:Buffer.t or_string ->
                                stderr:Buffer.t or_string -> unit)
                          ->
                          Ojs.fun_to_js 3
                            (fun (x881 : Ojs.t) ->
                               fun (x883 : Ojs.t) ->
                                 fun (x885 : Ojs.t) ->
                                   x880
                                     ~error:(or_null_of_js
                                               ExecFileException.t_of_js x881)
                                     ~stdout:(or_string_of_js Buffer.t_of_js
                                                x883)
                                     ~stderr:(or_string_of_js Buffer.t_of_js
                                                x885))) x879)|])
    module ExecFile =
      struct
        let (__promisify__ :
          file:string -> AnonymousInterface3.t PromiseWithChild.t) =
          fun ~file:(x887 : string) ->
            PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.child_process "execFile")
                 "__promisify__" [|(Ojs.string_to_js x887)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~file:(x889 : string) ->
            fun ~args:(x890 : string list or_null_or_undefined) ->
              PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x889);(or_null_or_undefined_to_js
                                                (fun (x891 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x891)
                                                x890)|])
        let (__promisify__ :
          file:string ->
            options:ExecFileOptionsWithBufferEncoding.t ->
              AnonymousInterface2.t PromiseWithChild.t)
          =
          fun ~file:(x894 : string) ->
            fun ~options:(x895 : ExecFileOptionsWithBufferEncoding.t) ->
              PromiseWithChild.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x894);(ExecFileOptionsWithBufferEncoding.t_to_js
                                                x895)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:ExecFileOptionsWithBufferEncoding.t ->
                AnonymousInterface2.t PromiseWithChild.t)
          =
          fun ~file:(x897 : string) ->
            fun ~args:(x898 : string list or_null_or_undefined) ->
              fun ~options:(x901 : ExecFileOptionsWithBufferEncoding.t) ->
                PromiseWithChild.t_of_js AnonymousInterface2.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x897);(or_null_or_undefined_to_js
                                                  (fun (x899 : string list)
                                                     ->
                                                     Ojs.list_to_js
                                                       Ojs.string_to_js x899)
                                                  x898);(ExecFileOptionsWithBufferEncoding.t_to_js
                                                           x901)|])
        let (__promisify__ :
          file:string ->
            options:ExecFileOptionsWithStringEncoding.t ->
              AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~file:(x903 : string) ->
            fun ~options:(x904 : ExecFileOptionsWithStringEncoding.t) ->
              PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x903);(ExecFileOptionsWithStringEncoding.t_to_js
                                                x904)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:ExecFileOptionsWithStringEncoding.t ->
                AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~file:(x906 : string) ->
            fun ~args:(x907 : string list or_null_or_undefined) ->
              fun ~options:(x910 : ExecFileOptionsWithStringEncoding.t) ->
                PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x906);(or_null_or_undefined_to_js
                                                  (fun (x908 : string list)
                                                     ->
                                                     Ojs.list_to_js
                                                       Ojs.string_to_js x908)
                                                  x907);(ExecFileOptionsWithStringEncoding.t_to_js
                                                           x910)|])
        let (__promisify__ :
          file:string ->
            options:ExecFileOptionsWithOtherEncoding.t ->
              AnonymousInterface4.t PromiseWithChild.t)
          =
          fun ~file:(x912 : string) ->
            fun ~options:(x913 : ExecFileOptionsWithOtherEncoding.t) ->
              PromiseWithChild.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x912);(ExecFileOptionsWithOtherEncoding.t_to_js
                                                x913)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:ExecFileOptionsWithOtherEncoding.t ->
                AnonymousInterface4.t PromiseWithChild.t)
          =
          fun ~file:(x915 : string) ->
            fun ~args:(x916 : string list or_null_or_undefined) ->
              fun ~options:(x919 : ExecFileOptionsWithOtherEncoding.t) ->
                PromiseWithChild.t_of_js AnonymousInterface4.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x915);(or_null_or_undefined_to_js
                                                  (fun (x917 : string list)
                                                     ->
                                                     Ojs.list_to_js
                                                       Ojs.string_to_js x917)
                                                  x916);(ExecFileOptionsWithOtherEncoding.t_to_js
                                                           x919)|])
        let (__promisify__ :
          file:string ->
            options:ExecFileOptions.t ->
              AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~file:(x921 : string) ->
            fun ~options:(x922 : ExecFileOptions.t) ->
              PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x921);(ExecFileOptions.t_to_js x922)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:ExecFileOptions.t ->
                AnonymousInterface3.t PromiseWithChild.t)
          =
          fun ~file:(x924 : string) ->
            fun ~args:(x925 : string list or_null_or_undefined) ->
              fun ~options:(x928 : ExecFileOptions.t) ->
                PromiseWithChild.t_of_js AnonymousInterface3.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x924);(or_null_or_undefined_to_js
                                                  (fun (x926 : string list)
                                                     ->
                                                     Ojs.list_to_js
                                                       Ojs.string_to_js x926)
                                                  x925);(ExecFileOptions.t_to_js
                                                           x928)|])
        let (__promisify__ :
          file:string ->
            options:(Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
              intersection2 or_null_or_undefined ->
              AnonymousInterface4.t PromiseWithChild.t)
          =
          fun ~file:(x930 : string) ->
            fun
              ~options:(x931 :
                         (Node_fs.Fs.BaseEncodingOptions.t,
                           ExecFileOptions.t) intersection2
                           or_null_or_undefined)
              ->
              PromiseWithChild.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x930);(or_null_or_undefined_to_js
                                                (fun
                                                   (x932 :
                                                     (Node_fs.Fs.BaseEncodingOptions.t,
                                                       ExecFileOptions.t)
                                                       intersection2)
                                                   ->
                                                   intersection2_to_js
                                                     Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                     ExecFileOptions.t_to_js
                                                     x932) x931)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:(Node_fs.Fs.BaseEncodingOptions.t, ExecFileOptions.t)
                intersection2 or_null_or_undefined ->
                AnonymousInterface4.t PromiseWithChild.t)
          =
          fun ~file:(x936 : string) ->
            fun ~args:(x937 : string list or_null_or_undefined) ->
              fun
                ~options:(x940 :
                           (Node_fs.Fs.BaseEncodingOptions.t,
                             ExecFileOptions.t) intersection2
                             or_null_or_undefined)
                ->
                PromiseWithChild.t_of_js AnonymousInterface4.t_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x936);(or_null_or_undefined_to_js
                                                  (fun (x938 : string list)
                                                     ->
                                                     Ojs.list_to_js
                                                       Ojs.string_to_js x938)
                                                  x937);(or_null_or_undefined_to_js
                                                           (fun
                                                              (x941 :
                                                                (Node_fs.Fs.BaseEncodingOptions.t,
                                                                  ExecFileOptions.t)
                                                                  intersection2)
                                                              ->
                                                              intersection2_to_js
                                                                Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                                ExecFileOptions.t_to_js
                                                                x941) x940)|])
      end
    module ForkOptions =
      struct
        include struct include ProcessEnvOptions end
        let (get_exec_path : t -> string) =
          fun (x945 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x945) "execPath")
        let (set_exec_path : t -> string -> unit) =
          fun (x946 : t) ->
            fun (x947 : string) ->
              Ojs.set_prop_ascii (t_to_js x946) "execPath"
                (Ojs.string_to_js x947)
        let (get_exec_argv : t -> string list) =
          fun (x948 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x948) "execArgv")
        let (set_exec_argv : t -> string list -> unit) =
          fun (x950 : t) ->
            fun (x951 : string list) ->
              Ojs.set_prop_ascii (t_to_js x950) "execArgv"
                (Ojs.list_to_js Ojs.string_to_js x951)
        let (get_silent : t -> bool) =
          fun (x953 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x953) "silent")
        let (set_silent : t -> bool -> unit) =
          fun (x954 : t) ->
            fun (x955 : bool) ->
              Ojs.set_prop_ascii (t_to_js x954) "silent"
                (Ojs.bool_to_js x955)
        let (get_stdio : t -> StdioOptions.t) =
          fun (x956 : t) ->
            StdioOptions.t_of_js (Ojs.get_prop_ascii (t_to_js x956) "stdio")
        let (set_stdio : t -> StdioOptions.t -> unit) =
          fun (x957 : t) ->
            fun (x958 : StdioOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x957) "stdio"
                (StdioOptions.t_to_js x958)
        let (get_detached : t -> bool) =
          fun (x959 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x959) "detached")
        let (set_detached : t -> bool -> unit) =
          fun (x960 : t) ->
            fun (x961 : bool) ->
              Ojs.set_prop_ascii (t_to_js x960) "detached"
                (Ojs.bool_to_js x961)
        let (get_windows_verbatim_arguments : t -> bool) =
          fun (x962 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x962) "windowsVerbatimArguments")
        let (set_windows_verbatim_arguments : t -> bool -> unit) =
          fun (x963 : t) ->
            fun (x964 : bool) ->
              Ojs.set_prop_ascii (t_to_js x963) "windowsVerbatimArguments"
                (Ojs.bool_to_js x964)
        let (cast' : t -> MessagingOptions.t) =
          fun (x965 : t) -> MessagingOptions.t_of_js (t_to_js x965)
      end
    let (fork :
      module_path:string -> ?options:ForkOptions.t -> unit -> ChildProcess.t)
      =
      fun ~module_path:(x966 : string) ->
        fun ?options:(x967 : ForkOptions.t option) ->
          fun () ->
            ChildProcess.t_of_js
              (let x970 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x970 "fork") "apply"
                 [|x970;((let x968 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x968 "push" [|(Ojs.string_to_js x966)|]);
                          (match x967 with
                           | Some x969 ->
                               ignore
                                 (Ojs.call x968 "push"
                                    [|(ForkOptions.t_to_js x969)|])
                           | None -> ());
                          x968))|])
    let (fork :
      module_path:string ->
        ?args:string list -> ?options:ForkOptions.t -> unit -> ChildProcess.t)
      =
      fun ~module_path:(x971 : string) ->
        fun ?args:(x972 : string list option) ->
          fun ?options:(x973 : ForkOptions.t option) ->
            fun () ->
              ChildProcess.t_of_js
                (let x978 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x978 "fork") "apply"
                   [|x978;((let x974 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x974 "push"
                                 [|(Ojs.string_to_js x971)|]);
                            (match x972 with
                             | Some x976 ->
                                 ignore
                                   (Ojs.call x974 "push"
                                      [|(Ojs.list_to_js Ojs.string_to_js x976)|])
                             | None -> ());
                            (match x973 with
                             | Some x975 ->
                                 ignore
                                   (Ojs.call x974 "push"
                                      [|(ForkOptions.t_to_js x975)|])
                             | None -> ());
                            x974))|])
    module SpawnSyncOptions =
      struct
        include struct include CommonSpawnOptions end
        let (get_input : t -> ArrayBufferView.t or_string) =
          fun (x979 : t) ->
            or_string_of_js ArrayBufferView.t_of_js
              (Ojs.get_prop_ascii (t_to_js x979) "input")
        let (set_input : t -> ArrayBufferView.t or_string -> unit) =
          fun (x981 : t) ->
            fun (x982 : ArrayBufferView.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x981) "input"
                (or_string_to_js ArrayBufferView.t_to_js x982)
        let (get_kill_signal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x984 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x984) "killSignal")
        let (set_kill_signal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x986 : t) ->
            fun (x987 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x986) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x987)
        let (get_max_buffer : t -> int) =
          fun (x989 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x989) "maxBuffer")
        let (set_max_buffer : t -> int -> unit) =
          fun (x990 : t) ->
            fun (x991 : int) ->
              Ojs.set_prop_ascii (t_to_js x990) "maxBuffer"
                (Ojs.int_to_js x991)
        let (get_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null) =
          fun (x992 : t) ->
            or_null_of_js
              (fun (x993 : Ojs.t) ->
                 or_enum_of_js BufferEncoding.t_of_js
                   (fun (x995 : Ojs.t) ->
                      let x996 = x995 in
                      match Ojs.string_of_js x996 with
                      | "buffer" -> `buffer
                      | _ -> assert false) x993)
              (Ojs.get_prop_ascii (t_to_js x992) "encoding")
        let (set_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null -> unit) =
          fun (x997 : t) ->
            fun (x998 : (BufferEncoding.t, [ `buffer ]) or_enum or_null) ->
              Ojs.set_prop_ascii (t_to_js x997) "encoding"
                (or_null_to_js
                   (fun (x999 : (BufferEncoding.t, [ `buffer ]) or_enum) ->
                      or_enum_to_js BufferEncoding.t_to_js
                        (fun (x1001 : [ `buffer ]) ->
                           match x1001 with
                           | `buffer -> Ojs.string_to_js "buffer") x999) x998)
      end
    module SpawnSyncOptionsWithStringEncoding =
      struct
        include struct include SpawnSyncOptions end
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1002 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1002) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1003 : t) ->
            fun (x1004 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1003) "encoding"
                (BufferEncoding.t_to_js x1004)
      end
    module SpawnSyncOptionsWithBufferEncoding =
      struct
        include struct include SpawnSyncOptions end
        let (get_encoding : t -> [ `buffer ] or_null) =
          fun (x1005 : t) ->
            or_null_of_js
              (fun (x1006 : Ojs.t) ->
                 let x1007 = x1006 in
                 match Ojs.string_of_js x1007 with
                 | "buffer" -> `buffer
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x1005) "encoding")
        let (set_encoding : t -> [ `buffer ] or_null -> unit) =
          fun (x1008 : t) ->
            fun (x1009 : [ `buffer ] or_null) ->
              Ojs.set_prop_ascii (t_to_js x1008) "encoding"
                (or_null_to_js
                   (fun (x1010 : [ `buffer ]) ->
                      match x1010 with | `buffer -> Ojs.string_to_js "buffer")
                   x1009)
      end
    module SpawnSyncReturns =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x1012 : Ojs.t) -> x1012
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x1011 : Ojs.t) -> x1011
        let (get_pid : 'T t -> int) =
          fun (x1013 : 'T t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1013) "pid")
        let (set_pid : 'T t -> int -> unit) =
          fun (x1015 : 'T t) ->
            fun (x1016 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1015) "pid"
                (Ojs.int_to_js x1016)
        let (get_output : 'T t -> string list) =
          fun (x1018 : 'T t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1018) "output")
        let (set_output : 'T t -> string list -> unit) =
          fun (x1021 : 'T t) ->
            fun (x1022 : string list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1021) "output"
                (Ojs.list_to_js Ojs.string_to_js x1022)
        let (get_stdout : 'T t -> 'T) =
          fun (x1025 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x1025) "stdout")
        let (set_stdout : 'T t -> 'T -> unit) =
          fun (x1027 : 'T t) ->
            fun (x1028 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1027) "stdout"
                (Obj.magic x1028)
        let (get_stderr : 'T t -> 'T) =
          fun (x1030 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x1030) "stderr")
        let (set_stderr : 'T t -> 'T -> unit) =
          fun (x1032 : 'T t) ->
            fun (x1033 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1032) "stderr"
                (Obj.magic x1033)
        let (get_status : 'T t -> int or_null) =
          fun (x1035 : 'T t) ->
            or_null_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1035) "status")
        let (set_status : 'T t -> int or_null -> unit) =
          fun (x1038 : 'T t) ->
            fun (x1039 : int or_null) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1038) "status"
                (or_null_to_js Ojs.int_to_js x1039)
        let (get_signal : 'T t -> Node_process.Process.Signals.t or_null) =
          fun (x1042 : 'T t) ->
            or_null_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1042) "signal")
        let (set_signal :
          'T t -> Node_process.Process.Signals.t or_null -> unit) =
          fun (x1045 : 'T t) ->
            fun (x1046 : Node_process.Process.Signals.t or_null) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1045) "signal"
                (or_null_to_js Node_process.Process.Signals.t_to_js x1046)
        let (get_error : 'T t -> Error.t) =
          fun (x1049 : 'T t) ->
            Error.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1049) "error")
        let (set_error : 'T t -> Error.t -> unit) =
          fun (x1051 : 'T t) ->
            fun (x1052 : Error.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1051) "error"
                (Error.t_to_js x1052)
      end
    let (spawn'Sync : command:string -> Buffer.t SpawnSyncReturns.t) =
      fun ~command:(x1054 : string) ->
        SpawnSyncReturns.t_of_js Buffer.t_of_js
          (Ojs.call Import.child_process "spawnSync"
             [|(Ojs.string_to_js x1054)|])
    let (spawn'Sync :
      command:string ->
        ?options:SpawnSyncOptionsWithStringEncoding.t ->
          unit -> string SpawnSyncReturns.t)
      =
      fun ~command:(x1056 : string) ->
        fun ?options:(x1057 : SpawnSyncOptionsWithStringEncoding.t option) ->
          fun () ->
            SpawnSyncReturns.t_of_js Ojs.string_of_js
              (let x1060 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1060 "spawnSync") "apply"
                 [|x1060;((let x1058 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1058 "push"
                                [|(Ojs.string_to_js x1056)|]);
                           (match x1057 with
                            | Some x1059 ->
                                ignore
                                  (Ojs.call x1058 "push"
                                     [|(SpawnSyncOptionsWithStringEncoding.t_to_js
                                          x1059)|])
                            | None -> ());
                           x1058))|])
    let (spawn'Sync :
      command:string ->
        ?options:SpawnSyncOptionsWithBufferEncoding.t ->
          unit -> Buffer.t SpawnSyncReturns.t)
      =
      fun ~command:(x1062 : string) ->
        fun ?options:(x1063 : SpawnSyncOptionsWithBufferEncoding.t option) ->
          fun () ->
            SpawnSyncReturns.t_of_js Buffer.t_of_js
              (let x1066 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1066 "spawnSync") "apply"
                 [|x1066;((let x1064 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1064 "push"
                                [|(Ojs.string_to_js x1062)|]);
                           (match x1063 with
                            | Some x1065 ->
                                ignore
                                  (Ojs.call x1064 "push"
                                     [|(SpawnSyncOptionsWithBufferEncoding.t_to_js
                                          x1065)|])
                            | None -> ());
                           x1064))|])
    let (spawn'Sync :
      command:string ->
        ?options:SpawnSyncOptions.t -> unit -> Buffer.t SpawnSyncReturns.t)
      =
      fun ~command:(x1068 : string) ->
        fun ?options:(x1069 : SpawnSyncOptions.t option) ->
          fun () ->
            SpawnSyncReturns.t_of_js Buffer.t_of_js
              (let x1072 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1072 "spawnSync") "apply"
                 [|x1072;((let x1070 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1070 "push"
                                [|(Ojs.string_to_js x1068)|]);
                           (match x1069 with
                            | Some x1071 ->
                                ignore
                                  (Ojs.call x1070 "push"
                                     [|(SpawnSyncOptions.t_to_js x1071)|])
                            | None -> ());
                           x1070))|])
    let (spawn'Sync :
      command:string ->
        ?args:string list ->
          ?options:SpawnSyncOptionsWithStringEncoding.t ->
            unit -> string SpawnSyncReturns.t)
      =
      fun ~command:(x1074 : string) ->
        fun ?args:(x1075 : string list option) ->
          fun ?options:(x1076 : SpawnSyncOptionsWithStringEncoding.t option)
            ->
            fun () ->
              SpawnSyncReturns.t_of_js Ojs.string_of_js
                (let x1081 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1081 "spawnSync") "apply"
                   [|x1081;((let x1077 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1077 "push"
                                  [|(Ojs.string_to_js x1074)|]);
                             (match x1075 with
                              | Some x1079 ->
                                  ignore
                                    (Ojs.call x1077 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1079)|])
                              | None -> ());
                             (match x1076 with
                              | Some x1078 ->
                                  ignore
                                    (Ojs.call x1077 "push"
                                       [|(SpawnSyncOptionsWithStringEncoding.t_to_js
                                            x1078)|])
                              | None -> ());
                             x1077))|])
    let (spawn'Sync :
      command:string ->
        ?args:string list ->
          ?options:SpawnSyncOptionsWithBufferEncoding.t ->
            unit -> Buffer.t SpawnSyncReturns.t)
      =
      fun ~command:(x1083 : string) ->
        fun ?args:(x1084 : string list option) ->
          fun ?options:(x1085 : SpawnSyncOptionsWithBufferEncoding.t option)
            ->
            fun () ->
              SpawnSyncReturns.t_of_js Buffer.t_of_js
                (let x1090 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1090 "spawnSync") "apply"
                   [|x1090;((let x1086 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1086 "push"
                                  [|(Ojs.string_to_js x1083)|]);
                             (match x1084 with
                              | Some x1088 ->
                                  ignore
                                    (Ojs.call x1086 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1088)|])
                              | None -> ());
                             (match x1085 with
                              | Some x1087 ->
                                  ignore
                                    (Ojs.call x1086 "push"
                                       [|(SpawnSyncOptionsWithBufferEncoding.t_to_js
                                            x1087)|])
                              | None -> ());
                             x1086))|])
    let (spawn'Sync :
      command:string ->
        ?args:string list ->
          ?options:SpawnSyncOptions.t -> unit -> Buffer.t SpawnSyncReturns.t)
      =
      fun ~command:(x1092 : string) ->
        fun ?args:(x1093 : string list option) ->
          fun ?options:(x1094 : SpawnSyncOptions.t option) ->
            fun () ->
              SpawnSyncReturns.t_of_js Buffer.t_of_js
                (let x1099 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1099 "spawnSync") "apply"
                   [|x1099;((let x1095 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1095 "push"
                                  [|(Ojs.string_to_js x1092)|]);
                             (match x1093 with
                              | Some x1097 ->
                                  ignore
                                    (Ojs.call x1095 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1097)|])
                              | None -> ());
                             (match x1094 with
                              | Some x1096 ->
                                  ignore
                                    (Ojs.call x1095 "push"
                                       [|(SpawnSyncOptions.t_to_js x1096)|])
                              | None -> ());
                             x1095))|])
    module ExecSyncOptions =
      struct
        include struct include CommonOptions end
        let (get_input : t -> Uint8Array.t or_string) =
          fun (x1101 : t) ->
            or_string_of_js Uint8Array.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1101) "input")
        let (set_input : t -> Uint8Array.t or_string -> unit) =
          fun (x1103 : t) ->
            fun (x1104 : Uint8Array.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1103) "input"
                (or_string_to_js Uint8Array.t_to_js x1104)
        let (get_stdio : t -> StdioOptions.t) =
          fun (x1106 : t) ->
            StdioOptions.t_of_js (Ojs.get_prop_ascii (t_to_js x1106) "stdio")
        let (set_stdio : t -> StdioOptions.t -> unit) =
          fun (x1107 : t) ->
            fun (x1108 : StdioOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x1107) "stdio"
                (StdioOptions.t_to_js x1108)
        let (get_shell : t -> string) =
          fun (x1109 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1109) "shell")
        let (set_shell : t -> string -> unit) =
          fun (x1110 : t) ->
            fun (x1111 : string) ->
              Ojs.set_prop_ascii (t_to_js x1110) "shell"
                (Ojs.string_to_js x1111)
        let (get_kill_signal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x1112 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1112) "killSignal")
        let (set_kill_signal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x1114 : t) ->
            fun (x1115 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x1114) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x1115)
        let (get_max_buffer : t -> int) =
          fun (x1117 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1117) "maxBuffer")
        let (set_max_buffer : t -> int -> unit) =
          fun (x1118 : t) ->
            fun (x1119 : int) ->
              Ojs.set_prop_ascii (t_to_js x1118) "maxBuffer"
                (Ojs.int_to_js x1119)
        let (get_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null) =
          fun (x1120 : t) ->
            or_null_of_js
              (fun (x1121 : Ojs.t) ->
                 or_enum_of_js BufferEncoding.t_of_js
                   (fun (x1123 : Ojs.t) ->
                      let x1124 = x1123 in
                      match Ojs.string_of_js x1124 with
                      | "buffer" -> `buffer
                      | _ -> assert false) x1121)
              (Ojs.get_prop_ascii (t_to_js x1120) "encoding")
        let (set_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null -> unit) =
          fun (x1125 : t) ->
            fun (x1126 : (BufferEncoding.t, [ `buffer ]) or_enum or_null) ->
              Ojs.set_prop_ascii (t_to_js x1125) "encoding"
                (or_null_to_js
                   (fun (x1127 : (BufferEncoding.t, [ `buffer ]) or_enum) ->
                      or_enum_to_js BufferEncoding.t_to_js
                        (fun (x1129 : [ `buffer ]) ->
                           match x1129 with
                           | `buffer -> Ojs.string_to_js "buffer") x1127)
                   x1126)
      end
    module ExecSyncOptionsWithStringEncoding =
      struct
        include struct include ExecSyncOptions end
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1130 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1130) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1131 : t) ->
            fun (x1132 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1131) "encoding"
                (BufferEncoding.t_to_js x1132)
      end
    module ExecSyncOptionsWithBufferEncoding =
      struct
        include struct include ExecSyncOptions end
        let (get_encoding : t -> [ `buffer ] or_null) =
          fun (x1133 : t) ->
            or_null_of_js
              (fun (x1134 : Ojs.t) ->
                 let x1135 = x1134 in
                 match Ojs.string_of_js x1135 with
                 | "buffer" -> `buffer
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x1133) "encoding")
        let (set_encoding : t -> [ `buffer ] or_null -> unit) =
          fun (x1136 : t) ->
            fun (x1137 : [ `buffer ] or_null) ->
              Ojs.set_prop_ascii (t_to_js x1136) "encoding"
                (or_null_to_js
                   (fun (x1138 : [ `buffer ]) ->
                      match x1138 with | `buffer -> Ojs.string_to_js "buffer")
                   x1137)
      end
    let (exec_sync : command:string -> Buffer.t) =
      fun ~command:(x1139 : string) ->
        Buffer.t_of_js
          (Ojs.call Import.child_process "execSync"
             [|(Ojs.string_to_js x1139)|])
    let (exec_sync :
      command:string ->
        ?options:ExecSyncOptionsWithStringEncoding.t -> unit -> string)
      =
      fun ~command:(x1140 : string) ->
        fun ?options:(x1141 : ExecSyncOptionsWithStringEncoding.t option) ->
          fun () ->
            Ojs.string_of_js
              (let x1144 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1144 "execSync") "apply"
                 [|x1144;((let x1142 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1142 "push"
                                [|(Ojs.string_to_js x1140)|]);
                           (match x1141 with
                            | Some x1143 ->
                                ignore
                                  (Ojs.call x1142 "push"
                                     [|(ExecSyncOptionsWithStringEncoding.t_to_js
                                          x1143)|])
                            | None -> ());
                           x1142))|])
    let (exec_sync :
      command:string ->
        ?options:ExecSyncOptionsWithBufferEncoding.t -> unit -> Buffer.t)
      =
      fun ~command:(x1145 : string) ->
        fun ?options:(x1146 : ExecSyncOptionsWithBufferEncoding.t option) ->
          fun () ->
            Buffer.t_of_js
              (let x1149 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1149 "execSync") "apply"
                 [|x1149;((let x1147 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1147 "push"
                                [|(Ojs.string_to_js x1145)|]);
                           (match x1146 with
                            | Some x1148 ->
                                ignore
                                  (Ojs.call x1147 "push"
                                     [|(ExecSyncOptionsWithBufferEncoding.t_to_js
                                          x1148)|])
                            | None -> ());
                           x1147))|])
    let (exec_sync :
      command:string -> ?options:ExecSyncOptions.t -> unit -> Buffer.t) =
      fun ~command:(x1150 : string) ->
        fun ?options:(x1151 : ExecSyncOptions.t option) ->
          fun () ->
            Buffer.t_of_js
              (let x1154 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1154 "execSync") "apply"
                 [|x1154;((let x1152 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1152 "push"
                                [|(Ojs.string_to_js x1150)|]);
                           (match x1151 with
                            | Some x1153 ->
                                ignore
                                  (Ojs.call x1152 "push"
                                     [|(ExecSyncOptions.t_to_js x1153)|])
                            | None -> ());
                           x1152))|])
    module ExecFileSyncOptions =
      struct
        include struct include CommonOptions end
        let (get_input : t -> ArrayBufferView.t or_string) =
          fun (x1155 : t) ->
            or_string_of_js ArrayBufferView.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1155) "input")
        let (set_input : t -> ArrayBufferView.t or_string -> unit) =
          fun (x1157 : t) ->
            fun (x1158 : ArrayBufferView.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1157) "input"
                (or_string_to_js ArrayBufferView.t_to_js x1158)
        let (get_stdio : t -> StdioOptions.t) =
          fun (x1160 : t) ->
            StdioOptions.t_of_js (Ojs.get_prop_ascii (t_to_js x1160) "stdio")
        let (set_stdio : t -> StdioOptions.t -> unit) =
          fun (x1161 : t) ->
            fun (x1162 : StdioOptions.t) ->
              Ojs.set_prop_ascii (t_to_js x1161) "stdio"
                (StdioOptions.t_to_js x1162)
        let (get_kill_signal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x1163 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1163) "killSignal")
        let (set_kill_signal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x1165 : t) ->
            fun (x1166 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x1165) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x1166)
        let (get_max_buffer : t -> int) =
          fun (x1168 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1168) "maxBuffer")
        let (set_max_buffer : t -> int -> unit) =
          fun (x1169 : t) ->
            fun (x1170 : int) ->
              Ojs.set_prop_ascii (t_to_js x1169) "maxBuffer"
                (Ojs.int_to_js x1170)
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1171 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1171) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1172 : t) ->
            fun (x1173 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1172) "encoding"
                (BufferEncoding.t_to_js x1173)
        let (get_shell : t -> bool or_string) =
          fun (x1174 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1174) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x1176 : t) ->
            fun (x1177 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x1176) "shell"
                (or_string_to_js Ojs.bool_to_js x1177)
      end
    module ExecFileSyncOptionsWithStringEncoding =
      struct
        include struct include ExecFileSyncOptions end
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1179 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1179) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1180 : t) ->
            fun (x1181 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1180) "encoding"
                (BufferEncoding.t_to_js x1181)
      end
    module ExecFileSyncOptionsWithBufferEncoding =
      struct
        include struct include ExecFileSyncOptions end
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1182 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1182) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1183 : t) ->
            fun (x1184 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1183) "encoding"
                (BufferEncoding.t_to_js x1184)
      end
    let (exec_file_sync : command:string -> Buffer.t) =
      fun ~command:(x1185 : string) ->
        Buffer.t_of_js
          (Ojs.call Import.child_process "execFileSync"
             [|(Ojs.string_to_js x1185)|])
    let (exec_file_sync :
      command:string ->
        ?options:ExecFileSyncOptionsWithStringEncoding.t -> unit -> string)
      =
      fun ~command:(x1186 : string) ->
        fun ?options:(x1187 : ExecFileSyncOptionsWithStringEncoding.t option)
          ->
          fun () ->
            Ojs.string_of_js
              (let x1190 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1190 "execFileSync") "apply"
                 [|x1190;((let x1188 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1188 "push"
                                [|(Ojs.string_to_js x1186)|]);
                           (match x1187 with
                            | Some x1189 ->
                                ignore
                                  (Ojs.call x1188 "push"
                                     [|(ExecFileSyncOptionsWithStringEncoding.t_to_js
                                          x1189)|])
                            | None -> ());
                           x1188))|])
    let (exec_file_sync :
      command:string ->
        ?options:ExecFileSyncOptionsWithBufferEncoding.t -> unit -> Buffer.t)
      =
      fun ~command:(x1191 : string) ->
        fun ?options:(x1192 : ExecFileSyncOptionsWithBufferEncoding.t option)
          ->
          fun () ->
            Buffer.t_of_js
              (let x1195 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1195 "execFileSync") "apply"
                 [|x1195;((let x1193 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1193 "push"
                                [|(Ojs.string_to_js x1191)|]);
                           (match x1192 with
                            | Some x1194 ->
                                ignore
                                  (Ojs.call x1193 "push"
                                     [|(ExecFileSyncOptionsWithBufferEncoding.t_to_js
                                          x1194)|])
                            | None -> ());
                           x1193))|])
    let (exec_file_sync :
      command:string -> ?options:ExecFileSyncOptions.t -> unit -> Buffer.t) =
      fun ~command:(x1196 : string) ->
        fun ?options:(x1197 : ExecFileSyncOptions.t option) ->
          fun () ->
            Buffer.t_of_js
              (let x1200 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1200 "execFileSync") "apply"
                 [|x1200;((let x1198 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1198 "push"
                                [|(Ojs.string_to_js x1196)|]);
                           (match x1197 with
                            | Some x1199 ->
                                ignore
                                  (Ojs.call x1198 "push"
                                     [|(ExecFileSyncOptions.t_to_js x1199)|])
                            | None -> ());
                           x1198))|])
    let (exec_file_sync :
      command:string ->
        ?args:string list ->
          ?options:ExecFileSyncOptionsWithStringEncoding.t -> unit -> string)
      =
      fun ~command:(x1201 : string) ->
        fun ?args:(x1202 : string list option) ->
          fun
            ?options:(x1203 : ExecFileSyncOptionsWithStringEncoding.t option)
            ->
            fun () ->
              Ojs.string_of_js
                (let x1208 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1208 "execFileSync") "apply"
                   [|x1208;((let x1204 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1204 "push"
                                  [|(Ojs.string_to_js x1201)|]);
                             (match x1202 with
                              | Some x1206 ->
                                  ignore
                                    (Ojs.call x1204 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1206)|])
                              | None -> ());
                             (match x1203 with
                              | Some x1205 ->
                                  ignore
                                    (Ojs.call x1204 "push"
                                       [|(ExecFileSyncOptionsWithStringEncoding.t_to_js
                                            x1205)|])
                              | None -> ());
                             x1204))|])
    let (exec_file_sync :
      command:string ->
        ?args:string list ->
          ?options:ExecFileSyncOptionsWithBufferEncoding.t ->
            unit -> Buffer.t)
      =
      fun ~command:(x1209 : string) ->
        fun ?args:(x1210 : string list option) ->
          fun
            ?options:(x1211 : ExecFileSyncOptionsWithBufferEncoding.t option)
            ->
            fun () ->
              Buffer.t_of_js
                (let x1216 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1216 "execFileSync") "apply"
                   [|x1216;((let x1212 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1212 "push"
                                  [|(Ojs.string_to_js x1209)|]);
                             (match x1210 with
                              | Some x1214 ->
                                  ignore
                                    (Ojs.call x1212 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1214)|])
                              | None -> ());
                             (match x1211 with
                              | Some x1213 ->
                                  ignore
                                    (Ojs.call x1212 "push"
                                       [|(ExecFileSyncOptionsWithBufferEncoding.t_to_js
                                            x1213)|])
                              | None -> ());
                             x1212))|])
    let (exec_file_sync :
      command:string ->
        ?args:string list ->
          ?options:ExecFileSyncOptions.t -> unit -> Buffer.t)
      =
      fun ~command:(x1217 : string) ->
        fun ?args:(x1218 : string list option) ->
          fun ?options:(x1219 : ExecFileSyncOptions.t option) ->
            fun () ->
              Buffer.t_of_js
                (let x1224 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1224 "execFileSync") "apply"
                   [|x1224;((let x1220 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1220 "push"
                                  [|(Ojs.string_to_js x1217)|]);
                             (match x1218 with
                              | Some x1222 ->
                                  ignore
                                    (Ojs.call x1220 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1222)|])
                              | None -> ());
                             (match x1219 with
                              | Some x1221 ->
                                  ignore
                                    (Ojs.call x1220 "push"
                                       [|(ExecFileSyncOptions.t_to_js x1221)|])
                              | None -> ());
                             x1220))|])
  end
