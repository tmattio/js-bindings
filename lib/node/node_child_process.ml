[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
open Node_events
open Node_net
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
        type anonymous_interface_1 = [ `anonymous_interface_1 ] intf
        let rec anonymous_interface_1_of_js : Ojs.t -> anonymous_interface_1
          = Obj.magic
        and anonymous_interface_1_to_js : anonymous_interface_1 -> Ojs.t =
          Obj.magic
        type anonymous_interface_2 = [ `anonymous_interface_2 ] intf
        let rec anonymous_interface_2_of_js : Ojs.t -> anonymous_interface_2
          = Obj.magic
        and anonymous_interface_2_to_js : anonymous_interface_2 -> Ojs.t =
          Obj.magic
        type anonymous_interface_3 = [ `anonymous_interface_3 ] intf
        let rec anonymous_interface_3_of_js : Ojs.t -> anonymous_interface_3
          = Obj.magic
        and anonymous_interface_3_to_js : anonymous_interface_3 -> Ojs.t =
          Obj.magic
        type anonymous_interface_4 = [ `anonymous_interface_4 ] intf
        let rec anonymous_interface_4_of_js : Ojs.t -> anonymous_interface_4
          = Obj.magic
        and anonymous_interface_4_to_js : anonymous_interface_4 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type child_process_ChildProcess =
          [ `Child_process_ChildProcess ] intf
        and ('I, 'O, 'E) child_process_ChildProcessByStdio =
          [ `Child_process_ChildProcessByStdio of ('I * 'O * 'E) 
          | `Child_process_ChildProcess ] intf
        and child_process_ChildProcessWithoutNullStreams =
          [ `Child_process_ChildProcessWithoutNullStreams 
          | `Child_process_ChildProcess ] intf
        and child_process_CommonOptions =
          [ `Child_process_CommonOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_CommonSpawnOptions =
          [ `Child_process_CommonSpawnOptions 
          | `Child_process_CommonOptions  | `Child_process_MessagingOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecException =
          [ `Child_process_ExecException ] intf
        and child_process_ExecFileException =
          (child_process_ExecException, ErrnoException.t) intersection2
        and child_process_ExecFileOptions =
          [ `Child_process_ExecFileOptions  | `Child_process_CommonOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecFileOptionsWithBufferEncoding =
          [ `Child_process_ExecFileOptionsWithBufferEncoding 
          | `Child_process_CommonOptions  | `Child_process_ExecFileOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecFileOptionsWithOtherEncoding =
          [ `Child_process_ExecFileOptionsWithOtherEncoding 
          | `Child_process_CommonOptions  | `Child_process_ExecFileOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecFileOptionsWithStringEncoding =
          [ `Child_process_ExecFileOptionsWithStringEncoding 
          | `Child_process_CommonOptions  | `Child_process_ExecFileOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecFileSyncOptions =
          [ `Child_process_ExecFileSyncOptions 
          | `Child_process_CommonOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecFileSyncOptionsWithBufferEncoding =
          [ `Child_process_ExecFileSyncOptionsWithBufferEncoding 
          | `Child_process_CommonOptions 
          | `Child_process_ExecFileSyncOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecFileSyncOptionsWithStringEncoding =
          [ `Child_process_ExecFileSyncOptionsWithStringEncoding 
          | `Child_process_CommonOptions 
          | `Child_process_ExecFileSyncOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecOptions =
          [ `Child_process_ExecOptions  | `Child_process_CommonOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecOptionsWithBufferEncoding =
          [ `Child_process_ExecOptionsWithBufferEncoding 
          | `Child_process_CommonOptions  | `Child_process_ExecOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecOptionsWithStringEncoding =
          [ `Child_process_ExecOptionsWithStringEncoding 
          | `Child_process_CommonOptions  | `Child_process_ExecOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecSyncOptions =
          [ `Child_process_ExecSyncOptions  | `Child_process_CommonOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecSyncOptionsWithBufferEncoding =
          [ `Child_process_ExecSyncOptionsWithBufferEncoding 
          | `Child_process_CommonOptions  | `Child_process_ExecSyncOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ExecSyncOptionsWithStringEncoding =
          [ `Child_process_ExecSyncOptionsWithStringEncoding 
          | `Child_process_CommonOptions  | `Child_process_ExecSyncOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_ForkOptions =
          [ `Child_process_ForkOptions  | `Child_process_MessagingOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_MessageOptions =
          [ `Child_process_MessageOptions ] intf
        and child_process_MessagingOptions =
          [ `Child_process_MessagingOptions ] intf
        and child_process_ProcessEnvOptions =
          [ `Child_process_ProcessEnvOptions ] intf
        and 'T child_process_PromiseWithChild =
          [ `Child_process_PromiseWithChild of 'T ] intf
        and child_process_SendHandle = (Net.Server.t, Net.Socket.t) union2
        and child_process_Serializable =
          untyped_object or_boolean or_string or_number
        and child_process_SerializationType = [ `advanced  | `json ]
        and child_process_SpawnOptions =
          [ `Child_process_SpawnOptions  | `Child_process_CommonOptions 
          | `Child_process_CommonSpawnOptions 
          | `Child_process_MessagingOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and ('Stdin, 'Stdout,
          'Stderr) child_process_SpawnOptionsWithStdioTuple =
          [
            `Child_process_SpawnOptionsWithStdioTuple of
              ('Stdin * 'Stdout * 'Stderr) 
          | `Child_process_CommonOptions 
          | `Child_process_CommonSpawnOptions 
          | `Child_process_MessagingOptions 
          | `Child_process_ProcessEnvOptions  | `Child_process_SpawnOptions ]
            intf
        and child_process_SpawnOptionsWithoutStdio =
          [ `Child_process_SpawnOptionsWithoutStdio 
          | `Child_process_CommonOptions 
          | `Child_process_CommonSpawnOptions 
          | `Child_process_MessagingOptions 
          | `Child_process_ProcessEnvOptions  | `Child_process_SpawnOptions ]
            intf
        and child_process_SpawnSyncOptions =
          [ `Child_process_SpawnSyncOptions  | `Child_process_CommonOptions 
          | `Child_process_CommonSpawnOptions 
          | `Child_process_MessagingOptions 
          | `Child_process_ProcessEnvOptions ] intf
        and child_process_SpawnSyncOptionsWithBufferEncoding =
          [ `Child_process_SpawnSyncOptionsWithBufferEncoding 
          | `Child_process_CommonOptions 
          | `Child_process_CommonSpawnOptions 
          | `Child_process_MessagingOptions 
          | `Child_process_ProcessEnvOptions 
          | `Child_process_SpawnSyncOptions ] intf
        and child_process_SpawnSyncOptionsWithStringEncoding =
          [ `Child_process_SpawnSyncOptionsWithStringEncoding 
          | `Child_process_CommonOptions 
          | `Child_process_CommonSpawnOptions 
          | `Child_process_MessagingOptions 
          | `Child_process_ProcessEnvOptions 
          | `Child_process_SpawnSyncOptions ] intf
        and 'T child_process_SpawnSyncReturns =
          [ `Child_process_SpawnSyncReturns of 'T ] intf
        and child_process_StdioNull =
          (Node_stream.Stream.Stream.t, [ `ignore  | `inherit_ ]) or_enum
        and child_process_StdioOptions =
          ((Node_stream.Stream.Stream.t,
             [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum or_number
             or_null_or_undefined list,
            [ `ignore  | `inherit_  | `pipe ]) or_enum
        and child_process_StdioPipe = [ `pipe ] or_null_or_undefined
        let rec child_process_ChildProcess_of_js :
          Ojs.t -> child_process_ChildProcess = Obj.magic
        and child_process_ChildProcess_to_js :
          child_process_ChildProcess -> Ojs.t = Obj.magic
        and child_process_ChildProcessByStdio_of_js :
          'I 'O 'E .
            (Ojs.t -> 'I) ->
              (Ojs.t -> 'O) ->
                (Ojs.t -> 'E) ->
                  Ojs.t -> ('I, 'O, 'E) child_process_ChildProcessByStdio
          = fun _I -> fun _O -> fun _E -> Obj.magic
        and child_process_ChildProcessByStdio_to_js :
          'I 'O 'E .
            ('I -> Ojs.t) ->
              ('O -> Ojs.t) ->
                ('E -> Ojs.t) ->
                  ('I, 'O, 'E) child_process_ChildProcessByStdio -> Ojs.t
          = fun _I -> fun _O -> fun _E -> Obj.magic
        and child_process_ChildProcessWithoutNullStreams_of_js :
          Ojs.t -> child_process_ChildProcessWithoutNullStreams = Obj.magic
        and child_process_ChildProcessWithoutNullStreams_to_js :
          child_process_ChildProcessWithoutNullStreams -> Ojs.t = Obj.magic
        and child_process_CommonOptions_of_js :
          Ojs.t -> child_process_CommonOptions = Obj.magic
        and child_process_CommonOptions_to_js :
          child_process_CommonOptions -> Ojs.t = Obj.magic
        and child_process_CommonSpawnOptions_of_js :
          Ojs.t -> child_process_CommonSpawnOptions = Obj.magic
        and child_process_CommonSpawnOptions_to_js :
          child_process_CommonSpawnOptions -> Ojs.t = Obj.magic
        and child_process_ExecException_of_js :
          Ojs.t -> child_process_ExecException = Obj.magic
        and child_process_ExecException_to_js :
          child_process_ExecException -> Ojs.t = Obj.magic
        and child_process_ExecFileException_of_js :
          Ojs.t -> child_process_ExecFileException =
          fun (x4 : Ojs.t) ->
            intersection2_of_js child_process_ExecException_of_js
              ErrnoException.t_of_js x4
        and child_process_ExecFileException_to_js :
          child_process_ExecFileException -> Ojs.t =
          fun
            (x1 :
              (child_process_ExecException, ErrnoException.t) intersection2)
            ->
            intersection2_to_js child_process_ExecException_to_js
              ErrnoException.t_to_js x1
        and child_process_ExecFileOptions_of_js :
          Ojs.t -> child_process_ExecFileOptions = Obj.magic
        and child_process_ExecFileOptions_to_js :
          child_process_ExecFileOptions -> Ojs.t = Obj.magic
        and child_process_ExecFileOptionsWithBufferEncoding_of_js :
          Ojs.t -> child_process_ExecFileOptionsWithBufferEncoding =
          Obj.magic
        and child_process_ExecFileOptionsWithBufferEncoding_to_js :
          child_process_ExecFileOptionsWithBufferEncoding -> Ojs.t =
          Obj.magic
        and child_process_ExecFileOptionsWithOtherEncoding_of_js :
          Ojs.t -> child_process_ExecFileOptionsWithOtherEncoding = Obj.magic
        and child_process_ExecFileOptionsWithOtherEncoding_to_js :
          child_process_ExecFileOptionsWithOtherEncoding -> Ojs.t = Obj.magic
        and child_process_ExecFileOptionsWithStringEncoding_of_js :
          Ojs.t -> child_process_ExecFileOptionsWithStringEncoding =
          Obj.magic
        and child_process_ExecFileOptionsWithStringEncoding_to_js :
          child_process_ExecFileOptionsWithStringEncoding -> Ojs.t =
          Obj.magic
        and child_process_ExecFileSyncOptions_of_js :
          Ojs.t -> child_process_ExecFileSyncOptions = Obj.magic
        and child_process_ExecFileSyncOptions_to_js :
          child_process_ExecFileSyncOptions -> Ojs.t = Obj.magic
        and child_process_ExecFileSyncOptionsWithBufferEncoding_of_js :
          Ojs.t -> child_process_ExecFileSyncOptionsWithBufferEncoding =
          Obj.magic
        and child_process_ExecFileSyncOptionsWithBufferEncoding_to_js :
          child_process_ExecFileSyncOptionsWithBufferEncoding -> Ojs.t =
          Obj.magic
        and child_process_ExecFileSyncOptionsWithStringEncoding_of_js :
          Ojs.t -> child_process_ExecFileSyncOptionsWithStringEncoding =
          Obj.magic
        and child_process_ExecFileSyncOptionsWithStringEncoding_to_js :
          child_process_ExecFileSyncOptionsWithStringEncoding -> Ojs.t =
          Obj.magic
        and child_process_ExecOptions_of_js :
          Ojs.t -> child_process_ExecOptions = Obj.magic
        and child_process_ExecOptions_to_js :
          child_process_ExecOptions -> Ojs.t = Obj.magic
        and child_process_ExecOptionsWithBufferEncoding_of_js :
          Ojs.t -> child_process_ExecOptionsWithBufferEncoding = Obj.magic
        and child_process_ExecOptionsWithBufferEncoding_to_js :
          child_process_ExecOptionsWithBufferEncoding -> Ojs.t = Obj.magic
        and child_process_ExecOptionsWithStringEncoding_of_js :
          Ojs.t -> child_process_ExecOptionsWithStringEncoding = Obj.magic
        and child_process_ExecOptionsWithStringEncoding_to_js :
          child_process_ExecOptionsWithStringEncoding -> Ojs.t = Obj.magic
        and child_process_ExecSyncOptions_of_js :
          Ojs.t -> child_process_ExecSyncOptions = Obj.magic
        and child_process_ExecSyncOptions_to_js :
          child_process_ExecSyncOptions -> Ojs.t = Obj.magic
        and child_process_ExecSyncOptionsWithBufferEncoding_of_js :
          Ojs.t -> child_process_ExecSyncOptionsWithBufferEncoding =
          Obj.magic
        and child_process_ExecSyncOptionsWithBufferEncoding_to_js :
          child_process_ExecSyncOptionsWithBufferEncoding -> Ojs.t =
          Obj.magic
        and child_process_ExecSyncOptionsWithStringEncoding_of_js :
          Ojs.t -> child_process_ExecSyncOptionsWithStringEncoding =
          Obj.magic
        and child_process_ExecSyncOptionsWithStringEncoding_to_js :
          child_process_ExecSyncOptionsWithStringEncoding -> Ojs.t =
          Obj.magic
        and child_process_ForkOptions_of_js :
          Ojs.t -> child_process_ForkOptions = Obj.magic
        and child_process_ForkOptions_to_js :
          child_process_ForkOptions -> Ojs.t = Obj.magic
        and child_process_MessageOptions_of_js :
          Ojs.t -> child_process_MessageOptions = Obj.magic
        and child_process_MessageOptions_to_js :
          child_process_MessageOptions -> Ojs.t = Obj.magic
        and child_process_MessagingOptions_of_js :
          Ojs.t -> child_process_MessagingOptions = Obj.magic
        and child_process_MessagingOptions_to_js :
          child_process_MessagingOptions -> Ojs.t = Obj.magic
        and child_process_ProcessEnvOptions_of_js :
          Ojs.t -> child_process_ProcessEnvOptions = Obj.magic
        and child_process_ProcessEnvOptions_to_js :
          child_process_ProcessEnvOptions -> Ojs.t = Obj.magic
        and child_process_PromiseWithChild_of_js :
          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T child_process_PromiseWithChild =
          fun _T -> Obj.magic
        and child_process_PromiseWithChild_to_js :
          'T . ('T -> Ojs.t) -> 'T child_process_PromiseWithChild -> Ojs.t =
          fun _T -> Obj.magic
        and child_process_SendHandle_of_js :
          Ojs.t -> child_process_SendHandle =
          fun (x10 : Ojs.t) ->
            union2_of_js Net.Server.t_of_js Net.Socket.t_of_js x10
        and child_process_SendHandle_to_js :
          child_process_SendHandle -> Ojs.t =
          fun (x7 : (Net.Server.t, Net.Socket.t) union2) ->
            union2_to_js Net.Server.t_to_js Net.Socket.t_to_js x7
        and child_process_Serializable_of_js :
          Ojs.t -> child_process_Serializable =
          fun (x17 : Ojs.t) ->
            or_number_of_js
              (fun (x18 : Ojs.t) ->
                 or_string_of_js
                   (fun (x19 : Ojs.t) ->
                      or_boolean_of_js untyped_object_of_js x19) x18) x17
        and child_process_Serializable_to_js :
          child_process_Serializable -> Ojs.t =
          fun (x13 : untyped_object or_boolean or_string or_number) ->
            or_number_to_js
              (fun (x14 : untyped_object or_boolean or_string) ->
                 or_string_to_js
                   (fun (x15 : untyped_object or_boolean) ->
                      or_boolean_to_js untyped_object_to_js x15) x14) x13
        and child_process_SerializationType_of_js :
          Ojs.t -> child_process_SerializationType =
          fun (x22 : Ojs.t) ->
            let x23 = x22 in
            match Ojs.string_of_js x23 with
            | "advanced" -> `advanced
            | "json" -> `json
            | _ -> assert false
        and child_process_SerializationType_to_js :
          child_process_SerializationType -> Ojs.t =
          fun (x21 : [ `advanced  | `json ]) ->
            match x21 with
            | `advanced -> Ojs.string_to_js "advanced"
            | `json -> Ojs.string_to_js "json"
        and child_process_SpawnOptions_of_js :
          Ojs.t -> child_process_SpawnOptions = Obj.magic
        and child_process_SpawnOptions_to_js :
          child_process_SpawnOptions -> Ojs.t = Obj.magic
        and child_process_SpawnOptionsWithStdioTuple_of_js :
          'Stdin 'Stdout 'Stderr .
            (Ojs.t -> 'Stdin) ->
              (Ojs.t -> 'Stdout) ->
                (Ojs.t -> 'Stderr) ->
                  Ojs.t ->
                    ('Stdin, 'Stdout, 'Stderr)
                      child_process_SpawnOptionsWithStdioTuple
          = fun _Stdin -> fun _Stdout -> fun _Stderr -> Obj.magic
        and child_process_SpawnOptionsWithStdioTuple_to_js :
          'Stdin 'Stdout 'Stderr .
            ('Stdin -> Ojs.t) ->
              ('Stdout -> Ojs.t) ->
                ('Stderr -> Ojs.t) ->
                  ('Stdin, 'Stdout, 'Stderr)
                    child_process_SpawnOptionsWithStdioTuple -> Ojs.t
          = fun _Stdin -> fun _Stdout -> fun _Stderr -> Obj.magic
        and child_process_SpawnOptionsWithoutStdio_of_js :
          Ojs.t -> child_process_SpawnOptionsWithoutStdio = Obj.magic
        and child_process_SpawnOptionsWithoutStdio_to_js :
          child_process_SpawnOptionsWithoutStdio -> Ojs.t = Obj.magic
        and child_process_SpawnSyncOptions_of_js :
          Ojs.t -> child_process_SpawnSyncOptions = Obj.magic
        and child_process_SpawnSyncOptions_to_js :
          child_process_SpawnSyncOptions -> Ojs.t = Obj.magic
        and child_process_SpawnSyncOptionsWithBufferEncoding_of_js :
          Ojs.t -> child_process_SpawnSyncOptionsWithBufferEncoding =
          Obj.magic
        and child_process_SpawnSyncOptionsWithBufferEncoding_to_js :
          child_process_SpawnSyncOptionsWithBufferEncoding -> Ojs.t =
          Obj.magic
        and child_process_SpawnSyncOptionsWithStringEncoding_of_js :
          Ojs.t -> child_process_SpawnSyncOptionsWithStringEncoding =
          Obj.magic
        and child_process_SpawnSyncOptionsWithStringEncoding_to_js :
          child_process_SpawnSyncOptionsWithStringEncoding -> Ojs.t =
          Obj.magic
        and child_process_SpawnSyncReturns_of_js :
          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T child_process_SpawnSyncReturns =
          fun _T -> Obj.magic
        and child_process_SpawnSyncReturns_to_js :
          'T . ('T -> Ojs.t) -> 'T child_process_SpawnSyncReturns -> Ojs.t =
          fun _T -> Obj.magic
        and child_process_StdioNull_of_js : Ojs.t -> child_process_StdioNull
          =
          fun (x27 : Ojs.t) ->
            or_enum_of_js Node_stream.Stream.Stream.t_of_js
              (fun (x29 : Ojs.t) ->
                 let x30 = x29 in
                 match Ojs.string_of_js x30 with
                 | "ignore" -> `ignore
                 | "inherit" -> `inherit_
                 | _ -> assert false) x27
        and child_process_StdioNull_to_js : child_process_StdioNull -> Ojs.t
          =
          fun
            (x24 :
              (Node_stream.Stream.Stream.t, [ `ignore  | `inherit_ ]) or_enum)
            ->
            or_enum_to_js Node_stream.Stream.Stream.t_to_js
              (fun (x26 : [ `ignore  | `inherit_ ]) ->
                 match x26 with
                 | `ignore -> Ojs.string_to_js "ignore"
                 | `inherit_ -> Ojs.string_to_js "inherit") x24
        and child_process_StdioOptions_of_js :
          Ojs.t -> child_process_StdioOptions =
          fun (x39 : Ojs.t) ->
            or_enum_of_js
              (fun (x40 : Ojs.t) ->
                 Ojs.list_of_js
                   (fun (x41 : Ojs.t) ->
                      or_null_or_undefined_of_js
                        (fun (x42 : Ojs.t) ->
                           or_number_of_js
                             (fun (x43 : Ojs.t) ->
                                or_enum_of_js
                                  Node_stream.Stream.Stream.t_of_js
                                  (fun (x45 : Ojs.t) ->
                                     let x46 = x45 in
                                     match Ojs.string_of_js x46 with
                                     | "ignore" -> `ignore
                                     | "inherit" -> `inherit_
                                     | "ipc" -> `ipc
                                     | "pipe" -> `pipe
                                     | _ -> assert false) x43) x42) x41) x40)
              (fun (x47 : Ojs.t) ->
                 let x48 = x47 in
                 match Ojs.string_of_js x48 with
                 | "ignore" -> `ignore
                 | "inherit" -> `inherit_
                 | "pipe" -> `pipe
                 | _ -> assert false) x39
        and child_process_StdioOptions_to_js :
          child_process_StdioOptions -> Ojs.t =
          fun
            (x31 :
              ((Node_stream.Stream.Stream.t,
                 [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum or_number
                 or_null_or_undefined list,
                [ `ignore  | `inherit_  | `pipe ]) or_enum)
            ->
            or_enum_to_js
              (fun
                 (x32 :
                   (Node_stream.Stream.Stream.t,
                     [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum
                     or_number or_null_or_undefined list)
                 ->
                 Ojs.list_to_js
                   (fun
                      (x33 :
                        (Node_stream.Stream.Stream.t,
                          [ `ignore  | `inherit_  | `ipc  | `pipe ]) or_enum
                          or_number or_null_or_undefined)
                      ->
                      or_null_or_undefined_to_js
                        (fun
                           (x34 :
                             (Node_stream.Stream.Stream.t,
                               [ `ignore  | `inherit_  | `ipc  | `pipe ])
                               or_enum or_number)
                           ->
                           or_number_to_js
                             (fun
                                (x35 :
                                  (Node_stream.Stream.Stream.t,
                                    [ `ignore  | `inherit_  | `ipc  | `pipe ])
                                    or_enum)
                                ->
                                or_enum_to_js
                                  Node_stream.Stream.Stream.t_to_js
                                  (fun
                                     (x37 :
                                       [ `ignore  | `inherit_  | `ipc 
                                       | `pipe ])
                                     ->
                                     match x37 with
                                     | `ignore -> Ojs.string_to_js "ignore"
                                     | `inherit_ ->
                                         Ojs.string_to_js "inherit"
                                     | `ipc -> Ojs.string_to_js "ipc"
                                     | `pipe -> Ojs.string_to_js "pipe") x35)
                             x34) x33) x32)
              (fun (x38 : [ `ignore  | `inherit_  | `pipe ]) ->
                 match x38 with
                 | `ignore -> Ojs.string_to_js "ignore"
                 | `inherit_ -> Ojs.string_to_js "inherit"
                 | `pipe -> Ojs.string_to_js "pipe") x31
        and child_process_StdioPipe_of_js : Ojs.t -> child_process_StdioPipe
          =
          fun (x51 : Ojs.t) ->
            or_null_or_undefined_of_js
              (fun (x52 : Ojs.t) ->
                 let x53 = x52 in
                 match Ojs.string_of_js x53 with
                 | "pipe" -> `pipe
                 | _ -> assert false) x51
        and child_process_StdioPipe_to_js : child_process_StdioPipe -> Ojs.t
          =
          fun (x49 : [ `pipe ] or_null_or_undefined) ->
            or_null_or_undefined_to_js
              (fun (x50 : [ `pipe ]) ->
                 match x50 with | `pipe -> Ojs.string_to_js "pipe") x49
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x55 : Ojs.t) -> anonymous_interface_0_of_js x55
    and t_to_js : t -> Ojs.t =
      fun (x54 : anonymous_interface_0) -> anonymous_interface_0_to_js x54
    let (get_encoding : t -> BufferEncoding.t) =
      fun (x56 : t) ->
        BufferEncoding.t_of_js (Ojs.get_prop_ascii (t_to_js x56) "encoding")
    let (set_encoding : t -> BufferEncoding.t -> unit) =
      fun (x57 : t) ->
        fun (x58 : BufferEncoding.t) ->
          Ojs.set_prop_ascii (t_to_js x57) "encoding"
            (BufferEncoding.t_to_js x58)
  end
module AnonymousInterface1 =
  struct
    type t = anonymous_interface_1
    let rec t_of_js : Ojs.t -> t =
      fun (x60 : Ojs.t) -> anonymous_interface_1_of_js x60
    and t_to_js : t -> Ojs.t =
      fun (x59 : anonymous_interface_1) -> anonymous_interface_1_to_js x59
    let (get_encoding : t -> [ `buffer ] or_null) =
      fun (x61 : t) ->
        or_null_of_js
          (fun (x62 : Ojs.t) ->
             let x63 = x62 in
             match Ojs.string_of_js x63 with
             | "buffer" -> `buffer
             | _ -> assert false)
          (Ojs.get_prop_ascii (t_to_js x61) "encoding")
    let (set_encoding : t -> [ `buffer ] or_null -> unit) =
      fun (x64 : t) ->
        fun (x65 : [ `buffer ] or_null) ->
          Ojs.set_prop_ascii (t_to_js x64) "encoding"
            (or_null_to_js
               (fun (x66 : [ `buffer ]) ->
                  match x66 with | `buffer -> Ojs.string_to_js "buffer") x65)
  end
module AnonymousInterface2 =
  struct
    type t = anonymous_interface_2
    let rec t_of_js : Ojs.t -> t =
      fun (x68 : Ojs.t) -> anonymous_interface_2_of_js x68
    and t_to_js : t -> Ojs.t =
      fun (x67 : anonymous_interface_2) -> anonymous_interface_2_to_js x67
    let (get_stdout : t -> Buffer.t) =
      fun (x69 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x69) "stdout")
    let (set_stdout : t -> Buffer.t -> unit) =
      fun (x70 : t) ->
        fun (x71 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x70) "stdout" (Buffer.t_to_js x71)
    let (get_stderr : t -> Buffer.t) =
      fun (x72 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x72) "stderr")
    let (set_stderr : t -> Buffer.t -> unit) =
      fun (x73 : t) ->
        fun (x74 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x73) "stderr" (Buffer.t_to_js x74)
  end
module AnonymousInterface3 =
  struct
    type t = anonymous_interface_3
    let rec t_of_js : Ojs.t -> t =
      fun (x76 : Ojs.t) -> anonymous_interface_3_of_js x76
    and t_to_js : t -> Ojs.t =
      fun (x75 : anonymous_interface_3) -> anonymous_interface_3_to_js x75
    let (get_stdout : t -> string) =
      fun (x77 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x77) "stdout")
    let (set_stdout : t -> string -> unit) =
      fun (x78 : t) ->
        fun (x79 : string) ->
          Ojs.set_prop_ascii (t_to_js x78) "stdout" (Ojs.string_to_js x79)
    let (get_stderr : t -> string) =
      fun (x80 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x80) "stderr")
    let (set_stderr : t -> string -> unit) =
      fun (x81 : t) ->
        fun (x82 : string) ->
          Ojs.set_prop_ascii (t_to_js x81) "stderr" (Ojs.string_to_js x82)
  end
module AnonymousInterface4 =
  struct
    type t = anonymous_interface_4
    let rec t_of_js : Ojs.t -> t =
      fun (x84 : Ojs.t) -> anonymous_interface_4_of_js x84
    and t_to_js : t -> Ojs.t =
      fun (x83 : anonymous_interface_4) -> anonymous_interface_4_to_js x83
    let (get_stdout : t -> Buffer.t or_string) =
      fun (x85 : t) ->
        or_string_of_js Buffer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x85) "stdout")
    let (set_stdout : t -> Buffer.t or_string -> unit) =
      fun (x87 : t) ->
        fun (x88 : Buffer.t or_string) ->
          Ojs.set_prop_ascii (t_to_js x87) "stdout"
            (or_string_to_js Buffer.t_to_js x88)
    let (get_stderr : t -> Buffer.t or_string) =
      fun (x90 : t) ->
        or_string_of_js Buffer.t_of_js
          (Ojs.get_prop_ascii (t_to_js x90) "stderr")
    let (set_stderr : t -> Buffer.t or_string -> unit) =
      fun (x92 : t) ->
        fun (x93 : Buffer.t or_string) ->
          Ojs.set_prop_ascii (t_to_js x92) "stderr"
            (or_string_to_js Buffer.t_to_js x93)
  end
module Child_process =
  struct
    module Serializable =
      struct
        type t = child_process_Serializable
        let rec t_of_js : Ojs.t -> t =
          fun (x96 : Ojs.t) -> child_process_Serializable_of_js x96
        and t_to_js : t -> Ojs.t =
          fun (x95 : child_process_Serializable) ->
            child_process_Serializable_to_js x95
      end
    module SendHandle =
      struct
        type t = child_process_SendHandle
        let rec t_of_js : Ojs.t -> t =
          fun (x98 : Ojs.t) -> child_process_SendHandle_of_js x98
        and t_to_js : t -> Ojs.t =
          fun (x97 : child_process_SendHandle) ->
            child_process_SendHandle_to_js x97
      end
    module ChildProcess =
      struct
        type t = child_process_ChildProcess
        let rec t_of_js : Ojs.t -> t =
          fun (x100 : Ojs.t) -> child_process_ChildProcess_of_js x100
        and t_to_js : t -> Ojs.t =
          fun (x99 : child_process_ChildProcess) ->
            child_process_ChildProcess_to_js x99
        let (get_stdin : t -> Node_stream.Stream.Writable.t or_null) =
          fun (x101 : t) ->
            or_null_of_js Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x101) "stdin")
        let (set_stdin : t -> Node_stream.Stream.Writable.t or_null -> unit)
          =
          fun (x103 : t) ->
            fun (x104 : Node_stream.Stream.Writable.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x103) "stdin"
                (or_null_to_js Node_stream.Stream.Writable.t_to_js x104)
        let (get_stdout : t -> Node_stream.Stream.Readable.t or_null) =
          fun (x106 : t) ->
            or_null_of_js Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x106) "stdout")
        let (set_stdout : t -> Node_stream.Stream.Readable.t or_null -> unit)
          =
          fun (x108 : t) ->
            fun (x109 : Node_stream.Stream.Readable.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x108) "stdout"
                (or_null_to_js Node_stream.Stream.Readable.t_to_js x109)
        let (get_stderr : t -> Node_stream.Stream.Readable.t or_null) =
          fun (x111 : t) ->
            or_null_of_js Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x111) "stderr")
        let (set_stderr : t -> Node_stream.Stream.Readable.t or_null -> unit)
          =
          fun (x113 : t) ->
            fun (x114 : Node_stream.Stream.Readable.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x113) "stderr"
                (or_null_to_js Node_stream.Stream.Readable.t_to_js x114)
        let (get_channel : t -> Node_stream.Stream.Pipe.t or_null) =
          fun (x116 : t) ->
            or_null_of_js Node_stream.Stream.Pipe.t_of_js
              (Ojs.get_prop_ascii (t_to_js x116) "channel")
        let (get_stdio :
          t ->
            (Node_stream.Stream.Writable.t or_null *
              Node_stream.Stream.Readable.t or_null *
              Node_stream.Stream.Readable.t or_null *
              (Node_stream.Stream.Readable.t, Node_stream.Stream.Writable.t)
              union2 or_null_or_undefined * (Node_stream.Stream.Readable.t,
              Node_stream.Stream.Writable.t) union2 or_null_or_undefined))
          =
          fun (x118 : t) ->
            let x119 = Ojs.get_prop_ascii (t_to_js x118) "stdio" in
            ((or_null_of_js Node_stream.Stream.Writable.t_of_js
                (Ojs.array_get x119 0)),
              (or_null_of_js Node_stream.Stream.Readable.t_of_js
                 (Ojs.array_get x119 1)),
              (or_null_of_js Node_stream.Stream.Readable.t_of_js
                 (Ojs.array_get x119 2)),
              (or_null_or_undefined_of_js
                 (fun (x123 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x123)
                 (Ojs.array_get x119 3)),
              (or_null_or_undefined_of_js
                 (fun (x126 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x126)
                 (Ojs.array_get x119 4)))
        let (get_killed : t -> bool) =
          fun (x129 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x129) "killed")
        let (get_pid : t -> float) =
          fun (x130 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x130) "pid")
        let (get_connected : t -> bool) =
          fun (x131 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x131) "connected")
        let (get_exitCode : t -> float or_null) =
          fun (x132 : t) ->
            or_null_of_js Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x132) "exitCode")
        let (get_signalCode : t -> Node_process.Process.Signals.t or_null) =
          fun (x134 : t) ->
            or_null_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x134) "signalCode")
        let (get_spawnargs : t -> string list) =
          fun (x136 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x136) "spawnargs")
        let (get_spawnfile : t -> string) =
          fun (x138 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x138) "spawnfile")
        let (kill :
          t ->
            ?signal:Node_process.Process.Signals.t or_number -> unit -> bool)
          =
          fun (x143 : t) ->
            fun
              ?signal:(x139 :
                        Node_process.Process.Signals.t or_number option)
              ->
              fun () ->
                Ojs.bool_of_js
                  (let x144 = t_to_js x143 in
                   Ojs.call (Ojs.get_prop_ascii x144 "kill") "apply"
                     [|x144;((let x140 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x139 with
                               | Some x141 ->
                                   ignore
                                     (Ojs.call x140 "push"
                                        [|(or_number_to_js
                                             Node_process.Process.Signals.t_to_js
                                             x141)|])
                               | None -> ());
                              x140))|])
        let (send :
          t ->
            message:child_process_Serializable ->
              ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
          =
          fun (x151 : t) ->
            fun ~message:(x145 : child_process_Serializable) ->
              fun ?callback:(x146 : (error:Error.t or_null -> unit) option)
                ->
                fun () ->
                  Ojs.bool_of_js
                    (let x152 = t_to_js x151 in
                     Ojs.call (Ojs.get_prop_ascii x152 "send") "apply"
                       [|x152;((let x147 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x147 "push"
                                     [|(child_process_Serializable_to_js x145)|]);
                                (match x146 with
                                 | Some x148 ->
                                     ignore
                                       (Ojs.call x147 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun (x149 : Ojs.t) ->
                                                  x148
                                                    ~error:(or_null_of_js
                                                              Error.t_of_js
                                                              x149)))|])
                                 | None -> ());
                                x147))|])
        let (send' :
          t ->
            message:child_process_Serializable ->
              ?sendHandle:child_process_SendHandle ->
                ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
          =
          fun (x161 : t) ->
            fun ~message:(x153 : child_process_Serializable) ->
              fun ?sendHandle:(x154 : child_process_SendHandle option) ->
                fun ?callback:(x155 : (error:Error.t or_null -> unit) option)
                  ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x162 = t_to_js x161 in
                       Ojs.call (Ojs.get_prop_ascii x162 "send") "apply"
                         [|x162;((let x156 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x156 "push"
                                       [|(child_process_Serializable_to_js
                                            x153)|]);
                                  (match x154 with
                                   | Some x160 ->
                                       ignore
                                         (Ojs.call x156 "push"
                                            [|(child_process_SendHandle_to_js
                                                 x160)|])
                                   | None -> ());
                                  (match x155 with
                                   | Some x157 ->
                                       ignore
                                         (Ojs.call x156 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun (x158 : Ojs.t) ->
                                                    x157
                                                      ~error:(or_null_of_js
                                                                Error.t_of_js
                                                                x158)))|])
                                   | None -> ());
                                  x156))|])
        let (send'' :
          t ->
            message:child_process_Serializable ->
              ?sendHandle:child_process_SendHandle ->
                ?options:child_process_MessageOptions ->
                  ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
          =
          fun (x173 : t) ->
            fun ~message:(x163 : child_process_Serializable) ->
              fun ?sendHandle:(x164 : child_process_SendHandle option) ->
                fun ?options:(x165 : child_process_MessageOptions option) ->
                  fun
                    ?callback:(x166 : (error:Error.t or_null -> unit) option)
                    ->
                    fun () ->
                      Ojs.bool_of_js
                        (let x174 = t_to_js x173 in
                         Ojs.call (Ojs.get_prop_ascii x174 "send") "apply"
                           [|x174;((let x167 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x167 "push"
                                         [|(child_process_Serializable_to_js
                                              x163)|]);
                                    (match x164 with
                                     | Some x172 ->
                                         ignore
                                           (Ojs.call x167 "push"
                                              [|(child_process_SendHandle_to_js
                                                   x172)|])
                                     | None -> ());
                                    (match x165 with
                                     | Some x171 ->
                                         ignore
                                           (Ojs.call x167 "push"
                                              [|(child_process_MessageOptions_to_js
                                                   x171)|])
                                     | None -> ());
                                    (match x166 with
                                     | Some x168 ->
                                         ignore
                                           (Ojs.call x167 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun (x169 : Ojs.t) ->
                                                      x168
                                                        ~error:(or_null_of_js
                                                                  Error.t_of_js
                                                                  x169)))|])
                                     | None -> ());
                                    x167))|])
        let (disconnect : t -> unit) =
          fun (x175 : t) ->
            ignore (Ojs.call (t_to_js x175) "disconnect" [||])
        let (unref : t -> unit) =
          fun (x176 : t) -> ignore (Ojs.call (t_to_js x176) "unref" [||])
        let (ref : t -> unit) =
          fun (x177 : t) -> ignore (Ojs.call (t_to_js x177) "ref" [||])
        let (addListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x182 : t) ->
            fun ~event:(x178 : string) ->
              fun ~listener:(x179 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x182) "addListener"
                     [|(Ojs.string_to_js x178);(Ojs.fun_to_js_args
                                                  (fun (x180 : _) ->
                                                     x179
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x180 0)))|])
        let (addListener' :
          t ->
            event:[ `close ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x189 : t) ->
            fun ~event:(x183 : [ `close ]) ->
              fun
                ~listener:(x184 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x189) "addListener"
                     [|((match x183 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x185 : Ojs.t) ->
                            fun (x187 : Ojs.t) ->
                              x184 ~code:(or_null_of_js Ojs.float_of_js x185)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x187)))|])
        let (addListener'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x192 : t) ->
            fun ~event:(x190 : [ `disconnect ]) ->
              fun ~listener:(x191 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x192) "addListener"
                     [|((match x190 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x191 ()))|])
        let (addListener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x196 : t) ->
            fun ~event:(x193 : [ `error ]) ->
              fun ~listener:(x194 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x196) "addListener"
                     [|((match x193 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x195 : Ojs.t) ->
                            x194 ~err:(Error.t_of_js x195)))|])
        let (addListener'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x203 : t) ->
            fun ~event:(x197 : [ `exit ]) ->
              fun
                ~listener:(x198 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x203) "addListener"
                     [|((match x197 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x199 : Ojs.t) ->
                            fun (x201 : Ojs.t) ->
                              x198 ~code:(or_null_of_js Ojs.float_of_js x199)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x201)))|])
        let (addListener''''' :
          t ->
            event:[ `message ] ->
              listener:(message:child_process_Serializable ->
                          sendHandle:child_process_SendHandle -> unit)
                -> t)
          =
          fun (x208 : t) ->
            fun ~event:(x204 : [ `message ]) ->
              fun
                ~listener:(x205 :
                            message:child_process_Serializable ->
                              sendHandle:child_process_SendHandle -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x208) "addListener"
                     [|((match x204 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x206 : Ojs.t) ->
                            fun (x207 : Ojs.t) ->
                              x205
                                ~message:(child_process_Serializable_of_js
                                            x206)
                                ~sendHandle:(child_process_SendHandle_of_js
                                               x207)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x214 : t) ->
            fun ~event:(x209 : symbol or_string) ->
              fun ~args:(x210 : any list) ->
                Ojs.bool_of_js
                  (let x215 = t_to_js x214 in
                   Ojs.call (Ojs.get_prop_ascii x215 "emit") "apply"
                     [|x215;((let x211 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x211 "push"
                                   [|(or_string_to_js symbol_to_js x209)|]);
                              List.iter
                                (fun (x212 : any) ->
                                   ignore
                                     (Ojs.call x211 "push"
                                        [|(any_to_js x212)|])) x210;
                              x211))|])
        let (emit' :
          t ->
            event:[ `close ] ->
              code:float or_null ->
                signal:Node_process.Process.Signals.t or_null -> bool)
          =
          fun (x221 : t) ->
            fun ~event:(x216 : [ `close ]) ->
              fun ~code:(x217 : float or_null) ->
                fun ~signal:(x219 : Node_process.Process.Signals.t or_null)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x221) "emit"
                       [|((match x216 with
                           | `close -> Ojs.string_to_js "close"));(or_null_to_js
                                                                    Ojs.float_to_js
                                                                    x217);(
                         or_null_to_js Node_process.Process.Signals.t_to_js
                           x219)|])
        let (emit'' : t -> event:[ `disconnect ] -> bool) =
          fun (x223 : t) ->
            fun ~event:(x222 : [ `disconnect ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x223) "emit"
                   [|((match x222 with
                       | `disconnect -> Ojs.string_to_js "disconnect"))|])
        let (emit''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x226 : t) ->
            fun ~event:(x224 : [ `error ]) ->
              fun ~err:(x225 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x226) "emit"
                     [|((match x224 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x225)|])
        let (emit'''' :
          t ->
            event:[ `exit ] ->
              code:float or_null ->
                signal:Node_process.Process.Signals.t or_null -> bool)
          =
          fun (x232 : t) ->
            fun ~event:(x227 : [ `exit ]) ->
              fun ~code:(x228 : float or_null) ->
                fun ~signal:(x230 : Node_process.Process.Signals.t or_null)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x232) "emit"
                       [|((match x227 with | `exit -> Ojs.string_to_js "exit"));(
                         or_null_to_js Ojs.float_to_js x228);(or_null_to_js
                                                                Node_process.Process.Signals.t_to_js
                                                                x230)|])
        let (emit''''' :
          t ->
            event:[ `message ] ->
              message:child_process_Serializable ->
                sendHandle:child_process_SendHandle -> bool)
          =
          fun (x236 : t) ->
            fun ~event:(x233 : [ `message ]) ->
              fun ~message:(x234 : child_process_Serializable) ->
                fun ~sendHandle:(x235 : child_process_SendHandle) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x236) "emit"
                       [|((match x233 with
                           | `message -> Ojs.string_to_js "message"));(
                         child_process_Serializable_to_js x234);(child_process_SendHandle_to_js
                                                                   x235)|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x241 : t) ->
            fun ~event:(x237 : string) ->
              fun ~listener:(x238 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x241) "on"
                     [|(Ojs.string_to_js x237);(Ojs.fun_to_js_args
                                                  (fun (x239 : _) ->
                                                     x238
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x239 0)))|])
        let (on' :
          t ->
            event:[ `close ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x248 : t) ->
            fun ~event:(x242 : [ `close ]) ->
              fun
                ~listener:(x243 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x248) "on"
                     [|((match x242 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x244 : Ojs.t) ->
                            fun (x246 : Ojs.t) ->
                              x243 ~code:(or_null_of_js Ojs.float_of_js x244)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x246)))|])
        let (on'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x251 : t) ->
            fun ~event:(x249 : [ `disconnect ]) ->
              fun ~listener:(x250 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x251) "on"
                     [|((match x249 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x250 ()))|])
        let (on''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x255 : t) ->
            fun ~event:(x252 : [ `error ]) ->
              fun ~listener:(x253 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x255) "on"
                     [|((match x252 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x254 : Ojs.t) ->
                            x253 ~err:(Error.t_of_js x254)))|])
        let (on'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x262 : t) ->
            fun ~event:(x256 : [ `exit ]) ->
              fun
                ~listener:(x257 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x262) "on"
                     [|((match x256 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x258 : Ojs.t) ->
                            fun (x260 : Ojs.t) ->
                              x257 ~code:(or_null_of_js Ojs.float_of_js x258)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x260)))|])
        let (on''''' :
          t ->
            event:[ `message ] ->
              listener:(message:child_process_Serializable ->
                          sendHandle:child_process_SendHandle -> unit)
                -> t)
          =
          fun (x267 : t) ->
            fun ~event:(x263 : [ `message ]) ->
              fun
                ~listener:(x264 :
                            message:child_process_Serializable ->
                              sendHandle:child_process_SendHandle -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x267) "on"
                     [|((match x263 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x265 : Ojs.t) ->
                            fun (x266 : Ojs.t) ->
                              x264
                                ~message:(child_process_Serializable_of_js
                                            x265)
                                ~sendHandle:(child_process_SendHandle_of_js
                                               x266)))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x272 : t) ->
            fun ~event:(x268 : string) ->
              fun ~listener:(x269 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x272) "once"
                     [|(Ojs.string_to_js x268);(Ojs.fun_to_js_args
                                                  (fun (x270 : _) ->
                                                     x269
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x270 0)))|])
        let (once' :
          t ->
            event:[ `close ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x279 : t) ->
            fun ~event:(x273 : [ `close ]) ->
              fun
                ~listener:(x274 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x279) "once"
                     [|((match x273 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x275 : Ojs.t) ->
                            fun (x277 : Ojs.t) ->
                              x274 ~code:(or_null_of_js Ojs.float_of_js x275)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x277)))|])
        let (once'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x282 : t) ->
            fun ~event:(x280 : [ `disconnect ]) ->
              fun ~listener:(x281 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x282) "once"
                     [|((match x280 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x281 ()))|])
        let (once''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x286 : t) ->
            fun ~event:(x283 : [ `error ]) ->
              fun ~listener:(x284 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x286) "once"
                     [|((match x283 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x285 : Ojs.t) ->
                            x284 ~err:(Error.t_of_js x285)))|])
        let (once'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x293 : t) ->
            fun ~event:(x287 : [ `exit ]) ->
              fun
                ~listener:(x288 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x293) "once"
                     [|((match x287 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x289 : Ojs.t) ->
                            fun (x291 : Ojs.t) ->
                              x288 ~code:(or_null_of_js Ojs.float_of_js x289)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x291)))|])
        let (once''''' :
          t ->
            event:[ `message ] ->
              listener:(message:child_process_Serializable ->
                          sendHandle:child_process_SendHandle -> unit)
                -> t)
          =
          fun (x298 : t) ->
            fun ~event:(x294 : [ `message ]) ->
              fun
                ~listener:(x295 :
                            message:child_process_Serializable ->
                              sendHandle:child_process_SendHandle -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x298) "once"
                     [|((match x294 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x296 : Ojs.t) ->
                            fun (x297 : Ojs.t) ->
                              x295
                                ~message:(child_process_Serializable_of_js
                                            x296)
                                ~sendHandle:(child_process_SendHandle_of_js
                                               x297)))|])
        let (prependListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x303 : t) ->
            fun ~event:(x299 : string) ->
              fun ~listener:(x300 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x303) "prependListener"
                     [|(Ojs.string_to_js x299);(Ojs.fun_to_js_args
                                                  (fun (x301 : _) ->
                                                     x300
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x301 0)))|])
        let (prependListener' :
          t ->
            event:[ `close ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x310 : t) ->
            fun ~event:(x304 : [ `close ]) ->
              fun
                ~listener:(x305 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x310) "prependListener"
                     [|((match x304 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x306 : Ojs.t) ->
                            fun (x308 : Ojs.t) ->
                              x305 ~code:(or_null_of_js Ojs.float_of_js x306)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x308)))|])
        let (prependListener'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x313 : t) ->
            fun ~event:(x311 : [ `disconnect ]) ->
              fun ~listener:(x312 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x313) "prependListener"
                     [|((match x311 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x312 ()))|])
        let (prependListener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x317 : t) ->
            fun ~event:(x314 : [ `error ]) ->
              fun ~listener:(x315 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x317) "prependListener"
                     [|((match x314 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x316 : Ojs.t) ->
                            x315 ~err:(Error.t_of_js x316)))|])
        let (prependListener'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x324 : t) ->
            fun ~event:(x318 : [ `exit ]) ->
              fun
                ~listener:(x319 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x324) "prependListener"
                     [|((match x318 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x320 : Ojs.t) ->
                            fun (x322 : Ojs.t) ->
                              x319 ~code:(or_null_of_js Ojs.float_of_js x320)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x322)))|])
        let (prependListener''''' :
          t ->
            event:[ `message ] ->
              listener:(message:child_process_Serializable ->
                          sendHandle:child_process_SendHandle -> unit)
                -> t)
          =
          fun (x329 : t) ->
            fun ~event:(x325 : [ `message ]) ->
              fun
                ~listener:(x326 :
                            message:child_process_Serializable ->
                              sendHandle:child_process_SendHandle -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x329) "prependListener"
                     [|((match x325 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x327 : Ojs.t) ->
                            fun (x328 : Ojs.t) ->
                              x326
                                ~message:(child_process_Serializable_of_js
                                            x327)
                                ~sendHandle:(child_process_SendHandle_of_js
                                               x328)))|])
        let (prependOnceListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x334 : t) ->
            fun ~event:(x330 : string) ->
              fun ~listener:(x331 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x334) "prependOnceListener"
                     [|(Ojs.string_to_js x330);(Ojs.fun_to_js_args
                                                  (fun (x332 : _) ->
                                                     x331
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x332 0)))|])
        let (prependOnceListener' :
          t ->
            event:[ `close ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x341 : t) ->
            fun ~event:(x335 : [ `close ]) ->
              fun
                ~listener:(x336 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x341) "prependOnceListener"
                     [|((match x335 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 2
                         (fun (x337 : Ojs.t) ->
                            fun (x339 : Ojs.t) ->
                              x336 ~code:(or_null_of_js Ojs.float_of_js x337)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x339)))|])
        let (prependOnceListener'' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x344 : t) ->
            fun ~event:(x342 : [ `disconnect ]) ->
              fun ~listener:(x343 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x344) "prependOnceListener"
                     [|((match x342 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x343 ()))|])
        let (prependOnceListener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x348 : t) ->
            fun ~event:(x345 : [ `error ]) ->
              fun ~listener:(x346 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x348) "prependOnceListener"
                     [|((match x345 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x347 : Ojs.t) ->
                            x346 ~err:(Error.t_of_js x347)))|])
        let (prependOnceListener'''' :
          t ->
            event:[ `exit ] ->
              listener:(code:float or_null ->
                          signal:Node_process.Process.Signals.t or_null ->
                            unit)
                -> t)
          =
          fun (x355 : t) ->
            fun ~event:(x349 : [ `exit ]) ->
              fun
                ~listener:(x350 :
                            code:float or_null ->
                              signal:Node_process.Process.Signals.t or_null
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x355) "prependOnceListener"
                     [|((match x349 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x351 : Ojs.t) ->
                            fun (x353 : Ojs.t) ->
                              x350 ~code:(or_null_of_js Ojs.float_of_js x351)
                                ~signal:(or_null_of_js
                                           Node_process.Process.Signals.t_of_js
                                           x353)))|])
        let (prependOnceListener''''' :
          t ->
            event:[ `message ] ->
              listener:(message:child_process_Serializable ->
                          sendHandle:child_process_SendHandle -> unit)
                -> t)
          =
          fun (x360 : t) ->
            fun ~event:(x356 : [ `message ]) ->
              fun
                ~listener:(x357 :
                            message:child_process_Serializable ->
                              sendHandle:child_process_SendHandle -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x360) "prependOnceListener"
                     [|((match x356 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x358 : Ojs.t) ->
                            fun (x359 : Ojs.t) ->
                              x357
                                ~message:(child_process_Serializable_of_js
                                            x358)
                                ~sendHandle:(child_process_SendHandle_of_js
                                               x359)))|])
        let (cast : t -> Events.EventEmitter.t) =
          fun (x361 : t) -> Events.EventEmitter.t_of_js (t_to_js x361)
      end
    module ChildProcessWithoutNullStreams =
      struct
        type t = child_process_ChildProcessWithoutNullStreams
        let rec t_of_js : Ojs.t -> t =
          fun (x363 : Ojs.t) ->
            child_process_ChildProcessWithoutNullStreams_of_js x363
        and t_to_js : t -> Ojs.t =
          fun (x362 : child_process_ChildProcessWithoutNullStreams) ->
            child_process_ChildProcessWithoutNullStreams_to_js x362
        let (get_stdin : t -> Node_stream.Stream.Writable.t) =
          fun (x364 : t) ->
            Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x364) "stdin")
        let (set_stdin : t -> Node_stream.Stream.Writable.t -> unit) =
          fun (x365 : t) ->
            fun (x366 : Node_stream.Stream.Writable.t) ->
              Ojs.set_prop_ascii (t_to_js x365) "stdin"
                (Node_stream.Stream.Writable.t_to_js x366)
        let (get_stdout : t -> Node_stream.Stream.Readable.t) =
          fun (x367 : t) ->
            Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x367) "stdout")
        let (set_stdout : t -> Node_stream.Stream.Readable.t -> unit) =
          fun (x368 : t) ->
            fun (x369 : Node_stream.Stream.Readable.t) ->
              Ojs.set_prop_ascii (t_to_js x368) "stdout"
                (Node_stream.Stream.Readable.t_to_js x369)
        let (get_stderr : t -> Node_stream.Stream.Readable.t) =
          fun (x370 : t) ->
            Node_stream.Stream.Readable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x370) "stderr")
        let (set_stderr : t -> Node_stream.Stream.Readable.t -> unit) =
          fun (x371 : t) ->
            fun (x372 : Node_stream.Stream.Readable.t) ->
              Ojs.set_prop_ascii (t_to_js x371) "stderr"
                (Node_stream.Stream.Readable.t_to_js x372)
        let (get_stdio :
          t ->
            (Node_stream.Stream.Writable.t * Node_stream.Stream.Readable.t *
              Node_stream.Stream.Readable.t * (Node_stream.Stream.Readable.t,
              Node_stream.Stream.Writable.t) union2 or_null_or_undefined *
              (Node_stream.Stream.Readable.t, Node_stream.Stream.Writable.t)
              union2 or_null_or_undefined))
          =
          fun (x373 : t) ->
            let x374 = Ojs.get_prop_ascii (t_to_js x373) "stdio" in
            ((Node_stream.Stream.Writable.t_of_js (Ojs.array_get x374 0)),
              (Node_stream.Stream.Readable.t_of_js (Ojs.array_get x374 1)),
              (Node_stream.Stream.Readable.t_of_js (Ojs.array_get x374 2)),
              (or_null_or_undefined_of_js
                 (fun (x375 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x375)
                 (Ojs.array_get x374 3)),
              (or_null_or_undefined_of_js
                 (fun (x378 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x378)
                 (Ojs.array_get x374 4)))
        let (cast : t -> child_process_ChildProcess) =
          fun (x381 : t) -> child_process_ChildProcess_of_js (t_to_js x381)
      end
    module ChildProcessByStdio =
      struct
        type ('I, 'O, 'E) t = ('I, 'O, 'E) child_process_ChildProcessByStdio
        let rec t_of_js :
          'I 'O 'E .
            (Ojs.t -> 'I) ->
              (Ojs.t -> 'O) -> (Ojs.t -> 'E) -> Ojs.t -> ('I, 'O, 'E) t
          = fun (type __I) -> fun (type __O) -> fun (type __E) ->
          fun (__I_of_js : Ojs.t -> __I) ->
            fun (__O_of_js : Ojs.t -> __O) ->
              fun (__E_of_js : Ojs.t -> __E) ->
                fun (x386 : Ojs.t) ->
                  child_process_ChildProcessByStdio_of_js __I_of_js __O_of_js
                    __E_of_js x386
        and t_to_js :
          'I 'O 'E .
            ('I -> Ojs.t) ->
              ('O -> Ojs.t) -> ('E -> Ojs.t) -> ('I, 'O, 'E) t -> Ojs.t
          = fun (type __I) -> fun (type __O) -> fun (type __E) ->
          fun (__I_to_js : __I -> Ojs.t) ->
            fun (__O_to_js : __O -> Ojs.t) ->
              fun (__E_to_js : __E -> Ojs.t) ->
                fun
                  (x382 : (__I, __O, __E) child_process_ChildProcessByStdio)
                  ->
                  child_process_ChildProcessByStdio_to_js __I_to_js __O_to_js
                    __E_to_js x382
        let (get_stdin : ('I, 'O, 'E) t -> 'I) =
          fun (x390 : ('I, 'O, 'E) t) ->
            Obj.magic
              (Ojs.get_prop_ascii
                 (t_to_js Obj.magic Obj.magic Obj.magic x390) "stdin")
        let (set_stdin : ('I, 'O, 'E) t -> 'I -> unit) =
          fun (x394 : ('I, 'O, 'E) t) ->
            fun (x395 : 'I) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x394)
                "stdin" (Obj.magic x395)
        let (get_stdout : ('I, 'O, 'E) t -> 'O) =
          fun (x399 : ('I, 'O, 'E) t) ->
            Obj.magic
              (Ojs.get_prop_ascii
                 (t_to_js Obj.magic Obj.magic Obj.magic x399) "stdout")
        let (set_stdout : ('I, 'O, 'E) t -> 'O -> unit) =
          fun (x403 : ('I, 'O, 'E) t) ->
            fun (x404 : 'O) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x403)
                "stdout" (Obj.magic x404)
        let (get_stderr : ('I, 'O, 'E) t -> 'E) =
          fun (x408 : ('I, 'O, 'E) t) ->
            Obj.magic
              (Ojs.get_prop_ascii
                 (t_to_js Obj.magic Obj.magic Obj.magic x408) "stderr")
        let (set_stderr : ('I, 'O, 'E) t -> 'E -> unit) =
          fun (x412 : ('I, 'O, 'E) t) ->
            fun (x413 : 'E) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x412)
                "stderr" (Obj.magic x413)
        let (get_stdio :
          ('I, 'O, 'E) t ->
            ('I * 'O * 'E * (Node_stream.Stream.Readable.t,
              Node_stream.Stream.Writable.t) union2 or_null_or_undefined *
              (Node_stream.Stream.Readable.t, Node_stream.Stream.Writable.t)
              union2 or_null_or_undefined))
          =
          fun (x417 : ('I, 'O, 'E) t) ->
            let x421 =
              Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x417)
                "stdio" in
            ((Obj.magic (Ojs.array_get x421 0)),
              (Obj.magic (Ojs.array_get x421 1)),
              (Obj.magic (Ojs.array_get x421 2)),
              (or_null_or_undefined_of_js
                 (fun (x422 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x422)
                 (Ojs.array_get x421 3)),
              (or_null_or_undefined_of_js
                 (fun (x425 : Ojs.t) ->
                    union2_of_js Node_stream.Stream.Readable.t_of_js
                      Node_stream.Stream.Writable.t_of_js x425)
                 (Ojs.array_get x421 4)))
        let (cast : ('I, 'O, 'E) t -> child_process_ChildProcess) =
          fun (x428 : ('I, 'O, 'E) t) ->
            child_process_ChildProcess_of_js
              (t_to_js Obj.magic Obj.magic Obj.magic x428)
      end
    module MessageOptions =
      struct
        type t = child_process_MessageOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x433 : Ojs.t) -> child_process_MessageOptions_of_js x433
        and t_to_js : t -> Ojs.t =
          fun (x432 : child_process_MessageOptions) ->
            child_process_MessageOptions_to_js x432
        let (get_keepOpen : t -> bool) =
          fun (x434 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x434) "keepOpen")
        let (set_keepOpen : t -> bool -> unit) =
          fun (x435 : t) ->
            fun (x436 : bool) ->
              Ojs.set_prop_ascii (t_to_js x435) "keepOpen"
                (Ojs.bool_to_js x436)
      end
    module StdioOptions =
      struct
        type t = child_process_StdioOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x438 : Ojs.t) -> child_process_StdioOptions_of_js x438
        and t_to_js : t -> Ojs.t =
          fun (x437 : child_process_StdioOptions) ->
            child_process_StdioOptions_to_js x437
      end
    module SerializationType =
      struct
        type t = child_process_SerializationType
        let rec t_of_js : Ojs.t -> t =
          fun (x440 : Ojs.t) -> child_process_SerializationType_of_js x440
        and t_to_js : t -> Ojs.t =
          fun (x439 : child_process_SerializationType) ->
            child_process_SerializationType_to_js x439
      end
    module MessagingOptions =
      struct
        type t = child_process_MessagingOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x442 : Ojs.t) -> child_process_MessagingOptions_of_js x442
        and t_to_js : t -> Ojs.t =
          fun (x441 : child_process_MessagingOptions) ->
            child_process_MessagingOptions_to_js x441
        let (get_serialization : t -> child_process_SerializationType) =
          fun (x443 : t) ->
            child_process_SerializationType_of_js
              (Ojs.get_prop_ascii (t_to_js x443) "serialization")
        let (set_serialization :
          t -> child_process_SerializationType -> unit) =
          fun (x444 : t) ->
            fun (x445 : child_process_SerializationType) ->
              Ojs.set_prop_ascii (t_to_js x444) "serialization"
                (child_process_SerializationType_to_js x445)
      end
    module ProcessEnvOptions =
      struct
        type t = child_process_ProcessEnvOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x447 : Ojs.t) -> child_process_ProcessEnvOptions_of_js x447
        and t_to_js : t -> Ojs.t =
          fun (x446 : child_process_ProcessEnvOptions) ->
            child_process_ProcessEnvOptions_to_js x446
        let (get_uid : t -> float) =
          fun (x448 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x448) "uid")
        let (set_uid : t -> float -> unit) =
          fun (x449 : t) ->
            fun (x450 : float) ->
              Ojs.set_prop_ascii (t_to_js x449) "uid" (Ojs.float_to_js x450)
        let (get_gid : t -> float) =
          fun (x451 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x451) "gid")
        let (set_gid : t -> float -> unit) =
          fun (x452 : t) ->
            fun (x453 : float) ->
              Ojs.set_prop_ascii (t_to_js x452) "gid" (Ojs.float_to_js x453)
        let (get_cwd : t -> string) =
          fun (x454 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x454) "cwd")
        let (set_cwd : t -> string -> unit) =
          fun (x455 : t) ->
            fun (x456 : string) ->
              Ojs.set_prop_ascii (t_to_js x455) "cwd" (Ojs.string_to_js x456)
        let (get_env : t -> Node_process.Process.ProcessEnv.t) =
          fun (x457 : t) ->
            Node_process.Process.ProcessEnv.t_of_js
              (Ojs.get_prop_ascii (t_to_js x457) "env")
        let (set_env : t -> Node_process.Process.ProcessEnv.t -> unit) =
          fun (x458 : t) ->
            fun (x459 : Node_process.Process.ProcessEnv.t) ->
              Ojs.set_prop_ascii (t_to_js x458) "env"
                (Node_process.Process.ProcessEnv.t_to_js x459)
      end
    module CommonOptions =
      struct
        type t = child_process_CommonOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x461 : Ojs.t) -> child_process_CommonOptions_of_js x461
        and t_to_js : t -> Ojs.t =
          fun (x460 : child_process_CommonOptions) ->
            child_process_CommonOptions_to_js x460
        let (get_windowsHide : t -> bool) =
          fun (x462 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x462) "windowsHide")
        let (set_windowsHide : t -> bool -> unit) =
          fun (x463 : t) ->
            fun (x464 : bool) ->
              Ojs.set_prop_ascii (t_to_js x463) "windowsHide"
                (Ojs.bool_to_js x464)
        let (get_timeout : t -> float) =
          fun (x465 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x465) "timeout")
        let (set_timeout : t -> float -> unit) =
          fun (x466 : t) ->
            fun (x467 : float) ->
              Ojs.set_prop_ascii (t_to_js x466) "timeout"
                (Ojs.float_to_js x467)
        let (cast : t -> child_process_ProcessEnvOptions) =
          fun (x468 : t) ->
            child_process_ProcessEnvOptions_of_js (t_to_js x468)
      end
    module CommonSpawnOptions =
      struct
        type t = child_process_CommonSpawnOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x470 : Ojs.t) -> child_process_CommonSpawnOptions_of_js x470
        and t_to_js : t -> Ojs.t =
          fun (x469 : child_process_CommonSpawnOptions) ->
            child_process_CommonSpawnOptions_to_js x469
        let (get_argv0 : t -> string) =
          fun (x471 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x471) "argv0")
        let (set_argv0 : t -> string -> unit) =
          fun (x472 : t) ->
            fun (x473 : string) ->
              Ojs.set_prop_ascii (t_to_js x472) "argv0"
                (Ojs.string_to_js x473)
        let (get_stdio : t -> child_process_StdioOptions) =
          fun (x474 : t) ->
            child_process_StdioOptions_of_js
              (Ojs.get_prop_ascii (t_to_js x474) "stdio")
        let (set_stdio : t -> child_process_StdioOptions -> unit) =
          fun (x475 : t) ->
            fun (x476 : child_process_StdioOptions) ->
              Ojs.set_prop_ascii (t_to_js x475) "stdio"
                (child_process_StdioOptions_to_js x476)
        let (get_shell : t -> bool or_string) =
          fun (x477 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x477) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x479 : t) ->
            fun (x480 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x479) "shell"
                (or_string_to_js Ojs.bool_to_js x480)
        let (get_windowsVerbatimArguments : t -> bool) =
          fun (x482 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x482) "windowsVerbatimArguments")
        let (set_windowsVerbatimArguments : t -> bool -> unit) =
          fun (x483 : t) ->
            fun (x484 : bool) ->
              Ojs.set_prop_ascii (t_to_js x483) "windowsVerbatimArguments"
                (Ojs.bool_to_js x484)
        let (cast : t -> child_process_CommonOptions) =
          fun (x485 : t) -> child_process_CommonOptions_of_js (t_to_js x485)
        let (cast' : t -> child_process_MessagingOptions) =
          fun (x486 : t) ->
            child_process_MessagingOptions_of_js (t_to_js x486)
      end
    module SpawnOptions =
      struct
        type t = child_process_SpawnOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x488 : Ojs.t) -> child_process_SpawnOptions_of_js x488
        and t_to_js : t -> Ojs.t =
          fun (x487 : child_process_SpawnOptions) ->
            child_process_SpawnOptions_to_js x487
        let (get_detached : t -> bool) =
          fun (x489 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x489) "detached")
        let (set_detached : t -> bool -> unit) =
          fun (x490 : t) ->
            fun (x491 : bool) ->
              Ojs.set_prop_ascii (t_to_js x490) "detached"
                (Ojs.bool_to_js x491)
        let (cast : t -> child_process_CommonSpawnOptions) =
          fun (x492 : t) ->
            child_process_CommonSpawnOptions_of_js (t_to_js x492)
      end
    module SpawnOptionsWithoutStdio =
      struct
        type t = child_process_SpawnOptionsWithoutStdio
        let rec t_of_js : Ojs.t -> t =
          fun (x494 : Ojs.t) ->
            child_process_SpawnOptionsWithoutStdio_of_js x494
        and t_to_js : t -> Ojs.t =
          fun (x493 : child_process_SpawnOptionsWithoutStdio) ->
            child_process_SpawnOptionsWithoutStdio_to_js x493
        let (get_stdio :
          t -> ([ `pipe ] or_null_or_undefined list, [ `pipe ]) or_enum) =
          fun (x495 : t) ->
            or_enum_of_js
              (fun (x496 : Ojs.t) ->
                 Ojs.list_of_js
                   (fun (x497 : Ojs.t) ->
                      or_null_or_undefined_of_js
                        (fun (x498 : Ojs.t) ->
                           let x499 = x498 in
                           match Ojs.string_of_js x499 with
                           | "pipe" -> `pipe
                           | _ -> assert false) x497) x496)
              (fun (x500 : Ojs.t) ->
                 let x501 = x500 in
                 match Ojs.string_of_js x501 with
                 | "pipe" -> `pipe
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x495) "stdio")
        let (set_stdio :
          t ->
            ([ `pipe ] or_null_or_undefined list, [ `pipe ]) or_enum -> unit)
          =
          fun (x502 : t) ->
            fun
              (x503 :
                ([ `pipe ] or_null_or_undefined list, [ `pipe ]) or_enum)
              ->
              Ojs.set_prop_ascii (t_to_js x502) "stdio"
                (or_enum_to_js
                   (fun (x504 : [ `pipe ] or_null_or_undefined list) ->
                      Ojs.list_to_js
                        (fun (x505 : [ `pipe ] or_null_or_undefined) ->
                           or_null_or_undefined_to_js
                             (fun (x506 : [ `pipe ]) ->
                                match x506 with
                                | `pipe -> Ojs.string_to_js "pipe") x505)
                        x504)
                   (fun (x507 : [ `pipe ]) ->
                      match x507 with | `pipe -> Ojs.string_to_js "pipe")
                   x503)
        let (cast : t -> child_process_SpawnOptions) =
          fun (x508 : t) -> child_process_SpawnOptions_of_js (t_to_js x508)
      end
    module StdioNull =
      struct
        type t = child_process_StdioNull
        let rec t_of_js : Ojs.t -> t =
          fun (x510 : Ojs.t) -> child_process_StdioNull_of_js x510
        and t_to_js : t -> Ojs.t =
          fun (x509 : child_process_StdioNull) ->
            child_process_StdioNull_to_js x509
      end
    module StdioPipe =
      struct
        type t = child_process_StdioPipe
        let rec t_of_js : Ojs.t -> t =
          fun (x512 : Ojs.t) -> child_process_StdioPipe_of_js x512
        and t_to_js : t -> Ojs.t =
          fun (x511 : child_process_StdioPipe) ->
            child_process_StdioPipe_to_js x511
      end
    module SpawnOptionsWithStdioTuple =
      struct
        type ('Stdin, 'Stdout, 'Stderr) t =
          ('Stdin, 'Stdout, 'Stderr) child_process_SpawnOptionsWithStdioTuple
        let rec t_of_js :
          'Stdin 'Stdout 'Stderr .
            (Ojs.t -> 'Stdin) ->
              (Ojs.t -> 'Stdout) ->
                (Ojs.t -> 'Stderr) -> Ojs.t -> ('Stdin, 'Stdout, 'Stderr) t
          = fun (type __Stdin) -> fun (type __Stdout) -> fun (type __Stderr)
          ->
          fun (__Stdin_of_js : Ojs.t -> __Stdin) ->
            fun (__Stdout_of_js : Ojs.t -> __Stdout) ->
              fun (__Stderr_of_js : Ojs.t -> __Stderr) ->
                fun (x517 : Ojs.t) ->
                  child_process_SpawnOptionsWithStdioTuple_of_js
                    __Stdin_of_js __Stdout_of_js __Stderr_of_js x517
        and t_to_js :
          'Stdin 'Stdout 'Stderr .
            ('Stdin -> Ojs.t) ->
              ('Stdout -> Ojs.t) ->
                ('Stderr -> Ojs.t) -> ('Stdin, 'Stdout, 'Stderr) t -> Ojs.t
          = fun (type __Stdin) -> fun (type __Stdout) -> fun (type __Stderr)
          ->
          fun (__Stdin_to_js : __Stdin -> Ojs.t) ->
            fun (__Stdout_to_js : __Stdout -> Ojs.t) ->
              fun (__Stderr_to_js : __Stderr -> Ojs.t) ->
                fun
                  (x513 :
                    (__Stdin, __Stdout, __Stderr)
                      child_process_SpawnOptionsWithStdioTuple)
                  ->
                  child_process_SpawnOptionsWithStdioTuple_to_js
                    __Stdin_to_js __Stdout_to_js __Stderr_to_js x513
        type ('Stdin, 'Stdout, 'Stderr) t_3 = ('Stdin, 'Stdout, 'Stderr) t
        let rec t_3_of_js :
          'Stdin 'Stdout 'Stderr .
            (Ojs.t -> 'Stdin) ->
              (Ojs.t -> 'Stdout) ->
                (Ojs.t -> 'Stderr) -> Ojs.t -> ('Stdin, 'Stdout, 'Stderr) t_3
          = fun (type __Stdin) -> fun (type __Stdout) -> fun (type __Stderr)
          ->
          fun (__Stdin_of_js : Ojs.t -> __Stdin) ->
            fun (__Stdout_of_js : Ojs.t -> __Stdout) ->
              fun (__Stderr_of_js : Ojs.t -> __Stderr) ->
                fun (x525 : Ojs.t) ->
                  t_of_js __Stdin_of_js __Stdout_of_js __Stderr_of_js x525
        and t_3_to_js :
          'Stdin 'Stdout 'Stderr .
            ('Stdin -> Ojs.t) ->
              ('Stdout -> Ojs.t) ->
                ('Stderr -> Ojs.t) -> ('Stdin, 'Stdout, 'Stderr) t_3 -> Ojs.t
          = fun (type __Stdin) -> fun (type __Stdout) -> fun (type __Stderr)
          ->
          fun (__Stdin_to_js : __Stdin -> Ojs.t) ->
            fun (__Stdout_to_js : __Stdout -> Ojs.t) ->
              fun (__Stderr_to_js : __Stderr -> Ojs.t) ->
                fun (x521 : (__Stdin, __Stdout, __Stderr) t) ->
                  t_to_js __Stdin_to_js __Stdout_to_js __Stderr_to_js x521
        let (get_stdio :
          ('Stdin, 'Stdout, 'Stderr) t -> ('Stdin * 'Stdout * 'Stderr)) =
          fun (x529 : ('Stdin, 'Stdout, 'Stderr) t) ->
            let x533 =
              Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x529)
                "stdio" in
            ((Obj.magic (Ojs.array_get x533 0)),
              (Obj.magic (Ojs.array_get x533 1)),
              (Obj.magic (Ojs.array_get x533 2)))
        let (set_stdio :
          ('Stdin, 'Stdout, 'Stderr) t ->
            ('Stdin * 'Stdout * 'Stderr) -> unit)
          =
          fun (x534 : ('Stdin, 'Stdout, 'Stderr) t) ->
            fun (x535 : ('Stdin * 'Stdout * 'Stderr)) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic Obj.magic x534)
                "stdio"
                (let (x536, x537, x538) = x535 in
                 let x539 = Ojs.array_make 3 in
                 Ojs.array_set x539 0 (Obj.magic x536);
                 Ojs.array_set x539 1 (Obj.magic x537);
                 Ojs.array_set x539 2 (Obj.magic x538);
                 x539)
        let (cast :
          ('Stdin, 'Stdout, 'Stderr) t -> child_process_SpawnOptions) =
          fun (x543 : ('Stdin, 'Stdout, 'Stderr) t) ->
            child_process_SpawnOptions_of_js
              (t_to_js Obj.magic Obj.magic Obj.magic x543)
      end
    let (spawn :
      command:string ->
        ?args:string list ->
          ?options:child_process_SpawnOptionsWithoutStdio ->
            unit -> child_process_ChildProcessWithoutNullStreams)
      =
      fun ~command:(x547 : string) ->
        fun ?args:(x548 : string list option) ->
          fun ?options:(x549 : child_process_SpawnOptionsWithoutStdio option)
            ->
            fun () ->
              child_process_ChildProcessWithoutNullStreams_of_js
                (let x554 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x554 "spawn") "apply"
                   [|x554;((let x550 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x550 "push"
                                 [|(Ojs.string_to_js x547)|]);
                            (match x548 with
                             | Some x552 ->
                                 ignore
                                   (Ojs.call x550 "push"
                                      [|(Ojs.list_to_js Ojs.string_to_js x552)|])
                             | None -> ());
                            (match x549 with
                             | Some x551 ->
                                 ignore
                                   (Ojs.call x550 "push"
                                      [|(child_process_SpawnOptionsWithoutStdio_to_js
                                           x551)|])
                             | None -> ());
                            x550))|])
    let (spawn' :
      command:string ->
        options:(child_process_StdioPipe, child_process_StdioPipe,
          child_process_StdioPipe) child_process_SpawnOptionsWithStdioTuple
          ->
          (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
            Node_stream.Stream.Readable.t) child_process_ChildProcessByStdio)
      =
      fun ~command:(x555 : string) ->
        fun
          ~options:(x556 :
                     (child_process_StdioPipe, child_process_StdioPipe,
                       child_process_StdioPipe)
                       child_process_SpawnOptionsWithStdioTuple)
          ->
          child_process_ChildProcessByStdio_of_js
            Node_stream.Stream.Writable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x555);(child_process_SpawnOptionsWithStdioTuple_to_js
                                            child_process_StdioPipe_to_js
                                            child_process_StdioPipe_to_js
                                            child_process_StdioPipe_to_js
                                            x556)|])
    let (spawn' :
      command:string ->
        options:(child_process_StdioPipe, child_process_StdioPipe,
          child_process_StdioNull) child_process_SpawnOptionsWithStdioTuple
          ->
          (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
            never or_null) child_process_ChildProcessByStdio)
      =
      fun ~command:(x563 : string) ->
        fun
          ~options:(x564 :
                     (child_process_StdioPipe, child_process_StdioPipe,
                       child_process_StdioNull)
                       child_process_SpawnOptionsWithStdioTuple)
          ->
          child_process_ChildProcessByStdio_of_js
            Node_stream.Stream.Writable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            (fun (x570 : Ojs.t) -> or_null_of_js never_of_js x570)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x563);(child_process_SpawnOptionsWithStdioTuple_to_js
                                            child_process_StdioPipe_to_js
                                            child_process_StdioPipe_to_js
                                            child_process_StdioNull_to_js
                                            x564)|])
    let (spawn' :
      command:string ->
        options:(child_process_StdioPipe, child_process_StdioNull,
          child_process_StdioPipe) child_process_SpawnOptionsWithStdioTuple
          ->
          (Node_stream.Stream.Writable.t, never or_null,
            Node_stream.Stream.Readable.t) child_process_ChildProcessByStdio)
      =
      fun ~command:(x572 : string) ->
        fun
          ~options:(x573 :
                     (child_process_StdioPipe, child_process_StdioNull,
                       child_process_StdioPipe)
                       child_process_SpawnOptionsWithStdioTuple)
          ->
          child_process_ChildProcessByStdio_of_js
            Node_stream.Stream.Writable.t_of_js
            (fun (x578 : Ojs.t) -> or_null_of_js never_of_js x578)
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x572);(child_process_SpawnOptionsWithStdioTuple_to_js
                                            child_process_StdioPipe_to_js
                                            child_process_StdioNull_to_js
                                            child_process_StdioPipe_to_js
                                            x573)|])
    let (spawn' :
      command:string ->
        options:(child_process_StdioNull, child_process_StdioPipe,
          child_process_StdioPipe) child_process_SpawnOptionsWithStdioTuple
          ->
          (never or_null, Node_stream.Stream.Readable.t,
            Node_stream.Stream.Readable.t) child_process_ChildProcessByStdio)
      =
      fun ~command:(x581 : string) ->
        fun
          ~options:(x582 :
                     (child_process_StdioNull, child_process_StdioPipe,
                       child_process_StdioPipe)
                       child_process_SpawnOptionsWithStdioTuple)
          ->
          child_process_ChildProcessByStdio_of_js
            (fun (x586 : Ojs.t) -> or_null_of_js never_of_js x586)
            Node_stream.Stream.Readable.t_of_js
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x581);(child_process_SpawnOptionsWithStdioTuple_to_js
                                            child_process_StdioNull_to_js
                                            child_process_StdioPipe_to_js
                                            child_process_StdioPipe_to_js
                                            x582)|])
    let (spawn' :
      command:string ->
        options:(child_process_StdioPipe, child_process_StdioNull,
          child_process_StdioNull) child_process_SpawnOptionsWithStdioTuple
          ->
          (Node_stream.Stream.Writable.t, never or_null, never or_null)
            child_process_ChildProcessByStdio)
      =
      fun ~command:(x590 : string) ->
        fun
          ~options:(x591 :
                     (child_process_StdioPipe, child_process_StdioNull,
                       child_process_StdioNull)
                       child_process_SpawnOptionsWithStdioTuple)
          ->
          child_process_ChildProcessByStdio_of_js
            Node_stream.Stream.Writable.t_of_js
            (fun (x596 : Ojs.t) -> or_null_of_js never_of_js x596)
            (fun (x598 : Ojs.t) -> or_null_of_js never_of_js x598)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x590);(child_process_SpawnOptionsWithStdioTuple_to_js
                                            child_process_StdioPipe_to_js
                                            child_process_StdioNull_to_js
                                            child_process_StdioNull_to_js
                                            x591)|])
    let (spawn' :
      command:string ->
        options:(child_process_StdioNull, child_process_StdioPipe,
          child_process_StdioNull) child_process_SpawnOptionsWithStdioTuple
          ->
          (never or_null, Node_stream.Stream.Readable.t, never or_null)
            child_process_ChildProcessByStdio)
      =
      fun ~command:(x600 : string) ->
        fun
          ~options:(x601 :
                     (child_process_StdioNull, child_process_StdioPipe,
                       child_process_StdioNull)
                       child_process_SpawnOptionsWithStdioTuple)
          ->
          child_process_ChildProcessByStdio_of_js
            (fun (x605 : Ojs.t) -> or_null_of_js never_of_js x605)
            Node_stream.Stream.Readable.t_of_js
            (fun (x608 : Ojs.t) -> or_null_of_js never_of_js x608)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x600);(child_process_SpawnOptionsWithStdioTuple_to_js
                                            child_process_StdioNull_to_js
                                            child_process_StdioPipe_to_js
                                            child_process_StdioNull_to_js
                                            x601)|])
    let (spawn' :
      command:string ->
        options:(child_process_StdioNull, child_process_StdioNull,
          child_process_StdioPipe) child_process_SpawnOptionsWithStdioTuple
          ->
          (never or_null, never or_null, Node_stream.Stream.Readable.t)
            child_process_ChildProcessByStdio)
      =
      fun ~command:(x610 : string) ->
        fun
          ~options:(x611 :
                     (child_process_StdioNull, child_process_StdioNull,
                       child_process_StdioPipe)
                       child_process_SpawnOptionsWithStdioTuple)
          ->
          child_process_ChildProcessByStdio_of_js
            (fun (x615 : Ojs.t) -> or_null_of_js never_of_js x615)
            (fun (x617 : Ojs.t) -> or_null_of_js never_of_js x617)
            Node_stream.Stream.Readable.t_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x610);(child_process_SpawnOptionsWithStdioTuple_to_js
                                            child_process_StdioNull_to_js
                                            child_process_StdioNull_to_js
                                            child_process_StdioPipe_to_js
                                            x611)|])
    let (spawn' :
      command:string ->
        options:(child_process_StdioNull, child_process_StdioNull,
          child_process_StdioNull) child_process_SpawnOptionsWithStdioTuple
          ->
          (never or_null, never or_null, never or_null)
            child_process_ChildProcessByStdio)
      =
      fun ~command:(x620 : string) ->
        fun
          ~options:(x621 :
                     (child_process_StdioNull, child_process_StdioNull,
                       child_process_StdioNull)
                       child_process_SpawnOptionsWithStdioTuple)
          ->
          child_process_ChildProcessByStdio_of_js
            (fun (x625 : Ojs.t) -> or_null_of_js never_of_js x625)
            (fun (x627 : Ojs.t) -> or_null_of_js never_of_js x627)
            (fun (x629 : Ojs.t) -> or_null_of_js never_of_js x629)
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x620);(child_process_SpawnOptionsWithStdioTuple_to_js
                                            child_process_StdioNull_to_js
                                            child_process_StdioNull_to_js
                                            child_process_StdioNull_to_js
                                            x621)|])
    let (spawn' :
      command:string ->
        options:child_process_SpawnOptions -> child_process_ChildProcess)
      =
      fun ~command:(x631 : string) ->
        fun ~options:(x632 : child_process_SpawnOptions) ->
          child_process_ChildProcess_of_js
            (Ojs.call Import.child_process "spawn"
               [|(Ojs.string_to_js x631);(child_process_SpawnOptions_to_js
                                            x632)|])
    let (spawn' :
      command:string ->
        ?args:string list ->
          ?options:child_process_SpawnOptionsWithoutStdio ->
            unit -> child_process_ChildProcessWithoutNullStreams)
      =
      fun ~command:(x633 : string) ->
        fun ?args:(x634 : string list option) ->
          fun ?options:(x635 : child_process_SpawnOptionsWithoutStdio option)
            ->
            fun () ->
              child_process_ChildProcessWithoutNullStreams_of_js
                (let x640 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x640 "spawn") "apply"
                   [|x640;((let x636 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x636 "push"
                                 [|(Ojs.string_to_js x633)|]);
                            (match x634 with
                             | Some x638 ->
                                 ignore
                                   (Ojs.call x636 "push"
                                      [|(Ojs.list_to_js Ojs.string_to_js x638)|])
                             | None -> ());
                            (match x635 with
                             | Some x637 ->
                                 ignore
                                   (Ojs.call x636 "push"
                                      [|(child_process_SpawnOptionsWithoutStdio_to_js
                                           x637)|])
                             | None -> ());
                            x636))|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(child_process_StdioPipe, child_process_StdioPipe,
            child_process_StdioPipe) child_process_SpawnOptionsWithStdioTuple
            ->
            (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
              Node_stream.Stream.Readable.t)
              child_process_ChildProcessByStdio)
      =
      fun ~command:(x641 : string) ->
        fun ~args:(x642 : string list) ->
          fun
            ~options:(x644 :
                       (child_process_StdioPipe, child_process_StdioPipe,
                         child_process_StdioPipe)
                         child_process_SpawnOptionsWithStdioTuple)
            ->
            child_process_ChildProcessByStdio_of_js
              Node_stream.Stream.Writable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x641);(Ojs.list_to_js Ojs.string_to_js
                                              x642);(child_process_SpawnOptionsWithStdioTuple_to_js
                                                       child_process_StdioPipe_to_js
                                                       child_process_StdioPipe_to_js
                                                       child_process_StdioPipe_to_js
                                                       x644)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(child_process_StdioPipe, child_process_StdioPipe,
            child_process_StdioNull) child_process_SpawnOptionsWithStdioTuple
            ->
            (Node_stream.Stream.Writable.t, Node_stream.Stream.Readable.t,
              never or_null) child_process_ChildProcessByStdio)
      =
      fun ~command:(x651 : string) ->
        fun ~args:(x652 : string list) ->
          fun
            ~options:(x654 :
                       (child_process_StdioPipe, child_process_StdioPipe,
                         child_process_StdioNull)
                         child_process_SpawnOptionsWithStdioTuple)
            ->
            child_process_ChildProcessByStdio_of_js
              Node_stream.Stream.Writable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              (fun (x660 : Ojs.t) -> or_null_of_js never_of_js x660)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x651);(Ojs.list_to_js Ojs.string_to_js
                                              x652);(child_process_SpawnOptionsWithStdioTuple_to_js
                                                       child_process_StdioPipe_to_js
                                                       child_process_StdioPipe_to_js
                                                       child_process_StdioNull_to_js
                                                       x654)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(child_process_StdioPipe, child_process_StdioNull,
            child_process_StdioPipe) child_process_SpawnOptionsWithStdioTuple
            ->
            (Node_stream.Stream.Writable.t, never or_null,
              Node_stream.Stream.Readable.t)
              child_process_ChildProcessByStdio)
      =
      fun ~command:(x662 : string) ->
        fun ~args:(x663 : string list) ->
          fun
            ~options:(x665 :
                       (child_process_StdioPipe, child_process_StdioNull,
                         child_process_StdioPipe)
                         child_process_SpawnOptionsWithStdioTuple)
            ->
            child_process_ChildProcessByStdio_of_js
              Node_stream.Stream.Writable.t_of_js
              (fun (x670 : Ojs.t) -> or_null_of_js never_of_js x670)
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x662);(Ojs.list_to_js Ojs.string_to_js
                                              x663);(child_process_SpawnOptionsWithStdioTuple_to_js
                                                       child_process_StdioPipe_to_js
                                                       child_process_StdioNull_to_js
                                                       child_process_StdioPipe_to_js
                                                       x665)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(child_process_StdioNull, child_process_StdioPipe,
            child_process_StdioPipe) child_process_SpawnOptionsWithStdioTuple
            ->
            (never or_null, Node_stream.Stream.Readable.t,
              Node_stream.Stream.Readable.t)
              child_process_ChildProcessByStdio)
      =
      fun ~command:(x673 : string) ->
        fun ~args:(x674 : string list) ->
          fun
            ~options:(x676 :
                       (child_process_StdioNull, child_process_StdioPipe,
                         child_process_StdioPipe)
                         child_process_SpawnOptionsWithStdioTuple)
            ->
            child_process_ChildProcessByStdio_of_js
              (fun (x680 : Ojs.t) -> or_null_of_js never_of_js x680)
              Node_stream.Stream.Readable.t_of_js
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x673);(Ojs.list_to_js Ojs.string_to_js
                                              x674);(child_process_SpawnOptionsWithStdioTuple_to_js
                                                       child_process_StdioNull_to_js
                                                       child_process_StdioPipe_to_js
                                                       child_process_StdioPipe_to_js
                                                       x676)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(child_process_StdioPipe, child_process_StdioNull,
            child_process_StdioNull) child_process_SpawnOptionsWithStdioTuple
            ->
            (Node_stream.Stream.Writable.t, never or_null, never or_null)
              child_process_ChildProcessByStdio)
      =
      fun ~command:(x684 : string) ->
        fun ~args:(x685 : string list) ->
          fun
            ~options:(x687 :
                       (child_process_StdioPipe, child_process_StdioNull,
                         child_process_StdioNull)
                         child_process_SpawnOptionsWithStdioTuple)
            ->
            child_process_ChildProcessByStdio_of_js
              Node_stream.Stream.Writable.t_of_js
              (fun (x692 : Ojs.t) -> or_null_of_js never_of_js x692)
              (fun (x694 : Ojs.t) -> or_null_of_js never_of_js x694)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x684);(Ojs.list_to_js Ojs.string_to_js
                                              x685);(child_process_SpawnOptionsWithStdioTuple_to_js
                                                       child_process_StdioPipe_to_js
                                                       child_process_StdioNull_to_js
                                                       child_process_StdioNull_to_js
                                                       x687)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(child_process_StdioNull, child_process_StdioPipe,
            child_process_StdioNull) child_process_SpawnOptionsWithStdioTuple
            ->
            (never or_null, Node_stream.Stream.Readable.t, never or_null)
              child_process_ChildProcessByStdio)
      =
      fun ~command:(x696 : string) ->
        fun ~args:(x697 : string list) ->
          fun
            ~options:(x699 :
                       (child_process_StdioNull, child_process_StdioPipe,
                         child_process_StdioNull)
                         child_process_SpawnOptionsWithStdioTuple)
            ->
            child_process_ChildProcessByStdio_of_js
              (fun (x703 : Ojs.t) -> or_null_of_js never_of_js x703)
              Node_stream.Stream.Readable.t_of_js
              (fun (x706 : Ojs.t) -> or_null_of_js never_of_js x706)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x696);(Ojs.list_to_js Ojs.string_to_js
                                              x697);(child_process_SpawnOptionsWithStdioTuple_to_js
                                                       child_process_StdioNull_to_js
                                                       child_process_StdioPipe_to_js
                                                       child_process_StdioNull_to_js
                                                       x699)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(child_process_StdioNull, child_process_StdioNull,
            child_process_StdioPipe) child_process_SpawnOptionsWithStdioTuple
            ->
            (never or_null, never or_null, Node_stream.Stream.Readable.t)
              child_process_ChildProcessByStdio)
      =
      fun ~command:(x708 : string) ->
        fun ~args:(x709 : string list) ->
          fun
            ~options:(x711 :
                       (child_process_StdioNull, child_process_StdioNull,
                         child_process_StdioPipe)
                         child_process_SpawnOptionsWithStdioTuple)
            ->
            child_process_ChildProcessByStdio_of_js
              (fun (x715 : Ojs.t) -> or_null_of_js never_of_js x715)
              (fun (x717 : Ojs.t) -> or_null_of_js never_of_js x717)
              Node_stream.Stream.Readable.t_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x708);(Ojs.list_to_js Ojs.string_to_js
                                              x709);(child_process_SpawnOptionsWithStdioTuple_to_js
                                                       child_process_StdioNull_to_js
                                                       child_process_StdioNull_to_js
                                                       child_process_StdioPipe_to_js
                                                       x711)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:(child_process_StdioNull, child_process_StdioNull,
            child_process_StdioNull) child_process_SpawnOptionsWithStdioTuple
            ->
            (never or_null, never or_null, never or_null)
              child_process_ChildProcessByStdio)
      =
      fun ~command:(x720 : string) ->
        fun ~args:(x721 : string list) ->
          fun
            ~options:(x723 :
                       (child_process_StdioNull, child_process_StdioNull,
                         child_process_StdioNull)
                         child_process_SpawnOptionsWithStdioTuple)
            ->
            child_process_ChildProcessByStdio_of_js
              (fun (x727 : Ojs.t) -> or_null_of_js never_of_js x727)
              (fun (x729 : Ojs.t) -> or_null_of_js never_of_js x729)
              (fun (x731 : Ojs.t) -> or_null_of_js never_of_js x731)
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x720);(Ojs.list_to_js Ojs.string_to_js
                                              x721);(child_process_SpawnOptionsWithStdioTuple_to_js
                                                       child_process_StdioNull_to_js
                                                       child_process_StdioNull_to_js
                                                       child_process_StdioNull_to_js
                                                       x723)|])
    let (spawn' :
      command:string ->
        args:string list ->
          options:child_process_SpawnOptions -> child_process_ChildProcess)
      =
      fun ~command:(x733 : string) ->
        fun ~args:(x734 : string list) ->
          fun ~options:(x736 : child_process_SpawnOptions) ->
            child_process_ChildProcess_of_js
              (Ojs.call Import.child_process "spawn"
                 [|(Ojs.string_to_js x733);(Ojs.list_to_js Ojs.string_to_js
                                              x734);(child_process_SpawnOptions_to_js
                                                       x736)|])
    module ExecOptions =
      struct
        type t = child_process_ExecOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x738 : Ojs.t) -> child_process_ExecOptions_of_js x738
        and t_to_js : t -> Ojs.t =
          fun (x737 : child_process_ExecOptions) ->
            child_process_ExecOptions_to_js x737
        let (get_shell : t -> string) =
          fun (x739 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x739) "shell")
        let (set_shell : t -> string -> unit) =
          fun (x740 : t) ->
            fun (x741 : string) ->
              Ojs.set_prop_ascii (t_to_js x740) "shell"
                (Ojs.string_to_js x741)
        let (get_maxBuffer : t -> float) =
          fun (x742 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x742) "maxBuffer")
        let (set_maxBuffer : t -> float -> unit) =
          fun (x743 : t) ->
            fun (x744 : float) ->
              Ojs.set_prop_ascii (t_to_js x743) "maxBuffer"
                (Ojs.float_to_js x744)
        let (get_killSignal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x745 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x745) "killSignal")
        let (set_killSignal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x747 : t) ->
            fun (x748 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x747) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x748)
        let (cast : t -> child_process_CommonOptions) =
          fun (x750 : t) -> child_process_CommonOptions_of_js (t_to_js x750)
      end
    module ExecOptionsWithStringEncoding =
      struct
        type t = child_process_ExecOptionsWithStringEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x752 : Ojs.t) ->
            child_process_ExecOptionsWithStringEncoding_of_js x752
        and t_to_js : t -> Ojs.t =
          fun (x751 : child_process_ExecOptionsWithStringEncoding) ->
            child_process_ExecOptionsWithStringEncoding_to_js x751
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x753 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x753) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x754 : t) ->
            fun (x755 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x754) "encoding"
                (BufferEncoding.t_to_js x755)
        let (cast : t -> child_process_ExecOptions) =
          fun (x756 : t) -> child_process_ExecOptions_of_js (t_to_js x756)
      end
    module ExecOptionsWithBufferEncoding =
      struct
        type t = child_process_ExecOptionsWithBufferEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x758 : Ojs.t) ->
            child_process_ExecOptionsWithBufferEncoding_of_js x758
        and t_to_js : t -> Ojs.t =
          fun (x757 : child_process_ExecOptionsWithBufferEncoding) ->
            child_process_ExecOptionsWithBufferEncoding_to_js x757
        let (get_encoding : t -> BufferEncoding.t or_null) =
          fun (x759 : t) ->
            or_null_of_js BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x759) "encoding")
        let (set_encoding : t -> BufferEncoding.t or_null -> unit) =
          fun (x761 : t) ->
            fun (x762 : BufferEncoding.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x761) "encoding"
                (or_null_to_js BufferEncoding.t_to_js x762)
        let (cast : t -> child_process_ExecOptions) =
          fun (x764 : t) -> child_process_ExecOptions_of_js (t_to_js x764)
      end
    module ExecException =
      struct
        type t = child_process_ExecException
        let rec t_of_js : Ojs.t -> t =
          fun (x766 : Ojs.t) -> child_process_ExecException_of_js x766
        and t_to_js : t -> Ojs.t =
          fun (x765 : child_process_ExecException) ->
            child_process_ExecException_to_js x765
        let (get_cmd : t -> string) =
          fun (x767 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x767) "cmd")
        let (set_cmd : t -> string -> unit) =
          fun (x768 : t) ->
            fun (x769 : string) ->
              Ojs.set_prop_ascii (t_to_js x768) "cmd" (Ojs.string_to_js x769)
        let (get_killed : t -> bool) =
          fun (x770 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x770) "killed")
        let (set_killed : t -> bool -> unit) =
          fun (x771 : t) ->
            fun (x772 : bool) ->
              Ojs.set_prop_ascii (t_to_js x771) "killed"
                (Ojs.bool_to_js x772)
        let (get_code : t -> float) =
          fun (x773 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x773) "code")
        let (set_code : t -> float -> unit) =
          fun (x774 : t) ->
            fun (x775 : float) ->
              Ojs.set_prop_ascii (t_to_js x774) "code" (Ojs.float_to_js x775)
        let (get_signal : t -> Node_process.Process.Signals.t) =
          fun (x776 : t) ->
            Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x776) "signal")
        let (set_signal : t -> Node_process.Process.Signals.t -> unit) =
          fun (x777 : t) ->
            fun (x778 : Node_process.Process.Signals.t) ->
              Ojs.set_prop_ascii (t_to_js x777) "signal"
                (Node_process.Process.Signals.t_to_js x778)
        let (cast : t -> Error.t) =
          fun (x779 : t) -> Error.t_of_js (t_to_js x779)
      end
    let (exec :
      command:string ->
        ?callback:(error:child_process_ExecException or_null ->
                     stdout:string -> stderr:string -> unit)
          -> unit -> child_process_ChildProcess)
      =
      fun ~command:(x780 : string) ->
        fun
          ?callback:(x781 :
                      (error:child_process_ExecException or_null ->
                         stdout:string -> stderr:string -> unit)
                        option)
          ->
          fun () ->
            child_process_ChildProcess_of_js
              (let x788 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x788 "exec") "apply"
                 [|x788;((let x782 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x782 "push" [|(Ojs.string_to_js x780)|]);
                          (match x781 with
                           | Some x783 ->
                               ignore
                                 (Ojs.call x782 "push"
                                    [|(Ojs.fun_to_js 3
                                         (fun (x784 : Ojs.t) ->
                                            fun (x786 : Ojs.t) ->
                                              fun (x787 : Ojs.t) ->
                                                x783
                                                  ~error:(or_null_of_js
                                                            child_process_ExecException_of_js
                                                            x784)
                                                  ~stdout:(Ojs.string_of_js
                                                             x786)
                                                  ~stderr:(Ojs.string_of_js
                                                             x787)))|])
                           | None -> ());
                          x782))|])
    let (exec :
      command:string ->
        options:(anonymous_interface_1, child_process_ExecOptions)
          intersection2 ->
          ?callback:(error:child_process_ExecException or_null ->
                       stdout:Buffer.t -> stderr:Buffer.t -> unit)
            -> unit -> child_process_ChildProcess)
      =
      fun ~command:(x789 : string) ->
        fun
          ~options:(x790 :
                     (anonymous_interface_1, child_process_ExecOptions)
                       intersection2)
          ->
          fun
            ?callback:(x791 :
                        (error:child_process_ExecException or_null ->
                           stdout:Buffer.t -> stderr:Buffer.t -> unit)
                          option)
            ->
            fun () ->
              child_process_ChildProcess_of_js
                (let x800 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x800 "exec") "apply"
                   [|x800;((let x792 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x792 "push"
                                 [|(Ojs.string_to_js x789)|]);
                            ignore
                              (Ojs.call x792 "push"
                                 [|(intersection2_to_js
                                      anonymous_interface_1_to_js
                                      child_process_ExecOptions_to_js x790)|]);
                            (match x791 with
                             | Some x793 ->
                                 ignore
                                   (Ojs.call x792 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x794 : Ojs.t) ->
                                              fun (x796 : Ojs.t) ->
                                                fun (x797 : Ojs.t) ->
                                                  x793
                                                    ~error:(or_null_of_js
                                                              child_process_ExecException_of_js
                                                              x794)
                                                    ~stdout:(Buffer.t_of_js
                                                               x796)
                                                    ~stderr:(Buffer.t_of_js
                                                               x797)))|])
                             | None -> ());
                            x792))|])
    let (exec :
      command:string ->
        options:(anonymous_interface_0, child_process_ExecOptions)
          intersection2 ->
          ?callback:(error:child_process_ExecException or_null ->
                       stdout:string -> stderr:string -> unit)
            -> unit -> child_process_ChildProcess)
      =
      fun ~command:(x801 : string) ->
        fun
          ~options:(x802 :
                     (anonymous_interface_0, child_process_ExecOptions)
                       intersection2)
          ->
          fun
            ?callback:(x803 :
                        (error:child_process_ExecException or_null ->
                           stdout:string -> stderr:string -> unit)
                          option)
            ->
            fun () ->
              child_process_ChildProcess_of_js
                (let x812 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x812 "exec") "apply"
                   [|x812;((let x804 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x804 "push"
                                 [|(Ojs.string_to_js x801)|]);
                            ignore
                              (Ojs.call x804 "push"
                                 [|(intersection2_to_js
                                      anonymous_interface_0_to_js
                                      child_process_ExecOptions_to_js x802)|]);
                            (match x803 with
                             | Some x805 ->
                                 ignore
                                   (Ojs.call x804 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x806 : Ojs.t) ->
                                              fun (x808 : Ojs.t) ->
                                                fun (x809 : Ojs.t) ->
                                                  x805
                                                    ~error:(or_null_of_js
                                                              child_process_ExecException_of_js
                                                              x806)
                                                    ~stdout:(Ojs.string_of_js
                                                               x808)
                                                    ~stderr:(Ojs.string_of_js
                                                               x809)))|])
                             | None -> ());
                            x804))|])
    let (exec :
      command:string ->
        options:(anonymous_interface_0, child_process_ExecOptions)
          intersection2 ->
          ?callback:(error:child_process_ExecException or_null ->
                       stdout:Buffer.t or_string ->
                         stderr:Buffer.t or_string -> unit)
            -> unit -> child_process_ChildProcess)
      =
      fun ~command:(x813 : string) ->
        fun
          ~options:(x814 :
                     (anonymous_interface_0, child_process_ExecOptions)
                       intersection2)
          ->
          fun
            ?callback:(x815 :
                        (error:child_process_ExecException or_null ->
                           stdout:Buffer.t or_string ->
                             stderr:Buffer.t or_string -> unit)
                          option)
            ->
            fun () ->
              child_process_ChildProcess_of_js
                (let x826 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x826 "exec") "apply"
                   [|x826;((let x816 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x816 "push"
                                 [|(Ojs.string_to_js x813)|]);
                            ignore
                              (Ojs.call x816 "push"
                                 [|(intersection2_to_js
                                      anonymous_interface_0_to_js
                                      child_process_ExecOptions_to_js x814)|]);
                            (match x815 with
                             | Some x817 ->
                                 ignore
                                   (Ojs.call x816 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x818 : Ojs.t) ->
                                              fun (x820 : Ojs.t) ->
                                                fun (x822 : Ojs.t) ->
                                                  x817
                                                    ~error:(or_null_of_js
                                                              child_process_ExecException_of_js
                                                              x818)
                                                    ~stdout:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x820)
                                                    ~stderr:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x822)))|])
                             | None -> ());
                            x816))|])
    let (exec :
      command:string ->
        options:child_process_ExecOptions ->
          ?callback:(error:child_process_ExecException or_null ->
                       stdout:string -> stderr:string -> unit)
            -> unit -> child_process_ChildProcess)
      =
      fun ~command:(x827 : string) ->
        fun ~options:(x828 : child_process_ExecOptions) ->
          fun
            ?callback:(x829 :
                        (error:child_process_ExecException or_null ->
                           stdout:string -> stderr:string -> unit)
                          option)
            ->
            fun () ->
              child_process_ChildProcess_of_js
                (let x836 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x836 "exec") "apply"
                   [|x836;((let x830 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x830 "push"
                                 [|(Ojs.string_to_js x827)|]);
                            ignore
                              (Ojs.call x830 "push"
                                 [|(child_process_ExecOptions_to_js x828)|]);
                            (match x829 with
                             | Some x831 ->
                                 ignore
                                   (Ojs.call x830 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x832 : Ojs.t) ->
                                              fun (x834 : Ojs.t) ->
                                                fun (x835 : Ojs.t) ->
                                                  x831
                                                    ~error:(or_null_of_js
                                                              child_process_ExecException_of_js
                                                              x832)
                                                    ~stdout:(Ojs.string_of_js
                                                               x834)
                                                    ~stderr:(Ojs.string_of_js
                                                               x835)))|])
                             | None -> ());
                            x830))|])
    let (exec :
      command:string ->
        options:(Node_fs.Fs.BaseEncodingOptions.t, child_process_ExecOptions)
          intersection2 or_null_or_undefined ->
          ?callback:(error:child_process_ExecException or_null ->
                       stdout:Buffer.t or_string ->
                         stderr:Buffer.t or_string -> unit)
            -> unit -> child_process_ChildProcess)
      =
      fun ~command:(x837 : string) ->
        fun
          ~options:(x838 :
                     (Node_fs.Fs.BaseEncodingOptions.t,
                       child_process_ExecOptions) intersection2
                       or_null_or_undefined)
          ->
          fun
            ?callback:(x839 :
                        (error:child_process_ExecException or_null ->
                           stdout:Buffer.t or_string ->
                             stderr:Buffer.t or_string -> unit)
                          option)
            ->
            fun () ->
              child_process_ChildProcess_of_js
                (let x851 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x851 "exec") "apply"
                   [|x851;((let x840 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x840 "push"
                                 [|(Ojs.string_to_js x837)|]);
                            ignore
                              (Ojs.call x840 "push"
                                 [|(or_null_or_undefined_to_js
                                      (fun
                                         (x848 :
                                           (Node_fs.Fs.BaseEncodingOptions.t,
                                             child_process_ExecOptions)
                                             intersection2)
                                         ->
                                         intersection2_to_js
                                           Node_fs.Fs.BaseEncodingOptions.t_to_js
                                           child_process_ExecOptions_to_js
                                           x848) x838)|]);
                            (match x839 with
                             | Some x841 ->
                                 ignore
                                   (Ojs.call x840 "push"
                                      [|(Ojs.fun_to_js 3
                                           (fun (x842 : Ojs.t) ->
                                              fun (x844 : Ojs.t) ->
                                                fun (x846 : Ojs.t) ->
                                                  x841
                                                    ~error:(or_null_of_js
                                                              child_process_ExecException_of_js
                                                              x842)
                                                    ~stdout:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x844)
                                                    ~stderr:(or_string_of_js
                                                               Buffer.t_of_js
                                                               x846)))|])
                             | None -> ());
                            x840))|])
    module PromiseWithChild =
      struct
        type 'T t = 'T child_process_PromiseWithChild
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x854 : Ojs.t) ->
              child_process_PromiseWithChild_of_js __T_of_js x854
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x852 : __T child_process_PromiseWithChild) ->
              child_process_PromiseWithChild_to_js __T_to_js x852
        let (get_child : 'T t -> child_process_ChildProcess) =
          fun (x856 : 'T t) ->
            child_process_ChildProcess_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x856) "child")
        let (set_child : 'T t -> child_process_ChildProcess -> unit) =
          fun (x858 : 'T t) ->
            fun (x859 : child_process_ChildProcess) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x858) "child"
                (child_process_ChildProcess_to_js x859)
        let (cast : 'T t -> 'T Promise.t) =
          fun (x861 : 'T t) ->
            Promise.t_of_js Obj.magic (t_to_js Obj.magic x861)
      end
    module Exec =
      struct
        let (__promisify__ :
          command:string ->
            anonymous_interface_3 child_process_PromiseWithChild)
          =
          fun ~command:(x864 : string) ->
            child_process_PromiseWithChild_of_js anonymous_interface_3_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                 "__promisify__" [|(Ojs.string_to_js x864)|])
        let (__promisify__ :
          command:string ->
            options:(anonymous_interface_1, child_process_ExecOptions)
              intersection2 ->
              anonymous_interface_2 child_process_PromiseWithChild)
          =
          fun ~command:(x866 : string) ->
            fun
              ~options:(x867 :
                         (anonymous_interface_1, child_process_ExecOptions)
                           intersection2)
              ->
              child_process_PromiseWithChild_of_js
                anonymous_interface_2_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                   "__promisify__"
                   [|(Ojs.string_to_js x866);(intersection2_to_js
                                                anonymous_interface_1_to_js
                                                child_process_ExecOptions_to_js
                                                x867)|])
        let (__promisify__ :
          command:string ->
            options:(anonymous_interface_0, child_process_ExecOptions)
              intersection2 ->
              anonymous_interface_3 child_process_PromiseWithChild)
          =
          fun ~command:(x871 : string) ->
            fun
              ~options:(x872 :
                         (anonymous_interface_0, child_process_ExecOptions)
                           intersection2)
              ->
              child_process_PromiseWithChild_of_js
                anonymous_interface_3_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                   "__promisify__"
                   [|(Ojs.string_to_js x871);(intersection2_to_js
                                                anonymous_interface_0_to_js
                                                child_process_ExecOptions_to_js
                                                x872)|])
        let (__promisify__ :
          command:string ->
            options:child_process_ExecOptions ->
              anonymous_interface_3 child_process_PromiseWithChild)
          =
          fun ~command:(x876 : string) ->
            fun ~options:(x877 : child_process_ExecOptions) ->
              child_process_PromiseWithChild_of_js
                anonymous_interface_3_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.child_process "exec")
                   "__promisify__"
                   [|(Ojs.string_to_js x876);(child_process_ExecOptions_to_js
                                                x877)|])
        let (__promisify__ :
          command:string ->
            ?options:(Node_fs.Fs.BaseEncodingOptions.t,
              child_process_ExecOptions) intersection2 or_null ->
              unit -> anonymous_interface_4 child_process_PromiseWithChild)
          =
          fun ~command:(x879 : string) ->
            fun
              ?options:(x880 :
                         (Node_fs.Fs.BaseEncodingOptions.t,
                           child_process_ExecOptions) intersection2 or_null
                           option)
              ->
              fun () ->
                child_process_PromiseWithChild_of_js
                  anonymous_interface_4_of_js
                  (let x886 = Ojs.get_prop_ascii Import.child_process "exec" in
                   Ojs.call (Ojs.get_prop_ascii x886 "__promisify__") "apply"
                     [|x886;((let x881 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x881 "push"
                                   [|(Ojs.string_to_js x879)|]);
                              (match x880 with
                               | Some x882 ->
                                   ignore
                                     (Ojs.call x881 "push"
                                        [|(or_null_to_js
                                             (fun
                                                (x883 :
                                                  (Node_fs.Fs.BaseEncodingOptions.t,
                                                    child_process_ExecOptions)
                                                    intersection2)
                                                ->
                                                intersection2_to_js
                                                  Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                  child_process_ExecOptions_to_js
                                                  x883) x882)|])
                               | None -> ());
                              x881))|])
      end
    module ExecFileOptions =
      struct
        type t = child_process_ExecFileOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x889 : Ojs.t) -> child_process_ExecFileOptions_of_js x889
        and t_to_js : t -> Ojs.t =
          fun (x888 : child_process_ExecFileOptions) ->
            child_process_ExecFileOptions_to_js x888
        let (get_maxBuffer : t -> float) =
          fun (x890 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x890) "maxBuffer")
        let (set_maxBuffer : t -> float -> unit) =
          fun (x891 : t) ->
            fun (x892 : float) ->
              Ojs.set_prop_ascii (t_to_js x891) "maxBuffer"
                (Ojs.float_to_js x892)
        let (get_killSignal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x893 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x893) "killSignal")
        let (set_killSignal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x895 : t) ->
            fun (x896 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x895) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x896)
        let (get_windowsVerbatimArguments : t -> bool) =
          fun (x898 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x898) "windowsVerbatimArguments")
        let (set_windowsVerbatimArguments : t -> bool -> unit) =
          fun (x899 : t) ->
            fun (x900 : bool) ->
              Ojs.set_prop_ascii (t_to_js x899) "windowsVerbatimArguments"
                (Ojs.bool_to_js x900)
        let (get_shell : t -> bool or_string) =
          fun (x901 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x901) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x903 : t) ->
            fun (x904 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x903) "shell"
                (or_string_to_js Ojs.bool_to_js x904)
        let (cast : t -> child_process_CommonOptions) =
          fun (x906 : t) -> child_process_CommonOptions_of_js (t_to_js x906)
      end
    module ExecFileOptionsWithStringEncoding =
      struct
        type t = child_process_ExecFileOptionsWithStringEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x908 : Ojs.t) ->
            child_process_ExecFileOptionsWithStringEncoding_of_js x908
        and t_to_js : t -> Ojs.t =
          fun (x907 : child_process_ExecFileOptionsWithStringEncoding) ->
            child_process_ExecFileOptionsWithStringEncoding_to_js x907
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x909 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x909) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x910 : t) ->
            fun (x911 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x910) "encoding"
                (BufferEncoding.t_to_js x911)
        let (cast : t -> child_process_ExecFileOptions) =
          fun (x912 : t) ->
            child_process_ExecFileOptions_of_js (t_to_js x912)
      end
    module ExecFileOptionsWithBufferEncoding =
      struct
        type t = child_process_ExecFileOptionsWithBufferEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x914 : Ojs.t) ->
            child_process_ExecFileOptionsWithBufferEncoding_of_js x914
        and t_to_js : t -> Ojs.t =
          fun (x913 : child_process_ExecFileOptionsWithBufferEncoding) ->
            child_process_ExecFileOptionsWithBufferEncoding_to_js x913
        let (get_encoding : t -> [ `buffer ] or_null) =
          fun (x915 : t) ->
            or_null_of_js
              (fun (x916 : Ojs.t) ->
                 let x917 = x916 in
                 match Ojs.string_of_js x917 with
                 | "buffer" -> `buffer
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x915) "encoding")
        let (set_encoding : t -> [ `buffer ] or_null -> unit) =
          fun (x918 : t) ->
            fun (x919 : [ `buffer ] or_null) ->
              Ojs.set_prop_ascii (t_to_js x918) "encoding"
                (or_null_to_js
                   (fun (x920 : [ `buffer ]) ->
                      match x920 with | `buffer -> Ojs.string_to_js "buffer")
                   x919)
        let (cast : t -> child_process_ExecFileOptions) =
          fun (x921 : t) ->
            child_process_ExecFileOptions_of_js (t_to_js x921)
      end
    module ExecFileOptionsWithOtherEncoding =
      struct
        type t = child_process_ExecFileOptionsWithOtherEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x923 : Ojs.t) ->
            child_process_ExecFileOptionsWithOtherEncoding_of_js x923
        and t_to_js : t -> Ojs.t =
          fun (x922 : child_process_ExecFileOptionsWithOtherEncoding) ->
            child_process_ExecFileOptionsWithOtherEncoding_to_js x922
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x924 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x924) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x925 : t) ->
            fun (x926 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x925) "encoding"
                (BufferEncoding.t_to_js x926)
        let (cast : t -> child_process_ExecFileOptions) =
          fun (x927 : t) ->
            child_process_ExecFileOptions_of_js (t_to_js x927)
      end
    module ExecFileException =
      struct
        type t = child_process_ExecFileException
        let rec t_of_js : Ojs.t -> t =
          fun (x929 : Ojs.t) -> child_process_ExecFileException_of_js x929
        and t_to_js : t -> Ojs.t =
          fun (x928 : child_process_ExecFileException) ->
            child_process_ExecFileException_to_js x928
      end
    let (execFile : file:string -> child_process_ChildProcess) =
      fun ~file:(x930 : string) ->
        child_process_ChildProcess_of_js
          (Ojs.call Import.child_process "execFile"
             [|(Ojs.string_to_js x930)|])
    let (execFile :
      file:string ->
        options:(Node_fs.Fs.BaseEncodingOptions.t,
          child_process_ExecFileOptions) intersection2 or_null_or_undefined
          -> child_process_ChildProcess)
      =
      fun ~file:(x931 : string) ->
        fun
          ~options:(x932 :
                     (Node_fs.Fs.BaseEncodingOptions.t,
                       child_process_ExecFileOptions) intersection2
                       or_null_or_undefined)
          ->
          child_process_ChildProcess_of_js
            (Ojs.call Import.child_process "execFile"
               [|(Ojs.string_to_js x931);(or_null_or_undefined_to_js
                                            (fun
                                               (x933 :
                                                 (Node_fs.Fs.BaseEncodingOptions.t,
                                                   child_process_ExecFileOptions)
                                                   intersection2)
                                               ->
                                               intersection2_to_js
                                                 Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                 child_process_ExecFileOptions_to_js
                                                 x933) x932)|])
    let (execFile :
      file:string ->
        ?args:string list or_null -> unit -> child_process_ChildProcess)
      =
      fun ~file:(x936 : string) ->
        fun ?args:(x937 : string list or_null option) ->
          fun () ->
            child_process_ChildProcess_of_js
              (let x942 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x942 "execFile") "apply"
                 [|x942;((let x938 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x938 "push" [|(Ojs.string_to_js x936)|]);
                          (match x937 with
                           | Some x939 ->
                               ignore
                                 (Ojs.call x938 "push"
                                    [|(or_null_to_js
                                         (fun (x940 : string list) ->
                                            Ojs.list_to_js Ojs.string_to_js
                                              x940) x939)|])
                           | None -> ());
                          x938))|])
    let (execFile :
      file:string ->
        args:string list or_null_or_undefined ->
          options:(Node_fs.Fs.BaseEncodingOptions.t,
            child_process_ExecFileOptions) intersection2 or_null_or_undefined
            -> child_process_ChildProcess)
      =
      fun ~file:(x943 : string) ->
        fun ~args:(x944 : string list or_null_or_undefined) ->
          fun
            ~options:(x947 :
                       (Node_fs.Fs.BaseEncodingOptions.t,
                         child_process_ExecFileOptions) intersection2
                         or_null_or_undefined)
            ->
            child_process_ChildProcess_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x943);(or_null_or_undefined_to_js
                                              (fun (x945 : string list) ->
                                                 Ojs.list_to_js
                                                   Ojs.string_to_js x945)
                                              x944);(or_null_or_undefined_to_js
                                                       (fun
                                                          (x948 :
                                                            (Node_fs.Fs.BaseEncodingOptions.t,
                                                              child_process_ExecFileOptions)
                                                              intersection2)
                                                          ->
                                                          intersection2_to_js
                                                            Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                            child_process_ExecFileOptions_to_js
                                                            x948) x947)|])
    let (execFile :
      file:string ->
        callback:(error:child_process_ExecFileException or_null ->
                    stdout:string -> stderr:string -> unit)
          -> child_process_ChildProcess)
      =
      fun ~file:(x951 : string) ->
        fun
          ~callback:(x952 :
                      error:child_process_ExecFileException or_null ->
                        stdout:string -> stderr:string -> unit)
          ->
          child_process_ChildProcess_of_js
            (Ojs.call Import.child_process "execFile"
               [|(Ojs.string_to_js x951);(Ojs.fun_to_js 3
                                            (fun (x953 : Ojs.t) ->
                                               fun (x955 : Ojs.t) ->
                                                 fun (x956 : Ojs.t) ->
                                                   x952
                                                     ~error:(or_null_of_js
                                                               child_process_ExecFileException_of_js
                                                               x953)
                                                     ~stdout:(Ojs.string_of_js
                                                                x955)
                                                     ~stderr:(Ojs.string_of_js
                                                                x956)))|])
    let (execFile :
      file:string ->
        args:string list or_null_or_undefined ->
          callback:(error:child_process_ExecFileException or_null ->
                      stdout:string -> stderr:string -> unit)
            -> child_process_ChildProcess)
      =
      fun ~file:(x957 : string) ->
        fun ~args:(x958 : string list or_null_or_undefined) ->
          fun
            ~callback:(x961 :
                        error:child_process_ExecFileException or_null ->
                          stdout:string -> stderr:string -> unit)
            ->
            child_process_ChildProcess_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x957);(or_null_or_undefined_to_js
                                              (fun (x959 : string list) ->
                                                 Ojs.list_to_js
                                                   Ojs.string_to_js x959)
                                              x958);(Ojs.fun_to_js 3
                                                       (fun (x962 : Ojs.t) ->
                                                          fun (x964 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x965 : Ojs.t)
                                                              ->
                                                              x961
                                                                ~error:(
                                                                or_null_of_js
                                                                  child_process_ExecFileException_of_js
                                                                  x962)
                                                                ~stdout:(
                                                                Ojs.string_of_js
                                                                  x964)
                                                                ~stderr:(
                                                                Ojs.string_of_js
                                                                  x965)))|])
    let (execFile :
      file:string ->
        options:child_process_ExecFileOptionsWithBufferEncoding ->
          callback:(error:child_process_ExecFileException or_null ->
                      stdout:Buffer.t -> stderr:Buffer.t -> unit)
            -> child_process_ChildProcess)
      =
      fun ~file:(x966 : string) ->
        fun ~options:(x967 : child_process_ExecFileOptionsWithBufferEncoding)
          ->
          fun
            ~callback:(x968 :
                        error:child_process_ExecFileException or_null ->
                          stdout:Buffer.t -> stderr:Buffer.t -> unit)
            ->
            child_process_ChildProcess_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x966);(child_process_ExecFileOptionsWithBufferEncoding_to_js
                                              x967);(Ojs.fun_to_js 3
                                                       (fun (x969 : Ojs.t) ->
                                                          fun (x971 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x972 : Ojs.t)
                                                              ->
                                                              x968
                                                                ~error:(
                                                                or_null_of_js
                                                                  child_process_ExecFileException_of_js
                                                                  x969)
                                                                ~stdout:(
                                                                Buffer.t_of_js
                                                                  x971)
                                                                ~stderr:(
                                                                Buffer.t_of_js
                                                                  x972)))|])
    let (execFile :
      file:string ->
        args:string list or_null_or_undefined ->
          options:child_process_ExecFileOptionsWithBufferEncoding ->
            callback:(error:child_process_ExecFileException or_null ->
                        stdout:Buffer.t -> stderr:Buffer.t -> unit)
              -> child_process_ChildProcess)
      =
      fun ~file:(x973 : string) ->
        fun ~args:(x974 : string list or_null_or_undefined) ->
          fun
            ~options:(x977 : child_process_ExecFileOptionsWithBufferEncoding)
            ->
            fun
              ~callback:(x978 :
                          error:child_process_ExecFileException or_null ->
                            stdout:Buffer.t -> stderr:Buffer.t -> unit)
              ->
              child_process_ChildProcess_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x973);(or_null_or_undefined_to_js
                                                (fun (x975 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x975)
                                                x974);(child_process_ExecFileOptionsWithBufferEncoding_to_js
                                                         x977);(Ojs.fun_to_js
                                                                  3
                                                                  (fun
                                                                    (x979 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x981 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x982 :
                                                                    Ojs.t) ->
                                                                    x978
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    child_process_ExecFileException_of_js
                                                                    x979)
                                                                    ~stdout:(
                                                                    Buffer.t_of_js
                                                                    x981)
                                                                    ~stderr:(
                                                                    Buffer.t_of_js
                                                                    x982)))|])
    let (execFile :
      file:string ->
        options:child_process_ExecFileOptionsWithStringEncoding ->
          callback:(error:child_process_ExecFileException or_null ->
                      stdout:string -> stderr:string -> unit)
            -> child_process_ChildProcess)
      =
      fun ~file:(x983 : string) ->
        fun ~options:(x984 : child_process_ExecFileOptionsWithStringEncoding)
          ->
          fun
            ~callback:(x985 :
                        error:child_process_ExecFileException or_null ->
                          stdout:string -> stderr:string -> unit)
            ->
            child_process_ChildProcess_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x983);(child_process_ExecFileOptionsWithStringEncoding_to_js
                                              x984);(Ojs.fun_to_js 3
                                                       (fun (x986 : Ojs.t) ->
                                                          fun (x988 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x989 : Ojs.t)
                                                              ->
                                                              x985
                                                                ~error:(
                                                                or_null_of_js
                                                                  child_process_ExecFileException_of_js
                                                                  x986)
                                                                ~stdout:(
                                                                Ojs.string_of_js
                                                                  x988)
                                                                ~stderr:(
                                                                Ojs.string_of_js
                                                                  x989)))|])
    let (execFile :
      file:string ->
        args:string list or_null_or_undefined ->
          options:child_process_ExecFileOptionsWithStringEncoding ->
            callback:(error:child_process_ExecFileException or_null ->
                        stdout:string -> stderr:string -> unit)
              -> child_process_ChildProcess)
      =
      fun ~file:(x990 : string) ->
        fun ~args:(x991 : string list or_null_or_undefined) ->
          fun
            ~options:(x994 : child_process_ExecFileOptionsWithStringEncoding)
            ->
            fun
              ~callback:(x995 :
                          error:child_process_ExecFileException or_null ->
                            stdout:string -> stderr:string -> unit)
              ->
              child_process_ChildProcess_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x990);(or_null_or_undefined_to_js
                                                (fun (x992 : string list) ->
                                                   Ojs.list_to_js
                                                     Ojs.string_to_js x992)
                                                x991);(child_process_ExecFileOptionsWithStringEncoding_to_js
                                                         x994);(Ojs.fun_to_js
                                                                  3
                                                                  (fun
                                                                    (x996 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x998 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x999 :
                                                                    Ojs.t) ->
                                                                    x995
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    child_process_ExecFileException_of_js
                                                                    x996)
                                                                    ~stdout:(
                                                                    Ojs.string_of_js
                                                                    x998)
                                                                    ~stderr:(
                                                                    Ojs.string_of_js
                                                                    x999)))|])
    let (execFile :
      file:string ->
        options:child_process_ExecFileOptionsWithOtherEncoding ->
          callback:(error:child_process_ExecFileException or_null ->
                      stdout:Buffer.t or_string ->
                        stderr:Buffer.t or_string -> unit)
            -> child_process_ChildProcess)
      =
      fun ~file:(x1000 : string) ->
        fun ~options:(x1001 : child_process_ExecFileOptionsWithOtherEncoding)
          ->
          fun
            ~callback:(x1002 :
                        error:child_process_ExecFileException or_null ->
                          stdout:Buffer.t or_string ->
                            stderr:Buffer.t or_string -> unit)
            ->
            child_process_ChildProcess_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x1000);(child_process_ExecFileOptionsWithOtherEncoding_to_js
                                               x1001);(Ojs.fun_to_js 3
                                                         (fun (x1003 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x1005 : Ojs.t)
                                                              ->
                                                              fun
                                                                (x1007 :
                                                                  Ojs.t)
                                                                ->
                                                                x1002
                                                                  ~error:(
                                                                  or_null_of_js
                                                                    child_process_ExecFileException_of_js
                                                                    x1003)
                                                                  ~stdout:(
                                                                  or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1005)
                                                                  ~stderr:(
                                                                  or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1007)))|])
    let (execFile :
      file:string ->
        args:string list or_null_or_undefined ->
          options:child_process_ExecFileOptionsWithOtherEncoding ->
            callback:(error:child_process_ExecFileException or_null ->
                        stdout:Buffer.t or_string ->
                          stderr:Buffer.t or_string -> unit)
              -> child_process_ChildProcess)
      =
      fun ~file:(x1009 : string) ->
        fun ~args:(x1010 : string list or_null_or_undefined) ->
          fun
            ~options:(x1013 : child_process_ExecFileOptionsWithOtherEncoding)
            ->
            fun
              ~callback:(x1014 :
                          error:child_process_ExecFileException or_null ->
                            stdout:Buffer.t or_string ->
                              stderr:Buffer.t or_string -> unit)
              ->
              child_process_ChildProcess_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x1009);(or_null_or_undefined_to_js
                                                 (fun (x1011 : string list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Ojs.string_to_js x1011)
                                                 x1010);(child_process_ExecFileOptionsWithOtherEncoding_to_js
                                                           x1013);(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1015 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1017 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1019 :
                                                                    Ojs.t) ->
                                                                    x1014
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    child_process_ExecFileException_of_js
                                                                    x1015)
                                                                    ~stdout:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1017)
                                                                    ~stderr:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1019)))|])
    let (execFile :
      file:string ->
        options:child_process_ExecFileOptions ->
          callback:(error:child_process_ExecFileException or_null ->
                      stdout:string -> stderr:string -> unit)
            -> child_process_ChildProcess)
      =
      fun ~file:(x1021 : string) ->
        fun ~options:(x1022 : child_process_ExecFileOptions) ->
          fun
            ~callback:(x1023 :
                        error:child_process_ExecFileException or_null ->
                          stdout:string -> stderr:string -> unit)
            ->
            child_process_ChildProcess_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x1021);(child_process_ExecFileOptions_to_js
                                               x1022);(Ojs.fun_to_js 3
                                                         (fun (x1024 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x1026 : Ojs.t)
                                                              ->
                                                              fun
                                                                (x1027 :
                                                                  Ojs.t)
                                                                ->
                                                                x1023
                                                                  ~error:(
                                                                  or_null_of_js
                                                                    child_process_ExecFileException_of_js
                                                                    x1024)
                                                                  ~stdout:(
                                                                  Ojs.string_of_js
                                                                    x1026)
                                                                  ~stderr:(
                                                                  Ojs.string_of_js
                                                                    x1027)))|])
    let (execFile :
      file:string ->
        args:string list or_null_or_undefined ->
          options:child_process_ExecFileOptions ->
            callback:(error:child_process_ExecFileException or_null ->
                        stdout:string -> stderr:string -> unit)
              -> child_process_ChildProcess)
      =
      fun ~file:(x1028 : string) ->
        fun ~args:(x1029 : string list or_null_or_undefined) ->
          fun ~options:(x1032 : child_process_ExecFileOptions) ->
            fun
              ~callback:(x1033 :
                          error:child_process_ExecFileException or_null ->
                            stdout:string -> stderr:string -> unit)
              ->
              child_process_ChildProcess_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x1028);(or_null_or_undefined_to_js
                                                 (fun (x1030 : string list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Ojs.string_to_js x1030)
                                                 x1029);(child_process_ExecFileOptions_to_js
                                                           x1032);(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1034 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1036 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1037 :
                                                                    Ojs.t) ->
                                                                    x1033
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    child_process_ExecFileException_of_js
                                                                    x1034)
                                                                    ~stdout:(
                                                                    Ojs.string_of_js
                                                                    x1036)
                                                                    ~stderr:(
                                                                    Ojs.string_of_js
                                                                    x1037)))|])
    let (execFile :
      file:string ->
        options:(Node_fs.Fs.BaseEncodingOptions.t,
          child_process_ExecFileOptions) intersection2 or_null_or_undefined
          ->
          callback:(error:child_process_ExecFileException or_null ->
                      stdout:Buffer.t or_string ->
                        stderr:Buffer.t or_string -> unit)
            or_null_or_undefined -> child_process_ChildProcess)
      =
      fun ~file:(x1038 : string) ->
        fun
          ~options:(x1039 :
                     (Node_fs.Fs.BaseEncodingOptions.t,
                       child_process_ExecFileOptions) intersection2
                       or_null_or_undefined)
          ->
          fun
            ~callback:(x1043 :
                        (error:child_process_ExecFileException or_null ->
                           stdout:Buffer.t or_string ->
                             stderr:Buffer.t or_string -> unit)
                          or_null_or_undefined)
            ->
            child_process_ChildProcess_of_js
              (Ojs.call Import.child_process "execFile"
                 [|(Ojs.string_to_js x1038);(or_null_or_undefined_to_js
                                               (fun
                                                  (x1040 :
                                                    (Node_fs.Fs.BaseEncodingOptions.t,
                                                      child_process_ExecFileOptions)
                                                      intersection2)
                                                  ->
                                                  intersection2_to_js
                                                    Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                    child_process_ExecFileOptions_to_js
                                                    x1040) x1039);(or_null_or_undefined_to_js
                                                                    (fun
                                                                    (x1044 :
                                                                    error:child_process_ExecFileException
                                                                    or_null
                                                                    ->
                                                                    stdout:Buffer.t
                                                                    or_string
                                                                    ->
                                                                    stderr:Buffer.t
                                                                    or_string
                                                                    -> 
                                                                    unit) ->
                                                                    Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1045 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1047 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1049 :
                                                                    Ojs.t) ->
                                                                    x1044
                                                                    ~error:(
                                                                    or_null_of_js
                                                                    child_process_ExecFileException_of_js
                                                                    x1045)
                                                                    ~stdout:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1047)
                                                                    ~stderr:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1049)))
                                                                    x1043)|])
    let (execFile :
      file:string ->
        args:string list or_null_or_undefined ->
          options:(Node_fs.Fs.BaseEncodingOptions.t,
            child_process_ExecFileOptions) intersection2 or_null_or_undefined
            ->
            callback:(error:child_process_ExecFileException or_null ->
                        stdout:Buffer.t or_string ->
                          stderr:Buffer.t or_string -> unit)
              or_null_or_undefined -> child_process_ChildProcess)
      =
      fun ~file:(x1051 : string) ->
        fun ~args:(x1052 : string list or_null_or_undefined) ->
          fun
            ~options:(x1055 :
                       (Node_fs.Fs.BaseEncodingOptions.t,
                         child_process_ExecFileOptions) intersection2
                         or_null_or_undefined)
            ->
            fun
              ~callback:(x1059 :
                          (error:child_process_ExecFileException or_null ->
                             stdout:Buffer.t or_string ->
                               stderr:Buffer.t or_string -> unit)
                            or_null_or_undefined)
              ->
              child_process_ChildProcess_of_js
                (Ojs.call Import.child_process "execFile"
                   [|(Ojs.string_to_js x1051);(or_null_or_undefined_to_js
                                                 (fun (x1053 : string list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Ojs.string_to_js x1053)
                                                 x1052);(or_null_or_undefined_to_js
                                                           (fun
                                                              (x1056 :
                                                                (Node_fs.Fs.BaseEncodingOptions.t,
                                                                  child_process_ExecFileOptions)
                                                                  intersection2)
                                                              ->
                                                              intersection2_to_js
                                                                Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                                child_process_ExecFileOptions_to_js
                                                                x1056) x1055);(
                     or_null_or_undefined_to_js
                       (fun
                          (x1060 :
                            error:child_process_ExecFileException or_null ->
                              stdout:Buffer.t or_string ->
                                stderr:Buffer.t or_string -> unit)
                          ->
                          Ojs.fun_to_js 3
                            (fun (x1061 : Ojs.t) ->
                               fun (x1063 : Ojs.t) ->
                                 fun (x1065 : Ojs.t) ->
                                   x1060
                                     ~error:(or_null_of_js
                                               child_process_ExecFileException_of_js
                                               x1061)
                                     ~stdout:(or_string_of_js Buffer.t_of_js
                                                x1063)
                                     ~stderr:(or_string_of_js Buffer.t_of_js
                                                x1065))) x1059)|])
    module ExecFile =
      struct
        let (__promisify__ :
          file:string -> anonymous_interface_3 child_process_PromiseWithChild)
          =
          fun ~file:(x1067 : string) ->
            child_process_PromiseWithChild_of_js anonymous_interface_3_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.child_process "execFile")
                 "__promisify__" [|(Ojs.string_to_js x1067)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              anonymous_interface_3 child_process_PromiseWithChild)
          =
          fun ~file:(x1069 : string) ->
            fun ~args:(x1070 : string list or_null_or_undefined) ->
              child_process_PromiseWithChild_of_js
                anonymous_interface_3_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1069);(or_null_or_undefined_to_js
                                                 (fun (x1071 : string list)
                                                    ->
                                                    Ojs.list_to_js
                                                      Ojs.string_to_js x1071)
                                                 x1070)|])
        let (__promisify__ :
          file:string ->
            options:child_process_ExecFileOptionsWithBufferEncoding ->
              anonymous_interface_2 child_process_PromiseWithChild)
          =
          fun ~file:(x1074 : string) ->
            fun
              ~options:(x1075 :
                         child_process_ExecFileOptionsWithBufferEncoding)
              ->
              child_process_PromiseWithChild_of_js
                anonymous_interface_2_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1074);(child_process_ExecFileOptionsWithBufferEncoding_to_js
                                                 x1075)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:child_process_ExecFileOptionsWithBufferEncoding ->
                anonymous_interface_2 child_process_PromiseWithChild)
          =
          fun ~file:(x1077 : string) ->
            fun ~args:(x1078 : string list or_null_or_undefined) ->
              fun
                ~options:(x1081 :
                           child_process_ExecFileOptionsWithBufferEncoding)
                ->
                child_process_PromiseWithChild_of_js
                  anonymous_interface_2_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1077);(or_null_or_undefined_to_js
                                                   (fun (x1079 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1079) x1078);(
                       child_process_ExecFileOptionsWithBufferEncoding_to_js
                         x1081)|])
        let (__promisify__ :
          file:string ->
            options:child_process_ExecFileOptionsWithStringEncoding ->
              anonymous_interface_3 child_process_PromiseWithChild)
          =
          fun ~file:(x1083 : string) ->
            fun
              ~options:(x1084 :
                         child_process_ExecFileOptionsWithStringEncoding)
              ->
              child_process_PromiseWithChild_of_js
                anonymous_interface_3_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1083);(child_process_ExecFileOptionsWithStringEncoding_to_js
                                                 x1084)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:child_process_ExecFileOptionsWithStringEncoding ->
                anonymous_interface_3 child_process_PromiseWithChild)
          =
          fun ~file:(x1086 : string) ->
            fun ~args:(x1087 : string list or_null_or_undefined) ->
              fun
                ~options:(x1090 :
                           child_process_ExecFileOptionsWithStringEncoding)
                ->
                child_process_PromiseWithChild_of_js
                  anonymous_interface_3_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1086);(or_null_or_undefined_to_js
                                                   (fun (x1088 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1088) x1087);(
                       child_process_ExecFileOptionsWithStringEncoding_to_js
                         x1090)|])
        let (__promisify__ :
          file:string ->
            options:child_process_ExecFileOptionsWithOtherEncoding ->
              anonymous_interface_4 child_process_PromiseWithChild)
          =
          fun ~file:(x1092 : string) ->
            fun
              ~options:(x1093 :
                         child_process_ExecFileOptionsWithOtherEncoding)
              ->
              child_process_PromiseWithChild_of_js
                anonymous_interface_4_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1092);(child_process_ExecFileOptionsWithOtherEncoding_to_js
                                                 x1093)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:child_process_ExecFileOptionsWithOtherEncoding ->
                anonymous_interface_4 child_process_PromiseWithChild)
          =
          fun ~file:(x1095 : string) ->
            fun ~args:(x1096 : string list or_null_or_undefined) ->
              fun
                ~options:(x1099 :
                           child_process_ExecFileOptionsWithOtherEncoding)
                ->
                child_process_PromiseWithChild_of_js
                  anonymous_interface_4_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1095);(or_null_or_undefined_to_js
                                                   (fun (x1097 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1097) x1096);(
                       child_process_ExecFileOptionsWithOtherEncoding_to_js
                         x1099)|])
        let (__promisify__ :
          file:string ->
            options:child_process_ExecFileOptions ->
              anonymous_interface_3 child_process_PromiseWithChild)
          =
          fun ~file:(x1101 : string) ->
            fun ~options:(x1102 : child_process_ExecFileOptions) ->
              child_process_PromiseWithChild_of_js
                anonymous_interface_3_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1101);(child_process_ExecFileOptions_to_js
                                                 x1102)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:child_process_ExecFileOptions ->
                anonymous_interface_3 child_process_PromiseWithChild)
          =
          fun ~file:(x1104 : string) ->
            fun ~args:(x1105 : string list or_null_or_undefined) ->
              fun ~options:(x1108 : child_process_ExecFileOptions) ->
                child_process_PromiseWithChild_of_js
                  anonymous_interface_3_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1104);(or_null_or_undefined_to_js
                                                   (fun (x1106 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1106) x1105);(
                       child_process_ExecFileOptions_to_js x1108)|])
        let (__promisify__ :
          file:string ->
            options:(Node_fs.Fs.BaseEncodingOptions.t,
              child_process_ExecFileOptions) intersection2
              or_null_or_undefined ->
              anonymous_interface_4 child_process_PromiseWithChild)
          =
          fun ~file:(x1110 : string) ->
            fun
              ~options:(x1111 :
                         (Node_fs.Fs.BaseEncodingOptions.t,
                           child_process_ExecFileOptions) intersection2
                           or_null_or_undefined)
              ->
              child_process_PromiseWithChild_of_js
                anonymous_interface_4_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.child_process "execFile")
                   "__promisify__"
                   [|(Ojs.string_to_js x1110);(or_null_or_undefined_to_js
                                                 (fun
                                                    (x1112 :
                                                      (Node_fs.Fs.BaseEncodingOptions.t,
                                                        child_process_ExecFileOptions)
                                                        intersection2)
                                                    ->
                                                    intersection2_to_js
                                                      Node_fs.Fs.BaseEncodingOptions.t_to_js
                                                      child_process_ExecFileOptions_to_js
                                                      x1112) x1111)|])
        let (__promisify__ :
          file:string ->
            args:string list or_null_or_undefined ->
              options:(Node_fs.Fs.BaseEncodingOptions.t,
                child_process_ExecFileOptions) intersection2
                or_null_or_undefined ->
                anonymous_interface_4 child_process_PromiseWithChild)
          =
          fun ~file:(x1116 : string) ->
            fun ~args:(x1117 : string list or_null_or_undefined) ->
              fun
                ~options:(x1120 :
                           (Node_fs.Fs.BaseEncodingOptions.t,
                             child_process_ExecFileOptions) intersection2
                             or_null_or_undefined)
                ->
                child_process_PromiseWithChild_of_js
                  anonymous_interface_4_of_js
                  (Ojs.call
                     (Ojs.get_prop_ascii Import.child_process "execFile")
                     "__promisify__"
                     [|(Ojs.string_to_js x1116);(or_null_or_undefined_to_js
                                                   (fun (x1118 : string list)
                                                      ->
                                                      Ojs.list_to_js
                                                        Ojs.string_to_js
                                                        x1118) x1117);(
                       or_null_or_undefined_to_js
                         (fun
                            (x1121 :
                              (Node_fs.Fs.BaseEncodingOptions.t,
                                child_process_ExecFileOptions) intersection2)
                            ->
                            intersection2_to_js
                              Node_fs.Fs.BaseEncodingOptions.t_to_js
                              child_process_ExecFileOptions_to_js x1121)
                         x1120)|])
      end
    module ForkOptions =
      struct
        type t = child_process_ForkOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x1126 : Ojs.t) -> child_process_ForkOptions_of_js x1126
        and t_to_js : t -> Ojs.t =
          fun (x1125 : child_process_ForkOptions) ->
            child_process_ForkOptions_to_js x1125
        let (get_execPath : t -> string) =
          fun (x1127 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1127) "execPath")
        let (set_execPath : t -> string -> unit) =
          fun (x1128 : t) ->
            fun (x1129 : string) ->
              Ojs.set_prop_ascii (t_to_js x1128) "execPath"
                (Ojs.string_to_js x1129)
        let (get_execArgv : t -> string list) =
          fun (x1130 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x1130) "execArgv")
        let (set_execArgv : t -> string list -> unit) =
          fun (x1132 : t) ->
            fun (x1133 : string list) ->
              Ojs.set_prop_ascii (t_to_js x1132) "execArgv"
                (Ojs.list_to_js Ojs.string_to_js x1133)
        let (get_silent : t -> bool) =
          fun (x1135 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1135) "silent")
        let (set_silent : t -> bool -> unit) =
          fun (x1136 : t) ->
            fun (x1137 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1136) "silent"
                (Ojs.bool_to_js x1137)
        let (get_stdio : t -> child_process_StdioOptions) =
          fun (x1138 : t) ->
            child_process_StdioOptions_of_js
              (Ojs.get_prop_ascii (t_to_js x1138) "stdio")
        let (set_stdio : t -> child_process_StdioOptions -> unit) =
          fun (x1139 : t) ->
            fun (x1140 : child_process_StdioOptions) ->
              Ojs.set_prop_ascii (t_to_js x1139) "stdio"
                (child_process_StdioOptions_to_js x1140)
        let (get_detached : t -> bool) =
          fun (x1141 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1141) "detached")
        let (set_detached : t -> bool -> unit) =
          fun (x1142 : t) ->
            fun (x1143 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1142) "detached"
                (Ojs.bool_to_js x1143)
        let (get_windowsVerbatimArguments : t -> bool) =
          fun (x1144 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1144) "windowsVerbatimArguments")
        let (set_windowsVerbatimArguments : t -> bool -> unit) =
          fun (x1145 : t) ->
            fun (x1146 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1145) "windowsVerbatimArguments"
                (Ojs.bool_to_js x1146)
        let (cast : t -> child_process_ProcessEnvOptions) =
          fun (x1147 : t) ->
            child_process_ProcessEnvOptions_of_js (t_to_js x1147)
        let (cast' : t -> child_process_MessagingOptions) =
          fun (x1148 : t) ->
            child_process_MessagingOptions_of_js (t_to_js x1148)
      end
    let (fork :
      modulePath:string ->
        ?options:child_process_ForkOptions ->
          unit -> child_process_ChildProcess)
      =
      fun ~modulePath:(x1149 : string) ->
        fun ?options:(x1150 : child_process_ForkOptions option) ->
          fun () ->
            child_process_ChildProcess_of_js
              (let x1153 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1153 "fork") "apply"
                 [|x1153;((let x1151 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1151 "push"
                                [|(Ojs.string_to_js x1149)|]);
                           (match x1150 with
                            | Some x1152 ->
                                ignore
                                  (Ojs.call x1151 "push"
                                     [|(child_process_ForkOptions_to_js x1152)|])
                            | None -> ());
                           x1151))|])
    let (fork :
      modulePath:string ->
        ?args:string list ->
          ?options:child_process_ForkOptions ->
            unit -> child_process_ChildProcess)
      =
      fun ~modulePath:(x1154 : string) ->
        fun ?args:(x1155 : string list option) ->
          fun ?options:(x1156 : child_process_ForkOptions option) ->
            fun () ->
              child_process_ChildProcess_of_js
                (let x1161 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1161 "fork") "apply"
                   [|x1161;((let x1157 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1157 "push"
                                  [|(Ojs.string_to_js x1154)|]);
                             (match x1155 with
                              | Some x1159 ->
                                  ignore
                                    (Ojs.call x1157 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1159)|])
                              | None -> ());
                             (match x1156 with
                              | Some x1158 ->
                                  ignore
                                    (Ojs.call x1157 "push"
                                       [|(child_process_ForkOptions_to_js
                                            x1158)|])
                              | None -> ());
                             x1157))|])
    module SpawnSyncOptions =
      struct
        type t = child_process_SpawnSyncOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x1163 : Ojs.t) -> child_process_SpawnSyncOptions_of_js x1163
        and t_to_js : t -> Ojs.t =
          fun (x1162 : child_process_SpawnSyncOptions) ->
            child_process_SpawnSyncOptions_to_js x1162
        let (get_input : t -> ArrayBufferView.t or_string) =
          fun (x1164 : t) ->
            or_string_of_js ArrayBufferView.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1164) "input")
        let (set_input : t -> ArrayBufferView.t or_string -> unit) =
          fun (x1166 : t) ->
            fun (x1167 : ArrayBufferView.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1166) "input"
                (or_string_to_js ArrayBufferView.t_to_js x1167)
        let (get_killSignal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x1169 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1169) "killSignal")
        let (set_killSignal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x1171 : t) ->
            fun (x1172 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x1171) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x1172)
        let (get_maxBuffer : t -> float) =
          fun (x1174 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1174) "maxBuffer")
        let (set_maxBuffer : t -> float -> unit) =
          fun (x1175 : t) ->
            fun (x1176 : float) ->
              Ojs.set_prop_ascii (t_to_js x1175) "maxBuffer"
                (Ojs.float_to_js x1176)
        let (get_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null) =
          fun (x1177 : t) ->
            or_null_of_js
              (fun (x1178 : Ojs.t) ->
                 or_enum_of_js BufferEncoding.t_of_js
                   (fun (x1180 : Ojs.t) ->
                      let x1181 = x1180 in
                      match Ojs.string_of_js x1181 with
                      | "buffer" -> `buffer
                      | _ -> assert false) x1178)
              (Ojs.get_prop_ascii (t_to_js x1177) "encoding")
        let (set_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null -> unit) =
          fun (x1182 : t) ->
            fun (x1183 : (BufferEncoding.t, [ `buffer ]) or_enum or_null) ->
              Ojs.set_prop_ascii (t_to_js x1182) "encoding"
                (or_null_to_js
                   (fun (x1184 : (BufferEncoding.t, [ `buffer ]) or_enum) ->
                      or_enum_to_js BufferEncoding.t_to_js
                        (fun (x1186 : [ `buffer ]) ->
                           match x1186 with
                           | `buffer -> Ojs.string_to_js "buffer") x1184)
                   x1183)
        let (cast : t -> child_process_CommonSpawnOptions) =
          fun (x1187 : t) ->
            child_process_CommonSpawnOptions_of_js (t_to_js x1187)
      end
    module SpawnSyncOptionsWithStringEncoding =
      struct
        type t = child_process_SpawnSyncOptionsWithStringEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x1189 : Ojs.t) ->
            child_process_SpawnSyncOptionsWithStringEncoding_of_js x1189
        and t_to_js : t -> Ojs.t =
          fun (x1188 : child_process_SpawnSyncOptionsWithStringEncoding) ->
            child_process_SpawnSyncOptionsWithStringEncoding_to_js x1188
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1190 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1190) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1191 : t) ->
            fun (x1192 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1191) "encoding"
                (BufferEncoding.t_to_js x1192)
        let (cast : t -> child_process_SpawnSyncOptions) =
          fun (x1193 : t) ->
            child_process_SpawnSyncOptions_of_js (t_to_js x1193)
      end
    module SpawnSyncOptionsWithBufferEncoding =
      struct
        type t = child_process_SpawnSyncOptionsWithBufferEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x1195 : Ojs.t) ->
            child_process_SpawnSyncOptionsWithBufferEncoding_of_js x1195
        and t_to_js : t -> Ojs.t =
          fun (x1194 : child_process_SpawnSyncOptionsWithBufferEncoding) ->
            child_process_SpawnSyncOptionsWithBufferEncoding_to_js x1194
        let (get_encoding : t -> [ `buffer ] or_null) =
          fun (x1196 : t) ->
            or_null_of_js
              (fun (x1197 : Ojs.t) ->
                 let x1198 = x1197 in
                 match Ojs.string_of_js x1198 with
                 | "buffer" -> `buffer
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x1196) "encoding")
        let (set_encoding : t -> [ `buffer ] or_null -> unit) =
          fun (x1199 : t) ->
            fun (x1200 : [ `buffer ] or_null) ->
              Ojs.set_prop_ascii (t_to_js x1199) "encoding"
                (or_null_to_js
                   (fun (x1201 : [ `buffer ]) ->
                      match x1201 with | `buffer -> Ojs.string_to_js "buffer")
                   x1200)
        let (cast : t -> child_process_SpawnSyncOptions) =
          fun (x1202 : t) ->
            child_process_SpawnSyncOptions_of_js (t_to_js x1202)
      end
    module SpawnSyncReturns =
      struct
        type 'T t = 'T child_process_SpawnSyncReturns
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x1205 : Ojs.t) ->
              child_process_SpawnSyncReturns_of_js __T_of_js x1205
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x1203 : __T child_process_SpawnSyncReturns) ->
              child_process_SpawnSyncReturns_to_js __T_to_js x1203
        let (get_pid : 'T t -> float) =
          fun (x1207 : 'T t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1207) "pid")
        let (set_pid : 'T t -> float -> unit) =
          fun (x1209 : 'T t) ->
            fun (x1210 : float) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1209) "pid"
                (Ojs.float_to_js x1210)
        let (get_output : 'T t -> string list) =
          fun (x1212 : 'T t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1212) "output")
        let (set_output : 'T t -> string list -> unit) =
          fun (x1215 : 'T t) ->
            fun (x1216 : string list) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1215) "output"
                (Ojs.list_to_js Ojs.string_to_js x1216)
        let (get_stdout : 'T t -> 'T) =
          fun (x1219 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x1219) "stdout")
        let (set_stdout : 'T t -> 'T -> unit) =
          fun (x1221 : 'T t) ->
            fun (x1222 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1221) "stdout"
                (Obj.magic x1222)
        let (get_stderr : 'T t -> 'T) =
          fun (x1224 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x1224) "stderr")
        let (set_stderr : 'T t -> 'T -> unit) =
          fun (x1226 : 'T t) ->
            fun (x1227 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1226) "stderr"
                (Obj.magic x1227)
        let (get_status : 'T t -> float or_null) =
          fun (x1229 : 'T t) ->
            or_null_of_js Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1229) "status")
        let (set_status : 'T t -> float or_null -> unit) =
          fun (x1232 : 'T t) ->
            fun (x1233 : float or_null) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1232) "status"
                (or_null_to_js Ojs.float_to_js x1233)
        let (get_signal : 'T t -> Node_process.Process.Signals.t or_null) =
          fun (x1236 : 'T t) ->
            or_null_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1236) "signal")
        let (set_signal :
          'T t -> Node_process.Process.Signals.t or_null -> unit) =
          fun (x1239 : 'T t) ->
            fun (x1240 : Node_process.Process.Signals.t or_null) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1239) "signal"
                (or_null_to_js Node_process.Process.Signals.t_to_js x1240)
        let (get_error : 'T t -> Error.t) =
          fun (x1243 : 'T t) ->
            Error.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x1243) "error")
        let (set_error : 'T t -> Error.t -> unit) =
          fun (x1245 : 'T t) ->
            fun (x1246 : Error.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x1245) "error"
                (Error.t_to_js x1246)
      end
    let (spawn'Sync :
      command:string -> Buffer.t child_process_SpawnSyncReturns) =
      fun ~command:(x1248 : string) ->
        child_process_SpawnSyncReturns_of_js Buffer.t_of_js
          (Ojs.call Import.child_process "spawnSync"
             [|(Ojs.string_to_js x1248)|])
    let (spawn'Sync :
      command:string ->
        ?options:child_process_SpawnSyncOptionsWithStringEncoding ->
          unit -> string child_process_SpawnSyncReturns)
      =
      fun ~command:(x1250 : string) ->
        fun
          ?options:(x1251 :
                     child_process_SpawnSyncOptionsWithStringEncoding option)
          ->
          fun () ->
            child_process_SpawnSyncReturns_of_js Ojs.string_of_js
              (let x1254 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1254 "spawnSync") "apply"
                 [|x1254;((let x1252 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1252 "push"
                                [|(Ojs.string_to_js x1250)|]);
                           (match x1251 with
                            | Some x1253 ->
                                ignore
                                  (Ojs.call x1252 "push"
                                     [|(child_process_SpawnSyncOptionsWithStringEncoding_to_js
                                          x1253)|])
                            | None -> ());
                           x1252))|])
    let (spawn'Sync :
      command:string ->
        ?options:child_process_SpawnSyncOptionsWithBufferEncoding ->
          unit -> Buffer.t child_process_SpawnSyncReturns)
      =
      fun ~command:(x1256 : string) ->
        fun
          ?options:(x1257 :
                     child_process_SpawnSyncOptionsWithBufferEncoding option)
          ->
          fun () ->
            child_process_SpawnSyncReturns_of_js Buffer.t_of_js
              (let x1260 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1260 "spawnSync") "apply"
                 [|x1260;((let x1258 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1258 "push"
                                [|(Ojs.string_to_js x1256)|]);
                           (match x1257 with
                            | Some x1259 ->
                                ignore
                                  (Ojs.call x1258 "push"
                                     [|(child_process_SpawnSyncOptionsWithBufferEncoding_to_js
                                          x1259)|])
                            | None -> ());
                           x1258))|])
    let (spawn'Sync :
      command:string ->
        ?options:child_process_SpawnSyncOptions ->
          unit -> Buffer.t child_process_SpawnSyncReturns)
      =
      fun ~command:(x1262 : string) ->
        fun ?options:(x1263 : child_process_SpawnSyncOptions option) ->
          fun () ->
            child_process_SpawnSyncReturns_of_js Buffer.t_of_js
              (let x1266 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1266 "spawnSync") "apply"
                 [|x1266;((let x1264 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1264 "push"
                                [|(Ojs.string_to_js x1262)|]);
                           (match x1263 with
                            | Some x1265 ->
                                ignore
                                  (Ojs.call x1264 "push"
                                     [|(child_process_SpawnSyncOptions_to_js
                                          x1265)|])
                            | None -> ());
                           x1264))|])
    let (spawn'Sync :
      command:string ->
        ?args:string list ->
          ?options:child_process_SpawnSyncOptionsWithStringEncoding ->
            unit -> string child_process_SpawnSyncReturns)
      =
      fun ~command:(x1268 : string) ->
        fun ?args:(x1269 : string list option) ->
          fun
            ?options:(x1270 :
                       child_process_SpawnSyncOptionsWithStringEncoding
                         option)
            ->
            fun () ->
              child_process_SpawnSyncReturns_of_js Ojs.string_of_js
                (let x1275 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1275 "spawnSync") "apply"
                   [|x1275;((let x1271 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1271 "push"
                                  [|(Ojs.string_to_js x1268)|]);
                             (match x1269 with
                              | Some x1273 ->
                                  ignore
                                    (Ojs.call x1271 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1273)|])
                              | None -> ());
                             (match x1270 with
                              | Some x1272 ->
                                  ignore
                                    (Ojs.call x1271 "push"
                                       [|(child_process_SpawnSyncOptionsWithStringEncoding_to_js
                                            x1272)|])
                              | None -> ());
                             x1271))|])
    let (spawn'Sync :
      command:string ->
        ?args:string list ->
          ?options:child_process_SpawnSyncOptionsWithBufferEncoding ->
            unit -> Buffer.t child_process_SpawnSyncReturns)
      =
      fun ~command:(x1277 : string) ->
        fun ?args:(x1278 : string list option) ->
          fun
            ?options:(x1279 :
                       child_process_SpawnSyncOptionsWithBufferEncoding
                         option)
            ->
            fun () ->
              child_process_SpawnSyncReturns_of_js Buffer.t_of_js
                (let x1284 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1284 "spawnSync") "apply"
                   [|x1284;((let x1280 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1280 "push"
                                  [|(Ojs.string_to_js x1277)|]);
                             (match x1278 with
                              | Some x1282 ->
                                  ignore
                                    (Ojs.call x1280 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1282)|])
                              | None -> ());
                             (match x1279 with
                              | Some x1281 ->
                                  ignore
                                    (Ojs.call x1280 "push"
                                       [|(child_process_SpawnSyncOptionsWithBufferEncoding_to_js
                                            x1281)|])
                              | None -> ());
                             x1280))|])
    let (spawn'Sync :
      command:string ->
        ?args:string list ->
          ?options:child_process_SpawnSyncOptions ->
            unit -> Buffer.t child_process_SpawnSyncReturns)
      =
      fun ~command:(x1286 : string) ->
        fun ?args:(x1287 : string list option) ->
          fun ?options:(x1288 : child_process_SpawnSyncOptions option) ->
            fun () ->
              child_process_SpawnSyncReturns_of_js Buffer.t_of_js
                (let x1293 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1293 "spawnSync") "apply"
                   [|x1293;((let x1289 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1289 "push"
                                  [|(Ojs.string_to_js x1286)|]);
                             (match x1287 with
                              | Some x1291 ->
                                  ignore
                                    (Ojs.call x1289 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1291)|])
                              | None -> ());
                             (match x1288 with
                              | Some x1290 ->
                                  ignore
                                    (Ojs.call x1289 "push"
                                       [|(child_process_SpawnSyncOptions_to_js
                                            x1290)|])
                              | None -> ());
                             x1289))|])
    module ExecSyncOptions =
      struct
        type t = child_process_ExecSyncOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x1296 : Ojs.t) -> child_process_ExecSyncOptions_of_js x1296
        and t_to_js : t -> Ojs.t =
          fun (x1295 : child_process_ExecSyncOptions) ->
            child_process_ExecSyncOptions_to_js x1295
        let (get_input : t -> Uint8Array.t or_string) =
          fun (x1297 : t) ->
            or_string_of_js Uint8Array.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1297) "input")
        let (set_input : t -> Uint8Array.t or_string -> unit) =
          fun (x1299 : t) ->
            fun (x1300 : Uint8Array.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1299) "input"
                (or_string_to_js Uint8Array.t_to_js x1300)
        let (get_stdio : t -> child_process_StdioOptions) =
          fun (x1302 : t) ->
            child_process_StdioOptions_of_js
              (Ojs.get_prop_ascii (t_to_js x1302) "stdio")
        let (set_stdio : t -> child_process_StdioOptions -> unit) =
          fun (x1303 : t) ->
            fun (x1304 : child_process_StdioOptions) ->
              Ojs.set_prop_ascii (t_to_js x1303) "stdio"
                (child_process_StdioOptions_to_js x1304)
        let (get_shell : t -> string) =
          fun (x1305 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x1305) "shell")
        let (set_shell : t -> string -> unit) =
          fun (x1306 : t) ->
            fun (x1307 : string) ->
              Ojs.set_prop_ascii (t_to_js x1306) "shell"
                (Ojs.string_to_js x1307)
        let (get_killSignal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x1308 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1308) "killSignal")
        let (set_killSignal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x1310 : t) ->
            fun (x1311 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x1310) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x1311)
        let (get_maxBuffer : t -> float) =
          fun (x1313 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1313) "maxBuffer")
        let (set_maxBuffer : t -> float -> unit) =
          fun (x1314 : t) ->
            fun (x1315 : float) ->
              Ojs.set_prop_ascii (t_to_js x1314) "maxBuffer"
                (Ojs.float_to_js x1315)
        let (get_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null) =
          fun (x1316 : t) ->
            or_null_of_js
              (fun (x1317 : Ojs.t) ->
                 or_enum_of_js BufferEncoding.t_of_js
                   (fun (x1319 : Ojs.t) ->
                      let x1320 = x1319 in
                      match Ojs.string_of_js x1320 with
                      | "buffer" -> `buffer
                      | _ -> assert false) x1317)
              (Ojs.get_prop_ascii (t_to_js x1316) "encoding")
        let (set_encoding :
          t -> (BufferEncoding.t, [ `buffer ]) or_enum or_null -> unit) =
          fun (x1321 : t) ->
            fun (x1322 : (BufferEncoding.t, [ `buffer ]) or_enum or_null) ->
              Ojs.set_prop_ascii (t_to_js x1321) "encoding"
                (or_null_to_js
                   (fun (x1323 : (BufferEncoding.t, [ `buffer ]) or_enum) ->
                      or_enum_to_js BufferEncoding.t_to_js
                        (fun (x1325 : [ `buffer ]) ->
                           match x1325 with
                           | `buffer -> Ojs.string_to_js "buffer") x1323)
                   x1322)
        let (cast : t -> child_process_CommonOptions) =
          fun (x1326 : t) ->
            child_process_CommonOptions_of_js (t_to_js x1326)
      end
    module ExecSyncOptionsWithStringEncoding =
      struct
        type t = child_process_ExecSyncOptionsWithStringEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x1328 : Ojs.t) ->
            child_process_ExecSyncOptionsWithStringEncoding_of_js x1328
        and t_to_js : t -> Ojs.t =
          fun (x1327 : child_process_ExecSyncOptionsWithStringEncoding) ->
            child_process_ExecSyncOptionsWithStringEncoding_to_js x1327
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1329 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1329) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1330 : t) ->
            fun (x1331 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1330) "encoding"
                (BufferEncoding.t_to_js x1331)
        let (cast : t -> child_process_ExecSyncOptions) =
          fun (x1332 : t) ->
            child_process_ExecSyncOptions_of_js (t_to_js x1332)
      end
    module ExecSyncOptionsWithBufferEncoding =
      struct
        type t = child_process_ExecSyncOptionsWithBufferEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x1334 : Ojs.t) ->
            child_process_ExecSyncOptionsWithBufferEncoding_of_js x1334
        and t_to_js : t -> Ojs.t =
          fun (x1333 : child_process_ExecSyncOptionsWithBufferEncoding) ->
            child_process_ExecSyncOptionsWithBufferEncoding_to_js x1333
        let (get_encoding : t -> [ `buffer ] or_null) =
          fun (x1335 : t) ->
            or_null_of_js
              (fun (x1336 : Ojs.t) ->
                 let x1337 = x1336 in
                 match Ojs.string_of_js x1337 with
                 | "buffer" -> `buffer
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x1335) "encoding")
        let (set_encoding : t -> [ `buffer ] or_null -> unit) =
          fun (x1338 : t) ->
            fun (x1339 : [ `buffer ] or_null) ->
              Ojs.set_prop_ascii (t_to_js x1338) "encoding"
                (or_null_to_js
                   (fun (x1340 : [ `buffer ]) ->
                      match x1340 with | `buffer -> Ojs.string_to_js "buffer")
                   x1339)
        let (cast : t -> child_process_ExecSyncOptions) =
          fun (x1341 : t) ->
            child_process_ExecSyncOptions_of_js (t_to_js x1341)
      end
    let (execSync : command:string -> Buffer.t) =
      fun ~command:(x1342 : string) ->
        Buffer.t_of_js
          (Ojs.call Import.child_process "execSync"
             [|(Ojs.string_to_js x1342)|])
    let (execSync :
      command:string ->
        ?options:child_process_ExecSyncOptionsWithStringEncoding ->
          unit -> string)
      =
      fun ~command:(x1343 : string) ->
        fun
          ?options:(x1344 :
                     child_process_ExecSyncOptionsWithStringEncoding option)
          ->
          fun () ->
            Ojs.string_of_js
              (let x1347 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1347 "execSync") "apply"
                 [|x1347;((let x1345 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1345 "push"
                                [|(Ojs.string_to_js x1343)|]);
                           (match x1344 with
                            | Some x1346 ->
                                ignore
                                  (Ojs.call x1345 "push"
                                     [|(child_process_ExecSyncOptionsWithStringEncoding_to_js
                                          x1346)|])
                            | None -> ());
                           x1345))|])
    let (execSync :
      command:string ->
        ?options:child_process_ExecSyncOptionsWithBufferEncoding ->
          unit -> Buffer.t)
      =
      fun ~command:(x1348 : string) ->
        fun
          ?options:(x1349 :
                     child_process_ExecSyncOptionsWithBufferEncoding option)
          ->
          fun () ->
            Buffer.t_of_js
              (let x1352 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1352 "execSync") "apply"
                 [|x1352;((let x1350 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1350 "push"
                                [|(Ojs.string_to_js x1348)|]);
                           (match x1349 with
                            | Some x1351 ->
                                ignore
                                  (Ojs.call x1350 "push"
                                     [|(child_process_ExecSyncOptionsWithBufferEncoding_to_js
                                          x1351)|])
                            | None -> ());
                           x1350))|])
    let (execSync :
      command:string ->
        ?options:child_process_ExecSyncOptions -> unit -> Buffer.t)
      =
      fun ~command:(x1353 : string) ->
        fun ?options:(x1354 : child_process_ExecSyncOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x1357 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1357 "execSync") "apply"
                 [|x1357;((let x1355 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1355 "push"
                                [|(Ojs.string_to_js x1353)|]);
                           (match x1354 with
                            | Some x1356 ->
                                ignore
                                  (Ojs.call x1355 "push"
                                     [|(child_process_ExecSyncOptions_to_js
                                          x1356)|])
                            | None -> ());
                           x1355))|])
    module ExecFileSyncOptions =
      struct
        type t = child_process_ExecFileSyncOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x1359 : Ojs.t) ->
            child_process_ExecFileSyncOptions_of_js x1359
        and t_to_js : t -> Ojs.t =
          fun (x1358 : child_process_ExecFileSyncOptions) ->
            child_process_ExecFileSyncOptions_to_js x1358
        let (get_input : t -> ArrayBufferView.t or_string) =
          fun (x1360 : t) ->
            or_string_of_js ArrayBufferView.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1360) "input")
        let (set_input : t -> ArrayBufferView.t or_string -> unit) =
          fun (x1362 : t) ->
            fun (x1363 : ArrayBufferView.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x1362) "input"
                (or_string_to_js ArrayBufferView.t_to_js x1363)
        let (get_stdio : t -> child_process_StdioOptions) =
          fun (x1365 : t) ->
            child_process_StdioOptions_of_js
              (Ojs.get_prop_ascii (t_to_js x1365) "stdio")
        let (set_stdio : t -> child_process_StdioOptions -> unit) =
          fun (x1366 : t) ->
            fun (x1367 : child_process_StdioOptions) ->
              Ojs.set_prop_ascii (t_to_js x1366) "stdio"
                (child_process_StdioOptions_to_js x1367)
        let (get_killSignal : t -> Node_process.Process.Signals.t or_number)
          =
          fun (x1368 : t) ->
            or_number_of_js Node_process.Process.Signals.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1368) "killSignal")
        let (set_killSignal :
          t -> Node_process.Process.Signals.t or_number -> unit) =
          fun (x1370 : t) ->
            fun (x1371 : Node_process.Process.Signals.t or_number) ->
              Ojs.set_prop_ascii (t_to_js x1370) "killSignal"
                (or_number_to_js Node_process.Process.Signals.t_to_js x1371)
        let (get_maxBuffer : t -> float) =
          fun (x1373 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x1373) "maxBuffer")
        let (set_maxBuffer : t -> float -> unit) =
          fun (x1374 : t) ->
            fun (x1375 : float) ->
              Ojs.set_prop_ascii (t_to_js x1374) "maxBuffer"
                (Ojs.float_to_js x1375)
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1376 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1376) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1377 : t) ->
            fun (x1378 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1377) "encoding"
                (BufferEncoding.t_to_js x1378)
        let (get_shell : t -> bool or_string) =
          fun (x1379 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x1379) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x1381 : t) ->
            fun (x1382 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x1381) "shell"
                (or_string_to_js Ojs.bool_to_js x1382)
        let (cast : t -> child_process_CommonOptions) =
          fun (x1384 : t) ->
            child_process_CommonOptions_of_js (t_to_js x1384)
      end
    module ExecFileSyncOptionsWithStringEncoding =
      struct
        type t = child_process_ExecFileSyncOptionsWithStringEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x1386 : Ojs.t) ->
            child_process_ExecFileSyncOptionsWithStringEncoding_of_js x1386
        and t_to_js : t -> Ojs.t =
          fun (x1385 : child_process_ExecFileSyncOptionsWithStringEncoding)
            ->
            child_process_ExecFileSyncOptionsWithStringEncoding_to_js x1385
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1387 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1387) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1388 : t) ->
            fun (x1389 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1388) "encoding"
                (BufferEncoding.t_to_js x1389)
        let (cast : t -> child_process_ExecFileSyncOptions) =
          fun (x1390 : t) ->
            child_process_ExecFileSyncOptions_of_js (t_to_js x1390)
      end
    module ExecFileSyncOptionsWithBufferEncoding =
      struct
        type t = child_process_ExecFileSyncOptionsWithBufferEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x1392 : Ojs.t) ->
            child_process_ExecFileSyncOptionsWithBufferEncoding_of_js x1392
        and t_to_js : t -> Ojs.t =
          fun (x1391 : child_process_ExecFileSyncOptionsWithBufferEncoding)
            ->
            child_process_ExecFileSyncOptionsWithBufferEncoding_to_js x1391
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x1393 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1393) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x1394 : t) ->
            fun (x1395 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x1394) "encoding"
                (BufferEncoding.t_to_js x1395)
        let (cast : t -> child_process_ExecFileSyncOptions) =
          fun (x1396 : t) ->
            child_process_ExecFileSyncOptions_of_js (t_to_js x1396)
      end
    let (execFileSync : command:string -> Buffer.t) =
      fun ~command:(x1397 : string) ->
        Buffer.t_of_js
          (Ojs.call Import.child_process "execFileSync"
             [|(Ojs.string_to_js x1397)|])
    let (execFileSync :
      command:string ->
        ?options:child_process_ExecFileSyncOptionsWithStringEncoding ->
          unit -> string)
      =
      fun ~command:(x1398 : string) ->
        fun
          ?options:(x1399 :
                     child_process_ExecFileSyncOptionsWithStringEncoding
                       option)
          ->
          fun () ->
            Ojs.string_of_js
              (let x1402 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1402 "execFileSync") "apply"
                 [|x1402;((let x1400 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1400 "push"
                                [|(Ojs.string_to_js x1398)|]);
                           (match x1399 with
                            | Some x1401 ->
                                ignore
                                  (Ojs.call x1400 "push"
                                     [|(child_process_ExecFileSyncOptionsWithStringEncoding_to_js
                                          x1401)|])
                            | None -> ());
                           x1400))|])
    let (execFileSync :
      command:string ->
        ?options:child_process_ExecFileSyncOptionsWithBufferEncoding ->
          unit -> Buffer.t)
      =
      fun ~command:(x1403 : string) ->
        fun
          ?options:(x1404 :
                     child_process_ExecFileSyncOptionsWithBufferEncoding
                       option)
          ->
          fun () ->
            Buffer.t_of_js
              (let x1407 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1407 "execFileSync") "apply"
                 [|x1407;((let x1405 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1405 "push"
                                [|(Ojs.string_to_js x1403)|]);
                           (match x1404 with
                            | Some x1406 ->
                                ignore
                                  (Ojs.call x1405 "push"
                                     [|(child_process_ExecFileSyncOptionsWithBufferEncoding_to_js
                                          x1406)|])
                            | None -> ());
                           x1405))|])
    let (execFileSync :
      command:string ->
        ?options:child_process_ExecFileSyncOptions -> unit -> Buffer.t)
      =
      fun ~command:(x1408 : string) ->
        fun ?options:(x1409 : child_process_ExecFileSyncOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x1412 = Import.child_process in
               Ojs.call (Ojs.get_prop_ascii x1412 "execFileSync") "apply"
                 [|x1412;((let x1410 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1410 "push"
                                [|(Ojs.string_to_js x1408)|]);
                           (match x1409 with
                            | Some x1411 ->
                                ignore
                                  (Ojs.call x1410 "push"
                                     [|(child_process_ExecFileSyncOptions_to_js
                                          x1411)|])
                            | None -> ());
                           x1410))|])
    let (execFileSync :
      command:string ->
        ?args:string list ->
          ?options:child_process_ExecFileSyncOptionsWithStringEncoding ->
            unit -> string)
      =
      fun ~command:(x1413 : string) ->
        fun ?args:(x1414 : string list option) ->
          fun
            ?options:(x1415 :
                       child_process_ExecFileSyncOptionsWithStringEncoding
                         option)
            ->
            fun () ->
              Ojs.string_of_js
                (let x1420 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1420 "execFileSync") "apply"
                   [|x1420;((let x1416 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1416 "push"
                                  [|(Ojs.string_to_js x1413)|]);
                             (match x1414 with
                              | Some x1418 ->
                                  ignore
                                    (Ojs.call x1416 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1418)|])
                              | None -> ());
                             (match x1415 with
                              | Some x1417 ->
                                  ignore
                                    (Ojs.call x1416 "push"
                                       [|(child_process_ExecFileSyncOptionsWithStringEncoding_to_js
                                            x1417)|])
                              | None -> ());
                             x1416))|])
    let (execFileSync :
      command:string ->
        ?args:string list ->
          ?options:child_process_ExecFileSyncOptionsWithBufferEncoding ->
            unit -> Buffer.t)
      =
      fun ~command:(x1421 : string) ->
        fun ?args:(x1422 : string list option) ->
          fun
            ?options:(x1423 :
                       child_process_ExecFileSyncOptionsWithBufferEncoding
                         option)
            ->
            fun () ->
              Buffer.t_of_js
                (let x1428 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1428 "execFileSync") "apply"
                   [|x1428;((let x1424 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1424 "push"
                                  [|(Ojs.string_to_js x1421)|]);
                             (match x1422 with
                              | Some x1426 ->
                                  ignore
                                    (Ojs.call x1424 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1426)|])
                              | None -> ());
                             (match x1423 with
                              | Some x1425 ->
                                  ignore
                                    (Ojs.call x1424 "push"
                                       [|(child_process_ExecFileSyncOptionsWithBufferEncoding_to_js
                                            x1425)|])
                              | None -> ());
                             x1424))|])
    let (execFileSync :
      command:string ->
        ?args:string list ->
          ?options:child_process_ExecFileSyncOptions -> unit -> Buffer.t)
      =
      fun ~command:(x1429 : string) ->
        fun ?args:(x1430 : string list option) ->
          fun ?options:(x1431 : child_process_ExecFileSyncOptions option) ->
            fun () ->
              Buffer.t_of_js
                (let x1436 = Import.child_process in
                 Ojs.call (Ojs.get_prop_ascii x1436 "execFileSync") "apply"
                   [|x1436;((let x1432 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1432 "push"
                                  [|(Ojs.string_to_js x1429)|]);
                             (match x1430 with
                              | Some x1434 ->
                                  ignore
                                    (Ojs.call x1432 "push"
                                       [|(Ojs.list_to_js Ojs.string_to_js
                                            x1434)|])
                              | None -> ());
                             (match x1431 with
                              | Some x1433 ->
                                  ignore
                                    (Ojs.call x1432 "push"
                                       [|(child_process_ExecFileSyncOptions_to_js
                                            x1433)|])
                              | None -> ());
                             x1432))|])
  end
