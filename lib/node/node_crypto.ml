[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_plaintext_length : t -> int) =
      fun (x3 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3) "plaintextLength")
    let (set_plaintext_length : t -> int -> unit) =
      fun (x4 : t) ->
        fun (x5 : int) ->
          Ojs.set_prop_ascii (t_to_js x4) "plaintextLength"
            (Ojs.int_to_js x5)
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7 : Ojs.t) -> x7
    and t_to_js : t -> Ojs.t = fun (x6 : Ojs.t) -> x6
    let (get_private_key : t -> KeyObject.t) =
      fun (x8 : t) ->
        KeyObject.t_of_js (Ojs.get_prop_ascii (t_to_js x8) "privateKey")
    let (set_private_key : t -> KeyObject.t -> unit) =
      fun (x9 : t) ->
        fun (x10 : KeyObject.t) ->
          Ojs.set_prop_ascii (t_to_js x9) "privateKey"
            (KeyObject.t_to_js x10)
    let (get_public_key : t -> KeyObject.t) =
      fun (x11 : t) ->
        KeyObject.t_of_js (Ojs.get_prop_ascii (t_to_js x11) "publicKey")
    let (set_public_key : t -> KeyObject.t -> unit) =
      fun (x12 : t) ->
        fun (x13 : KeyObject.t) ->
          Ojs.set_prop_ascii (t_to_js x12) "publicKey"
            (KeyObject.t_to_js x13)
  end
module AnonymousInterface2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15 : Ojs.t) -> x15
    and t_to_js : t -> Ojs.t = fun (x14 : Ojs.t) -> x14
    let (get_public_key : t -> Buffer.t) =
      fun (x16 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x16) "publicKey")
    let (set_public_key : t -> Buffer.t -> unit) =
      fun (x17 : t) ->
        fun (x18 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x17) "publicKey" (Buffer.t_to_js x18)
    let (get_private_key : t -> Buffer.t) =
      fun (x19 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x19) "privateKey")
    let (set_private_key : t -> Buffer.t -> unit) =
      fun (x20 : t) ->
        fun (x21 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x20) "privateKey" (Buffer.t_to_js x21)
  end
module AnonymousInterface3 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x23 : Ojs.t) -> x23
    and t_to_js : t -> Ojs.t = fun (x22 : Ojs.t) -> x22
    let (get_public_key : t -> Buffer.t) =
      fun (x24 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x24) "publicKey")
    let (set_public_key : t -> Buffer.t -> unit) =
      fun (x25 : t) ->
        fun (x26 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x25) "publicKey" (Buffer.t_to_js x26)
    let (get_private_key : t -> string) =
      fun (x27 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x27) "privateKey")
    let (set_private_key : t -> string -> unit) =
      fun (x28 : t) ->
        fun (x29 : string) ->
          Ojs.set_prop_ascii (t_to_js x28) "privateKey"
            (Ojs.string_to_js x29)
  end
module AnonymousInterface4 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x31 : Ojs.t) -> x31
    and t_to_js : t -> Ojs.t = fun (x30 : Ojs.t) -> x30
    let (get_public_key : t -> string) =
      fun (x32 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x32) "publicKey")
    let (set_public_key : t -> string -> unit) =
      fun (x33 : t) ->
        fun (x34 : string) ->
          Ojs.set_prop_ascii (t_to_js x33) "publicKey" (Ojs.string_to_js x34)
    let (get_private_key : t -> Buffer.t) =
      fun (x35 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x35) "privateKey")
    let (set_private_key : t -> Buffer.t -> unit) =
      fun (x36 : t) ->
        fun (x37 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x36) "privateKey" (Buffer.t_to_js x37)
  end
module AnonymousInterface5 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x39 : Ojs.t) -> x39
    and t_to_js : t -> Ojs.t = fun (x38 : Ojs.t) -> x38
    let (get_public_key : t -> string) =
      fun (x40 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x40) "publicKey")
    let (set_public_key : t -> string -> unit) =
      fun (x41 : t) ->
        fun (x42 : string) ->
          Ojs.set_prop_ascii (t_to_js x41) "publicKey" (Ojs.string_to_js x42)
    let (get_private_key : t -> string) =
      fun (x43 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x43) "privateKey")
    let (set_private_key : t -> string -> unit) =
      fun (x44 : t) ->
        fun (x45 : string) ->
          Ojs.set_prop_ascii (t_to_js x44) "privateKey"
            (Ojs.string_to_js x45)
  end
module AnonymousInterface6 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x47 : Ojs.t) -> x47
    and t_to_js : t -> Ojs.t = fun (x46 : Ojs.t) -> x46
    let (get_type : t -> [ `pkcs8 ]) =
      fun (x48 : t) ->
        let x49 = Ojs.get_prop_ascii (t_to_js x48) "type" in
        match Ojs.string_of_js x49 with
        | "pkcs8" -> `pkcs8
        | _ -> assert false
    let (set_type : t -> [ `pkcs8 ] -> unit) =
      fun (x50 : t) ->
        fun (x51 : [ `pkcs8 ]) ->
          Ojs.set_prop_ascii (t_to_js x50) "type"
            (match x51 with | `pkcs8 -> Ojs.string_to_js "pkcs8")
  end
module AnonymousInterface7 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x53 : Ojs.t) -> x53
    and t_to_js : t -> Ojs.t = fun (x52 : Ojs.t) -> x52
    let (get_type : t -> [ `spki ]) =
      fun (x54 : t) ->
        let x55 = Ojs.get_prop_ascii (t_to_js x54) "type" in
        match Ojs.string_of_js x55 with | "spki" -> `spki | _ -> assert false
    let (set_type : t -> [ `spki ] -> unit) =
      fun (x56 : t) ->
        fun (x57 : [ `spki ]) ->
          Ojs.set_prop_ascii (t_to_js x56) "type"
            (match x57 with | `spki -> Ojs.string_to_js "spki")
    let (get_format : t -> 'PubF) =
      fun (x58 : t) -> Obj.magic (Ojs.get_prop_ascii (t_to_js x58) "format")
    let (set_format : t -> 'PubF -> unit) =
      fun (x59 : t) ->
        fun (x60 : 'PubF) ->
          Ojs.set_prop_ascii (t_to_js x59) "format" (Obj.magic x60)
  end
module AnonymousInterface8 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x62 : Ojs.t) -> x62
    and t_to_js : t -> Ojs.t = fun (x61 : Ojs.t) -> x61
    let (get_type : t -> [ `pkcs1  | `pkcs8 ]) =
      fun (x63 : t) ->
        let x64 = Ojs.get_prop_ascii (t_to_js x63) "type" in
        match Ojs.string_of_js x64 with
        | "pkcs1" -> `pkcs1
        | "pkcs8" -> `pkcs8
        | _ -> assert false
    let (set_type : t -> [ `pkcs1  | `pkcs8 ] -> unit) =
      fun (x65 : t) ->
        fun (x66 : [ `pkcs1  | `pkcs8 ]) ->
          Ojs.set_prop_ascii (t_to_js x65) "type"
            (match x66 with
             | `pkcs1 -> Ojs.string_to_js "pkcs1"
             | `pkcs8 -> Ojs.string_to_js "pkcs8")
  end
module AnonymousInterface9 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x68 : Ojs.t) -> x68
    and t_to_js : t -> Ojs.t = fun (x67 : Ojs.t) -> x67
    let (get_type : t -> [ `pkcs1  | `spki ]) =
      fun (x69 : t) ->
        let x70 = Ojs.get_prop_ascii (t_to_js x69) "type" in
        match Ojs.string_of_js x70 with
        | "pkcs1" -> `pkcs1
        | "spki" -> `spki
        | _ -> assert false
    let (set_type : t -> [ `pkcs1  | `spki ] -> unit) =
      fun (x71 : t) ->
        fun (x72 : [ `pkcs1  | `spki ]) ->
          Ojs.set_prop_ascii (t_to_js x71) "type"
            (match x72 with
             | `pkcs1 -> Ojs.string_to_js "pkcs1"
             | `spki -> Ojs.string_to_js "spki")
    let (get_format : t -> 'PubF) =
      fun (x73 : t) -> Obj.magic (Ojs.get_prop_ascii (t_to_js x73) "format")
    let (set_format : t -> 'PubF -> unit) =
      fun (x74 : t) ->
        fun (x75 : 'PubF) ->
          Ojs.set_prop_ascii (t_to_js x74) "format" (Obj.magic x75)
  end
module AnonymousInterface10 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x77 : Ojs.t) -> x77
    and t_to_js : t -> Ojs.t = fun (x76 : Ojs.t) -> x76
    let (get_type : t -> [ `pkcs8  | `sec1 ]) =
      fun (x78 : t) ->
        let x79 = Ojs.get_prop_ascii (t_to_js x78) "type" in
        match Ojs.string_of_js x79 with
        | "pkcs8" -> `pkcs8
        | "sec1" -> `sec1
        | _ -> assert false
    let (set_type : t -> [ `pkcs8  | `sec1 ] -> unit) =
      fun (x80 : t) ->
        fun (x81 : [ `pkcs8  | `sec1 ]) ->
          Ojs.set_prop_ascii (t_to_js x80) "type"
            (match x81 with
             | `pkcs8 -> Ojs.string_to_js "pkcs8"
             | `sec1 -> Ojs.string_to_js "sec1")
  end
module AnonymousInterface11 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x83 : Ojs.t) -> x83
    and t_to_js : t -> Ojs.t = fun (x82 : Ojs.t) -> x82
    let (create : t -> Certificate.t) =
      fun (x84 : t) -> Certificate.t_of_js (Ojs.new_obj (t_to_js x84) [||])
    let (apply : t -> Certificate.t) =
      fun (x85 : t) -> Certificate.t_of_js (Ojs.apply (t_to_js x85) [||])
  end
module Crypto =
  struct
    open Node_stream
    module Certificate =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x87 : Ojs.t) -> x87
        and t_to_js : t -> Ojs.t = fun (x86 : Ojs.t) -> x86
        let (export_challenge : t -> spkac:BinaryLike.t -> Buffer.t) =
          fun (x89 : t) ->
            fun ~spkac:(x88 : BinaryLike.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x89) "exportChallenge"
                   [|(BinaryLike.t_to_js x88)|])
        let (export_public_key :
          t -> spkac:BinaryLike.t -> ?encoding:string -> unit -> Buffer.t) =
          fun (x94 : t) ->
            fun ~spkac:(x90 : BinaryLike.t) ->
              fun ?encoding:(x91 : string option) ->
                fun () ->
                  Buffer.t_of_js
                    (let x95 = t_to_js x94 in
                     Ojs.call (Ojs.get_prop_ascii x95 "exportPublicKey")
                       "apply"
                       [|x95;((let x92 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x92 "push"
                                    [|(BinaryLike.t_to_js x90)|]);
                               (match x91 with
                                | Some x93 ->
                                    ignore
                                      (Ojs.call x92 "push"
                                         [|(Ojs.string_to_js x93)|])
                                | None -> ());
                               x92))|])
        let (verify_spkac : t -> spkac:ArrayBufferView.t -> bool) =
          fun (x97 : t) ->
            fun ~spkac:(x96 : ArrayBufferView.t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x97) "verifySpkac"
                   [|(ArrayBufferView.t_to_js x96)|])
      end
    let (certificate : (Certificate.t, AnonymousInterface11.t) intersection2)
      =
      intersection2_of_js Certificate.t_of_js AnonymousInterface11.t_of_js
        (Ojs.get_prop_ascii Import.crypto "Certificate")
    module Constants =
      struct
        let (o_penssl_version_number : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "OPENSSL_VERSION_NUMBER")
        let (ssl_op_all : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants") "SSL_OP_ALL")
        let (ssl_op_allow_unsafe_legacy_renegotiation : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION")
        let (ssl_op_cipher_server_preference : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_CIPHER_SERVER_PREFERENCE")
        let (ssl_op_cisco_anyconnect : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_CISCO_ANYCONNECT")
        let (ssl_op_cookie_exchange : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_COOKIE_EXCHANGE")
        let (ssl_op_cryptopro_tlsext_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_CRYPTOPRO_TLSEXT_BUG")
        let (ssl_op_dont_insert_empty_fragments : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS")
        let (ssl_op_ephemeral_rsa : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_EPHEMERAL_RSA")
        let (ssl_op_legacy_server_connect : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_LEGACY_SERVER_CONNECT")
        let (ssl_op_microsoft_big_sslv3_BUFFER : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER")
        let (ssl_op_microsoft_sess_id_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_MICROSOFT_SESS_ID_BUG")
        let (ssl_op_msie_sslv2_RSA_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_MSIE_SSLV2_RSA_PADDING")
        let (ssl_op_netscape_ca_dn_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_CA_DN_BUG")
        let (ssl_op_netscape_challenge_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_CHALLENGE_BUG")
        let (ssl_op_netscape_demo_cipher_change_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG")
        let (ssl_op_netscape_reuse_cipher_change_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG")
        let (ssl_op_no_compression : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_COMPRESSION")
        let (ssl_op_no_query_mtu : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_QUERY_MTU")
        let (ssl_op_no_session_resumption_on_renegotiation : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION")
        let (ssl_op_no_ss_lv2 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_SSLv2")
        let (ssl_op_no_ss_lv3 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_SSLv3")
        let (ssl_op_no_ticket : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TICKET")
        let (ssl_op_no_tl_sv1 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TLSv1")
        let (ssl_op_no_tl_sv1_1 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TLSv1_1")
        let (ssl_op_no_tl_sv1_2 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TLSv1_2")
        let (ssl_op_pkcs1_CHECK_1 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_PKCS1_CHECK_1")
        let (ssl_op_pkcs1_CHECK_2 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_PKCS1_CHECK_2")
        let (ssl_op_single_dh_use : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SINGLE_DH_USE")
        let (ssl_op_single_ecdh_use : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SINGLE_ECDH_USE")
        let (ssl_op_ssleay080_CLIENT_DH_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SSLEAY_080_CLIENT_DH_BUG")
        let (ssl_op_sslref2_REUSE_CERT_TYPE_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG")
        let (ssl_op_tls_block_padding_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_TLS_BLOCK_PADDING_BUG")
        let (ssl_op_tls_d5_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_TLS_D5_BUG")
        let (ssl_op_tls_rollback_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_TLS_ROLLBACK_BUG")
        let (engine_method_rsa : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_RSA")
        let (engine_method_dsa : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_DSA")
        let (engine_method_dh : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_DH")
        let (engine_method_rand : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_RAND")
        let (engine_method_ec : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_EC")
        let (engine_method_ciphers : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_CIPHERS")
        let (engine_method_digests : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_DIGESTS")
        let (engine_method_pkey_meths : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_PKEY_METHS")
        let (engine_method_pkey_asn1_METHS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_PKEY_ASN1_METHS")
        let (engine_method_all : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_ALL")
        let (engine_method_none : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_NONE")
        let (dh_check_p_not_safe_prime : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_CHECK_P_NOT_SAFE_PRIME")
        let (dh_check_p_not_prime : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_CHECK_P_NOT_PRIME")
        let (dh_unable_to_check_generator : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_UNABLE_TO_CHECK_GENERATOR")
        let (dh_not_suitable_generator : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_NOT_SUITABLE_GENERATOR")
        let (alpn_enabled : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants") "ALPN_ENABLED")
        let (rsa_pkcs1_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PKCS1_PADDING")
        let (rsa_sslv23_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_SSLV23_PADDING")
        let (rsa_no_padding : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_NO_PADDING")
        let (rsa_pkcs1_OAEP_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PKCS1_OAEP_PADDING")
        let (rsa_x931_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_X931_PADDING")
        let (rsa_pkcs1_PSS_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PKCS1_PSS_PADDING")
        let (rsa_pss_saltlen_digest : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PSS_SALTLEN_DIGEST")
        let (rsa_pss_saltlen_max_sign : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PSS_SALTLEN_MAX_SIGN")
        let (rsa_pss_saltlen_auto : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PSS_SALTLEN_AUTO")
        let (point_conversion_compressed : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "POINT_CONVERSION_COMPRESSED")
        let (point_conversion_uncompressed : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "POINT_CONVERSION_UNCOMPRESSED")
        let (point_conversion_hybrid : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "POINT_CONVERSION_HYBRID")
        let (default_core_cipher_list : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "defaultCoreCipherList")
        let (default_cipher_list : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "defaultCipherList")
      end
    module HashOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x101 : Ojs.t) -> x101
        and t_to_js : t -> Ojs.t = fun (x100 : Ojs.t) -> x100
        let (get_output_length : t -> int) =
          fun (x102 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x102) "outputLength")
        let (set_output_length : t -> int -> unit) =
          fun (x103 : t) ->
            fun (x104 : int) ->
              Ojs.set_prop_ascii (t_to_js x103) "outputLength"
                (Ojs.int_to_js x104)
        let (cast : t -> Stream.TransformOptions.t) =
          fun (x105 : t) -> Stream.TransformOptions.t_of_js (t_to_js x105)
      end
    let (fips : bool) =
      Ojs.bool_of_js (Ojs.get_prop_ascii Import.crypto "fips")
    let (create_hash :
      algorithm:string -> ?options:HashOptions.t -> unit -> Hash.t) =
      fun ~algorithm:(x106 : string) ->
        fun ?options:(x107 : HashOptions.t option) ->
          fun () ->
            Hash.t_of_js
              (let x110 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x110 "createHash") "apply"
                 [|x110;((let x108 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x108 "push" [|(Ojs.string_to_js x106)|]);
                          (match x107 with
                           | Some x109 ->
                               ignore
                                 (Ojs.call x108 "push"
                                    [|(HashOptions.t_to_js x109)|])
                           | None -> ());
                          x108))|])
    let (create_hmac :
      algorithm:string ->
        key:(BinaryLike.t, KeyObject.t) union2 ->
          ?options:Stream.TransformOptions.t -> unit -> Hmac.t)
      =
      fun ~algorithm:(x111 : string) ->
        fun ~key:(x112 : (BinaryLike.t, KeyObject.t) union2) ->
          fun ?options:(x113 : Stream.TransformOptions.t option) ->
            fun () ->
              Hmac.t_of_js
                (let x118 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x118 "createHmac") "apply"
                   [|x118;((let x114 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x114 "push"
                                 [|(Ojs.string_to_js x111)|]);
                            ignore
                              (Ojs.call x114 "push"
                                 [|(union2_to_js BinaryLike.t_to_js
                                      KeyObject.t_to_js x112)|]);
                            (match x113 with
                             | Some x115 ->
                                 ignore
                                   (Ojs.call x114 "push"
                                      [|(Stream.TransformOptions.t_to_js x115)|])
                             | None -> ());
                            x114))|])
    module BinaryToTextEncoding =
      struct
        type t = [ `base64  | `hex ]
        let rec t_of_js : Ojs.t -> t =
          fun (x120 : Ojs.t) ->
            let x121 = x120 in
            match Ojs.string_of_js x121 with
            | "base64" -> `base64
            | "hex" -> `hex
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x119 : [ `base64  | `hex ]) ->
            match x119 with
            | `base64 -> Ojs.string_to_js "base64"
            | `hex -> Ojs.string_to_js "hex"
      end
    module CharacterEncoding =
      struct
        type t = [ `latin1  | `utf_8  | `utf16le  | `utf8 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x123 : Ojs.t) ->
            let x124 = x123 in
            match Ojs.string_of_js x124 with
            | "latin1" -> `latin1
            | "utf-8" -> `utf_8
            | "utf16le" -> `utf16le
            | "utf8" -> `utf8
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x122 : [ `latin1  | `utf_8  | `utf16le  | `utf8 ]) ->
            match x122 with
            | `latin1 -> Ojs.string_to_js "latin1"
            | `utf_8 -> Ojs.string_to_js "utf-8"
            | `utf16le -> Ojs.string_to_js "utf16le"
            | `utf8 -> Ojs.string_to_js "utf8"
      end
    module LegacyCharacterEncoding =
      struct
        type t = [ `ascii  | `binary  | `ucs_2  | `ucs2 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x126 : Ojs.t) ->
            let x127 = x126 in
            match Ojs.string_of_js x127 with
            | "ascii" -> `ascii
            | "binary" -> `binary
            | "ucs-2" -> `ucs_2
            | "ucs2" -> `ucs2
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x125 : [ `ascii  | `binary  | `ucs_2  | `ucs2 ]) ->
            match x125 with
            | `ascii -> Ojs.string_to_js "ascii"
            | `binary -> Ojs.string_to_js "binary"
            | `ucs_2 -> Ojs.string_to_js "ucs-2"
            | `ucs2 -> Ojs.string_to_js "ucs2"
      end
    module Encoding =
      struct
        type t =
          ((BinaryToTextEncoding.t, CharacterEncoding.t,
             LegacyCharacterEncoding.t) union3,
            [ `ascii  | `base64  | `binary  | `hex  | `latin1  | `ucs_2 
            | `ucs2  | `utf_8  | `utf16le  | `utf8 ]) or_enum
        let rec t_of_js : Ojs.t -> t =
          fun (x134 : Ojs.t) ->
            or_enum_of_js
              (fun (x135 : Ojs.t) ->
                 union3_of_js BinaryToTextEncoding.t_of_js
                   CharacterEncoding.t_of_js LegacyCharacterEncoding.t_of_js
                   x135)
              (fun (x139 : Ojs.t) ->
                 let x140 = x139 in
                 match Ojs.string_of_js x140 with
                 | "ascii" -> `ascii
                 | "base64" -> `base64
                 | "binary" -> `binary
                 | "hex" -> `hex
                 | "latin1" -> `latin1
                 | "ucs-2" -> `ucs_2
                 | "ucs2" -> `ucs2
                 | "utf-8" -> `utf_8
                 | "utf16le" -> `utf16le
                 | "utf8" -> `utf8
                 | _ -> assert false) x134
        and t_to_js : t -> Ojs.t =
          fun
            (x128 :
              ((BinaryToTextEncoding.t, CharacterEncoding.t,
                 LegacyCharacterEncoding.t) union3,
                [ `ascii  | `base64  | `binary  | `hex  | `latin1  | 
                  `ucs_2 
                | `ucs2  | `utf_8  | `utf16le  | `utf8 ]) or_enum)
            ->
            or_enum_to_js
              (fun
                 (x129 :
                   (BinaryToTextEncoding.t, CharacterEncoding.t,
                     LegacyCharacterEncoding.t) union3)
                 ->
                 union3_to_js BinaryToTextEncoding.t_to_js
                   CharacterEncoding.t_to_js LegacyCharacterEncoding.t_to_js
                   x129)
              (fun
                 (x133 :
                   [ `ascii  | `base64  | `binary  | `hex  | `latin1 
                   | `ucs_2  | `ucs2  | `utf_8  | `utf16le  | `utf8 ])
                 ->
                 match x133 with
                 | `ascii -> Ojs.string_to_js "ascii"
                 | `base64 -> Ojs.string_to_js "base64"
                 | `binary -> Ojs.string_to_js "binary"
                 | `hex -> Ojs.string_to_js "hex"
                 | `latin1 -> Ojs.string_to_js "latin1"
                 | `ucs_2 -> Ojs.string_to_js "ucs-2"
                 | `ucs2 -> Ojs.string_to_js "ucs2"
                 | `utf_8 -> Ojs.string_to_js "utf-8"
                 | `utf16le -> Ojs.string_to_js "utf16le"
                 | `utf8 -> Ojs.string_to_js "utf8") x128
      end
    module ECDHKeyFormat =
      struct
        type t = [ `compressed  | `hybrid  | `uncompressed ]
        let rec t_of_js : Ojs.t -> t =
          fun (x142 : Ojs.t) ->
            let x143 = x142 in
            match Ojs.string_of_js x143 with
            | "compressed" -> `compressed
            | "hybrid" -> `hybrid
            | "uncompressed" -> `uncompressed
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x141 : [ `compressed  | `hybrid  | `uncompressed ]) ->
            match x141 with
            | `compressed -> Ojs.string_to_js "compressed"
            | `hybrid -> Ojs.string_to_js "hybrid"
            | `uncompressed -> Ojs.string_to_js "uncompressed"
      end
    module Hash =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x145 : Ojs.t) -> x145
        and t_to_js : t -> Ojs.t = fun (x144 : Ojs.t) -> x144
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Hash") [||])
        let (copy : t -> t) =
          fun (x146 : t) -> t_of_js (Ojs.call (t_to_js x146) "copy" [||])
        let (update : t -> data:BinaryLike.t -> t) =
          fun (x148 : t) ->
            fun ~data:(x147 : BinaryLike.t) ->
              t_of_js
                (Ojs.call (t_to_js x148) "update"
                   [|(BinaryLike.t_to_js x147)|])
        let (update' : t -> data:string -> input_encoding:Encoding.t -> t) =
          fun (x151 : t) ->
            fun ~data:(x149 : string) ->
              fun ~input_encoding:(x150 : Encoding.t) ->
                t_of_js
                  (Ojs.call (t_to_js x151) "update"
                     [|(Ojs.string_to_js x149);(Encoding.t_to_js x150)|])
        let (digest : t -> Buffer.t) =
          fun (x152 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x152) "digest" [||])
        let (digest' : t -> encoding:BinaryToTextEncoding.t -> string) =
          fun (x154 : t) ->
            fun ~encoding:(x153 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x154) "digest"
                   [|(BinaryToTextEncoding.t_to_js x153)|])
        let (cast : t -> Stream.Transform.t) =
          fun (x155 : t) -> Stream.Transform.t_of_js (t_to_js x155)
      end
    module Hmac =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x157 : Ojs.t) -> x157
        and t_to_js : t -> Ojs.t = fun (x156 : Ojs.t) -> x156
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Hmac") [||])
        let (update : t -> data:BinaryLike.t -> t) =
          fun (x159 : t) ->
            fun ~data:(x158 : BinaryLike.t) ->
              t_of_js
                (Ojs.call (t_to_js x159) "update"
                   [|(BinaryLike.t_to_js x158)|])
        let (update' : t -> data:string -> input_encoding:Encoding.t -> t) =
          fun (x162 : t) ->
            fun ~data:(x160 : string) ->
              fun ~input_encoding:(x161 : Encoding.t) ->
                t_of_js
                  (Ojs.call (t_to_js x162) "update"
                     [|(Ojs.string_to_js x160);(Encoding.t_to_js x161)|])
        let (digest : t -> Buffer.t) =
          fun (x163 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x163) "digest" [||])
        let (digest' : t -> encoding:BinaryToTextEncoding.t -> string) =
          fun (x165 : t) ->
            fun ~encoding:(x164 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x165) "digest"
                   [|(BinaryToTextEncoding.t_to_js x164)|])
        let (cast : t -> Stream.Transform.t) =
          fun (x166 : t) -> Stream.Transform.t_of_js (t_to_js x166)
      end
    module KeyObjectType =
      struct
        type t = [ `private_  | `public  | `secret ]
        let rec t_of_js : Ojs.t -> t =
          fun (x168 : Ojs.t) ->
            let x169 = x168 in
            match Ojs.string_of_js x169 with
            | "private" -> `private_
            | "public" -> `public
            | "secret" -> `secret
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x167 : [ `private_  | `public  | `secret ]) ->
            match x167 with
            | `private_ -> Ojs.string_to_js "private"
            | `public -> Ojs.string_to_js "public"
            | `secret -> Ojs.string_to_js "secret"
      end
    module KeyExportOptions =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x171 : Ojs.t) -> x171
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x170 : Ojs.t) -> x170
        let (get_type : 'T t -> [ `pkcs1  | `pkcs8  | `sec1  | `spki ]) =
          fun (x172 : 'T t) ->
            let x174 = Ojs.get_prop_ascii (t_to_js Obj.magic x172) "type" in
            match Ojs.string_of_js x174 with
            | "pkcs1" -> `pkcs1
            | "pkcs8" -> `pkcs8
            | "sec1" -> `sec1
            | "spki" -> `spki
            | _ -> assert false
        let (set_type :
          'T t -> [ `pkcs1  | `pkcs8  | `sec1  | `spki ] -> unit) =
          fun (x175 : 'T t) ->
            fun (x176 : [ `pkcs1  | `pkcs8  | `sec1  | `spki ]) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x175) "type"
                (match x176 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `pkcs8 -> Ojs.string_to_js "pkcs8"
                 | `sec1 -> Ojs.string_to_js "sec1"
                 | `spki -> Ojs.string_to_js "spki")
        let (get_format : 'T t -> 'T) =
          fun (x178 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x178) "format")
        let (set_format : 'T t -> 'T -> unit) =
          fun (x180 : 'T t) ->
            fun (x181 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x180) "format"
                (Obj.magic x181)
        let (get_cipher : 'T t -> string) =
          fun (x183 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x183) "cipher")
        let (set_cipher : 'T t -> string -> unit) =
          fun (x185 : 'T t) ->
            fun (x186 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x185) "cipher"
                (Ojs.string_to_js x186)
        let (get_passphrase : 'T t -> Buffer.t or_string) =
          fun (x188 : 'T t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x188) "passphrase")
        let (set_passphrase : 'T t -> Buffer.t or_string -> unit) =
          fun (x191 : 'T t) ->
            fun (x192 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x191) "passphrase"
                (or_string_to_js Buffer.t_to_js x192)
      end
    module KeyObject =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x196 : Ojs.t) -> x196
        and t_to_js : t -> Ojs.t = fun (x195 : Ojs.t) -> x195
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "KeyObject")
                 [||])
        let (get_asymmetric_key_type : t -> KeyType.t) =
          fun (x197 : t) ->
            KeyType.t_of_js
              (Ojs.get_prop_ascii (t_to_js x197) "asymmetricKeyType")
        let (set_asymmetric_key_type : t -> KeyType.t -> unit) =
          fun (x198 : t) ->
            fun (x199 : KeyType.t) ->
              Ojs.set_prop_ascii (t_to_js x198) "asymmetricKeyType"
                (KeyType.t_to_js x199)
        let (get_asymmetric_key_size : t -> int) =
          fun (x200 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x200) "asymmetricKeySize")
        let (set_asymmetric_key_size : t -> int -> unit) =
          fun (x201 : t) ->
            fun (x202 : int) ->
              Ojs.set_prop_ascii (t_to_js x201) "asymmetricKeySize"
                (Ojs.int_to_js x202)
        let (export :
          t -> options:[ `pem ] KeyExportOptions.t -> Buffer.t or_string) =
          fun (x205 : t) ->
            fun ~options:(x203 : [ `pem ] KeyExportOptions.t) ->
              or_string_of_js Buffer.t_of_js
                (Ojs.call (t_to_js x205) "export"
                   [|(KeyExportOptions.t_to_js
                        (fun (x204 : [ `pem ]) ->
                           match x204 with | `pem -> Ojs.string_to_js "pem")
                        x203)|])
        let (export' :
          t -> ?options:[ `der ] KeyExportOptions.t -> unit -> Buffer.t) =
          fun (x211 : t) ->
            fun ?options:(x207 : [ `der ] KeyExportOptions.t option) ->
              fun () ->
                Buffer.t_of_js
                  (let x212 = t_to_js x211 in
                   Ojs.call (Ojs.get_prop_ascii x212 "export") "apply"
                     [|x212;((let x208 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x207 with
                               | Some x209 ->
                                   ignore
                                     (Ojs.call x208 "push"
                                        [|(KeyExportOptions.t_to_js
                                             (fun (x210 : [ `der ]) ->
                                                match x210 with
                                                | `der ->
                                                    Ojs.string_to_js "der")
                                             x209)|])
                               | None -> ());
                              x208))|])
        let (get_symmetric_key_size : t -> int) =
          fun (x213 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x213) "symmetricKeySize")
        let (set_symmetric_key_size : t -> int -> unit) =
          fun (x214 : t) ->
            fun (x215 : int) ->
              Ojs.set_prop_ascii (t_to_js x214) "symmetricKeySize"
                (Ojs.int_to_js x215)
        let (get_type : t -> KeyObjectType.t) =
          fun (x216 : t) ->
            KeyObjectType.t_of_js (Ojs.get_prop_ascii (t_to_js x216) "type")
        let (set_type : t -> KeyObjectType.t -> unit) =
          fun (x217 : t) ->
            fun (x218 : KeyObjectType.t) ->
              Ojs.set_prop_ascii (t_to_js x217) "type"
                (KeyObjectType.t_to_js x218)
      end
    module CipherCCMTypes =
      struct
        type t =
          [ `aes_128_ccm  | `aes_192_ccm  | `aes_256_ccm 
          | `chacha20_poly1305 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x220 : Ojs.t) ->
            let x221 = x220 in
            match Ojs.string_of_js x221 with
            | "aes-128-ccm" -> `aes_128_ccm
            | "aes-192-ccm" -> `aes_192_ccm
            | "aes-256-ccm" -> `aes_256_ccm
            | "chacha20-poly1305" -> `chacha20_poly1305
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x219 :
              [ `aes_128_ccm  | `aes_192_ccm  | `aes_256_ccm 
              | `chacha20_poly1305 ])
            ->
            match x219 with
            | `aes_128_ccm -> Ojs.string_to_js "aes-128-ccm"
            | `aes_192_ccm -> Ojs.string_to_js "aes-192-ccm"
            | `aes_256_ccm -> Ojs.string_to_js "aes-256-ccm"
            | `chacha20_poly1305 -> Ojs.string_to_js "chacha20-poly1305"
      end
    module CipherGCMTypes =
      struct
        type t = [ `aes_128_gcm  | `aes_192_gcm  | `aes_256_gcm ]
        let rec t_of_js : Ojs.t -> t =
          fun (x223 : Ojs.t) ->
            let x224 = x223 in
            match Ojs.string_of_js x224 with
            | "aes-128-gcm" -> `aes_128_gcm
            | "aes-192-gcm" -> `aes_192_gcm
            | "aes-256-gcm" -> `aes_256_gcm
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x222 : [ `aes_128_gcm  | `aes_192_gcm  | `aes_256_gcm ]) ->
            match x222 with
            | `aes_128_gcm -> Ojs.string_to_js "aes-128-gcm"
            | `aes_192_gcm -> Ojs.string_to_js "aes-192-gcm"
            | `aes_256_gcm -> Ojs.string_to_js "aes-256-gcm"
      end
    module BinaryLike =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x226 : Ojs.t) -> x226
        and t_to_js : t -> Ojs.t = fun (x225 : Ojs.t) -> x225
      end
    module CipherKey =
      struct
        type t = (BinaryLike.t, KeyObject.t) union2
        let rec t_of_js : Ojs.t -> t =
          fun (x230 : Ojs.t) ->
            union2_of_js BinaryLike.t_of_js KeyObject.t_of_js x230
        and t_to_js : t -> Ojs.t =
          fun (x227 : (BinaryLike.t, KeyObject.t) union2) ->
            union2_to_js BinaryLike.t_to_js KeyObject.t_to_js x227
      end
    module CipherCCMOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x234 : Ojs.t) -> x234
        and t_to_js : t -> Ojs.t = fun (x233 : Ojs.t) -> x233
        let (get_auth_tag_length : t -> int) =
          fun (x235 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x235) "authTagLength")
        let (set_auth_tag_length : t -> int -> unit) =
          fun (x236 : t) ->
            fun (x237 : int) ->
              Ojs.set_prop_ascii (t_to_js x236) "authTagLength"
                (Ojs.int_to_js x237)
        let (cast : t -> Stream.TransformOptions.t) =
          fun (x238 : t) -> Stream.TransformOptions.t_of_js (t_to_js x238)
      end
    module CipherGCMOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x240 : Ojs.t) -> x240
        and t_to_js : t -> Ojs.t = fun (x239 : Ojs.t) -> x239
        let (get_auth_tag_length : t -> int) =
          fun (x241 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x241) "authTagLength")
        let (set_auth_tag_length : t -> int -> unit) =
          fun (x242 : t) ->
            fun (x243 : int) ->
              Ojs.set_prop_ascii (t_to_js x242) "authTagLength"
                (Ojs.int_to_js x243)
        let (cast : t -> Stream.TransformOptions.t) =
          fun (x244 : t) -> Stream.TransformOptions.t_of_js (t_to_js x244)
      end
    let (create_cipher :
      algorithm:CipherCCMTypes.t ->
        password:BinaryLike.t -> options:CipherCCMOptions.t -> CipherCCM.t)
      =
      fun ~algorithm:(x245 : CipherCCMTypes.t) ->
        fun ~password:(x246 : BinaryLike.t) ->
          fun ~options:(x247 : CipherCCMOptions.t) ->
            CipherCCM.t_of_js
              (Ojs.call Import.crypto "createCipher"
                 [|(CipherCCMTypes.t_to_js x245);(BinaryLike.t_to_js x246);(
                   CipherCCMOptions.t_to_js x247)|])
    let (create_cipher :
      algorithm:CipherGCMTypes.t ->
        password:BinaryLike.t ->
          ?options:CipherGCMOptions.t -> unit -> CipherGCM.t)
      =
      fun ~algorithm:(x248 : CipherGCMTypes.t) ->
        fun ~password:(x249 : BinaryLike.t) ->
          fun ?options:(x250 : CipherGCMOptions.t option) ->
            fun () ->
              CipherGCM.t_of_js
                (let x253 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x253 "createCipher") "apply"
                   [|x253;((let x251 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x251 "push"
                                 [|(CipherGCMTypes.t_to_js x248)|]);
                            ignore
                              (Ojs.call x251 "push"
                                 [|(BinaryLike.t_to_js x249)|]);
                            (match x250 with
                             | Some x252 ->
                                 ignore
                                   (Ojs.call x251 "push"
                                      [|(CipherGCMOptions.t_to_js x252)|])
                             | None -> ());
                            x251))|])
    let (create_cipher :
      algorithm:string ->
        password:BinaryLike.t ->
          ?options:Stream.TransformOptions.t -> unit -> Cipher.t)
      =
      fun ~algorithm:(x254 : string) ->
        fun ~password:(x255 : BinaryLike.t) ->
          fun ?options:(x256 : Stream.TransformOptions.t option) ->
            fun () ->
              Cipher.t_of_js
                (let x259 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x259 "createCipher") "apply"
                   [|x259;((let x257 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x257 "push"
                                 [|(Ojs.string_to_js x254)|]);
                            ignore
                              (Ojs.call x257 "push"
                                 [|(BinaryLike.t_to_js x255)|]);
                            (match x256 with
                             | Some x258 ->
                                 ignore
                                   (Ojs.call x257 "push"
                                      [|(Stream.TransformOptions.t_to_js x258)|])
                             | None -> ());
                            x257))|])
    let (create_cipheriv :
      algorithm:CipherCCMTypes.t ->
        key:CipherKey.t ->
          iv:BinaryLike.t or_null ->
            options:CipherCCMOptions.t -> CipherCCM.t)
      =
      fun ~algorithm:(x260 : CipherCCMTypes.t) ->
        fun ~key:(x261 : CipherKey.t) ->
          fun ~iv:(x262 : BinaryLike.t or_null) ->
            fun ~options:(x264 : CipherCCMOptions.t) ->
              CipherCCM.t_of_js
                (Ojs.call Import.crypto "createCipheriv"
                   [|(CipherCCMTypes.t_to_js x260);(CipherKey.t_to_js x261);(
                     or_null_to_js BinaryLike.t_to_js x262);(CipherCCMOptions.t_to_js
                                                               x264)|])
    let (create_cipheriv :
      algorithm:CipherGCMTypes.t ->
        key:CipherKey.t ->
          iv:BinaryLike.t or_null ->
            ?options:CipherGCMOptions.t -> unit -> CipherGCM.t)
      =
      fun ~algorithm:(x265 : CipherGCMTypes.t) ->
        fun ~key:(x266 : CipherKey.t) ->
          fun ~iv:(x267 : BinaryLike.t or_null) ->
            fun ?options:(x268 : CipherGCMOptions.t option) ->
              fun () ->
                CipherGCM.t_of_js
                  (let x272 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x272 "createCipheriv")
                     "apply"
                     [|x272;((let x269 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x269 "push"
                                   [|(CipherGCMTypes.t_to_js x265)|]);
                              ignore
                                (Ojs.call x269 "push"
                                   [|(CipherKey.t_to_js x266)|]);
                              ignore
                                (Ojs.call x269 "push"
                                   [|(or_null_to_js BinaryLike.t_to_js x267)|]);
                              (match x268 with
                               | Some x270 ->
                                   ignore
                                     (Ojs.call x269 "push"
                                        [|(CipherGCMOptions.t_to_js x270)|])
                               | None -> ());
                              x269))|])
    let (create_cipheriv :
      algorithm:string ->
        key:CipherKey.t ->
          iv:BinaryLike.t or_null ->
            ?options:Stream.TransformOptions.t -> unit -> Cipher.t)
      =
      fun ~algorithm:(x273 : string) ->
        fun ~key:(x274 : CipherKey.t) ->
          fun ~iv:(x275 : BinaryLike.t or_null) ->
            fun ?options:(x276 : Stream.TransformOptions.t option) ->
              fun () ->
                Cipher.t_of_js
                  (let x280 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x280 "createCipheriv")
                     "apply"
                     [|x280;((let x277 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x277 "push"
                                   [|(Ojs.string_to_js x273)|]);
                              ignore
                                (Ojs.call x277 "push"
                                   [|(CipherKey.t_to_js x274)|]);
                              ignore
                                (Ojs.call x277 "push"
                                   [|(or_null_to_js BinaryLike.t_to_js x275)|]);
                              (match x276 with
                               | Some x278 ->
                                   ignore
                                     (Ojs.call x277 "push"
                                        [|(Stream.TransformOptions.t_to_js
                                             x278)|])
                               | None -> ());
                              x277))|])
    module Cipher =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x282 : Ojs.t) -> x282
        and t_to_js : t -> Ojs.t = fun (x281 : Ojs.t) -> x281
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Cipher") [||])
        let (update : t -> data:BinaryLike.t -> Buffer.t) =
          fun (x284 : t) ->
            fun ~data:(x283 : BinaryLike.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x284) "update"
                   [|(BinaryLike.t_to_js x283)|])
        let (update' :
          t -> data:string -> input_encoding:Encoding.t -> Buffer.t) =
          fun (x287 : t) ->
            fun ~data:(x285 : string) ->
              fun ~input_encoding:(x286 : Encoding.t) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x287) "update"
                     [|(Ojs.string_to_js x285);(Encoding.t_to_js x286)|])
        let (update'' :
          t ->
            data:ArrayBufferView.t ->
              input_encoding:never or_undefined ->
                output_encoding:Encoding.t -> string)
          =
          fun (x292 : t) ->
            fun ~data:(x288 : ArrayBufferView.t) ->
              fun ~input_encoding:(x289 : never or_undefined) ->
                fun ~output_encoding:(x291 : Encoding.t) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x292) "update"
                       [|(ArrayBufferView.t_to_js x288);(or_undefined_to_js
                                                           never_to_js x289);(
                         Encoding.t_to_js x291)|])
        let (update''' :
          t ->
            data:string ->
              input_encoding:Encoding.t or_undefined ->
                output_encoding:Encoding.t -> string)
          =
          fun (x297 : t) ->
            fun ~data:(x293 : string) ->
              fun ~input_encoding:(x294 : Encoding.t or_undefined) ->
                fun ~output_encoding:(x296 : Encoding.t) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x297) "update"
                       [|(Ojs.string_to_js x293);(or_undefined_to_js
                                                    Encoding.t_to_js x294);(
                         Encoding.t_to_js x296)|])
        let (final : t -> Buffer.t) =
          fun (x298 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x298) "final" [||])
        let (final' : t -> output_encoding:BufferEncoding.t -> string) =
          fun (x300 : t) ->
            fun ~output_encoding:(x299 : BufferEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x300) "final"
                   [|(BufferEncoding.t_to_js x299)|])
        let (set_auto_padding : t -> ?auto_padding:bool -> unit -> t) =
          fun (x304 : t) ->
            fun ?auto_padding:(x301 : bool option) ->
              fun () ->
                t_of_js
                  (let x305 = t_to_js x304 in
                   Ojs.call (Ojs.get_prop_ascii x305 "setAutoPadding")
                     "apply"
                     [|x305;((let x302 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x301 with
                               | Some x303 ->
                                   ignore
                                     (Ojs.call x302 "push"
                                        [|(Ojs.bool_to_js x303)|])
                               | None -> ());
                              x302))|])
        let (cast : t -> Stream.Transform.t) =
          fun (x306 : t) -> Stream.Transform.t_of_js (t_to_js x306)
      end
    module CipherCCM =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x308 : Ojs.t) -> x308
        and t_to_js : t -> Ojs.t = fun (x307 : Ojs.t) -> x307
        let (set_aad :
          t -> buffer:ArrayBufferView.t -> options:AnonymousInterface0.t -> t)
          =
          fun (x311 : t) ->
            fun ~buffer:(x309 : ArrayBufferView.t) ->
              fun ~options:(x310 : AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x311) "setAAD"
                     [|(ArrayBufferView.t_to_js x309);(AnonymousInterface0.t_to_js
                                                         x310)|])
        let (get_auth_tag : t -> Buffer.t) =
          fun (x312 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x312) "getAuthTag" [||])
        let (cast : t -> Cipher.t) =
          fun (x313 : t) -> Cipher.t_of_js (t_to_js x313)
      end
    module CipherGCM =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x315 : Ojs.t) -> x315
        and t_to_js : t -> Ojs.t = fun (x314 : Ojs.t) -> x314
        let (set_aad :
          t ->
            buffer:ArrayBufferView.t ->
              ?options:AnonymousInterface0.t -> unit -> t)
          =
          fun (x320 : t) ->
            fun ~buffer:(x316 : ArrayBufferView.t) ->
              fun ?options:(x317 : AnonymousInterface0.t option) ->
                fun () ->
                  t_of_js
                    (let x321 = t_to_js x320 in
                     Ojs.call (Ojs.get_prop_ascii x321 "setAAD") "apply"
                       [|x321;((let x318 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x318 "push"
                                     [|(ArrayBufferView.t_to_js x316)|]);
                                (match x317 with
                                 | Some x319 ->
                                     ignore
                                       (Ojs.call x318 "push"
                                          [|(AnonymousInterface0.t_to_js x319)|])
                                 | None -> ());
                                x318))|])
        let (get_auth_tag : t -> Buffer.t) =
          fun (x322 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x322) "getAuthTag" [||])
        let (cast : t -> Cipher.t) =
          fun (x323 : t) -> Cipher.t_of_js (t_to_js x323)
      end
    let (create_decipher :
      algorithm:CipherCCMTypes.t ->
        password:BinaryLike.t -> options:CipherCCMOptions.t -> DecipherCCM.t)
      =
      fun ~algorithm:(x324 : CipherCCMTypes.t) ->
        fun ~password:(x325 : BinaryLike.t) ->
          fun ~options:(x326 : CipherCCMOptions.t) ->
            DecipherCCM.t_of_js
              (Ojs.call Import.crypto "createDecipher"
                 [|(CipherCCMTypes.t_to_js x324);(BinaryLike.t_to_js x325);(
                   CipherCCMOptions.t_to_js x326)|])
    let (create_decipher :
      algorithm:CipherGCMTypes.t ->
        password:BinaryLike.t ->
          ?options:CipherGCMOptions.t -> unit -> DecipherGCM.t)
      =
      fun ~algorithm:(x327 : CipherGCMTypes.t) ->
        fun ~password:(x328 : BinaryLike.t) ->
          fun ?options:(x329 : CipherGCMOptions.t option) ->
            fun () ->
              DecipherGCM.t_of_js
                (let x332 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x332 "createDecipher") "apply"
                   [|x332;((let x330 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x330 "push"
                                 [|(CipherGCMTypes.t_to_js x327)|]);
                            ignore
                              (Ojs.call x330 "push"
                                 [|(BinaryLike.t_to_js x328)|]);
                            (match x329 with
                             | Some x331 ->
                                 ignore
                                   (Ojs.call x330 "push"
                                      [|(CipherGCMOptions.t_to_js x331)|])
                             | None -> ());
                            x330))|])
    let (create_decipher :
      algorithm:string ->
        password:BinaryLike.t ->
          ?options:Stream.TransformOptions.t -> unit -> Decipher.t)
      =
      fun ~algorithm:(x333 : string) ->
        fun ~password:(x334 : BinaryLike.t) ->
          fun ?options:(x335 : Stream.TransformOptions.t option) ->
            fun () ->
              Decipher.t_of_js
                (let x338 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x338 "createDecipher") "apply"
                   [|x338;((let x336 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x336 "push"
                                 [|(Ojs.string_to_js x333)|]);
                            ignore
                              (Ojs.call x336 "push"
                                 [|(BinaryLike.t_to_js x334)|]);
                            (match x335 with
                             | Some x337 ->
                                 ignore
                                   (Ojs.call x336 "push"
                                      [|(Stream.TransformOptions.t_to_js x337)|])
                             | None -> ());
                            x336))|])
    let (create_decipheriv :
      algorithm:CipherCCMTypes.t ->
        key:CipherKey.t ->
          iv:BinaryLike.t or_null ->
            options:CipherCCMOptions.t -> DecipherCCM.t)
      =
      fun ~algorithm:(x339 : CipherCCMTypes.t) ->
        fun ~key:(x340 : CipherKey.t) ->
          fun ~iv:(x341 : BinaryLike.t or_null) ->
            fun ~options:(x343 : CipherCCMOptions.t) ->
              DecipherCCM.t_of_js
                (Ojs.call Import.crypto "createDecipheriv"
                   [|(CipherCCMTypes.t_to_js x339);(CipherKey.t_to_js x340);(
                     or_null_to_js BinaryLike.t_to_js x341);(CipherCCMOptions.t_to_js
                                                               x343)|])
    let (create_decipheriv :
      algorithm:CipherGCMTypes.t ->
        key:CipherKey.t ->
          iv:BinaryLike.t or_null ->
            ?options:CipherGCMOptions.t -> unit -> DecipherGCM.t)
      =
      fun ~algorithm:(x344 : CipherGCMTypes.t) ->
        fun ~key:(x345 : CipherKey.t) ->
          fun ~iv:(x346 : BinaryLike.t or_null) ->
            fun ?options:(x347 : CipherGCMOptions.t option) ->
              fun () ->
                DecipherGCM.t_of_js
                  (let x351 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x351 "createDecipheriv")
                     "apply"
                     [|x351;((let x348 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x348 "push"
                                   [|(CipherGCMTypes.t_to_js x344)|]);
                              ignore
                                (Ojs.call x348 "push"
                                   [|(CipherKey.t_to_js x345)|]);
                              ignore
                                (Ojs.call x348 "push"
                                   [|(or_null_to_js BinaryLike.t_to_js x346)|]);
                              (match x347 with
                               | Some x349 ->
                                   ignore
                                     (Ojs.call x348 "push"
                                        [|(CipherGCMOptions.t_to_js x349)|])
                               | None -> ());
                              x348))|])
    let (create_decipheriv :
      algorithm:string ->
        key:CipherKey.t ->
          iv:BinaryLike.t or_null ->
            ?options:Stream.TransformOptions.t -> unit -> Decipher.t)
      =
      fun ~algorithm:(x352 : string) ->
        fun ~key:(x353 : CipherKey.t) ->
          fun ~iv:(x354 : BinaryLike.t or_null) ->
            fun ?options:(x355 : Stream.TransformOptions.t option) ->
              fun () ->
                Decipher.t_of_js
                  (let x359 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x359 "createDecipheriv")
                     "apply"
                     [|x359;((let x356 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x356 "push"
                                   [|(Ojs.string_to_js x352)|]);
                              ignore
                                (Ojs.call x356 "push"
                                   [|(CipherKey.t_to_js x353)|]);
                              ignore
                                (Ojs.call x356 "push"
                                   [|(or_null_to_js BinaryLike.t_to_js x354)|]);
                              (match x355 with
                               | Some x357 ->
                                   ignore
                                     (Ojs.call x356 "push"
                                        [|(Stream.TransformOptions.t_to_js
                                             x357)|])
                               | None -> ());
                              x356))|])
    module Decipher =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x361 : Ojs.t) -> x361
        and t_to_js : t -> Ojs.t = fun (x360 : Ojs.t) -> x360
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Decipher") [||])
        let (update : t -> data:ArrayBufferView.t -> Buffer.t) =
          fun (x363 : t) ->
            fun ~data:(x362 : ArrayBufferView.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x363) "update"
                   [|(ArrayBufferView.t_to_js x362)|])
        let (update' :
          t -> data:string -> input_encoding:Encoding.t -> Buffer.t) =
          fun (x366 : t) ->
            fun ~data:(x364 : string) ->
              fun ~input_encoding:(x365 : Encoding.t) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x366) "update"
                     [|(Ojs.string_to_js x364);(Encoding.t_to_js x365)|])
        let (update'' :
          t ->
            data:ArrayBufferView.t ->
              input_encoding:never or_undefined ->
                output_encoding:Encoding.t -> string)
          =
          fun (x371 : t) ->
            fun ~data:(x367 : ArrayBufferView.t) ->
              fun ~input_encoding:(x368 : never or_undefined) ->
                fun ~output_encoding:(x370 : Encoding.t) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x371) "update"
                       [|(ArrayBufferView.t_to_js x367);(or_undefined_to_js
                                                           never_to_js x368);(
                         Encoding.t_to_js x370)|])
        let (update''' :
          t ->
            data:string ->
              input_encoding:Encoding.t or_undefined ->
                output_encoding:Encoding.t -> string)
          =
          fun (x376 : t) ->
            fun ~data:(x372 : string) ->
              fun ~input_encoding:(x373 : Encoding.t or_undefined) ->
                fun ~output_encoding:(x375 : Encoding.t) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x376) "update"
                       [|(Ojs.string_to_js x372);(or_undefined_to_js
                                                    Encoding.t_to_js x373);(
                         Encoding.t_to_js x375)|])
        let (final : t -> Buffer.t) =
          fun (x377 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x377) "final" [||])
        let (final' : t -> output_encoding:BufferEncoding.t -> string) =
          fun (x379 : t) ->
            fun ~output_encoding:(x378 : BufferEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x379) "final"
                   [|(BufferEncoding.t_to_js x378)|])
        let (set_auto_padding : t -> ?auto_padding:bool -> unit -> t) =
          fun (x383 : t) ->
            fun ?auto_padding:(x380 : bool option) ->
              fun () ->
                t_of_js
                  (let x384 = t_to_js x383 in
                   Ojs.call (Ojs.get_prop_ascii x384 "setAutoPadding")
                     "apply"
                     [|x384;((let x381 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x380 with
                               | Some x382 ->
                                   ignore
                                     (Ojs.call x381 "push"
                                        [|(Ojs.bool_to_js x382)|])
                               | None -> ());
                              x381))|])
        let (cast : t -> Stream.Transform.t) =
          fun (x385 : t) -> Stream.Transform.t_of_js (t_to_js x385)
      end
    module DecipherCCM =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x387 : Ojs.t) -> x387
        and t_to_js : t -> Ojs.t = fun (x386 : Ojs.t) -> x386
        let (set_auth_tag : t -> buffer:ArrayBufferView.t -> t) =
          fun (x389 : t) ->
            fun ~buffer:(x388 : ArrayBufferView.t) ->
              t_of_js
                (Ojs.call (t_to_js x389) "setAuthTag"
                   [|(ArrayBufferView.t_to_js x388)|])
        let (set_aad :
          t -> buffer:ArrayBufferView.t -> options:AnonymousInterface0.t -> t)
          =
          fun (x392 : t) ->
            fun ~buffer:(x390 : ArrayBufferView.t) ->
              fun ~options:(x391 : AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x392) "setAAD"
                     [|(ArrayBufferView.t_to_js x390);(AnonymousInterface0.t_to_js
                                                         x391)|])
        let (cast : t -> Decipher.t) =
          fun (x393 : t) -> Decipher.t_of_js (t_to_js x393)
      end
    module DecipherGCM =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x395 : Ojs.t) -> x395
        and t_to_js : t -> Ojs.t = fun (x394 : Ojs.t) -> x394
        let (set_auth_tag : t -> buffer:ArrayBufferView.t -> t) =
          fun (x397 : t) ->
            fun ~buffer:(x396 : ArrayBufferView.t) ->
              t_of_js
                (Ojs.call (t_to_js x397) "setAuthTag"
                   [|(ArrayBufferView.t_to_js x396)|])
        let (set_aad :
          t ->
            buffer:ArrayBufferView.t ->
              ?options:AnonymousInterface0.t -> unit -> t)
          =
          fun (x402 : t) ->
            fun ~buffer:(x398 : ArrayBufferView.t) ->
              fun ?options:(x399 : AnonymousInterface0.t option) ->
                fun () ->
                  t_of_js
                    (let x403 = t_to_js x402 in
                     Ojs.call (Ojs.get_prop_ascii x403 "setAAD") "apply"
                       [|x403;((let x400 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x400 "push"
                                     [|(ArrayBufferView.t_to_js x398)|]);
                                (match x399 with
                                 | Some x401 ->
                                     ignore
                                       (Ojs.call x400 "push"
                                          [|(AnonymousInterface0.t_to_js x401)|])
                                 | None -> ());
                                x400))|])
        let (cast : t -> Decipher.t) =
          fun (x404 : t) -> Decipher.t_of_js (t_to_js x404)
      end
    module PrivateKeyInput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x406 : Ojs.t) -> x406
        and t_to_js : t -> Ojs.t = fun (x405 : Ojs.t) -> x405
        let (get_key : t -> Buffer.t or_string) =
          fun (x407 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x407) "key")
        let (set_key : t -> Buffer.t or_string -> unit) =
          fun (x409 : t) ->
            fun (x410 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x409) "key"
                (or_string_to_js Buffer.t_to_js x410)
        let (get_format : t -> KeyFormat.t) =
          fun (x412 : t) ->
            KeyFormat.t_of_js (Ojs.get_prop_ascii (t_to_js x412) "format")
        let (set_format : t -> KeyFormat.t -> unit) =
          fun (x413 : t) ->
            fun (x414 : KeyFormat.t) ->
              Ojs.set_prop_ascii (t_to_js x413) "format"
                (KeyFormat.t_to_js x414)
        let (get_type : t -> [ `pkcs1  | `pkcs8  | `sec1 ]) =
          fun (x415 : t) ->
            let x416 = Ojs.get_prop_ascii (t_to_js x415) "type" in
            match Ojs.string_of_js x416 with
            | "pkcs1" -> `pkcs1
            | "pkcs8" -> `pkcs8
            | "sec1" -> `sec1
            | _ -> assert false
        let (set_type : t -> [ `pkcs1  | `pkcs8  | `sec1 ] -> unit) =
          fun (x417 : t) ->
            fun (x418 : [ `pkcs1  | `pkcs8  | `sec1 ]) ->
              Ojs.set_prop_ascii (t_to_js x417) "type"
                (match x418 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `pkcs8 -> Ojs.string_to_js "pkcs8"
                 | `sec1 -> Ojs.string_to_js "sec1")
        let (get_passphrase : t -> Buffer.t or_string) =
          fun (x419 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x419) "passphrase")
        let (set_passphrase : t -> Buffer.t or_string -> unit) =
          fun (x421 : t) ->
            fun (x422 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x421) "passphrase"
                (or_string_to_js Buffer.t_to_js x422)
      end
    module PublicKeyInput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x425 : Ojs.t) -> x425
        and t_to_js : t -> Ojs.t = fun (x424 : Ojs.t) -> x424
        let (get_key : t -> Buffer.t or_string) =
          fun (x426 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x426) "key")
        let (set_key : t -> Buffer.t or_string -> unit) =
          fun (x428 : t) ->
            fun (x429 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x428) "key"
                (or_string_to_js Buffer.t_to_js x429)
        let (get_format : t -> KeyFormat.t) =
          fun (x431 : t) ->
            KeyFormat.t_of_js (Ojs.get_prop_ascii (t_to_js x431) "format")
        let (set_format : t -> KeyFormat.t -> unit) =
          fun (x432 : t) ->
            fun (x433 : KeyFormat.t) ->
              Ojs.set_prop_ascii (t_to_js x432) "format"
                (KeyFormat.t_to_js x433)
        let (get_type : t -> [ `pkcs1  | `spki ]) =
          fun (x434 : t) ->
            let x435 = Ojs.get_prop_ascii (t_to_js x434) "type" in
            match Ojs.string_of_js x435 with
            | "pkcs1" -> `pkcs1
            | "spki" -> `spki
            | _ -> assert false
        let (set_type : t -> [ `pkcs1  | `spki ] -> unit) =
          fun (x436 : t) ->
            fun (x437 : [ `pkcs1  | `spki ]) ->
              Ojs.set_prop_ascii (t_to_js x436) "type"
                (match x437 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `spki -> Ojs.string_to_js "spki")
      end
    let (create_private_key :
      key:(Buffer.t, PrivateKeyInput.t) union2 or_string -> KeyObject.t) =
      fun ~key:(x438 : (Buffer.t, PrivateKeyInput.t) union2 or_string) ->
        KeyObject.t_of_js
          (Ojs.call Import.crypto "createPrivateKey"
             [|(or_string_to_js
                  (fun (x439 : (Buffer.t, PrivateKeyInput.t) union2) ->
                     union2_to_js Buffer.t_to_js PrivateKeyInput.t_to_js x439)
                  x438)|])
    let (create_public_key :
      key:([ `U_s21_pkcs1 of PublicKeyInput.t 
           | `U_s23_private of KeyObject.t  | `U_s24_public of KeyObject.t 
           | `U_s27_secret of KeyObject.t 
           | `U_s28_spki of PublicKeyInput.t ],
        Buffer.t) or_ or_string -> KeyObject.t)
      =
      fun
        ~key:(x442 :
               ([ `U_s21_pkcs1 of PublicKeyInput.t 
                | `U_s23_private of KeyObject.t 
                | `U_s24_public of KeyObject.t 
                | `U_s27_secret of KeyObject.t 
                | `U_s28_spki of PublicKeyInput.t ], Buffer.t) or_ or_string)
        ->
        KeyObject.t_of_js
          (Ojs.call Import.crypto "createPublicKey"
             [|(or_string_to_js
                  (fun
                     (x443 :
                       ([ `U_s21_pkcs1 of PublicKeyInput.t 
                        | `U_s23_private of KeyObject.t 
                        | `U_s24_public of KeyObject.t 
                        | `U_s27_secret of KeyObject.t 
                        | `U_s28_spki of PublicKeyInput.t ], Buffer.t) or_)
                     ->
                     or__to_js
                       (fun
                          (x444 :
                            [ `U_s21_pkcs1 of PublicKeyInput.t 
                            | `U_s23_private of KeyObject.t 
                            | `U_s24_public of KeyObject.t 
                            | `U_s27_secret of KeyObject.t 
                            | `U_s28_spki of PublicKeyInput.t ])
                          ->
                          match x444 with
                          | `U_s21_pkcs1 x445 -> PublicKeyInput.t_to_js x445
                          | `U_s23_private x446 -> KeyObject.t_to_js x446
                          | `U_s24_public x447 -> KeyObject.t_to_js x447
                          | `U_s27_secret x448 -> KeyObject.t_to_js x448
                          | `U_s28_spki x449 -> PublicKeyInput.t_to_js x449)
                       Buffer.t_to_js x443) x442)|])
    let (create_secret_key : key:ArrayBufferView.t -> KeyObject.t) =
      fun ~key:(x451 : ArrayBufferView.t) ->
        KeyObject.t_of_js
          (Ojs.call Import.crypto "createSecretKey"
             [|(ArrayBufferView.t_to_js x451)|])
    let (create_sign :
      algorithm:string ->
        ?options:Stream.WritableOptions.t -> unit -> Signer.t)
      =
      fun ~algorithm:(x452 : string) ->
        fun ?options:(x453 : Stream.WritableOptions.t option) ->
          fun () ->
            Signer.t_of_js
              (let x456 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x456 "createSign") "apply"
                 [|x456;((let x454 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x454 "push" [|(Ojs.string_to_js x452)|]);
                          (match x453 with
                           | Some x455 ->
                               ignore
                                 (Ojs.call x454 "push"
                                    [|(Stream.WritableOptions.t_to_js x455)|])
                           | None -> ());
                          x454))|])
    module DSAEncoding =
      struct
        type t = [ `der  | `ieee_p1363 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x458 : Ojs.t) ->
            let x459 = x458 in
            match Ojs.string_of_js x459 with
            | "der" -> `der
            | "ieee-p1363" -> `ieee_p1363
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x457 : [ `der  | `ieee_p1363 ]) ->
            match x457 with
            | `der -> Ojs.string_to_js "der"
            | `ieee_p1363 -> Ojs.string_to_js "ieee-p1363"
      end
    module SigningOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x461 : Ojs.t) -> x461
        and t_to_js : t -> Ojs.t = fun (x460 : Ojs.t) -> x460
        let (get_padding : t -> int) =
          fun (x462 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x462) "padding")
        let (set_padding : t -> int -> unit) =
          fun (x463 : t) ->
            fun (x464 : int) ->
              Ojs.set_prop_ascii (t_to_js x463) "padding"
                (Ojs.int_to_js x464)
        let (get_salt_length : t -> int) =
          fun (x465 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x465) "saltLength")
        let (set_salt_length : t -> int -> unit) =
          fun (x466 : t) ->
            fun (x467 : int) ->
              Ojs.set_prop_ascii (t_to_js x466) "saltLength"
                (Ojs.int_to_js x467)
        let (get_dsa_encoding : t -> DSAEncoding.t) =
          fun (x468 : t) ->
            DSAEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x468) "dsaEncoding")
        let (set_dsa_encoding : t -> DSAEncoding.t -> unit) =
          fun (x469 : t) ->
            fun (x470 : DSAEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x469) "dsaEncoding"
                (DSAEncoding.t_to_js x470)
      end
    module SignPrivateKeyInput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x472 : Ojs.t) -> x472
        and t_to_js : t -> Ojs.t = fun (x471 : Ojs.t) -> x471
        let (cast : t -> PrivateKeyInput.t) =
          fun (x473 : t) -> PrivateKeyInput.t_of_js (t_to_js x473)
        let (cast' : t -> SigningOptions.t) =
          fun (x474 : t) -> SigningOptions.t_of_js (t_to_js x474)
      end
    module SignKeyObjectInput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x476 : Ojs.t) -> x476
        and t_to_js : t -> Ojs.t = fun (x475 : Ojs.t) -> x475
        let (get_key : t -> KeyObject.t) =
          fun (x477 : t) ->
            KeyObject.t_of_js (Ojs.get_prop_ascii (t_to_js x477) "key")
        let (set_key : t -> KeyObject.t -> unit) =
          fun (x478 : t) ->
            fun (x479 : KeyObject.t) ->
              Ojs.set_prop_ascii (t_to_js x478) "key"
                (KeyObject.t_to_js x479)
        let (cast : t -> SigningOptions.t) =
          fun (x480 : t) -> SigningOptions.t_of_js (t_to_js x480)
      end
    module VerifyPublicKeyInput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x482 : Ojs.t) -> x482
        and t_to_js : t -> Ojs.t = fun (x481 : Ojs.t) -> x481
        let (cast : t -> PublicKeyInput.t) =
          fun (x483 : t) -> PublicKeyInput.t_of_js (t_to_js x483)
        let (cast' : t -> SigningOptions.t) =
          fun (x484 : t) -> SigningOptions.t_of_js (t_to_js x484)
      end
    module VerifyKeyObjectInput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x486 : Ojs.t) -> x486
        and t_to_js : t -> Ojs.t = fun (x485 : Ojs.t) -> x485
        let (get_key : t -> KeyObject.t) =
          fun (x487 : t) ->
            KeyObject.t_of_js (Ojs.get_prop_ascii (t_to_js x487) "key")
        let (set_key : t -> KeyObject.t -> unit) =
          fun (x488 : t) ->
            fun (x489 : KeyObject.t) ->
              Ojs.set_prop_ascii (t_to_js x488) "key"
                (KeyObject.t_to_js x489)
        let (cast : t -> SigningOptions.t) =
          fun (x490 : t) -> SigningOptions.t_of_js (t_to_js x490)
      end
    module KeyLike =
      struct
        type t = (Buffer.t, KeyObject.t) union2 or_string
        let rec t_of_js : Ojs.t -> t =
          fun (x495 : Ojs.t) ->
            or_string_of_js
              (fun (x496 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js KeyObject.t_of_js x496) x495
        and t_to_js : t -> Ojs.t =
          fun (x491 : (Buffer.t, KeyObject.t) union2 or_string) ->
            or_string_to_js
              (fun (x492 : (Buffer.t, KeyObject.t) union2) ->
                 union2_to_js Buffer.t_to_js KeyObject.t_to_js x492) x491
      end
    module Signer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x500 : Ojs.t) -> x500
        and t_to_js : t -> Ojs.t = fun (x499 : Ojs.t) -> x499
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Signer") [||])
        let (update : t -> data:BinaryLike.t -> t) =
          fun (x502 : t) ->
            fun ~data:(x501 : BinaryLike.t) ->
              t_of_js
                (Ojs.call (t_to_js x502) "update"
                   [|(BinaryLike.t_to_js x501)|])
        let (update' : t -> data:string -> input_encoding:Encoding.t -> t) =
          fun (x505 : t) ->
            fun ~data:(x503 : string) ->
              fun ~input_encoding:(x504 : Encoding.t) ->
                t_of_js
                  (Ojs.call (t_to_js x505) "update"
                     [|(Ojs.string_to_js x503);(Encoding.t_to_js x504)|])
        let (sign :
          t ->
            private_key:([ `U_s11_der of SignKeyObjectInput.t 
                         | `U_s18_ieee_p1363 of SignKeyObjectInput.t ],
              [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
              | `U_s22_pkcs8 of SignPrivateKeyInput.t 
              | `U_s23_private of KeyLike.t  | `U_s24_public of KeyLike.t 
              | `U_s26_sec1 of SignPrivateKeyInput.t 
              | `U_s27_secret of KeyLike.t ]) union2 -> Buffer.t)
          =
          fun (x517 : t) ->
            fun
              ~private_key:(x506 :
                             ([ `U_s11_der of SignKeyObjectInput.t 
                              | `U_s18_ieee_p1363 of SignKeyObjectInput.t ],
                               [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
                               | `U_s22_pkcs8 of SignPrivateKeyInput.t 
                               | `U_s23_private of KeyLike.t 
                               | `U_s24_public of KeyLike.t 
                               | `U_s26_sec1 of SignPrivateKeyInput.t 
                               | `U_s27_secret of KeyLike.t ]) union2)
              ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x517) "sign"
                   [|(union2_to_js
                        (fun
                           (x507 :
                             [ `U_s11_der of SignKeyObjectInput.t 
                             | `U_s18_ieee_p1363 of SignKeyObjectInput.t ])
                           ->
                           match x507 with
                           | `U_s11_der x508 ->
                               SignKeyObjectInput.t_to_js x508
                           | `U_s18_ieee_p1363 x509 ->
                               SignKeyObjectInput.t_to_js x509)
                        (fun
                           (x510 :
                             [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
                             | `U_s22_pkcs8 of SignPrivateKeyInput.t 
                             | `U_s23_private of KeyLike.t 
                             | `U_s24_public of KeyLike.t 
                             | `U_s26_sec1 of SignPrivateKeyInput.t 
                             | `U_s27_secret of KeyLike.t ])
                           ->
                           match x510 with
                           | `U_s21_pkcs1 x511 ->
                               SignPrivateKeyInput.t_to_js x511
                           | `U_s22_pkcs8 x512 ->
                               SignPrivateKeyInput.t_to_js x512
                           | `U_s23_private x513 -> KeyLike.t_to_js x513
                           | `U_s24_public x514 -> KeyLike.t_to_js x514
                           | `U_s26_sec1 x515 ->
                               SignPrivateKeyInput.t_to_js x515
                           | `U_s27_secret x516 -> KeyLike.t_to_js x516) x506)|])
        let (sign' :
          t ->
            private_key:([ `U_s11_der of SignKeyObjectInput.t 
                         | `U_s18_ieee_p1363 of SignKeyObjectInput.t ],
              [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
              | `U_s22_pkcs8 of SignPrivateKeyInput.t 
              | `U_s23_private of KeyLike.t  | `U_s24_public of KeyLike.t 
              | `U_s26_sec1 of SignPrivateKeyInput.t 
              | `U_s27_secret of KeyLike.t ]) union2 ->
              output_format:BinaryToTextEncoding.t -> string)
          =
          fun (x530 : t) ->
            fun
              ~private_key:(x518 :
                             ([ `U_s11_der of SignKeyObjectInput.t 
                              | `U_s18_ieee_p1363 of SignKeyObjectInput.t ],
                               [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
                               | `U_s22_pkcs8 of SignPrivateKeyInput.t 
                               | `U_s23_private of KeyLike.t 
                               | `U_s24_public of KeyLike.t 
                               | `U_s26_sec1 of SignPrivateKeyInput.t 
                               | `U_s27_secret of KeyLike.t ]) union2)
              ->
              fun ~output_format:(x529 : BinaryToTextEncoding.t) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x530) "sign"
                     [|(union2_to_js
                          (fun
                             (x519 :
                               [ `U_s11_der of SignKeyObjectInput.t 
                               | `U_s18_ieee_p1363 of SignKeyObjectInput.t ])
                             ->
                             match x519 with
                             | `U_s11_der x520 ->
                                 SignKeyObjectInput.t_to_js x520
                             | `U_s18_ieee_p1363 x521 ->
                                 SignKeyObjectInput.t_to_js x521)
                          (fun
                             (x522 :
                               [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
                               | `U_s22_pkcs8 of SignPrivateKeyInput.t 
                               | `U_s23_private of KeyLike.t 
                               | `U_s24_public of KeyLike.t 
                               | `U_s26_sec1 of SignPrivateKeyInput.t 
                               | `U_s27_secret of KeyLike.t ])
                             ->
                             match x522 with
                             | `U_s21_pkcs1 x523 ->
                                 SignPrivateKeyInput.t_to_js x523
                             | `U_s22_pkcs8 x524 ->
                                 SignPrivateKeyInput.t_to_js x524
                             | `U_s23_private x525 -> KeyLike.t_to_js x525
                             | `U_s24_public x526 -> KeyLike.t_to_js x526
                             | `U_s26_sec1 x527 ->
                                 SignPrivateKeyInput.t_to_js x527
                             | `U_s27_secret x528 -> KeyLike.t_to_js x528)
                          x518);(BinaryToTextEncoding.t_to_js x529)|])
        let (cast : t -> Stream.Writable.t) =
          fun (x531 : t) -> Stream.Writable.t_of_js (t_to_js x531)
      end
    let (create_verify :
      algorithm:string ->
        ?options:Stream.WritableOptions.t -> unit -> Verify.t)
      =
      fun ~algorithm:(x532 : string) ->
        fun ?options:(x533 : Stream.WritableOptions.t option) ->
          fun () ->
            Verify.t_of_js
              (let x536 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x536 "createVerify") "apply"
                 [|x536;((let x534 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x534 "push" [|(Ojs.string_to_js x532)|]);
                          (match x533 with
                           | Some x535 ->
                               ignore
                                 (Ojs.call x534 "push"
                                    [|(Stream.WritableOptions.t_to_js x535)|])
                           | None -> ());
                          x534))|])
    module Verify =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x538 : Ojs.t) -> x538
        and t_to_js : t -> Ojs.t = fun (x537 : Ojs.t) -> x537
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Verify") [||])
        let (update : t -> data:BinaryLike.t -> t) =
          fun (x540 : t) ->
            fun ~data:(x539 : BinaryLike.t) ->
              t_of_js
                (Ojs.call (t_to_js x540) "update"
                   [|(BinaryLike.t_to_js x539)|])
        let (update' : t -> data:string -> input_encoding:Encoding.t -> t) =
          fun (x543 : t) ->
            fun ~data:(x541 : string) ->
              fun ~input_encoding:(x542 : Encoding.t) ->
                t_of_js
                  (Ojs.call (t_to_js x543) "update"
                     [|(Ojs.string_to_js x541);(Encoding.t_to_js x542)|])
        let (verify :
          t ->
            object_:([ `U_s11_der of VerifyKeyObjectInput.t 
                     | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ],
              [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
              | `U_s23_private of KeyLike.t  | `U_s24_public of KeyLike.t 
              | `U_s27_secret of KeyLike.t 
              | `U_s28_spki of VerifyPublicKeyInput.t ]) union2 ->
              signature:ArrayBufferView.t -> bool)
          =
          fun (x555 : t) ->
            fun
              ~object_:(x544 :
                         ([ `U_s11_der of VerifyKeyObjectInput.t 
                          | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ],
                           [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
                           | `U_s23_private of KeyLike.t 
                           | `U_s24_public of KeyLike.t 
                           | `U_s27_secret of KeyLike.t 
                           | `U_s28_spki of VerifyPublicKeyInput.t ]) union2)
              ->
              fun ~signature:(x554 : ArrayBufferView.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x555) "verify"
                     [|(union2_to_js
                          (fun
                             (x545 :
                               [ `U_s11_der of VerifyKeyObjectInput.t 
                               | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ])
                             ->
                             match x545 with
                             | `U_s11_der x546 ->
                                 VerifyKeyObjectInput.t_to_js x546
                             | `U_s18_ieee_p1363 x547 ->
                                 VerifyKeyObjectInput.t_to_js x547)
                          (fun
                             (x548 :
                               [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
                               | `U_s23_private of KeyLike.t 
                               | `U_s24_public of KeyLike.t 
                               | `U_s27_secret of KeyLike.t 
                               | `U_s28_spki of VerifyPublicKeyInput.t ])
                             ->
                             match x548 with
                             | `U_s21_pkcs1 x549 ->
                                 VerifyPublicKeyInput.t_to_js x549
                             | `U_s23_private x550 -> KeyLike.t_to_js x550
                             | `U_s24_public x551 -> KeyLike.t_to_js x551
                             | `U_s27_secret x552 -> KeyLike.t_to_js x552
                             | `U_s28_spki x553 ->
                                 VerifyPublicKeyInput.t_to_js x553) x544);(
                       ArrayBufferView.t_to_js x554)|])
        let (verify' :
          t ->
            object_:([ `U_s11_der of VerifyKeyObjectInput.t 
                     | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ],
              [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
              | `U_s23_private of KeyLike.t  | `U_s24_public of KeyLike.t 
              | `U_s27_secret of KeyLike.t 
              | `U_s28_spki of VerifyPublicKeyInput.t ]) union2 ->
              signature:string ->
                ?signature_format:BinaryToTextEncoding.t -> unit -> bool)
          =
          fun (x570 : t) ->
            fun
              ~object_:(x556 :
                         ([ `U_s11_der of VerifyKeyObjectInput.t 
                          | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ],
                           [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
                           | `U_s23_private of KeyLike.t 
                           | `U_s24_public of KeyLike.t 
                           | `U_s27_secret of KeyLike.t 
                           | `U_s28_spki of VerifyPublicKeyInput.t ]) union2)
              ->
              fun ~signature:(x557 : string) ->
                fun ?signature_format:(x558 : BinaryToTextEncoding.t option)
                  ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x571 = t_to_js x570 in
                       Ojs.call (Ojs.get_prop_ascii x571 "verify") "apply"
                         [|x571;((let x559 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x559 "push"
                                       [|(union2_to_js
                                            (fun
                                               (x561 :
                                                 [
                                                   `U_s11_der of
                                                     VerifyKeyObjectInput.t 
                                                 | `U_s18_ieee_p1363 of
                                                     VerifyKeyObjectInput.t ])
                                               ->
                                               match x561 with
                                               | `U_s11_der x562 ->
                                                   VerifyKeyObjectInput.t_to_js
                                                     x562
                                               | `U_s18_ieee_p1363 x563 ->
                                                   VerifyKeyObjectInput.t_to_js
                                                     x563)
                                            (fun
                                               (x564 :
                                                 [
                                                   `U_s21_pkcs1 of
                                                     VerifyPublicKeyInput.t 
                                                 | `U_s23_private of
                                                     KeyLike.t 
                                                 | `U_s24_public of KeyLike.t 
                                                 | `U_s27_secret of KeyLike.t 
                                                 | `U_s28_spki of
                                                     VerifyPublicKeyInput.t ])
                                               ->
                                               match x564 with
                                               | `U_s21_pkcs1 x565 ->
                                                   VerifyPublicKeyInput.t_to_js
                                                     x565
                                               | `U_s23_private x566 ->
                                                   KeyLike.t_to_js x566
                                               | `U_s24_public x567 ->
                                                   KeyLike.t_to_js x567
                                               | `U_s27_secret x568 ->
                                                   KeyLike.t_to_js x568
                                               | `U_s28_spki x569 ->
                                                   VerifyPublicKeyInput.t_to_js
                                                     x569) x556)|]);
                                  ignore
                                    (Ojs.call x559 "push"
                                       [|(Ojs.string_to_js x557)|]);
                                  (match x558 with
                                   | Some x560 ->
                                       ignore
                                         (Ojs.call x559 "push"
                                            [|(BinaryToTextEncoding.t_to_js
                                                 x560)|])
                                   | None -> ());
                                  x559))|])
        let (cast : t -> Stream.Writable.t) =
          fun (x572 : t) -> Stream.Writable.t_of_js (t_to_js x572)
      end
    let (create_diffie_hellman :
      prime_length:int ->
        ?generator:ArrayBufferView.t or_number -> unit -> DiffieHellman.t)
      =
      fun ~prime_length:(x573 : int) ->
        fun ?generator:(x574 : ArrayBufferView.t or_number option) ->
          fun () ->
            DiffieHellman.t_of_js
              (let x578 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x578 "createDiffieHellman")
                 "apply"
                 [|x578;((let x575 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x575 "push" [|(Ojs.int_to_js x573)|]);
                          (match x574 with
                           | Some x576 ->
                               ignore
                                 (Ojs.call x575 "push"
                                    [|(or_number_to_js
                                         ArrayBufferView.t_to_js x576)|])
                           | None -> ());
                          x575))|])
    let (create_diffie_hellman : prime:ArrayBufferView.t -> DiffieHellman.t)
      =
      fun ~prime:(x579 : ArrayBufferView.t) ->
        DiffieHellman.t_of_js
          (Ojs.call Import.crypto "createDiffieHellman"
             [|(ArrayBufferView.t_to_js x579)|])
    let (create_diffie_hellman :
      prime:string ->
        prime_encoding:BinaryToTextEncoding.t -> DiffieHellman.t)
      =
      fun ~prime:(x580 : string) ->
        fun ~prime_encoding:(x581 : BinaryToTextEncoding.t) ->
          DiffieHellman.t_of_js
            (Ojs.call Import.crypto "createDiffieHellman"
               [|(Ojs.string_to_js x580);(BinaryToTextEncoding.t_to_js x581)|])
    let (create_diffie_hellman :
      prime:string ->
        prime_encoding:BinaryToTextEncoding.t ->
          generator:ArrayBufferView.t or_number -> DiffieHellman.t)
      =
      fun ~prime:(x582 : string) ->
        fun ~prime_encoding:(x583 : BinaryToTextEncoding.t) ->
          fun ~generator:(x584 : ArrayBufferView.t or_number) ->
            DiffieHellman.t_of_js
              (Ojs.call Import.crypto "createDiffieHellman"
                 [|(Ojs.string_to_js x582);(BinaryToTextEncoding.t_to_js x583);(
                   or_number_to_js ArrayBufferView.t_to_js x584)|])
    let (create_diffie_hellman :
      prime:string ->
        prime_encoding:BinaryToTextEncoding.t ->
          generator:string ->
            generator_encoding:BinaryToTextEncoding.t -> DiffieHellman.t)
      =
      fun ~prime:(x586 : string) ->
        fun ~prime_encoding:(x587 : BinaryToTextEncoding.t) ->
          fun ~generator:(x588 : string) ->
            fun ~generator_encoding:(x589 : BinaryToTextEncoding.t) ->
              DiffieHellman.t_of_js
                (Ojs.call Import.crypto "createDiffieHellman"
                   [|(Ojs.string_to_js x586);(BinaryToTextEncoding.t_to_js
                                                x587);(Ojs.string_to_js x588);(
                     BinaryToTextEncoding.t_to_js x589)|])
    module DiffieHellman =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x591 : Ojs.t) -> x591
        and t_to_js : t -> Ojs.t = fun (x590 : Ojs.t) -> x590
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "DiffieHellman")
                 [||])
        let (generate_keys : t -> Buffer.t) =
          fun (x592 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x592) "generateKeys" [||])
        let (generate_keys' : t -> encoding:BinaryToTextEncoding.t -> string)
          =
          fun (x594 : t) ->
            fun ~encoding:(x593 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x594) "generateKeys"
                   [|(BinaryToTextEncoding.t_to_js x593)|])
        let (compute_secret :
          t -> other_public_key:ArrayBufferView.t -> Buffer.t) =
          fun (x596 : t) ->
            fun ~other_public_key:(x595 : ArrayBufferView.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x596) "computeSecret"
                   [|(ArrayBufferView.t_to_js x595)|])
        let (compute_secret' :
          t ->
            other_public_key:string ->
              input_encoding:BinaryToTextEncoding.t -> Buffer.t)
          =
          fun (x599 : t) ->
            fun ~other_public_key:(x597 : string) ->
              fun ~input_encoding:(x598 : BinaryToTextEncoding.t) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x599) "computeSecret"
                     [|(Ojs.string_to_js x597);(BinaryToTextEncoding.t_to_js
                                                  x598)|])
        let (compute_secret'' :
          t ->
            other_public_key:ArrayBufferView.t ->
              output_encoding:BinaryToTextEncoding.t -> string)
          =
          fun (x602 : t) ->
            fun ~other_public_key:(x600 : ArrayBufferView.t) ->
              fun ~output_encoding:(x601 : BinaryToTextEncoding.t) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x602) "computeSecret"
                     [|(ArrayBufferView.t_to_js x600);(BinaryToTextEncoding.t_to_js
                                                         x601)|])
        let (compute_secret''' :
          t ->
            other_public_key:string ->
              input_encoding:BinaryToTextEncoding.t ->
                output_encoding:BinaryToTextEncoding.t -> string)
          =
          fun (x606 : t) ->
            fun ~other_public_key:(x603 : string) ->
              fun ~input_encoding:(x604 : BinaryToTextEncoding.t) ->
                fun ~output_encoding:(x605 : BinaryToTextEncoding.t) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x606) "computeSecret"
                       [|(Ojs.string_to_js x603);(BinaryToTextEncoding.t_to_js
                                                    x604);(BinaryToTextEncoding.t_to_js
                                                             x605)|])
        let (get_prime : t -> Buffer.t) =
          fun (x607 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x607) "getPrime" [||])
        let (get_prime' : t -> encoding:BinaryToTextEncoding.t -> string) =
          fun (x609 : t) ->
            fun ~encoding:(x608 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x609) "getPrime"
                   [|(BinaryToTextEncoding.t_to_js x608)|])
        let (get_generator : t -> Buffer.t) =
          fun (x610 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x610) "getGenerator" [||])
        let (get_generator' : t -> encoding:BinaryToTextEncoding.t -> string)
          =
          fun (x612 : t) ->
            fun ~encoding:(x611 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x612) "getGenerator"
                   [|(BinaryToTextEncoding.t_to_js x611)|])
        let (get_public_key : t -> Buffer.t) =
          fun (x613 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x613) "getPublicKey" [||])
        let (get_public_key' :
          t -> encoding:BinaryToTextEncoding.t -> string) =
          fun (x615 : t) ->
            fun ~encoding:(x614 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x615) "getPublicKey"
                   [|(BinaryToTextEncoding.t_to_js x614)|])
        let (get_private_key : t -> Buffer.t) =
          fun (x616 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x616) "getPrivateKey" [||])
        let (get_private_key' :
          t -> encoding:BinaryToTextEncoding.t -> string) =
          fun (x618 : t) ->
            fun ~encoding:(x617 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x618) "getPrivateKey"
                   [|(BinaryToTextEncoding.t_to_js x617)|])
        let (set_public_key : t -> public_key:ArrayBufferView.t -> unit) =
          fun (x620 : t) ->
            fun ~public_key:(x619 : ArrayBufferView.t) ->
              ignore
                (Ojs.call (t_to_js x620) "setPublicKey"
                   [|(ArrayBufferView.t_to_js x619)|])
        let (set_public_key' :
          t -> public_key:string -> encoding:BufferEncoding.t -> unit) =
          fun (x623 : t) ->
            fun ~public_key:(x621 : string) ->
              fun ~encoding:(x622 : BufferEncoding.t) ->
                ignore
                  (Ojs.call (t_to_js x623) "setPublicKey"
                     [|(Ojs.string_to_js x621);(BufferEncoding.t_to_js x622)|])
        let (set_private_key : t -> private_key:ArrayBufferView.t -> unit) =
          fun (x625 : t) ->
            fun ~private_key:(x624 : ArrayBufferView.t) ->
              ignore
                (Ojs.call (t_to_js x625) "setPrivateKey"
                   [|(ArrayBufferView.t_to_js x624)|])
        let (set_private_key' :
          t -> private_key:string -> encoding:BufferEncoding.t -> unit) =
          fun (x628 : t) ->
            fun ~private_key:(x626 : string) ->
              fun ~encoding:(x627 : BufferEncoding.t) ->
                ignore
                  (Ojs.call (t_to_js x628) "setPrivateKey"
                     [|(Ojs.string_to_js x626);(BufferEncoding.t_to_js x627)|])
        let (get_verify_error : t -> int) =
          fun (x629 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x629) "verifyError")
        let (set_verify_error : t -> int -> unit) =
          fun (x630 : t) ->
            fun (x631 : int) ->
              Ojs.set_prop_ascii (t_to_js x630) "verifyError"
                (Ojs.int_to_js x631)
      end
    let (get_diffie_hellman : group_name:string -> DiffieHellman.t) =
      fun ~group_name:(x632 : string) ->
        DiffieHellman.t_of_js
          (Ojs.call Import.crypto "getDiffieHellman"
             [|(Ojs.string_to_js x632)|])
    let (pbkdf2 :
      password:BinaryLike.t ->
        salt:BinaryLike.t ->
          iterations:int ->
            keylen:int ->
              digest:string ->
                callback:(err:Error.t or_null -> derived_key:Buffer.t -> any)
                  -> unit)
      =
      fun ~password:(x633 : BinaryLike.t) ->
        fun ~salt:(x634 : BinaryLike.t) ->
          fun ~iterations:(x635 : int) ->
            fun ~keylen:(x636 : int) ->
              fun ~digest:(x637 : string) ->
                fun
                  ~callback:(x638 :
                              err:Error.t or_null ->
                                derived_key:Buffer.t -> any)
                  ->
                  ignore
                    (Ojs.call Import.crypto "pbkdf2"
                       [|(BinaryLike.t_to_js x633);(BinaryLike.t_to_js x634);(
                         Ojs.int_to_js x635);(Ojs.int_to_js x636);(Ojs.string_to_js
                                                                    x637);(
                         Ojs.fun_to_js 2
                           (fun (x639 : Ojs.t) ->
                              fun (x641 : Ojs.t) ->
                                any_to_js
                                  (x638
                                     ~err:(or_null_of_js Error.t_of_js x639)
                                     ~derived_key:(Buffer.t_of_js x641))))|])
    let (pbkdf2Sync :
      password:BinaryLike.t ->
        salt:BinaryLike.t ->
          iterations:int -> keylen:int -> digest:string -> Buffer.t)
      =
      fun ~password:(x642 : BinaryLike.t) ->
        fun ~salt:(x643 : BinaryLike.t) ->
          fun ~iterations:(x644 : int) ->
            fun ~keylen:(x645 : int) ->
              fun ~digest:(x646 : string) ->
                Buffer.t_of_js
                  (Ojs.call Import.crypto "pbkdf2Sync"
                     [|(BinaryLike.t_to_js x642);(BinaryLike.t_to_js x643);(
                       Ojs.int_to_js x644);(Ojs.int_to_js x645);(Ojs.string_to_js
                                                                   x646)|])
    let (random_bytes : size:int -> Buffer.t) =
      fun ~size:(x647 : int) ->
        Buffer.t_of_js
          (Ojs.call Import.crypto "randomBytes" [|(Ojs.int_to_js x647)|])
    let (random_bytes :
      size:int ->
        callback:(err:Error.t or_null -> buf:Buffer.t -> unit) -> unit)
      =
      fun ~size:(x648 : int) ->
        fun ~callback:(x649 : err:Error.t or_null -> buf:Buffer.t -> unit) ->
          ignore
            (Ojs.call Import.crypto "randomBytes"
               [|(Ojs.int_to_js x648);(Ojs.fun_to_js 2
                                         (fun (x650 : Ojs.t) ->
                                            fun (x652 : Ojs.t) ->
                                              x649
                                                ~err:(or_null_of_js
                                                        Error.t_of_js x650)
                                                ~buf:(Buffer.t_of_js x652)))|])
    let (pseudo_random_bytes : size:int -> Buffer.t) =
      fun ~size:(x653 : int) ->
        Buffer.t_of_js
          (Ojs.call Import.crypto "pseudoRandomBytes"
             [|(Ojs.int_to_js x653)|])
    let (pseudo_random_bytes :
      size:int ->
        callback:(err:Error.t or_null -> buf:Buffer.t -> unit) -> unit)
      =
      fun ~size:(x654 : int) ->
        fun ~callback:(x655 : err:Error.t or_null -> buf:Buffer.t -> unit) ->
          ignore
            (Ojs.call Import.crypto "pseudoRandomBytes"
               [|(Ojs.int_to_js x654);(Ojs.fun_to_js 2
                                         (fun (x656 : Ojs.t) ->
                                            fun (x658 : Ojs.t) ->
                                              x655
                                                ~err:(or_null_of_js
                                                        Error.t_of_js x656)
                                                ~buf:(Buffer.t_of_js x658)))|])
    let (random_int : max:int -> int) =
      fun ~max:(x659 : int) ->
        Ojs.int_of_js
          (Ojs.call Import.crypto "randomInt" [|(Ojs.int_to_js x659)|])
    let (random_int : min:int -> max:int -> int) =
      fun ~min:(x660 : int) ->
        fun ~max:(x661 : int) ->
          Ojs.int_of_js
            (Ojs.call Import.crypto "randomInt"
               [|(Ojs.int_to_js x660);(Ojs.int_to_js x661)|])
    let (random_int :
      max:int -> callback:(err:Error.t or_null -> value:int -> unit) -> unit)
      =
      fun ~max:(x662 : int) ->
        fun ~callback:(x663 : err:Error.t or_null -> value:int -> unit) ->
          ignore
            (Ojs.call Import.crypto "randomInt"
               [|(Ojs.int_to_js x662);(Ojs.fun_to_js 2
                                         (fun (x664 : Ojs.t) ->
                                            fun (x666 : Ojs.t) ->
                                              x663
                                                ~err:(or_null_of_js
                                                        Error.t_of_js x664)
                                                ~value:(Ojs.int_of_js x666)))|])
    let (random_int :
      min:int ->
        max:int ->
          callback:(err:Error.t or_null -> value:int -> unit) -> unit)
      =
      fun ~min:(x667 : int) ->
        fun ~max:(x668 : int) ->
          fun ~callback:(x669 : err:Error.t or_null -> value:int -> unit) ->
            ignore
              (Ojs.call Import.crypto "randomInt"
                 [|(Ojs.int_to_js x667);(Ojs.int_to_js x668);(Ojs.fun_to_js 2
                                                                (fun
                                                                   (x670 :
                                                                    Ojs.t)
                                                                   ->
                                                                   fun
                                                                    (x672 :
                                                                    Ojs.t) ->
                                                                    x669
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x670)
                                                                    ~value:(
                                                                    Ojs.int_of_js
                                                                    x672)))|])
    let (random_fill_sync :
      buffer:'T -> ?offset:int -> ?size:int -> unit -> 'T) =
      fun ~buffer:(x673 : 'T) ->
        fun ?offset:(x674 : int option) ->
          fun ?size:(x675 : int option) ->
            fun () ->
              Obj.magic
                (let x679 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x679 "randomFillSync") "apply"
                   [|x679;((let x676 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x676 "push" [|(Obj.magic x673)|]);
                            (match x674 with
                             | Some x678 ->
                                 ignore
                                   (Ojs.call x676 "push"
                                      [|(Ojs.int_to_js x678)|])
                             | None -> ());
                            (match x675 with
                             | Some x677 ->
                                 ignore
                                   (Ojs.call x676 "push"
                                      [|(Ojs.int_to_js x677)|])
                             | None -> ());
                            x676))|])
    let (random_fill :
      buffer:'T -> callback:(err:Error.t or_null -> buf:'T -> unit) -> unit)
      =
      fun ~buffer:(x680 : 'T) ->
        fun ~callback:(x681 : err:Error.t or_null -> buf:'T -> unit) ->
          ignore
            (Ojs.call Import.crypto "randomFill"
               [|(Obj.magic x680);(Ojs.fun_to_js 2
                                     (fun (x682 : Ojs.t) ->
                                        fun (x684 : Ojs.t) ->
                                          x681
                                            ~err:(or_null_of_js Error.t_of_js
                                                    x682)
                                            ~buf:(Obj.magic x684)))|])
    let (random_fill :
      buffer:'T ->
        offset:int ->
          callback:(err:Error.t or_null -> buf:'T -> unit) -> unit)
      =
      fun ~buffer:(x685 : 'T) ->
        fun ~offset:(x686 : int) ->
          fun ~callback:(x687 : err:Error.t or_null -> buf:'T -> unit) ->
            ignore
              (Ojs.call Import.crypto "randomFill"
                 [|(Obj.magic x685);(Ojs.int_to_js x686);(Ojs.fun_to_js 2
                                                            (fun
                                                               (x688 : Ojs.t)
                                                               ->
                                                               fun
                                                                 (x690 :
                                                                   Ojs.t)
                                                                 ->
                                                                 x687
                                                                   ~err:(
                                                                   or_null_of_js
                                                                    Error.t_of_js
                                                                    x688)
                                                                   ~buf:(
                                                                   Obj.magic
                                                                    x690)))|])
    let (random_fill :
      buffer:'T ->
        offset:int ->
          size:int ->
            callback:(err:Error.t or_null -> buf:'T -> unit) -> unit)
      =
      fun ~buffer:(x691 : 'T) ->
        fun ~offset:(x692 : int) ->
          fun ~size:(x693 : int) ->
            fun ~callback:(x694 : err:Error.t or_null -> buf:'T -> unit) ->
              ignore
                (Ojs.call Import.crypto "randomFill"
                   [|(Obj.magic x691);(Ojs.int_to_js x692);(Ojs.int_to_js
                                                              x693);(
                     Ojs.fun_to_js 2
                       (fun (x695 : Ojs.t) ->
                          fun (x697 : Ojs.t) ->
                            x694 ~err:(or_null_of_js Error.t_of_js x695)
                              ~buf:(Obj.magic x697)))|])
    module ScryptOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x699 : Ojs.t) -> x699
        and t_to_js : t -> Ojs.t = fun (x698 : Ojs.t) -> x698
        let (get_cost : t -> int) =
          fun (x700 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x700) "cost")
        let (set_cost : t -> int -> unit) =
          fun (x701 : t) ->
            fun (x702 : int) ->
              Ojs.set_prop_ascii (t_to_js x701) "cost" (Ojs.int_to_js x702)
        let (get_block_size : t -> int) =
          fun (x703 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x703) "blockSize")
        let (set_block_size : t -> int -> unit) =
          fun (x704 : t) ->
            fun (x705 : int) ->
              Ojs.set_prop_ascii (t_to_js x704) "blockSize"
                (Ojs.int_to_js x705)
        let (get_parallelization : t -> int) =
          fun (x706 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x706) "parallelization")
        let (set_parallelization : t -> int -> unit) =
          fun (x707 : t) ->
            fun (x708 : int) ->
              Ojs.set_prop_ascii (t_to_js x707) "parallelization"
                (Ojs.int_to_js x708)
        let (get_n : t -> int) =
          fun (x709 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x709) "N")
        let (set_n : t -> int -> unit) =
          fun (x710 : t) ->
            fun (x711 : int) ->
              Ojs.set_prop_ascii (t_to_js x710) "N" (Ojs.int_to_js x711)
        let (get_r : t -> int) =
          fun (x712 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x712) "r")
        let (set_r : t -> int -> unit) =
          fun (x713 : t) ->
            fun (x714 : int) ->
              Ojs.set_prop_ascii (t_to_js x713) "r" (Ojs.int_to_js x714)
        let (get_p : t -> int) =
          fun (x715 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x715) "p")
        let (set_p : t -> int -> unit) =
          fun (x716 : t) ->
            fun (x717 : int) ->
              Ojs.set_prop_ascii (t_to_js x716) "p" (Ojs.int_to_js x717)
        let (get_maxmem : t -> int) =
          fun (x718 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x718) "maxmem")
        let (set_maxmem : t -> int -> unit) =
          fun (x719 : t) ->
            fun (x720 : int) ->
              Ojs.set_prop_ascii (t_to_js x719) "maxmem" (Ojs.int_to_js x720)
      end
    let (scrypt :
      password:BinaryLike.t ->
        salt:BinaryLike.t ->
          keylen:int ->
            callback:(err:Error.t or_null -> derived_key:Buffer.t -> unit) ->
              unit)
      =
      fun ~password:(x721 : BinaryLike.t) ->
        fun ~salt:(x722 : BinaryLike.t) ->
          fun ~keylen:(x723 : int) ->
            fun
              ~callback:(x724 :
                          err:Error.t or_null -> derived_key:Buffer.t -> unit)
              ->
              ignore
                (Ojs.call Import.crypto "scrypt"
                   [|(BinaryLike.t_to_js x721);(BinaryLike.t_to_js x722);(
                     Ojs.int_to_js x723);(Ojs.fun_to_js 2
                                            (fun (x725 : Ojs.t) ->
                                               fun (x727 : Ojs.t) ->
                                                 x724
                                                   ~err:(or_null_of_js
                                                           Error.t_of_js x725)
                                                   ~derived_key:(Buffer.t_of_js
                                                                   x727)))|])
    let (scrypt :
      password:BinaryLike.t ->
        salt:BinaryLike.t ->
          keylen:int ->
            options:ScryptOptions.t ->
              callback:(err:Error.t or_null -> derived_key:Buffer.t -> unit)
                -> unit)
      =
      fun ~password:(x728 : BinaryLike.t) ->
        fun ~salt:(x729 : BinaryLike.t) ->
          fun ~keylen:(x730 : int) ->
            fun ~options:(x731 : ScryptOptions.t) ->
              fun
                ~callback:(x732 :
                            err:Error.t or_null ->
                              derived_key:Buffer.t -> unit)
                ->
                ignore
                  (Ojs.call Import.crypto "scrypt"
                     [|(BinaryLike.t_to_js x728);(BinaryLike.t_to_js x729);(
                       Ojs.int_to_js x730);(ScryptOptions.t_to_js x731);(
                       Ojs.fun_to_js 2
                         (fun (x733 : Ojs.t) ->
                            fun (x735 : Ojs.t) ->
                              x732 ~err:(or_null_of_js Error.t_of_js x733)
                                ~derived_key:(Buffer.t_of_js x735)))|])
    let (scrypt_sync :
      password:BinaryLike.t ->
        salt:BinaryLike.t ->
          keylen:int -> ?options:ScryptOptions.t -> unit -> Buffer.t)
      =
      fun ~password:(x736 : BinaryLike.t) ->
        fun ~salt:(x737 : BinaryLike.t) ->
          fun ~keylen:(x738 : int) ->
            fun ?options:(x739 : ScryptOptions.t option) ->
              fun () ->
                Buffer.t_of_js
                  (let x742 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x742 "scryptSync") "apply"
                     [|x742;((let x740 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x740 "push"
                                   [|(BinaryLike.t_to_js x736)|]);
                              ignore
                                (Ojs.call x740 "push"
                                   [|(BinaryLike.t_to_js x737)|]);
                              ignore
                                (Ojs.call x740 "push"
                                   [|(Ojs.int_to_js x738)|]);
                              (match x739 with
                               | Some x741 ->
                                   ignore
                                     (Ojs.call x740 "push"
                                        [|(ScryptOptions.t_to_js x741)|])
                               | None -> ());
                              x740))|])
    module RsaPublicKey =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x744 : Ojs.t) -> x744
        and t_to_js : t -> Ojs.t = fun (x743 : Ojs.t) -> x743
        let (get_key : t -> KeyLike.t) =
          fun (x745 : t) ->
            KeyLike.t_of_js (Ojs.get_prop_ascii (t_to_js x745) "key")
        let (set_key : t -> KeyLike.t -> unit) =
          fun (x746 : t) ->
            fun (x747 : KeyLike.t) ->
              Ojs.set_prop_ascii (t_to_js x746) "key" (KeyLike.t_to_js x747)
        let (get_padding : t -> int) =
          fun (x748 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x748) "padding")
        let (set_padding : t -> int -> unit) =
          fun (x749 : t) ->
            fun (x750 : int) ->
              Ojs.set_prop_ascii (t_to_js x749) "padding"
                (Ojs.int_to_js x750)
      end
    module RsaPrivateKey =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x752 : Ojs.t) -> x752
        and t_to_js : t -> Ojs.t = fun (x751 : Ojs.t) -> x751
        let (get_key : t -> KeyLike.t) =
          fun (x753 : t) ->
            KeyLike.t_of_js (Ojs.get_prop_ascii (t_to_js x753) "key")
        let (set_key : t -> KeyLike.t -> unit) =
          fun (x754 : t) ->
            fun (x755 : KeyLike.t) ->
              Ojs.set_prop_ascii (t_to_js x754) "key" (KeyLike.t_to_js x755)
        let (get_passphrase : t -> string) =
          fun (x756 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x756) "passphrase")
        let (set_passphrase : t -> string -> unit) =
          fun (x757 : t) ->
            fun (x758 : string) ->
              Ojs.set_prop_ascii (t_to_js x757) "passphrase"
                (Ojs.string_to_js x758)
        let (get_oaep_hash : t -> string) =
          fun (x759 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x759) "oaepHash")
        let (set_oaep_hash : t -> string -> unit) =
          fun (x760 : t) ->
            fun (x761 : string) ->
              Ojs.set_prop_ascii (t_to_js x760) "oaepHash"
                (Ojs.string_to_js x761)
        let (get_oaep_label : t -> TypedArray.t) =
          fun (x762 : t) ->
            TypedArray.t_of_js
              (Ojs.get_prop_ascii (t_to_js x762) "oaepLabel")
        let (set_oaep_label : t -> TypedArray.t -> unit) =
          fun (x763 : t) ->
            fun (x764 : TypedArray.t) ->
              Ojs.set_prop_ascii (t_to_js x763) "oaepLabel"
                (TypedArray.t_to_js x764)
        let (get_padding : t -> int) =
          fun (x765 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x765) "padding")
        let (set_padding : t -> int -> unit) =
          fun (x766 : t) ->
            fun (x767 : int) ->
              Ojs.set_prop_ascii (t_to_js x766) "padding"
                (Ojs.int_to_js x767)
      end
    let (public_encrypt :
      key:(KeyLike.t, RsaPrivateKey.t, RsaPublicKey.t) union3 ->
        buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun ~key:(x768 : (KeyLike.t, RsaPrivateKey.t, RsaPublicKey.t) union3)
        ->
        fun ~buffer:(x772 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "publicEncrypt"
               [|(union3_to_js KeyLike.t_to_js RsaPrivateKey.t_to_js
                    RsaPublicKey.t_to_js x768);(ArrayBufferView.t_to_js x772)|])
    let (public_decrypt :
      key:(KeyLike.t, RsaPrivateKey.t, RsaPublicKey.t) union3 ->
        buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun ~key:(x773 : (KeyLike.t, RsaPrivateKey.t, RsaPublicKey.t) union3)
        ->
        fun ~buffer:(x777 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "publicDecrypt"
               [|(union3_to_js KeyLike.t_to_js RsaPrivateKey.t_to_js
                    RsaPublicKey.t_to_js x773);(ArrayBufferView.t_to_js x777)|])
    let (private_decrypt :
      private_key:(KeyLike.t, RsaPrivateKey.t) union2 ->
        buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun ~private_key:(x778 : (KeyLike.t, RsaPrivateKey.t) union2) ->
        fun ~buffer:(x781 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "privateDecrypt"
               [|(union2_to_js KeyLike.t_to_js RsaPrivateKey.t_to_js x778);(
                 ArrayBufferView.t_to_js x781)|])
    let (private_encrypt :
      private_key:(KeyLike.t, RsaPrivateKey.t) union2 ->
        buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun ~private_key:(x782 : (KeyLike.t, RsaPrivateKey.t) union2) ->
        fun ~buffer:(x785 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "privateEncrypt"
               [|(union2_to_js KeyLike.t_to_js RsaPrivateKey.t_to_js x782);(
                 ArrayBufferView.t_to_js x785)|])
    let (get_ciphers : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.crypto "getCiphers" [||])
    let (get_curves : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.crypto "getCurves" [||])
    let (get_fips : unit -> [ `L_n_0  | `L_n_1 ]) =
      fun () ->
        let x788 = Ojs.call Import.crypto "getFips" [||] in
        match Ojs.int_of_js x788 with
        | 0 -> `L_n_0
        | 1 -> `L_n_1
        | _ -> assert false
    let (get_hashes : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.crypto "getHashes" [||])
    module ECDH =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x791 : Ojs.t) -> x791
        and t_to_js : t -> Ojs.t = fun (x790 : Ojs.t) -> x790
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "ECDH") [||])
        let (convert_key :
          key:BinaryLike.t ->
            curve:string ->
              ?input_encoding:BinaryToTextEncoding.t ->
                ?output_encoding:[ `base64  | `hex  | `latin1 ] ->
                  ?format:[ `compressed  | `hybrid  | `uncompressed ] ->
                    unit -> Buffer.t or_string)
          =
          fun ~key:(x792 : BinaryLike.t) ->
            fun ~curve:(x793 : string) ->
              fun ?input_encoding:(x794 : BinaryToTextEncoding.t option) ->
                fun
                  ?output_encoding:(x795 :
                                     [ `base64  | `hex  | `latin1 ] option)
                  ->
                  fun
                    ?format:(x796 :
                              [ `compressed  | `hybrid  | `uncompressed ]
                                option)
                    ->
                    fun () ->
                      or_string_of_js Buffer.t_of_js
                        (let x801 = Ojs.get_prop_ascii Import.crypto "ECDH" in
                         Ojs.call (Ojs.get_prop_ascii x801 "convertKey")
                           "apply"
                           [|x801;((let x797 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x797 "push"
                                         [|(BinaryLike.t_to_js x792)|]);
                                    ignore
                                      (Ojs.call x797 "push"
                                         [|(Ojs.string_to_js x793)|]);
                                    (match x794 with
                                     | Some x800 ->
                                         ignore
                                           (Ojs.call x797 "push"
                                              [|(BinaryToTextEncoding.t_to_js
                                                   x800)|])
                                     | None -> ());
                                    (match x795 with
                                     | Some x799 ->
                                         ignore
                                           (Ojs.call x797 "push"
                                              [|((match x799 with
                                                  | `base64 ->
                                                      Ojs.string_to_js
                                                        "base64"
                                                  | `hex ->
                                                      Ojs.string_to_js "hex"
                                                  | `latin1 ->
                                                      Ojs.string_to_js
                                                        "latin1"))|])
                                     | None -> ());
                                    (match x796 with
                                     | Some x798 ->
                                         ignore
                                           (Ojs.call x797 "push"
                                              [|((match x798 with
                                                  | `compressed ->
                                                      Ojs.string_to_js
                                                        "compressed"
                                                  | `hybrid ->
                                                      Ojs.string_to_js
                                                        "hybrid"
                                                  | `uncompressed ->
                                                      Ojs.string_to_js
                                                        "uncompressed"))|])
                                     | None -> ());
                                    x797))|])
        let (generate_keys : t -> Buffer.t) =
          fun (x803 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x803) "generateKeys" [||])
        let (generate_keys' :
          t ->
            encoding:BinaryToTextEncoding.t ->
              ?format:ECDHKeyFormat.t -> unit -> string)
          =
          fun (x808 : t) ->
            fun ~encoding:(x804 : BinaryToTextEncoding.t) ->
              fun ?format:(x805 : ECDHKeyFormat.t option) ->
                fun () ->
                  Ojs.string_of_js
                    (let x809 = t_to_js x808 in
                     Ojs.call (Ojs.get_prop_ascii x809 "generateKeys")
                       "apply"
                       [|x809;((let x806 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x806 "push"
                                     [|(BinaryToTextEncoding.t_to_js x804)|]);
                                (match x805 with
                                 | Some x807 ->
                                     ignore
                                       (Ojs.call x806 "push"
                                          [|(ECDHKeyFormat.t_to_js x807)|])
                                 | None -> ());
                                x806))|])
        let (compute_secret :
          t -> other_public_key:ArrayBufferView.t -> Buffer.t) =
          fun (x811 : t) ->
            fun ~other_public_key:(x810 : ArrayBufferView.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x811) "computeSecret"
                   [|(ArrayBufferView.t_to_js x810)|])
        let (compute_secret' :
          t ->
            other_public_key:string ->
              input_encoding:BinaryToTextEncoding.t -> Buffer.t)
          =
          fun (x814 : t) ->
            fun ~other_public_key:(x812 : string) ->
              fun ~input_encoding:(x813 : BinaryToTextEncoding.t) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x814) "computeSecret"
                     [|(Ojs.string_to_js x812);(BinaryToTextEncoding.t_to_js
                                                  x813)|])
        let (compute_secret'' :
          t ->
            other_public_key:ArrayBufferView.t ->
              output_encoding:BinaryToTextEncoding.t -> string)
          =
          fun (x817 : t) ->
            fun ~other_public_key:(x815 : ArrayBufferView.t) ->
              fun ~output_encoding:(x816 : BinaryToTextEncoding.t) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x817) "computeSecret"
                     [|(ArrayBufferView.t_to_js x815);(BinaryToTextEncoding.t_to_js
                                                         x816)|])
        let (compute_secret''' :
          t ->
            other_public_key:string ->
              input_encoding:BinaryToTextEncoding.t ->
                output_encoding:BinaryToTextEncoding.t -> string)
          =
          fun (x821 : t) ->
            fun ~other_public_key:(x818 : string) ->
              fun ~input_encoding:(x819 : BinaryToTextEncoding.t) ->
                fun ~output_encoding:(x820 : BinaryToTextEncoding.t) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x821) "computeSecret"
                       [|(Ojs.string_to_js x818);(BinaryToTextEncoding.t_to_js
                                                    x819);(BinaryToTextEncoding.t_to_js
                                                             x820)|])
        let (get_private_key : t -> Buffer.t) =
          fun (x822 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x822) "getPrivateKey" [||])
        let (get_private_key' :
          t -> encoding:BinaryToTextEncoding.t -> string) =
          fun (x824 : t) ->
            fun ~encoding:(x823 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x824) "getPrivateKey"
                   [|(BinaryToTextEncoding.t_to_js x823)|])
        let (get_public_key : t -> Buffer.t) =
          fun (x825 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x825) "getPublicKey" [||])
        let (get_public_key' :
          t ->
            encoding:BinaryToTextEncoding.t ->
              ?format:ECDHKeyFormat.t -> unit -> string)
          =
          fun (x830 : t) ->
            fun ~encoding:(x826 : BinaryToTextEncoding.t) ->
              fun ?format:(x827 : ECDHKeyFormat.t option) ->
                fun () ->
                  Ojs.string_of_js
                    (let x831 = t_to_js x830 in
                     Ojs.call (Ojs.get_prop_ascii x831 "getPublicKey")
                       "apply"
                       [|x831;((let x828 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x828 "push"
                                     [|(BinaryToTextEncoding.t_to_js x826)|]);
                                (match x827 with
                                 | Some x829 ->
                                     ignore
                                       (Ojs.call x828 "push"
                                          [|(ECDHKeyFormat.t_to_js x829)|])
                                 | None -> ());
                                x828))|])
        let (set_private_key : t -> private_key:ArrayBufferView.t -> unit) =
          fun (x833 : t) ->
            fun ~private_key:(x832 : ArrayBufferView.t) ->
              ignore
                (Ojs.call (t_to_js x833) "setPrivateKey"
                   [|(ArrayBufferView.t_to_js x832)|])
        let (set_private_key' :
          t -> private_key:string -> encoding:BinaryToTextEncoding.t -> unit)
          =
          fun (x836 : t) ->
            fun ~private_key:(x834 : string) ->
              fun ~encoding:(x835 : BinaryToTextEncoding.t) ->
                ignore
                  (Ojs.call (t_to_js x836) "setPrivateKey"
                     [|(Ojs.string_to_js x834);(BinaryToTextEncoding.t_to_js
                                                  x835)|])
      end
    let (create_ecdh : curve_name:string -> ECDH.t) =
      fun ~curve_name:(x837 : string) ->
        ECDH.t_of_js
          (Ojs.call Import.crypto "createECDH" [|(Ojs.string_to_js x837)|])
    let (timing_safe_equal :
      a:ArrayBufferView.t -> b:ArrayBufferView.t -> bool) =
      fun ~a:(x838 : ArrayBufferView.t) ->
        fun ~b:(x839 : ArrayBufferView.t) ->
          Ojs.bool_of_js
            (Ojs.call Import.crypto "timingSafeEqual"
               [|(ArrayBufferView.t_to_js x838);(ArrayBufferView.t_to_js x839)|])
    let (d_efault_encoding : BufferEncoding.t) =
      BufferEncoding.t_of_js
        (Ojs.get_prop_ascii Import.crypto "DEFAULT_ENCODING")
    module KeyType =
      struct
        type t =
          [ `dsa  | `ec  | `ed25519  | `ed448  | `rsa  | `x25519  | `x448 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x841 : Ojs.t) ->
            let x842 = x841 in
            match Ojs.string_of_js x842 with
            | "dsa" -> `dsa
            | "ec" -> `ec
            | "ed25519" -> `ed25519
            | "ed448" -> `ed448
            | "rsa" -> `rsa
            | "x25519" -> `x25519
            | "x448" -> `x448
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x840 :
              [ `dsa  | `ec  | `ed25519  | `ed448  | `rsa  | `x25519 
              | `x448 ])
            ->
            match x840 with
            | `dsa -> Ojs.string_to_js "dsa"
            | `ec -> Ojs.string_to_js "ec"
            | `ed25519 -> Ojs.string_to_js "ed25519"
            | `ed448 -> Ojs.string_to_js "ed448"
            | `rsa -> Ojs.string_to_js "rsa"
            | `x25519 -> Ojs.string_to_js "x25519"
            | `x448 -> Ojs.string_to_js "x448"
      end
    module KeyFormat =
      struct
        type t = [ `der  | `pem ]
        let rec t_of_js : Ojs.t -> t =
          fun (x844 : Ojs.t) ->
            let x845 = x844 in
            match Ojs.string_of_js x845 with
            | "der" -> `der
            | "pem" -> `pem
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x843 : [ `der  | `pem ]) ->
            match x843 with
            | `der -> Ojs.string_to_js "der"
            | `pem -> Ojs.string_to_js "pem"
      end
    module BasePrivateKeyEncodingOptions =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x847 : Ojs.t) -> x847
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x846 : Ojs.t) -> x846
        let (get_format : 'T t -> 'T) =
          fun (x848 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x848) "format")
        let (set_format : 'T t -> 'T -> unit) =
          fun (x850 : 'T t) ->
            fun (x851 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x850) "format"
                (Obj.magic x851)
        let (get_cipher : 'T t -> string) =
          fun (x853 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x853) "cipher")
        let (set_cipher : 'T t -> string -> unit) =
          fun (x855 : 'T t) ->
            fun (x856 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x855) "cipher"
                (Ojs.string_to_js x856)
        let (get_passphrase : 'T t -> string) =
          fun (x858 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x858) "passphrase")
        let (set_passphrase : 'T t -> string -> unit) =
          fun (x860 : 'T t) ->
            fun (x861 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x860) "passphrase"
                (Ojs.string_to_js x861)
      end
    module KeyPairKeyObjectResult =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x864 : Ojs.t) -> x864
        and t_to_js : t -> Ojs.t = fun (x863 : Ojs.t) -> x863
        let (get_public_key : t -> KeyObject.t) =
          fun (x865 : t) ->
            KeyObject.t_of_js (Ojs.get_prop_ascii (t_to_js x865) "publicKey")
        let (set_public_key : t -> KeyObject.t -> unit) =
          fun (x866 : t) ->
            fun (x867 : KeyObject.t) ->
              Ojs.set_prop_ascii (t_to_js x866) "publicKey"
                (KeyObject.t_to_js x867)
        let (get_private_key : t -> KeyObject.t) =
          fun (x868 : t) ->
            KeyObject.t_of_js
              (Ojs.get_prop_ascii (t_to_js x868) "privateKey")
        let (set_private_key : t -> KeyObject.t -> unit) =
          fun (x869 : t) ->
            fun (x870 : KeyObject.t) ->
              Ojs.set_prop_ascii (t_to_js x869) "privateKey"
                (KeyObject.t_to_js x870)
      end
    module ED25519KeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x872 : Ojs.t) -> x872
        and t_to_js : t -> Ojs.t = fun (x871 : Ojs.t) -> x871
      end
    module ED448KeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x874 : Ojs.t) -> x874
        and t_to_js : t -> Ojs.t = fun (x873 : Ojs.t) -> x873
      end
    module X25519KeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x876 : Ojs.t) -> x876
        and t_to_js : t -> Ojs.t = fun (x875 : Ojs.t) -> x875
      end
    module X448KeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x878 : Ojs.t) -> x878
        and t_to_js : t -> Ojs.t = fun (x877 : Ojs.t) -> x877
      end
    module ECKeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x880 : Ojs.t) -> x880
        and t_to_js : t -> Ojs.t = fun (x879 : Ojs.t) -> x879
        let (get_named_curve : t -> string) =
          fun (x881 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x881) "namedCurve")
        let (set_named_curve : t -> string -> unit) =
          fun (x882 : t) ->
            fun (x883 : string) ->
              Ojs.set_prop_ascii (t_to_js x882) "namedCurve"
                (Ojs.string_to_js x883)
      end
    module RSAKeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x885 : Ojs.t) -> x885
        and t_to_js : t -> Ojs.t = fun (x884 : Ojs.t) -> x884
        let (get_modulus_length : t -> int) =
          fun (x886 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x886) "modulusLength")
        let (set_modulus_length : t -> int -> unit) =
          fun (x887 : t) ->
            fun (x888 : int) ->
              Ojs.set_prop_ascii (t_to_js x887) "modulusLength"
                (Ojs.int_to_js x888)
        let (get_public_exponent : t -> int) =
          fun (x889 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x889) "publicExponent")
        let (set_public_exponent : t -> int -> unit) =
          fun (x890 : t) ->
            fun (x891 : int) ->
              Ojs.set_prop_ascii (t_to_js x890) "publicExponent"
                (Ojs.int_to_js x891)
      end
    module DSAKeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x893 : Ojs.t) -> x893
        and t_to_js : t -> Ojs.t = fun (x892 : Ojs.t) -> x892
        let (get_modulus_length : t -> int) =
          fun (x894 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x894) "modulusLength")
        let (set_modulus_length : t -> int -> unit) =
          fun (x895 : t) ->
            fun (x896 : int) ->
              Ojs.set_prop_ascii (t_to_js x895) "modulusLength"
                (Ojs.int_to_js x896)
        let (get_divisor_length : t -> int) =
          fun (x897 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x897) "divisorLength")
        let (set_divisor_length : t -> int -> unit) =
          fun (x898 : t) ->
            fun (x899 : int) ->
              Ojs.set_prop_ascii (t_to_js x898) "divisorLength"
                (Ojs.int_to_js x899)
      end
    module RSAKeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) RSAKeyPairOptions.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x903 : Ojs.t) ->
                RSAKeyPairOptions.t_of_js __PubF_of_js __PrivF_of_js x903
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x900 : (__PubF, __PrivF) RSAKeyPairOptions.t) ->
                RSAKeyPairOptions.t_to_js __PubF_to_js __PrivF_to_js x900
        let (get_modulus_length : ('PubF, 'PrivF) t -> int) =
          fun (x906 : ('PubF, 'PrivF) t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x906)
                 "modulusLength")
        let (set_modulus_length : ('PubF, 'PrivF) t -> int -> unit) =
          fun (x909 : ('PubF, 'PrivF) t) ->
            fun (x910 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x909)
                "modulusLength" (Ojs.int_to_js x910)
        let (get_public_exponent : ('PubF, 'PrivF) t -> int) =
          fun (x913 : ('PubF, 'PrivF) t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x913)
                 "publicExponent")
        let (set_public_exponent : ('PubF, 'PrivF) t -> int -> unit) =
          fun (x916 : ('PubF, 'PrivF) t) ->
            fun (x917 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x916)
                "publicExponent" (Ojs.int_to_js x917)
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface9.t) =
          fun (x920 : ('PubF, 'PrivF) t) ->
            AnonymousInterface9.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x920)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface9.t -> unit) =
          fun (x923 : ('PubF, 'PrivF) t) ->
            fun (x924 : AnonymousInterface9.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x923)
                "publicKeyEncoding" (AnonymousInterface9.t_to_js x924)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface8.t)
              intersection2)
          =
          fun (x927 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x930 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x930)
              AnonymousInterface8.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x927)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface8.t)
              intersection2 -> unit)
          =
          fun (x933 : ('PubF, 'PrivF) t) ->
            fun
              (x934 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface8.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x933)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x935 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x935)
                   AnonymousInterface8.t_to_js x934)
      end
    module DSAKeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) DSAKeyPairOptions.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x943 : Ojs.t) ->
                DSAKeyPairOptions.t_of_js __PubF_of_js __PrivF_of_js x943
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x940 : (__PubF, __PrivF) DSAKeyPairOptions.t) ->
                DSAKeyPairOptions.t_to_js __PubF_to_js __PrivF_to_js x940
        let (get_modulus_length : ('PubF, 'PrivF) t -> int) =
          fun (x946 : ('PubF, 'PrivF) t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x946)
                 "modulusLength")
        let (set_modulus_length : ('PubF, 'PrivF) t -> int -> unit) =
          fun (x949 : ('PubF, 'PrivF) t) ->
            fun (x950 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x949)
                "modulusLength" (Ojs.int_to_js x950)
        let (get_divisor_length : ('PubF, 'PrivF) t -> int) =
          fun (x953 : ('PubF, 'PrivF) t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x953)
                 "divisorLength")
        let (set_divisor_length : ('PubF, 'PrivF) t -> int -> unit) =
          fun (x956 : ('PubF, 'PrivF) t) ->
            fun (x957 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x956)
                "divisorLength" (Ojs.int_to_js x957)
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x960 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x960)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x963 : ('PubF, 'PrivF) t) ->
            fun (x964 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x963)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x964)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2)
          =
          fun (x967 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x970 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x970)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x967)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2 -> unit)
          =
          fun (x973 : ('PubF, 'PrivF) t) ->
            fun
              (x974 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x973)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x975 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x975)
                   AnonymousInterface6.t_to_js x974)
      end
    module ECKeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) ECKeyPairOptions.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x983 : Ojs.t) ->
                ECKeyPairOptions.t_of_js __PubF_of_js __PrivF_of_js x983
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x980 : (__PubF, __PrivF) ECKeyPairOptions.t) ->
                ECKeyPairOptions.t_to_js __PubF_to_js __PrivF_to_js x980
        let (get_named_curve : ('PubF, 'PrivF) t -> string) =
          fun (x986 : ('PubF, 'PrivF) t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x986)
                 "namedCurve")
        let (set_named_curve : ('PubF, 'PrivF) t -> string -> unit) =
          fun (x989 : ('PubF, 'PrivF) t) ->
            fun (x990 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x989)
                "namedCurve" (Ojs.string_to_js x990)
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface9.t) =
          fun (x993 : ('PubF, 'PrivF) t) ->
            AnonymousInterface9.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x993)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface9.t -> unit) =
          fun (x996 : ('PubF, 'PrivF) t) ->
            fun (x997 : AnonymousInterface9.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x996)
                "publicKeyEncoding" (AnonymousInterface9.t_to_js x997)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface10.t)
              intersection2)
          =
          fun (x1000 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1003 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x1003)
              AnonymousInterface10.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1000)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface10.t)
              intersection2 -> unit)
          =
          fun (x1006 : ('PubF, 'PrivF) t) ->
            fun
              (x1007 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface10.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1006)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1008 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x1008)
                   AnonymousInterface10.t_to_js x1007)
      end
    module ED25519KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) ED25519KeyPairOptions.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x1016 : Ojs.t) ->
                ED25519KeyPairOptions.t_of_js __PubF_of_js __PrivF_of_js
                  x1016
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x1013 : (__PubF, __PrivF) ED25519KeyPairOptions.t) ->
                ED25519KeyPairOptions.t_to_js __PubF_to_js __PrivF_to_js
                  x1013
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x1019 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1019)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x1022 : ('PubF, 'PrivF) t) ->
            fun (x1023 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1022)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x1023)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2)
          =
          fun (x1026 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1029 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x1029)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1026)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2 -> unit)
          =
          fun (x1032 : ('PubF, 'PrivF) t) ->
            fun
              (x1033 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1032)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1034 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x1034)
                   AnonymousInterface6.t_to_js x1033)
      end
    module ED448KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) ED448KeyPairOptions.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x1042 : Ojs.t) ->
                ED448KeyPairOptions.t_of_js __PubF_of_js __PrivF_of_js x1042
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x1039 : (__PubF, __PrivF) ED448KeyPairOptions.t) ->
                ED448KeyPairOptions.t_to_js __PubF_to_js __PrivF_to_js x1039
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x1045 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1045)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x1048 : ('PubF, 'PrivF) t) ->
            fun (x1049 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1048)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x1049)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2)
          =
          fun (x1052 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1055 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x1055)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1052)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2 -> unit)
          =
          fun (x1058 : ('PubF, 'PrivF) t) ->
            fun
              (x1059 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1058)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1060 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x1060)
                   AnonymousInterface6.t_to_js x1059)
      end
    module X25519KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) X25519KeyPairOptions.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x1068 : Ojs.t) ->
                X25519KeyPairOptions.t_of_js __PubF_of_js __PrivF_of_js x1068
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x1065 : (__PubF, __PrivF) X25519KeyPairOptions.t) ->
                X25519KeyPairOptions.t_to_js __PubF_to_js __PrivF_to_js x1065
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x1071 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1071)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x1074 : ('PubF, 'PrivF) t) ->
            fun (x1075 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1074)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x1075)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2)
          =
          fun (x1078 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1081 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x1081)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1078)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2 -> unit)
          =
          fun (x1084 : ('PubF, 'PrivF) t) ->
            fun
              (x1085 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1084)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1086 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x1086)
                   AnonymousInterface6.t_to_js x1085)
      end
    module X448KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) X448KeyPairOptions.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x1094 : Ojs.t) ->
                X448KeyPairOptions.t_of_js __PubF_of_js __PrivF_of_js x1094
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x1091 : (__PubF, __PrivF) X448KeyPairOptions.t) ->
                X448KeyPairOptions.t_to_js __PubF_to_js __PrivF_to_js x1091
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x1097 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1097)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x1100 : ('PubF, 'PrivF) t) ->
            fun (x1101 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1100)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x1101)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2)
          =
          fun (x1104 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1107 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x1107)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1104)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2 -> unit)
          =
          fun (x1110 : ('PubF, 'PrivF) t) ->
            fun
              (x1111 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1110)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1112 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x1112)
                   AnonymousInterface6.t_to_js x1111)
      end
    module KeyPairSyncResult =
      struct
        type ('T1, 'T2) t = ('T1, 'T2) KeyPairSyncResult.t
        let rec t_of_js :
          'T1 'T2 . (Ojs.t -> 'T1) -> (Ojs.t -> 'T2) -> Ojs.t -> ('T1, 'T2) t
          = fun (type __T1) -> fun (type __T2) ->
          fun (__T1_of_js : Ojs.t -> __T1) ->
            fun (__T2_of_js : Ojs.t -> __T2) ->
              fun (x1120 : Ojs.t) ->
                KeyPairSyncResult.t_of_js __T1_of_js __T2_of_js x1120
        and t_to_js :
          'T1 'T2 . ('T1 -> Ojs.t) -> ('T2 -> Ojs.t) -> ('T1, 'T2) t -> Ojs.t
          = fun (type __T1) -> fun (type __T2) ->
          fun (__T1_to_js : __T1 -> Ojs.t) ->
            fun (__T2_to_js : __T2 -> Ojs.t) ->
              fun (x1117 : (__T1, __T2) KeyPairSyncResult.t) ->
                KeyPairSyncResult.t_to_js __T1_to_js __T2_to_js x1117
        let (get_public_key : ('T1, 'T2) t -> 'T1) =
          fun (x1123 : ('T1, 'T2) t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1123)
                 "publicKey")
        let (set_public_key : ('T1, 'T2) t -> 'T1 -> unit) =
          fun (x1126 : ('T1, 'T2) t) ->
            fun (x1127 : 'T1) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1126)
                "publicKey" (Obj.magic x1127)
        let (get_private_key : ('T1, 'T2) t -> 'T2) =
          fun (x1130 : ('T1, 'T2) t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1130)
                 "privateKey")
        let (set_private_key : ('T1, 'T2) t -> 'T2 -> unit) =
          fun (x1133 : ('T1, 'T2) t) ->
            fun (x1134 : 'T2) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1133)
                "privateKey" (Obj.magic x1134)
      end
    let (generate_key_pair_sync :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `pem ]) RSAKeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1137 : [ `rsa ]) ->
        fun ~options:(x1138 : ([ `pem ], [ `pem ]) RSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1137 with | `rsa -> Ojs.string_to_js "rsa"));(
                 RSAKeyPairOptions.t_to_js
                   (fun (x1139 : [ `pem ]) ->
                      match x1139 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1140 : [ `pem ]) ->
                      match x1140 with | `pem -> Ojs.string_to_js "pem")
                   x1138)|])
    let (generate_key_pair_sync :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `der ]) RSAKeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1143 : [ `rsa ]) ->
        fun ~options:(x1144 : ([ `pem ], [ `der ]) RSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1143 with | `rsa -> Ojs.string_to_js "rsa"));(
                 RSAKeyPairOptions.t_to_js
                   (fun (x1145 : [ `pem ]) ->
                      match x1145 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1146 : [ `der ]) ->
                      match x1146 with | `der -> Ojs.string_to_js "der")
                   x1144)|])
    let (generate_key_pair_sync :
      type_:[ `rsa ] ->
        options:([ `der ], [ `pem ]) RSAKeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1149 : [ `rsa ]) ->
        fun ~options:(x1150 : ([ `der ], [ `pem ]) RSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1149 with | `rsa -> Ojs.string_to_js "rsa"));(
                 RSAKeyPairOptions.t_to_js
                   (fun (x1151 : [ `der ]) ->
                      match x1151 with | `der -> Ojs.string_to_js "der")
                   (fun (x1152 : [ `pem ]) ->
                      match x1152 with | `pem -> Ojs.string_to_js "pem")
                   x1150)|])
    let (generate_key_pair_sync :
      type_:[ `rsa ] ->
        options:([ `der ], [ `der ]) RSAKeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1155 : [ `rsa ]) ->
        fun ~options:(x1156 : ([ `der ], [ `der ]) RSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1155 with | `rsa -> Ojs.string_to_js "rsa"));(
                 RSAKeyPairOptions.t_to_js
                   (fun (x1157 : [ `der ]) ->
                      match x1157 with | `der -> Ojs.string_to_js "der")
                   (fun (x1158 : [ `der ]) ->
                      match x1158 with | `der -> Ojs.string_to_js "der")
                   x1156)|])
    let (generate_key_pair_sync :
      type_:[ `rsa ] ->
        options:RSAKeyPairKeyObjectOptions.t -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1161 : [ `rsa ]) ->
        fun ~options:(x1162 : RSAKeyPairKeyObjectOptions.t) ->
          KeyPairKeyObjectResult.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1161 with | `rsa -> Ojs.string_to_js "rsa"));(
                 RSAKeyPairKeyObjectOptions.t_to_js x1162)|])
    let (generate_key_pair_sync :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `pem ]) DSAKeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1163 : [ `dsa ]) ->
        fun ~options:(x1164 : ([ `pem ], [ `pem ]) DSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1163 with | `dsa -> Ojs.string_to_js "dsa"));(
                 DSAKeyPairOptions.t_to_js
                   (fun (x1165 : [ `pem ]) ->
                      match x1165 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1166 : [ `pem ]) ->
                      match x1166 with | `pem -> Ojs.string_to_js "pem")
                   x1164)|])
    let (generate_key_pair_sync :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `der ]) DSAKeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1169 : [ `dsa ]) ->
        fun ~options:(x1170 : ([ `pem ], [ `der ]) DSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1169 with | `dsa -> Ojs.string_to_js "dsa"));(
                 DSAKeyPairOptions.t_to_js
                   (fun (x1171 : [ `pem ]) ->
                      match x1171 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1172 : [ `der ]) ->
                      match x1172 with | `der -> Ojs.string_to_js "der")
                   x1170)|])
    let (generate_key_pair_sync :
      type_:[ `dsa ] ->
        options:([ `der ], [ `pem ]) DSAKeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1175 : [ `dsa ]) ->
        fun ~options:(x1176 : ([ `der ], [ `pem ]) DSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1175 with | `dsa -> Ojs.string_to_js "dsa"));(
                 DSAKeyPairOptions.t_to_js
                   (fun (x1177 : [ `der ]) ->
                      match x1177 with | `der -> Ojs.string_to_js "der")
                   (fun (x1178 : [ `pem ]) ->
                      match x1178 with | `pem -> Ojs.string_to_js "pem")
                   x1176)|])
    let (generate_key_pair_sync :
      type_:[ `dsa ] ->
        options:([ `der ], [ `der ]) DSAKeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1181 : [ `dsa ]) ->
        fun ~options:(x1182 : ([ `der ], [ `der ]) DSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1181 with | `dsa -> Ojs.string_to_js "dsa"));(
                 DSAKeyPairOptions.t_to_js
                   (fun (x1183 : [ `der ]) ->
                      match x1183 with | `der -> Ojs.string_to_js "der")
                   (fun (x1184 : [ `der ]) ->
                      match x1184 with | `der -> Ojs.string_to_js "der")
                   x1182)|])
    let (generate_key_pair_sync :
      type_:[ `dsa ] ->
        options:DSAKeyPairKeyObjectOptions.t -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1187 : [ `dsa ]) ->
        fun ~options:(x1188 : DSAKeyPairKeyObjectOptions.t) ->
          KeyPairKeyObjectResult.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1187 with | `dsa -> Ojs.string_to_js "dsa"));(
                 DSAKeyPairKeyObjectOptions.t_to_js x1188)|])
    let (generate_key_pair_sync :
      type_:[ `ec ] ->
        options:([ `pem ], [ `pem ]) ECKeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1189 : [ `ec ]) ->
        fun ~options:(x1190 : ([ `pem ], [ `pem ]) ECKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1189 with | `ec -> Ojs.string_to_js "ec"));(
                 ECKeyPairOptions.t_to_js
                   (fun (x1191 : [ `pem ]) ->
                      match x1191 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1192 : [ `pem ]) ->
                      match x1192 with | `pem -> Ojs.string_to_js "pem")
                   x1190)|])
    let (generate_key_pair_sync :
      type_:[ `ec ] ->
        options:([ `pem ], [ `der ]) ECKeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1195 : [ `ec ]) ->
        fun ~options:(x1196 : ([ `pem ], [ `der ]) ECKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1195 with | `ec -> Ojs.string_to_js "ec"));(
                 ECKeyPairOptions.t_to_js
                   (fun (x1197 : [ `pem ]) ->
                      match x1197 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1198 : [ `der ]) ->
                      match x1198 with | `der -> Ojs.string_to_js "der")
                   x1196)|])
    let (generate_key_pair_sync :
      type_:[ `ec ] ->
        options:([ `der ], [ `pem ]) ECKeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1201 : [ `ec ]) ->
        fun ~options:(x1202 : ([ `der ], [ `pem ]) ECKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1201 with | `ec -> Ojs.string_to_js "ec"));(
                 ECKeyPairOptions.t_to_js
                   (fun (x1203 : [ `der ]) ->
                      match x1203 with | `der -> Ojs.string_to_js "der")
                   (fun (x1204 : [ `pem ]) ->
                      match x1204 with | `pem -> Ojs.string_to_js "pem")
                   x1202)|])
    let (generate_key_pair_sync :
      type_:[ `ec ] ->
        options:([ `der ], [ `der ]) ECKeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1207 : [ `ec ]) ->
        fun ~options:(x1208 : ([ `der ], [ `der ]) ECKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1207 with | `ec -> Ojs.string_to_js "ec"));(
                 ECKeyPairOptions.t_to_js
                   (fun (x1209 : [ `der ]) ->
                      match x1209 with | `der -> Ojs.string_to_js "der")
                   (fun (x1210 : [ `der ]) ->
                      match x1210 with | `der -> Ojs.string_to_js "der")
                   x1208)|])
    let (generate_key_pair_sync :
      type_:[ `ec ] ->
        options:ECKeyPairKeyObjectOptions.t -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1213 : [ `ec ]) ->
        fun ~options:(x1214 : ECKeyPairKeyObjectOptions.t) ->
          KeyPairKeyObjectResult.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1213 with | `ec -> Ojs.string_to_js "ec"));(
                 ECKeyPairKeyObjectOptions.t_to_js x1214)|])
    let (generate_key_pair_sync :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `pem ]) ED25519KeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1215 : [ `ed25519 ]) ->
        fun ~options:(x1216 : ([ `pem ], [ `pem ]) ED25519KeyPairOptions.t)
          ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1215 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 ED25519KeyPairOptions.t_to_js
                   (fun (x1217 : [ `pem ]) ->
                      match x1217 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1218 : [ `pem ]) ->
                      match x1218 with | `pem -> Ojs.string_to_js "pem")
                   x1216)|])
    let (generate_key_pair_sync :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `der ]) ED25519KeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1221 : [ `ed25519 ]) ->
        fun ~options:(x1222 : ([ `pem ], [ `der ]) ED25519KeyPairOptions.t)
          ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1221 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 ED25519KeyPairOptions.t_to_js
                   (fun (x1223 : [ `pem ]) ->
                      match x1223 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1224 : [ `der ]) ->
                      match x1224 with | `der -> Ojs.string_to_js "der")
                   x1222)|])
    let (generate_key_pair_sync :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `pem ]) ED25519KeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1227 : [ `ed25519 ]) ->
        fun ~options:(x1228 : ([ `der ], [ `pem ]) ED25519KeyPairOptions.t)
          ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1227 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 ED25519KeyPairOptions.t_to_js
                   (fun (x1229 : [ `der ]) ->
                      match x1229 with | `der -> Ojs.string_to_js "der")
                   (fun (x1230 : [ `pem ]) ->
                      match x1230 with | `pem -> Ojs.string_to_js "pem")
                   x1228)|])
    let (generate_key_pair_sync :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `der ]) ED25519KeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1233 : [ `ed25519 ]) ->
        fun ~options:(x1234 : ([ `der ], [ `der ]) ED25519KeyPairOptions.t)
          ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1233 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 ED25519KeyPairOptions.t_to_js
                   (fun (x1235 : [ `der ]) ->
                      match x1235 with | `der -> Ojs.string_to_js "der")
                   (fun (x1236 : [ `der ]) ->
                      match x1236 with | `der -> Ojs.string_to_js "der")
                   x1234)|])
    let (generate_key_pair_sync :
      type_:[ `ed25519 ] ->
        ?options:ED25519KeyPairKeyObjectOptions.t ->
          unit -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1239 : [ `ed25519 ]) ->
        fun ?options:(x1240 : ED25519KeyPairKeyObjectOptions.t option) ->
          fun () ->
            KeyPairKeyObjectResult.t_of_js
              (let x1243 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1243 "generateKeyPairSync")
                 "apply"
                 [|x1243;((let x1241 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1241 "push"
                                [|((match x1239 with
                                    | `ed25519 -> Ojs.string_to_js "ed25519"))|]);
                           (match x1240 with
                            | Some x1242 ->
                                ignore
                                  (Ojs.call x1241 "push"
                                     [|(ED25519KeyPairKeyObjectOptions.t_to_js
                                          x1242)|])
                            | None -> ());
                           x1241))|])
    let (generate_key_pair_sync :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `pem ]) ED448KeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1244 : [ `ed448 ]) ->
        fun ~options:(x1245 : ([ `pem ], [ `pem ]) ED448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1244 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 ED448KeyPairOptions.t_to_js
                   (fun (x1246 : [ `pem ]) ->
                      match x1246 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1247 : [ `pem ]) ->
                      match x1247 with | `pem -> Ojs.string_to_js "pem")
                   x1245)|])
    let (generate_key_pair_sync :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `der ]) ED448KeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1250 : [ `ed448 ]) ->
        fun ~options:(x1251 : ([ `pem ], [ `der ]) ED448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1250 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 ED448KeyPairOptions.t_to_js
                   (fun (x1252 : [ `pem ]) ->
                      match x1252 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1253 : [ `der ]) ->
                      match x1253 with | `der -> Ojs.string_to_js "der")
                   x1251)|])
    let (generate_key_pair_sync :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `pem ]) ED448KeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1256 : [ `ed448 ]) ->
        fun ~options:(x1257 : ([ `der ], [ `pem ]) ED448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1256 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 ED448KeyPairOptions.t_to_js
                   (fun (x1258 : [ `der ]) ->
                      match x1258 with | `der -> Ojs.string_to_js "der")
                   (fun (x1259 : [ `pem ]) ->
                      match x1259 with | `pem -> Ojs.string_to_js "pem")
                   x1257)|])
    let (generate_key_pair_sync :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `der ]) ED448KeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1262 : [ `ed448 ]) ->
        fun ~options:(x1263 : ([ `der ], [ `der ]) ED448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1262 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 ED448KeyPairOptions.t_to_js
                   (fun (x1264 : [ `der ]) ->
                      match x1264 with | `der -> Ojs.string_to_js "der")
                   (fun (x1265 : [ `der ]) ->
                      match x1265 with | `der -> Ojs.string_to_js "der")
                   x1263)|])
    let (generate_key_pair_sync :
      type_:[ `ed448 ] ->
        ?options:ED448KeyPairKeyObjectOptions.t ->
          unit -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1268 : [ `ed448 ]) ->
        fun ?options:(x1269 : ED448KeyPairKeyObjectOptions.t option) ->
          fun () ->
            KeyPairKeyObjectResult.t_of_js
              (let x1272 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1272 "generateKeyPairSync")
                 "apply"
                 [|x1272;((let x1270 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1270 "push"
                                [|((match x1268 with
                                    | `ed448 -> Ojs.string_to_js "ed448"))|]);
                           (match x1269 with
                            | Some x1271 ->
                                ignore
                                  (Ojs.call x1270 "push"
                                     [|(ED448KeyPairKeyObjectOptions.t_to_js
                                          x1271)|])
                            | None -> ());
                           x1270))|])
    let (generate_key_pair_sync :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `pem ]) X25519KeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1273 : [ `x25519 ]) ->
        fun ~options:(x1274 : ([ `pem ], [ `pem ]) X25519KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1273 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 X25519KeyPairOptions.t_to_js
                   (fun (x1275 : [ `pem ]) ->
                      match x1275 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1276 : [ `pem ]) ->
                      match x1276 with | `pem -> Ojs.string_to_js "pem")
                   x1274)|])
    let (generate_key_pair_sync :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `der ]) X25519KeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1279 : [ `x25519 ]) ->
        fun ~options:(x1280 : ([ `pem ], [ `der ]) X25519KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1279 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 X25519KeyPairOptions.t_to_js
                   (fun (x1281 : [ `pem ]) ->
                      match x1281 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1282 : [ `der ]) ->
                      match x1282 with | `der -> Ojs.string_to_js "der")
                   x1280)|])
    let (generate_key_pair_sync :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `pem ]) X25519KeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1285 : [ `x25519 ]) ->
        fun ~options:(x1286 : ([ `der ], [ `pem ]) X25519KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1285 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 X25519KeyPairOptions.t_to_js
                   (fun (x1287 : [ `der ]) ->
                      match x1287 with | `der -> Ojs.string_to_js "der")
                   (fun (x1288 : [ `pem ]) ->
                      match x1288 with | `pem -> Ojs.string_to_js "pem")
                   x1286)|])
    let (generate_key_pair_sync :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `der ]) X25519KeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1291 : [ `x25519 ]) ->
        fun ~options:(x1292 : ([ `der ], [ `der ]) X25519KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1291 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 X25519KeyPairOptions.t_to_js
                   (fun (x1293 : [ `der ]) ->
                      match x1293 with | `der -> Ojs.string_to_js "der")
                   (fun (x1294 : [ `der ]) ->
                      match x1294 with | `der -> Ojs.string_to_js "der")
                   x1292)|])
    let (generate_key_pair_sync :
      type_:[ `x25519 ] ->
        ?options:X25519KeyPairKeyObjectOptions.t ->
          unit -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1297 : [ `x25519 ]) ->
        fun ?options:(x1298 : X25519KeyPairKeyObjectOptions.t option) ->
          fun () ->
            KeyPairKeyObjectResult.t_of_js
              (let x1301 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1301 "generateKeyPairSync")
                 "apply"
                 [|x1301;((let x1299 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1299 "push"
                                [|((match x1297 with
                                    | `x25519 -> Ojs.string_to_js "x25519"))|]);
                           (match x1298 with
                            | Some x1300 ->
                                ignore
                                  (Ojs.call x1299 "push"
                                     [|(X25519KeyPairKeyObjectOptions.t_to_js
                                          x1300)|])
                            | None -> ());
                           x1299))|])
    let (generate_key_pair_sync :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `pem ]) X448KeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1302 : [ `x448 ]) ->
        fun ~options:(x1303 : ([ `pem ], [ `pem ]) X448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1302 with | `x448 -> Ojs.string_to_js "x448"));(
                 X448KeyPairOptions.t_to_js
                   (fun (x1304 : [ `pem ]) ->
                      match x1304 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1305 : [ `pem ]) ->
                      match x1305 with | `pem -> Ojs.string_to_js "pem")
                   x1303)|])
    let (generate_key_pair_sync :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `der ]) X448KeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1308 : [ `x448 ]) ->
        fun ~options:(x1309 : ([ `pem ], [ `der ]) X448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1308 with | `x448 -> Ojs.string_to_js "x448"));(
                 X448KeyPairOptions.t_to_js
                   (fun (x1310 : [ `pem ]) ->
                      match x1310 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1311 : [ `der ]) ->
                      match x1311 with | `der -> Ojs.string_to_js "der")
                   x1309)|])
    let (generate_key_pair_sync :
      type_:[ `x448 ] ->
        options:([ `der ], [ `pem ]) X448KeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1314 : [ `x448 ]) ->
        fun ~options:(x1315 : ([ `der ], [ `pem ]) X448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1314 with | `x448 -> Ojs.string_to_js "x448"));(
                 X448KeyPairOptions.t_to_js
                   (fun (x1316 : [ `der ]) ->
                      match x1316 with | `der -> Ojs.string_to_js "der")
                   (fun (x1317 : [ `pem ]) ->
                      match x1317 with | `pem -> Ojs.string_to_js "pem")
                   x1315)|])
    let (generate_key_pair_sync :
      type_:[ `x448 ] ->
        options:([ `der ], [ `der ]) X448KeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1320 : [ `x448 ]) ->
        fun ~options:(x1321 : ([ `der ], [ `der ]) X448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1320 with | `x448 -> Ojs.string_to_js "x448"));(
                 X448KeyPairOptions.t_to_js
                   (fun (x1322 : [ `der ]) ->
                      match x1322 with | `der -> Ojs.string_to_js "der")
                   (fun (x1323 : [ `der ]) ->
                      match x1323 with | `der -> Ojs.string_to_js "der")
                   x1321)|])
    let (generate_key_pair_sync :
      type_:[ `x448 ] ->
        ?options:X448KeyPairKeyObjectOptions.t ->
          unit -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1326 : [ `x448 ]) ->
        fun ?options:(x1327 : X448KeyPairKeyObjectOptions.t option) ->
          fun () ->
            KeyPairKeyObjectResult.t_of_js
              (let x1330 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1330 "generateKeyPairSync")
                 "apply"
                 [|x1330;((let x1328 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1328 "push"
                                [|((match x1326 with
                                    | `x448 -> Ojs.string_to_js "x448"))|]);
                           (match x1327 with
                            | Some x1329 ->
                                ignore
                                  (Ojs.call x1328 "push"
                                     [|(X448KeyPairKeyObjectOptions.t_to_js
                                          x1329)|])
                            | None -> ());
                           x1328))|])
    let (generate_key_pair :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `pem ]) RSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1331 : [ `rsa ]) ->
        fun ~options:(x1332 : ([ `pem ], [ `pem ]) RSAKeyPairOptions.t) ->
          fun
            ~callback:(x1335 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1331 with | `rsa -> Ojs.string_to_js "rsa"));(
                   RSAKeyPairOptions.t_to_js
                     (fun (x1333 : [ `pem ]) ->
                        match x1333 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1334 : [ `pem ]) ->
                        match x1334 with | `pem -> Ojs.string_to_js "pem")
                     x1332);(Ojs.fun_to_js 3
                               (fun (x1336 : Ojs.t) ->
                                  fun (x1338 : Ojs.t) ->
                                    fun (x1339 : Ojs.t) ->
                                      x1335
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1336)
                                        ~public_key:(Ojs.string_of_js x1338)
                                        ~private_key:(Ojs.string_of_js x1339)))|])
    let (generate_key_pair :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `der ]) RSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1340 : [ `rsa ]) ->
        fun ~options:(x1341 : ([ `pem ], [ `der ]) RSAKeyPairOptions.t) ->
          fun
            ~callback:(x1344 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1340 with | `rsa -> Ojs.string_to_js "rsa"));(
                   RSAKeyPairOptions.t_to_js
                     (fun (x1342 : [ `pem ]) ->
                        match x1342 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1343 : [ `der ]) ->
                        match x1343 with | `der -> Ojs.string_to_js "der")
                     x1341);(Ojs.fun_to_js 3
                               (fun (x1345 : Ojs.t) ->
                                  fun (x1347 : Ojs.t) ->
                                    fun (x1348 : Ojs.t) ->
                                      x1344
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1345)
                                        ~public_key:(Ojs.string_of_js x1347)
                                        ~private_key:(Buffer.t_of_js x1348)))|])
    let (generate_key_pair :
      type_:[ `rsa ] ->
        options:([ `der ], [ `pem ]) RSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1349 : [ `rsa ]) ->
        fun ~options:(x1350 : ([ `der ], [ `pem ]) RSAKeyPairOptions.t) ->
          fun
            ~callback:(x1353 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1349 with | `rsa -> Ojs.string_to_js "rsa"));(
                   RSAKeyPairOptions.t_to_js
                     (fun (x1351 : [ `der ]) ->
                        match x1351 with | `der -> Ojs.string_to_js "der")
                     (fun (x1352 : [ `pem ]) ->
                        match x1352 with | `pem -> Ojs.string_to_js "pem")
                     x1350);(Ojs.fun_to_js 3
                               (fun (x1354 : Ojs.t) ->
                                  fun (x1356 : Ojs.t) ->
                                    fun (x1357 : Ojs.t) ->
                                      x1353
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1354)
                                        ~public_key:(Buffer.t_of_js x1356)
                                        ~private_key:(Ojs.string_of_js x1357)))|])
    let (generate_key_pair :
      type_:[ `rsa ] ->
        options:([ `der ], [ `der ]) RSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1358 : [ `rsa ]) ->
        fun ~options:(x1359 : ([ `der ], [ `der ]) RSAKeyPairOptions.t) ->
          fun
            ~callback:(x1362 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1358 with | `rsa -> Ojs.string_to_js "rsa"));(
                   RSAKeyPairOptions.t_to_js
                     (fun (x1360 : [ `der ]) ->
                        match x1360 with | `der -> Ojs.string_to_js "der")
                     (fun (x1361 : [ `der ]) ->
                        match x1361 with | `der -> Ojs.string_to_js "der")
                     x1359);(Ojs.fun_to_js 3
                               (fun (x1363 : Ojs.t) ->
                                  fun (x1365 : Ojs.t) ->
                                    fun (x1366 : Ojs.t) ->
                                      x1362
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1363)
                                        ~public_key:(Buffer.t_of_js x1365)
                                        ~private_key:(Buffer.t_of_js x1366)))|])
    let (generate_key_pair :
      type_:[ `rsa ] ->
        options:RSAKeyPairKeyObjectOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1367 : [ `rsa ]) ->
        fun ~options:(x1368 : RSAKeyPairKeyObjectOptions.t) ->
          fun
            ~callback:(x1369 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1367 with | `rsa -> Ojs.string_to_js "rsa"));(
                   RSAKeyPairKeyObjectOptions.t_to_js x1368);(Ojs.fun_to_js 3
                                                                (fun
                                                                   (x1370 :
                                                                    Ojs.t)
                                                                   ->
                                                                   fun
                                                                    (x1372 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1373 :
                                                                    Ojs.t) ->
                                                                    x1369
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x1370)
                                                                    ~public_key:(
                                                                    KeyObject.t_of_js
                                                                    x1372)
                                                                    ~private_key:(
                                                                    KeyObject.t_of_js
                                                                    x1373)))|])
    let (generate_key_pair :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `pem ]) DSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1374 : [ `dsa ]) ->
        fun ~options:(x1375 : ([ `pem ], [ `pem ]) DSAKeyPairOptions.t) ->
          fun
            ~callback:(x1378 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1374 with | `dsa -> Ojs.string_to_js "dsa"));(
                   DSAKeyPairOptions.t_to_js
                     (fun (x1376 : [ `pem ]) ->
                        match x1376 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1377 : [ `pem ]) ->
                        match x1377 with | `pem -> Ojs.string_to_js "pem")
                     x1375);(Ojs.fun_to_js 3
                               (fun (x1379 : Ojs.t) ->
                                  fun (x1381 : Ojs.t) ->
                                    fun (x1382 : Ojs.t) ->
                                      x1378
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1379)
                                        ~public_key:(Ojs.string_of_js x1381)
                                        ~private_key:(Ojs.string_of_js x1382)))|])
    let (generate_key_pair :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `der ]) DSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1383 : [ `dsa ]) ->
        fun ~options:(x1384 : ([ `pem ], [ `der ]) DSAKeyPairOptions.t) ->
          fun
            ~callback:(x1387 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1383 with | `dsa -> Ojs.string_to_js "dsa"));(
                   DSAKeyPairOptions.t_to_js
                     (fun (x1385 : [ `pem ]) ->
                        match x1385 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1386 : [ `der ]) ->
                        match x1386 with | `der -> Ojs.string_to_js "der")
                     x1384);(Ojs.fun_to_js 3
                               (fun (x1388 : Ojs.t) ->
                                  fun (x1390 : Ojs.t) ->
                                    fun (x1391 : Ojs.t) ->
                                      x1387
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1388)
                                        ~public_key:(Ojs.string_of_js x1390)
                                        ~private_key:(Buffer.t_of_js x1391)))|])
    let (generate_key_pair :
      type_:[ `dsa ] ->
        options:([ `der ], [ `pem ]) DSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1392 : [ `dsa ]) ->
        fun ~options:(x1393 : ([ `der ], [ `pem ]) DSAKeyPairOptions.t) ->
          fun
            ~callback:(x1396 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1392 with | `dsa -> Ojs.string_to_js "dsa"));(
                   DSAKeyPairOptions.t_to_js
                     (fun (x1394 : [ `der ]) ->
                        match x1394 with | `der -> Ojs.string_to_js "der")
                     (fun (x1395 : [ `pem ]) ->
                        match x1395 with | `pem -> Ojs.string_to_js "pem")
                     x1393);(Ojs.fun_to_js 3
                               (fun (x1397 : Ojs.t) ->
                                  fun (x1399 : Ojs.t) ->
                                    fun (x1400 : Ojs.t) ->
                                      x1396
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1397)
                                        ~public_key:(Buffer.t_of_js x1399)
                                        ~private_key:(Ojs.string_of_js x1400)))|])
    let (generate_key_pair :
      type_:[ `dsa ] ->
        options:([ `der ], [ `der ]) DSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1401 : [ `dsa ]) ->
        fun ~options:(x1402 : ([ `der ], [ `der ]) DSAKeyPairOptions.t) ->
          fun
            ~callback:(x1405 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1401 with | `dsa -> Ojs.string_to_js "dsa"));(
                   DSAKeyPairOptions.t_to_js
                     (fun (x1403 : [ `der ]) ->
                        match x1403 with | `der -> Ojs.string_to_js "der")
                     (fun (x1404 : [ `der ]) ->
                        match x1404 with | `der -> Ojs.string_to_js "der")
                     x1402);(Ojs.fun_to_js 3
                               (fun (x1406 : Ojs.t) ->
                                  fun (x1408 : Ojs.t) ->
                                    fun (x1409 : Ojs.t) ->
                                      x1405
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1406)
                                        ~public_key:(Buffer.t_of_js x1408)
                                        ~private_key:(Buffer.t_of_js x1409)))|])
    let (generate_key_pair :
      type_:[ `dsa ] ->
        options:DSAKeyPairKeyObjectOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1410 : [ `dsa ]) ->
        fun ~options:(x1411 : DSAKeyPairKeyObjectOptions.t) ->
          fun
            ~callback:(x1412 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1410 with | `dsa -> Ojs.string_to_js "dsa"));(
                   DSAKeyPairKeyObjectOptions.t_to_js x1411);(Ojs.fun_to_js 3
                                                                (fun
                                                                   (x1413 :
                                                                    Ojs.t)
                                                                   ->
                                                                   fun
                                                                    (x1415 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1416 :
                                                                    Ojs.t) ->
                                                                    x1412
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x1413)
                                                                    ~public_key:(
                                                                    KeyObject.t_of_js
                                                                    x1415)
                                                                    ~private_key:(
                                                                    KeyObject.t_of_js
                                                                    x1416)))|])
    let (generate_key_pair :
      type_:[ `ec ] ->
        options:([ `pem ], [ `pem ]) ECKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1417 : [ `ec ]) ->
        fun ~options:(x1418 : ([ `pem ], [ `pem ]) ECKeyPairOptions.t) ->
          fun
            ~callback:(x1421 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1417 with | `ec -> Ojs.string_to_js "ec"));(
                   ECKeyPairOptions.t_to_js
                     (fun (x1419 : [ `pem ]) ->
                        match x1419 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1420 : [ `pem ]) ->
                        match x1420 with | `pem -> Ojs.string_to_js "pem")
                     x1418);(Ojs.fun_to_js 3
                               (fun (x1422 : Ojs.t) ->
                                  fun (x1424 : Ojs.t) ->
                                    fun (x1425 : Ojs.t) ->
                                      x1421
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1422)
                                        ~public_key:(Ojs.string_of_js x1424)
                                        ~private_key:(Ojs.string_of_js x1425)))|])
    let (generate_key_pair :
      type_:[ `ec ] ->
        options:([ `pem ], [ `der ]) ECKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1426 : [ `ec ]) ->
        fun ~options:(x1427 : ([ `pem ], [ `der ]) ECKeyPairOptions.t) ->
          fun
            ~callback:(x1430 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1426 with | `ec -> Ojs.string_to_js "ec"));(
                   ECKeyPairOptions.t_to_js
                     (fun (x1428 : [ `pem ]) ->
                        match x1428 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1429 : [ `der ]) ->
                        match x1429 with | `der -> Ojs.string_to_js "der")
                     x1427);(Ojs.fun_to_js 3
                               (fun (x1431 : Ojs.t) ->
                                  fun (x1433 : Ojs.t) ->
                                    fun (x1434 : Ojs.t) ->
                                      x1430
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1431)
                                        ~public_key:(Ojs.string_of_js x1433)
                                        ~private_key:(Buffer.t_of_js x1434)))|])
    let (generate_key_pair :
      type_:[ `ec ] ->
        options:([ `der ], [ `pem ]) ECKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1435 : [ `ec ]) ->
        fun ~options:(x1436 : ([ `der ], [ `pem ]) ECKeyPairOptions.t) ->
          fun
            ~callback:(x1439 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1435 with | `ec -> Ojs.string_to_js "ec"));(
                   ECKeyPairOptions.t_to_js
                     (fun (x1437 : [ `der ]) ->
                        match x1437 with | `der -> Ojs.string_to_js "der")
                     (fun (x1438 : [ `pem ]) ->
                        match x1438 with | `pem -> Ojs.string_to_js "pem")
                     x1436);(Ojs.fun_to_js 3
                               (fun (x1440 : Ojs.t) ->
                                  fun (x1442 : Ojs.t) ->
                                    fun (x1443 : Ojs.t) ->
                                      x1439
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1440)
                                        ~public_key:(Buffer.t_of_js x1442)
                                        ~private_key:(Ojs.string_of_js x1443)))|])
    let (generate_key_pair :
      type_:[ `ec ] ->
        options:([ `der ], [ `der ]) ECKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1444 : [ `ec ]) ->
        fun ~options:(x1445 : ([ `der ], [ `der ]) ECKeyPairOptions.t) ->
          fun
            ~callback:(x1448 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1444 with | `ec -> Ojs.string_to_js "ec"));(
                   ECKeyPairOptions.t_to_js
                     (fun (x1446 : [ `der ]) ->
                        match x1446 with | `der -> Ojs.string_to_js "der")
                     (fun (x1447 : [ `der ]) ->
                        match x1447 with | `der -> Ojs.string_to_js "der")
                     x1445);(Ojs.fun_to_js 3
                               (fun (x1449 : Ojs.t) ->
                                  fun (x1451 : Ojs.t) ->
                                    fun (x1452 : Ojs.t) ->
                                      x1448
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1449)
                                        ~public_key:(Buffer.t_of_js x1451)
                                        ~private_key:(Buffer.t_of_js x1452)))|])
    let (generate_key_pair :
      type_:[ `ec ] ->
        options:ECKeyPairKeyObjectOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1453 : [ `ec ]) ->
        fun ~options:(x1454 : ECKeyPairKeyObjectOptions.t) ->
          fun
            ~callback:(x1455 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1453 with | `ec -> Ojs.string_to_js "ec"));(
                   ECKeyPairKeyObjectOptions.t_to_js x1454);(Ojs.fun_to_js 3
                                                               (fun
                                                                  (x1456 :
                                                                    Ojs.t)
                                                                  ->
                                                                  fun
                                                                    (x1458 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1459 :
                                                                    Ojs.t) ->
                                                                    x1455
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x1456)
                                                                    ~public_key:(
                                                                    KeyObject.t_of_js
                                                                    x1458)
                                                                    ~private_key:(
                                                                    KeyObject.t_of_js
                                                                    x1459)))|])
    let (generate_key_pair :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `pem ]) ED25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1460 : [ `ed25519 ]) ->
        fun ~options:(x1461 : ([ `pem ], [ `pem ]) ED25519KeyPairOptions.t)
          ->
          fun
            ~callback:(x1464 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1460 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1462 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1462
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1463 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1463
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1461);(
                   Ojs.fun_to_js 3
                     (fun (x1465 : Ojs.t) ->
                        fun (x1467 : Ojs.t) ->
                          fun (x1468 : Ojs.t) ->
                            x1464 ~err:(or_null_of_js Error.t_of_js x1465)
                              ~public_key:(Ojs.string_of_js x1467)
                              ~private_key:(Ojs.string_of_js x1468)))|])
    let (generate_key_pair :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `der ]) ED25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1469 : [ `ed25519 ]) ->
        fun ~options:(x1470 : ([ `pem ], [ `der ]) ED25519KeyPairOptions.t)
          ->
          fun
            ~callback:(x1473 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1469 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1471 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1471
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1472 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1472
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1470);(
                   Ojs.fun_to_js 3
                     (fun (x1474 : Ojs.t) ->
                        fun (x1476 : Ojs.t) ->
                          fun (x1477 : Ojs.t) ->
                            x1473 ~err:(or_null_of_js Error.t_of_js x1474)
                              ~public_key:(Ojs.string_of_js x1476)
                              ~private_key:(Buffer.t_of_js x1477)))|])
    let (generate_key_pair :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `pem ]) ED25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1478 : [ `ed25519 ]) ->
        fun ~options:(x1479 : ([ `der ], [ `pem ]) ED25519KeyPairOptions.t)
          ->
          fun
            ~callback:(x1482 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1478 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1480 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1480
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1481 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1481
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1479);(
                   Ojs.fun_to_js 3
                     (fun (x1483 : Ojs.t) ->
                        fun (x1485 : Ojs.t) ->
                          fun (x1486 : Ojs.t) ->
                            x1482 ~err:(or_null_of_js Error.t_of_js x1483)
                              ~public_key:(Buffer.t_of_js x1485)
                              ~private_key:(Ojs.string_of_js x1486)))|])
    let (generate_key_pair :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `der ]) ED25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1487 : [ `ed25519 ]) ->
        fun ~options:(x1488 : ([ `der ], [ `der ]) ED25519KeyPairOptions.t)
          ->
          fun
            ~callback:(x1491 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1487 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1489 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1489
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1490 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1490
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1488);(
                   Ojs.fun_to_js 3
                     (fun (x1492 : Ojs.t) ->
                        fun (x1494 : Ojs.t) ->
                          fun (x1495 : Ojs.t) ->
                            x1491 ~err:(or_null_of_js Error.t_of_js x1492)
                              ~public_key:(Buffer.t_of_js x1494)
                              ~private_key:(Buffer.t_of_js x1495)))|])
    let (generate_key_pair :
      type_:[ `ed25519 ] ->
        options:ED25519KeyPairKeyObjectOptions.t or_undefined ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1496 : [ `ed25519 ]) ->
        fun ~options:(x1497 : ED25519KeyPairKeyObjectOptions.t or_undefined)
          ->
          fun
            ~callback:(x1499 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1496 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(or_undefined_to_js
                                                                   ED25519KeyPairKeyObjectOptions.t_to_js
                                                                   x1497);(
                   Ojs.fun_to_js 3
                     (fun (x1500 : Ojs.t) ->
                        fun (x1502 : Ojs.t) ->
                          fun (x1503 : Ojs.t) ->
                            x1499 ~err:(or_null_of_js Error.t_of_js x1500)
                              ~public_key:(KeyObject.t_of_js x1502)
                              ~private_key:(KeyObject.t_of_js x1503)))|])
    let (generate_key_pair :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `pem ]) ED448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1504 : [ `ed448 ]) ->
        fun ~options:(x1505 : ([ `pem ], [ `pem ]) ED448KeyPairOptions.t) ->
          fun
            ~callback:(x1508 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1504 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   ED448KeyPairOptions.t_to_js
                     (fun (x1506 : [ `pem ]) ->
                        match x1506 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1507 : [ `pem ]) ->
                        match x1507 with | `pem -> Ojs.string_to_js "pem")
                     x1505);(Ojs.fun_to_js 3
                               (fun (x1509 : Ojs.t) ->
                                  fun (x1511 : Ojs.t) ->
                                    fun (x1512 : Ojs.t) ->
                                      x1508
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1509)
                                        ~public_key:(Ojs.string_of_js x1511)
                                        ~private_key:(Ojs.string_of_js x1512)))|])
    let (generate_key_pair :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `der ]) ED448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1513 : [ `ed448 ]) ->
        fun ~options:(x1514 : ([ `pem ], [ `der ]) ED448KeyPairOptions.t) ->
          fun
            ~callback:(x1517 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1513 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   ED448KeyPairOptions.t_to_js
                     (fun (x1515 : [ `pem ]) ->
                        match x1515 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1516 : [ `der ]) ->
                        match x1516 with | `der -> Ojs.string_to_js "der")
                     x1514);(Ojs.fun_to_js 3
                               (fun (x1518 : Ojs.t) ->
                                  fun (x1520 : Ojs.t) ->
                                    fun (x1521 : Ojs.t) ->
                                      x1517
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1518)
                                        ~public_key:(Ojs.string_of_js x1520)
                                        ~private_key:(Buffer.t_of_js x1521)))|])
    let (generate_key_pair :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `pem ]) ED448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1522 : [ `ed448 ]) ->
        fun ~options:(x1523 : ([ `der ], [ `pem ]) ED448KeyPairOptions.t) ->
          fun
            ~callback:(x1526 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1522 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   ED448KeyPairOptions.t_to_js
                     (fun (x1524 : [ `der ]) ->
                        match x1524 with | `der -> Ojs.string_to_js "der")
                     (fun (x1525 : [ `pem ]) ->
                        match x1525 with | `pem -> Ojs.string_to_js "pem")
                     x1523);(Ojs.fun_to_js 3
                               (fun (x1527 : Ojs.t) ->
                                  fun (x1529 : Ojs.t) ->
                                    fun (x1530 : Ojs.t) ->
                                      x1526
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1527)
                                        ~public_key:(Buffer.t_of_js x1529)
                                        ~private_key:(Ojs.string_of_js x1530)))|])
    let (generate_key_pair :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `der ]) ED448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1531 : [ `ed448 ]) ->
        fun ~options:(x1532 : ([ `der ], [ `der ]) ED448KeyPairOptions.t) ->
          fun
            ~callback:(x1535 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1531 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   ED448KeyPairOptions.t_to_js
                     (fun (x1533 : [ `der ]) ->
                        match x1533 with | `der -> Ojs.string_to_js "der")
                     (fun (x1534 : [ `der ]) ->
                        match x1534 with | `der -> Ojs.string_to_js "der")
                     x1532);(Ojs.fun_to_js 3
                               (fun (x1536 : Ojs.t) ->
                                  fun (x1538 : Ojs.t) ->
                                    fun (x1539 : Ojs.t) ->
                                      x1535
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1536)
                                        ~public_key:(Buffer.t_of_js x1538)
                                        ~private_key:(Buffer.t_of_js x1539)))|])
    let (generate_key_pair :
      type_:[ `ed448 ] ->
        options:ED448KeyPairKeyObjectOptions.t or_undefined ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1540 : [ `ed448 ]) ->
        fun ~options:(x1541 : ED448KeyPairKeyObjectOptions.t or_undefined) ->
          fun
            ~callback:(x1543 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1540 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   or_undefined_to_js ED448KeyPairKeyObjectOptions.t_to_js
                     x1541);(Ojs.fun_to_js 3
                               (fun (x1544 : Ojs.t) ->
                                  fun (x1546 : Ojs.t) ->
                                    fun (x1547 : Ojs.t) ->
                                      x1543
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1544)
                                        ~public_key:(KeyObject.t_of_js x1546)
                                        ~private_key:(KeyObject.t_of_js x1547)))|])
    let (generate_key_pair :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `pem ]) X25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1548 : [ `x25519 ]) ->
        fun ~options:(x1549 : ([ `pem ], [ `pem ]) X25519KeyPairOptions.t) ->
          fun
            ~callback:(x1552 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1548 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   X25519KeyPairOptions.t_to_js
                     (fun (x1550 : [ `pem ]) ->
                        match x1550 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1551 : [ `pem ]) ->
                        match x1551 with | `pem -> Ojs.string_to_js "pem")
                     x1549);(Ojs.fun_to_js 3
                               (fun (x1553 : Ojs.t) ->
                                  fun (x1555 : Ojs.t) ->
                                    fun (x1556 : Ojs.t) ->
                                      x1552
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1553)
                                        ~public_key:(Ojs.string_of_js x1555)
                                        ~private_key:(Ojs.string_of_js x1556)))|])
    let (generate_key_pair :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `der ]) X25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1557 : [ `x25519 ]) ->
        fun ~options:(x1558 : ([ `pem ], [ `der ]) X25519KeyPairOptions.t) ->
          fun
            ~callback:(x1561 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1557 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   X25519KeyPairOptions.t_to_js
                     (fun (x1559 : [ `pem ]) ->
                        match x1559 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1560 : [ `der ]) ->
                        match x1560 with | `der -> Ojs.string_to_js "der")
                     x1558);(Ojs.fun_to_js 3
                               (fun (x1562 : Ojs.t) ->
                                  fun (x1564 : Ojs.t) ->
                                    fun (x1565 : Ojs.t) ->
                                      x1561
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1562)
                                        ~public_key:(Ojs.string_of_js x1564)
                                        ~private_key:(Buffer.t_of_js x1565)))|])
    let (generate_key_pair :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `pem ]) X25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1566 : [ `x25519 ]) ->
        fun ~options:(x1567 : ([ `der ], [ `pem ]) X25519KeyPairOptions.t) ->
          fun
            ~callback:(x1570 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1566 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   X25519KeyPairOptions.t_to_js
                     (fun (x1568 : [ `der ]) ->
                        match x1568 with | `der -> Ojs.string_to_js "der")
                     (fun (x1569 : [ `pem ]) ->
                        match x1569 with | `pem -> Ojs.string_to_js "pem")
                     x1567);(Ojs.fun_to_js 3
                               (fun (x1571 : Ojs.t) ->
                                  fun (x1573 : Ojs.t) ->
                                    fun (x1574 : Ojs.t) ->
                                      x1570
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1571)
                                        ~public_key:(Buffer.t_of_js x1573)
                                        ~private_key:(Ojs.string_of_js x1574)))|])
    let (generate_key_pair :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `der ]) X25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1575 : [ `x25519 ]) ->
        fun ~options:(x1576 : ([ `der ], [ `der ]) X25519KeyPairOptions.t) ->
          fun
            ~callback:(x1579 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1575 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   X25519KeyPairOptions.t_to_js
                     (fun (x1577 : [ `der ]) ->
                        match x1577 with | `der -> Ojs.string_to_js "der")
                     (fun (x1578 : [ `der ]) ->
                        match x1578 with | `der -> Ojs.string_to_js "der")
                     x1576);(Ojs.fun_to_js 3
                               (fun (x1580 : Ojs.t) ->
                                  fun (x1582 : Ojs.t) ->
                                    fun (x1583 : Ojs.t) ->
                                      x1579
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1580)
                                        ~public_key:(Buffer.t_of_js x1582)
                                        ~private_key:(Buffer.t_of_js x1583)))|])
    let (generate_key_pair :
      type_:[ `x25519 ] ->
        options:X25519KeyPairKeyObjectOptions.t or_undefined ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1584 : [ `x25519 ]) ->
        fun ~options:(x1585 : X25519KeyPairKeyObjectOptions.t or_undefined)
          ->
          fun
            ~callback:(x1587 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1584 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   or_undefined_to_js X25519KeyPairKeyObjectOptions.t_to_js
                     x1585);(Ojs.fun_to_js 3
                               (fun (x1588 : Ojs.t) ->
                                  fun (x1590 : Ojs.t) ->
                                    fun (x1591 : Ojs.t) ->
                                      x1587
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1588)
                                        ~public_key:(KeyObject.t_of_js x1590)
                                        ~private_key:(KeyObject.t_of_js x1591)))|])
    let (generate_key_pair :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `pem ]) X448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1592 : [ `x448 ]) ->
        fun ~options:(x1593 : ([ `pem ], [ `pem ]) X448KeyPairOptions.t) ->
          fun
            ~callback:(x1596 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1592 with | `x448 -> Ojs.string_to_js "x448"));(
                   X448KeyPairOptions.t_to_js
                     (fun (x1594 : [ `pem ]) ->
                        match x1594 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1595 : [ `pem ]) ->
                        match x1595 with | `pem -> Ojs.string_to_js "pem")
                     x1593);(Ojs.fun_to_js 3
                               (fun (x1597 : Ojs.t) ->
                                  fun (x1599 : Ojs.t) ->
                                    fun (x1600 : Ojs.t) ->
                                      x1596
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1597)
                                        ~public_key:(Ojs.string_of_js x1599)
                                        ~private_key:(Ojs.string_of_js x1600)))|])
    let (generate_key_pair :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `der ]) X448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1601 : [ `x448 ]) ->
        fun ~options:(x1602 : ([ `pem ], [ `der ]) X448KeyPairOptions.t) ->
          fun
            ~callback:(x1605 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1601 with | `x448 -> Ojs.string_to_js "x448"));(
                   X448KeyPairOptions.t_to_js
                     (fun (x1603 : [ `pem ]) ->
                        match x1603 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1604 : [ `der ]) ->
                        match x1604 with | `der -> Ojs.string_to_js "der")
                     x1602);(Ojs.fun_to_js 3
                               (fun (x1606 : Ojs.t) ->
                                  fun (x1608 : Ojs.t) ->
                                    fun (x1609 : Ojs.t) ->
                                      x1605
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1606)
                                        ~public_key:(Ojs.string_of_js x1608)
                                        ~private_key:(Buffer.t_of_js x1609)))|])
    let (generate_key_pair :
      type_:[ `x448 ] ->
        options:([ `der ], [ `pem ]) X448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1610 : [ `x448 ]) ->
        fun ~options:(x1611 : ([ `der ], [ `pem ]) X448KeyPairOptions.t) ->
          fun
            ~callback:(x1614 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1610 with | `x448 -> Ojs.string_to_js "x448"));(
                   X448KeyPairOptions.t_to_js
                     (fun (x1612 : [ `der ]) ->
                        match x1612 with | `der -> Ojs.string_to_js "der")
                     (fun (x1613 : [ `pem ]) ->
                        match x1613 with | `pem -> Ojs.string_to_js "pem")
                     x1611);(Ojs.fun_to_js 3
                               (fun (x1615 : Ojs.t) ->
                                  fun (x1617 : Ojs.t) ->
                                    fun (x1618 : Ojs.t) ->
                                      x1614
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1615)
                                        ~public_key:(Buffer.t_of_js x1617)
                                        ~private_key:(Ojs.string_of_js x1618)))|])
    let (generate_key_pair :
      type_:[ `x448 ] ->
        options:([ `der ], [ `der ]) X448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1619 : [ `x448 ]) ->
        fun ~options:(x1620 : ([ `der ], [ `der ]) X448KeyPairOptions.t) ->
          fun
            ~callback:(x1623 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1619 with | `x448 -> Ojs.string_to_js "x448"));(
                   X448KeyPairOptions.t_to_js
                     (fun (x1621 : [ `der ]) ->
                        match x1621 with | `der -> Ojs.string_to_js "der")
                     (fun (x1622 : [ `der ]) ->
                        match x1622 with | `der -> Ojs.string_to_js "der")
                     x1620);(Ojs.fun_to_js 3
                               (fun (x1624 : Ojs.t) ->
                                  fun (x1626 : Ojs.t) ->
                                    fun (x1627 : Ojs.t) ->
                                      x1623
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1624)
                                        ~public_key:(Buffer.t_of_js x1626)
                                        ~private_key:(Buffer.t_of_js x1627)))|])
    let (generate_key_pair :
      type_:[ `x448 ] ->
        options:X448KeyPairKeyObjectOptions.t or_undefined ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1628 : [ `x448 ]) ->
        fun ~options:(x1629 : X448KeyPairKeyObjectOptions.t or_undefined) ->
          fun
            ~callback:(x1631 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1628 with | `x448 -> Ojs.string_to_js "x448"));(
                   or_undefined_to_js X448KeyPairKeyObjectOptions.t_to_js
                     x1629);(Ojs.fun_to_js 3
                               (fun (x1632 : Ojs.t) ->
                                  fun (x1634 : Ojs.t) ->
                                    fun (x1635 : Ojs.t) ->
                                      x1631
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1632)
                                        ~public_key:(KeyObject.t_of_js x1634)
                                        ~private_key:(KeyObject.t_of_js x1635)))|])
    module GenerateKeyPair =
      struct
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `pem ], [ `pem ]) RSAKeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1636 : [ `rsa ]) ->
            fun ~options:(x1637 : ([ `pem ], [ `pem ]) RSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1636 with | `rsa -> Ojs.string_to_js "rsa"));(
                     RSAKeyPairOptions.t_to_js
                       (fun (x1638 : [ `pem ]) ->
                          match x1638 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1639 : [ `pem ]) ->
                          match x1639 with | `pem -> Ojs.string_to_js "pem")
                       x1637)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `pem ], [ `der ]) RSAKeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1641 : [ `rsa ]) ->
            fun ~options:(x1642 : ([ `pem ], [ `der ]) RSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1641 with | `rsa -> Ojs.string_to_js "rsa"));(
                     RSAKeyPairOptions.t_to_js
                       (fun (x1643 : [ `pem ]) ->
                          match x1643 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1644 : [ `der ]) ->
                          match x1644 with | `der -> Ojs.string_to_js "der")
                       x1642)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `der ], [ `pem ]) RSAKeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1646 : [ `rsa ]) ->
            fun ~options:(x1647 : ([ `der ], [ `pem ]) RSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1646 with | `rsa -> Ojs.string_to_js "rsa"));(
                     RSAKeyPairOptions.t_to_js
                       (fun (x1648 : [ `der ]) ->
                          match x1648 with | `der -> Ojs.string_to_js "der")
                       (fun (x1649 : [ `pem ]) ->
                          match x1649 with | `pem -> Ojs.string_to_js "pem")
                       x1647)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `der ], [ `der ]) RSAKeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1651 : [ `rsa ]) ->
            fun ~options:(x1652 : ([ `der ], [ `der ]) RSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1651 with | `rsa -> Ojs.string_to_js "rsa"));(
                     RSAKeyPairOptions.t_to_js
                       (fun (x1653 : [ `der ]) ->
                          match x1653 with | `der -> Ojs.string_to_js "der")
                       (fun (x1654 : [ `der ]) ->
                          match x1654 with | `der -> Ojs.string_to_js "der")
                       x1652)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:RSAKeyPairKeyObjectOptions.t ->
              KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1656 : [ `rsa ]) ->
            fun ~options:(x1657 : RSAKeyPairKeyObjectOptions.t) ->
              Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1656 with | `rsa -> Ojs.string_to_js "rsa"));(
                     RSAKeyPairKeyObjectOptions.t_to_js x1657)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `pem ], [ `pem ]) DSAKeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1659 : [ `dsa ]) ->
            fun ~options:(x1660 : ([ `pem ], [ `pem ]) DSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1659 with | `dsa -> Ojs.string_to_js "dsa"));(
                     DSAKeyPairOptions.t_to_js
                       (fun (x1661 : [ `pem ]) ->
                          match x1661 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1662 : [ `pem ]) ->
                          match x1662 with | `pem -> Ojs.string_to_js "pem")
                       x1660)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `pem ], [ `der ]) DSAKeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1664 : [ `dsa ]) ->
            fun ~options:(x1665 : ([ `pem ], [ `der ]) DSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1664 with | `dsa -> Ojs.string_to_js "dsa"));(
                     DSAKeyPairOptions.t_to_js
                       (fun (x1666 : [ `pem ]) ->
                          match x1666 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1667 : [ `der ]) ->
                          match x1667 with | `der -> Ojs.string_to_js "der")
                       x1665)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `der ], [ `pem ]) DSAKeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1669 : [ `dsa ]) ->
            fun ~options:(x1670 : ([ `der ], [ `pem ]) DSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1669 with | `dsa -> Ojs.string_to_js "dsa"));(
                     DSAKeyPairOptions.t_to_js
                       (fun (x1671 : [ `der ]) ->
                          match x1671 with | `der -> Ojs.string_to_js "der")
                       (fun (x1672 : [ `pem ]) ->
                          match x1672 with | `pem -> Ojs.string_to_js "pem")
                       x1670)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `der ], [ `der ]) DSAKeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1674 : [ `dsa ]) ->
            fun ~options:(x1675 : ([ `der ], [ `der ]) DSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1674 with | `dsa -> Ojs.string_to_js "dsa"));(
                     DSAKeyPairOptions.t_to_js
                       (fun (x1676 : [ `der ]) ->
                          match x1676 with | `der -> Ojs.string_to_js "der")
                       (fun (x1677 : [ `der ]) ->
                          match x1677 with | `der -> Ojs.string_to_js "der")
                       x1675)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:DSAKeyPairKeyObjectOptions.t ->
              KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1679 : [ `dsa ]) ->
            fun ~options:(x1680 : DSAKeyPairKeyObjectOptions.t) ->
              Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1679 with | `dsa -> Ojs.string_to_js "dsa"));(
                     DSAKeyPairKeyObjectOptions.t_to_js x1680)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `pem ], [ `pem ]) ECKeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1682 : [ `ec ]) ->
            fun ~options:(x1683 : ([ `pem ], [ `pem ]) ECKeyPairOptions.t) ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1682 with | `ec -> Ojs.string_to_js "ec"));(
                     ECKeyPairOptions.t_to_js
                       (fun (x1684 : [ `pem ]) ->
                          match x1684 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1685 : [ `pem ]) ->
                          match x1685 with | `pem -> Ojs.string_to_js "pem")
                       x1683)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `pem ], [ `der ]) ECKeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1687 : [ `ec ]) ->
            fun ~options:(x1688 : ([ `pem ], [ `der ]) ECKeyPairOptions.t) ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1687 with | `ec -> Ojs.string_to_js "ec"));(
                     ECKeyPairOptions.t_to_js
                       (fun (x1689 : [ `pem ]) ->
                          match x1689 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1690 : [ `der ]) ->
                          match x1690 with | `der -> Ojs.string_to_js "der")
                       x1688)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `der ], [ `pem ]) ECKeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1692 : [ `ec ]) ->
            fun ~options:(x1693 : ([ `der ], [ `pem ]) ECKeyPairOptions.t) ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1692 with | `ec -> Ojs.string_to_js "ec"));(
                     ECKeyPairOptions.t_to_js
                       (fun (x1694 : [ `der ]) ->
                          match x1694 with | `der -> Ojs.string_to_js "der")
                       (fun (x1695 : [ `pem ]) ->
                          match x1695 with | `pem -> Ojs.string_to_js "pem")
                       x1693)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `der ], [ `der ]) ECKeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1697 : [ `ec ]) ->
            fun ~options:(x1698 : ([ `der ], [ `der ]) ECKeyPairOptions.t) ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1697 with | `ec -> Ojs.string_to_js "ec"));(
                     ECKeyPairOptions.t_to_js
                       (fun (x1699 : [ `der ]) ->
                          match x1699 with | `der -> Ojs.string_to_js "der")
                       (fun (x1700 : [ `der ]) ->
                          match x1700 with | `der -> Ojs.string_to_js "der")
                       x1698)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:ECKeyPairKeyObjectOptions.t ->
              KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1702 : [ `ec ]) ->
            fun ~options:(x1703 : ECKeyPairKeyObjectOptions.t) ->
              Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1702 with | `ec -> Ojs.string_to_js "ec"));(
                     ECKeyPairKeyObjectOptions.t_to_js x1703)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `pem ], [ `pem ]) ED25519KeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1705 : [ `ed25519 ]) ->
            fun
              ~options:(x1706 : ([ `pem ], [ `pem ]) ED25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1705 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                    (fun
                                                                    (x1707 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1707
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    (fun
                                                                    (x1708 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1708
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    x1706)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `pem ], [ `der ]) ED25519KeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1710 : [ `ed25519 ]) ->
            fun
              ~options:(x1711 : ([ `pem ], [ `der ]) ED25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1710 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                    (fun
                                                                    (x1712 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1712
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    (fun
                                                                    (x1713 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1713
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    x1711)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `der ], [ `pem ]) ED25519KeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1715 : [ `ed25519 ]) ->
            fun
              ~options:(x1716 : ([ `der ], [ `pem ]) ED25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1715 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                    (fun
                                                                    (x1717 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1717
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    (fun
                                                                    (x1718 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1718
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    x1716)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `der ], [ `der ]) ED25519KeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1720 : [ `ed25519 ]) ->
            fun
              ~options:(x1721 : ([ `der ], [ `der ]) ED25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1720 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                    (fun
                                                                    (x1722 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1722
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    (fun
                                                                    (x1723 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1723
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    x1721)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            ?options:ED25519KeyPairKeyObjectOptions.t ->
              unit -> KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1725 : [ `ed25519 ]) ->
            fun ?options:(x1726 : ED25519KeyPairKeyObjectOptions.t option) ->
              fun () ->
                Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                  (let x1729 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1729 "__promisify__")
                     "apply"
                     [|x1729;((let x1727 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1727 "push"
                                    [|((match x1725 with
                                        | `ed25519 ->
                                            Ojs.string_to_js "ed25519"))|]);
                               (match x1726 with
                                | Some x1728 ->
                                    ignore
                                      (Ojs.call x1727 "push"
                                         [|(ED25519KeyPairKeyObjectOptions.t_to_js
                                              x1728)|])
                                | None -> ());
                               x1727))|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `pem ], [ `pem ]) ED448KeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1731 : [ `ed448 ]) ->
            fun ~options:(x1732 : ([ `pem ], [ `pem ]) ED448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1731 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     ED448KeyPairOptions.t_to_js
                       (fun (x1733 : [ `pem ]) ->
                          match x1733 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1734 : [ `pem ]) ->
                          match x1734 with | `pem -> Ojs.string_to_js "pem")
                       x1732)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `pem ], [ `der ]) ED448KeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1736 : [ `ed448 ]) ->
            fun ~options:(x1737 : ([ `pem ], [ `der ]) ED448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1736 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     ED448KeyPairOptions.t_to_js
                       (fun (x1738 : [ `pem ]) ->
                          match x1738 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1739 : [ `der ]) ->
                          match x1739 with | `der -> Ojs.string_to_js "der")
                       x1737)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `der ], [ `pem ]) ED448KeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1741 : [ `ed448 ]) ->
            fun ~options:(x1742 : ([ `der ], [ `pem ]) ED448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1741 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     ED448KeyPairOptions.t_to_js
                       (fun (x1743 : [ `der ]) ->
                          match x1743 with | `der -> Ojs.string_to_js "der")
                       (fun (x1744 : [ `pem ]) ->
                          match x1744 with | `pem -> Ojs.string_to_js "pem")
                       x1742)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `der ], [ `der ]) ED448KeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1746 : [ `ed448 ]) ->
            fun ~options:(x1747 : ([ `der ], [ `der ]) ED448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1746 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     ED448KeyPairOptions.t_to_js
                       (fun (x1748 : [ `der ]) ->
                          match x1748 with | `der -> Ojs.string_to_js "der")
                       (fun (x1749 : [ `der ]) ->
                          match x1749 with | `der -> Ojs.string_to_js "der")
                       x1747)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            ?options:ED448KeyPairKeyObjectOptions.t ->
              unit -> KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1751 : [ `ed448 ]) ->
            fun ?options:(x1752 : ED448KeyPairKeyObjectOptions.t option) ->
              fun () ->
                Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                  (let x1755 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1755 "__promisify__")
                     "apply"
                     [|x1755;((let x1753 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1753 "push"
                                    [|((match x1751 with
                                        | `ed448 -> Ojs.string_to_js "ed448"))|]);
                               (match x1752 with
                                | Some x1754 ->
                                    ignore
                                      (Ojs.call x1753 "push"
                                         [|(ED448KeyPairKeyObjectOptions.t_to_js
                                              x1754)|])
                                | None -> ());
                               x1753))|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `pem ], [ `pem ]) X25519KeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1757 : [ `x25519 ]) ->
            fun
              ~options:(x1758 : ([ `pem ], [ `pem ]) X25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1757 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(X25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1759 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1759
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1760 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1760
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1758)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `pem ], [ `der ]) X25519KeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1762 : [ `x25519 ]) ->
            fun
              ~options:(x1763 : ([ `pem ], [ `der ]) X25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1762 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(X25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1764 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1764
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1765 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1765
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1763)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `der ], [ `pem ]) X25519KeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1767 : [ `x25519 ]) ->
            fun
              ~options:(x1768 : ([ `der ], [ `pem ]) X25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1767 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(X25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1769 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1769
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1770 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1770
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1768)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `der ], [ `der ]) X25519KeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1772 : [ `x25519 ]) ->
            fun
              ~options:(x1773 : ([ `der ], [ `der ]) X25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1772 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(X25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1774 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1774
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1775 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1775
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1773)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            ?options:X25519KeyPairKeyObjectOptions.t ->
              unit -> KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1777 : [ `x25519 ]) ->
            fun ?options:(x1778 : X25519KeyPairKeyObjectOptions.t option) ->
              fun () ->
                Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                  (let x1781 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1781 "__promisify__")
                     "apply"
                     [|x1781;((let x1779 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1779 "push"
                                    [|((match x1777 with
                                        | `x25519 ->
                                            Ojs.string_to_js "x25519"))|]);
                               (match x1778 with
                                | Some x1780 ->
                                    ignore
                                      (Ojs.call x1779 "push"
                                         [|(X25519KeyPairKeyObjectOptions.t_to_js
                                              x1780)|])
                                | None -> ());
                               x1779))|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `pem ], [ `pem ]) X448KeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1783 : [ `x448 ]) ->
            fun ~options:(x1784 : ([ `pem ], [ `pem ]) X448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1783 with | `x448 -> Ojs.string_to_js "x448"));(
                     X448KeyPairOptions.t_to_js
                       (fun (x1785 : [ `pem ]) ->
                          match x1785 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1786 : [ `pem ]) ->
                          match x1786 with | `pem -> Ojs.string_to_js "pem")
                       x1784)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `pem ], [ `der ]) X448KeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1788 : [ `x448 ]) ->
            fun ~options:(x1789 : ([ `pem ], [ `der ]) X448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1788 with | `x448 -> Ojs.string_to_js "x448"));(
                     X448KeyPairOptions.t_to_js
                       (fun (x1790 : [ `pem ]) ->
                          match x1790 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1791 : [ `der ]) ->
                          match x1791 with | `der -> Ojs.string_to_js "der")
                       x1789)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `der ], [ `pem ]) X448KeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1793 : [ `x448 ]) ->
            fun ~options:(x1794 : ([ `der ], [ `pem ]) X448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1793 with | `x448 -> Ojs.string_to_js "x448"));(
                     X448KeyPairOptions.t_to_js
                       (fun (x1795 : [ `der ]) ->
                          match x1795 with | `der -> Ojs.string_to_js "der")
                       (fun (x1796 : [ `pem ]) ->
                          match x1796 with | `pem -> Ojs.string_to_js "pem")
                       x1794)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `der ], [ `der ]) X448KeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1798 : [ `x448 ]) ->
            fun ~options:(x1799 : ([ `der ], [ `der ]) X448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1798 with | `x448 -> Ojs.string_to_js "x448"));(
                     X448KeyPairOptions.t_to_js
                       (fun (x1800 : [ `der ]) ->
                          match x1800 with | `der -> Ojs.string_to_js "der")
                       (fun (x1801 : [ `der ]) ->
                          match x1801 with | `der -> Ojs.string_to_js "der")
                       x1799)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            ?options:X448KeyPairKeyObjectOptions.t ->
              unit -> KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1803 : [ `x448 ]) ->
            fun ?options:(x1804 : X448KeyPairKeyObjectOptions.t option) ->
              fun () ->
                Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                  (let x1807 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1807 "__promisify__")
                     "apply"
                     [|x1807;((let x1805 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1805 "push"
                                    [|((match x1803 with
                                        | `x448 -> Ojs.string_to_js "x448"))|]);
                               (match x1804 with
                                | Some x1806 ->
                                    ignore
                                      (Ojs.call x1805 "push"
                                         [|(X448KeyPairKeyObjectOptions.t_to_js
                                              x1806)|])
                                | None -> ());
                               x1805))|])
      end
    let (sign :
      algorithm:string or_null_or_undefined ->
        data:ArrayBufferView.t ->
          key:([ `U_s11_der of SignKeyObjectInput.t 
               | `U_s18_ieee_p1363 of SignKeyObjectInput.t ],
            [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
            | `U_s22_pkcs8 of SignPrivateKeyInput.t 
            | `U_s23_private of KeyLike.t  | `U_s24_public of KeyLike.t 
            | `U_s26_sec1 of SignPrivateKeyInput.t 
            | `U_s27_secret of KeyLike.t ]) union2 -> Buffer.t)
      =
      fun ~algorithm:(x1809 : string or_null_or_undefined) ->
        fun ~data:(x1811 : ArrayBufferView.t) ->
          fun
            ~key:(x1812 :
                   ([ `U_s11_der of SignKeyObjectInput.t 
                    | `U_s18_ieee_p1363 of SignKeyObjectInput.t ],
                     [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
                     | `U_s22_pkcs8 of SignPrivateKeyInput.t 
                     | `U_s23_private of KeyLike.t 
                     | `U_s24_public of KeyLike.t 
                     | `U_s26_sec1 of SignPrivateKeyInput.t 
                     | `U_s27_secret of KeyLike.t ]) union2)
            ->
            Buffer.t_of_js
              (Ojs.call Import.crypto "sign"
                 [|(or_null_or_undefined_to_js Ojs.string_to_js x1809);(
                   ArrayBufferView.t_to_js x1811);(union2_to_js
                                                     (fun
                                                        (x1813 :
                                                          [
                                                            `U_s11_der of
                                                              SignKeyObjectInput.t
                                                               | `U_s18_ieee_p1363
                                                                   of
                                                                   SignKeyObjectInput.t
                                                                   ])
                                                        ->
                                                        match x1813 with
                                                        | `U_s11_der x1814 ->
                                                            SignKeyObjectInput.t_to_js
                                                              x1814
                                                        | `U_s18_ieee_p1363
                                                            x1815 ->
                                                            SignKeyObjectInput.t_to_js
                                                              x1815)
                                                     (fun
                                                        (x1816 :
                                                          [
                                                            `U_s21_pkcs1 of
                                                              SignPrivateKeyInput.t
                                                               | `U_s22_pkcs8
                                                                   of
                                                                   SignPrivateKeyInput.t
                                                                    | 
                                                            `U_s23_private of
                                                              KeyLike.t 
                                                          | `U_s24_public of
                                                              KeyLike.t 
                                                          | `U_s26_sec1 of
                                                              SignPrivateKeyInput.t
                                                               | `U_s27_secret
                                                                   of
                                                                   KeyLike.t ])
                                                        ->
                                                        match x1816 with
                                                        | `U_s21_pkcs1 x1817
                                                            ->
                                                            SignPrivateKeyInput.t_to_js
                                                              x1817
                                                        | `U_s22_pkcs8 x1818
                                                            ->
                                                            SignPrivateKeyInput.t_to_js
                                                              x1818
                                                        | `U_s23_private
                                                            x1819 ->
                                                            KeyLike.t_to_js
                                                              x1819
                                                        | `U_s24_public x1820
                                                            ->
                                                            KeyLike.t_to_js
                                                              x1820
                                                        | `U_s26_sec1 x1821
                                                            ->
                                                            SignPrivateKeyInput.t_to_js
                                                              x1821
                                                        | `U_s27_secret x1822
                                                            ->
                                                            KeyLike.t_to_js
                                                              x1822) x1812)|])
    let (verify :
      algorithm:string or_null_or_undefined ->
        data:ArrayBufferView.t ->
          key:([ `U_s11_der of VerifyKeyObjectInput.t 
               | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ],
            [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
            | `U_s23_private of KeyLike.t  | `U_s24_public of KeyLike.t 
            | `U_s27_secret of KeyLike.t 
            | `U_s28_spki of VerifyPublicKeyInput.t ]) union2 ->
            signature:ArrayBufferView.t -> bool)
      =
      fun ~algorithm:(x1823 : string or_null_or_undefined) ->
        fun ~data:(x1825 : ArrayBufferView.t) ->
          fun
            ~key:(x1826 :
                   ([ `U_s11_der of VerifyKeyObjectInput.t 
                    | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ],
                     [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
                     | `U_s23_private of KeyLike.t 
                     | `U_s24_public of KeyLike.t 
                     | `U_s27_secret of KeyLike.t 
                     | `U_s28_spki of VerifyPublicKeyInput.t ]) union2)
            ->
            fun ~signature:(x1836 : ArrayBufferView.t) ->
              Ojs.bool_of_js
                (Ojs.call Import.crypto "verify"
                   [|(or_null_or_undefined_to_js Ojs.string_to_js x1823);(
                     ArrayBufferView.t_to_js x1825);(union2_to_js
                                                       (fun
                                                          (x1827 :
                                                            [
                                                              `U_s11_der of
                                                                VerifyKeyObjectInput.t
                                                                 | `U_s18_ieee_p1363
                                                                    of
                                                                    VerifyKeyObjectInput.t
                                                                    ])
                                                          ->
                                                          match x1827 with
                                                          | `U_s11_der x1828
                                                              ->
                                                              VerifyKeyObjectInput.t_to_js
                                                                x1828
                                                          | `U_s18_ieee_p1363
                                                              x1829 ->
                                                              VerifyKeyObjectInput.t_to_js
                                                                x1829)
                                                       (fun
                                                          (x1830 :
                                                            [
                                                              `U_s21_pkcs1 of
                                                                VerifyPublicKeyInput.t
                                                                 | `U_s23_private
                                                                    of
                                                                    KeyLike.t 
                                                            | `U_s24_public
                                                                of KeyLike.t 
                                                            | `U_s27_secret
                                                                of KeyLike.t 
                                                            | `U_s28_spki of
                                                                VerifyPublicKeyInput.t
                                                                ])
                                                          ->
                                                          match x1830 with
                                                          | `U_s21_pkcs1
                                                              x1831 ->
                                                              VerifyPublicKeyInput.t_to_js
                                                                x1831
                                                          | `U_s23_private
                                                              x1832 ->
                                                              KeyLike.t_to_js
                                                                x1832
                                                          | `U_s24_public
                                                              x1833 ->
                                                              KeyLike.t_to_js
                                                                x1833
                                                          | `U_s27_secret
                                                              x1834 ->
                                                              KeyLike.t_to_js
                                                                x1834
                                                          | `U_s28_spki x1835
                                                              ->
                                                              VerifyPublicKeyInput.t_to_js
                                                                x1835) x1826);(
                     ArrayBufferView.t_to_js x1836)|])
    let (diffie_hellman : options:AnonymousInterface1.t -> Buffer.t) =
      fun ~options:(x1837 : AnonymousInterface1.t) ->
        Buffer.t_of_js
          (Ojs.call Import.crypto "diffieHellman"
             [|(AnonymousInterface1.t_to_js x1837)|])
  end
