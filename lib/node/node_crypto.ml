[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
        type anonymous_interface_1 = [ `anonymous_interface_1 ] intf
        let rec anonymous_interface_1_of_js : Ojs.t -> anonymous_interface_1
          = Obj.magic
        and anonymous_interface_1_to_js : anonymous_interface_1 -> Ojs.t =
          Obj.magic
        type anonymous_interface_2 = [ `anonymous_interface_2 ] intf
        let rec anonymous_interface_2_of_js : Ojs.t -> anonymous_interface_2
          = Obj.magic
        and anonymous_interface_2_to_js : anonymous_interface_2 -> Ojs.t =
          Obj.magic
        type anonymous_interface_3 = [ `anonymous_interface_3 ] intf
        let rec anonymous_interface_3_of_js : Ojs.t -> anonymous_interface_3
          = Obj.magic
        and anonymous_interface_3_to_js : anonymous_interface_3 -> Ojs.t =
          Obj.magic
        type anonymous_interface_4 = [ `anonymous_interface_4 ] intf
        let rec anonymous_interface_4_of_js : Ojs.t -> anonymous_interface_4
          = Obj.magic
        and anonymous_interface_4_to_js : anonymous_interface_4 -> Ojs.t =
          Obj.magic
        type anonymous_interface_5 = [ `anonymous_interface_5 ] intf
        let rec anonymous_interface_5_of_js : Ojs.t -> anonymous_interface_5
          = Obj.magic
        and anonymous_interface_5_to_js : anonymous_interface_5 -> Ojs.t =
          Obj.magic
        type anonymous_interface_6 = [ `anonymous_interface_6 ] intf
        let rec anonymous_interface_6_of_js : Ojs.t -> anonymous_interface_6
          = Obj.magic
        and anonymous_interface_6_to_js : anonymous_interface_6 -> Ojs.t =
          Obj.magic
        type anonymous_interface_7 = [ `anonymous_interface_7 ] intf
        let rec anonymous_interface_7_of_js : Ojs.t -> anonymous_interface_7
          = Obj.magic
        and anonymous_interface_7_to_js : anonymous_interface_7 -> Ojs.t =
          Obj.magic
        type anonymous_interface_8 = [ `anonymous_interface_8 ] intf
        let rec anonymous_interface_8_of_js : Ojs.t -> anonymous_interface_8
          = Obj.magic
        and anonymous_interface_8_to_js : anonymous_interface_8 -> Ojs.t =
          Obj.magic
        type anonymous_interface_9 = [ `anonymous_interface_9 ] intf
        let rec anonymous_interface_9_of_js : Ojs.t -> anonymous_interface_9
          = Obj.magic
        and anonymous_interface_9_to_js : anonymous_interface_9 -> Ojs.t =
          Obj.magic
        type anonymous_interface_10 = [ `anonymous_interface_10 ] intf
        let rec anonymous_interface_10_of_js :
          Ojs.t -> anonymous_interface_10 = Obj.magic
        and anonymous_interface_10_to_js : anonymous_interface_10 -> Ojs.t =
          Obj.magic
        type anonymous_interface_11 = [ `anonymous_interface_11 ] intf
        let rec anonymous_interface_11_of_js :
          Ojs.t -> anonymous_interface_11 = Obj.magic
        and anonymous_interface_11_to_js : anonymous_interface_11 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type 'T crypto_BasePrivateKeyEncodingOptions =
          [ `Crypto_BasePrivateKeyEncodingOptions of 'T ] intf
        and crypto_BinaryLike = ArrayBufferView.t or_string
        and crypto_BinaryToTextEncoding = [ `base64  | `hex ]
        and crypto_Certificate = [ `Crypto_Certificate ] intf
        and crypto_CharacterEncoding =
          [ `latin1  | `utf_8  | `utf16le  | `utf8 ]
        and crypto_Cipher = [ `Crypto_Cipher ] intf
        and crypto_CipherCCM = [ `Crypto_CipherCCM  | `Crypto_Cipher ] intf
        and crypto_CipherCCMOptions = [ `Crypto_CipherCCMOptions ] intf
        and crypto_CipherCCMTypes =
          [ `aes_128_ccm  | `aes_192_ccm  | `aes_256_ccm 
          | `chacha20_poly1305 ]
        and crypto_CipherGCM = [ `Crypto_CipherGCM  | `Crypto_Cipher ] intf
        and crypto_CipherGCMOptions = [ `Crypto_CipherGCMOptions ] intf
        and crypto_CipherGCMTypes =
          [ `aes_128_gcm  | `aes_192_gcm  | `aes_256_gcm ]
        and crypto_CipherKey = (crypto_BinaryLike, crypto_KeyObject) union2
        and crypto_DSAEncoding = [ `der  | `ieee_p1363 ]
        and crypto_DSAKeyPairKeyObjectOptions =
          [ `Crypto_DSAKeyPairKeyObjectOptions ] intf
        and ('PubF, 'PrivF) crypto_DSAKeyPairOptions =
          [ `Crypto_DSAKeyPairOptions of ('PubF * 'PrivF) ] intf
        and crypto_Decipher = [ `Crypto_Decipher ] intf
        and crypto_DecipherCCM =
          [ `Crypto_DecipherCCM  | `Crypto_Decipher ] intf
        and crypto_DecipherGCM =
          [ `Crypto_DecipherGCM  | `Crypto_Decipher ] intf
        and crypto_DiffieHellman = [ `Crypto_DiffieHellman ] intf
        and crypto_ECDH = [ `Crypto_ECDH ] intf
        and crypto_ECDHKeyFormat =
          [ `compressed  | `hybrid  | `uncompressed ]
        and crypto_ECKeyPairKeyObjectOptions =
          [ `Crypto_ECKeyPairKeyObjectOptions ] intf
        and ('PubF, 'PrivF) crypto_ECKeyPairOptions =
          [ `Crypto_ECKeyPairOptions of ('PubF * 'PrivF) ] intf
        and crypto_ED25519KeyPairKeyObjectOptions =
          [ `Crypto_ED25519KeyPairKeyObjectOptions ] intf
        and ('PubF, 'PrivF) crypto_ED25519KeyPairOptions =
          [ `Crypto_ED25519KeyPairOptions of ('PubF * 'PrivF) ] intf
        and crypto_ED448KeyPairKeyObjectOptions =
          [ `Crypto_ED448KeyPairKeyObjectOptions ] intf
        and ('PubF, 'PrivF) crypto_ED448KeyPairOptions =
          [ `Crypto_ED448KeyPairOptions of ('PubF * 'PrivF) ] intf
        and crypto_Encoding =
          ((crypto_BinaryToTextEncoding, crypto_CharacterEncoding,
             crypto_LegacyCharacterEncoding) union3,
            [ `ascii  | `base64  | `binary  | `hex  | `latin1  | `ucs_2 
            | `ucs2  | `utf_8  | `utf16le  | `utf8 ]) or_enum
        and crypto_Hash = [ `Crypto_Hash ] intf
        and crypto_HashOptions = [ `Crypto_HashOptions ] intf
        and crypto_Hmac = [ `Crypto_Hmac ] intf
        and 'T crypto_KeyExportOptions =
          [ `Crypto_KeyExportOptions of 'T ] intf
        and crypto_KeyFormat = [ `der  | `pem ]
        and crypto_KeyLike = (Buffer.t, crypto_KeyObject) union2 or_string
        and crypto_KeyObject = [ `Crypto_KeyObject ] intf
        and crypto_KeyObjectType = [ `private_  | `public  | `secret ]
        and crypto_KeyPairKeyObjectResult =
          [ `Crypto_KeyPairKeyObjectResult ] intf
        and ('T1, 'T2) crypto_KeyPairSyncResult =
          [ `Crypto_KeyPairSyncResult of ('T1 * 'T2) ] intf
        and crypto_KeyType =
          [ `dsa  | `ec  | `ed25519  | `ed448  | `rsa  | `x25519  | `x448 ]
        and crypto_LegacyCharacterEncoding =
          [ `ascii  | `binary  | `ucs_2  | `ucs2 ]
        and crypto_PrivateKeyInput = [ `Crypto_PrivateKeyInput ] intf
        and crypto_PublicKeyInput = [ `Crypto_PublicKeyInput ] intf
        and crypto_RSAKeyPairKeyObjectOptions =
          [ `Crypto_RSAKeyPairKeyObjectOptions ] intf
        and ('PubF, 'PrivF) crypto_RSAKeyPairOptions =
          [ `Crypto_RSAKeyPairOptions of ('PubF * 'PrivF) ] intf
        and crypto_RsaPrivateKey = [ `Crypto_RsaPrivateKey ] intf
        and crypto_RsaPublicKey = [ `Crypto_RsaPublicKey ] intf
        and crypto_ScryptOptions = [ `Crypto_ScryptOptions ] intf
        and crypto_SignKeyObjectInput =
          [ `Crypto_SignKeyObjectInput  | `Crypto_SigningOptions ] intf
        and crypto_SignPrivateKeyInput =
          [ `Crypto_SignPrivateKeyInput  | `Crypto_PrivateKeyInput 
          | `Crypto_SigningOptions ] intf
        and crypto_Signer = [ `Crypto_Signer ] intf
        and crypto_SigningOptions = [ `Crypto_SigningOptions ] intf
        and crypto_Verify = [ `Crypto_Verify ] intf
        and crypto_VerifyKeyObjectInput =
          [ `Crypto_VerifyKeyObjectInput  | `Crypto_SigningOptions ] intf
        and crypto_VerifyPublicKeyInput =
          [ `Crypto_VerifyPublicKeyInput  | `Crypto_PublicKeyInput 
          | `Crypto_SigningOptions ] intf
        and crypto_X25519KeyPairKeyObjectOptions =
          [ `Crypto_X25519KeyPairKeyObjectOptions ] intf
        and ('PubF, 'PrivF) crypto_X25519KeyPairOptions =
          [ `Crypto_X25519KeyPairOptions of ('PubF * 'PrivF) ] intf
        and crypto_X448KeyPairKeyObjectOptions =
          [ `Crypto_X448KeyPairKeyObjectOptions ] intf
        and ('PubF, 'PrivF) crypto_X448KeyPairOptions =
          [ `Crypto_X448KeyPairOptions of ('PubF * 'PrivF) ] intf
        let rec crypto_BasePrivateKeyEncodingOptions_of_js :
          'T .
            (Ojs.t -> 'T) -> Ojs.t -> 'T crypto_BasePrivateKeyEncodingOptions
          = fun _T -> Obj.magic
        and crypto_BasePrivateKeyEncodingOptions_to_js :
          'T .
            ('T -> Ojs.t) -> 'T crypto_BasePrivateKeyEncodingOptions -> Ojs.t
          = fun _T -> Obj.magic
        and crypto_BinaryLike_of_js : Ojs.t -> crypto_BinaryLike =
          fun (x3 : Ojs.t) -> or_string_of_js ArrayBufferView.t_of_js x3
        and crypto_BinaryLike_to_js : crypto_BinaryLike -> Ojs.t =
          fun (x1 : ArrayBufferView.t or_string) ->
            or_string_to_js ArrayBufferView.t_to_js x1
        and crypto_BinaryToTextEncoding_of_js :
          Ojs.t -> crypto_BinaryToTextEncoding =
          fun (x6 : Ojs.t) ->
            let x7 = x6 in
            match Ojs.string_of_js x7 with
            | "base64" -> `base64
            | "hex" -> `hex
            | _ -> assert false
        and crypto_BinaryToTextEncoding_to_js :
          crypto_BinaryToTextEncoding -> Ojs.t =
          fun (x5 : [ `base64  | `hex ]) ->
            match x5 with
            | `base64 -> Ojs.string_to_js "base64"
            | `hex -> Ojs.string_to_js "hex"
        and crypto_Certificate_of_js : Ojs.t -> crypto_Certificate =
          Obj.magic
        and crypto_Certificate_to_js : crypto_Certificate -> Ojs.t =
          Obj.magic
        and crypto_CharacterEncoding_of_js :
          Ojs.t -> crypto_CharacterEncoding =
          fun (x9 : Ojs.t) ->
            let x10 = x9 in
            match Ojs.string_of_js x10 with
            | "latin1" -> `latin1
            | "utf-8" -> `utf_8
            | "utf16le" -> `utf16le
            | "utf8" -> `utf8
            | _ -> assert false
        and crypto_CharacterEncoding_to_js :
          crypto_CharacterEncoding -> Ojs.t =
          fun (x8 : [ `latin1  | `utf_8  | `utf16le  | `utf8 ]) ->
            match x8 with
            | `latin1 -> Ojs.string_to_js "latin1"
            | `utf_8 -> Ojs.string_to_js "utf-8"
            | `utf16le -> Ojs.string_to_js "utf16le"
            | `utf8 -> Ojs.string_to_js "utf8"
        and crypto_Cipher_of_js : Ojs.t -> crypto_Cipher = Obj.magic
        and crypto_Cipher_to_js : crypto_Cipher -> Ojs.t = Obj.magic
        and crypto_CipherCCM_of_js : Ojs.t -> crypto_CipherCCM = Obj.magic
        and crypto_CipherCCM_to_js : crypto_CipherCCM -> Ojs.t = Obj.magic
        and crypto_CipherCCMOptions_of_js : Ojs.t -> crypto_CipherCCMOptions
          = Obj.magic
        and crypto_CipherCCMOptions_to_js : crypto_CipherCCMOptions -> Ojs.t
          = Obj.magic
        and crypto_CipherCCMTypes_of_js : Ojs.t -> crypto_CipherCCMTypes =
          fun (x12 : Ojs.t) ->
            let x13 = x12 in
            match Ojs.string_of_js x13 with
            | "aes-128-ccm" -> `aes_128_ccm
            | "aes-192-ccm" -> `aes_192_ccm
            | "aes-256-ccm" -> `aes_256_ccm
            | "chacha20-poly1305" -> `chacha20_poly1305
            | _ -> assert false
        and crypto_CipherCCMTypes_to_js : crypto_CipherCCMTypes -> Ojs.t =
          fun
            (x11 :
              [ `aes_128_ccm  | `aes_192_ccm  | `aes_256_ccm 
              | `chacha20_poly1305 ])
            ->
            match x11 with
            | `aes_128_ccm -> Ojs.string_to_js "aes-128-ccm"
            | `aes_192_ccm -> Ojs.string_to_js "aes-192-ccm"
            | `aes_256_ccm -> Ojs.string_to_js "aes-256-ccm"
            | `chacha20_poly1305 -> Ojs.string_to_js "chacha20-poly1305"
        and crypto_CipherGCM_of_js : Ojs.t -> crypto_CipherGCM = Obj.magic
        and crypto_CipherGCM_to_js : crypto_CipherGCM -> Ojs.t = Obj.magic
        and crypto_CipherGCMOptions_of_js : Ojs.t -> crypto_CipherGCMOptions
          = Obj.magic
        and crypto_CipherGCMOptions_to_js : crypto_CipherGCMOptions -> Ojs.t
          = Obj.magic
        and crypto_CipherGCMTypes_of_js : Ojs.t -> crypto_CipherGCMTypes =
          fun (x15 : Ojs.t) ->
            let x16 = x15 in
            match Ojs.string_of_js x16 with
            | "aes-128-gcm" -> `aes_128_gcm
            | "aes-192-gcm" -> `aes_192_gcm
            | "aes-256-gcm" -> `aes_256_gcm
            | _ -> assert false
        and crypto_CipherGCMTypes_to_js : crypto_CipherGCMTypes -> Ojs.t =
          fun (x14 : [ `aes_128_gcm  | `aes_192_gcm  | `aes_256_gcm ]) ->
            match x14 with
            | `aes_128_gcm -> Ojs.string_to_js "aes-128-gcm"
            | `aes_192_gcm -> Ojs.string_to_js "aes-192-gcm"
            | `aes_256_gcm -> Ojs.string_to_js "aes-256-gcm"
        and crypto_CipherKey_of_js : Ojs.t -> crypto_CipherKey =
          fun (x20 : Ojs.t) ->
            union2_of_js crypto_BinaryLike_of_js crypto_KeyObject_of_js x20
        and crypto_CipherKey_to_js : crypto_CipherKey -> Ojs.t =
          fun (x17 : (crypto_BinaryLike, crypto_KeyObject) union2) ->
            union2_to_js crypto_BinaryLike_to_js crypto_KeyObject_to_js x17
        and crypto_DSAEncoding_of_js : Ojs.t -> crypto_DSAEncoding =
          fun (x24 : Ojs.t) ->
            let x25 = x24 in
            match Ojs.string_of_js x25 with
            | "der" -> `der
            | "ieee-p1363" -> `ieee_p1363
            | _ -> assert false
        and crypto_DSAEncoding_to_js : crypto_DSAEncoding -> Ojs.t =
          fun (x23 : [ `der  | `ieee_p1363 ]) ->
            match x23 with
            | `der -> Ojs.string_to_js "der"
            | `ieee_p1363 -> Ojs.string_to_js "ieee-p1363"
        and crypto_DSAKeyPairKeyObjectOptions_of_js :
          Ojs.t -> crypto_DSAKeyPairKeyObjectOptions = Obj.magic
        and crypto_DSAKeyPairKeyObjectOptions_to_js :
          crypto_DSAKeyPairKeyObjectOptions -> Ojs.t = Obj.magic
        and crypto_DSAKeyPairOptions_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) ->
                Ojs.t -> ('PubF, 'PrivF) crypto_DSAKeyPairOptions
          = fun _PubF -> fun _PrivF -> Obj.magic
        and crypto_DSAKeyPairOptions_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) ->
                ('PubF, 'PrivF) crypto_DSAKeyPairOptions -> Ojs.t
          = fun _PubF -> fun _PrivF -> Obj.magic
        and crypto_Decipher_of_js : Ojs.t -> crypto_Decipher = Obj.magic
        and crypto_Decipher_to_js : crypto_Decipher -> Ojs.t = Obj.magic
        and crypto_DecipherCCM_of_js : Ojs.t -> crypto_DecipherCCM =
          Obj.magic
        and crypto_DecipherCCM_to_js : crypto_DecipherCCM -> Ojs.t =
          Obj.magic
        and crypto_DecipherGCM_of_js : Ojs.t -> crypto_DecipherGCM =
          Obj.magic
        and crypto_DecipherGCM_to_js : crypto_DecipherGCM -> Ojs.t =
          Obj.magic
        and crypto_DiffieHellman_of_js : Ojs.t -> crypto_DiffieHellman =
          Obj.magic
        and crypto_DiffieHellman_to_js : crypto_DiffieHellman -> Ojs.t =
          Obj.magic
        and crypto_ECDH_of_js : Ojs.t -> crypto_ECDH = Obj.magic
        and crypto_ECDH_to_js : crypto_ECDH -> Ojs.t = Obj.magic
        and crypto_ECDHKeyFormat_of_js : Ojs.t -> crypto_ECDHKeyFormat =
          fun (x27 : Ojs.t) ->
            let x28 = x27 in
            match Ojs.string_of_js x28 with
            | "compressed" -> `compressed
            | "hybrid" -> `hybrid
            | "uncompressed" -> `uncompressed
            | _ -> assert false
        and crypto_ECDHKeyFormat_to_js : crypto_ECDHKeyFormat -> Ojs.t =
          fun (x26 : [ `compressed  | `hybrid  | `uncompressed ]) ->
            match x26 with
            | `compressed -> Ojs.string_to_js "compressed"
            | `hybrid -> Ojs.string_to_js "hybrid"
            | `uncompressed -> Ojs.string_to_js "uncompressed"
        and crypto_ECKeyPairKeyObjectOptions_of_js :
          Ojs.t -> crypto_ECKeyPairKeyObjectOptions = Obj.magic
        and crypto_ECKeyPairKeyObjectOptions_to_js :
          crypto_ECKeyPairKeyObjectOptions -> Ojs.t = Obj.magic
        and crypto_ECKeyPairOptions_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) ->
                Ojs.t -> ('PubF, 'PrivF) crypto_ECKeyPairOptions
          = fun _PubF -> fun _PrivF -> Obj.magic
        and crypto_ECKeyPairOptions_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) ->
                ('PubF, 'PrivF) crypto_ECKeyPairOptions -> Ojs.t
          = fun _PubF -> fun _PrivF -> Obj.magic
        and crypto_ED25519KeyPairKeyObjectOptions_of_js :
          Ojs.t -> crypto_ED25519KeyPairKeyObjectOptions = Obj.magic
        and crypto_ED25519KeyPairKeyObjectOptions_to_js :
          crypto_ED25519KeyPairKeyObjectOptions -> Ojs.t = Obj.magic
        and crypto_ED25519KeyPairOptions_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) ->
                Ojs.t -> ('PubF, 'PrivF) crypto_ED25519KeyPairOptions
          = fun _PubF -> fun _PrivF -> Obj.magic
        and crypto_ED25519KeyPairOptions_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) ->
                ('PubF, 'PrivF) crypto_ED25519KeyPairOptions -> Ojs.t
          = fun _PubF -> fun _PrivF -> Obj.magic
        and crypto_ED448KeyPairKeyObjectOptions_of_js :
          Ojs.t -> crypto_ED448KeyPairKeyObjectOptions = Obj.magic
        and crypto_ED448KeyPairKeyObjectOptions_to_js :
          crypto_ED448KeyPairKeyObjectOptions -> Ojs.t = Obj.magic
        and crypto_ED448KeyPairOptions_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) ->
                Ojs.t -> ('PubF, 'PrivF) crypto_ED448KeyPairOptions
          = fun _PubF -> fun _PrivF -> Obj.magic
        and crypto_ED448KeyPairOptions_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) ->
                ('PubF, 'PrivF) crypto_ED448KeyPairOptions -> Ojs.t
          = fun _PubF -> fun _PrivF -> Obj.magic
        and crypto_Encoding_of_js : Ojs.t -> crypto_Encoding =
          fun (x35 : Ojs.t) ->
            or_enum_of_js
              (fun (x36 : Ojs.t) ->
                 union3_of_js crypto_BinaryToTextEncoding_of_js
                   crypto_CharacterEncoding_of_js
                   crypto_LegacyCharacterEncoding_of_js x36)
              (fun (x40 : Ojs.t) ->
                 let x41 = x40 in
                 match Ojs.string_of_js x41 with
                 | "ascii" -> `ascii
                 | "base64" -> `base64
                 | "binary" -> `binary
                 | "hex" -> `hex
                 | "latin1" -> `latin1
                 | "ucs-2" -> `ucs_2
                 | "ucs2" -> `ucs2
                 | "utf-8" -> `utf_8
                 | "utf16le" -> `utf16le
                 | "utf8" -> `utf8
                 | _ -> assert false) x35
        and crypto_Encoding_to_js : crypto_Encoding -> Ojs.t =
          fun
            (x29 :
              ((crypto_BinaryToTextEncoding, crypto_CharacterEncoding,
                 crypto_LegacyCharacterEncoding) union3,
                [ `ascii  | `base64  | `binary  | `hex  | `latin1  | 
                  `ucs_2 
                | `ucs2  | `utf_8  | `utf16le  | `utf8 ]) or_enum)
            ->
            or_enum_to_js
              (fun
                 (x30 :
                   (crypto_BinaryToTextEncoding, crypto_CharacterEncoding,
                     crypto_LegacyCharacterEncoding) union3)
                 ->
                 union3_to_js crypto_BinaryToTextEncoding_to_js
                   crypto_CharacterEncoding_to_js
                   crypto_LegacyCharacterEncoding_to_js x30)
              (fun
                 (x34 :
                   [ `ascii  | `base64  | `binary  | `hex  | `latin1 
                   | `ucs_2  | `ucs2  | `utf_8  | `utf16le  | `utf8 ])
                 ->
                 match x34 with
                 | `ascii -> Ojs.string_to_js "ascii"
                 | `base64 -> Ojs.string_to_js "base64"
                 | `binary -> Ojs.string_to_js "binary"
                 | `hex -> Ojs.string_to_js "hex"
                 | `latin1 -> Ojs.string_to_js "latin1"
                 | `ucs_2 -> Ojs.string_to_js "ucs-2"
                 | `ucs2 -> Ojs.string_to_js "ucs2"
                 | `utf_8 -> Ojs.string_to_js "utf-8"
                 | `utf16le -> Ojs.string_to_js "utf16le"
                 | `utf8 -> Ojs.string_to_js "utf8") x29
        and crypto_Hash_of_js : Ojs.t -> crypto_Hash = Obj.magic
        and crypto_Hash_to_js : crypto_Hash -> Ojs.t = Obj.magic
        and crypto_HashOptions_of_js : Ojs.t -> crypto_HashOptions =
          Obj.magic
        and crypto_HashOptions_to_js : crypto_HashOptions -> Ojs.t =
          Obj.magic
        and crypto_Hmac_of_js : Ojs.t -> crypto_Hmac = Obj.magic
        and crypto_Hmac_to_js : crypto_Hmac -> Ojs.t = Obj.magic
        and crypto_KeyExportOptions_of_js :
          'T . (Ojs.t -> 'T) -> Ojs.t -> 'T crypto_KeyExportOptions =
          fun _T -> Obj.magic
        and crypto_KeyExportOptions_to_js :
          'T . ('T -> Ojs.t) -> 'T crypto_KeyExportOptions -> Ojs.t =
          fun _T -> Obj.magic
        and crypto_KeyFormat_of_js : Ojs.t -> crypto_KeyFormat =
          fun (x43 : Ojs.t) ->
            let x44 = x43 in
            match Ojs.string_of_js x44 with
            | "der" -> `der
            | "pem" -> `pem
            | _ -> assert false
        and crypto_KeyFormat_to_js : crypto_KeyFormat -> Ojs.t =
          fun (x42 : [ `der  | `pem ]) ->
            match x42 with
            | `der -> Ojs.string_to_js "der"
            | `pem -> Ojs.string_to_js "pem"
        and crypto_KeyLike_of_js : Ojs.t -> crypto_KeyLike =
          fun (x49 : Ojs.t) ->
            or_string_of_js
              (fun (x50 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js crypto_KeyObject_of_js x50) x49
        and crypto_KeyLike_to_js : crypto_KeyLike -> Ojs.t =
          fun (x45 : (Buffer.t, crypto_KeyObject) union2 or_string) ->
            or_string_to_js
              (fun (x46 : (Buffer.t, crypto_KeyObject) union2) ->
                 union2_to_js Buffer.t_to_js crypto_KeyObject_to_js x46) x45
        and crypto_KeyObject_of_js : Ojs.t -> crypto_KeyObject = Obj.magic
        and crypto_KeyObject_to_js : crypto_KeyObject -> Ojs.t = Obj.magic
        and crypto_KeyObjectType_of_js : Ojs.t -> crypto_KeyObjectType =
          fun (x54 : Ojs.t) ->
            let x55 = x54 in
            match Ojs.string_of_js x55 with
            | "private" -> `private_
            | "public" -> `public
            | "secret" -> `secret
            | _ -> assert false
        and crypto_KeyObjectType_to_js : crypto_KeyObjectType -> Ojs.t =
          fun (x53 : [ `private_  | `public  | `secret ]) ->
            match x53 with
            | `private_ -> Ojs.string_to_js "private"
            | `public -> Ojs.string_to_js "public"
            | `secret -> Ojs.string_to_js "secret"
        and crypto_KeyPairKeyObjectResult_of_js :
          Ojs.t -> crypto_KeyPairKeyObjectResult = Obj.magic
        and crypto_KeyPairKeyObjectResult_to_js :
          crypto_KeyPairKeyObjectResult -> Ojs.t = Obj.magic
        and crypto_KeyPairSyncResult_of_js :
          'T1 'T2 .
            (Ojs.t -> 'T1) ->
              (Ojs.t -> 'T2) -> Ojs.t -> ('T1, 'T2) crypto_KeyPairSyncResult
          = fun _T1 -> fun _T2 -> Obj.magic
        and crypto_KeyPairSyncResult_to_js :
          'T1 'T2 .
            ('T1 -> Ojs.t) ->
              ('T2 -> Ojs.t) -> ('T1, 'T2) crypto_KeyPairSyncResult -> Ojs.t
          = fun _T1 -> fun _T2 -> Obj.magic
        and crypto_KeyType_of_js : Ojs.t -> crypto_KeyType =
          fun (x57 : Ojs.t) ->
            let x58 = x57 in
            match Ojs.string_of_js x58 with
            | "dsa" -> `dsa
            | "ec" -> `ec
            | "ed25519" -> `ed25519
            | "ed448" -> `ed448
            | "rsa" -> `rsa
            | "x25519" -> `x25519
            | "x448" -> `x448
            | _ -> assert false
        and crypto_KeyType_to_js : crypto_KeyType -> Ojs.t =
          fun
            (x56 :
              [ `dsa  | `ec  | `ed25519  | `ed448  | `rsa  | `x25519 
              | `x448 ])
            ->
            match x56 with
            | `dsa -> Ojs.string_to_js "dsa"
            | `ec -> Ojs.string_to_js "ec"
            | `ed25519 -> Ojs.string_to_js "ed25519"
            | `ed448 -> Ojs.string_to_js "ed448"
            | `rsa -> Ojs.string_to_js "rsa"
            | `x25519 -> Ojs.string_to_js "x25519"
            | `x448 -> Ojs.string_to_js "x448"
        and crypto_LegacyCharacterEncoding_of_js :
          Ojs.t -> crypto_LegacyCharacterEncoding =
          fun (x60 : Ojs.t) ->
            let x61 = x60 in
            match Ojs.string_of_js x61 with
            | "ascii" -> `ascii
            | "binary" -> `binary
            | "ucs-2" -> `ucs_2
            | "ucs2" -> `ucs2
            | _ -> assert false
        and crypto_LegacyCharacterEncoding_to_js :
          crypto_LegacyCharacterEncoding -> Ojs.t =
          fun (x59 : [ `ascii  | `binary  | `ucs_2  | `ucs2 ]) ->
            match x59 with
            | `ascii -> Ojs.string_to_js "ascii"
            | `binary -> Ojs.string_to_js "binary"
            | `ucs_2 -> Ojs.string_to_js "ucs-2"
            | `ucs2 -> Ojs.string_to_js "ucs2"
        and crypto_PrivateKeyInput_of_js : Ojs.t -> crypto_PrivateKeyInput =
          Obj.magic
        and crypto_PrivateKeyInput_to_js : crypto_PrivateKeyInput -> Ojs.t =
          Obj.magic
        and crypto_PublicKeyInput_of_js : Ojs.t -> crypto_PublicKeyInput =
          Obj.magic
        and crypto_PublicKeyInput_to_js : crypto_PublicKeyInput -> Ojs.t =
          Obj.magic
        and crypto_RSAKeyPairKeyObjectOptions_of_js :
          Ojs.t -> crypto_RSAKeyPairKeyObjectOptions = Obj.magic
        and crypto_RSAKeyPairKeyObjectOptions_to_js :
          crypto_RSAKeyPairKeyObjectOptions -> Ojs.t = Obj.magic
        and crypto_RSAKeyPairOptions_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) ->
                Ojs.t -> ('PubF, 'PrivF) crypto_RSAKeyPairOptions
          = fun _PubF -> fun _PrivF -> Obj.magic
        and crypto_RSAKeyPairOptions_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) ->
                ('PubF, 'PrivF) crypto_RSAKeyPairOptions -> Ojs.t
          = fun _PubF -> fun _PrivF -> Obj.magic
        and crypto_RsaPrivateKey_of_js : Ojs.t -> crypto_RsaPrivateKey =
          Obj.magic
        and crypto_RsaPrivateKey_to_js : crypto_RsaPrivateKey -> Ojs.t =
          Obj.magic
        and crypto_RsaPublicKey_of_js : Ojs.t -> crypto_RsaPublicKey =
          Obj.magic
        and crypto_RsaPublicKey_to_js : crypto_RsaPublicKey -> Ojs.t =
          Obj.magic
        and crypto_ScryptOptions_of_js : Ojs.t -> crypto_ScryptOptions =
          Obj.magic
        and crypto_ScryptOptions_to_js : crypto_ScryptOptions -> Ojs.t =
          Obj.magic
        and crypto_SignKeyObjectInput_of_js :
          Ojs.t -> crypto_SignKeyObjectInput = Obj.magic
        and crypto_SignKeyObjectInput_to_js :
          crypto_SignKeyObjectInput -> Ojs.t = Obj.magic
        and crypto_SignPrivateKeyInput_of_js :
          Ojs.t -> crypto_SignPrivateKeyInput = Obj.magic
        and crypto_SignPrivateKeyInput_to_js :
          crypto_SignPrivateKeyInput -> Ojs.t = Obj.magic
        and crypto_Signer_of_js : Ojs.t -> crypto_Signer = Obj.magic
        and crypto_Signer_to_js : crypto_Signer -> Ojs.t = Obj.magic
        and crypto_SigningOptions_of_js : Ojs.t -> crypto_SigningOptions =
          Obj.magic
        and crypto_SigningOptions_to_js : crypto_SigningOptions -> Ojs.t =
          Obj.magic
        and crypto_Verify_of_js : Ojs.t -> crypto_Verify = Obj.magic
        and crypto_Verify_to_js : crypto_Verify -> Ojs.t = Obj.magic
        and crypto_VerifyKeyObjectInput_of_js :
          Ojs.t -> crypto_VerifyKeyObjectInput = Obj.magic
        and crypto_VerifyKeyObjectInput_to_js :
          crypto_VerifyKeyObjectInput -> Ojs.t = Obj.magic
        and crypto_VerifyPublicKeyInput_of_js :
          Ojs.t -> crypto_VerifyPublicKeyInput = Obj.magic
        and crypto_VerifyPublicKeyInput_to_js :
          crypto_VerifyPublicKeyInput -> Ojs.t = Obj.magic
        and crypto_X25519KeyPairKeyObjectOptions_of_js :
          Ojs.t -> crypto_X25519KeyPairKeyObjectOptions = Obj.magic
        and crypto_X25519KeyPairKeyObjectOptions_to_js :
          crypto_X25519KeyPairKeyObjectOptions -> Ojs.t = Obj.magic
        and crypto_X25519KeyPairOptions_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) ->
                Ojs.t -> ('PubF, 'PrivF) crypto_X25519KeyPairOptions
          = fun _PubF -> fun _PrivF -> Obj.magic
        and crypto_X25519KeyPairOptions_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) ->
                ('PubF, 'PrivF) crypto_X25519KeyPairOptions -> Ojs.t
          = fun _PubF -> fun _PrivF -> Obj.magic
        and crypto_X448KeyPairKeyObjectOptions_of_js :
          Ojs.t -> crypto_X448KeyPairKeyObjectOptions = Obj.magic
        and crypto_X448KeyPairKeyObjectOptions_to_js :
          crypto_X448KeyPairKeyObjectOptions -> Ojs.t = Obj.magic
        and crypto_X448KeyPairOptions_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) ->
                Ojs.t -> ('PubF, 'PrivF) crypto_X448KeyPairOptions
          = fun _PubF -> fun _PrivF -> Obj.magic
        and crypto_X448KeyPairOptions_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) ->
                ('PubF, 'PrivF) crypto_X448KeyPairOptions -> Ojs.t
          = fun _PubF -> fun _PrivF -> Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x63 : Ojs.t) -> anonymous_interface_0_of_js x63
    and t_to_js : t -> Ojs.t =
      fun (x62 : anonymous_interface_0) -> anonymous_interface_0_to_js x62
    let (get_plaintextLength : t -> float) =
      fun (x64 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x64) "plaintextLength")
    let (set_plaintextLength : t -> float -> unit) =
      fun (x65 : t) ->
        fun (x66 : float) ->
          Ojs.set_prop_ascii (t_to_js x65) "plaintextLength"
            (Ojs.float_to_js x66)
  end
module AnonymousInterface1 =
  struct
    type t = anonymous_interface_1
    let rec t_of_js : Ojs.t -> t =
      fun (x68 : Ojs.t) -> anonymous_interface_1_of_js x68
    and t_to_js : t -> Ojs.t =
      fun (x67 : anonymous_interface_1) -> anonymous_interface_1_to_js x67
    let (get_privateKey : t -> crypto_KeyObject) =
      fun (x69 : t) ->
        crypto_KeyObject_of_js
          (Ojs.get_prop_ascii (t_to_js x69) "privateKey")
    let (set_privateKey : t -> crypto_KeyObject -> unit) =
      fun (x70 : t) ->
        fun (x71 : crypto_KeyObject) ->
          Ojs.set_prop_ascii (t_to_js x70) "privateKey"
            (crypto_KeyObject_to_js x71)
    let (get_publicKey : t -> crypto_KeyObject) =
      fun (x72 : t) ->
        crypto_KeyObject_of_js (Ojs.get_prop_ascii (t_to_js x72) "publicKey")
    let (set_publicKey : t -> crypto_KeyObject -> unit) =
      fun (x73 : t) ->
        fun (x74 : crypto_KeyObject) ->
          Ojs.set_prop_ascii (t_to_js x73) "publicKey"
            (crypto_KeyObject_to_js x74)
  end
module AnonymousInterface2 =
  struct
    type t = anonymous_interface_2
    let rec t_of_js : Ojs.t -> t =
      fun (x76 : Ojs.t) -> anonymous_interface_2_of_js x76
    and t_to_js : t -> Ojs.t =
      fun (x75 : anonymous_interface_2) -> anonymous_interface_2_to_js x75
    let (get_publicKey : t -> Buffer.t) =
      fun (x77 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x77) "publicKey")
    let (set_publicKey : t -> Buffer.t -> unit) =
      fun (x78 : t) ->
        fun (x79 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x78) "publicKey" (Buffer.t_to_js x79)
    let (get_privateKey : t -> Buffer.t) =
      fun (x80 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x80) "privateKey")
    let (set_privateKey : t -> Buffer.t -> unit) =
      fun (x81 : t) ->
        fun (x82 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x81) "privateKey" (Buffer.t_to_js x82)
  end
module AnonymousInterface3 =
  struct
    type t = anonymous_interface_3
    let rec t_of_js : Ojs.t -> t =
      fun (x84 : Ojs.t) -> anonymous_interface_3_of_js x84
    and t_to_js : t -> Ojs.t =
      fun (x83 : anonymous_interface_3) -> anonymous_interface_3_to_js x83
    let (get_publicKey : t -> Buffer.t) =
      fun (x85 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x85) "publicKey")
    let (set_publicKey : t -> Buffer.t -> unit) =
      fun (x86 : t) ->
        fun (x87 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x86) "publicKey" (Buffer.t_to_js x87)
    let (get_privateKey : t -> string) =
      fun (x88 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x88) "privateKey")
    let (set_privateKey : t -> string -> unit) =
      fun (x89 : t) ->
        fun (x90 : string) ->
          Ojs.set_prop_ascii (t_to_js x89) "privateKey"
            (Ojs.string_to_js x90)
  end
module AnonymousInterface4 =
  struct
    type t = anonymous_interface_4
    let rec t_of_js : Ojs.t -> t =
      fun (x92 : Ojs.t) -> anonymous_interface_4_of_js x92
    and t_to_js : t -> Ojs.t =
      fun (x91 : anonymous_interface_4) -> anonymous_interface_4_to_js x91
    let (get_publicKey : t -> string) =
      fun (x93 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x93) "publicKey")
    let (set_publicKey : t -> string -> unit) =
      fun (x94 : t) ->
        fun (x95 : string) ->
          Ojs.set_prop_ascii (t_to_js x94) "publicKey" (Ojs.string_to_js x95)
    let (get_privateKey : t -> Buffer.t) =
      fun (x96 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x96) "privateKey")
    let (set_privateKey : t -> Buffer.t -> unit) =
      fun (x97 : t) ->
        fun (x98 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x97) "privateKey" (Buffer.t_to_js x98)
  end
module AnonymousInterface5 =
  struct
    type t = anonymous_interface_5
    let rec t_of_js : Ojs.t -> t =
      fun (x100 : Ojs.t) -> anonymous_interface_5_of_js x100
    and t_to_js : t -> Ojs.t =
      fun (x99 : anonymous_interface_5) -> anonymous_interface_5_to_js x99
    let (get_publicKey : t -> string) =
      fun (x101 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x101) "publicKey")
    let (set_publicKey : t -> string -> unit) =
      fun (x102 : t) ->
        fun (x103 : string) ->
          Ojs.set_prop_ascii (t_to_js x102) "publicKey"
            (Ojs.string_to_js x103)
    let (get_privateKey : t -> string) =
      fun (x104 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x104) "privateKey")
    let (set_privateKey : t -> string -> unit) =
      fun (x105 : t) ->
        fun (x106 : string) ->
          Ojs.set_prop_ascii (t_to_js x105) "privateKey"
            (Ojs.string_to_js x106)
  end
module AnonymousInterface6 =
  struct
    type t = anonymous_interface_6
    let rec t_of_js : Ojs.t -> t =
      fun (x108 : Ojs.t) -> anonymous_interface_6_of_js x108
    and t_to_js : t -> Ojs.t =
      fun (x107 : anonymous_interface_6) -> anonymous_interface_6_to_js x107
    let (get_type : t -> [ `pkcs8 ]) =
      fun (x109 : t) ->
        let x110 = Ojs.get_prop_ascii (t_to_js x109) "type" in
        match Ojs.string_of_js x110 with
        | "pkcs8" -> `pkcs8
        | _ -> assert false
    let (set_type : t -> [ `pkcs8 ] -> unit) =
      fun (x111 : t) ->
        fun (x112 : [ `pkcs8 ]) ->
          Ojs.set_prop_ascii (t_to_js x111) "type"
            (match x112 with | `pkcs8 -> Ojs.string_to_js "pkcs8")
  end
module AnonymousInterface7 =
  struct
    type t = anonymous_interface_7
    let rec t_of_js : Ojs.t -> t =
      fun (x114 : Ojs.t) -> anonymous_interface_7_of_js x114
    and t_to_js : t -> Ojs.t =
      fun (x113 : anonymous_interface_7) -> anonymous_interface_7_to_js x113
    let (get_type : t -> [ `spki ]) =
      fun (x115 : t) ->
        let x116 = Ojs.get_prop_ascii (t_to_js x115) "type" in
        match Ojs.string_of_js x116 with
        | "spki" -> `spki
        | _ -> assert false
    let (set_type : t -> [ `spki ] -> unit) =
      fun (x117 : t) ->
        fun (x118 : [ `spki ]) ->
          Ojs.set_prop_ascii (t_to_js x117) "type"
            (match x118 with | `spki -> Ojs.string_to_js "spki")
    let (get_format : t -> 'PubF) =
      fun (x119 : t) ->
        Obj.magic (Ojs.get_prop_ascii (t_to_js x119) "format")
    let (set_format : t -> 'PubF -> unit) =
      fun (x120 : t) ->
        fun (x121 : 'PubF) ->
          Ojs.set_prop_ascii (t_to_js x120) "format" (Obj.magic x121)
  end
module AnonymousInterface8 =
  struct
    type t = anonymous_interface_8
    let rec t_of_js : Ojs.t -> t =
      fun (x123 : Ojs.t) -> anonymous_interface_8_of_js x123
    and t_to_js : t -> Ojs.t =
      fun (x122 : anonymous_interface_8) -> anonymous_interface_8_to_js x122
    let (get_type : t -> [ `pkcs1  | `pkcs8 ]) =
      fun (x124 : t) ->
        let x125 = Ojs.get_prop_ascii (t_to_js x124) "type" in
        match Ojs.string_of_js x125 with
        | "pkcs1" -> `pkcs1
        | "pkcs8" -> `pkcs8
        | _ -> assert false
    let (set_type : t -> [ `pkcs1  | `pkcs8 ] -> unit) =
      fun (x126 : t) ->
        fun (x127 : [ `pkcs1  | `pkcs8 ]) ->
          Ojs.set_prop_ascii (t_to_js x126) "type"
            (match x127 with
             | `pkcs1 -> Ojs.string_to_js "pkcs1"
             | `pkcs8 -> Ojs.string_to_js "pkcs8")
  end
module AnonymousInterface9 =
  struct
    type t = anonymous_interface_9
    let rec t_of_js : Ojs.t -> t =
      fun (x129 : Ojs.t) -> anonymous_interface_9_of_js x129
    and t_to_js : t -> Ojs.t =
      fun (x128 : anonymous_interface_9) -> anonymous_interface_9_to_js x128
    let (get_type : t -> [ `pkcs1  | `spki ]) =
      fun (x130 : t) ->
        let x131 = Ojs.get_prop_ascii (t_to_js x130) "type" in
        match Ojs.string_of_js x131 with
        | "pkcs1" -> `pkcs1
        | "spki" -> `spki
        | _ -> assert false
    let (set_type : t -> [ `pkcs1  | `spki ] -> unit) =
      fun (x132 : t) ->
        fun (x133 : [ `pkcs1  | `spki ]) ->
          Ojs.set_prop_ascii (t_to_js x132) "type"
            (match x133 with
             | `pkcs1 -> Ojs.string_to_js "pkcs1"
             | `spki -> Ojs.string_to_js "spki")
    let (get_format : t -> 'PubF) =
      fun (x134 : t) ->
        Obj.magic (Ojs.get_prop_ascii (t_to_js x134) "format")
    let (set_format : t -> 'PubF -> unit) =
      fun (x135 : t) ->
        fun (x136 : 'PubF) ->
          Ojs.set_prop_ascii (t_to_js x135) "format" (Obj.magic x136)
  end
module AnonymousInterface10 =
  struct
    type t = anonymous_interface_10
    let rec t_of_js : Ojs.t -> t =
      fun (x138 : Ojs.t) -> anonymous_interface_10_of_js x138
    and t_to_js : t -> Ojs.t =
      fun (x137 : anonymous_interface_10) ->
        anonymous_interface_10_to_js x137
    let (get_type : t -> [ `pkcs8  | `sec1 ]) =
      fun (x139 : t) ->
        let x140 = Ojs.get_prop_ascii (t_to_js x139) "type" in
        match Ojs.string_of_js x140 with
        | "pkcs8" -> `pkcs8
        | "sec1" -> `sec1
        | _ -> assert false
    let (set_type : t -> [ `pkcs8  | `sec1 ] -> unit) =
      fun (x141 : t) ->
        fun (x142 : [ `pkcs8  | `sec1 ]) ->
          Ojs.set_prop_ascii (t_to_js x141) "type"
            (match x142 with
             | `pkcs8 -> Ojs.string_to_js "pkcs8"
             | `sec1 -> Ojs.string_to_js "sec1")
  end
module AnonymousInterface11 =
  struct
    type t = anonymous_interface_11
    let rec t_of_js : Ojs.t -> t =
      fun (x144 : Ojs.t) -> anonymous_interface_11_of_js x144
    and t_to_js : t -> Ojs.t =
      fun (x143 : anonymous_interface_11) ->
        anonymous_interface_11_to_js x143
    let (create : t -> crypto_Certificate) =
      fun (x145 : t) ->
        crypto_Certificate_of_js (Ojs.new_obj (t_to_js x145) [||])
    let (apply : t -> crypto_Certificate) =
      fun (x146 : t) ->
        crypto_Certificate_of_js (Ojs.apply (t_to_js x146) [||])
  end
module Crypto =
  struct
    open Node_stream
    module Certificate =
      struct
        type t = crypto_Certificate
        let rec t_of_js : Ojs.t -> t =
          fun (x148 : Ojs.t) -> crypto_Certificate_of_js x148
        and t_to_js : t -> Ojs.t =
          fun (x147 : crypto_Certificate) -> crypto_Certificate_to_js x147
        let (exportChallenge : t -> spkac:crypto_BinaryLike -> Buffer.t) =
          fun (x150 : t) ->
            fun ~spkac:(x149 : crypto_BinaryLike) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x150) "exportChallenge"
                   [|(crypto_BinaryLike_to_js x149)|])
        let (exportPublicKey :
          t ->
            spkac:crypto_BinaryLike -> ?encoding:string -> unit -> Buffer.t)
          =
          fun (x155 : t) ->
            fun ~spkac:(x151 : crypto_BinaryLike) ->
              fun ?encoding:(x152 : string option) ->
                fun () ->
                  Buffer.t_of_js
                    (let x156 = t_to_js x155 in
                     Ojs.call (Ojs.get_prop_ascii x156 "exportPublicKey")
                       "apply"
                       [|x156;((let x153 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x153 "push"
                                     [|(crypto_BinaryLike_to_js x151)|]);
                                (match x152 with
                                 | Some x154 ->
                                     ignore
                                       (Ojs.call x153 "push"
                                          [|(Ojs.string_to_js x154)|])
                                 | None -> ());
                                x153))|])
        let (verifySpkac : t -> spkac:ArrayBufferView.t -> bool) =
          fun (x158 : t) ->
            fun ~spkac:(x157 : ArrayBufferView.t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x158) "verifySpkac"
                   [|(ArrayBufferView.t_to_js x157)|])
      end
    let (certificate :
      (crypto_Certificate, anonymous_interface_11) intersection2) =
      intersection2_of_js crypto_Certificate_of_js
        anonymous_interface_11_of_js
        (Ojs.get_prop_ascii Import.crypto "Certificate")
    module Constants =
      struct
        let (oPENSSL_VERSION_NUMBER : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "OPENSSL_VERSION_NUMBER")
        let (sSL_OP_ALL : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants") "SSL_OP_ALL")
        let (sSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION")
        let (sSL_OP_CIPHER_SERVER_PREFERENCE : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_CIPHER_SERVER_PREFERENCE")
        let (sSL_OP_CISCO_ANYCONNECT : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_CISCO_ANYCONNECT")
        let (sSL_OP_COOKIE_EXCHANGE : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_COOKIE_EXCHANGE")
        let (sSL_OP_CRYPTOPRO_TLSEXT_BUG : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_CRYPTOPRO_TLSEXT_BUG")
        let (sSL_OP_DONT_INSERT_EMPTY_FRAGMENTS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS")
        let (sSL_OP_EPHEMERAL_RSA : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_EPHEMERAL_RSA")
        let (sSL_OP_LEGACY_SERVER_CONNECT : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_LEGACY_SERVER_CONNECT")
        let (sSL_OP_MICROSOFT_BIG_SSLV3_BUFFER : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER")
        let (sSL_OP_MICROSOFT_SESS_ID_BUG : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_MICROSOFT_SESS_ID_BUG")
        let (sSL_OP_MSIE_SSLV2_RSA_PADDING : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_MSIE_SSLV2_RSA_PADDING")
        let (sSL_OP_NETSCAPE_CA_DN_BUG : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_CA_DN_BUG")
        let (sSL_OP_NETSCAPE_CHALLENGE_BUG : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_CHALLENGE_BUG")
        let (sSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG")
        let (sSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG")
        let (sSL_OP_NO_COMPRESSION : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_COMPRESSION")
        let (sSL_OP_NO_QUERY_MTU : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_QUERY_MTU")
        let (sSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION")
        let (sSL_OP_NO_SSLv2 : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_SSLv2")
        let (sSL_OP_NO_SSLv3 : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_SSLv3")
        let (sSL_OP_NO_TICKET : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TICKET")
        let (sSL_OP_NO_TLSv1 : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TLSv1")
        let (sSL_OP_NO_TLSv1_1 : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TLSv1_1")
        let (sSL_OP_NO_TLSv1_2 : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TLSv1_2")
        let (sSL_OP_PKCS1_CHECK_1 : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_PKCS1_CHECK_1")
        let (sSL_OP_PKCS1_CHECK_2 : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_PKCS1_CHECK_2")
        let (sSL_OP_SINGLE_DH_USE : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SINGLE_DH_USE")
        let (sSL_OP_SINGLE_ECDH_USE : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SINGLE_ECDH_USE")
        let (sSL_OP_SSLEAY_080_CLIENT_DH_BUG : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SSLEAY_080_CLIENT_DH_BUG")
        let (sSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG")
        let (sSL_OP_TLS_BLOCK_PADDING_BUG : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_TLS_BLOCK_PADDING_BUG")
        let (sSL_OP_TLS_D5_BUG : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_TLS_D5_BUG")
        let (sSL_OP_TLS_ROLLBACK_BUG : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_TLS_ROLLBACK_BUG")
        let (eNGINE_METHOD_RSA : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_RSA")
        let (eNGINE_METHOD_DSA : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_DSA")
        let (eNGINE_METHOD_DH : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_DH")
        let (eNGINE_METHOD_RAND : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_RAND")
        let (eNGINE_METHOD_EC : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_EC")
        let (eNGINE_METHOD_CIPHERS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_CIPHERS")
        let (eNGINE_METHOD_DIGESTS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_DIGESTS")
        let (eNGINE_METHOD_PKEY_METHS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_PKEY_METHS")
        let (eNGINE_METHOD_PKEY_ASN1_METHS : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_PKEY_ASN1_METHS")
        let (eNGINE_METHOD_ALL : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_ALL")
        let (eNGINE_METHOD_NONE : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_NONE")
        let (dH_CHECK_P_NOT_SAFE_PRIME : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_CHECK_P_NOT_SAFE_PRIME")
        let (dH_CHECK_P_NOT_PRIME : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_CHECK_P_NOT_PRIME")
        let (dH_UNABLE_TO_CHECK_GENERATOR : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_UNABLE_TO_CHECK_GENERATOR")
        let (dH_NOT_SUITABLE_GENERATOR : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_NOT_SUITABLE_GENERATOR")
        let (aLPN_ENABLED : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants") "ALPN_ENABLED")
        let (rSA_PKCS1_PADDING : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PKCS1_PADDING")
        let (rSA_SSLV23_PADDING : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_SSLV23_PADDING")
        let (rSA_NO_PADDING : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_NO_PADDING")
        let (rSA_PKCS1_OAEP_PADDING : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PKCS1_OAEP_PADDING")
        let (rSA_X931_PADDING : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_X931_PADDING")
        let (rSA_PKCS1_PSS_PADDING : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PKCS1_PSS_PADDING")
        let (rSA_PSS_SALTLEN_DIGEST : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PSS_SALTLEN_DIGEST")
        let (rSA_PSS_SALTLEN_MAX_SIGN : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PSS_SALTLEN_MAX_SIGN")
        let (rSA_PSS_SALTLEN_AUTO : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PSS_SALTLEN_AUTO")
        let (pOINT_CONVERSION_COMPRESSED : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "POINT_CONVERSION_COMPRESSED")
        let (pOINT_CONVERSION_UNCOMPRESSED : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "POINT_CONVERSION_UNCOMPRESSED")
        let (pOINT_CONVERSION_HYBRID : float) =
          Ojs.float_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "POINT_CONVERSION_HYBRID")
        let (defaultCoreCipherList : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "defaultCoreCipherList")
        let (defaultCipherList : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "defaultCipherList")
      end
    module HashOptions =
      struct
        type t = crypto_HashOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x162 : Ojs.t) -> crypto_HashOptions_of_js x162
        and t_to_js : t -> Ojs.t =
          fun (x161 : crypto_HashOptions) -> crypto_HashOptions_to_js x161
        let (get_outputLength : t -> float) =
          fun (x163 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x163) "outputLength")
        let (set_outputLength : t -> float -> unit) =
          fun (x164 : t) ->
            fun (x165 : float) ->
              Ojs.set_prop_ascii (t_to_js x164) "outputLength"
                (Ojs.float_to_js x165)
        let (cast : t -> Stream.TransformOptions.t) =
          fun (x166 : t) -> Stream.TransformOptions.t_of_js (t_to_js x166)
      end
    let (fips : bool) =
      Ojs.bool_of_js (Ojs.get_prop_ascii Import.crypto "fips")
    let (createHash :
      algorithm:string -> ?options:crypto_HashOptions -> unit -> crypto_Hash)
      =
      fun ~algorithm:(x167 : string) ->
        fun ?options:(x168 : crypto_HashOptions option) ->
          fun () ->
            crypto_Hash_of_js
              (let x171 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x171 "createHash") "apply"
                 [|x171;((let x169 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x169 "push" [|(Ojs.string_to_js x167)|]);
                          (match x168 with
                           | Some x170 ->
                               ignore
                                 (Ojs.call x169 "push"
                                    [|(crypto_HashOptions_to_js x170)|])
                           | None -> ());
                          x169))|])
    let (createHmac :
      algorithm:string ->
        key:(crypto_BinaryLike, crypto_KeyObject) union2 ->
          ?options:Stream.TransformOptions.t -> unit -> crypto_Hmac)
      =
      fun ~algorithm:(x172 : string) ->
        fun ~key:(x173 : (crypto_BinaryLike, crypto_KeyObject) union2) ->
          fun ?options:(x174 : Stream.TransformOptions.t option) ->
            fun () ->
              crypto_Hmac_of_js
                (let x179 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x179 "createHmac") "apply"
                   [|x179;((let x175 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x175 "push"
                                 [|(Ojs.string_to_js x172)|]);
                            ignore
                              (Ojs.call x175 "push"
                                 [|(union2_to_js crypto_BinaryLike_to_js
                                      crypto_KeyObject_to_js x173)|]);
                            (match x174 with
                             | Some x176 ->
                                 ignore
                                   (Ojs.call x175 "push"
                                      [|(Stream.TransformOptions.t_to_js x176)|])
                             | None -> ());
                            x175))|])
    module BinaryToTextEncoding =
      struct
        type t = crypto_BinaryToTextEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x181 : Ojs.t) -> crypto_BinaryToTextEncoding_of_js x181
        and t_to_js : t -> Ojs.t =
          fun (x180 : crypto_BinaryToTextEncoding) ->
            crypto_BinaryToTextEncoding_to_js x180
      end
    module CharacterEncoding =
      struct
        type t = crypto_CharacterEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x183 : Ojs.t) -> crypto_CharacterEncoding_of_js x183
        and t_to_js : t -> Ojs.t =
          fun (x182 : crypto_CharacterEncoding) ->
            crypto_CharacterEncoding_to_js x182
      end
    module LegacyCharacterEncoding =
      struct
        type t = crypto_LegacyCharacterEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x185 : Ojs.t) -> crypto_LegacyCharacterEncoding_of_js x185
        and t_to_js : t -> Ojs.t =
          fun (x184 : crypto_LegacyCharacterEncoding) ->
            crypto_LegacyCharacterEncoding_to_js x184
      end
    module Encoding =
      struct
        type t = crypto_Encoding
        let rec t_of_js : Ojs.t -> t =
          fun (x187 : Ojs.t) -> crypto_Encoding_of_js x187
        and t_to_js : t -> Ojs.t =
          fun (x186 : crypto_Encoding) -> crypto_Encoding_to_js x186
      end
    module ECDHKeyFormat =
      struct
        type t = crypto_ECDHKeyFormat
        let rec t_of_js : Ojs.t -> t =
          fun (x189 : Ojs.t) -> crypto_ECDHKeyFormat_of_js x189
        and t_to_js : t -> Ojs.t =
          fun (x188 : crypto_ECDHKeyFormat) ->
            crypto_ECDHKeyFormat_to_js x188
      end
    module Hash =
      struct
        type t = crypto_Hash
        let rec t_of_js : Ojs.t -> t =
          fun (x191 : Ojs.t) -> crypto_Hash_of_js x191
        and t_to_js : t -> Ojs.t =
          fun (x190 : crypto_Hash) -> crypto_Hash_to_js x190
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Hash") [||])
        let (copy : t -> t) =
          fun (x192 : t) -> t_of_js (Ojs.call (t_to_js x192) "copy" [||])
        let (update : t -> data:crypto_BinaryLike -> t) =
          fun (x194 : t) ->
            fun ~data:(x193 : crypto_BinaryLike) ->
              t_of_js
                (Ojs.call (t_to_js x194) "update"
                   [|(crypto_BinaryLike_to_js x193)|])
        let (update' :
          t -> data:string -> input_encoding:crypto_Encoding -> t) =
          fun (x197 : t) ->
            fun ~data:(x195 : string) ->
              fun ~input_encoding:(x196 : crypto_Encoding) ->
                t_of_js
                  (Ojs.call (t_to_js x197) "update"
                     [|(Ojs.string_to_js x195);(crypto_Encoding_to_js x196)|])
        let (digest : t -> Buffer.t) =
          fun (x198 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x198) "digest" [||])
        let (digest' : t -> encoding:crypto_BinaryToTextEncoding -> string) =
          fun (x200 : t) ->
            fun ~encoding:(x199 : crypto_BinaryToTextEncoding) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x200) "digest"
                   [|(crypto_BinaryToTextEncoding_to_js x199)|])
        let (cast : t -> Stream.Transform.t) =
          fun (x201 : t) -> Stream.Transform.t_of_js (t_to_js x201)
      end
    module Hmac =
      struct
        type t = crypto_Hmac
        let rec t_of_js : Ojs.t -> t =
          fun (x203 : Ojs.t) -> crypto_Hmac_of_js x203
        and t_to_js : t -> Ojs.t =
          fun (x202 : crypto_Hmac) -> crypto_Hmac_to_js x202
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Hmac") [||])
        let (update : t -> data:crypto_BinaryLike -> t) =
          fun (x205 : t) ->
            fun ~data:(x204 : crypto_BinaryLike) ->
              t_of_js
                (Ojs.call (t_to_js x205) "update"
                   [|(crypto_BinaryLike_to_js x204)|])
        let (update' :
          t -> data:string -> input_encoding:crypto_Encoding -> t) =
          fun (x208 : t) ->
            fun ~data:(x206 : string) ->
              fun ~input_encoding:(x207 : crypto_Encoding) ->
                t_of_js
                  (Ojs.call (t_to_js x208) "update"
                     [|(Ojs.string_to_js x206);(crypto_Encoding_to_js x207)|])
        let (digest : t -> Buffer.t) =
          fun (x209 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x209) "digest" [||])
        let (digest' : t -> encoding:crypto_BinaryToTextEncoding -> string) =
          fun (x211 : t) ->
            fun ~encoding:(x210 : crypto_BinaryToTextEncoding) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x211) "digest"
                   [|(crypto_BinaryToTextEncoding_to_js x210)|])
        let (cast : t -> Stream.Transform.t) =
          fun (x212 : t) -> Stream.Transform.t_of_js (t_to_js x212)
      end
    module KeyObjectType =
      struct
        type t = crypto_KeyObjectType
        let rec t_of_js : Ojs.t -> t =
          fun (x214 : Ojs.t) -> crypto_KeyObjectType_of_js x214
        and t_to_js : t -> Ojs.t =
          fun (x213 : crypto_KeyObjectType) ->
            crypto_KeyObjectType_to_js x213
      end
    module KeyExportOptions =
      struct
        type 'T t = 'T crypto_KeyExportOptions
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x217 : Ojs.t) ->
              crypto_KeyExportOptions_of_js __T_of_js x217
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x215 : __T crypto_KeyExportOptions) ->
              crypto_KeyExportOptions_to_js __T_to_js x215
        let (get_type : 'T t -> [ `pkcs1  | `pkcs8  | `sec1  | `spki ]) =
          fun (x219 : 'T t) ->
            let x221 = Ojs.get_prop_ascii (t_to_js Obj.magic x219) "type" in
            match Ojs.string_of_js x221 with
            | "pkcs1" -> `pkcs1
            | "pkcs8" -> `pkcs8
            | "sec1" -> `sec1
            | "spki" -> `spki
            | _ -> assert false
        let (set_type :
          'T t -> [ `pkcs1  | `pkcs8  | `sec1  | `spki ] -> unit) =
          fun (x222 : 'T t) ->
            fun (x223 : [ `pkcs1  | `pkcs8  | `sec1  | `spki ]) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x222) "type"
                (match x223 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `pkcs8 -> Ojs.string_to_js "pkcs8"
                 | `sec1 -> Ojs.string_to_js "sec1"
                 | `spki -> Ojs.string_to_js "spki")
        let (get_format : 'T t -> 'T) =
          fun (x225 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x225) "format")
        let (set_format : 'T t -> 'T -> unit) =
          fun (x227 : 'T t) ->
            fun (x228 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x227) "format"
                (Obj.magic x228)
        let (get_cipher : 'T t -> string) =
          fun (x230 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x230) "cipher")
        let (set_cipher : 'T t -> string -> unit) =
          fun (x232 : 'T t) ->
            fun (x233 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x232) "cipher"
                (Ojs.string_to_js x233)
        let (get_passphrase : 'T t -> Buffer.t or_string) =
          fun (x235 : 'T t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x235) "passphrase")
        let (set_passphrase : 'T t -> Buffer.t or_string -> unit) =
          fun (x238 : 'T t) ->
            fun (x239 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x238) "passphrase"
                (or_string_to_js Buffer.t_to_js x239)
      end
    module KeyObject =
      struct
        type t = crypto_KeyObject
        let rec t_of_js : Ojs.t -> t =
          fun (x243 : Ojs.t) -> crypto_KeyObject_of_js x243
        and t_to_js : t -> Ojs.t =
          fun (x242 : crypto_KeyObject) -> crypto_KeyObject_to_js x242
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "KeyObject")
                 [||])
        let (get_asymmetricKeyType : t -> crypto_KeyType) =
          fun (x244 : t) ->
            crypto_KeyType_of_js
              (Ojs.get_prop_ascii (t_to_js x244) "asymmetricKeyType")
        let (set_asymmetricKeyType : t -> crypto_KeyType -> unit) =
          fun (x245 : t) ->
            fun (x246 : crypto_KeyType) ->
              Ojs.set_prop_ascii (t_to_js x245) "asymmetricKeyType"
                (crypto_KeyType_to_js x246)
        let (get_asymmetricKeySize : t -> float) =
          fun (x247 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x247) "asymmetricKeySize")
        let (set_asymmetricKeySize : t -> float -> unit) =
          fun (x248 : t) ->
            fun (x249 : float) ->
              Ojs.set_prop_ascii (t_to_js x248) "asymmetricKeySize"
                (Ojs.float_to_js x249)
        let (export :
          t -> options:[ `pem ] crypto_KeyExportOptions -> Buffer.t or_string)
          =
          fun (x252 : t) ->
            fun ~options:(x250 : [ `pem ] crypto_KeyExportOptions) ->
              or_string_of_js Buffer.t_of_js
                (Ojs.call (t_to_js x252) "export"
                   [|(crypto_KeyExportOptions_to_js
                        (fun (x251 : [ `pem ]) ->
                           match x251 with | `pem -> Ojs.string_to_js "pem")
                        x250)|])
        let (export' :
          t -> ?options:[ `der ] crypto_KeyExportOptions -> unit -> Buffer.t)
          =
          fun (x258 : t) ->
            fun ?options:(x254 : [ `der ] crypto_KeyExportOptions option) ->
              fun () ->
                Buffer.t_of_js
                  (let x259 = t_to_js x258 in
                   Ojs.call (Ojs.get_prop_ascii x259 "export") "apply"
                     [|x259;((let x255 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x254 with
                               | Some x256 ->
                                   ignore
                                     (Ojs.call x255 "push"
                                        [|(crypto_KeyExportOptions_to_js
                                             (fun (x257 : [ `der ]) ->
                                                match x257 with
                                                | `der ->
                                                    Ojs.string_to_js "der")
                                             x256)|])
                               | None -> ());
                              x255))|])
        let (get_symmetricKeySize : t -> float) =
          fun (x260 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x260) "symmetricKeySize")
        let (set_symmetricKeySize : t -> float -> unit) =
          fun (x261 : t) ->
            fun (x262 : float) ->
              Ojs.set_prop_ascii (t_to_js x261) "symmetricKeySize"
                (Ojs.float_to_js x262)
        let (get_type : t -> crypto_KeyObjectType) =
          fun (x263 : t) ->
            crypto_KeyObjectType_of_js
              (Ojs.get_prop_ascii (t_to_js x263) "type")
        let (set_type : t -> crypto_KeyObjectType -> unit) =
          fun (x264 : t) ->
            fun (x265 : crypto_KeyObjectType) ->
              Ojs.set_prop_ascii (t_to_js x264) "type"
                (crypto_KeyObjectType_to_js x265)
      end
    module CipherCCMTypes =
      struct
        type t = crypto_CipherCCMTypes
        let rec t_of_js : Ojs.t -> t =
          fun (x267 : Ojs.t) -> crypto_CipherCCMTypes_of_js x267
        and t_to_js : t -> Ojs.t =
          fun (x266 : crypto_CipherCCMTypes) ->
            crypto_CipherCCMTypes_to_js x266
      end
    module CipherGCMTypes =
      struct
        type t = crypto_CipherGCMTypes
        let rec t_of_js : Ojs.t -> t =
          fun (x269 : Ojs.t) -> crypto_CipherGCMTypes_of_js x269
        and t_to_js : t -> Ojs.t =
          fun (x268 : crypto_CipherGCMTypes) ->
            crypto_CipherGCMTypes_to_js x268
      end
    module BinaryLike =
      struct
        type t = crypto_BinaryLike
        let rec t_of_js : Ojs.t -> t =
          fun (x271 : Ojs.t) -> crypto_BinaryLike_of_js x271
        and t_to_js : t -> Ojs.t =
          fun (x270 : crypto_BinaryLike) -> crypto_BinaryLike_to_js x270
      end
    module CipherKey =
      struct
        type t = crypto_CipherKey
        let rec t_of_js : Ojs.t -> t =
          fun (x273 : Ojs.t) -> crypto_CipherKey_of_js x273
        and t_to_js : t -> Ojs.t =
          fun (x272 : crypto_CipherKey) -> crypto_CipherKey_to_js x272
      end
    module CipherCCMOptions =
      struct
        type t = crypto_CipherCCMOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x275 : Ojs.t) -> crypto_CipherCCMOptions_of_js x275
        and t_to_js : t -> Ojs.t =
          fun (x274 : crypto_CipherCCMOptions) ->
            crypto_CipherCCMOptions_to_js x274
        let (get_authTagLength : t -> float) =
          fun (x276 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x276) "authTagLength")
        let (set_authTagLength : t -> float -> unit) =
          fun (x277 : t) ->
            fun (x278 : float) ->
              Ojs.set_prop_ascii (t_to_js x277) "authTagLength"
                (Ojs.float_to_js x278)
        let (cast : t -> Stream.TransformOptions.t) =
          fun (x279 : t) -> Stream.TransformOptions.t_of_js (t_to_js x279)
      end
    module CipherGCMOptions =
      struct
        type t = crypto_CipherGCMOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x281 : Ojs.t) -> crypto_CipherGCMOptions_of_js x281
        and t_to_js : t -> Ojs.t =
          fun (x280 : crypto_CipherGCMOptions) ->
            crypto_CipherGCMOptions_to_js x280
        let (get_authTagLength : t -> float) =
          fun (x282 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x282) "authTagLength")
        let (set_authTagLength : t -> float -> unit) =
          fun (x283 : t) ->
            fun (x284 : float) ->
              Ojs.set_prop_ascii (t_to_js x283) "authTagLength"
                (Ojs.float_to_js x284)
        let (cast : t -> Stream.TransformOptions.t) =
          fun (x285 : t) -> Stream.TransformOptions.t_of_js (t_to_js x285)
      end
    let (createCipher :
      algorithm:crypto_CipherCCMTypes ->
        password:crypto_BinaryLike ->
          options:crypto_CipherCCMOptions -> crypto_CipherCCM)
      =
      fun ~algorithm:(x286 : crypto_CipherCCMTypes) ->
        fun ~password:(x287 : crypto_BinaryLike) ->
          fun ~options:(x288 : crypto_CipherCCMOptions) ->
            crypto_CipherCCM_of_js
              (Ojs.call Import.crypto "createCipher"
                 [|(crypto_CipherCCMTypes_to_js x286);(crypto_BinaryLike_to_js
                                                         x287);(crypto_CipherCCMOptions_to_js
                                                                  x288)|])
    let (createCipher :
      algorithm:crypto_CipherGCMTypes ->
        password:crypto_BinaryLike ->
          ?options:crypto_CipherGCMOptions -> unit -> crypto_CipherGCM)
      =
      fun ~algorithm:(x289 : crypto_CipherGCMTypes) ->
        fun ~password:(x290 : crypto_BinaryLike) ->
          fun ?options:(x291 : crypto_CipherGCMOptions option) ->
            fun () ->
              crypto_CipherGCM_of_js
                (let x294 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x294 "createCipher") "apply"
                   [|x294;((let x292 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x292 "push"
                                 [|(crypto_CipherGCMTypes_to_js x289)|]);
                            ignore
                              (Ojs.call x292 "push"
                                 [|(crypto_BinaryLike_to_js x290)|]);
                            (match x291 with
                             | Some x293 ->
                                 ignore
                                   (Ojs.call x292 "push"
                                      [|(crypto_CipherGCMOptions_to_js x293)|])
                             | None -> ());
                            x292))|])
    let (createCipher :
      algorithm:string ->
        password:crypto_BinaryLike ->
          ?options:Stream.TransformOptions.t -> unit -> crypto_Cipher)
      =
      fun ~algorithm:(x295 : string) ->
        fun ~password:(x296 : crypto_BinaryLike) ->
          fun ?options:(x297 : Stream.TransformOptions.t option) ->
            fun () ->
              crypto_Cipher_of_js
                (let x300 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x300 "createCipher") "apply"
                   [|x300;((let x298 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x298 "push"
                                 [|(Ojs.string_to_js x295)|]);
                            ignore
                              (Ojs.call x298 "push"
                                 [|(crypto_BinaryLike_to_js x296)|]);
                            (match x297 with
                             | Some x299 ->
                                 ignore
                                   (Ojs.call x298 "push"
                                      [|(Stream.TransformOptions.t_to_js x299)|])
                             | None -> ());
                            x298))|])
    let (createCipheriv :
      algorithm:crypto_CipherCCMTypes ->
        key:crypto_CipherKey ->
          iv:crypto_BinaryLike or_null ->
            options:crypto_CipherCCMOptions -> crypto_CipherCCM)
      =
      fun ~algorithm:(x301 : crypto_CipherCCMTypes) ->
        fun ~key:(x302 : crypto_CipherKey) ->
          fun ~iv:(x303 : crypto_BinaryLike or_null) ->
            fun ~options:(x305 : crypto_CipherCCMOptions) ->
              crypto_CipherCCM_of_js
                (Ojs.call Import.crypto "createCipheriv"
                   [|(crypto_CipherCCMTypes_to_js x301);(crypto_CipherKey_to_js
                                                           x302);(or_null_to_js
                                                                    crypto_BinaryLike_to_js
                                                                    x303);(
                     crypto_CipherCCMOptions_to_js x305)|])
    let (createCipheriv :
      algorithm:crypto_CipherGCMTypes ->
        key:crypto_CipherKey ->
          iv:crypto_BinaryLike or_null ->
            ?options:crypto_CipherGCMOptions -> unit -> crypto_CipherGCM)
      =
      fun ~algorithm:(x306 : crypto_CipherGCMTypes) ->
        fun ~key:(x307 : crypto_CipherKey) ->
          fun ~iv:(x308 : crypto_BinaryLike or_null) ->
            fun ?options:(x309 : crypto_CipherGCMOptions option) ->
              fun () ->
                crypto_CipherGCM_of_js
                  (let x313 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x313 "createCipheriv")
                     "apply"
                     [|x313;((let x310 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x310 "push"
                                   [|(crypto_CipherGCMTypes_to_js x306)|]);
                              ignore
                                (Ojs.call x310 "push"
                                   [|(crypto_CipherKey_to_js x307)|]);
                              ignore
                                (Ojs.call x310 "push"
                                   [|(or_null_to_js crypto_BinaryLike_to_js
                                        x308)|]);
                              (match x309 with
                               | Some x311 ->
                                   ignore
                                     (Ojs.call x310 "push"
                                        [|(crypto_CipherGCMOptions_to_js x311)|])
                               | None -> ());
                              x310))|])
    let (createCipheriv :
      algorithm:string ->
        key:crypto_CipherKey ->
          iv:crypto_BinaryLike or_null ->
            ?options:Stream.TransformOptions.t -> unit -> crypto_Cipher)
      =
      fun ~algorithm:(x314 : string) ->
        fun ~key:(x315 : crypto_CipherKey) ->
          fun ~iv:(x316 : crypto_BinaryLike or_null) ->
            fun ?options:(x317 : Stream.TransformOptions.t option) ->
              fun () ->
                crypto_Cipher_of_js
                  (let x321 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x321 "createCipheriv")
                     "apply"
                     [|x321;((let x318 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x318 "push"
                                   [|(Ojs.string_to_js x314)|]);
                              ignore
                                (Ojs.call x318 "push"
                                   [|(crypto_CipherKey_to_js x315)|]);
                              ignore
                                (Ojs.call x318 "push"
                                   [|(or_null_to_js crypto_BinaryLike_to_js
                                        x316)|]);
                              (match x317 with
                               | Some x319 ->
                                   ignore
                                     (Ojs.call x318 "push"
                                        [|(Stream.TransformOptions.t_to_js
                                             x319)|])
                               | None -> ());
                              x318))|])
    module Cipher =
      struct
        type t = crypto_Cipher
        let rec t_of_js : Ojs.t -> t =
          fun (x323 : Ojs.t) -> crypto_Cipher_of_js x323
        and t_to_js : t -> Ojs.t =
          fun (x322 : crypto_Cipher) -> crypto_Cipher_to_js x322
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Cipher") [||])
        let (update : t -> data:crypto_BinaryLike -> Buffer.t) =
          fun (x325 : t) ->
            fun ~data:(x324 : crypto_BinaryLike) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x325) "update"
                   [|(crypto_BinaryLike_to_js x324)|])
        let (update' :
          t -> data:string -> input_encoding:crypto_Encoding -> Buffer.t) =
          fun (x328 : t) ->
            fun ~data:(x326 : string) ->
              fun ~input_encoding:(x327 : crypto_Encoding) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x328) "update"
                     [|(Ojs.string_to_js x326);(crypto_Encoding_to_js x327)|])
        let (update'' :
          t ->
            data:ArrayBufferView.t ->
              input_encoding:never or_undefined ->
                output_encoding:crypto_Encoding -> string)
          =
          fun (x333 : t) ->
            fun ~data:(x329 : ArrayBufferView.t) ->
              fun ~input_encoding:(x330 : never or_undefined) ->
                fun ~output_encoding:(x332 : crypto_Encoding) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x333) "update"
                       [|(ArrayBufferView.t_to_js x329);(or_undefined_to_js
                                                           never_to_js x330);(
                         crypto_Encoding_to_js x332)|])
        let (update''' :
          t ->
            data:string ->
              input_encoding:crypto_Encoding or_undefined ->
                output_encoding:crypto_Encoding -> string)
          =
          fun (x338 : t) ->
            fun ~data:(x334 : string) ->
              fun ~input_encoding:(x335 : crypto_Encoding or_undefined) ->
                fun ~output_encoding:(x337 : crypto_Encoding) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x338) "update"
                       [|(Ojs.string_to_js x334);(or_undefined_to_js
                                                    crypto_Encoding_to_js
                                                    x335);(crypto_Encoding_to_js
                                                             x337)|])
        let (final : t -> Buffer.t) =
          fun (x339 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x339) "final" [||])
        let (final' : t -> output_encoding:BufferEncoding.t -> string) =
          fun (x341 : t) ->
            fun ~output_encoding:(x340 : BufferEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x341) "final"
                   [|(BufferEncoding.t_to_js x340)|])
        let (setAutoPadding : t -> ?auto_padding:bool -> unit -> t) =
          fun (x345 : t) ->
            fun ?auto_padding:(x342 : bool option) ->
              fun () ->
                t_of_js
                  (let x346 = t_to_js x345 in
                   Ojs.call (Ojs.get_prop_ascii x346 "setAutoPadding")
                     "apply"
                     [|x346;((let x343 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x342 with
                               | Some x344 ->
                                   ignore
                                     (Ojs.call x343 "push"
                                        [|(Ojs.bool_to_js x344)|])
                               | None -> ());
                              x343))|])
        let (cast : t -> Stream.Transform.t) =
          fun (x347 : t) -> Stream.Transform.t_of_js (t_to_js x347)
      end
    module CipherCCM =
      struct
        type t = crypto_CipherCCM
        let rec t_of_js : Ojs.t -> t =
          fun (x349 : Ojs.t) -> crypto_CipherCCM_of_js x349
        and t_to_js : t -> Ojs.t =
          fun (x348 : crypto_CipherCCM) -> crypto_CipherCCM_to_js x348
        let (setAAD :
          t -> buffer:ArrayBufferView.t -> options:anonymous_interface_0 -> t)
          =
          fun (x352 : t) ->
            fun ~buffer:(x350 : ArrayBufferView.t) ->
              fun ~options:(x351 : anonymous_interface_0) ->
                t_of_js
                  (Ojs.call (t_to_js x352) "setAAD"
                     [|(ArrayBufferView.t_to_js x350);(anonymous_interface_0_to_js
                                                         x351)|])
        let (getAuthTag : t -> Buffer.t) =
          fun (x353 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x353) "getAuthTag" [||])
        let (cast : t -> crypto_Cipher) =
          fun (x354 : t) -> crypto_Cipher_of_js (t_to_js x354)
      end
    module CipherGCM =
      struct
        type t = crypto_CipherGCM
        let rec t_of_js : Ojs.t -> t =
          fun (x356 : Ojs.t) -> crypto_CipherGCM_of_js x356
        and t_to_js : t -> Ojs.t =
          fun (x355 : crypto_CipherGCM) -> crypto_CipherGCM_to_js x355
        let (setAAD :
          t ->
            buffer:ArrayBufferView.t ->
              ?options:anonymous_interface_0 -> unit -> t)
          =
          fun (x361 : t) ->
            fun ~buffer:(x357 : ArrayBufferView.t) ->
              fun ?options:(x358 : anonymous_interface_0 option) ->
                fun () ->
                  t_of_js
                    (let x362 = t_to_js x361 in
                     Ojs.call (Ojs.get_prop_ascii x362 "setAAD") "apply"
                       [|x362;((let x359 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x359 "push"
                                     [|(ArrayBufferView.t_to_js x357)|]);
                                (match x358 with
                                 | Some x360 ->
                                     ignore
                                       (Ojs.call x359 "push"
                                          [|(anonymous_interface_0_to_js x360)|])
                                 | None -> ());
                                x359))|])
        let (getAuthTag : t -> Buffer.t) =
          fun (x363 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x363) "getAuthTag" [||])
        let (cast : t -> crypto_Cipher) =
          fun (x364 : t) -> crypto_Cipher_of_js (t_to_js x364)
      end
    let (createDecipher :
      algorithm:crypto_CipherCCMTypes ->
        password:crypto_BinaryLike ->
          options:crypto_CipherCCMOptions -> crypto_DecipherCCM)
      =
      fun ~algorithm:(x365 : crypto_CipherCCMTypes) ->
        fun ~password:(x366 : crypto_BinaryLike) ->
          fun ~options:(x367 : crypto_CipherCCMOptions) ->
            crypto_DecipherCCM_of_js
              (Ojs.call Import.crypto "createDecipher"
                 [|(crypto_CipherCCMTypes_to_js x365);(crypto_BinaryLike_to_js
                                                         x366);(crypto_CipherCCMOptions_to_js
                                                                  x367)|])
    let (createDecipher :
      algorithm:crypto_CipherGCMTypes ->
        password:crypto_BinaryLike ->
          ?options:crypto_CipherGCMOptions -> unit -> crypto_DecipherGCM)
      =
      fun ~algorithm:(x368 : crypto_CipherGCMTypes) ->
        fun ~password:(x369 : crypto_BinaryLike) ->
          fun ?options:(x370 : crypto_CipherGCMOptions option) ->
            fun () ->
              crypto_DecipherGCM_of_js
                (let x373 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x373 "createDecipher") "apply"
                   [|x373;((let x371 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x371 "push"
                                 [|(crypto_CipherGCMTypes_to_js x368)|]);
                            ignore
                              (Ojs.call x371 "push"
                                 [|(crypto_BinaryLike_to_js x369)|]);
                            (match x370 with
                             | Some x372 ->
                                 ignore
                                   (Ojs.call x371 "push"
                                      [|(crypto_CipherGCMOptions_to_js x372)|])
                             | None -> ());
                            x371))|])
    let (createDecipher :
      algorithm:string ->
        password:crypto_BinaryLike ->
          ?options:Stream.TransformOptions.t -> unit -> crypto_Decipher)
      =
      fun ~algorithm:(x374 : string) ->
        fun ~password:(x375 : crypto_BinaryLike) ->
          fun ?options:(x376 : Stream.TransformOptions.t option) ->
            fun () ->
              crypto_Decipher_of_js
                (let x379 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x379 "createDecipher") "apply"
                   [|x379;((let x377 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x377 "push"
                                 [|(Ojs.string_to_js x374)|]);
                            ignore
                              (Ojs.call x377 "push"
                                 [|(crypto_BinaryLike_to_js x375)|]);
                            (match x376 with
                             | Some x378 ->
                                 ignore
                                   (Ojs.call x377 "push"
                                      [|(Stream.TransformOptions.t_to_js x378)|])
                             | None -> ());
                            x377))|])
    let (createDecipheriv :
      algorithm:crypto_CipherCCMTypes ->
        key:crypto_CipherKey ->
          iv:crypto_BinaryLike or_null ->
            options:crypto_CipherCCMOptions -> crypto_DecipherCCM)
      =
      fun ~algorithm:(x380 : crypto_CipherCCMTypes) ->
        fun ~key:(x381 : crypto_CipherKey) ->
          fun ~iv:(x382 : crypto_BinaryLike or_null) ->
            fun ~options:(x384 : crypto_CipherCCMOptions) ->
              crypto_DecipherCCM_of_js
                (Ojs.call Import.crypto "createDecipheriv"
                   [|(crypto_CipherCCMTypes_to_js x380);(crypto_CipherKey_to_js
                                                           x381);(or_null_to_js
                                                                    crypto_BinaryLike_to_js
                                                                    x382);(
                     crypto_CipherCCMOptions_to_js x384)|])
    let (createDecipheriv :
      algorithm:crypto_CipherGCMTypes ->
        key:crypto_CipherKey ->
          iv:crypto_BinaryLike or_null ->
            ?options:crypto_CipherGCMOptions -> unit -> crypto_DecipherGCM)
      =
      fun ~algorithm:(x385 : crypto_CipherGCMTypes) ->
        fun ~key:(x386 : crypto_CipherKey) ->
          fun ~iv:(x387 : crypto_BinaryLike or_null) ->
            fun ?options:(x388 : crypto_CipherGCMOptions option) ->
              fun () ->
                crypto_DecipherGCM_of_js
                  (let x392 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x392 "createDecipheriv")
                     "apply"
                     [|x392;((let x389 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x389 "push"
                                   [|(crypto_CipherGCMTypes_to_js x385)|]);
                              ignore
                                (Ojs.call x389 "push"
                                   [|(crypto_CipherKey_to_js x386)|]);
                              ignore
                                (Ojs.call x389 "push"
                                   [|(or_null_to_js crypto_BinaryLike_to_js
                                        x387)|]);
                              (match x388 with
                               | Some x390 ->
                                   ignore
                                     (Ojs.call x389 "push"
                                        [|(crypto_CipherGCMOptions_to_js x390)|])
                               | None -> ());
                              x389))|])
    let (createDecipheriv :
      algorithm:string ->
        key:crypto_CipherKey ->
          iv:crypto_BinaryLike or_null ->
            ?options:Stream.TransformOptions.t -> unit -> crypto_Decipher)
      =
      fun ~algorithm:(x393 : string) ->
        fun ~key:(x394 : crypto_CipherKey) ->
          fun ~iv:(x395 : crypto_BinaryLike or_null) ->
            fun ?options:(x396 : Stream.TransformOptions.t option) ->
              fun () ->
                crypto_Decipher_of_js
                  (let x400 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x400 "createDecipheriv")
                     "apply"
                     [|x400;((let x397 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x397 "push"
                                   [|(Ojs.string_to_js x393)|]);
                              ignore
                                (Ojs.call x397 "push"
                                   [|(crypto_CipherKey_to_js x394)|]);
                              ignore
                                (Ojs.call x397 "push"
                                   [|(or_null_to_js crypto_BinaryLike_to_js
                                        x395)|]);
                              (match x396 with
                               | Some x398 ->
                                   ignore
                                     (Ojs.call x397 "push"
                                        [|(Stream.TransformOptions.t_to_js
                                             x398)|])
                               | None -> ());
                              x397))|])
    module Decipher =
      struct
        type t = crypto_Decipher
        let rec t_of_js : Ojs.t -> t =
          fun (x402 : Ojs.t) -> crypto_Decipher_of_js x402
        and t_to_js : t -> Ojs.t =
          fun (x401 : crypto_Decipher) -> crypto_Decipher_to_js x401
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Decipher") [||])
        let (update : t -> data:ArrayBufferView.t -> Buffer.t) =
          fun (x404 : t) ->
            fun ~data:(x403 : ArrayBufferView.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x404) "update"
                   [|(ArrayBufferView.t_to_js x403)|])
        let (update' :
          t -> data:string -> input_encoding:crypto_Encoding -> Buffer.t) =
          fun (x407 : t) ->
            fun ~data:(x405 : string) ->
              fun ~input_encoding:(x406 : crypto_Encoding) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x407) "update"
                     [|(Ojs.string_to_js x405);(crypto_Encoding_to_js x406)|])
        let (update'' :
          t ->
            data:ArrayBufferView.t ->
              input_encoding:never or_undefined ->
                output_encoding:crypto_Encoding -> string)
          =
          fun (x412 : t) ->
            fun ~data:(x408 : ArrayBufferView.t) ->
              fun ~input_encoding:(x409 : never or_undefined) ->
                fun ~output_encoding:(x411 : crypto_Encoding) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x412) "update"
                       [|(ArrayBufferView.t_to_js x408);(or_undefined_to_js
                                                           never_to_js x409);(
                         crypto_Encoding_to_js x411)|])
        let (update''' :
          t ->
            data:string ->
              input_encoding:crypto_Encoding or_undefined ->
                output_encoding:crypto_Encoding -> string)
          =
          fun (x417 : t) ->
            fun ~data:(x413 : string) ->
              fun ~input_encoding:(x414 : crypto_Encoding or_undefined) ->
                fun ~output_encoding:(x416 : crypto_Encoding) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x417) "update"
                       [|(Ojs.string_to_js x413);(or_undefined_to_js
                                                    crypto_Encoding_to_js
                                                    x414);(crypto_Encoding_to_js
                                                             x416)|])
        let (final : t -> Buffer.t) =
          fun (x418 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x418) "final" [||])
        let (final' : t -> output_encoding:BufferEncoding.t -> string) =
          fun (x420 : t) ->
            fun ~output_encoding:(x419 : BufferEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x420) "final"
                   [|(BufferEncoding.t_to_js x419)|])
        let (setAutoPadding : t -> ?auto_padding:bool -> unit -> t) =
          fun (x424 : t) ->
            fun ?auto_padding:(x421 : bool option) ->
              fun () ->
                t_of_js
                  (let x425 = t_to_js x424 in
                   Ojs.call (Ojs.get_prop_ascii x425 "setAutoPadding")
                     "apply"
                     [|x425;((let x422 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x421 with
                               | Some x423 ->
                                   ignore
                                     (Ojs.call x422 "push"
                                        [|(Ojs.bool_to_js x423)|])
                               | None -> ());
                              x422))|])
        let (cast : t -> Stream.Transform.t) =
          fun (x426 : t) -> Stream.Transform.t_of_js (t_to_js x426)
      end
    module DecipherCCM =
      struct
        type t = crypto_DecipherCCM
        let rec t_of_js : Ojs.t -> t =
          fun (x428 : Ojs.t) -> crypto_DecipherCCM_of_js x428
        and t_to_js : t -> Ojs.t =
          fun (x427 : crypto_DecipherCCM) -> crypto_DecipherCCM_to_js x427
        let (setAuthTag : t -> buffer:ArrayBufferView.t -> t) =
          fun (x430 : t) ->
            fun ~buffer:(x429 : ArrayBufferView.t) ->
              t_of_js
                (Ojs.call (t_to_js x430) "setAuthTag"
                   [|(ArrayBufferView.t_to_js x429)|])
        let (setAAD :
          t -> buffer:ArrayBufferView.t -> options:anonymous_interface_0 -> t)
          =
          fun (x433 : t) ->
            fun ~buffer:(x431 : ArrayBufferView.t) ->
              fun ~options:(x432 : anonymous_interface_0) ->
                t_of_js
                  (Ojs.call (t_to_js x433) "setAAD"
                     [|(ArrayBufferView.t_to_js x431);(anonymous_interface_0_to_js
                                                         x432)|])
        let (cast : t -> crypto_Decipher) =
          fun (x434 : t) -> crypto_Decipher_of_js (t_to_js x434)
      end
    module DecipherGCM =
      struct
        type t = crypto_DecipherGCM
        let rec t_of_js : Ojs.t -> t =
          fun (x436 : Ojs.t) -> crypto_DecipherGCM_of_js x436
        and t_to_js : t -> Ojs.t =
          fun (x435 : crypto_DecipherGCM) -> crypto_DecipherGCM_to_js x435
        let (setAuthTag : t -> buffer:ArrayBufferView.t -> t) =
          fun (x438 : t) ->
            fun ~buffer:(x437 : ArrayBufferView.t) ->
              t_of_js
                (Ojs.call (t_to_js x438) "setAuthTag"
                   [|(ArrayBufferView.t_to_js x437)|])
        let (setAAD :
          t ->
            buffer:ArrayBufferView.t ->
              ?options:anonymous_interface_0 -> unit -> t)
          =
          fun (x443 : t) ->
            fun ~buffer:(x439 : ArrayBufferView.t) ->
              fun ?options:(x440 : anonymous_interface_0 option) ->
                fun () ->
                  t_of_js
                    (let x444 = t_to_js x443 in
                     Ojs.call (Ojs.get_prop_ascii x444 "setAAD") "apply"
                       [|x444;((let x441 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x441 "push"
                                     [|(ArrayBufferView.t_to_js x439)|]);
                                (match x440 with
                                 | Some x442 ->
                                     ignore
                                       (Ojs.call x441 "push"
                                          [|(anonymous_interface_0_to_js x442)|])
                                 | None -> ());
                                x441))|])
        let (cast : t -> crypto_Decipher) =
          fun (x445 : t) -> crypto_Decipher_of_js (t_to_js x445)
      end
    module PrivateKeyInput =
      struct
        type t = crypto_PrivateKeyInput
        let rec t_of_js : Ojs.t -> t =
          fun (x447 : Ojs.t) -> crypto_PrivateKeyInput_of_js x447
        and t_to_js : t -> Ojs.t =
          fun (x446 : crypto_PrivateKeyInput) ->
            crypto_PrivateKeyInput_to_js x446
        let (get_key : t -> Buffer.t or_string) =
          fun (x448 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x448) "key")
        let (set_key : t -> Buffer.t or_string -> unit) =
          fun (x450 : t) ->
            fun (x451 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x450) "key"
                (or_string_to_js Buffer.t_to_js x451)
        let (get_format : t -> crypto_KeyFormat) =
          fun (x453 : t) ->
            crypto_KeyFormat_of_js
              (Ojs.get_prop_ascii (t_to_js x453) "format")
        let (set_format : t -> crypto_KeyFormat -> unit) =
          fun (x454 : t) ->
            fun (x455 : crypto_KeyFormat) ->
              Ojs.set_prop_ascii (t_to_js x454) "format"
                (crypto_KeyFormat_to_js x455)
        let (get_type : t -> [ `pkcs1  | `pkcs8  | `sec1 ]) =
          fun (x456 : t) ->
            let x457 = Ojs.get_prop_ascii (t_to_js x456) "type" in
            match Ojs.string_of_js x457 with
            | "pkcs1" -> `pkcs1
            | "pkcs8" -> `pkcs8
            | "sec1" -> `sec1
            | _ -> assert false
        let (set_type : t -> [ `pkcs1  | `pkcs8  | `sec1 ] -> unit) =
          fun (x458 : t) ->
            fun (x459 : [ `pkcs1  | `pkcs8  | `sec1 ]) ->
              Ojs.set_prop_ascii (t_to_js x458) "type"
                (match x459 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `pkcs8 -> Ojs.string_to_js "pkcs8"
                 | `sec1 -> Ojs.string_to_js "sec1")
        let (get_passphrase : t -> Buffer.t or_string) =
          fun (x460 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x460) "passphrase")
        let (set_passphrase : t -> Buffer.t or_string -> unit) =
          fun (x462 : t) ->
            fun (x463 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x462) "passphrase"
                (or_string_to_js Buffer.t_to_js x463)
      end
    module PublicKeyInput =
      struct
        type t = crypto_PublicKeyInput
        let rec t_of_js : Ojs.t -> t =
          fun (x466 : Ojs.t) -> crypto_PublicKeyInput_of_js x466
        and t_to_js : t -> Ojs.t =
          fun (x465 : crypto_PublicKeyInput) ->
            crypto_PublicKeyInput_to_js x465
        let (get_key : t -> Buffer.t or_string) =
          fun (x467 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x467) "key")
        let (set_key : t -> Buffer.t or_string -> unit) =
          fun (x469 : t) ->
            fun (x470 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x469) "key"
                (or_string_to_js Buffer.t_to_js x470)
        let (get_format : t -> crypto_KeyFormat) =
          fun (x472 : t) ->
            crypto_KeyFormat_of_js
              (Ojs.get_prop_ascii (t_to_js x472) "format")
        let (set_format : t -> crypto_KeyFormat -> unit) =
          fun (x473 : t) ->
            fun (x474 : crypto_KeyFormat) ->
              Ojs.set_prop_ascii (t_to_js x473) "format"
                (crypto_KeyFormat_to_js x474)
        let (get_type : t -> [ `pkcs1  | `spki ]) =
          fun (x475 : t) ->
            let x476 = Ojs.get_prop_ascii (t_to_js x475) "type" in
            match Ojs.string_of_js x476 with
            | "pkcs1" -> `pkcs1
            | "spki" -> `spki
            | _ -> assert false
        let (set_type : t -> [ `pkcs1  | `spki ] -> unit) =
          fun (x477 : t) ->
            fun (x478 : [ `pkcs1  | `spki ]) ->
              Ojs.set_prop_ascii (t_to_js x477) "type"
                (match x478 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `spki -> Ojs.string_to_js "spki")
      end
    let (createPrivateKey :
      key:(Buffer.t, crypto_PrivateKeyInput) union2 or_string ->
        crypto_KeyObject)
      =
      fun ~key:(x479 : (Buffer.t, crypto_PrivateKeyInput) union2 or_string)
        ->
        crypto_KeyObject_of_js
          (Ojs.call Import.crypto "createPrivateKey"
             [|(or_string_to_js
                  (fun (x480 : (Buffer.t, crypto_PrivateKeyInput) union2) ->
                     union2_to_js Buffer.t_to_js crypto_PrivateKeyInput_to_js
                       x480) x479)|])
    let (createPublicKey :
      key:([ `U_s21_pkcs1 of crypto_PublicKeyInput 
           | `U_s23_private of crypto_KeyObject 
           | `U_s24_public of crypto_KeyObject 
           | `U_s27_secret of crypto_KeyObject 
           | `U_s28_spki of crypto_PublicKeyInput ],
        Buffer.t) or_ or_string -> crypto_KeyObject)
      =
      fun
        ~key:(x483 :
               ([ `U_s21_pkcs1 of crypto_PublicKeyInput 
                | `U_s23_private of crypto_KeyObject 
                | `U_s24_public of crypto_KeyObject 
                | `U_s27_secret of crypto_KeyObject 
                | `U_s28_spki of crypto_PublicKeyInput ], Buffer.t) or_
                 or_string)
        ->
        crypto_KeyObject_of_js
          (Ojs.call Import.crypto "createPublicKey"
             [|(or_string_to_js
                  (fun
                     (x484 :
                       ([ `U_s21_pkcs1 of crypto_PublicKeyInput 
                        | `U_s23_private of crypto_KeyObject 
                        | `U_s24_public of crypto_KeyObject 
                        | `U_s27_secret of crypto_KeyObject 
                        | `U_s28_spki of crypto_PublicKeyInput ], Buffer.t)
                         or_)
                     ->
                     or__to_js
                       (fun
                          (x485 :
                            [ `U_s21_pkcs1 of crypto_PublicKeyInput 
                            | `U_s23_private of crypto_KeyObject 
                            | `U_s24_public of crypto_KeyObject 
                            | `U_s27_secret of crypto_KeyObject 
                            | `U_s28_spki of crypto_PublicKeyInput ])
                          ->
                          match x485 with
                          | `U_s21_pkcs1 x486 ->
                              crypto_PublicKeyInput_to_js x486
                          | `U_s23_private x487 ->
                              crypto_KeyObject_to_js x487
                          | `U_s24_public x488 -> crypto_KeyObject_to_js x488
                          | `U_s27_secret x489 -> crypto_KeyObject_to_js x489
                          | `U_s28_spki x490 ->
                              crypto_PublicKeyInput_to_js x490)
                       Buffer.t_to_js x484) x483)|])
    let (createSecretKey : key:ArrayBufferView.t -> crypto_KeyObject) =
      fun ~key:(x492 : ArrayBufferView.t) ->
        crypto_KeyObject_of_js
          (Ojs.call Import.crypto "createSecretKey"
             [|(ArrayBufferView.t_to_js x492)|])
    let (createSign :
      algorithm:string ->
        ?options:Stream.WritableOptions.t -> unit -> crypto_Signer)
      =
      fun ~algorithm:(x493 : string) ->
        fun ?options:(x494 : Stream.WritableOptions.t option) ->
          fun () ->
            crypto_Signer_of_js
              (let x497 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x497 "createSign") "apply"
                 [|x497;((let x495 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x495 "push" [|(Ojs.string_to_js x493)|]);
                          (match x494 with
                           | Some x496 ->
                               ignore
                                 (Ojs.call x495 "push"
                                    [|(Stream.WritableOptions.t_to_js x496)|])
                           | None -> ());
                          x495))|])
    module DSAEncoding =
      struct
        type t = crypto_DSAEncoding
        let rec t_of_js : Ojs.t -> t =
          fun (x499 : Ojs.t) -> crypto_DSAEncoding_of_js x499
        and t_to_js : t -> Ojs.t =
          fun (x498 : crypto_DSAEncoding) -> crypto_DSAEncoding_to_js x498
      end
    module SigningOptions =
      struct
        type t = crypto_SigningOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x501 : Ojs.t) -> crypto_SigningOptions_of_js x501
        and t_to_js : t -> Ojs.t =
          fun (x500 : crypto_SigningOptions) ->
            crypto_SigningOptions_to_js x500
        let (get_padding : t -> float) =
          fun (x502 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x502) "padding")
        let (set_padding : t -> float -> unit) =
          fun (x503 : t) ->
            fun (x504 : float) ->
              Ojs.set_prop_ascii (t_to_js x503) "padding"
                (Ojs.float_to_js x504)
        let (get_saltLength : t -> float) =
          fun (x505 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x505) "saltLength")
        let (set_saltLength : t -> float -> unit) =
          fun (x506 : t) ->
            fun (x507 : float) ->
              Ojs.set_prop_ascii (t_to_js x506) "saltLength"
                (Ojs.float_to_js x507)
        let (get_dsaEncoding : t -> crypto_DSAEncoding) =
          fun (x508 : t) ->
            crypto_DSAEncoding_of_js
              (Ojs.get_prop_ascii (t_to_js x508) "dsaEncoding")
        let (set_dsaEncoding : t -> crypto_DSAEncoding -> unit) =
          fun (x509 : t) ->
            fun (x510 : crypto_DSAEncoding) ->
              Ojs.set_prop_ascii (t_to_js x509) "dsaEncoding"
                (crypto_DSAEncoding_to_js x510)
      end
    module SignPrivateKeyInput =
      struct
        type t = crypto_SignPrivateKeyInput
        let rec t_of_js : Ojs.t -> t =
          fun (x512 : Ojs.t) -> crypto_SignPrivateKeyInput_of_js x512
        and t_to_js : t -> Ojs.t =
          fun (x511 : crypto_SignPrivateKeyInput) ->
            crypto_SignPrivateKeyInput_to_js x511
        let (cast : t -> crypto_PrivateKeyInput) =
          fun (x513 : t) -> crypto_PrivateKeyInput_of_js (t_to_js x513)
        let (cast' : t -> crypto_SigningOptions) =
          fun (x514 : t) -> crypto_SigningOptions_of_js (t_to_js x514)
      end
    module SignKeyObjectInput =
      struct
        type t = crypto_SignKeyObjectInput
        let rec t_of_js : Ojs.t -> t =
          fun (x516 : Ojs.t) -> crypto_SignKeyObjectInput_of_js x516
        and t_to_js : t -> Ojs.t =
          fun (x515 : crypto_SignKeyObjectInput) ->
            crypto_SignKeyObjectInput_to_js x515
        let (get_key : t -> crypto_KeyObject) =
          fun (x517 : t) ->
            crypto_KeyObject_of_js (Ojs.get_prop_ascii (t_to_js x517) "key")
        let (set_key : t -> crypto_KeyObject -> unit) =
          fun (x518 : t) ->
            fun (x519 : crypto_KeyObject) ->
              Ojs.set_prop_ascii (t_to_js x518) "key"
                (crypto_KeyObject_to_js x519)
        let (cast : t -> crypto_SigningOptions) =
          fun (x520 : t) -> crypto_SigningOptions_of_js (t_to_js x520)
      end
    module VerifyPublicKeyInput =
      struct
        type t = crypto_VerifyPublicKeyInput
        let rec t_of_js : Ojs.t -> t =
          fun (x522 : Ojs.t) -> crypto_VerifyPublicKeyInput_of_js x522
        and t_to_js : t -> Ojs.t =
          fun (x521 : crypto_VerifyPublicKeyInput) ->
            crypto_VerifyPublicKeyInput_to_js x521
        let (cast : t -> crypto_PublicKeyInput) =
          fun (x523 : t) -> crypto_PublicKeyInput_of_js (t_to_js x523)
        let (cast' : t -> crypto_SigningOptions) =
          fun (x524 : t) -> crypto_SigningOptions_of_js (t_to_js x524)
      end
    module VerifyKeyObjectInput =
      struct
        type t = crypto_VerifyKeyObjectInput
        let rec t_of_js : Ojs.t -> t =
          fun (x526 : Ojs.t) -> crypto_VerifyKeyObjectInput_of_js x526
        and t_to_js : t -> Ojs.t =
          fun (x525 : crypto_VerifyKeyObjectInput) ->
            crypto_VerifyKeyObjectInput_to_js x525
        let (get_key : t -> crypto_KeyObject) =
          fun (x527 : t) ->
            crypto_KeyObject_of_js (Ojs.get_prop_ascii (t_to_js x527) "key")
        let (set_key : t -> crypto_KeyObject -> unit) =
          fun (x528 : t) ->
            fun (x529 : crypto_KeyObject) ->
              Ojs.set_prop_ascii (t_to_js x528) "key"
                (crypto_KeyObject_to_js x529)
        let (cast : t -> crypto_SigningOptions) =
          fun (x530 : t) -> crypto_SigningOptions_of_js (t_to_js x530)
      end
    module KeyLike =
      struct
        type t = crypto_KeyLike
        let rec t_of_js : Ojs.t -> t =
          fun (x532 : Ojs.t) -> crypto_KeyLike_of_js x532
        and t_to_js : t -> Ojs.t =
          fun (x531 : crypto_KeyLike) -> crypto_KeyLike_to_js x531
      end
    module Signer =
      struct
        type t = crypto_Signer
        let rec t_of_js : Ojs.t -> t =
          fun (x534 : Ojs.t) -> crypto_Signer_of_js x534
        and t_to_js : t -> Ojs.t =
          fun (x533 : crypto_Signer) -> crypto_Signer_to_js x533
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Signer") [||])
        let (update : t -> data:crypto_BinaryLike -> t) =
          fun (x536 : t) ->
            fun ~data:(x535 : crypto_BinaryLike) ->
              t_of_js
                (Ojs.call (t_to_js x536) "update"
                   [|(crypto_BinaryLike_to_js x535)|])
        let (update' :
          t -> data:string -> input_encoding:crypto_Encoding -> t) =
          fun (x539 : t) ->
            fun ~data:(x537 : string) ->
              fun ~input_encoding:(x538 : crypto_Encoding) ->
                t_of_js
                  (Ojs.call (t_to_js x539) "update"
                     [|(Ojs.string_to_js x537);(crypto_Encoding_to_js x538)|])
        let (sign :
          t ->
            private_key:([ `U_s11_der of crypto_SignKeyObjectInput 
                         | `U_s18_ieee_p1363 of crypto_SignKeyObjectInput ],
              [ `U_s21_pkcs1 of crypto_SignPrivateKeyInput 
              | `U_s22_pkcs8 of crypto_SignPrivateKeyInput 
              | `U_s23_private of crypto_KeyLike 
              | `U_s24_public of crypto_KeyLike 
              | `U_s26_sec1 of crypto_SignPrivateKeyInput 
              | `U_s27_secret of crypto_KeyLike ]) union2 -> Buffer.t)
          =
          fun (x551 : t) ->
            fun
              ~private_key:(x540 :
                             ([ `U_s11_der of crypto_SignKeyObjectInput 
                              | `U_s18_ieee_p1363 of
                                  crypto_SignKeyObjectInput ],
                               [ `U_s21_pkcs1 of crypto_SignPrivateKeyInput 
                               | `U_s22_pkcs8 of crypto_SignPrivateKeyInput 
                               | `U_s23_private of crypto_KeyLike 
                               | `U_s24_public of crypto_KeyLike 
                               | `U_s26_sec1 of crypto_SignPrivateKeyInput 
                               | `U_s27_secret of crypto_KeyLike ]) union2)
              ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x551) "sign"
                   [|(union2_to_js
                        (fun
                           (x541 :
                             [ `U_s11_der of crypto_SignKeyObjectInput 
                             | `U_s18_ieee_p1363 of crypto_SignKeyObjectInput ])
                           ->
                           match x541 with
                           | `U_s11_der x542 ->
                               crypto_SignKeyObjectInput_to_js x542
                           | `U_s18_ieee_p1363 x543 ->
                               crypto_SignKeyObjectInput_to_js x543)
                        (fun
                           (x544 :
                             [ `U_s21_pkcs1 of crypto_SignPrivateKeyInput 
                             | `U_s22_pkcs8 of crypto_SignPrivateKeyInput 
                             | `U_s23_private of crypto_KeyLike 
                             | `U_s24_public of crypto_KeyLike 
                             | `U_s26_sec1 of crypto_SignPrivateKeyInput 
                             | `U_s27_secret of crypto_KeyLike ])
                           ->
                           match x544 with
                           | `U_s21_pkcs1 x545 ->
                               crypto_SignPrivateKeyInput_to_js x545
                           | `U_s22_pkcs8 x546 ->
                               crypto_SignPrivateKeyInput_to_js x546
                           | `U_s23_private x547 -> crypto_KeyLike_to_js x547
                           | `U_s24_public x548 -> crypto_KeyLike_to_js x548
                           | `U_s26_sec1 x549 ->
                               crypto_SignPrivateKeyInput_to_js x549
                           | `U_s27_secret x550 -> crypto_KeyLike_to_js x550)
                        x540)|])
        let (sign' :
          t ->
            private_key:([ `U_s11_der of crypto_SignKeyObjectInput 
                         | `U_s18_ieee_p1363 of crypto_SignKeyObjectInput ],
              [ `U_s21_pkcs1 of crypto_SignPrivateKeyInput 
              | `U_s22_pkcs8 of crypto_SignPrivateKeyInput 
              | `U_s23_private of crypto_KeyLike 
              | `U_s24_public of crypto_KeyLike 
              | `U_s26_sec1 of crypto_SignPrivateKeyInput 
              | `U_s27_secret of crypto_KeyLike ]) union2 ->
              output_format:crypto_BinaryToTextEncoding -> string)
          =
          fun (x564 : t) ->
            fun
              ~private_key:(x552 :
                             ([ `U_s11_der of crypto_SignKeyObjectInput 
                              | `U_s18_ieee_p1363 of
                                  crypto_SignKeyObjectInput ],
                               [ `U_s21_pkcs1 of crypto_SignPrivateKeyInput 
                               | `U_s22_pkcs8 of crypto_SignPrivateKeyInput 
                               | `U_s23_private of crypto_KeyLike 
                               | `U_s24_public of crypto_KeyLike 
                               | `U_s26_sec1 of crypto_SignPrivateKeyInput 
                               | `U_s27_secret of crypto_KeyLike ]) union2)
              ->
              fun ~output_format:(x563 : crypto_BinaryToTextEncoding) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x564) "sign"
                     [|(union2_to_js
                          (fun
                             (x553 :
                               [ `U_s11_der of crypto_SignKeyObjectInput 
                               | `U_s18_ieee_p1363 of
                                   crypto_SignKeyObjectInput ])
                             ->
                             match x553 with
                             | `U_s11_der x554 ->
                                 crypto_SignKeyObjectInput_to_js x554
                             | `U_s18_ieee_p1363 x555 ->
                                 crypto_SignKeyObjectInput_to_js x555)
                          (fun
                             (x556 :
                               [ `U_s21_pkcs1 of crypto_SignPrivateKeyInput 
                               | `U_s22_pkcs8 of crypto_SignPrivateKeyInput 
                               | `U_s23_private of crypto_KeyLike 
                               | `U_s24_public of crypto_KeyLike 
                               | `U_s26_sec1 of crypto_SignPrivateKeyInput 
                               | `U_s27_secret of crypto_KeyLike ])
                             ->
                             match x556 with
                             | `U_s21_pkcs1 x557 ->
                                 crypto_SignPrivateKeyInput_to_js x557
                             | `U_s22_pkcs8 x558 ->
                                 crypto_SignPrivateKeyInput_to_js x558
                             | `U_s23_private x559 ->
                                 crypto_KeyLike_to_js x559
                             | `U_s24_public x560 ->
                                 crypto_KeyLike_to_js x560
                             | `U_s26_sec1 x561 ->
                                 crypto_SignPrivateKeyInput_to_js x561
                             | `U_s27_secret x562 ->
                                 crypto_KeyLike_to_js x562) x552);(crypto_BinaryToTextEncoding_to_js
                                                                    x563)|])
        let (cast : t -> Stream.Writable.t) =
          fun (x565 : t) -> Stream.Writable.t_of_js (t_to_js x565)
      end
    let (createVerify :
      algorithm:string ->
        ?options:Stream.WritableOptions.t -> unit -> crypto_Verify)
      =
      fun ~algorithm:(x566 : string) ->
        fun ?options:(x567 : Stream.WritableOptions.t option) ->
          fun () ->
            crypto_Verify_of_js
              (let x570 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x570 "createVerify") "apply"
                 [|x570;((let x568 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x568 "push" [|(Ojs.string_to_js x566)|]);
                          (match x567 with
                           | Some x569 ->
                               ignore
                                 (Ojs.call x568 "push"
                                    [|(Stream.WritableOptions.t_to_js x569)|])
                           | None -> ());
                          x568))|])
    module Verify =
      struct
        type t = crypto_Verify
        let rec t_of_js : Ojs.t -> t =
          fun (x572 : Ojs.t) -> crypto_Verify_of_js x572
        and t_to_js : t -> Ojs.t =
          fun (x571 : crypto_Verify) -> crypto_Verify_to_js x571
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Verify") [||])
        let (update : t -> data:crypto_BinaryLike -> t) =
          fun (x574 : t) ->
            fun ~data:(x573 : crypto_BinaryLike) ->
              t_of_js
                (Ojs.call (t_to_js x574) "update"
                   [|(crypto_BinaryLike_to_js x573)|])
        let (update' :
          t -> data:string -> input_encoding:crypto_Encoding -> t) =
          fun (x577 : t) ->
            fun ~data:(x575 : string) ->
              fun ~input_encoding:(x576 : crypto_Encoding) ->
                t_of_js
                  (Ojs.call (t_to_js x577) "update"
                     [|(Ojs.string_to_js x575);(crypto_Encoding_to_js x576)|])
        let (verify :
          t ->
            object_:([ `U_s11_der of crypto_VerifyKeyObjectInput 
                     | `U_s18_ieee_p1363 of crypto_VerifyKeyObjectInput ],
              [ `U_s21_pkcs1 of crypto_VerifyPublicKeyInput 
              | `U_s23_private of crypto_KeyLike 
              | `U_s24_public of crypto_KeyLike 
              | `U_s27_secret of crypto_KeyLike 
              | `U_s28_spki of crypto_VerifyPublicKeyInput ]) union2 ->
              signature:ArrayBufferView.t -> bool)
          =
          fun (x589 : t) ->
            fun
              ~object_:(x578 :
                         ([ `U_s11_der of crypto_VerifyKeyObjectInput 
                          | `U_s18_ieee_p1363 of crypto_VerifyKeyObjectInput ],
                           [ `U_s21_pkcs1 of crypto_VerifyPublicKeyInput 
                           | `U_s23_private of crypto_KeyLike 
                           | `U_s24_public of crypto_KeyLike 
                           | `U_s27_secret of crypto_KeyLike 
                           | `U_s28_spki of crypto_VerifyPublicKeyInput ])
                           union2)
              ->
              fun ~signature:(x588 : ArrayBufferView.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x589) "verify"
                     [|(union2_to_js
                          (fun
                             (x579 :
                               [ `U_s11_der of crypto_VerifyKeyObjectInput 
                               | `U_s18_ieee_p1363 of
                                   crypto_VerifyKeyObjectInput ])
                             ->
                             match x579 with
                             | `U_s11_der x580 ->
                                 crypto_VerifyKeyObjectInput_to_js x580
                             | `U_s18_ieee_p1363 x581 ->
                                 crypto_VerifyKeyObjectInput_to_js x581)
                          (fun
                             (x582 :
                               [ `U_s21_pkcs1 of crypto_VerifyPublicKeyInput 
                               | `U_s23_private of crypto_KeyLike 
                               | `U_s24_public of crypto_KeyLike 
                               | `U_s27_secret of crypto_KeyLike 
                               | `U_s28_spki of crypto_VerifyPublicKeyInput ])
                             ->
                             match x582 with
                             | `U_s21_pkcs1 x583 ->
                                 crypto_VerifyPublicKeyInput_to_js x583
                             | `U_s23_private x584 ->
                                 crypto_KeyLike_to_js x584
                             | `U_s24_public x585 ->
                                 crypto_KeyLike_to_js x585
                             | `U_s27_secret x586 ->
                                 crypto_KeyLike_to_js x586
                             | `U_s28_spki x587 ->
                                 crypto_VerifyPublicKeyInput_to_js x587) x578);(
                       ArrayBufferView.t_to_js x588)|])
        let (verify' :
          t ->
            object_:([ `U_s11_der of crypto_VerifyKeyObjectInput 
                     | `U_s18_ieee_p1363 of crypto_VerifyKeyObjectInput ],
              [ `U_s21_pkcs1 of crypto_VerifyPublicKeyInput 
              | `U_s23_private of crypto_KeyLike 
              | `U_s24_public of crypto_KeyLike 
              | `U_s27_secret of crypto_KeyLike 
              | `U_s28_spki of crypto_VerifyPublicKeyInput ]) union2 ->
              signature:string ->
                ?signature_format:crypto_BinaryToTextEncoding -> unit -> bool)
          =
          fun (x604 : t) ->
            fun
              ~object_:(x590 :
                         ([ `U_s11_der of crypto_VerifyKeyObjectInput 
                          | `U_s18_ieee_p1363 of crypto_VerifyKeyObjectInput ],
                           [ `U_s21_pkcs1 of crypto_VerifyPublicKeyInput 
                           | `U_s23_private of crypto_KeyLike 
                           | `U_s24_public of crypto_KeyLike 
                           | `U_s27_secret of crypto_KeyLike 
                           | `U_s28_spki of crypto_VerifyPublicKeyInput ])
                           union2)
              ->
              fun ~signature:(x591 : string) ->
                fun
                  ?signature_format:(x592 :
                                      crypto_BinaryToTextEncoding option)
                  ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x605 = t_to_js x604 in
                       Ojs.call (Ojs.get_prop_ascii x605 "verify") "apply"
                         [|x605;((let x593 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x593 "push"
                                       [|(union2_to_js
                                            (fun
                                               (x595 :
                                                 [
                                                   `U_s11_der of
                                                     crypto_VerifyKeyObjectInput
                                                      | `U_s18_ieee_p1363 of
                                                          crypto_VerifyKeyObjectInput
                                                          ])
                                               ->
                                               match x595 with
                                               | `U_s11_der x596 ->
                                                   crypto_VerifyKeyObjectInput_to_js
                                                     x596
                                               | `U_s18_ieee_p1363 x597 ->
                                                   crypto_VerifyKeyObjectInput_to_js
                                                     x597)
                                            (fun
                                               (x598 :
                                                 [
                                                   `U_s21_pkcs1 of
                                                     crypto_VerifyPublicKeyInput
                                                      | `U_s23_private of
                                                          crypto_KeyLike 
                                                 | `U_s24_public of
                                                     crypto_KeyLike 
                                                 | `U_s27_secret of
                                                     crypto_KeyLike 
                                                 | `U_s28_spki of
                                                     crypto_VerifyPublicKeyInput
                                                     ])
                                               ->
                                               match x598 with
                                               | `U_s21_pkcs1 x599 ->
                                                   crypto_VerifyPublicKeyInput_to_js
                                                     x599
                                               | `U_s23_private x600 ->
                                                   crypto_KeyLike_to_js x600
                                               | `U_s24_public x601 ->
                                                   crypto_KeyLike_to_js x601
                                               | `U_s27_secret x602 ->
                                                   crypto_KeyLike_to_js x602
                                               | `U_s28_spki x603 ->
                                                   crypto_VerifyPublicKeyInput_to_js
                                                     x603) x590)|]);
                                  ignore
                                    (Ojs.call x593 "push"
                                       [|(Ojs.string_to_js x591)|]);
                                  (match x592 with
                                   | Some x594 ->
                                       ignore
                                         (Ojs.call x593 "push"
                                            [|(crypto_BinaryToTextEncoding_to_js
                                                 x594)|])
                                   | None -> ());
                                  x593))|])
        let (cast : t -> Stream.Writable.t) =
          fun (x606 : t) -> Stream.Writable.t_of_js (t_to_js x606)
      end
    let (createDiffieHellman :
      prime_length:float ->
        ?generator:ArrayBufferView.t or_number ->
          unit -> crypto_DiffieHellman)
      =
      fun ~prime_length:(x607 : float) ->
        fun ?generator:(x608 : ArrayBufferView.t or_number option) ->
          fun () ->
            crypto_DiffieHellman_of_js
              (let x612 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x612 "createDiffieHellman")
                 "apply"
                 [|x612;((let x609 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x609 "push" [|(Ojs.float_to_js x607)|]);
                          (match x608 with
                           | Some x610 ->
                               ignore
                                 (Ojs.call x609 "push"
                                    [|(or_number_to_js
                                         ArrayBufferView.t_to_js x610)|])
                           | None -> ());
                          x609))|])
    let (createDiffieHellman :
      prime:ArrayBufferView.t -> crypto_DiffieHellman) =
      fun ~prime:(x613 : ArrayBufferView.t) ->
        crypto_DiffieHellman_of_js
          (Ojs.call Import.crypto "createDiffieHellman"
             [|(ArrayBufferView.t_to_js x613)|])
    let (createDiffieHellman :
      prime:string ->
        prime_encoding:crypto_BinaryToTextEncoding -> crypto_DiffieHellman)
      =
      fun ~prime:(x614 : string) ->
        fun ~prime_encoding:(x615 : crypto_BinaryToTextEncoding) ->
          crypto_DiffieHellman_of_js
            (Ojs.call Import.crypto "createDiffieHellman"
               [|(Ojs.string_to_js x614);(crypto_BinaryToTextEncoding_to_js
                                            x615)|])
    let (createDiffieHellman :
      prime:string ->
        prime_encoding:crypto_BinaryToTextEncoding ->
          generator:ArrayBufferView.t or_number -> crypto_DiffieHellman)
      =
      fun ~prime:(x616 : string) ->
        fun ~prime_encoding:(x617 : crypto_BinaryToTextEncoding) ->
          fun ~generator:(x618 : ArrayBufferView.t or_number) ->
            crypto_DiffieHellman_of_js
              (Ojs.call Import.crypto "createDiffieHellman"
                 [|(Ojs.string_to_js x616);(crypto_BinaryToTextEncoding_to_js
                                              x617);(or_number_to_js
                                                       ArrayBufferView.t_to_js
                                                       x618)|])
    let (createDiffieHellman :
      prime:string ->
        prime_encoding:crypto_BinaryToTextEncoding ->
          generator:string ->
            generator_encoding:crypto_BinaryToTextEncoding ->
              crypto_DiffieHellman)
      =
      fun ~prime:(x620 : string) ->
        fun ~prime_encoding:(x621 : crypto_BinaryToTextEncoding) ->
          fun ~generator:(x622 : string) ->
            fun ~generator_encoding:(x623 : crypto_BinaryToTextEncoding) ->
              crypto_DiffieHellman_of_js
                (Ojs.call Import.crypto "createDiffieHellman"
                   [|(Ojs.string_to_js x620);(crypto_BinaryToTextEncoding_to_js
                                                x621);(Ojs.string_to_js x622);(
                     crypto_BinaryToTextEncoding_to_js x623)|])
    module DiffieHellman =
      struct
        type t = crypto_DiffieHellman
        let rec t_of_js : Ojs.t -> t =
          fun (x625 : Ojs.t) -> crypto_DiffieHellman_of_js x625
        and t_to_js : t -> Ojs.t =
          fun (x624 : crypto_DiffieHellman) ->
            crypto_DiffieHellman_to_js x624
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "DiffieHellman")
                 [||])
        let (generateKeys : t -> Buffer.t) =
          fun (x626 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x626) "generateKeys" [||])
        let (generateKeys' :
          t -> encoding:crypto_BinaryToTextEncoding -> string) =
          fun (x628 : t) ->
            fun ~encoding:(x627 : crypto_BinaryToTextEncoding) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x628) "generateKeys"
                   [|(crypto_BinaryToTextEncoding_to_js x627)|])
        let (computeSecret :
          t -> other_public_key:ArrayBufferView.t -> Buffer.t) =
          fun (x630 : t) ->
            fun ~other_public_key:(x629 : ArrayBufferView.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x630) "computeSecret"
                   [|(ArrayBufferView.t_to_js x629)|])
        let (computeSecret' :
          t ->
            other_public_key:string ->
              input_encoding:crypto_BinaryToTextEncoding -> Buffer.t)
          =
          fun (x633 : t) ->
            fun ~other_public_key:(x631 : string) ->
              fun ~input_encoding:(x632 : crypto_BinaryToTextEncoding) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x633) "computeSecret"
                     [|(Ojs.string_to_js x631);(crypto_BinaryToTextEncoding_to_js
                                                  x632)|])
        let (computeSecret'' :
          t ->
            other_public_key:ArrayBufferView.t ->
              output_encoding:crypto_BinaryToTextEncoding -> string)
          =
          fun (x636 : t) ->
            fun ~other_public_key:(x634 : ArrayBufferView.t) ->
              fun ~output_encoding:(x635 : crypto_BinaryToTextEncoding) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x636) "computeSecret"
                     [|(ArrayBufferView.t_to_js x634);(crypto_BinaryToTextEncoding_to_js
                                                         x635)|])
        let (computeSecret''' :
          t ->
            other_public_key:string ->
              input_encoding:crypto_BinaryToTextEncoding ->
                output_encoding:crypto_BinaryToTextEncoding -> string)
          =
          fun (x640 : t) ->
            fun ~other_public_key:(x637 : string) ->
              fun ~input_encoding:(x638 : crypto_BinaryToTextEncoding) ->
                fun ~output_encoding:(x639 : crypto_BinaryToTextEncoding) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x640) "computeSecret"
                       [|(Ojs.string_to_js x637);(crypto_BinaryToTextEncoding_to_js
                                                    x638);(crypto_BinaryToTextEncoding_to_js
                                                             x639)|])
        let (getPrime : t -> Buffer.t) =
          fun (x641 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x641) "getPrime" [||])
        let (getPrime' : t -> encoding:crypto_BinaryToTextEncoding -> string)
          =
          fun (x643 : t) ->
            fun ~encoding:(x642 : crypto_BinaryToTextEncoding) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x643) "getPrime"
                   [|(crypto_BinaryToTextEncoding_to_js x642)|])
        let (getGenerator : t -> Buffer.t) =
          fun (x644 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x644) "getGenerator" [||])
        let (getGenerator' :
          t -> encoding:crypto_BinaryToTextEncoding -> string) =
          fun (x646 : t) ->
            fun ~encoding:(x645 : crypto_BinaryToTextEncoding) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x646) "getGenerator"
                   [|(crypto_BinaryToTextEncoding_to_js x645)|])
        let (getPublicKey : t -> Buffer.t) =
          fun (x647 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x647) "getPublicKey" [||])
        let (getPublicKey' :
          t -> encoding:crypto_BinaryToTextEncoding -> string) =
          fun (x649 : t) ->
            fun ~encoding:(x648 : crypto_BinaryToTextEncoding) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x649) "getPublicKey"
                   [|(crypto_BinaryToTextEncoding_to_js x648)|])
        let (getPrivateKey : t -> Buffer.t) =
          fun (x650 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x650) "getPrivateKey" [||])
        let (getPrivateKey' :
          t -> encoding:crypto_BinaryToTextEncoding -> string) =
          fun (x652 : t) ->
            fun ~encoding:(x651 : crypto_BinaryToTextEncoding) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x652) "getPrivateKey"
                   [|(crypto_BinaryToTextEncoding_to_js x651)|])
        let (setPublicKey : t -> public_key:ArrayBufferView.t -> unit) =
          fun (x654 : t) ->
            fun ~public_key:(x653 : ArrayBufferView.t) ->
              ignore
                (Ojs.call (t_to_js x654) "setPublicKey"
                   [|(ArrayBufferView.t_to_js x653)|])
        let (setPublicKey' :
          t -> public_key:string -> encoding:BufferEncoding.t -> unit) =
          fun (x657 : t) ->
            fun ~public_key:(x655 : string) ->
              fun ~encoding:(x656 : BufferEncoding.t) ->
                ignore
                  (Ojs.call (t_to_js x657) "setPublicKey"
                     [|(Ojs.string_to_js x655);(BufferEncoding.t_to_js x656)|])
        let (setPrivateKey : t -> private_key:ArrayBufferView.t -> unit) =
          fun (x659 : t) ->
            fun ~private_key:(x658 : ArrayBufferView.t) ->
              ignore
                (Ojs.call (t_to_js x659) "setPrivateKey"
                   [|(ArrayBufferView.t_to_js x658)|])
        let (setPrivateKey' :
          t -> private_key:string -> encoding:BufferEncoding.t -> unit) =
          fun (x662 : t) ->
            fun ~private_key:(x660 : string) ->
              fun ~encoding:(x661 : BufferEncoding.t) ->
                ignore
                  (Ojs.call (t_to_js x662) "setPrivateKey"
                     [|(Ojs.string_to_js x660);(BufferEncoding.t_to_js x661)|])
        let (get_verifyError : t -> float) =
          fun (x663 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x663) "verifyError")
        let (set_verifyError : t -> float -> unit) =
          fun (x664 : t) ->
            fun (x665 : float) ->
              Ojs.set_prop_ascii (t_to_js x664) "verifyError"
                (Ojs.float_to_js x665)
      end
    let (getDiffieHellman : group_name:string -> crypto_DiffieHellman) =
      fun ~group_name:(x666 : string) ->
        crypto_DiffieHellman_of_js
          (Ojs.call Import.crypto "getDiffieHellman"
             [|(Ojs.string_to_js x666)|])
    let (pbkdf2 :
      password:crypto_BinaryLike ->
        salt:crypto_BinaryLike ->
          iterations:float ->
            keylen:float ->
              digest:string ->
                callback:(err:Error.t or_null -> derivedKey:Buffer.t -> any)
                  -> unit)
      =
      fun ~password:(x667 : crypto_BinaryLike) ->
        fun ~salt:(x668 : crypto_BinaryLike) ->
          fun ~iterations:(x669 : float) ->
            fun ~keylen:(x670 : float) ->
              fun ~digest:(x671 : string) ->
                fun
                  ~callback:(x672 :
                              err:Error.t or_null ->
                                derivedKey:Buffer.t -> any)
                  ->
                  ignore
                    (Ojs.call Import.crypto "pbkdf2"
                       [|(crypto_BinaryLike_to_js x667);(crypto_BinaryLike_to_js
                                                           x668);(Ojs.float_to_js
                                                                    x669);(
                         Ojs.float_to_js x670);(Ojs.string_to_js x671);(
                         Ojs.fun_to_js 2
                           (fun (x673 : Ojs.t) ->
                              fun (x675 : Ojs.t) ->
                                any_to_js
                                  (x672
                                     ~err:(or_null_of_js Error.t_of_js x673)
                                     ~derivedKey:(Buffer.t_of_js x675))))|])
    let (pbkdf2Sync :
      password:crypto_BinaryLike ->
        salt:crypto_BinaryLike ->
          iterations:float -> keylen:float -> digest:string -> Buffer.t)
      =
      fun ~password:(x676 : crypto_BinaryLike) ->
        fun ~salt:(x677 : crypto_BinaryLike) ->
          fun ~iterations:(x678 : float) ->
            fun ~keylen:(x679 : float) ->
              fun ~digest:(x680 : string) ->
                Buffer.t_of_js
                  (Ojs.call Import.crypto "pbkdf2Sync"
                     [|(crypto_BinaryLike_to_js x676);(crypto_BinaryLike_to_js
                                                         x677);(Ojs.float_to_js
                                                                  x678);(
                       Ojs.float_to_js x679);(Ojs.string_to_js x680)|])
    let (randomBytes : size:float -> Buffer.t) =
      fun ~size:(x681 : float) ->
        Buffer.t_of_js
          (Ojs.call Import.crypto "randomBytes" [|(Ojs.float_to_js x681)|])
    let (randomBytes :
      size:float ->
        callback:(err:Error.t or_null -> buf:Buffer.t -> unit) -> unit)
      =
      fun ~size:(x682 : float) ->
        fun ~callback:(x683 : err:Error.t or_null -> buf:Buffer.t -> unit) ->
          ignore
            (Ojs.call Import.crypto "randomBytes"
               [|(Ojs.float_to_js x682);(Ojs.fun_to_js 2
                                           (fun (x684 : Ojs.t) ->
                                              fun (x686 : Ojs.t) ->
                                                x683
                                                  ~err:(or_null_of_js
                                                          Error.t_of_js x684)
                                                  ~buf:(Buffer.t_of_js x686)))|])
    let (pseudoRandomBytes : size:float -> Buffer.t) =
      fun ~size:(x687 : float) ->
        Buffer.t_of_js
          (Ojs.call Import.crypto "pseudoRandomBytes"
             [|(Ojs.float_to_js x687)|])
    let (pseudoRandomBytes :
      size:float ->
        callback:(err:Error.t or_null -> buf:Buffer.t -> unit) -> unit)
      =
      fun ~size:(x688 : float) ->
        fun ~callback:(x689 : err:Error.t or_null -> buf:Buffer.t -> unit) ->
          ignore
            (Ojs.call Import.crypto "pseudoRandomBytes"
               [|(Ojs.float_to_js x688);(Ojs.fun_to_js 2
                                           (fun (x690 : Ojs.t) ->
                                              fun (x692 : Ojs.t) ->
                                                x689
                                                  ~err:(or_null_of_js
                                                          Error.t_of_js x690)
                                                  ~buf:(Buffer.t_of_js x692)))|])
    let (randomInt : max:float -> float) =
      fun ~max:(x693 : float) ->
        Ojs.float_of_js
          (Ojs.call Import.crypto "randomInt" [|(Ojs.float_to_js x693)|])
    let (randomInt : min:float -> max:float -> float) =
      fun ~min:(x694 : float) ->
        fun ~max:(x695 : float) ->
          Ojs.float_of_js
            (Ojs.call Import.crypto "randomInt"
               [|(Ojs.float_to_js x694);(Ojs.float_to_js x695)|])
    let (randomInt :
      max:float ->
        callback:(err:Error.t or_null -> value:float -> unit) -> unit)
      =
      fun ~max:(x696 : float) ->
        fun ~callback:(x697 : err:Error.t or_null -> value:float -> unit) ->
          ignore
            (Ojs.call Import.crypto "randomInt"
               [|(Ojs.float_to_js x696);(Ojs.fun_to_js 2
                                           (fun (x698 : Ojs.t) ->
                                              fun (x700 : Ojs.t) ->
                                                x697
                                                  ~err:(or_null_of_js
                                                          Error.t_of_js x698)
                                                  ~value:(Ojs.float_of_js
                                                            x700)))|])
    let (randomInt :
      min:float ->
        max:float ->
          callback:(err:Error.t or_null -> value:float -> unit) -> unit)
      =
      fun ~min:(x701 : float) ->
        fun ~max:(x702 : float) ->
          fun ~callback:(x703 : err:Error.t or_null -> value:float -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "randomInt"
                 [|(Ojs.float_to_js x701);(Ojs.float_to_js x702);(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x704 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x706 :
                                                                    Ojs.t) ->
                                                                    x703
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x704)
                                                                    ~value:(
                                                                    Ojs.float_of_js
                                                                    x706)))|])
    let (randomFillSync :
      buffer:'T -> ?offset:float -> ?size:float -> unit -> 'T) =
      fun ~buffer:(x707 : 'T) ->
        fun ?offset:(x708 : float option) ->
          fun ?size:(x709 : float option) ->
            fun () ->
              Obj.magic
                (let x713 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x713 "randomFillSync") "apply"
                   [|x713;((let x710 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x710 "push" [|(Obj.magic x707)|]);
                            (match x708 with
                             | Some x712 ->
                                 ignore
                                   (Ojs.call x710 "push"
                                      [|(Ojs.float_to_js x712)|])
                             | None -> ());
                            (match x709 with
                             | Some x711 ->
                                 ignore
                                   (Ojs.call x710 "push"
                                      [|(Ojs.float_to_js x711)|])
                             | None -> ());
                            x710))|])
    let (randomFill :
      buffer:'T -> callback:(err:Error.t or_null -> buf:'T -> unit) -> unit)
      =
      fun ~buffer:(x714 : 'T) ->
        fun ~callback:(x715 : err:Error.t or_null -> buf:'T -> unit) ->
          ignore
            (Ojs.call Import.crypto "randomFill"
               [|(Obj.magic x714);(Ojs.fun_to_js 2
                                     (fun (x716 : Ojs.t) ->
                                        fun (x718 : Ojs.t) ->
                                          x715
                                            ~err:(or_null_of_js Error.t_of_js
                                                    x716)
                                            ~buf:(Obj.magic x718)))|])
    let (randomFill :
      buffer:'T ->
        offset:float ->
          callback:(err:Error.t or_null -> buf:'T -> unit) -> unit)
      =
      fun ~buffer:(x719 : 'T) ->
        fun ~offset:(x720 : float) ->
          fun ~callback:(x721 : err:Error.t or_null -> buf:'T -> unit) ->
            ignore
              (Ojs.call Import.crypto "randomFill"
                 [|(Obj.magic x719);(Ojs.float_to_js x720);(Ojs.fun_to_js 2
                                                              (fun
                                                                 (x722 :
                                                                   Ojs.t)
                                                                 ->
                                                                 fun
                                                                   (x724 :
                                                                    Ojs.t)
                                                                   ->
                                                                   x721
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x722)
                                                                    ~buf:(
                                                                    Obj.magic
                                                                    x724)))|])
    let (randomFill :
      buffer:'T ->
        offset:float ->
          size:float ->
            callback:(err:Error.t or_null -> buf:'T -> unit) -> unit)
      =
      fun ~buffer:(x725 : 'T) ->
        fun ~offset:(x726 : float) ->
          fun ~size:(x727 : float) ->
            fun ~callback:(x728 : err:Error.t or_null -> buf:'T -> unit) ->
              ignore
                (Ojs.call Import.crypto "randomFill"
                   [|(Obj.magic x725);(Ojs.float_to_js x726);(Ojs.float_to_js
                                                                x727);(
                     Ojs.fun_to_js 2
                       (fun (x729 : Ojs.t) ->
                          fun (x731 : Ojs.t) ->
                            x728 ~err:(or_null_of_js Error.t_of_js x729)
                              ~buf:(Obj.magic x731)))|])
    module ScryptOptions =
      struct
        type t = crypto_ScryptOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x733 : Ojs.t) -> crypto_ScryptOptions_of_js x733
        and t_to_js : t -> Ojs.t =
          fun (x732 : crypto_ScryptOptions) ->
            crypto_ScryptOptions_to_js x732
        let (get_cost : t -> float) =
          fun (x734 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x734) "cost")
        let (set_cost : t -> float -> unit) =
          fun (x735 : t) ->
            fun (x736 : float) ->
              Ojs.set_prop_ascii (t_to_js x735) "cost" (Ojs.float_to_js x736)
        let (get_blockSize : t -> float) =
          fun (x737 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x737) "blockSize")
        let (set_blockSize : t -> float -> unit) =
          fun (x738 : t) ->
            fun (x739 : float) ->
              Ojs.set_prop_ascii (t_to_js x738) "blockSize"
                (Ojs.float_to_js x739)
        let (get_parallelization : t -> float) =
          fun (x740 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x740) "parallelization")
        let (set_parallelization : t -> float -> unit) =
          fun (x741 : t) ->
            fun (x742 : float) ->
              Ojs.set_prop_ascii (t_to_js x741) "parallelization"
                (Ojs.float_to_js x742)
        let (get_N : t -> float) =
          fun (x743 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x743) "N")
        let (set_N : t -> float -> unit) =
          fun (x744 : t) ->
            fun (x745 : float) ->
              Ojs.set_prop_ascii (t_to_js x744) "N" (Ojs.float_to_js x745)
        let (get_r : t -> float) =
          fun (x746 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x746) "r")
        let (set_r : t -> float -> unit) =
          fun (x747 : t) ->
            fun (x748 : float) ->
              Ojs.set_prop_ascii (t_to_js x747) "r" (Ojs.float_to_js x748)
        let (get_p : t -> float) =
          fun (x749 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x749) "p")
        let (set_p : t -> float -> unit) =
          fun (x750 : t) ->
            fun (x751 : float) ->
              Ojs.set_prop_ascii (t_to_js x750) "p" (Ojs.float_to_js x751)
        let (get_maxmem : t -> float) =
          fun (x752 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x752) "maxmem")
        let (set_maxmem : t -> float -> unit) =
          fun (x753 : t) ->
            fun (x754 : float) ->
              Ojs.set_prop_ascii (t_to_js x753) "maxmem"
                (Ojs.float_to_js x754)
      end
    let (scrypt :
      password:crypto_BinaryLike ->
        salt:crypto_BinaryLike ->
          keylen:float ->
            callback:(err:Error.t or_null -> derivedKey:Buffer.t -> unit) ->
              unit)
      =
      fun ~password:(x755 : crypto_BinaryLike) ->
        fun ~salt:(x756 : crypto_BinaryLike) ->
          fun ~keylen:(x757 : float) ->
            fun
              ~callback:(x758 :
                          err:Error.t or_null -> derivedKey:Buffer.t -> unit)
              ->
              ignore
                (Ojs.call Import.crypto "scrypt"
                   [|(crypto_BinaryLike_to_js x755);(crypto_BinaryLike_to_js
                                                       x756);(Ojs.float_to_js
                                                                x757);(
                     Ojs.fun_to_js 2
                       (fun (x759 : Ojs.t) ->
                          fun (x761 : Ojs.t) ->
                            x758 ~err:(or_null_of_js Error.t_of_js x759)
                              ~derivedKey:(Buffer.t_of_js x761)))|])
    let (scrypt :
      password:crypto_BinaryLike ->
        salt:crypto_BinaryLike ->
          keylen:float ->
            options:crypto_ScryptOptions ->
              callback:(err:Error.t or_null -> derivedKey:Buffer.t -> unit)
                -> unit)
      =
      fun ~password:(x762 : crypto_BinaryLike) ->
        fun ~salt:(x763 : crypto_BinaryLike) ->
          fun ~keylen:(x764 : float) ->
            fun ~options:(x765 : crypto_ScryptOptions) ->
              fun
                ~callback:(x766 :
                            err:Error.t or_null ->
                              derivedKey:Buffer.t -> unit)
                ->
                ignore
                  (Ojs.call Import.crypto "scrypt"
                     [|(crypto_BinaryLike_to_js x762);(crypto_BinaryLike_to_js
                                                         x763);(Ojs.float_to_js
                                                                  x764);(
                       crypto_ScryptOptions_to_js x765);(Ojs.fun_to_js 2
                                                           (fun
                                                              (x767 : Ojs.t)
                                                              ->
                                                              fun
                                                                (x769 :
                                                                  Ojs.t)
                                                                ->
                                                                x766
                                                                  ~err:(
                                                                  or_null_of_js
                                                                    Error.t_of_js
                                                                    x767)
                                                                  ~derivedKey:(
                                                                  Buffer.t_of_js
                                                                    x769)))|])
    let (scryptSync :
      password:crypto_BinaryLike ->
        salt:crypto_BinaryLike ->
          keylen:float -> ?options:crypto_ScryptOptions -> unit -> Buffer.t)
      =
      fun ~password:(x770 : crypto_BinaryLike) ->
        fun ~salt:(x771 : crypto_BinaryLike) ->
          fun ~keylen:(x772 : float) ->
            fun ?options:(x773 : crypto_ScryptOptions option) ->
              fun () ->
                Buffer.t_of_js
                  (let x776 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x776 "scryptSync") "apply"
                     [|x776;((let x774 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x774 "push"
                                   [|(crypto_BinaryLike_to_js x770)|]);
                              ignore
                                (Ojs.call x774 "push"
                                   [|(crypto_BinaryLike_to_js x771)|]);
                              ignore
                                (Ojs.call x774 "push"
                                   [|(Ojs.float_to_js x772)|]);
                              (match x773 with
                               | Some x775 ->
                                   ignore
                                     (Ojs.call x774 "push"
                                        [|(crypto_ScryptOptions_to_js x775)|])
                               | None -> ());
                              x774))|])
    module RsaPublicKey =
      struct
        type t = crypto_RsaPublicKey
        let rec t_of_js : Ojs.t -> t =
          fun (x778 : Ojs.t) -> crypto_RsaPublicKey_of_js x778
        and t_to_js : t -> Ojs.t =
          fun (x777 : crypto_RsaPublicKey) -> crypto_RsaPublicKey_to_js x777
        let (get_key : t -> crypto_KeyLike) =
          fun (x779 : t) ->
            crypto_KeyLike_of_js (Ojs.get_prop_ascii (t_to_js x779) "key")
        let (set_key : t -> crypto_KeyLike -> unit) =
          fun (x780 : t) ->
            fun (x781 : crypto_KeyLike) ->
              Ojs.set_prop_ascii (t_to_js x780) "key"
                (crypto_KeyLike_to_js x781)
        let (get_padding : t -> float) =
          fun (x782 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x782) "padding")
        let (set_padding : t -> float -> unit) =
          fun (x783 : t) ->
            fun (x784 : float) ->
              Ojs.set_prop_ascii (t_to_js x783) "padding"
                (Ojs.float_to_js x784)
      end
    module RsaPrivateKey =
      struct
        type t = crypto_RsaPrivateKey
        let rec t_of_js : Ojs.t -> t =
          fun (x786 : Ojs.t) -> crypto_RsaPrivateKey_of_js x786
        and t_to_js : t -> Ojs.t =
          fun (x785 : crypto_RsaPrivateKey) ->
            crypto_RsaPrivateKey_to_js x785
        let (get_key : t -> crypto_KeyLike) =
          fun (x787 : t) ->
            crypto_KeyLike_of_js (Ojs.get_prop_ascii (t_to_js x787) "key")
        let (set_key : t -> crypto_KeyLike -> unit) =
          fun (x788 : t) ->
            fun (x789 : crypto_KeyLike) ->
              Ojs.set_prop_ascii (t_to_js x788) "key"
                (crypto_KeyLike_to_js x789)
        let (get_passphrase : t -> string) =
          fun (x790 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x790) "passphrase")
        let (set_passphrase : t -> string -> unit) =
          fun (x791 : t) ->
            fun (x792 : string) ->
              Ojs.set_prop_ascii (t_to_js x791) "passphrase"
                (Ojs.string_to_js x792)
        let (get_oaepHash : t -> string) =
          fun (x793 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x793) "oaepHash")
        let (set_oaepHash : t -> string -> unit) =
          fun (x794 : t) ->
            fun (x795 : string) ->
              Ojs.set_prop_ascii (t_to_js x794) "oaepHash"
                (Ojs.string_to_js x795)
        let (get_oaepLabel : t -> TypedArray.t) =
          fun (x796 : t) ->
            TypedArray.t_of_js
              (Ojs.get_prop_ascii (t_to_js x796) "oaepLabel")
        let (set_oaepLabel : t -> TypedArray.t -> unit) =
          fun (x797 : t) ->
            fun (x798 : TypedArray.t) ->
              Ojs.set_prop_ascii (t_to_js x797) "oaepLabel"
                (TypedArray.t_to_js x798)
        let (get_padding : t -> float) =
          fun (x799 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x799) "padding")
        let (set_padding : t -> float -> unit) =
          fun (x800 : t) ->
            fun (x801 : float) ->
              Ojs.set_prop_ascii (t_to_js x800) "padding"
                (Ojs.float_to_js x801)
      end
    let (publicEncrypt :
      key:(crypto_KeyLike, crypto_RsaPrivateKey, crypto_RsaPublicKey) union3
        -> buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun
        ~key:(x802 :
               (crypto_KeyLike, crypto_RsaPrivateKey, crypto_RsaPublicKey)
                 union3)
        ->
        fun ~buffer:(x806 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "publicEncrypt"
               [|(union3_to_js crypto_KeyLike_to_js
                    crypto_RsaPrivateKey_to_js crypto_RsaPublicKey_to_js x802);(
                 ArrayBufferView.t_to_js x806)|])
    let (publicDecrypt :
      key:(crypto_KeyLike, crypto_RsaPrivateKey, crypto_RsaPublicKey) union3
        -> buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun
        ~key:(x807 :
               (crypto_KeyLike, crypto_RsaPrivateKey, crypto_RsaPublicKey)
                 union3)
        ->
        fun ~buffer:(x811 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "publicDecrypt"
               [|(union3_to_js crypto_KeyLike_to_js
                    crypto_RsaPrivateKey_to_js crypto_RsaPublicKey_to_js x807);(
                 ArrayBufferView.t_to_js x811)|])
    let (privateDecrypt :
      private_key:(crypto_KeyLike, crypto_RsaPrivateKey) union2 ->
        buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun ~private_key:(x812 : (crypto_KeyLike, crypto_RsaPrivateKey) union2)
        ->
        fun ~buffer:(x815 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "privateDecrypt"
               [|(union2_to_js crypto_KeyLike_to_js
                    crypto_RsaPrivateKey_to_js x812);(ArrayBufferView.t_to_js
                                                        x815)|])
    let (privateEncrypt :
      private_key:(crypto_KeyLike, crypto_RsaPrivateKey) union2 ->
        buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun ~private_key:(x816 : (crypto_KeyLike, crypto_RsaPrivateKey) union2)
        ->
        fun ~buffer:(x819 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "privateEncrypt"
               [|(union2_to_js crypto_KeyLike_to_js
                    crypto_RsaPrivateKey_to_js x816);(ArrayBufferView.t_to_js
                                                        x819)|])
    let (getCiphers : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.crypto "getCiphers" [||])
    let (getCurves : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.crypto "getCurves" [||])
    let (getFips : unit -> [ `L_n_0  | `L_n_1 ]) =
      fun () ->
        let x822 = Ojs.call Import.crypto "getFips" [||] in
        match Ojs.int_of_js x822 with
        | 0 -> `L_n_0
        | 1 -> `L_n_1
        | _ -> assert false
    let (getHashes : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.crypto "getHashes" [||])
    module ECDH =
      struct
        type t = crypto_ECDH
        let rec t_of_js : Ojs.t -> t =
          fun (x825 : Ojs.t) -> crypto_ECDH_of_js x825
        and t_to_js : t -> Ojs.t =
          fun (x824 : crypto_ECDH) -> crypto_ECDH_to_js x824
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "ECDH") [||])
        let (convertKey :
          key:crypto_BinaryLike ->
            curve:string ->
              ?inputEncoding:crypto_BinaryToTextEncoding ->
                ?outputEncoding:[ `base64  | `hex  | `latin1 ] ->
                  ?format:[ `compressed  | `hybrid  | `uncompressed ] ->
                    unit -> Buffer.t or_string)
          =
          fun ~key:(x826 : crypto_BinaryLike) ->
            fun ~curve:(x827 : string) ->
              fun ?inputEncoding:(x828 : crypto_BinaryToTextEncoding option)
                ->
                fun
                  ?outputEncoding:(x829 :
                                    [ `base64  | `hex  | `latin1 ] option)
                  ->
                  fun
                    ?format:(x830 :
                              [ `compressed  | `hybrid  | `uncompressed ]
                                option)
                    ->
                    fun () ->
                      or_string_of_js Buffer.t_of_js
                        (let x835 = Ojs.get_prop_ascii Import.crypto "ECDH" in
                         Ojs.call (Ojs.get_prop_ascii x835 "convertKey")
                           "apply"
                           [|x835;((let x831 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x831 "push"
                                         [|(crypto_BinaryLike_to_js x826)|]);
                                    ignore
                                      (Ojs.call x831 "push"
                                         [|(Ojs.string_to_js x827)|]);
                                    (match x828 with
                                     | Some x834 ->
                                         ignore
                                           (Ojs.call x831 "push"
                                              [|(crypto_BinaryToTextEncoding_to_js
                                                   x834)|])
                                     | None -> ());
                                    (match x829 with
                                     | Some x833 ->
                                         ignore
                                           (Ojs.call x831 "push"
                                              [|((match x833 with
                                                  | `base64 ->
                                                      Ojs.string_to_js
                                                        "base64"
                                                  | `hex ->
                                                      Ojs.string_to_js "hex"
                                                  | `latin1 ->
                                                      Ojs.string_to_js
                                                        "latin1"))|])
                                     | None -> ());
                                    (match x830 with
                                     | Some x832 ->
                                         ignore
                                           (Ojs.call x831 "push"
                                              [|((match x832 with
                                                  | `compressed ->
                                                      Ojs.string_to_js
                                                        "compressed"
                                                  | `hybrid ->
                                                      Ojs.string_to_js
                                                        "hybrid"
                                                  | `uncompressed ->
                                                      Ojs.string_to_js
                                                        "uncompressed"))|])
                                     | None -> ());
                                    x831))|])
        let (generateKeys : t -> Buffer.t) =
          fun (x837 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x837) "generateKeys" [||])
        let (generateKeys' :
          t ->
            encoding:crypto_BinaryToTextEncoding ->
              ?format:crypto_ECDHKeyFormat -> unit -> string)
          =
          fun (x842 : t) ->
            fun ~encoding:(x838 : crypto_BinaryToTextEncoding) ->
              fun ?format:(x839 : crypto_ECDHKeyFormat option) ->
                fun () ->
                  Ojs.string_of_js
                    (let x843 = t_to_js x842 in
                     Ojs.call (Ojs.get_prop_ascii x843 "generateKeys")
                       "apply"
                       [|x843;((let x840 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x840 "push"
                                     [|(crypto_BinaryToTextEncoding_to_js
                                          x838)|]);
                                (match x839 with
                                 | Some x841 ->
                                     ignore
                                       (Ojs.call x840 "push"
                                          [|(crypto_ECDHKeyFormat_to_js x841)|])
                                 | None -> ());
                                x840))|])
        let (computeSecret :
          t -> other_public_key:ArrayBufferView.t -> Buffer.t) =
          fun (x845 : t) ->
            fun ~other_public_key:(x844 : ArrayBufferView.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x845) "computeSecret"
                   [|(ArrayBufferView.t_to_js x844)|])
        let (computeSecret' :
          t ->
            other_public_key:string ->
              input_encoding:crypto_BinaryToTextEncoding -> Buffer.t)
          =
          fun (x848 : t) ->
            fun ~other_public_key:(x846 : string) ->
              fun ~input_encoding:(x847 : crypto_BinaryToTextEncoding) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x848) "computeSecret"
                     [|(Ojs.string_to_js x846);(crypto_BinaryToTextEncoding_to_js
                                                  x847)|])
        let (computeSecret'' :
          t ->
            other_public_key:ArrayBufferView.t ->
              output_encoding:crypto_BinaryToTextEncoding -> string)
          =
          fun (x851 : t) ->
            fun ~other_public_key:(x849 : ArrayBufferView.t) ->
              fun ~output_encoding:(x850 : crypto_BinaryToTextEncoding) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x851) "computeSecret"
                     [|(ArrayBufferView.t_to_js x849);(crypto_BinaryToTextEncoding_to_js
                                                         x850)|])
        let (computeSecret''' :
          t ->
            other_public_key:string ->
              input_encoding:crypto_BinaryToTextEncoding ->
                output_encoding:crypto_BinaryToTextEncoding -> string)
          =
          fun (x855 : t) ->
            fun ~other_public_key:(x852 : string) ->
              fun ~input_encoding:(x853 : crypto_BinaryToTextEncoding) ->
                fun ~output_encoding:(x854 : crypto_BinaryToTextEncoding) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x855) "computeSecret"
                       [|(Ojs.string_to_js x852);(crypto_BinaryToTextEncoding_to_js
                                                    x853);(crypto_BinaryToTextEncoding_to_js
                                                             x854)|])
        let (getPrivateKey : t -> Buffer.t) =
          fun (x856 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x856) "getPrivateKey" [||])
        let (getPrivateKey' :
          t -> encoding:crypto_BinaryToTextEncoding -> string) =
          fun (x858 : t) ->
            fun ~encoding:(x857 : crypto_BinaryToTextEncoding) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x858) "getPrivateKey"
                   [|(crypto_BinaryToTextEncoding_to_js x857)|])
        let (getPublicKey : t -> Buffer.t) =
          fun (x859 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x859) "getPublicKey" [||])
        let (getPublicKey' :
          t ->
            encoding:crypto_BinaryToTextEncoding ->
              ?format:crypto_ECDHKeyFormat -> unit -> string)
          =
          fun (x864 : t) ->
            fun ~encoding:(x860 : crypto_BinaryToTextEncoding) ->
              fun ?format:(x861 : crypto_ECDHKeyFormat option) ->
                fun () ->
                  Ojs.string_of_js
                    (let x865 = t_to_js x864 in
                     Ojs.call (Ojs.get_prop_ascii x865 "getPublicKey")
                       "apply"
                       [|x865;((let x862 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x862 "push"
                                     [|(crypto_BinaryToTextEncoding_to_js
                                          x860)|]);
                                (match x861 with
                                 | Some x863 ->
                                     ignore
                                       (Ojs.call x862 "push"
                                          [|(crypto_ECDHKeyFormat_to_js x863)|])
                                 | None -> ());
                                x862))|])
        let (setPrivateKey : t -> private_key:ArrayBufferView.t -> unit) =
          fun (x867 : t) ->
            fun ~private_key:(x866 : ArrayBufferView.t) ->
              ignore
                (Ojs.call (t_to_js x867) "setPrivateKey"
                   [|(ArrayBufferView.t_to_js x866)|])
        let (setPrivateKey' :
          t ->
            private_key:string ->
              encoding:crypto_BinaryToTextEncoding -> unit)
          =
          fun (x870 : t) ->
            fun ~private_key:(x868 : string) ->
              fun ~encoding:(x869 : crypto_BinaryToTextEncoding) ->
                ignore
                  (Ojs.call (t_to_js x870) "setPrivateKey"
                     [|(Ojs.string_to_js x868);(crypto_BinaryToTextEncoding_to_js
                                                  x869)|])
      end
    let (createECDH : curve_name:string -> crypto_ECDH) =
      fun ~curve_name:(x871 : string) ->
        crypto_ECDH_of_js
          (Ojs.call Import.crypto "createECDH" [|(Ojs.string_to_js x871)|])
    let (timingSafeEqual :
      a:ArrayBufferView.t -> b:ArrayBufferView.t -> bool) =
      fun ~a:(x872 : ArrayBufferView.t) ->
        fun ~b:(x873 : ArrayBufferView.t) ->
          Ojs.bool_of_js
            (Ojs.call Import.crypto "timingSafeEqual"
               [|(ArrayBufferView.t_to_js x872);(ArrayBufferView.t_to_js x873)|])
    let (dEFAULT_ENCODING : BufferEncoding.t) =
      BufferEncoding.t_of_js
        (Ojs.get_prop_ascii Import.crypto "DEFAULT_ENCODING")
    module KeyType =
      struct
        type t = crypto_KeyType
        let rec t_of_js : Ojs.t -> t =
          fun (x875 : Ojs.t) -> crypto_KeyType_of_js x875
        and t_to_js : t -> Ojs.t =
          fun (x874 : crypto_KeyType) -> crypto_KeyType_to_js x874
      end
    module KeyFormat =
      struct
        type t = crypto_KeyFormat
        let rec t_of_js : Ojs.t -> t =
          fun (x877 : Ojs.t) -> crypto_KeyFormat_of_js x877
        and t_to_js : t -> Ojs.t =
          fun (x876 : crypto_KeyFormat) -> crypto_KeyFormat_to_js x876
      end
    module BasePrivateKeyEncodingOptions =
      struct
        type 'T t = 'T crypto_BasePrivateKeyEncodingOptions
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x880 : Ojs.t) ->
              crypto_BasePrivateKeyEncodingOptions_of_js __T_of_js x880
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x878 : __T crypto_BasePrivateKeyEncodingOptions) ->
              crypto_BasePrivateKeyEncodingOptions_to_js __T_to_js x878
        let (get_format : 'T t -> 'T) =
          fun (x882 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x882) "format")
        let (set_format : 'T t -> 'T -> unit) =
          fun (x884 : 'T t) ->
            fun (x885 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x884) "format"
                (Obj.magic x885)
        let (get_cipher : 'T t -> string) =
          fun (x887 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x887) "cipher")
        let (set_cipher : 'T t -> string -> unit) =
          fun (x889 : 'T t) ->
            fun (x890 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x889) "cipher"
                (Ojs.string_to_js x890)
        let (get_passphrase : 'T t -> string) =
          fun (x892 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x892) "passphrase")
        let (set_passphrase : 'T t -> string -> unit) =
          fun (x894 : 'T t) ->
            fun (x895 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x894) "passphrase"
                (Ojs.string_to_js x895)
      end
    module KeyPairKeyObjectResult =
      struct
        type t = crypto_KeyPairKeyObjectResult
        let rec t_of_js : Ojs.t -> t =
          fun (x898 : Ojs.t) -> crypto_KeyPairKeyObjectResult_of_js x898
        and t_to_js : t -> Ojs.t =
          fun (x897 : crypto_KeyPairKeyObjectResult) ->
            crypto_KeyPairKeyObjectResult_to_js x897
        let (get_publicKey : t -> crypto_KeyObject) =
          fun (x899 : t) ->
            crypto_KeyObject_of_js
              (Ojs.get_prop_ascii (t_to_js x899) "publicKey")
        let (set_publicKey : t -> crypto_KeyObject -> unit) =
          fun (x900 : t) ->
            fun (x901 : crypto_KeyObject) ->
              Ojs.set_prop_ascii (t_to_js x900) "publicKey"
                (crypto_KeyObject_to_js x901)
        let (get_privateKey : t -> crypto_KeyObject) =
          fun (x902 : t) ->
            crypto_KeyObject_of_js
              (Ojs.get_prop_ascii (t_to_js x902) "privateKey")
        let (set_privateKey : t -> crypto_KeyObject -> unit) =
          fun (x903 : t) ->
            fun (x904 : crypto_KeyObject) ->
              Ojs.set_prop_ascii (t_to_js x903) "privateKey"
                (crypto_KeyObject_to_js x904)
      end
    module ED25519KeyPairKeyObjectOptions =
      struct
        type t = crypto_ED25519KeyPairKeyObjectOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x906 : Ojs.t) ->
            crypto_ED25519KeyPairKeyObjectOptions_of_js x906
        and t_to_js : t -> Ojs.t =
          fun (x905 : crypto_ED25519KeyPairKeyObjectOptions) ->
            crypto_ED25519KeyPairKeyObjectOptions_to_js x905
      end
    module ED448KeyPairKeyObjectOptions =
      struct
        type t = crypto_ED448KeyPairKeyObjectOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x908 : Ojs.t) ->
            crypto_ED448KeyPairKeyObjectOptions_of_js x908
        and t_to_js : t -> Ojs.t =
          fun (x907 : crypto_ED448KeyPairKeyObjectOptions) ->
            crypto_ED448KeyPairKeyObjectOptions_to_js x907
      end
    module X25519KeyPairKeyObjectOptions =
      struct
        type t = crypto_X25519KeyPairKeyObjectOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x910 : Ojs.t) ->
            crypto_X25519KeyPairKeyObjectOptions_of_js x910
        and t_to_js : t -> Ojs.t =
          fun (x909 : crypto_X25519KeyPairKeyObjectOptions) ->
            crypto_X25519KeyPairKeyObjectOptions_to_js x909
      end
    module X448KeyPairKeyObjectOptions =
      struct
        type t = crypto_X448KeyPairKeyObjectOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x912 : Ojs.t) -> crypto_X448KeyPairKeyObjectOptions_of_js x912
        and t_to_js : t -> Ojs.t =
          fun (x911 : crypto_X448KeyPairKeyObjectOptions) ->
            crypto_X448KeyPairKeyObjectOptions_to_js x911
      end
    module ECKeyPairKeyObjectOptions =
      struct
        type t = crypto_ECKeyPairKeyObjectOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x914 : Ojs.t) -> crypto_ECKeyPairKeyObjectOptions_of_js x914
        and t_to_js : t -> Ojs.t =
          fun (x913 : crypto_ECKeyPairKeyObjectOptions) ->
            crypto_ECKeyPairKeyObjectOptions_to_js x913
        let (get_namedCurve : t -> string) =
          fun (x915 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x915) "namedCurve")
        let (set_namedCurve : t -> string -> unit) =
          fun (x916 : t) ->
            fun (x917 : string) ->
              Ojs.set_prop_ascii (t_to_js x916) "namedCurve"
                (Ojs.string_to_js x917)
      end
    module RSAKeyPairKeyObjectOptions =
      struct
        type t = crypto_RSAKeyPairKeyObjectOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x919 : Ojs.t) -> crypto_RSAKeyPairKeyObjectOptions_of_js x919
        and t_to_js : t -> Ojs.t =
          fun (x918 : crypto_RSAKeyPairKeyObjectOptions) ->
            crypto_RSAKeyPairKeyObjectOptions_to_js x918
        let (get_modulusLength : t -> float) =
          fun (x920 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x920) "modulusLength")
        let (set_modulusLength : t -> float -> unit) =
          fun (x921 : t) ->
            fun (x922 : float) ->
              Ojs.set_prop_ascii (t_to_js x921) "modulusLength"
                (Ojs.float_to_js x922)
        let (get_publicExponent : t -> float) =
          fun (x923 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x923) "publicExponent")
        let (set_publicExponent : t -> float -> unit) =
          fun (x924 : t) ->
            fun (x925 : float) ->
              Ojs.set_prop_ascii (t_to_js x924) "publicExponent"
                (Ojs.float_to_js x925)
      end
    module DSAKeyPairKeyObjectOptions =
      struct
        type t = crypto_DSAKeyPairKeyObjectOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x927 : Ojs.t) -> crypto_DSAKeyPairKeyObjectOptions_of_js x927
        and t_to_js : t -> Ojs.t =
          fun (x926 : crypto_DSAKeyPairKeyObjectOptions) ->
            crypto_DSAKeyPairKeyObjectOptions_to_js x926
        let (get_modulusLength : t -> float) =
          fun (x928 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x928) "modulusLength")
        let (set_modulusLength : t -> float -> unit) =
          fun (x929 : t) ->
            fun (x930 : float) ->
              Ojs.set_prop_ascii (t_to_js x929) "modulusLength"
                (Ojs.float_to_js x930)
        let (get_divisorLength : t -> float) =
          fun (x931 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x931) "divisorLength")
        let (set_divisorLength : t -> float -> unit) =
          fun (x932 : t) ->
            fun (x933 : float) ->
              Ojs.set_prop_ascii (t_to_js x932) "divisorLength"
                (Ojs.float_to_js x933)
      end
    module RSAKeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) crypto_RSAKeyPairOptions
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x937 : Ojs.t) ->
                crypto_RSAKeyPairOptions_of_js __PubF_of_js __PrivF_of_js
                  x937
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x934 : (__PubF, __PrivF) crypto_RSAKeyPairOptions) ->
                crypto_RSAKeyPairOptions_to_js __PubF_to_js __PrivF_to_js
                  x934
        let (get_modulusLength : ('PubF, 'PrivF) t -> float) =
          fun (x940 : ('PubF, 'PrivF) t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x940)
                 "modulusLength")
        let (set_modulusLength : ('PubF, 'PrivF) t -> float -> unit) =
          fun (x943 : ('PubF, 'PrivF) t) ->
            fun (x944 : float) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x943)
                "modulusLength" (Ojs.float_to_js x944)
        let (get_publicExponent : ('PubF, 'PrivF) t -> float) =
          fun (x947 : ('PubF, 'PrivF) t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x947)
                 "publicExponent")
        let (set_publicExponent : ('PubF, 'PrivF) t -> float -> unit) =
          fun (x950 : ('PubF, 'PrivF) t) ->
            fun (x951 : float) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x950)
                "publicExponent" (Ojs.float_to_js x951)
        let (get_publicKeyEncoding :
          ('PubF, 'PrivF) t -> anonymous_interface_9) =
          fun (x954 : ('PubF, 'PrivF) t) ->
            anonymous_interface_9_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x954)
                 "publicKeyEncoding")
        let (set_publicKeyEncoding :
          ('PubF, 'PrivF) t -> anonymous_interface_9 -> unit) =
          fun (x957 : ('PubF, 'PrivF) t) ->
            fun (x958 : anonymous_interface_9) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x957)
                "publicKeyEncoding" (anonymous_interface_9_to_js x958)
        let (get_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              anonymous_interface_8) intersection2)
          =
          fun (x961 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x964 : Ojs.t) ->
                 crypto_BasePrivateKeyEncodingOptions_of_js Obj.magic x964)
              anonymous_interface_8_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x961)
                 "privateKeyEncoding")
        let (set_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              anonymous_interface_8) intersection2 -> unit)
          =
          fun (x967 : ('PubF, 'PrivF) t) ->
            fun
              (x968 :
                ('PrivF crypto_BasePrivateKeyEncodingOptions,
                  anonymous_interface_8) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x967)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x969 : 'PrivF crypto_BasePrivateKeyEncodingOptions)
                      ->
                      crypto_BasePrivateKeyEncodingOptions_to_js Obj.magic
                        x969) anonymous_interface_8_to_js x968)
      end
    module DSAKeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) crypto_DSAKeyPairOptions
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x977 : Ojs.t) ->
                crypto_DSAKeyPairOptions_of_js __PubF_of_js __PrivF_of_js
                  x977
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x974 : (__PubF, __PrivF) crypto_DSAKeyPairOptions) ->
                crypto_DSAKeyPairOptions_to_js __PubF_to_js __PrivF_to_js
                  x974
        let (get_modulusLength : ('PubF, 'PrivF) t -> float) =
          fun (x980 : ('PubF, 'PrivF) t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x980)
                 "modulusLength")
        let (set_modulusLength : ('PubF, 'PrivF) t -> float -> unit) =
          fun (x983 : ('PubF, 'PrivF) t) ->
            fun (x984 : float) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x983)
                "modulusLength" (Ojs.float_to_js x984)
        let (get_divisorLength : ('PubF, 'PrivF) t -> float) =
          fun (x987 : ('PubF, 'PrivF) t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x987)
                 "divisorLength")
        let (set_divisorLength : ('PubF, 'PrivF) t -> float -> unit) =
          fun (x990 : ('PubF, 'PrivF) t) ->
            fun (x991 : float) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x990)
                "divisorLength" (Ojs.float_to_js x991)
        let (get_publicKeyEncoding :
          ('PubF, 'PrivF) t -> anonymous_interface_7) =
          fun (x994 : ('PubF, 'PrivF) t) ->
            anonymous_interface_7_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x994)
                 "publicKeyEncoding")
        let (set_publicKeyEncoding :
          ('PubF, 'PrivF) t -> anonymous_interface_7 -> unit) =
          fun (x997 : ('PubF, 'PrivF) t) ->
            fun (x998 : anonymous_interface_7) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x997)
                "publicKeyEncoding" (anonymous_interface_7_to_js x998)
        let (get_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              anonymous_interface_6) intersection2)
          =
          fun (x1001 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1004 : Ojs.t) ->
                 crypto_BasePrivateKeyEncodingOptions_of_js Obj.magic x1004)
              anonymous_interface_6_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1001)
                 "privateKeyEncoding")
        let (set_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              anonymous_interface_6) intersection2 -> unit)
          =
          fun (x1007 : ('PubF, 'PrivF) t) ->
            fun
              (x1008 :
                ('PrivF crypto_BasePrivateKeyEncodingOptions,
                  anonymous_interface_6) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1007)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1009 : 'PrivF crypto_BasePrivateKeyEncodingOptions)
                      ->
                      crypto_BasePrivateKeyEncodingOptions_to_js Obj.magic
                        x1009) anonymous_interface_6_to_js x1008)
      end
    module ECKeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) crypto_ECKeyPairOptions
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x1017 : Ojs.t) ->
                crypto_ECKeyPairOptions_of_js __PubF_of_js __PrivF_of_js
                  x1017
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x1014 : (__PubF, __PrivF) crypto_ECKeyPairOptions) ->
                crypto_ECKeyPairOptions_to_js __PubF_to_js __PrivF_to_js
                  x1014
        let (get_namedCurve : ('PubF, 'PrivF) t -> string) =
          fun (x1020 : ('PubF, 'PrivF) t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1020)
                 "namedCurve")
        let (set_namedCurve : ('PubF, 'PrivF) t -> string -> unit) =
          fun (x1023 : ('PubF, 'PrivF) t) ->
            fun (x1024 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1023)
                "namedCurve" (Ojs.string_to_js x1024)
        let (get_publicKeyEncoding :
          ('PubF, 'PrivF) t -> anonymous_interface_9) =
          fun (x1027 : ('PubF, 'PrivF) t) ->
            anonymous_interface_9_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1027)
                 "publicKeyEncoding")
        let (set_publicKeyEncoding :
          ('PubF, 'PrivF) t -> anonymous_interface_9 -> unit) =
          fun (x1030 : ('PubF, 'PrivF) t) ->
            fun (x1031 : anonymous_interface_9) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1030)
                "publicKeyEncoding" (anonymous_interface_9_to_js x1031)
        let (get_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              anonymous_interface_10) intersection2)
          =
          fun (x1034 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1037 : Ojs.t) ->
                 crypto_BasePrivateKeyEncodingOptions_of_js Obj.magic x1037)
              anonymous_interface_10_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1034)
                 "privateKeyEncoding")
        let (set_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              anonymous_interface_10) intersection2 -> unit)
          =
          fun (x1040 : ('PubF, 'PrivF) t) ->
            fun
              (x1041 :
                ('PrivF crypto_BasePrivateKeyEncodingOptions,
                  anonymous_interface_10) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1040)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1042 : 'PrivF crypto_BasePrivateKeyEncodingOptions)
                      ->
                      crypto_BasePrivateKeyEncodingOptions_to_js Obj.magic
                        x1042) anonymous_interface_10_to_js x1041)
      end
    module ED25519KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) crypto_ED25519KeyPairOptions
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x1050 : Ojs.t) ->
                crypto_ED25519KeyPairOptions_of_js __PubF_of_js __PrivF_of_js
                  x1050
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x1047 : (__PubF, __PrivF) crypto_ED25519KeyPairOptions) ->
                crypto_ED25519KeyPairOptions_to_js __PubF_to_js __PrivF_to_js
                  x1047
        let (get_publicKeyEncoding :
          ('PubF, 'PrivF) t -> anonymous_interface_7) =
          fun (x1053 : ('PubF, 'PrivF) t) ->
            anonymous_interface_7_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1053)
                 "publicKeyEncoding")
        let (set_publicKeyEncoding :
          ('PubF, 'PrivF) t -> anonymous_interface_7 -> unit) =
          fun (x1056 : ('PubF, 'PrivF) t) ->
            fun (x1057 : anonymous_interface_7) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1056)
                "publicKeyEncoding" (anonymous_interface_7_to_js x1057)
        let (get_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              anonymous_interface_6) intersection2)
          =
          fun (x1060 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1063 : Ojs.t) ->
                 crypto_BasePrivateKeyEncodingOptions_of_js Obj.magic x1063)
              anonymous_interface_6_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1060)
                 "privateKeyEncoding")
        let (set_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              anonymous_interface_6) intersection2 -> unit)
          =
          fun (x1066 : ('PubF, 'PrivF) t) ->
            fun
              (x1067 :
                ('PrivF crypto_BasePrivateKeyEncodingOptions,
                  anonymous_interface_6) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1066)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1068 : 'PrivF crypto_BasePrivateKeyEncodingOptions)
                      ->
                      crypto_BasePrivateKeyEncodingOptions_to_js Obj.magic
                        x1068) anonymous_interface_6_to_js x1067)
      end
    module ED448KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) crypto_ED448KeyPairOptions
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x1076 : Ojs.t) ->
                crypto_ED448KeyPairOptions_of_js __PubF_of_js __PrivF_of_js
                  x1076
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x1073 : (__PubF, __PrivF) crypto_ED448KeyPairOptions) ->
                crypto_ED448KeyPairOptions_to_js __PubF_to_js __PrivF_to_js
                  x1073
        let (get_publicKeyEncoding :
          ('PubF, 'PrivF) t -> anonymous_interface_7) =
          fun (x1079 : ('PubF, 'PrivF) t) ->
            anonymous_interface_7_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1079)
                 "publicKeyEncoding")
        let (set_publicKeyEncoding :
          ('PubF, 'PrivF) t -> anonymous_interface_7 -> unit) =
          fun (x1082 : ('PubF, 'PrivF) t) ->
            fun (x1083 : anonymous_interface_7) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1082)
                "publicKeyEncoding" (anonymous_interface_7_to_js x1083)
        let (get_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              anonymous_interface_6) intersection2)
          =
          fun (x1086 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1089 : Ojs.t) ->
                 crypto_BasePrivateKeyEncodingOptions_of_js Obj.magic x1089)
              anonymous_interface_6_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1086)
                 "privateKeyEncoding")
        let (set_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              anonymous_interface_6) intersection2 -> unit)
          =
          fun (x1092 : ('PubF, 'PrivF) t) ->
            fun
              (x1093 :
                ('PrivF crypto_BasePrivateKeyEncodingOptions,
                  anonymous_interface_6) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1092)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1094 : 'PrivF crypto_BasePrivateKeyEncodingOptions)
                      ->
                      crypto_BasePrivateKeyEncodingOptions_to_js Obj.magic
                        x1094) anonymous_interface_6_to_js x1093)
      end
    module X25519KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) crypto_X25519KeyPairOptions
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x1102 : Ojs.t) ->
                crypto_X25519KeyPairOptions_of_js __PubF_of_js __PrivF_of_js
                  x1102
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x1099 : (__PubF, __PrivF) crypto_X25519KeyPairOptions) ->
                crypto_X25519KeyPairOptions_to_js __PubF_to_js __PrivF_to_js
                  x1099
        let (get_publicKeyEncoding :
          ('PubF, 'PrivF) t -> anonymous_interface_7) =
          fun (x1105 : ('PubF, 'PrivF) t) ->
            anonymous_interface_7_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1105)
                 "publicKeyEncoding")
        let (set_publicKeyEncoding :
          ('PubF, 'PrivF) t -> anonymous_interface_7 -> unit) =
          fun (x1108 : ('PubF, 'PrivF) t) ->
            fun (x1109 : anonymous_interface_7) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1108)
                "publicKeyEncoding" (anonymous_interface_7_to_js x1109)
        let (get_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              anonymous_interface_6) intersection2)
          =
          fun (x1112 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1115 : Ojs.t) ->
                 crypto_BasePrivateKeyEncodingOptions_of_js Obj.magic x1115)
              anonymous_interface_6_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1112)
                 "privateKeyEncoding")
        let (set_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              anonymous_interface_6) intersection2 -> unit)
          =
          fun (x1118 : ('PubF, 'PrivF) t) ->
            fun
              (x1119 :
                ('PrivF crypto_BasePrivateKeyEncodingOptions,
                  anonymous_interface_6) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1118)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1120 : 'PrivF crypto_BasePrivateKeyEncodingOptions)
                      ->
                      crypto_BasePrivateKeyEncodingOptions_to_js Obj.magic
                        x1120) anonymous_interface_6_to_js x1119)
      end
    module X448KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) crypto_X448KeyPairOptions
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x1128 : Ojs.t) ->
                crypto_X448KeyPairOptions_of_js __PubF_of_js __PrivF_of_js
                  x1128
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x1125 : (__PubF, __PrivF) crypto_X448KeyPairOptions) ->
                crypto_X448KeyPairOptions_to_js __PubF_to_js __PrivF_to_js
                  x1125
        let (get_publicKeyEncoding :
          ('PubF, 'PrivF) t -> anonymous_interface_7) =
          fun (x1131 : ('PubF, 'PrivF) t) ->
            anonymous_interface_7_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1131)
                 "publicKeyEncoding")
        let (set_publicKeyEncoding :
          ('PubF, 'PrivF) t -> anonymous_interface_7 -> unit) =
          fun (x1134 : ('PubF, 'PrivF) t) ->
            fun (x1135 : anonymous_interface_7) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1134)
                "publicKeyEncoding" (anonymous_interface_7_to_js x1135)
        let (get_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              anonymous_interface_6) intersection2)
          =
          fun (x1138 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1141 : Ojs.t) ->
                 crypto_BasePrivateKeyEncodingOptions_of_js Obj.magic x1141)
              anonymous_interface_6_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1138)
                 "privateKeyEncoding")
        let (set_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              anonymous_interface_6) intersection2 -> unit)
          =
          fun (x1144 : ('PubF, 'PrivF) t) ->
            fun
              (x1145 :
                ('PrivF crypto_BasePrivateKeyEncodingOptions,
                  anonymous_interface_6) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1144)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1146 : 'PrivF crypto_BasePrivateKeyEncodingOptions)
                      ->
                      crypto_BasePrivateKeyEncodingOptions_to_js Obj.magic
                        x1146) anonymous_interface_6_to_js x1145)
      end
    module KeyPairSyncResult =
      struct
        type ('T1, 'T2) t = ('T1, 'T2) crypto_KeyPairSyncResult
        let rec t_of_js :
          'T1 'T2 . (Ojs.t -> 'T1) -> (Ojs.t -> 'T2) -> Ojs.t -> ('T1, 'T2) t
          = fun (type __T1) -> fun (type __T2) ->
          fun (__T1_of_js : Ojs.t -> __T1) ->
            fun (__T2_of_js : Ojs.t -> __T2) ->
              fun (x1154 : Ojs.t) ->
                crypto_KeyPairSyncResult_of_js __T1_of_js __T2_of_js x1154
        and t_to_js :
          'T1 'T2 . ('T1 -> Ojs.t) -> ('T2 -> Ojs.t) -> ('T1, 'T2) t -> Ojs.t
          = fun (type __T1) -> fun (type __T2) ->
          fun (__T1_to_js : __T1 -> Ojs.t) ->
            fun (__T2_to_js : __T2 -> Ojs.t) ->
              fun (x1151 : (__T1, __T2) crypto_KeyPairSyncResult) ->
                crypto_KeyPairSyncResult_to_js __T1_to_js __T2_to_js x1151
        let (get_publicKey : ('T1, 'T2) t -> 'T1) =
          fun (x1157 : ('T1, 'T2) t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1157)
                 "publicKey")
        let (set_publicKey : ('T1, 'T2) t -> 'T1 -> unit) =
          fun (x1160 : ('T1, 'T2) t) ->
            fun (x1161 : 'T1) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1160)
                "publicKey" (Obj.magic x1161)
        let (get_privateKey : ('T1, 'T2) t -> 'T2) =
          fun (x1164 : ('T1, 'T2) t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1164)
                 "privateKey")
        let (set_privateKey : ('T1, 'T2) t -> 'T2 -> unit) =
          fun (x1167 : ('T1, 'T2) t) ->
            fun (x1168 : 'T2) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1167)
                "privateKey" (Obj.magic x1168)
      end
    let (generateKeyPairSync :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `pem ]) crypto_RSAKeyPairOptions ->
          (string, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1171 : [ `rsa ]) ->
        fun ~options:(x1172 : ([ `pem ], [ `pem ]) crypto_RSAKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1171 with | `rsa -> Ojs.string_to_js "rsa"));(
                 crypto_RSAKeyPairOptions_to_js
                   (fun (x1173 : [ `pem ]) ->
                      match x1173 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1174 : [ `pem ]) ->
                      match x1174 with | `pem -> Ojs.string_to_js "pem")
                   x1172)|])
    let (generateKeyPairSync :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `der ]) crypto_RSAKeyPairOptions ->
          (string, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1177 : [ `rsa ]) ->
        fun ~options:(x1178 : ([ `pem ], [ `der ]) crypto_RSAKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1177 with | `rsa -> Ojs.string_to_js "rsa"));(
                 crypto_RSAKeyPairOptions_to_js
                   (fun (x1179 : [ `pem ]) ->
                      match x1179 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1180 : [ `der ]) ->
                      match x1180 with | `der -> Ojs.string_to_js "der")
                   x1178)|])
    let (generateKeyPairSync :
      type_:[ `rsa ] ->
        options:([ `der ], [ `pem ]) crypto_RSAKeyPairOptions ->
          (Buffer.t, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1183 : [ `rsa ]) ->
        fun ~options:(x1184 : ([ `der ], [ `pem ]) crypto_RSAKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1183 with | `rsa -> Ojs.string_to_js "rsa"));(
                 crypto_RSAKeyPairOptions_to_js
                   (fun (x1185 : [ `der ]) ->
                      match x1185 with | `der -> Ojs.string_to_js "der")
                   (fun (x1186 : [ `pem ]) ->
                      match x1186 with | `pem -> Ojs.string_to_js "pem")
                   x1184)|])
    let (generateKeyPairSync :
      type_:[ `rsa ] ->
        options:([ `der ], [ `der ]) crypto_RSAKeyPairOptions ->
          (Buffer.t, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1189 : [ `rsa ]) ->
        fun ~options:(x1190 : ([ `der ], [ `der ]) crypto_RSAKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1189 with | `rsa -> Ojs.string_to_js "rsa"));(
                 crypto_RSAKeyPairOptions_to_js
                   (fun (x1191 : [ `der ]) ->
                      match x1191 with | `der -> Ojs.string_to_js "der")
                   (fun (x1192 : [ `der ]) ->
                      match x1192 with | `der -> Ojs.string_to_js "der")
                   x1190)|])
    let (generateKeyPairSync :
      type_:[ `rsa ] ->
        options:crypto_RSAKeyPairKeyObjectOptions ->
          crypto_KeyPairKeyObjectResult)
      =
      fun ~type_:(x1195 : [ `rsa ]) ->
        fun ~options:(x1196 : crypto_RSAKeyPairKeyObjectOptions) ->
          crypto_KeyPairKeyObjectResult_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1195 with | `rsa -> Ojs.string_to_js "rsa"));(
                 crypto_RSAKeyPairKeyObjectOptions_to_js x1196)|])
    let (generateKeyPairSync :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `pem ]) crypto_DSAKeyPairOptions ->
          (string, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1197 : [ `dsa ]) ->
        fun ~options:(x1198 : ([ `pem ], [ `pem ]) crypto_DSAKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1197 with | `dsa -> Ojs.string_to_js "dsa"));(
                 crypto_DSAKeyPairOptions_to_js
                   (fun (x1199 : [ `pem ]) ->
                      match x1199 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1200 : [ `pem ]) ->
                      match x1200 with | `pem -> Ojs.string_to_js "pem")
                   x1198)|])
    let (generateKeyPairSync :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `der ]) crypto_DSAKeyPairOptions ->
          (string, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1203 : [ `dsa ]) ->
        fun ~options:(x1204 : ([ `pem ], [ `der ]) crypto_DSAKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1203 with | `dsa -> Ojs.string_to_js "dsa"));(
                 crypto_DSAKeyPairOptions_to_js
                   (fun (x1205 : [ `pem ]) ->
                      match x1205 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1206 : [ `der ]) ->
                      match x1206 with | `der -> Ojs.string_to_js "der")
                   x1204)|])
    let (generateKeyPairSync :
      type_:[ `dsa ] ->
        options:([ `der ], [ `pem ]) crypto_DSAKeyPairOptions ->
          (Buffer.t, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1209 : [ `dsa ]) ->
        fun ~options:(x1210 : ([ `der ], [ `pem ]) crypto_DSAKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1209 with | `dsa -> Ojs.string_to_js "dsa"));(
                 crypto_DSAKeyPairOptions_to_js
                   (fun (x1211 : [ `der ]) ->
                      match x1211 with | `der -> Ojs.string_to_js "der")
                   (fun (x1212 : [ `pem ]) ->
                      match x1212 with | `pem -> Ojs.string_to_js "pem")
                   x1210)|])
    let (generateKeyPairSync :
      type_:[ `dsa ] ->
        options:([ `der ], [ `der ]) crypto_DSAKeyPairOptions ->
          (Buffer.t, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1215 : [ `dsa ]) ->
        fun ~options:(x1216 : ([ `der ], [ `der ]) crypto_DSAKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1215 with | `dsa -> Ojs.string_to_js "dsa"));(
                 crypto_DSAKeyPairOptions_to_js
                   (fun (x1217 : [ `der ]) ->
                      match x1217 with | `der -> Ojs.string_to_js "der")
                   (fun (x1218 : [ `der ]) ->
                      match x1218 with | `der -> Ojs.string_to_js "der")
                   x1216)|])
    let (generateKeyPairSync :
      type_:[ `dsa ] ->
        options:crypto_DSAKeyPairKeyObjectOptions ->
          crypto_KeyPairKeyObjectResult)
      =
      fun ~type_:(x1221 : [ `dsa ]) ->
        fun ~options:(x1222 : crypto_DSAKeyPairKeyObjectOptions) ->
          crypto_KeyPairKeyObjectResult_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1221 with | `dsa -> Ojs.string_to_js "dsa"));(
                 crypto_DSAKeyPairKeyObjectOptions_to_js x1222)|])
    let (generateKeyPairSync :
      type_:[ `ec ] ->
        options:([ `pem ], [ `pem ]) crypto_ECKeyPairOptions ->
          (string, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1223 : [ `ec ]) ->
        fun ~options:(x1224 : ([ `pem ], [ `pem ]) crypto_ECKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1223 with | `ec -> Ojs.string_to_js "ec"));(
                 crypto_ECKeyPairOptions_to_js
                   (fun (x1225 : [ `pem ]) ->
                      match x1225 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1226 : [ `pem ]) ->
                      match x1226 with | `pem -> Ojs.string_to_js "pem")
                   x1224)|])
    let (generateKeyPairSync :
      type_:[ `ec ] ->
        options:([ `pem ], [ `der ]) crypto_ECKeyPairOptions ->
          (string, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1229 : [ `ec ]) ->
        fun ~options:(x1230 : ([ `pem ], [ `der ]) crypto_ECKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1229 with | `ec -> Ojs.string_to_js "ec"));(
                 crypto_ECKeyPairOptions_to_js
                   (fun (x1231 : [ `pem ]) ->
                      match x1231 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1232 : [ `der ]) ->
                      match x1232 with | `der -> Ojs.string_to_js "der")
                   x1230)|])
    let (generateKeyPairSync :
      type_:[ `ec ] ->
        options:([ `der ], [ `pem ]) crypto_ECKeyPairOptions ->
          (Buffer.t, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1235 : [ `ec ]) ->
        fun ~options:(x1236 : ([ `der ], [ `pem ]) crypto_ECKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1235 with | `ec -> Ojs.string_to_js "ec"));(
                 crypto_ECKeyPairOptions_to_js
                   (fun (x1237 : [ `der ]) ->
                      match x1237 with | `der -> Ojs.string_to_js "der")
                   (fun (x1238 : [ `pem ]) ->
                      match x1238 with | `pem -> Ojs.string_to_js "pem")
                   x1236)|])
    let (generateKeyPairSync :
      type_:[ `ec ] ->
        options:([ `der ], [ `der ]) crypto_ECKeyPairOptions ->
          (Buffer.t, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1241 : [ `ec ]) ->
        fun ~options:(x1242 : ([ `der ], [ `der ]) crypto_ECKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1241 with | `ec -> Ojs.string_to_js "ec"));(
                 crypto_ECKeyPairOptions_to_js
                   (fun (x1243 : [ `der ]) ->
                      match x1243 with | `der -> Ojs.string_to_js "der")
                   (fun (x1244 : [ `der ]) ->
                      match x1244 with | `der -> Ojs.string_to_js "der")
                   x1242)|])
    let (generateKeyPairSync :
      type_:[ `ec ] ->
        options:crypto_ECKeyPairKeyObjectOptions ->
          crypto_KeyPairKeyObjectResult)
      =
      fun ~type_:(x1247 : [ `ec ]) ->
        fun ~options:(x1248 : crypto_ECKeyPairKeyObjectOptions) ->
          crypto_KeyPairKeyObjectResult_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1247 with | `ec -> Ojs.string_to_js "ec"));(
                 crypto_ECKeyPairKeyObjectOptions_to_js x1248)|])
    let (generateKeyPairSync :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `pem ]) crypto_ED25519KeyPairOptions ->
          (string, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1249 : [ `ed25519 ]) ->
        fun
          ~options:(x1250 :
                     ([ `pem ], [ `pem ]) crypto_ED25519KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1249 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 crypto_ED25519KeyPairOptions_to_js
                   (fun (x1251 : [ `pem ]) ->
                      match x1251 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1252 : [ `pem ]) ->
                      match x1252 with | `pem -> Ojs.string_to_js "pem")
                   x1250)|])
    let (generateKeyPairSync :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `der ]) crypto_ED25519KeyPairOptions ->
          (string, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1255 : [ `ed25519 ]) ->
        fun
          ~options:(x1256 :
                     ([ `pem ], [ `der ]) crypto_ED25519KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1255 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 crypto_ED25519KeyPairOptions_to_js
                   (fun (x1257 : [ `pem ]) ->
                      match x1257 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1258 : [ `der ]) ->
                      match x1258 with | `der -> Ojs.string_to_js "der")
                   x1256)|])
    let (generateKeyPairSync :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `pem ]) crypto_ED25519KeyPairOptions ->
          (Buffer.t, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1261 : [ `ed25519 ]) ->
        fun
          ~options:(x1262 :
                     ([ `der ], [ `pem ]) crypto_ED25519KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1261 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 crypto_ED25519KeyPairOptions_to_js
                   (fun (x1263 : [ `der ]) ->
                      match x1263 with | `der -> Ojs.string_to_js "der")
                   (fun (x1264 : [ `pem ]) ->
                      match x1264 with | `pem -> Ojs.string_to_js "pem")
                   x1262)|])
    let (generateKeyPairSync :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `der ]) crypto_ED25519KeyPairOptions ->
          (Buffer.t, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1267 : [ `ed25519 ]) ->
        fun
          ~options:(x1268 :
                     ([ `der ], [ `der ]) crypto_ED25519KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1267 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 crypto_ED25519KeyPairOptions_to_js
                   (fun (x1269 : [ `der ]) ->
                      match x1269 with | `der -> Ojs.string_to_js "der")
                   (fun (x1270 : [ `der ]) ->
                      match x1270 with | `der -> Ojs.string_to_js "der")
                   x1268)|])
    let (generateKeyPairSync :
      type_:[ `ed25519 ] ->
        ?options:crypto_ED25519KeyPairKeyObjectOptions ->
          unit -> crypto_KeyPairKeyObjectResult)
      =
      fun ~type_:(x1273 : [ `ed25519 ]) ->
        fun ?options:(x1274 : crypto_ED25519KeyPairKeyObjectOptions option)
          ->
          fun () ->
            crypto_KeyPairKeyObjectResult_of_js
              (let x1277 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1277 "generateKeyPairSync")
                 "apply"
                 [|x1277;((let x1275 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1275 "push"
                                [|((match x1273 with
                                    | `ed25519 -> Ojs.string_to_js "ed25519"))|]);
                           (match x1274 with
                            | Some x1276 ->
                                ignore
                                  (Ojs.call x1275 "push"
                                     [|(crypto_ED25519KeyPairKeyObjectOptions_to_js
                                          x1276)|])
                            | None -> ());
                           x1275))|])
    let (generateKeyPairSync :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `pem ]) crypto_ED448KeyPairOptions ->
          (string, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1278 : [ `ed448 ]) ->
        fun
          ~options:(x1279 : ([ `pem ], [ `pem ]) crypto_ED448KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1278 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 crypto_ED448KeyPairOptions_to_js
                   (fun (x1280 : [ `pem ]) ->
                      match x1280 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1281 : [ `pem ]) ->
                      match x1281 with | `pem -> Ojs.string_to_js "pem")
                   x1279)|])
    let (generateKeyPairSync :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `der ]) crypto_ED448KeyPairOptions ->
          (string, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1284 : [ `ed448 ]) ->
        fun
          ~options:(x1285 : ([ `pem ], [ `der ]) crypto_ED448KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1284 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 crypto_ED448KeyPairOptions_to_js
                   (fun (x1286 : [ `pem ]) ->
                      match x1286 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1287 : [ `der ]) ->
                      match x1287 with | `der -> Ojs.string_to_js "der")
                   x1285)|])
    let (generateKeyPairSync :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `pem ]) crypto_ED448KeyPairOptions ->
          (Buffer.t, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1290 : [ `ed448 ]) ->
        fun
          ~options:(x1291 : ([ `der ], [ `pem ]) crypto_ED448KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1290 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 crypto_ED448KeyPairOptions_to_js
                   (fun (x1292 : [ `der ]) ->
                      match x1292 with | `der -> Ojs.string_to_js "der")
                   (fun (x1293 : [ `pem ]) ->
                      match x1293 with | `pem -> Ojs.string_to_js "pem")
                   x1291)|])
    let (generateKeyPairSync :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `der ]) crypto_ED448KeyPairOptions ->
          (Buffer.t, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1296 : [ `ed448 ]) ->
        fun
          ~options:(x1297 : ([ `der ], [ `der ]) crypto_ED448KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1296 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 crypto_ED448KeyPairOptions_to_js
                   (fun (x1298 : [ `der ]) ->
                      match x1298 with | `der -> Ojs.string_to_js "der")
                   (fun (x1299 : [ `der ]) ->
                      match x1299 with | `der -> Ojs.string_to_js "der")
                   x1297)|])
    let (generateKeyPairSync :
      type_:[ `ed448 ] ->
        ?options:crypto_ED448KeyPairKeyObjectOptions ->
          unit -> crypto_KeyPairKeyObjectResult)
      =
      fun ~type_:(x1302 : [ `ed448 ]) ->
        fun ?options:(x1303 : crypto_ED448KeyPairKeyObjectOptions option) ->
          fun () ->
            crypto_KeyPairKeyObjectResult_of_js
              (let x1306 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1306 "generateKeyPairSync")
                 "apply"
                 [|x1306;((let x1304 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1304 "push"
                                [|((match x1302 with
                                    | `ed448 -> Ojs.string_to_js "ed448"))|]);
                           (match x1303 with
                            | Some x1305 ->
                                ignore
                                  (Ojs.call x1304 "push"
                                     [|(crypto_ED448KeyPairKeyObjectOptions_to_js
                                          x1305)|])
                            | None -> ());
                           x1304))|])
    let (generateKeyPairSync :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `pem ]) crypto_X25519KeyPairOptions ->
          (string, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1307 : [ `x25519 ]) ->
        fun
          ~options:(x1308 : ([ `pem ], [ `pem ]) crypto_X25519KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1307 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 crypto_X25519KeyPairOptions_to_js
                   (fun (x1309 : [ `pem ]) ->
                      match x1309 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1310 : [ `pem ]) ->
                      match x1310 with | `pem -> Ojs.string_to_js "pem")
                   x1308)|])
    let (generateKeyPairSync :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `der ]) crypto_X25519KeyPairOptions ->
          (string, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1313 : [ `x25519 ]) ->
        fun
          ~options:(x1314 : ([ `pem ], [ `der ]) crypto_X25519KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1313 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 crypto_X25519KeyPairOptions_to_js
                   (fun (x1315 : [ `pem ]) ->
                      match x1315 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1316 : [ `der ]) ->
                      match x1316 with | `der -> Ojs.string_to_js "der")
                   x1314)|])
    let (generateKeyPairSync :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `pem ]) crypto_X25519KeyPairOptions ->
          (Buffer.t, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1319 : [ `x25519 ]) ->
        fun
          ~options:(x1320 : ([ `der ], [ `pem ]) crypto_X25519KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1319 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 crypto_X25519KeyPairOptions_to_js
                   (fun (x1321 : [ `der ]) ->
                      match x1321 with | `der -> Ojs.string_to_js "der")
                   (fun (x1322 : [ `pem ]) ->
                      match x1322 with | `pem -> Ojs.string_to_js "pem")
                   x1320)|])
    let (generateKeyPairSync :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `der ]) crypto_X25519KeyPairOptions ->
          (Buffer.t, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1325 : [ `x25519 ]) ->
        fun
          ~options:(x1326 : ([ `der ], [ `der ]) crypto_X25519KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1325 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 crypto_X25519KeyPairOptions_to_js
                   (fun (x1327 : [ `der ]) ->
                      match x1327 with | `der -> Ojs.string_to_js "der")
                   (fun (x1328 : [ `der ]) ->
                      match x1328 with | `der -> Ojs.string_to_js "der")
                   x1326)|])
    let (generateKeyPairSync :
      type_:[ `x25519 ] ->
        ?options:crypto_X25519KeyPairKeyObjectOptions ->
          unit -> crypto_KeyPairKeyObjectResult)
      =
      fun ~type_:(x1331 : [ `x25519 ]) ->
        fun ?options:(x1332 : crypto_X25519KeyPairKeyObjectOptions option) ->
          fun () ->
            crypto_KeyPairKeyObjectResult_of_js
              (let x1335 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1335 "generateKeyPairSync")
                 "apply"
                 [|x1335;((let x1333 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1333 "push"
                                [|((match x1331 with
                                    | `x25519 -> Ojs.string_to_js "x25519"))|]);
                           (match x1332 with
                            | Some x1334 ->
                                ignore
                                  (Ojs.call x1333 "push"
                                     [|(crypto_X25519KeyPairKeyObjectOptions_to_js
                                          x1334)|])
                            | None -> ());
                           x1333))|])
    let (generateKeyPairSync :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `pem ]) crypto_X448KeyPairOptions ->
          (string, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1336 : [ `x448 ]) ->
        fun ~options:(x1337 : ([ `pem ], [ `pem ]) crypto_X448KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1336 with | `x448 -> Ojs.string_to_js "x448"));(
                 crypto_X448KeyPairOptions_to_js
                   (fun (x1338 : [ `pem ]) ->
                      match x1338 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1339 : [ `pem ]) ->
                      match x1339 with | `pem -> Ojs.string_to_js "pem")
                   x1337)|])
    let (generateKeyPairSync :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `der ]) crypto_X448KeyPairOptions ->
          (string, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1342 : [ `x448 ]) ->
        fun ~options:(x1343 : ([ `pem ], [ `der ]) crypto_X448KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1342 with | `x448 -> Ojs.string_to_js "x448"));(
                 crypto_X448KeyPairOptions_to_js
                   (fun (x1344 : [ `pem ]) ->
                      match x1344 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1345 : [ `der ]) ->
                      match x1345 with | `der -> Ojs.string_to_js "der")
                   x1343)|])
    let (generateKeyPairSync :
      type_:[ `x448 ] ->
        options:([ `der ], [ `pem ]) crypto_X448KeyPairOptions ->
          (Buffer.t, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1348 : [ `x448 ]) ->
        fun ~options:(x1349 : ([ `der ], [ `pem ]) crypto_X448KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1348 with | `x448 -> Ojs.string_to_js "x448"));(
                 crypto_X448KeyPairOptions_to_js
                   (fun (x1350 : [ `der ]) ->
                      match x1350 with | `der -> Ojs.string_to_js "der")
                   (fun (x1351 : [ `pem ]) ->
                      match x1351 with | `pem -> Ojs.string_to_js "pem")
                   x1349)|])
    let (generateKeyPairSync :
      type_:[ `x448 ] ->
        options:([ `der ], [ `der ]) crypto_X448KeyPairOptions ->
          (Buffer.t, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1354 : [ `x448 ]) ->
        fun ~options:(x1355 : ([ `der ], [ `der ]) crypto_X448KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1354 with | `x448 -> Ojs.string_to_js "x448"));(
                 crypto_X448KeyPairOptions_to_js
                   (fun (x1356 : [ `der ]) ->
                      match x1356 with | `der -> Ojs.string_to_js "der")
                   (fun (x1357 : [ `der ]) ->
                      match x1357 with | `der -> Ojs.string_to_js "der")
                   x1355)|])
    let (generateKeyPairSync :
      type_:[ `x448 ] ->
        ?options:crypto_X448KeyPairKeyObjectOptions ->
          unit -> crypto_KeyPairKeyObjectResult)
      =
      fun ~type_:(x1360 : [ `x448 ]) ->
        fun ?options:(x1361 : crypto_X448KeyPairKeyObjectOptions option) ->
          fun () ->
            crypto_KeyPairKeyObjectResult_of_js
              (let x1364 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1364 "generateKeyPairSync")
                 "apply"
                 [|x1364;((let x1362 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1362 "push"
                                [|((match x1360 with
                                    | `x448 -> Ojs.string_to_js "x448"))|]);
                           (match x1361 with
                            | Some x1363 ->
                                ignore
                                  (Ojs.call x1362 "push"
                                     [|(crypto_X448KeyPairKeyObjectOptions_to_js
                                          x1363)|])
                            | None -> ());
                           x1362))|])
    let (generateKeyPair :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `pem ]) crypto_RSAKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1365 : [ `rsa ]) ->
        fun ~options:(x1366 : ([ `pem ], [ `pem ]) crypto_RSAKeyPairOptions)
          ->
          fun
            ~callback:(x1369 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1365 with | `rsa -> Ojs.string_to_js "rsa"));(
                   crypto_RSAKeyPairOptions_to_js
                     (fun (x1367 : [ `pem ]) ->
                        match x1367 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1368 : [ `pem ]) ->
                        match x1368 with | `pem -> Ojs.string_to_js "pem")
                     x1366);(Ojs.fun_to_js 3
                               (fun (x1370 : Ojs.t) ->
                                  fun (x1372 : Ojs.t) ->
                                    fun (x1373 : Ojs.t) ->
                                      x1369
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1370)
                                        ~publicKey:(Ojs.string_of_js x1372)
                                        ~privateKey:(Ojs.string_of_js x1373)))|])
    let (generateKeyPair :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `der ]) crypto_RSAKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1374 : [ `rsa ]) ->
        fun ~options:(x1375 : ([ `pem ], [ `der ]) crypto_RSAKeyPairOptions)
          ->
          fun
            ~callback:(x1378 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1374 with | `rsa -> Ojs.string_to_js "rsa"));(
                   crypto_RSAKeyPairOptions_to_js
                     (fun (x1376 : [ `pem ]) ->
                        match x1376 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1377 : [ `der ]) ->
                        match x1377 with | `der -> Ojs.string_to_js "der")
                     x1375);(Ojs.fun_to_js 3
                               (fun (x1379 : Ojs.t) ->
                                  fun (x1381 : Ojs.t) ->
                                    fun (x1382 : Ojs.t) ->
                                      x1378
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1379)
                                        ~publicKey:(Ojs.string_of_js x1381)
                                        ~privateKey:(Buffer.t_of_js x1382)))|])
    let (generateKeyPair :
      type_:[ `rsa ] ->
        options:([ `der ], [ `pem ]) crypto_RSAKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1383 : [ `rsa ]) ->
        fun ~options:(x1384 : ([ `der ], [ `pem ]) crypto_RSAKeyPairOptions)
          ->
          fun
            ~callback:(x1387 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1383 with | `rsa -> Ojs.string_to_js "rsa"));(
                   crypto_RSAKeyPairOptions_to_js
                     (fun (x1385 : [ `der ]) ->
                        match x1385 with | `der -> Ojs.string_to_js "der")
                     (fun (x1386 : [ `pem ]) ->
                        match x1386 with | `pem -> Ojs.string_to_js "pem")
                     x1384);(Ojs.fun_to_js 3
                               (fun (x1388 : Ojs.t) ->
                                  fun (x1390 : Ojs.t) ->
                                    fun (x1391 : Ojs.t) ->
                                      x1387
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1388)
                                        ~publicKey:(Buffer.t_of_js x1390)
                                        ~privateKey:(Ojs.string_of_js x1391)))|])
    let (generateKeyPair :
      type_:[ `rsa ] ->
        options:([ `der ], [ `der ]) crypto_RSAKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1392 : [ `rsa ]) ->
        fun ~options:(x1393 : ([ `der ], [ `der ]) crypto_RSAKeyPairOptions)
          ->
          fun
            ~callback:(x1396 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1392 with | `rsa -> Ojs.string_to_js "rsa"));(
                   crypto_RSAKeyPairOptions_to_js
                     (fun (x1394 : [ `der ]) ->
                        match x1394 with | `der -> Ojs.string_to_js "der")
                     (fun (x1395 : [ `der ]) ->
                        match x1395 with | `der -> Ojs.string_to_js "der")
                     x1393);(Ojs.fun_to_js 3
                               (fun (x1397 : Ojs.t) ->
                                  fun (x1399 : Ojs.t) ->
                                    fun (x1400 : Ojs.t) ->
                                      x1396
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1397)
                                        ~publicKey:(Buffer.t_of_js x1399)
                                        ~privateKey:(Buffer.t_of_js x1400)))|])
    let (generateKeyPair :
      type_:[ `rsa ] ->
        options:crypto_RSAKeyPairKeyObjectOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:crypto_KeyObject ->
                        privateKey:crypto_KeyObject -> unit)
            -> unit)
      =
      fun ~type_:(x1401 : [ `rsa ]) ->
        fun ~options:(x1402 : crypto_RSAKeyPairKeyObjectOptions) ->
          fun
            ~callback:(x1403 :
                        err:Error.t or_null ->
                          publicKey:crypto_KeyObject ->
                            privateKey:crypto_KeyObject -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1401 with | `rsa -> Ojs.string_to_js "rsa"));(
                   crypto_RSAKeyPairKeyObjectOptions_to_js x1402);(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1404 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1406 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1407 :
                                                                    Ojs.t) ->
                                                                    x1403
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x1404)
                                                                    ~publicKey:(
                                                                    crypto_KeyObject_of_js
                                                                    x1406)
                                                                    ~privateKey:(
                                                                    crypto_KeyObject_of_js
                                                                    x1407)))|])
    let (generateKeyPair :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `pem ]) crypto_DSAKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1408 : [ `dsa ]) ->
        fun ~options:(x1409 : ([ `pem ], [ `pem ]) crypto_DSAKeyPairOptions)
          ->
          fun
            ~callback:(x1412 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1408 with | `dsa -> Ojs.string_to_js "dsa"));(
                   crypto_DSAKeyPairOptions_to_js
                     (fun (x1410 : [ `pem ]) ->
                        match x1410 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1411 : [ `pem ]) ->
                        match x1411 with | `pem -> Ojs.string_to_js "pem")
                     x1409);(Ojs.fun_to_js 3
                               (fun (x1413 : Ojs.t) ->
                                  fun (x1415 : Ojs.t) ->
                                    fun (x1416 : Ojs.t) ->
                                      x1412
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1413)
                                        ~publicKey:(Ojs.string_of_js x1415)
                                        ~privateKey:(Ojs.string_of_js x1416)))|])
    let (generateKeyPair :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `der ]) crypto_DSAKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1417 : [ `dsa ]) ->
        fun ~options:(x1418 : ([ `pem ], [ `der ]) crypto_DSAKeyPairOptions)
          ->
          fun
            ~callback:(x1421 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1417 with | `dsa -> Ojs.string_to_js "dsa"));(
                   crypto_DSAKeyPairOptions_to_js
                     (fun (x1419 : [ `pem ]) ->
                        match x1419 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1420 : [ `der ]) ->
                        match x1420 with | `der -> Ojs.string_to_js "der")
                     x1418);(Ojs.fun_to_js 3
                               (fun (x1422 : Ojs.t) ->
                                  fun (x1424 : Ojs.t) ->
                                    fun (x1425 : Ojs.t) ->
                                      x1421
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1422)
                                        ~publicKey:(Ojs.string_of_js x1424)
                                        ~privateKey:(Buffer.t_of_js x1425)))|])
    let (generateKeyPair :
      type_:[ `dsa ] ->
        options:([ `der ], [ `pem ]) crypto_DSAKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1426 : [ `dsa ]) ->
        fun ~options:(x1427 : ([ `der ], [ `pem ]) crypto_DSAKeyPairOptions)
          ->
          fun
            ~callback:(x1430 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1426 with | `dsa -> Ojs.string_to_js "dsa"));(
                   crypto_DSAKeyPairOptions_to_js
                     (fun (x1428 : [ `der ]) ->
                        match x1428 with | `der -> Ojs.string_to_js "der")
                     (fun (x1429 : [ `pem ]) ->
                        match x1429 with | `pem -> Ojs.string_to_js "pem")
                     x1427);(Ojs.fun_to_js 3
                               (fun (x1431 : Ojs.t) ->
                                  fun (x1433 : Ojs.t) ->
                                    fun (x1434 : Ojs.t) ->
                                      x1430
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1431)
                                        ~publicKey:(Buffer.t_of_js x1433)
                                        ~privateKey:(Ojs.string_of_js x1434)))|])
    let (generateKeyPair :
      type_:[ `dsa ] ->
        options:([ `der ], [ `der ]) crypto_DSAKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1435 : [ `dsa ]) ->
        fun ~options:(x1436 : ([ `der ], [ `der ]) crypto_DSAKeyPairOptions)
          ->
          fun
            ~callback:(x1439 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1435 with | `dsa -> Ojs.string_to_js "dsa"));(
                   crypto_DSAKeyPairOptions_to_js
                     (fun (x1437 : [ `der ]) ->
                        match x1437 with | `der -> Ojs.string_to_js "der")
                     (fun (x1438 : [ `der ]) ->
                        match x1438 with | `der -> Ojs.string_to_js "der")
                     x1436);(Ojs.fun_to_js 3
                               (fun (x1440 : Ojs.t) ->
                                  fun (x1442 : Ojs.t) ->
                                    fun (x1443 : Ojs.t) ->
                                      x1439
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1440)
                                        ~publicKey:(Buffer.t_of_js x1442)
                                        ~privateKey:(Buffer.t_of_js x1443)))|])
    let (generateKeyPair :
      type_:[ `dsa ] ->
        options:crypto_DSAKeyPairKeyObjectOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:crypto_KeyObject ->
                        privateKey:crypto_KeyObject -> unit)
            -> unit)
      =
      fun ~type_:(x1444 : [ `dsa ]) ->
        fun ~options:(x1445 : crypto_DSAKeyPairKeyObjectOptions) ->
          fun
            ~callback:(x1446 :
                        err:Error.t or_null ->
                          publicKey:crypto_KeyObject ->
                            privateKey:crypto_KeyObject -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1444 with | `dsa -> Ojs.string_to_js "dsa"));(
                   crypto_DSAKeyPairKeyObjectOptions_to_js x1445);(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1447 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1449 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1450 :
                                                                    Ojs.t) ->
                                                                    x1446
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x1447)
                                                                    ~publicKey:(
                                                                    crypto_KeyObject_of_js
                                                                    x1449)
                                                                    ~privateKey:(
                                                                    crypto_KeyObject_of_js
                                                                    x1450)))|])
    let (generateKeyPair :
      type_:[ `ec ] ->
        options:([ `pem ], [ `pem ]) crypto_ECKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1451 : [ `ec ]) ->
        fun ~options:(x1452 : ([ `pem ], [ `pem ]) crypto_ECKeyPairOptions)
          ->
          fun
            ~callback:(x1455 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1451 with | `ec -> Ojs.string_to_js "ec"));(
                   crypto_ECKeyPairOptions_to_js
                     (fun (x1453 : [ `pem ]) ->
                        match x1453 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1454 : [ `pem ]) ->
                        match x1454 with | `pem -> Ojs.string_to_js "pem")
                     x1452);(Ojs.fun_to_js 3
                               (fun (x1456 : Ojs.t) ->
                                  fun (x1458 : Ojs.t) ->
                                    fun (x1459 : Ojs.t) ->
                                      x1455
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1456)
                                        ~publicKey:(Ojs.string_of_js x1458)
                                        ~privateKey:(Ojs.string_of_js x1459)))|])
    let (generateKeyPair :
      type_:[ `ec ] ->
        options:([ `pem ], [ `der ]) crypto_ECKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1460 : [ `ec ]) ->
        fun ~options:(x1461 : ([ `pem ], [ `der ]) crypto_ECKeyPairOptions)
          ->
          fun
            ~callback:(x1464 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1460 with | `ec -> Ojs.string_to_js "ec"));(
                   crypto_ECKeyPairOptions_to_js
                     (fun (x1462 : [ `pem ]) ->
                        match x1462 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1463 : [ `der ]) ->
                        match x1463 with | `der -> Ojs.string_to_js "der")
                     x1461);(Ojs.fun_to_js 3
                               (fun (x1465 : Ojs.t) ->
                                  fun (x1467 : Ojs.t) ->
                                    fun (x1468 : Ojs.t) ->
                                      x1464
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1465)
                                        ~publicKey:(Ojs.string_of_js x1467)
                                        ~privateKey:(Buffer.t_of_js x1468)))|])
    let (generateKeyPair :
      type_:[ `ec ] ->
        options:([ `der ], [ `pem ]) crypto_ECKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1469 : [ `ec ]) ->
        fun ~options:(x1470 : ([ `der ], [ `pem ]) crypto_ECKeyPairOptions)
          ->
          fun
            ~callback:(x1473 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1469 with | `ec -> Ojs.string_to_js "ec"));(
                   crypto_ECKeyPairOptions_to_js
                     (fun (x1471 : [ `der ]) ->
                        match x1471 with | `der -> Ojs.string_to_js "der")
                     (fun (x1472 : [ `pem ]) ->
                        match x1472 with | `pem -> Ojs.string_to_js "pem")
                     x1470);(Ojs.fun_to_js 3
                               (fun (x1474 : Ojs.t) ->
                                  fun (x1476 : Ojs.t) ->
                                    fun (x1477 : Ojs.t) ->
                                      x1473
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1474)
                                        ~publicKey:(Buffer.t_of_js x1476)
                                        ~privateKey:(Ojs.string_of_js x1477)))|])
    let (generateKeyPair :
      type_:[ `ec ] ->
        options:([ `der ], [ `der ]) crypto_ECKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1478 : [ `ec ]) ->
        fun ~options:(x1479 : ([ `der ], [ `der ]) crypto_ECKeyPairOptions)
          ->
          fun
            ~callback:(x1482 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1478 with | `ec -> Ojs.string_to_js "ec"));(
                   crypto_ECKeyPairOptions_to_js
                     (fun (x1480 : [ `der ]) ->
                        match x1480 with | `der -> Ojs.string_to_js "der")
                     (fun (x1481 : [ `der ]) ->
                        match x1481 with | `der -> Ojs.string_to_js "der")
                     x1479);(Ojs.fun_to_js 3
                               (fun (x1483 : Ojs.t) ->
                                  fun (x1485 : Ojs.t) ->
                                    fun (x1486 : Ojs.t) ->
                                      x1482
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1483)
                                        ~publicKey:(Buffer.t_of_js x1485)
                                        ~privateKey:(Buffer.t_of_js x1486)))|])
    let (generateKeyPair :
      type_:[ `ec ] ->
        options:crypto_ECKeyPairKeyObjectOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:crypto_KeyObject ->
                        privateKey:crypto_KeyObject -> unit)
            -> unit)
      =
      fun ~type_:(x1487 : [ `ec ]) ->
        fun ~options:(x1488 : crypto_ECKeyPairKeyObjectOptions) ->
          fun
            ~callback:(x1489 :
                        err:Error.t or_null ->
                          publicKey:crypto_KeyObject ->
                            privateKey:crypto_KeyObject -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1487 with | `ec -> Ojs.string_to_js "ec"));(
                   crypto_ECKeyPairKeyObjectOptions_to_js x1488);(Ojs.fun_to_js
                                                                    3
                                                                    (
                                                                    fun
                                                                    (x1490 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1492 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1493 :
                                                                    Ojs.t) ->
                                                                    x1489
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x1490)
                                                                    ~publicKey:(
                                                                    crypto_KeyObject_of_js
                                                                    x1492)
                                                                    ~privateKey:(
                                                                    crypto_KeyObject_of_js
                                                                    x1493)))|])
    let (generateKeyPair :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `pem ]) crypto_ED25519KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1494 : [ `ed25519 ]) ->
        fun
          ~options:(x1495 :
                     ([ `pem ], [ `pem ]) crypto_ED25519KeyPairOptions)
          ->
          fun
            ~callback:(x1498 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1494 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(crypto_ED25519KeyPairOptions_to_js
                                                                   (fun
                                                                    (x1496 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1496
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1497 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1497
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1495);(
                   Ojs.fun_to_js 3
                     (fun (x1499 : Ojs.t) ->
                        fun (x1501 : Ojs.t) ->
                          fun (x1502 : Ojs.t) ->
                            x1498 ~err:(or_null_of_js Error.t_of_js x1499)
                              ~publicKey:(Ojs.string_of_js x1501)
                              ~privateKey:(Ojs.string_of_js x1502)))|])
    let (generateKeyPair :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `der ]) crypto_ED25519KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1503 : [ `ed25519 ]) ->
        fun
          ~options:(x1504 :
                     ([ `pem ], [ `der ]) crypto_ED25519KeyPairOptions)
          ->
          fun
            ~callback:(x1507 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1503 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(crypto_ED25519KeyPairOptions_to_js
                                                                   (fun
                                                                    (x1505 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1505
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1506 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1506
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1504);(
                   Ojs.fun_to_js 3
                     (fun (x1508 : Ojs.t) ->
                        fun (x1510 : Ojs.t) ->
                          fun (x1511 : Ojs.t) ->
                            x1507 ~err:(or_null_of_js Error.t_of_js x1508)
                              ~publicKey:(Ojs.string_of_js x1510)
                              ~privateKey:(Buffer.t_of_js x1511)))|])
    let (generateKeyPair :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `pem ]) crypto_ED25519KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1512 : [ `ed25519 ]) ->
        fun
          ~options:(x1513 :
                     ([ `der ], [ `pem ]) crypto_ED25519KeyPairOptions)
          ->
          fun
            ~callback:(x1516 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1512 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(crypto_ED25519KeyPairOptions_to_js
                                                                   (fun
                                                                    (x1514 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1514
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1515 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1515
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1513);(
                   Ojs.fun_to_js 3
                     (fun (x1517 : Ojs.t) ->
                        fun (x1519 : Ojs.t) ->
                          fun (x1520 : Ojs.t) ->
                            x1516 ~err:(or_null_of_js Error.t_of_js x1517)
                              ~publicKey:(Buffer.t_of_js x1519)
                              ~privateKey:(Ojs.string_of_js x1520)))|])
    let (generateKeyPair :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `der ]) crypto_ED25519KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1521 : [ `ed25519 ]) ->
        fun
          ~options:(x1522 :
                     ([ `der ], [ `der ]) crypto_ED25519KeyPairOptions)
          ->
          fun
            ~callback:(x1525 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1521 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(crypto_ED25519KeyPairOptions_to_js
                                                                   (fun
                                                                    (x1523 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1523
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1524 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1524
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1522);(
                   Ojs.fun_to_js 3
                     (fun (x1526 : Ojs.t) ->
                        fun (x1528 : Ojs.t) ->
                          fun (x1529 : Ojs.t) ->
                            x1525 ~err:(or_null_of_js Error.t_of_js x1526)
                              ~publicKey:(Buffer.t_of_js x1528)
                              ~privateKey:(Buffer.t_of_js x1529)))|])
    let (generateKeyPair :
      type_:[ `ed25519 ] ->
        options:crypto_ED25519KeyPairKeyObjectOptions or_undefined ->
          callback:(err:Error.t or_null ->
                      publicKey:crypto_KeyObject ->
                        privateKey:crypto_KeyObject -> unit)
            -> unit)
      =
      fun ~type_:(x1530 : [ `ed25519 ]) ->
        fun
          ~options:(x1531 :
                     crypto_ED25519KeyPairKeyObjectOptions or_undefined)
          ->
          fun
            ~callback:(x1533 :
                        err:Error.t or_null ->
                          publicKey:crypto_KeyObject ->
                            privateKey:crypto_KeyObject -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1530 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(or_undefined_to_js
                                                                   crypto_ED25519KeyPairKeyObjectOptions_to_js
                                                                   x1531);(
                   Ojs.fun_to_js 3
                     (fun (x1534 : Ojs.t) ->
                        fun (x1536 : Ojs.t) ->
                          fun (x1537 : Ojs.t) ->
                            x1533 ~err:(or_null_of_js Error.t_of_js x1534)
                              ~publicKey:(crypto_KeyObject_of_js x1536)
                              ~privateKey:(crypto_KeyObject_of_js x1537)))|])
    let (generateKeyPair :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `pem ]) crypto_ED448KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1538 : [ `ed448 ]) ->
        fun
          ~options:(x1539 : ([ `pem ], [ `pem ]) crypto_ED448KeyPairOptions)
          ->
          fun
            ~callback:(x1542 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1538 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   crypto_ED448KeyPairOptions_to_js
                     (fun (x1540 : [ `pem ]) ->
                        match x1540 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1541 : [ `pem ]) ->
                        match x1541 with | `pem -> Ojs.string_to_js "pem")
                     x1539);(Ojs.fun_to_js 3
                               (fun (x1543 : Ojs.t) ->
                                  fun (x1545 : Ojs.t) ->
                                    fun (x1546 : Ojs.t) ->
                                      x1542
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1543)
                                        ~publicKey:(Ojs.string_of_js x1545)
                                        ~privateKey:(Ojs.string_of_js x1546)))|])
    let (generateKeyPair :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `der ]) crypto_ED448KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1547 : [ `ed448 ]) ->
        fun
          ~options:(x1548 : ([ `pem ], [ `der ]) crypto_ED448KeyPairOptions)
          ->
          fun
            ~callback:(x1551 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1547 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   crypto_ED448KeyPairOptions_to_js
                     (fun (x1549 : [ `pem ]) ->
                        match x1549 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1550 : [ `der ]) ->
                        match x1550 with | `der -> Ojs.string_to_js "der")
                     x1548);(Ojs.fun_to_js 3
                               (fun (x1552 : Ojs.t) ->
                                  fun (x1554 : Ojs.t) ->
                                    fun (x1555 : Ojs.t) ->
                                      x1551
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1552)
                                        ~publicKey:(Ojs.string_of_js x1554)
                                        ~privateKey:(Buffer.t_of_js x1555)))|])
    let (generateKeyPair :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `pem ]) crypto_ED448KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1556 : [ `ed448 ]) ->
        fun
          ~options:(x1557 : ([ `der ], [ `pem ]) crypto_ED448KeyPairOptions)
          ->
          fun
            ~callback:(x1560 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1556 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   crypto_ED448KeyPairOptions_to_js
                     (fun (x1558 : [ `der ]) ->
                        match x1558 with | `der -> Ojs.string_to_js "der")
                     (fun (x1559 : [ `pem ]) ->
                        match x1559 with | `pem -> Ojs.string_to_js "pem")
                     x1557);(Ojs.fun_to_js 3
                               (fun (x1561 : Ojs.t) ->
                                  fun (x1563 : Ojs.t) ->
                                    fun (x1564 : Ojs.t) ->
                                      x1560
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1561)
                                        ~publicKey:(Buffer.t_of_js x1563)
                                        ~privateKey:(Ojs.string_of_js x1564)))|])
    let (generateKeyPair :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `der ]) crypto_ED448KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1565 : [ `ed448 ]) ->
        fun
          ~options:(x1566 : ([ `der ], [ `der ]) crypto_ED448KeyPairOptions)
          ->
          fun
            ~callback:(x1569 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1565 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   crypto_ED448KeyPairOptions_to_js
                     (fun (x1567 : [ `der ]) ->
                        match x1567 with | `der -> Ojs.string_to_js "der")
                     (fun (x1568 : [ `der ]) ->
                        match x1568 with | `der -> Ojs.string_to_js "der")
                     x1566);(Ojs.fun_to_js 3
                               (fun (x1570 : Ojs.t) ->
                                  fun (x1572 : Ojs.t) ->
                                    fun (x1573 : Ojs.t) ->
                                      x1569
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1570)
                                        ~publicKey:(Buffer.t_of_js x1572)
                                        ~privateKey:(Buffer.t_of_js x1573)))|])
    let (generateKeyPair :
      type_:[ `ed448 ] ->
        options:crypto_ED448KeyPairKeyObjectOptions or_undefined ->
          callback:(err:Error.t or_null ->
                      publicKey:crypto_KeyObject ->
                        privateKey:crypto_KeyObject -> unit)
            -> unit)
      =
      fun ~type_:(x1574 : [ `ed448 ]) ->
        fun
          ~options:(x1575 : crypto_ED448KeyPairKeyObjectOptions or_undefined)
          ->
          fun
            ~callback:(x1577 :
                        err:Error.t or_null ->
                          publicKey:crypto_KeyObject ->
                            privateKey:crypto_KeyObject -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1574 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   or_undefined_to_js
                     crypto_ED448KeyPairKeyObjectOptions_to_js x1575);(
                   Ojs.fun_to_js 3
                     (fun (x1578 : Ojs.t) ->
                        fun (x1580 : Ojs.t) ->
                          fun (x1581 : Ojs.t) ->
                            x1577 ~err:(or_null_of_js Error.t_of_js x1578)
                              ~publicKey:(crypto_KeyObject_of_js x1580)
                              ~privateKey:(crypto_KeyObject_of_js x1581)))|])
    let (generateKeyPair :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `pem ]) crypto_X25519KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1582 : [ `x25519 ]) ->
        fun
          ~options:(x1583 : ([ `pem ], [ `pem ]) crypto_X25519KeyPairOptions)
          ->
          fun
            ~callback:(x1586 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1582 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   crypto_X25519KeyPairOptions_to_js
                     (fun (x1584 : [ `pem ]) ->
                        match x1584 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1585 : [ `pem ]) ->
                        match x1585 with | `pem -> Ojs.string_to_js "pem")
                     x1583);(Ojs.fun_to_js 3
                               (fun (x1587 : Ojs.t) ->
                                  fun (x1589 : Ojs.t) ->
                                    fun (x1590 : Ojs.t) ->
                                      x1586
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1587)
                                        ~publicKey:(Ojs.string_of_js x1589)
                                        ~privateKey:(Ojs.string_of_js x1590)))|])
    let (generateKeyPair :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `der ]) crypto_X25519KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1591 : [ `x25519 ]) ->
        fun
          ~options:(x1592 : ([ `pem ], [ `der ]) crypto_X25519KeyPairOptions)
          ->
          fun
            ~callback:(x1595 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1591 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   crypto_X25519KeyPairOptions_to_js
                     (fun (x1593 : [ `pem ]) ->
                        match x1593 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1594 : [ `der ]) ->
                        match x1594 with | `der -> Ojs.string_to_js "der")
                     x1592);(Ojs.fun_to_js 3
                               (fun (x1596 : Ojs.t) ->
                                  fun (x1598 : Ojs.t) ->
                                    fun (x1599 : Ojs.t) ->
                                      x1595
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1596)
                                        ~publicKey:(Ojs.string_of_js x1598)
                                        ~privateKey:(Buffer.t_of_js x1599)))|])
    let (generateKeyPair :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `pem ]) crypto_X25519KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1600 : [ `x25519 ]) ->
        fun
          ~options:(x1601 : ([ `der ], [ `pem ]) crypto_X25519KeyPairOptions)
          ->
          fun
            ~callback:(x1604 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1600 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   crypto_X25519KeyPairOptions_to_js
                     (fun (x1602 : [ `der ]) ->
                        match x1602 with | `der -> Ojs.string_to_js "der")
                     (fun (x1603 : [ `pem ]) ->
                        match x1603 with | `pem -> Ojs.string_to_js "pem")
                     x1601);(Ojs.fun_to_js 3
                               (fun (x1605 : Ojs.t) ->
                                  fun (x1607 : Ojs.t) ->
                                    fun (x1608 : Ojs.t) ->
                                      x1604
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1605)
                                        ~publicKey:(Buffer.t_of_js x1607)
                                        ~privateKey:(Ojs.string_of_js x1608)))|])
    let (generateKeyPair :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `der ]) crypto_X25519KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1609 : [ `x25519 ]) ->
        fun
          ~options:(x1610 : ([ `der ], [ `der ]) crypto_X25519KeyPairOptions)
          ->
          fun
            ~callback:(x1613 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1609 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   crypto_X25519KeyPairOptions_to_js
                     (fun (x1611 : [ `der ]) ->
                        match x1611 with | `der -> Ojs.string_to_js "der")
                     (fun (x1612 : [ `der ]) ->
                        match x1612 with | `der -> Ojs.string_to_js "der")
                     x1610);(Ojs.fun_to_js 3
                               (fun (x1614 : Ojs.t) ->
                                  fun (x1616 : Ojs.t) ->
                                    fun (x1617 : Ojs.t) ->
                                      x1613
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1614)
                                        ~publicKey:(Buffer.t_of_js x1616)
                                        ~privateKey:(Buffer.t_of_js x1617)))|])
    let (generateKeyPair :
      type_:[ `x25519 ] ->
        options:crypto_X25519KeyPairKeyObjectOptions or_undefined ->
          callback:(err:Error.t or_null ->
                      publicKey:crypto_KeyObject ->
                        privateKey:crypto_KeyObject -> unit)
            -> unit)
      =
      fun ~type_:(x1618 : [ `x25519 ]) ->
        fun
          ~options:(x1619 :
                     crypto_X25519KeyPairKeyObjectOptions or_undefined)
          ->
          fun
            ~callback:(x1621 :
                        err:Error.t or_null ->
                          publicKey:crypto_KeyObject ->
                            privateKey:crypto_KeyObject -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1618 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   or_undefined_to_js
                     crypto_X25519KeyPairKeyObjectOptions_to_js x1619);(
                   Ojs.fun_to_js 3
                     (fun (x1622 : Ojs.t) ->
                        fun (x1624 : Ojs.t) ->
                          fun (x1625 : Ojs.t) ->
                            x1621 ~err:(or_null_of_js Error.t_of_js x1622)
                              ~publicKey:(crypto_KeyObject_of_js x1624)
                              ~privateKey:(crypto_KeyObject_of_js x1625)))|])
    let (generateKeyPair :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `pem ]) crypto_X448KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1626 : [ `x448 ]) ->
        fun ~options:(x1627 : ([ `pem ], [ `pem ]) crypto_X448KeyPairOptions)
          ->
          fun
            ~callback:(x1630 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1626 with | `x448 -> Ojs.string_to_js "x448"));(
                   crypto_X448KeyPairOptions_to_js
                     (fun (x1628 : [ `pem ]) ->
                        match x1628 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1629 : [ `pem ]) ->
                        match x1629 with | `pem -> Ojs.string_to_js "pem")
                     x1627);(Ojs.fun_to_js 3
                               (fun (x1631 : Ojs.t) ->
                                  fun (x1633 : Ojs.t) ->
                                    fun (x1634 : Ojs.t) ->
                                      x1630
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1631)
                                        ~publicKey:(Ojs.string_of_js x1633)
                                        ~privateKey:(Ojs.string_of_js x1634)))|])
    let (generateKeyPair :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `der ]) crypto_X448KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1635 : [ `x448 ]) ->
        fun ~options:(x1636 : ([ `pem ], [ `der ]) crypto_X448KeyPairOptions)
          ->
          fun
            ~callback:(x1639 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1635 with | `x448 -> Ojs.string_to_js "x448"));(
                   crypto_X448KeyPairOptions_to_js
                     (fun (x1637 : [ `pem ]) ->
                        match x1637 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1638 : [ `der ]) ->
                        match x1638 with | `der -> Ojs.string_to_js "der")
                     x1636);(Ojs.fun_to_js 3
                               (fun (x1640 : Ojs.t) ->
                                  fun (x1642 : Ojs.t) ->
                                    fun (x1643 : Ojs.t) ->
                                      x1639
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1640)
                                        ~publicKey:(Ojs.string_of_js x1642)
                                        ~privateKey:(Buffer.t_of_js x1643)))|])
    let (generateKeyPair :
      type_:[ `x448 ] ->
        options:([ `der ], [ `pem ]) crypto_X448KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1644 : [ `x448 ]) ->
        fun ~options:(x1645 : ([ `der ], [ `pem ]) crypto_X448KeyPairOptions)
          ->
          fun
            ~callback:(x1648 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1644 with | `x448 -> Ojs.string_to_js "x448"));(
                   crypto_X448KeyPairOptions_to_js
                     (fun (x1646 : [ `der ]) ->
                        match x1646 with | `der -> Ojs.string_to_js "der")
                     (fun (x1647 : [ `pem ]) ->
                        match x1647 with | `pem -> Ojs.string_to_js "pem")
                     x1645);(Ojs.fun_to_js 3
                               (fun (x1649 : Ojs.t) ->
                                  fun (x1651 : Ojs.t) ->
                                    fun (x1652 : Ojs.t) ->
                                      x1648
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1649)
                                        ~publicKey:(Buffer.t_of_js x1651)
                                        ~privateKey:(Ojs.string_of_js x1652)))|])
    let (generateKeyPair :
      type_:[ `x448 ] ->
        options:([ `der ], [ `der ]) crypto_X448KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1653 : [ `x448 ]) ->
        fun ~options:(x1654 : ([ `der ], [ `der ]) crypto_X448KeyPairOptions)
          ->
          fun
            ~callback:(x1657 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1653 with | `x448 -> Ojs.string_to_js "x448"));(
                   crypto_X448KeyPairOptions_to_js
                     (fun (x1655 : [ `der ]) ->
                        match x1655 with | `der -> Ojs.string_to_js "der")
                     (fun (x1656 : [ `der ]) ->
                        match x1656 with | `der -> Ojs.string_to_js "der")
                     x1654);(Ojs.fun_to_js 3
                               (fun (x1658 : Ojs.t) ->
                                  fun (x1660 : Ojs.t) ->
                                    fun (x1661 : Ojs.t) ->
                                      x1657
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1658)
                                        ~publicKey:(Buffer.t_of_js x1660)
                                        ~privateKey:(Buffer.t_of_js x1661)))|])
    let (generateKeyPair :
      type_:[ `x448 ] ->
        options:crypto_X448KeyPairKeyObjectOptions or_undefined ->
          callback:(err:Error.t or_null ->
                      publicKey:crypto_KeyObject ->
                        privateKey:crypto_KeyObject -> unit)
            -> unit)
      =
      fun ~type_:(x1662 : [ `x448 ]) ->
        fun
          ~options:(x1663 : crypto_X448KeyPairKeyObjectOptions or_undefined)
          ->
          fun
            ~callback:(x1665 :
                        err:Error.t or_null ->
                          publicKey:crypto_KeyObject ->
                            privateKey:crypto_KeyObject -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1662 with | `x448 -> Ojs.string_to_js "x448"));(
                   or_undefined_to_js
                     crypto_X448KeyPairKeyObjectOptions_to_js x1663);(
                   Ojs.fun_to_js 3
                     (fun (x1666 : Ojs.t) ->
                        fun (x1668 : Ojs.t) ->
                          fun (x1669 : Ojs.t) ->
                            x1665 ~err:(or_null_of_js Error.t_of_js x1666)
                              ~publicKey:(crypto_KeyObject_of_js x1668)
                              ~privateKey:(crypto_KeyObject_of_js x1669)))|])
    module GenerateKeyPair =
      struct
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `pem ], [ `pem ]) crypto_RSAKeyPairOptions ->
              anonymous_interface_5 Promise.t)
          =
          fun ~type_:(x1670 : [ `rsa ]) ->
            fun
              ~options:(x1671 :
                         ([ `pem ], [ `pem ]) crypto_RSAKeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_5_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1670 with | `rsa -> Ojs.string_to_js "rsa"));(
                     crypto_RSAKeyPairOptions_to_js
                       (fun (x1672 : [ `pem ]) ->
                          match x1672 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1673 : [ `pem ]) ->
                          match x1673 with | `pem -> Ojs.string_to_js "pem")
                       x1671)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `pem ], [ `der ]) crypto_RSAKeyPairOptions ->
              anonymous_interface_4 Promise.t)
          =
          fun ~type_:(x1675 : [ `rsa ]) ->
            fun
              ~options:(x1676 :
                         ([ `pem ], [ `der ]) crypto_RSAKeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_4_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1675 with | `rsa -> Ojs.string_to_js "rsa"));(
                     crypto_RSAKeyPairOptions_to_js
                       (fun (x1677 : [ `pem ]) ->
                          match x1677 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1678 : [ `der ]) ->
                          match x1678 with | `der -> Ojs.string_to_js "der")
                       x1676)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `der ], [ `pem ]) crypto_RSAKeyPairOptions ->
              anonymous_interface_3 Promise.t)
          =
          fun ~type_:(x1680 : [ `rsa ]) ->
            fun
              ~options:(x1681 :
                         ([ `der ], [ `pem ]) crypto_RSAKeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_3_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1680 with | `rsa -> Ojs.string_to_js "rsa"));(
                     crypto_RSAKeyPairOptions_to_js
                       (fun (x1682 : [ `der ]) ->
                          match x1682 with | `der -> Ojs.string_to_js "der")
                       (fun (x1683 : [ `pem ]) ->
                          match x1683 with | `pem -> Ojs.string_to_js "pem")
                       x1681)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `der ], [ `der ]) crypto_RSAKeyPairOptions ->
              anonymous_interface_2 Promise.t)
          =
          fun ~type_:(x1685 : [ `rsa ]) ->
            fun
              ~options:(x1686 :
                         ([ `der ], [ `der ]) crypto_RSAKeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_2_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1685 with | `rsa -> Ojs.string_to_js "rsa"));(
                     crypto_RSAKeyPairOptions_to_js
                       (fun (x1687 : [ `der ]) ->
                          match x1687 with | `der -> Ojs.string_to_js "der")
                       (fun (x1688 : [ `der ]) ->
                          match x1688 with | `der -> Ojs.string_to_js "der")
                       x1686)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:crypto_RSAKeyPairKeyObjectOptions ->
              crypto_KeyPairKeyObjectResult Promise.t)
          =
          fun ~type_:(x1690 : [ `rsa ]) ->
            fun ~options:(x1691 : crypto_RSAKeyPairKeyObjectOptions) ->
              Promise.t_of_js crypto_KeyPairKeyObjectResult_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1690 with | `rsa -> Ojs.string_to_js "rsa"));(
                     crypto_RSAKeyPairKeyObjectOptions_to_js x1691)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `pem ], [ `pem ]) crypto_DSAKeyPairOptions ->
              anonymous_interface_5 Promise.t)
          =
          fun ~type_:(x1693 : [ `dsa ]) ->
            fun
              ~options:(x1694 :
                         ([ `pem ], [ `pem ]) crypto_DSAKeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_5_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1693 with | `dsa -> Ojs.string_to_js "dsa"));(
                     crypto_DSAKeyPairOptions_to_js
                       (fun (x1695 : [ `pem ]) ->
                          match x1695 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1696 : [ `pem ]) ->
                          match x1696 with | `pem -> Ojs.string_to_js "pem")
                       x1694)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `pem ], [ `der ]) crypto_DSAKeyPairOptions ->
              anonymous_interface_4 Promise.t)
          =
          fun ~type_:(x1698 : [ `dsa ]) ->
            fun
              ~options:(x1699 :
                         ([ `pem ], [ `der ]) crypto_DSAKeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_4_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1698 with | `dsa -> Ojs.string_to_js "dsa"));(
                     crypto_DSAKeyPairOptions_to_js
                       (fun (x1700 : [ `pem ]) ->
                          match x1700 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1701 : [ `der ]) ->
                          match x1701 with | `der -> Ojs.string_to_js "der")
                       x1699)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `der ], [ `pem ]) crypto_DSAKeyPairOptions ->
              anonymous_interface_3 Promise.t)
          =
          fun ~type_:(x1703 : [ `dsa ]) ->
            fun
              ~options:(x1704 :
                         ([ `der ], [ `pem ]) crypto_DSAKeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_3_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1703 with | `dsa -> Ojs.string_to_js "dsa"));(
                     crypto_DSAKeyPairOptions_to_js
                       (fun (x1705 : [ `der ]) ->
                          match x1705 with | `der -> Ojs.string_to_js "der")
                       (fun (x1706 : [ `pem ]) ->
                          match x1706 with | `pem -> Ojs.string_to_js "pem")
                       x1704)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `der ], [ `der ]) crypto_DSAKeyPairOptions ->
              anonymous_interface_2 Promise.t)
          =
          fun ~type_:(x1708 : [ `dsa ]) ->
            fun
              ~options:(x1709 :
                         ([ `der ], [ `der ]) crypto_DSAKeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_2_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1708 with | `dsa -> Ojs.string_to_js "dsa"));(
                     crypto_DSAKeyPairOptions_to_js
                       (fun (x1710 : [ `der ]) ->
                          match x1710 with | `der -> Ojs.string_to_js "der")
                       (fun (x1711 : [ `der ]) ->
                          match x1711 with | `der -> Ojs.string_to_js "der")
                       x1709)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:crypto_DSAKeyPairKeyObjectOptions ->
              crypto_KeyPairKeyObjectResult Promise.t)
          =
          fun ~type_:(x1713 : [ `dsa ]) ->
            fun ~options:(x1714 : crypto_DSAKeyPairKeyObjectOptions) ->
              Promise.t_of_js crypto_KeyPairKeyObjectResult_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1713 with | `dsa -> Ojs.string_to_js "dsa"));(
                     crypto_DSAKeyPairKeyObjectOptions_to_js x1714)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `pem ], [ `pem ]) crypto_ECKeyPairOptions ->
              anonymous_interface_5 Promise.t)
          =
          fun ~type_:(x1716 : [ `ec ]) ->
            fun
              ~options:(x1717 : ([ `pem ], [ `pem ]) crypto_ECKeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_5_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1716 with | `ec -> Ojs.string_to_js "ec"));(
                     crypto_ECKeyPairOptions_to_js
                       (fun (x1718 : [ `pem ]) ->
                          match x1718 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1719 : [ `pem ]) ->
                          match x1719 with | `pem -> Ojs.string_to_js "pem")
                       x1717)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `pem ], [ `der ]) crypto_ECKeyPairOptions ->
              anonymous_interface_4 Promise.t)
          =
          fun ~type_:(x1721 : [ `ec ]) ->
            fun
              ~options:(x1722 : ([ `pem ], [ `der ]) crypto_ECKeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_4_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1721 with | `ec -> Ojs.string_to_js "ec"));(
                     crypto_ECKeyPairOptions_to_js
                       (fun (x1723 : [ `pem ]) ->
                          match x1723 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1724 : [ `der ]) ->
                          match x1724 with | `der -> Ojs.string_to_js "der")
                       x1722)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `der ], [ `pem ]) crypto_ECKeyPairOptions ->
              anonymous_interface_3 Promise.t)
          =
          fun ~type_:(x1726 : [ `ec ]) ->
            fun
              ~options:(x1727 : ([ `der ], [ `pem ]) crypto_ECKeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_3_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1726 with | `ec -> Ojs.string_to_js "ec"));(
                     crypto_ECKeyPairOptions_to_js
                       (fun (x1728 : [ `der ]) ->
                          match x1728 with | `der -> Ojs.string_to_js "der")
                       (fun (x1729 : [ `pem ]) ->
                          match x1729 with | `pem -> Ojs.string_to_js "pem")
                       x1727)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `der ], [ `der ]) crypto_ECKeyPairOptions ->
              anonymous_interface_2 Promise.t)
          =
          fun ~type_:(x1731 : [ `ec ]) ->
            fun
              ~options:(x1732 : ([ `der ], [ `der ]) crypto_ECKeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_2_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1731 with | `ec -> Ojs.string_to_js "ec"));(
                     crypto_ECKeyPairOptions_to_js
                       (fun (x1733 : [ `der ]) ->
                          match x1733 with | `der -> Ojs.string_to_js "der")
                       (fun (x1734 : [ `der ]) ->
                          match x1734 with | `der -> Ojs.string_to_js "der")
                       x1732)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:crypto_ECKeyPairKeyObjectOptions ->
              crypto_KeyPairKeyObjectResult Promise.t)
          =
          fun ~type_:(x1736 : [ `ec ]) ->
            fun ~options:(x1737 : crypto_ECKeyPairKeyObjectOptions) ->
              Promise.t_of_js crypto_KeyPairKeyObjectResult_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1736 with | `ec -> Ojs.string_to_js "ec"));(
                     crypto_ECKeyPairKeyObjectOptions_to_js x1737)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `pem ], [ `pem ]) crypto_ED25519KeyPairOptions ->
              anonymous_interface_5 Promise.t)
          =
          fun ~type_:(x1739 : [ `ed25519 ]) ->
            fun
              ~options:(x1740 :
                         ([ `pem ], [ `pem ]) crypto_ED25519KeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_5_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1739 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(crypto_ED25519KeyPairOptions_to_js
                                                                    (fun
                                                                    (x1741 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1741
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    (fun
                                                                    (x1742 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1742
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    x1740)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `pem ], [ `der ]) crypto_ED25519KeyPairOptions ->
              anonymous_interface_4 Promise.t)
          =
          fun ~type_:(x1744 : [ `ed25519 ]) ->
            fun
              ~options:(x1745 :
                         ([ `pem ], [ `der ]) crypto_ED25519KeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_4_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1744 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(crypto_ED25519KeyPairOptions_to_js
                                                                    (fun
                                                                    (x1746 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1746
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    (fun
                                                                    (x1747 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1747
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    x1745)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `der ], [ `pem ]) crypto_ED25519KeyPairOptions ->
              anonymous_interface_3 Promise.t)
          =
          fun ~type_:(x1749 : [ `ed25519 ]) ->
            fun
              ~options:(x1750 :
                         ([ `der ], [ `pem ]) crypto_ED25519KeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_3_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1749 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(crypto_ED25519KeyPairOptions_to_js
                                                                    (fun
                                                                    (x1751 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1751
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    (fun
                                                                    (x1752 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1752
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    x1750)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `der ], [ `der ]) crypto_ED25519KeyPairOptions ->
              anonymous_interface_2 Promise.t)
          =
          fun ~type_:(x1754 : [ `ed25519 ]) ->
            fun
              ~options:(x1755 :
                         ([ `der ], [ `der ]) crypto_ED25519KeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_2_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1754 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(crypto_ED25519KeyPairOptions_to_js
                                                                    (fun
                                                                    (x1756 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1756
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    (fun
                                                                    (x1757 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1757
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    x1755)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            ?options:crypto_ED25519KeyPairKeyObjectOptions ->
              unit -> crypto_KeyPairKeyObjectResult Promise.t)
          =
          fun ~type_:(x1759 : [ `ed25519 ]) ->
            fun
              ?options:(x1760 : crypto_ED25519KeyPairKeyObjectOptions option)
              ->
              fun () ->
                Promise.t_of_js crypto_KeyPairKeyObjectResult_of_js
                  (let x1763 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1763 "__promisify__")
                     "apply"
                     [|x1763;((let x1761 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1761 "push"
                                    [|((match x1759 with
                                        | `ed25519 ->
                                            Ojs.string_to_js "ed25519"))|]);
                               (match x1760 with
                                | Some x1762 ->
                                    ignore
                                      (Ojs.call x1761 "push"
                                         [|(crypto_ED25519KeyPairKeyObjectOptions_to_js
                                              x1762)|])
                                | None -> ());
                               x1761))|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `pem ], [ `pem ]) crypto_ED448KeyPairOptions ->
              anonymous_interface_5 Promise.t)
          =
          fun ~type_:(x1765 : [ `ed448 ]) ->
            fun
              ~options:(x1766 :
                         ([ `pem ], [ `pem ]) crypto_ED448KeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_5_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1765 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     crypto_ED448KeyPairOptions_to_js
                       (fun (x1767 : [ `pem ]) ->
                          match x1767 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1768 : [ `pem ]) ->
                          match x1768 with | `pem -> Ojs.string_to_js "pem")
                       x1766)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `pem ], [ `der ]) crypto_ED448KeyPairOptions ->
              anonymous_interface_4 Promise.t)
          =
          fun ~type_:(x1770 : [ `ed448 ]) ->
            fun
              ~options:(x1771 :
                         ([ `pem ], [ `der ]) crypto_ED448KeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_4_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1770 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     crypto_ED448KeyPairOptions_to_js
                       (fun (x1772 : [ `pem ]) ->
                          match x1772 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1773 : [ `der ]) ->
                          match x1773 with | `der -> Ojs.string_to_js "der")
                       x1771)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `der ], [ `pem ]) crypto_ED448KeyPairOptions ->
              anonymous_interface_3 Promise.t)
          =
          fun ~type_:(x1775 : [ `ed448 ]) ->
            fun
              ~options:(x1776 :
                         ([ `der ], [ `pem ]) crypto_ED448KeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_3_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1775 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     crypto_ED448KeyPairOptions_to_js
                       (fun (x1777 : [ `der ]) ->
                          match x1777 with | `der -> Ojs.string_to_js "der")
                       (fun (x1778 : [ `pem ]) ->
                          match x1778 with | `pem -> Ojs.string_to_js "pem")
                       x1776)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `der ], [ `der ]) crypto_ED448KeyPairOptions ->
              anonymous_interface_2 Promise.t)
          =
          fun ~type_:(x1780 : [ `ed448 ]) ->
            fun
              ~options:(x1781 :
                         ([ `der ], [ `der ]) crypto_ED448KeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_2_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1780 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     crypto_ED448KeyPairOptions_to_js
                       (fun (x1782 : [ `der ]) ->
                          match x1782 with | `der -> Ojs.string_to_js "der")
                       (fun (x1783 : [ `der ]) ->
                          match x1783 with | `der -> Ojs.string_to_js "der")
                       x1781)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            ?options:crypto_ED448KeyPairKeyObjectOptions ->
              unit -> crypto_KeyPairKeyObjectResult Promise.t)
          =
          fun ~type_:(x1785 : [ `ed448 ]) ->
            fun ?options:(x1786 : crypto_ED448KeyPairKeyObjectOptions option)
              ->
              fun () ->
                Promise.t_of_js crypto_KeyPairKeyObjectResult_of_js
                  (let x1789 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1789 "__promisify__")
                     "apply"
                     [|x1789;((let x1787 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1787 "push"
                                    [|((match x1785 with
                                        | `ed448 -> Ojs.string_to_js "ed448"))|]);
                               (match x1786 with
                                | Some x1788 ->
                                    ignore
                                      (Ojs.call x1787 "push"
                                         [|(crypto_ED448KeyPairKeyObjectOptions_to_js
                                              x1788)|])
                                | None -> ());
                               x1787))|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `pem ], [ `pem ]) crypto_X25519KeyPairOptions ->
              anonymous_interface_5 Promise.t)
          =
          fun ~type_:(x1791 : [ `x25519 ]) ->
            fun
              ~options:(x1792 :
                         ([ `pem ], [ `pem ]) crypto_X25519KeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_5_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1791 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(crypto_X25519KeyPairOptions_to_js
                                                                   (fun
                                                                    (x1793 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1793
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1794 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1794
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1792)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `pem ], [ `der ]) crypto_X25519KeyPairOptions ->
              anonymous_interface_4 Promise.t)
          =
          fun ~type_:(x1796 : [ `x25519 ]) ->
            fun
              ~options:(x1797 :
                         ([ `pem ], [ `der ]) crypto_X25519KeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_4_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1796 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(crypto_X25519KeyPairOptions_to_js
                                                                   (fun
                                                                    (x1798 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1798
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1799 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1799
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1797)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `der ], [ `pem ]) crypto_X25519KeyPairOptions ->
              anonymous_interface_3 Promise.t)
          =
          fun ~type_:(x1801 : [ `x25519 ]) ->
            fun
              ~options:(x1802 :
                         ([ `der ], [ `pem ]) crypto_X25519KeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_3_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1801 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(crypto_X25519KeyPairOptions_to_js
                                                                   (fun
                                                                    (x1803 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1803
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1804 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1804
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1802)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `der ], [ `der ]) crypto_X25519KeyPairOptions ->
              anonymous_interface_2 Promise.t)
          =
          fun ~type_:(x1806 : [ `x25519 ]) ->
            fun
              ~options:(x1807 :
                         ([ `der ], [ `der ]) crypto_X25519KeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_2_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1806 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(crypto_X25519KeyPairOptions_to_js
                                                                   (fun
                                                                    (x1808 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1808
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1809 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1809
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1807)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            ?options:crypto_X25519KeyPairKeyObjectOptions ->
              unit -> crypto_KeyPairKeyObjectResult Promise.t)
          =
          fun ~type_:(x1811 : [ `x25519 ]) ->
            fun
              ?options:(x1812 : crypto_X25519KeyPairKeyObjectOptions option)
              ->
              fun () ->
                Promise.t_of_js crypto_KeyPairKeyObjectResult_of_js
                  (let x1815 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1815 "__promisify__")
                     "apply"
                     [|x1815;((let x1813 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1813 "push"
                                    [|((match x1811 with
                                        | `x25519 ->
                                            Ojs.string_to_js "x25519"))|]);
                               (match x1812 with
                                | Some x1814 ->
                                    ignore
                                      (Ojs.call x1813 "push"
                                         [|(crypto_X25519KeyPairKeyObjectOptions_to_js
                                              x1814)|])
                                | None -> ());
                               x1813))|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `pem ], [ `pem ]) crypto_X448KeyPairOptions ->
              anonymous_interface_5 Promise.t)
          =
          fun ~type_:(x1817 : [ `x448 ]) ->
            fun
              ~options:(x1818 :
                         ([ `pem ], [ `pem ]) crypto_X448KeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_5_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1817 with | `x448 -> Ojs.string_to_js "x448"));(
                     crypto_X448KeyPairOptions_to_js
                       (fun (x1819 : [ `pem ]) ->
                          match x1819 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1820 : [ `pem ]) ->
                          match x1820 with | `pem -> Ojs.string_to_js "pem")
                       x1818)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `pem ], [ `der ]) crypto_X448KeyPairOptions ->
              anonymous_interface_4 Promise.t)
          =
          fun ~type_:(x1822 : [ `x448 ]) ->
            fun
              ~options:(x1823 :
                         ([ `pem ], [ `der ]) crypto_X448KeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_4_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1822 with | `x448 -> Ojs.string_to_js "x448"));(
                     crypto_X448KeyPairOptions_to_js
                       (fun (x1824 : [ `pem ]) ->
                          match x1824 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1825 : [ `der ]) ->
                          match x1825 with | `der -> Ojs.string_to_js "der")
                       x1823)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `der ], [ `pem ]) crypto_X448KeyPairOptions ->
              anonymous_interface_3 Promise.t)
          =
          fun ~type_:(x1827 : [ `x448 ]) ->
            fun
              ~options:(x1828 :
                         ([ `der ], [ `pem ]) crypto_X448KeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_3_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1827 with | `x448 -> Ojs.string_to_js "x448"));(
                     crypto_X448KeyPairOptions_to_js
                       (fun (x1829 : [ `der ]) ->
                          match x1829 with | `der -> Ojs.string_to_js "der")
                       (fun (x1830 : [ `pem ]) ->
                          match x1830 with | `pem -> Ojs.string_to_js "pem")
                       x1828)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `der ], [ `der ]) crypto_X448KeyPairOptions ->
              anonymous_interface_2 Promise.t)
          =
          fun ~type_:(x1832 : [ `x448 ]) ->
            fun
              ~options:(x1833 :
                         ([ `der ], [ `der ]) crypto_X448KeyPairOptions)
              ->
              Promise.t_of_js anonymous_interface_2_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1832 with | `x448 -> Ojs.string_to_js "x448"));(
                     crypto_X448KeyPairOptions_to_js
                       (fun (x1834 : [ `der ]) ->
                          match x1834 with | `der -> Ojs.string_to_js "der")
                       (fun (x1835 : [ `der ]) ->
                          match x1835 with | `der -> Ojs.string_to_js "der")
                       x1833)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            ?options:crypto_X448KeyPairKeyObjectOptions ->
              unit -> crypto_KeyPairKeyObjectResult Promise.t)
          =
          fun ~type_:(x1837 : [ `x448 ]) ->
            fun ?options:(x1838 : crypto_X448KeyPairKeyObjectOptions option)
              ->
              fun () ->
                Promise.t_of_js crypto_KeyPairKeyObjectResult_of_js
                  (let x1841 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1841 "__promisify__")
                     "apply"
                     [|x1841;((let x1839 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1839 "push"
                                    [|((match x1837 with
                                        | `x448 -> Ojs.string_to_js "x448"))|]);
                               (match x1838 with
                                | Some x1840 ->
                                    ignore
                                      (Ojs.call x1839 "push"
                                         [|(crypto_X448KeyPairKeyObjectOptions_to_js
                                              x1840)|])
                                | None -> ());
                               x1839))|])
      end
    let (sign :
      algorithm:string or_null_or_undefined ->
        data:ArrayBufferView.t ->
          key:([ `U_s11_der of crypto_SignKeyObjectInput 
               | `U_s18_ieee_p1363 of crypto_SignKeyObjectInput ],
            [ `U_s21_pkcs1 of crypto_SignPrivateKeyInput 
            | `U_s22_pkcs8 of crypto_SignPrivateKeyInput 
            | `U_s23_private of crypto_KeyLike 
            | `U_s24_public of crypto_KeyLike 
            | `U_s26_sec1 of crypto_SignPrivateKeyInput 
            | `U_s27_secret of crypto_KeyLike ]) union2 -> Buffer.t)
      =
      fun ~algorithm:(x1843 : string or_null_or_undefined) ->
        fun ~data:(x1845 : ArrayBufferView.t) ->
          fun
            ~key:(x1846 :
                   ([ `U_s11_der of crypto_SignKeyObjectInput 
                    | `U_s18_ieee_p1363 of crypto_SignKeyObjectInput ],
                     [ `U_s21_pkcs1 of crypto_SignPrivateKeyInput 
                     | `U_s22_pkcs8 of crypto_SignPrivateKeyInput 
                     | `U_s23_private of crypto_KeyLike 
                     | `U_s24_public of crypto_KeyLike 
                     | `U_s26_sec1 of crypto_SignPrivateKeyInput 
                     | `U_s27_secret of crypto_KeyLike ]) union2)
            ->
            Buffer.t_of_js
              (Ojs.call Import.crypto "sign"
                 [|(or_null_or_undefined_to_js Ojs.string_to_js x1843);(
                   ArrayBufferView.t_to_js x1845);(union2_to_js
                                                     (fun
                                                        (x1847 :
                                                          [
                                                            `U_s11_der of
                                                              crypto_SignKeyObjectInput
                                                               | `U_s18_ieee_p1363
                                                                   of
                                                                   crypto_SignKeyObjectInput
                                                                   ])
                                                        ->
                                                        match x1847 with
                                                        | `U_s11_der x1848 ->
                                                            crypto_SignKeyObjectInput_to_js
                                                              x1848
                                                        | `U_s18_ieee_p1363
                                                            x1849 ->
                                                            crypto_SignKeyObjectInput_to_js
                                                              x1849)
                                                     (fun
                                                        (x1850 :
                                                          [
                                                            `U_s21_pkcs1 of
                                                              crypto_SignPrivateKeyInput
                                                               | `U_s22_pkcs8
                                                                   of
                                                                   crypto_SignPrivateKeyInput
                                                                    | 
                                                            `U_s23_private of
                                                              crypto_KeyLike 
                                                          | `U_s24_public of
                                                              crypto_KeyLike 
                                                          | `U_s26_sec1 of
                                                              crypto_SignPrivateKeyInput
                                                               | `U_s27_secret
                                                                   of
                                                                   crypto_KeyLike
                                                                   ])
                                                        ->
                                                        match x1850 with
                                                        | `U_s21_pkcs1 x1851
                                                            ->
                                                            crypto_SignPrivateKeyInput_to_js
                                                              x1851
                                                        | `U_s22_pkcs8 x1852
                                                            ->
                                                            crypto_SignPrivateKeyInput_to_js
                                                              x1852
                                                        | `U_s23_private
                                                            x1853 ->
                                                            crypto_KeyLike_to_js
                                                              x1853
                                                        | `U_s24_public x1854
                                                            ->
                                                            crypto_KeyLike_to_js
                                                              x1854
                                                        | `U_s26_sec1 x1855
                                                            ->
                                                            crypto_SignPrivateKeyInput_to_js
                                                              x1855
                                                        | `U_s27_secret x1856
                                                            ->
                                                            crypto_KeyLike_to_js
                                                              x1856) x1846)|])
    let (verify :
      algorithm:string or_null_or_undefined ->
        data:ArrayBufferView.t ->
          key:([ `U_s11_der of crypto_VerifyKeyObjectInput 
               | `U_s18_ieee_p1363 of crypto_VerifyKeyObjectInput ],
            [ `U_s21_pkcs1 of crypto_VerifyPublicKeyInput 
            | `U_s23_private of crypto_KeyLike 
            | `U_s24_public of crypto_KeyLike 
            | `U_s27_secret of crypto_KeyLike 
            | `U_s28_spki of crypto_VerifyPublicKeyInput ]) union2 ->
            signature:ArrayBufferView.t -> bool)
      =
      fun ~algorithm:(x1857 : string or_null_or_undefined) ->
        fun ~data:(x1859 : ArrayBufferView.t) ->
          fun
            ~key:(x1860 :
                   ([ `U_s11_der of crypto_VerifyKeyObjectInput 
                    | `U_s18_ieee_p1363 of crypto_VerifyKeyObjectInput ],
                     [ `U_s21_pkcs1 of crypto_VerifyPublicKeyInput 
                     | `U_s23_private of crypto_KeyLike 
                     | `U_s24_public of crypto_KeyLike 
                     | `U_s27_secret of crypto_KeyLike 
                     | `U_s28_spki of crypto_VerifyPublicKeyInput ]) union2)
            ->
            fun ~signature:(x1870 : ArrayBufferView.t) ->
              Ojs.bool_of_js
                (Ojs.call Import.crypto "verify"
                   [|(or_null_or_undefined_to_js Ojs.string_to_js x1857);(
                     ArrayBufferView.t_to_js x1859);(union2_to_js
                                                       (fun
                                                          (x1861 :
                                                            [
                                                              `U_s11_der of
                                                                crypto_VerifyKeyObjectInput
                                                                 | `U_s18_ieee_p1363
                                                                    of
                                                                    crypto_VerifyKeyObjectInput
                                                                    ])
                                                          ->
                                                          match x1861 with
                                                          | `U_s11_der x1862
                                                              ->
                                                              crypto_VerifyKeyObjectInput_to_js
                                                                x1862
                                                          | `U_s18_ieee_p1363
                                                              x1863 ->
                                                              crypto_VerifyKeyObjectInput_to_js
                                                                x1863)
                                                       (fun
                                                          (x1864 :
                                                            [
                                                              `U_s21_pkcs1 of
                                                                crypto_VerifyPublicKeyInput
                                                                 | `U_s23_private
                                                                    of
                                                                    crypto_KeyLike
                                                                     | 
                                                              `U_s24_public
                                                                of
                                                                crypto_KeyLike
                                                                 | `U_s27_secret
                                                                    of
                                                                    crypto_KeyLike
                                                                     | 
                                                              `U_s28_spki of
                                                                crypto_VerifyPublicKeyInput
                                                                ])
                                                          ->
                                                          match x1864 with
                                                          | `U_s21_pkcs1
                                                              x1865 ->
                                                              crypto_VerifyPublicKeyInput_to_js
                                                                x1865
                                                          | `U_s23_private
                                                              x1866 ->
                                                              crypto_KeyLike_to_js
                                                                x1866
                                                          | `U_s24_public
                                                              x1867 ->
                                                              crypto_KeyLike_to_js
                                                                x1867
                                                          | `U_s27_secret
                                                              x1868 ->
                                                              crypto_KeyLike_to_js
                                                                x1868
                                                          | `U_s28_spki x1869
                                                              ->
                                                              crypto_VerifyPublicKeyInput_to_js
                                                                x1869) x1860);(
                     ArrayBufferView.t_to_js x1870)|])
    let (diffieHellman : options:anonymous_interface_1 -> Buffer.t) =
      fun ~options:(x1871 : anonymous_interface_1) ->
        Buffer.t_of_js
          (Ojs.call Import.crypto "diffieHellman"
             [|(anonymous_interface_1_to_js x1871)|])
  end
