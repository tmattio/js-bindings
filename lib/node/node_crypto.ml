[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Crypto =
  struct
    open Node_stream
    module BinaryLike =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
        and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
      end
    module KeyObjectType =
      struct
        type t = [ `private_  | `public  | `secret ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4 : Ojs.t) ->
            let x5 = x4 in
            match Ojs.string_of_js x5 with
            | "private" -> `private_
            | "public" -> `public
            | "secret" -> `secret
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3 : [ `private_  | `public  | `secret ]) ->
            match x3 with
            | `private_ -> Ojs.string_to_js "private"
            | `public -> Ojs.string_to_js "public"
            | `secret -> Ojs.string_to_js "secret"
      end
    module KeyExportOptions =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) -> fun (__T_of_js : Ojs.t -> __T) -> fun (x7 : Ojs.t) -> x7
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x6 : Ojs.t) -> x6
        let (get_type : 'T t -> [ `pkcs1  | `pkcs8  | `sec1  | `spki ]) =
          fun (x8 : 'T t) ->
            let x10 = Ojs.get_prop_ascii (t_to_js Obj.magic x8) "type" in
            match Ojs.string_of_js x10 with
            | "pkcs1" -> `pkcs1
            | "pkcs8" -> `pkcs8
            | "sec1" -> `sec1
            | "spki" -> `spki
            | _ -> assert false
        let (set_type :
          'T t -> [ `pkcs1  | `pkcs8  | `sec1  | `spki ] -> unit) =
          fun (x11 : 'T t) ->
            fun (x12 : [ `pkcs1  | `pkcs8  | `sec1  | `spki ]) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x11) "type"
                (match x12 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `pkcs8 -> Ojs.string_to_js "pkcs8"
                 | `sec1 -> Ojs.string_to_js "sec1"
                 | `spki -> Ojs.string_to_js "spki")
        let (get_format : 'T t -> 'T) =
          fun (x14 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x14) "format")
        let (set_format : 'T t -> 'T -> unit) =
          fun (x16 : 'T t) ->
            fun (x17 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x16) "format"
                (Obj.magic x17)
        let (get_cipher : 'T t -> string) =
          fun (x19 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x19) "cipher")
        let (set_cipher : 'T t -> string -> unit) =
          fun (x21 : 'T t) ->
            fun (x22 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x21) "cipher"
                (Ojs.string_to_js x22)
        let (get_passphrase : 'T t -> Buffer.t or_string) =
          fun (x24 : 'T t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x24) "passphrase")
        let (set_passphrase : 'T t -> Buffer.t or_string -> unit) =
          fun (x27 : 'T t) ->
            fun (x28 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x27) "passphrase"
                (or_string_to_js Buffer.t_to_js x28)
      end
    module KeyType =
      struct
        type t =
          [ `dsa  | `ec  | `ed25519  | `ed448  | `rsa  | `x25519  | `x448 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x32 : Ojs.t) ->
            let x33 = x32 in
            match Ojs.string_of_js x33 with
            | "dsa" -> `dsa
            | "ec" -> `ec
            | "ed25519" -> `ed25519
            | "ed448" -> `ed448
            | "rsa" -> `rsa
            | "x25519" -> `x25519
            | "x448" -> `x448
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x31 :
              [ `dsa  | `ec  | `ed25519  | `ed448  | `rsa  | `x25519 
              | `x448 ])
            ->
            match x31 with
            | `dsa -> Ojs.string_to_js "dsa"
            | `ec -> Ojs.string_to_js "ec"
            | `ed25519 -> Ojs.string_to_js "ed25519"
            | `ed448 -> Ojs.string_to_js "ed448"
            | `rsa -> Ojs.string_to_js "rsa"
            | `x25519 -> Ojs.string_to_js "x25519"
            | `x448 -> Ojs.string_to_js "x448"
      end
    module KeyObject =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x35 : Ojs.t) -> x35
        and t_to_js : t -> Ojs.t = fun (x34 : Ojs.t) -> x34
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "KeyObject")
                 [||])
        let (get_asymmetric_key_type : t -> KeyType.t) =
          fun (x36 : t) ->
            KeyType.t_of_js
              (Ojs.get_prop_ascii (t_to_js x36) "asymmetricKeyType")
        let (set_asymmetric_key_type : t -> KeyType.t -> unit) =
          fun (x37 : t) ->
            fun (x38 : KeyType.t) ->
              Ojs.set_prop_ascii (t_to_js x37) "asymmetricKeyType"
                (KeyType.t_to_js x38)
        let (get_asymmetric_key_size : t -> int) =
          fun (x39 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x39) "asymmetricKeySize")
        let (set_asymmetric_key_size : t -> int -> unit) =
          fun (x40 : t) ->
            fun (x41 : int) ->
              Ojs.set_prop_ascii (t_to_js x40) "asymmetricKeySize"
                (Ojs.int_to_js x41)
        let (export :
          t -> options:[ `pem ] KeyExportOptions.t -> Buffer.t or_string) =
          fun (x44 : t) ->
            fun ~options:(x42 : [ `pem ] KeyExportOptions.t) ->
              or_string_of_js Buffer.t_of_js
                (Ojs.call (t_to_js x44) "export"
                   [|(KeyExportOptions.t_to_js
                        (fun (x43 : [ `pem ]) ->
                           match x43 with | `pem -> Ojs.string_to_js "pem")
                        x42)|])
        let (export' :
          t -> ?options:[ `der ] KeyExportOptions.t -> unit -> Buffer.t) =
          fun (x50 : t) ->
            fun ?options:(x46 : [ `der ] KeyExportOptions.t option) ->
              fun () ->
                Buffer.t_of_js
                  (let x51 = t_to_js x50 in
                   Ojs.call (Ojs.get_prop_ascii x51 "export") "apply"
                     [|x51;((let x47 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x46 with
                              | Some x48 ->
                                  ignore
                                    (Ojs.call x47 "push"
                                       [|(KeyExportOptions.t_to_js
                                            (fun (x49 : [ `der ]) ->
                                               match x49 with
                                               | `der ->
                                                   Ojs.string_to_js "der")
                                            x48)|])
                              | None -> ());
                             x47))|])
        let (get_symmetric_key_size : t -> int) =
          fun (x52 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x52) "symmetricKeySize")
        let (set_symmetric_key_size : t -> int -> unit) =
          fun (x53 : t) ->
            fun (x54 : int) ->
              Ojs.set_prop_ascii (t_to_js x53) "symmetricKeySize"
                (Ojs.int_to_js x54)
        let (get_type : t -> KeyObjectType.t) =
          fun (x55 : t) ->
            KeyObjectType.t_of_js (Ojs.get_prop_ascii (t_to_js x55) "type")
        let (set_type : t -> KeyObjectType.t -> unit) =
          fun (x56 : t) ->
            fun (x57 : KeyObjectType.t) ->
              Ojs.set_prop_ascii (t_to_js x56) "type"
                (KeyObjectType.t_to_js x57)
      end
    module CipherKey =
      struct
        type t = (BinaryLike.t, KeyObject.t) union2
        let rec t_of_js : Ojs.t -> t =
          fun (x61 : Ojs.t) ->
            union2_of_js BinaryLike.t_of_js KeyObject.t_of_js x61
        and t_to_js : t -> Ojs.t =
          fun (x58 : (BinaryLike.t, KeyObject.t) union2) ->
            union2_to_js BinaryLike.t_to_js KeyObject.t_to_js x58
      end
    module Certificate =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x65 : Ojs.t) -> x65
        and t_to_js : t -> Ojs.t = fun (x64 : Ojs.t) -> x64
        let (export_challenge : t -> spkac:BinaryLike.t -> Buffer.t) =
          fun (x67 : t) ->
            fun ~spkac:(x66 : BinaryLike.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x67) "exportChallenge"
                   [|(BinaryLike.t_to_js x66)|])
        let (export_public_key :
          t -> spkac:BinaryLike.t -> ?encoding:string -> unit -> Buffer.t) =
          fun (x72 : t) ->
            fun ~spkac:(x68 : BinaryLike.t) ->
              fun ?encoding:(x69 : string option) ->
                fun () ->
                  Buffer.t_of_js
                    (let x73 = t_to_js x72 in
                     Ojs.call (Ojs.get_prop_ascii x73 "exportPublicKey")
                       "apply"
                       [|x73;((let x70 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x70 "push"
                                    [|(BinaryLike.t_to_js x68)|]);
                               (match x69 with
                                | Some x71 ->
                                    ignore
                                      (Ojs.call x70 "push"
                                         [|(Ojs.string_to_js x71)|])
                                | None -> ());
                               x70))|])
        let (verify_spkac : t -> spkac:ArrayBufferView.t -> bool) =
          fun (x75 : t) ->
            fun ~spkac:(x74 : ArrayBufferView.t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x75) "verifySpkac"
                   [|(ArrayBufferView.t_to_js x74)|])
      end
    module AnonymousInterface11 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x77 : Ojs.t) -> x77
        and t_to_js : t -> Ojs.t = fun (x76 : Ojs.t) -> x76
        let (create : t -> Certificate.t) =
          fun (x78 : t) ->
            Certificate.t_of_js (Ojs.new_obj (t_to_js x78) [||])
        let (apply : t -> Certificate.t) =
          fun (x79 : t) -> Certificate.t_of_js (Ojs.apply (t_to_js x79) [||])
      end
    let (certificate : (Certificate.t, AnonymousInterface11.t) intersection2)
      =
      intersection2_of_js Certificate.t_of_js AnonymousInterface11.t_of_js
        (Ojs.get_prop_ascii Import.crypto "Certificate")
    module Constants =
      struct
        let (o_penssl_version_number : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "OPENSSL_VERSION_NUMBER")
        let (ssl_op_all : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants") "SSL_OP_ALL")
        let (ssl_op_allow_unsafe_legacy_renegotiation : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION")
        let (ssl_op_cipher_server_preference : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_CIPHER_SERVER_PREFERENCE")
        let (ssl_op_cisco_anyconnect : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_CISCO_ANYCONNECT")
        let (ssl_op_cookie_exchange : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_COOKIE_EXCHANGE")
        let (ssl_op_cryptopro_tlsext_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_CRYPTOPRO_TLSEXT_BUG")
        let (ssl_op_dont_insert_empty_fragments : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS")
        let (ssl_op_ephemeral_rsa : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_EPHEMERAL_RSA")
        let (ssl_op_legacy_server_connect : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_LEGACY_SERVER_CONNECT")
        let (ssl_op_microsoft_big_sslv3_BUFFER : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER")
        let (ssl_op_microsoft_sess_id_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_MICROSOFT_SESS_ID_BUG")
        let (ssl_op_msie_sslv2_RSA_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_MSIE_SSLV2_RSA_PADDING")
        let (ssl_op_netscape_ca_dn_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_CA_DN_BUG")
        let (ssl_op_netscape_challenge_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_CHALLENGE_BUG")
        let (ssl_op_netscape_demo_cipher_change_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG")
        let (ssl_op_netscape_reuse_cipher_change_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG")
        let (ssl_op_no_compression : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_COMPRESSION")
        let (ssl_op_no_query_mtu : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_QUERY_MTU")
        let (ssl_op_no_session_resumption_on_renegotiation : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION")
        let (ssl_op_no_ss_lv2 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_SSLv2")
        let (ssl_op_no_ss_lv3 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_SSLv3")
        let (ssl_op_no_ticket : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TICKET")
        let (ssl_op_no_tl_sv1 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TLSv1")
        let (ssl_op_no_tl_sv1_1 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TLSv1_1")
        let (ssl_op_no_tl_sv1_2 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TLSv1_2")
        let (ssl_op_pkcs1_CHECK_1 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_PKCS1_CHECK_1")
        let (ssl_op_pkcs1_CHECK_2 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_PKCS1_CHECK_2")
        let (ssl_op_single_dh_use : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SINGLE_DH_USE")
        let (ssl_op_single_ecdh_use : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SINGLE_ECDH_USE")
        let (ssl_op_ssleay080_CLIENT_DH_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SSLEAY_080_CLIENT_DH_BUG")
        let (ssl_op_sslref2_REUSE_CERT_TYPE_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG")
        let (ssl_op_tls_block_padding_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_TLS_BLOCK_PADDING_BUG")
        let (ssl_op_tls_d5_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_TLS_D5_BUG")
        let (ssl_op_tls_rollback_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_TLS_ROLLBACK_BUG")
        let (engine_method_rsa : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_RSA")
        let (engine_method_dsa : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_DSA")
        let (engine_method_dh : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_DH")
        let (engine_method_rand : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_RAND")
        let (engine_method_ec : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_EC")
        let (engine_method_ciphers : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_CIPHERS")
        let (engine_method_digests : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_DIGESTS")
        let (engine_method_pkey_meths : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_PKEY_METHS")
        let (engine_method_pkey_asn1_METHS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_PKEY_ASN1_METHS")
        let (engine_method_all : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_ALL")
        let (engine_method_none : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_NONE")
        let (dh_check_p_not_safe_prime : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_CHECK_P_NOT_SAFE_PRIME")
        let (dh_check_p_not_prime : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_CHECK_P_NOT_PRIME")
        let (dh_unable_to_check_generator : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_UNABLE_TO_CHECK_GENERATOR")
        let (dh_not_suitable_generator : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_NOT_SUITABLE_GENERATOR")
        let (alpn_enabled : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants") "ALPN_ENABLED")
        let (rsa_pkcs1_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PKCS1_PADDING")
        let (rsa_sslv23_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_SSLV23_PADDING")
        let (rsa_no_padding : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_NO_PADDING")
        let (rsa_pkcs1_OAEP_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PKCS1_OAEP_PADDING")
        let (rsa_x931_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_X931_PADDING")
        let (rsa_pkcs1_PSS_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PKCS1_PSS_PADDING")
        let (rsa_pss_saltlen_digest : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PSS_SALTLEN_DIGEST")
        let (rsa_pss_saltlen_max_sign : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PSS_SALTLEN_MAX_SIGN")
        let (rsa_pss_saltlen_auto : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PSS_SALTLEN_AUTO")
        let (point_conversion_compressed : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "POINT_CONVERSION_COMPRESSED")
        let (point_conversion_uncompressed : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "POINT_CONVERSION_UNCOMPRESSED")
        let (point_conversion_hybrid : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "POINT_CONVERSION_HYBRID")
        let (default_core_cipher_list : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "defaultCoreCipherList")
        let (default_cipher_list : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "defaultCipherList")
      end
    module HashOptions =
      struct
        include struct include Stream.TransformOptions end
        let (get_output_length : t -> int) =
          fun (x82 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x82) "outputLength")
        let (set_output_length : t -> int -> unit) =
          fun (x83 : t) ->
            fun (x84 : int) ->
              Ojs.set_prop_ascii (t_to_js x83) "outputLength"
                (Ojs.int_to_js x84)
      end
    let (fips : bool) =
      Ojs.bool_of_js (Ojs.get_prop_ascii Import.crypto "fips")
    module BinaryToTextEncoding =
      struct
        type t = [ `base64  | `hex ]
        let rec t_of_js : Ojs.t -> t =
          fun (x86 : Ojs.t) ->
            let x87 = x86 in
            match Ojs.string_of_js x87 with
            | "base64" -> `base64
            | "hex" -> `hex
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x85 : [ `base64  | `hex ]) ->
            match x85 with
            | `base64 -> Ojs.string_to_js "base64"
            | `hex -> Ojs.string_to_js "hex"
      end
    module CharacterEncoding =
      struct
        type t = [ `latin1  | `utf_8  | `utf16le  | `utf8 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x89 : Ojs.t) ->
            let x90 = x89 in
            match Ojs.string_of_js x90 with
            | "latin1" -> `latin1
            | "utf-8" -> `utf_8
            | "utf16le" -> `utf16le
            | "utf8" -> `utf8
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x88 : [ `latin1  | `utf_8  | `utf16le  | `utf8 ]) ->
            match x88 with
            | `latin1 -> Ojs.string_to_js "latin1"
            | `utf_8 -> Ojs.string_to_js "utf-8"
            | `utf16le -> Ojs.string_to_js "utf16le"
            | `utf8 -> Ojs.string_to_js "utf8"
      end
    module LegacyCharacterEncoding =
      struct
        type t = [ `ascii  | `binary  | `ucs_2  | `ucs2 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x92 : Ojs.t) ->
            let x93 = x92 in
            match Ojs.string_of_js x93 with
            | "ascii" -> `ascii
            | "binary" -> `binary
            | "ucs-2" -> `ucs_2
            | "ucs2" -> `ucs2
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x91 : [ `ascii  | `binary  | `ucs_2  | `ucs2 ]) ->
            match x91 with
            | `ascii -> Ojs.string_to_js "ascii"
            | `binary -> Ojs.string_to_js "binary"
            | `ucs_2 -> Ojs.string_to_js "ucs-2"
            | `ucs2 -> Ojs.string_to_js "ucs2"
      end
    module Encoding =
      struct
        type t =
          ((BinaryToTextEncoding.t, CharacterEncoding.t,
             LegacyCharacterEncoding.t) union3,
            [ `ascii  | `base64  | `binary  | `hex  | `latin1  | `ucs_2 
            | `ucs2  | `utf_8  | `utf16le  | `utf8 ]) or_enum
        let rec t_of_js : Ojs.t -> t =
          fun (x100 : Ojs.t) ->
            or_enum_of_js
              (fun (x101 : Ojs.t) ->
                 union3_of_js BinaryToTextEncoding.t_of_js
                   CharacterEncoding.t_of_js LegacyCharacterEncoding.t_of_js
                   x101)
              (fun (x105 : Ojs.t) ->
                 let x106 = x105 in
                 match Ojs.string_of_js x106 with
                 | "ascii" -> `ascii
                 | "base64" -> `base64
                 | "binary" -> `binary
                 | "hex" -> `hex
                 | "latin1" -> `latin1
                 | "ucs-2" -> `ucs_2
                 | "ucs2" -> `ucs2
                 | "utf-8" -> `utf_8
                 | "utf16le" -> `utf16le
                 | "utf8" -> `utf8
                 | _ -> assert false) x100
        and t_to_js : t -> Ojs.t =
          fun
            (x94 :
              ((BinaryToTextEncoding.t, CharacterEncoding.t,
                 LegacyCharacterEncoding.t) union3,
                [ `ascii  | `base64  | `binary  | `hex  | `latin1  | 
                  `ucs_2 
                | `ucs2  | `utf_8  | `utf16le  | `utf8 ]) or_enum)
            ->
            or_enum_to_js
              (fun
                 (x95 :
                   (BinaryToTextEncoding.t, CharacterEncoding.t,
                     LegacyCharacterEncoding.t) union3)
                 ->
                 union3_to_js BinaryToTextEncoding.t_to_js
                   CharacterEncoding.t_to_js LegacyCharacterEncoding.t_to_js
                   x95)
              (fun
                 (x99 :
                   [ `ascii  | `base64  | `binary  | `hex  | `latin1 
                   | `ucs_2  | `ucs2  | `utf_8  | `utf16le  | `utf8 ])
                 ->
                 match x99 with
                 | `ascii -> Ojs.string_to_js "ascii"
                 | `base64 -> Ojs.string_to_js "base64"
                 | `binary -> Ojs.string_to_js "binary"
                 | `hex -> Ojs.string_to_js "hex"
                 | `latin1 -> Ojs.string_to_js "latin1"
                 | `ucs_2 -> Ojs.string_to_js "ucs-2"
                 | `ucs2 -> Ojs.string_to_js "ucs2"
                 | `utf_8 -> Ojs.string_to_js "utf-8"
                 | `utf16le -> Ojs.string_to_js "utf16le"
                 | `utf8 -> Ojs.string_to_js "utf8") x94
      end
    module ECDHKeyFormat =
      struct
        type t = [ `compressed  | `hybrid  | `uncompressed ]
        let rec t_of_js : Ojs.t -> t =
          fun (x108 : Ojs.t) ->
            let x109 = x108 in
            match Ojs.string_of_js x109 with
            | "compressed" -> `compressed
            | "hybrid" -> `hybrid
            | "uncompressed" -> `uncompressed
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x107 : [ `compressed  | `hybrid  | `uncompressed ]) ->
            match x107 with
            | `compressed -> Ojs.string_to_js "compressed"
            | `hybrid -> Ojs.string_to_js "hybrid"
            | `uncompressed -> Ojs.string_to_js "uncompressed"
      end
    module Hash =
      struct
        include struct include Stream.Transform end
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Hash") [||])
        let (copy : t -> t) =
          fun (x110 : t) -> t_of_js (Ojs.call (t_to_js x110) "copy" [||])
        let (update : t -> data:BinaryLike.t -> t) =
          fun (x112 : t) ->
            fun ~data:(x111 : BinaryLike.t) ->
              t_of_js
                (Ojs.call (t_to_js x112) "update"
                   [|(BinaryLike.t_to_js x111)|])
        let (update' : t -> data:string -> input_encoding:Encoding.t -> t) =
          fun (x115 : t) ->
            fun ~data:(x113 : string) ->
              fun ~input_encoding:(x114 : Encoding.t) ->
                t_of_js
                  (Ojs.call (t_to_js x115) "update"
                     [|(Ojs.string_to_js x113);(Encoding.t_to_js x114)|])
        let (digest : t -> Buffer.t) =
          fun (x116 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x116) "digest" [||])
        let (digest' : t -> encoding:BinaryToTextEncoding.t -> string) =
          fun (x118 : t) ->
            fun ~encoding:(x117 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x118) "digest"
                   [|(BinaryToTextEncoding.t_to_js x117)|])
      end
    module Hmac =
      struct
        include struct include Stream.Transform end
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Hmac") [||])
        let (update : t -> data:BinaryLike.t -> t) =
          fun (x120 : t) ->
            fun ~data:(x119 : BinaryLike.t) ->
              t_of_js
                (Ojs.call (t_to_js x120) "update"
                   [|(BinaryLike.t_to_js x119)|])
        let (update' : t -> data:string -> input_encoding:Encoding.t -> t) =
          fun (x123 : t) ->
            fun ~data:(x121 : string) ->
              fun ~input_encoding:(x122 : Encoding.t) ->
                t_of_js
                  (Ojs.call (t_to_js x123) "update"
                     [|(Ojs.string_to_js x121);(Encoding.t_to_js x122)|])
        let (digest : t -> Buffer.t) =
          fun (x124 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x124) "digest" [||])
        let (digest' : t -> encoding:BinaryToTextEncoding.t -> string) =
          fun (x126 : t) ->
            fun ~encoding:(x125 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x126) "digest"
                   [|(BinaryToTextEncoding.t_to_js x125)|])
      end
    let (create_hash :
      algorithm:string -> ?options:HashOptions.t -> unit -> Hash.t) =
      fun ~algorithm:(x127 : string) ->
        fun ?options:(x128 : HashOptions.t option) ->
          fun () ->
            Hash.t_of_js
              (let x131 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x131 "createHash") "apply"
                 [|x131;((let x129 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x129 "push" [|(Ojs.string_to_js x127)|]);
                          (match x128 with
                           | Some x130 ->
                               ignore
                                 (Ojs.call x129 "push"
                                    [|(HashOptions.t_to_js x130)|])
                           | None -> ());
                          x129))|])
    let (create_hmac :
      algorithm:string ->
        key:(BinaryLike.t, KeyObject.t) union2 ->
          ?options:Stream.TransformOptions.t -> unit -> Hmac.t)
      =
      fun ~algorithm:(x132 : string) ->
        fun ~key:(x133 : (BinaryLike.t, KeyObject.t) union2) ->
          fun ?options:(x134 : Stream.TransformOptions.t option) ->
            fun () ->
              Hmac.t_of_js
                (let x139 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x139 "createHmac") "apply"
                   [|x139;((let x135 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x135 "push"
                                 [|(Ojs.string_to_js x132)|]);
                            ignore
                              (Ojs.call x135 "push"
                                 [|(union2_to_js BinaryLike.t_to_js
                                      KeyObject.t_to_js x133)|]);
                            (match x134 with
                             | Some x136 ->
                                 ignore
                                   (Ojs.call x135 "push"
                                      [|(Stream.TransformOptions.t_to_js x136)|])
                             | None -> ());
                            x135))|])
    module CipherCCMTypes =
      struct
        type t =
          [ `aes_128_ccm  | `aes_192_ccm  | `aes_256_ccm 
          | `chacha20_poly1305 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x141 : Ojs.t) ->
            let x142 = x141 in
            match Ojs.string_of_js x142 with
            | "aes-128-ccm" -> `aes_128_ccm
            | "aes-192-ccm" -> `aes_192_ccm
            | "aes-256-ccm" -> `aes_256_ccm
            | "chacha20-poly1305" -> `chacha20_poly1305
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x140 :
              [ `aes_128_ccm  | `aes_192_ccm  | `aes_256_ccm 
              | `chacha20_poly1305 ])
            ->
            match x140 with
            | `aes_128_ccm -> Ojs.string_to_js "aes-128-ccm"
            | `aes_192_ccm -> Ojs.string_to_js "aes-192-ccm"
            | `aes_256_ccm -> Ojs.string_to_js "aes-256-ccm"
            | `chacha20_poly1305 -> Ojs.string_to_js "chacha20-poly1305"
      end
    module CipherGCMTypes =
      struct
        type t = [ `aes_128_gcm  | `aes_192_gcm  | `aes_256_gcm ]
        let rec t_of_js : Ojs.t -> t =
          fun (x144 : Ojs.t) ->
            let x145 = x144 in
            match Ojs.string_of_js x145 with
            | "aes-128-gcm" -> `aes_128_gcm
            | "aes-192-gcm" -> `aes_192_gcm
            | "aes-256-gcm" -> `aes_256_gcm
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x143 : [ `aes_128_gcm  | `aes_192_gcm  | `aes_256_gcm ]) ->
            match x143 with
            | `aes_128_gcm -> Ojs.string_to_js "aes-128-gcm"
            | `aes_192_gcm -> Ojs.string_to_js "aes-192-gcm"
            | `aes_256_gcm -> Ojs.string_to_js "aes-256-gcm"
      end
    module CipherCCMOptions =
      struct
        include struct include Stream.TransformOptions end
        let (get_auth_tag_length : t -> int) =
          fun (x146 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x146) "authTagLength")
        let (set_auth_tag_length : t -> int -> unit) =
          fun (x147 : t) ->
            fun (x148 : int) ->
              Ojs.set_prop_ascii (t_to_js x147) "authTagLength"
                (Ojs.int_to_js x148)
      end
    module CipherGCMOptions =
      struct
        include struct include Stream.TransformOptions end
        let (get_auth_tag_length : t -> int) =
          fun (x149 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x149) "authTagLength")
        let (set_auth_tag_length : t -> int -> unit) =
          fun (x150 : t) ->
            fun (x151 : int) ->
              Ojs.set_prop_ascii (t_to_js x150) "authTagLength"
                (Ojs.int_to_js x151)
      end
    module Cipher =
      struct
        include struct include Stream.Transform end
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Cipher") [||])
        let (update : t -> data:BinaryLike.t -> Buffer.t) =
          fun (x153 : t) ->
            fun ~data:(x152 : BinaryLike.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x153) "update"
                   [|(BinaryLike.t_to_js x152)|])
        let (update' :
          t -> data:string -> input_encoding:Encoding.t -> Buffer.t) =
          fun (x156 : t) ->
            fun ~data:(x154 : string) ->
              fun ~input_encoding:(x155 : Encoding.t) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x156) "update"
                     [|(Ojs.string_to_js x154);(Encoding.t_to_js x155)|])
        let (update'' :
          t ->
            data:ArrayBufferView.t ->
              input_encoding:never or_undefined ->
                output_encoding:Encoding.t -> string)
          =
          fun (x161 : t) ->
            fun ~data:(x157 : ArrayBufferView.t) ->
              fun ~input_encoding:(x158 : never or_undefined) ->
                fun ~output_encoding:(x160 : Encoding.t) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x161) "update"
                       [|(ArrayBufferView.t_to_js x157);(or_undefined_to_js
                                                           never_to_js x158);(
                         Encoding.t_to_js x160)|])
        let (update''' :
          t ->
            data:string ->
              input_encoding:Encoding.t or_undefined ->
                output_encoding:Encoding.t -> string)
          =
          fun (x166 : t) ->
            fun ~data:(x162 : string) ->
              fun ~input_encoding:(x163 : Encoding.t or_undefined) ->
                fun ~output_encoding:(x165 : Encoding.t) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x166) "update"
                       [|(Ojs.string_to_js x162);(or_undefined_to_js
                                                    Encoding.t_to_js x163);(
                         Encoding.t_to_js x165)|])
        let (final : t -> Buffer.t) =
          fun (x167 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x167) "final" [||])
        let (final' : t -> output_encoding:BufferEncoding.t -> string) =
          fun (x169 : t) ->
            fun ~output_encoding:(x168 : BufferEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x169) "final"
                   [|(BufferEncoding.t_to_js x168)|])
        let (set_auto_padding : t -> ?auto_padding:bool -> unit -> t) =
          fun (x173 : t) ->
            fun ?auto_padding:(x170 : bool option) ->
              fun () ->
                t_of_js
                  (let x174 = t_to_js x173 in
                   Ojs.call (Ojs.get_prop_ascii x174 "setAutoPadding")
                     "apply"
                     [|x174;((let x171 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x170 with
                               | Some x172 ->
                                   ignore
                                     (Ojs.call x171 "push"
                                        [|(Ojs.bool_to_js x172)|])
                               | None -> ());
                              x171))|])
      end
    module AnonymousInterface0 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x176 : Ojs.t) -> x176
        and t_to_js : t -> Ojs.t = fun (x175 : Ojs.t) -> x175
        let (get_plaintext_length : t -> int) =
          fun (x177 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x177) "plaintextLength")
        let (set_plaintext_length : t -> int -> unit) =
          fun (x178 : t) ->
            fun (x179 : int) ->
              Ojs.set_prop_ascii (t_to_js x178) "plaintextLength"
                (Ojs.int_to_js x179)
      end
    module CipherCCM =
      struct
        include struct include Cipher end
        let (set_aad :
          t -> buffer:ArrayBufferView.t -> options:AnonymousInterface0.t -> t)
          =
          fun (x182 : t) ->
            fun ~buffer:(x180 : ArrayBufferView.t) ->
              fun ~options:(x181 : AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x182) "setAAD"
                     [|(ArrayBufferView.t_to_js x180);(AnonymousInterface0.t_to_js
                                                         x181)|])
        let (get_auth_tag : t -> Buffer.t) =
          fun (x183 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x183) "getAuthTag" [||])
      end
    module CipherGCM =
      struct
        include struct include Cipher end
        let (set_aad :
          t ->
            buffer:ArrayBufferView.t ->
              ?options:AnonymousInterface0.t -> unit -> t)
          =
          fun (x188 : t) ->
            fun ~buffer:(x184 : ArrayBufferView.t) ->
              fun ?options:(x185 : AnonymousInterface0.t option) ->
                fun () ->
                  t_of_js
                    (let x189 = t_to_js x188 in
                     Ojs.call (Ojs.get_prop_ascii x189 "setAAD") "apply"
                       [|x189;((let x186 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x186 "push"
                                     [|(ArrayBufferView.t_to_js x184)|]);
                                (match x185 with
                                 | Some x187 ->
                                     ignore
                                       (Ojs.call x186 "push"
                                          [|(AnonymousInterface0.t_to_js x187)|])
                                 | None -> ());
                                x186))|])
        let (get_auth_tag : t -> Buffer.t) =
          fun (x190 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x190) "getAuthTag" [||])
      end
    let (create_cipher :
      algorithm:CipherCCMTypes.t ->
        password:BinaryLike.t -> options:CipherCCMOptions.t -> CipherCCM.t)
      =
      fun ~algorithm:(x191 : CipherCCMTypes.t) ->
        fun ~password:(x192 : BinaryLike.t) ->
          fun ~options:(x193 : CipherCCMOptions.t) ->
            CipherCCM.t_of_js
              (Ojs.call Import.crypto "createCipher"
                 [|(CipherCCMTypes.t_to_js x191);(BinaryLike.t_to_js x192);(
                   CipherCCMOptions.t_to_js x193)|])
    let (create_cipher :
      algorithm:CipherGCMTypes.t ->
        password:BinaryLike.t ->
          ?options:CipherGCMOptions.t -> unit -> CipherGCM.t)
      =
      fun ~algorithm:(x194 : CipherGCMTypes.t) ->
        fun ~password:(x195 : BinaryLike.t) ->
          fun ?options:(x196 : CipherGCMOptions.t option) ->
            fun () ->
              CipherGCM.t_of_js
                (let x199 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x199 "createCipher") "apply"
                   [|x199;((let x197 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x197 "push"
                                 [|(CipherGCMTypes.t_to_js x194)|]);
                            ignore
                              (Ojs.call x197 "push"
                                 [|(BinaryLike.t_to_js x195)|]);
                            (match x196 with
                             | Some x198 ->
                                 ignore
                                   (Ojs.call x197 "push"
                                      [|(CipherGCMOptions.t_to_js x198)|])
                             | None -> ());
                            x197))|])
    let (create_cipher :
      algorithm:string ->
        password:BinaryLike.t ->
          ?options:Stream.TransformOptions.t -> unit -> Cipher.t)
      =
      fun ~algorithm:(x200 : string) ->
        fun ~password:(x201 : BinaryLike.t) ->
          fun ?options:(x202 : Stream.TransformOptions.t option) ->
            fun () ->
              Cipher.t_of_js
                (let x205 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x205 "createCipher") "apply"
                   [|x205;((let x203 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x203 "push"
                                 [|(Ojs.string_to_js x200)|]);
                            ignore
                              (Ojs.call x203 "push"
                                 [|(BinaryLike.t_to_js x201)|]);
                            (match x202 with
                             | Some x204 ->
                                 ignore
                                   (Ojs.call x203 "push"
                                      [|(Stream.TransformOptions.t_to_js x204)|])
                             | None -> ());
                            x203))|])
    let (create_cipheriv :
      algorithm:CipherCCMTypes.t ->
        key:CipherKey.t ->
          iv:BinaryLike.t or_null ->
            options:CipherCCMOptions.t -> CipherCCM.t)
      =
      fun ~algorithm:(x206 : CipherCCMTypes.t) ->
        fun ~key:(x207 : CipherKey.t) ->
          fun ~iv:(x208 : BinaryLike.t or_null) ->
            fun ~options:(x210 : CipherCCMOptions.t) ->
              CipherCCM.t_of_js
                (Ojs.call Import.crypto "createCipheriv"
                   [|(CipherCCMTypes.t_to_js x206);(CipherKey.t_to_js x207);(
                     or_null_to_js BinaryLike.t_to_js x208);(CipherCCMOptions.t_to_js
                                                               x210)|])
    let (create_cipheriv :
      algorithm:CipherGCMTypes.t ->
        key:CipherKey.t ->
          iv:BinaryLike.t or_null ->
            ?options:CipherGCMOptions.t -> unit -> CipherGCM.t)
      =
      fun ~algorithm:(x211 : CipherGCMTypes.t) ->
        fun ~key:(x212 : CipherKey.t) ->
          fun ~iv:(x213 : BinaryLike.t or_null) ->
            fun ?options:(x214 : CipherGCMOptions.t option) ->
              fun () ->
                CipherGCM.t_of_js
                  (let x218 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x218 "createCipheriv")
                     "apply"
                     [|x218;((let x215 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x215 "push"
                                   [|(CipherGCMTypes.t_to_js x211)|]);
                              ignore
                                (Ojs.call x215 "push"
                                   [|(CipherKey.t_to_js x212)|]);
                              ignore
                                (Ojs.call x215 "push"
                                   [|(or_null_to_js BinaryLike.t_to_js x213)|]);
                              (match x214 with
                               | Some x216 ->
                                   ignore
                                     (Ojs.call x215 "push"
                                        [|(CipherGCMOptions.t_to_js x216)|])
                               | None -> ());
                              x215))|])
    let (create_cipheriv :
      algorithm:string ->
        key:CipherKey.t ->
          iv:BinaryLike.t or_null ->
            ?options:Stream.TransformOptions.t -> unit -> Cipher.t)
      =
      fun ~algorithm:(x219 : string) ->
        fun ~key:(x220 : CipherKey.t) ->
          fun ~iv:(x221 : BinaryLike.t or_null) ->
            fun ?options:(x222 : Stream.TransformOptions.t option) ->
              fun () ->
                Cipher.t_of_js
                  (let x226 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x226 "createCipheriv")
                     "apply"
                     [|x226;((let x223 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x223 "push"
                                   [|(Ojs.string_to_js x219)|]);
                              ignore
                                (Ojs.call x223 "push"
                                   [|(CipherKey.t_to_js x220)|]);
                              ignore
                                (Ojs.call x223 "push"
                                   [|(or_null_to_js BinaryLike.t_to_js x221)|]);
                              (match x222 with
                               | Some x224 ->
                                   ignore
                                     (Ojs.call x223 "push"
                                        [|(Stream.TransformOptions.t_to_js
                                             x224)|])
                               | None -> ());
                              x223))|])
    module Decipher =
      struct
        include struct include Stream.Transform end
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Decipher") [||])
        let (update : t -> data:ArrayBufferView.t -> Buffer.t) =
          fun (x228 : t) ->
            fun ~data:(x227 : ArrayBufferView.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x228) "update"
                   [|(ArrayBufferView.t_to_js x227)|])
        let (update' :
          t -> data:string -> input_encoding:Encoding.t -> Buffer.t) =
          fun (x231 : t) ->
            fun ~data:(x229 : string) ->
              fun ~input_encoding:(x230 : Encoding.t) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x231) "update"
                     [|(Ojs.string_to_js x229);(Encoding.t_to_js x230)|])
        let (update'' :
          t ->
            data:ArrayBufferView.t ->
              input_encoding:never or_undefined ->
                output_encoding:Encoding.t -> string)
          =
          fun (x236 : t) ->
            fun ~data:(x232 : ArrayBufferView.t) ->
              fun ~input_encoding:(x233 : never or_undefined) ->
                fun ~output_encoding:(x235 : Encoding.t) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x236) "update"
                       [|(ArrayBufferView.t_to_js x232);(or_undefined_to_js
                                                           never_to_js x233);(
                         Encoding.t_to_js x235)|])
        let (update''' :
          t ->
            data:string ->
              input_encoding:Encoding.t or_undefined ->
                output_encoding:Encoding.t -> string)
          =
          fun (x241 : t) ->
            fun ~data:(x237 : string) ->
              fun ~input_encoding:(x238 : Encoding.t or_undefined) ->
                fun ~output_encoding:(x240 : Encoding.t) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x241) "update"
                       [|(Ojs.string_to_js x237);(or_undefined_to_js
                                                    Encoding.t_to_js x238);(
                         Encoding.t_to_js x240)|])
        let (final : t -> Buffer.t) =
          fun (x242 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x242) "final" [||])
        let (final' : t -> output_encoding:BufferEncoding.t -> string) =
          fun (x244 : t) ->
            fun ~output_encoding:(x243 : BufferEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x244) "final"
                   [|(BufferEncoding.t_to_js x243)|])
        let (set_auto_padding : t -> ?auto_padding:bool -> unit -> t) =
          fun (x248 : t) ->
            fun ?auto_padding:(x245 : bool option) ->
              fun () ->
                t_of_js
                  (let x249 = t_to_js x248 in
                   Ojs.call (Ojs.get_prop_ascii x249 "setAutoPadding")
                     "apply"
                     [|x249;((let x246 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x245 with
                               | Some x247 ->
                                   ignore
                                     (Ojs.call x246 "push"
                                        [|(Ojs.bool_to_js x247)|])
                               | None -> ());
                              x246))|])
      end
    module DecipherCCM =
      struct
        include struct include Decipher end
        let (set_auth_tag : t -> buffer:ArrayBufferView.t -> t) =
          fun (x251 : t) ->
            fun ~buffer:(x250 : ArrayBufferView.t) ->
              t_of_js
                (Ojs.call (t_to_js x251) "setAuthTag"
                   [|(ArrayBufferView.t_to_js x250)|])
        let (set_aad :
          t -> buffer:ArrayBufferView.t -> options:AnonymousInterface0.t -> t)
          =
          fun (x254 : t) ->
            fun ~buffer:(x252 : ArrayBufferView.t) ->
              fun ~options:(x253 : AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x254) "setAAD"
                     [|(ArrayBufferView.t_to_js x252);(AnonymousInterface0.t_to_js
                                                         x253)|])
      end
    module DecipherGCM =
      struct
        include struct include Decipher end
        let (set_auth_tag : t -> buffer:ArrayBufferView.t -> t) =
          fun (x256 : t) ->
            fun ~buffer:(x255 : ArrayBufferView.t) ->
              t_of_js
                (Ojs.call (t_to_js x256) "setAuthTag"
                   [|(ArrayBufferView.t_to_js x255)|])
        let (set_aad :
          t ->
            buffer:ArrayBufferView.t ->
              ?options:AnonymousInterface0.t -> unit -> t)
          =
          fun (x261 : t) ->
            fun ~buffer:(x257 : ArrayBufferView.t) ->
              fun ?options:(x258 : AnonymousInterface0.t option) ->
                fun () ->
                  t_of_js
                    (let x262 = t_to_js x261 in
                     Ojs.call (Ojs.get_prop_ascii x262 "setAAD") "apply"
                       [|x262;((let x259 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x259 "push"
                                     [|(ArrayBufferView.t_to_js x257)|]);
                                (match x258 with
                                 | Some x260 ->
                                     ignore
                                       (Ojs.call x259 "push"
                                          [|(AnonymousInterface0.t_to_js x260)|])
                                 | None -> ());
                                x259))|])
      end
    let (create_decipher :
      algorithm:CipherCCMTypes.t ->
        password:BinaryLike.t -> options:CipherCCMOptions.t -> DecipherCCM.t)
      =
      fun ~algorithm:(x263 : CipherCCMTypes.t) ->
        fun ~password:(x264 : BinaryLike.t) ->
          fun ~options:(x265 : CipherCCMOptions.t) ->
            DecipherCCM.t_of_js
              (Ojs.call Import.crypto "createDecipher"
                 [|(CipherCCMTypes.t_to_js x263);(BinaryLike.t_to_js x264);(
                   CipherCCMOptions.t_to_js x265)|])
    let (create_decipher :
      algorithm:CipherGCMTypes.t ->
        password:BinaryLike.t ->
          ?options:CipherGCMOptions.t -> unit -> DecipherGCM.t)
      =
      fun ~algorithm:(x266 : CipherGCMTypes.t) ->
        fun ~password:(x267 : BinaryLike.t) ->
          fun ?options:(x268 : CipherGCMOptions.t option) ->
            fun () ->
              DecipherGCM.t_of_js
                (let x271 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x271 "createDecipher") "apply"
                   [|x271;((let x269 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x269 "push"
                                 [|(CipherGCMTypes.t_to_js x266)|]);
                            ignore
                              (Ojs.call x269 "push"
                                 [|(BinaryLike.t_to_js x267)|]);
                            (match x268 with
                             | Some x270 ->
                                 ignore
                                   (Ojs.call x269 "push"
                                      [|(CipherGCMOptions.t_to_js x270)|])
                             | None -> ());
                            x269))|])
    let (create_decipher :
      algorithm:string ->
        password:BinaryLike.t ->
          ?options:Stream.TransformOptions.t -> unit -> Decipher.t)
      =
      fun ~algorithm:(x272 : string) ->
        fun ~password:(x273 : BinaryLike.t) ->
          fun ?options:(x274 : Stream.TransformOptions.t option) ->
            fun () ->
              Decipher.t_of_js
                (let x277 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x277 "createDecipher") "apply"
                   [|x277;((let x275 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x275 "push"
                                 [|(Ojs.string_to_js x272)|]);
                            ignore
                              (Ojs.call x275 "push"
                                 [|(BinaryLike.t_to_js x273)|]);
                            (match x274 with
                             | Some x276 ->
                                 ignore
                                   (Ojs.call x275 "push"
                                      [|(Stream.TransformOptions.t_to_js x276)|])
                             | None -> ());
                            x275))|])
    let (create_decipheriv :
      algorithm:CipherCCMTypes.t ->
        key:CipherKey.t ->
          iv:BinaryLike.t or_null ->
            options:CipherCCMOptions.t -> DecipherCCM.t)
      =
      fun ~algorithm:(x278 : CipherCCMTypes.t) ->
        fun ~key:(x279 : CipherKey.t) ->
          fun ~iv:(x280 : BinaryLike.t or_null) ->
            fun ~options:(x282 : CipherCCMOptions.t) ->
              DecipherCCM.t_of_js
                (Ojs.call Import.crypto "createDecipheriv"
                   [|(CipherCCMTypes.t_to_js x278);(CipherKey.t_to_js x279);(
                     or_null_to_js BinaryLike.t_to_js x280);(CipherCCMOptions.t_to_js
                                                               x282)|])
    let (create_decipheriv :
      algorithm:CipherGCMTypes.t ->
        key:CipherKey.t ->
          iv:BinaryLike.t or_null ->
            ?options:CipherGCMOptions.t -> unit -> DecipherGCM.t)
      =
      fun ~algorithm:(x283 : CipherGCMTypes.t) ->
        fun ~key:(x284 : CipherKey.t) ->
          fun ~iv:(x285 : BinaryLike.t or_null) ->
            fun ?options:(x286 : CipherGCMOptions.t option) ->
              fun () ->
                DecipherGCM.t_of_js
                  (let x290 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x290 "createDecipheriv")
                     "apply"
                     [|x290;((let x287 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x287 "push"
                                   [|(CipherGCMTypes.t_to_js x283)|]);
                              ignore
                                (Ojs.call x287 "push"
                                   [|(CipherKey.t_to_js x284)|]);
                              ignore
                                (Ojs.call x287 "push"
                                   [|(or_null_to_js BinaryLike.t_to_js x285)|]);
                              (match x286 with
                               | Some x288 ->
                                   ignore
                                     (Ojs.call x287 "push"
                                        [|(CipherGCMOptions.t_to_js x288)|])
                               | None -> ());
                              x287))|])
    let (create_decipheriv :
      algorithm:string ->
        key:CipherKey.t ->
          iv:BinaryLike.t or_null ->
            ?options:Stream.TransformOptions.t -> unit -> Decipher.t)
      =
      fun ~algorithm:(x291 : string) ->
        fun ~key:(x292 : CipherKey.t) ->
          fun ~iv:(x293 : BinaryLike.t or_null) ->
            fun ?options:(x294 : Stream.TransformOptions.t option) ->
              fun () ->
                Decipher.t_of_js
                  (let x298 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x298 "createDecipheriv")
                     "apply"
                     [|x298;((let x295 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x295 "push"
                                   [|(Ojs.string_to_js x291)|]);
                              ignore
                                (Ojs.call x295 "push"
                                   [|(CipherKey.t_to_js x292)|]);
                              ignore
                                (Ojs.call x295 "push"
                                   [|(or_null_to_js BinaryLike.t_to_js x293)|]);
                              (match x294 with
                               | Some x296 ->
                                   ignore
                                     (Ojs.call x295 "push"
                                        [|(Stream.TransformOptions.t_to_js
                                             x296)|])
                               | None -> ());
                              x295))|])
    module KeyFormat =
      struct
        type t = [ `der  | `pem ]
        let rec t_of_js : Ojs.t -> t =
          fun (x300 : Ojs.t) ->
            let x301 = x300 in
            match Ojs.string_of_js x301 with
            | "der" -> `der
            | "pem" -> `pem
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x299 : [ `der  | `pem ]) ->
            match x299 with
            | `der -> Ojs.string_to_js "der"
            | `pem -> Ojs.string_to_js "pem"
      end
    module PrivateKeyInput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x303 : Ojs.t) -> x303
        and t_to_js : t -> Ojs.t = fun (x302 : Ojs.t) -> x302
        let (get_key : t -> Buffer.t or_string) =
          fun (x304 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x304) "key")
        let (set_key : t -> Buffer.t or_string -> unit) =
          fun (x306 : t) ->
            fun (x307 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x306) "key"
                (or_string_to_js Buffer.t_to_js x307)
        let (get_format : t -> KeyFormat.t) =
          fun (x309 : t) ->
            KeyFormat.t_of_js (Ojs.get_prop_ascii (t_to_js x309) "format")
        let (set_format : t -> KeyFormat.t -> unit) =
          fun (x310 : t) ->
            fun (x311 : KeyFormat.t) ->
              Ojs.set_prop_ascii (t_to_js x310) "format"
                (KeyFormat.t_to_js x311)
        let (get_type : t -> [ `pkcs1  | `pkcs8  | `sec1 ]) =
          fun (x312 : t) ->
            let x313 = Ojs.get_prop_ascii (t_to_js x312) "type" in
            match Ojs.string_of_js x313 with
            | "pkcs1" -> `pkcs1
            | "pkcs8" -> `pkcs8
            | "sec1" -> `sec1
            | _ -> assert false
        let (set_type : t -> [ `pkcs1  | `pkcs8  | `sec1 ] -> unit) =
          fun (x314 : t) ->
            fun (x315 : [ `pkcs1  | `pkcs8  | `sec1 ]) ->
              Ojs.set_prop_ascii (t_to_js x314) "type"
                (match x315 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `pkcs8 -> Ojs.string_to_js "pkcs8"
                 | `sec1 -> Ojs.string_to_js "sec1")
        let (get_passphrase : t -> Buffer.t or_string) =
          fun (x316 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x316) "passphrase")
        let (set_passphrase : t -> Buffer.t or_string -> unit) =
          fun (x318 : t) ->
            fun (x319 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x318) "passphrase"
                (or_string_to_js Buffer.t_to_js x319)
      end
    module PublicKeyInput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x322 : Ojs.t) -> x322
        and t_to_js : t -> Ojs.t = fun (x321 : Ojs.t) -> x321
        let (get_key : t -> Buffer.t or_string) =
          fun (x323 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x323) "key")
        let (set_key : t -> Buffer.t or_string -> unit) =
          fun (x325 : t) ->
            fun (x326 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x325) "key"
                (or_string_to_js Buffer.t_to_js x326)
        let (get_format : t -> KeyFormat.t) =
          fun (x328 : t) ->
            KeyFormat.t_of_js (Ojs.get_prop_ascii (t_to_js x328) "format")
        let (set_format : t -> KeyFormat.t -> unit) =
          fun (x329 : t) ->
            fun (x330 : KeyFormat.t) ->
              Ojs.set_prop_ascii (t_to_js x329) "format"
                (KeyFormat.t_to_js x330)
        let (get_type : t -> [ `pkcs1  | `spki ]) =
          fun (x331 : t) ->
            let x332 = Ojs.get_prop_ascii (t_to_js x331) "type" in
            match Ojs.string_of_js x332 with
            | "pkcs1" -> `pkcs1
            | "spki" -> `spki
            | _ -> assert false
        let (set_type : t -> [ `pkcs1  | `spki ] -> unit) =
          fun (x333 : t) ->
            fun (x334 : [ `pkcs1  | `spki ]) ->
              Ojs.set_prop_ascii (t_to_js x333) "type"
                (match x334 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `spki -> Ojs.string_to_js "spki")
      end
    let (create_private_key :
      key:(Buffer.t, PrivateKeyInput.t) union2 or_string -> KeyObject.t) =
      fun ~key:(x335 : (Buffer.t, PrivateKeyInput.t) union2 or_string) ->
        KeyObject.t_of_js
          (Ojs.call Import.crypto "createPrivateKey"
             [|(or_string_to_js
                  (fun (x336 : (Buffer.t, PrivateKeyInput.t) union2) ->
                     union2_to_js Buffer.t_to_js PrivateKeyInput.t_to_js x336)
                  x335)|])
    let (create_public_key :
      key:([ `U_s21_pkcs1 of PublicKeyInput.t 
           | `U_s23_private of KeyObject.t  | `U_s24_public of KeyObject.t 
           | `U_s27_secret of KeyObject.t 
           | `U_s28_spki of PublicKeyInput.t ],
        Buffer.t) or_ or_string -> KeyObject.t)
      =
      fun
        ~key:(x339 :
               ([ `U_s21_pkcs1 of PublicKeyInput.t 
                | `U_s23_private of KeyObject.t 
                | `U_s24_public of KeyObject.t 
                | `U_s27_secret of KeyObject.t 
                | `U_s28_spki of PublicKeyInput.t ], Buffer.t) or_ or_string)
        ->
        KeyObject.t_of_js
          (Ojs.call Import.crypto "createPublicKey"
             [|(or_string_to_js
                  (fun
                     (x340 :
                       ([ `U_s21_pkcs1 of PublicKeyInput.t 
                        | `U_s23_private of KeyObject.t 
                        | `U_s24_public of KeyObject.t 
                        | `U_s27_secret of KeyObject.t 
                        | `U_s28_spki of PublicKeyInput.t ], Buffer.t) or_)
                     ->
                     or__to_js
                       (fun
                          (x341 :
                            [ `U_s21_pkcs1 of PublicKeyInput.t 
                            | `U_s23_private of KeyObject.t 
                            | `U_s24_public of KeyObject.t 
                            | `U_s27_secret of KeyObject.t 
                            | `U_s28_spki of PublicKeyInput.t ])
                          ->
                          match x341 with
                          | `U_s21_pkcs1 x342 -> PublicKeyInput.t_to_js x342
                          | `U_s23_private x343 -> KeyObject.t_to_js x343
                          | `U_s24_public x344 -> KeyObject.t_to_js x344
                          | `U_s27_secret x345 -> KeyObject.t_to_js x345
                          | `U_s28_spki x346 -> PublicKeyInput.t_to_js x346)
                       Buffer.t_to_js x340) x339)|])
    let (create_secret_key : key:ArrayBufferView.t -> KeyObject.t) =
      fun ~key:(x348 : ArrayBufferView.t) ->
        KeyObject.t_of_js
          (Ojs.call Import.crypto "createSecretKey"
             [|(ArrayBufferView.t_to_js x348)|])
    module DSAEncoding =
      struct
        type t = [ `der  | `ieee_p1363 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x350 : Ojs.t) ->
            let x351 = x350 in
            match Ojs.string_of_js x351 with
            | "der" -> `der
            | "ieee-p1363" -> `ieee_p1363
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x349 : [ `der  | `ieee_p1363 ]) ->
            match x349 with
            | `der -> Ojs.string_to_js "der"
            | `ieee_p1363 -> Ojs.string_to_js "ieee-p1363"
      end
    module SigningOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x353 : Ojs.t) -> x353
        and t_to_js : t -> Ojs.t = fun (x352 : Ojs.t) -> x352
        let (get_padding : t -> int) =
          fun (x354 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x354) "padding")
        let (set_padding : t -> int -> unit) =
          fun (x355 : t) ->
            fun (x356 : int) ->
              Ojs.set_prop_ascii (t_to_js x355) "padding"
                (Ojs.int_to_js x356)
        let (get_salt_length : t -> int) =
          fun (x357 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x357) "saltLength")
        let (set_salt_length : t -> int -> unit) =
          fun (x358 : t) ->
            fun (x359 : int) ->
              Ojs.set_prop_ascii (t_to_js x358) "saltLength"
                (Ojs.int_to_js x359)
        let (get_dsa_encoding : t -> DSAEncoding.t) =
          fun (x360 : t) ->
            DSAEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x360) "dsaEncoding")
        let (set_dsa_encoding : t -> DSAEncoding.t -> unit) =
          fun (x361 : t) ->
            fun (x362 : DSAEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x361) "dsaEncoding"
                (DSAEncoding.t_to_js x362)
      end
    module SignPrivateKeyInput =
      struct
        include struct include PrivateKeyInput end
        let (cast' : t -> SigningOptions.t) =
          fun (x363 : t) -> SigningOptions.t_of_js (t_to_js x363)
      end
    module SignKeyObjectInput =
      struct
        include struct include SigningOptions end
        let (get_key : t -> KeyObject.t) =
          fun (x364 : t) ->
            KeyObject.t_of_js (Ojs.get_prop_ascii (t_to_js x364) "key")
        let (set_key : t -> KeyObject.t -> unit) =
          fun (x365 : t) ->
            fun (x366 : KeyObject.t) ->
              Ojs.set_prop_ascii (t_to_js x365) "key"
                (KeyObject.t_to_js x366)
      end
    module VerifyPublicKeyInput =
      struct
        include struct include PublicKeyInput end
        let (cast' : t -> SigningOptions.t) =
          fun (x367 : t) -> SigningOptions.t_of_js (t_to_js x367)
      end
    module VerifyKeyObjectInput =
      struct
        include struct include SigningOptions end
        let (get_key : t -> KeyObject.t) =
          fun (x368 : t) ->
            KeyObject.t_of_js (Ojs.get_prop_ascii (t_to_js x368) "key")
        let (set_key : t -> KeyObject.t -> unit) =
          fun (x369 : t) ->
            fun (x370 : KeyObject.t) ->
              Ojs.set_prop_ascii (t_to_js x369) "key"
                (KeyObject.t_to_js x370)
      end
    module KeyLike =
      struct
        type t = (Buffer.t, KeyObject.t) union2 or_string
        let rec t_of_js : Ojs.t -> t =
          fun (x375 : Ojs.t) ->
            or_string_of_js
              (fun (x376 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js KeyObject.t_of_js x376) x375
        and t_to_js : t -> Ojs.t =
          fun (x371 : (Buffer.t, KeyObject.t) union2 or_string) ->
            or_string_to_js
              (fun (x372 : (Buffer.t, KeyObject.t) union2) ->
                 union2_to_js Buffer.t_to_js KeyObject.t_to_js x372) x371
      end
    module Signer =
      struct
        include struct include Stream.Writable end
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Signer") [||])
        let (update : t -> data:BinaryLike.t -> t) =
          fun (x380 : t) ->
            fun ~data:(x379 : BinaryLike.t) ->
              t_of_js
                (Ojs.call (t_to_js x380) "update"
                   [|(BinaryLike.t_to_js x379)|])
        let (update' : t -> data:string -> input_encoding:Encoding.t -> t) =
          fun (x383 : t) ->
            fun ~data:(x381 : string) ->
              fun ~input_encoding:(x382 : Encoding.t) ->
                t_of_js
                  (Ojs.call (t_to_js x383) "update"
                     [|(Ojs.string_to_js x381);(Encoding.t_to_js x382)|])
        let (sign :
          t ->
            private_key:([ `U_s11_der of SignKeyObjectInput.t 
                         | `U_s18_ieee_p1363 of SignKeyObjectInput.t ],
              [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
              | `U_s22_pkcs8 of SignPrivateKeyInput.t 
              | `U_s23_private of KeyLike.t  | `U_s24_public of KeyLike.t 
              | `U_s26_sec1 of SignPrivateKeyInput.t 
              | `U_s27_secret of KeyLike.t ]) union2 -> Buffer.t)
          =
          fun (x395 : t) ->
            fun
              ~private_key:(x384 :
                             ([ `U_s11_der of SignKeyObjectInput.t 
                              | `U_s18_ieee_p1363 of SignKeyObjectInput.t ],
                               [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
                               | `U_s22_pkcs8 of SignPrivateKeyInput.t 
                               | `U_s23_private of KeyLike.t 
                               | `U_s24_public of KeyLike.t 
                               | `U_s26_sec1 of SignPrivateKeyInput.t 
                               | `U_s27_secret of KeyLike.t ]) union2)
              ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x395) "sign"
                   [|(union2_to_js
                        (fun
                           (x385 :
                             [ `U_s11_der of SignKeyObjectInput.t 
                             | `U_s18_ieee_p1363 of SignKeyObjectInput.t ])
                           ->
                           match x385 with
                           | `U_s11_der x386 ->
                               SignKeyObjectInput.t_to_js x386
                           | `U_s18_ieee_p1363 x387 ->
                               SignKeyObjectInput.t_to_js x387)
                        (fun
                           (x388 :
                             [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
                             | `U_s22_pkcs8 of SignPrivateKeyInput.t 
                             | `U_s23_private of KeyLike.t 
                             | `U_s24_public of KeyLike.t 
                             | `U_s26_sec1 of SignPrivateKeyInput.t 
                             | `U_s27_secret of KeyLike.t ])
                           ->
                           match x388 with
                           | `U_s21_pkcs1 x389 ->
                               SignPrivateKeyInput.t_to_js x389
                           | `U_s22_pkcs8 x390 ->
                               SignPrivateKeyInput.t_to_js x390
                           | `U_s23_private x391 -> KeyLike.t_to_js x391
                           | `U_s24_public x392 -> KeyLike.t_to_js x392
                           | `U_s26_sec1 x393 ->
                               SignPrivateKeyInput.t_to_js x393
                           | `U_s27_secret x394 -> KeyLike.t_to_js x394) x384)|])
        let (sign' :
          t ->
            private_key:([ `U_s11_der of SignKeyObjectInput.t 
                         | `U_s18_ieee_p1363 of SignKeyObjectInput.t ],
              [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
              | `U_s22_pkcs8 of SignPrivateKeyInput.t 
              | `U_s23_private of KeyLike.t  | `U_s24_public of KeyLike.t 
              | `U_s26_sec1 of SignPrivateKeyInput.t 
              | `U_s27_secret of KeyLike.t ]) union2 ->
              output_format:BinaryToTextEncoding.t -> string)
          =
          fun (x408 : t) ->
            fun
              ~private_key:(x396 :
                             ([ `U_s11_der of SignKeyObjectInput.t 
                              | `U_s18_ieee_p1363 of SignKeyObjectInput.t ],
                               [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
                               | `U_s22_pkcs8 of SignPrivateKeyInput.t 
                               | `U_s23_private of KeyLike.t 
                               | `U_s24_public of KeyLike.t 
                               | `U_s26_sec1 of SignPrivateKeyInput.t 
                               | `U_s27_secret of KeyLike.t ]) union2)
              ->
              fun ~output_format:(x407 : BinaryToTextEncoding.t) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x408) "sign"
                     [|(union2_to_js
                          (fun
                             (x397 :
                               [ `U_s11_der of SignKeyObjectInput.t 
                               | `U_s18_ieee_p1363 of SignKeyObjectInput.t ])
                             ->
                             match x397 with
                             | `U_s11_der x398 ->
                                 SignKeyObjectInput.t_to_js x398
                             | `U_s18_ieee_p1363 x399 ->
                                 SignKeyObjectInput.t_to_js x399)
                          (fun
                             (x400 :
                               [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
                               | `U_s22_pkcs8 of SignPrivateKeyInput.t 
                               | `U_s23_private of KeyLike.t 
                               | `U_s24_public of KeyLike.t 
                               | `U_s26_sec1 of SignPrivateKeyInput.t 
                               | `U_s27_secret of KeyLike.t ])
                             ->
                             match x400 with
                             | `U_s21_pkcs1 x401 ->
                                 SignPrivateKeyInput.t_to_js x401
                             | `U_s22_pkcs8 x402 ->
                                 SignPrivateKeyInput.t_to_js x402
                             | `U_s23_private x403 -> KeyLike.t_to_js x403
                             | `U_s24_public x404 -> KeyLike.t_to_js x404
                             | `U_s26_sec1 x405 ->
                                 SignPrivateKeyInput.t_to_js x405
                             | `U_s27_secret x406 -> KeyLike.t_to_js x406)
                          x396);(BinaryToTextEncoding.t_to_js x407)|])
      end
    let (create_sign :
      algorithm:string ->
        ?options:Stream.WritableOptions.t -> unit -> Signer.t)
      =
      fun ~algorithm:(x409 : string) ->
        fun ?options:(x410 : Stream.WritableOptions.t option) ->
          fun () ->
            Signer.t_of_js
              (let x413 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x413 "createSign") "apply"
                 [|x413;((let x411 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x411 "push" [|(Ojs.string_to_js x409)|]);
                          (match x410 with
                           | Some x412 ->
                               ignore
                                 (Ojs.call x411 "push"
                                    [|(Stream.WritableOptions.t_to_js x412)|])
                           | None -> ());
                          x411))|])
    module Verify =
      struct
        include struct include Stream.Writable end
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Verify") [||])
        let (update : t -> data:BinaryLike.t -> t) =
          fun (x415 : t) ->
            fun ~data:(x414 : BinaryLike.t) ->
              t_of_js
                (Ojs.call (t_to_js x415) "update"
                   [|(BinaryLike.t_to_js x414)|])
        let (update' : t -> data:string -> input_encoding:Encoding.t -> t) =
          fun (x418 : t) ->
            fun ~data:(x416 : string) ->
              fun ~input_encoding:(x417 : Encoding.t) ->
                t_of_js
                  (Ojs.call (t_to_js x418) "update"
                     [|(Ojs.string_to_js x416);(Encoding.t_to_js x417)|])
        let (verify :
          t ->
            object_:([ `U_s11_der of VerifyKeyObjectInput.t 
                     | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ],
              [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
              | `U_s23_private of KeyLike.t  | `U_s24_public of KeyLike.t 
              | `U_s27_secret of KeyLike.t 
              | `U_s28_spki of VerifyPublicKeyInput.t ]) union2 ->
              signature:ArrayBufferView.t -> bool)
          =
          fun (x430 : t) ->
            fun
              ~object_:(x419 :
                         ([ `U_s11_der of VerifyKeyObjectInput.t 
                          | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ],
                           [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
                           | `U_s23_private of KeyLike.t 
                           | `U_s24_public of KeyLike.t 
                           | `U_s27_secret of KeyLike.t 
                           | `U_s28_spki of VerifyPublicKeyInput.t ]) union2)
              ->
              fun ~signature:(x429 : ArrayBufferView.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x430) "verify"
                     [|(union2_to_js
                          (fun
                             (x420 :
                               [ `U_s11_der of VerifyKeyObjectInput.t 
                               | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ])
                             ->
                             match x420 with
                             | `U_s11_der x421 ->
                                 VerifyKeyObjectInput.t_to_js x421
                             | `U_s18_ieee_p1363 x422 ->
                                 VerifyKeyObjectInput.t_to_js x422)
                          (fun
                             (x423 :
                               [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
                               | `U_s23_private of KeyLike.t 
                               | `U_s24_public of KeyLike.t 
                               | `U_s27_secret of KeyLike.t 
                               | `U_s28_spki of VerifyPublicKeyInput.t ])
                             ->
                             match x423 with
                             | `U_s21_pkcs1 x424 ->
                                 VerifyPublicKeyInput.t_to_js x424
                             | `U_s23_private x425 -> KeyLike.t_to_js x425
                             | `U_s24_public x426 -> KeyLike.t_to_js x426
                             | `U_s27_secret x427 -> KeyLike.t_to_js x427
                             | `U_s28_spki x428 ->
                                 VerifyPublicKeyInput.t_to_js x428) x419);(
                       ArrayBufferView.t_to_js x429)|])
        let (verify' :
          t ->
            object_:([ `U_s11_der of VerifyKeyObjectInput.t 
                     | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ],
              [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
              | `U_s23_private of KeyLike.t  | `U_s24_public of KeyLike.t 
              | `U_s27_secret of KeyLike.t 
              | `U_s28_spki of VerifyPublicKeyInput.t ]) union2 ->
              signature:string ->
                ?signature_format:BinaryToTextEncoding.t -> unit -> bool)
          =
          fun (x445 : t) ->
            fun
              ~object_:(x431 :
                         ([ `U_s11_der of VerifyKeyObjectInput.t 
                          | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ],
                           [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
                           | `U_s23_private of KeyLike.t 
                           | `U_s24_public of KeyLike.t 
                           | `U_s27_secret of KeyLike.t 
                           | `U_s28_spki of VerifyPublicKeyInput.t ]) union2)
              ->
              fun ~signature:(x432 : string) ->
                fun ?signature_format:(x433 : BinaryToTextEncoding.t option)
                  ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x446 = t_to_js x445 in
                       Ojs.call (Ojs.get_prop_ascii x446 "verify") "apply"
                         [|x446;((let x434 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x434 "push"
                                       [|(union2_to_js
                                            (fun
                                               (x436 :
                                                 [
                                                   `U_s11_der of
                                                     VerifyKeyObjectInput.t 
                                                 | `U_s18_ieee_p1363 of
                                                     VerifyKeyObjectInput.t ])
                                               ->
                                               match x436 with
                                               | `U_s11_der x437 ->
                                                   VerifyKeyObjectInput.t_to_js
                                                     x437
                                               | `U_s18_ieee_p1363 x438 ->
                                                   VerifyKeyObjectInput.t_to_js
                                                     x438)
                                            (fun
                                               (x439 :
                                                 [
                                                   `U_s21_pkcs1 of
                                                     VerifyPublicKeyInput.t 
                                                 | `U_s23_private of
                                                     KeyLike.t 
                                                 | `U_s24_public of KeyLike.t 
                                                 | `U_s27_secret of KeyLike.t 
                                                 | `U_s28_spki of
                                                     VerifyPublicKeyInput.t ])
                                               ->
                                               match x439 with
                                               | `U_s21_pkcs1 x440 ->
                                                   VerifyPublicKeyInput.t_to_js
                                                     x440
                                               | `U_s23_private x441 ->
                                                   KeyLike.t_to_js x441
                                               | `U_s24_public x442 ->
                                                   KeyLike.t_to_js x442
                                               | `U_s27_secret x443 ->
                                                   KeyLike.t_to_js x443
                                               | `U_s28_spki x444 ->
                                                   VerifyPublicKeyInput.t_to_js
                                                     x444) x431)|]);
                                  ignore
                                    (Ojs.call x434 "push"
                                       [|(Ojs.string_to_js x432)|]);
                                  (match x433 with
                                   | Some x435 ->
                                       ignore
                                         (Ojs.call x434 "push"
                                            [|(BinaryToTextEncoding.t_to_js
                                                 x435)|])
                                   | None -> ());
                                  x434))|])
      end
    let (create_verify :
      algorithm:string ->
        ?options:Stream.WritableOptions.t -> unit -> Verify.t)
      =
      fun ~algorithm:(x447 : string) ->
        fun ?options:(x448 : Stream.WritableOptions.t option) ->
          fun () ->
            Verify.t_of_js
              (let x451 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x451 "createVerify") "apply"
                 [|x451;((let x449 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x449 "push" [|(Ojs.string_to_js x447)|]);
                          (match x448 with
                           | Some x450 ->
                               ignore
                                 (Ojs.call x449 "push"
                                    [|(Stream.WritableOptions.t_to_js x450)|])
                           | None -> ());
                          x449))|])
    module DiffieHellman =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x453 : Ojs.t) -> x453
        and t_to_js : t -> Ojs.t = fun (x452 : Ojs.t) -> x452
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "DiffieHellman")
                 [||])
        let (generate_keys : t -> Buffer.t) =
          fun (x454 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x454) "generateKeys" [||])
        let (generate_keys' : t -> encoding:BinaryToTextEncoding.t -> string)
          =
          fun (x456 : t) ->
            fun ~encoding:(x455 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x456) "generateKeys"
                   [|(BinaryToTextEncoding.t_to_js x455)|])
        let (compute_secret :
          t -> other_public_key:ArrayBufferView.t -> Buffer.t) =
          fun (x458 : t) ->
            fun ~other_public_key:(x457 : ArrayBufferView.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x458) "computeSecret"
                   [|(ArrayBufferView.t_to_js x457)|])
        let (compute_secret' :
          t ->
            other_public_key:string ->
              input_encoding:BinaryToTextEncoding.t -> Buffer.t)
          =
          fun (x461 : t) ->
            fun ~other_public_key:(x459 : string) ->
              fun ~input_encoding:(x460 : BinaryToTextEncoding.t) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x461) "computeSecret"
                     [|(Ojs.string_to_js x459);(BinaryToTextEncoding.t_to_js
                                                  x460)|])
        let (compute_secret'' :
          t ->
            other_public_key:ArrayBufferView.t ->
              output_encoding:BinaryToTextEncoding.t -> string)
          =
          fun (x464 : t) ->
            fun ~other_public_key:(x462 : ArrayBufferView.t) ->
              fun ~output_encoding:(x463 : BinaryToTextEncoding.t) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x464) "computeSecret"
                     [|(ArrayBufferView.t_to_js x462);(BinaryToTextEncoding.t_to_js
                                                         x463)|])
        let (compute_secret''' :
          t ->
            other_public_key:string ->
              input_encoding:BinaryToTextEncoding.t ->
                output_encoding:BinaryToTextEncoding.t -> string)
          =
          fun (x468 : t) ->
            fun ~other_public_key:(x465 : string) ->
              fun ~input_encoding:(x466 : BinaryToTextEncoding.t) ->
                fun ~output_encoding:(x467 : BinaryToTextEncoding.t) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x468) "computeSecret"
                       [|(Ojs.string_to_js x465);(BinaryToTextEncoding.t_to_js
                                                    x466);(BinaryToTextEncoding.t_to_js
                                                             x467)|])
        let (get_prime : t -> Buffer.t) =
          fun (x469 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x469) "getPrime" [||])
        let (get_prime' : t -> encoding:BinaryToTextEncoding.t -> string) =
          fun (x471 : t) ->
            fun ~encoding:(x470 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x471) "getPrime"
                   [|(BinaryToTextEncoding.t_to_js x470)|])
        let (get_generator : t -> Buffer.t) =
          fun (x472 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x472) "getGenerator" [||])
        let (get_generator' : t -> encoding:BinaryToTextEncoding.t -> string)
          =
          fun (x474 : t) ->
            fun ~encoding:(x473 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x474) "getGenerator"
                   [|(BinaryToTextEncoding.t_to_js x473)|])
        let (get_public_key : t -> Buffer.t) =
          fun (x475 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x475) "getPublicKey" [||])
        let (get_public_key' :
          t -> encoding:BinaryToTextEncoding.t -> string) =
          fun (x477 : t) ->
            fun ~encoding:(x476 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x477) "getPublicKey"
                   [|(BinaryToTextEncoding.t_to_js x476)|])
        let (get_private_key : t -> Buffer.t) =
          fun (x478 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x478) "getPrivateKey" [||])
        let (get_private_key' :
          t -> encoding:BinaryToTextEncoding.t -> string) =
          fun (x480 : t) ->
            fun ~encoding:(x479 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x480) "getPrivateKey"
                   [|(BinaryToTextEncoding.t_to_js x479)|])
        let (set_public_key : t -> public_key:ArrayBufferView.t -> unit) =
          fun (x482 : t) ->
            fun ~public_key:(x481 : ArrayBufferView.t) ->
              ignore
                (Ojs.call (t_to_js x482) "setPublicKey"
                   [|(ArrayBufferView.t_to_js x481)|])
        let (set_public_key' :
          t -> public_key:string -> encoding:BufferEncoding.t -> unit) =
          fun (x485 : t) ->
            fun ~public_key:(x483 : string) ->
              fun ~encoding:(x484 : BufferEncoding.t) ->
                ignore
                  (Ojs.call (t_to_js x485) "setPublicKey"
                     [|(Ojs.string_to_js x483);(BufferEncoding.t_to_js x484)|])
        let (set_private_key : t -> private_key:ArrayBufferView.t -> unit) =
          fun (x487 : t) ->
            fun ~private_key:(x486 : ArrayBufferView.t) ->
              ignore
                (Ojs.call (t_to_js x487) "setPrivateKey"
                   [|(ArrayBufferView.t_to_js x486)|])
        let (set_private_key' :
          t -> private_key:string -> encoding:BufferEncoding.t -> unit) =
          fun (x490 : t) ->
            fun ~private_key:(x488 : string) ->
              fun ~encoding:(x489 : BufferEncoding.t) ->
                ignore
                  (Ojs.call (t_to_js x490) "setPrivateKey"
                     [|(Ojs.string_to_js x488);(BufferEncoding.t_to_js x489)|])
        let (get_verify_error : t -> int) =
          fun (x491 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x491) "verifyError")
        let (set_verify_error : t -> int -> unit) =
          fun (x492 : t) ->
            fun (x493 : int) ->
              Ojs.set_prop_ascii (t_to_js x492) "verifyError"
                (Ojs.int_to_js x493)
      end
    let (create_diffie_hellman :
      prime_length:int ->
        ?generator:ArrayBufferView.t or_number -> unit -> DiffieHellman.t)
      =
      fun ~prime_length:(x494 : int) ->
        fun ?generator:(x495 : ArrayBufferView.t or_number option) ->
          fun () ->
            DiffieHellman.t_of_js
              (let x499 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x499 "createDiffieHellman")
                 "apply"
                 [|x499;((let x496 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x496 "push" [|(Ojs.int_to_js x494)|]);
                          (match x495 with
                           | Some x497 ->
                               ignore
                                 (Ojs.call x496 "push"
                                    [|(or_number_to_js
                                         ArrayBufferView.t_to_js x497)|])
                           | None -> ());
                          x496))|])
    let (create_diffie_hellman : prime:ArrayBufferView.t -> DiffieHellman.t)
      =
      fun ~prime:(x500 : ArrayBufferView.t) ->
        DiffieHellman.t_of_js
          (Ojs.call Import.crypto "createDiffieHellman"
             [|(ArrayBufferView.t_to_js x500)|])
    let (create_diffie_hellman :
      prime:string ->
        prime_encoding:BinaryToTextEncoding.t -> DiffieHellman.t)
      =
      fun ~prime:(x501 : string) ->
        fun ~prime_encoding:(x502 : BinaryToTextEncoding.t) ->
          DiffieHellman.t_of_js
            (Ojs.call Import.crypto "createDiffieHellman"
               [|(Ojs.string_to_js x501);(BinaryToTextEncoding.t_to_js x502)|])
    let (create_diffie_hellman :
      prime:string ->
        prime_encoding:BinaryToTextEncoding.t ->
          generator:ArrayBufferView.t or_number -> DiffieHellman.t)
      =
      fun ~prime:(x503 : string) ->
        fun ~prime_encoding:(x504 : BinaryToTextEncoding.t) ->
          fun ~generator:(x505 : ArrayBufferView.t or_number) ->
            DiffieHellman.t_of_js
              (Ojs.call Import.crypto "createDiffieHellman"
                 [|(Ojs.string_to_js x503);(BinaryToTextEncoding.t_to_js x504);(
                   or_number_to_js ArrayBufferView.t_to_js x505)|])
    let (create_diffie_hellman :
      prime:string ->
        prime_encoding:BinaryToTextEncoding.t ->
          generator:string ->
            generator_encoding:BinaryToTextEncoding.t -> DiffieHellman.t)
      =
      fun ~prime:(x507 : string) ->
        fun ~prime_encoding:(x508 : BinaryToTextEncoding.t) ->
          fun ~generator:(x509 : string) ->
            fun ~generator_encoding:(x510 : BinaryToTextEncoding.t) ->
              DiffieHellman.t_of_js
                (Ojs.call Import.crypto "createDiffieHellman"
                   [|(Ojs.string_to_js x507);(BinaryToTextEncoding.t_to_js
                                                x508);(Ojs.string_to_js x509);(
                     BinaryToTextEncoding.t_to_js x510)|])
    let (get_diffie_hellman : group_name:string -> DiffieHellman.t) =
      fun ~group_name:(x511 : string) ->
        DiffieHellman.t_of_js
          (Ojs.call Import.crypto "getDiffieHellman"
             [|(Ojs.string_to_js x511)|])
    let (pbkdf2 :
      password:BinaryLike.t ->
        salt:BinaryLike.t ->
          iterations:int ->
            keylen:int ->
              digest:string ->
                callback:(err:Error.t or_null -> derived_key:Buffer.t -> any)
                  -> unit)
      =
      fun ~password:(x512 : BinaryLike.t) ->
        fun ~salt:(x513 : BinaryLike.t) ->
          fun ~iterations:(x514 : int) ->
            fun ~keylen:(x515 : int) ->
              fun ~digest:(x516 : string) ->
                fun
                  ~callback:(x517 :
                              err:Error.t or_null ->
                                derived_key:Buffer.t -> any)
                  ->
                  ignore
                    (Ojs.call Import.crypto "pbkdf2"
                       [|(BinaryLike.t_to_js x512);(BinaryLike.t_to_js x513);(
                         Ojs.int_to_js x514);(Ojs.int_to_js x515);(Ojs.string_to_js
                                                                    x516);(
                         Ojs.fun_to_js 2
                           (fun (x518 : Ojs.t) ->
                              fun (x520 : Ojs.t) ->
                                any_to_js
                                  (x517
                                     ~err:(or_null_of_js Error.t_of_js x518)
                                     ~derived_key:(Buffer.t_of_js x520))))|])
    let (pbkdf2Sync :
      password:BinaryLike.t ->
        salt:BinaryLike.t ->
          iterations:int -> keylen:int -> digest:string -> Buffer.t)
      =
      fun ~password:(x521 : BinaryLike.t) ->
        fun ~salt:(x522 : BinaryLike.t) ->
          fun ~iterations:(x523 : int) ->
            fun ~keylen:(x524 : int) ->
              fun ~digest:(x525 : string) ->
                Buffer.t_of_js
                  (Ojs.call Import.crypto "pbkdf2Sync"
                     [|(BinaryLike.t_to_js x521);(BinaryLike.t_to_js x522);(
                       Ojs.int_to_js x523);(Ojs.int_to_js x524);(Ojs.string_to_js
                                                                   x525)|])
    let (random_bytes : size:int -> Buffer.t) =
      fun ~size:(x526 : int) ->
        Buffer.t_of_js
          (Ojs.call Import.crypto "randomBytes" [|(Ojs.int_to_js x526)|])
    let (random_bytes :
      size:int ->
        callback:(err:Error.t or_null -> buf:Buffer.t -> unit) -> unit)
      =
      fun ~size:(x527 : int) ->
        fun ~callback:(x528 : err:Error.t or_null -> buf:Buffer.t -> unit) ->
          ignore
            (Ojs.call Import.crypto "randomBytes"
               [|(Ojs.int_to_js x527);(Ojs.fun_to_js 2
                                         (fun (x529 : Ojs.t) ->
                                            fun (x531 : Ojs.t) ->
                                              x528
                                                ~err:(or_null_of_js
                                                        Error.t_of_js x529)
                                                ~buf:(Buffer.t_of_js x531)))|])
    let (pseudo_random_bytes : size:int -> Buffer.t) =
      fun ~size:(x532 : int) ->
        Buffer.t_of_js
          (Ojs.call Import.crypto "pseudoRandomBytes"
             [|(Ojs.int_to_js x532)|])
    let (pseudo_random_bytes :
      size:int ->
        callback:(err:Error.t or_null -> buf:Buffer.t -> unit) -> unit)
      =
      fun ~size:(x533 : int) ->
        fun ~callback:(x534 : err:Error.t or_null -> buf:Buffer.t -> unit) ->
          ignore
            (Ojs.call Import.crypto "pseudoRandomBytes"
               [|(Ojs.int_to_js x533);(Ojs.fun_to_js 2
                                         (fun (x535 : Ojs.t) ->
                                            fun (x537 : Ojs.t) ->
                                              x534
                                                ~err:(or_null_of_js
                                                        Error.t_of_js x535)
                                                ~buf:(Buffer.t_of_js x537)))|])
    let (random_int : max:int -> int) =
      fun ~max:(x538 : int) ->
        Ojs.int_of_js
          (Ojs.call Import.crypto "randomInt" [|(Ojs.int_to_js x538)|])
    let (random_int : min:int -> max:int -> int) =
      fun ~min:(x539 : int) ->
        fun ~max:(x540 : int) ->
          Ojs.int_of_js
            (Ojs.call Import.crypto "randomInt"
               [|(Ojs.int_to_js x539);(Ojs.int_to_js x540)|])
    let (random_int :
      max:int -> callback:(err:Error.t or_null -> value:int -> unit) -> unit)
      =
      fun ~max:(x541 : int) ->
        fun ~callback:(x542 : err:Error.t or_null -> value:int -> unit) ->
          ignore
            (Ojs.call Import.crypto "randomInt"
               [|(Ojs.int_to_js x541);(Ojs.fun_to_js 2
                                         (fun (x543 : Ojs.t) ->
                                            fun (x545 : Ojs.t) ->
                                              x542
                                                ~err:(or_null_of_js
                                                        Error.t_of_js x543)
                                                ~value:(Ojs.int_of_js x545)))|])
    let (random_int :
      min:int ->
        max:int ->
          callback:(err:Error.t or_null -> value:int -> unit) -> unit)
      =
      fun ~min:(x546 : int) ->
        fun ~max:(x547 : int) ->
          fun ~callback:(x548 : err:Error.t or_null -> value:int -> unit) ->
            ignore
              (Ojs.call Import.crypto "randomInt"
                 [|(Ojs.int_to_js x546);(Ojs.int_to_js x547);(Ojs.fun_to_js 2
                                                                (fun
                                                                   (x549 :
                                                                    Ojs.t)
                                                                   ->
                                                                   fun
                                                                    (x551 :
                                                                    Ojs.t) ->
                                                                    x548
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x549)
                                                                    ~value:(
                                                                    Ojs.int_of_js
                                                                    x551)))|])
    let (random_fill_sync :
      buffer:'T -> ?offset:int -> ?size:int -> unit -> 'T) =
      fun ~buffer:(x552 : 'T) ->
        fun ?offset:(x553 : int option) ->
          fun ?size:(x554 : int option) ->
            fun () ->
              Obj.magic
                (let x558 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x558 "randomFillSync") "apply"
                   [|x558;((let x555 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x555 "push" [|(Obj.magic x552)|]);
                            (match x553 with
                             | Some x557 ->
                                 ignore
                                   (Ojs.call x555 "push"
                                      [|(Ojs.int_to_js x557)|])
                             | None -> ());
                            (match x554 with
                             | Some x556 ->
                                 ignore
                                   (Ojs.call x555 "push"
                                      [|(Ojs.int_to_js x556)|])
                             | None -> ());
                            x555))|])
    let (random_fill :
      buffer:'T -> callback:(err:Error.t or_null -> buf:'T -> unit) -> unit)
      =
      fun ~buffer:(x559 : 'T) ->
        fun ~callback:(x560 : err:Error.t or_null -> buf:'T -> unit) ->
          ignore
            (Ojs.call Import.crypto "randomFill"
               [|(Obj.magic x559);(Ojs.fun_to_js 2
                                     (fun (x561 : Ojs.t) ->
                                        fun (x563 : Ojs.t) ->
                                          x560
                                            ~err:(or_null_of_js Error.t_of_js
                                                    x561)
                                            ~buf:(Obj.magic x563)))|])
    let (random_fill :
      buffer:'T ->
        offset:int ->
          callback:(err:Error.t or_null -> buf:'T -> unit) -> unit)
      =
      fun ~buffer:(x564 : 'T) ->
        fun ~offset:(x565 : int) ->
          fun ~callback:(x566 : err:Error.t or_null -> buf:'T -> unit) ->
            ignore
              (Ojs.call Import.crypto "randomFill"
                 [|(Obj.magic x564);(Ojs.int_to_js x565);(Ojs.fun_to_js 2
                                                            (fun
                                                               (x567 : Ojs.t)
                                                               ->
                                                               fun
                                                                 (x569 :
                                                                   Ojs.t)
                                                                 ->
                                                                 x566
                                                                   ~err:(
                                                                   or_null_of_js
                                                                    Error.t_of_js
                                                                    x567)
                                                                   ~buf:(
                                                                   Obj.magic
                                                                    x569)))|])
    let (random_fill :
      buffer:'T ->
        offset:int ->
          size:int ->
            callback:(err:Error.t or_null -> buf:'T -> unit) -> unit)
      =
      fun ~buffer:(x570 : 'T) ->
        fun ~offset:(x571 : int) ->
          fun ~size:(x572 : int) ->
            fun ~callback:(x573 : err:Error.t or_null -> buf:'T -> unit) ->
              ignore
                (Ojs.call Import.crypto "randomFill"
                   [|(Obj.magic x570);(Ojs.int_to_js x571);(Ojs.int_to_js
                                                              x572);(
                     Ojs.fun_to_js 2
                       (fun (x574 : Ojs.t) ->
                          fun (x576 : Ojs.t) ->
                            x573 ~err:(or_null_of_js Error.t_of_js x574)
                              ~buf:(Obj.magic x576)))|])
    module ScryptOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x578 : Ojs.t) -> x578
        and t_to_js : t -> Ojs.t = fun (x577 : Ojs.t) -> x577
        let (get_cost : t -> int) =
          fun (x579 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x579) "cost")
        let (set_cost : t -> int -> unit) =
          fun (x580 : t) ->
            fun (x581 : int) ->
              Ojs.set_prop_ascii (t_to_js x580) "cost" (Ojs.int_to_js x581)
        let (get_block_size : t -> int) =
          fun (x582 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x582) "blockSize")
        let (set_block_size : t -> int -> unit) =
          fun (x583 : t) ->
            fun (x584 : int) ->
              Ojs.set_prop_ascii (t_to_js x583) "blockSize"
                (Ojs.int_to_js x584)
        let (get_parallelization : t -> int) =
          fun (x585 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x585) "parallelization")
        let (set_parallelization : t -> int -> unit) =
          fun (x586 : t) ->
            fun (x587 : int) ->
              Ojs.set_prop_ascii (t_to_js x586) "parallelization"
                (Ojs.int_to_js x587)
        let (get_n : t -> int) =
          fun (x588 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x588) "N")
        let (set_n : t -> int -> unit) =
          fun (x589 : t) ->
            fun (x590 : int) ->
              Ojs.set_prop_ascii (t_to_js x589) "N" (Ojs.int_to_js x590)
        let (get_r : t -> int) =
          fun (x591 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x591) "r")
        let (set_r : t -> int -> unit) =
          fun (x592 : t) ->
            fun (x593 : int) ->
              Ojs.set_prop_ascii (t_to_js x592) "r" (Ojs.int_to_js x593)
        let (get_p : t -> int) =
          fun (x594 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x594) "p")
        let (set_p : t -> int -> unit) =
          fun (x595 : t) ->
            fun (x596 : int) ->
              Ojs.set_prop_ascii (t_to_js x595) "p" (Ojs.int_to_js x596)
        let (get_maxmem : t -> int) =
          fun (x597 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x597) "maxmem")
        let (set_maxmem : t -> int -> unit) =
          fun (x598 : t) ->
            fun (x599 : int) ->
              Ojs.set_prop_ascii (t_to_js x598) "maxmem" (Ojs.int_to_js x599)
      end
    let (scrypt :
      password:BinaryLike.t ->
        salt:BinaryLike.t ->
          keylen:int ->
            callback:(err:Error.t or_null -> derived_key:Buffer.t -> unit) ->
              unit)
      =
      fun ~password:(x600 : BinaryLike.t) ->
        fun ~salt:(x601 : BinaryLike.t) ->
          fun ~keylen:(x602 : int) ->
            fun
              ~callback:(x603 :
                          err:Error.t or_null -> derived_key:Buffer.t -> unit)
              ->
              ignore
                (Ojs.call Import.crypto "scrypt"
                   [|(BinaryLike.t_to_js x600);(BinaryLike.t_to_js x601);(
                     Ojs.int_to_js x602);(Ojs.fun_to_js 2
                                            (fun (x604 : Ojs.t) ->
                                               fun (x606 : Ojs.t) ->
                                                 x603
                                                   ~err:(or_null_of_js
                                                           Error.t_of_js x604)
                                                   ~derived_key:(Buffer.t_of_js
                                                                   x606)))|])
    let (scrypt :
      password:BinaryLike.t ->
        salt:BinaryLike.t ->
          keylen:int ->
            options:ScryptOptions.t ->
              callback:(err:Error.t or_null -> derived_key:Buffer.t -> unit)
                -> unit)
      =
      fun ~password:(x607 : BinaryLike.t) ->
        fun ~salt:(x608 : BinaryLike.t) ->
          fun ~keylen:(x609 : int) ->
            fun ~options:(x610 : ScryptOptions.t) ->
              fun
                ~callback:(x611 :
                            err:Error.t or_null ->
                              derived_key:Buffer.t -> unit)
                ->
                ignore
                  (Ojs.call Import.crypto "scrypt"
                     [|(BinaryLike.t_to_js x607);(BinaryLike.t_to_js x608);(
                       Ojs.int_to_js x609);(ScryptOptions.t_to_js x610);(
                       Ojs.fun_to_js 2
                         (fun (x612 : Ojs.t) ->
                            fun (x614 : Ojs.t) ->
                              x611 ~err:(or_null_of_js Error.t_of_js x612)
                                ~derived_key:(Buffer.t_of_js x614)))|])
    let (scrypt_sync :
      password:BinaryLike.t ->
        salt:BinaryLike.t ->
          keylen:int -> ?options:ScryptOptions.t -> unit -> Buffer.t)
      =
      fun ~password:(x615 : BinaryLike.t) ->
        fun ~salt:(x616 : BinaryLike.t) ->
          fun ~keylen:(x617 : int) ->
            fun ?options:(x618 : ScryptOptions.t option) ->
              fun () ->
                Buffer.t_of_js
                  (let x621 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x621 "scryptSync") "apply"
                     [|x621;((let x619 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x619 "push"
                                   [|(BinaryLike.t_to_js x615)|]);
                              ignore
                                (Ojs.call x619 "push"
                                   [|(BinaryLike.t_to_js x616)|]);
                              ignore
                                (Ojs.call x619 "push"
                                   [|(Ojs.int_to_js x617)|]);
                              (match x618 with
                               | Some x620 ->
                                   ignore
                                     (Ojs.call x619 "push"
                                        [|(ScryptOptions.t_to_js x620)|])
                               | None -> ());
                              x619))|])
    module RsaPublicKey =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x623 : Ojs.t) -> x623
        and t_to_js : t -> Ojs.t = fun (x622 : Ojs.t) -> x622
        let (get_key : t -> KeyLike.t) =
          fun (x624 : t) ->
            KeyLike.t_of_js (Ojs.get_prop_ascii (t_to_js x624) "key")
        let (set_key : t -> KeyLike.t -> unit) =
          fun (x625 : t) ->
            fun (x626 : KeyLike.t) ->
              Ojs.set_prop_ascii (t_to_js x625) "key" (KeyLike.t_to_js x626)
        let (get_padding : t -> int) =
          fun (x627 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x627) "padding")
        let (set_padding : t -> int -> unit) =
          fun (x628 : t) ->
            fun (x629 : int) ->
              Ojs.set_prop_ascii (t_to_js x628) "padding"
                (Ojs.int_to_js x629)
      end
    module RsaPrivateKey =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x631 : Ojs.t) -> x631
        and t_to_js : t -> Ojs.t = fun (x630 : Ojs.t) -> x630
        let (get_key : t -> KeyLike.t) =
          fun (x632 : t) ->
            KeyLike.t_of_js (Ojs.get_prop_ascii (t_to_js x632) "key")
        let (set_key : t -> KeyLike.t -> unit) =
          fun (x633 : t) ->
            fun (x634 : KeyLike.t) ->
              Ojs.set_prop_ascii (t_to_js x633) "key" (KeyLike.t_to_js x634)
        let (get_passphrase : t -> string) =
          fun (x635 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x635) "passphrase")
        let (set_passphrase : t -> string -> unit) =
          fun (x636 : t) ->
            fun (x637 : string) ->
              Ojs.set_prop_ascii (t_to_js x636) "passphrase"
                (Ojs.string_to_js x637)
        let (get_oaep_hash : t -> string) =
          fun (x638 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x638) "oaepHash")
        let (set_oaep_hash : t -> string -> unit) =
          fun (x639 : t) ->
            fun (x640 : string) ->
              Ojs.set_prop_ascii (t_to_js x639) "oaepHash"
                (Ojs.string_to_js x640)
        let (get_oaep_label : t -> TypedArray.t) =
          fun (x641 : t) ->
            TypedArray.t_of_js
              (Ojs.get_prop_ascii (t_to_js x641) "oaepLabel")
        let (set_oaep_label : t -> TypedArray.t -> unit) =
          fun (x642 : t) ->
            fun (x643 : TypedArray.t) ->
              Ojs.set_prop_ascii (t_to_js x642) "oaepLabel"
                (TypedArray.t_to_js x643)
        let (get_padding : t -> int) =
          fun (x644 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x644) "padding")
        let (set_padding : t -> int -> unit) =
          fun (x645 : t) ->
            fun (x646 : int) ->
              Ojs.set_prop_ascii (t_to_js x645) "padding"
                (Ojs.int_to_js x646)
      end
    let (public_encrypt :
      key:(KeyLike.t, RsaPrivateKey.t, RsaPublicKey.t) union3 ->
        buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun ~key:(x647 : (KeyLike.t, RsaPrivateKey.t, RsaPublicKey.t) union3)
        ->
        fun ~buffer:(x651 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "publicEncrypt"
               [|(union3_to_js KeyLike.t_to_js RsaPrivateKey.t_to_js
                    RsaPublicKey.t_to_js x647);(ArrayBufferView.t_to_js x651)|])
    let (public_decrypt :
      key:(KeyLike.t, RsaPrivateKey.t, RsaPublicKey.t) union3 ->
        buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun ~key:(x652 : (KeyLike.t, RsaPrivateKey.t, RsaPublicKey.t) union3)
        ->
        fun ~buffer:(x656 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "publicDecrypt"
               [|(union3_to_js KeyLike.t_to_js RsaPrivateKey.t_to_js
                    RsaPublicKey.t_to_js x652);(ArrayBufferView.t_to_js x656)|])
    let (private_decrypt :
      private_key:(KeyLike.t, RsaPrivateKey.t) union2 ->
        buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun ~private_key:(x657 : (KeyLike.t, RsaPrivateKey.t) union2) ->
        fun ~buffer:(x660 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "privateDecrypt"
               [|(union2_to_js KeyLike.t_to_js RsaPrivateKey.t_to_js x657);(
                 ArrayBufferView.t_to_js x660)|])
    let (private_encrypt :
      private_key:(KeyLike.t, RsaPrivateKey.t) union2 ->
        buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun ~private_key:(x661 : (KeyLike.t, RsaPrivateKey.t) union2) ->
        fun ~buffer:(x664 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "privateEncrypt"
               [|(union2_to_js KeyLike.t_to_js RsaPrivateKey.t_to_js x661);(
                 ArrayBufferView.t_to_js x664)|])
    let (get_ciphers : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.crypto "getCiphers" [||])
    let (get_curves : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.crypto "getCurves" [||])
    let (get_fips : unit -> [ `L_n_0  | `L_n_1 ]) =
      fun () ->
        let x667 = Ojs.call Import.crypto "getFips" [||] in
        match Ojs.int_of_js x667 with
        | 0 -> `L_n_0
        | 1 -> `L_n_1
        | _ -> assert false
    let (get_hashes : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.crypto "getHashes" [||])
    module ECDH =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x670 : Ojs.t) -> x670
        and t_to_js : t -> Ojs.t = fun (x669 : Ojs.t) -> x669
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "ECDH") [||])
        let (convert_key :
          key:BinaryLike.t ->
            curve:string ->
              ?input_encoding:BinaryToTextEncoding.t ->
                ?output_encoding:[ `base64  | `hex  | `latin1 ] ->
                  ?format:[ `compressed  | `hybrid  | `uncompressed ] ->
                    unit -> Buffer.t or_string)
          =
          fun ~key:(x671 : BinaryLike.t) ->
            fun ~curve:(x672 : string) ->
              fun ?input_encoding:(x673 : BinaryToTextEncoding.t option) ->
                fun
                  ?output_encoding:(x674 :
                                     [ `base64  | `hex  | `latin1 ] option)
                  ->
                  fun
                    ?format:(x675 :
                              [ `compressed  | `hybrid  | `uncompressed ]
                                option)
                    ->
                    fun () ->
                      or_string_of_js Buffer.t_of_js
                        (let x680 = Ojs.get_prop_ascii Import.crypto "ECDH" in
                         Ojs.call (Ojs.get_prop_ascii x680 "convertKey")
                           "apply"
                           [|x680;((let x676 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x676 "push"
                                         [|(BinaryLike.t_to_js x671)|]);
                                    ignore
                                      (Ojs.call x676 "push"
                                         [|(Ojs.string_to_js x672)|]);
                                    (match x673 with
                                     | Some x679 ->
                                         ignore
                                           (Ojs.call x676 "push"
                                              [|(BinaryToTextEncoding.t_to_js
                                                   x679)|])
                                     | None -> ());
                                    (match x674 with
                                     | Some x678 ->
                                         ignore
                                           (Ojs.call x676 "push"
                                              [|((match x678 with
                                                  | `base64 ->
                                                      Ojs.string_to_js
                                                        "base64"
                                                  | `hex ->
                                                      Ojs.string_to_js "hex"
                                                  | `latin1 ->
                                                      Ojs.string_to_js
                                                        "latin1"))|])
                                     | None -> ());
                                    (match x675 with
                                     | Some x677 ->
                                         ignore
                                           (Ojs.call x676 "push"
                                              [|((match x677 with
                                                  | `compressed ->
                                                      Ojs.string_to_js
                                                        "compressed"
                                                  | `hybrid ->
                                                      Ojs.string_to_js
                                                        "hybrid"
                                                  | `uncompressed ->
                                                      Ojs.string_to_js
                                                        "uncompressed"))|])
                                     | None -> ());
                                    x676))|])
        let (generate_keys : t -> Buffer.t) =
          fun (x682 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x682) "generateKeys" [||])
        let (generate_keys' :
          t ->
            encoding:BinaryToTextEncoding.t ->
              ?format:ECDHKeyFormat.t -> unit -> string)
          =
          fun (x687 : t) ->
            fun ~encoding:(x683 : BinaryToTextEncoding.t) ->
              fun ?format:(x684 : ECDHKeyFormat.t option) ->
                fun () ->
                  Ojs.string_of_js
                    (let x688 = t_to_js x687 in
                     Ojs.call (Ojs.get_prop_ascii x688 "generateKeys")
                       "apply"
                       [|x688;((let x685 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x685 "push"
                                     [|(BinaryToTextEncoding.t_to_js x683)|]);
                                (match x684 with
                                 | Some x686 ->
                                     ignore
                                       (Ojs.call x685 "push"
                                          [|(ECDHKeyFormat.t_to_js x686)|])
                                 | None -> ());
                                x685))|])
        let (compute_secret :
          t -> other_public_key:ArrayBufferView.t -> Buffer.t) =
          fun (x690 : t) ->
            fun ~other_public_key:(x689 : ArrayBufferView.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x690) "computeSecret"
                   [|(ArrayBufferView.t_to_js x689)|])
        let (compute_secret' :
          t ->
            other_public_key:string ->
              input_encoding:BinaryToTextEncoding.t -> Buffer.t)
          =
          fun (x693 : t) ->
            fun ~other_public_key:(x691 : string) ->
              fun ~input_encoding:(x692 : BinaryToTextEncoding.t) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x693) "computeSecret"
                     [|(Ojs.string_to_js x691);(BinaryToTextEncoding.t_to_js
                                                  x692)|])
        let (compute_secret'' :
          t ->
            other_public_key:ArrayBufferView.t ->
              output_encoding:BinaryToTextEncoding.t -> string)
          =
          fun (x696 : t) ->
            fun ~other_public_key:(x694 : ArrayBufferView.t) ->
              fun ~output_encoding:(x695 : BinaryToTextEncoding.t) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x696) "computeSecret"
                     [|(ArrayBufferView.t_to_js x694);(BinaryToTextEncoding.t_to_js
                                                         x695)|])
        let (compute_secret''' :
          t ->
            other_public_key:string ->
              input_encoding:BinaryToTextEncoding.t ->
                output_encoding:BinaryToTextEncoding.t -> string)
          =
          fun (x700 : t) ->
            fun ~other_public_key:(x697 : string) ->
              fun ~input_encoding:(x698 : BinaryToTextEncoding.t) ->
                fun ~output_encoding:(x699 : BinaryToTextEncoding.t) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x700) "computeSecret"
                       [|(Ojs.string_to_js x697);(BinaryToTextEncoding.t_to_js
                                                    x698);(BinaryToTextEncoding.t_to_js
                                                             x699)|])
        let (get_private_key : t -> Buffer.t) =
          fun (x701 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x701) "getPrivateKey" [||])
        let (get_private_key' :
          t -> encoding:BinaryToTextEncoding.t -> string) =
          fun (x703 : t) ->
            fun ~encoding:(x702 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x703) "getPrivateKey"
                   [|(BinaryToTextEncoding.t_to_js x702)|])
        let (get_public_key : t -> Buffer.t) =
          fun (x704 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x704) "getPublicKey" [||])
        let (get_public_key' :
          t ->
            encoding:BinaryToTextEncoding.t ->
              ?format:ECDHKeyFormat.t -> unit -> string)
          =
          fun (x709 : t) ->
            fun ~encoding:(x705 : BinaryToTextEncoding.t) ->
              fun ?format:(x706 : ECDHKeyFormat.t option) ->
                fun () ->
                  Ojs.string_of_js
                    (let x710 = t_to_js x709 in
                     Ojs.call (Ojs.get_prop_ascii x710 "getPublicKey")
                       "apply"
                       [|x710;((let x707 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x707 "push"
                                     [|(BinaryToTextEncoding.t_to_js x705)|]);
                                (match x706 with
                                 | Some x708 ->
                                     ignore
                                       (Ojs.call x707 "push"
                                          [|(ECDHKeyFormat.t_to_js x708)|])
                                 | None -> ());
                                x707))|])
        let (set_private_key : t -> private_key:ArrayBufferView.t -> unit) =
          fun (x712 : t) ->
            fun ~private_key:(x711 : ArrayBufferView.t) ->
              ignore
                (Ojs.call (t_to_js x712) "setPrivateKey"
                   [|(ArrayBufferView.t_to_js x711)|])
        let (set_private_key' :
          t -> private_key:string -> encoding:BinaryToTextEncoding.t -> unit)
          =
          fun (x715 : t) ->
            fun ~private_key:(x713 : string) ->
              fun ~encoding:(x714 : BinaryToTextEncoding.t) ->
                ignore
                  (Ojs.call (t_to_js x715) "setPrivateKey"
                     [|(Ojs.string_to_js x713);(BinaryToTextEncoding.t_to_js
                                                  x714)|])
      end
    let (create_ecdh : curve_name:string -> ECDH.t) =
      fun ~curve_name:(x716 : string) ->
        ECDH.t_of_js
          (Ojs.call Import.crypto "createECDH" [|(Ojs.string_to_js x716)|])
    let (timing_safe_equal :
      a:ArrayBufferView.t -> b:ArrayBufferView.t -> bool) =
      fun ~a:(x717 : ArrayBufferView.t) ->
        fun ~b:(x718 : ArrayBufferView.t) ->
          Ojs.bool_of_js
            (Ojs.call Import.crypto "timingSafeEqual"
               [|(ArrayBufferView.t_to_js x717);(ArrayBufferView.t_to_js x718)|])
    module AnonymousInterface2 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x720 : Ojs.t) -> x720
        and t_to_js : t -> Ojs.t = fun (x719 : Ojs.t) -> x719
        let (get_public_key : t -> Buffer.t) =
          fun (x721 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x721) "publicKey")
        let (set_public_key : t -> Buffer.t -> unit) =
          fun (x722 : t) ->
            fun (x723 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x722) "publicKey"
                (Buffer.t_to_js x723)
        let (get_private_key : t -> Buffer.t) =
          fun (x724 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x724) "privateKey")
        let (set_private_key : t -> Buffer.t -> unit) =
          fun (x725 : t) ->
            fun (x726 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x725) "privateKey"
                (Buffer.t_to_js x726)
      end
    module AnonymousInterface3 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x728 : Ojs.t) -> x728
        and t_to_js : t -> Ojs.t = fun (x727 : Ojs.t) -> x727
        let (get_public_key : t -> Buffer.t) =
          fun (x729 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x729) "publicKey")
        let (set_public_key : t -> Buffer.t -> unit) =
          fun (x730 : t) ->
            fun (x731 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x730) "publicKey"
                (Buffer.t_to_js x731)
        let (get_private_key : t -> string) =
          fun (x732 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x732) "privateKey")
        let (set_private_key : t -> string -> unit) =
          fun (x733 : t) ->
            fun (x734 : string) ->
              Ojs.set_prop_ascii (t_to_js x733) "privateKey"
                (Ojs.string_to_js x734)
      end
    module AnonymousInterface4 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x736 : Ojs.t) -> x736
        and t_to_js : t -> Ojs.t = fun (x735 : Ojs.t) -> x735
        let (get_public_key : t -> string) =
          fun (x737 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x737) "publicKey")
        let (set_public_key : t -> string -> unit) =
          fun (x738 : t) ->
            fun (x739 : string) ->
              Ojs.set_prop_ascii (t_to_js x738) "publicKey"
                (Ojs.string_to_js x739)
        let (get_private_key : t -> Buffer.t) =
          fun (x740 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x740) "privateKey")
        let (set_private_key : t -> Buffer.t -> unit) =
          fun (x741 : t) ->
            fun (x742 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x741) "privateKey"
                (Buffer.t_to_js x742)
      end
    module AnonymousInterface5 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x744 : Ojs.t) -> x744
        and t_to_js : t -> Ojs.t = fun (x743 : Ojs.t) -> x743
        let (get_public_key : t -> string) =
          fun (x745 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x745) "publicKey")
        let (set_public_key : t -> string -> unit) =
          fun (x746 : t) ->
            fun (x747 : string) ->
              Ojs.set_prop_ascii (t_to_js x746) "publicKey"
                (Ojs.string_to_js x747)
        let (get_private_key : t -> string) =
          fun (x748 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x748) "privateKey")
        let (set_private_key : t -> string -> unit) =
          fun (x749 : t) ->
            fun (x750 : string) ->
              Ojs.set_prop_ascii (t_to_js x749) "privateKey"
                (Ojs.string_to_js x750)
      end
    module AnonymousInterface6 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x752 : Ojs.t) -> x752
        and t_to_js : t -> Ojs.t = fun (x751 : Ojs.t) -> x751
        let (get_type : t -> [ `pkcs8 ]) =
          fun (x753 : t) ->
            let x754 = Ojs.get_prop_ascii (t_to_js x753) "type" in
            match Ojs.string_of_js x754 with
            | "pkcs8" -> `pkcs8
            | _ -> assert false
        let (set_type : t -> [ `pkcs8 ] -> unit) =
          fun (x755 : t) ->
            fun (x756 : [ `pkcs8 ]) ->
              Ojs.set_prop_ascii (t_to_js x755) "type"
                (match x756 with | `pkcs8 -> Ojs.string_to_js "pkcs8")
      end
    module AnonymousInterface7 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x758 : Ojs.t) -> x758
        and t_to_js : t -> Ojs.t = fun (x757 : Ojs.t) -> x757
        let (get_type : t -> [ `spki ]) =
          fun (x759 : t) ->
            let x760 = Ojs.get_prop_ascii (t_to_js x759) "type" in
            match Ojs.string_of_js x760 with
            | "spki" -> `spki
            | _ -> assert false
        let (set_type : t -> [ `spki ] -> unit) =
          fun (x761 : t) ->
            fun (x762 : [ `spki ]) ->
              Ojs.set_prop_ascii (t_to_js x761) "type"
                (match x762 with | `spki -> Ojs.string_to_js "spki")
        let (get_format : t -> 'PubF) =
          fun (x763 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x763) "format")
        let (set_format : t -> 'PubF -> unit) =
          fun (x764 : t) ->
            fun (x765 : 'PubF) ->
              Ojs.set_prop_ascii (t_to_js x764) "format" (Obj.magic x765)
      end
    module AnonymousInterface8 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x767 : Ojs.t) -> x767
        and t_to_js : t -> Ojs.t = fun (x766 : Ojs.t) -> x766
        let (get_type : t -> [ `pkcs1  | `pkcs8 ]) =
          fun (x768 : t) ->
            let x769 = Ojs.get_prop_ascii (t_to_js x768) "type" in
            match Ojs.string_of_js x769 with
            | "pkcs1" -> `pkcs1
            | "pkcs8" -> `pkcs8
            | _ -> assert false
        let (set_type : t -> [ `pkcs1  | `pkcs8 ] -> unit) =
          fun (x770 : t) ->
            fun (x771 : [ `pkcs1  | `pkcs8 ]) ->
              Ojs.set_prop_ascii (t_to_js x770) "type"
                (match x771 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `pkcs8 -> Ojs.string_to_js "pkcs8")
      end
    module AnonymousInterface9 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x773 : Ojs.t) -> x773
        and t_to_js : t -> Ojs.t = fun (x772 : Ojs.t) -> x772
        let (get_type : t -> [ `pkcs1  | `spki ]) =
          fun (x774 : t) ->
            let x775 = Ojs.get_prop_ascii (t_to_js x774) "type" in
            match Ojs.string_of_js x775 with
            | "pkcs1" -> `pkcs1
            | "spki" -> `spki
            | _ -> assert false
        let (set_type : t -> [ `pkcs1  | `spki ] -> unit) =
          fun (x776 : t) ->
            fun (x777 : [ `pkcs1  | `spki ]) ->
              Ojs.set_prop_ascii (t_to_js x776) "type"
                (match x777 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `spki -> Ojs.string_to_js "spki")
        let (get_format : t -> 'PubF) =
          fun (x778 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x778) "format")
        let (set_format : t -> 'PubF -> unit) =
          fun (x779 : t) ->
            fun (x780 : 'PubF) ->
              Ojs.set_prop_ascii (t_to_js x779) "format" (Obj.magic x780)
      end
    module AnonymousInterface10 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x782 : Ojs.t) -> x782
        and t_to_js : t -> Ojs.t = fun (x781 : Ojs.t) -> x781
        let (get_type : t -> [ `pkcs8  | `sec1 ]) =
          fun (x783 : t) ->
            let x784 = Ojs.get_prop_ascii (t_to_js x783) "type" in
            match Ojs.string_of_js x784 with
            | "pkcs8" -> `pkcs8
            | "sec1" -> `sec1
            | _ -> assert false
        let (set_type : t -> [ `pkcs8  | `sec1 ] -> unit) =
          fun (x785 : t) ->
            fun (x786 : [ `pkcs8  | `sec1 ]) ->
              Ojs.set_prop_ascii (t_to_js x785) "type"
                (match x786 with
                 | `pkcs8 -> Ojs.string_to_js "pkcs8"
                 | `sec1 -> Ojs.string_to_js "sec1")
      end
    module BasePrivateKeyEncodingOptions =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x788 : Ojs.t) -> x788
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x787 : Ojs.t) -> x787
        let (get_format : 'T t -> 'T) =
          fun (x789 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x789) "format")
        let (set_format : 'T t -> 'T -> unit) =
          fun (x791 : 'T t) ->
            fun (x792 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x791) "format"
                (Obj.magic x792)
        let (get_cipher : 'T t -> string) =
          fun (x794 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x794) "cipher")
        let (set_cipher : 'T t -> string -> unit) =
          fun (x796 : 'T t) ->
            fun (x797 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x796) "cipher"
                (Ojs.string_to_js x797)
        let (get_passphrase : 'T t -> string) =
          fun (x799 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x799) "passphrase")
        let (set_passphrase : 'T t -> string -> unit) =
          fun (x801 : 'T t) ->
            fun (x802 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x801) "passphrase"
                (Ojs.string_to_js x802)
      end
    module KeyPairKeyObjectResult =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x805 : Ojs.t) -> x805
        and t_to_js : t -> Ojs.t = fun (x804 : Ojs.t) -> x804
        let (get_public_key : t -> KeyObject.t) =
          fun (x806 : t) ->
            KeyObject.t_of_js (Ojs.get_prop_ascii (t_to_js x806) "publicKey")
        let (set_public_key : t -> KeyObject.t -> unit) =
          fun (x807 : t) ->
            fun (x808 : KeyObject.t) ->
              Ojs.set_prop_ascii (t_to_js x807) "publicKey"
                (KeyObject.t_to_js x808)
        let (get_private_key : t -> KeyObject.t) =
          fun (x809 : t) ->
            KeyObject.t_of_js
              (Ojs.get_prop_ascii (t_to_js x809) "privateKey")
        let (set_private_key : t -> KeyObject.t -> unit) =
          fun (x810 : t) ->
            fun (x811 : KeyObject.t) ->
              Ojs.set_prop_ascii (t_to_js x810) "privateKey"
                (KeyObject.t_to_js x811)
      end
    module ED25519KeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x813 : Ojs.t) -> x813
        and t_to_js : t -> Ojs.t = fun (x812 : Ojs.t) -> x812
      end
    module ED448KeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x815 : Ojs.t) -> x815
        and t_to_js : t -> Ojs.t = fun (x814 : Ojs.t) -> x814
      end
    module X25519KeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x817 : Ojs.t) -> x817
        and t_to_js : t -> Ojs.t = fun (x816 : Ojs.t) -> x816
      end
    module X448KeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x819 : Ojs.t) -> x819
        and t_to_js : t -> Ojs.t = fun (x818 : Ojs.t) -> x818
      end
    module ECKeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x821 : Ojs.t) -> x821
        and t_to_js : t -> Ojs.t = fun (x820 : Ojs.t) -> x820
        let (get_named_curve : t -> string) =
          fun (x822 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x822) "namedCurve")
        let (set_named_curve : t -> string -> unit) =
          fun (x823 : t) ->
            fun (x824 : string) ->
              Ojs.set_prop_ascii (t_to_js x823) "namedCurve"
                (Ojs.string_to_js x824)
      end
    module RSAKeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x826 : Ojs.t) -> x826
        and t_to_js : t -> Ojs.t = fun (x825 : Ojs.t) -> x825
        let (get_modulus_length : t -> int) =
          fun (x827 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x827) "modulusLength")
        let (set_modulus_length : t -> int -> unit) =
          fun (x828 : t) ->
            fun (x829 : int) ->
              Ojs.set_prop_ascii (t_to_js x828) "modulusLength"
                (Ojs.int_to_js x829)
        let (get_public_exponent : t -> int) =
          fun (x830 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x830) "publicExponent")
        let (set_public_exponent : t -> int -> unit) =
          fun (x831 : t) ->
            fun (x832 : int) ->
              Ojs.set_prop_ascii (t_to_js x831) "publicExponent"
                (Ojs.int_to_js x832)
      end
    module DSAKeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x834 : Ojs.t) -> x834
        and t_to_js : t -> Ojs.t = fun (x833 : Ojs.t) -> x833
        let (get_modulus_length : t -> int) =
          fun (x835 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x835) "modulusLength")
        let (set_modulus_length : t -> int -> unit) =
          fun (x836 : t) ->
            fun (x837 : int) ->
              Ojs.set_prop_ascii (t_to_js x836) "modulusLength"
                (Ojs.int_to_js x837)
        let (get_divisor_length : t -> int) =
          fun (x838 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x838) "divisorLength")
        let (set_divisor_length : t -> int -> unit) =
          fun (x839 : t) ->
            fun (x840 : int) ->
              Ojs.set_prop_ascii (t_to_js x839) "divisorLength"
                (Ojs.int_to_js x840)
      end
    module RSAKeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = Ojs.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x842 : Ojs.t) -> x842
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x841 : Ojs.t) -> x841
        let (get_modulus_length : ('PubF, 'PrivF) t -> int) =
          fun (x843 : ('PubF, 'PrivF) t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x843)
                 "modulusLength")
        let (set_modulus_length : ('PubF, 'PrivF) t -> int -> unit) =
          fun (x846 : ('PubF, 'PrivF) t) ->
            fun (x847 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x846)
                "modulusLength" (Ojs.int_to_js x847)
        let (get_public_exponent : ('PubF, 'PrivF) t -> int) =
          fun (x850 : ('PubF, 'PrivF) t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x850)
                 "publicExponent")
        let (set_public_exponent : ('PubF, 'PrivF) t -> int -> unit) =
          fun (x853 : ('PubF, 'PrivF) t) ->
            fun (x854 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x853)
                "publicExponent" (Ojs.int_to_js x854)
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface9.t) =
          fun (x857 : ('PubF, 'PrivF) t) ->
            AnonymousInterface9.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x857)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface9.t -> unit) =
          fun (x860 : ('PubF, 'PrivF) t) ->
            fun (x861 : AnonymousInterface9.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x860)
                "publicKeyEncoding" (AnonymousInterface9.t_to_js x861)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface8.t)
              intersection2)
          =
          fun (x864 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x867 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x867)
              AnonymousInterface8.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x864)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface8.t)
              intersection2 -> unit)
          =
          fun (x870 : ('PubF, 'PrivF) t) ->
            fun
              (x871 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface8.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x870)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x872 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x872)
                   AnonymousInterface8.t_to_js x871)
      end
    module DSAKeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = Ojs.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x878 : Ojs.t) -> x878
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x877 : Ojs.t) -> x877
        let (get_modulus_length : ('PubF, 'PrivF) t -> int) =
          fun (x879 : ('PubF, 'PrivF) t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x879)
                 "modulusLength")
        let (set_modulus_length : ('PubF, 'PrivF) t -> int -> unit) =
          fun (x882 : ('PubF, 'PrivF) t) ->
            fun (x883 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x882)
                "modulusLength" (Ojs.int_to_js x883)
        let (get_divisor_length : ('PubF, 'PrivF) t -> int) =
          fun (x886 : ('PubF, 'PrivF) t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x886)
                 "divisorLength")
        let (set_divisor_length : ('PubF, 'PrivF) t -> int -> unit) =
          fun (x889 : ('PubF, 'PrivF) t) ->
            fun (x890 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x889)
                "divisorLength" (Ojs.int_to_js x890)
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x893 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x893)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x896 : ('PubF, 'PrivF) t) ->
            fun (x897 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x896)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x897)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2)
          =
          fun (x900 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x903 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x903)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x900)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2 -> unit)
          =
          fun (x906 : ('PubF, 'PrivF) t) ->
            fun
              (x907 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x906)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x908 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x908)
                   AnonymousInterface6.t_to_js x907)
      end
    module ECKeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = Ojs.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x914 : Ojs.t) -> x914
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x913 : Ojs.t) -> x913
        let (get_named_curve : ('PubF, 'PrivF) t -> string) =
          fun (x915 : ('PubF, 'PrivF) t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x915)
                 "namedCurve")
        let (set_named_curve : ('PubF, 'PrivF) t -> string -> unit) =
          fun (x918 : ('PubF, 'PrivF) t) ->
            fun (x919 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x918)
                "namedCurve" (Ojs.string_to_js x919)
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface9.t) =
          fun (x922 : ('PubF, 'PrivF) t) ->
            AnonymousInterface9.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x922)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface9.t -> unit) =
          fun (x925 : ('PubF, 'PrivF) t) ->
            fun (x926 : AnonymousInterface9.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x925)
                "publicKeyEncoding" (AnonymousInterface9.t_to_js x926)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface10.t)
              intersection2)
          =
          fun (x929 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x932 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x932)
              AnonymousInterface10.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x929)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface10.t)
              intersection2 -> unit)
          =
          fun (x935 : ('PubF, 'PrivF) t) ->
            fun
              (x936 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface10.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x935)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x937 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x937)
                   AnonymousInterface10.t_to_js x936)
      end
    module ED25519KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = Ojs.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x943 : Ojs.t) -> x943
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x942 : Ojs.t) -> x942
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x944 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x944)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x947 : ('PubF, 'PrivF) t) ->
            fun (x948 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x947)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x948)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2)
          =
          fun (x951 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x954 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x954)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x951)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2 -> unit)
          =
          fun (x957 : ('PubF, 'PrivF) t) ->
            fun
              (x958 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x957)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x959 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x959)
                   AnonymousInterface6.t_to_js x958)
      end
    module ED448KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = Ojs.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x965 : Ojs.t) -> x965
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x964 : Ojs.t) -> x964
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x966 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x966)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x969 : ('PubF, 'PrivF) t) ->
            fun (x970 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x969)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x970)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2)
          =
          fun (x973 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x976 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x976)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x973)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2 -> unit)
          =
          fun (x979 : ('PubF, 'PrivF) t) ->
            fun
              (x980 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x979)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x981 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x981)
                   AnonymousInterface6.t_to_js x980)
      end
    module X25519KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = Ojs.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x987 : Ojs.t) -> x987
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x986 : Ojs.t) -> x986
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x988 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x988)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x991 : ('PubF, 'PrivF) t) ->
            fun (x992 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x991)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x992)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2)
          =
          fun (x995 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x998 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x998)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x995)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2 -> unit)
          =
          fun (x1001 : ('PubF, 'PrivF) t) ->
            fun
              (x1002 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1001)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1003 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x1003)
                   AnonymousInterface6.t_to_js x1002)
      end
    module X448KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = Ojs.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x1009 : Ojs.t) -> x1009
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x1008 : Ojs.t) -> x1008
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x1010 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1010)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x1013 : ('PubF, 'PrivF) t) ->
            fun (x1014 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1013)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x1014)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2)
          =
          fun (x1017 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1020 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x1020)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1017)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2 -> unit)
          =
          fun (x1023 : ('PubF, 'PrivF) t) ->
            fun
              (x1024 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1023)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1025 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x1025)
                   AnonymousInterface6.t_to_js x1024)
      end
    module KeyPairSyncResult =
      struct
        type ('T1, 'T2) t = Ojs.t
        let rec t_of_js :
          'T1 'T2 . (Ojs.t -> 'T1) -> (Ojs.t -> 'T2) -> Ojs.t -> ('T1, 'T2) t
          = fun (type __T1) -> fun (type __T2) ->
          fun (__T1_of_js : Ojs.t -> __T1) ->
            fun (__T2_of_js : Ojs.t -> __T2) -> fun (x1031 : Ojs.t) -> x1031
        and t_to_js :
          'T1 'T2 . ('T1 -> Ojs.t) -> ('T2 -> Ojs.t) -> ('T1, 'T2) t -> Ojs.t
          = fun (type __T1) -> fun (type __T2) ->
          fun (__T1_to_js : __T1 -> Ojs.t) ->
            fun (__T2_to_js : __T2 -> Ojs.t) -> fun (x1030 : Ojs.t) -> x1030
        let (get_public_key : ('T1, 'T2) t -> 'T1) =
          fun (x1032 : ('T1, 'T2) t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1032)
                 "publicKey")
        let (set_public_key : ('T1, 'T2) t -> 'T1 -> unit) =
          fun (x1035 : ('T1, 'T2) t) ->
            fun (x1036 : 'T1) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1035)
                "publicKey" (Obj.magic x1036)
        let (get_private_key : ('T1, 'T2) t -> 'T2) =
          fun (x1039 : ('T1, 'T2) t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1039)
                 "privateKey")
        let (set_private_key : ('T1, 'T2) t -> 'T2 -> unit) =
          fun (x1042 : ('T1, 'T2) t) ->
            fun (x1043 : 'T2) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1042)
                "privateKey" (Obj.magic x1043)
      end
    let (generate_key_pair_sync :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `pem ]) RSAKeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1046 : [ `rsa ]) ->
        fun ~options:(x1047 : ([ `pem ], [ `pem ]) RSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1046 with | `rsa -> Ojs.string_to_js "rsa"));(
                 RSAKeyPairOptions.t_to_js
                   (fun (x1048 : [ `pem ]) ->
                      match x1048 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1049 : [ `pem ]) ->
                      match x1049 with | `pem -> Ojs.string_to_js "pem")
                   x1047)|])
    let (generate_key_pair_sync :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `der ]) RSAKeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1052 : [ `rsa ]) ->
        fun ~options:(x1053 : ([ `pem ], [ `der ]) RSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1052 with | `rsa -> Ojs.string_to_js "rsa"));(
                 RSAKeyPairOptions.t_to_js
                   (fun (x1054 : [ `pem ]) ->
                      match x1054 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1055 : [ `der ]) ->
                      match x1055 with | `der -> Ojs.string_to_js "der")
                   x1053)|])
    let (generate_key_pair_sync :
      type_:[ `rsa ] ->
        options:([ `der ], [ `pem ]) RSAKeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1058 : [ `rsa ]) ->
        fun ~options:(x1059 : ([ `der ], [ `pem ]) RSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1058 with | `rsa -> Ojs.string_to_js "rsa"));(
                 RSAKeyPairOptions.t_to_js
                   (fun (x1060 : [ `der ]) ->
                      match x1060 with | `der -> Ojs.string_to_js "der")
                   (fun (x1061 : [ `pem ]) ->
                      match x1061 with | `pem -> Ojs.string_to_js "pem")
                   x1059)|])
    let (generate_key_pair_sync :
      type_:[ `rsa ] ->
        options:([ `der ], [ `der ]) RSAKeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1064 : [ `rsa ]) ->
        fun ~options:(x1065 : ([ `der ], [ `der ]) RSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1064 with | `rsa -> Ojs.string_to_js "rsa"));(
                 RSAKeyPairOptions.t_to_js
                   (fun (x1066 : [ `der ]) ->
                      match x1066 with | `der -> Ojs.string_to_js "der")
                   (fun (x1067 : [ `der ]) ->
                      match x1067 with | `der -> Ojs.string_to_js "der")
                   x1065)|])
    let (generate_key_pair_sync :
      type_:[ `rsa ] ->
        options:RSAKeyPairKeyObjectOptions.t -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1070 : [ `rsa ]) ->
        fun ~options:(x1071 : RSAKeyPairKeyObjectOptions.t) ->
          KeyPairKeyObjectResult.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1070 with | `rsa -> Ojs.string_to_js "rsa"));(
                 RSAKeyPairKeyObjectOptions.t_to_js x1071)|])
    let (generate_key_pair_sync :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `pem ]) DSAKeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1072 : [ `dsa ]) ->
        fun ~options:(x1073 : ([ `pem ], [ `pem ]) DSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1072 with | `dsa -> Ojs.string_to_js "dsa"));(
                 DSAKeyPairOptions.t_to_js
                   (fun (x1074 : [ `pem ]) ->
                      match x1074 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1075 : [ `pem ]) ->
                      match x1075 with | `pem -> Ojs.string_to_js "pem")
                   x1073)|])
    let (generate_key_pair_sync :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `der ]) DSAKeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1078 : [ `dsa ]) ->
        fun ~options:(x1079 : ([ `pem ], [ `der ]) DSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1078 with | `dsa -> Ojs.string_to_js "dsa"));(
                 DSAKeyPairOptions.t_to_js
                   (fun (x1080 : [ `pem ]) ->
                      match x1080 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1081 : [ `der ]) ->
                      match x1081 with | `der -> Ojs.string_to_js "der")
                   x1079)|])
    let (generate_key_pair_sync :
      type_:[ `dsa ] ->
        options:([ `der ], [ `pem ]) DSAKeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1084 : [ `dsa ]) ->
        fun ~options:(x1085 : ([ `der ], [ `pem ]) DSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1084 with | `dsa -> Ojs.string_to_js "dsa"));(
                 DSAKeyPairOptions.t_to_js
                   (fun (x1086 : [ `der ]) ->
                      match x1086 with | `der -> Ojs.string_to_js "der")
                   (fun (x1087 : [ `pem ]) ->
                      match x1087 with | `pem -> Ojs.string_to_js "pem")
                   x1085)|])
    let (generate_key_pair_sync :
      type_:[ `dsa ] ->
        options:([ `der ], [ `der ]) DSAKeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1090 : [ `dsa ]) ->
        fun ~options:(x1091 : ([ `der ], [ `der ]) DSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1090 with | `dsa -> Ojs.string_to_js "dsa"));(
                 DSAKeyPairOptions.t_to_js
                   (fun (x1092 : [ `der ]) ->
                      match x1092 with | `der -> Ojs.string_to_js "der")
                   (fun (x1093 : [ `der ]) ->
                      match x1093 with | `der -> Ojs.string_to_js "der")
                   x1091)|])
    let (generate_key_pair_sync :
      type_:[ `dsa ] ->
        options:DSAKeyPairKeyObjectOptions.t -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1096 : [ `dsa ]) ->
        fun ~options:(x1097 : DSAKeyPairKeyObjectOptions.t) ->
          KeyPairKeyObjectResult.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1096 with | `dsa -> Ojs.string_to_js "dsa"));(
                 DSAKeyPairKeyObjectOptions.t_to_js x1097)|])
    let (generate_key_pair_sync :
      type_:[ `ec ] ->
        options:([ `pem ], [ `pem ]) ECKeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1098 : [ `ec ]) ->
        fun ~options:(x1099 : ([ `pem ], [ `pem ]) ECKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1098 with | `ec -> Ojs.string_to_js "ec"));(
                 ECKeyPairOptions.t_to_js
                   (fun (x1100 : [ `pem ]) ->
                      match x1100 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1101 : [ `pem ]) ->
                      match x1101 with | `pem -> Ojs.string_to_js "pem")
                   x1099)|])
    let (generate_key_pair_sync :
      type_:[ `ec ] ->
        options:([ `pem ], [ `der ]) ECKeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1104 : [ `ec ]) ->
        fun ~options:(x1105 : ([ `pem ], [ `der ]) ECKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1104 with | `ec -> Ojs.string_to_js "ec"));(
                 ECKeyPairOptions.t_to_js
                   (fun (x1106 : [ `pem ]) ->
                      match x1106 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1107 : [ `der ]) ->
                      match x1107 with | `der -> Ojs.string_to_js "der")
                   x1105)|])
    let (generate_key_pair_sync :
      type_:[ `ec ] ->
        options:([ `der ], [ `pem ]) ECKeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1110 : [ `ec ]) ->
        fun ~options:(x1111 : ([ `der ], [ `pem ]) ECKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1110 with | `ec -> Ojs.string_to_js "ec"));(
                 ECKeyPairOptions.t_to_js
                   (fun (x1112 : [ `der ]) ->
                      match x1112 with | `der -> Ojs.string_to_js "der")
                   (fun (x1113 : [ `pem ]) ->
                      match x1113 with | `pem -> Ojs.string_to_js "pem")
                   x1111)|])
    let (generate_key_pair_sync :
      type_:[ `ec ] ->
        options:([ `der ], [ `der ]) ECKeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1116 : [ `ec ]) ->
        fun ~options:(x1117 : ([ `der ], [ `der ]) ECKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1116 with | `ec -> Ojs.string_to_js "ec"));(
                 ECKeyPairOptions.t_to_js
                   (fun (x1118 : [ `der ]) ->
                      match x1118 with | `der -> Ojs.string_to_js "der")
                   (fun (x1119 : [ `der ]) ->
                      match x1119 with | `der -> Ojs.string_to_js "der")
                   x1117)|])
    let (generate_key_pair_sync :
      type_:[ `ec ] ->
        options:ECKeyPairKeyObjectOptions.t -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1122 : [ `ec ]) ->
        fun ~options:(x1123 : ECKeyPairKeyObjectOptions.t) ->
          KeyPairKeyObjectResult.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1122 with | `ec -> Ojs.string_to_js "ec"));(
                 ECKeyPairKeyObjectOptions.t_to_js x1123)|])
    let (generate_key_pair_sync :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `pem ]) ED25519KeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1124 : [ `ed25519 ]) ->
        fun ~options:(x1125 : ([ `pem ], [ `pem ]) ED25519KeyPairOptions.t)
          ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1124 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 ED25519KeyPairOptions.t_to_js
                   (fun (x1126 : [ `pem ]) ->
                      match x1126 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1127 : [ `pem ]) ->
                      match x1127 with | `pem -> Ojs.string_to_js "pem")
                   x1125)|])
    let (generate_key_pair_sync :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `der ]) ED25519KeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1130 : [ `ed25519 ]) ->
        fun ~options:(x1131 : ([ `pem ], [ `der ]) ED25519KeyPairOptions.t)
          ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1130 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 ED25519KeyPairOptions.t_to_js
                   (fun (x1132 : [ `pem ]) ->
                      match x1132 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1133 : [ `der ]) ->
                      match x1133 with | `der -> Ojs.string_to_js "der")
                   x1131)|])
    let (generate_key_pair_sync :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `pem ]) ED25519KeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1136 : [ `ed25519 ]) ->
        fun ~options:(x1137 : ([ `der ], [ `pem ]) ED25519KeyPairOptions.t)
          ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1136 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 ED25519KeyPairOptions.t_to_js
                   (fun (x1138 : [ `der ]) ->
                      match x1138 with | `der -> Ojs.string_to_js "der")
                   (fun (x1139 : [ `pem ]) ->
                      match x1139 with | `pem -> Ojs.string_to_js "pem")
                   x1137)|])
    let (generate_key_pair_sync :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `der ]) ED25519KeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1142 : [ `ed25519 ]) ->
        fun ~options:(x1143 : ([ `der ], [ `der ]) ED25519KeyPairOptions.t)
          ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1142 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 ED25519KeyPairOptions.t_to_js
                   (fun (x1144 : [ `der ]) ->
                      match x1144 with | `der -> Ojs.string_to_js "der")
                   (fun (x1145 : [ `der ]) ->
                      match x1145 with | `der -> Ojs.string_to_js "der")
                   x1143)|])
    let (generate_key_pair_sync :
      type_:[ `ed25519 ] ->
        ?options:ED25519KeyPairKeyObjectOptions.t ->
          unit -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1148 : [ `ed25519 ]) ->
        fun ?options:(x1149 : ED25519KeyPairKeyObjectOptions.t option) ->
          fun () ->
            KeyPairKeyObjectResult.t_of_js
              (let x1152 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1152 "generateKeyPairSync")
                 "apply"
                 [|x1152;((let x1150 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1150 "push"
                                [|((match x1148 with
                                    | `ed25519 -> Ojs.string_to_js "ed25519"))|]);
                           (match x1149 with
                            | Some x1151 ->
                                ignore
                                  (Ojs.call x1150 "push"
                                     [|(ED25519KeyPairKeyObjectOptions.t_to_js
                                          x1151)|])
                            | None -> ());
                           x1150))|])
    let (generate_key_pair_sync :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `pem ]) ED448KeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1153 : [ `ed448 ]) ->
        fun ~options:(x1154 : ([ `pem ], [ `pem ]) ED448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1153 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 ED448KeyPairOptions.t_to_js
                   (fun (x1155 : [ `pem ]) ->
                      match x1155 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1156 : [ `pem ]) ->
                      match x1156 with | `pem -> Ojs.string_to_js "pem")
                   x1154)|])
    let (generate_key_pair_sync :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `der ]) ED448KeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1159 : [ `ed448 ]) ->
        fun ~options:(x1160 : ([ `pem ], [ `der ]) ED448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1159 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 ED448KeyPairOptions.t_to_js
                   (fun (x1161 : [ `pem ]) ->
                      match x1161 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1162 : [ `der ]) ->
                      match x1162 with | `der -> Ojs.string_to_js "der")
                   x1160)|])
    let (generate_key_pair_sync :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `pem ]) ED448KeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1165 : [ `ed448 ]) ->
        fun ~options:(x1166 : ([ `der ], [ `pem ]) ED448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1165 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 ED448KeyPairOptions.t_to_js
                   (fun (x1167 : [ `der ]) ->
                      match x1167 with | `der -> Ojs.string_to_js "der")
                   (fun (x1168 : [ `pem ]) ->
                      match x1168 with | `pem -> Ojs.string_to_js "pem")
                   x1166)|])
    let (generate_key_pair_sync :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `der ]) ED448KeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1171 : [ `ed448 ]) ->
        fun ~options:(x1172 : ([ `der ], [ `der ]) ED448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1171 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 ED448KeyPairOptions.t_to_js
                   (fun (x1173 : [ `der ]) ->
                      match x1173 with | `der -> Ojs.string_to_js "der")
                   (fun (x1174 : [ `der ]) ->
                      match x1174 with | `der -> Ojs.string_to_js "der")
                   x1172)|])
    let (generate_key_pair_sync :
      type_:[ `ed448 ] ->
        ?options:ED448KeyPairKeyObjectOptions.t ->
          unit -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1177 : [ `ed448 ]) ->
        fun ?options:(x1178 : ED448KeyPairKeyObjectOptions.t option) ->
          fun () ->
            KeyPairKeyObjectResult.t_of_js
              (let x1181 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1181 "generateKeyPairSync")
                 "apply"
                 [|x1181;((let x1179 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1179 "push"
                                [|((match x1177 with
                                    | `ed448 -> Ojs.string_to_js "ed448"))|]);
                           (match x1178 with
                            | Some x1180 ->
                                ignore
                                  (Ojs.call x1179 "push"
                                     [|(ED448KeyPairKeyObjectOptions.t_to_js
                                          x1180)|])
                            | None -> ());
                           x1179))|])
    let (generate_key_pair_sync :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `pem ]) X25519KeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1182 : [ `x25519 ]) ->
        fun ~options:(x1183 : ([ `pem ], [ `pem ]) X25519KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1182 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 X25519KeyPairOptions.t_to_js
                   (fun (x1184 : [ `pem ]) ->
                      match x1184 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1185 : [ `pem ]) ->
                      match x1185 with | `pem -> Ojs.string_to_js "pem")
                   x1183)|])
    let (generate_key_pair_sync :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `der ]) X25519KeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1188 : [ `x25519 ]) ->
        fun ~options:(x1189 : ([ `pem ], [ `der ]) X25519KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1188 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 X25519KeyPairOptions.t_to_js
                   (fun (x1190 : [ `pem ]) ->
                      match x1190 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1191 : [ `der ]) ->
                      match x1191 with | `der -> Ojs.string_to_js "der")
                   x1189)|])
    let (generate_key_pair_sync :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `pem ]) X25519KeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1194 : [ `x25519 ]) ->
        fun ~options:(x1195 : ([ `der ], [ `pem ]) X25519KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1194 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 X25519KeyPairOptions.t_to_js
                   (fun (x1196 : [ `der ]) ->
                      match x1196 with | `der -> Ojs.string_to_js "der")
                   (fun (x1197 : [ `pem ]) ->
                      match x1197 with | `pem -> Ojs.string_to_js "pem")
                   x1195)|])
    let (generate_key_pair_sync :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `der ]) X25519KeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1200 : [ `x25519 ]) ->
        fun ~options:(x1201 : ([ `der ], [ `der ]) X25519KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1200 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 X25519KeyPairOptions.t_to_js
                   (fun (x1202 : [ `der ]) ->
                      match x1202 with | `der -> Ojs.string_to_js "der")
                   (fun (x1203 : [ `der ]) ->
                      match x1203 with | `der -> Ojs.string_to_js "der")
                   x1201)|])
    let (generate_key_pair_sync :
      type_:[ `x25519 ] ->
        ?options:X25519KeyPairKeyObjectOptions.t ->
          unit -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1206 : [ `x25519 ]) ->
        fun ?options:(x1207 : X25519KeyPairKeyObjectOptions.t option) ->
          fun () ->
            KeyPairKeyObjectResult.t_of_js
              (let x1210 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1210 "generateKeyPairSync")
                 "apply"
                 [|x1210;((let x1208 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1208 "push"
                                [|((match x1206 with
                                    | `x25519 -> Ojs.string_to_js "x25519"))|]);
                           (match x1207 with
                            | Some x1209 ->
                                ignore
                                  (Ojs.call x1208 "push"
                                     [|(X25519KeyPairKeyObjectOptions.t_to_js
                                          x1209)|])
                            | None -> ());
                           x1208))|])
    let (generate_key_pair_sync :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `pem ]) X448KeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1211 : [ `x448 ]) ->
        fun ~options:(x1212 : ([ `pem ], [ `pem ]) X448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1211 with | `x448 -> Ojs.string_to_js "x448"));(
                 X448KeyPairOptions.t_to_js
                   (fun (x1213 : [ `pem ]) ->
                      match x1213 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1214 : [ `pem ]) ->
                      match x1214 with | `pem -> Ojs.string_to_js "pem")
                   x1212)|])
    let (generate_key_pair_sync :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `der ]) X448KeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1217 : [ `x448 ]) ->
        fun ~options:(x1218 : ([ `pem ], [ `der ]) X448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1217 with | `x448 -> Ojs.string_to_js "x448"));(
                 X448KeyPairOptions.t_to_js
                   (fun (x1219 : [ `pem ]) ->
                      match x1219 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1220 : [ `der ]) ->
                      match x1220 with | `der -> Ojs.string_to_js "der")
                   x1218)|])
    let (generate_key_pair_sync :
      type_:[ `x448 ] ->
        options:([ `der ], [ `pem ]) X448KeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1223 : [ `x448 ]) ->
        fun ~options:(x1224 : ([ `der ], [ `pem ]) X448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1223 with | `x448 -> Ojs.string_to_js "x448"));(
                 X448KeyPairOptions.t_to_js
                   (fun (x1225 : [ `der ]) ->
                      match x1225 with | `der -> Ojs.string_to_js "der")
                   (fun (x1226 : [ `pem ]) ->
                      match x1226 with | `pem -> Ojs.string_to_js "pem")
                   x1224)|])
    let (generate_key_pair_sync :
      type_:[ `x448 ] ->
        options:([ `der ], [ `der ]) X448KeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1229 : [ `x448 ]) ->
        fun ~options:(x1230 : ([ `der ], [ `der ]) X448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1229 with | `x448 -> Ojs.string_to_js "x448"));(
                 X448KeyPairOptions.t_to_js
                   (fun (x1231 : [ `der ]) ->
                      match x1231 with | `der -> Ojs.string_to_js "der")
                   (fun (x1232 : [ `der ]) ->
                      match x1232 with | `der -> Ojs.string_to_js "der")
                   x1230)|])
    let (generate_key_pair_sync :
      type_:[ `x448 ] ->
        ?options:X448KeyPairKeyObjectOptions.t ->
          unit -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1235 : [ `x448 ]) ->
        fun ?options:(x1236 : X448KeyPairKeyObjectOptions.t option) ->
          fun () ->
            KeyPairKeyObjectResult.t_of_js
              (let x1239 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1239 "generateKeyPairSync")
                 "apply"
                 [|x1239;((let x1237 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1237 "push"
                                [|((match x1235 with
                                    | `x448 -> Ojs.string_to_js "x448"))|]);
                           (match x1236 with
                            | Some x1238 ->
                                ignore
                                  (Ojs.call x1237 "push"
                                     [|(X448KeyPairKeyObjectOptions.t_to_js
                                          x1238)|])
                            | None -> ());
                           x1237))|])
    let (generate_key_pair :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `pem ]) RSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1240 : [ `rsa ]) ->
        fun ~options:(x1241 : ([ `pem ], [ `pem ]) RSAKeyPairOptions.t) ->
          fun
            ~callback:(x1244 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1240 with | `rsa -> Ojs.string_to_js "rsa"));(
                   RSAKeyPairOptions.t_to_js
                     (fun (x1242 : [ `pem ]) ->
                        match x1242 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1243 : [ `pem ]) ->
                        match x1243 with | `pem -> Ojs.string_to_js "pem")
                     x1241);(Ojs.fun_to_js 3
                               (fun (x1245 : Ojs.t) ->
                                  fun (x1247 : Ojs.t) ->
                                    fun (x1248 : Ojs.t) ->
                                      x1244
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1245)
                                        ~public_key:(Ojs.string_of_js x1247)
                                        ~private_key:(Ojs.string_of_js x1248)))|])
    let (generate_key_pair :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `der ]) RSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1249 : [ `rsa ]) ->
        fun ~options:(x1250 : ([ `pem ], [ `der ]) RSAKeyPairOptions.t) ->
          fun
            ~callback:(x1253 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1249 with | `rsa -> Ojs.string_to_js "rsa"));(
                   RSAKeyPairOptions.t_to_js
                     (fun (x1251 : [ `pem ]) ->
                        match x1251 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1252 : [ `der ]) ->
                        match x1252 with | `der -> Ojs.string_to_js "der")
                     x1250);(Ojs.fun_to_js 3
                               (fun (x1254 : Ojs.t) ->
                                  fun (x1256 : Ojs.t) ->
                                    fun (x1257 : Ojs.t) ->
                                      x1253
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1254)
                                        ~public_key:(Ojs.string_of_js x1256)
                                        ~private_key:(Buffer.t_of_js x1257)))|])
    let (generate_key_pair :
      type_:[ `rsa ] ->
        options:([ `der ], [ `pem ]) RSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1258 : [ `rsa ]) ->
        fun ~options:(x1259 : ([ `der ], [ `pem ]) RSAKeyPairOptions.t) ->
          fun
            ~callback:(x1262 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1258 with | `rsa -> Ojs.string_to_js "rsa"));(
                   RSAKeyPairOptions.t_to_js
                     (fun (x1260 : [ `der ]) ->
                        match x1260 with | `der -> Ojs.string_to_js "der")
                     (fun (x1261 : [ `pem ]) ->
                        match x1261 with | `pem -> Ojs.string_to_js "pem")
                     x1259);(Ojs.fun_to_js 3
                               (fun (x1263 : Ojs.t) ->
                                  fun (x1265 : Ojs.t) ->
                                    fun (x1266 : Ojs.t) ->
                                      x1262
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1263)
                                        ~public_key:(Buffer.t_of_js x1265)
                                        ~private_key:(Ojs.string_of_js x1266)))|])
    let (generate_key_pair :
      type_:[ `rsa ] ->
        options:([ `der ], [ `der ]) RSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1267 : [ `rsa ]) ->
        fun ~options:(x1268 : ([ `der ], [ `der ]) RSAKeyPairOptions.t) ->
          fun
            ~callback:(x1271 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1267 with | `rsa -> Ojs.string_to_js "rsa"));(
                   RSAKeyPairOptions.t_to_js
                     (fun (x1269 : [ `der ]) ->
                        match x1269 with | `der -> Ojs.string_to_js "der")
                     (fun (x1270 : [ `der ]) ->
                        match x1270 with | `der -> Ojs.string_to_js "der")
                     x1268);(Ojs.fun_to_js 3
                               (fun (x1272 : Ojs.t) ->
                                  fun (x1274 : Ojs.t) ->
                                    fun (x1275 : Ojs.t) ->
                                      x1271
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1272)
                                        ~public_key:(Buffer.t_of_js x1274)
                                        ~private_key:(Buffer.t_of_js x1275)))|])
    let (generate_key_pair :
      type_:[ `rsa ] ->
        options:RSAKeyPairKeyObjectOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1276 : [ `rsa ]) ->
        fun ~options:(x1277 : RSAKeyPairKeyObjectOptions.t) ->
          fun
            ~callback:(x1278 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1276 with | `rsa -> Ojs.string_to_js "rsa"));(
                   RSAKeyPairKeyObjectOptions.t_to_js x1277);(Ojs.fun_to_js 3
                                                                (fun
                                                                   (x1279 :
                                                                    Ojs.t)
                                                                   ->
                                                                   fun
                                                                    (x1281 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1282 :
                                                                    Ojs.t) ->
                                                                    x1278
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x1279)
                                                                    ~public_key:(
                                                                    KeyObject.t_of_js
                                                                    x1281)
                                                                    ~private_key:(
                                                                    KeyObject.t_of_js
                                                                    x1282)))|])
    let (generate_key_pair :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `pem ]) DSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1283 : [ `dsa ]) ->
        fun ~options:(x1284 : ([ `pem ], [ `pem ]) DSAKeyPairOptions.t) ->
          fun
            ~callback:(x1287 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1283 with | `dsa -> Ojs.string_to_js "dsa"));(
                   DSAKeyPairOptions.t_to_js
                     (fun (x1285 : [ `pem ]) ->
                        match x1285 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1286 : [ `pem ]) ->
                        match x1286 with | `pem -> Ojs.string_to_js "pem")
                     x1284);(Ojs.fun_to_js 3
                               (fun (x1288 : Ojs.t) ->
                                  fun (x1290 : Ojs.t) ->
                                    fun (x1291 : Ojs.t) ->
                                      x1287
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1288)
                                        ~public_key:(Ojs.string_of_js x1290)
                                        ~private_key:(Ojs.string_of_js x1291)))|])
    let (generate_key_pair :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `der ]) DSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1292 : [ `dsa ]) ->
        fun ~options:(x1293 : ([ `pem ], [ `der ]) DSAKeyPairOptions.t) ->
          fun
            ~callback:(x1296 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1292 with | `dsa -> Ojs.string_to_js "dsa"));(
                   DSAKeyPairOptions.t_to_js
                     (fun (x1294 : [ `pem ]) ->
                        match x1294 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1295 : [ `der ]) ->
                        match x1295 with | `der -> Ojs.string_to_js "der")
                     x1293);(Ojs.fun_to_js 3
                               (fun (x1297 : Ojs.t) ->
                                  fun (x1299 : Ojs.t) ->
                                    fun (x1300 : Ojs.t) ->
                                      x1296
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1297)
                                        ~public_key:(Ojs.string_of_js x1299)
                                        ~private_key:(Buffer.t_of_js x1300)))|])
    let (generate_key_pair :
      type_:[ `dsa ] ->
        options:([ `der ], [ `pem ]) DSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1301 : [ `dsa ]) ->
        fun ~options:(x1302 : ([ `der ], [ `pem ]) DSAKeyPairOptions.t) ->
          fun
            ~callback:(x1305 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1301 with | `dsa -> Ojs.string_to_js "dsa"));(
                   DSAKeyPairOptions.t_to_js
                     (fun (x1303 : [ `der ]) ->
                        match x1303 with | `der -> Ojs.string_to_js "der")
                     (fun (x1304 : [ `pem ]) ->
                        match x1304 with | `pem -> Ojs.string_to_js "pem")
                     x1302);(Ojs.fun_to_js 3
                               (fun (x1306 : Ojs.t) ->
                                  fun (x1308 : Ojs.t) ->
                                    fun (x1309 : Ojs.t) ->
                                      x1305
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1306)
                                        ~public_key:(Buffer.t_of_js x1308)
                                        ~private_key:(Ojs.string_of_js x1309)))|])
    let (generate_key_pair :
      type_:[ `dsa ] ->
        options:([ `der ], [ `der ]) DSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1310 : [ `dsa ]) ->
        fun ~options:(x1311 : ([ `der ], [ `der ]) DSAKeyPairOptions.t) ->
          fun
            ~callback:(x1314 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1310 with | `dsa -> Ojs.string_to_js "dsa"));(
                   DSAKeyPairOptions.t_to_js
                     (fun (x1312 : [ `der ]) ->
                        match x1312 with | `der -> Ojs.string_to_js "der")
                     (fun (x1313 : [ `der ]) ->
                        match x1313 with | `der -> Ojs.string_to_js "der")
                     x1311);(Ojs.fun_to_js 3
                               (fun (x1315 : Ojs.t) ->
                                  fun (x1317 : Ojs.t) ->
                                    fun (x1318 : Ojs.t) ->
                                      x1314
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1315)
                                        ~public_key:(Buffer.t_of_js x1317)
                                        ~private_key:(Buffer.t_of_js x1318)))|])
    let (generate_key_pair :
      type_:[ `dsa ] ->
        options:DSAKeyPairKeyObjectOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1319 : [ `dsa ]) ->
        fun ~options:(x1320 : DSAKeyPairKeyObjectOptions.t) ->
          fun
            ~callback:(x1321 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1319 with | `dsa -> Ojs.string_to_js "dsa"));(
                   DSAKeyPairKeyObjectOptions.t_to_js x1320);(Ojs.fun_to_js 3
                                                                (fun
                                                                   (x1322 :
                                                                    Ojs.t)
                                                                   ->
                                                                   fun
                                                                    (x1324 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1325 :
                                                                    Ojs.t) ->
                                                                    x1321
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x1322)
                                                                    ~public_key:(
                                                                    KeyObject.t_of_js
                                                                    x1324)
                                                                    ~private_key:(
                                                                    KeyObject.t_of_js
                                                                    x1325)))|])
    let (generate_key_pair :
      type_:[ `ec ] ->
        options:([ `pem ], [ `pem ]) ECKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1326 : [ `ec ]) ->
        fun ~options:(x1327 : ([ `pem ], [ `pem ]) ECKeyPairOptions.t) ->
          fun
            ~callback:(x1330 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1326 with | `ec -> Ojs.string_to_js "ec"));(
                   ECKeyPairOptions.t_to_js
                     (fun (x1328 : [ `pem ]) ->
                        match x1328 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1329 : [ `pem ]) ->
                        match x1329 with | `pem -> Ojs.string_to_js "pem")
                     x1327);(Ojs.fun_to_js 3
                               (fun (x1331 : Ojs.t) ->
                                  fun (x1333 : Ojs.t) ->
                                    fun (x1334 : Ojs.t) ->
                                      x1330
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1331)
                                        ~public_key:(Ojs.string_of_js x1333)
                                        ~private_key:(Ojs.string_of_js x1334)))|])
    let (generate_key_pair :
      type_:[ `ec ] ->
        options:([ `pem ], [ `der ]) ECKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1335 : [ `ec ]) ->
        fun ~options:(x1336 : ([ `pem ], [ `der ]) ECKeyPairOptions.t) ->
          fun
            ~callback:(x1339 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1335 with | `ec -> Ojs.string_to_js "ec"));(
                   ECKeyPairOptions.t_to_js
                     (fun (x1337 : [ `pem ]) ->
                        match x1337 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1338 : [ `der ]) ->
                        match x1338 with | `der -> Ojs.string_to_js "der")
                     x1336);(Ojs.fun_to_js 3
                               (fun (x1340 : Ojs.t) ->
                                  fun (x1342 : Ojs.t) ->
                                    fun (x1343 : Ojs.t) ->
                                      x1339
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1340)
                                        ~public_key:(Ojs.string_of_js x1342)
                                        ~private_key:(Buffer.t_of_js x1343)))|])
    let (generate_key_pair :
      type_:[ `ec ] ->
        options:([ `der ], [ `pem ]) ECKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1344 : [ `ec ]) ->
        fun ~options:(x1345 : ([ `der ], [ `pem ]) ECKeyPairOptions.t) ->
          fun
            ~callback:(x1348 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1344 with | `ec -> Ojs.string_to_js "ec"));(
                   ECKeyPairOptions.t_to_js
                     (fun (x1346 : [ `der ]) ->
                        match x1346 with | `der -> Ojs.string_to_js "der")
                     (fun (x1347 : [ `pem ]) ->
                        match x1347 with | `pem -> Ojs.string_to_js "pem")
                     x1345);(Ojs.fun_to_js 3
                               (fun (x1349 : Ojs.t) ->
                                  fun (x1351 : Ojs.t) ->
                                    fun (x1352 : Ojs.t) ->
                                      x1348
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1349)
                                        ~public_key:(Buffer.t_of_js x1351)
                                        ~private_key:(Ojs.string_of_js x1352)))|])
    let (generate_key_pair :
      type_:[ `ec ] ->
        options:([ `der ], [ `der ]) ECKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1353 : [ `ec ]) ->
        fun ~options:(x1354 : ([ `der ], [ `der ]) ECKeyPairOptions.t) ->
          fun
            ~callback:(x1357 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1353 with | `ec -> Ojs.string_to_js "ec"));(
                   ECKeyPairOptions.t_to_js
                     (fun (x1355 : [ `der ]) ->
                        match x1355 with | `der -> Ojs.string_to_js "der")
                     (fun (x1356 : [ `der ]) ->
                        match x1356 with | `der -> Ojs.string_to_js "der")
                     x1354);(Ojs.fun_to_js 3
                               (fun (x1358 : Ojs.t) ->
                                  fun (x1360 : Ojs.t) ->
                                    fun (x1361 : Ojs.t) ->
                                      x1357
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1358)
                                        ~public_key:(Buffer.t_of_js x1360)
                                        ~private_key:(Buffer.t_of_js x1361)))|])
    let (generate_key_pair :
      type_:[ `ec ] ->
        options:ECKeyPairKeyObjectOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1362 : [ `ec ]) ->
        fun ~options:(x1363 : ECKeyPairKeyObjectOptions.t) ->
          fun
            ~callback:(x1364 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1362 with | `ec -> Ojs.string_to_js "ec"));(
                   ECKeyPairKeyObjectOptions.t_to_js x1363);(Ojs.fun_to_js 3
                                                               (fun
                                                                  (x1365 :
                                                                    Ojs.t)
                                                                  ->
                                                                  fun
                                                                    (x1367 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1368 :
                                                                    Ojs.t) ->
                                                                    x1364
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x1365)
                                                                    ~public_key:(
                                                                    KeyObject.t_of_js
                                                                    x1367)
                                                                    ~private_key:(
                                                                    KeyObject.t_of_js
                                                                    x1368)))|])
    let (generate_key_pair :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `pem ]) ED25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1369 : [ `ed25519 ]) ->
        fun ~options:(x1370 : ([ `pem ], [ `pem ]) ED25519KeyPairOptions.t)
          ->
          fun
            ~callback:(x1373 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1369 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1371 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1371
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1372 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1372
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1370);(
                   Ojs.fun_to_js 3
                     (fun (x1374 : Ojs.t) ->
                        fun (x1376 : Ojs.t) ->
                          fun (x1377 : Ojs.t) ->
                            x1373 ~err:(or_null_of_js Error.t_of_js x1374)
                              ~public_key:(Ojs.string_of_js x1376)
                              ~private_key:(Ojs.string_of_js x1377)))|])
    let (generate_key_pair :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `der ]) ED25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1378 : [ `ed25519 ]) ->
        fun ~options:(x1379 : ([ `pem ], [ `der ]) ED25519KeyPairOptions.t)
          ->
          fun
            ~callback:(x1382 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1378 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1380 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1380
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1381 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1381
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1379);(
                   Ojs.fun_to_js 3
                     (fun (x1383 : Ojs.t) ->
                        fun (x1385 : Ojs.t) ->
                          fun (x1386 : Ojs.t) ->
                            x1382 ~err:(or_null_of_js Error.t_of_js x1383)
                              ~public_key:(Ojs.string_of_js x1385)
                              ~private_key:(Buffer.t_of_js x1386)))|])
    let (generate_key_pair :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `pem ]) ED25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1387 : [ `ed25519 ]) ->
        fun ~options:(x1388 : ([ `der ], [ `pem ]) ED25519KeyPairOptions.t)
          ->
          fun
            ~callback:(x1391 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1387 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1389 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1389
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1390 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1390
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1388);(
                   Ojs.fun_to_js 3
                     (fun (x1392 : Ojs.t) ->
                        fun (x1394 : Ojs.t) ->
                          fun (x1395 : Ojs.t) ->
                            x1391 ~err:(or_null_of_js Error.t_of_js x1392)
                              ~public_key:(Buffer.t_of_js x1394)
                              ~private_key:(Ojs.string_of_js x1395)))|])
    let (generate_key_pair :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `der ]) ED25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1396 : [ `ed25519 ]) ->
        fun ~options:(x1397 : ([ `der ], [ `der ]) ED25519KeyPairOptions.t)
          ->
          fun
            ~callback:(x1400 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1396 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1398 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1398
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1399 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1399
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1397);(
                   Ojs.fun_to_js 3
                     (fun (x1401 : Ojs.t) ->
                        fun (x1403 : Ojs.t) ->
                          fun (x1404 : Ojs.t) ->
                            x1400 ~err:(or_null_of_js Error.t_of_js x1401)
                              ~public_key:(Buffer.t_of_js x1403)
                              ~private_key:(Buffer.t_of_js x1404)))|])
    let (generate_key_pair :
      type_:[ `ed25519 ] ->
        options:ED25519KeyPairKeyObjectOptions.t or_undefined ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1405 : [ `ed25519 ]) ->
        fun ~options:(x1406 : ED25519KeyPairKeyObjectOptions.t or_undefined)
          ->
          fun
            ~callback:(x1408 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1405 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(or_undefined_to_js
                                                                   ED25519KeyPairKeyObjectOptions.t_to_js
                                                                   x1406);(
                   Ojs.fun_to_js 3
                     (fun (x1409 : Ojs.t) ->
                        fun (x1411 : Ojs.t) ->
                          fun (x1412 : Ojs.t) ->
                            x1408 ~err:(or_null_of_js Error.t_of_js x1409)
                              ~public_key:(KeyObject.t_of_js x1411)
                              ~private_key:(KeyObject.t_of_js x1412)))|])
    let (generate_key_pair :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `pem ]) ED448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1413 : [ `ed448 ]) ->
        fun ~options:(x1414 : ([ `pem ], [ `pem ]) ED448KeyPairOptions.t) ->
          fun
            ~callback:(x1417 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1413 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   ED448KeyPairOptions.t_to_js
                     (fun (x1415 : [ `pem ]) ->
                        match x1415 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1416 : [ `pem ]) ->
                        match x1416 with | `pem -> Ojs.string_to_js "pem")
                     x1414);(Ojs.fun_to_js 3
                               (fun (x1418 : Ojs.t) ->
                                  fun (x1420 : Ojs.t) ->
                                    fun (x1421 : Ojs.t) ->
                                      x1417
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1418)
                                        ~public_key:(Ojs.string_of_js x1420)
                                        ~private_key:(Ojs.string_of_js x1421)))|])
    let (generate_key_pair :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `der ]) ED448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1422 : [ `ed448 ]) ->
        fun ~options:(x1423 : ([ `pem ], [ `der ]) ED448KeyPairOptions.t) ->
          fun
            ~callback:(x1426 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1422 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   ED448KeyPairOptions.t_to_js
                     (fun (x1424 : [ `pem ]) ->
                        match x1424 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1425 : [ `der ]) ->
                        match x1425 with | `der -> Ojs.string_to_js "der")
                     x1423);(Ojs.fun_to_js 3
                               (fun (x1427 : Ojs.t) ->
                                  fun (x1429 : Ojs.t) ->
                                    fun (x1430 : Ojs.t) ->
                                      x1426
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1427)
                                        ~public_key:(Ojs.string_of_js x1429)
                                        ~private_key:(Buffer.t_of_js x1430)))|])
    let (generate_key_pair :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `pem ]) ED448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1431 : [ `ed448 ]) ->
        fun ~options:(x1432 : ([ `der ], [ `pem ]) ED448KeyPairOptions.t) ->
          fun
            ~callback:(x1435 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1431 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   ED448KeyPairOptions.t_to_js
                     (fun (x1433 : [ `der ]) ->
                        match x1433 with | `der -> Ojs.string_to_js "der")
                     (fun (x1434 : [ `pem ]) ->
                        match x1434 with | `pem -> Ojs.string_to_js "pem")
                     x1432);(Ojs.fun_to_js 3
                               (fun (x1436 : Ojs.t) ->
                                  fun (x1438 : Ojs.t) ->
                                    fun (x1439 : Ojs.t) ->
                                      x1435
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1436)
                                        ~public_key:(Buffer.t_of_js x1438)
                                        ~private_key:(Ojs.string_of_js x1439)))|])
    let (generate_key_pair :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `der ]) ED448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1440 : [ `ed448 ]) ->
        fun ~options:(x1441 : ([ `der ], [ `der ]) ED448KeyPairOptions.t) ->
          fun
            ~callback:(x1444 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1440 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   ED448KeyPairOptions.t_to_js
                     (fun (x1442 : [ `der ]) ->
                        match x1442 with | `der -> Ojs.string_to_js "der")
                     (fun (x1443 : [ `der ]) ->
                        match x1443 with | `der -> Ojs.string_to_js "der")
                     x1441);(Ojs.fun_to_js 3
                               (fun (x1445 : Ojs.t) ->
                                  fun (x1447 : Ojs.t) ->
                                    fun (x1448 : Ojs.t) ->
                                      x1444
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1445)
                                        ~public_key:(Buffer.t_of_js x1447)
                                        ~private_key:(Buffer.t_of_js x1448)))|])
    let (generate_key_pair :
      type_:[ `ed448 ] ->
        options:ED448KeyPairKeyObjectOptions.t or_undefined ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1449 : [ `ed448 ]) ->
        fun ~options:(x1450 : ED448KeyPairKeyObjectOptions.t or_undefined) ->
          fun
            ~callback:(x1452 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1449 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   or_undefined_to_js ED448KeyPairKeyObjectOptions.t_to_js
                     x1450);(Ojs.fun_to_js 3
                               (fun (x1453 : Ojs.t) ->
                                  fun (x1455 : Ojs.t) ->
                                    fun (x1456 : Ojs.t) ->
                                      x1452
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1453)
                                        ~public_key:(KeyObject.t_of_js x1455)
                                        ~private_key:(KeyObject.t_of_js x1456)))|])
    let (generate_key_pair :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `pem ]) X25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1457 : [ `x25519 ]) ->
        fun ~options:(x1458 : ([ `pem ], [ `pem ]) X25519KeyPairOptions.t) ->
          fun
            ~callback:(x1461 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1457 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   X25519KeyPairOptions.t_to_js
                     (fun (x1459 : [ `pem ]) ->
                        match x1459 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1460 : [ `pem ]) ->
                        match x1460 with | `pem -> Ojs.string_to_js "pem")
                     x1458);(Ojs.fun_to_js 3
                               (fun (x1462 : Ojs.t) ->
                                  fun (x1464 : Ojs.t) ->
                                    fun (x1465 : Ojs.t) ->
                                      x1461
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1462)
                                        ~public_key:(Ojs.string_of_js x1464)
                                        ~private_key:(Ojs.string_of_js x1465)))|])
    let (generate_key_pair :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `der ]) X25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1466 : [ `x25519 ]) ->
        fun ~options:(x1467 : ([ `pem ], [ `der ]) X25519KeyPairOptions.t) ->
          fun
            ~callback:(x1470 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1466 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   X25519KeyPairOptions.t_to_js
                     (fun (x1468 : [ `pem ]) ->
                        match x1468 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1469 : [ `der ]) ->
                        match x1469 with | `der -> Ojs.string_to_js "der")
                     x1467);(Ojs.fun_to_js 3
                               (fun (x1471 : Ojs.t) ->
                                  fun (x1473 : Ojs.t) ->
                                    fun (x1474 : Ojs.t) ->
                                      x1470
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1471)
                                        ~public_key:(Ojs.string_of_js x1473)
                                        ~private_key:(Buffer.t_of_js x1474)))|])
    let (generate_key_pair :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `pem ]) X25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1475 : [ `x25519 ]) ->
        fun ~options:(x1476 : ([ `der ], [ `pem ]) X25519KeyPairOptions.t) ->
          fun
            ~callback:(x1479 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1475 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   X25519KeyPairOptions.t_to_js
                     (fun (x1477 : [ `der ]) ->
                        match x1477 with | `der -> Ojs.string_to_js "der")
                     (fun (x1478 : [ `pem ]) ->
                        match x1478 with | `pem -> Ojs.string_to_js "pem")
                     x1476);(Ojs.fun_to_js 3
                               (fun (x1480 : Ojs.t) ->
                                  fun (x1482 : Ojs.t) ->
                                    fun (x1483 : Ojs.t) ->
                                      x1479
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1480)
                                        ~public_key:(Buffer.t_of_js x1482)
                                        ~private_key:(Ojs.string_of_js x1483)))|])
    let (generate_key_pair :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `der ]) X25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1484 : [ `x25519 ]) ->
        fun ~options:(x1485 : ([ `der ], [ `der ]) X25519KeyPairOptions.t) ->
          fun
            ~callback:(x1488 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1484 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   X25519KeyPairOptions.t_to_js
                     (fun (x1486 : [ `der ]) ->
                        match x1486 with | `der -> Ojs.string_to_js "der")
                     (fun (x1487 : [ `der ]) ->
                        match x1487 with | `der -> Ojs.string_to_js "der")
                     x1485);(Ojs.fun_to_js 3
                               (fun (x1489 : Ojs.t) ->
                                  fun (x1491 : Ojs.t) ->
                                    fun (x1492 : Ojs.t) ->
                                      x1488
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1489)
                                        ~public_key:(Buffer.t_of_js x1491)
                                        ~private_key:(Buffer.t_of_js x1492)))|])
    let (generate_key_pair :
      type_:[ `x25519 ] ->
        options:X25519KeyPairKeyObjectOptions.t or_undefined ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1493 : [ `x25519 ]) ->
        fun ~options:(x1494 : X25519KeyPairKeyObjectOptions.t or_undefined)
          ->
          fun
            ~callback:(x1496 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1493 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   or_undefined_to_js X25519KeyPairKeyObjectOptions.t_to_js
                     x1494);(Ojs.fun_to_js 3
                               (fun (x1497 : Ojs.t) ->
                                  fun (x1499 : Ojs.t) ->
                                    fun (x1500 : Ojs.t) ->
                                      x1496
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1497)
                                        ~public_key:(KeyObject.t_of_js x1499)
                                        ~private_key:(KeyObject.t_of_js x1500)))|])
    let (generate_key_pair :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `pem ]) X448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1501 : [ `x448 ]) ->
        fun ~options:(x1502 : ([ `pem ], [ `pem ]) X448KeyPairOptions.t) ->
          fun
            ~callback:(x1505 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1501 with | `x448 -> Ojs.string_to_js "x448"));(
                   X448KeyPairOptions.t_to_js
                     (fun (x1503 : [ `pem ]) ->
                        match x1503 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1504 : [ `pem ]) ->
                        match x1504 with | `pem -> Ojs.string_to_js "pem")
                     x1502);(Ojs.fun_to_js 3
                               (fun (x1506 : Ojs.t) ->
                                  fun (x1508 : Ojs.t) ->
                                    fun (x1509 : Ojs.t) ->
                                      x1505
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1506)
                                        ~public_key:(Ojs.string_of_js x1508)
                                        ~private_key:(Ojs.string_of_js x1509)))|])
    let (generate_key_pair :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `der ]) X448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1510 : [ `x448 ]) ->
        fun ~options:(x1511 : ([ `pem ], [ `der ]) X448KeyPairOptions.t) ->
          fun
            ~callback:(x1514 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1510 with | `x448 -> Ojs.string_to_js "x448"));(
                   X448KeyPairOptions.t_to_js
                     (fun (x1512 : [ `pem ]) ->
                        match x1512 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1513 : [ `der ]) ->
                        match x1513 with | `der -> Ojs.string_to_js "der")
                     x1511);(Ojs.fun_to_js 3
                               (fun (x1515 : Ojs.t) ->
                                  fun (x1517 : Ojs.t) ->
                                    fun (x1518 : Ojs.t) ->
                                      x1514
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1515)
                                        ~public_key:(Ojs.string_of_js x1517)
                                        ~private_key:(Buffer.t_of_js x1518)))|])
    let (generate_key_pair :
      type_:[ `x448 ] ->
        options:([ `der ], [ `pem ]) X448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1519 : [ `x448 ]) ->
        fun ~options:(x1520 : ([ `der ], [ `pem ]) X448KeyPairOptions.t) ->
          fun
            ~callback:(x1523 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1519 with | `x448 -> Ojs.string_to_js "x448"));(
                   X448KeyPairOptions.t_to_js
                     (fun (x1521 : [ `der ]) ->
                        match x1521 with | `der -> Ojs.string_to_js "der")
                     (fun (x1522 : [ `pem ]) ->
                        match x1522 with | `pem -> Ojs.string_to_js "pem")
                     x1520);(Ojs.fun_to_js 3
                               (fun (x1524 : Ojs.t) ->
                                  fun (x1526 : Ojs.t) ->
                                    fun (x1527 : Ojs.t) ->
                                      x1523
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1524)
                                        ~public_key:(Buffer.t_of_js x1526)
                                        ~private_key:(Ojs.string_of_js x1527)))|])
    let (generate_key_pair :
      type_:[ `x448 ] ->
        options:([ `der ], [ `der ]) X448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1528 : [ `x448 ]) ->
        fun ~options:(x1529 : ([ `der ], [ `der ]) X448KeyPairOptions.t) ->
          fun
            ~callback:(x1532 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1528 with | `x448 -> Ojs.string_to_js "x448"));(
                   X448KeyPairOptions.t_to_js
                     (fun (x1530 : [ `der ]) ->
                        match x1530 with | `der -> Ojs.string_to_js "der")
                     (fun (x1531 : [ `der ]) ->
                        match x1531 with | `der -> Ojs.string_to_js "der")
                     x1529);(Ojs.fun_to_js 3
                               (fun (x1533 : Ojs.t) ->
                                  fun (x1535 : Ojs.t) ->
                                    fun (x1536 : Ojs.t) ->
                                      x1532
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1533)
                                        ~public_key:(Buffer.t_of_js x1535)
                                        ~private_key:(Buffer.t_of_js x1536)))|])
    let (generate_key_pair :
      type_:[ `x448 ] ->
        options:X448KeyPairKeyObjectOptions.t or_undefined ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1537 : [ `x448 ]) ->
        fun ~options:(x1538 : X448KeyPairKeyObjectOptions.t or_undefined) ->
          fun
            ~callback:(x1540 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1537 with | `x448 -> Ojs.string_to_js "x448"));(
                   or_undefined_to_js X448KeyPairKeyObjectOptions.t_to_js
                     x1538);(Ojs.fun_to_js 3
                               (fun (x1541 : Ojs.t) ->
                                  fun (x1543 : Ojs.t) ->
                                    fun (x1544 : Ojs.t) ->
                                      x1540
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1541)
                                        ~public_key:(KeyObject.t_of_js x1543)
                                        ~private_key:(KeyObject.t_of_js x1544)))|])
    module GenerateKeyPair =
      struct
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `pem ], [ `pem ]) RSAKeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1545 : [ `rsa ]) ->
            fun ~options:(x1546 : ([ `pem ], [ `pem ]) RSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1545 with | `rsa -> Ojs.string_to_js "rsa"));(
                     RSAKeyPairOptions.t_to_js
                       (fun (x1547 : [ `pem ]) ->
                          match x1547 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1548 : [ `pem ]) ->
                          match x1548 with | `pem -> Ojs.string_to_js "pem")
                       x1546)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `pem ], [ `der ]) RSAKeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1550 : [ `rsa ]) ->
            fun ~options:(x1551 : ([ `pem ], [ `der ]) RSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1550 with | `rsa -> Ojs.string_to_js "rsa"));(
                     RSAKeyPairOptions.t_to_js
                       (fun (x1552 : [ `pem ]) ->
                          match x1552 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1553 : [ `der ]) ->
                          match x1553 with | `der -> Ojs.string_to_js "der")
                       x1551)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `der ], [ `pem ]) RSAKeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1555 : [ `rsa ]) ->
            fun ~options:(x1556 : ([ `der ], [ `pem ]) RSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1555 with | `rsa -> Ojs.string_to_js "rsa"));(
                     RSAKeyPairOptions.t_to_js
                       (fun (x1557 : [ `der ]) ->
                          match x1557 with | `der -> Ojs.string_to_js "der")
                       (fun (x1558 : [ `pem ]) ->
                          match x1558 with | `pem -> Ojs.string_to_js "pem")
                       x1556)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `der ], [ `der ]) RSAKeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1560 : [ `rsa ]) ->
            fun ~options:(x1561 : ([ `der ], [ `der ]) RSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1560 with | `rsa -> Ojs.string_to_js "rsa"));(
                     RSAKeyPairOptions.t_to_js
                       (fun (x1562 : [ `der ]) ->
                          match x1562 with | `der -> Ojs.string_to_js "der")
                       (fun (x1563 : [ `der ]) ->
                          match x1563 with | `der -> Ojs.string_to_js "der")
                       x1561)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:RSAKeyPairKeyObjectOptions.t ->
              KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1565 : [ `rsa ]) ->
            fun ~options:(x1566 : RSAKeyPairKeyObjectOptions.t) ->
              Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1565 with | `rsa -> Ojs.string_to_js "rsa"));(
                     RSAKeyPairKeyObjectOptions.t_to_js x1566)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `pem ], [ `pem ]) DSAKeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1568 : [ `dsa ]) ->
            fun ~options:(x1569 : ([ `pem ], [ `pem ]) DSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1568 with | `dsa -> Ojs.string_to_js "dsa"));(
                     DSAKeyPairOptions.t_to_js
                       (fun (x1570 : [ `pem ]) ->
                          match x1570 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1571 : [ `pem ]) ->
                          match x1571 with | `pem -> Ojs.string_to_js "pem")
                       x1569)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `pem ], [ `der ]) DSAKeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1573 : [ `dsa ]) ->
            fun ~options:(x1574 : ([ `pem ], [ `der ]) DSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1573 with | `dsa -> Ojs.string_to_js "dsa"));(
                     DSAKeyPairOptions.t_to_js
                       (fun (x1575 : [ `pem ]) ->
                          match x1575 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1576 : [ `der ]) ->
                          match x1576 with | `der -> Ojs.string_to_js "der")
                       x1574)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `der ], [ `pem ]) DSAKeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1578 : [ `dsa ]) ->
            fun ~options:(x1579 : ([ `der ], [ `pem ]) DSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1578 with | `dsa -> Ojs.string_to_js "dsa"));(
                     DSAKeyPairOptions.t_to_js
                       (fun (x1580 : [ `der ]) ->
                          match x1580 with | `der -> Ojs.string_to_js "der")
                       (fun (x1581 : [ `pem ]) ->
                          match x1581 with | `pem -> Ojs.string_to_js "pem")
                       x1579)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `der ], [ `der ]) DSAKeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1583 : [ `dsa ]) ->
            fun ~options:(x1584 : ([ `der ], [ `der ]) DSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1583 with | `dsa -> Ojs.string_to_js "dsa"));(
                     DSAKeyPairOptions.t_to_js
                       (fun (x1585 : [ `der ]) ->
                          match x1585 with | `der -> Ojs.string_to_js "der")
                       (fun (x1586 : [ `der ]) ->
                          match x1586 with | `der -> Ojs.string_to_js "der")
                       x1584)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:DSAKeyPairKeyObjectOptions.t ->
              KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1588 : [ `dsa ]) ->
            fun ~options:(x1589 : DSAKeyPairKeyObjectOptions.t) ->
              Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1588 with | `dsa -> Ojs.string_to_js "dsa"));(
                     DSAKeyPairKeyObjectOptions.t_to_js x1589)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `pem ], [ `pem ]) ECKeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1591 : [ `ec ]) ->
            fun ~options:(x1592 : ([ `pem ], [ `pem ]) ECKeyPairOptions.t) ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1591 with | `ec -> Ojs.string_to_js "ec"));(
                     ECKeyPairOptions.t_to_js
                       (fun (x1593 : [ `pem ]) ->
                          match x1593 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1594 : [ `pem ]) ->
                          match x1594 with | `pem -> Ojs.string_to_js "pem")
                       x1592)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `pem ], [ `der ]) ECKeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1596 : [ `ec ]) ->
            fun ~options:(x1597 : ([ `pem ], [ `der ]) ECKeyPairOptions.t) ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1596 with | `ec -> Ojs.string_to_js "ec"));(
                     ECKeyPairOptions.t_to_js
                       (fun (x1598 : [ `pem ]) ->
                          match x1598 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1599 : [ `der ]) ->
                          match x1599 with | `der -> Ojs.string_to_js "der")
                       x1597)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `der ], [ `pem ]) ECKeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1601 : [ `ec ]) ->
            fun ~options:(x1602 : ([ `der ], [ `pem ]) ECKeyPairOptions.t) ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1601 with | `ec -> Ojs.string_to_js "ec"));(
                     ECKeyPairOptions.t_to_js
                       (fun (x1603 : [ `der ]) ->
                          match x1603 with | `der -> Ojs.string_to_js "der")
                       (fun (x1604 : [ `pem ]) ->
                          match x1604 with | `pem -> Ojs.string_to_js "pem")
                       x1602)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `der ], [ `der ]) ECKeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1606 : [ `ec ]) ->
            fun ~options:(x1607 : ([ `der ], [ `der ]) ECKeyPairOptions.t) ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1606 with | `ec -> Ojs.string_to_js "ec"));(
                     ECKeyPairOptions.t_to_js
                       (fun (x1608 : [ `der ]) ->
                          match x1608 with | `der -> Ojs.string_to_js "der")
                       (fun (x1609 : [ `der ]) ->
                          match x1609 with | `der -> Ojs.string_to_js "der")
                       x1607)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:ECKeyPairKeyObjectOptions.t ->
              KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1611 : [ `ec ]) ->
            fun ~options:(x1612 : ECKeyPairKeyObjectOptions.t) ->
              Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1611 with | `ec -> Ojs.string_to_js "ec"));(
                     ECKeyPairKeyObjectOptions.t_to_js x1612)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `pem ], [ `pem ]) ED25519KeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1614 : [ `ed25519 ]) ->
            fun
              ~options:(x1615 : ([ `pem ], [ `pem ]) ED25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1614 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                    (fun
                                                                    (x1616 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1616
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    (fun
                                                                    (x1617 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1617
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    x1615)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `pem ], [ `der ]) ED25519KeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1619 : [ `ed25519 ]) ->
            fun
              ~options:(x1620 : ([ `pem ], [ `der ]) ED25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1619 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                    (fun
                                                                    (x1621 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1621
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    (fun
                                                                    (x1622 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1622
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    x1620)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `der ], [ `pem ]) ED25519KeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1624 : [ `ed25519 ]) ->
            fun
              ~options:(x1625 : ([ `der ], [ `pem ]) ED25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1624 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                    (fun
                                                                    (x1626 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1626
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    (fun
                                                                    (x1627 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1627
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    x1625)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `der ], [ `der ]) ED25519KeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1629 : [ `ed25519 ]) ->
            fun
              ~options:(x1630 : ([ `der ], [ `der ]) ED25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1629 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                    (fun
                                                                    (x1631 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1631
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    (fun
                                                                    (x1632 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1632
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    x1630)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            ?options:ED25519KeyPairKeyObjectOptions.t ->
              unit -> KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1634 : [ `ed25519 ]) ->
            fun ?options:(x1635 : ED25519KeyPairKeyObjectOptions.t option) ->
              fun () ->
                Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                  (let x1638 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1638 "__promisify__")
                     "apply"
                     [|x1638;((let x1636 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1636 "push"
                                    [|((match x1634 with
                                        | `ed25519 ->
                                            Ojs.string_to_js "ed25519"))|]);
                               (match x1635 with
                                | Some x1637 ->
                                    ignore
                                      (Ojs.call x1636 "push"
                                         [|(ED25519KeyPairKeyObjectOptions.t_to_js
                                              x1637)|])
                                | None -> ());
                               x1636))|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `pem ], [ `pem ]) ED448KeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1640 : [ `ed448 ]) ->
            fun ~options:(x1641 : ([ `pem ], [ `pem ]) ED448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1640 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     ED448KeyPairOptions.t_to_js
                       (fun (x1642 : [ `pem ]) ->
                          match x1642 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1643 : [ `pem ]) ->
                          match x1643 with | `pem -> Ojs.string_to_js "pem")
                       x1641)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `pem ], [ `der ]) ED448KeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1645 : [ `ed448 ]) ->
            fun ~options:(x1646 : ([ `pem ], [ `der ]) ED448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1645 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     ED448KeyPairOptions.t_to_js
                       (fun (x1647 : [ `pem ]) ->
                          match x1647 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1648 : [ `der ]) ->
                          match x1648 with | `der -> Ojs.string_to_js "der")
                       x1646)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `der ], [ `pem ]) ED448KeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1650 : [ `ed448 ]) ->
            fun ~options:(x1651 : ([ `der ], [ `pem ]) ED448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1650 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     ED448KeyPairOptions.t_to_js
                       (fun (x1652 : [ `der ]) ->
                          match x1652 with | `der -> Ojs.string_to_js "der")
                       (fun (x1653 : [ `pem ]) ->
                          match x1653 with | `pem -> Ojs.string_to_js "pem")
                       x1651)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `der ], [ `der ]) ED448KeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1655 : [ `ed448 ]) ->
            fun ~options:(x1656 : ([ `der ], [ `der ]) ED448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1655 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     ED448KeyPairOptions.t_to_js
                       (fun (x1657 : [ `der ]) ->
                          match x1657 with | `der -> Ojs.string_to_js "der")
                       (fun (x1658 : [ `der ]) ->
                          match x1658 with | `der -> Ojs.string_to_js "der")
                       x1656)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            ?options:ED448KeyPairKeyObjectOptions.t ->
              unit -> KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1660 : [ `ed448 ]) ->
            fun ?options:(x1661 : ED448KeyPairKeyObjectOptions.t option) ->
              fun () ->
                Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                  (let x1664 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1664 "__promisify__")
                     "apply"
                     [|x1664;((let x1662 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1662 "push"
                                    [|((match x1660 with
                                        | `ed448 -> Ojs.string_to_js "ed448"))|]);
                               (match x1661 with
                                | Some x1663 ->
                                    ignore
                                      (Ojs.call x1662 "push"
                                         [|(ED448KeyPairKeyObjectOptions.t_to_js
                                              x1663)|])
                                | None -> ());
                               x1662))|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `pem ], [ `pem ]) X25519KeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1666 : [ `x25519 ]) ->
            fun
              ~options:(x1667 : ([ `pem ], [ `pem ]) X25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1666 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(X25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1668 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1668
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1669 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1669
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1667)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `pem ], [ `der ]) X25519KeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1671 : [ `x25519 ]) ->
            fun
              ~options:(x1672 : ([ `pem ], [ `der ]) X25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1671 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(X25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1673 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1673
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1674 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1674
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1672)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `der ], [ `pem ]) X25519KeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1676 : [ `x25519 ]) ->
            fun
              ~options:(x1677 : ([ `der ], [ `pem ]) X25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1676 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(X25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1678 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1678
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1679 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1679
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1677)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `der ], [ `der ]) X25519KeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1681 : [ `x25519 ]) ->
            fun
              ~options:(x1682 : ([ `der ], [ `der ]) X25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1681 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(X25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1683 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1683
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1684 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1684
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1682)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            ?options:X25519KeyPairKeyObjectOptions.t ->
              unit -> KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1686 : [ `x25519 ]) ->
            fun ?options:(x1687 : X25519KeyPairKeyObjectOptions.t option) ->
              fun () ->
                Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                  (let x1690 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1690 "__promisify__")
                     "apply"
                     [|x1690;((let x1688 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1688 "push"
                                    [|((match x1686 with
                                        | `x25519 ->
                                            Ojs.string_to_js "x25519"))|]);
                               (match x1687 with
                                | Some x1689 ->
                                    ignore
                                      (Ojs.call x1688 "push"
                                         [|(X25519KeyPairKeyObjectOptions.t_to_js
                                              x1689)|])
                                | None -> ());
                               x1688))|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `pem ], [ `pem ]) X448KeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1692 : [ `x448 ]) ->
            fun ~options:(x1693 : ([ `pem ], [ `pem ]) X448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1692 with | `x448 -> Ojs.string_to_js "x448"));(
                     X448KeyPairOptions.t_to_js
                       (fun (x1694 : [ `pem ]) ->
                          match x1694 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1695 : [ `pem ]) ->
                          match x1695 with | `pem -> Ojs.string_to_js "pem")
                       x1693)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `pem ], [ `der ]) X448KeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1697 : [ `x448 ]) ->
            fun ~options:(x1698 : ([ `pem ], [ `der ]) X448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1697 with | `x448 -> Ojs.string_to_js "x448"));(
                     X448KeyPairOptions.t_to_js
                       (fun (x1699 : [ `pem ]) ->
                          match x1699 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1700 : [ `der ]) ->
                          match x1700 with | `der -> Ojs.string_to_js "der")
                       x1698)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `der ], [ `pem ]) X448KeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1702 : [ `x448 ]) ->
            fun ~options:(x1703 : ([ `der ], [ `pem ]) X448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1702 with | `x448 -> Ojs.string_to_js "x448"));(
                     X448KeyPairOptions.t_to_js
                       (fun (x1704 : [ `der ]) ->
                          match x1704 with | `der -> Ojs.string_to_js "der")
                       (fun (x1705 : [ `pem ]) ->
                          match x1705 with | `pem -> Ojs.string_to_js "pem")
                       x1703)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `der ], [ `der ]) X448KeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1707 : [ `x448 ]) ->
            fun ~options:(x1708 : ([ `der ], [ `der ]) X448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1707 with | `x448 -> Ojs.string_to_js "x448"));(
                     X448KeyPairOptions.t_to_js
                       (fun (x1709 : [ `der ]) ->
                          match x1709 with | `der -> Ojs.string_to_js "der")
                       (fun (x1710 : [ `der ]) ->
                          match x1710 with | `der -> Ojs.string_to_js "der")
                       x1708)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            ?options:X448KeyPairKeyObjectOptions.t ->
              unit -> KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1712 : [ `x448 ]) ->
            fun ?options:(x1713 : X448KeyPairKeyObjectOptions.t option) ->
              fun () ->
                Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                  (let x1716 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1716 "__promisify__")
                     "apply"
                     [|x1716;((let x1714 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1714 "push"
                                    [|((match x1712 with
                                        | `x448 -> Ojs.string_to_js "x448"))|]);
                               (match x1713 with
                                | Some x1715 ->
                                    ignore
                                      (Ojs.call x1714 "push"
                                         [|(X448KeyPairKeyObjectOptions.t_to_js
                                              x1715)|])
                                | None -> ());
                               x1714))|])
      end
    let (sign :
      algorithm:string or_null_or_undefined ->
        data:ArrayBufferView.t ->
          key:([ `U_s11_der of SignKeyObjectInput.t 
               | `U_s18_ieee_p1363 of SignKeyObjectInput.t ],
            [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
            | `U_s22_pkcs8 of SignPrivateKeyInput.t 
            | `U_s23_private of KeyLike.t  | `U_s24_public of KeyLike.t 
            | `U_s26_sec1 of SignPrivateKeyInput.t 
            | `U_s27_secret of KeyLike.t ]) union2 -> Buffer.t)
      =
      fun ~algorithm:(x1718 : string or_null_or_undefined) ->
        fun ~data:(x1720 : ArrayBufferView.t) ->
          fun
            ~key:(x1721 :
                   ([ `U_s11_der of SignKeyObjectInput.t 
                    | `U_s18_ieee_p1363 of SignKeyObjectInput.t ],
                     [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
                     | `U_s22_pkcs8 of SignPrivateKeyInput.t 
                     | `U_s23_private of KeyLike.t 
                     | `U_s24_public of KeyLike.t 
                     | `U_s26_sec1 of SignPrivateKeyInput.t 
                     | `U_s27_secret of KeyLike.t ]) union2)
            ->
            Buffer.t_of_js
              (Ojs.call Import.crypto "sign"
                 [|(or_null_or_undefined_to_js Ojs.string_to_js x1718);(
                   ArrayBufferView.t_to_js x1720);(union2_to_js
                                                     (fun
                                                        (x1722 :
                                                          [
                                                            `U_s11_der of
                                                              SignKeyObjectInput.t
                                                               | `U_s18_ieee_p1363
                                                                   of
                                                                   SignKeyObjectInput.t
                                                                   ])
                                                        ->
                                                        match x1722 with
                                                        | `U_s11_der x1723 ->
                                                            SignKeyObjectInput.t_to_js
                                                              x1723
                                                        | `U_s18_ieee_p1363
                                                            x1724 ->
                                                            SignKeyObjectInput.t_to_js
                                                              x1724)
                                                     (fun
                                                        (x1725 :
                                                          [
                                                            `U_s21_pkcs1 of
                                                              SignPrivateKeyInput.t
                                                               | `U_s22_pkcs8
                                                                   of
                                                                   SignPrivateKeyInput.t
                                                                    | 
                                                            `U_s23_private of
                                                              KeyLike.t 
                                                          | `U_s24_public of
                                                              KeyLike.t 
                                                          | `U_s26_sec1 of
                                                              SignPrivateKeyInput.t
                                                               | `U_s27_secret
                                                                   of
                                                                   KeyLike.t ])
                                                        ->
                                                        match x1725 with
                                                        | `U_s21_pkcs1 x1726
                                                            ->
                                                            SignPrivateKeyInput.t_to_js
                                                              x1726
                                                        | `U_s22_pkcs8 x1727
                                                            ->
                                                            SignPrivateKeyInput.t_to_js
                                                              x1727
                                                        | `U_s23_private
                                                            x1728 ->
                                                            KeyLike.t_to_js
                                                              x1728
                                                        | `U_s24_public x1729
                                                            ->
                                                            KeyLike.t_to_js
                                                              x1729
                                                        | `U_s26_sec1 x1730
                                                            ->
                                                            SignPrivateKeyInput.t_to_js
                                                              x1730
                                                        | `U_s27_secret x1731
                                                            ->
                                                            KeyLike.t_to_js
                                                              x1731) x1721)|])
    let (verify :
      algorithm:string or_null_or_undefined ->
        data:ArrayBufferView.t ->
          key:([ `U_s11_der of VerifyKeyObjectInput.t 
               | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ],
            [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
            | `U_s23_private of KeyLike.t  | `U_s24_public of KeyLike.t 
            | `U_s27_secret of KeyLike.t 
            | `U_s28_spki of VerifyPublicKeyInput.t ]) union2 ->
            signature:ArrayBufferView.t -> bool)
      =
      fun ~algorithm:(x1732 : string or_null_or_undefined) ->
        fun ~data:(x1734 : ArrayBufferView.t) ->
          fun
            ~key:(x1735 :
                   ([ `U_s11_der of VerifyKeyObjectInput.t 
                    | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ],
                     [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
                     | `U_s23_private of KeyLike.t 
                     | `U_s24_public of KeyLike.t 
                     | `U_s27_secret of KeyLike.t 
                     | `U_s28_spki of VerifyPublicKeyInput.t ]) union2)
            ->
            fun ~signature:(x1745 : ArrayBufferView.t) ->
              Ojs.bool_of_js
                (Ojs.call Import.crypto "verify"
                   [|(or_null_or_undefined_to_js Ojs.string_to_js x1732);(
                     ArrayBufferView.t_to_js x1734);(union2_to_js
                                                       (fun
                                                          (x1736 :
                                                            [
                                                              `U_s11_der of
                                                                VerifyKeyObjectInput.t
                                                                 | `U_s18_ieee_p1363
                                                                    of
                                                                    VerifyKeyObjectInput.t
                                                                    ])
                                                          ->
                                                          match x1736 with
                                                          | `U_s11_der x1737
                                                              ->
                                                              VerifyKeyObjectInput.t_to_js
                                                                x1737
                                                          | `U_s18_ieee_p1363
                                                              x1738 ->
                                                              VerifyKeyObjectInput.t_to_js
                                                                x1738)
                                                       (fun
                                                          (x1739 :
                                                            [
                                                              `U_s21_pkcs1 of
                                                                VerifyPublicKeyInput.t
                                                                 | `U_s23_private
                                                                    of
                                                                    KeyLike.t 
                                                            | `U_s24_public
                                                                of KeyLike.t 
                                                            | `U_s27_secret
                                                                of KeyLike.t 
                                                            | `U_s28_spki of
                                                                VerifyPublicKeyInput.t
                                                                ])
                                                          ->
                                                          match x1739 with
                                                          | `U_s21_pkcs1
                                                              x1740 ->
                                                              VerifyPublicKeyInput.t_to_js
                                                                x1740
                                                          | `U_s23_private
                                                              x1741 ->
                                                              KeyLike.t_to_js
                                                                x1741
                                                          | `U_s24_public
                                                              x1742 ->
                                                              KeyLike.t_to_js
                                                                x1742
                                                          | `U_s27_secret
                                                              x1743 ->
                                                              KeyLike.t_to_js
                                                                x1743
                                                          | `U_s28_spki x1744
                                                              ->
                                                              VerifyPublicKeyInput.t_to_js
                                                                x1744) x1735);(
                     ArrayBufferView.t_to_js x1745)|])
    module AnonymousInterface1 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1747 : Ojs.t) -> x1747
        and t_to_js : t -> Ojs.t = fun (x1746 : Ojs.t) -> x1746
        let (get_private_key : t -> KeyObject.t) =
          fun (x1748 : t) ->
            KeyObject.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1748) "privateKey")
        let (set_private_key : t -> KeyObject.t -> unit) =
          fun (x1749 : t) ->
            fun (x1750 : KeyObject.t) ->
              Ojs.set_prop_ascii (t_to_js x1749) "privateKey"
                (KeyObject.t_to_js x1750)
        let (get_public_key : t -> KeyObject.t) =
          fun (x1751 : t) ->
            KeyObject.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1751) "publicKey")
        let (set_public_key : t -> KeyObject.t -> unit) =
          fun (x1752 : t) ->
            fun (x1753 : KeyObject.t) ->
              Ojs.set_prop_ascii (t_to_js x1752) "publicKey"
                (KeyObject.t_to_js x1753)
      end
    let (diffie_hellman : options:AnonymousInterface1.t -> Buffer.t) =
      fun ~options:(x1754 : AnonymousInterface1.t) ->
        Buffer.t_of_js
          (Ojs.call Import.crypto "diffieHellman"
             [|(AnonymousInterface1.t_to_js x1754)|])
  end
