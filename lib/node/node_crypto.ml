[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Crypto =
  struct
    open Node_stream
    module BinaryLike =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
        and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
      end
    module KeyObjectType =
      struct
        type t = [ `private_  | `public  | `secret ]
        let rec t_of_js : Ojs.t -> t =
          fun (x4 : Ojs.t) ->
            let x5 = x4 in
            match Ojs.string_of_js x5 with
            | "private" -> `private_
            | "public" -> `public
            | "secret" -> `secret
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x3 : [ `private_  | `public  | `secret ]) ->
            match x3 with
            | `private_ -> Ojs.string_to_js "private"
            | `public -> Ojs.string_to_js "public"
            | `secret -> Ojs.string_to_js "secret"
      end
    module KeyExportOptions =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) -> fun (__T_of_js : Ojs.t -> __T) -> fun (x7 : Ojs.t) -> x7
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x6 : Ojs.t) -> x6
        let (get_type : 'T t -> [ `pkcs1  | `pkcs8  | `sec1  | `spki ]) =
          fun (x8 : 'T t) ->
            let x10 = Ojs.get_prop_ascii (t_to_js Obj.magic x8) "type" in
            match Ojs.string_of_js x10 with
            | "pkcs1" -> `pkcs1
            | "pkcs8" -> `pkcs8
            | "sec1" -> `sec1
            | "spki" -> `spki
            | _ -> assert false
        let (set_type :
          'T t -> [ `pkcs1  | `pkcs8  | `sec1  | `spki ] -> unit) =
          fun (x11 : 'T t) ->
            fun (x12 : [ `pkcs1  | `pkcs8  | `sec1  | `spki ]) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x11) "type"
                (match x12 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `pkcs8 -> Ojs.string_to_js "pkcs8"
                 | `sec1 -> Ojs.string_to_js "sec1"
                 | `spki -> Ojs.string_to_js "spki")
        let (get_format : 'T t -> 'T) =
          fun (x14 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x14) "format")
        let (set_format : 'T t -> 'T -> unit) =
          fun (x16 : 'T t) ->
            fun (x17 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x16) "format"
                (Obj.magic x17)
        let (get_cipher : 'T t -> string) =
          fun (x19 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x19) "cipher")
        let (set_cipher : 'T t -> string -> unit) =
          fun (x21 : 'T t) ->
            fun (x22 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x21) "cipher"
                (Ojs.string_to_js x22)
        let (get_passphrase : 'T t -> Buffer.t or_string) =
          fun (x24 : 'T t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x24) "passphrase")
        let (set_passphrase : 'T t -> Buffer.t or_string -> unit) =
          fun (x27 : 'T t) ->
            fun (x28 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x27) "passphrase"
                (or_string_to_js Buffer.t_to_js x28)
      end
    module KeyType =
      struct
        type t =
          [ `dsa  | `ec  | `ed25519  | `ed448  | `rsa  | `x25519  | `x448 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x32 : Ojs.t) ->
            let x33 = x32 in
            match Ojs.string_of_js x33 with
            | "dsa" -> `dsa
            | "ec" -> `ec
            | "ed25519" -> `ed25519
            | "ed448" -> `ed448
            | "rsa" -> `rsa
            | "x25519" -> `x25519
            | "x448" -> `x448
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x31 :
              [ `dsa  | `ec  | `ed25519  | `ed448  | `rsa  | `x25519 
              | `x448 ])
            ->
            match x31 with
            | `dsa -> Ojs.string_to_js "dsa"
            | `ec -> Ojs.string_to_js "ec"
            | `ed25519 -> Ojs.string_to_js "ed25519"
            | `ed448 -> Ojs.string_to_js "ed448"
            | `rsa -> Ojs.string_to_js "rsa"
            | `x25519 -> Ojs.string_to_js "x25519"
            | `x448 -> Ojs.string_to_js "x448"
      end
    module KeyObject =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x35 : Ojs.t) -> x35
        and t_to_js : t -> Ojs.t = fun (x34 : Ojs.t) -> x34
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "KeyObject")
                 [||])
        let (get_asymmetric_key_type : t -> KeyType.t) =
          fun (x36 : t) ->
            KeyType.t_of_js
              (Ojs.get_prop_ascii (t_to_js x36) "asymmetricKeyType")
        let (set_asymmetric_key_type : t -> KeyType.t -> unit) =
          fun (x37 : t) ->
            fun (x38 : KeyType.t) ->
              Ojs.set_prop_ascii (t_to_js x37) "asymmetricKeyType"
                (KeyType.t_to_js x38)
        let (get_asymmetric_key_size : t -> int) =
          fun (x39 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x39) "asymmetricKeySize")
        let (set_asymmetric_key_size : t -> int -> unit) =
          fun (x40 : t) ->
            fun (x41 : int) ->
              Ojs.set_prop_ascii (t_to_js x40) "asymmetricKeySize"
                (Ojs.int_to_js x41)
        let (export :
          t -> options:[ `pem ] KeyExportOptions.t -> Buffer.t or_string) =
          fun (x44 : t) ->
            fun ~options:(x42 : [ `pem ] KeyExportOptions.t) ->
              or_string_of_js Buffer.t_of_js
                (Ojs.call (t_to_js x44) "export"
                   [|(KeyExportOptions.t_to_js
                        (fun (x43 : [ `pem ]) ->
                           match x43 with | `pem -> Ojs.string_to_js "pem")
                        x42)|])
        let (export' :
          t -> ?options:[ `der ] KeyExportOptions.t -> unit -> Buffer.t) =
          fun (x50 : t) ->
            fun ?options:(x46 : [ `der ] KeyExportOptions.t option) ->
              fun () ->
                Buffer.t_of_js
                  (let x51 = t_to_js x50 in
                   Ojs.call (Ojs.get_prop_ascii x51 "export") "apply"
                     [|x51;((let x47 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x46 with
                              | Some x48 ->
                                  ignore
                                    (Ojs.call x47 "push"
                                       [|(KeyExportOptions.t_to_js
                                            (fun (x49 : [ `der ]) ->
                                               match x49 with
                                               | `der ->
                                                   Ojs.string_to_js "der")
                                            x48)|])
                              | None -> ());
                             x47))|])
        let (get_symmetric_key_size : t -> int) =
          fun (x52 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x52) "symmetricKeySize")
        let (set_symmetric_key_size : t -> int -> unit) =
          fun (x53 : t) ->
            fun (x54 : int) ->
              Ojs.set_prop_ascii (t_to_js x53) "symmetricKeySize"
                (Ojs.int_to_js x54)
        let (get_type : t -> KeyObjectType.t) =
          fun (x55 : t) ->
            KeyObjectType.t_of_js (Ojs.get_prop_ascii (t_to_js x55) "type")
        let (set_type : t -> KeyObjectType.t -> unit) =
          fun (x56 : t) ->
            fun (x57 : KeyObjectType.t) ->
              Ojs.set_prop_ascii (t_to_js x56) "type"
                (KeyObjectType.t_to_js x57)
      end
    module CipherKey =
      struct
        type t = (BinaryLike.t, KeyObject.t) union2
        let rec t_of_js : Ojs.t -> t =
          fun (x61 : Ojs.t) ->
            union2_of_js BinaryLike.t_of_js KeyObject.t_of_js x61
        and t_to_js : t -> Ojs.t =
          fun (x58 : (BinaryLike.t, KeyObject.t) union2) ->
            union2_to_js BinaryLike.t_to_js KeyObject.t_to_js x58
      end
    module Certificate =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x65 : Ojs.t) -> x65
        and t_to_js : t -> Ojs.t = fun (x64 : Ojs.t) -> x64
        let (export_challenge : t -> spkac:BinaryLike.t -> Buffer.t) =
          fun (x67 : t) ->
            fun ~spkac:(x66 : BinaryLike.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x67) "exportChallenge"
                   [|(BinaryLike.t_to_js x66)|])
        let (export_public_key :
          t -> spkac:BinaryLike.t -> ?encoding:string -> unit -> Buffer.t) =
          fun (x72 : t) ->
            fun ~spkac:(x68 : BinaryLike.t) ->
              fun ?encoding:(x69 : string option) ->
                fun () ->
                  Buffer.t_of_js
                    (let x73 = t_to_js x72 in
                     Ojs.call (Ojs.get_prop_ascii x73 "exportPublicKey")
                       "apply"
                       [|x73;((let x70 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x70 "push"
                                    [|(BinaryLike.t_to_js x68)|]);
                               (match x69 with
                                | Some x71 ->
                                    ignore
                                      (Ojs.call x70 "push"
                                         [|(Ojs.string_to_js x71)|])
                                | None -> ());
                               x70))|])
        let (verify_spkac : t -> spkac:ArrayBufferView.t -> bool) =
          fun (x75 : t) ->
            fun ~spkac:(x74 : ArrayBufferView.t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x75) "verifySpkac"
                   [|(ArrayBufferView.t_to_js x74)|])
      end
    module AnonymousInterface11 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x77 : Ojs.t) -> x77
        and t_to_js : t -> Ojs.t = fun (x76 : Ojs.t) -> x76
        let (create : t -> Certificate.t) =
          fun (x78 : t) ->
            Certificate.t_of_js (Ojs.new_obj (t_to_js x78) [||])
        let (apply : t -> Certificate.t) =
          fun (x79 : t) -> Certificate.t_of_js (Ojs.apply (t_to_js x79) [||])
      end
    let (certificate : (Certificate.t, AnonymousInterface11.t) intersection2)
      =
      intersection2_of_js Certificate.t_of_js AnonymousInterface11.t_of_js
        (Ojs.get_prop_ascii Import.crypto "Certificate")
    module Constants =
      struct
        let (o_penssl_version_number : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "OPENSSL_VERSION_NUMBER")
        let (ssl_op_all : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants") "SSL_OP_ALL")
        let (ssl_op_allow_unsafe_legacy_renegotiation : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION")
        let (ssl_op_cipher_server_preference : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_CIPHER_SERVER_PREFERENCE")
        let (ssl_op_cisco_anyconnect : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_CISCO_ANYCONNECT")
        let (ssl_op_cookie_exchange : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_COOKIE_EXCHANGE")
        let (ssl_op_cryptopro_tlsext_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_CRYPTOPRO_TLSEXT_BUG")
        let (ssl_op_dont_insert_empty_fragments : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS")
        let (ssl_op_ephemeral_rsa : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_EPHEMERAL_RSA")
        let (ssl_op_legacy_server_connect : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_LEGACY_SERVER_CONNECT")
        let (ssl_op_microsoft_big_sslv3_BUFFER : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER")
        let (ssl_op_microsoft_sess_id_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_MICROSOFT_SESS_ID_BUG")
        let (ssl_op_msie_sslv2_RSA_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_MSIE_SSLV2_RSA_PADDING")
        let (ssl_op_netscape_ca_dn_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_CA_DN_BUG")
        let (ssl_op_netscape_challenge_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_CHALLENGE_BUG")
        let (ssl_op_netscape_demo_cipher_change_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG")
        let (ssl_op_netscape_reuse_cipher_change_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG")
        let (ssl_op_no_compression : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_COMPRESSION")
        let (ssl_op_no_query_mtu : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_QUERY_MTU")
        let (ssl_op_no_session_resumption_on_renegotiation : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION")
        let (ssl_op_no_ss_lv2 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_SSLv2")
        let (ssl_op_no_ss_lv3 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_SSLv3")
        let (ssl_op_no_ticket : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TICKET")
        let (ssl_op_no_tl_sv1 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TLSv1")
        let (ssl_op_no_tl_sv1_1 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TLSv1_1")
        let (ssl_op_no_tl_sv1_2 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TLSv1_2")
        let (ssl_op_pkcs1_CHECK_1 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_PKCS1_CHECK_1")
        let (ssl_op_pkcs1_CHECK_2 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_PKCS1_CHECK_2")
        let (ssl_op_single_dh_use : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SINGLE_DH_USE")
        let (ssl_op_single_ecdh_use : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SINGLE_ECDH_USE")
        let (ssl_op_ssleay080_CLIENT_DH_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SSLEAY_080_CLIENT_DH_BUG")
        let (ssl_op_sslref2_REUSE_CERT_TYPE_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG")
        let (ssl_op_tls_block_padding_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_TLS_BLOCK_PADDING_BUG")
        let (ssl_op_tls_d5_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_TLS_D5_BUG")
        let (ssl_op_tls_rollback_bug : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_TLS_ROLLBACK_BUG")
        let (engine_method_rsa : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_RSA")
        let (engine_method_dsa : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_DSA")
        let (engine_method_dh : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_DH")
        let (engine_method_rand : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_RAND")
        let (engine_method_ec : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_EC")
        let (engine_method_ciphers : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_CIPHERS")
        let (engine_method_digests : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_DIGESTS")
        let (engine_method_pkey_meths : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_PKEY_METHS")
        let (engine_method_pkey_asn1_METHS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_PKEY_ASN1_METHS")
        let (engine_method_all : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_ALL")
        let (engine_method_none : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_NONE")
        let (dh_check_p_not_safe_prime : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_CHECK_P_NOT_SAFE_PRIME")
        let (dh_check_p_not_prime : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_CHECK_P_NOT_PRIME")
        let (dh_unable_to_check_generator : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_UNABLE_TO_CHECK_GENERATOR")
        let (dh_not_suitable_generator : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_NOT_SUITABLE_GENERATOR")
        let (alpn_enabled : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants") "ALPN_ENABLED")
        let (rsa_pkcs1_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PKCS1_PADDING")
        let (rsa_sslv23_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_SSLV23_PADDING")
        let (rsa_no_padding : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_NO_PADDING")
        let (rsa_pkcs1_OAEP_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PKCS1_OAEP_PADDING")
        let (rsa_x931_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_X931_PADDING")
        let (rsa_pkcs1_PSS_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PKCS1_PSS_PADDING")
        let (rsa_pss_saltlen_digest : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PSS_SALTLEN_DIGEST")
        let (rsa_pss_saltlen_max_sign : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PSS_SALTLEN_MAX_SIGN")
        let (rsa_pss_saltlen_auto : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PSS_SALTLEN_AUTO")
        let (point_conversion_compressed : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "POINT_CONVERSION_COMPRESSED")
        let (point_conversion_uncompressed : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "POINT_CONVERSION_UNCOMPRESSED")
        let (point_conversion_hybrid : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "POINT_CONVERSION_HYBRID")
        let (default_core_cipher_list : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "defaultCoreCipherList")
        let (default_cipher_list : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "defaultCipherList")
      end
    module HashOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x83 : Ojs.t) -> x83
        and t_to_js : t -> Ojs.t = fun (x82 : Ojs.t) -> x82
        let (get_output_length : t -> int) =
          fun (x84 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x84) "outputLength")
        let (set_output_length : t -> int -> unit) =
          fun (x85 : t) ->
            fun (x86 : int) ->
              Ojs.set_prop_ascii (t_to_js x85) "outputLength"
                (Ojs.int_to_js x86)
        let (cast : t -> Stream.TransformOptions.t) =
          fun (x87 : t) -> Stream.TransformOptions.t_of_js (t_to_js x87)
      end
    let (fips : bool) =
      Ojs.bool_of_js (Ojs.get_prop_ascii Import.crypto "fips")
    module BinaryToTextEncoding =
      struct
        type t = [ `base64  | `hex ]
        let rec t_of_js : Ojs.t -> t =
          fun (x89 : Ojs.t) ->
            let x90 = x89 in
            match Ojs.string_of_js x90 with
            | "base64" -> `base64
            | "hex" -> `hex
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x88 : [ `base64  | `hex ]) ->
            match x88 with
            | `base64 -> Ojs.string_to_js "base64"
            | `hex -> Ojs.string_to_js "hex"
      end
    module CharacterEncoding =
      struct
        type t = [ `latin1  | `utf_8  | `utf16le  | `utf8 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x92 : Ojs.t) ->
            let x93 = x92 in
            match Ojs.string_of_js x93 with
            | "latin1" -> `latin1
            | "utf-8" -> `utf_8
            | "utf16le" -> `utf16le
            | "utf8" -> `utf8
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x91 : [ `latin1  | `utf_8  | `utf16le  | `utf8 ]) ->
            match x91 with
            | `latin1 -> Ojs.string_to_js "latin1"
            | `utf_8 -> Ojs.string_to_js "utf-8"
            | `utf16le -> Ojs.string_to_js "utf16le"
            | `utf8 -> Ojs.string_to_js "utf8"
      end
    module LegacyCharacterEncoding =
      struct
        type t = [ `ascii  | `binary  | `ucs_2  | `ucs2 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x95 : Ojs.t) ->
            let x96 = x95 in
            match Ojs.string_of_js x96 with
            | "ascii" -> `ascii
            | "binary" -> `binary
            | "ucs-2" -> `ucs_2
            | "ucs2" -> `ucs2
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x94 : [ `ascii  | `binary  | `ucs_2  | `ucs2 ]) ->
            match x94 with
            | `ascii -> Ojs.string_to_js "ascii"
            | `binary -> Ojs.string_to_js "binary"
            | `ucs_2 -> Ojs.string_to_js "ucs-2"
            | `ucs2 -> Ojs.string_to_js "ucs2"
      end
    module Encoding =
      struct
        type t =
          ((BinaryToTextEncoding.t, CharacterEncoding.t,
             LegacyCharacterEncoding.t) union3,
            [ `ascii  | `base64  | `binary  | `hex  | `latin1  | `ucs_2 
            | `ucs2  | `utf_8  | `utf16le  | `utf8 ]) or_enum
        let rec t_of_js : Ojs.t -> t =
          fun (x103 : Ojs.t) ->
            or_enum_of_js
              (fun (x104 : Ojs.t) ->
                 union3_of_js BinaryToTextEncoding.t_of_js
                   CharacterEncoding.t_of_js LegacyCharacterEncoding.t_of_js
                   x104)
              (fun (x108 : Ojs.t) ->
                 let x109 = x108 in
                 match Ojs.string_of_js x109 with
                 | "ascii" -> `ascii
                 | "base64" -> `base64
                 | "binary" -> `binary
                 | "hex" -> `hex
                 | "latin1" -> `latin1
                 | "ucs-2" -> `ucs_2
                 | "ucs2" -> `ucs2
                 | "utf-8" -> `utf_8
                 | "utf16le" -> `utf16le
                 | "utf8" -> `utf8
                 | _ -> assert false) x103
        and t_to_js : t -> Ojs.t =
          fun
            (x97 :
              ((BinaryToTextEncoding.t, CharacterEncoding.t,
                 LegacyCharacterEncoding.t) union3,
                [ `ascii  | `base64  | `binary  | `hex  | `latin1  | 
                  `ucs_2 
                | `ucs2  | `utf_8  | `utf16le  | `utf8 ]) or_enum)
            ->
            or_enum_to_js
              (fun
                 (x98 :
                   (BinaryToTextEncoding.t, CharacterEncoding.t,
                     LegacyCharacterEncoding.t) union3)
                 ->
                 union3_to_js BinaryToTextEncoding.t_to_js
                   CharacterEncoding.t_to_js LegacyCharacterEncoding.t_to_js
                   x98)
              (fun
                 (x102 :
                   [ `ascii  | `base64  | `binary  | `hex  | `latin1 
                   | `ucs_2  | `ucs2  | `utf_8  | `utf16le  | `utf8 ])
                 ->
                 match x102 with
                 | `ascii -> Ojs.string_to_js "ascii"
                 | `base64 -> Ojs.string_to_js "base64"
                 | `binary -> Ojs.string_to_js "binary"
                 | `hex -> Ojs.string_to_js "hex"
                 | `latin1 -> Ojs.string_to_js "latin1"
                 | `ucs_2 -> Ojs.string_to_js "ucs-2"
                 | `ucs2 -> Ojs.string_to_js "ucs2"
                 | `utf_8 -> Ojs.string_to_js "utf-8"
                 | `utf16le -> Ojs.string_to_js "utf16le"
                 | `utf8 -> Ojs.string_to_js "utf8") x97
      end
    module ECDHKeyFormat =
      struct
        type t = [ `compressed  | `hybrid  | `uncompressed ]
        let rec t_of_js : Ojs.t -> t =
          fun (x111 : Ojs.t) ->
            let x112 = x111 in
            match Ojs.string_of_js x112 with
            | "compressed" -> `compressed
            | "hybrid" -> `hybrid
            | "uncompressed" -> `uncompressed
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x110 : [ `compressed  | `hybrid  | `uncompressed ]) ->
            match x110 with
            | `compressed -> Ojs.string_to_js "compressed"
            | `hybrid -> Ojs.string_to_js "hybrid"
            | `uncompressed -> Ojs.string_to_js "uncompressed"
      end
    module Hash =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x114 : Ojs.t) -> x114
        and t_to_js : t -> Ojs.t = fun (x113 : Ojs.t) -> x113
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Hash") [||])
        let (copy : t -> t) =
          fun (x115 : t) -> t_of_js (Ojs.call (t_to_js x115) "copy" [||])
        let (update : t -> data:BinaryLike.t -> t) =
          fun (x117 : t) ->
            fun ~data:(x116 : BinaryLike.t) ->
              t_of_js
                (Ojs.call (t_to_js x117) "update"
                   [|(BinaryLike.t_to_js x116)|])
        let (update' : t -> data:string -> input_encoding:Encoding.t -> t) =
          fun (x120 : t) ->
            fun ~data:(x118 : string) ->
              fun ~input_encoding:(x119 : Encoding.t) ->
                t_of_js
                  (Ojs.call (t_to_js x120) "update"
                     [|(Ojs.string_to_js x118);(Encoding.t_to_js x119)|])
        let (digest : t -> Buffer.t) =
          fun (x121 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x121) "digest" [||])
        let (digest' : t -> encoding:BinaryToTextEncoding.t -> string) =
          fun (x123 : t) ->
            fun ~encoding:(x122 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x123) "digest"
                   [|(BinaryToTextEncoding.t_to_js x122)|])
        let (cast : t -> Stream.Transform.t) =
          fun (x124 : t) -> Stream.Transform.t_of_js (t_to_js x124)
      end
    module Hmac =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x126 : Ojs.t) -> x126
        and t_to_js : t -> Ojs.t = fun (x125 : Ojs.t) -> x125
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Hmac") [||])
        let (update : t -> data:BinaryLike.t -> t) =
          fun (x128 : t) ->
            fun ~data:(x127 : BinaryLike.t) ->
              t_of_js
                (Ojs.call (t_to_js x128) "update"
                   [|(BinaryLike.t_to_js x127)|])
        let (update' : t -> data:string -> input_encoding:Encoding.t -> t) =
          fun (x131 : t) ->
            fun ~data:(x129 : string) ->
              fun ~input_encoding:(x130 : Encoding.t) ->
                t_of_js
                  (Ojs.call (t_to_js x131) "update"
                     [|(Ojs.string_to_js x129);(Encoding.t_to_js x130)|])
        let (digest : t -> Buffer.t) =
          fun (x132 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x132) "digest" [||])
        let (digest' : t -> encoding:BinaryToTextEncoding.t -> string) =
          fun (x134 : t) ->
            fun ~encoding:(x133 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x134) "digest"
                   [|(BinaryToTextEncoding.t_to_js x133)|])
        let (cast : t -> Stream.Transform.t) =
          fun (x135 : t) -> Stream.Transform.t_of_js (t_to_js x135)
      end
    let (create_hash :
      algorithm:string -> ?options:HashOptions.t -> unit -> Hash.t) =
      fun ~algorithm:(x136 : string) ->
        fun ?options:(x137 : HashOptions.t option) ->
          fun () ->
            Hash.t_of_js
              (let x140 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x140 "createHash") "apply"
                 [|x140;((let x138 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x138 "push" [|(Ojs.string_to_js x136)|]);
                          (match x137 with
                           | Some x139 ->
                               ignore
                                 (Ojs.call x138 "push"
                                    [|(HashOptions.t_to_js x139)|])
                           | None -> ());
                          x138))|])
    let (create_hmac :
      algorithm:string ->
        key:(BinaryLike.t, KeyObject.t) union2 ->
          ?options:Stream.TransformOptions.t -> unit -> Hmac.t)
      =
      fun ~algorithm:(x141 : string) ->
        fun ~key:(x142 : (BinaryLike.t, KeyObject.t) union2) ->
          fun ?options:(x143 : Stream.TransformOptions.t option) ->
            fun () ->
              Hmac.t_of_js
                (let x148 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x148 "createHmac") "apply"
                   [|x148;((let x144 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x144 "push"
                                 [|(Ojs.string_to_js x141)|]);
                            ignore
                              (Ojs.call x144 "push"
                                 [|(union2_to_js BinaryLike.t_to_js
                                      KeyObject.t_to_js x142)|]);
                            (match x143 with
                             | Some x145 ->
                                 ignore
                                   (Ojs.call x144 "push"
                                      [|(Stream.TransformOptions.t_to_js x145)|])
                             | None -> ());
                            x144))|])
    module CipherCCMTypes =
      struct
        type t =
          [ `aes_128_ccm  | `aes_192_ccm  | `aes_256_ccm 
          | `chacha20_poly1305 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x150 : Ojs.t) ->
            let x151 = x150 in
            match Ojs.string_of_js x151 with
            | "aes-128-ccm" -> `aes_128_ccm
            | "aes-192-ccm" -> `aes_192_ccm
            | "aes-256-ccm" -> `aes_256_ccm
            | "chacha20-poly1305" -> `chacha20_poly1305
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x149 :
              [ `aes_128_ccm  | `aes_192_ccm  | `aes_256_ccm 
              | `chacha20_poly1305 ])
            ->
            match x149 with
            | `aes_128_ccm -> Ojs.string_to_js "aes-128-ccm"
            | `aes_192_ccm -> Ojs.string_to_js "aes-192-ccm"
            | `aes_256_ccm -> Ojs.string_to_js "aes-256-ccm"
            | `chacha20_poly1305 -> Ojs.string_to_js "chacha20-poly1305"
      end
    module CipherGCMTypes =
      struct
        type t = [ `aes_128_gcm  | `aes_192_gcm  | `aes_256_gcm ]
        let rec t_of_js : Ojs.t -> t =
          fun (x153 : Ojs.t) ->
            let x154 = x153 in
            match Ojs.string_of_js x154 with
            | "aes-128-gcm" -> `aes_128_gcm
            | "aes-192-gcm" -> `aes_192_gcm
            | "aes-256-gcm" -> `aes_256_gcm
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x152 : [ `aes_128_gcm  | `aes_192_gcm  | `aes_256_gcm ]) ->
            match x152 with
            | `aes_128_gcm -> Ojs.string_to_js "aes-128-gcm"
            | `aes_192_gcm -> Ojs.string_to_js "aes-192-gcm"
            | `aes_256_gcm -> Ojs.string_to_js "aes-256-gcm"
      end
    module CipherCCMOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x156 : Ojs.t) -> x156
        and t_to_js : t -> Ojs.t = fun (x155 : Ojs.t) -> x155
        let (get_auth_tag_length : t -> int) =
          fun (x157 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x157) "authTagLength")
        let (set_auth_tag_length : t -> int -> unit) =
          fun (x158 : t) ->
            fun (x159 : int) ->
              Ojs.set_prop_ascii (t_to_js x158) "authTagLength"
                (Ojs.int_to_js x159)
        let (cast : t -> Stream.TransformOptions.t) =
          fun (x160 : t) -> Stream.TransformOptions.t_of_js (t_to_js x160)
      end
    module CipherGCMOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x162 : Ojs.t) -> x162
        and t_to_js : t -> Ojs.t = fun (x161 : Ojs.t) -> x161
        let (get_auth_tag_length : t -> int) =
          fun (x163 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x163) "authTagLength")
        let (set_auth_tag_length : t -> int -> unit) =
          fun (x164 : t) ->
            fun (x165 : int) ->
              Ojs.set_prop_ascii (t_to_js x164) "authTagLength"
                (Ojs.int_to_js x165)
        let (cast : t -> Stream.TransformOptions.t) =
          fun (x166 : t) -> Stream.TransformOptions.t_of_js (t_to_js x166)
      end
    module Cipher =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x168 : Ojs.t) -> x168
        and t_to_js : t -> Ojs.t = fun (x167 : Ojs.t) -> x167
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Cipher") [||])
        let (update : t -> data:BinaryLike.t -> Buffer.t) =
          fun (x170 : t) ->
            fun ~data:(x169 : BinaryLike.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x170) "update"
                   [|(BinaryLike.t_to_js x169)|])
        let (update' :
          t -> data:string -> input_encoding:Encoding.t -> Buffer.t) =
          fun (x173 : t) ->
            fun ~data:(x171 : string) ->
              fun ~input_encoding:(x172 : Encoding.t) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x173) "update"
                     [|(Ojs.string_to_js x171);(Encoding.t_to_js x172)|])
        let (update'' :
          t ->
            data:ArrayBufferView.t ->
              input_encoding:never or_undefined ->
                output_encoding:Encoding.t -> string)
          =
          fun (x178 : t) ->
            fun ~data:(x174 : ArrayBufferView.t) ->
              fun ~input_encoding:(x175 : never or_undefined) ->
                fun ~output_encoding:(x177 : Encoding.t) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x178) "update"
                       [|(ArrayBufferView.t_to_js x174);(or_undefined_to_js
                                                           never_to_js x175);(
                         Encoding.t_to_js x177)|])
        let (update''' :
          t ->
            data:string ->
              input_encoding:Encoding.t or_undefined ->
                output_encoding:Encoding.t -> string)
          =
          fun (x183 : t) ->
            fun ~data:(x179 : string) ->
              fun ~input_encoding:(x180 : Encoding.t or_undefined) ->
                fun ~output_encoding:(x182 : Encoding.t) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x183) "update"
                       [|(Ojs.string_to_js x179);(or_undefined_to_js
                                                    Encoding.t_to_js x180);(
                         Encoding.t_to_js x182)|])
        let (final : t -> Buffer.t) =
          fun (x184 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x184) "final" [||])
        let (final' : t -> output_encoding:BufferEncoding.t -> string) =
          fun (x186 : t) ->
            fun ~output_encoding:(x185 : BufferEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x186) "final"
                   [|(BufferEncoding.t_to_js x185)|])
        let (set_auto_padding : t -> ?auto_padding:bool -> unit -> t) =
          fun (x190 : t) ->
            fun ?auto_padding:(x187 : bool option) ->
              fun () ->
                t_of_js
                  (let x191 = t_to_js x190 in
                   Ojs.call (Ojs.get_prop_ascii x191 "setAutoPadding")
                     "apply"
                     [|x191;((let x188 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x187 with
                               | Some x189 ->
                                   ignore
                                     (Ojs.call x188 "push"
                                        [|(Ojs.bool_to_js x189)|])
                               | None -> ());
                              x188))|])
        let (cast : t -> Stream.Transform.t) =
          fun (x192 : t) -> Stream.Transform.t_of_js (t_to_js x192)
      end
    module AnonymousInterface0 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x194 : Ojs.t) -> x194
        and t_to_js : t -> Ojs.t = fun (x193 : Ojs.t) -> x193
        let (get_plaintext_length : t -> int) =
          fun (x195 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x195) "plaintextLength")
        let (set_plaintext_length : t -> int -> unit) =
          fun (x196 : t) ->
            fun (x197 : int) ->
              Ojs.set_prop_ascii (t_to_js x196) "plaintextLength"
                (Ojs.int_to_js x197)
      end
    module CipherCCM =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x199 : Ojs.t) -> x199
        and t_to_js : t -> Ojs.t = fun (x198 : Ojs.t) -> x198
        let (set_aad :
          t -> buffer:ArrayBufferView.t -> options:AnonymousInterface0.t -> t)
          =
          fun (x202 : t) ->
            fun ~buffer:(x200 : ArrayBufferView.t) ->
              fun ~options:(x201 : AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x202) "setAAD"
                     [|(ArrayBufferView.t_to_js x200);(AnonymousInterface0.t_to_js
                                                         x201)|])
        let (get_auth_tag : t -> Buffer.t) =
          fun (x203 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x203) "getAuthTag" [||])
        let (cast : t -> Cipher.t) =
          fun (x204 : t) -> Cipher.t_of_js (t_to_js x204)
      end
    module CipherGCM =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x206 : Ojs.t) -> x206
        and t_to_js : t -> Ojs.t = fun (x205 : Ojs.t) -> x205
        let (set_aad :
          t ->
            buffer:ArrayBufferView.t ->
              ?options:AnonymousInterface0.t -> unit -> t)
          =
          fun (x211 : t) ->
            fun ~buffer:(x207 : ArrayBufferView.t) ->
              fun ?options:(x208 : AnonymousInterface0.t option) ->
                fun () ->
                  t_of_js
                    (let x212 = t_to_js x211 in
                     Ojs.call (Ojs.get_prop_ascii x212 "setAAD") "apply"
                       [|x212;((let x209 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x209 "push"
                                     [|(ArrayBufferView.t_to_js x207)|]);
                                (match x208 with
                                 | Some x210 ->
                                     ignore
                                       (Ojs.call x209 "push"
                                          [|(AnonymousInterface0.t_to_js x210)|])
                                 | None -> ());
                                x209))|])
        let (get_auth_tag : t -> Buffer.t) =
          fun (x213 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x213) "getAuthTag" [||])
        let (cast : t -> Cipher.t) =
          fun (x214 : t) -> Cipher.t_of_js (t_to_js x214)
      end
    let (create_cipher :
      algorithm:CipherCCMTypes.t ->
        password:BinaryLike.t -> options:CipherCCMOptions.t -> CipherCCM.t)
      =
      fun ~algorithm:(x215 : CipherCCMTypes.t) ->
        fun ~password:(x216 : BinaryLike.t) ->
          fun ~options:(x217 : CipherCCMOptions.t) ->
            CipherCCM.t_of_js
              (Ojs.call Import.crypto "createCipher"
                 [|(CipherCCMTypes.t_to_js x215);(BinaryLike.t_to_js x216);(
                   CipherCCMOptions.t_to_js x217)|])
    let (create_cipher :
      algorithm:CipherGCMTypes.t ->
        password:BinaryLike.t ->
          ?options:CipherGCMOptions.t -> unit -> CipherGCM.t)
      =
      fun ~algorithm:(x218 : CipherGCMTypes.t) ->
        fun ~password:(x219 : BinaryLike.t) ->
          fun ?options:(x220 : CipherGCMOptions.t option) ->
            fun () ->
              CipherGCM.t_of_js
                (let x223 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x223 "createCipher") "apply"
                   [|x223;((let x221 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x221 "push"
                                 [|(CipherGCMTypes.t_to_js x218)|]);
                            ignore
                              (Ojs.call x221 "push"
                                 [|(BinaryLike.t_to_js x219)|]);
                            (match x220 with
                             | Some x222 ->
                                 ignore
                                   (Ojs.call x221 "push"
                                      [|(CipherGCMOptions.t_to_js x222)|])
                             | None -> ());
                            x221))|])
    let (create_cipher :
      algorithm:string ->
        password:BinaryLike.t ->
          ?options:Stream.TransformOptions.t -> unit -> Cipher.t)
      =
      fun ~algorithm:(x224 : string) ->
        fun ~password:(x225 : BinaryLike.t) ->
          fun ?options:(x226 : Stream.TransformOptions.t option) ->
            fun () ->
              Cipher.t_of_js
                (let x229 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x229 "createCipher") "apply"
                   [|x229;((let x227 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x227 "push"
                                 [|(Ojs.string_to_js x224)|]);
                            ignore
                              (Ojs.call x227 "push"
                                 [|(BinaryLike.t_to_js x225)|]);
                            (match x226 with
                             | Some x228 ->
                                 ignore
                                   (Ojs.call x227 "push"
                                      [|(Stream.TransformOptions.t_to_js x228)|])
                             | None -> ());
                            x227))|])
    let (create_cipheriv :
      algorithm:CipherCCMTypes.t ->
        key:CipherKey.t ->
          iv:BinaryLike.t or_null ->
            options:CipherCCMOptions.t -> CipherCCM.t)
      =
      fun ~algorithm:(x230 : CipherCCMTypes.t) ->
        fun ~key:(x231 : CipherKey.t) ->
          fun ~iv:(x232 : BinaryLike.t or_null) ->
            fun ~options:(x234 : CipherCCMOptions.t) ->
              CipherCCM.t_of_js
                (Ojs.call Import.crypto "createCipheriv"
                   [|(CipherCCMTypes.t_to_js x230);(CipherKey.t_to_js x231);(
                     or_null_to_js BinaryLike.t_to_js x232);(CipherCCMOptions.t_to_js
                                                               x234)|])
    let (create_cipheriv :
      algorithm:CipherGCMTypes.t ->
        key:CipherKey.t ->
          iv:BinaryLike.t or_null ->
            ?options:CipherGCMOptions.t -> unit -> CipherGCM.t)
      =
      fun ~algorithm:(x235 : CipherGCMTypes.t) ->
        fun ~key:(x236 : CipherKey.t) ->
          fun ~iv:(x237 : BinaryLike.t or_null) ->
            fun ?options:(x238 : CipherGCMOptions.t option) ->
              fun () ->
                CipherGCM.t_of_js
                  (let x242 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x242 "createCipheriv")
                     "apply"
                     [|x242;((let x239 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x239 "push"
                                   [|(CipherGCMTypes.t_to_js x235)|]);
                              ignore
                                (Ojs.call x239 "push"
                                   [|(CipherKey.t_to_js x236)|]);
                              ignore
                                (Ojs.call x239 "push"
                                   [|(or_null_to_js BinaryLike.t_to_js x237)|]);
                              (match x238 with
                               | Some x240 ->
                                   ignore
                                     (Ojs.call x239 "push"
                                        [|(CipherGCMOptions.t_to_js x240)|])
                               | None -> ());
                              x239))|])
    let (create_cipheriv :
      algorithm:string ->
        key:CipherKey.t ->
          iv:BinaryLike.t or_null ->
            ?options:Stream.TransformOptions.t -> unit -> Cipher.t)
      =
      fun ~algorithm:(x243 : string) ->
        fun ~key:(x244 : CipherKey.t) ->
          fun ~iv:(x245 : BinaryLike.t or_null) ->
            fun ?options:(x246 : Stream.TransformOptions.t option) ->
              fun () ->
                Cipher.t_of_js
                  (let x250 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x250 "createCipheriv")
                     "apply"
                     [|x250;((let x247 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x247 "push"
                                   [|(Ojs.string_to_js x243)|]);
                              ignore
                                (Ojs.call x247 "push"
                                   [|(CipherKey.t_to_js x244)|]);
                              ignore
                                (Ojs.call x247 "push"
                                   [|(or_null_to_js BinaryLike.t_to_js x245)|]);
                              (match x246 with
                               | Some x248 ->
                                   ignore
                                     (Ojs.call x247 "push"
                                        [|(Stream.TransformOptions.t_to_js
                                             x248)|])
                               | None -> ());
                              x247))|])
    module Decipher =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x252 : Ojs.t) -> x252
        and t_to_js : t -> Ojs.t = fun (x251 : Ojs.t) -> x251
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Decipher") [||])
        let (update : t -> data:ArrayBufferView.t -> Buffer.t) =
          fun (x254 : t) ->
            fun ~data:(x253 : ArrayBufferView.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x254) "update"
                   [|(ArrayBufferView.t_to_js x253)|])
        let (update' :
          t -> data:string -> input_encoding:Encoding.t -> Buffer.t) =
          fun (x257 : t) ->
            fun ~data:(x255 : string) ->
              fun ~input_encoding:(x256 : Encoding.t) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x257) "update"
                     [|(Ojs.string_to_js x255);(Encoding.t_to_js x256)|])
        let (update'' :
          t ->
            data:ArrayBufferView.t ->
              input_encoding:never or_undefined ->
                output_encoding:Encoding.t -> string)
          =
          fun (x262 : t) ->
            fun ~data:(x258 : ArrayBufferView.t) ->
              fun ~input_encoding:(x259 : never or_undefined) ->
                fun ~output_encoding:(x261 : Encoding.t) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x262) "update"
                       [|(ArrayBufferView.t_to_js x258);(or_undefined_to_js
                                                           never_to_js x259);(
                         Encoding.t_to_js x261)|])
        let (update''' :
          t ->
            data:string ->
              input_encoding:Encoding.t or_undefined ->
                output_encoding:Encoding.t -> string)
          =
          fun (x267 : t) ->
            fun ~data:(x263 : string) ->
              fun ~input_encoding:(x264 : Encoding.t or_undefined) ->
                fun ~output_encoding:(x266 : Encoding.t) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x267) "update"
                       [|(Ojs.string_to_js x263);(or_undefined_to_js
                                                    Encoding.t_to_js x264);(
                         Encoding.t_to_js x266)|])
        let (final : t -> Buffer.t) =
          fun (x268 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x268) "final" [||])
        let (final' : t -> output_encoding:BufferEncoding.t -> string) =
          fun (x270 : t) ->
            fun ~output_encoding:(x269 : BufferEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x270) "final"
                   [|(BufferEncoding.t_to_js x269)|])
        let (set_auto_padding : t -> ?auto_padding:bool -> unit -> t) =
          fun (x274 : t) ->
            fun ?auto_padding:(x271 : bool option) ->
              fun () ->
                t_of_js
                  (let x275 = t_to_js x274 in
                   Ojs.call (Ojs.get_prop_ascii x275 "setAutoPadding")
                     "apply"
                     [|x275;((let x272 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x271 with
                               | Some x273 ->
                                   ignore
                                     (Ojs.call x272 "push"
                                        [|(Ojs.bool_to_js x273)|])
                               | None -> ());
                              x272))|])
        let (cast : t -> Stream.Transform.t) =
          fun (x276 : t) -> Stream.Transform.t_of_js (t_to_js x276)
      end
    module DecipherCCM =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x278 : Ojs.t) -> x278
        and t_to_js : t -> Ojs.t = fun (x277 : Ojs.t) -> x277
        let (set_auth_tag : t -> buffer:ArrayBufferView.t -> t) =
          fun (x280 : t) ->
            fun ~buffer:(x279 : ArrayBufferView.t) ->
              t_of_js
                (Ojs.call (t_to_js x280) "setAuthTag"
                   [|(ArrayBufferView.t_to_js x279)|])
        let (set_aad :
          t -> buffer:ArrayBufferView.t -> options:AnonymousInterface0.t -> t)
          =
          fun (x283 : t) ->
            fun ~buffer:(x281 : ArrayBufferView.t) ->
              fun ~options:(x282 : AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x283) "setAAD"
                     [|(ArrayBufferView.t_to_js x281);(AnonymousInterface0.t_to_js
                                                         x282)|])
        let (cast : t -> Decipher.t) =
          fun (x284 : t) -> Decipher.t_of_js (t_to_js x284)
      end
    module DecipherGCM =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x286 : Ojs.t) -> x286
        and t_to_js : t -> Ojs.t = fun (x285 : Ojs.t) -> x285
        let (set_auth_tag : t -> buffer:ArrayBufferView.t -> t) =
          fun (x288 : t) ->
            fun ~buffer:(x287 : ArrayBufferView.t) ->
              t_of_js
                (Ojs.call (t_to_js x288) "setAuthTag"
                   [|(ArrayBufferView.t_to_js x287)|])
        let (set_aad :
          t ->
            buffer:ArrayBufferView.t ->
              ?options:AnonymousInterface0.t -> unit -> t)
          =
          fun (x293 : t) ->
            fun ~buffer:(x289 : ArrayBufferView.t) ->
              fun ?options:(x290 : AnonymousInterface0.t option) ->
                fun () ->
                  t_of_js
                    (let x294 = t_to_js x293 in
                     Ojs.call (Ojs.get_prop_ascii x294 "setAAD") "apply"
                       [|x294;((let x291 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x291 "push"
                                     [|(ArrayBufferView.t_to_js x289)|]);
                                (match x290 with
                                 | Some x292 ->
                                     ignore
                                       (Ojs.call x291 "push"
                                          [|(AnonymousInterface0.t_to_js x292)|])
                                 | None -> ());
                                x291))|])
        let (cast : t -> Decipher.t) =
          fun (x295 : t) -> Decipher.t_of_js (t_to_js x295)
      end
    let (create_decipher :
      algorithm:CipherCCMTypes.t ->
        password:BinaryLike.t -> options:CipherCCMOptions.t -> DecipherCCM.t)
      =
      fun ~algorithm:(x296 : CipherCCMTypes.t) ->
        fun ~password:(x297 : BinaryLike.t) ->
          fun ~options:(x298 : CipherCCMOptions.t) ->
            DecipherCCM.t_of_js
              (Ojs.call Import.crypto "createDecipher"
                 [|(CipherCCMTypes.t_to_js x296);(BinaryLike.t_to_js x297);(
                   CipherCCMOptions.t_to_js x298)|])
    let (create_decipher :
      algorithm:CipherGCMTypes.t ->
        password:BinaryLike.t ->
          ?options:CipherGCMOptions.t -> unit -> DecipherGCM.t)
      =
      fun ~algorithm:(x299 : CipherGCMTypes.t) ->
        fun ~password:(x300 : BinaryLike.t) ->
          fun ?options:(x301 : CipherGCMOptions.t option) ->
            fun () ->
              DecipherGCM.t_of_js
                (let x304 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x304 "createDecipher") "apply"
                   [|x304;((let x302 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x302 "push"
                                 [|(CipherGCMTypes.t_to_js x299)|]);
                            ignore
                              (Ojs.call x302 "push"
                                 [|(BinaryLike.t_to_js x300)|]);
                            (match x301 with
                             | Some x303 ->
                                 ignore
                                   (Ojs.call x302 "push"
                                      [|(CipherGCMOptions.t_to_js x303)|])
                             | None -> ());
                            x302))|])
    let (create_decipher :
      algorithm:string ->
        password:BinaryLike.t ->
          ?options:Stream.TransformOptions.t -> unit -> Decipher.t)
      =
      fun ~algorithm:(x305 : string) ->
        fun ~password:(x306 : BinaryLike.t) ->
          fun ?options:(x307 : Stream.TransformOptions.t option) ->
            fun () ->
              Decipher.t_of_js
                (let x310 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x310 "createDecipher") "apply"
                   [|x310;((let x308 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x308 "push"
                                 [|(Ojs.string_to_js x305)|]);
                            ignore
                              (Ojs.call x308 "push"
                                 [|(BinaryLike.t_to_js x306)|]);
                            (match x307 with
                             | Some x309 ->
                                 ignore
                                   (Ojs.call x308 "push"
                                      [|(Stream.TransformOptions.t_to_js x309)|])
                             | None -> ());
                            x308))|])
    let (create_decipheriv :
      algorithm:CipherCCMTypes.t ->
        key:CipherKey.t ->
          iv:BinaryLike.t or_null ->
            options:CipherCCMOptions.t -> DecipherCCM.t)
      =
      fun ~algorithm:(x311 : CipherCCMTypes.t) ->
        fun ~key:(x312 : CipherKey.t) ->
          fun ~iv:(x313 : BinaryLike.t or_null) ->
            fun ~options:(x315 : CipherCCMOptions.t) ->
              DecipherCCM.t_of_js
                (Ojs.call Import.crypto "createDecipheriv"
                   [|(CipherCCMTypes.t_to_js x311);(CipherKey.t_to_js x312);(
                     or_null_to_js BinaryLike.t_to_js x313);(CipherCCMOptions.t_to_js
                                                               x315)|])
    let (create_decipheriv :
      algorithm:CipherGCMTypes.t ->
        key:CipherKey.t ->
          iv:BinaryLike.t or_null ->
            ?options:CipherGCMOptions.t -> unit -> DecipherGCM.t)
      =
      fun ~algorithm:(x316 : CipherGCMTypes.t) ->
        fun ~key:(x317 : CipherKey.t) ->
          fun ~iv:(x318 : BinaryLike.t or_null) ->
            fun ?options:(x319 : CipherGCMOptions.t option) ->
              fun () ->
                DecipherGCM.t_of_js
                  (let x323 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x323 "createDecipheriv")
                     "apply"
                     [|x323;((let x320 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x320 "push"
                                   [|(CipherGCMTypes.t_to_js x316)|]);
                              ignore
                                (Ojs.call x320 "push"
                                   [|(CipherKey.t_to_js x317)|]);
                              ignore
                                (Ojs.call x320 "push"
                                   [|(or_null_to_js BinaryLike.t_to_js x318)|]);
                              (match x319 with
                               | Some x321 ->
                                   ignore
                                     (Ojs.call x320 "push"
                                        [|(CipherGCMOptions.t_to_js x321)|])
                               | None -> ());
                              x320))|])
    let (create_decipheriv :
      algorithm:string ->
        key:CipherKey.t ->
          iv:BinaryLike.t or_null ->
            ?options:Stream.TransformOptions.t -> unit -> Decipher.t)
      =
      fun ~algorithm:(x324 : string) ->
        fun ~key:(x325 : CipherKey.t) ->
          fun ~iv:(x326 : BinaryLike.t or_null) ->
            fun ?options:(x327 : Stream.TransformOptions.t option) ->
              fun () ->
                Decipher.t_of_js
                  (let x331 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x331 "createDecipheriv")
                     "apply"
                     [|x331;((let x328 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x328 "push"
                                   [|(Ojs.string_to_js x324)|]);
                              ignore
                                (Ojs.call x328 "push"
                                   [|(CipherKey.t_to_js x325)|]);
                              ignore
                                (Ojs.call x328 "push"
                                   [|(or_null_to_js BinaryLike.t_to_js x326)|]);
                              (match x327 with
                               | Some x329 ->
                                   ignore
                                     (Ojs.call x328 "push"
                                        [|(Stream.TransformOptions.t_to_js
                                             x329)|])
                               | None -> ());
                              x328))|])
    module KeyFormat =
      struct
        type t = [ `der  | `pem ]
        let rec t_of_js : Ojs.t -> t =
          fun (x333 : Ojs.t) ->
            let x334 = x333 in
            match Ojs.string_of_js x334 with
            | "der" -> `der
            | "pem" -> `pem
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x332 : [ `der  | `pem ]) ->
            match x332 with
            | `der -> Ojs.string_to_js "der"
            | `pem -> Ojs.string_to_js "pem"
      end
    module PrivateKeyInput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x336 : Ojs.t) -> x336
        and t_to_js : t -> Ojs.t = fun (x335 : Ojs.t) -> x335
        let (get_key : t -> Buffer.t or_string) =
          fun (x337 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x337) "key")
        let (set_key : t -> Buffer.t or_string -> unit) =
          fun (x339 : t) ->
            fun (x340 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x339) "key"
                (or_string_to_js Buffer.t_to_js x340)
        let (get_format : t -> KeyFormat.t) =
          fun (x342 : t) ->
            KeyFormat.t_of_js (Ojs.get_prop_ascii (t_to_js x342) "format")
        let (set_format : t -> KeyFormat.t -> unit) =
          fun (x343 : t) ->
            fun (x344 : KeyFormat.t) ->
              Ojs.set_prop_ascii (t_to_js x343) "format"
                (KeyFormat.t_to_js x344)
        let (get_type : t -> [ `pkcs1  | `pkcs8  | `sec1 ]) =
          fun (x345 : t) ->
            let x346 = Ojs.get_prop_ascii (t_to_js x345) "type" in
            match Ojs.string_of_js x346 with
            | "pkcs1" -> `pkcs1
            | "pkcs8" -> `pkcs8
            | "sec1" -> `sec1
            | _ -> assert false
        let (set_type : t -> [ `pkcs1  | `pkcs8  | `sec1 ] -> unit) =
          fun (x347 : t) ->
            fun (x348 : [ `pkcs1  | `pkcs8  | `sec1 ]) ->
              Ojs.set_prop_ascii (t_to_js x347) "type"
                (match x348 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `pkcs8 -> Ojs.string_to_js "pkcs8"
                 | `sec1 -> Ojs.string_to_js "sec1")
        let (get_passphrase : t -> Buffer.t or_string) =
          fun (x349 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x349) "passphrase")
        let (set_passphrase : t -> Buffer.t or_string -> unit) =
          fun (x351 : t) ->
            fun (x352 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x351) "passphrase"
                (or_string_to_js Buffer.t_to_js x352)
      end
    module PublicKeyInput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x355 : Ojs.t) -> x355
        and t_to_js : t -> Ojs.t = fun (x354 : Ojs.t) -> x354
        let (get_key : t -> Buffer.t or_string) =
          fun (x356 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x356) "key")
        let (set_key : t -> Buffer.t or_string -> unit) =
          fun (x358 : t) ->
            fun (x359 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x358) "key"
                (or_string_to_js Buffer.t_to_js x359)
        let (get_format : t -> KeyFormat.t) =
          fun (x361 : t) ->
            KeyFormat.t_of_js (Ojs.get_prop_ascii (t_to_js x361) "format")
        let (set_format : t -> KeyFormat.t -> unit) =
          fun (x362 : t) ->
            fun (x363 : KeyFormat.t) ->
              Ojs.set_prop_ascii (t_to_js x362) "format"
                (KeyFormat.t_to_js x363)
        let (get_type : t -> [ `pkcs1  | `spki ]) =
          fun (x364 : t) ->
            let x365 = Ojs.get_prop_ascii (t_to_js x364) "type" in
            match Ojs.string_of_js x365 with
            | "pkcs1" -> `pkcs1
            | "spki" -> `spki
            | _ -> assert false
        let (set_type : t -> [ `pkcs1  | `spki ] -> unit) =
          fun (x366 : t) ->
            fun (x367 : [ `pkcs1  | `spki ]) ->
              Ojs.set_prop_ascii (t_to_js x366) "type"
                (match x367 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `spki -> Ojs.string_to_js "spki")
      end
    let (create_private_key :
      key:(Buffer.t, PrivateKeyInput.t) union2 or_string -> KeyObject.t) =
      fun ~key:(x368 : (Buffer.t, PrivateKeyInput.t) union2 or_string) ->
        KeyObject.t_of_js
          (Ojs.call Import.crypto "createPrivateKey"
             [|(or_string_to_js
                  (fun (x369 : (Buffer.t, PrivateKeyInput.t) union2) ->
                     union2_to_js Buffer.t_to_js PrivateKeyInput.t_to_js x369)
                  x368)|])
    let (create_public_key :
      key:([ `U_s21_pkcs1 of PublicKeyInput.t 
           | `U_s23_private of KeyObject.t  | `U_s24_public of KeyObject.t 
           | `U_s27_secret of KeyObject.t 
           | `U_s28_spki of PublicKeyInput.t ],
        Buffer.t) or_ or_string -> KeyObject.t)
      =
      fun
        ~key:(x372 :
               ([ `U_s21_pkcs1 of PublicKeyInput.t 
                | `U_s23_private of KeyObject.t 
                | `U_s24_public of KeyObject.t 
                | `U_s27_secret of KeyObject.t 
                | `U_s28_spki of PublicKeyInput.t ], Buffer.t) or_ or_string)
        ->
        KeyObject.t_of_js
          (Ojs.call Import.crypto "createPublicKey"
             [|(or_string_to_js
                  (fun
                     (x373 :
                       ([ `U_s21_pkcs1 of PublicKeyInput.t 
                        | `U_s23_private of KeyObject.t 
                        | `U_s24_public of KeyObject.t 
                        | `U_s27_secret of KeyObject.t 
                        | `U_s28_spki of PublicKeyInput.t ], Buffer.t) or_)
                     ->
                     or__to_js
                       (fun
                          (x374 :
                            [ `U_s21_pkcs1 of PublicKeyInput.t 
                            | `U_s23_private of KeyObject.t 
                            | `U_s24_public of KeyObject.t 
                            | `U_s27_secret of KeyObject.t 
                            | `U_s28_spki of PublicKeyInput.t ])
                          ->
                          match x374 with
                          | `U_s21_pkcs1 x375 -> PublicKeyInput.t_to_js x375
                          | `U_s23_private x376 -> KeyObject.t_to_js x376
                          | `U_s24_public x377 -> KeyObject.t_to_js x377
                          | `U_s27_secret x378 -> KeyObject.t_to_js x378
                          | `U_s28_spki x379 -> PublicKeyInput.t_to_js x379)
                       Buffer.t_to_js x373) x372)|])
    let (create_secret_key : key:ArrayBufferView.t -> KeyObject.t) =
      fun ~key:(x381 : ArrayBufferView.t) ->
        KeyObject.t_of_js
          (Ojs.call Import.crypto "createSecretKey"
             [|(ArrayBufferView.t_to_js x381)|])
    module DSAEncoding =
      struct
        type t = [ `der  | `ieee_p1363 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x383 : Ojs.t) ->
            let x384 = x383 in
            match Ojs.string_of_js x384 with
            | "der" -> `der
            | "ieee-p1363" -> `ieee_p1363
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x382 : [ `der  | `ieee_p1363 ]) ->
            match x382 with
            | `der -> Ojs.string_to_js "der"
            | `ieee_p1363 -> Ojs.string_to_js "ieee-p1363"
      end
    module SigningOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x386 : Ojs.t) -> x386
        and t_to_js : t -> Ojs.t = fun (x385 : Ojs.t) -> x385
        let (get_padding : t -> int) =
          fun (x387 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x387) "padding")
        let (set_padding : t -> int -> unit) =
          fun (x388 : t) ->
            fun (x389 : int) ->
              Ojs.set_prop_ascii (t_to_js x388) "padding"
                (Ojs.int_to_js x389)
        let (get_salt_length : t -> int) =
          fun (x390 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x390) "saltLength")
        let (set_salt_length : t -> int -> unit) =
          fun (x391 : t) ->
            fun (x392 : int) ->
              Ojs.set_prop_ascii (t_to_js x391) "saltLength"
                (Ojs.int_to_js x392)
        let (get_dsa_encoding : t -> DSAEncoding.t) =
          fun (x393 : t) ->
            DSAEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x393) "dsaEncoding")
        let (set_dsa_encoding : t -> DSAEncoding.t -> unit) =
          fun (x394 : t) ->
            fun (x395 : DSAEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x394) "dsaEncoding"
                (DSAEncoding.t_to_js x395)
      end
    module SignPrivateKeyInput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x397 : Ojs.t) -> x397
        and t_to_js : t -> Ojs.t = fun (x396 : Ojs.t) -> x396
        let (cast : t -> PrivateKeyInput.t) =
          fun (x398 : t) -> PrivateKeyInput.t_of_js (t_to_js x398)
        let (cast' : t -> SigningOptions.t) =
          fun (x399 : t) -> SigningOptions.t_of_js (t_to_js x399)
      end
    module SignKeyObjectInput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x401 : Ojs.t) -> x401
        and t_to_js : t -> Ojs.t = fun (x400 : Ojs.t) -> x400
        let (get_key : t -> KeyObject.t) =
          fun (x402 : t) ->
            KeyObject.t_of_js (Ojs.get_prop_ascii (t_to_js x402) "key")
        let (set_key : t -> KeyObject.t -> unit) =
          fun (x403 : t) ->
            fun (x404 : KeyObject.t) ->
              Ojs.set_prop_ascii (t_to_js x403) "key"
                (KeyObject.t_to_js x404)
        let (cast : t -> SigningOptions.t) =
          fun (x405 : t) -> SigningOptions.t_of_js (t_to_js x405)
      end
    module VerifyPublicKeyInput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x407 : Ojs.t) -> x407
        and t_to_js : t -> Ojs.t = fun (x406 : Ojs.t) -> x406
        let (cast : t -> PublicKeyInput.t) =
          fun (x408 : t) -> PublicKeyInput.t_of_js (t_to_js x408)
        let (cast' : t -> SigningOptions.t) =
          fun (x409 : t) -> SigningOptions.t_of_js (t_to_js x409)
      end
    module VerifyKeyObjectInput =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x411 : Ojs.t) -> x411
        and t_to_js : t -> Ojs.t = fun (x410 : Ojs.t) -> x410
        let (get_key : t -> KeyObject.t) =
          fun (x412 : t) ->
            KeyObject.t_of_js (Ojs.get_prop_ascii (t_to_js x412) "key")
        let (set_key : t -> KeyObject.t -> unit) =
          fun (x413 : t) ->
            fun (x414 : KeyObject.t) ->
              Ojs.set_prop_ascii (t_to_js x413) "key"
                (KeyObject.t_to_js x414)
        let (cast : t -> SigningOptions.t) =
          fun (x415 : t) -> SigningOptions.t_of_js (t_to_js x415)
      end
    module KeyLike =
      struct
        type t = (Buffer.t, KeyObject.t) union2 or_string
        let rec t_of_js : Ojs.t -> t =
          fun (x420 : Ojs.t) ->
            or_string_of_js
              (fun (x421 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js KeyObject.t_of_js x421) x420
        and t_to_js : t -> Ojs.t =
          fun (x416 : (Buffer.t, KeyObject.t) union2 or_string) ->
            or_string_to_js
              (fun (x417 : (Buffer.t, KeyObject.t) union2) ->
                 union2_to_js Buffer.t_to_js KeyObject.t_to_js x417) x416
      end
    module Signer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x425 : Ojs.t) -> x425
        and t_to_js : t -> Ojs.t = fun (x424 : Ojs.t) -> x424
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Signer") [||])
        let (update : t -> data:BinaryLike.t -> t) =
          fun (x427 : t) ->
            fun ~data:(x426 : BinaryLike.t) ->
              t_of_js
                (Ojs.call (t_to_js x427) "update"
                   [|(BinaryLike.t_to_js x426)|])
        let (update' : t -> data:string -> input_encoding:Encoding.t -> t) =
          fun (x430 : t) ->
            fun ~data:(x428 : string) ->
              fun ~input_encoding:(x429 : Encoding.t) ->
                t_of_js
                  (Ojs.call (t_to_js x430) "update"
                     [|(Ojs.string_to_js x428);(Encoding.t_to_js x429)|])
        let (sign :
          t ->
            private_key:([ `U_s11_der of SignKeyObjectInput.t 
                         | `U_s18_ieee_p1363 of SignKeyObjectInput.t ],
              [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
              | `U_s22_pkcs8 of SignPrivateKeyInput.t 
              | `U_s23_private of KeyLike.t  | `U_s24_public of KeyLike.t 
              | `U_s26_sec1 of SignPrivateKeyInput.t 
              | `U_s27_secret of KeyLike.t ]) union2 -> Buffer.t)
          =
          fun (x442 : t) ->
            fun
              ~private_key:(x431 :
                             ([ `U_s11_der of SignKeyObjectInput.t 
                              | `U_s18_ieee_p1363 of SignKeyObjectInput.t ],
                               [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
                               | `U_s22_pkcs8 of SignPrivateKeyInput.t 
                               | `U_s23_private of KeyLike.t 
                               | `U_s24_public of KeyLike.t 
                               | `U_s26_sec1 of SignPrivateKeyInput.t 
                               | `U_s27_secret of KeyLike.t ]) union2)
              ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x442) "sign"
                   [|(union2_to_js
                        (fun
                           (x432 :
                             [ `U_s11_der of SignKeyObjectInput.t 
                             | `U_s18_ieee_p1363 of SignKeyObjectInput.t ])
                           ->
                           match x432 with
                           | `U_s11_der x433 ->
                               SignKeyObjectInput.t_to_js x433
                           | `U_s18_ieee_p1363 x434 ->
                               SignKeyObjectInput.t_to_js x434)
                        (fun
                           (x435 :
                             [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
                             | `U_s22_pkcs8 of SignPrivateKeyInput.t 
                             | `U_s23_private of KeyLike.t 
                             | `U_s24_public of KeyLike.t 
                             | `U_s26_sec1 of SignPrivateKeyInput.t 
                             | `U_s27_secret of KeyLike.t ])
                           ->
                           match x435 with
                           | `U_s21_pkcs1 x436 ->
                               SignPrivateKeyInput.t_to_js x436
                           | `U_s22_pkcs8 x437 ->
                               SignPrivateKeyInput.t_to_js x437
                           | `U_s23_private x438 -> KeyLike.t_to_js x438
                           | `U_s24_public x439 -> KeyLike.t_to_js x439
                           | `U_s26_sec1 x440 ->
                               SignPrivateKeyInput.t_to_js x440
                           | `U_s27_secret x441 -> KeyLike.t_to_js x441) x431)|])
        let (sign' :
          t ->
            private_key:([ `U_s11_der of SignKeyObjectInput.t 
                         | `U_s18_ieee_p1363 of SignKeyObjectInput.t ],
              [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
              | `U_s22_pkcs8 of SignPrivateKeyInput.t 
              | `U_s23_private of KeyLike.t  | `U_s24_public of KeyLike.t 
              | `U_s26_sec1 of SignPrivateKeyInput.t 
              | `U_s27_secret of KeyLike.t ]) union2 ->
              output_format:BinaryToTextEncoding.t -> string)
          =
          fun (x455 : t) ->
            fun
              ~private_key:(x443 :
                             ([ `U_s11_der of SignKeyObjectInput.t 
                              | `U_s18_ieee_p1363 of SignKeyObjectInput.t ],
                               [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
                               | `U_s22_pkcs8 of SignPrivateKeyInput.t 
                               | `U_s23_private of KeyLike.t 
                               | `U_s24_public of KeyLike.t 
                               | `U_s26_sec1 of SignPrivateKeyInput.t 
                               | `U_s27_secret of KeyLike.t ]) union2)
              ->
              fun ~output_format:(x454 : BinaryToTextEncoding.t) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x455) "sign"
                     [|(union2_to_js
                          (fun
                             (x444 :
                               [ `U_s11_der of SignKeyObjectInput.t 
                               | `U_s18_ieee_p1363 of SignKeyObjectInput.t ])
                             ->
                             match x444 with
                             | `U_s11_der x445 ->
                                 SignKeyObjectInput.t_to_js x445
                             | `U_s18_ieee_p1363 x446 ->
                                 SignKeyObjectInput.t_to_js x446)
                          (fun
                             (x447 :
                               [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
                               | `U_s22_pkcs8 of SignPrivateKeyInput.t 
                               | `U_s23_private of KeyLike.t 
                               | `U_s24_public of KeyLike.t 
                               | `U_s26_sec1 of SignPrivateKeyInput.t 
                               | `U_s27_secret of KeyLike.t ])
                             ->
                             match x447 with
                             | `U_s21_pkcs1 x448 ->
                                 SignPrivateKeyInput.t_to_js x448
                             | `U_s22_pkcs8 x449 ->
                                 SignPrivateKeyInput.t_to_js x449
                             | `U_s23_private x450 -> KeyLike.t_to_js x450
                             | `U_s24_public x451 -> KeyLike.t_to_js x451
                             | `U_s26_sec1 x452 ->
                                 SignPrivateKeyInput.t_to_js x452
                             | `U_s27_secret x453 -> KeyLike.t_to_js x453)
                          x443);(BinaryToTextEncoding.t_to_js x454)|])
        let (cast : t -> Stream.Writable.t) =
          fun (x456 : t) -> Stream.Writable.t_of_js (t_to_js x456)
      end
    let (create_sign :
      algorithm:string ->
        ?options:Stream.WritableOptions.t -> unit -> Signer.t)
      =
      fun ~algorithm:(x457 : string) ->
        fun ?options:(x458 : Stream.WritableOptions.t option) ->
          fun () ->
            Signer.t_of_js
              (let x461 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x461 "createSign") "apply"
                 [|x461;((let x459 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x459 "push" [|(Ojs.string_to_js x457)|]);
                          (match x458 with
                           | Some x460 ->
                               ignore
                                 (Ojs.call x459 "push"
                                    [|(Stream.WritableOptions.t_to_js x460)|])
                           | None -> ());
                          x459))|])
    module Verify =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x463 : Ojs.t) -> x463
        and t_to_js : t -> Ojs.t = fun (x462 : Ojs.t) -> x462
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Verify") [||])
        let (update : t -> data:BinaryLike.t -> t) =
          fun (x465 : t) ->
            fun ~data:(x464 : BinaryLike.t) ->
              t_of_js
                (Ojs.call (t_to_js x465) "update"
                   [|(BinaryLike.t_to_js x464)|])
        let (update' : t -> data:string -> input_encoding:Encoding.t -> t) =
          fun (x468 : t) ->
            fun ~data:(x466 : string) ->
              fun ~input_encoding:(x467 : Encoding.t) ->
                t_of_js
                  (Ojs.call (t_to_js x468) "update"
                     [|(Ojs.string_to_js x466);(Encoding.t_to_js x467)|])
        let (verify :
          t ->
            object_:([ `U_s11_der of VerifyKeyObjectInput.t 
                     | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ],
              [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
              | `U_s23_private of KeyLike.t  | `U_s24_public of KeyLike.t 
              | `U_s27_secret of KeyLike.t 
              | `U_s28_spki of VerifyPublicKeyInput.t ]) union2 ->
              signature:ArrayBufferView.t -> bool)
          =
          fun (x480 : t) ->
            fun
              ~object_:(x469 :
                         ([ `U_s11_der of VerifyKeyObjectInput.t 
                          | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ],
                           [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
                           | `U_s23_private of KeyLike.t 
                           | `U_s24_public of KeyLike.t 
                           | `U_s27_secret of KeyLike.t 
                           | `U_s28_spki of VerifyPublicKeyInput.t ]) union2)
              ->
              fun ~signature:(x479 : ArrayBufferView.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x480) "verify"
                     [|(union2_to_js
                          (fun
                             (x470 :
                               [ `U_s11_der of VerifyKeyObjectInput.t 
                               | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ])
                             ->
                             match x470 with
                             | `U_s11_der x471 ->
                                 VerifyKeyObjectInput.t_to_js x471
                             | `U_s18_ieee_p1363 x472 ->
                                 VerifyKeyObjectInput.t_to_js x472)
                          (fun
                             (x473 :
                               [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
                               | `U_s23_private of KeyLike.t 
                               | `U_s24_public of KeyLike.t 
                               | `U_s27_secret of KeyLike.t 
                               | `U_s28_spki of VerifyPublicKeyInput.t ])
                             ->
                             match x473 with
                             | `U_s21_pkcs1 x474 ->
                                 VerifyPublicKeyInput.t_to_js x474
                             | `U_s23_private x475 -> KeyLike.t_to_js x475
                             | `U_s24_public x476 -> KeyLike.t_to_js x476
                             | `U_s27_secret x477 -> KeyLike.t_to_js x477
                             | `U_s28_spki x478 ->
                                 VerifyPublicKeyInput.t_to_js x478) x469);(
                       ArrayBufferView.t_to_js x479)|])
        let (verify' :
          t ->
            object_:([ `U_s11_der of VerifyKeyObjectInput.t 
                     | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ],
              [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
              | `U_s23_private of KeyLike.t  | `U_s24_public of KeyLike.t 
              | `U_s27_secret of KeyLike.t 
              | `U_s28_spki of VerifyPublicKeyInput.t ]) union2 ->
              signature:string ->
                ?signature_format:BinaryToTextEncoding.t -> unit -> bool)
          =
          fun (x495 : t) ->
            fun
              ~object_:(x481 :
                         ([ `U_s11_der of VerifyKeyObjectInput.t 
                          | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ],
                           [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
                           | `U_s23_private of KeyLike.t 
                           | `U_s24_public of KeyLike.t 
                           | `U_s27_secret of KeyLike.t 
                           | `U_s28_spki of VerifyPublicKeyInput.t ]) union2)
              ->
              fun ~signature:(x482 : string) ->
                fun ?signature_format:(x483 : BinaryToTextEncoding.t option)
                  ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x496 = t_to_js x495 in
                       Ojs.call (Ojs.get_prop_ascii x496 "verify") "apply"
                         [|x496;((let x484 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x484 "push"
                                       [|(union2_to_js
                                            (fun
                                               (x486 :
                                                 [
                                                   `U_s11_der of
                                                     VerifyKeyObjectInput.t 
                                                 | `U_s18_ieee_p1363 of
                                                     VerifyKeyObjectInput.t ])
                                               ->
                                               match x486 with
                                               | `U_s11_der x487 ->
                                                   VerifyKeyObjectInput.t_to_js
                                                     x487
                                               | `U_s18_ieee_p1363 x488 ->
                                                   VerifyKeyObjectInput.t_to_js
                                                     x488)
                                            (fun
                                               (x489 :
                                                 [
                                                   `U_s21_pkcs1 of
                                                     VerifyPublicKeyInput.t 
                                                 | `U_s23_private of
                                                     KeyLike.t 
                                                 | `U_s24_public of KeyLike.t 
                                                 | `U_s27_secret of KeyLike.t 
                                                 | `U_s28_spki of
                                                     VerifyPublicKeyInput.t ])
                                               ->
                                               match x489 with
                                               | `U_s21_pkcs1 x490 ->
                                                   VerifyPublicKeyInput.t_to_js
                                                     x490
                                               | `U_s23_private x491 ->
                                                   KeyLike.t_to_js x491
                                               | `U_s24_public x492 ->
                                                   KeyLike.t_to_js x492
                                               | `U_s27_secret x493 ->
                                                   KeyLike.t_to_js x493
                                               | `U_s28_spki x494 ->
                                                   VerifyPublicKeyInput.t_to_js
                                                     x494) x481)|]);
                                  ignore
                                    (Ojs.call x484 "push"
                                       [|(Ojs.string_to_js x482)|]);
                                  (match x483 with
                                   | Some x485 ->
                                       ignore
                                         (Ojs.call x484 "push"
                                            [|(BinaryToTextEncoding.t_to_js
                                                 x485)|])
                                   | None -> ());
                                  x484))|])
        let (cast : t -> Stream.Writable.t) =
          fun (x497 : t) -> Stream.Writable.t_of_js (t_to_js x497)
      end
    let (create_verify :
      algorithm:string ->
        ?options:Stream.WritableOptions.t -> unit -> Verify.t)
      =
      fun ~algorithm:(x498 : string) ->
        fun ?options:(x499 : Stream.WritableOptions.t option) ->
          fun () ->
            Verify.t_of_js
              (let x502 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x502 "createVerify") "apply"
                 [|x502;((let x500 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x500 "push" [|(Ojs.string_to_js x498)|]);
                          (match x499 with
                           | Some x501 ->
                               ignore
                                 (Ojs.call x500 "push"
                                    [|(Stream.WritableOptions.t_to_js x501)|])
                           | None -> ());
                          x500))|])
    module DiffieHellman =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x504 : Ojs.t) -> x504
        and t_to_js : t -> Ojs.t = fun (x503 : Ojs.t) -> x503
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "DiffieHellman")
                 [||])
        let (generate_keys : t -> Buffer.t) =
          fun (x505 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x505) "generateKeys" [||])
        let (generate_keys' : t -> encoding:BinaryToTextEncoding.t -> string)
          =
          fun (x507 : t) ->
            fun ~encoding:(x506 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x507) "generateKeys"
                   [|(BinaryToTextEncoding.t_to_js x506)|])
        let (compute_secret :
          t -> other_public_key:ArrayBufferView.t -> Buffer.t) =
          fun (x509 : t) ->
            fun ~other_public_key:(x508 : ArrayBufferView.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x509) "computeSecret"
                   [|(ArrayBufferView.t_to_js x508)|])
        let (compute_secret' :
          t ->
            other_public_key:string ->
              input_encoding:BinaryToTextEncoding.t -> Buffer.t)
          =
          fun (x512 : t) ->
            fun ~other_public_key:(x510 : string) ->
              fun ~input_encoding:(x511 : BinaryToTextEncoding.t) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x512) "computeSecret"
                     [|(Ojs.string_to_js x510);(BinaryToTextEncoding.t_to_js
                                                  x511)|])
        let (compute_secret'' :
          t ->
            other_public_key:ArrayBufferView.t ->
              output_encoding:BinaryToTextEncoding.t -> string)
          =
          fun (x515 : t) ->
            fun ~other_public_key:(x513 : ArrayBufferView.t) ->
              fun ~output_encoding:(x514 : BinaryToTextEncoding.t) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x515) "computeSecret"
                     [|(ArrayBufferView.t_to_js x513);(BinaryToTextEncoding.t_to_js
                                                         x514)|])
        let (compute_secret''' :
          t ->
            other_public_key:string ->
              input_encoding:BinaryToTextEncoding.t ->
                output_encoding:BinaryToTextEncoding.t -> string)
          =
          fun (x519 : t) ->
            fun ~other_public_key:(x516 : string) ->
              fun ~input_encoding:(x517 : BinaryToTextEncoding.t) ->
                fun ~output_encoding:(x518 : BinaryToTextEncoding.t) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x519) "computeSecret"
                       [|(Ojs.string_to_js x516);(BinaryToTextEncoding.t_to_js
                                                    x517);(BinaryToTextEncoding.t_to_js
                                                             x518)|])
        let (get_prime : t -> Buffer.t) =
          fun (x520 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x520) "getPrime" [||])
        let (get_prime' : t -> encoding:BinaryToTextEncoding.t -> string) =
          fun (x522 : t) ->
            fun ~encoding:(x521 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x522) "getPrime"
                   [|(BinaryToTextEncoding.t_to_js x521)|])
        let (get_generator : t -> Buffer.t) =
          fun (x523 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x523) "getGenerator" [||])
        let (get_generator' : t -> encoding:BinaryToTextEncoding.t -> string)
          =
          fun (x525 : t) ->
            fun ~encoding:(x524 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x525) "getGenerator"
                   [|(BinaryToTextEncoding.t_to_js x524)|])
        let (get_public_key : t -> Buffer.t) =
          fun (x526 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x526) "getPublicKey" [||])
        let (get_public_key' :
          t -> encoding:BinaryToTextEncoding.t -> string) =
          fun (x528 : t) ->
            fun ~encoding:(x527 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x528) "getPublicKey"
                   [|(BinaryToTextEncoding.t_to_js x527)|])
        let (get_private_key : t -> Buffer.t) =
          fun (x529 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x529) "getPrivateKey" [||])
        let (get_private_key' :
          t -> encoding:BinaryToTextEncoding.t -> string) =
          fun (x531 : t) ->
            fun ~encoding:(x530 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x531) "getPrivateKey"
                   [|(BinaryToTextEncoding.t_to_js x530)|])
        let (set_public_key : t -> public_key:ArrayBufferView.t -> unit) =
          fun (x533 : t) ->
            fun ~public_key:(x532 : ArrayBufferView.t) ->
              ignore
                (Ojs.call (t_to_js x533) "setPublicKey"
                   [|(ArrayBufferView.t_to_js x532)|])
        let (set_public_key' :
          t -> public_key:string -> encoding:BufferEncoding.t -> unit) =
          fun (x536 : t) ->
            fun ~public_key:(x534 : string) ->
              fun ~encoding:(x535 : BufferEncoding.t) ->
                ignore
                  (Ojs.call (t_to_js x536) "setPublicKey"
                     [|(Ojs.string_to_js x534);(BufferEncoding.t_to_js x535)|])
        let (set_private_key : t -> private_key:ArrayBufferView.t -> unit) =
          fun (x538 : t) ->
            fun ~private_key:(x537 : ArrayBufferView.t) ->
              ignore
                (Ojs.call (t_to_js x538) "setPrivateKey"
                   [|(ArrayBufferView.t_to_js x537)|])
        let (set_private_key' :
          t -> private_key:string -> encoding:BufferEncoding.t -> unit) =
          fun (x541 : t) ->
            fun ~private_key:(x539 : string) ->
              fun ~encoding:(x540 : BufferEncoding.t) ->
                ignore
                  (Ojs.call (t_to_js x541) "setPrivateKey"
                     [|(Ojs.string_to_js x539);(BufferEncoding.t_to_js x540)|])
        let (get_verify_error : t -> int) =
          fun (x542 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x542) "verifyError")
        let (set_verify_error : t -> int -> unit) =
          fun (x543 : t) ->
            fun (x544 : int) ->
              Ojs.set_prop_ascii (t_to_js x543) "verifyError"
                (Ojs.int_to_js x544)
      end
    let (create_diffie_hellman :
      prime_length:int ->
        ?generator:ArrayBufferView.t or_number -> unit -> DiffieHellman.t)
      =
      fun ~prime_length:(x545 : int) ->
        fun ?generator:(x546 : ArrayBufferView.t or_number option) ->
          fun () ->
            DiffieHellman.t_of_js
              (let x550 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x550 "createDiffieHellman")
                 "apply"
                 [|x550;((let x547 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x547 "push" [|(Ojs.int_to_js x545)|]);
                          (match x546 with
                           | Some x548 ->
                               ignore
                                 (Ojs.call x547 "push"
                                    [|(or_number_to_js
                                         ArrayBufferView.t_to_js x548)|])
                           | None -> ());
                          x547))|])
    let (create_diffie_hellman : prime:ArrayBufferView.t -> DiffieHellman.t)
      =
      fun ~prime:(x551 : ArrayBufferView.t) ->
        DiffieHellman.t_of_js
          (Ojs.call Import.crypto "createDiffieHellman"
             [|(ArrayBufferView.t_to_js x551)|])
    let (create_diffie_hellman :
      prime:string ->
        prime_encoding:BinaryToTextEncoding.t -> DiffieHellman.t)
      =
      fun ~prime:(x552 : string) ->
        fun ~prime_encoding:(x553 : BinaryToTextEncoding.t) ->
          DiffieHellman.t_of_js
            (Ojs.call Import.crypto "createDiffieHellman"
               [|(Ojs.string_to_js x552);(BinaryToTextEncoding.t_to_js x553)|])
    let (create_diffie_hellman :
      prime:string ->
        prime_encoding:BinaryToTextEncoding.t ->
          generator:ArrayBufferView.t or_number -> DiffieHellman.t)
      =
      fun ~prime:(x554 : string) ->
        fun ~prime_encoding:(x555 : BinaryToTextEncoding.t) ->
          fun ~generator:(x556 : ArrayBufferView.t or_number) ->
            DiffieHellman.t_of_js
              (Ojs.call Import.crypto "createDiffieHellman"
                 [|(Ojs.string_to_js x554);(BinaryToTextEncoding.t_to_js x555);(
                   or_number_to_js ArrayBufferView.t_to_js x556)|])
    let (create_diffie_hellman :
      prime:string ->
        prime_encoding:BinaryToTextEncoding.t ->
          generator:string ->
            generator_encoding:BinaryToTextEncoding.t -> DiffieHellman.t)
      =
      fun ~prime:(x558 : string) ->
        fun ~prime_encoding:(x559 : BinaryToTextEncoding.t) ->
          fun ~generator:(x560 : string) ->
            fun ~generator_encoding:(x561 : BinaryToTextEncoding.t) ->
              DiffieHellman.t_of_js
                (Ojs.call Import.crypto "createDiffieHellman"
                   [|(Ojs.string_to_js x558);(BinaryToTextEncoding.t_to_js
                                                x559);(Ojs.string_to_js x560);(
                     BinaryToTextEncoding.t_to_js x561)|])
    let (get_diffie_hellman : group_name:string -> DiffieHellman.t) =
      fun ~group_name:(x562 : string) ->
        DiffieHellman.t_of_js
          (Ojs.call Import.crypto "getDiffieHellman"
             [|(Ojs.string_to_js x562)|])
    let (pbkdf2 :
      password:BinaryLike.t ->
        salt:BinaryLike.t ->
          iterations:int ->
            keylen:int ->
              digest:string ->
                callback:(err:Error.t or_null -> derived_key:Buffer.t -> any)
                  -> unit)
      =
      fun ~password:(x563 : BinaryLike.t) ->
        fun ~salt:(x564 : BinaryLike.t) ->
          fun ~iterations:(x565 : int) ->
            fun ~keylen:(x566 : int) ->
              fun ~digest:(x567 : string) ->
                fun
                  ~callback:(x568 :
                              err:Error.t or_null ->
                                derived_key:Buffer.t -> any)
                  ->
                  ignore
                    (Ojs.call Import.crypto "pbkdf2"
                       [|(BinaryLike.t_to_js x563);(BinaryLike.t_to_js x564);(
                         Ojs.int_to_js x565);(Ojs.int_to_js x566);(Ojs.string_to_js
                                                                    x567);(
                         Ojs.fun_to_js 2
                           (fun (x569 : Ojs.t) ->
                              fun (x571 : Ojs.t) ->
                                any_to_js
                                  (x568
                                     ~err:(or_null_of_js Error.t_of_js x569)
                                     ~derived_key:(Buffer.t_of_js x571))))|])
    let (pbkdf2Sync :
      password:BinaryLike.t ->
        salt:BinaryLike.t ->
          iterations:int -> keylen:int -> digest:string -> Buffer.t)
      =
      fun ~password:(x572 : BinaryLike.t) ->
        fun ~salt:(x573 : BinaryLike.t) ->
          fun ~iterations:(x574 : int) ->
            fun ~keylen:(x575 : int) ->
              fun ~digest:(x576 : string) ->
                Buffer.t_of_js
                  (Ojs.call Import.crypto "pbkdf2Sync"
                     [|(BinaryLike.t_to_js x572);(BinaryLike.t_to_js x573);(
                       Ojs.int_to_js x574);(Ojs.int_to_js x575);(Ojs.string_to_js
                                                                   x576)|])
    let (random_bytes : size:int -> Buffer.t) =
      fun ~size:(x577 : int) ->
        Buffer.t_of_js
          (Ojs.call Import.crypto "randomBytes" [|(Ojs.int_to_js x577)|])
    let (random_bytes :
      size:int ->
        callback:(err:Error.t or_null -> buf:Buffer.t -> unit) -> unit)
      =
      fun ~size:(x578 : int) ->
        fun ~callback:(x579 : err:Error.t or_null -> buf:Buffer.t -> unit) ->
          ignore
            (Ojs.call Import.crypto "randomBytes"
               [|(Ojs.int_to_js x578);(Ojs.fun_to_js 2
                                         (fun (x580 : Ojs.t) ->
                                            fun (x582 : Ojs.t) ->
                                              x579
                                                ~err:(or_null_of_js
                                                        Error.t_of_js x580)
                                                ~buf:(Buffer.t_of_js x582)))|])
    let (pseudo_random_bytes : size:int -> Buffer.t) =
      fun ~size:(x583 : int) ->
        Buffer.t_of_js
          (Ojs.call Import.crypto "pseudoRandomBytes"
             [|(Ojs.int_to_js x583)|])
    let (pseudo_random_bytes :
      size:int ->
        callback:(err:Error.t or_null -> buf:Buffer.t -> unit) -> unit)
      =
      fun ~size:(x584 : int) ->
        fun ~callback:(x585 : err:Error.t or_null -> buf:Buffer.t -> unit) ->
          ignore
            (Ojs.call Import.crypto "pseudoRandomBytes"
               [|(Ojs.int_to_js x584);(Ojs.fun_to_js 2
                                         (fun (x586 : Ojs.t) ->
                                            fun (x588 : Ojs.t) ->
                                              x585
                                                ~err:(or_null_of_js
                                                        Error.t_of_js x586)
                                                ~buf:(Buffer.t_of_js x588)))|])
    let (random_int : max:int -> int) =
      fun ~max:(x589 : int) ->
        Ojs.int_of_js
          (Ojs.call Import.crypto "randomInt" [|(Ojs.int_to_js x589)|])
    let (random_int : min:int -> max:int -> int) =
      fun ~min:(x590 : int) ->
        fun ~max:(x591 : int) ->
          Ojs.int_of_js
            (Ojs.call Import.crypto "randomInt"
               [|(Ojs.int_to_js x590);(Ojs.int_to_js x591)|])
    let (random_int :
      max:int -> callback:(err:Error.t or_null -> value:int -> unit) -> unit)
      =
      fun ~max:(x592 : int) ->
        fun ~callback:(x593 : err:Error.t or_null -> value:int -> unit) ->
          ignore
            (Ojs.call Import.crypto "randomInt"
               [|(Ojs.int_to_js x592);(Ojs.fun_to_js 2
                                         (fun (x594 : Ojs.t) ->
                                            fun (x596 : Ojs.t) ->
                                              x593
                                                ~err:(or_null_of_js
                                                        Error.t_of_js x594)
                                                ~value:(Ojs.int_of_js x596)))|])
    let (random_int :
      min:int ->
        max:int ->
          callback:(err:Error.t or_null -> value:int -> unit) -> unit)
      =
      fun ~min:(x597 : int) ->
        fun ~max:(x598 : int) ->
          fun ~callback:(x599 : err:Error.t or_null -> value:int -> unit) ->
            ignore
              (Ojs.call Import.crypto "randomInt"
                 [|(Ojs.int_to_js x597);(Ojs.int_to_js x598);(Ojs.fun_to_js 2
                                                                (fun
                                                                   (x600 :
                                                                    Ojs.t)
                                                                   ->
                                                                   fun
                                                                    (x602 :
                                                                    Ojs.t) ->
                                                                    x599
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x600)
                                                                    ~value:(
                                                                    Ojs.int_of_js
                                                                    x602)))|])
    let (random_fill_sync :
      buffer:'T -> ?offset:int -> ?size:int -> unit -> 'T) =
      fun ~buffer:(x603 : 'T) ->
        fun ?offset:(x604 : int option) ->
          fun ?size:(x605 : int option) ->
            fun () ->
              Obj.magic
                (let x609 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x609 "randomFillSync") "apply"
                   [|x609;((let x606 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x606 "push" [|(Obj.magic x603)|]);
                            (match x604 with
                             | Some x608 ->
                                 ignore
                                   (Ojs.call x606 "push"
                                      [|(Ojs.int_to_js x608)|])
                             | None -> ());
                            (match x605 with
                             | Some x607 ->
                                 ignore
                                   (Ojs.call x606 "push"
                                      [|(Ojs.int_to_js x607)|])
                             | None -> ());
                            x606))|])
    let (random_fill :
      buffer:'T -> callback:(err:Error.t or_null -> buf:'T -> unit) -> unit)
      =
      fun ~buffer:(x610 : 'T) ->
        fun ~callback:(x611 : err:Error.t or_null -> buf:'T -> unit) ->
          ignore
            (Ojs.call Import.crypto "randomFill"
               [|(Obj.magic x610);(Ojs.fun_to_js 2
                                     (fun (x612 : Ojs.t) ->
                                        fun (x614 : Ojs.t) ->
                                          x611
                                            ~err:(or_null_of_js Error.t_of_js
                                                    x612)
                                            ~buf:(Obj.magic x614)))|])
    let (random_fill :
      buffer:'T ->
        offset:int ->
          callback:(err:Error.t or_null -> buf:'T -> unit) -> unit)
      =
      fun ~buffer:(x615 : 'T) ->
        fun ~offset:(x616 : int) ->
          fun ~callback:(x617 : err:Error.t or_null -> buf:'T -> unit) ->
            ignore
              (Ojs.call Import.crypto "randomFill"
                 [|(Obj.magic x615);(Ojs.int_to_js x616);(Ojs.fun_to_js 2
                                                            (fun
                                                               (x618 : Ojs.t)
                                                               ->
                                                               fun
                                                                 (x620 :
                                                                   Ojs.t)
                                                                 ->
                                                                 x617
                                                                   ~err:(
                                                                   or_null_of_js
                                                                    Error.t_of_js
                                                                    x618)
                                                                   ~buf:(
                                                                   Obj.magic
                                                                    x620)))|])
    let (random_fill :
      buffer:'T ->
        offset:int ->
          size:int ->
            callback:(err:Error.t or_null -> buf:'T -> unit) -> unit)
      =
      fun ~buffer:(x621 : 'T) ->
        fun ~offset:(x622 : int) ->
          fun ~size:(x623 : int) ->
            fun ~callback:(x624 : err:Error.t or_null -> buf:'T -> unit) ->
              ignore
                (Ojs.call Import.crypto "randomFill"
                   [|(Obj.magic x621);(Ojs.int_to_js x622);(Ojs.int_to_js
                                                              x623);(
                     Ojs.fun_to_js 2
                       (fun (x625 : Ojs.t) ->
                          fun (x627 : Ojs.t) ->
                            x624 ~err:(or_null_of_js Error.t_of_js x625)
                              ~buf:(Obj.magic x627)))|])
    module ScryptOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x629 : Ojs.t) -> x629
        and t_to_js : t -> Ojs.t = fun (x628 : Ojs.t) -> x628
        let (get_cost : t -> int) =
          fun (x630 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x630) "cost")
        let (set_cost : t -> int -> unit) =
          fun (x631 : t) ->
            fun (x632 : int) ->
              Ojs.set_prop_ascii (t_to_js x631) "cost" (Ojs.int_to_js x632)
        let (get_block_size : t -> int) =
          fun (x633 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x633) "blockSize")
        let (set_block_size : t -> int -> unit) =
          fun (x634 : t) ->
            fun (x635 : int) ->
              Ojs.set_prop_ascii (t_to_js x634) "blockSize"
                (Ojs.int_to_js x635)
        let (get_parallelization : t -> int) =
          fun (x636 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x636) "parallelization")
        let (set_parallelization : t -> int -> unit) =
          fun (x637 : t) ->
            fun (x638 : int) ->
              Ojs.set_prop_ascii (t_to_js x637) "parallelization"
                (Ojs.int_to_js x638)
        let (get_n : t -> int) =
          fun (x639 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x639) "N")
        let (set_n : t -> int -> unit) =
          fun (x640 : t) ->
            fun (x641 : int) ->
              Ojs.set_prop_ascii (t_to_js x640) "N" (Ojs.int_to_js x641)
        let (get_r : t -> int) =
          fun (x642 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x642) "r")
        let (set_r : t -> int -> unit) =
          fun (x643 : t) ->
            fun (x644 : int) ->
              Ojs.set_prop_ascii (t_to_js x643) "r" (Ojs.int_to_js x644)
        let (get_p : t -> int) =
          fun (x645 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x645) "p")
        let (set_p : t -> int -> unit) =
          fun (x646 : t) ->
            fun (x647 : int) ->
              Ojs.set_prop_ascii (t_to_js x646) "p" (Ojs.int_to_js x647)
        let (get_maxmem : t -> int) =
          fun (x648 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x648) "maxmem")
        let (set_maxmem : t -> int -> unit) =
          fun (x649 : t) ->
            fun (x650 : int) ->
              Ojs.set_prop_ascii (t_to_js x649) "maxmem" (Ojs.int_to_js x650)
      end
    let (scrypt :
      password:BinaryLike.t ->
        salt:BinaryLike.t ->
          keylen:int ->
            callback:(err:Error.t or_null -> derived_key:Buffer.t -> unit) ->
              unit)
      =
      fun ~password:(x651 : BinaryLike.t) ->
        fun ~salt:(x652 : BinaryLike.t) ->
          fun ~keylen:(x653 : int) ->
            fun
              ~callback:(x654 :
                          err:Error.t or_null -> derived_key:Buffer.t -> unit)
              ->
              ignore
                (Ojs.call Import.crypto "scrypt"
                   [|(BinaryLike.t_to_js x651);(BinaryLike.t_to_js x652);(
                     Ojs.int_to_js x653);(Ojs.fun_to_js 2
                                            (fun (x655 : Ojs.t) ->
                                               fun (x657 : Ojs.t) ->
                                                 x654
                                                   ~err:(or_null_of_js
                                                           Error.t_of_js x655)
                                                   ~derived_key:(Buffer.t_of_js
                                                                   x657)))|])
    let (scrypt :
      password:BinaryLike.t ->
        salt:BinaryLike.t ->
          keylen:int ->
            options:ScryptOptions.t ->
              callback:(err:Error.t or_null -> derived_key:Buffer.t -> unit)
                -> unit)
      =
      fun ~password:(x658 : BinaryLike.t) ->
        fun ~salt:(x659 : BinaryLike.t) ->
          fun ~keylen:(x660 : int) ->
            fun ~options:(x661 : ScryptOptions.t) ->
              fun
                ~callback:(x662 :
                            err:Error.t or_null ->
                              derived_key:Buffer.t -> unit)
                ->
                ignore
                  (Ojs.call Import.crypto "scrypt"
                     [|(BinaryLike.t_to_js x658);(BinaryLike.t_to_js x659);(
                       Ojs.int_to_js x660);(ScryptOptions.t_to_js x661);(
                       Ojs.fun_to_js 2
                         (fun (x663 : Ojs.t) ->
                            fun (x665 : Ojs.t) ->
                              x662 ~err:(or_null_of_js Error.t_of_js x663)
                                ~derived_key:(Buffer.t_of_js x665)))|])
    let (scrypt_sync :
      password:BinaryLike.t ->
        salt:BinaryLike.t ->
          keylen:int -> ?options:ScryptOptions.t -> unit -> Buffer.t)
      =
      fun ~password:(x666 : BinaryLike.t) ->
        fun ~salt:(x667 : BinaryLike.t) ->
          fun ~keylen:(x668 : int) ->
            fun ?options:(x669 : ScryptOptions.t option) ->
              fun () ->
                Buffer.t_of_js
                  (let x672 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x672 "scryptSync") "apply"
                     [|x672;((let x670 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x670 "push"
                                   [|(BinaryLike.t_to_js x666)|]);
                              ignore
                                (Ojs.call x670 "push"
                                   [|(BinaryLike.t_to_js x667)|]);
                              ignore
                                (Ojs.call x670 "push"
                                   [|(Ojs.int_to_js x668)|]);
                              (match x669 with
                               | Some x671 ->
                                   ignore
                                     (Ojs.call x670 "push"
                                        [|(ScryptOptions.t_to_js x671)|])
                               | None -> ());
                              x670))|])
    module RsaPublicKey =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x674 : Ojs.t) -> x674
        and t_to_js : t -> Ojs.t = fun (x673 : Ojs.t) -> x673
        let (get_key : t -> KeyLike.t) =
          fun (x675 : t) ->
            KeyLike.t_of_js (Ojs.get_prop_ascii (t_to_js x675) "key")
        let (set_key : t -> KeyLike.t -> unit) =
          fun (x676 : t) ->
            fun (x677 : KeyLike.t) ->
              Ojs.set_prop_ascii (t_to_js x676) "key" (KeyLike.t_to_js x677)
        let (get_padding : t -> int) =
          fun (x678 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x678) "padding")
        let (set_padding : t -> int -> unit) =
          fun (x679 : t) ->
            fun (x680 : int) ->
              Ojs.set_prop_ascii (t_to_js x679) "padding"
                (Ojs.int_to_js x680)
      end
    module RsaPrivateKey =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x682 : Ojs.t) -> x682
        and t_to_js : t -> Ojs.t = fun (x681 : Ojs.t) -> x681
        let (get_key : t -> KeyLike.t) =
          fun (x683 : t) ->
            KeyLike.t_of_js (Ojs.get_prop_ascii (t_to_js x683) "key")
        let (set_key : t -> KeyLike.t -> unit) =
          fun (x684 : t) ->
            fun (x685 : KeyLike.t) ->
              Ojs.set_prop_ascii (t_to_js x684) "key" (KeyLike.t_to_js x685)
        let (get_passphrase : t -> string) =
          fun (x686 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x686) "passphrase")
        let (set_passphrase : t -> string -> unit) =
          fun (x687 : t) ->
            fun (x688 : string) ->
              Ojs.set_prop_ascii (t_to_js x687) "passphrase"
                (Ojs.string_to_js x688)
        let (get_oaep_hash : t -> string) =
          fun (x689 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x689) "oaepHash")
        let (set_oaep_hash : t -> string -> unit) =
          fun (x690 : t) ->
            fun (x691 : string) ->
              Ojs.set_prop_ascii (t_to_js x690) "oaepHash"
                (Ojs.string_to_js x691)
        let (get_oaep_label : t -> TypedArray.t) =
          fun (x692 : t) ->
            TypedArray.t_of_js
              (Ojs.get_prop_ascii (t_to_js x692) "oaepLabel")
        let (set_oaep_label : t -> TypedArray.t -> unit) =
          fun (x693 : t) ->
            fun (x694 : TypedArray.t) ->
              Ojs.set_prop_ascii (t_to_js x693) "oaepLabel"
                (TypedArray.t_to_js x694)
        let (get_padding : t -> int) =
          fun (x695 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x695) "padding")
        let (set_padding : t -> int -> unit) =
          fun (x696 : t) ->
            fun (x697 : int) ->
              Ojs.set_prop_ascii (t_to_js x696) "padding"
                (Ojs.int_to_js x697)
      end
    let (public_encrypt :
      key:(KeyLike.t, RsaPrivateKey.t, RsaPublicKey.t) union3 ->
        buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun ~key:(x698 : (KeyLike.t, RsaPrivateKey.t, RsaPublicKey.t) union3)
        ->
        fun ~buffer:(x702 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "publicEncrypt"
               [|(union3_to_js KeyLike.t_to_js RsaPrivateKey.t_to_js
                    RsaPublicKey.t_to_js x698);(ArrayBufferView.t_to_js x702)|])
    let (public_decrypt :
      key:(KeyLike.t, RsaPrivateKey.t, RsaPublicKey.t) union3 ->
        buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun ~key:(x703 : (KeyLike.t, RsaPrivateKey.t, RsaPublicKey.t) union3)
        ->
        fun ~buffer:(x707 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "publicDecrypt"
               [|(union3_to_js KeyLike.t_to_js RsaPrivateKey.t_to_js
                    RsaPublicKey.t_to_js x703);(ArrayBufferView.t_to_js x707)|])
    let (private_decrypt :
      private_key:(KeyLike.t, RsaPrivateKey.t) union2 ->
        buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun ~private_key:(x708 : (KeyLike.t, RsaPrivateKey.t) union2) ->
        fun ~buffer:(x711 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "privateDecrypt"
               [|(union2_to_js KeyLike.t_to_js RsaPrivateKey.t_to_js x708);(
                 ArrayBufferView.t_to_js x711)|])
    let (private_encrypt :
      private_key:(KeyLike.t, RsaPrivateKey.t) union2 ->
        buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun ~private_key:(x712 : (KeyLike.t, RsaPrivateKey.t) union2) ->
        fun ~buffer:(x715 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "privateEncrypt"
               [|(union2_to_js KeyLike.t_to_js RsaPrivateKey.t_to_js x712);(
                 ArrayBufferView.t_to_js x715)|])
    let (get_ciphers : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.crypto "getCiphers" [||])
    let (get_curves : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.crypto "getCurves" [||])
    let (get_fips : unit -> [ `L_n_0  | `L_n_1 ]) =
      fun () ->
        let x718 = Ojs.call Import.crypto "getFips" [||] in
        match Ojs.int_of_js x718 with
        | 0 -> `L_n_0
        | 1 -> `L_n_1
        | _ -> assert false
    let (get_hashes : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.crypto "getHashes" [||])
    module ECDH =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x721 : Ojs.t) -> x721
        and t_to_js : t -> Ojs.t = fun (x720 : Ojs.t) -> x720
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "ECDH") [||])
        let (convert_key :
          key:BinaryLike.t ->
            curve:string ->
              ?input_encoding:BinaryToTextEncoding.t ->
                ?output_encoding:[ `base64  | `hex  | `latin1 ] ->
                  ?format:[ `compressed  | `hybrid  | `uncompressed ] ->
                    unit -> Buffer.t or_string)
          =
          fun ~key:(x722 : BinaryLike.t) ->
            fun ~curve:(x723 : string) ->
              fun ?input_encoding:(x724 : BinaryToTextEncoding.t option) ->
                fun
                  ?output_encoding:(x725 :
                                     [ `base64  | `hex  | `latin1 ] option)
                  ->
                  fun
                    ?format:(x726 :
                              [ `compressed  | `hybrid  | `uncompressed ]
                                option)
                    ->
                    fun () ->
                      or_string_of_js Buffer.t_of_js
                        (let x731 = Ojs.get_prop_ascii Import.crypto "ECDH" in
                         Ojs.call (Ojs.get_prop_ascii x731 "convertKey")
                           "apply"
                           [|x731;((let x727 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x727 "push"
                                         [|(BinaryLike.t_to_js x722)|]);
                                    ignore
                                      (Ojs.call x727 "push"
                                         [|(Ojs.string_to_js x723)|]);
                                    (match x724 with
                                     | Some x730 ->
                                         ignore
                                           (Ojs.call x727 "push"
                                              [|(BinaryToTextEncoding.t_to_js
                                                   x730)|])
                                     | None -> ());
                                    (match x725 with
                                     | Some x729 ->
                                         ignore
                                           (Ojs.call x727 "push"
                                              [|((match x729 with
                                                  | `base64 ->
                                                      Ojs.string_to_js
                                                        "base64"
                                                  | `hex ->
                                                      Ojs.string_to_js "hex"
                                                  | `latin1 ->
                                                      Ojs.string_to_js
                                                        "latin1"))|])
                                     | None -> ());
                                    (match x726 with
                                     | Some x728 ->
                                         ignore
                                           (Ojs.call x727 "push"
                                              [|((match x728 with
                                                  | `compressed ->
                                                      Ojs.string_to_js
                                                        "compressed"
                                                  | `hybrid ->
                                                      Ojs.string_to_js
                                                        "hybrid"
                                                  | `uncompressed ->
                                                      Ojs.string_to_js
                                                        "uncompressed"))|])
                                     | None -> ());
                                    x727))|])
        let (generate_keys : t -> Buffer.t) =
          fun (x733 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x733) "generateKeys" [||])
        let (generate_keys' :
          t ->
            encoding:BinaryToTextEncoding.t ->
              ?format:ECDHKeyFormat.t -> unit -> string)
          =
          fun (x738 : t) ->
            fun ~encoding:(x734 : BinaryToTextEncoding.t) ->
              fun ?format:(x735 : ECDHKeyFormat.t option) ->
                fun () ->
                  Ojs.string_of_js
                    (let x739 = t_to_js x738 in
                     Ojs.call (Ojs.get_prop_ascii x739 "generateKeys")
                       "apply"
                       [|x739;((let x736 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x736 "push"
                                     [|(BinaryToTextEncoding.t_to_js x734)|]);
                                (match x735 with
                                 | Some x737 ->
                                     ignore
                                       (Ojs.call x736 "push"
                                          [|(ECDHKeyFormat.t_to_js x737)|])
                                 | None -> ());
                                x736))|])
        let (compute_secret :
          t -> other_public_key:ArrayBufferView.t -> Buffer.t) =
          fun (x741 : t) ->
            fun ~other_public_key:(x740 : ArrayBufferView.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x741) "computeSecret"
                   [|(ArrayBufferView.t_to_js x740)|])
        let (compute_secret' :
          t ->
            other_public_key:string ->
              input_encoding:BinaryToTextEncoding.t -> Buffer.t)
          =
          fun (x744 : t) ->
            fun ~other_public_key:(x742 : string) ->
              fun ~input_encoding:(x743 : BinaryToTextEncoding.t) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x744) "computeSecret"
                     [|(Ojs.string_to_js x742);(BinaryToTextEncoding.t_to_js
                                                  x743)|])
        let (compute_secret'' :
          t ->
            other_public_key:ArrayBufferView.t ->
              output_encoding:BinaryToTextEncoding.t -> string)
          =
          fun (x747 : t) ->
            fun ~other_public_key:(x745 : ArrayBufferView.t) ->
              fun ~output_encoding:(x746 : BinaryToTextEncoding.t) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x747) "computeSecret"
                     [|(ArrayBufferView.t_to_js x745);(BinaryToTextEncoding.t_to_js
                                                         x746)|])
        let (compute_secret''' :
          t ->
            other_public_key:string ->
              input_encoding:BinaryToTextEncoding.t ->
                output_encoding:BinaryToTextEncoding.t -> string)
          =
          fun (x751 : t) ->
            fun ~other_public_key:(x748 : string) ->
              fun ~input_encoding:(x749 : BinaryToTextEncoding.t) ->
                fun ~output_encoding:(x750 : BinaryToTextEncoding.t) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x751) "computeSecret"
                       [|(Ojs.string_to_js x748);(BinaryToTextEncoding.t_to_js
                                                    x749);(BinaryToTextEncoding.t_to_js
                                                             x750)|])
        let (get_private_key : t -> Buffer.t) =
          fun (x752 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x752) "getPrivateKey" [||])
        let (get_private_key' :
          t -> encoding:BinaryToTextEncoding.t -> string) =
          fun (x754 : t) ->
            fun ~encoding:(x753 : BinaryToTextEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x754) "getPrivateKey"
                   [|(BinaryToTextEncoding.t_to_js x753)|])
        let (get_public_key : t -> Buffer.t) =
          fun (x755 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x755) "getPublicKey" [||])
        let (get_public_key' :
          t ->
            encoding:BinaryToTextEncoding.t ->
              ?format:ECDHKeyFormat.t -> unit -> string)
          =
          fun (x760 : t) ->
            fun ~encoding:(x756 : BinaryToTextEncoding.t) ->
              fun ?format:(x757 : ECDHKeyFormat.t option) ->
                fun () ->
                  Ojs.string_of_js
                    (let x761 = t_to_js x760 in
                     Ojs.call (Ojs.get_prop_ascii x761 "getPublicKey")
                       "apply"
                       [|x761;((let x758 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x758 "push"
                                     [|(BinaryToTextEncoding.t_to_js x756)|]);
                                (match x757 with
                                 | Some x759 ->
                                     ignore
                                       (Ojs.call x758 "push"
                                          [|(ECDHKeyFormat.t_to_js x759)|])
                                 | None -> ());
                                x758))|])
        let (set_private_key : t -> private_key:ArrayBufferView.t -> unit) =
          fun (x763 : t) ->
            fun ~private_key:(x762 : ArrayBufferView.t) ->
              ignore
                (Ojs.call (t_to_js x763) "setPrivateKey"
                   [|(ArrayBufferView.t_to_js x762)|])
        let (set_private_key' :
          t -> private_key:string -> encoding:BinaryToTextEncoding.t -> unit)
          =
          fun (x766 : t) ->
            fun ~private_key:(x764 : string) ->
              fun ~encoding:(x765 : BinaryToTextEncoding.t) ->
                ignore
                  (Ojs.call (t_to_js x766) "setPrivateKey"
                     [|(Ojs.string_to_js x764);(BinaryToTextEncoding.t_to_js
                                                  x765)|])
      end
    let (create_ecdh : curve_name:string -> ECDH.t) =
      fun ~curve_name:(x767 : string) ->
        ECDH.t_of_js
          (Ojs.call Import.crypto "createECDH" [|(Ojs.string_to_js x767)|])
    let (timing_safe_equal :
      a:ArrayBufferView.t -> b:ArrayBufferView.t -> bool) =
      fun ~a:(x768 : ArrayBufferView.t) ->
        fun ~b:(x769 : ArrayBufferView.t) ->
          Ojs.bool_of_js
            (Ojs.call Import.crypto "timingSafeEqual"
               [|(ArrayBufferView.t_to_js x768);(ArrayBufferView.t_to_js x769)|])
    let (d_efault_encoding : BufferEncoding.t) =
      BufferEncoding.t_of_js
        (Ojs.get_prop_ascii Import.crypto "DEFAULT_ENCODING")
    module AnonymousInterface2 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x771 : Ojs.t) -> x771
        and t_to_js : t -> Ojs.t = fun (x770 : Ojs.t) -> x770
        let (get_public_key : t -> Buffer.t) =
          fun (x772 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x772) "publicKey")
        let (set_public_key : t -> Buffer.t -> unit) =
          fun (x773 : t) ->
            fun (x774 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x773) "publicKey"
                (Buffer.t_to_js x774)
        let (get_private_key : t -> Buffer.t) =
          fun (x775 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x775) "privateKey")
        let (set_private_key : t -> Buffer.t -> unit) =
          fun (x776 : t) ->
            fun (x777 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x776) "privateKey"
                (Buffer.t_to_js x777)
      end
    module AnonymousInterface3 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x779 : Ojs.t) -> x779
        and t_to_js : t -> Ojs.t = fun (x778 : Ojs.t) -> x778
        let (get_public_key : t -> Buffer.t) =
          fun (x780 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x780) "publicKey")
        let (set_public_key : t -> Buffer.t -> unit) =
          fun (x781 : t) ->
            fun (x782 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x781) "publicKey"
                (Buffer.t_to_js x782)
        let (get_private_key : t -> string) =
          fun (x783 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x783) "privateKey")
        let (set_private_key : t -> string -> unit) =
          fun (x784 : t) ->
            fun (x785 : string) ->
              Ojs.set_prop_ascii (t_to_js x784) "privateKey"
                (Ojs.string_to_js x785)
      end
    module AnonymousInterface4 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x787 : Ojs.t) -> x787
        and t_to_js : t -> Ojs.t = fun (x786 : Ojs.t) -> x786
        let (get_public_key : t -> string) =
          fun (x788 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x788) "publicKey")
        let (set_public_key : t -> string -> unit) =
          fun (x789 : t) ->
            fun (x790 : string) ->
              Ojs.set_prop_ascii (t_to_js x789) "publicKey"
                (Ojs.string_to_js x790)
        let (get_private_key : t -> Buffer.t) =
          fun (x791 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x791) "privateKey")
        let (set_private_key : t -> Buffer.t -> unit) =
          fun (x792 : t) ->
            fun (x793 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x792) "privateKey"
                (Buffer.t_to_js x793)
      end
    module AnonymousInterface5 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x795 : Ojs.t) -> x795
        and t_to_js : t -> Ojs.t = fun (x794 : Ojs.t) -> x794
        let (get_public_key : t -> string) =
          fun (x796 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x796) "publicKey")
        let (set_public_key : t -> string -> unit) =
          fun (x797 : t) ->
            fun (x798 : string) ->
              Ojs.set_prop_ascii (t_to_js x797) "publicKey"
                (Ojs.string_to_js x798)
        let (get_private_key : t -> string) =
          fun (x799 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x799) "privateKey")
        let (set_private_key : t -> string -> unit) =
          fun (x800 : t) ->
            fun (x801 : string) ->
              Ojs.set_prop_ascii (t_to_js x800) "privateKey"
                (Ojs.string_to_js x801)
      end
    module AnonymousInterface6 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x803 : Ojs.t) -> x803
        and t_to_js : t -> Ojs.t = fun (x802 : Ojs.t) -> x802
        let (get_type : t -> [ `pkcs8 ]) =
          fun (x804 : t) ->
            let x805 = Ojs.get_prop_ascii (t_to_js x804) "type" in
            match Ojs.string_of_js x805 with
            | "pkcs8" -> `pkcs8
            | _ -> assert false
        let (set_type : t -> [ `pkcs8 ] -> unit) =
          fun (x806 : t) ->
            fun (x807 : [ `pkcs8 ]) ->
              Ojs.set_prop_ascii (t_to_js x806) "type"
                (match x807 with | `pkcs8 -> Ojs.string_to_js "pkcs8")
      end
    module AnonymousInterface7 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x809 : Ojs.t) -> x809
        and t_to_js : t -> Ojs.t = fun (x808 : Ojs.t) -> x808
        let (get_type : t -> [ `spki ]) =
          fun (x810 : t) ->
            let x811 = Ojs.get_prop_ascii (t_to_js x810) "type" in
            match Ojs.string_of_js x811 with
            | "spki" -> `spki
            | _ -> assert false
        let (set_type : t -> [ `spki ] -> unit) =
          fun (x812 : t) ->
            fun (x813 : [ `spki ]) ->
              Ojs.set_prop_ascii (t_to_js x812) "type"
                (match x813 with | `spki -> Ojs.string_to_js "spki")
        let (get_format : t -> 'PubF) =
          fun (x814 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x814) "format")
        let (set_format : t -> 'PubF -> unit) =
          fun (x815 : t) ->
            fun (x816 : 'PubF) ->
              Ojs.set_prop_ascii (t_to_js x815) "format" (Obj.magic x816)
      end
    module AnonymousInterface8 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x818 : Ojs.t) -> x818
        and t_to_js : t -> Ojs.t = fun (x817 : Ojs.t) -> x817
        let (get_type : t -> [ `pkcs1  | `pkcs8 ]) =
          fun (x819 : t) ->
            let x820 = Ojs.get_prop_ascii (t_to_js x819) "type" in
            match Ojs.string_of_js x820 with
            | "pkcs1" -> `pkcs1
            | "pkcs8" -> `pkcs8
            | _ -> assert false
        let (set_type : t -> [ `pkcs1  | `pkcs8 ] -> unit) =
          fun (x821 : t) ->
            fun (x822 : [ `pkcs1  | `pkcs8 ]) ->
              Ojs.set_prop_ascii (t_to_js x821) "type"
                (match x822 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `pkcs8 -> Ojs.string_to_js "pkcs8")
      end
    module AnonymousInterface9 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x824 : Ojs.t) -> x824
        and t_to_js : t -> Ojs.t = fun (x823 : Ojs.t) -> x823
        let (get_type : t -> [ `pkcs1  | `spki ]) =
          fun (x825 : t) ->
            let x826 = Ojs.get_prop_ascii (t_to_js x825) "type" in
            match Ojs.string_of_js x826 with
            | "pkcs1" -> `pkcs1
            | "spki" -> `spki
            | _ -> assert false
        let (set_type : t -> [ `pkcs1  | `spki ] -> unit) =
          fun (x827 : t) ->
            fun (x828 : [ `pkcs1  | `spki ]) ->
              Ojs.set_prop_ascii (t_to_js x827) "type"
                (match x828 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `spki -> Ojs.string_to_js "spki")
        let (get_format : t -> 'PubF) =
          fun (x829 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x829) "format")
        let (set_format : t -> 'PubF -> unit) =
          fun (x830 : t) ->
            fun (x831 : 'PubF) ->
              Ojs.set_prop_ascii (t_to_js x830) "format" (Obj.magic x831)
      end
    module AnonymousInterface10 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x833 : Ojs.t) -> x833
        and t_to_js : t -> Ojs.t = fun (x832 : Ojs.t) -> x832
        let (get_type : t -> [ `pkcs8  | `sec1 ]) =
          fun (x834 : t) ->
            let x835 = Ojs.get_prop_ascii (t_to_js x834) "type" in
            match Ojs.string_of_js x835 with
            | "pkcs8" -> `pkcs8
            | "sec1" -> `sec1
            | _ -> assert false
        let (set_type : t -> [ `pkcs8  | `sec1 ] -> unit) =
          fun (x836 : t) ->
            fun (x837 : [ `pkcs8  | `sec1 ]) ->
              Ojs.set_prop_ascii (t_to_js x836) "type"
                (match x837 with
                 | `pkcs8 -> Ojs.string_to_js "pkcs8"
                 | `sec1 -> Ojs.string_to_js "sec1")
      end
    module BasePrivateKeyEncodingOptions =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) -> fun (x839 : Ojs.t) -> x839
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x838 : Ojs.t) -> x838
        let (get_format : 'T t -> 'T) =
          fun (x840 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x840) "format")
        let (set_format : 'T t -> 'T -> unit) =
          fun (x842 : 'T t) ->
            fun (x843 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x842) "format"
                (Obj.magic x843)
        let (get_cipher : 'T t -> string) =
          fun (x845 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x845) "cipher")
        let (set_cipher : 'T t -> string -> unit) =
          fun (x847 : 'T t) ->
            fun (x848 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x847) "cipher"
                (Ojs.string_to_js x848)
        let (get_passphrase : 'T t -> string) =
          fun (x850 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x850) "passphrase")
        let (set_passphrase : 'T t -> string -> unit) =
          fun (x852 : 'T t) ->
            fun (x853 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x852) "passphrase"
                (Ojs.string_to_js x853)
      end
    module KeyPairKeyObjectResult =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x856 : Ojs.t) -> x856
        and t_to_js : t -> Ojs.t = fun (x855 : Ojs.t) -> x855
        let (get_public_key : t -> KeyObject.t) =
          fun (x857 : t) ->
            KeyObject.t_of_js (Ojs.get_prop_ascii (t_to_js x857) "publicKey")
        let (set_public_key : t -> KeyObject.t -> unit) =
          fun (x858 : t) ->
            fun (x859 : KeyObject.t) ->
              Ojs.set_prop_ascii (t_to_js x858) "publicKey"
                (KeyObject.t_to_js x859)
        let (get_private_key : t -> KeyObject.t) =
          fun (x860 : t) ->
            KeyObject.t_of_js
              (Ojs.get_prop_ascii (t_to_js x860) "privateKey")
        let (set_private_key : t -> KeyObject.t -> unit) =
          fun (x861 : t) ->
            fun (x862 : KeyObject.t) ->
              Ojs.set_prop_ascii (t_to_js x861) "privateKey"
                (KeyObject.t_to_js x862)
      end
    module ED25519KeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x864 : Ojs.t) -> x864
        and t_to_js : t -> Ojs.t = fun (x863 : Ojs.t) -> x863
      end
    module ED448KeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x866 : Ojs.t) -> x866
        and t_to_js : t -> Ojs.t = fun (x865 : Ojs.t) -> x865
      end
    module X25519KeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x868 : Ojs.t) -> x868
        and t_to_js : t -> Ojs.t = fun (x867 : Ojs.t) -> x867
      end
    module X448KeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x870 : Ojs.t) -> x870
        and t_to_js : t -> Ojs.t = fun (x869 : Ojs.t) -> x869
      end
    module ECKeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x872 : Ojs.t) -> x872
        and t_to_js : t -> Ojs.t = fun (x871 : Ojs.t) -> x871
        let (get_named_curve : t -> string) =
          fun (x873 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x873) "namedCurve")
        let (set_named_curve : t -> string -> unit) =
          fun (x874 : t) ->
            fun (x875 : string) ->
              Ojs.set_prop_ascii (t_to_js x874) "namedCurve"
                (Ojs.string_to_js x875)
      end
    module RSAKeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x877 : Ojs.t) -> x877
        and t_to_js : t -> Ojs.t = fun (x876 : Ojs.t) -> x876
        let (get_modulus_length : t -> int) =
          fun (x878 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x878) "modulusLength")
        let (set_modulus_length : t -> int -> unit) =
          fun (x879 : t) ->
            fun (x880 : int) ->
              Ojs.set_prop_ascii (t_to_js x879) "modulusLength"
                (Ojs.int_to_js x880)
        let (get_public_exponent : t -> int) =
          fun (x881 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x881) "publicExponent")
        let (set_public_exponent : t -> int -> unit) =
          fun (x882 : t) ->
            fun (x883 : int) ->
              Ojs.set_prop_ascii (t_to_js x882) "publicExponent"
                (Ojs.int_to_js x883)
      end
    module DSAKeyPairKeyObjectOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x885 : Ojs.t) -> x885
        and t_to_js : t -> Ojs.t = fun (x884 : Ojs.t) -> x884
        let (get_modulus_length : t -> int) =
          fun (x886 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x886) "modulusLength")
        let (set_modulus_length : t -> int -> unit) =
          fun (x887 : t) ->
            fun (x888 : int) ->
              Ojs.set_prop_ascii (t_to_js x887) "modulusLength"
                (Ojs.int_to_js x888)
        let (get_divisor_length : t -> int) =
          fun (x889 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x889) "divisorLength")
        let (set_divisor_length : t -> int -> unit) =
          fun (x890 : t) ->
            fun (x891 : int) ->
              Ojs.set_prop_ascii (t_to_js x890) "divisorLength"
                (Ojs.int_to_js x891)
      end
    module RSAKeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = Ojs.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x893 : Ojs.t) -> x893
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x892 : Ojs.t) -> x892
        let (get_modulus_length : ('PubF, 'PrivF) t -> int) =
          fun (x894 : ('PubF, 'PrivF) t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x894)
                 "modulusLength")
        let (set_modulus_length : ('PubF, 'PrivF) t -> int -> unit) =
          fun (x897 : ('PubF, 'PrivF) t) ->
            fun (x898 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x897)
                "modulusLength" (Ojs.int_to_js x898)
        let (get_public_exponent : ('PubF, 'PrivF) t -> int) =
          fun (x901 : ('PubF, 'PrivF) t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x901)
                 "publicExponent")
        let (set_public_exponent : ('PubF, 'PrivF) t -> int -> unit) =
          fun (x904 : ('PubF, 'PrivF) t) ->
            fun (x905 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x904)
                "publicExponent" (Ojs.int_to_js x905)
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface9.t) =
          fun (x908 : ('PubF, 'PrivF) t) ->
            AnonymousInterface9.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x908)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface9.t -> unit) =
          fun (x911 : ('PubF, 'PrivF) t) ->
            fun (x912 : AnonymousInterface9.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x911)
                "publicKeyEncoding" (AnonymousInterface9.t_to_js x912)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface8.t)
              intersection2)
          =
          fun (x915 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x918 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x918)
              AnonymousInterface8.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x915)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface8.t)
              intersection2 -> unit)
          =
          fun (x921 : ('PubF, 'PrivF) t) ->
            fun
              (x922 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface8.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x921)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x923 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x923)
                   AnonymousInterface8.t_to_js x922)
      end
    module DSAKeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = Ojs.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x929 : Ojs.t) -> x929
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x928 : Ojs.t) -> x928
        let (get_modulus_length : ('PubF, 'PrivF) t -> int) =
          fun (x930 : ('PubF, 'PrivF) t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x930)
                 "modulusLength")
        let (set_modulus_length : ('PubF, 'PrivF) t -> int -> unit) =
          fun (x933 : ('PubF, 'PrivF) t) ->
            fun (x934 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x933)
                "modulusLength" (Ojs.int_to_js x934)
        let (get_divisor_length : ('PubF, 'PrivF) t -> int) =
          fun (x937 : ('PubF, 'PrivF) t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x937)
                 "divisorLength")
        let (set_divisor_length : ('PubF, 'PrivF) t -> int -> unit) =
          fun (x940 : ('PubF, 'PrivF) t) ->
            fun (x941 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x940)
                "divisorLength" (Ojs.int_to_js x941)
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x944 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x944)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x947 : ('PubF, 'PrivF) t) ->
            fun (x948 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x947)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x948)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2)
          =
          fun (x951 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x954 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x954)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x951)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2 -> unit)
          =
          fun (x957 : ('PubF, 'PrivF) t) ->
            fun
              (x958 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x957)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x959 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x959)
                   AnonymousInterface6.t_to_js x958)
      end
    module ECKeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = Ojs.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x965 : Ojs.t) -> x965
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x964 : Ojs.t) -> x964
        let (get_named_curve : ('PubF, 'PrivF) t -> string) =
          fun (x966 : ('PubF, 'PrivF) t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x966)
                 "namedCurve")
        let (set_named_curve : ('PubF, 'PrivF) t -> string -> unit) =
          fun (x969 : ('PubF, 'PrivF) t) ->
            fun (x970 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x969)
                "namedCurve" (Ojs.string_to_js x970)
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface9.t) =
          fun (x973 : ('PubF, 'PrivF) t) ->
            AnonymousInterface9.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x973)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface9.t -> unit) =
          fun (x976 : ('PubF, 'PrivF) t) ->
            fun (x977 : AnonymousInterface9.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x976)
                "publicKeyEncoding" (AnonymousInterface9.t_to_js x977)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface10.t)
              intersection2)
          =
          fun (x980 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x983 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x983)
              AnonymousInterface10.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x980)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface10.t)
              intersection2 -> unit)
          =
          fun (x986 : ('PubF, 'PrivF) t) ->
            fun
              (x987 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface10.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x986)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x988 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x988)
                   AnonymousInterface10.t_to_js x987)
      end
    module ED25519KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = Ojs.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x994 : Ojs.t) -> x994
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x993 : Ojs.t) -> x993
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x995 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x995)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x998 : ('PubF, 'PrivF) t) ->
            fun (x999 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x998)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x999)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2)
          =
          fun (x1002 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1005 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x1005)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1002)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2 -> unit)
          =
          fun (x1008 : ('PubF, 'PrivF) t) ->
            fun
              (x1009 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1008)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1010 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x1010)
                   AnonymousInterface6.t_to_js x1009)
      end
    module ED448KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = Ojs.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x1016 : Ojs.t) -> x1016
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x1015 : Ojs.t) -> x1015
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x1017 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1017)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x1020 : ('PubF, 'PrivF) t) ->
            fun (x1021 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1020)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x1021)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2)
          =
          fun (x1024 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1027 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x1027)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1024)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2 -> unit)
          =
          fun (x1030 : ('PubF, 'PrivF) t) ->
            fun
              (x1031 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1030)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1032 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x1032)
                   AnonymousInterface6.t_to_js x1031)
      end
    module X25519KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = Ojs.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x1038 : Ojs.t) -> x1038
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x1037 : Ojs.t) -> x1037
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x1039 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1039)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x1042 : ('PubF, 'PrivF) t) ->
            fun (x1043 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1042)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x1043)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2)
          =
          fun (x1046 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1049 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x1049)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1046)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2 -> unit)
          =
          fun (x1052 : ('PubF, 'PrivF) t) ->
            fun
              (x1053 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1052)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1054 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x1054)
                   AnonymousInterface6.t_to_js x1053)
      end
    module X448KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = Ojs.t
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x1060 : Ojs.t) -> x1060
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x1059 : Ojs.t) -> x1059
        let (get_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x1061 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1061)
                 "publicKeyEncoding")
        let (set_public_key_encoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x1064 : ('PubF, 'PrivF) t) ->
            fun (x1065 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1064)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x1065)
        let (get_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2)
          =
          fun (x1068 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1071 : Ojs.t) ->
                 BasePrivateKeyEncodingOptions.t_of_js Obj.magic x1071)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1068)
                 "privateKeyEncoding")
        let (set_private_key_encoding :
          ('PubF, 'PrivF) t ->
            ('PrivF BasePrivateKeyEncodingOptions.t, AnonymousInterface6.t)
              intersection2 -> unit)
          =
          fun (x1074 : ('PubF, 'PrivF) t) ->
            fun
              (x1075 :
                ('PrivF BasePrivateKeyEncodingOptions.t,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1074)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1076 : 'PrivF BasePrivateKeyEncodingOptions.t) ->
                      BasePrivateKeyEncodingOptions.t_to_js Obj.magic x1076)
                   AnonymousInterface6.t_to_js x1075)
      end
    module KeyPairSyncResult =
      struct
        type ('T1, 'T2) t = Ojs.t
        let rec t_of_js :
          'T1 'T2 . (Ojs.t -> 'T1) -> (Ojs.t -> 'T2) -> Ojs.t -> ('T1, 'T2) t
          = fun (type __T1) -> fun (type __T2) ->
          fun (__T1_of_js : Ojs.t -> __T1) ->
            fun (__T2_of_js : Ojs.t -> __T2) -> fun (x1082 : Ojs.t) -> x1082
        and t_to_js :
          'T1 'T2 . ('T1 -> Ojs.t) -> ('T2 -> Ojs.t) -> ('T1, 'T2) t -> Ojs.t
          = fun (type __T1) -> fun (type __T2) ->
          fun (__T1_to_js : __T1 -> Ojs.t) ->
            fun (__T2_to_js : __T2 -> Ojs.t) -> fun (x1081 : Ojs.t) -> x1081
        let (get_public_key : ('T1, 'T2) t -> 'T1) =
          fun (x1083 : ('T1, 'T2) t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1083)
                 "publicKey")
        let (set_public_key : ('T1, 'T2) t -> 'T1 -> unit) =
          fun (x1086 : ('T1, 'T2) t) ->
            fun (x1087 : 'T1) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1086)
                "publicKey" (Obj.magic x1087)
        let (get_private_key : ('T1, 'T2) t -> 'T2) =
          fun (x1090 : ('T1, 'T2) t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1090)
                 "privateKey")
        let (set_private_key : ('T1, 'T2) t -> 'T2 -> unit) =
          fun (x1093 : ('T1, 'T2) t) ->
            fun (x1094 : 'T2) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1093)
                "privateKey" (Obj.magic x1094)
      end
    let (generate_key_pair_sync :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `pem ]) RSAKeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1097 : [ `rsa ]) ->
        fun ~options:(x1098 : ([ `pem ], [ `pem ]) RSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1097 with | `rsa -> Ojs.string_to_js "rsa"));(
                 RSAKeyPairOptions.t_to_js
                   (fun (x1099 : [ `pem ]) ->
                      match x1099 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1100 : [ `pem ]) ->
                      match x1100 with | `pem -> Ojs.string_to_js "pem")
                   x1098)|])
    let (generate_key_pair_sync :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `der ]) RSAKeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1103 : [ `rsa ]) ->
        fun ~options:(x1104 : ([ `pem ], [ `der ]) RSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1103 with | `rsa -> Ojs.string_to_js "rsa"));(
                 RSAKeyPairOptions.t_to_js
                   (fun (x1105 : [ `pem ]) ->
                      match x1105 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1106 : [ `der ]) ->
                      match x1106 with | `der -> Ojs.string_to_js "der")
                   x1104)|])
    let (generate_key_pair_sync :
      type_:[ `rsa ] ->
        options:([ `der ], [ `pem ]) RSAKeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1109 : [ `rsa ]) ->
        fun ~options:(x1110 : ([ `der ], [ `pem ]) RSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1109 with | `rsa -> Ojs.string_to_js "rsa"));(
                 RSAKeyPairOptions.t_to_js
                   (fun (x1111 : [ `der ]) ->
                      match x1111 with | `der -> Ojs.string_to_js "der")
                   (fun (x1112 : [ `pem ]) ->
                      match x1112 with | `pem -> Ojs.string_to_js "pem")
                   x1110)|])
    let (generate_key_pair_sync :
      type_:[ `rsa ] ->
        options:([ `der ], [ `der ]) RSAKeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1115 : [ `rsa ]) ->
        fun ~options:(x1116 : ([ `der ], [ `der ]) RSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1115 with | `rsa -> Ojs.string_to_js "rsa"));(
                 RSAKeyPairOptions.t_to_js
                   (fun (x1117 : [ `der ]) ->
                      match x1117 with | `der -> Ojs.string_to_js "der")
                   (fun (x1118 : [ `der ]) ->
                      match x1118 with | `der -> Ojs.string_to_js "der")
                   x1116)|])
    let (generate_key_pair_sync :
      type_:[ `rsa ] ->
        options:RSAKeyPairKeyObjectOptions.t -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1121 : [ `rsa ]) ->
        fun ~options:(x1122 : RSAKeyPairKeyObjectOptions.t) ->
          KeyPairKeyObjectResult.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1121 with | `rsa -> Ojs.string_to_js "rsa"));(
                 RSAKeyPairKeyObjectOptions.t_to_js x1122)|])
    let (generate_key_pair_sync :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `pem ]) DSAKeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1123 : [ `dsa ]) ->
        fun ~options:(x1124 : ([ `pem ], [ `pem ]) DSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1123 with | `dsa -> Ojs.string_to_js "dsa"));(
                 DSAKeyPairOptions.t_to_js
                   (fun (x1125 : [ `pem ]) ->
                      match x1125 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1126 : [ `pem ]) ->
                      match x1126 with | `pem -> Ojs.string_to_js "pem")
                   x1124)|])
    let (generate_key_pair_sync :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `der ]) DSAKeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1129 : [ `dsa ]) ->
        fun ~options:(x1130 : ([ `pem ], [ `der ]) DSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1129 with | `dsa -> Ojs.string_to_js "dsa"));(
                 DSAKeyPairOptions.t_to_js
                   (fun (x1131 : [ `pem ]) ->
                      match x1131 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1132 : [ `der ]) ->
                      match x1132 with | `der -> Ojs.string_to_js "der")
                   x1130)|])
    let (generate_key_pair_sync :
      type_:[ `dsa ] ->
        options:([ `der ], [ `pem ]) DSAKeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1135 : [ `dsa ]) ->
        fun ~options:(x1136 : ([ `der ], [ `pem ]) DSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1135 with | `dsa -> Ojs.string_to_js "dsa"));(
                 DSAKeyPairOptions.t_to_js
                   (fun (x1137 : [ `der ]) ->
                      match x1137 with | `der -> Ojs.string_to_js "der")
                   (fun (x1138 : [ `pem ]) ->
                      match x1138 with | `pem -> Ojs.string_to_js "pem")
                   x1136)|])
    let (generate_key_pair_sync :
      type_:[ `dsa ] ->
        options:([ `der ], [ `der ]) DSAKeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1141 : [ `dsa ]) ->
        fun ~options:(x1142 : ([ `der ], [ `der ]) DSAKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1141 with | `dsa -> Ojs.string_to_js "dsa"));(
                 DSAKeyPairOptions.t_to_js
                   (fun (x1143 : [ `der ]) ->
                      match x1143 with | `der -> Ojs.string_to_js "der")
                   (fun (x1144 : [ `der ]) ->
                      match x1144 with | `der -> Ojs.string_to_js "der")
                   x1142)|])
    let (generate_key_pair_sync :
      type_:[ `dsa ] ->
        options:DSAKeyPairKeyObjectOptions.t -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1147 : [ `dsa ]) ->
        fun ~options:(x1148 : DSAKeyPairKeyObjectOptions.t) ->
          KeyPairKeyObjectResult.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1147 with | `dsa -> Ojs.string_to_js "dsa"));(
                 DSAKeyPairKeyObjectOptions.t_to_js x1148)|])
    let (generate_key_pair_sync :
      type_:[ `ec ] ->
        options:([ `pem ], [ `pem ]) ECKeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1149 : [ `ec ]) ->
        fun ~options:(x1150 : ([ `pem ], [ `pem ]) ECKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1149 with | `ec -> Ojs.string_to_js "ec"));(
                 ECKeyPairOptions.t_to_js
                   (fun (x1151 : [ `pem ]) ->
                      match x1151 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1152 : [ `pem ]) ->
                      match x1152 with | `pem -> Ojs.string_to_js "pem")
                   x1150)|])
    let (generate_key_pair_sync :
      type_:[ `ec ] ->
        options:([ `pem ], [ `der ]) ECKeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1155 : [ `ec ]) ->
        fun ~options:(x1156 : ([ `pem ], [ `der ]) ECKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1155 with | `ec -> Ojs.string_to_js "ec"));(
                 ECKeyPairOptions.t_to_js
                   (fun (x1157 : [ `pem ]) ->
                      match x1157 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1158 : [ `der ]) ->
                      match x1158 with | `der -> Ojs.string_to_js "der")
                   x1156)|])
    let (generate_key_pair_sync :
      type_:[ `ec ] ->
        options:([ `der ], [ `pem ]) ECKeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1161 : [ `ec ]) ->
        fun ~options:(x1162 : ([ `der ], [ `pem ]) ECKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1161 with | `ec -> Ojs.string_to_js "ec"));(
                 ECKeyPairOptions.t_to_js
                   (fun (x1163 : [ `der ]) ->
                      match x1163 with | `der -> Ojs.string_to_js "der")
                   (fun (x1164 : [ `pem ]) ->
                      match x1164 with | `pem -> Ojs.string_to_js "pem")
                   x1162)|])
    let (generate_key_pair_sync :
      type_:[ `ec ] ->
        options:([ `der ], [ `der ]) ECKeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1167 : [ `ec ]) ->
        fun ~options:(x1168 : ([ `der ], [ `der ]) ECKeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1167 with | `ec -> Ojs.string_to_js "ec"));(
                 ECKeyPairOptions.t_to_js
                   (fun (x1169 : [ `der ]) ->
                      match x1169 with | `der -> Ojs.string_to_js "der")
                   (fun (x1170 : [ `der ]) ->
                      match x1170 with | `der -> Ojs.string_to_js "der")
                   x1168)|])
    let (generate_key_pair_sync :
      type_:[ `ec ] ->
        options:ECKeyPairKeyObjectOptions.t -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1173 : [ `ec ]) ->
        fun ~options:(x1174 : ECKeyPairKeyObjectOptions.t) ->
          KeyPairKeyObjectResult.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1173 with | `ec -> Ojs.string_to_js "ec"));(
                 ECKeyPairKeyObjectOptions.t_to_js x1174)|])
    let (generate_key_pair_sync :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `pem ]) ED25519KeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1175 : [ `ed25519 ]) ->
        fun ~options:(x1176 : ([ `pem ], [ `pem ]) ED25519KeyPairOptions.t)
          ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1175 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 ED25519KeyPairOptions.t_to_js
                   (fun (x1177 : [ `pem ]) ->
                      match x1177 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1178 : [ `pem ]) ->
                      match x1178 with | `pem -> Ojs.string_to_js "pem")
                   x1176)|])
    let (generate_key_pair_sync :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `der ]) ED25519KeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1181 : [ `ed25519 ]) ->
        fun ~options:(x1182 : ([ `pem ], [ `der ]) ED25519KeyPairOptions.t)
          ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1181 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 ED25519KeyPairOptions.t_to_js
                   (fun (x1183 : [ `pem ]) ->
                      match x1183 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1184 : [ `der ]) ->
                      match x1184 with | `der -> Ojs.string_to_js "der")
                   x1182)|])
    let (generate_key_pair_sync :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `pem ]) ED25519KeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1187 : [ `ed25519 ]) ->
        fun ~options:(x1188 : ([ `der ], [ `pem ]) ED25519KeyPairOptions.t)
          ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1187 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 ED25519KeyPairOptions.t_to_js
                   (fun (x1189 : [ `der ]) ->
                      match x1189 with | `der -> Ojs.string_to_js "der")
                   (fun (x1190 : [ `pem ]) ->
                      match x1190 with | `pem -> Ojs.string_to_js "pem")
                   x1188)|])
    let (generate_key_pair_sync :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `der ]) ED25519KeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1193 : [ `ed25519 ]) ->
        fun ~options:(x1194 : ([ `der ], [ `der ]) ED25519KeyPairOptions.t)
          ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1193 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 ED25519KeyPairOptions.t_to_js
                   (fun (x1195 : [ `der ]) ->
                      match x1195 with | `der -> Ojs.string_to_js "der")
                   (fun (x1196 : [ `der ]) ->
                      match x1196 with | `der -> Ojs.string_to_js "der")
                   x1194)|])
    let (generate_key_pair_sync :
      type_:[ `ed25519 ] ->
        ?options:ED25519KeyPairKeyObjectOptions.t ->
          unit -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1199 : [ `ed25519 ]) ->
        fun ?options:(x1200 : ED25519KeyPairKeyObjectOptions.t option) ->
          fun () ->
            KeyPairKeyObjectResult.t_of_js
              (let x1203 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1203 "generateKeyPairSync")
                 "apply"
                 [|x1203;((let x1201 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1201 "push"
                                [|((match x1199 with
                                    | `ed25519 -> Ojs.string_to_js "ed25519"))|]);
                           (match x1200 with
                            | Some x1202 ->
                                ignore
                                  (Ojs.call x1201 "push"
                                     [|(ED25519KeyPairKeyObjectOptions.t_to_js
                                          x1202)|])
                            | None -> ());
                           x1201))|])
    let (generate_key_pair_sync :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `pem ]) ED448KeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1204 : [ `ed448 ]) ->
        fun ~options:(x1205 : ([ `pem ], [ `pem ]) ED448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1204 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 ED448KeyPairOptions.t_to_js
                   (fun (x1206 : [ `pem ]) ->
                      match x1206 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1207 : [ `pem ]) ->
                      match x1207 with | `pem -> Ojs.string_to_js "pem")
                   x1205)|])
    let (generate_key_pair_sync :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `der ]) ED448KeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1210 : [ `ed448 ]) ->
        fun ~options:(x1211 : ([ `pem ], [ `der ]) ED448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1210 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 ED448KeyPairOptions.t_to_js
                   (fun (x1212 : [ `pem ]) ->
                      match x1212 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1213 : [ `der ]) ->
                      match x1213 with | `der -> Ojs.string_to_js "der")
                   x1211)|])
    let (generate_key_pair_sync :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `pem ]) ED448KeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1216 : [ `ed448 ]) ->
        fun ~options:(x1217 : ([ `der ], [ `pem ]) ED448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1216 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 ED448KeyPairOptions.t_to_js
                   (fun (x1218 : [ `der ]) ->
                      match x1218 with | `der -> Ojs.string_to_js "der")
                   (fun (x1219 : [ `pem ]) ->
                      match x1219 with | `pem -> Ojs.string_to_js "pem")
                   x1217)|])
    let (generate_key_pair_sync :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `der ]) ED448KeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1222 : [ `ed448 ]) ->
        fun ~options:(x1223 : ([ `der ], [ `der ]) ED448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1222 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 ED448KeyPairOptions.t_to_js
                   (fun (x1224 : [ `der ]) ->
                      match x1224 with | `der -> Ojs.string_to_js "der")
                   (fun (x1225 : [ `der ]) ->
                      match x1225 with | `der -> Ojs.string_to_js "der")
                   x1223)|])
    let (generate_key_pair_sync :
      type_:[ `ed448 ] ->
        ?options:ED448KeyPairKeyObjectOptions.t ->
          unit -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1228 : [ `ed448 ]) ->
        fun ?options:(x1229 : ED448KeyPairKeyObjectOptions.t option) ->
          fun () ->
            KeyPairKeyObjectResult.t_of_js
              (let x1232 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1232 "generateKeyPairSync")
                 "apply"
                 [|x1232;((let x1230 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1230 "push"
                                [|((match x1228 with
                                    | `ed448 -> Ojs.string_to_js "ed448"))|]);
                           (match x1229 with
                            | Some x1231 ->
                                ignore
                                  (Ojs.call x1230 "push"
                                     [|(ED448KeyPairKeyObjectOptions.t_to_js
                                          x1231)|])
                            | None -> ());
                           x1230))|])
    let (generate_key_pair_sync :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `pem ]) X25519KeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1233 : [ `x25519 ]) ->
        fun ~options:(x1234 : ([ `pem ], [ `pem ]) X25519KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1233 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 X25519KeyPairOptions.t_to_js
                   (fun (x1235 : [ `pem ]) ->
                      match x1235 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1236 : [ `pem ]) ->
                      match x1236 with | `pem -> Ojs.string_to_js "pem")
                   x1234)|])
    let (generate_key_pair_sync :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `der ]) X25519KeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1239 : [ `x25519 ]) ->
        fun ~options:(x1240 : ([ `pem ], [ `der ]) X25519KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1239 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 X25519KeyPairOptions.t_to_js
                   (fun (x1241 : [ `pem ]) ->
                      match x1241 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1242 : [ `der ]) ->
                      match x1242 with | `der -> Ojs.string_to_js "der")
                   x1240)|])
    let (generate_key_pair_sync :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `pem ]) X25519KeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1245 : [ `x25519 ]) ->
        fun ~options:(x1246 : ([ `der ], [ `pem ]) X25519KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1245 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 X25519KeyPairOptions.t_to_js
                   (fun (x1247 : [ `der ]) ->
                      match x1247 with | `der -> Ojs.string_to_js "der")
                   (fun (x1248 : [ `pem ]) ->
                      match x1248 with | `pem -> Ojs.string_to_js "pem")
                   x1246)|])
    let (generate_key_pair_sync :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `der ]) X25519KeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1251 : [ `x25519 ]) ->
        fun ~options:(x1252 : ([ `der ], [ `der ]) X25519KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1251 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 X25519KeyPairOptions.t_to_js
                   (fun (x1253 : [ `der ]) ->
                      match x1253 with | `der -> Ojs.string_to_js "der")
                   (fun (x1254 : [ `der ]) ->
                      match x1254 with | `der -> Ojs.string_to_js "der")
                   x1252)|])
    let (generate_key_pair_sync :
      type_:[ `x25519 ] ->
        ?options:X25519KeyPairKeyObjectOptions.t ->
          unit -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1257 : [ `x25519 ]) ->
        fun ?options:(x1258 : X25519KeyPairKeyObjectOptions.t option) ->
          fun () ->
            KeyPairKeyObjectResult.t_of_js
              (let x1261 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1261 "generateKeyPairSync")
                 "apply"
                 [|x1261;((let x1259 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1259 "push"
                                [|((match x1257 with
                                    | `x25519 -> Ojs.string_to_js "x25519"))|]);
                           (match x1258 with
                            | Some x1260 ->
                                ignore
                                  (Ojs.call x1259 "push"
                                     [|(X25519KeyPairKeyObjectOptions.t_to_js
                                          x1260)|])
                            | None -> ());
                           x1259))|])
    let (generate_key_pair_sync :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `pem ]) X448KeyPairOptions.t ->
          (string, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1262 : [ `x448 ]) ->
        fun ~options:(x1263 : ([ `pem ], [ `pem ]) X448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1262 with | `x448 -> Ojs.string_to_js "x448"));(
                 X448KeyPairOptions.t_to_js
                   (fun (x1264 : [ `pem ]) ->
                      match x1264 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1265 : [ `pem ]) ->
                      match x1265 with | `pem -> Ojs.string_to_js "pem")
                   x1263)|])
    let (generate_key_pair_sync :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `der ]) X448KeyPairOptions.t ->
          (string, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1268 : [ `x448 ]) ->
        fun ~options:(x1269 : ([ `pem ], [ `der ]) X448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1268 with | `x448 -> Ojs.string_to_js "x448"));(
                 X448KeyPairOptions.t_to_js
                   (fun (x1270 : [ `pem ]) ->
                      match x1270 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1271 : [ `der ]) ->
                      match x1271 with | `der -> Ojs.string_to_js "der")
                   x1269)|])
    let (generate_key_pair_sync :
      type_:[ `x448 ] ->
        options:([ `der ], [ `pem ]) X448KeyPairOptions.t ->
          (Buffer.t, string) KeyPairSyncResult.t)
      =
      fun ~type_:(x1274 : [ `x448 ]) ->
        fun ~options:(x1275 : ([ `der ], [ `pem ]) X448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1274 with | `x448 -> Ojs.string_to_js "x448"));(
                 X448KeyPairOptions.t_to_js
                   (fun (x1276 : [ `der ]) ->
                      match x1276 with | `der -> Ojs.string_to_js "der")
                   (fun (x1277 : [ `pem ]) ->
                      match x1277 with | `pem -> Ojs.string_to_js "pem")
                   x1275)|])
    let (generate_key_pair_sync :
      type_:[ `x448 ] ->
        options:([ `der ], [ `der ]) X448KeyPairOptions.t ->
          (Buffer.t, Buffer.t) KeyPairSyncResult.t)
      =
      fun ~type_:(x1280 : [ `x448 ]) ->
        fun ~options:(x1281 : ([ `der ], [ `der ]) X448KeyPairOptions.t) ->
          KeyPairSyncResult.t_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1280 with | `x448 -> Ojs.string_to_js "x448"));(
                 X448KeyPairOptions.t_to_js
                   (fun (x1282 : [ `der ]) ->
                      match x1282 with | `der -> Ojs.string_to_js "der")
                   (fun (x1283 : [ `der ]) ->
                      match x1283 with | `der -> Ojs.string_to_js "der")
                   x1281)|])
    let (generate_key_pair_sync :
      type_:[ `x448 ] ->
        ?options:X448KeyPairKeyObjectOptions.t ->
          unit -> KeyPairKeyObjectResult.t)
      =
      fun ~type_:(x1286 : [ `x448 ]) ->
        fun ?options:(x1287 : X448KeyPairKeyObjectOptions.t option) ->
          fun () ->
            KeyPairKeyObjectResult.t_of_js
              (let x1290 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1290 "generateKeyPairSync")
                 "apply"
                 [|x1290;((let x1288 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1288 "push"
                                [|((match x1286 with
                                    | `x448 -> Ojs.string_to_js "x448"))|]);
                           (match x1287 with
                            | Some x1289 ->
                                ignore
                                  (Ojs.call x1288 "push"
                                     [|(X448KeyPairKeyObjectOptions.t_to_js
                                          x1289)|])
                            | None -> ());
                           x1288))|])
    let (generate_key_pair :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `pem ]) RSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1291 : [ `rsa ]) ->
        fun ~options:(x1292 : ([ `pem ], [ `pem ]) RSAKeyPairOptions.t) ->
          fun
            ~callback:(x1295 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1291 with | `rsa -> Ojs.string_to_js "rsa"));(
                   RSAKeyPairOptions.t_to_js
                     (fun (x1293 : [ `pem ]) ->
                        match x1293 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1294 : [ `pem ]) ->
                        match x1294 with | `pem -> Ojs.string_to_js "pem")
                     x1292);(Ojs.fun_to_js 3
                               (fun (x1296 : Ojs.t) ->
                                  fun (x1298 : Ojs.t) ->
                                    fun (x1299 : Ojs.t) ->
                                      x1295
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1296)
                                        ~public_key:(Ojs.string_of_js x1298)
                                        ~private_key:(Ojs.string_of_js x1299)))|])
    let (generate_key_pair :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `der ]) RSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1300 : [ `rsa ]) ->
        fun ~options:(x1301 : ([ `pem ], [ `der ]) RSAKeyPairOptions.t) ->
          fun
            ~callback:(x1304 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1300 with | `rsa -> Ojs.string_to_js "rsa"));(
                   RSAKeyPairOptions.t_to_js
                     (fun (x1302 : [ `pem ]) ->
                        match x1302 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1303 : [ `der ]) ->
                        match x1303 with | `der -> Ojs.string_to_js "der")
                     x1301);(Ojs.fun_to_js 3
                               (fun (x1305 : Ojs.t) ->
                                  fun (x1307 : Ojs.t) ->
                                    fun (x1308 : Ojs.t) ->
                                      x1304
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1305)
                                        ~public_key:(Ojs.string_of_js x1307)
                                        ~private_key:(Buffer.t_of_js x1308)))|])
    let (generate_key_pair :
      type_:[ `rsa ] ->
        options:([ `der ], [ `pem ]) RSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1309 : [ `rsa ]) ->
        fun ~options:(x1310 : ([ `der ], [ `pem ]) RSAKeyPairOptions.t) ->
          fun
            ~callback:(x1313 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1309 with | `rsa -> Ojs.string_to_js "rsa"));(
                   RSAKeyPairOptions.t_to_js
                     (fun (x1311 : [ `der ]) ->
                        match x1311 with | `der -> Ojs.string_to_js "der")
                     (fun (x1312 : [ `pem ]) ->
                        match x1312 with | `pem -> Ojs.string_to_js "pem")
                     x1310);(Ojs.fun_to_js 3
                               (fun (x1314 : Ojs.t) ->
                                  fun (x1316 : Ojs.t) ->
                                    fun (x1317 : Ojs.t) ->
                                      x1313
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1314)
                                        ~public_key:(Buffer.t_of_js x1316)
                                        ~private_key:(Ojs.string_of_js x1317)))|])
    let (generate_key_pair :
      type_:[ `rsa ] ->
        options:([ `der ], [ `der ]) RSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1318 : [ `rsa ]) ->
        fun ~options:(x1319 : ([ `der ], [ `der ]) RSAKeyPairOptions.t) ->
          fun
            ~callback:(x1322 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1318 with | `rsa -> Ojs.string_to_js "rsa"));(
                   RSAKeyPairOptions.t_to_js
                     (fun (x1320 : [ `der ]) ->
                        match x1320 with | `der -> Ojs.string_to_js "der")
                     (fun (x1321 : [ `der ]) ->
                        match x1321 with | `der -> Ojs.string_to_js "der")
                     x1319);(Ojs.fun_to_js 3
                               (fun (x1323 : Ojs.t) ->
                                  fun (x1325 : Ojs.t) ->
                                    fun (x1326 : Ojs.t) ->
                                      x1322
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1323)
                                        ~public_key:(Buffer.t_of_js x1325)
                                        ~private_key:(Buffer.t_of_js x1326)))|])
    let (generate_key_pair :
      type_:[ `rsa ] ->
        options:RSAKeyPairKeyObjectOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1327 : [ `rsa ]) ->
        fun ~options:(x1328 : RSAKeyPairKeyObjectOptions.t) ->
          fun
            ~callback:(x1329 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1327 with | `rsa -> Ojs.string_to_js "rsa"));(
                   RSAKeyPairKeyObjectOptions.t_to_js x1328);(Ojs.fun_to_js 3
                                                                (fun
                                                                   (x1330 :
                                                                    Ojs.t)
                                                                   ->
                                                                   fun
                                                                    (x1332 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1333 :
                                                                    Ojs.t) ->
                                                                    x1329
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x1330)
                                                                    ~public_key:(
                                                                    KeyObject.t_of_js
                                                                    x1332)
                                                                    ~private_key:(
                                                                    KeyObject.t_of_js
                                                                    x1333)))|])
    let (generate_key_pair :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `pem ]) DSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1334 : [ `dsa ]) ->
        fun ~options:(x1335 : ([ `pem ], [ `pem ]) DSAKeyPairOptions.t) ->
          fun
            ~callback:(x1338 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1334 with | `dsa -> Ojs.string_to_js "dsa"));(
                   DSAKeyPairOptions.t_to_js
                     (fun (x1336 : [ `pem ]) ->
                        match x1336 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1337 : [ `pem ]) ->
                        match x1337 with | `pem -> Ojs.string_to_js "pem")
                     x1335);(Ojs.fun_to_js 3
                               (fun (x1339 : Ojs.t) ->
                                  fun (x1341 : Ojs.t) ->
                                    fun (x1342 : Ojs.t) ->
                                      x1338
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1339)
                                        ~public_key:(Ojs.string_of_js x1341)
                                        ~private_key:(Ojs.string_of_js x1342)))|])
    let (generate_key_pair :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `der ]) DSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1343 : [ `dsa ]) ->
        fun ~options:(x1344 : ([ `pem ], [ `der ]) DSAKeyPairOptions.t) ->
          fun
            ~callback:(x1347 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1343 with | `dsa -> Ojs.string_to_js "dsa"));(
                   DSAKeyPairOptions.t_to_js
                     (fun (x1345 : [ `pem ]) ->
                        match x1345 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1346 : [ `der ]) ->
                        match x1346 with | `der -> Ojs.string_to_js "der")
                     x1344);(Ojs.fun_to_js 3
                               (fun (x1348 : Ojs.t) ->
                                  fun (x1350 : Ojs.t) ->
                                    fun (x1351 : Ojs.t) ->
                                      x1347
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1348)
                                        ~public_key:(Ojs.string_of_js x1350)
                                        ~private_key:(Buffer.t_of_js x1351)))|])
    let (generate_key_pair :
      type_:[ `dsa ] ->
        options:([ `der ], [ `pem ]) DSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1352 : [ `dsa ]) ->
        fun ~options:(x1353 : ([ `der ], [ `pem ]) DSAKeyPairOptions.t) ->
          fun
            ~callback:(x1356 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1352 with | `dsa -> Ojs.string_to_js "dsa"));(
                   DSAKeyPairOptions.t_to_js
                     (fun (x1354 : [ `der ]) ->
                        match x1354 with | `der -> Ojs.string_to_js "der")
                     (fun (x1355 : [ `pem ]) ->
                        match x1355 with | `pem -> Ojs.string_to_js "pem")
                     x1353);(Ojs.fun_to_js 3
                               (fun (x1357 : Ojs.t) ->
                                  fun (x1359 : Ojs.t) ->
                                    fun (x1360 : Ojs.t) ->
                                      x1356
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1357)
                                        ~public_key:(Buffer.t_of_js x1359)
                                        ~private_key:(Ojs.string_of_js x1360)))|])
    let (generate_key_pair :
      type_:[ `dsa ] ->
        options:([ `der ], [ `der ]) DSAKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1361 : [ `dsa ]) ->
        fun ~options:(x1362 : ([ `der ], [ `der ]) DSAKeyPairOptions.t) ->
          fun
            ~callback:(x1365 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1361 with | `dsa -> Ojs.string_to_js "dsa"));(
                   DSAKeyPairOptions.t_to_js
                     (fun (x1363 : [ `der ]) ->
                        match x1363 with | `der -> Ojs.string_to_js "der")
                     (fun (x1364 : [ `der ]) ->
                        match x1364 with | `der -> Ojs.string_to_js "der")
                     x1362);(Ojs.fun_to_js 3
                               (fun (x1366 : Ojs.t) ->
                                  fun (x1368 : Ojs.t) ->
                                    fun (x1369 : Ojs.t) ->
                                      x1365
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1366)
                                        ~public_key:(Buffer.t_of_js x1368)
                                        ~private_key:(Buffer.t_of_js x1369)))|])
    let (generate_key_pair :
      type_:[ `dsa ] ->
        options:DSAKeyPairKeyObjectOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1370 : [ `dsa ]) ->
        fun ~options:(x1371 : DSAKeyPairKeyObjectOptions.t) ->
          fun
            ~callback:(x1372 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1370 with | `dsa -> Ojs.string_to_js "dsa"));(
                   DSAKeyPairKeyObjectOptions.t_to_js x1371);(Ojs.fun_to_js 3
                                                                (fun
                                                                   (x1373 :
                                                                    Ojs.t)
                                                                   ->
                                                                   fun
                                                                    (x1375 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1376 :
                                                                    Ojs.t) ->
                                                                    x1372
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x1373)
                                                                    ~public_key:(
                                                                    KeyObject.t_of_js
                                                                    x1375)
                                                                    ~private_key:(
                                                                    KeyObject.t_of_js
                                                                    x1376)))|])
    let (generate_key_pair :
      type_:[ `ec ] ->
        options:([ `pem ], [ `pem ]) ECKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1377 : [ `ec ]) ->
        fun ~options:(x1378 : ([ `pem ], [ `pem ]) ECKeyPairOptions.t) ->
          fun
            ~callback:(x1381 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1377 with | `ec -> Ojs.string_to_js "ec"));(
                   ECKeyPairOptions.t_to_js
                     (fun (x1379 : [ `pem ]) ->
                        match x1379 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1380 : [ `pem ]) ->
                        match x1380 with | `pem -> Ojs.string_to_js "pem")
                     x1378);(Ojs.fun_to_js 3
                               (fun (x1382 : Ojs.t) ->
                                  fun (x1384 : Ojs.t) ->
                                    fun (x1385 : Ojs.t) ->
                                      x1381
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1382)
                                        ~public_key:(Ojs.string_of_js x1384)
                                        ~private_key:(Ojs.string_of_js x1385)))|])
    let (generate_key_pair :
      type_:[ `ec ] ->
        options:([ `pem ], [ `der ]) ECKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1386 : [ `ec ]) ->
        fun ~options:(x1387 : ([ `pem ], [ `der ]) ECKeyPairOptions.t) ->
          fun
            ~callback:(x1390 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1386 with | `ec -> Ojs.string_to_js "ec"));(
                   ECKeyPairOptions.t_to_js
                     (fun (x1388 : [ `pem ]) ->
                        match x1388 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1389 : [ `der ]) ->
                        match x1389 with | `der -> Ojs.string_to_js "der")
                     x1387);(Ojs.fun_to_js 3
                               (fun (x1391 : Ojs.t) ->
                                  fun (x1393 : Ojs.t) ->
                                    fun (x1394 : Ojs.t) ->
                                      x1390
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1391)
                                        ~public_key:(Ojs.string_of_js x1393)
                                        ~private_key:(Buffer.t_of_js x1394)))|])
    let (generate_key_pair :
      type_:[ `ec ] ->
        options:([ `der ], [ `pem ]) ECKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1395 : [ `ec ]) ->
        fun ~options:(x1396 : ([ `der ], [ `pem ]) ECKeyPairOptions.t) ->
          fun
            ~callback:(x1399 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1395 with | `ec -> Ojs.string_to_js "ec"));(
                   ECKeyPairOptions.t_to_js
                     (fun (x1397 : [ `der ]) ->
                        match x1397 with | `der -> Ojs.string_to_js "der")
                     (fun (x1398 : [ `pem ]) ->
                        match x1398 with | `pem -> Ojs.string_to_js "pem")
                     x1396);(Ojs.fun_to_js 3
                               (fun (x1400 : Ojs.t) ->
                                  fun (x1402 : Ojs.t) ->
                                    fun (x1403 : Ojs.t) ->
                                      x1399
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1400)
                                        ~public_key:(Buffer.t_of_js x1402)
                                        ~private_key:(Ojs.string_of_js x1403)))|])
    let (generate_key_pair :
      type_:[ `ec ] ->
        options:([ `der ], [ `der ]) ECKeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1404 : [ `ec ]) ->
        fun ~options:(x1405 : ([ `der ], [ `der ]) ECKeyPairOptions.t) ->
          fun
            ~callback:(x1408 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1404 with | `ec -> Ojs.string_to_js "ec"));(
                   ECKeyPairOptions.t_to_js
                     (fun (x1406 : [ `der ]) ->
                        match x1406 with | `der -> Ojs.string_to_js "der")
                     (fun (x1407 : [ `der ]) ->
                        match x1407 with | `der -> Ojs.string_to_js "der")
                     x1405);(Ojs.fun_to_js 3
                               (fun (x1409 : Ojs.t) ->
                                  fun (x1411 : Ojs.t) ->
                                    fun (x1412 : Ojs.t) ->
                                      x1408
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1409)
                                        ~public_key:(Buffer.t_of_js x1411)
                                        ~private_key:(Buffer.t_of_js x1412)))|])
    let (generate_key_pair :
      type_:[ `ec ] ->
        options:ECKeyPairKeyObjectOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1413 : [ `ec ]) ->
        fun ~options:(x1414 : ECKeyPairKeyObjectOptions.t) ->
          fun
            ~callback:(x1415 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1413 with | `ec -> Ojs.string_to_js "ec"));(
                   ECKeyPairKeyObjectOptions.t_to_js x1414);(Ojs.fun_to_js 3
                                                               (fun
                                                                  (x1416 :
                                                                    Ojs.t)
                                                                  ->
                                                                  fun
                                                                    (x1418 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1419 :
                                                                    Ojs.t) ->
                                                                    x1415
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x1416)
                                                                    ~public_key:(
                                                                    KeyObject.t_of_js
                                                                    x1418)
                                                                    ~private_key:(
                                                                    KeyObject.t_of_js
                                                                    x1419)))|])
    let (generate_key_pair :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `pem ]) ED25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1420 : [ `ed25519 ]) ->
        fun ~options:(x1421 : ([ `pem ], [ `pem ]) ED25519KeyPairOptions.t)
          ->
          fun
            ~callback:(x1424 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1420 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1422 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1422
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1423 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1423
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1421);(
                   Ojs.fun_to_js 3
                     (fun (x1425 : Ojs.t) ->
                        fun (x1427 : Ojs.t) ->
                          fun (x1428 : Ojs.t) ->
                            x1424 ~err:(or_null_of_js Error.t_of_js x1425)
                              ~public_key:(Ojs.string_of_js x1427)
                              ~private_key:(Ojs.string_of_js x1428)))|])
    let (generate_key_pair :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `der ]) ED25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1429 : [ `ed25519 ]) ->
        fun ~options:(x1430 : ([ `pem ], [ `der ]) ED25519KeyPairOptions.t)
          ->
          fun
            ~callback:(x1433 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1429 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1431 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1431
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1432 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1432
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1430);(
                   Ojs.fun_to_js 3
                     (fun (x1434 : Ojs.t) ->
                        fun (x1436 : Ojs.t) ->
                          fun (x1437 : Ojs.t) ->
                            x1433 ~err:(or_null_of_js Error.t_of_js x1434)
                              ~public_key:(Ojs.string_of_js x1436)
                              ~private_key:(Buffer.t_of_js x1437)))|])
    let (generate_key_pair :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `pem ]) ED25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1438 : [ `ed25519 ]) ->
        fun ~options:(x1439 : ([ `der ], [ `pem ]) ED25519KeyPairOptions.t)
          ->
          fun
            ~callback:(x1442 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1438 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1440 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1440
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1441 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1441
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1439);(
                   Ojs.fun_to_js 3
                     (fun (x1443 : Ojs.t) ->
                        fun (x1445 : Ojs.t) ->
                          fun (x1446 : Ojs.t) ->
                            x1442 ~err:(or_null_of_js Error.t_of_js x1443)
                              ~public_key:(Buffer.t_of_js x1445)
                              ~private_key:(Ojs.string_of_js x1446)))|])
    let (generate_key_pair :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `der ]) ED25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1447 : [ `ed25519 ]) ->
        fun ~options:(x1448 : ([ `der ], [ `der ]) ED25519KeyPairOptions.t)
          ->
          fun
            ~callback:(x1451 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1447 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1449 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1449
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1450 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1450
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1448);(
                   Ojs.fun_to_js 3
                     (fun (x1452 : Ojs.t) ->
                        fun (x1454 : Ojs.t) ->
                          fun (x1455 : Ojs.t) ->
                            x1451 ~err:(or_null_of_js Error.t_of_js x1452)
                              ~public_key:(Buffer.t_of_js x1454)
                              ~private_key:(Buffer.t_of_js x1455)))|])
    let (generate_key_pair :
      type_:[ `ed25519 ] ->
        options:ED25519KeyPairKeyObjectOptions.t or_undefined ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1456 : [ `ed25519 ]) ->
        fun ~options:(x1457 : ED25519KeyPairKeyObjectOptions.t or_undefined)
          ->
          fun
            ~callback:(x1459 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1456 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(or_undefined_to_js
                                                                   ED25519KeyPairKeyObjectOptions.t_to_js
                                                                   x1457);(
                   Ojs.fun_to_js 3
                     (fun (x1460 : Ojs.t) ->
                        fun (x1462 : Ojs.t) ->
                          fun (x1463 : Ojs.t) ->
                            x1459 ~err:(or_null_of_js Error.t_of_js x1460)
                              ~public_key:(KeyObject.t_of_js x1462)
                              ~private_key:(KeyObject.t_of_js x1463)))|])
    let (generate_key_pair :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `pem ]) ED448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1464 : [ `ed448 ]) ->
        fun ~options:(x1465 : ([ `pem ], [ `pem ]) ED448KeyPairOptions.t) ->
          fun
            ~callback:(x1468 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1464 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   ED448KeyPairOptions.t_to_js
                     (fun (x1466 : [ `pem ]) ->
                        match x1466 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1467 : [ `pem ]) ->
                        match x1467 with | `pem -> Ojs.string_to_js "pem")
                     x1465);(Ojs.fun_to_js 3
                               (fun (x1469 : Ojs.t) ->
                                  fun (x1471 : Ojs.t) ->
                                    fun (x1472 : Ojs.t) ->
                                      x1468
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1469)
                                        ~public_key:(Ojs.string_of_js x1471)
                                        ~private_key:(Ojs.string_of_js x1472)))|])
    let (generate_key_pair :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `der ]) ED448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1473 : [ `ed448 ]) ->
        fun ~options:(x1474 : ([ `pem ], [ `der ]) ED448KeyPairOptions.t) ->
          fun
            ~callback:(x1477 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1473 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   ED448KeyPairOptions.t_to_js
                     (fun (x1475 : [ `pem ]) ->
                        match x1475 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1476 : [ `der ]) ->
                        match x1476 with | `der -> Ojs.string_to_js "der")
                     x1474);(Ojs.fun_to_js 3
                               (fun (x1478 : Ojs.t) ->
                                  fun (x1480 : Ojs.t) ->
                                    fun (x1481 : Ojs.t) ->
                                      x1477
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1478)
                                        ~public_key:(Ojs.string_of_js x1480)
                                        ~private_key:(Buffer.t_of_js x1481)))|])
    let (generate_key_pair :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `pem ]) ED448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1482 : [ `ed448 ]) ->
        fun ~options:(x1483 : ([ `der ], [ `pem ]) ED448KeyPairOptions.t) ->
          fun
            ~callback:(x1486 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1482 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   ED448KeyPairOptions.t_to_js
                     (fun (x1484 : [ `der ]) ->
                        match x1484 with | `der -> Ojs.string_to_js "der")
                     (fun (x1485 : [ `pem ]) ->
                        match x1485 with | `pem -> Ojs.string_to_js "pem")
                     x1483);(Ojs.fun_to_js 3
                               (fun (x1487 : Ojs.t) ->
                                  fun (x1489 : Ojs.t) ->
                                    fun (x1490 : Ojs.t) ->
                                      x1486
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1487)
                                        ~public_key:(Buffer.t_of_js x1489)
                                        ~private_key:(Ojs.string_of_js x1490)))|])
    let (generate_key_pair :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `der ]) ED448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1491 : [ `ed448 ]) ->
        fun ~options:(x1492 : ([ `der ], [ `der ]) ED448KeyPairOptions.t) ->
          fun
            ~callback:(x1495 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1491 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   ED448KeyPairOptions.t_to_js
                     (fun (x1493 : [ `der ]) ->
                        match x1493 with | `der -> Ojs.string_to_js "der")
                     (fun (x1494 : [ `der ]) ->
                        match x1494 with | `der -> Ojs.string_to_js "der")
                     x1492);(Ojs.fun_to_js 3
                               (fun (x1496 : Ojs.t) ->
                                  fun (x1498 : Ojs.t) ->
                                    fun (x1499 : Ojs.t) ->
                                      x1495
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1496)
                                        ~public_key:(Buffer.t_of_js x1498)
                                        ~private_key:(Buffer.t_of_js x1499)))|])
    let (generate_key_pair :
      type_:[ `ed448 ] ->
        options:ED448KeyPairKeyObjectOptions.t or_undefined ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1500 : [ `ed448 ]) ->
        fun ~options:(x1501 : ED448KeyPairKeyObjectOptions.t or_undefined) ->
          fun
            ~callback:(x1503 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1500 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   or_undefined_to_js ED448KeyPairKeyObjectOptions.t_to_js
                     x1501);(Ojs.fun_to_js 3
                               (fun (x1504 : Ojs.t) ->
                                  fun (x1506 : Ojs.t) ->
                                    fun (x1507 : Ojs.t) ->
                                      x1503
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1504)
                                        ~public_key:(KeyObject.t_of_js x1506)
                                        ~private_key:(KeyObject.t_of_js x1507)))|])
    let (generate_key_pair :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `pem ]) X25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1508 : [ `x25519 ]) ->
        fun ~options:(x1509 : ([ `pem ], [ `pem ]) X25519KeyPairOptions.t) ->
          fun
            ~callback:(x1512 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1508 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   X25519KeyPairOptions.t_to_js
                     (fun (x1510 : [ `pem ]) ->
                        match x1510 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1511 : [ `pem ]) ->
                        match x1511 with | `pem -> Ojs.string_to_js "pem")
                     x1509);(Ojs.fun_to_js 3
                               (fun (x1513 : Ojs.t) ->
                                  fun (x1515 : Ojs.t) ->
                                    fun (x1516 : Ojs.t) ->
                                      x1512
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1513)
                                        ~public_key:(Ojs.string_of_js x1515)
                                        ~private_key:(Ojs.string_of_js x1516)))|])
    let (generate_key_pair :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `der ]) X25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1517 : [ `x25519 ]) ->
        fun ~options:(x1518 : ([ `pem ], [ `der ]) X25519KeyPairOptions.t) ->
          fun
            ~callback:(x1521 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1517 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   X25519KeyPairOptions.t_to_js
                     (fun (x1519 : [ `pem ]) ->
                        match x1519 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1520 : [ `der ]) ->
                        match x1520 with | `der -> Ojs.string_to_js "der")
                     x1518);(Ojs.fun_to_js 3
                               (fun (x1522 : Ojs.t) ->
                                  fun (x1524 : Ojs.t) ->
                                    fun (x1525 : Ojs.t) ->
                                      x1521
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1522)
                                        ~public_key:(Ojs.string_of_js x1524)
                                        ~private_key:(Buffer.t_of_js x1525)))|])
    let (generate_key_pair :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `pem ]) X25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1526 : [ `x25519 ]) ->
        fun ~options:(x1527 : ([ `der ], [ `pem ]) X25519KeyPairOptions.t) ->
          fun
            ~callback:(x1530 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1526 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   X25519KeyPairOptions.t_to_js
                     (fun (x1528 : [ `der ]) ->
                        match x1528 with | `der -> Ojs.string_to_js "der")
                     (fun (x1529 : [ `pem ]) ->
                        match x1529 with | `pem -> Ojs.string_to_js "pem")
                     x1527);(Ojs.fun_to_js 3
                               (fun (x1531 : Ojs.t) ->
                                  fun (x1533 : Ojs.t) ->
                                    fun (x1534 : Ojs.t) ->
                                      x1530
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1531)
                                        ~public_key:(Buffer.t_of_js x1533)
                                        ~private_key:(Ojs.string_of_js x1534)))|])
    let (generate_key_pair :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `der ]) X25519KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1535 : [ `x25519 ]) ->
        fun ~options:(x1536 : ([ `der ], [ `der ]) X25519KeyPairOptions.t) ->
          fun
            ~callback:(x1539 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1535 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   X25519KeyPairOptions.t_to_js
                     (fun (x1537 : [ `der ]) ->
                        match x1537 with | `der -> Ojs.string_to_js "der")
                     (fun (x1538 : [ `der ]) ->
                        match x1538 with | `der -> Ojs.string_to_js "der")
                     x1536);(Ojs.fun_to_js 3
                               (fun (x1540 : Ojs.t) ->
                                  fun (x1542 : Ojs.t) ->
                                    fun (x1543 : Ojs.t) ->
                                      x1539
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1540)
                                        ~public_key:(Buffer.t_of_js x1542)
                                        ~private_key:(Buffer.t_of_js x1543)))|])
    let (generate_key_pair :
      type_:[ `x25519 ] ->
        options:X25519KeyPairKeyObjectOptions.t or_undefined ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1544 : [ `x25519 ]) ->
        fun ~options:(x1545 : X25519KeyPairKeyObjectOptions.t or_undefined)
          ->
          fun
            ~callback:(x1547 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1544 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   or_undefined_to_js X25519KeyPairKeyObjectOptions.t_to_js
                     x1545);(Ojs.fun_to_js 3
                               (fun (x1548 : Ojs.t) ->
                                  fun (x1550 : Ojs.t) ->
                                    fun (x1551 : Ojs.t) ->
                                      x1547
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1548)
                                        ~public_key:(KeyObject.t_of_js x1550)
                                        ~private_key:(KeyObject.t_of_js x1551)))|])
    let (generate_key_pair :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `pem ]) X448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1552 : [ `x448 ]) ->
        fun ~options:(x1553 : ([ `pem ], [ `pem ]) X448KeyPairOptions.t) ->
          fun
            ~callback:(x1556 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1552 with | `x448 -> Ojs.string_to_js "x448"));(
                   X448KeyPairOptions.t_to_js
                     (fun (x1554 : [ `pem ]) ->
                        match x1554 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1555 : [ `pem ]) ->
                        match x1555 with | `pem -> Ojs.string_to_js "pem")
                     x1553);(Ojs.fun_to_js 3
                               (fun (x1557 : Ojs.t) ->
                                  fun (x1559 : Ojs.t) ->
                                    fun (x1560 : Ojs.t) ->
                                      x1556
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1557)
                                        ~public_key:(Ojs.string_of_js x1559)
                                        ~private_key:(Ojs.string_of_js x1560)))|])
    let (generate_key_pair :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `der ]) X448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:string -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1561 : [ `x448 ]) ->
        fun ~options:(x1562 : ([ `pem ], [ `der ]) X448KeyPairOptions.t) ->
          fun
            ~callback:(x1565 :
                        err:Error.t or_null ->
                          public_key:string -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1561 with | `x448 -> Ojs.string_to_js "x448"));(
                   X448KeyPairOptions.t_to_js
                     (fun (x1563 : [ `pem ]) ->
                        match x1563 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1564 : [ `der ]) ->
                        match x1564 with | `der -> Ojs.string_to_js "der")
                     x1562);(Ojs.fun_to_js 3
                               (fun (x1566 : Ojs.t) ->
                                  fun (x1568 : Ojs.t) ->
                                    fun (x1569 : Ojs.t) ->
                                      x1565
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1566)
                                        ~public_key:(Ojs.string_of_js x1568)
                                        ~private_key:(Buffer.t_of_js x1569)))|])
    let (generate_key_pair :
      type_:[ `x448 ] ->
        options:([ `der ], [ `pem ]) X448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:string -> unit)
            -> unit)
      =
      fun ~type_:(x1570 : [ `x448 ]) ->
        fun ~options:(x1571 : ([ `der ], [ `pem ]) X448KeyPairOptions.t) ->
          fun
            ~callback:(x1574 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1570 with | `x448 -> Ojs.string_to_js "x448"));(
                   X448KeyPairOptions.t_to_js
                     (fun (x1572 : [ `der ]) ->
                        match x1572 with | `der -> Ojs.string_to_js "der")
                     (fun (x1573 : [ `pem ]) ->
                        match x1573 with | `pem -> Ojs.string_to_js "pem")
                     x1571);(Ojs.fun_to_js 3
                               (fun (x1575 : Ojs.t) ->
                                  fun (x1577 : Ojs.t) ->
                                    fun (x1578 : Ojs.t) ->
                                      x1574
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1575)
                                        ~public_key:(Buffer.t_of_js x1577)
                                        ~private_key:(Ojs.string_of_js x1578)))|])
    let (generate_key_pair :
      type_:[ `x448 ] ->
        options:([ `der ], [ `der ]) X448KeyPairOptions.t ->
          callback:(err:Error.t or_null ->
                      public_key:Buffer.t -> private_key:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1579 : [ `x448 ]) ->
        fun ~options:(x1580 : ([ `der ], [ `der ]) X448KeyPairOptions.t) ->
          fun
            ~callback:(x1583 :
                        err:Error.t or_null ->
                          public_key:Buffer.t -> private_key:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1579 with | `x448 -> Ojs.string_to_js "x448"));(
                   X448KeyPairOptions.t_to_js
                     (fun (x1581 : [ `der ]) ->
                        match x1581 with | `der -> Ojs.string_to_js "der")
                     (fun (x1582 : [ `der ]) ->
                        match x1582 with | `der -> Ojs.string_to_js "der")
                     x1580);(Ojs.fun_to_js 3
                               (fun (x1584 : Ojs.t) ->
                                  fun (x1586 : Ojs.t) ->
                                    fun (x1587 : Ojs.t) ->
                                      x1583
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1584)
                                        ~public_key:(Buffer.t_of_js x1586)
                                        ~private_key:(Buffer.t_of_js x1587)))|])
    let (generate_key_pair :
      type_:[ `x448 ] ->
        options:X448KeyPairKeyObjectOptions.t or_undefined ->
          callback:(err:Error.t or_null ->
                      public_key:KeyObject.t ->
                        private_key:KeyObject.t -> unit)
            -> unit)
      =
      fun ~type_:(x1588 : [ `x448 ]) ->
        fun ~options:(x1589 : X448KeyPairKeyObjectOptions.t or_undefined) ->
          fun
            ~callback:(x1591 :
                        err:Error.t or_null ->
                          public_key:KeyObject.t ->
                            private_key:KeyObject.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1588 with | `x448 -> Ojs.string_to_js "x448"));(
                   or_undefined_to_js X448KeyPairKeyObjectOptions.t_to_js
                     x1589);(Ojs.fun_to_js 3
                               (fun (x1592 : Ojs.t) ->
                                  fun (x1594 : Ojs.t) ->
                                    fun (x1595 : Ojs.t) ->
                                      x1591
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1592)
                                        ~public_key:(KeyObject.t_of_js x1594)
                                        ~private_key:(KeyObject.t_of_js x1595)))|])
    module GenerateKeyPair =
      struct
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `pem ], [ `pem ]) RSAKeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1596 : [ `rsa ]) ->
            fun ~options:(x1597 : ([ `pem ], [ `pem ]) RSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1596 with | `rsa -> Ojs.string_to_js "rsa"));(
                     RSAKeyPairOptions.t_to_js
                       (fun (x1598 : [ `pem ]) ->
                          match x1598 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1599 : [ `pem ]) ->
                          match x1599 with | `pem -> Ojs.string_to_js "pem")
                       x1597)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `pem ], [ `der ]) RSAKeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1601 : [ `rsa ]) ->
            fun ~options:(x1602 : ([ `pem ], [ `der ]) RSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1601 with | `rsa -> Ojs.string_to_js "rsa"));(
                     RSAKeyPairOptions.t_to_js
                       (fun (x1603 : [ `pem ]) ->
                          match x1603 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1604 : [ `der ]) ->
                          match x1604 with | `der -> Ojs.string_to_js "der")
                       x1602)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `der ], [ `pem ]) RSAKeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1606 : [ `rsa ]) ->
            fun ~options:(x1607 : ([ `der ], [ `pem ]) RSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1606 with | `rsa -> Ojs.string_to_js "rsa"));(
                     RSAKeyPairOptions.t_to_js
                       (fun (x1608 : [ `der ]) ->
                          match x1608 with | `der -> Ojs.string_to_js "der")
                       (fun (x1609 : [ `pem ]) ->
                          match x1609 with | `pem -> Ojs.string_to_js "pem")
                       x1607)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `der ], [ `der ]) RSAKeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1611 : [ `rsa ]) ->
            fun ~options:(x1612 : ([ `der ], [ `der ]) RSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1611 with | `rsa -> Ojs.string_to_js "rsa"));(
                     RSAKeyPairOptions.t_to_js
                       (fun (x1613 : [ `der ]) ->
                          match x1613 with | `der -> Ojs.string_to_js "der")
                       (fun (x1614 : [ `der ]) ->
                          match x1614 with | `der -> Ojs.string_to_js "der")
                       x1612)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:RSAKeyPairKeyObjectOptions.t ->
              KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1616 : [ `rsa ]) ->
            fun ~options:(x1617 : RSAKeyPairKeyObjectOptions.t) ->
              Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1616 with | `rsa -> Ojs.string_to_js "rsa"));(
                     RSAKeyPairKeyObjectOptions.t_to_js x1617)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `pem ], [ `pem ]) DSAKeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1619 : [ `dsa ]) ->
            fun ~options:(x1620 : ([ `pem ], [ `pem ]) DSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1619 with | `dsa -> Ojs.string_to_js "dsa"));(
                     DSAKeyPairOptions.t_to_js
                       (fun (x1621 : [ `pem ]) ->
                          match x1621 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1622 : [ `pem ]) ->
                          match x1622 with | `pem -> Ojs.string_to_js "pem")
                       x1620)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `pem ], [ `der ]) DSAKeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1624 : [ `dsa ]) ->
            fun ~options:(x1625 : ([ `pem ], [ `der ]) DSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1624 with | `dsa -> Ojs.string_to_js "dsa"));(
                     DSAKeyPairOptions.t_to_js
                       (fun (x1626 : [ `pem ]) ->
                          match x1626 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1627 : [ `der ]) ->
                          match x1627 with | `der -> Ojs.string_to_js "der")
                       x1625)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `der ], [ `pem ]) DSAKeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1629 : [ `dsa ]) ->
            fun ~options:(x1630 : ([ `der ], [ `pem ]) DSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1629 with | `dsa -> Ojs.string_to_js "dsa"));(
                     DSAKeyPairOptions.t_to_js
                       (fun (x1631 : [ `der ]) ->
                          match x1631 with | `der -> Ojs.string_to_js "der")
                       (fun (x1632 : [ `pem ]) ->
                          match x1632 with | `pem -> Ojs.string_to_js "pem")
                       x1630)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `der ], [ `der ]) DSAKeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1634 : [ `dsa ]) ->
            fun ~options:(x1635 : ([ `der ], [ `der ]) DSAKeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1634 with | `dsa -> Ojs.string_to_js "dsa"));(
                     DSAKeyPairOptions.t_to_js
                       (fun (x1636 : [ `der ]) ->
                          match x1636 with | `der -> Ojs.string_to_js "der")
                       (fun (x1637 : [ `der ]) ->
                          match x1637 with | `der -> Ojs.string_to_js "der")
                       x1635)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:DSAKeyPairKeyObjectOptions.t ->
              KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1639 : [ `dsa ]) ->
            fun ~options:(x1640 : DSAKeyPairKeyObjectOptions.t) ->
              Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1639 with | `dsa -> Ojs.string_to_js "dsa"));(
                     DSAKeyPairKeyObjectOptions.t_to_js x1640)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `pem ], [ `pem ]) ECKeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1642 : [ `ec ]) ->
            fun ~options:(x1643 : ([ `pem ], [ `pem ]) ECKeyPairOptions.t) ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1642 with | `ec -> Ojs.string_to_js "ec"));(
                     ECKeyPairOptions.t_to_js
                       (fun (x1644 : [ `pem ]) ->
                          match x1644 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1645 : [ `pem ]) ->
                          match x1645 with | `pem -> Ojs.string_to_js "pem")
                       x1643)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `pem ], [ `der ]) ECKeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1647 : [ `ec ]) ->
            fun ~options:(x1648 : ([ `pem ], [ `der ]) ECKeyPairOptions.t) ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1647 with | `ec -> Ojs.string_to_js "ec"));(
                     ECKeyPairOptions.t_to_js
                       (fun (x1649 : [ `pem ]) ->
                          match x1649 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1650 : [ `der ]) ->
                          match x1650 with | `der -> Ojs.string_to_js "der")
                       x1648)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `der ], [ `pem ]) ECKeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1652 : [ `ec ]) ->
            fun ~options:(x1653 : ([ `der ], [ `pem ]) ECKeyPairOptions.t) ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1652 with | `ec -> Ojs.string_to_js "ec"));(
                     ECKeyPairOptions.t_to_js
                       (fun (x1654 : [ `der ]) ->
                          match x1654 with | `der -> Ojs.string_to_js "der")
                       (fun (x1655 : [ `pem ]) ->
                          match x1655 with | `pem -> Ojs.string_to_js "pem")
                       x1653)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `der ], [ `der ]) ECKeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1657 : [ `ec ]) ->
            fun ~options:(x1658 : ([ `der ], [ `der ]) ECKeyPairOptions.t) ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1657 with | `ec -> Ojs.string_to_js "ec"));(
                     ECKeyPairOptions.t_to_js
                       (fun (x1659 : [ `der ]) ->
                          match x1659 with | `der -> Ojs.string_to_js "der")
                       (fun (x1660 : [ `der ]) ->
                          match x1660 with | `der -> Ojs.string_to_js "der")
                       x1658)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:ECKeyPairKeyObjectOptions.t ->
              KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1662 : [ `ec ]) ->
            fun ~options:(x1663 : ECKeyPairKeyObjectOptions.t) ->
              Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1662 with | `ec -> Ojs.string_to_js "ec"));(
                     ECKeyPairKeyObjectOptions.t_to_js x1663)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `pem ], [ `pem ]) ED25519KeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1665 : [ `ed25519 ]) ->
            fun
              ~options:(x1666 : ([ `pem ], [ `pem ]) ED25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1665 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                    (fun
                                                                    (x1667 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1667
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    (fun
                                                                    (x1668 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1668
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    x1666)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `pem ], [ `der ]) ED25519KeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1670 : [ `ed25519 ]) ->
            fun
              ~options:(x1671 : ([ `pem ], [ `der ]) ED25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1670 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                    (fun
                                                                    (x1672 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1672
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    (fun
                                                                    (x1673 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1673
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    x1671)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `der ], [ `pem ]) ED25519KeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1675 : [ `ed25519 ]) ->
            fun
              ~options:(x1676 : ([ `der ], [ `pem ]) ED25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1675 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                    (fun
                                                                    (x1677 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1677
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    (fun
                                                                    (x1678 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1678
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    x1676)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `der ], [ `der ]) ED25519KeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1680 : [ `ed25519 ]) ->
            fun
              ~options:(x1681 : ([ `der ], [ `der ]) ED25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1680 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(ED25519KeyPairOptions.t_to_js
                                                                    (fun
                                                                    (x1682 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1682
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    (fun
                                                                    (x1683 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1683
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    x1681)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            ?options:ED25519KeyPairKeyObjectOptions.t ->
              unit -> KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1685 : [ `ed25519 ]) ->
            fun ?options:(x1686 : ED25519KeyPairKeyObjectOptions.t option) ->
              fun () ->
                Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                  (let x1689 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1689 "__promisify__")
                     "apply"
                     [|x1689;((let x1687 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1687 "push"
                                    [|((match x1685 with
                                        | `ed25519 ->
                                            Ojs.string_to_js "ed25519"))|]);
                               (match x1686 with
                                | Some x1688 ->
                                    ignore
                                      (Ojs.call x1687 "push"
                                         [|(ED25519KeyPairKeyObjectOptions.t_to_js
                                              x1688)|])
                                | None -> ());
                               x1687))|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `pem ], [ `pem ]) ED448KeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1691 : [ `ed448 ]) ->
            fun ~options:(x1692 : ([ `pem ], [ `pem ]) ED448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1691 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     ED448KeyPairOptions.t_to_js
                       (fun (x1693 : [ `pem ]) ->
                          match x1693 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1694 : [ `pem ]) ->
                          match x1694 with | `pem -> Ojs.string_to_js "pem")
                       x1692)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `pem ], [ `der ]) ED448KeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1696 : [ `ed448 ]) ->
            fun ~options:(x1697 : ([ `pem ], [ `der ]) ED448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1696 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     ED448KeyPairOptions.t_to_js
                       (fun (x1698 : [ `pem ]) ->
                          match x1698 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1699 : [ `der ]) ->
                          match x1699 with | `der -> Ojs.string_to_js "der")
                       x1697)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `der ], [ `pem ]) ED448KeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1701 : [ `ed448 ]) ->
            fun ~options:(x1702 : ([ `der ], [ `pem ]) ED448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1701 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     ED448KeyPairOptions.t_to_js
                       (fun (x1703 : [ `der ]) ->
                          match x1703 with | `der -> Ojs.string_to_js "der")
                       (fun (x1704 : [ `pem ]) ->
                          match x1704 with | `pem -> Ojs.string_to_js "pem")
                       x1702)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `der ], [ `der ]) ED448KeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1706 : [ `ed448 ]) ->
            fun ~options:(x1707 : ([ `der ], [ `der ]) ED448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1706 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     ED448KeyPairOptions.t_to_js
                       (fun (x1708 : [ `der ]) ->
                          match x1708 with | `der -> Ojs.string_to_js "der")
                       (fun (x1709 : [ `der ]) ->
                          match x1709 with | `der -> Ojs.string_to_js "der")
                       x1707)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            ?options:ED448KeyPairKeyObjectOptions.t ->
              unit -> KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1711 : [ `ed448 ]) ->
            fun ?options:(x1712 : ED448KeyPairKeyObjectOptions.t option) ->
              fun () ->
                Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                  (let x1715 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1715 "__promisify__")
                     "apply"
                     [|x1715;((let x1713 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1713 "push"
                                    [|((match x1711 with
                                        | `ed448 -> Ojs.string_to_js "ed448"))|]);
                               (match x1712 with
                                | Some x1714 ->
                                    ignore
                                      (Ojs.call x1713 "push"
                                         [|(ED448KeyPairKeyObjectOptions.t_to_js
                                              x1714)|])
                                | None -> ());
                               x1713))|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `pem ], [ `pem ]) X25519KeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1717 : [ `x25519 ]) ->
            fun
              ~options:(x1718 : ([ `pem ], [ `pem ]) X25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1717 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(X25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1719 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1719
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1720 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1720
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1718)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `pem ], [ `der ]) X25519KeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1722 : [ `x25519 ]) ->
            fun
              ~options:(x1723 : ([ `pem ], [ `der ]) X25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1722 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(X25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1724 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1724
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1725 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1725
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1723)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `der ], [ `pem ]) X25519KeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1727 : [ `x25519 ]) ->
            fun
              ~options:(x1728 : ([ `der ], [ `pem ]) X25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1727 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(X25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1729 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1729
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1730 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1730
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1728)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `der ], [ `der ]) X25519KeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1732 : [ `x25519 ]) ->
            fun
              ~options:(x1733 : ([ `der ], [ `der ]) X25519KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1732 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(X25519KeyPairOptions.t_to_js
                                                                   (fun
                                                                    (x1734 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1734
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1735 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1735
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1733)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            ?options:X25519KeyPairKeyObjectOptions.t ->
              unit -> KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1737 : [ `x25519 ]) ->
            fun ?options:(x1738 : X25519KeyPairKeyObjectOptions.t option) ->
              fun () ->
                Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                  (let x1741 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1741 "__promisify__")
                     "apply"
                     [|x1741;((let x1739 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1739 "push"
                                    [|((match x1737 with
                                        | `x25519 ->
                                            Ojs.string_to_js "x25519"))|]);
                               (match x1738 with
                                | Some x1740 ->
                                    ignore
                                      (Ojs.call x1739 "push"
                                         [|(X25519KeyPairKeyObjectOptions.t_to_js
                                              x1740)|])
                                | None -> ());
                               x1739))|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `pem ], [ `pem ]) X448KeyPairOptions.t ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1743 : [ `x448 ]) ->
            fun ~options:(x1744 : ([ `pem ], [ `pem ]) X448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1743 with | `x448 -> Ojs.string_to_js "x448"));(
                     X448KeyPairOptions.t_to_js
                       (fun (x1745 : [ `pem ]) ->
                          match x1745 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1746 : [ `pem ]) ->
                          match x1746 with | `pem -> Ojs.string_to_js "pem")
                       x1744)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `pem ], [ `der ]) X448KeyPairOptions.t ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1748 : [ `x448 ]) ->
            fun ~options:(x1749 : ([ `pem ], [ `der ]) X448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1748 with | `x448 -> Ojs.string_to_js "x448"));(
                     X448KeyPairOptions.t_to_js
                       (fun (x1750 : [ `pem ]) ->
                          match x1750 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1751 : [ `der ]) ->
                          match x1751 with | `der -> Ojs.string_to_js "der")
                       x1749)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `der ], [ `pem ]) X448KeyPairOptions.t ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1753 : [ `x448 ]) ->
            fun ~options:(x1754 : ([ `der ], [ `pem ]) X448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1753 with | `x448 -> Ojs.string_to_js "x448"));(
                     X448KeyPairOptions.t_to_js
                       (fun (x1755 : [ `der ]) ->
                          match x1755 with | `der -> Ojs.string_to_js "der")
                       (fun (x1756 : [ `pem ]) ->
                          match x1756 with | `pem -> Ojs.string_to_js "pem")
                       x1754)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `der ], [ `der ]) X448KeyPairOptions.t ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1758 : [ `x448 ]) ->
            fun ~options:(x1759 : ([ `der ], [ `der ]) X448KeyPairOptions.t)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1758 with | `x448 -> Ojs.string_to_js "x448"));(
                     X448KeyPairOptions.t_to_js
                       (fun (x1760 : [ `der ]) ->
                          match x1760 with | `der -> Ojs.string_to_js "der")
                       (fun (x1761 : [ `der ]) ->
                          match x1761 with | `der -> Ojs.string_to_js "der")
                       x1759)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            ?options:X448KeyPairKeyObjectOptions.t ->
              unit -> KeyPairKeyObjectResult.t Promise.t)
          =
          fun ~type_:(x1763 : [ `x448 ]) ->
            fun ?options:(x1764 : X448KeyPairKeyObjectOptions.t option) ->
              fun () ->
                Promise.t_of_js KeyPairKeyObjectResult.t_of_js
                  (let x1767 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1767 "__promisify__")
                     "apply"
                     [|x1767;((let x1765 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1765 "push"
                                    [|((match x1763 with
                                        | `x448 -> Ojs.string_to_js "x448"))|]);
                               (match x1764 with
                                | Some x1766 ->
                                    ignore
                                      (Ojs.call x1765 "push"
                                         [|(X448KeyPairKeyObjectOptions.t_to_js
                                              x1766)|])
                                | None -> ());
                               x1765))|])
      end
    let (sign :
      algorithm:string or_null_or_undefined ->
        data:ArrayBufferView.t ->
          key:([ `U_s11_der of SignKeyObjectInput.t 
               | `U_s18_ieee_p1363 of SignKeyObjectInput.t ],
            [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
            | `U_s22_pkcs8 of SignPrivateKeyInput.t 
            | `U_s23_private of KeyLike.t  | `U_s24_public of KeyLike.t 
            | `U_s26_sec1 of SignPrivateKeyInput.t 
            | `U_s27_secret of KeyLike.t ]) union2 -> Buffer.t)
      =
      fun ~algorithm:(x1769 : string or_null_or_undefined) ->
        fun ~data:(x1771 : ArrayBufferView.t) ->
          fun
            ~key:(x1772 :
                   ([ `U_s11_der of SignKeyObjectInput.t 
                    | `U_s18_ieee_p1363 of SignKeyObjectInput.t ],
                     [ `U_s21_pkcs1 of SignPrivateKeyInput.t 
                     | `U_s22_pkcs8 of SignPrivateKeyInput.t 
                     | `U_s23_private of KeyLike.t 
                     | `U_s24_public of KeyLike.t 
                     | `U_s26_sec1 of SignPrivateKeyInput.t 
                     | `U_s27_secret of KeyLike.t ]) union2)
            ->
            Buffer.t_of_js
              (Ojs.call Import.crypto "sign"
                 [|(or_null_or_undefined_to_js Ojs.string_to_js x1769);(
                   ArrayBufferView.t_to_js x1771);(union2_to_js
                                                     (fun
                                                        (x1773 :
                                                          [
                                                            `U_s11_der of
                                                              SignKeyObjectInput.t
                                                               | `U_s18_ieee_p1363
                                                                   of
                                                                   SignKeyObjectInput.t
                                                                   ])
                                                        ->
                                                        match x1773 with
                                                        | `U_s11_der x1774 ->
                                                            SignKeyObjectInput.t_to_js
                                                              x1774
                                                        | `U_s18_ieee_p1363
                                                            x1775 ->
                                                            SignKeyObjectInput.t_to_js
                                                              x1775)
                                                     (fun
                                                        (x1776 :
                                                          [
                                                            `U_s21_pkcs1 of
                                                              SignPrivateKeyInput.t
                                                               | `U_s22_pkcs8
                                                                   of
                                                                   SignPrivateKeyInput.t
                                                                    | 
                                                            `U_s23_private of
                                                              KeyLike.t 
                                                          | `U_s24_public of
                                                              KeyLike.t 
                                                          | `U_s26_sec1 of
                                                              SignPrivateKeyInput.t
                                                               | `U_s27_secret
                                                                   of
                                                                   KeyLike.t ])
                                                        ->
                                                        match x1776 with
                                                        | `U_s21_pkcs1 x1777
                                                            ->
                                                            SignPrivateKeyInput.t_to_js
                                                              x1777
                                                        | `U_s22_pkcs8 x1778
                                                            ->
                                                            SignPrivateKeyInput.t_to_js
                                                              x1778
                                                        | `U_s23_private
                                                            x1779 ->
                                                            KeyLike.t_to_js
                                                              x1779
                                                        | `U_s24_public x1780
                                                            ->
                                                            KeyLike.t_to_js
                                                              x1780
                                                        | `U_s26_sec1 x1781
                                                            ->
                                                            SignPrivateKeyInput.t_to_js
                                                              x1781
                                                        | `U_s27_secret x1782
                                                            ->
                                                            KeyLike.t_to_js
                                                              x1782) x1772)|])
    let (verify :
      algorithm:string or_null_or_undefined ->
        data:ArrayBufferView.t ->
          key:([ `U_s11_der of VerifyKeyObjectInput.t 
               | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ],
            [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
            | `U_s23_private of KeyLike.t  | `U_s24_public of KeyLike.t 
            | `U_s27_secret of KeyLike.t 
            | `U_s28_spki of VerifyPublicKeyInput.t ]) union2 ->
            signature:ArrayBufferView.t -> bool)
      =
      fun ~algorithm:(x1783 : string or_null_or_undefined) ->
        fun ~data:(x1785 : ArrayBufferView.t) ->
          fun
            ~key:(x1786 :
                   ([ `U_s11_der of VerifyKeyObjectInput.t 
                    | `U_s18_ieee_p1363 of VerifyKeyObjectInput.t ],
                     [ `U_s21_pkcs1 of VerifyPublicKeyInput.t 
                     | `U_s23_private of KeyLike.t 
                     | `U_s24_public of KeyLike.t 
                     | `U_s27_secret of KeyLike.t 
                     | `U_s28_spki of VerifyPublicKeyInput.t ]) union2)
            ->
            fun ~signature:(x1796 : ArrayBufferView.t) ->
              Ojs.bool_of_js
                (Ojs.call Import.crypto "verify"
                   [|(or_null_or_undefined_to_js Ojs.string_to_js x1783);(
                     ArrayBufferView.t_to_js x1785);(union2_to_js
                                                       (fun
                                                          (x1787 :
                                                            [
                                                              `U_s11_der of
                                                                VerifyKeyObjectInput.t
                                                                 | `U_s18_ieee_p1363
                                                                    of
                                                                    VerifyKeyObjectInput.t
                                                                    ])
                                                          ->
                                                          match x1787 with
                                                          | `U_s11_der x1788
                                                              ->
                                                              VerifyKeyObjectInput.t_to_js
                                                                x1788
                                                          | `U_s18_ieee_p1363
                                                              x1789 ->
                                                              VerifyKeyObjectInput.t_to_js
                                                                x1789)
                                                       (fun
                                                          (x1790 :
                                                            [
                                                              `U_s21_pkcs1 of
                                                                VerifyPublicKeyInput.t
                                                                 | `U_s23_private
                                                                    of
                                                                    KeyLike.t 
                                                            | `U_s24_public
                                                                of KeyLike.t 
                                                            | `U_s27_secret
                                                                of KeyLike.t 
                                                            | `U_s28_spki of
                                                                VerifyPublicKeyInput.t
                                                                ])
                                                          ->
                                                          match x1790 with
                                                          | `U_s21_pkcs1
                                                              x1791 ->
                                                              VerifyPublicKeyInput.t_to_js
                                                                x1791
                                                          | `U_s23_private
                                                              x1792 ->
                                                              KeyLike.t_to_js
                                                                x1792
                                                          | `U_s24_public
                                                              x1793 ->
                                                              KeyLike.t_to_js
                                                                x1793
                                                          | `U_s27_secret
                                                              x1794 ->
                                                              KeyLike.t_to_js
                                                                x1794
                                                          | `U_s28_spki x1795
                                                              ->
                                                              VerifyPublicKeyInput.t_to_js
                                                                x1795) x1786);(
                     ArrayBufferView.t_to_js x1796)|])
    module AnonymousInterface1 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1798 : Ojs.t) -> x1798
        and t_to_js : t -> Ojs.t = fun (x1797 : Ojs.t) -> x1797
        let (get_private_key : t -> KeyObject.t) =
          fun (x1799 : t) ->
            KeyObject.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1799) "privateKey")
        let (set_private_key : t -> KeyObject.t -> unit) =
          fun (x1800 : t) ->
            fun (x1801 : KeyObject.t) ->
              Ojs.set_prop_ascii (t_to_js x1800) "privateKey"
                (KeyObject.t_to_js x1801)
        let (get_public_key : t -> KeyObject.t) =
          fun (x1802 : t) ->
            KeyObject.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1802) "publicKey")
        let (set_public_key : t -> KeyObject.t -> unit) =
          fun (x1803 : t) ->
            fun (x1804 : KeyObject.t) ->
              Ojs.set_prop_ascii (t_to_js x1803) "publicKey"
                (KeyObject.t_to_js x1804)
      end
    let (diffie_hellman : options:AnonymousInterface1.t -> Buffer.t) =
      fun ~options:(x1805 : AnonymousInterface1.t) ->
        Buffer.t_of_js
          (Ojs.call Import.crypto "diffieHellman"
             [|(AnonymousInterface1.t_to_js x1805)|])
  end
