[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_plaintextLength : t -> int) =
      fun (x3 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3) "plaintextLength")
    let (set_plaintextLength : t -> int -> unit) =
      fun (x4 : t) ->
        fun (x5 : int) ->
          Ojs.set_prop_ascii (t_to_js x4) "plaintextLength"
            (Ojs.int_to_js x5)
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x7 : Ojs.t) -> x7
    and t_to_js : t -> Ojs.t = fun (x6 : Ojs.t) -> x6
    let (get_privateKey : t -> crypto_KeyObject) =
      fun (x8 : t) ->
        crypto_KeyObject_of_js (Ojs.get_prop_ascii (t_to_js x8) "privateKey")
    let (set_privateKey : t -> crypto_KeyObject -> unit) =
      fun (x9 : t) ->
        fun (x10 : crypto_KeyObject) ->
          Ojs.set_prop_ascii (t_to_js x9) "privateKey"
            (crypto_KeyObject_to_js x10)
    let (get_publicKey : t -> crypto_KeyObject) =
      fun (x11 : t) ->
        crypto_KeyObject_of_js (Ojs.get_prop_ascii (t_to_js x11) "publicKey")
    let (set_publicKey : t -> crypto_KeyObject -> unit) =
      fun (x12 : t) ->
        fun (x13 : crypto_KeyObject) ->
          Ojs.set_prop_ascii (t_to_js x12) "publicKey"
            (crypto_KeyObject_to_js x13)
  end
module AnonymousInterface2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x15 : Ojs.t) -> x15
    and t_to_js : t -> Ojs.t = fun (x14 : Ojs.t) -> x14
    let (get_publicKey : t -> Buffer.t) =
      fun (x16 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x16) "publicKey")
    let (set_publicKey : t -> Buffer.t -> unit) =
      fun (x17 : t) ->
        fun (x18 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x17) "publicKey" (Buffer.t_to_js x18)
    let (get_privateKey : t -> Buffer.t) =
      fun (x19 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x19) "privateKey")
    let (set_privateKey : t -> Buffer.t -> unit) =
      fun (x20 : t) ->
        fun (x21 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x20) "privateKey" (Buffer.t_to_js x21)
  end
module AnonymousInterface3 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x23 : Ojs.t) -> x23
    and t_to_js : t -> Ojs.t = fun (x22 : Ojs.t) -> x22
    let (get_publicKey : t -> Buffer.t) =
      fun (x24 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x24) "publicKey")
    let (set_publicKey : t -> Buffer.t -> unit) =
      fun (x25 : t) ->
        fun (x26 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x25) "publicKey" (Buffer.t_to_js x26)
    let (get_privateKey : t -> string) =
      fun (x27 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x27) "privateKey")
    let (set_privateKey : t -> string -> unit) =
      fun (x28 : t) ->
        fun (x29 : string) ->
          Ojs.set_prop_ascii (t_to_js x28) "privateKey"
            (Ojs.string_to_js x29)
  end
module AnonymousInterface4 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x31 : Ojs.t) -> x31
    and t_to_js : t -> Ojs.t = fun (x30 : Ojs.t) -> x30
    let (get_publicKey : t -> string) =
      fun (x32 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x32) "publicKey")
    let (set_publicKey : t -> string -> unit) =
      fun (x33 : t) ->
        fun (x34 : string) ->
          Ojs.set_prop_ascii (t_to_js x33) "publicKey" (Ojs.string_to_js x34)
    let (get_privateKey : t -> Buffer.t) =
      fun (x35 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x35) "privateKey")
    let (set_privateKey : t -> Buffer.t -> unit) =
      fun (x36 : t) ->
        fun (x37 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x36) "privateKey" (Buffer.t_to_js x37)
  end
module AnonymousInterface5 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x39 : Ojs.t) -> x39
    and t_to_js : t -> Ojs.t = fun (x38 : Ojs.t) -> x38
    let (get_publicKey : t -> string) =
      fun (x40 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x40) "publicKey")
    let (set_publicKey : t -> string -> unit) =
      fun (x41 : t) ->
        fun (x42 : string) ->
          Ojs.set_prop_ascii (t_to_js x41) "publicKey" (Ojs.string_to_js x42)
    let (get_privateKey : t -> string) =
      fun (x43 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x43) "privateKey")
    let (set_privateKey : t -> string -> unit) =
      fun (x44 : t) ->
        fun (x45 : string) ->
          Ojs.set_prop_ascii (t_to_js x44) "privateKey"
            (Ojs.string_to_js x45)
  end
module AnonymousInterface6 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x47 : Ojs.t) -> x47
    and t_to_js : t -> Ojs.t = fun (x46 : Ojs.t) -> x46
    let (get_type : t -> [ `pkcs8 ]) =
      fun (x48 : t) ->
        let x49 = Ojs.get_prop_ascii (t_to_js x48) "type" in
        match Ojs.string_of_js x49 with
        | "pkcs8" -> `pkcs8
        | _ -> assert false
    let (set_type : t -> [ `pkcs8 ] -> unit) =
      fun (x50 : t) ->
        fun (x51 : [ `pkcs8 ]) ->
          Ojs.set_prop_ascii (t_to_js x50) "type"
            (match x51 with | `pkcs8 -> Ojs.string_to_js "pkcs8")
  end
module AnonymousInterface7 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x53 : Ojs.t) -> x53
    and t_to_js : t -> Ojs.t = fun (x52 : Ojs.t) -> x52
    let (get_type : t -> [ `spki ]) =
      fun (x54 : t) ->
        let x55 = Ojs.get_prop_ascii (t_to_js x54) "type" in
        match Ojs.string_of_js x55 with | "spki" -> `spki | _ -> assert false
    let (set_type : t -> [ `spki ] -> unit) =
      fun (x56 : t) ->
        fun (x57 : [ `spki ]) ->
          Ojs.set_prop_ascii (t_to_js x56) "type"
            (match x57 with | `spki -> Ojs.string_to_js "spki")
    let (get_format : t -> 'PubF) =
      fun (x58 : t) -> Obj.magic (Ojs.get_prop_ascii (t_to_js x58) "format")
    let (set_format : t -> 'PubF -> unit) =
      fun (x59 : t) ->
        fun (x60 : 'PubF) ->
          Ojs.set_prop_ascii (t_to_js x59) "format" (Obj.magic x60)
  end
module AnonymousInterface8 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x62 : Ojs.t) -> x62
    and t_to_js : t -> Ojs.t = fun (x61 : Ojs.t) -> x61
    let (get_type : t -> [ `pkcs1  | `pkcs8 ]) =
      fun (x63 : t) ->
        let x64 = Ojs.get_prop_ascii (t_to_js x63) "type" in
        match Ojs.string_of_js x64 with
        | "pkcs1" -> `pkcs1
        | "pkcs8" -> `pkcs8
        | _ -> assert false
    let (set_type : t -> [ `pkcs1  | `pkcs8 ] -> unit) =
      fun (x65 : t) ->
        fun (x66 : [ `pkcs1  | `pkcs8 ]) ->
          Ojs.set_prop_ascii (t_to_js x65) "type"
            (match x66 with
             | `pkcs1 -> Ojs.string_to_js "pkcs1"
             | `pkcs8 -> Ojs.string_to_js "pkcs8")
  end
module AnonymousInterface9 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x68 : Ojs.t) -> x68
    and t_to_js : t -> Ojs.t = fun (x67 : Ojs.t) -> x67
    let (get_type : t -> [ `pkcs1  | `spki ]) =
      fun (x69 : t) ->
        let x70 = Ojs.get_prop_ascii (t_to_js x69) "type" in
        match Ojs.string_of_js x70 with
        | "pkcs1" -> `pkcs1
        | "spki" -> `spki
        | _ -> assert false
    let (set_type : t -> [ `pkcs1  | `spki ] -> unit) =
      fun (x71 : t) ->
        fun (x72 : [ `pkcs1  | `spki ]) ->
          Ojs.set_prop_ascii (t_to_js x71) "type"
            (match x72 with
             | `pkcs1 -> Ojs.string_to_js "pkcs1"
             | `spki -> Ojs.string_to_js "spki")
    let (get_format : t -> 'PubF) =
      fun (x73 : t) -> Obj.magic (Ojs.get_prop_ascii (t_to_js x73) "format")
    let (set_format : t -> 'PubF -> unit) =
      fun (x74 : t) ->
        fun (x75 : 'PubF) ->
          Ojs.set_prop_ascii (t_to_js x74) "format" (Obj.magic x75)
  end
module AnonymousInterface10 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x77 : Ojs.t) -> x77
    and t_to_js : t -> Ojs.t = fun (x76 : Ojs.t) -> x76
    let (get_type : t -> [ `pkcs8  | `sec1 ]) =
      fun (x78 : t) ->
        let x79 = Ojs.get_prop_ascii (t_to_js x78) "type" in
        match Ojs.string_of_js x79 with
        | "pkcs8" -> `pkcs8
        | "sec1" -> `sec1
        | _ -> assert false
    let (set_type : t -> [ `pkcs8  | `sec1 ] -> unit) =
      fun (x80 : t) ->
        fun (x81 : [ `pkcs8  | `sec1 ]) ->
          Ojs.set_prop_ascii (t_to_js x80) "type"
            (match x81 with
             | `pkcs8 -> Ojs.string_to_js "pkcs8"
             | `sec1 -> Ojs.string_to_js "sec1")
  end
module AnonymousInterface11 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x83 : Ojs.t) -> x83
    and t_to_js : t -> Ojs.t = fun (x82 : Ojs.t) -> x82
    let (create : t -> crypto_Certificate) =
      fun (x84 : t) ->
        crypto_Certificate_of_js (Ojs.new_obj (t_to_js x84) [||])
    let (apply : t -> crypto_Certificate) =
      fun (x85 : t) ->
        crypto_Certificate_of_js (Ojs.apply (t_to_js x85) [||])
  end
module Crypto =
  struct
    open Node_stream
    module Certificate =
      struct
        type t = crypto_Certificate
        let rec t_of_js : Ojs.t -> t =
          fun (x87 : Ojs.t) -> crypto_Certificate_of_js x87
        and t_to_js : t -> Ojs.t =
          fun (x86 : crypto_Certificate) -> crypto_Certificate_to_js x86
        let (exportChallenge : t -> spkac:crypto_BinaryLike -> Buffer.t) =
          fun (x89 : t) ->
            fun ~spkac:(x88 : crypto_BinaryLike) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x89) "exportChallenge"
                   [|(crypto_BinaryLike_to_js x88)|])
        let (exportPublicKey :
          t ->
            spkac:crypto_BinaryLike -> ?encoding:string -> unit -> Buffer.t)
          =
          fun (x94 : t) ->
            fun ~spkac:(x90 : crypto_BinaryLike) ->
              fun ?encoding:(x91 : string option) ->
                fun () ->
                  Buffer.t_of_js
                    (let x95 = t_to_js x94 in
                     Ojs.call (Ojs.get_prop_ascii x95 "exportPublicKey")
                       "apply"
                       [|x95;((let x92 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x92 "push"
                                    [|(crypto_BinaryLike_to_js x90)|]);
                               (match x91 with
                                | Some x93 ->
                                    ignore
                                      (Ojs.call x92 "push"
                                         [|(Ojs.string_to_js x93)|])
                                | None -> ());
                               x92))|])
        let (verifySpkac : t -> spkac:ArrayBufferView.t -> bool) =
          fun (x97 : t) ->
            fun ~spkac:(x96 : ArrayBufferView.t) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x97) "verifySpkac"
                   [|(ArrayBufferView.t_to_js x96)|])
      end
    let (certificate :
      (crypto_Certificate, AnonymousInterface11.t) intersection2) =
      intersection2_of_js crypto_Certificate_of_js
        AnonymousInterface11.t_of_js
        (Ojs.get_prop_ascii Import.crypto "Certificate")
    module Constants =
      struct
        let (oPENSSL_VERSION_NUMBER : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "OPENSSL_VERSION_NUMBER")
        let (sSL_OP_ALL : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants") "SSL_OP_ALL")
        let (sSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION")
        let (sSL_OP_CIPHER_SERVER_PREFERENCE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_CIPHER_SERVER_PREFERENCE")
        let (sSL_OP_CISCO_ANYCONNECT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_CISCO_ANYCONNECT")
        let (sSL_OP_COOKIE_EXCHANGE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_COOKIE_EXCHANGE")
        let (sSL_OP_CRYPTOPRO_TLSEXT_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_CRYPTOPRO_TLSEXT_BUG")
        let (sSL_OP_DONT_INSERT_EMPTY_FRAGMENTS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS")
        let (sSL_OP_EPHEMERAL_RSA : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_EPHEMERAL_RSA")
        let (sSL_OP_LEGACY_SERVER_CONNECT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_LEGACY_SERVER_CONNECT")
        let (sSL_OP_MICROSOFT_BIG_SSLV3_BUFFER : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER")
        let (sSL_OP_MICROSOFT_SESS_ID_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_MICROSOFT_SESS_ID_BUG")
        let (sSL_OP_MSIE_SSLV2_RSA_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_MSIE_SSLV2_RSA_PADDING")
        let (sSL_OP_NETSCAPE_CA_DN_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_CA_DN_BUG")
        let (sSL_OP_NETSCAPE_CHALLENGE_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_CHALLENGE_BUG")
        let (sSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG")
        let (sSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG")
        let (sSL_OP_NO_COMPRESSION : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_COMPRESSION")
        let (sSL_OP_NO_QUERY_MTU : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_QUERY_MTU")
        let (sSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION")
        let (sSL_OP_NO_SSLv2 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_SSLv2")
        let (sSL_OP_NO_SSLv3 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_SSLv3")
        let (sSL_OP_NO_TICKET : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TICKET")
        let (sSL_OP_NO_TLSv1 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TLSv1")
        let (sSL_OP_NO_TLSv1_1 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TLSv1_1")
        let (sSL_OP_NO_TLSv1_2 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_NO_TLSv1_2")
        let (sSL_OP_PKCS1_CHECK_1 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_PKCS1_CHECK_1")
        let (sSL_OP_PKCS1_CHECK_2 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_PKCS1_CHECK_2")
        let (sSL_OP_SINGLE_DH_USE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SINGLE_DH_USE")
        let (sSL_OP_SINGLE_ECDH_USE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SINGLE_ECDH_USE")
        let (sSL_OP_SSLEAY_080_CLIENT_DH_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SSLEAY_080_CLIENT_DH_BUG")
        let (sSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG")
        let (sSL_OP_TLS_BLOCK_PADDING_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_TLS_BLOCK_PADDING_BUG")
        let (sSL_OP_TLS_D5_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_TLS_D5_BUG")
        let (sSL_OP_TLS_ROLLBACK_BUG : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "SSL_OP_TLS_ROLLBACK_BUG")
        let (eNGINE_METHOD_RSA : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_RSA")
        let (eNGINE_METHOD_DSA : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_DSA")
        let (eNGINE_METHOD_DH : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_DH")
        let (eNGINE_METHOD_RAND : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_RAND")
        let (eNGINE_METHOD_EC : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_EC")
        let (eNGINE_METHOD_CIPHERS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_CIPHERS")
        let (eNGINE_METHOD_DIGESTS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_DIGESTS")
        let (eNGINE_METHOD_PKEY_METHS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_PKEY_METHS")
        let (eNGINE_METHOD_PKEY_ASN1_METHS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_PKEY_ASN1_METHS")
        let (eNGINE_METHOD_ALL : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_ALL")
        let (eNGINE_METHOD_NONE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "ENGINE_METHOD_NONE")
        let (dH_CHECK_P_NOT_SAFE_PRIME : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_CHECK_P_NOT_SAFE_PRIME")
        let (dH_CHECK_P_NOT_PRIME : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_CHECK_P_NOT_PRIME")
        let (dH_UNABLE_TO_CHECK_GENERATOR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_UNABLE_TO_CHECK_GENERATOR")
        let (dH_NOT_SUITABLE_GENERATOR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "DH_NOT_SUITABLE_GENERATOR")
        let (aLPN_ENABLED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants") "ALPN_ENABLED")
        let (rSA_PKCS1_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PKCS1_PADDING")
        let (rSA_SSLV23_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_SSLV23_PADDING")
        let (rSA_NO_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_NO_PADDING")
        let (rSA_PKCS1_OAEP_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PKCS1_OAEP_PADDING")
        let (rSA_X931_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_X931_PADDING")
        let (rSA_PKCS1_PSS_PADDING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PKCS1_PSS_PADDING")
        let (rSA_PSS_SALTLEN_DIGEST : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PSS_SALTLEN_DIGEST")
        let (rSA_PSS_SALTLEN_MAX_SIGN : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PSS_SALTLEN_MAX_SIGN")
        let (rSA_PSS_SALTLEN_AUTO : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "RSA_PSS_SALTLEN_AUTO")
        let (pOINT_CONVERSION_COMPRESSED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "POINT_CONVERSION_COMPRESSED")
        let (pOINT_CONVERSION_UNCOMPRESSED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "POINT_CONVERSION_UNCOMPRESSED")
        let (pOINT_CONVERSION_HYBRID : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "POINT_CONVERSION_HYBRID")
        let (defaultCoreCipherList : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "defaultCoreCipherList")
        let (defaultCipherList : string) =
          Ojs.string_of_js
            (Ojs.get_prop_ascii
               (Ojs.get_prop_ascii Import.crypto "constants")
               "defaultCipherList")
      end
    module HashOptions =
      struct
        type t = crypto_HashOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x101 : Ojs.t) -> crypto_HashOptions_of_js x101
        and t_to_js : t -> Ojs.t =
          fun (x100 : crypto_HashOptions) -> crypto_HashOptions_to_js x100
        let (get_outputLength : t -> int) =
          fun (x102 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x102) "outputLength")
        let (set_outputLength : t -> int -> unit) =
          fun (x103 : t) ->
            fun (x104 : int) ->
              Ojs.set_prop_ascii (t_to_js x103) "outputLength"
                (Ojs.int_to_js x104)
        let (cast : t -> Stream.TransformOptions.t) =
          fun (x105 : t) -> Stream.TransformOptions.t_of_js (t_to_js x105)
      end
    let (fips : bool) =
      Ojs.bool_of_js (Ojs.get_prop_ascii Import.crypto "fips")
    let (createHash :
      algorithm:string -> ?options:crypto_HashOptions -> unit -> crypto_Hash)
      =
      fun ~algorithm:(x106 : string) ->
        fun ?options:(x107 : crypto_HashOptions option) ->
          fun () ->
            crypto_Hash_of_js
              (let x110 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x110 "createHash") "apply"
                 [|x110;((let x108 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x108 "push" [|(Ojs.string_to_js x106)|]);
                          (match x107 with
                           | Some x109 ->
                               ignore
                                 (Ojs.call x108 "push"
                                    [|(crypto_HashOptions_to_js x109)|])
                           | None -> ());
                          x108))|])
    let (createHmac :
      algorithm:string ->
        key:(crypto_BinaryLike, crypto_KeyObject) union2 ->
          ?options:Stream.TransformOptions.t -> unit -> crypto_Hmac)
      =
      fun ~algorithm:(x111 : string) ->
        fun ~key:(x112 : (crypto_BinaryLike, crypto_KeyObject) union2) ->
          fun ?options:(x113 : Stream.TransformOptions.t option) ->
            fun () ->
              crypto_Hmac_of_js
                (let x118 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x118 "createHmac") "apply"
                   [|x118;((let x114 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x114 "push"
                                 [|(Ojs.string_to_js x111)|]);
                            ignore
                              (Ojs.call x114 "push"
                                 [|(union2_to_js crypto_BinaryLike_to_js
                                      crypto_KeyObject_to_js x112)|]);
                            (match x113 with
                             | Some x115 ->
                                 ignore
                                   (Ojs.call x114 "push"
                                      [|(Stream.TransformOptions.t_to_js x115)|])
                             | None -> ());
                            x114))|])
    module BinaryToTextEncoding =
      struct
        type t = [ `base64  | `hex ]
        let rec t_of_js : Ojs.t -> t =
          fun (x120 : Ojs.t) ->
            let x121 = x120 in
            match Ojs.string_of_js x121 with
            | "base64" -> `base64
            | "hex" -> `hex
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x119 : [ `base64  | `hex ]) ->
            match x119 with
            | `base64 -> Ojs.string_to_js "base64"
            | `hex -> Ojs.string_to_js "hex"
      end
    module CharacterEncoding =
      struct
        type t = [ `latin1  | `utf_8  | `utf16le  | `utf8 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x123 : Ojs.t) ->
            let x124 = x123 in
            match Ojs.string_of_js x124 with
            | "latin1" -> `latin1
            | "utf-8" -> `utf_8
            | "utf16le" -> `utf16le
            | "utf8" -> `utf8
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x122 : [ `latin1  | `utf_8  | `utf16le  | `utf8 ]) ->
            match x122 with
            | `latin1 -> Ojs.string_to_js "latin1"
            | `utf_8 -> Ojs.string_to_js "utf-8"
            | `utf16le -> Ojs.string_to_js "utf16le"
            | `utf8 -> Ojs.string_to_js "utf8"
      end
    module LegacyCharacterEncoding =
      struct
        type t = [ `ascii  | `binary  | `ucs_2  | `ucs2 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x126 : Ojs.t) ->
            let x127 = x126 in
            match Ojs.string_of_js x127 with
            | "ascii" -> `ascii
            | "binary" -> `binary
            | "ucs-2" -> `ucs_2
            | "ucs2" -> `ucs2
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x125 : [ `ascii  | `binary  | `ucs_2  | `ucs2 ]) ->
            match x125 with
            | `ascii -> Ojs.string_to_js "ascii"
            | `binary -> Ojs.string_to_js "binary"
            | `ucs_2 -> Ojs.string_to_js "ucs-2"
            | `ucs2 -> Ojs.string_to_js "ucs2"
      end
    module Encoding =
      struct
        type t =
          ((crypto_BinaryToTextEncoding, crypto_CharacterEncoding,
             crypto_LegacyCharacterEncoding) union3,
            [ `ascii  | `base64  | `binary  | `hex  | `latin1  | `ucs_2 
            | `ucs2  | `utf_8  | `utf16le  | `utf8 ]) or_enum
        let rec t_of_js : Ojs.t -> t =
          fun (x134 : Ojs.t) ->
            or_enum_of_js
              (fun (x135 : Ojs.t) ->
                 union3_of_js crypto_BinaryToTextEncoding_of_js
                   crypto_CharacterEncoding_of_js
                   crypto_LegacyCharacterEncoding_of_js x135)
              (fun (x139 : Ojs.t) ->
                 let x140 = x139 in
                 match Ojs.string_of_js x140 with
                 | "ascii" -> `ascii
                 | "base64" -> `base64
                 | "binary" -> `binary
                 | "hex" -> `hex
                 | "latin1" -> `latin1
                 | "ucs-2" -> `ucs_2
                 | "ucs2" -> `ucs2
                 | "utf-8" -> `utf_8
                 | "utf16le" -> `utf16le
                 | "utf8" -> `utf8
                 | _ -> assert false) x134
        and t_to_js : t -> Ojs.t =
          fun
            (x128 :
              ((crypto_BinaryToTextEncoding, crypto_CharacterEncoding,
                 crypto_LegacyCharacterEncoding) union3,
                [ `ascii  | `base64  | `binary  | `hex  | `latin1  | 
                  `ucs_2 
                | `ucs2  | `utf_8  | `utf16le  | `utf8 ]) or_enum)
            ->
            or_enum_to_js
              (fun
                 (x129 :
                   (crypto_BinaryToTextEncoding, crypto_CharacterEncoding,
                     crypto_LegacyCharacterEncoding) union3)
                 ->
                 union3_to_js crypto_BinaryToTextEncoding_to_js
                   crypto_CharacterEncoding_to_js
                   crypto_LegacyCharacterEncoding_to_js x129)
              (fun
                 (x133 :
                   [ `ascii  | `base64  | `binary  | `hex  | `latin1 
                   | `ucs_2  | `ucs2  | `utf_8  | `utf16le  | `utf8 ])
                 ->
                 match x133 with
                 | `ascii -> Ojs.string_to_js "ascii"
                 | `base64 -> Ojs.string_to_js "base64"
                 | `binary -> Ojs.string_to_js "binary"
                 | `hex -> Ojs.string_to_js "hex"
                 | `latin1 -> Ojs.string_to_js "latin1"
                 | `ucs_2 -> Ojs.string_to_js "ucs-2"
                 | `ucs2 -> Ojs.string_to_js "ucs2"
                 | `utf_8 -> Ojs.string_to_js "utf-8"
                 | `utf16le -> Ojs.string_to_js "utf16le"
                 | `utf8 -> Ojs.string_to_js "utf8") x128
      end
    module ECDHKeyFormat =
      struct
        type t = [ `compressed  | `hybrid  | `uncompressed ]
        let rec t_of_js : Ojs.t -> t =
          fun (x142 : Ojs.t) ->
            let x143 = x142 in
            match Ojs.string_of_js x143 with
            | "compressed" -> `compressed
            | "hybrid" -> `hybrid
            | "uncompressed" -> `uncompressed
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x141 : [ `compressed  | `hybrid  | `uncompressed ]) ->
            match x141 with
            | `compressed -> Ojs.string_to_js "compressed"
            | `hybrid -> Ojs.string_to_js "hybrid"
            | `uncompressed -> Ojs.string_to_js "uncompressed"
      end
    module Hash =
      struct
        type t = crypto_Hash
        let rec t_of_js : Ojs.t -> t =
          fun (x145 : Ojs.t) -> crypto_Hash_of_js x145
        and t_to_js : t -> Ojs.t =
          fun (x144 : crypto_Hash) -> crypto_Hash_to_js x144
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Hash") [||])
        let (copy : t -> t) =
          fun (x146 : t) -> t_of_js (Ojs.call (t_to_js x146) "copy" [||])
        let (update : t -> data:crypto_BinaryLike -> t) =
          fun (x148 : t) ->
            fun ~data:(x147 : crypto_BinaryLike) ->
              t_of_js
                (Ojs.call (t_to_js x148) "update"
                   [|(crypto_BinaryLike_to_js x147)|])
        let (update' :
          t -> data:string -> input_encoding:crypto_Encoding -> t) =
          fun (x151 : t) ->
            fun ~data:(x149 : string) ->
              fun ~input_encoding:(x150 : crypto_Encoding) ->
                t_of_js
                  (Ojs.call (t_to_js x151) "update"
                     [|(Ojs.string_to_js x149);(crypto_Encoding_to_js x150)|])
        let (digest : t -> Buffer.t) =
          fun (x152 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x152) "digest" [||])
        let (digest' : t -> encoding:crypto_BinaryToTextEncoding -> string) =
          fun (x154 : t) ->
            fun ~encoding:(x153 : crypto_BinaryToTextEncoding) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x154) "digest"
                   [|(crypto_BinaryToTextEncoding_to_js x153)|])
        let (cast : t -> Stream.Transform.t) =
          fun (x155 : t) -> Stream.Transform.t_of_js (t_to_js x155)
      end
    module Hmac =
      struct
        type t = crypto_Hmac
        let rec t_of_js : Ojs.t -> t =
          fun (x157 : Ojs.t) -> crypto_Hmac_of_js x157
        and t_to_js : t -> Ojs.t =
          fun (x156 : crypto_Hmac) -> crypto_Hmac_to_js x156
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Hmac") [||])
        let (update : t -> data:crypto_BinaryLike -> t) =
          fun (x159 : t) ->
            fun ~data:(x158 : crypto_BinaryLike) ->
              t_of_js
                (Ojs.call (t_to_js x159) "update"
                   [|(crypto_BinaryLike_to_js x158)|])
        let (update' :
          t -> data:string -> input_encoding:crypto_Encoding -> t) =
          fun (x162 : t) ->
            fun ~data:(x160 : string) ->
              fun ~input_encoding:(x161 : crypto_Encoding) ->
                t_of_js
                  (Ojs.call (t_to_js x162) "update"
                     [|(Ojs.string_to_js x160);(crypto_Encoding_to_js x161)|])
        let (digest : t -> Buffer.t) =
          fun (x163 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x163) "digest" [||])
        let (digest' : t -> encoding:crypto_BinaryToTextEncoding -> string) =
          fun (x165 : t) ->
            fun ~encoding:(x164 : crypto_BinaryToTextEncoding) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x165) "digest"
                   [|(crypto_BinaryToTextEncoding_to_js x164)|])
        let (cast : t -> Stream.Transform.t) =
          fun (x166 : t) -> Stream.Transform.t_of_js (t_to_js x166)
      end
    module KeyObjectType =
      struct
        type t = [ `private_  | `public  | `secret ]
        let rec t_of_js : Ojs.t -> t =
          fun (x168 : Ojs.t) ->
            let x169 = x168 in
            match Ojs.string_of_js x169 with
            | "private" -> `private_
            | "public" -> `public
            | "secret" -> `secret
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x167 : [ `private_  | `public  | `secret ]) ->
            match x167 with
            | `private_ -> Ojs.string_to_js "private"
            | `public -> Ojs.string_to_js "public"
            | `secret -> Ojs.string_to_js "secret"
      end
    module KeyExportOptions =
      struct
        type 'T t = 'T crypto_KeyExportOptions
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x172 : Ojs.t) ->
              crypto_KeyExportOptions_of_js __T_of_js x172
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x170 : __T crypto_KeyExportOptions) ->
              crypto_KeyExportOptions_to_js __T_to_js x170
        let (get_type : 'T t -> [ `pkcs1  | `pkcs8  | `sec1  | `spki ]) =
          fun (x174 : 'T t) ->
            let x176 = Ojs.get_prop_ascii (t_to_js Obj.magic x174) "type" in
            match Ojs.string_of_js x176 with
            | "pkcs1" -> `pkcs1
            | "pkcs8" -> `pkcs8
            | "sec1" -> `sec1
            | "spki" -> `spki
            | _ -> assert false
        let (set_type :
          'T t -> [ `pkcs1  | `pkcs8  | `sec1  | `spki ] -> unit) =
          fun (x177 : 'T t) ->
            fun (x178 : [ `pkcs1  | `pkcs8  | `sec1  | `spki ]) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x177) "type"
                (match x178 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `pkcs8 -> Ojs.string_to_js "pkcs8"
                 | `sec1 -> Ojs.string_to_js "sec1"
                 | `spki -> Ojs.string_to_js "spki")
        let (get_format : 'T t -> 'T) =
          fun (x180 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x180) "format")
        let (set_format : 'T t -> 'T -> unit) =
          fun (x182 : 'T t) ->
            fun (x183 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x182) "format"
                (Obj.magic x183)
        let (get_cipher : 'T t -> string) =
          fun (x185 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x185) "cipher")
        let (set_cipher : 'T t -> string -> unit) =
          fun (x187 : 'T t) ->
            fun (x188 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x187) "cipher"
                (Ojs.string_to_js x188)
        let (get_passphrase : 'T t -> Buffer.t or_string) =
          fun (x190 : 'T t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x190) "passphrase")
        let (set_passphrase : 'T t -> Buffer.t or_string -> unit) =
          fun (x193 : 'T t) ->
            fun (x194 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x193) "passphrase"
                (or_string_to_js Buffer.t_to_js x194)
      end
    module KeyObject =
      struct
        type t = crypto_KeyObject
        let rec t_of_js : Ojs.t -> t =
          fun (x198 : Ojs.t) -> crypto_KeyObject_of_js x198
        and t_to_js : t -> Ojs.t =
          fun (x197 : crypto_KeyObject) -> crypto_KeyObject_to_js x197
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "KeyObject")
                 [||])
        let (get_asymmetricKeyType : t -> crypto_KeyType) =
          fun (x199 : t) ->
            crypto_KeyType_of_js
              (Ojs.get_prop_ascii (t_to_js x199) "asymmetricKeyType")
        let (set_asymmetricKeyType : t -> crypto_KeyType -> unit) =
          fun (x200 : t) ->
            fun (x201 : crypto_KeyType) ->
              Ojs.set_prop_ascii (t_to_js x200) "asymmetricKeyType"
                (crypto_KeyType_to_js x201)
        let (get_asymmetricKeySize : t -> int) =
          fun (x202 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x202) "asymmetricKeySize")
        let (set_asymmetricKeySize : t -> int -> unit) =
          fun (x203 : t) ->
            fun (x204 : int) ->
              Ojs.set_prop_ascii (t_to_js x203) "asymmetricKeySize"
                (Ojs.int_to_js x204)
        let (export :
          t -> options:[ `pem ] crypto_KeyExportOptions -> Buffer.t or_string)
          =
          fun (x207 : t) ->
            fun ~options:(x205 : [ `pem ] crypto_KeyExportOptions) ->
              or_string_of_js Buffer.t_of_js
                (Ojs.call (t_to_js x207) "export"
                   [|(crypto_KeyExportOptions_to_js
                        (fun (x206 : [ `pem ]) ->
                           match x206 with | `pem -> Ojs.string_to_js "pem")
                        x205)|])
        let (export' :
          t -> ?options:[ `der ] crypto_KeyExportOptions -> unit -> Buffer.t)
          =
          fun (x213 : t) ->
            fun ?options:(x209 : [ `der ] crypto_KeyExportOptions option) ->
              fun () ->
                Buffer.t_of_js
                  (let x214 = t_to_js x213 in
                   Ojs.call (Ojs.get_prop_ascii x214 "export") "apply"
                     [|x214;((let x210 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x209 with
                               | Some x211 ->
                                   ignore
                                     (Ojs.call x210 "push"
                                        [|(crypto_KeyExportOptions_to_js
                                             (fun (x212 : [ `der ]) ->
                                                match x212 with
                                                | `der ->
                                                    Ojs.string_to_js "der")
                                             x211)|])
                               | None -> ());
                              x210))|])
        let (get_symmetricKeySize : t -> int) =
          fun (x215 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x215) "symmetricKeySize")
        let (set_symmetricKeySize : t -> int -> unit) =
          fun (x216 : t) ->
            fun (x217 : int) ->
              Ojs.set_prop_ascii (t_to_js x216) "symmetricKeySize"
                (Ojs.int_to_js x217)
        let (get_type : t -> crypto_KeyObjectType) =
          fun (x218 : t) ->
            crypto_KeyObjectType_of_js
              (Ojs.get_prop_ascii (t_to_js x218) "type")
        let (set_type : t -> crypto_KeyObjectType -> unit) =
          fun (x219 : t) ->
            fun (x220 : crypto_KeyObjectType) ->
              Ojs.set_prop_ascii (t_to_js x219) "type"
                (crypto_KeyObjectType_to_js x220)
      end
    module CipherCCMTypes =
      struct
        type t =
          [ `aes_128_ccm  | `aes_192_ccm  | `aes_256_ccm 
          | `chacha20_poly1305 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x222 : Ojs.t) ->
            let x223 = x222 in
            match Ojs.string_of_js x223 with
            | "aes-128-ccm" -> `aes_128_ccm
            | "aes-192-ccm" -> `aes_192_ccm
            | "aes-256-ccm" -> `aes_256_ccm
            | "chacha20-poly1305" -> `chacha20_poly1305
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x221 :
              [ `aes_128_ccm  | `aes_192_ccm  | `aes_256_ccm 
              | `chacha20_poly1305 ])
            ->
            match x221 with
            | `aes_128_ccm -> Ojs.string_to_js "aes-128-ccm"
            | `aes_192_ccm -> Ojs.string_to_js "aes-192-ccm"
            | `aes_256_ccm -> Ojs.string_to_js "aes-256-ccm"
            | `chacha20_poly1305 -> Ojs.string_to_js "chacha20-poly1305"
      end
    module CipherGCMTypes =
      struct
        type t = [ `aes_128_gcm  | `aes_192_gcm  | `aes_256_gcm ]
        let rec t_of_js : Ojs.t -> t =
          fun (x225 : Ojs.t) ->
            let x226 = x225 in
            match Ojs.string_of_js x226 with
            | "aes-128-gcm" -> `aes_128_gcm
            | "aes-192-gcm" -> `aes_192_gcm
            | "aes-256-gcm" -> `aes_256_gcm
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x224 : [ `aes_128_gcm  | `aes_192_gcm  | `aes_256_gcm ]) ->
            match x224 with
            | `aes_128_gcm -> Ojs.string_to_js "aes-128-gcm"
            | `aes_192_gcm -> Ojs.string_to_js "aes-192-gcm"
            | `aes_256_gcm -> Ojs.string_to_js "aes-256-gcm"
      end
    module BinaryLike =
      struct
        type t = crypto_BinaryLike
        let rec t_of_js : Ojs.t -> t =
          fun (x228 : Ojs.t) -> crypto_BinaryLike_of_js x228
        and t_to_js : t -> Ojs.t =
          fun (x227 : crypto_BinaryLike) -> crypto_BinaryLike_to_js x227
      end
    module CipherKey =
      struct
        type t = (crypto_BinaryLike, crypto_KeyObject) union2
        let rec t_of_js : Ojs.t -> t =
          fun (x232 : Ojs.t) ->
            union2_of_js crypto_BinaryLike_of_js crypto_KeyObject_of_js x232
        and t_to_js : t -> Ojs.t =
          fun (x229 : (crypto_BinaryLike, crypto_KeyObject) union2) ->
            union2_to_js crypto_BinaryLike_to_js crypto_KeyObject_to_js x229
      end
    module CipherCCMOptions =
      struct
        type t = crypto_CipherCCMOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x236 : Ojs.t) -> crypto_CipherCCMOptions_of_js x236
        and t_to_js : t -> Ojs.t =
          fun (x235 : crypto_CipherCCMOptions) ->
            crypto_CipherCCMOptions_to_js x235
        let (get_authTagLength : t -> int) =
          fun (x237 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x237) "authTagLength")
        let (set_authTagLength : t -> int -> unit) =
          fun (x238 : t) ->
            fun (x239 : int) ->
              Ojs.set_prop_ascii (t_to_js x238) "authTagLength"
                (Ojs.int_to_js x239)
        let (cast : t -> Stream.TransformOptions.t) =
          fun (x240 : t) -> Stream.TransformOptions.t_of_js (t_to_js x240)
      end
    module CipherGCMOptions =
      struct
        type t = crypto_CipherGCMOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x242 : Ojs.t) -> crypto_CipherGCMOptions_of_js x242
        and t_to_js : t -> Ojs.t =
          fun (x241 : crypto_CipherGCMOptions) ->
            crypto_CipherGCMOptions_to_js x241
        let (get_authTagLength : t -> int) =
          fun (x243 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x243) "authTagLength")
        let (set_authTagLength : t -> int -> unit) =
          fun (x244 : t) ->
            fun (x245 : int) ->
              Ojs.set_prop_ascii (t_to_js x244) "authTagLength"
                (Ojs.int_to_js x245)
        let (cast : t -> Stream.TransformOptions.t) =
          fun (x246 : t) -> Stream.TransformOptions.t_of_js (t_to_js x246)
      end
    let (createCipher :
      algorithm:crypto_CipherCCMTypes ->
        password:crypto_BinaryLike ->
          options:crypto_CipherCCMOptions -> crypto_CipherCCM)
      =
      fun ~algorithm:(x247 : crypto_CipherCCMTypes) ->
        fun ~password:(x248 : crypto_BinaryLike) ->
          fun ~options:(x249 : crypto_CipherCCMOptions) ->
            crypto_CipherCCM_of_js
              (Ojs.call Import.crypto "createCipher"
                 [|(crypto_CipherCCMTypes_to_js x247);(crypto_BinaryLike_to_js
                                                         x248);(crypto_CipherCCMOptions_to_js
                                                                  x249)|])
    let (createCipher :
      algorithm:crypto_CipherGCMTypes ->
        password:crypto_BinaryLike ->
          ?options:crypto_CipherGCMOptions -> unit -> crypto_CipherGCM)
      =
      fun ~algorithm:(x250 : crypto_CipherGCMTypes) ->
        fun ~password:(x251 : crypto_BinaryLike) ->
          fun ?options:(x252 : crypto_CipherGCMOptions option) ->
            fun () ->
              crypto_CipherGCM_of_js
                (let x255 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x255 "createCipher") "apply"
                   [|x255;((let x253 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x253 "push"
                                 [|(crypto_CipherGCMTypes_to_js x250)|]);
                            ignore
                              (Ojs.call x253 "push"
                                 [|(crypto_BinaryLike_to_js x251)|]);
                            (match x252 with
                             | Some x254 ->
                                 ignore
                                   (Ojs.call x253 "push"
                                      [|(crypto_CipherGCMOptions_to_js x254)|])
                             | None -> ());
                            x253))|])
    let (createCipher :
      algorithm:string ->
        password:crypto_BinaryLike ->
          ?options:Stream.TransformOptions.t -> unit -> crypto_Cipher)
      =
      fun ~algorithm:(x256 : string) ->
        fun ~password:(x257 : crypto_BinaryLike) ->
          fun ?options:(x258 : Stream.TransformOptions.t option) ->
            fun () ->
              crypto_Cipher_of_js
                (let x261 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x261 "createCipher") "apply"
                   [|x261;((let x259 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x259 "push"
                                 [|(Ojs.string_to_js x256)|]);
                            ignore
                              (Ojs.call x259 "push"
                                 [|(crypto_BinaryLike_to_js x257)|]);
                            (match x258 with
                             | Some x260 ->
                                 ignore
                                   (Ojs.call x259 "push"
                                      [|(Stream.TransformOptions.t_to_js x260)|])
                             | None -> ());
                            x259))|])
    let (createCipheriv :
      algorithm:crypto_CipherCCMTypes ->
        key:crypto_CipherKey ->
          iv:crypto_BinaryLike or_null ->
            options:crypto_CipherCCMOptions -> crypto_CipherCCM)
      =
      fun ~algorithm:(x262 : crypto_CipherCCMTypes) ->
        fun ~key:(x263 : crypto_CipherKey) ->
          fun ~iv:(x264 : crypto_BinaryLike or_null) ->
            fun ~options:(x266 : crypto_CipherCCMOptions) ->
              crypto_CipherCCM_of_js
                (Ojs.call Import.crypto "createCipheriv"
                   [|(crypto_CipherCCMTypes_to_js x262);(crypto_CipherKey_to_js
                                                           x263);(or_null_to_js
                                                                    crypto_BinaryLike_to_js
                                                                    x264);(
                     crypto_CipherCCMOptions_to_js x266)|])
    let (createCipheriv :
      algorithm:crypto_CipherGCMTypes ->
        key:crypto_CipherKey ->
          iv:crypto_BinaryLike or_null ->
            ?options:crypto_CipherGCMOptions -> unit -> crypto_CipherGCM)
      =
      fun ~algorithm:(x267 : crypto_CipherGCMTypes) ->
        fun ~key:(x268 : crypto_CipherKey) ->
          fun ~iv:(x269 : crypto_BinaryLike or_null) ->
            fun ?options:(x270 : crypto_CipherGCMOptions option) ->
              fun () ->
                crypto_CipherGCM_of_js
                  (let x274 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x274 "createCipheriv")
                     "apply"
                     [|x274;((let x271 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x271 "push"
                                   [|(crypto_CipherGCMTypes_to_js x267)|]);
                              ignore
                                (Ojs.call x271 "push"
                                   [|(crypto_CipherKey_to_js x268)|]);
                              ignore
                                (Ojs.call x271 "push"
                                   [|(or_null_to_js crypto_BinaryLike_to_js
                                        x269)|]);
                              (match x270 with
                               | Some x272 ->
                                   ignore
                                     (Ojs.call x271 "push"
                                        [|(crypto_CipherGCMOptions_to_js x272)|])
                               | None -> ());
                              x271))|])
    let (createCipheriv :
      algorithm:string ->
        key:crypto_CipherKey ->
          iv:crypto_BinaryLike or_null ->
            ?options:Stream.TransformOptions.t -> unit -> crypto_Cipher)
      =
      fun ~algorithm:(x275 : string) ->
        fun ~key:(x276 : crypto_CipherKey) ->
          fun ~iv:(x277 : crypto_BinaryLike or_null) ->
            fun ?options:(x278 : Stream.TransformOptions.t option) ->
              fun () ->
                crypto_Cipher_of_js
                  (let x282 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x282 "createCipheriv")
                     "apply"
                     [|x282;((let x279 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x279 "push"
                                   [|(Ojs.string_to_js x275)|]);
                              ignore
                                (Ojs.call x279 "push"
                                   [|(crypto_CipherKey_to_js x276)|]);
                              ignore
                                (Ojs.call x279 "push"
                                   [|(or_null_to_js crypto_BinaryLike_to_js
                                        x277)|]);
                              (match x278 with
                               | Some x280 ->
                                   ignore
                                     (Ojs.call x279 "push"
                                        [|(Stream.TransformOptions.t_to_js
                                             x280)|])
                               | None -> ());
                              x279))|])
    module Cipher =
      struct
        type t = crypto_Cipher
        let rec t_of_js : Ojs.t -> t =
          fun (x284 : Ojs.t) -> crypto_Cipher_of_js x284
        and t_to_js : t -> Ojs.t =
          fun (x283 : crypto_Cipher) -> crypto_Cipher_to_js x283
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Cipher") [||])
        let (update : t -> data:crypto_BinaryLike -> Buffer.t) =
          fun (x286 : t) ->
            fun ~data:(x285 : crypto_BinaryLike) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x286) "update"
                   [|(crypto_BinaryLike_to_js x285)|])
        let (update' :
          t -> data:string -> input_encoding:crypto_Encoding -> Buffer.t) =
          fun (x289 : t) ->
            fun ~data:(x287 : string) ->
              fun ~input_encoding:(x288 : crypto_Encoding) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x289) "update"
                     [|(Ojs.string_to_js x287);(crypto_Encoding_to_js x288)|])
        let (update'' :
          t ->
            data:ArrayBufferView.t ->
              input_encoding:never or_undefined ->
                output_encoding:crypto_Encoding -> string)
          =
          fun (x294 : t) ->
            fun ~data:(x290 : ArrayBufferView.t) ->
              fun ~input_encoding:(x291 : never or_undefined) ->
                fun ~output_encoding:(x293 : crypto_Encoding) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x294) "update"
                       [|(ArrayBufferView.t_to_js x290);(or_undefined_to_js
                                                           never_to_js x291);(
                         crypto_Encoding_to_js x293)|])
        let (update''' :
          t ->
            data:string ->
              input_encoding:crypto_Encoding or_undefined ->
                output_encoding:crypto_Encoding -> string)
          =
          fun (x299 : t) ->
            fun ~data:(x295 : string) ->
              fun ~input_encoding:(x296 : crypto_Encoding or_undefined) ->
                fun ~output_encoding:(x298 : crypto_Encoding) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x299) "update"
                       [|(Ojs.string_to_js x295);(or_undefined_to_js
                                                    crypto_Encoding_to_js
                                                    x296);(crypto_Encoding_to_js
                                                             x298)|])
        let (final : t -> Buffer.t) =
          fun (x300 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x300) "final" [||])
        let (final' : t -> output_encoding:BufferEncoding.t -> string) =
          fun (x302 : t) ->
            fun ~output_encoding:(x301 : BufferEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x302) "final"
                   [|(BufferEncoding.t_to_js x301)|])
        let (setAutoPadding : t -> ?auto_padding:bool -> unit -> t) =
          fun (x306 : t) ->
            fun ?auto_padding:(x303 : bool option) ->
              fun () ->
                t_of_js
                  (let x307 = t_to_js x306 in
                   Ojs.call (Ojs.get_prop_ascii x307 "setAutoPadding")
                     "apply"
                     [|x307;((let x304 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x303 with
                               | Some x305 ->
                                   ignore
                                     (Ojs.call x304 "push"
                                        [|(Ojs.bool_to_js x305)|])
                               | None -> ());
                              x304))|])
        let (cast : t -> Stream.Transform.t) =
          fun (x308 : t) -> Stream.Transform.t_of_js (t_to_js x308)
      end
    module CipherCCM =
      struct
        type t = crypto_CipherCCM
        let rec t_of_js : Ojs.t -> t =
          fun (x310 : Ojs.t) -> crypto_CipherCCM_of_js x310
        and t_to_js : t -> Ojs.t =
          fun (x309 : crypto_CipherCCM) -> crypto_CipherCCM_to_js x309
        let (setAAD :
          t -> buffer:ArrayBufferView.t -> options:AnonymousInterface0.t -> t)
          =
          fun (x313 : t) ->
            fun ~buffer:(x311 : ArrayBufferView.t) ->
              fun ~options:(x312 : AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x313) "setAAD"
                     [|(ArrayBufferView.t_to_js x311);(AnonymousInterface0.t_to_js
                                                         x312)|])
        let (getAuthTag : t -> Buffer.t) =
          fun (x314 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x314) "getAuthTag" [||])
        let (cast : t -> crypto_Cipher) =
          fun (x315 : t) -> crypto_Cipher_of_js (t_to_js x315)
      end
    module CipherGCM =
      struct
        type t = crypto_CipherGCM
        let rec t_of_js : Ojs.t -> t =
          fun (x317 : Ojs.t) -> crypto_CipherGCM_of_js x317
        and t_to_js : t -> Ojs.t =
          fun (x316 : crypto_CipherGCM) -> crypto_CipherGCM_to_js x316
        let (setAAD :
          t ->
            buffer:ArrayBufferView.t ->
              ?options:AnonymousInterface0.t -> unit -> t)
          =
          fun (x322 : t) ->
            fun ~buffer:(x318 : ArrayBufferView.t) ->
              fun ?options:(x319 : AnonymousInterface0.t option) ->
                fun () ->
                  t_of_js
                    (let x323 = t_to_js x322 in
                     Ojs.call (Ojs.get_prop_ascii x323 "setAAD") "apply"
                       [|x323;((let x320 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x320 "push"
                                     [|(ArrayBufferView.t_to_js x318)|]);
                                (match x319 with
                                 | Some x321 ->
                                     ignore
                                       (Ojs.call x320 "push"
                                          [|(AnonymousInterface0.t_to_js x321)|])
                                 | None -> ());
                                x320))|])
        let (getAuthTag : t -> Buffer.t) =
          fun (x324 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x324) "getAuthTag" [||])
        let (cast : t -> crypto_Cipher) =
          fun (x325 : t) -> crypto_Cipher_of_js (t_to_js x325)
      end
    let (createDecipher :
      algorithm:crypto_CipherCCMTypes ->
        password:crypto_BinaryLike ->
          options:crypto_CipherCCMOptions -> crypto_DecipherCCM)
      =
      fun ~algorithm:(x326 : crypto_CipherCCMTypes) ->
        fun ~password:(x327 : crypto_BinaryLike) ->
          fun ~options:(x328 : crypto_CipherCCMOptions) ->
            crypto_DecipherCCM_of_js
              (Ojs.call Import.crypto "createDecipher"
                 [|(crypto_CipherCCMTypes_to_js x326);(crypto_BinaryLike_to_js
                                                         x327);(crypto_CipherCCMOptions_to_js
                                                                  x328)|])
    let (createDecipher :
      algorithm:crypto_CipherGCMTypes ->
        password:crypto_BinaryLike ->
          ?options:crypto_CipherGCMOptions -> unit -> crypto_DecipherGCM)
      =
      fun ~algorithm:(x329 : crypto_CipherGCMTypes) ->
        fun ~password:(x330 : crypto_BinaryLike) ->
          fun ?options:(x331 : crypto_CipherGCMOptions option) ->
            fun () ->
              crypto_DecipherGCM_of_js
                (let x334 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x334 "createDecipher") "apply"
                   [|x334;((let x332 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x332 "push"
                                 [|(crypto_CipherGCMTypes_to_js x329)|]);
                            ignore
                              (Ojs.call x332 "push"
                                 [|(crypto_BinaryLike_to_js x330)|]);
                            (match x331 with
                             | Some x333 ->
                                 ignore
                                   (Ojs.call x332 "push"
                                      [|(crypto_CipherGCMOptions_to_js x333)|])
                             | None -> ());
                            x332))|])
    let (createDecipher :
      algorithm:string ->
        password:crypto_BinaryLike ->
          ?options:Stream.TransformOptions.t -> unit -> crypto_Decipher)
      =
      fun ~algorithm:(x335 : string) ->
        fun ~password:(x336 : crypto_BinaryLike) ->
          fun ?options:(x337 : Stream.TransformOptions.t option) ->
            fun () ->
              crypto_Decipher_of_js
                (let x340 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x340 "createDecipher") "apply"
                   [|x340;((let x338 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x338 "push"
                                 [|(Ojs.string_to_js x335)|]);
                            ignore
                              (Ojs.call x338 "push"
                                 [|(crypto_BinaryLike_to_js x336)|]);
                            (match x337 with
                             | Some x339 ->
                                 ignore
                                   (Ojs.call x338 "push"
                                      [|(Stream.TransformOptions.t_to_js x339)|])
                             | None -> ());
                            x338))|])
    let (createDecipheriv :
      algorithm:crypto_CipherCCMTypes ->
        key:crypto_CipherKey ->
          iv:crypto_BinaryLike or_null ->
            options:crypto_CipherCCMOptions -> crypto_DecipherCCM)
      =
      fun ~algorithm:(x341 : crypto_CipherCCMTypes) ->
        fun ~key:(x342 : crypto_CipherKey) ->
          fun ~iv:(x343 : crypto_BinaryLike or_null) ->
            fun ~options:(x345 : crypto_CipherCCMOptions) ->
              crypto_DecipherCCM_of_js
                (Ojs.call Import.crypto "createDecipheriv"
                   [|(crypto_CipherCCMTypes_to_js x341);(crypto_CipherKey_to_js
                                                           x342);(or_null_to_js
                                                                    crypto_BinaryLike_to_js
                                                                    x343);(
                     crypto_CipherCCMOptions_to_js x345)|])
    let (createDecipheriv :
      algorithm:crypto_CipherGCMTypes ->
        key:crypto_CipherKey ->
          iv:crypto_BinaryLike or_null ->
            ?options:crypto_CipherGCMOptions -> unit -> crypto_DecipherGCM)
      =
      fun ~algorithm:(x346 : crypto_CipherGCMTypes) ->
        fun ~key:(x347 : crypto_CipherKey) ->
          fun ~iv:(x348 : crypto_BinaryLike or_null) ->
            fun ?options:(x349 : crypto_CipherGCMOptions option) ->
              fun () ->
                crypto_DecipherGCM_of_js
                  (let x353 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x353 "createDecipheriv")
                     "apply"
                     [|x353;((let x350 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x350 "push"
                                   [|(crypto_CipherGCMTypes_to_js x346)|]);
                              ignore
                                (Ojs.call x350 "push"
                                   [|(crypto_CipherKey_to_js x347)|]);
                              ignore
                                (Ojs.call x350 "push"
                                   [|(or_null_to_js crypto_BinaryLike_to_js
                                        x348)|]);
                              (match x349 with
                               | Some x351 ->
                                   ignore
                                     (Ojs.call x350 "push"
                                        [|(crypto_CipherGCMOptions_to_js x351)|])
                               | None -> ());
                              x350))|])
    let (createDecipheriv :
      algorithm:string ->
        key:crypto_CipherKey ->
          iv:crypto_BinaryLike or_null ->
            ?options:Stream.TransformOptions.t -> unit -> crypto_Decipher)
      =
      fun ~algorithm:(x354 : string) ->
        fun ~key:(x355 : crypto_CipherKey) ->
          fun ~iv:(x356 : crypto_BinaryLike or_null) ->
            fun ?options:(x357 : Stream.TransformOptions.t option) ->
              fun () ->
                crypto_Decipher_of_js
                  (let x361 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x361 "createDecipheriv")
                     "apply"
                     [|x361;((let x358 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x358 "push"
                                   [|(Ojs.string_to_js x354)|]);
                              ignore
                                (Ojs.call x358 "push"
                                   [|(crypto_CipherKey_to_js x355)|]);
                              ignore
                                (Ojs.call x358 "push"
                                   [|(or_null_to_js crypto_BinaryLike_to_js
                                        x356)|]);
                              (match x357 with
                               | Some x359 ->
                                   ignore
                                     (Ojs.call x358 "push"
                                        [|(Stream.TransformOptions.t_to_js
                                             x359)|])
                               | None -> ());
                              x358))|])
    module Decipher =
      struct
        type t = crypto_Decipher
        let rec t_of_js : Ojs.t -> t =
          fun (x363 : Ojs.t) -> crypto_Decipher_of_js x363
        and t_to_js : t -> Ojs.t =
          fun (x362 : crypto_Decipher) -> crypto_Decipher_to_js x362
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Decipher") [||])
        let (update : t -> data:ArrayBufferView.t -> Buffer.t) =
          fun (x365 : t) ->
            fun ~data:(x364 : ArrayBufferView.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x365) "update"
                   [|(ArrayBufferView.t_to_js x364)|])
        let (update' :
          t -> data:string -> input_encoding:crypto_Encoding -> Buffer.t) =
          fun (x368 : t) ->
            fun ~data:(x366 : string) ->
              fun ~input_encoding:(x367 : crypto_Encoding) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x368) "update"
                     [|(Ojs.string_to_js x366);(crypto_Encoding_to_js x367)|])
        let (update'' :
          t ->
            data:ArrayBufferView.t ->
              input_encoding:never or_undefined ->
                output_encoding:crypto_Encoding -> string)
          =
          fun (x373 : t) ->
            fun ~data:(x369 : ArrayBufferView.t) ->
              fun ~input_encoding:(x370 : never or_undefined) ->
                fun ~output_encoding:(x372 : crypto_Encoding) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x373) "update"
                       [|(ArrayBufferView.t_to_js x369);(or_undefined_to_js
                                                           never_to_js x370);(
                         crypto_Encoding_to_js x372)|])
        let (update''' :
          t ->
            data:string ->
              input_encoding:crypto_Encoding or_undefined ->
                output_encoding:crypto_Encoding -> string)
          =
          fun (x378 : t) ->
            fun ~data:(x374 : string) ->
              fun ~input_encoding:(x375 : crypto_Encoding or_undefined) ->
                fun ~output_encoding:(x377 : crypto_Encoding) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x378) "update"
                       [|(Ojs.string_to_js x374);(or_undefined_to_js
                                                    crypto_Encoding_to_js
                                                    x375);(crypto_Encoding_to_js
                                                             x377)|])
        let (final : t -> Buffer.t) =
          fun (x379 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x379) "final" [||])
        let (final' : t -> output_encoding:BufferEncoding.t -> string) =
          fun (x381 : t) ->
            fun ~output_encoding:(x380 : BufferEncoding.t) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x381) "final"
                   [|(BufferEncoding.t_to_js x380)|])
        let (setAutoPadding : t -> ?auto_padding:bool -> unit -> t) =
          fun (x385 : t) ->
            fun ?auto_padding:(x382 : bool option) ->
              fun () ->
                t_of_js
                  (let x386 = t_to_js x385 in
                   Ojs.call (Ojs.get_prop_ascii x386 "setAutoPadding")
                     "apply"
                     [|x386;((let x383 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x382 with
                               | Some x384 ->
                                   ignore
                                     (Ojs.call x383 "push"
                                        [|(Ojs.bool_to_js x384)|])
                               | None -> ());
                              x383))|])
        let (cast : t -> Stream.Transform.t) =
          fun (x387 : t) -> Stream.Transform.t_of_js (t_to_js x387)
      end
    module DecipherCCM =
      struct
        type t = crypto_DecipherCCM
        let rec t_of_js : Ojs.t -> t =
          fun (x389 : Ojs.t) -> crypto_DecipherCCM_of_js x389
        and t_to_js : t -> Ojs.t =
          fun (x388 : crypto_DecipherCCM) -> crypto_DecipherCCM_to_js x388
        let (setAuthTag : t -> buffer:ArrayBufferView.t -> t) =
          fun (x391 : t) ->
            fun ~buffer:(x390 : ArrayBufferView.t) ->
              t_of_js
                (Ojs.call (t_to_js x391) "setAuthTag"
                   [|(ArrayBufferView.t_to_js x390)|])
        let (setAAD :
          t -> buffer:ArrayBufferView.t -> options:AnonymousInterface0.t -> t)
          =
          fun (x394 : t) ->
            fun ~buffer:(x392 : ArrayBufferView.t) ->
              fun ~options:(x393 : AnonymousInterface0.t) ->
                t_of_js
                  (Ojs.call (t_to_js x394) "setAAD"
                     [|(ArrayBufferView.t_to_js x392);(AnonymousInterface0.t_to_js
                                                         x393)|])
        let (cast : t -> crypto_Decipher) =
          fun (x395 : t) -> crypto_Decipher_of_js (t_to_js x395)
      end
    module DecipherGCM =
      struct
        type t = crypto_DecipherGCM
        let rec t_of_js : Ojs.t -> t =
          fun (x397 : Ojs.t) -> crypto_DecipherGCM_of_js x397
        and t_to_js : t -> Ojs.t =
          fun (x396 : crypto_DecipherGCM) -> crypto_DecipherGCM_to_js x396
        let (setAuthTag : t -> buffer:ArrayBufferView.t -> t) =
          fun (x399 : t) ->
            fun ~buffer:(x398 : ArrayBufferView.t) ->
              t_of_js
                (Ojs.call (t_to_js x399) "setAuthTag"
                   [|(ArrayBufferView.t_to_js x398)|])
        let (setAAD :
          t ->
            buffer:ArrayBufferView.t ->
              ?options:AnonymousInterface0.t -> unit -> t)
          =
          fun (x404 : t) ->
            fun ~buffer:(x400 : ArrayBufferView.t) ->
              fun ?options:(x401 : AnonymousInterface0.t option) ->
                fun () ->
                  t_of_js
                    (let x405 = t_to_js x404 in
                     Ojs.call (Ojs.get_prop_ascii x405 "setAAD") "apply"
                       [|x405;((let x402 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x402 "push"
                                     [|(ArrayBufferView.t_to_js x400)|]);
                                (match x401 with
                                 | Some x403 ->
                                     ignore
                                       (Ojs.call x402 "push"
                                          [|(AnonymousInterface0.t_to_js x403)|])
                                 | None -> ());
                                x402))|])
        let (cast : t -> crypto_Decipher) =
          fun (x406 : t) -> crypto_Decipher_of_js (t_to_js x406)
      end
    module PrivateKeyInput =
      struct
        type t = crypto_PrivateKeyInput
        let rec t_of_js : Ojs.t -> t =
          fun (x408 : Ojs.t) -> crypto_PrivateKeyInput_of_js x408
        and t_to_js : t -> Ojs.t =
          fun (x407 : crypto_PrivateKeyInput) ->
            crypto_PrivateKeyInput_to_js x407
        let (get_key : t -> Buffer.t or_string) =
          fun (x409 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x409) "key")
        let (set_key : t -> Buffer.t or_string -> unit) =
          fun (x411 : t) ->
            fun (x412 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x411) "key"
                (or_string_to_js Buffer.t_to_js x412)
        let (get_format : t -> crypto_KeyFormat) =
          fun (x414 : t) ->
            crypto_KeyFormat_of_js
              (Ojs.get_prop_ascii (t_to_js x414) "format")
        let (set_format : t -> crypto_KeyFormat -> unit) =
          fun (x415 : t) ->
            fun (x416 : crypto_KeyFormat) ->
              Ojs.set_prop_ascii (t_to_js x415) "format"
                (crypto_KeyFormat_to_js x416)
        let (get_type : t -> [ `pkcs1  | `pkcs8  | `sec1 ]) =
          fun (x417 : t) ->
            let x418 = Ojs.get_prop_ascii (t_to_js x417) "type" in
            match Ojs.string_of_js x418 with
            | "pkcs1" -> `pkcs1
            | "pkcs8" -> `pkcs8
            | "sec1" -> `sec1
            | _ -> assert false
        let (set_type : t -> [ `pkcs1  | `pkcs8  | `sec1 ] -> unit) =
          fun (x419 : t) ->
            fun (x420 : [ `pkcs1  | `pkcs8  | `sec1 ]) ->
              Ojs.set_prop_ascii (t_to_js x419) "type"
                (match x420 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `pkcs8 -> Ojs.string_to_js "pkcs8"
                 | `sec1 -> Ojs.string_to_js "sec1")
        let (get_passphrase : t -> Buffer.t or_string) =
          fun (x421 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x421) "passphrase")
        let (set_passphrase : t -> Buffer.t or_string -> unit) =
          fun (x423 : t) ->
            fun (x424 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x423) "passphrase"
                (or_string_to_js Buffer.t_to_js x424)
      end
    module PublicKeyInput =
      struct
        type t = crypto_PublicKeyInput
        let rec t_of_js : Ojs.t -> t =
          fun (x427 : Ojs.t) -> crypto_PublicKeyInput_of_js x427
        and t_to_js : t -> Ojs.t =
          fun (x426 : crypto_PublicKeyInput) ->
            crypto_PublicKeyInput_to_js x426
        let (get_key : t -> Buffer.t or_string) =
          fun (x428 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x428) "key")
        let (set_key : t -> Buffer.t or_string -> unit) =
          fun (x430 : t) ->
            fun (x431 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x430) "key"
                (or_string_to_js Buffer.t_to_js x431)
        let (get_format : t -> crypto_KeyFormat) =
          fun (x433 : t) ->
            crypto_KeyFormat_of_js
              (Ojs.get_prop_ascii (t_to_js x433) "format")
        let (set_format : t -> crypto_KeyFormat -> unit) =
          fun (x434 : t) ->
            fun (x435 : crypto_KeyFormat) ->
              Ojs.set_prop_ascii (t_to_js x434) "format"
                (crypto_KeyFormat_to_js x435)
        let (get_type : t -> [ `pkcs1  | `spki ]) =
          fun (x436 : t) ->
            let x437 = Ojs.get_prop_ascii (t_to_js x436) "type" in
            match Ojs.string_of_js x437 with
            | "pkcs1" -> `pkcs1
            | "spki" -> `spki
            | _ -> assert false
        let (set_type : t -> [ `pkcs1  | `spki ] -> unit) =
          fun (x438 : t) ->
            fun (x439 : [ `pkcs1  | `spki ]) ->
              Ojs.set_prop_ascii (t_to_js x438) "type"
                (match x439 with
                 | `pkcs1 -> Ojs.string_to_js "pkcs1"
                 | `spki -> Ojs.string_to_js "spki")
      end
    let (createPrivateKey :
      key:(Buffer.t, crypto_PrivateKeyInput) union2 or_string ->
        crypto_KeyObject)
      =
      fun ~key:(x440 : (Buffer.t, crypto_PrivateKeyInput) union2 or_string)
        ->
        crypto_KeyObject_of_js
          (Ojs.call Import.crypto "createPrivateKey"
             [|(or_string_to_js
                  (fun (x441 : (Buffer.t, crypto_PrivateKeyInput) union2) ->
                     union2_to_js Buffer.t_to_js crypto_PrivateKeyInput_to_js
                       x441) x440)|])
    let (createPublicKey :
      key:([ `U_s21_pkcs1 of crypto_PublicKeyInput 
           | `U_s23_private of crypto_KeyObject 
           | `U_s24_public of crypto_KeyObject 
           | `U_s27_secret of crypto_KeyObject 
           | `U_s28_spki of crypto_PublicKeyInput ],
        Buffer.t) or_ or_string -> crypto_KeyObject)
      =
      fun
        ~key:(x444 :
               ([ `U_s21_pkcs1 of crypto_PublicKeyInput 
                | `U_s23_private of crypto_KeyObject 
                | `U_s24_public of crypto_KeyObject 
                | `U_s27_secret of crypto_KeyObject 
                | `U_s28_spki of crypto_PublicKeyInput ], Buffer.t) or_
                 or_string)
        ->
        crypto_KeyObject_of_js
          (Ojs.call Import.crypto "createPublicKey"
             [|(or_string_to_js
                  (fun
                     (x445 :
                       ([ `U_s21_pkcs1 of crypto_PublicKeyInput 
                        | `U_s23_private of crypto_KeyObject 
                        | `U_s24_public of crypto_KeyObject 
                        | `U_s27_secret of crypto_KeyObject 
                        | `U_s28_spki of crypto_PublicKeyInput ], Buffer.t)
                         or_)
                     ->
                     or__to_js
                       (fun
                          (x446 :
                            [ `U_s21_pkcs1 of crypto_PublicKeyInput 
                            | `U_s23_private of crypto_KeyObject 
                            | `U_s24_public of crypto_KeyObject 
                            | `U_s27_secret of crypto_KeyObject 
                            | `U_s28_spki of crypto_PublicKeyInput ])
                          ->
                          match x446 with
                          | `U_s21_pkcs1 x447 ->
                              crypto_PublicKeyInput_to_js x447
                          | `U_s23_private x448 ->
                              crypto_KeyObject_to_js x448
                          | `U_s24_public x449 -> crypto_KeyObject_to_js x449
                          | `U_s27_secret x450 -> crypto_KeyObject_to_js x450
                          | `U_s28_spki x451 ->
                              crypto_PublicKeyInput_to_js x451)
                       Buffer.t_to_js x445) x444)|])
    let (createSecretKey : key:ArrayBufferView.t -> crypto_KeyObject) =
      fun ~key:(x453 : ArrayBufferView.t) ->
        crypto_KeyObject_of_js
          (Ojs.call Import.crypto "createSecretKey"
             [|(ArrayBufferView.t_to_js x453)|])
    let (createSign :
      algorithm:string ->
        ?options:Stream.WritableOptions.t -> unit -> crypto_Signer)
      =
      fun ~algorithm:(x454 : string) ->
        fun ?options:(x455 : Stream.WritableOptions.t option) ->
          fun () ->
            crypto_Signer_of_js
              (let x458 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x458 "createSign") "apply"
                 [|x458;((let x456 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x456 "push" [|(Ojs.string_to_js x454)|]);
                          (match x455 with
                           | Some x457 ->
                               ignore
                                 (Ojs.call x456 "push"
                                    [|(Stream.WritableOptions.t_to_js x457)|])
                           | None -> ());
                          x456))|])
    module DSAEncoding =
      struct
        type t = [ `der  | `ieee_p1363 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x460 : Ojs.t) ->
            let x461 = x460 in
            match Ojs.string_of_js x461 with
            | "der" -> `der
            | "ieee-p1363" -> `ieee_p1363
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x459 : [ `der  | `ieee_p1363 ]) ->
            match x459 with
            | `der -> Ojs.string_to_js "der"
            | `ieee_p1363 -> Ojs.string_to_js "ieee-p1363"
      end
    module SigningOptions =
      struct
        type t = crypto_SigningOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x463 : Ojs.t) -> crypto_SigningOptions_of_js x463
        and t_to_js : t -> Ojs.t =
          fun (x462 : crypto_SigningOptions) ->
            crypto_SigningOptions_to_js x462
        let (get_padding : t -> int) =
          fun (x464 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x464) "padding")
        let (set_padding : t -> int -> unit) =
          fun (x465 : t) ->
            fun (x466 : int) ->
              Ojs.set_prop_ascii (t_to_js x465) "padding"
                (Ojs.int_to_js x466)
        let (get_saltLength : t -> int) =
          fun (x467 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x467) "saltLength")
        let (set_saltLength : t -> int -> unit) =
          fun (x468 : t) ->
            fun (x469 : int) ->
              Ojs.set_prop_ascii (t_to_js x468) "saltLength"
                (Ojs.int_to_js x469)
        let (get_dsaEncoding : t -> crypto_DSAEncoding) =
          fun (x470 : t) ->
            crypto_DSAEncoding_of_js
              (Ojs.get_prop_ascii (t_to_js x470) "dsaEncoding")
        let (set_dsaEncoding : t -> crypto_DSAEncoding -> unit) =
          fun (x471 : t) ->
            fun (x472 : crypto_DSAEncoding) ->
              Ojs.set_prop_ascii (t_to_js x471) "dsaEncoding"
                (crypto_DSAEncoding_to_js x472)
      end
    module SignPrivateKeyInput =
      struct
        type t = crypto_SignPrivateKeyInput
        let rec t_of_js : Ojs.t -> t =
          fun (x474 : Ojs.t) -> crypto_SignPrivateKeyInput_of_js x474
        and t_to_js : t -> Ojs.t =
          fun (x473 : crypto_SignPrivateKeyInput) ->
            crypto_SignPrivateKeyInput_to_js x473
        let (cast : t -> crypto_PrivateKeyInput) =
          fun (x475 : t) -> crypto_PrivateKeyInput_of_js (t_to_js x475)
        let (cast' : t -> crypto_SigningOptions) =
          fun (x476 : t) -> crypto_SigningOptions_of_js (t_to_js x476)
      end
    module SignKeyObjectInput =
      struct
        type t = crypto_SignKeyObjectInput
        let rec t_of_js : Ojs.t -> t =
          fun (x478 : Ojs.t) -> crypto_SignKeyObjectInput_of_js x478
        and t_to_js : t -> Ojs.t =
          fun (x477 : crypto_SignKeyObjectInput) ->
            crypto_SignKeyObjectInput_to_js x477
        let (get_key : t -> crypto_KeyObject) =
          fun (x479 : t) ->
            crypto_KeyObject_of_js (Ojs.get_prop_ascii (t_to_js x479) "key")
        let (set_key : t -> crypto_KeyObject -> unit) =
          fun (x480 : t) ->
            fun (x481 : crypto_KeyObject) ->
              Ojs.set_prop_ascii (t_to_js x480) "key"
                (crypto_KeyObject_to_js x481)
        let (cast : t -> crypto_SigningOptions) =
          fun (x482 : t) -> crypto_SigningOptions_of_js (t_to_js x482)
      end
    module VerifyPublicKeyInput =
      struct
        type t = crypto_VerifyPublicKeyInput
        let rec t_of_js : Ojs.t -> t =
          fun (x484 : Ojs.t) -> crypto_VerifyPublicKeyInput_of_js x484
        and t_to_js : t -> Ojs.t =
          fun (x483 : crypto_VerifyPublicKeyInput) ->
            crypto_VerifyPublicKeyInput_to_js x483
        let (cast : t -> crypto_PublicKeyInput) =
          fun (x485 : t) -> crypto_PublicKeyInput_of_js (t_to_js x485)
        let (cast' : t -> crypto_SigningOptions) =
          fun (x486 : t) -> crypto_SigningOptions_of_js (t_to_js x486)
      end
    module VerifyKeyObjectInput =
      struct
        type t = crypto_VerifyKeyObjectInput
        let rec t_of_js : Ojs.t -> t =
          fun (x488 : Ojs.t) -> crypto_VerifyKeyObjectInput_of_js x488
        and t_to_js : t -> Ojs.t =
          fun (x487 : crypto_VerifyKeyObjectInput) ->
            crypto_VerifyKeyObjectInput_to_js x487
        let (get_key : t -> crypto_KeyObject) =
          fun (x489 : t) ->
            crypto_KeyObject_of_js (Ojs.get_prop_ascii (t_to_js x489) "key")
        let (set_key : t -> crypto_KeyObject -> unit) =
          fun (x490 : t) ->
            fun (x491 : crypto_KeyObject) ->
              Ojs.set_prop_ascii (t_to_js x490) "key"
                (crypto_KeyObject_to_js x491)
        let (cast : t -> crypto_SigningOptions) =
          fun (x492 : t) -> crypto_SigningOptions_of_js (t_to_js x492)
      end
    module KeyLike =
      struct
        type t = (Buffer.t, crypto_KeyObject) union2 or_string
        let rec t_of_js : Ojs.t -> t =
          fun (x497 : Ojs.t) ->
            or_string_of_js
              (fun (x498 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js crypto_KeyObject_of_js x498)
              x497
        and t_to_js : t -> Ojs.t =
          fun (x493 : (Buffer.t, crypto_KeyObject) union2 or_string) ->
            or_string_to_js
              (fun (x494 : (Buffer.t, crypto_KeyObject) union2) ->
                 union2_to_js Buffer.t_to_js crypto_KeyObject_to_js x494)
              x493
      end
    module Signer =
      struct
        type t = crypto_Signer
        let rec t_of_js : Ojs.t -> t =
          fun (x502 : Ojs.t) -> crypto_Signer_of_js x502
        and t_to_js : t -> Ojs.t =
          fun (x501 : crypto_Signer) -> crypto_Signer_to_js x501
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Signer") [||])
        let (update : t -> data:crypto_BinaryLike -> t) =
          fun (x504 : t) ->
            fun ~data:(x503 : crypto_BinaryLike) ->
              t_of_js
                (Ojs.call (t_to_js x504) "update"
                   [|(crypto_BinaryLike_to_js x503)|])
        let (update' :
          t -> data:string -> input_encoding:crypto_Encoding -> t) =
          fun (x507 : t) ->
            fun ~data:(x505 : string) ->
              fun ~input_encoding:(x506 : crypto_Encoding) ->
                t_of_js
                  (Ojs.call (t_to_js x507) "update"
                     [|(Ojs.string_to_js x505);(crypto_Encoding_to_js x506)|])
        let (sign :
          t ->
            private_key:([ `U_s11_der of crypto_SignKeyObjectInput 
                         | `U_s18_ieee_p1363 of crypto_SignKeyObjectInput ],
              [ `U_s21_pkcs1 of crypto_SignPrivateKeyInput 
              | `U_s22_pkcs8 of crypto_SignPrivateKeyInput 
              | `U_s23_private of crypto_KeyLike 
              | `U_s24_public of crypto_KeyLike 
              | `U_s26_sec1 of crypto_SignPrivateKeyInput 
              | `U_s27_secret of crypto_KeyLike ]) union2 -> Buffer.t)
          =
          fun (x519 : t) ->
            fun
              ~private_key:(x508 :
                             ([ `U_s11_der of crypto_SignKeyObjectInput 
                              | `U_s18_ieee_p1363 of
                                  crypto_SignKeyObjectInput ],
                               [ `U_s21_pkcs1 of crypto_SignPrivateKeyInput 
                               | `U_s22_pkcs8 of crypto_SignPrivateKeyInput 
                               | `U_s23_private of crypto_KeyLike 
                               | `U_s24_public of crypto_KeyLike 
                               | `U_s26_sec1 of crypto_SignPrivateKeyInput 
                               | `U_s27_secret of crypto_KeyLike ]) union2)
              ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x519) "sign"
                   [|(union2_to_js
                        (fun
                           (x509 :
                             [ `U_s11_der of crypto_SignKeyObjectInput 
                             | `U_s18_ieee_p1363 of crypto_SignKeyObjectInput ])
                           ->
                           match x509 with
                           | `U_s11_der x510 ->
                               crypto_SignKeyObjectInput_to_js x510
                           | `U_s18_ieee_p1363 x511 ->
                               crypto_SignKeyObjectInput_to_js x511)
                        (fun
                           (x512 :
                             [ `U_s21_pkcs1 of crypto_SignPrivateKeyInput 
                             | `U_s22_pkcs8 of crypto_SignPrivateKeyInput 
                             | `U_s23_private of crypto_KeyLike 
                             | `U_s24_public of crypto_KeyLike 
                             | `U_s26_sec1 of crypto_SignPrivateKeyInput 
                             | `U_s27_secret of crypto_KeyLike ])
                           ->
                           match x512 with
                           | `U_s21_pkcs1 x513 ->
                               crypto_SignPrivateKeyInput_to_js x513
                           | `U_s22_pkcs8 x514 ->
                               crypto_SignPrivateKeyInput_to_js x514
                           | `U_s23_private x515 -> crypto_KeyLike_to_js x515
                           | `U_s24_public x516 -> crypto_KeyLike_to_js x516
                           | `U_s26_sec1 x517 ->
                               crypto_SignPrivateKeyInput_to_js x517
                           | `U_s27_secret x518 -> crypto_KeyLike_to_js x518)
                        x508)|])
        let (sign' :
          t ->
            private_key:([ `U_s11_der of crypto_SignKeyObjectInput 
                         | `U_s18_ieee_p1363 of crypto_SignKeyObjectInput ],
              [ `U_s21_pkcs1 of crypto_SignPrivateKeyInput 
              | `U_s22_pkcs8 of crypto_SignPrivateKeyInput 
              | `U_s23_private of crypto_KeyLike 
              | `U_s24_public of crypto_KeyLike 
              | `U_s26_sec1 of crypto_SignPrivateKeyInput 
              | `U_s27_secret of crypto_KeyLike ]) union2 ->
              output_format:crypto_BinaryToTextEncoding -> string)
          =
          fun (x532 : t) ->
            fun
              ~private_key:(x520 :
                             ([ `U_s11_der of crypto_SignKeyObjectInput 
                              | `U_s18_ieee_p1363 of
                                  crypto_SignKeyObjectInput ],
                               [ `U_s21_pkcs1 of crypto_SignPrivateKeyInput 
                               | `U_s22_pkcs8 of crypto_SignPrivateKeyInput 
                               | `U_s23_private of crypto_KeyLike 
                               | `U_s24_public of crypto_KeyLike 
                               | `U_s26_sec1 of crypto_SignPrivateKeyInput 
                               | `U_s27_secret of crypto_KeyLike ]) union2)
              ->
              fun ~output_format:(x531 : crypto_BinaryToTextEncoding) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x532) "sign"
                     [|(union2_to_js
                          (fun
                             (x521 :
                               [ `U_s11_der of crypto_SignKeyObjectInput 
                               | `U_s18_ieee_p1363 of
                                   crypto_SignKeyObjectInput ])
                             ->
                             match x521 with
                             | `U_s11_der x522 ->
                                 crypto_SignKeyObjectInput_to_js x522
                             | `U_s18_ieee_p1363 x523 ->
                                 crypto_SignKeyObjectInput_to_js x523)
                          (fun
                             (x524 :
                               [ `U_s21_pkcs1 of crypto_SignPrivateKeyInput 
                               | `U_s22_pkcs8 of crypto_SignPrivateKeyInput 
                               | `U_s23_private of crypto_KeyLike 
                               | `U_s24_public of crypto_KeyLike 
                               | `U_s26_sec1 of crypto_SignPrivateKeyInput 
                               | `U_s27_secret of crypto_KeyLike ])
                             ->
                             match x524 with
                             | `U_s21_pkcs1 x525 ->
                                 crypto_SignPrivateKeyInput_to_js x525
                             | `U_s22_pkcs8 x526 ->
                                 crypto_SignPrivateKeyInput_to_js x526
                             | `U_s23_private x527 ->
                                 crypto_KeyLike_to_js x527
                             | `U_s24_public x528 ->
                                 crypto_KeyLike_to_js x528
                             | `U_s26_sec1 x529 ->
                                 crypto_SignPrivateKeyInput_to_js x529
                             | `U_s27_secret x530 ->
                                 crypto_KeyLike_to_js x530) x520);(crypto_BinaryToTextEncoding_to_js
                                                                    x531)|])
        let (cast : t -> Stream.Writable.t) =
          fun (x533 : t) -> Stream.Writable.t_of_js (t_to_js x533)
      end
    let (createVerify :
      algorithm:string ->
        ?options:Stream.WritableOptions.t -> unit -> crypto_Verify)
      =
      fun ~algorithm:(x534 : string) ->
        fun ?options:(x535 : Stream.WritableOptions.t option) ->
          fun () ->
            crypto_Verify_of_js
              (let x538 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x538 "createVerify") "apply"
                 [|x538;((let x536 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x536 "push" [|(Ojs.string_to_js x534)|]);
                          (match x535 with
                           | Some x537 ->
                               ignore
                                 (Ojs.call x536 "push"
                                    [|(Stream.WritableOptions.t_to_js x537)|])
                           | None -> ());
                          x536))|])
    module Verify =
      struct
        type t = crypto_Verify
        let rec t_of_js : Ojs.t -> t =
          fun (x540 : Ojs.t) -> crypto_Verify_of_js x540
        and t_to_js : t -> Ojs.t =
          fun (x539 : crypto_Verify) -> crypto_Verify_to_js x539
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "Verify") [||])
        let (update : t -> data:crypto_BinaryLike -> t) =
          fun (x542 : t) ->
            fun ~data:(x541 : crypto_BinaryLike) ->
              t_of_js
                (Ojs.call (t_to_js x542) "update"
                   [|(crypto_BinaryLike_to_js x541)|])
        let (update' :
          t -> data:string -> input_encoding:crypto_Encoding -> t) =
          fun (x545 : t) ->
            fun ~data:(x543 : string) ->
              fun ~input_encoding:(x544 : crypto_Encoding) ->
                t_of_js
                  (Ojs.call (t_to_js x545) "update"
                     [|(Ojs.string_to_js x543);(crypto_Encoding_to_js x544)|])
        let (verify :
          t ->
            object_:([ `U_s11_der of crypto_VerifyKeyObjectInput 
                     | `U_s18_ieee_p1363 of crypto_VerifyKeyObjectInput ],
              [ `U_s21_pkcs1 of crypto_VerifyPublicKeyInput 
              | `U_s23_private of crypto_KeyLike 
              | `U_s24_public of crypto_KeyLike 
              | `U_s27_secret of crypto_KeyLike 
              | `U_s28_spki of crypto_VerifyPublicKeyInput ]) union2 ->
              signature:ArrayBufferView.t -> bool)
          =
          fun (x557 : t) ->
            fun
              ~object_:(x546 :
                         ([ `U_s11_der of crypto_VerifyKeyObjectInput 
                          | `U_s18_ieee_p1363 of crypto_VerifyKeyObjectInput ],
                           [ `U_s21_pkcs1 of crypto_VerifyPublicKeyInput 
                           | `U_s23_private of crypto_KeyLike 
                           | `U_s24_public of crypto_KeyLike 
                           | `U_s27_secret of crypto_KeyLike 
                           | `U_s28_spki of crypto_VerifyPublicKeyInput ])
                           union2)
              ->
              fun ~signature:(x556 : ArrayBufferView.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x557) "verify"
                     [|(union2_to_js
                          (fun
                             (x547 :
                               [ `U_s11_der of crypto_VerifyKeyObjectInput 
                               | `U_s18_ieee_p1363 of
                                   crypto_VerifyKeyObjectInput ])
                             ->
                             match x547 with
                             | `U_s11_der x548 ->
                                 crypto_VerifyKeyObjectInput_to_js x548
                             | `U_s18_ieee_p1363 x549 ->
                                 crypto_VerifyKeyObjectInput_to_js x549)
                          (fun
                             (x550 :
                               [ `U_s21_pkcs1 of crypto_VerifyPublicKeyInput 
                               | `U_s23_private of crypto_KeyLike 
                               | `U_s24_public of crypto_KeyLike 
                               | `U_s27_secret of crypto_KeyLike 
                               | `U_s28_spki of crypto_VerifyPublicKeyInput ])
                             ->
                             match x550 with
                             | `U_s21_pkcs1 x551 ->
                                 crypto_VerifyPublicKeyInput_to_js x551
                             | `U_s23_private x552 ->
                                 crypto_KeyLike_to_js x552
                             | `U_s24_public x553 ->
                                 crypto_KeyLike_to_js x553
                             | `U_s27_secret x554 ->
                                 crypto_KeyLike_to_js x554
                             | `U_s28_spki x555 ->
                                 crypto_VerifyPublicKeyInput_to_js x555) x546);(
                       ArrayBufferView.t_to_js x556)|])
        let (verify' :
          t ->
            object_:([ `U_s11_der of crypto_VerifyKeyObjectInput 
                     | `U_s18_ieee_p1363 of crypto_VerifyKeyObjectInput ],
              [ `U_s21_pkcs1 of crypto_VerifyPublicKeyInput 
              | `U_s23_private of crypto_KeyLike 
              | `U_s24_public of crypto_KeyLike 
              | `U_s27_secret of crypto_KeyLike 
              | `U_s28_spki of crypto_VerifyPublicKeyInput ]) union2 ->
              signature:string ->
                ?signature_format:crypto_BinaryToTextEncoding -> unit -> bool)
          =
          fun (x572 : t) ->
            fun
              ~object_:(x558 :
                         ([ `U_s11_der of crypto_VerifyKeyObjectInput 
                          | `U_s18_ieee_p1363 of crypto_VerifyKeyObjectInput ],
                           [ `U_s21_pkcs1 of crypto_VerifyPublicKeyInput 
                           | `U_s23_private of crypto_KeyLike 
                           | `U_s24_public of crypto_KeyLike 
                           | `U_s27_secret of crypto_KeyLike 
                           | `U_s28_spki of crypto_VerifyPublicKeyInput ])
                           union2)
              ->
              fun ~signature:(x559 : string) ->
                fun
                  ?signature_format:(x560 :
                                      crypto_BinaryToTextEncoding option)
                  ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x573 = t_to_js x572 in
                       Ojs.call (Ojs.get_prop_ascii x573 "verify") "apply"
                         [|x573;((let x561 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x561 "push"
                                       [|(union2_to_js
                                            (fun
                                               (x563 :
                                                 [
                                                   `U_s11_der of
                                                     crypto_VerifyKeyObjectInput
                                                      | `U_s18_ieee_p1363 of
                                                          crypto_VerifyKeyObjectInput
                                                          ])
                                               ->
                                               match x563 with
                                               | `U_s11_der x564 ->
                                                   crypto_VerifyKeyObjectInput_to_js
                                                     x564
                                               | `U_s18_ieee_p1363 x565 ->
                                                   crypto_VerifyKeyObjectInput_to_js
                                                     x565)
                                            (fun
                                               (x566 :
                                                 [
                                                   `U_s21_pkcs1 of
                                                     crypto_VerifyPublicKeyInput
                                                      | `U_s23_private of
                                                          crypto_KeyLike 
                                                 | `U_s24_public of
                                                     crypto_KeyLike 
                                                 | `U_s27_secret of
                                                     crypto_KeyLike 
                                                 | `U_s28_spki of
                                                     crypto_VerifyPublicKeyInput
                                                     ])
                                               ->
                                               match x566 with
                                               | `U_s21_pkcs1 x567 ->
                                                   crypto_VerifyPublicKeyInput_to_js
                                                     x567
                                               | `U_s23_private x568 ->
                                                   crypto_KeyLike_to_js x568
                                               | `U_s24_public x569 ->
                                                   crypto_KeyLike_to_js x569
                                               | `U_s27_secret x570 ->
                                                   crypto_KeyLike_to_js x570
                                               | `U_s28_spki x571 ->
                                                   crypto_VerifyPublicKeyInput_to_js
                                                     x571) x558)|]);
                                  ignore
                                    (Ojs.call x561 "push"
                                       [|(Ojs.string_to_js x559)|]);
                                  (match x560 with
                                   | Some x562 ->
                                       ignore
                                         (Ojs.call x561 "push"
                                            [|(crypto_BinaryToTextEncoding_to_js
                                                 x562)|])
                                   | None -> ());
                                  x561))|])
        let (cast : t -> Stream.Writable.t) =
          fun (x574 : t) -> Stream.Writable.t_of_js (t_to_js x574)
      end
    let (createDiffieHellman :
      prime_length:int ->
        ?generator:ArrayBufferView.t or_number ->
          unit -> crypto_DiffieHellman)
      =
      fun ~prime_length:(x575 : int) ->
        fun ?generator:(x576 : ArrayBufferView.t or_number option) ->
          fun () ->
            crypto_DiffieHellman_of_js
              (let x580 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x580 "createDiffieHellman")
                 "apply"
                 [|x580;((let x577 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x577 "push" [|(Ojs.int_to_js x575)|]);
                          (match x576 with
                           | Some x578 ->
                               ignore
                                 (Ojs.call x577 "push"
                                    [|(or_number_to_js
                                         ArrayBufferView.t_to_js x578)|])
                           | None -> ());
                          x577))|])
    let (createDiffieHellman :
      prime:ArrayBufferView.t -> crypto_DiffieHellman) =
      fun ~prime:(x581 : ArrayBufferView.t) ->
        crypto_DiffieHellman_of_js
          (Ojs.call Import.crypto "createDiffieHellman"
             [|(ArrayBufferView.t_to_js x581)|])
    let (createDiffieHellman :
      prime:string ->
        prime_encoding:crypto_BinaryToTextEncoding -> crypto_DiffieHellman)
      =
      fun ~prime:(x582 : string) ->
        fun ~prime_encoding:(x583 : crypto_BinaryToTextEncoding) ->
          crypto_DiffieHellman_of_js
            (Ojs.call Import.crypto "createDiffieHellman"
               [|(Ojs.string_to_js x582);(crypto_BinaryToTextEncoding_to_js
                                            x583)|])
    let (createDiffieHellman :
      prime:string ->
        prime_encoding:crypto_BinaryToTextEncoding ->
          generator:ArrayBufferView.t or_number -> crypto_DiffieHellman)
      =
      fun ~prime:(x584 : string) ->
        fun ~prime_encoding:(x585 : crypto_BinaryToTextEncoding) ->
          fun ~generator:(x586 : ArrayBufferView.t or_number) ->
            crypto_DiffieHellman_of_js
              (Ojs.call Import.crypto "createDiffieHellman"
                 [|(Ojs.string_to_js x584);(crypto_BinaryToTextEncoding_to_js
                                              x585);(or_number_to_js
                                                       ArrayBufferView.t_to_js
                                                       x586)|])
    let (createDiffieHellman :
      prime:string ->
        prime_encoding:crypto_BinaryToTextEncoding ->
          generator:string ->
            generator_encoding:crypto_BinaryToTextEncoding ->
              crypto_DiffieHellman)
      =
      fun ~prime:(x588 : string) ->
        fun ~prime_encoding:(x589 : crypto_BinaryToTextEncoding) ->
          fun ~generator:(x590 : string) ->
            fun ~generator_encoding:(x591 : crypto_BinaryToTextEncoding) ->
              crypto_DiffieHellman_of_js
                (Ojs.call Import.crypto "createDiffieHellman"
                   [|(Ojs.string_to_js x588);(crypto_BinaryToTextEncoding_to_js
                                                x589);(Ojs.string_to_js x590);(
                     crypto_BinaryToTextEncoding_to_js x591)|])
    module DiffieHellman =
      struct
        type t = crypto_DiffieHellman
        let rec t_of_js : Ojs.t -> t =
          fun (x593 : Ojs.t) -> crypto_DiffieHellman_of_js x593
        and t_to_js : t -> Ojs.t =
          fun (x592 : crypto_DiffieHellman) ->
            crypto_DiffieHellman_to_js x592
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "DiffieHellman")
                 [||])
        let (generateKeys : t -> Buffer.t) =
          fun (x594 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x594) "generateKeys" [||])
        let (generateKeys' :
          t -> encoding:crypto_BinaryToTextEncoding -> string) =
          fun (x596 : t) ->
            fun ~encoding:(x595 : crypto_BinaryToTextEncoding) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x596) "generateKeys"
                   [|(crypto_BinaryToTextEncoding_to_js x595)|])
        let (computeSecret :
          t -> other_public_key:ArrayBufferView.t -> Buffer.t) =
          fun (x598 : t) ->
            fun ~other_public_key:(x597 : ArrayBufferView.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x598) "computeSecret"
                   [|(ArrayBufferView.t_to_js x597)|])
        let (computeSecret' :
          t ->
            other_public_key:string ->
              input_encoding:crypto_BinaryToTextEncoding -> Buffer.t)
          =
          fun (x601 : t) ->
            fun ~other_public_key:(x599 : string) ->
              fun ~input_encoding:(x600 : crypto_BinaryToTextEncoding) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x601) "computeSecret"
                     [|(Ojs.string_to_js x599);(crypto_BinaryToTextEncoding_to_js
                                                  x600)|])
        let (computeSecret'' :
          t ->
            other_public_key:ArrayBufferView.t ->
              output_encoding:crypto_BinaryToTextEncoding -> string)
          =
          fun (x604 : t) ->
            fun ~other_public_key:(x602 : ArrayBufferView.t) ->
              fun ~output_encoding:(x603 : crypto_BinaryToTextEncoding) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x604) "computeSecret"
                     [|(ArrayBufferView.t_to_js x602);(crypto_BinaryToTextEncoding_to_js
                                                         x603)|])
        let (computeSecret''' :
          t ->
            other_public_key:string ->
              input_encoding:crypto_BinaryToTextEncoding ->
                output_encoding:crypto_BinaryToTextEncoding -> string)
          =
          fun (x608 : t) ->
            fun ~other_public_key:(x605 : string) ->
              fun ~input_encoding:(x606 : crypto_BinaryToTextEncoding) ->
                fun ~output_encoding:(x607 : crypto_BinaryToTextEncoding) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x608) "computeSecret"
                       [|(Ojs.string_to_js x605);(crypto_BinaryToTextEncoding_to_js
                                                    x606);(crypto_BinaryToTextEncoding_to_js
                                                             x607)|])
        let (getPrime : t -> Buffer.t) =
          fun (x609 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x609) "getPrime" [||])
        let (getPrime' : t -> encoding:crypto_BinaryToTextEncoding -> string)
          =
          fun (x611 : t) ->
            fun ~encoding:(x610 : crypto_BinaryToTextEncoding) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x611) "getPrime"
                   [|(crypto_BinaryToTextEncoding_to_js x610)|])
        let (getGenerator : t -> Buffer.t) =
          fun (x612 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x612) "getGenerator" [||])
        let (getGenerator' :
          t -> encoding:crypto_BinaryToTextEncoding -> string) =
          fun (x614 : t) ->
            fun ~encoding:(x613 : crypto_BinaryToTextEncoding) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x614) "getGenerator"
                   [|(crypto_BinaryToTextEncoding_to_js x613)|])
        let (getPublicKey : t -> Buffer.t) =
          fun (x615 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x615) "getPublicKey" [||])
        let (getPublicKey' :
          t -> encoding:crypto_BinaryToTextEncoding -> string) =
          fun (x617 : t) ->
            fun ~encoding:(x616 : crypto_BinaryToTextEncoding) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x617) "getPublicKey"
                   [|(crypto_BinaryToTextEncoding_to_js x616)|])
        let (getPrivateKey : t -> Buffer.t) =
          fun (x618 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x618) "getPrivateKey" [||])
        let (getPrivateKey' :
          t -> encoding:crypto_BinaryToTextEncoding -> string) =
          fun (x620 : t) ->
            fun ~encoding:(x619 : crypto_BinaryToTextEncoding) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x620) "getPrivateKey"
                   [|(crypto_BinaryToTextEncoding_to_js x619)|])
        let (setPublicKey : t -> public_key:ArrayBufferView.t -> unit) =
          fun (x622 : t) ->
            fun ~public_key:(x621 : ArrayBufferView.t) ->
              ignore
                (Ojs.call (t_to_js x622) "setPublicKey"
                   [|(ArrayBufferView.t_to_js x621)|])
        let (setPublicKey' :
          t -> public_key:string -> encoding:BufferEncoding.t -> unit) =
          fun (x625 : t) ->
            fun ~public_key:(x623 : string) ->
              fun ~encoding:(x624 : BufferEncoding.t) ->
                ignore
                  (Ojs.call (t_to_js x625) "setPublicKey"
                     [|(Ojs.string_to_js x623);(BufferEncoding.t_to_js x624)|])
        let (setPrivateKey : t -> private_key:ArrayBufferView.t -> unit) =
          fun (x627 : t) ->
            fun ~private_key:(x626 : ArrayBufferView.t) ->
              ignore
                (Ojs.call (t_to_js x627) "setPrivateKey"
                   [|(ArrayBufferView.t_to_js x626)|])
        let (setPrivateKey' :
          t -> private_key:string -> encoding:BufferEncoding.t -> unit) =
          fun (x630 : t) ->
            fun ~private_key:(x628 : string) ->
              fun ~encoding:(x629 : BufferEncoding.t) ->
                ignore
                  (Ojs.call (t_to_js x630) "setPrivateKey"
                     [|(Ojs.string_to_js x628);(BufferEncoding.t_to_js x629)|])
        let (get_verifyError : t -> int) =
          fun (x631 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x631) "verifyError")
        let (set_verifyError : t -> int -> unit) =
          fun (x632 : t) ->
            fun (x633 : int) ->
              Ojs.set_prop_ascii (t_to_js x632) "verifyError"
                (Ojs.int_to_js x633)
      end
    let (getDiffieHellman : group_name:string -> crypto_DiffieHellman) =
      fun ~group_name:(x634 : string) ->
        crypto_DiffieHellman_of_js
          (Ojs.call Import.crypto "getDiffieHellman"
             [|(Ojs.string_to_js x634)|])
    let (pbkdf2 :
      password:crypto_BinaryLike ->
        salt:crypto_BinaryLike ->
          iterations:int ->
            keylen:int ->
              digest:string ->
                callback:(err:Error.t or_null -> derivedKey:Buffer.t -> any)
                  -> unit)
      =
      fun ~password:(x635 : crypto_BinaryLike) ->
        fun ~salt:(x636 : crypto_BinaryLike) ->
          fun ~iterations:(x637 : int) ->
            fun ~keylen:(x638 : int) ->
              fun ~digest:(x639 : string) ->
                fun
                  ~callback:(x640 :
                              err:Error.t or_null ->
                                derivedKey:Buffer.t -> any)
                  ->
                  ignore
                    (Ojs.call Import.crypto "pbkdf2"
                       [|(crypto_BinaryLike_to_js x635);(crypto_BinaryLike_to_js
                                                           x636);(Ojs.int_to_js
                                                                    x637);(
                         Ojs.int_to_js x638);(Ojs.string_to_js x639);(
                         Ojs.fun_to_js 2
                           (fun (x641 : Ojs.t) ->
                              fun (x643 : Ojs.t) ->
                                any_to_js
                                  (x640
                                     ~err:(or_null_of_js Error.t_of_js x641)
                                     ~derivedKey:(Buffer.t_of_js x643))))|])
    let (pbkdf2Sync :
      password:crypto_BinaryLike ->
        salt:crypto_BinaryLike ->
          iterations:int -> keylen:int -> digest:string -> Buffer.t)
      =
      fun ~password:(x644 : crypto_BinaryLike) ->
        fun ~salt:(x645 : crypto_BinaryLike) ->
          fun ~iterations:(x646 : int) ->
            fun ~keylen:(x647 : int) ->
              fun ~digest:(x648 : string) ->
                Buffer.t_of_js
                  (Ojs.call Import.crypto "pbkdf2Sync"
                     [|(crypto_BinaryLike_to_js x644);(crypto_BinaryLike_to_js
                                                         x645);(Ojs.int_to_js
                                                                  x646);(
                       Ojs.int_to_js x647);(Ojs.string_to_js x648)|])
    let (randomBytes : size:int -> Buffer.t) =
      fun ~size:(x649 : int) ->
        Buffer.t_of_js
          (Ojs.call Import.crypto "randomBytes" [|(Ojs.int_to_js x649)|])
    let (randomBytes :
      size:int ->
        callback:(err:Error.t or_null -> buf:Buffer.t -> unit) -> unit)
      =
      fun ~size:(x650 : int) ->
        fun ~callback:(x651 : err:Error.t or_null -> buf:Buffer.t -> unit) ->
          ignore
            (Ojs.call Import.crypto "randomBytes"
               [|(Ojs.int_to_js x650);(Ojs.fun_to_js 2
                                         (fun (x652 : Ojs.t) ->
                                            fun (x654 : Ojs.t) ->
                                              x651
                                                ~err:(or_null_of_js
                                                        Error.t_of_js x652)
                                                ~buf:(Buffer.t_of_js x654)))|])
    let (pseudoRandomBytes : size:int -> Buffer.t) =
      fun ~size:(x655 : int) ->
        Buffer.t_of_js
          (Ojs.call Import.crypto "pseudoRandomBytes"
             [|(Ojs.int_to_js x655)|])
    let (pseudoRandomBytes :
      size:int ->
        callback:(err:Error.t or_null -> buf:Buffer.t -> unit) -> unit)
      =
      fun ~size:(x656 : int) ->
        fun ~callback:(x657 : err:Error.t or_null -> buf:Buffer.t -> unit) ->
          ignore
            (Ojs.call Import.crypto "pseudoRandomBytes"
               [|(Ojs.int_to_js x656);(Ojs.fun_to_js 2
                                         (fun (x658 : Ojs.t) ->
                                            fun (x660 : Ojs.t) ->
                                              x657
                                                ~err:(or_null_of_js
                                                        Error.t_of_js x658)
                                                ~buf:(Buffer.t_of_js x660)))|])
    let (randomInt : max:int -> int) =
      fun ~max:(x661 : int) ->
        Ojs.int_of_js
          (Ojs.call Import.crypto "randomInt" [|(Ojs.int_to_js x661)|])
    let (randomInt : min:int -> max:int -> int) =
      fun ~min:(x662 : int) ->
        fun ~max:(x663 : int) ->
          Ojs.int_of_js
            (Ojs.call Import.crypto "randomInt"
               [|(Ojs.int_to_js x662);(Ojs.int_to_js x663)|])
    let (randomInt :
      max:int -> callback:(err:Error.t or_null -> value:int -> unit) -> unit)
      =
      fun ~max:(x664 : int) ->
        fun ~callback:(x665 : err:Error.t or_null -> value:int -> unit) ->
          ignore
            (Ojs.call Import.crypto "randomInt"
               [|(Ojs.int_to_js x664);(Ojs.fun_to_js 2
                                         (fun (x666 : Ojs.t) ->
                                            fun (x668 : Ojs.t) ->
                                              x665
                                                ~err:(or_null_of_js
                                                        Error.t_of_js x666)
                                                ~value:(Ojs.int_of_js x668)))|])
    let (randomInt :
      min:int ->
        max:int ->
          callback:(err:Error.t or_null -> value:int -> unit) -> unit)
      =
      fun ~min:(x669 : int) ->
        fun ~max:(x670 : int) ->
          fun ~callback:(x671 : err:Error.t or_null -> value:int -> unit) ->
            ignore
              (Ojs.call Import.crypto "randomInt"
                 [|(Ojs.int_to_js x669);(Ojs.int_to_js x670);(Ojs.fun_to_js 2
                                                                (fun
                                                                   (x672 :
                                                                    Ojs.t)
                                                                   ->
                                                                   fun
                                                                    (x674 :
                                                                    Ojs.t) ->
                                                                    x671
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x672)
                                                                    ~value:(
                                                                    Ojs.int_of_js
                                                                    x674)))|])
    let (randomFillSync :
      buffer:'T -> ?offset:int -> ?size:int -> unit -> 'T) =
      fun ~buffer:(x675 : 'T) ->
        fun ?offset:(x676 : int option) ->
          fun ?size:(x677 : int option) ->
            fun () ->
              Obj.magic
                (let x681 = Import.crypto in
                 Ojs.call (Ojs.get_prop_ascii x681 "randomFillSync") "apply"
                   [|x681;((let x678 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x678 "push" [|(Obj.magic x675)|]);
                            (match x676 with
                             | Some x680 ->
                                 ignore
                                   (Ojs.call x678 "push"
                                      [|(Ojs.int_to_js x680)|])
                             | None -> ());
                            (match x677 with
                             | Some x679 ->
                                 ignore
                                   (Ojs.call x678 "push"
                                      [|(Ojs.int_to_js x679)|])
                             | None -> ());
                            x678))|])
    let (randomFill :
      buffer:'T -> callback:(err:Error.t or_null -> buf:'T -> unit) -> unit)
      =
      fun ~buffer:(x682 : 'T) ->
        fun ~callback:(x683 : err:Error.t or_null -> buf:'T -> unit) ->
          ignore
            (Ojs.call Import.crypto "randomFill"
               [|(Obj.magic x682);(Ojs.fun_to_js 2
                                     (fun (x684 : Ojs.t) ->
                                        fun (x686 : Ojs.t) ->
                                          x683
                                            ~err:(or_null_of_js Error.t_of_js
                                                    x684)
                                            ~buf:(Obj.magic x686)))|])
    let (randomFill :
      buffer:'T ->
        offset:int ->
          callback:(err:Error.t or_null -> buf:'T -> unit) -> unit)
      =
      fun ~buffer:(x687 : 'T) ->
        fun ~offset:(x688 : int) ->
          fun ~callback:(x689 : err:Error.t or_null -> buf:'T -> unit) ->
            ignore
              (Ojs.call Import.crypto "randomFill"
                 [|(Obj.magic x687);(Ojs.int_to_js x688);(Ojs.fun_to_js 2
                                                            (fun
                                                               (x690 : Ojs.t)
                                                               ->
                                                               fun
                                                                 (x692 :
                                                                   Ojs.t)
                                                                 ->
                                                                 x689
                                                                   ~err:(
                                                                   or_null_of_js
                                                                    Error.t_of_js
                                                                    x690)
                                                                   ~buf:(
                                                                   Obj.magic
                                                                    x692)))|])
    let (randomFill :
      buffer:'T ->
        offset:int ->
          size:int ->
            callback:(err:Error.t or_null -> buf:'T -> unit) -> unit)
      =
      fun ~buffer:(x693 : 'T) ->
        fun ~offset:(x694 : int) ->
          fun ~size:(x695 : int) ->
            fun ~callback:(x696 : err:Error.t or_null -> buf:'T -> unit) ->
              ignore
                (Ojs.call Import.crypto "randomFill"
                   [|(Obj.magic x693);(Ojs.int_to_js x694);(Ojs.int_to_js
                                                              x695);(
                     Ojs.fun_to_js 2
                       (fun (x697 : Ojs.t) ->
                          fun (x699 : Ojs.t) ->
                            x696 ~err:(or_null_of_js Error.t_of_js x697)
                              ~buf:(Obj.magic x699)))|])
    module ScryptOptions =
      struct
        type t = crypto_ScryptOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x701 : Ojs.t) -> crypto_ScryptOptions_of_js x701
        and t_to_js : t -> Ojs.t =
          fun (x700 : crypto_ScryptOptions) ->
            crypto_ScryptOptions_to_js x700
        let (get_cost : t -> int) =
          fun (x702 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x702) "cost")
        let (set_cost : t -> int -> unit) =
          fun (x703 : t) ->
            fun (x704 : int) ->
              Ojs.set_prop_ascii (t_to_js x703) "cost" (Ojs.int_to_js x704)
        let (get_blockSize : t -> int) =
          fun (x705 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x705) "blockSize")
        let (set_blockSize : t -> int -> unit) =
          fun (x706 : t) ->
            fun (x707 : int) ->
              Ojs.set_prop_ascii (t_to_js x706) "blockSize"
                (Ojs.int_to_js x707)
        let (get_parallelization : t -> int) =
          fun (x708 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x708) "parallelization")
        let (set_parallelization : t -> int -> unit) =
          fun (x709 : t) ->
            fun (x710 : int) ->
              Ojs.set_prop_ascii (t_to_js x709) "parallelization"
                (Ojs.int_to_js x710)
        let (get_N : t -> int) =
          fun (x711 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x711) "N")
        let (set_N : t -> int -> unit) =
          fun (x712 : t) ->
            fun (x713 : int) ->
              Ojs.set_prop_ascii (t_to_js x712) "N" (Ojs.int_to_js x713)
        let (get_r : t -> int) =
          fun (x714 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x714) "r")
        let (set_r : t -> int -> unit) =
          fun (x715 : t) ->
            fun (x716 : int) ->
              Ojs.set_prop_ascii (t_to_js x715) "r" (Ojs.int_to_js x716)
        let (get_p : t -> int) =
          fun (x717 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x717) "p")
        let (set_p : t -> int -> unit) =
          fun (x718 : t) ->
            fun (x719 : int) ->
              Ojs.set_prop_ascii (t_to_js x718) "p" (Ojs.int_to_js x719)
        let (get_maxmem : t -> int) =
          fun (x720 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x720) "maxmem")
        let (set_maxmem : t -> int -> unit) =
          fun (x721 : t) ->
            fun (x722 : int) ->
              Ojs.set_prop_ascii (t_to_js x721) "maxmem" (Ojs.int_to_js x722)
      end
    let (scrypt :
      password:crypto_BinaryLike ->
        salt:crypto_BinaryLike ->
          keylen:int ->
            callback:(err:Error.t or_null -> derivedKey:Buffer.t -> unit) ->
              unit)
      =
      fun ~password:(x723 : crypto_BinaryLike) ->
        fun ~salt:(x724 : crypto_BinaryLike) ->
          fun ~keylen:(x725 : int) ->
            fun
              ~callback:(x726 :
                          err:Error.t or_null -> derivedKey:Buffer.t -> unit)
              ->
              ignore
                (Ojs.call Import.crypto "scrypt"
                   [|(crypto_BinaryLike_to_js x723);(crypto_BinaryLike_to_js
                                                       x724);(Ojs.int_to_js
                                                                x725);(
                     Ojs.fun_to_js 2
                       (fun (x727 : Ojs.t) ->
                          fun (x729 : Ojs.t) ->
                            x726 ~err:(or_null_of_js Error.t_of_js x727)
                              ~derivedKey:(Buffer.t_of_js x729)))|])
    let (scrypt :
      password:crypto_BinaryLike ->
        salt:crypto_BinaryLike ->
          keylen:int ->
            options:crypto_ScryptOptions ->
              callback:(err:Error.t or_null -> derivedKey:Buffer.t -> unit)
                -> unit)
      =
      fun ~password:(x730 : crypto_BinaryLike) ->
        fun ~salt:(x731 : crypto_BinaryLike) ->
          fun ~keylen:(x732 : int) ->
            fun ~options:(x733 : crypto_ScryptOptions) ->
              fun
                ~callback:(x734 :
                            err:Error.t or_null ->
                              derivedKey:Buffer.t -> unit)
                ->
                ignore
                  (Ojs.call Import.crypto "scrypt"
                     [|(crypto_BinaryLike_to_js x730);(crypto_BinaryLike_to_js
                                                         x731);(Ojs.int_to_js
                                                                  x732);(
                       crypto_ScryptOptions_to_js x733);(Ojs.fun_to_js 2
                                                           (fun
                                                              (x735 : Ojs.t)
                                                              ->
                                                              fun
                                                                (x737 :
                                                                  Ojs.t)
                                                                ->
                                                                x734
                                                                  ~err:(
                                                                  or_null_of_js
                                                                    Error.t_of_js
                                                                    x735)
                                                                  ~derivedKey:(
                                                                  Buffer.t_of_js
                                                                    x737)))|])
    let (scryptSync :
      password:crypto_BinaryLike ->
        salt:crypto_BinaryLike ->
          keylen:int -> ?options:crypto_ScryptOptions -> unit -> Buffer.t)
      =
      fun ~password:(x738 : crypto_BinaryLike) ->
        fun ~salt:(x739 : crypto_BinaryLike) ->
          fun ~keylen:(x740 : int) ->
            fun ?options:(x741 : crypto_ScryptOptions option) ->
              fun () ->
                Buffer.t_of_js
                  (let x744 = Import.crypto in
                   Ojs.call (Ojs.get_prop_ascii x744 "scryptSync") "apply"
                     [|x744;((let x742 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x742 "push"
                                   [|(crypto_BinaryLike_to_js x738)|]);
                              ignore
                                (Ojs.call x742 "push"
                                   [|(crypto_BinaryLike_to_js x739)|]);
                              ignore
                                (Ojs.call x742 "push"
                                   [|(Ojs.int_to_js x740)|]);
                              (match x741 with
                               | Some x743 ->
                                   ignore
                                     (Ojs.call x742 "push"
                                        [|(crypto_ScryptOptions_to_js x743)|])
                               | None -> ());
                              x742))|])
    module RsaPublicKey =
      struct
        type t = crypto_RsaPublicKey
        let rec t_of_js : Ojs.t -> t =
          fun (x746 : Ojs.t) -> crypto_RsaPublicKey_of_js x746
        and t_to_js : t -> Ojs.t =
          fun (x745 : crypto_RsaPublicKey) -> crypto_RsaPublicKey_to_js x745
        let (get_key : t -> crypto_KeyLike) =
          fun (x747 : t) ->
            crypto_KeyLike_of_js (Ojs.get_prop_ascii (t_to_js x747) "key")
        let (set_key : t -> crypto_KeyLike -> unit) =
          fun (x748 : t) ->
            fun (x749 : crypto_KeyLike) ->
              Ojs.set_prop_ascii (t_to_js x748) "key"
                (crypto_KeyLike_to_js x749)
        let (get_padding : t -> int) =
          fun (x750 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x750) "padding")
        let (set_padding : t -> int -> unit) =
          fun (x751 : t) ->
            fun (x752 : int) ->
              Ojs.set_prop_ascii (t_to_js x751) "padding"
                (Ojs.int_to_js x752)
      end
    module RsaPrivateKey =
      struct
        type t = crypto_RsaPrivateKey
        let rec t_of_js : Ojs.t -> t =
          fun (x754 : Ojs.t) -> crypto_RsaPrivateKey_of_js x754
        and t_to_js : t -> Ojs.t =
          fun (x753 : crypto_RsaPrivateKey) ->
            crypto_RsaPrivateKey_to_js x753
        let (get_key : t -> crypto_KeyLike) =
          fun (x755 : t) ->
            crypto_KeyLike_of_js (Ojs.get_prop_ascii (t_to_js x755) "key")
        let (set_key : t -> crypto_KeyLike -> unit) =
          fun (x756 : t) ->
            fun (x757 : crypto_KeyLike) ->
              Ojs.set_prop_ascii (t_to_js x756) "key"
                (crypto_KeyLike_to_js x757)
        let (get_passphrase : t -> string) =
          fun (x758 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x758) "passphrase")
        let (set_passphrase : t -> string -> unit) =
          fun (x759 : t) ->
            fun (x760 : string) ->
              Ojs.set_prop_ascii (t_to_js x759) "passphrase"
                (Ojs.string_to_js x760)
        let (get_oaepHash : t -> string) =
          fun (x761 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x761) "oaepHash")
        let (set_oaepHash : t -> string -> unit) =
          fun (x762 : t) ->
            fun (x763 : string) ->
              Ojs.set_prop_ascii (t_to_js x762) "oaepHash"
                (Ojs.string_to_js x763)
        let (get_oaepLabel : t -> TypedArray.t) =
          fun (x764 : t) ->
            TypedArray.t_of_js
              (Ojs.get_prop_ascii (t_to_js x764) "oaepLabel")
        let (set_oaepLabel : t -> TypedArray.t -> unit) =
          fun (x765 : t) ->
            fun (x766 : TypedArray.t) ->
              Ojs.set_prop_ascii (t_to_js x765) "oaepLabel"
                (TypedArray.t_to_js x766)
        let (get_padding : t -> int) =
          fun (x767 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x767) "padding")
        let (set_padding : t -> int -> unit) =
          fun (x768 : t) ->
            fun (x769 : int) ->
              Ojs.set_prop_ascii (t_to_js x768) "padding"
                (Ojs.int_to_js x769)
      end
    let (publicEncrypt :
      key:(crypto_KeyLike, crypto_RsaPrivateKey, crypto_RsaPublicKey) union3
        -> buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun
        ~key:(x770 :
               (crypto_KeyLike, crypto_RsaPrivateKey, crypto_RsaPublicKey)
                 union3)
        ->
        fun ~buffer:(x774 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "publicEncrypt"
               [|(union3_to_js crypto_KeyLike_to_js
                    crypto_RsaPrivateKey_to_js crypto_RsaPublicKey_to_js x770);(
                 ArrayBufferView.t_to_js x774)|])
    let (publicDecrypt :
      key:(crypto_KeyLike, crypto_RsaPrivateKey, crypto_RsaPublicKey) union3
        -> buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun
        ~key:(x775 :
               (crypto_KeyLike, crypto_RsaPrivateKey, crypto_RsaPublicKey)
                 union3)
        ->
        fun ~buffer:(x779 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "publicDecrypt"
               [|(union3_to_js crypto_KeyLike_to_js
                    crypto_RsaPrivateKey_to_js crypto_RsaPublicKey_to_js x775);(
                 ArrayBufferView.t_to_js x779)|])
    let (privateDecrypt :
      private_key:(crypto_KeyLike, crypto_RsaPrivateKey) union2 ->
        buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun ~private_key:(x780 : (crypto_KeyLike, crypto_RsaPrivateKey) union2)
        ->
        fun ~buffer:(x783 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "privateDecrypt"
               [|(union2_to_js crypto_KeyLike_to_js
                    crypto_RsaPrivateKey_to_js x780);(ArrayBufferView.t_to_js
                                                        x783)|])
    let (privateEncrypt :
      private_key:(crypto_KeyLike, crypto_RsaPrivateKey) union2 ->
        buffer:ArrayBufferView.t -> Buffer.t)
      =
      fun ~private_key:(x784 : (crypto_KeyLike, crypto_RsaPrivateKey) union2)
        ->
        fun ~buffer:(x787 : ArrayBufferView.t) ->
          Buffer.t_of_js
            (Ojs.call Import.crypto "privateEncrypt"
               [|(union2_to_js crypto_KeyLike_to_js
                    crypto_RsaPrivateKey_to_js x784);(ArrayBufferView.t_to_js
                                                        x787)|])
    let (getCiphers : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.crypto "getCiphers" [||])
    let (getCurves : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.crypto "getCurves" [||])
    let (getFips : unit -> [ `L_n_0  | `L_n_1 ]) =
      fun () ->
        let x790 = Ojs.call Import.crypto "getFips" [||] in
        match Ojs.int_of_js x790 with
        | 0 -> `L_n_0
        | 1 -> `L_n_1
        | _ -> assert false
    let (getHashes : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.crypto "getHashes" [||])
    module ECDH =
      struct
        type t = crypto_ECDH
        let rec t_of_js : Ojs.t -> t =
          fun (x793 : Ojs.t) -> crypto_ECDH_of_js x793
        and t_to_js : t -> Ojs.t =
          fun (x792 : crypto_ECDH) -> crypto_ECDH_to_js x792
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.crypto "ECDH") [||])
        let (convertKey :
          key:crypto_BinaryLike ->
            curve:string ->
              ?inputEncoding:crypto_BinaryToTextEncoding ->
                ?outputEncoding:[ `base64  | `hex  | `latin1 ] ->
                  ?format:[ `compressed  | `hybrid  | `uncompressed ] ->
                    unit -> Buffer.t or_string)
          =
          fun ~key:(x794 : crypto_BinaryLike) ->
            fun ~curve:(x795 : string) ->
              fun ?inputEncoding:(x796 : crypto_BinaryToTextEncoding option)
                ->
                fun
                  ?outputEncoding:(x797 :
                                    [ `base64  | `hex  | `latin1 ] option)
                  ->
                  fun
                    ?format:(x798 :
                              [ `compressed  | `hybrid  | `uncompressed ]
                                option)
                    ->
                    fun () ->
                      or_string_of_js Buffer.t_of_js
                        (let x803 = Ojs.get_prop_ascii Import.crypto "ECDH" in
                         Ojs.call (Ojs.get_prop_ascii x803 "convertKey")
                           "apply"
                           [|x803;((let x799 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x799 "push"
                                         [|(crypto_BinaryLike_to_js x794)|]);
                                    ignore
                                      (Ojs.call x799 "push"
                                         [|(Ojs.string_to_js x795)|]);
                                    (match x796 with
                                     | Some x802 ->
                                         ignore
                                           (Ojs.call x799 "push"
                                              [|(crypto_BinaryToTextEncoding_to_js
                                                   x802)|])
                                     | None -> ());
                                    (match x797 with
                                     | Some x801 ->
                                         ignore
                                           (Ojs.call x799 "push"
                                              [|((match x801 with
                                                  | `base64 ->
                                                      Ojs.string_to_js
                                                        "base64"
                                                  | `hex ->
                                                      Ojs.string_to_js "hex"
                                                  | `latin1 ->
                                                      Ojs.string_to_js
                                                        "latin1"))|])
                                     | None -> ());
                                    (match x798 with
                                     | Some x800 ->
                                         ignore
                                           (Ojs.call x799 "push"
                                              [|((match x800 with
                                                  | `compressed ->
                                                      Ojs.string_to_js
                                                        "compressed"
                                                  | `hybrid ->
                                                      Ojs.string_to_js
                                                        "hybrid"
                                                  | `uncompressed ->
                                                      Ojs.string_to_js
                                                        "uncompressed"))|])
                                     | None -> ());
                                    x799))|])
        let (generateKeys : t -> Buffer.t) =
          fun (x805 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x805) "generateKeys" [||])
        let (generateKeys' :
          t ->
            encoding:crypto_BinaryToTextEncoding ->
              ?format:crypto_ECDHKeyFormat -> unit -> string)
          =
          fun (x810 : t) ->
            fun ~encoding:(x806 : crypto_BinaryToTextEncoding) ->
              fun ?format:(x807 : crypto_ECDHKeyFormat option) ->
                fun () ->
                  Ojs.string_of_js
                    (let x811 = t_to_js x810 in
                     Ojs.call (Ojs.get_prop_ascii x811 "generateKeys")
                       "apply"
                       [|x811;((let x808 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x808 "push"
                                     [|(crypto_BinaryToTextEncoding_to_js
                                          x806)|]);
                                (match x807 with
                                 | Some x809 ->
                                     ignore
                                       (Ojs.call x808 "push"
                                          [|(crypto_ECDHKeyFormat_to_js x809)|])
                                 | None -> ());
                                x808))|])
        let (computeSecret :
          t -> other_public_key:ArrayBufferView.t -> Buffer.t) =
          fun (x813 : t) ->
            fun ~other_public_key:(x812 : ArrayBufferView.t) ->
              Buffer.t_of_js
                (Ojs.call (t_to_js x813) "computeSecret"
                   [|(ArrayBufferView.t_to_js x812)|])
        let (computeSecret' :
          t ->
            other_public_key:string ->
              input_encoding:crypto_BinaryToTextEncoding -> Buffer.t)
          =
          fun (x816 : t) ->
            fun ~other_public_key:(x814 : string) ->
              fun ~input_encoding:(x815 : crypto_BinaryToTextEncoding) ->
                Buffer.t_of_js
                  (Ojs.call (t_to_js x816) "computeSecret"
                     [|(Ojs.string_to_js x814);(crypto_BinaryToTextEncoding_to_js
                                                  x815)|])
        let (computeSecret'' :
          t ->
            other_public_key:ArrayBufferView.t ->
              output_encoding:crypto_BinaryToTextEncoding -> string)
          =
          fun (x819 : t) ->
            fun ~other_public_key:(x817 : ArrayBufferView.t) ->
              fun ~output_encoding:(x818 : crypto_BinaryToTextEncoding) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x819) "computeSecret"
                     [|(ArrayBufferView.t_to_js x817);(crypto_BinaryToTextEncoding_to_js
                                                         x818)|])
        let (computeSecret''' :
          t ->
            other_public_key:string ->
              input_encoding:crypto_BinaryToTextEncoding ->
                output_encoding:crypto_BinaryToTextEncoding -> string)
          =
          fun (x823 : t) ->
            fun ~other_public_key:(x820 : string) ->
              fun ~input_encoding:(x821 : crypto_BinaryToTextEncoding) ->
                fun ~output_encoding:(x822 : crypto_BinaryToTextEncoding) ->
                  Ojs.string_of_js
                    (Ojs.call (t_to_js x823) "computeSecret"
                       [|(Ojs.string_to_js x820);(crypto_BinaryToTextEncoding_to_js
                                                    x821);(crypto_BinaryToTextEncoding_to_js
                                                             x822)|])
        let (getPrivateKey : t -> Buffer.t) =
          fun (x824 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x824) "getPrivateKey" [||])
        let (getPrivateKey' :
          t -> encoding:crypto_BinaryToTextEncoding -> string) =
          fun (x826 : t) ->
            fun ~encoding:(x825 : crypto_BinaryToTextEncoding) ->
              Ojs.string_of_js
                (Ojs.call (t_to_js x826) "getPrivateKey"
                   [|(crypto_BinaryToTextEncoding_to_js x825)|])
        let (getPublicKey : t -> Buffer.t) =
          fun (x827 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x827) "getPublicKey" [||])
        let (getPublicKey' :
          t ->
            encoding:crypto_BinaryToTextEncoding ->
              ?format:crypto_ECDHKeyFormat -> unit -> string)
          =
          fun (x832 : t) ->
            fun ~encoding:(x828 : crypto_BinaryToTextEncoding) ->
              fun ?format:(x829 : crypto_ECDHKeyFormat option) ->
                fun () ->
                  Ojs.string_of_js
                    (let x833 = t_to_js x832 in
                     Ojs.call (Ojs.get_prop_ascii x833 "getPublicKey")
                       "apply"
                       [|x833;((let x830 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x830 "push"
                                     [|(crypto_BinaryToTextEncoding_to_js
                                          x828)|]);
                                (match x829 with
                                 | Some x831 ->
                                     ignore
                                       (Ojs.call x830 "push"
                                          [|(crypto_ECDHKeyFormat_to_js x831)|])
                                 | None -> ());
                                x830))|])
        let (setPrivateKey : t -> private_key:ArrayBufferView.t -> unit) =
          fun (x835 : t) ->
            fun ~private_key:(x834 : ArrayBufferView.t) ->
              ignore
                (Ojs.call (t_to_js x835) "setPrivateKey"
                   [|(ArrayBufferView.t_to_js x834)|])
        let (setPrivateKey' :
          t ->
            private_key:string ->
              encoding:crypto_BinaryToTextEncoding -> unit)
          =
          fun (x838 : t) ->
            fun ~private_key:(x836 : string) ->
              fun ~encoding:(x837 : crypto_BinaryToTextEncoding) ->
                ignore
                  (Ojs.call (t_to_js x838) "setPrivateKey"
                     [|(Ojs.string_to_js x836);(crypto_BinaryToTextEncoding_to_js
                                                  x837)|])
      end
    let (createECDH : curve_name:string -> crypto_ECDH) =
      fun ~curve_name:(x839 : string) ->
        crypto_ECDH_of_js
          (Ojs.call Import.crypto "createECDH" [|(Ojs.string_to_js x839)|])
    let (timingSafeEqual :
      a:ArrayBufferView.t -> b:ArrayBufferView.t -> bool) =
      fun ~a:(x840 : ArrayBufferView.t) ->
        fun ~b:(x841 : ArrayBufferView.t) ->
          Ojs.bool_of_js
            (Ojs.call Import.crypto "timingSafeEqual"
               [|(ArrayBufferView.t_to_js x840);(ArrayBufferView.t_to_js x841)|])
    let (dEFAULT_ENCODING : BufferEncoding.t) =
      BufferEncoding.t_of_js
        (Ojs.get_prop_ascii Import.crypto "DEFAULT_ENCODING")
    module KeyType =
      struct
        type t =
          [ `dsa  | `ec  | `ed25519  | `ed448  | `rsa  | `x25519  | `x448 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x843 : Ojs.t) ->
            let x844 = x843 in
            match Ojs.string_of_js x844 with
            | "dsa" -> `dsa
            | "ec" -> `ec
            | "ed25519" -> `ed25519
            | "ed448" -> `ed448
            | "rsa" -> `rsa
            | "x25519" -> `x25519
            | "x448" -> `x448
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x842 :
              [ `dsa  | `ec  | `ed25519  | `ed448  | `rsa  | `x25519 
              | `x448 ])
            ->
            match x842 with
            | `dsa -> Ojs.string_to_js "dsa"
            | `ec -> Ojs.string_to_js "ec"
            | `ed25519 -> Ojs.string_to_js "ed25519"
            | `ed448 -> Ojs.string_to_js "ed448"
            | `rsa -> Ojs.string_to_js "rsa"
            | `x25519 -> Ojs.string_to_js "x25519"
            | `x448 -> Ojs.string_to_js "x448"
      end
    module KeyFormat =
      struct
        type t = [ `der  | `pem ]
        let rec t_of_js : Ojs.t -> t =
          fun (x846 : Ojs.t) ->
            let x847 = x846 in
            match Ojs.string_of_js x847 with
            | "der" -> `der
            | "pem" -> `pem
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x845 : [ `der  | `pem ]) ->
            match x845 with
            | `der -> Ojs.string_to_js "der"
            | `pem -> Ojs.string_to_js "pem"
      end
    module BasePrivateKeyEncodingOptions =
      struct
        type 'T t = 'T crypto_BasePrivateKeyEncodingOptions
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) ->
          fun (__T_of_js : Ojs.t -> __T) ->
            fun (x850 : Ojs.t) ->
              crypto_BasePrivateKeyEncodingOptions_of_js __T_of_js x850
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) ->
            fun (x848 : __T crypto_BasePrivateKeyEncodingOptions) ->
              crypto_BasePrivateKeyEncodingOptions_to_js __T_to_js x848
        let (get_format : 'T t -> 'T) =
          fun (x852 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x852) "format")
        let (set_format : 'T t -> 'T -> unit) =
          fun (x854 : 'T t) ->
            fun (x855 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x854) "format"
                (Obj.magic x855)
        let (get_cipher : 'T t -> string) =
          fun (x857 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x857) "cipher")
        let (set_cipher : 'T t -> string -> unit) =
          fun (x859 : 'T t) ->
            fun (x860 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x859) "cipher"
                (Ojs.string_to_js x860)
        let (get_passphrase : 'T t -> string) =
          fun (x862 : 'T t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x862) "passphrase")
        let (set_passphrase : 'T t -> string -> unit) =
          fun (x864 : 'T t) ->
            fun (x865 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x864) "passphrase"
                (Ojs.string_to_js x865)
      end
    module KeyPairKeyObjectResult =
      struct
        type t = crypto_KeyPairKeyObjectResult
        let rec t_of_js : Ojs.t -> t =
          fun (x868 : Ojs.t) -> crypto_KeyPairKeyObjectResult_of_js x868
        and t_to_js : t -> Ojs.t =
          fun (x867 : crypto_KeyPairKeyObjectResult) ->
            crypto_KeyPairKeyObjectResult_to_js x867
        let (get_publicKey : t -> crypto_KeyObject) =
          fun (x869 : t) ->
            crypto_KeyObject_of_js
              (Ojs.get_prop_ascii (t_to_js x869) "publicKey")
        let (set_publicKey : t -> crypto_KeyObject -> unit) =
          fun (x870 : t) ->
            fun (x871 : crypto_KeyObject) ->
              Ojs.set_prop_ascii (t_to_js x870) "publicKey"
                (crypto_KeyObject_to_js x871)
        let (get_privateKey : t -> crypto_KeyObject) =
          fun (x872 : t) ->
            crypto_KeyObject_of_js
              (Ojs.get_prop_ascii (t_to_js x872) "privateKey")
        let (set_privateKey : t -> crypto_KeyObject -> unit) =
          fun (x873 : t) ->
            fun (x874 : crypto_KeyObject) ->
              Ojs.set_prop_ascii (t_to_js x873) "privateKey"
                (crypto_KeyObject_to_js x874)
      end
    module ED25519KeyPairKeyObjectOptions =
      struct
        type t = crypto_ED25519KeyPairKeyObjectOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x876 : Ojs.t) ->
            crypto_ED25519KeyPairKeyObjectOptions_of_js x876
        and t_to_js : t -> Ojs.t =
          fun (x875 : crypto_ED25519KeyPairKeyObjectOptions) ->
            crypto_ED25519KeyPairKeyObjectOptions_to_js x875
      end
    module ED448KeyPairKeyObjectOptions =
      struct
        type t = crypto_ED448KeyPairKeyObjectOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x878 : Ojs.t) ->
            crypto_ED448KeyPairKeyObjectOptions_of_js x878
        and t_to_js : t -> Ojs.t =
          fun (x877 : crypto_ED448KeyPairKeyObjectOptions) ->
            crypto_ED448KeyPairKeyObjectOptions_to_js x877
      end
    module X25519KeyPairKeyObjectOptions =
      struct
        type t = crypto_X25519KeyPairKeyObjectOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x880 : Ojs.t) ->
            crypto_X25519KeyPairKeyObjectOptions_of_js x880
        and t_to_js : t -> Ojs.t =
          fun (x879 : crypto_X25519KeyPairKeyObjectOptions) ->
            crypto_X25519KeyPairKeyObjectOptions_to_js x879
      end
    module X448KeyPairKeyObjectOptions =
      struct
        type t = crypto_X448KeyPairKeyObjectOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x882 : Ojs.t) -> crypto_X448KeyPairKeyObjectOptions_of_js x882
        and t_to_js : t -> Ojs.t =
          fun (x881 : crypto_X448KeyPairKeyObjectOptions) ->
            crypto_X448KeyPairKeyObjectOptions_to_js x881
      end
    module ECKeyPairKeyObjectOptions =
      struct
        type t = crypto_ECKeyPairKeyObjectOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x884 : Ojs.t) -> crypto_ECKeyPairKeyObjectOptions_of_js x884
        and t_to_js : t -> Ojs.t =
          fun (x883 : crypto_ECKeyPairKeyObjectOptions) ->
            crypto_ECKeyPairKeyObjectOptions_to_js x883
        let (get_namedCurve : t -> string) =
          fun (x885 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x885) "namedCurve")
        let (set_namedCurve : t -> string -> unit) =
          fun (x886 : t) ->
            fun (x887 : string) ->
              Ojs.set_prop_ascii (t_to_js x886) "namedCurve"
                (Ojs.string_to_js x887)
      end
    module RSAKeyPairKeyObjectOptions =
      struct
        type t = crypto_RSAKeyPairKeyObjectOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x889 : Ojs.t) -> crypto_RSAKeyPairKeyObjectOptions_of_js x889
        and t_to_js : t -> Ojs.t =
          fun (x888 : crypto_RSAKeyPairKeyObjectOptions) ->
            crypto_RSAKeyPairKeyObjectOptions_to_js x888
        let (get_modulusLength : t -> int) =
          fun (x890 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x890) "modulusLength")
        let (set_modulusLength : t -> int -> unit) =
          fun (x891 : t) ->
            fun (x892 : int) ->
              Ojs.set_prop_ascii (t_to_js x891) "modulusLength"
                (Ojs.int_to_js x892)
        let (get_publicExponent : t -> int) =
          fun (x893 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x893) "publicExponent")
        let (set_publicExponent : t -> int -> unit) =
          fun (x894 : t) ->
            fun (x895 : int) ->
              Ojs.set_prop_ascii (t_to_js x894) "publicExponent"
                (Ojs.int_to_js x895)
      end
    module DSAKeyPairKeyObjectOptions =
      struct
        type t = crypto_DSAKeyPairKeyObjectOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x897 : Ojs.t) -> crypto_DSAKeyPairKeyObjectOptions_of_js x897
        and t_to_js : t -> Ojs.t =
          fun (x896 : crypto_DSAKeyPairKeyObjectOptions) ->
            crypto_DSAKeyPairKeyObjectOptions_to_js x896
        let (get_modulusLength : t -> int) =
          fun (x898 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x898) "modulusLength")
        let (set_modulusLength : t -> int -> unit) =
          fun (x899 : t) ->
            fun (x900 : int) ->
              Ojs.set_prop_ascii (t_to_js x899) "modulusLength"
                (Ojs.int_to_js x900)
        let (get_divisorLength : t -> int) =
          fun (x901 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x901) "divisorLength")
        let (set_divisorLength : t -> int -> unit) =
          fun (x902 : t) ->
            fun (x903 : int) ->
              Ojs.set_prop_ascii (t_to_js x902) "divisorLength"
                (Ojs.int_to_js x903)
      end
    module RSAKeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) crypto_RSAKeyPairOptions
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x907 : Ojs.t) ->
                crypto_RSAKeyPairOptions_of_js __PubF_of_js __PrivF_of_js
                  x907
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x904 : (__PubF, __PrivF) crypto_RSAKeyPairOptions) ->
                crypto_RSAKeyPairOptions_to_js __PubF_to_js __PrivF_to_js
                  x904
        let (get_modulusLength : ('PubF, 'PrivF) t -> int) =
          fun (x910 : ('PubF, 'PrivF) t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x910)
                 "modulusLength")
        let (set_modulusLength : ('PubF, 'PrivF) t -> int -> unit) =
          fun (x913 : ('PubF, 'PrivF) t) ->
            fun (x914 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x913)
                "modulusLength" (Ojs.int_to_js x914)
        let (get_publicExponent : ('PubF, 'PrivF) t -> int) =
          fun (x917 : ('PubF, 'PrivF) t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x917)
                 "publicExponent")
        let (set_publicExponent : ('PubF, 'PrivF) t -> int -> unit) =
          fun (x920 : ('PubF, 'PrivF) t) ->
            fun (x921 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x920)
                "publicExponent" (Ojs.int_to_js x921)
        let (get_publicKeyEncoding :
          ('PubF, 'PrivF) t -> AnonymousInterface9.t) =
          fun (x924 : ('PubF, 'PrivF) t) ->
            AnonymousInterface9.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x924)
                 "publicKeyEncoding")
        let (set_publicKeyEncoding :
          ('PubF, 'PrivF) t -> AnonymousInterface9.t -> unit) =
          fun (x927 : ('PubF, 'PrivF) t) ->
            fun (x928 : AnonymousInterface9.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x927)
                "publicKeyEncoding" (AnonymousInterface9.t_to_js x928)
        let (get_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              AnonymousInterface8.t) intersection2)
          =
          fun (x931 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x934 : Ojs.t) ->
                 crypto_BasePrivateKeyEncodingOptions_of_js Obj.magic x934)
              AnonymousInterface8.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x931)
                 "privateKeyEncoding")
        let (set_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              AnonymousInterface8.t) intersection2 -> unit)
          =
          fun (x937 : ('PubF, 'PrivF) t) ->
            fun
              (x938 :
                ('PrivF crypto_BasePrivateKeyEncodingOptions,
                  AnonymousInterface8.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x937)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x939 : 'PrivF crypto_BasePrivateKeyEncodingOptions)
                      ->
                      crypto_BasePrivateKeyEncodingOptions_to_js Obj.magic
                        x939) AnonymousInterface8.t_to_js x938)
      end
    module DSAKeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) crypto_DSAKeyPairOptions
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x947 : Ojs.t) ->
                crypto_DSAKeyPairOptions_of_js __PubF_of_js __PrivF_of_js
                  x947
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x944 : (__PubF, __PrivF) crypto_DSAKeyPairOptions) ->
                crypto_DSAKeyPairOptions_to_js __PubF_to_js __PrivF_to_js
                  x944
        let (get_modulusLength : ('PubF, 'PrivF) t -> int) =
          fun (x950 : ('PubF, 'PrivF) t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x950)
                 "modulusLength")
        let (set_modulusLength : ('PubF, 'PrivF) t -> int -> unit) =
          fun (x953 : ('PubF, 'PrivF) t) ->
            fun (x954 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x953)
                "modulusLength" (Ojs.int_to_js x954)
        let (get_divisorLength : ('PubF, 'PrivF) t -> int) =
          fun (x957 : ('PubF, 'PrivF) t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x957)
                 "divisorLength")
        let (set_divisorLength : ('PubF, 'PrivF) t -> int -> unit) =
          fun (x960 : ('PubF, 'PrivF) t) ->
            fun (x961 : int) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x960)
                "divisorLength" (Ojs.int_to_js x961)
        let (get_publicKeyEncoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x964 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x964)
                 "publicKeyEncoding")
        let (set_publicKeyEncoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x967 : ('PubF, 'PrivF) t) ->
            fun (x968 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x967)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x968)
        let (get_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              AnonymousInterface6.t) intersection2)
          =
          fun (x971 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x974 : Ojs.t) ->
                 crypto_BasePrivateKeyEncodingOptions_of_js Obj.magic x974)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x971)
                 "privateKeyEncoding")
        let (set_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              AnonymousInterface6.t) intersection2 -> unit)
          =
          fun (x977 : ('PubF, 'PrivF) t) ->
            fun
              (x978 :
                ('PrivF crypto_BasePrivateKeyEncodingOptions,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x977)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x979 : 'PrivF crypto_BasePrivateKeyEncodingOptions)
                      ->
                      crypto_BasePrivateKeyEncodingOptions_to_js Obj.magic
                        x979) AnonymousInterface6.t_to_js x978)
      end
    module ECKeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) crypto_ECKeyPairOptions
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x987 : Ojs.t) ->
                crypto_ECKeyPairOptions_of_js __PubF_of_js __PrivF_of_js x987
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x984 : (__PubF, __PrivF) crypto_ECKeyPairOptions) ->
                crypto_ECKeyPairOptions_to_js __PubF_to_js __PrivF_to_js x984
        let (get_namedCurve : ('PubF, 'PrivF) t -> string) =
          fun (x990 : ('PubF, 'PrivF) t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x990)
                 "namedCurve")
        let (set_namedCurve : ('PubF, 'PrivF) t -> string -> unit) =
          fun (x993 : ('PubF, 'PrivF) t) ->
            fun (x994 : string) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x993)
                "namedCurve" (Ojs.string_to_js x994)
        let (get_publicKeyEncoding :
          ('PubF, 'PrivF) t -> AnonymousInterface9.t) =
          fun (x997 : ('PubF, 'PrivF) t) ->
            AnonymousInterface9.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x997)
                 "publicKeyEncoding")
        let (set_publicKeyEncoding :
          ('PubF, 'PrivF) t -> AnonymousInterface9.t -> unit) =
          fun (x1000 : ('PubF, 'PrivF) t) ->
            fun (x1001 : AnonymousInterface9.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1000)
                "publicKeyEncoding" (AnonymousInterface9.t_to_js x1001)
        let (get_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              AnonymousInterface10.t) intersection2)
          =
          fun (x1004 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1007 : Ojs.t) ->
                 crypto_BasePrivateKeyEncodingOptions_of_js Obj.magic x1007)
              AnonymousInterface10.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1004)
                 "privateKeyEncoding")
        let (set_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              AnonymousInterface10.t) intersection2 -> unit)
          =
          fun (x1010 : ('PubF, 'PrivF) t) ->
            fun
              (x1011 :
                ('PrivF crypto_BasePrivateKeyEncodingOptions,
                  AnonymousInterface10.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1010)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1012 : 'PrivF crypto_BasePrivateKeyEncodingOptions)
                      ->
                      crypto_BasePrivateKeyEncodingOptions_to_js Obj.magic
                        x1012) AnonymousInterface10.t_to_js x1011)
      end
    module ED25519KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) crypto_ED25519KeyPairOptions
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x1020 : Ojs.t) ->
                crypto_ED25519KeyPairOptions_of_js __PubF_of_js __PrivF_of_js
                  x1020
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x1017 : (__PubF, __PrivF) crypto_ED25519KeyPairOptions) ->
                crypto_ED25519KeyPairOptions_to_js __PubF_to_js __PrivF_to_js
                  x1017
        let (get_publicKeyEncoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x1023 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1023)
                 "publicKeyEncoding")
        let (set_publicKeyEncoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x1026 : ('PubF, 'PrivF) t) ->
            fun (x1027 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1026)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x1027)
        let (get_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              AnonymousInterface6.t) intersection2)
          =
          fun (x1030 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1033 : Ojs.t) ->
                 crypto_BasePrivateKeyEncodingOptions_of_js Obj.magic x1033)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1030)
                 "privateKeyEncoding")
        let (set_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              AnonymousInterface6.t) intersection2 -> unit)
          =
          fun (x1036 : ('PubF, 'PrivF) t) ->
            fun
              (x1037 :
                ('PrivF crypto_BasePrivateKeyEncodingOptions,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1036)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1038 : 'PrivF crypto_BasePrivateKeyEncodingOptions)
                      ->
                      crypto_BasePrivateKeyEncodingOptions_to_js Obj.magic
                        x1038) AnonymousInterface6.t_to_js x1037)
      end
    module ED448KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) crypto_ED448KeyPairOptions
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x1046 : Ojs.t) ->
                crypto_ED448KeyPairOptions_of_js __PubF_of_js __PrivF_of_js
                  x1046
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x1043 : (__PubF, __PrivF) crypto_ED448KeyPairOptions) ->
                crypto_ED448KeyPairOptions_to_js __PubF_to_js __PrivF_to_js
                  x1043
        let (get_publicKeyEncoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x1049 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1049)
                 "publicKeyEncoding")
        let (set_publicKeyEncoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x1052 : ('PubF, 'PrivF) t) ->
            fun (x1053 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1052)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x1053)
        let (get_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              AnonymousInterface6.t) intersection2)
          =
          fun (x1056 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1059 : Ojs.t) ->
                 crypto_BasePrivateKeyEncodingOptions_of_js Obj.magic x1059)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1056)
                 "privateKeyEncoding")
        let (set_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              AnonymousInterface6.t) intersection2 -> unit)
          =
          fun (x1062 : ('PubF, 'PrivF) t) ->
            fun
              (x1063 :
                ('PrivF crypto_BasePrivateKeyEncodingOptions,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1062)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1064 : 'PrivF crypto_BasePrivateKeyEncodingOptions)
                      ->
                      crypto_BasePrivateKeyEncodingOptions_to_js Obj.magic
                        x1064) AnonymousInterface6.t_to_js x1063)
      end
    module X25519KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) crypto_X25519KeyPairOptions
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x1072 : Ojs.t) ->
                crypto_X25519KeyPairOptions_of_js __PubF_of_js __PrivF_of_js
                  x1072
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x1069 : (__PubF, __PrivF) crypto_X25519KeyPairOptions) ->
                crypto_X25519KeyPairOptions_to_js __PubF_to_js __PrivF_to_js
                  x1069
        let (get_publicKeyEncoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x1075 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1075)
                 "publicKeyEncoding")
        let (set_publicKeyEncoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x1078 : ('PubF, 'PrivF) t) ->
            fun (x1079 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1078)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x1079)
        let (get_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              AnonymousInterface6.t) intersection2)
          =
          fun (x1082 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1085 : Ojs.t) ->
                 crypto_BasePrivateKeyEncodingOptions_of_js Obj.magic x1085)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1082)
                 "privateKeyEncoding")
        let (set_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              AnonymousInterface6.t) intersection2 -> unit)
          =
          fun (x1088 : ('PubF, 'PrivF) t) ->
            fun
              (x1089 :
                ('PrivF crypto_BasePrivateKeyEncodingOptions,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1088)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1090 : 'PrivF crypto_BasePrivateKeyEncodingOptions)
                      ->
                      crypto_BasePrivateKeyEncodingOptions_to_js Obj.magic
                        x1090) AnonymousInterface6.t_to_js x1089)
      end
    module X448KeyPairOptions =
      struct
        type ('PubF, 'PrivF) t = ('PubF, 'PrivF) crypto_X448KeyPairOptions
        let rec t_of_js :
          'PubF 'PrivF .
            (Ojs.t -> 'PubF) ->
              (Ojs.t -> 'PrivF) -> Ojs.t -> ('PubF, 'PrivF) t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_of_js : Ojs.t -> __PubF) ->
            fun (__PrivF_of_js : Ojs.t -> __PrivF) ->
              fun (x1098 : Ojs.t) ->
                crypto_X448KeyPairOptions_of_js __PubF_of_js __PrivF_of_js
                  x1098
        and t_to_js :
          'PubF 'PrivF .
            ('PubF -> Ojs.t) ->
              ('PrivF -> Ojs.t) -> ('PubF, 'PrivF) t -> Ojs.t
          = fun (type __PubF) -> fun (type __PrivF) ->
          fun (__PubF_to_js : __PubF -> Ojs.t) ->
            fun (__PrivF_to_js : __PrivF -> Ojs.t) ->
              fun (x1095 : (__PubF, __PrivF) crypto_X448KeyPairOptions) ->
                crypto_X448KeyPairOptions_to_js __PubF_to_js __PrivF_to_js
                  x1095
        let (get_publicKeyEncoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t) =
          fun (x1101 : ('PubF, 'PrivF) t) ->
            AnonymousInterface7.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1101)
                 "publicKeyEncoding")
        let (set_publicKeyEncoding :
          ('PubF, 'PrivF) t -> AnonymousInterface7.t -> unit) =
          fun (x1104 : ('PubF, 'PrivF) t) ->
            fun (x1105 : AnonymousInterface7.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1104)
                "publicKeyEncoding" (AnonymousInterface7.t_to_js x1105)
        let (get_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              AnonymousInterface6.t) intersection2)
          =
          fun (x1108 : ('PubF, 'PrivF) t) ->
            intersection2_of_js
              (fun (x1111 : Ojs.t) ->
                 crypto_BasePrivateKeyEncodingOptions_of_js Obj.magic x1111)
              AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1108)
                 "privateKeyEncoding")
        let (set_privateKeyEncoding :
          ('PubF, 'PrivF) t ->
            ('PrivF crypto_BasePrivateKeyEncodingOptions,
              AnonymousInterface6.t) intersection2 -> unit)
          =
          fun (x1114 : ('PubF, 'PrivF) t) ->
            fun
              (x1115 :
                ('PrivF crypto_BasePrivateKeyEncodingOptions,
                  AnonymousInterface6.t) intersection2)
              ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1114)
                "privateKeyEncoding"
                (intersection2_to_js
                   (fun (x1116 : 'PrivF crypto_BasePrivateKeyEncodingOptions)
                      ->
                      crypto_BasePrivateKeyEncodingOptions_to_js Obj.magic
                        x1116) AnonymousInterface6.t_to_js x1115)
      end
    module KeyPairSyncResult =
      struct
        type ('T1, 'T2) t = ('T1, 'T2) crypto_KeyPairSyncResult
        let rec t_of_js :
          'T1 'T2 . (Ojs.t -> 'T1) -> (Ojs.t -> 'T2) -> Ojs.t -> ('T1, 'T2) t
          = fun (type __T1) -> fun (type __T2) ->
          fun (__T1_of_js : Ojs.t -> __T1) ->
            fun (__T2_of_js : Ojs.t -> __T2) ->
              fun (x1124 : Ojs.t) ->
                crypto_KeyPairSyncResult_of_js __T1_of_js __T2_of_js x1124
        and t_to_js :
          'T1 'T2 . ('T1 -> Ojs.t) -> ('T2 -> Ojs.t) -> ('T1, 'T2) t -> Ojs.t
          = fun (type __T1) -> fun (type __T2) ->
          fun (__T1_to_js : __T1 -> Ojs.t) ->
            fun (__T2_to_js : __T2 -> Ojs.t) ->
              fun (x1121 : (__T1, __T2) crypto_KeyPairSyncResult) ->
                crypto_KeyPairSyncResult_to_js __T1_to_js __T2_to_js x1121
        let (get_publicKey : ('T1, 'T2) t -> 'T1) =
          fun (x1127 : ('T1, 'T2) t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1127)
                 "publicKey")
        let (set_publicKey : ('T1, 'T2) t -> 'T1 -> unit) =
          fun (x1130 : ('T1, 'T2) t) ->
            fun (x1131 : 'T1) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1130)
                "publicKey" (Obj.magic x1131)
        let (get_privateKey : ('T1, 'T2) t -> 'T2) =
          fun (x1134 : ('T1, 'T2) t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic Obj.magic x1134)
                 "privateKey")
        let (set_privateKey : ('T1, 'T2) t -> 'T2 -> unit) =
          fun (x1137 : ('T1, 'T2) t) ->
            fun (x1138 : 'T2) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic Obj.magic x1137)
                "privateKey" (Obj.magic x1138)
      end
    let (generateKeyPairSync :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `pem ]) crypto_RSAKeyPairOptions ->
          (string, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1141 : [ `rsa ]) ->
        fun ~options:(x1142 : ([ `pem ], [ `pem ]) crypto_RSAKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1141 with | `rsa -> Ojs.string_to_js "rsa"));(
                 crypto_RSAKeyPairOptions_to_js
                   (fun (x1143 : [ `pem ]) ->
                      match x1143 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1144 : [ `pem ]) ->
                      match x1144 with | `pem -> Ojs.string_to_js "pem")
                   x1142)|])
    let (generateKeyPairSync :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `der ]) crypto_RSAKeyPairOptions ->
          (string, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1147 : [ `rsa ]) ->
        fun ~options:(x1148 : ([ `pem ], [ `der ]) crypto_RSAKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1147 with | `rsa -> Ojs.string_to_js "rsa"));(
                 crypto_RSAKeyPairOptions_to_js
                   (fun (x1149 : [ `pem ]) ->
                      match x1149 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1150 : [ `der ]) ->
                      match x1150 with | `der -> Ojs.string_to_js "der")
                   x1148)|])
    let (generateKeyPairSync :
      type_:[ `rsa ] ->
        options:([ `der ], [ `pem ]) crypto_RSAKeyPairOptions ->
          (Buffer.t, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1153 : [ `rsa ]) ->
        fun ~options:(x1154 : ([ `der ], [ `pem ]) crypto_RSAKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1153 with | `rsa -> Ojs.string_to_js "rsa"));(
                 crypto_RSAKeyPairOptions_to_js
                   (fun (x1155 : [ `der ]) ->
                      match x1155 with | `der -> Ojs.string_to_js "der")
                   (fun (x1156 : [ `pem ]) ->
                      match x1156 with | `pem -> Ojs.string_to_js "pem")
                   x1154)|])
    let (generateKeyPairSync :
      type_:[ `rsa ] ->
        options:([ `der ], [ `der ]) crypto_RSAKeyPairOptions ->
          (Buffer.t, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1159 : [ `rsa ]) ->
        fun ~options:(x1160 : ([ `der ], [ `der ]) crypto_RSAKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1159 with | `rsa -> Ojs.string_to_js "rsa"));(
                 crypto_RSAKeyPairOptions_to_js
                   (fun (x1161 : [ `der ]) ->
                      match x1161 with | `der -> Ojs.string_to_js "der")
                   (fun (x1162 : [ `der ]) ->
                      match x1162 with | `der -> Ojs.string_to_js "der")
                   x1160)|])
    let (generateKeyPairSync :
      type_:[ `rsa ] ->
        options:crypto_RSAKeyPairKeyObjectOptions ->
          crypto_KeyPairKeyObjectResult)
      =
      fun ~type_:(x1165 : [ `rsa ]) ->
        fun ~options:(x1166 : crypto_RSAKeyPairKeyObjectOptions) ->
          crypto_KeyPairKeyObjectResult_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1165 with | `rsa -> Ojs.string_to_js "rsa"));(
                 crypto_RSAKeyPairKeyObjectOptions_to_js x1166)|])
    let (generateKeyPairSync :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `pem ]) crypto_DSAKeyPairOptions ->
          (string, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1167 : [ `dsa ]) ->
        fun ~options:(x1168 : ([ `pem ], [ `pem ]) crypto_DSAKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1167 with | `dsa -> Ojs.string_to_js "dsa"));(
                 crypto_DSAKeyPairOptions_to_js
                   (fun (x1169 : [ `pem ]) ->
                      match x1169 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1170 : [ `pem ]) ->
                      match x1170 with | `pem -> Ojs.string_to_js "pem")
                   x1168)|])
    let (generateKeyPairSync :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `der ]) crypto_DSAKeyPairOptions ->
          (string, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1173 : [ `dsa ]) ->
        fun ~options:(x1174 : ([ `pem ], [ `der ]) crypto_DSAKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1173 with | `dsa -> Ojs.string_to_js "dsa"));(
                 crypto_DSAKeyPairOptions_to_js
                   (fun (x1175 : [ `pem ]) ->
                      match x1175 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1176 : [ `der ]) ->
                      match x1176 with | `der -> Ojs.string_to_js "der")
                   x1174)|])
    let (generateKeyPairSync :
      type_:[ `dsa ] ->
        options:([ `der ], [ `pem ]) crypto_DSAKeyPairOptions ->
          (Buffer.t, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1179 : [ `dsa ]) ->
        fun ~options:(x1180 : ([ `der ], [ `pem ]) crypto_DSAKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1179 with | `dsa -> Ojs.string_to_js "dsa"));(
                 crypto_DSAKeyPairOptions_to_js
                   (fun (x1181 : [ `der ]) ->
                      match x1181 with | `der -> Ojs.string_to_js "der")
                   (fun (x1182 : [ `pem ]) ->
                      match x1182 with | `pem -> Ojs.string_to_js "pem")
                   x1180)|])
    let (generateKeyPairSync :
      type_:[ `dsa ] ->
        options:([ `der ], [ `der ]) crypto_DSAKeyPairOptions ->
          (Buffer.t, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1185 : [ `dsa ]) ->
        fun ~options:(x1186 : ([ `der ], [ `der ]) crypto_DSAKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1185 with | `dsa -> Ojs.string_to_js "dsa"));(
                 crypto_DSAKeyPairOptions_to_js
                   (fun (x1187 : [ `der ]) ->
                      match x1187 with | `der -> Ojs.string_to_js "der")
                   (fun (x1188 : [ `der ]) ->
                      match x1188 with | `der -> Ojs.string_to_js "der")
                   x1186)|])
    let (generateKeyPairSync :
      type_:[ `dsa ] ->
        options:crypto_DSAKeyPairKeyObjectOptions ->
          crypto_KeyPairKeyObjectResult)
      =
      fun ~type_:(x1191 : [ `dsa ]) ->
        fun ~options:(x1192 : crypto_DSAKeyPairKeyObjectOptions) ->
          crypto_KeyPairKeyObjectResult_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1191 with | `dsa -> Ojs.string_to_js "dsa"));(
                 crypto_DSAKeyPairKeyObjectOptions_to_js x1192)|])
    let (generateKeyPairSync :
      type_:[ `ec ] ->
        options:([ `pem ], [ `pem ]) crypto_ECKeyPairOptions ->
          (string, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1193 : [ `ec ]) ->
        fun ~options:(x1194 : ([ `pem ], [ `pem ]) crypto_ECKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1193 with | `ec -> Ojs.string_to_js "ec"));(
                 crypto_ECKeyPairOptions_to_js
                   (fun (x1195 : [ `pem ]) ->
                      match x1195 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1196 : [ `pem ]) ->
                      match x1196 with | `pem -> Ojs.string_to_js "pem")
                   x1194)|])
    let (generateKeyPairSync :
      type_:[ `ec ] ->
        options:([ `pem ], [ `der ]) crypto_ECKeyPairOptions ->
          (string, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1199 : [ `ec ]) ->
        fun ~options:(x1200 : ([ `pem ], [ `der ]) crypto_ECKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1199 with | `ec -> Ojs.string_to_js "ec"));(
                 crypto_ECKeyPairOptions_to_js
                   (fun (x1201 : [ `pem ]) ->
                      match x1201 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1202 : [ `der ]) ->
                      match x1202 with | `der -> Ojs.string_to_js "der")
                   x1200)|])
    let (generateKeyPairSync :
      type_:[ `ec ] ->
        options:([ `der ], [ `pem ]) crypto_ECKeyPairOptions ->
          (Buffer.t, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1205 : [ `ec ]) ->
        fun ~options:(x1206 : ([ `der ], [ `pem ]) crypto_ECKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1205 with | `ec -> Ojs.string_to_js "ec"));(
                 crypto_ECKeyPairOptions_to_js
                   (fun (x1207 : [ `der ]) ->
                      match x1207 with | `der -> Ojs.string_to_js "der")
                   (fun (x1208 : [ `pem ]) ->
                      match x1208 with | `pem -> Ojs.string_to_js "pem")
                   x1206)|])
    let (generateKeyPairSync :
      type_:[ `ec ] ->
        options:([ `der ], [ `der ]) crypto_ECKeyPairOptions ->
          (Buffer.t, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1211 : [ `ec ]) ->
        fun ~options:(x1212 : ([ `der ], [ `der ]) crypto_ECKeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1211 with | `ec -> Ojs.string_to_js "ec"));(
                 crypto_ECKeyPairOptions_to_js
                   (fun (x1213 : [ `der ]) ->
                      match x1213 with | `der -> Ojs.string_to_js "der")
                   (fun (x1214 : [ `der ]) ->
                      match x1214 with | `der -> Ojs.string_to_js "der")
                   x1212)|])
    let (generateKeyPairSync :
      type_:[ `ec ] ->
        options:crypto_ECKeyPairKeyObjectOptions ->
          crypto_KeyPairKeyObjectResult)
      =
      fun ~type_:(x1217 : [ `ec ]) ->
        fun ~options:(x1218 : crypto_ECKeyPairKeyObjectOptions) ->
          crypto_KeyPairKeyObjectResult_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1217 with | `ec -> Ojs.string_to_js "ec"));(
                 crypto_ECKeyPairKeyObjectOptions_to_js x1218)|])
    let (generateKeyPairSync :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `pem ]) crypto_ED25519KeyPairOptions ->
          (string, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1219 : [ `ed25519 ]) ->
        fun
          ~options:(x1220 :
                     ([ `pem ], [ `pem ]) crypto_ED25519KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1219 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 crypto_ED25519KeyPairOptions_to_js
                   (fun (x1221 : [ `pem ]) ->
                      match x1221 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1222 : [ `pem ]) ->
                      match x1222 with | `pem -> Ojs.string_to_js "pem")
                   x1220)|])
    let (generateKeyPairSync :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `der ]) crypto_ED25519KeyPairOptions ->
          (string, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1225 : [ `ed25519 ]) ->
        fun
          ~options:(x1226 :
                     ([ `pem ], [ `der ]) crypto_ED25519KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1225 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 crypto_ED25519KeyPairOptions_to_js
                   (fun (x1227 : [ `pem ]) ->
                      match x1227 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1228 : [ `der ]) ->
                      match x1228 with | `der -> Ojs.string_to_js "der")
                   x1226)|])
    let (generateKeyPairSync :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `pem ]) crypto_ED25519KeyPairOptions ->
          (Buffer.t, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1231 : [ `ed25519 ]) ->
        fun
          ~options:(x1232 :
                     ([ `der ], [ `pem ]) crypto_ED25519KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1231 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 crypto_ED25519KeyPairOptions_to_js
                   (fun (x1233 : [ `der ]) ->
                      match x1233 with | `der -> Ojs.string_to_js "der")
                   (fun (x1234 : [ `pem ]) ->
                      match x1234 with | `pem -> Ojs.string_to_js "pem")
                   x1232)|])
    let (generateKeyPairSync :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `der ]) crypto_ED25519KeyPairOptions ->
          (Buffer.t, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1237 : [ `ed25519 ]) ->
        fun
          ~options:(x1238 :
                     ([ `der ], [ `der ]) crypto_ED25519KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1237 with | `ed25519 -> Ojs.string_to_js "ed25519"));(
                 crypto_ED25519KeyPairOptions_to_js
                   (fun (x1239 : [ `der ]) ->
                      match x1239 with | `der -> Ojs.string_to_js "der")
                   (fun (x1240 : [ `der ]) ->
                      match x1240 with | `der -> Ojs.string_to_js "der")
                   x1238)|])
    let (generateKeyPairSync :
      type_:[ `ed25519 ] ->
        ?options:crypto_ED25519KeyPairKeyObjectOptions ->
          unit -> crypto_KeyPairKeyObjectResult)
      =
      fun ~type_:(x1243 : [ `ed25519 ]) ->
        fun ?options:(x1244 : crypto_ED25519KeyPairKeyObjectOptions option)
          ->
          fun () ->
            crypto_KeyPairKeyObjectResult_of_js
              (let x1247 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1247 "generateKeyPairSync")
                 "apply"
                 [|x1247;((let x1245 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1245 "push"
                                [|((match x1243 with
                                    | `ed25519 -> Ojs.string_to_js "ed25519"))|]);
                           (match x1244 with
                            | Some x1246 ->
                                ignore
                                  (Ojs.call x1245 "push"
                                     [|(crypto_ED25519KeyPairKeyObjectOptions_to_js
                                          x1246)|])
                            | None -> ());
                           x1245))|])
    let (generateKeyPairSync :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `pem ]) crypto_ED448KeyPairOptions ->
          (string, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1248 : [ `ed448 ]) ->
        fun
          ~options:(x1249 : ([ `pem ], [ `pem ]) crypto_ED448KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1248 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 crypto_ED448KeyPairOptions_to_js
                   (fun (x1250 : [ `pem ]) ->
                      match x1250 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1251 : [ `pem ]) ->
                      match x1251 with | `pem -> Ojs.string_to_js "pem")
                   x1249)|])
    let (generateKeyPairSync :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `der ]) crypto_ED448KeyPairOptions ->
          (string, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1254 : [ `ed448 ]) ->
        fun
          ~options:(x1255 : ([ `pem ], [ `der ]) crypto_ED448KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1254 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 crypto_ED448KeyPairOptions_to_js
                   (fun (x1256 : [ `pem ]) ->
                      match x1256 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1257 : [ `der ]) ->
                      match x1257 with | `der -> Ojs.string_to_js "der")
                   x1255)|])
    let (generateKeyPairSync :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `pem ]) crypto_ED448KeyPairOptions ->
          (Buffer.t, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1260 : [ `ed448 ]) ->
        fun
          ~options:(x1261 : ([ `der ], [ `pem ]) crypto_ED448KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1260 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 crypto_ED448KeyPairOptions_to_js
                   (fun (x1262 : [ `der ]) ->
                      match x1262 with | `der -> Ojs.string_to_js "der")
                   (fun (x1263 : [ `pem ]) ->
                      match x1263 with | `pem -> Ojs.string_to_js "pem")
                   x1261)|])
    let (generateKeyPairSync :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `der ]) crypto_ED448KeyPairOptions ->
          (Buffer.t, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1266 : [ `ed448 ]) ->
        fun
          ~options:(x1267 : ([ `der ], [ `der ]) crypto_ED448KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1266 with | `ed448 -> Ojs.string_to_js "ed448"));(
                 crypto_ED448KeyPairOptions_to_js
                   (fun (x1268 : [ `der ]) ->
                      match x1268 with | `der -> Ojs.string_to_js "der")
                   (fun (x1269 : [ `der ]) ->
                      match x1269 with | `der -> Ojs.string_to_js "der")
                   x1267)|])
    let (generateKeyPairSync :
      type_:[ `ed448 ] ->
        ?options:crypto_ED448KeyPairKeyObjectOptions ->
          unit -> crypto_KeyPairKeyObjectResult)
      =
      fun ~type_:(x1272 : [ `ed448 ]) ->
        fun ?options:(x1273 : crypto_ED448KeyPairKeyObjectOptions option) ->
          fun () ->
            crypto_KeyPairKeyObjectResult_of_js
              (let x1276 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1276 "generateKeyPairSync")
                 "apply"
                 [|x1276;((let x1274 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1274 "push"
                                [|((match x1272 with
                                    | `ed448 -> Ojs.string_to_js "ed448"))|]);
                           (match x1273 with
                            | Some x1275 ->
                                ignore
                                  (Ojs.call x1274 "push"
                                     [|(crypto_ED448KeyPairKeyObjectOptions_to_js
                                          x1275)|])
                            | None -> ());
                           x1274))|])
    let (generateKeyPairSync :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `pem ]) crypto_X25519KeyPairOptions ->
          (string, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1277 : [ `x25519 ]) ->
        fun
          ~options:(x1278 : ([ `pem ], [ `pem ]) crypto_X25519KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1277 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 crypto_X25519KeyPairOptions_to_js
                   (fun (x1279 : [ `pem ]) ->
                      match x1279 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1280 : [ `pem ]) ->
                      match x1280 with | `pem -> Ojs.string_to_js "pem")
                   x1278)|])
    let (generateKeyPairSync :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `der ]) crypto_X25519KeyPairOptions ->
          (string, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1283 : [ `x25519 ]) ->
        fun
          ~options:(x1284 : ([ `pem ], [ `der ]) crypto_X25519KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1283 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 crypto_X25519KeyPairOptions_to_js
                   (fun (x1285 : [ `pem ]) ->
                      match x1285 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1286 : [ `der ]) ->
                      match x1286 with | `der -> Ojs.string_to_js "der")
                   x1284)|])
    let (generateKeyPairSync :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `pem ]) crypto_X25519KeyPairOptions ->
          (Buffer.t, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1289 : [ `x25519 ]) ->
        fun
          ~options:(x1290 : ([ `der ], [ `pem ]) crypto_X25519KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1289 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 crypto_X25519KeyPairOptions_to_js
                   (fun (x1291 : [ `der ]) ->
                      match x1291 with | `der -> Ojs.string_to_js "der")
                   (fun (x1292 : [ `pem ]) ->
                      match x1292 with | `pem -> Ojs.string_to_js "pem")
                   x1290)|])
    let (generateKeyPairSync :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `der ]) crypto_X25519KeyPairOptions ->
          (Buffer.t, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1295 : [ `x25519 ]) ->
        fun
          ~options:(x1296 : ([ `der ], [ `der ]) crypto_X25519KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1295 with | `x25519 -> Ojs.string_to_js "x25519"));(
                 crypto_X25519KeyPairOptions_to_js
                   (fun (x1297 : [ `der ]) ->
                      match x1297 with | `der -> Ojs.string_to_js "der")
                   (fun (x1298 : [ `der ]) ->
                      match x1298 with | `der -> Ojs.string_to_js "der")
                   x1296)|])
    let (generateKeyPairSync :
      type_:[ `x25519 ] ->
        ?options:crypto_X25519KeyPairKeyObjectOptions ->
          unit -> crypto_KeyPairKeyObjectResult)
      =
      fun ~type_:(x1301 : [ `x25519 ]) ->
        fun ?options:(x1302 : crypto_X25519KeyPairKeyObjectOptions option) ->
          fun () ->
            crypto_KeyPairKeyObjectResult_of_js
              (let x1305 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1305 "generateKeyPairSync")
                 "apply"
                 [|x1305;((let x1303 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1303 "push"
                                [|((match x1301 with
                                    | `x25519 -> Ojs.string_to_js "x25519"))|]);
                           (match x1302 with
                            | Some x1304 ->
                                ignore
                                  (Ojs.call x1303 "push"
                                     [|(crypto_X25519KeyPairKeyObjectOptions_to_js
                                          x1304)|])
                            | None -> ());
                           x1303))|])
    let (generateKeyPairSync :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `pem ]) crypto_X448KeyPairOptions ->
          (string, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1306 : [ `x448 ]) ->
        fun ~options:(x1307 : ([ `pem ], [ `pem ]) crypto_X448KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1306 with | `x448 -> Ojs.string_to_js "x448"));(
                 crypto_X448KeyPairOptions_to_js
                   (fun (x1308 : [ `pem ]) ->
                      match x1308 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1309 : [ `pem ]) ->
                      match x1309 with | `pem -> Ojs.string_to_js "pem")
                   x1307)|])
    let (generateKeyPairSync :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `der ]) crypto_X448KeyPairOptions ->
          (string, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1312 : [ `x448 ]) ->
        fun ~options:(x1313 : ([ `pem ], [ `der ]) crypto_X448KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Ojs.string_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1312 with | `x448 -> Ojs.string_to_js "x448"));(
                 crypto_X448KeyPairOptions_to_js
                   (fun (x1314 : [ `pem ]) ->
                      match x1314 with | `pem -> Ojs.string_to_js "pem")
                   (fun (x1315 : [ `der ]) ->
                      match x1315 with | `der -> Ojs.string_to_js "der")
                   x1313)|])
    let (generateKeyPairSync :
      type_:[ `x448 ] ->
        options:([ `der ], [ `pem ]) crypto_X448KeyPairOptions ->
          (Buffer.t, string) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1318 : [ `x448 ]) ->
        fun ~options:(x1319 : ([ `der ], [ `pem ]) crypto_X448KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Ojs.string_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1318 with | `x448 -> Ojs.string_to_js "x448"));(
                 crypto_X448KeyPairOptions_to_js
                   (fun (x1320 : [ `der ]) ->
                      match x1320 with | `der -> Ojs.string_to_js "der")
                   (fun (x1321 : [ `pem ]) ->
                      match x1321 with | `pem -> Ojs.string_to_js "pem")
                   x1319)|])
    let (generateKeyPairSync :
      type_:[ `x448 ] ->
        options:([ `der ], [ `der ]) crypto_X448KeyPairOptions ->
          (Buffer.t, Buffer.t) crypto_KeyPairSyncResult)
      =
      fun ~type_:(x1324 : [ `x448 ]) ->
        fun ~options:(x1325 : ([ `der ], [ `der ]) crypto_X448KeyPairOptions)
          ->
          crypto_KeyPairSyncResult_of_js Buffer.t_of_js Buffer.t_of_js
            (Ojs.call Import.crypto "generateKeyPairSync"
               [|((match x1324 with | `x448 -> Ojs.string_to_js "x448"));(
                 crypto_X448KeyPairOptions_to_js
                   (fun (x1326 : [ `der ]) ->
                      match x1326 with | `der -> Ojs.string_to_js "der")
                   (fun (x1327 : [ `der ]) ->
                      match x1327 with | `der -> Ojs.string_to_js "der")
                   x1325)|])
    let (generateKeyPairSync :
      type_:[ `x448 ] ->
        ?options:crypto_X448KeyPairKeyObjectOptions ->
          unit -> crypto_KeyPairKeyObjectResult)
      =
      fun ~type_:(x1330 : [ `x448 ]) ->
        fun ?options:(x1331 : crypto_X448KeyPairKeyObjectOptions option) ->
          fun () ->
            crypto_KeyPairKeyObjectResult_of_js
              (let x1334 = Import.crypto in
               Ojs.call (Ojs.get_prop_ascii x1334 "generateKeyPairSync")
                 "apply"
                 [|x1334;((let x1332 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1332 "push"
                                [|((match x1330 with
                                    | `x448 -> Ojs.string_to_js "x448"))|]);
                           (match x1331 with
                            | Some x1333 ->
                                ignore
                                  (Ojs.call x1332 "push"
                                     [|(crypto_X448KeyPairKeyObjectOptions_to_js
                                          x1333)|])
                            | None -> ());
                           x1332))|])
    let (generateKeyPair :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `pem ]) crypto_RSAKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1335 : [ `rsa ]) ->
        fun ~options:(x1336 : ([ `pem ], [ `pem ]) crypto_RSAKeyPairOptions)
          ->
          fun
            ~callback:(x1339 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1335 with | `rsa -> Ojs.string_to_js "rsa"));(
                   crypto_RSAKeyPairOptions_to_js
                     (fun (x1337 : [ `pem ]) ->
                        match x1337 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1338 : [ `pem ]) ->
                        match x1338 with | `pem -> Ojs.string_to_js "pem")
                     x1336);(Ojs.fun_to_js 3
                               (fun (x1340 : Ojs.t) ->
                                  fun (x1342 : Ojs.t) ->
                                    fun (x1343 : Ojs.t) ->
                                      x1339
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1340)
                                        ~publicKey:(Ojs.string_of_js x1342)
                                        ~privateKey:(Ojs.string_of_js x1343)))|])
    let (generateKeyPair :
      type_:[ `rsa ] ->
        options:([ `pem ], [ `der ]) crypto_RSAKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1344 : [ `rsa ]) ->
        fun ~options:(x1345 : ([ `pem ], [ `der ]) crypto_RSAKeyPairOptions)
          ->
          fun
            ~callback:(x1348 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1344 with | `rsa -> Ojs.string_to_js "rsa"));(
                   crypto_RSAKeyPairOptions_to_js
                     (fun (x1346 : [ `pem ]) ->
                        match x1346 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1347 : [ `der ]) ->
                        match x1347 with | `der -> Ojs.string_to_js "der")
                     x1345);(Ojs.fun_to_js 3
                               (fun (x1349 : Ojs.t) ->
                                  fun (x1351 : Ojs.t) ->
                                    fun (x1352 : Ojs.t) ->
                                      x1348
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1349)
                                        ~publicKey:(Ojs.string_of_js x1351)
                                        ~privateKey:(Buffer.t_of_js x1352)))|])
    let (generateKeyPair :
      type_:[ `rsa ] ->
        options:([ `der ], [ `pem ]) crypto_RSAKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1353 : [ `rsa ]) ->
        fun ~options:(x1354 : ([ `der ], [ `pem ]) crypto_RSAKeyPairOptions)
          ->
          fun
            ~callback:(x1357 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1353 with | `rsa -> Ojs.string_to_js "rsa"));(
                   crypto_RSAKeyPairOptions_to_js
                     (fun (x1355 : [ `der ]) ->
                        match x1355 with | `der -> Ojs.string_to_js "der")
                     (fun (x1356 : [ `pem ]) ->
                        match x1356 with | `pem -> Ojs.string_to_js "pem")
                     x1354);(Ojs.fun_to_js 3
                               (fun (x1358 : Ojs.t) ->
                                  fun (x1360 : Ojs.t) ->
                                    fun (x1361 : Ojs.t) ->
                                      x1357
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1358)
                                        ~publicKey:(Buffer.t_of_js x1360)
                                        ~privateKey:(Ojs.string_of_js x1361)))|])
    let (generateKeyPair :
      type_:[ `rsa ] ->
        options:([ `der ], [ `der ]) crypto_RSAKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1362 : [ `rsa ]) ->
        fun ~options:(x1363 : ([ `der ], [ `der ]) crypto_RSAKeyPairOptions)
          ->
          fun
            ~callback:(x1366 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1362 with | `rsa -> Ojs.string_to_js "rsa"));(
                   crypto_RSAKeyPairOptions_to_js
                     (fun (x1364 : [ `der ]) ->
                        match x1364 with | `der -> Ojs.string_to_js "der")
                     (fun (x1365 : [ `der ]) ->
                        match x1365 with | `der -> Ojs.string_to_js "der")
                     x1363);(Ojs.fun_to_js 3
                               (fun (x1367 : Ojs.t) ->
                                  fun (x1369 : Ojs.t) ->
                                    fun (x1370 : Ojs.t) ->
                                      x1366
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1367)
                                        ~publicKey:(Buffer.t_of_js x1369)
                                        ~privateKey:(Buffer.t_of_js x1370)))|])
    let (generateKeyPair :
      type_:[ `rsa ] ->
        options:crypto_RSAKeyPairKeyObjectOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:crypto_KeyObject ->
                        privateKey:crypto_KeyObject -> unit)
            -> unit)
      =
      fun ~type_:(x1371 : [ `rsa ]) ->
        fun ~options:(x1372 : crypto_RSAKeyPairKeyObjectOptions) ->
          fun
            ~callback:(x1373 :
                        err:Error.t or_null ->
                          publicKey:crypto_KeyObject ->
                            privateKey:crypto_KeyObject -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1371 with | `rsa -> Ojs.string_to_js "rsa"));(
                   crypto_RSAKeyPairKeyObjectOptions_to_js x1372);(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1374 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1376 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1377 :
                                                                    Ojs.t) ->
                                                                    x1373
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x1374)
                                                                    ~publicKey:(
                                                                    crypto_KeyObject_of_js
                                                                    x1376)
                                                                    ~privateKey:(
                                                                    crypto_KeyObject_of_js
                                                                    x1377)))|])
    let (generateKeyPair :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `pem ]) crypto_DSAKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1378 : [ `dsa ]) ->
        fun ~options:(x1379 : ([ `pem ], [ `pem ]) crypto_DSAKeyPairOptions)
          ->
          fun
            ~callback:(x1382 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1378 with | `dsa -> Ojs.string_to_js "dsa"));(
                   crypto_DSAKeyPairOptions_to_js
                     (fun (x1380 : [ `pem ]) ->
                        match x1380 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1381 : [ `pem ]) ->
                        match x1381 with | `pem -> Ojs.string_to_js "pem")
                     x1379);(Ojs.fun_to_js 3
                               (fun (x1383 : Ojs.t) ->
                                  fun (x1385 : Ojs.t) ->
                                    fun (x1386 : Ojs.t) ->
                                      x1382
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1383)
                                        ~publicKey:(Ojs.string_of_js x1385)
                                        ~privateKey:(Ojs.string_of_js x1386)))|])
    let (generateKeyPair :
      type_:[ `dsa ] ->
        options:([ `pem ], [ `der ]) crypto_DSAKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1387 : [ `dsa ]) ->
        fun ~options:(x1388 : ([ `pem ], [ `der ]) crypto_DSAKeyPairOptions)
          ->
          fun
            ~callback:(x1391 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1387 with | `dsa -> Ojs.string_to_js "dsa"));(
                   crypto_DSAKeyPairOptions_to_js
                     (fun (x1389 : [ `pem ]) ->
                        match x1389 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1390 : [ `der ]) ->
                        match x1390 with | `der -> Ojs.string_to_js "der")
                     x1388);(Ojs.fun_to_js 3
                               (fun (x1392 : Ojs.t) ->
                                  fun (x1394 : Ojs.t) ->
                                    fun (x1395 : Ojs.t) ->
                                      x1391
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1392)
                                        ~publicKey:(Ojs.string_of_js x1394)
                                        ~privateKey:(Buffer.t_of_js x1395)))|])
    let (generateKeyPair :
      type_:[ `dsa ] ->
        options:([ `der ], [ `pem ]) crypto_DSAKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1396 : [ `dsa ]) ->
        fun ~options:(x1397 : ([ `der ], [ `pem ]) crypto_DSAKeyPairOptions)
          ->
          fun
            ~callback:(x1400 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1396 with | `dsa -> Ojs.string_to_js "dsa"));(
                   crypto_DSAKeyPairOptions_to_js
                     (fun (x1398 : [ `der ]) ->
                        match x1398 with | `der -> Ojs.string_to_js "der")
                     (fun (x1399 : [ `pem ]) ->
                        match x1399 with | `pem -> Ojs.string_to_js "pem")
                     x1397);(Ojs.fun_to_js 3
                               (fun (x1401 : Ojs.t) ->
                                  fun (x1403 : Ojs.t) ->
                                    fun (x1404 : Ojs.t) ->
                                      x1400
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1401)
                                        ~publicKey:(Buffer.t_of_js x1403)
                                        ~privateKey:(Ojs.string_of_js x1404)))|])
    let (generateKeyPair :
      type_:[ `dsa ] ->
        options:([ `der ], [ `der ]) crypto_DSAKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1405 : [ `dsa ]) ->
        fun ~options:(x1406 : ([ `der ], [ `der ]) crypto_DSAKeyPairOptions)
          ->
          fun
            ~callback:(x1409 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1405 with | `dsa -> Ojs.string_to_js "dsa"));(
                   crypto_DSAKeyPairOptions_to_js
                     (fun (x1407 : [ `der ]) ->
                        match x1407 with | `der -> Ojs.string_to_js "der")
                     (fun (x1408 : [ `der ]) ->
                        match x1408 with | `der -> Ojs.string_to_js "der")
                     x1406);(Ojs.fun_to_js 3
                               (fun (x1410 : Ojs.t) ->
                                  fun (x1412 : Ojs.t) ->
                                    fun (x1413 : Ojs.t) ->
                                      x1409
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1410)
                                        ~publicKey:(Buffer.t_of_js x1412)
                                        ~privateKey:(Buffer.t_of_js x1413)))|])
    let (generateKeyPair :
      type_:[ `dsa ] ->
        options:crypto_DSAKeyPairKeyObjectOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:crypto_KeyObject ->
                        privateKey:crypto_KeyObject -> unit)
            -> unit)
      =
      fun ~type_:(x1414 : [ `dsa ]) ->
        fun ~options:(x1415 : crypto_DSAKeyPairKeyObjectOptions) ->
          fun
            ~callback:(x1416 :
                        err:Error.t or_null ->
                          publicKey:crypto_KeyObject ->
                            privateKey:crypto_KeyObject -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1414 with | `dsa -> Ojs.string_to_js "dsa"));(
                   crypto_DSAKeyPairKeyObjectOptions_to_js x1415);(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1417 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1419 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1420 :
                                                                    Ojs.t) ->
                                                                    x1416
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x1417)
                                                                    ~publicKey:(
                                                                    crypto_KeyObject_of_js
                                                                    x1419)
                                                                    ~privateKey:(
                                                                    crypto_KeyObject_of_js
                                                                    x1420)))|])
    let (generateKeyPair :
      type_:[ `ec ] ->
        options:([ `pem ], [ `pem ]) crypto_ECKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1421 : [ `ec ]) ->
        fun ~options:(x1422 : ([ `pem ], [ `pem ]) crypto_ECKeyPairOptions)
          ->
          fun
            ~callback:(x1425 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1421 with | `ec -> Ojs.string_to_js "ec"));(
                   crypto_ECKeyPairOptions_to_js
                     (fun (x1423 : [ `pem ]) ->
                        match x1423 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1424 : [ `pem ]) ->
                        match x1424 with | `pem -> Ojs.string_to_js "pem")
                     x1422);(Ojs.fun_to_js 3
                               (fun (x1426 : Ojs.t) ->
                                  fun (x1428 : Ojs.t) ->
                                    fun (x1429 : Ojs.t) ->
                                      x1425
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1426)
                                        ~publicKey:(Ojs.string_of_js x1428)
                                        ~privateKey:(Ojs.string_of_js x1429)))|])
    let (generateKeyPair :
      type_:[ `ec ] ->
        options:([ `pem ], [ `der ]) crypto_ECKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1430 : [ `ec ]) ->
        fun ~options:(x1431 : ([ `pem ], [ `der ]) crypto_ECKeyPairOptions)
          ->
          fun
            ~callback:(x1434 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1430 with | `ec -> Ojs.string_to_js "ec"));(
                   crypto_ECKeyPairOptions_to_js
                     (fun (x1432 : [ `pem ]) ->
                        match x1432 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1433 : [ `der ]) ->
                        match x1433 with | `der -> Ojs.string_to_js "der")
                     x1431);(Ojs.fun_to_js 3
                               (fun (x1435 : Ojs.t) ->
                                  fun (x1437 : Ojs.t) ->
                                    fun (x1438 : Ojs.t) ->
                                      x1434
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1435)
                                        ~publicKey:(Ojs.string_of_js x1437)
                                        ~privateKey:(Buffer.t_of_js x1438)))|])
    let (generateKeyPair :
      type_:[ `ec ] ->
        options:([ `der ], [ `pem ]) crypto_ECKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1439 : [ `ec ]) ->
        fun ~options:(x1440 : ([ `der ], [ `pem ]) crypto_ECKeyPairOptions)
          ->
          fun
            ~callback:(x1443 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1439 with | `ec -> Ojs.string_to_js "ec"));(
                   crypto_ECKeyPairOptions_to_js
                     (fun (x1441 : [ `der ]) ->
                        match x1441 with | `der -> Ojs.string_to_js "der")
                     (fun (x1442 : [ `pem ]) ->
                        match x1442 with | `pem -> Ojs.string_to_js "pem")
                     x1440);(Ojs.fun_to_js 3
                               (fun (x1444 : Ojs.t) ->
                                  fun (x1446 : Ojs.t) ->
                                    fun (x1447 : Ojs.t) ->
                                      x1443
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1444)
                                        ~publicKey:(Buffer.t_of_js x1446)
                                        ~privateKey:(Ojs.string_of_js x1447)))|])
    let (generateKeyPair :
      type_:[ `ec ] ->
        options:([ `der ], [ `der ]) crypto_ECKeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1448 : [ `ec ]) ->
        fun ~options:(x1449 : ([ `der ], [ `der ]) crypto_ECKeyPairOptions)
          ->
          fun
            ~callback:(x1452 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1448 with | `ec -> Ojs.string_to_js "ec"));(
                   crypto_ECKeyPairOptions_to_js
                     (fun (x1450 : [ `der ]) ->
                        match x1450 with | `der -> Ojs.string_to_js "der")
                     (fun (x1451 : [ `der ]) ->
                        match x1451 with | `der -> Ojs.string_to_js "der")
                     x1449);(Ojs.fun_to_js 3
                               (fun (x1453 : Ojs.t) ->
                                  fun (x1455 : Ojs.t) ->
                                    fun (x1456 : Ojs.t) ->
                                      x1452
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1453)
                                        ~publicKey:(Buffer.t_of_js x1455)
                                        ~privateKey:(Buffer.t_of_js x1456)))|])
    let (generateKeyPair :
      type_:[ `ec ] ->
        options:crypto_ECKeyPairKeyObjectOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:crypto_KeyObject ->
                        privateKey:crypto_KeyObject -> unit)
            -> unit)
      =
      fun ~type_:(x1457 : [ `ec ]) ->
        fun ~options:(x1458 : crypto_ECKeyPairKeyObjectOptions) ->
          fun
            ~callback:(x1459 :
                        err:Error.t or_null ->
                          publicKey:crypto_KeyObject ->
                            privateKey:crypto_KeyObject -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1457 with | `ec -> Ojs.string_to_js "ec"));(
                   crypto_ECKeyPairKeyObjectOptions_to_js x1458);(Ojs.fun_to_js
                                                                    3
                                                                    (
                                                                    fun
                                                                    (x1460 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1462 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1463 :
                                                                    Ojs.t) ->
                                                                    x1459
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x1460)
                                                                    ~publicKey:(
                                                                    crypto_KeyObject_of_js
                                                                    x1462)
                                                                    ~privateKey:(
                                                                    crypto_KeyObject_of_js
                                                                    x1463)))|])
    let (generateKeyPair :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `pem ]) crypto_ED25519KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1464 : [ `ed25519 ]) ->
        fun
          ~options:(x1465 :
                     ([ `pem ], [ `pem ]) crypto_ED25519KeyPairOptions)
          ->
          fun
            ~callback:(x1468 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1464 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(crypto_ED25519KeyPairOptions_to_js
                                                                   (fun
                                                                    (x1466 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1466
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1467 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1467
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1465);(
                   Ojs.fun_to_js 3
                     (fun (x1469 : Ojs.t) ->
                        fun (x1471 : Ojs.t) ->
                          fun (x1472 : Ojs.t) ->
                            x1468 ~err:(or_null_of_js Error.t_of_js x1469)
                              ~publicKey:(Ojs.string_of_js x1471)
                              ~privateKey:(Ojs.string_of_js x1472)))|])
    let (generateKeyPair :
      type_:[ `ed25519 ] ->
        options:([ `pem ], [ `der ]) crypto_ED25519KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1473 : [ `ed25519 ]) ->
        fun
          ~options:(x1474 :
                     ([ `pem ], [ `der ]) crypto_ED25519KeyPairOptions)
          ->
          fun
            ~callback:(x1477 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1473 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(crypto_ED25519KeyPairOptions_to_js
                                                                   (fun
                                                                    (x1475 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1475
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1476 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1476
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1474);(
                   Ojs.fun_to_js 3
                     (fun (x1478 : Ojs.t) ->
                        fun (x1480 : Ojs.t) ->
                          fun (x1481 : Ojs.t) ->
                            x1477 ~err:(or_null_of_js Error.t_of_js x1478)
                              ~publicKey:(Ojs.string_of_js x1480)
                              ~privateKey:(Buffer.t_of_js x1481)))|])
    let (generateKeyPair :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `pem ]) crypto_ED25519KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1482 : [ `ed25519 ]) ->
        fun
          ~options:(x1483 :
                     ([ `der ], [ `pem ]) crypto_ED25519KeyPairOptions)
          ->
          fun
            ~callback:(x1486 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1482 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(crypto_ED25519KeyPairOptions_to_js
                                                                   (fun
                                                                    (x1484 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1484
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1485 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1485
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1483);(
                   Ojs.fun_to_js 3
                     (fun (x1487 : Ojs.t) ->
                        fun (x1489 : Ojs.t) ->
                          fun (x1490 : Ojs.t) ->
                            x1486 ~err:(or_null_of_js Error.t_of_js x1487)
                              ~publicKey:(Buffer.t_of_js x1489)
                              ~privateKey:(Ojs.string_of_js x1490)))|])
    let (generateKeyPair :
      type_:[ `ed25519 ] ->
        options:([ `der ], [ `der ]) crypto_ED25519KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1491 : [ `ed25519 ]) ->
        fun
          ~options:(x1492 :
                     ([ `der ], [ `der ]) crypto_ED25519KeyPairOptions)
          ->
          fun
            ~callback:(x1495 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1491 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(crypto_ED25519KeyPairOptions_to_js
                                                                   (fun
                                                                    (x1493 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1493
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1494 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1494
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1492);(
                   Ojs.fun_to_js 3
                     (fun (x1496 : Ojs.t) ->
                        fun (x1498 : Ojs.t) ->
                          fun (x1499 : Ojs.t) ->
                            x1495 ~err:(or_null_of_js Error.t_of_js x1496)
                              ~publicKey:(Buffer.t_of_js x1498)
                              ~privateKey:(Buffer.t_of_js x1499)))|])
    let (generateKeyPair :
      type_:[ `ed25519 ] ->
        options:crypto_ED25519KeyPairKeyObjectOptions or_undefined ->
          callback:(err:Error.t or_null ->
                      publicKey:crypto_KeyObject ->
                        privateKey:crypto_KeyObject -> unit)
            -> unit)
      =
      fun ~type_:(x1500 : [ `ed25519 ]) ->
        fun
          ~options:(x1501 :
                     crypto_ED25519KeyPairKeyObjectOptions or_undefined)
          ->
          fun
            ~callback:(x1503 :
                        err:Error.t or_null ->
                          publicKey:crypto_KeyObject ->
                            privateKey:crypto_KeyObject -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1500 with
                     | `ed25519 -> Ojs.string_to_js "ed25519"));(or_undefined_to_js
                                                                   crypto_ED25519KeyPairKeyObjectOptions_to_js
                                                                   x1501);(
                   Ojs.fun_to_js 3
                     (fun (x1504 : Ojs.t) ->
                        fun (x1506 : Ojs.t) ->
                          fun (x1507 : Ojs.t) ->
                            x1503 ~err:(or_null_of_js Error.t_of_js x1504)
                              ~publicKey:(crypto_KeyObject_of_js x1506)
                              ~privateKey:(crypto_KeyObject_of_js x1507)))|])
    let (generateKeyPair :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `pem ]) crypto_ED448KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1508 : [ `ed448 ]) ->
        fun
          ~options:(x1509 : ([ `pem ], [ `pem ]) crypto_ED448KeyPairOptions)
          ->
          fun
            ~callback:(x1512 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1508 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   crypto_ED448KeyPairOptions_to_js
                     (fun (x1510 : [ `pem ]) ->
                        match x1510 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1511 : [ `pem ]) ->
                        match x1511 with | `pem -> Ojs.string_to_js "pem")
                     x1509);(Ojs.fun_to_js 3
                               (fun (x1513 : Ojs.t) ->
                                  fun (x1515 : Ojs.t) ->
                                    fun (x1516 : Ojs.t) ->
                                      x1512
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1513)
                                        ~publicKey:(Ojs.string_of_js x1515)
                                        ~privateKey:(Ojs.string_of_js x1516)))|])
    let (generateKeyPair :
      type_:[ `ed448 ] ->
        options:([ `pem ], [ `der ]) crypto_ED448KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1517 : [ `ed448 ]) ->
        fun
          ~options:(x1518 : ([ `pem ], [ `der ]) crypto_ED448KeyPairOptions)
          ->
          fun
            ~callback:(x1521 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1517 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   crypto_ED448KeyPairOptions_to_js
                     (fun (x1519 : [ `pem ]) ->
                        match x1519 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1520 : [ `der ]) ->
                        match x1520 with | `der -> Ojs.string_to_js "der")
                     x1518);(Ojs.fun_to_js 3
                               (fun (x1522 : Ojs.t) ->
                                  fun (x1524 : Ojs.t) ->
                                    fun (x1525 : Ojs.t) ->
                                      x1521
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1522)
                                        ~publicKey:(Ojs.string_of_js x1524)
                                        ~privateKey:(Buffer.t_of_js x1525)))|])
    let (generateKeyPair :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `pem ]) crypto_ED448KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1526 : [ `ed448 ]) ->
        fun
          ~options:(x1527 : ([ `der ], [ `pem ]) crypto_ED448KeyPairOptions)
          ->
          fun
            ~callback:(x1530 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1526 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   crypto_ED448KeyPairOptions_to_js
                     (fun (x1528 : [ `der ]) ->
                        match x1528 with | `der -> Ojs.string_to_js "der")
                     (fun (x1529 : [ `pem ]) ->
                        match x1529 with | `pem -> Ojs.string_to_js "pem")
                     x1527);(Ojs.fun_to_js 3
                               (fun (x1531 : Ojs.t) ->
                                  fun (x1533 : Ojs.t) ->
                                    fun (x1534 : Ojs.t) ->
                                      x1530
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1531)
                                        ~publicKey:(Buffer.t_of_js x1533)
                                        ~privateKey:(Ojs.string_of_js x1534)))|])
    let (generateKeyPair :
      type_:[ `ed448 ] ->
        options:([ `der ], [ `der ]) crypto_ED448KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1535 : [ `ed448 ]) ->
        fun
          ~options:(x1536 : ([ `der ], [ `der ]) crypto_ED448KeyPairOptions)
          ->
          fun
            ~callback:(x1539 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1535 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   crypto_ED448KeyPairOptions_to_js
                     (fun (x1537 : [ `der ]) ->
                        match x1537 with | `der -> Ojs.string_to_js "der")
                     (fun (x1538 : [ `der ]) ->
                        match x1538 with | `der -> Ojs.string_to_js "der")
                     x1536);(Ojs.fun_to_js 3
                               (fun (x1540 : Ojs.t) ->
                                  fun (x1542 : Ojs.t) ->
                                    fun (x1543 : Ojs.t) ->
                                      x1539
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1540)
                                        ~publicKey:(Buffer.t_of_js x1542)
                                        ~privateKey:(Buffer.t_of_js x1543)))|])
    let (generateKeyPair :
      type_:[ `ed448 ] ->
        options:crypto_ED448KeyPairKeyObjectOptions or_undefined ->
          callback:(err:Error.t or_null ->
                      publicKey:crypto_KeyObject ->
                        privateKey:crypto_KeyObject -> unit)
            -> unit)
      =
      fun ~type_:(x1544 : [ `ed448 ]) ->
        fun
          ~options:(x1545 : crypto_ED448KeyPairKeyObjectOptions or_undefined)
          ->
          fun
            ~callback:(x1547 :
                        err:Error.t or_null ->
                          publicKey:crypto_KeyObject ->
                            privateKey:crypto_KeyObject -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1544 with | `ed448 -> Ojs.string_to_js "ed448"));(
                   or_undefined_to_js
                     crypto_ED448KeyPairKeyObjectOptions_to_js x1545);(
                   Ojs.fun_to_js 3
                     (fun (x1548 : Ojs.t) ->
                        fun (x1550 : Ojs.t) ->
                          fun (x1551 : Ojs.t) ->
                            x1547 ~err:(or_null_of_js Error.t_of_js x1548)
                              ~publicKey:(crypto_KeyObject_of_js x1550)
                              ~privateKey:(crypto_KeyObject_of_js x1551)))|])
    let (generateKeyPair :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `pem ]) crypto_X25519KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1552 : [ `x25519 ]) ->
        fun
          ~options:(x1553 : ([ `pem ], [ `pem ]) crypto_X25519KeyPairOptions)
          ->
          fun
            ~callback:(x1556 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1552 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   crypto_X25519KeyPairOptions_to_js
                     (fun (x1554 : [ `pem ]) ->
                        match x1554 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1555 : [ `pem ]) ->
                        match x1555 with | `pem -> Ojs.string_to_js "pem")
                     x1553);(Ojs.fun_to_js 3
                               (fun (x1557 : Ojs.t) ->
                                  fun (x1559 : Ojs.t) ->
                                    fun (x1560 : Ojs.t) ->
                                      x1556
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1557)
                                        ~publicKey:(Ojs.string_of_js x1559)
                                        ~privateKey:(Ojs.string_of_js x1560)))|])
    let (generateKeyPair :
      type_:[ `x25519 ] ->
        options:([ `pem ], [ `der ]) crypto_X25519KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1561 : [ `x25519 ]) ->
        fun
          ~options:(x1562 : ([ `pem ], [ `der ]) crypto_X25519KeyPairOptions)
          ->
          fun
            ~callback:(x1565 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1561 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   crypto_X25519KeyPairOptions_to_js
                     (fun (x1563 : [ `pem ]) ->
                        match x1563 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1564 : [ `der ]) ->
                        match x1564 with | `der -> Ojs.string_to_js "der")
                     x1562);(Ojs.fun_to_js 3
                               (fun (x1566 : Ojs.t) ->
                                  fun (x1568 : Ojs.t) ->
                                    fun (x1569 : Ojs.t) ->
                                      x1565
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1566)
                                        ~publicKey:(Ojs.string_of_js x1568)
                                        ~privateKey:(Buffer.t_of_js x1569)))|])
    let (generateKeyPair :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `pem ]) crypto_X25519KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1570 : [ `x25519 ]) ->
        fun
          ~options:(x1571 : ([ `der ], [ `pem ]) crypto_X25519KeyPairOptions)
          ->
          fun
            ~callback:(x1574 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1570 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   crypto_X25519KeyPairOptions_to_js
                     (fun (x1572 : [ `der ]) ->
                        match x1572 with | `der -> Ojs.string_to_js "der")
                     (fun (x1573 : [ `pem ]) ->
                        match x1573 with | `pem -> Ojs.string_to_js "pem")
                     x1571);(Ojs.fun_to_js 3
                               (fun (x1575 : Ojs.t) ->
                                  fun (x1577 : Ojs.t) ->
                                    fun (x1578 : Ojs.t) ->
                                      x1574
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1575)
                                        ~publicKey:(Buffer.t_of_js x1577)
                                        ~privateKey:(Ojs.string_of_js x1578)))|])
    let (generateKeyPair :
      type_:[ `x25519 ] ->
        options:([ `der ], [ `der ]) crypto_X25519KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1579 : [ `x25519 ]) ->
        fun
          ~options:(x1580 : ([ `der ], [ `der ]) crypto_X25519KeyPairOptions)
          ->
          fun
            ~callback:(x1583 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1579 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   crypto_X25519KeyPairOptions_to_js
                     (fun (x1581 : [ `der ]) ->
                        match x1581 with | `der -> Ojs.string_to_js "der")
                     (fun (x1582 : [ `der ]) ->
                        match x1582 with | `der -> Ojs.string_to_js "der")
                     x1580);(Ojs.fun_to_js 3
                               (fun (x1584 : Ojs.t) ->
                                  fun (x1586 : Ojs.t) ->
                                    fun (x1587 : Ojs.t) ->
                                      x1583
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1584)
                                        ~publicKey:(Buffer.t_of_js x1586)
                                        ~privateKey:(Buffer.t_of_js x1587)))|])
    let (generateKeyPair :
      type_:[ `x25519 ] ->
        options:crypto_X25519KeyPairKeyObjectOptions or_undefined ->
          callback:(err:Error.t or_null ->
                      publicKey:crypto_KeyObject ->
                        privateKey:crypto_KeyObject -> unit)
            -> unit)
      =
      fun ~type_:(x1588 : [ `x25519 ]) ->
        fun
          ~options:(x1589 :
                     crypto_X25519KeyPairKeyObjectOptions or_undefined)
          ->
          fun
            ~callback:(x1591 :
                        err:Error.t or_null ->
                          publicKey:crypto_KeyObject ->
                            privateKey:crypto_KeyObject -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1588 with | `x25519 -> Ojs.string_to_js "x25519"));(
                   or_undefined_to_js
                     crypto_X25519KeyPairKeyObjectOptions_to_js x1589);(
                   Ojs.fun_to_js 3
                     (fun (x1592 : Ojs.t) ->
                        fun (x1594 : Ojs.t) ->
                          fun (x1595 : Ojs.t) ->
                            x1591 ~err:(or_null_of_js Error.t_of_js x1592)
                              ~publicKey:(crypto_KeyObject_of_js x1594)
                              ~privateKey:(crypto_KeyObject_of_js x1595)))|])
    let (generateKeyPair :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `pem ]) crypto_X448KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1596 : [ `x448 ]) ->
        fun ~options:(x1597 : ([ `pem ], [ `pem ]) crypto_X448KeyPairOptions)
          ->
          fun
            ~callback:(x1600 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1596 with | `x448 -> Ojs.string_to_js "x448"));(
                   crypto_X448KeyPairOptions_to_js
                     (fun (x1598 : [ `pem ]) ->
                        match x1598 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1599 : [ `pem ]) ->
                        match x1599 with | `pem -> Ojs.string_to_js "pem")
                     x1597);(Ojs.fun_to_js 3
                               (fun (x1601 : Ojs.t) ->
                                  fun (x1603 : Ojs.t) ->
                                    fun (x1604 : Ojs.t) ->
                                      x1600
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1601)
                                        ~publicKey:(Ojs.string_of_js x1603)
                                        ~privateKey:(Ojs.string_of_js x1604)))|])
    let (generateKeyPair :
      type_:[ `x448 ] ->
        options:([ `pem ], [ `der ]) crypto_X448KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:string -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1605 : [ `x448 ]) ->
        fun ~options:(x1606 : ([ `pem ], [ `der ]) crypto_X448KeyPairOptions)
          ->
          fun
            ~callback:(x1609 :
                        err:Error.t or_null ->
                          publicKey:string -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1605 with | `x448 -> Ojs.string_to_js "x448"));(
                   crypto_X448KeyPairOptions_to_js
                     (fun (x1607 : [ `pem ]) ->
                        match x1607 with | `pem -> Ojs.string_to_js "pem")
                     (fun (x1608 : [ `der ]) ->
                        match x1608 with | `der -> Ojs.string_to_js "der")
                     x1606);(Ojs.fun_to_js 3
                               (fun (x1610 : Ojs.t) ->
                                  fun (x1612 : Ojs.t) ->
                                    fun (x1613 : Ojs.t) ->
                                      x1609
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1610)
                                        ~publicKey:(Ojs.string_of_js x1612)
                                        ~privateKey:(Buffer.t_of_js x1613)))|])
    let (generateKeyPair :
      type_:[ `x448 ] ->
        options:([ `der ], [ `pem ]) crypto_X448KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:string -> unit)
            -> unit)
      =
      fun ~type_:(x1614 : [ `x448 ]) ->
        fun ~options:(x1615 : ([ `der ], [ `pem ]) crypto_X448KeyPairOptions)
          ->
          fun
            ~callback:(x1618 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:string -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1614 with | `x448 -> Ojs.string_to_js "x448"));(
                   crypto_X448KeyPairOptions_to_js
                     (fun (x1616 : [ `der ]) ->
                        match x1616 with | `der -> Ojs.string_to_js "der")
                     (fun (x1617 : [ `pem ]) ->
                        match x1617 with | `pem -> Ojs.string_to_js "pem")
                     x1615);(Ojs.fun_to_js 3
                               (fun (x1619 : Ojs.t) ->
                                  fun (x1621 : Ojs.t) ->
                                    fun (x1622 : Ojs.t) ->
                                      x1618
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1619)
                                        ~publicKey:(Buffer.t_of_js x1621)
                                        ~privateKey:(Ojs.string_of_js x1622)))|])
    let (generateKeyPair :
      type_:[ `x448 ] ->
        options:([ `der ], [ `der ]) crypto_X448KeyPairOptions ->
          callback:(err:Error.t or_null ->
                      publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            -> unit)
      =
      fun ~type_:(x1623 : [ `x448 ]) ->
        fun ~options:(x1624 : ([ `der ], [ `der ]) crypto_X448KeyPairOptions)
          ->
          fun
            ~callback:(x1627 :
                        err:Error.t or_null ->
                          publicKey:Buffer.t -> privateKey:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1623 with | `x448 -> Ojs.string_to_js "x448"));(
                   crypto_X448KeyPairOptions_to_js
                     (fun (x1625 : [ `der ]) ->
                        match x1625 with | `der -> Ojs.string_to_js "der")
                     (fun (x1626 : [ `der ]) ->
                        match x1626 with | `der -> Ojs.string_to_js "der")
                     x1624);(Ojs.fun_to_js 3
                               (fun (x1628 : Ojs.t) ->
                                  fun (x1630 : Ojs.t) ->
                                    fun (x1631 : Ojs.t) ->
                                      x1627
                                        ~err:(or_null_of_js Error.t_of_js
                                                x1628)
                                        ~publicKey:(Buffer.t_of_js x1630)
                                        ~privateKey:(Buffer.t_of_js x1631)))|])
    let (generateKeyPair :
      type_:[ `x448 ] ->
        options:crypto_X448KeyPairKeyObjectOptions or_undefined ->
          callback:(err:Error.t or_null ->
                      publicKey:crypto_KeyObject ->
                        privateKey:crypto_KeyObject -> unit)
            -> unit)
      =
      fun ~type_:(x1632 : [ `x448 ]) ->
        fun
          ~options:(x1633 : crypto_X448KeyPairKeyObjectOptions or_undefined)
          ->
          fun
            ~callback:(x1635 :
                        err:Error.t or_null ->
                          publicKey:crypto_KeyObject ->
                            privateKey:crypto_KeyObject -> unit)
            ->
            ignore
              (Ojs.call Import.crypto "generateKeyPair"
                 [|((match x1632 with | `x448 -> Ojs.string_to_js "x448"));(
                   or_undefined_to_js
                     crypto_X448KeyPairKeyObjectOptions_to_js x1633);(
                   Ojs.fun_to_js 3
                     (fun (x1636 : Ojs.t) ->
                        fun (x1638 : Ojs.t) ->
                          fun (x1639 : Ojs.t) ->
                            x1635 ~err:(or_null_of_js Error.t_of_js x1636)
                              ~publicKey:(crypto_KeyObject_of_js x1638)
                              ~privateKey:(crypto_KeyObject_of_js x1639)))|])
    module GenerateKeyPair =
      struct
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `pem ], [ `pem ]) crypto_RSAKeyPairOptions ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1640 : [ `rsa ]) ->
            fun
              ~options:(x1641 :
                         ([ `pem ], [ `pem ]) crypto_RSAKeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1640 with | `rsa -> Ojs.string_to_js "rsa"));(
                     crypto_RSAKeyPairOptions_to_js
                       (fun (x1642 : [ `pem ]) ->
                          match x1642 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1643 : [ `pem ]) ->
                          match x1643 with | `pem -> Ojs.string_to_js "pem")
                       x1641)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `pem ], [ `der ]) crypto_RSAKeyPairOptions ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1645 : [ `rsa ]) ->
            fun
              ~options:(x1646 :
                         ([ `pem ], [ `der ]) crypto_RSAKeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1645 with | `rsa -> Ojs.string_to_js "rsa"));(
                     crypto_RSAKeyPairOptions_to_js
                       (fun (x1647 : [ `pem ]) ->
                          match x1647 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1648 : [ `der ]) ->
                          match x1648 with | `der -> Ojs.string_to_js "der")
                       x1646)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `der ], [ `pem ]) crypto_RSAKeyPairOptions ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1650 : [ `rsa ]) ->
            fun
              ~options:(x1651 :
                         ([ `der ], [ `pem ]) crypto_RSAKeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1650 with | `rsa -> Ojs.string_to_js "rsa"));(
                     crypto_RSAKeyPairOptions_to_js
                       (fun (x1652 : [ `der ]) ->
                          match x1652 with | `der -> Ojs.string_to_js "der")
                       (fun (x1653 : [ `pem ]) ->
                          match x1653 with | `pem -> Ojs.string_to_js "pem")
                       x1651)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:([ `der ], [ `der ]) crypto_RSAKeyPairOptions ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1655 : [ `rsa ]) ->
            fun
              ~options:(x1656 :
                         ([ `der ], [ `der ]) crypto_RSAKeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1655 with | `rsa -> Ojs.string_to_js "rsa"));(
                     crypto_RSAKeyPairOptions_to_js
                       (fun (x1657 : [ `der ]) ->
                          match x1657 with | `der -> Ojs.string_to_js "der")
                       (fun (x1658 : [ `der ]) ->
                          match x1658 with | `der -> Ojs.string_to_js "der")
                       x1656)|])
        let (__promisify__ :
          type_:[ `rsa ] ->
            options:crypto_RSAKeyPairKeyObjectOptions ->
              crypto_KeyPairKeyObjectResult Promise.t)
          =
          fun ~type_:(x1660 : [ `rsa ]) ->
            fun ~options:(x1661 : crypto_RSAKeyPairKeyObjectOptions) ->
              Promise.t_of_js crypto_KeyPairKeyObjectResult_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1660 with | `rsa -> Ojs.string_to_js "rsa"));(
                     crypto_RSAKeyPairKeyObjectOptions_to_js x1661)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `pem ], [ `pem ]) crypto_DSAKeyPairOptions ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1663 : [ `dsa ]) ->
            fun
              ~options:(x1664 :
                         ([ `pem ], [ `pem ]) crypto_DSAKeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1663 with | `dsa -> Ojs.string_to_js "dsa"));(
                     crypto_DSAKeyPairOptions_to_js
                       (fun (x1665 : [ `pem ]) ->
                          match x1665 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1666 : [ `pem ]) ->
                          match x1666 with | `pem -> Ojs.string_to_js "pem")
                       x1664)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `pem ], [ `der ]) crypto_DSAKeyPairOptions ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1668 : [ `dsa ]) ->
            fun
              ~options:(x1669 :
                         ([ `pem ], [ `der ]) crypto_DSAKeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1668 with | `dsa -> Ojs.string_to_js "dsa"));(
                     crypto_DSAKeyPairOptions_to_js
                       (fun (x1670 : [ `pem ]) ->
                          match x1670 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1671 : [ `der ]) ->
                          match x1671 with | `der -> Ojs.string_to_js "der")
                       x1669)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `der ], [ `pem ]) crypto_DSAKeyPairOptions ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1673 : [ `dsa ]) ->
            fun
              ~options:(x1674 :
                         ([ `der ], [ `pem ]) crypto_DSAKeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1673 with | `dsa -> Ojs.string_to_js "dsa"));(
                     crypto_DSAKeyPairOptions_to_js
                       (fun (x1675 : [ `der ]) ->
                          match x1675 with | `der -> Ojs.string_to_js "der")
                       (fun (x1676 : [ `pem ]) ->
                          match x1676 with | `pem -> Ojs.string_to_js "pem")
                       x1674)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:([ `der ], [ `der ]) crypto_DSAKeyPairOptions ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1678 : [ `dsa ]) ->
            fun
              ~options:(x1679 :
                         ([ `der ], [ `der ]) crypto_DSAKeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1678 with | `dsa -> Ojs.string_to_js "dsa"));(
                     crypto_DSAKeyPairOptions_to_js
                       (fun (x1680 : [ `der ]) ->
                          match x1680 with | `der -> Ojs.string_to_js "der")
                       (fun (x1681 : [ `der ]) ->
                          match x1681 with | `der -> Ojs.string_to_js "der")
                       x1679)|])
        let (__promisify__ :
          type_:[ `dsa ] ->
            options:crypto_DSAKeyPairKeyObjectOptions ->
              crypto_KeyPairKeyObjectResult Promise.t)
          =
          fun ~type_:(x1683 : [ `dsa ]) ->
            fun ~options:(x1684 : crypto_DSAKeyPairKeyObjectOptions) ->
              Promise.t_of_js crypto_KeyPairKeyObjectResult_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1683 with | `dsa -> Ojs.string_to_js "dsa"));(
                     crypto_DSAKeyPairKeyObjectOptions_to_js x1684)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `pem ], [ `pem ]) crypto_ECKeyPairOptions ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1686 : [ `ec ]) ->
            fun
              ~options:(x1687 : ([ `pem ], [ `pem ]) crypto_ECKeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1686 with | `ec -> Ojs.string_to_js "ec"));(
                     crypto_ECKeyPairOptions_to_js
                       (fun (x1688 : [ `pem ]) ->
                          match x1688 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1689 : [ `pem ]) ->
                          match x1689 with | `pem -> Ojs.string_to_js "pem")
                       x1687)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `pem ], [ `der ]) crypto_ECKeyPairOptions ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1691 : [ `ec ]) ->
            fun
              ~options:(x1692 : ([ `pem ], [ `der ]) crypto_ECKeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1691 with | `ec -> Ojs.string_to_js "ec"));(
                     crypto_ECKeyPairOptions_to_js
                       (fun (x1693 : [ `pem ]) ->
                          match x1693 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1694 : [ `der ]) ->
                          match x1694 with | `der -> Ojs.string_to_js "der")
                       x1692)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `der ], [ `pem ]) crypto_ECKeyPairOptions ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1696 : [ `ec ]) ->
            fun
              ~options:(x1697 : ([ `der ], [ `pem ]) crypto_ECKeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1696 with | `ec -> Ojs.string_to_js "ec"));(
                     crypto_ECKeyPairOptions_to_js
                       (fun (x1698 : [ `der ]) ->
                          match x1698 with | `der -> Ojs.string_to_js "der")
                       (fun (x1699 : [ `pem ]) ->
                          match x1699 with | `pem -> Ojs.string_to_js "pem")
                       x1697)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:([ `der ], [ `der ]) crypto_ECKeyPairOptions ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1701 : [ `ec ]) ->
            fun
              ~options:(x1702 : ([ `der ], [ `der ]) crypto_ECKeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1701 with | `ec -> Ojs.string_to_js "ec"));(
                     crypto_ECKeyPairOptions_to_js
                       (fun (x1703 : [ `der ]) ->
                          match x1703 with | `der -> Ojs.string_to_js "der")
                       (fun (x1704 : [ `der ]) ->
                          match x1704 with | `der -> Ojs.string_to_js "der")
                       x1702)|])
        let (__promisify__ :
          type_:[ `ec ] ->
            options:crypto_ECKeyPairKeyObjectOptions ->
              crypto_KeyPairKeyObjectResult Promise.t)
          =
          fun ~type_:(x1706 : [ `ec ]) ->
            fun ~options:(x1707 : crypto_ECKeyPairKeyObjectOptions) ->
              Promise.t_of_js crypto_KeyPairKeyObjectResult_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1706 with | `ec -> Ojs.string_to_js "ec"));(
                     crypto_ECKeyPairKeyObjectOptions_to_js x1707)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `pem ], [ `pem ]) crypto_ED25519KeyPairOptions ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1709 : [ `ed25519 ]) ->
            fun
              ~options:(x1710 :
                         ([ `pem ], [ `pem ]) crypto_ED25519KeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1709 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(crypto_ED25519KeyPairOptions_to_js
                                                                    (fun
                                                                    (x1711 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1711
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    (fun
                                                                    (x1712 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1712
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    x1710)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `pem ], [ `der ]) crypto_ED25519KeyPairOptions ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1714 : [ `ed25519 ]) ->
            fun
              ~options:(x1715 :
                         ([ `pem ], [ `der ]) crypto_ED25519KeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1714 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(crypto_ED25519KeyPairOptions_to_js
                                                                    (fun
                                                                    (x1716 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1716
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    (fun
                                                                    (x1717 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1717
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    x1715)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `der ], [ `pem ]) crypto_ED25519KeyPairOptions ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1719 : [ `ed25519 ]) ->
            fun
              ~options:(x1720 :
                         ([ `der ], [ `pem ]) crypto_ED25519KeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1719 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(crypto_ED25519KeyPairOptions_to_js
                                                                    (fun
                                                                    (x1721 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1721
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    (fun
                                                                    (x1722 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1722
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                    x1720)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            options:([ `der ], [ `der ]) crypto_ED25519KeyPairOptions ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1724 : [ `ed25519 ]) ->
            fun
              ~options:(x1725 :
                         ([ `der ], [ `der ]) crypto_ED25519KeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1724 with
                       | `ed25519 -> Ojs.string_to_js "ed25519"));(crypto_ED25519KeyPairOptions_to_js
                                                                    (fun
                                                                    (x1726 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1726
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    (fun
                                                                    (x1727 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1727
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                    x1725)|])
        let (__promisify__ :
          type_:[ `ed25519 ] ->
            ?options:crypto_ED25519KeyPairKeyObjectOptions ->
              unit -> crypto_KeyPairKeyObjectResult Promise.t)
          =
          fun ~type_:(x1729 : [ `ed25519 ]) ->
            fun
              ?options:(x1730 : crypto_ED25519KeyPairKeyObjectOptions option)
              ->
              fun () ->
                Promise.t_of_js crypto_KeyPairKeyObjectResult_of_js
                  (let x1733 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1733 "__promisify__")
                     "apply"
                     [|x1733;((let x1731 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1731 "push"
                                    [|((match x1729 with
                                        | `ed25519 ->
                                            Ojs.string_to_js "ed25519"))|]);
                               (match x1730 with
                                | Some x1732 ->
                                    ignore
                                      (Ojs.call x1731 "push"
                                         [|(crypto_ED25519KeyPairKeyObjectOptions_to_js
                                              x1732)|])
                                | None -> ());
                               x1731))|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `pem ], [ `pem ]) crypto_ED448KeyPairOptions ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1735 : [ `ed448 ]) ->
            fun
              ~options:(x1736 :
                         ([ `pem ], [ `pem ]) crypto_ED448KeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1735 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     crypto_ED448KeyPairOptions_to_js
                       (fun (x1737 : [ `pem ]) ->
                          match x1737 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1738 : [ `pem ]) ->
                          match x1738 with | `pem -> Ojs.string_to_js "pem")
                       x1736)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `pem ], [ `der ]) crypto_ED448KeyPairOptions ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1740 : [ `ed448 ]) ->
            fun
              ~options:(x1741 :
                         ([ `pem ], [ `der ]) crypto_ED448KeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1740 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     crypto_ED448KeyPairOptions_to_js
                       (fun (x1742 : [ `pem ]) ->
                          match x1742 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1743 : [ `der ]) ->
                          match x1743 with | `der -> Ojs.string_to_js "der")
                       x1741)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `der ], [ `pem ]) crypto_ED448KeyPairOptions ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1745 : [ `ed448 ]) ->
            fun
              ~options:(x1746 :
                         ([ `der ], [ `pem ]) crypto_ED448KeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1745 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     crypto_ED448KeyPairOptions_to_js
                       (fun (x1747 : [ `der ]) ->
                          match x1747 with | `der -> Ojs.string_to_js "der")
                       (fun (x1748 : [ `pem ]) ->
                          match x1748 with | `pem -> Ojs.string_to_js "pem")
                       x1746)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            options:([ `der ], [ `der ]) crypto_ED448KeyPairOptions ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1750 : [ `ed448 ]) ->
            fun
              ~options:(x1751 :
                         ([ `der ], [ `der ]) crypto_ED448KeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1750 with | `ed448 -> Ojs.string_to_js "ed448"));(
                     crypto_ED448KeyPairOptions_to_js
                       (fun (x1752 : [ `der ]) ->
                          match x1752 with | `der -> Ojs.string_to_js "der")
                       (fun (x1753 : [ `der ]) ->
                          match x1753 with | `der -> Ojs.string_to_js "der")
                       x1751)|])
        let (__promisify__ :
          type_:[ `ed448 ] ->
            ?options:crypto_ED448KeyPairKeyObjectOptions ->
              unit -> crypto_KeyPairKeyObjectResult Promise.t)
          =
          fun ~type_:(x1755 : [ `ed448 ]) ->
            fun ?options:(x1756 : crypto_ED448KeyPairKeyObjectOptions option)
              ->
              fun () ->
                Promise.t_of_js crypto_KeyPairKeyObjectResult_of_js
                  (let x1759 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1759 "__promisify__")
                     "apply"
                     [|x1759;((let x1757 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1757 "push"
                                    [|((match x1755 with
                                        | `ed448 -> Ojs.string_to_js "ed448"))|]);
                               (match x1756 with
                                | Some x1758 ->
                                    ignore
                                      (Ojs.call x1757 "push"
                                         [|(crypto_ED448KeyPairKeyObjectOptions_to_js
                                              x1758)|])
                                | None -> ());
                               x1757))|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `pem ], [ `pem ]) crypto_X25519KeyPairOptions ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1761 : [ `x25519 ]) ->
            fun
              ~options:(x1762 :
                         ([ `pem ], [ `pem ]) crypto_X25519KeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1761 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(crypto_X25519KeyPairOptions_to_js
                                                                   (fun
                                                                    (x1763 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1763
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1764 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1764
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1762)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `pem ], [ `der ]) crypto_X25519KeyPairOptions ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1766 : [ `x25519 ]) ->
            fun
              ~options:(x1767 :
                         ([ `pem ], [ `der ]) crypto_X25519KeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1766 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(crypto_X25519KeyPairOptions_to_js
                                                                   (fun
                                                                    (x1768 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1768
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   (fun
                                                                    (x1769 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1769
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1767)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `der ], [ `pem ]) crypto_X25519KeyPairOptions ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1771 : [ `x25519 ]) ->
            fun
              ~options:(x1772 :
                         ([ `der ], [ `pem ]) crypto_X25519KeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1771 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(crypto_X25519KeyPairOptions_to_js
                                                                   (fun
                                                                    (x1773 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1773
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1774 :
                                                                    [ `pem ])
                                                                    ->
                                                                    match x1774
                                                                    with
                                                                    | 
                                                                    `pem ->
                                                                    Ojs.string_to_js
                                                                    "pem")
                                                                   x1772)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            options:([ `der ], [ `der ]) crypto_X25519KeyPairOptions ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1776 : [ `x25519 ]) ->
            fun
              ~options:(x1777 :
                         ([ `der ], [ `der ]) crypto_X25519KeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1776 with
                       | `x25519 -> Ojs.string_to_js "x25519"));(crypto_X25519KeyPairOptions_to_js
                                                                   (fun
                                                                    (x1778 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1778
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   (fun
                                                                    (x1779 :
                                                                    [ `der ])
                                                                    ->
                                                                    match x1779
                                                                    with
                                                                    | 
                                                                    `der ->
                                                                    Ojs.string_to_js
                                                                    "der")
                                                                   x1777)|])
        let (__promisify__ :
          type_:[ `x25519 ] ->
            ?options:crypto_X25519KeyPairKeyObjectOptions ->
              unit -> crypto_KeyPairKeyObjectResult Promise.t)
          =
          fun ~type_:(x1781 : [ `x25519 ]) ->
            fun
              ?options:(x1782 : crypto_X25519KeyPairKeyObjectOptions option)
              ->
              fun () ->
                Promise.t_of_js crypto_KeyPairKeyObjectResult_of_js
                  (let x1785 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1785 "__promisify__")
                     "apply"
                     [|x1785;((let x1783 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1783 "push"
                                    [|((match x1781 with
                                        | `x25519 ->
                                            Ojs.string_to_js "x25519"))|]);
                               (match x1782 with
                                | Some x1784 ->
                                    ignore
                                      (Ojs.call x1783 "push"
                                         [|(crypto_X25519KeyPairKeyObjectOptions_to_js
                                              x1784)|])
                                | None -> ());
                               x1783))|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `pem ], [ `pem ]) crypto_X448KeyPairOptions ->
              AnonymousInterface5.t Promise.t)
          =
          fun ~type_:(x1787 : [ `x448 ]) ->
            fun
              ~options:(x1788 :
                         ([ `pem ], [ `pem ]) crypto_X448KeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface5.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1787 with | `x448 -> Ojs.string_to_js "x448"));(
                     crypto_X448KeyPairOptions_to_js
                       (fun (x1789 : [ `pem ]) ->
                          match x1789 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1790 : [ `pem ]) ->
                          match x1790 with | `pem -> Ojs.string_to_js "pem")
                       x1788)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `pem ], [ `der ]) crypto_X448KeyPairOptions ->
              AnonymousInterface4.t Promise.t)
          =
          fun ~type_:(x1792 : [ `x448 ]) ->
            fun
              ~options:(x1793 :
                         ([ `pem ], [ `der ]) crypto_X448KeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface4.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1792 with | `x448 -> Ojs.string_to_js "x448"));(
                     crypto_X448KeyPairOptions_to_js
                       (fun (x1794 : [ `pem ]) ->
                          match x1794 with | `pem -> Ojs.string_to_js "pem")
                       (fun (x1795 : [ `der ]) ->
                          match x1795 with | `der -> Ojs.string_to_js "der")
                       x1793)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `der ], [ `pem ]) crypto_X448KeyPairOptions ->
              AnonymousInterface3.t Promise.t)
          =
          fun ~type_:(x1797 : [ `x448 ]) ->
            fun
              ~options:(x1798 :
                         ([ `der ], [ `pem ]) crypto_X448KeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface3.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1797 with | `x448 -> Ojs.string_to_js "x448"));(
                     crypto_X448KeyPairOptions_to_js
                       (fun (x1799 : [ `der ]) ->
                          match x1799 with | `der -> Ojs.string_to_js "der")
                       (fun (x1800 : [ `pem ]) ->
                          match x1800 with | `pem -> Ojs.string_to_js "pem")
                       x1798)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            options:([ `der ], [ `der ]) crypto_X448KeyPairOptions ->
              AnonymousInterface2.t Promise.t)
          =
          fun ~type_:(x1802 : [ `x448 ]) ->
            fun
              ~options:(x1803 :
                         ([ `der ], [ `der ]) crypto_X448KeyPairOptions)
              ->
              Promise.t_of_js AnonymousInterface2.t_of_js
                (Ojs.call
                   (Ojs.get_prop_ascii Import.crypto "generateKeyPair")
                   "__promisify__"
                   [|((match x1802 with | `x448 -> Ojs.string_to_js "x448"));(
                     crypto_X448KeyPairOptions_to_js
                       (fun (x1804 : [ `der ]) ->
                          match x1804 with | `der -> Ojs.string_to_js "der")
                       (fun (x1805 : [ `der ]) ->
                          match x1805 with | `der -> Ojs.string_to_js "der")
                       x1803)|])
        let (__promisify__ :
          type_:[ `x448 ] ->
            ?options:crypto_X448KeyPairKeyObjectOptions ->
              unit -> crypto_KeyPairKeyObjectResult Promise.t)
          =
          fun ~type_:(x1807 : [ `x448 ]) ->
            fun ?options:(x1808 : crypto_X448KeyPairKeyObjectOptions option)
              ->
              fun () ->
                Promise.t_of_js crypto_KeyPairKeyObjectResult_of_js
                  (let x1811 =
                     Ojs.get_prop_ascii Import.crypto "generateKeyPair" in
                   Ojs.call (Ojs.get_prop_ascii x1811 "__promisify__")
                     "apply"
                     [|x1811;((let x1809 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1809 "push"
                                    [|((match x1807 with
                                        | `x448 -> Ojs.string_to_js "x448"))|]);
                               (match x1808 with
                                | Some x1810 ->
                                    ignore
                                      (Ojs.call x1809 "push"
                                         [|(crypto_X448KeyPairKeyObjectOptions_to_js
                                              x1810)|])
                                | None -> ());
                               x1809))|])
      end
    let (sign :
      algorithm:string or_null_or_undefined ->
        data:ArrayBufferView.t ->
          key:([ `U_s11_der of crypto_SignKeyObjectInput 
               | `U_s18_ieee_p1363 of crypto_SignKeyObjectInput ],
            [ `U_s21_pkcs1 of crypto_SignPrivateKeyInput 
            | `U_s22_pkcs8 of crypto_SignPrivateKeyInput 
            | `U_s23_private of crypto_KeyLike 
            | `U_s24_public of crypto_KeyLike 
            | `U_s26_sec1 of crypto_SignPrivateKeyInput 
            | `U_s27_secret of crypto_KeyLike ]) union2 -> Buffer.t)
      =
      fun ~algorithm:(x1813 : string or_null_or_undefined) ->
        fun ~data:(x1815 : ArrayBufferView.t) ->
          fun
            ~key:(x1816 :
                   ([ `U_s11_der of crypto_SignKeyObjectInput 
                    | `U_s18_ieee_p1363 of crypto_SignKeyObjectInput ],
                     [ `U_s21_pkcs1 of crypto_SignPrivateKeyInput 
                     | `U_s22_pkcs8 of crypto_SignPrivateKeyInput 
                     | `U_s23_private of crypto_KeyLike 
                     | `U_s24_public of crypto_KeyLike 
                     | `U_s26_sec1 of crypto_SignPrivateKeyInput 
                     | `U_s27_secret of crypto_KeyLike ]) union2)
            ->
            Buffer.t_of_js
              (Ojs.call Import.crypto "sign"
                 [|(or_null_or_undefined_to_js Ojs.string_to_js x1813);(
                   ArrayBufferView.t_to_js x1815);(union2_to_js
                                                     (fun
                                                        (x1817 :
                                                          [
                                                            `U_s11_der of
                                                              crypto_SignKeyObjectInput
                                                               | `U_s18_ieee_p1363
                                                                   of
                                                                   crypto_SignKeyObjectInput
                                                                   ])
                                                        ->
                                                        match x1817 with
                                                        | `U_s11_der x1818 ->
                                                            crypto_SignKeyObjectInput_to_js
                                                              x1818
                                                        | `U_s18_ieee_p1363
                                                            x1819 ->
                                                            crypto_SignKeyObjectInput_to_js
                                                              x1819)
                                                     (fun
                                                        (x1820 :
                                                          [
                                                            `U_s21_pkcs1 of
                                                              crypto_SignPrivateKeyInput
                                                               | `U_s22_pkcs8
                                                                   of
                                                                   crypto_SignPrivateKeyInput
                                                                    | 
                                                            `U_s23_private of
                                                              crypto_KeyLike 
                                                          | `U_s24_public of
                                                              crypto_KeyLike 
                                                          | `U_s26_sec1 of
                                                              crypto_SignPrivateKeyInput
                                                               | `U_s27_secret
                                                                   of
                                                                   crypto_KeyLike
                                                                   ])
                                                        ->
                                                        match x1820 with
                                                        | `U_s21_pkcs1 x1821
                                                            ->
                                                            crypto_SignPrivateKeyInput_to_js
                                                              x1821
                                                        | `U_s22_pkcs8 x1822
                                                            ->
                                                            crypto_SignPrivateKeyInput_to_js
                                                              x1822
                                                        | `U_s23_private
                                                            x1823 ->
                                                            crypto_KeyLike_to_js
                                                              x1823
                                                        | `U_s24_public x1824
                                                            ->
                                                            crypto_KeyLike_to_js
                                                              x1824
                                                        | `U_s26_sec1 x1825
                                                            ->
                                                            crypto_SignPrivateKeyInput_to_js
                                                              x1825
                                                        | `U_s27_secret x1826
                                                            ->
                                                            crypto_KeyLike_to_js
                                                              x1826) x1816)|])
    let (verify :
      algorithm:string or_null_or_undefined ->
        data:ArrayBufferView.t ->
          key:([ `U_s11_der of crypto_VerifyKeyObjectInput 
               | `U_s18_ieee_p1363 of crypto_VerifyKeyObjectInput ],
            [ `U_s21_pkcs1 of crypto_VerifyPublicKeyInput 
            | `U_s23_private of crypto_KeyLike 
            | `U_s24_public of crypto_KeyLike 
            | `U_s27_secret of crypto_KeyLike 
            | `U_s28_spki of crypto_VerifyPublicKeyInput ]) union2 ->
            signature:ArrayBufferView.t -> bool)
      =
      fun ~algorithm:(x1827 : string or_null_or_undefined) ->
        fun ~data:(x1829 : ArrayBufferView.t) ->
          fun
            ~key:(x1830 :
                   ([ `U_s11_der of crypto_VerifyKeyObjectInput 
                    | `U_s18_ieee_p1363 of crypto_VerifyKeyObjectInput ],
                     [ `U_s21_pkcs1 of crypto_VerifyPublicKeyInput 
                     | `U_s23_private of crypto_KeyLike 
                     | `U_s24_public of crypto_KeyLike 
                     | `U_s27_secret of crypto_KeyLike 
                     | `U_s28_spki of crypto_VerifyPublicKeyInput ]) union2)
            ->
            fun ~signature:(x1840 : ArrayBufferView.t) ->
              Ojs.bool_of_js
                (Ojs.call Import.crypto "verify"
                   [|(or_null_or_undefined_to_js Ojs.string_to_js x1827);(
                     ArrayBufferView.t_to_js x1829);(union2_to_js
                                                       (fun
                                                          (x1831 :
                                                            [
                                                              `U_s11_der of
                                                                crypto_VerifyKeyObjectInput
                                                                 | `U_s18_ieee_p1363
                                                                    of
                                                                    crypto_VerifyKeyObjectInput
                                                                    ])
                                                          ->
                                                          match x1831 with
                                                          | `U_s11_der x1832
                                                              ->
                                                              crypto_VerifyKeyObjectInput_to_js
                                                                x1832
                                                          | `U_s18_ieee_p1363
                                                              x1833 ->
                                                              crypto_VerifyKeyObjectInput_to_js
                                                                x1833)
                                                       (fun
                                                          (x1834 :
                                                            [
                                                              `U_s21_pkcs1 of
                                                                crypto_VerifyPublicKeyInput
                                                                 | `U_s23_private
                                                                    of
                                                                    crypto_KeyLike
                                                                     | 
                                                              `U_s24_public
                                                                of
                                                                crypto_KeyLike
                                                                 | `U_s27_secret
                                                                    of
                                                                    crypto_KeyLike
                                                                     | 
                                                              `U_s28_spki of
                                                                crypto_VerifyPublicKeyInput
                                                                ])
                                                          ->
                                                          match x1834 with
                                                          | `U_s21_pkcs1
                                                              x1835 ->
                                                              crypto_VerifyPublicKeyInput_to_js
                                                                x1835
                                                          | `U_s23_private
                                                              x1836 ->
                                                              crypto_KeyLike_to_js
                                                                x1836
                                                          | `U_s24_public
                                                              x1837 ->
                                                              crypto_KeyLike_to_js
                                                                x1837
                                                          | `U_s27_secret
                                                              x1838 ->
                                                              crypto_KeyLike_to_js
                                                                x1838
                                                          | `U_s28_spki x1839
                                                              ->
                                                              crypto_VerifyPublicKeyInput_to_js
                                                                x1839) x1830);(
                     ArrayBufferView.t_to_js x1840)|])
    let (diffieHellman : options:AnonymousInterface1.t -> Buffer.t) =
      fun ~options:(x1841 : AnonymousInterface1.t) ->
        Buffer.t_of_js
          (Ojs.call Import.crypto "diffieHellman"
             [|(AnonymousInterface1.t_to_js x1841)|])
  end
