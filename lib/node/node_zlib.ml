[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type zlib_BrotliCompress =
          [ `Zlib_BrotliCompress  | `Zlib_Zlib ] intf
        and zlib_BrotliDecompress =
          [ `Zlib_BrotliDecompress  | `Zlib_Zlib ] intf
        and zlib_BrotliOptions = [ `Zlib_BrotliOptions ] intf
        and zlib_CompressCallback = [ `Zlib_CompressCallback ] intf
        and zlib_Deflate =
          [ `Zlib_Deflate  | `Zlib_Zlib  | `Zlib_ZlibParams 
          | `Zlib_ZlibReset ] intf
        and zlib_DeflateRaw =
          [ `Zlib_DeflateRaw  | `Zlib_Zlib  | `Zlib_ZlibParams 
          | `Zlib_ZlibReset ] intf
        and zlib_Gunzip = [ `Zlib_Gunzip  | `Zlib_Zlib ] intf
        and zlib_Gzip = [ `Zlib_Gzip  | `Zlib_Zlib ] intf
        and zlib_Inflate =
          [ `Zlib_Inflate  | `Zlib_Zlib  | `Zlib_ZlibReset ] intf
        and zlib_InflateRaw =
          [ `Zlib_InflateRaw  | `Zlib_Zlib  | `Zlib_ZlibReset ] intf
        and zlib_InputType =
          (ArrayBuffer.t, ArrayBufferView.t) union2 or_string
        and zlib_Unzip = [ `Zlib_Unzip  | `Zlib_Zlib ] intf
        and zlib_Zlib = [ `Zlib_Zlib ] intf
        and zlib_ZlibOptions = [ `Zlib_ZlibOptions ] intf
        and zlib_ZlibParams = [ `Zlib_ZlibParams ] intf
        and zlib_ZlibReset = [ `Zlib_ZlibReset ] intf
        let rec zlib_BrotliCompress_of_js : Ojs.t -> zlib_BrotliCompress =
          Obj.magic
        and zlib_BrotliCompress_to_js : zlib_BrotliCompress -> Ojs.t =
          Obj.magic
        and zlib_BrotliDecompress_of_js : Ojs.t -> zlib_BrotliDecompress =
          Obj.magic
        and zlib_BrotliDecompress_to_js : zlib_BrotliDecompress -> Ojs.t =
          Obj.magic
        and zlib_BrotliOptions_of_js : Ojs.t -> zlib_BrotliOptions =
          Obj.magic
        and zlib_BrotliOptions_to_js : zlib_BrotliOptions -> Ojs.t =
          Obj.magic
        and zlib_CompressCallback_of_js : Ojs.t -> zlib_CompressCallback =
          Obj.magic
        and zlib_CompressCallback_to_js : zlib_CompressCallback -> Ojs.t =
          Obj.magic
        and zlib_Deflate_of_js : Ojs.t -> zlib_Deflate = Obj.magic
        and zlib_Deflate_to_js : zlib_Deflate -> Ojs.t = Obj.magic
        and zlib_DeflateRaw_of_js : Ojs.t -> zlib_DeflateRaw = Obj.magic
        and zlib_DeflateRaw_to_js : zlib_DeflateRaw -> Ojs.t = Obj.magic
        and zlib_Gunzip_of_js : Ojs.t -> zlib_Gunzip = Obj.magic
        and zlib_Gunzip_to_js : zlib_Gunzip -> Ojs.t = Obj.magic
        and zlib_Gzip_of_js : Ojs.t -> zlib_Gzip = Obj.magic
        and zlib_Gzip_to_js : zlib_Gzip -> Ojs.t = Obj.magic
        and zlib_Inflate_of_js : Ojs.t -> zlib_Inflate = Obj.magic
        and zlib_Inflate_to_js : zlib_Inflate -> Ojs.t = Obj.magic
        and zlib_InflateRaw_of_js : Ojs.t -> zlib_InflateRaw = Obj.magic
        and zlib_InflateRaw_to_js : zlib_InflateRaw -> Ojs.t = Obj.magic
        and zlib_InputType_of_js : Ojs.t -> zlib_InputType =
          fun (x5 : Ojs.t) ->
            or_string_of_js
              (fun (x6 : Ojs.t) ->
                 union2_of_js ArrayBuffer.t_of_js ArrayBufferView.t_of_js x6)
              x5
        and zlib_InputType_to_js : zlib_InputType -> Ojs.t =
          fun (x1 : (ArrayBuffer.t, ArrayBufferView.t) union2 or_string) ->
            or_string_to_js
              (fun (x2 : (ArrayBuffer.t, ArrayBufferView.t) union2) ->
                 union2_to_js ArrayBuffer.t_to_js ArrayBufferView.t_to_js x2)
              x1
        and zlib_Unzip_of_js : Ojs.t -> zlib_Unzip = Obj.magic
        and zlib_Unzip_to_js : zlib_Unzip -> Ojs.t = Obj.magic
        and zlib_Zlib_of_js : Ojs.t -> zlib_Zlib = Obj.magic
        and zlib_Zlib_to_js : zlib_Zlib -> Ojs.t = Obj.magic
        and zlib_ZlibOptions_of_js : Ojs.t -> zlib_ZlibOptions = Obj.magic
        and zlib_ZlibOptions_to_js : zlib_ZlibOptions -> Ojs.t = Obj.magic
        and zlib_ZlibParams_of_js : Ojs.t -> zlib_ZlibParams = Obj.magic
        and zlib_ZlibParams_to_js : zlib_ZlibParams -> Ojs.t = Obj.magic
        and zlib_ZlibReset_of_js : Ojs.t -> zlib_ZlibReset = Obj.magic
        and zlib_ZlibReset_to_js : zlib_ZlibReset -> Ojs.t = Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x10 : Ojs.t) -> anonymous_interface_0_of_js x10
    and t_to_js : t -> Ojs.t =
      fun (x9 : anonymous_interface_0) -> anonymous_interface_0_to_js x9
    let (get : t -> int -> bool or_number) =
      fun (x11 : t) ->
        fun (x12 : int) ->
          or_number_of_js Ojs.bool_of_js (Ojs.array_get (t_to_js x11) x12)
    let (set : t -> int -> bool or_number -> unit) =
      fun (x14 : t) ->
        fun (x15 : int) ->
          fun (x16 : bool or_number) ->
            Ojs.array_set (t_to_js x14) x15
              (or_number_to_js Ojs.bool_to_js x16)
  end
module Zlib =
  struct
    open Node_stream
    module ZlibOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x19 : Ojs.t) -> x19
        and t_to_js : t -> Ojs.t = fun (x18 : Ojs.t) -> x18
        let (get_flush : t -> int) =
          fun (x20 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x20) "flush")
        let (set_flush : t -> int -> unit) =
          fun (x21 : t) ->
            fun (x22 : int) ->
              Ojs.set_prop_ascii (t_to_js x21) "flush" (Ojs.int_to_js x22)
        let (get_finishFlush : t -> int) =
          fun (x23 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x23) "finishFlush")
        let (set_finishFlush : t -> int -> unit) =
          fun (x24 : t) ->
            fun (x25 : int) ->
              Ojs.set_prop_ascii (t_to_js x24) "finishFlush"
                (Ojs.int_to_js x25)
        let (get_chunkSize : t -> int) =
          fun (x26 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x26) "chunkSize")
        let (set_chunkSize : t -> int -> unit) =
          fun (x27 : t) ->
            fun (x28 : int) ->
              Ojs.set_prop_ascii (t_to_js x27) "chunkSize"
                (Ojs.int_to_js x28)
        let (get_windowBits : t -> int) =
          fun (x29 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x29) "windowBits")
        let (set_windowBits : t -> int -> unit) =
          fun (x30 : t) ->
            fun (x31 : int) ->
              Ojs.set_prop_ascii (t_to_js x30) "windowBits"
                (Ojs.int_to_js x31)
        let (get_level : t -> int) =
          fun (x32 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x32) "level")
        let (set_level : t -> int -> unit) =
          fun (x33 : t) ->
            fun (x34 : int) ->
              Ojs.set_prop_ascii (t_to_js x33) "level" (Ojs.int_to_js x34)
        let (get_memLevel : t -> int) =
          fun (x35 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x35) "memLevel")
        let (set_memLevel : t -> int -> unit) =
          fun (x36 : t) ->
            fun (x37 : int) ->
              Ojs.set_prop_ascii (t_to_js x36) "memLevel" (Ojs.int_to_js x37)
        let (get_strategy : t -> int) =
          fun (x38 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x38) "strategy")
        let (set_strategy : t -> int -> unit) =
          fun (x39 : t) ->
            fun (x40 : int) ->
              Ojs.set_prop_ascii (t_to_js x39) "strategy" (Ojs.int_to_js x40)
        let (get_dictionary : t -> (ArrayBuffer.t, ArrayBufferView.t) union2)
          =
          fun (x41 : t) ->
            union2_of_js ArrayBuffer.t_of_js ArrayBufferView.t_of_js
              (Ojs.get_prop_ascii (t_to_js x41) "dictionary")
        let (set_dictionary :
          t -> (ArrayBuffer.t, ArrayBufferView.t) union2 -> unit) =
          fun (x44 : t) ->
            fun (x45 : (ArrayBuffer.t, ArrayBufferView.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x44) "dictionary"
                (union2_to_js ArrayBuffer.t_to_js ArrayBufferView.t_to_js x45)
        let (get_info : t -> bool) =
          fun (x48 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x48) "info")
        let (set_info : t -> bool -> unit) =
          fun (x49 : t) ->
            fun (x50 : bool) ->
              Ojs.set_prop_ascii (t_to_js x49) "info" (Ojs.bool_to_js x50)
        let (get_maxOutputLength : t -> int) =
          fun (x51 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x51) "maxOutputLength")
        let (set_maxOutputLength : t -> int -> unit) =
          fun (x52 : t) ->
            fun (x53 : int) ->
              Ojs.set_prop_ascii (t_to_js x52) "maxOutputLength"
                (Ojs.int_to_js x53)
      end
    module BrotliOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x55 : Ojs.t) -> x55
        and t_to_js : t -> Ojs.t = fun (x54 : Ojs.t) -> x54
        let (get_flush : t -> int) =
          fun (x56 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x56) "flush")
        let (set_flush : t -> int -> unit) =
          fun (x57 : t) ->
            fun (x58 : int) ->
              Ojs.set_prop_ascii (t_to_js x57) "flush" (Ojs.int_to_js x58)
        let (get_finishFlush : t -> int) =
          fun (x59 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x59) "finishFlush")
        let (set_finishFlush : t -> int -> unit) =
          fun (x60 : t) ->
            fun (x61 : int) ->
              Ojs.set_prop_ascii (t_to_js x60) "finishFlush"
                (Ojs.int_to_js x61)
        let (get_chunkSize : t -> int) =
          fun (x62 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x62) "chunkSize")
        let (set_chunkSize : t -> int -> unit) =
          fun (x63 : t) ->
            fun (x64 : int) ->
              Ojs.set_prop_ascii (t_to_js x63) "chunkSize"
                (Ojs.int_to_js x64)
        let (get_params : t -> anonymous_interface_0) =
          fun (x65 : t) ->
            anonymous_interface_0_of_js
              (Ojs.get_prop_ascii (t_to_js x65) "params")
        let (set_params : t -> anonymous_interface_0 -> unit) =
          fun (x66 : t) ->
            fun (x67 : anonymous_interface_0) ->
              Ojs.set_prop_ascii (t_to_js x66) "params"
                (anonymous_interface_0_to_js x67)
        let (get_maxOutputLength : t -> int) =
          fun (x68 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x68) "maxOutputLength")
        let (set_maxOutputLength : t -> int -> unit) =
          fun (x69 : t) ->
            fun (x70 : int) ->
              Ojs.set_prop_ascii (t_to_js x69) "maxOutputLength"
                (Ojs.int_to_js x70)
      end
    module Zlib =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x72 : Ojs.t) -> x72
        and t_to_js : t -> Ojs.t = fun (x71 : Ojs.t) -> x71
        let (get_bytesRead : t -> int) =
          fun (x73 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x73) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x74 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x74) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x75 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x75) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x77 : t) ->
            fun (x78 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x77) "shell"
                (or_string_to_js Ojs.bool_to_js x78)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x83 : t) ->
            fun ?callback:(x80 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x84 = t_to_js x83 in
                   Ojs.call (Ojs.get_prop_ascii x84 "close") "apply"
                     [|x84;((let x81 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x80 with
                              | Some x82 ->
                                  ignore
                                    (Ojs.call x81 "push"
                                       [|(Ojs.fun_to_js 1 (fun _ -> x82 ()))|])
                              | None -> ());
                             x81))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x90 : t) ->
            fun ?kind:(x85 : int option) ->
              fun ?callback:(x86 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x91 = t_to_js x90 in
                     Ojs.call (Ojs.get_prop_ascii x91 "flush") "apply"
                       [|x91;((let x87 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x85 with
                                | Some x89 ->
                                    ignore
                                      (Ojs.call x87 "push"
                                         [|(Ojs.int_to_js x89)|])
                                | None -> ());
                               (match x86 with
                                | Some x88 ->
                                    ignore
                                      (Ojs.call x87 "push"
                                         [|(Ojs.fun_to_js 1 (fun _ -> x88 ()))|])
                                | None -> ());
                               x87))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x95 : t) ->
            fun ?callback:(x92 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x96 = t_to_js x95 in
                   Ojs.call (Ojs.get_prop_ascii x96 "flush") "apply"
                     [|x96;((let x93 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x92 with
                              | Some x94 ->
                                  ignore
                                    (Ojs.call x93 "push"
                                       [|(Ojs.fun_to_js 1 (fun _ -> x94 ()))|])
                              | None -> ());
                             x93))|])
      end
    module ZlibParams =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x98 : Ojs.t) -> x98
        and t_to_js : t -> Ojs.t = fun (x97 : Ojs.t) -> x97
        let (params :
          t -> level:int -> strategy:int -> callback:(unit -> unit) -> unit)
          =
          fun (x102 : t) ->
            fun ~level:(x99 : int) ->
              fun ~strategy:(x100 : int) ->
                fun ~callback:(x101 : unit -> unit) ->
                  ignore
                    (Ojs.call (t_to_js x102) "params"
                       [|(Ojs.int_to_js x99);(Ojs.int_to_js x100);(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x101 ()))|])
      end
    module ZlibReset =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x104 : Ojs.t) -> x104
        and t_to_js : t -> Ojs.t = fun (x103 : Ojs.t) -> x103
        let (reset : t -> unit) =
          fun (x105 : t) -> ignore (Ojs.call (t_to_js x105) "reset" [||])
      end
    module BrotliCompress =
      struct
        include struct include Stream.Transform end
        let (get_bytesRead : t -> int) =
          fun (x106 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x106) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x107 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x107) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x108 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x108) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x110 : t) ->
            fun (x111 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x110) "shell"
                (or_string_to_js Ojs.bool_to_js x111)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x116 : t) ->
            fun ?callback:(x113 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x117 = t_to_js x116 in
                   Ojs.call (Ojs.get_prop_ascii x117 "close") "apply"
                     [|x117;((let x114 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x113 with
                               | Some x115 ->
                                   ignore
                                     (Ojs.call x114 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x115 ()))|])
                               | None -> ());
                              x114))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x123 : t) ->
            fun ?kind:(x118 : int option) ->
              fun ?callback:(x119 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x124 = t_to_js x123 in
                     Ojs.call (Ojs.get_prop_ascii x124 "flush") "apply"
                       [|x124;((let x120 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x118 with
                                 | Some x122 ->
                                     ignore
                                       (Ojs.call x120 "push"
                                          [|(Ojs.int_to_js x122)|])
                                 | None -> ());
                                (match x119 with
                                 | Some x121 ->
                                     ignore
                                       (Ojs.call x120 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x121 ()))|])
                                 | None -> ());
                                x120))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x128 : t) ->
            fun ?callback:(x125 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x129 = t_to_js x128 in
                   Ojs.call (Ojs.get_prop_ascii x129 "flush") "apply"
                     [|x129;((let x126 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x125 with
                               | Some x127 ->
                                   ignore
                                     (Ojs.call x126 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x127 ()))|])
                               | None -> ());
                              x126))|])
      end
    module BrotliDecompress =
      struct
        include struct include Stream.Transform end
        let (get_bytesRead : t -> int) =
          fun (x130 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x130) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x131 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x131) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x132 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x132) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x134 : t) ->
            fun (x135 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x134) "shell"
                (or_string_to_js Ojs.bool_to_js x135)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x140 : t) ->
            fun ?callback:(x137 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x141 = t_to_js x140 in
                   Ojs.call (Ojs.get_prop_ascii x141 "close") "apply"
                     [|x141;((let x138 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x137 with
                               | Some x139 ->
                                   ignore
                                     (Ojs.call x138 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x139 ()))|])
                               | None -> ());
                              x138))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x147 : t) ->
            fun ?kind:(x142 : int option) ->
              fun ?callback:(x143 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x148 = t_to_js x147 in
                     Ojs.call (Ojs.get_prop_ascii x148 "flush") "apply"
                       [|x148;((let x144 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x142 with
                                 | Some x146 ->
                                     ignore
                                       (Ojs.call x144 "push"
                                          [|(Ojs.int_to_js x146)|])
                                 | None -> ());
                                (match x143 with
                                 | Some x145 ->
                                     ignore
                                       (Ojs.call x144 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x145 ()))|])
                                 | None -> ());
                                x144))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x152 : t) ->
            fun ?callback:(x149 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x153 = t_to_js x152 in
                   Ojs.call (Ojs.get_prop_ascii x153 "flush") "apply"
                     [|x153;((let x150 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x149 with
                               | Some x151 ->
                                   ignore
                                     (Ojs.call x150 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x151 ()))|])
                               | None -> ());
                              x150))|])
      end
    module Gzip =
      struct
        include struct include Stream.Transform end
        let (get_bytesRead : t -> int) =
          fun (x154 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x154) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x155 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x155) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x156 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x156) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x158 : t) ->
            fun (x159 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x158) "shell"
                (or_string_to_js Ojs.bool_to_js x159)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x164 : t) ->
            fun ?callback:(x161 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x165 = t_to_js x164 in
                   Ojs.call (Ojs.get_prop_ascii x165 "close") "apply"
                     [|x165;((let x162 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x161 with
                               | Some x163 ->
                                   ignore
                                     (Ojs.call x162 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x163 ()))|])
                               | None -> ());
                              x162))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x171 : t) ->
            fun ?kind:(x166 : int option) ->
              fun ?callback:(x167 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x172 = t_to_js x171 in
                     Ojs.call (Ojs.get_prop_ascii x172 "flush") "apply"
                       [|x172;((let x168 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x166 with
                                 | Some x170 ->
                                     ignore
                                       (Ojs.call x168 "push"
                                          [|(Ojs.int_to_js x170)|])
                                 | None -> ());
                                (match x167 with
                                 | Some x169 ->
                                     ignore
                                       (Ojs.call x168 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x169 ()))|])
                                 | None -> ());
                                x168))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x176 : t) ->
            fun ?callback:(x173 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x177 = t_to_js x176 in
                   Ojs.call (Ojs.get_prop_ascii x177 "flush") "apply"
                     [|x177;((let x174 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x173 with
                               | Some x175 ->
                                   ignore
                                     (Ojs.call x174 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x175 ()))|])
                               | None -> ());
                              x174))|])
      end
    module Gunzip =
      struct
        include struct include Stream.Transform end
        let (get_bytesRead : t -> int) =
          fun (x178 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x178) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x179 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x179) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x180 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x180) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x182 : t) ->
            fun (x183 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x182) "shell"
                (or_string_to_js Ojs.bool_to_js x183)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x188 : t) ->
            fun ?callback:(x185 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x189 = t_to_js x188 in
                   Ojs.call (Ojs.get_prop_ascii x189 "close") "apply"
                     [|x189;((let x186 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x185 with
                               | Some x187 ->
                                   ignore
                                     (Ojs.call x186 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x187 ()))|])
                               | None -> ());
                              x186))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x195 : t) ->
            fun ?kind:(x190 : int option) ->
              fun ?callback:(x191 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x196 = t_to_js x195 in
                     Ojs.call (Ojs.get_prop_ascii x196 "flush") "apply"
                       [|x196;((let x192 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x190 with
                                 | Some x194 ->
                                     ignore
                                       (Ojs.call x192 "push"
                                          [|(Ojs.int_to_js x194)|])
                                 | None -> ());
                                (match x191 with
                                 | Some x193 ->
                                     ignore
                                       (Ojs.call x192 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x193 ()))|])
                                 | None -> ());
                                x192))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x200 : t) ->
            fun ?callback:(x197 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x201 = t_to_js x200 in
                   Ojs.call (Ojs.get_prop_ascii x201 "flush") "apply"
                     [|x201;((let x198 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x197 with
                               | Some x199 ->
                                   ignore
                                     (Ojs.call x198 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x199 ()))|])
                               | None -> ());
                              x198))|])
      end
    module Deflate =
      struct
        include struct include Stream.Transform end
        let (get_bytesRead : t -> int) =
          fun (x202 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x202) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x203 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x203) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x204 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x204) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x206 : t) ->
            fun (x207 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x206) "shell"
                (or_string_to_js Ojs.bool_to_js x207)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x212 : t) ->
            fun ?callback:(x209 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x213 = t_to_js x212 in
                   Ojs.call (Ojs.get_prop_ascii x213 "close") "apply"
                     [|x213;((let x210 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x209 with
                               | Some x211 ->
                                   ignore
                                     (Ojs.call x210 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x211 ()))|])
                               | None -> ());
                              x210))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x219 : t) ->
            fun ?kind:(x214 : int option) ->
              fun ?callback:(x215 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x220 = t_to_js x219 in
                     Ojs.call (Ojs.get_prop_ascii x220 "flush") "apply"
                       [|x220;((let x216 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x214 with
                                 | Some x218 ->
                                     ignore
                                       (Ojs.call x216 "push"
                                          [|(Ojs.int_to_js x218)|])
                                 | None -> ());
                                (match x215 with
                                 | Some x217 ->
                                     ignore
                                       (Ojs.call x216 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x217 ()))|])
                                 | None -> ());
                                x216))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x224 : t) ->
            fun ?callback:(x221 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x225 = t_to_js x224 in
                   Ojs.call (Ojs.get_prop_ascii x225 "flush") "apply"
                     [|x225;((let x222 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x221 with
                               | Some x223 ->
                                   ignore
                                     (Ojs.call x222 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x223 ()))|])
                               | None -> ());
                              x222))|])
        let (reset : t -> unit) =
          fun (x226 : t) -> ignore (Ojs.call (t_to_js x226) "reset" [||])
        let (params :
          t -> level:int -> strategy:int -> callback:(unit -> unit) -> unit)
          =
          fun (x230 : t) ->
            fun ~level:(x227 : int) ->
              fun ~strategy:(x228 : int) ->
                fun ~callback:(x229 : unit -> unit) ->
                  ignore
                    (Ojs.call (t_to_js x230) "params"
                       [|(Ojs.int_to_js x227);(Ojs.int_to_js x228);(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x229 ()))|])
      end
    module Inflate =
      struct
        include struct include Stream.Transform end
        let (get_bytesRead : t -> int) =
          fun (x231 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x231) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x232 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x232) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x233 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x233) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x235 : t) ->
            fun (x236 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x235) "shell"
                (or_string_to_js Ojs.bool_to_js x236)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x241 : t) ->
            fun ?callback:(x238 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x242 = t_to_js x241 in
                   Ojs.call (Ojs.get_prop_ascii x242 "close") "apply"
                     [|x242;((let x239 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x238 with
                               | Some x240 ->
                                   ignore
                                     (Ojs.call x239 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x240 ()))|])
                               | None -> ());
                              x239))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x248 : t) ->
            fun ?kind:(x243 : int option) ->
              fun ?callback:(x244 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x249 = t_to_js x248 in
                     Ojs.call (Ojs.get_prop_ascii x249 "flush") "apply"
                       [|x249;((let x245 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x243 with
                                 | Some x247 ->
                                     ignore
                                       (Ojs.call x245 "push"
                                          [|(Ojs.int_to_js x247)|])
                                 | None -> ());
                                (match x244 with
                                 | Some x246 ->
                                     ignore
                                       (Ojs.call x245 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x246 ()))|])
                                 | None -> ());
                                x245))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x253 : t) ->
            fun ?callback:(x250 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x254 = t_to_js x253 in
                   Ojs.call (Ojs.get_prop_ascii x254 "flush") "apply"
                     [|x254;((let x251 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x250 with
                               | Some x252 ->
                                   ignore
                                     (Ojs.call x251 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x252 ()))|])
                               | None -> ());
                              x251))|])
        let (reset : t -> unit) =
          fun (x255 : t) -> ignore (Ojs.call (t_to_js x255) "reset" [||])
      end
    module DeflateRaw =
      struct
        include struct include Stream.Transform end
        let (get_bytesRead : t -> int) =
          fun (x256 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x256) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x257 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x257) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x258 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x258) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x260 : t) ->
            fun (x261 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x260) "shell"
                (or_string_to_js Ojs.bool_to_js x261)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x266 : t) ->
            fun ?callback:(x263 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x267 = t_to_js x266 in
                   Ojs.call (Ojs.get_prop_ascii x267 "close") "apply"
                     [|x267;((let x264 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x263 with
                               | Some x265 ->
                                   ignore
                                     (Ojs.call x264 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x265 ()))|])
                               | None -> ());
                              x264))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x273 : t) ->
            fun ?kind:(x268 : int option) ->
              fun ?callback:(x269 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x274 = t_to_js x273 in
                     Ojs.call (Ojs.get_prop_ascii x274 "flush") "apply"
                       [|x274;((let x270 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x268 with
                                 | Some x272 ->
                                     ignore
                                       (Ojs.call x270 "push"
                                          [|(Ojs.int_to_js x272)|])
                                 | None -> ());
                                (match x269 with
                                 | Some x271 ->
                                     ignore
                                       (Ojs.call x270 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x271 ()))|])
                                 | None -> ());
                                x270))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x278 : t) ->
            fun ?callback:(x275 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x279 = t_to_js x278 in
                   Ojs.call (Ojs.get_prop_ascii x279 "flush") "apply"
                     [|x279;((let x276 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x275 with
                               | Some x277 ->
                                   ignore
                                     (Ojs.call x276 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x277 ()))|])
                               | None -> ());
                              x276))|])
        let (reset : t -> unit) =
          fun (x280 : t) -> ignore (Ojs.call (t_to_js x280) "reset" [||])
        let (params :
          t -> level:int -> strategy:int -> callback:(unit -> unit) -> unit)
          =
          fun (x284 : t) ->
            fun ~level:(x281 : int) ->
              fun ~strategy:(x282 : int) ->
                fun ~callback:(x283 : unit -> unit) ->
                  ignore
                    (Ojs.call (t_to_js x284) "params"
                       [|(Ojs.int_to_js x281);(Ojs.int_to_js x282);(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x283 ()))|])
      end
    module InflateRaw =
      struct
        include struct include Stream.Transform end
        let (get_bytesRead : t -> int) =
          fun (x285 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x285) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x286 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x286) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x287 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x287) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x289 : t) ->
            fun (x290 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x289) "shell"
                (or_string_to_js Ojs.bool_to_js x290)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x295 : t) ->
            fun ?callback:(x292 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x296 = t_to_js x295 in
                   Ojs.call (Ojs.get_prop_ascii x296 "close") "apply"
                     [|x296;((let x293 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x292 with
                               | Some x294 ->
                                   ignore
                                     (Ojs.call x293 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x294 ()))|])
                               | None -> ());
                              x293))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x302 : t) ->
            fun ?kind:(x297 : int option) ->
              fun ?callback:(x298 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x303 = t_to_js x302 in
                     Ojs.call (Ojs.get_prop_ascii x303 "flush") "apply"
                       [|x303;((let x299 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x297 with
                                 | Some x301 ->
                                     ignore
                                       (Ojs.call x299 "push"
                                          [|(Ojs.int_to_js x301)|])
                                 | None -> ());
                                (match x298 with
                                 | Some x300 ->
                                     ignore
                                       (Ojs.call x299 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x300 ()))|])
                                 | None -> ());
                                x299))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x307 : t) ->
            fun ?callback:(x304 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x308 = t_to_js x307 in
                   Ojs.call (Ojs.get_prop_ascii x308 "flush") "apply"
                     [|x308;((let x305 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x304 with
                               | Some x306 ->
                                   ignore
                                     (Ojs.call x305 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x306 ()))|])
                               | None -> ());
                              x305))|])
        let (reset : t -> unit) =
          fun (x309 : t) -> ignore (Ojs.call (t_to_js x309) "reset" [||])
      end
    module Unzip =
      struct
        include struct include Stream.Transform end
        let (get_bytesRead : t -> int) =
          fun (x310 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x310) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x311 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x311) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x312 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x312) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x314 : t) ->
            fun (x315 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x314) "shell"
                (or_string_to_js Ojs.bool_to_js x315)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x320 : t) ->
            fun ?callback:(x317 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x321 = t_to_js x320 in
                   Ojs.call (Ojs.get_prop_ascii x321 "close") "apply"
                     [|x321;((let x318 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x317 with
                               | Some x319 ->
                                   ignore
                                     (Ojs.call x318 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x319 ()))|])
                               | None -> ());
                              x318))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x327 : t) ->
            fun ?kind:(x322 : int option) ->
              fun ?callback:(x323 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x328 = t_to_js x327 in
                     Ojs.call (Ojs.get_prop_ascii x328 "flush") "apply"
                       [|x328;((let x324 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x322 with
                                 | Some x326 ->
                                     ignore
                                       (Ojs.call x324 "push"
                                          [|(Ojs.int_to_js x326)|])
                                 | None -> ());
                                (match x323 with
                                 | Some x325 ->
                                     ignore
                                       (Ojs.call x324 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x325 ()))|])
                                 | None -> ());
                                x324))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x332 : t) ->
            fun ?callback:(x329 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x333 = t_to_js x332 in
                   Ojs.call (Ojs.get_prop_ascii x333 "flush") "apply"
                     [|x333;((let x330 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x329 with
                               | Some x331 ->
                                   ignore
                                     (Ojs.call x330 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x331 ()))|])
                               | None -> ());
                              x330))|])
      end
    let (createBrotliCompress :
      ?options:zlib_BrotliOptions -> unit -> zlib_BrotliCompress) =
      fun ?options:(x334 : zlib_BrotliOptions option) ->
        fun () ->
          zlib_BrotliCompress_of_js
            (let x337 = Import.zlib in
             Ojs.call (Ojs.get_prop_ascii x337 "createBrotliCompress")
               "apply"
               [|x337;((let x335 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x334 with
                         | Some x336 ->
                             ignore
                               (Ojs.call x335 "push"
                                  [|(zlib_BrotliOptions_to_js x336)|])
                         | None -> ());
                        x335))|])
    let (createBrotliDecompress :
      ?options:zlib_BrotliOptions -> unit -> zlib_BrotliDecompress) =
      fun ?options:(x338 : zlib_BrotliOptions option) ->
        fun () ->
          zlib_BrotliDecompress_of_js
            (let x341 = Import.zlib in
             Ojs.call (Ojs.get_prop_ascii x341 "createBrotliDecompress")
               "apply"
               [|x341;((let x339 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x338 with
                         | Some x340 ->
                             ignore
                               (Ojs.call x339 "push"
                                  [|(zlib_BrotliOptions_to_js x340)|])
                         | None -> ());
                        x339))|])
    let (createGzip : ?options:zlib_ZlibOptions -> unit -> zlib_Gzip) =
      fun ?options:(x342 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_Gzip_of_js
            (let x345 = Import.zlib in
             Ojs.call (Ojs.get_prop_ascii x345 "createGzip") "apply"
               [|x345;((let x343 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x342 with
                         | Some x344 ->
                             ignore
                               (Ojs.call x343 "push"
                                  [|(zlib_ZlibOptions_to_js x344)|])
                         | None -> ());
                        x343))|])
    let (createGunzip : ?options:zlib_ZlibOptions -> unit -> zlib_Gunzip) =
      fun ?options:(x346 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_Gunzip_of_js
            (let x349 = Import.zlib in
             Ojs.call (Ojs.get_prop_ascii x349 "createGunzip") "apply"
               [|x349;((let x347 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x346 with
                         | Some x348 ->
                             ignore
                               (Ojs.call x347 "push"
                                  [|(zlib_ZlibOptions_to_js x348)|])
                         | None -> ());
                        x347))|])
    let (createDeflate : ?options:zlib_ZlibOptions -> unit -> zlib_Deflate) =
      fun ?options:(x350 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_Deflate_of_js
            (let x353 = Import.zlib in
             Ojs.call (Ojs.get_prop_ascii x353 "createDeflate") "apply"
               [|x353;((let x351 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x350 with
                         | Some x352 ->
                             ignore
                               (Ojs.call x351 "push"
                                  [|(zlib_ZlibOptions_to_js x352)|])
                         | None -> ());
                        x351))|])
    let (createInflate : ?options:zlib_ZlibOptions -> unit -> zlib_Inflate) =
      fun ?options:(x354 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_Inflate_of_js
            (let x357 = Import.zlib in
             Ojs.call (Ojs.get_prop_ascii x357 "createInflate") "apply"
               [|x357;((let x355 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x354 with
                         | Some x356 ->
                             ignore
                               (Ojs.call x355 "push"
                                  [|(zlib_ZlibOptions_to_js x356)|])
                         | None -> ());
                        x355))|])
    let (createDeflateRaw :
      ?options:zlib_ZlibOptions -> unit -> zlib_DeflateRaw) =
      fun ?options:(x358 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_DeflateRaw_of_js
            (let x361 = Import.zlib in
             Ojs.call (Ojs.get_prop_ascii x361 "createDeflateRaw") "apply"
               [|x361;((let x359 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x358 with
                         | Some x360 ->
                             ignore
                               (Ojs.call x359 "push"
                                  [|(zlib_ZlibOptions_to_js x360)|])
                         | None -> ());
                        x359))|])
    let (createInflateRaw :
      ?options:zlib_ZlibOptions -> unit -> zlib_InflateRaw) =
      fun ?options:(x362 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_InflateRaw_of_js
            (let x365 = Import.zlib in
             Ojs.call (Ojs.get_prop_ascii x365 "createInflateRaw") "apply"
               [|x365;((let x363 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x362 with
                         | Some x364 ->
                             ignore
                               (Ojs.call x363 "push"
                                  [|(zlib_ZlibOptions_to_js x364)|])
                         | None -> ());
                        x363))|])
    let (createUnzip : ?options:zlib_ZlibOptions -> unit -> zlib_Unzip) =
      fun ?options:(x366 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_Unzip_of_js
            (let x369 = Import.zlib in
             Ojs.call (Ojs.get_prop_ascii x369 "createUnzip") "apply"
               [|x369;((let x367 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x366 with
                         | Some x368 ->
                             ignore
                               (Ojs.call x367 "push"
                                  [|(zlib_ZlibOptions_to_js x368)|])
                         | None -> ());
                        x367))|])
    module InputType =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x371 : Ojs.t) -> x371
        and t_to_js : t -> Ojs.t = fun (x370 : Ojs.t) -> x370
      end
    module CompressCallback =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x373 : Ojs.t) -> x373
        and t_to_js : t -> Ojs.t = fun (x372 : Ojs.t) -> x372
        let (apply : t -> error:Error.t or_null -> result:Buffer.t -> unit) =
          fun (x377 : t) ->
            fun ~error:(x374 : Error.t or_null) ->
              fun ~result:(x376 : Buffer.t) ->
                ignore
                  (Ojs.apply (t_to_js x377)
                     [|(or_null_to_js Error.t_to_js x374);(Buffer.t_to_js
                                                             x376)|])
      end
    let (brotliCompress :
      buf:zlib_InputType ->
        options:zlib_BrotliOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x378 : zlib_InputType) ->
        fun ~options:(x379 : zlib_BrotliOptions) ->
          fun ~callback:(x380 : zlib_CompressCallback) ->
            ignore
              (Ojs.call Import.zlib "brotliCompress"
                 [|(zlib_InputType_to_js x378);(zlib_BrotliOptions_to_js x379);(
                   zlib_CompressCallback_to_js x380)|])
    let (brotliCompress__promisify__ :
      buffer:zlib_InputType ->
        ?options:zlib_BrotliOptions -> unit -> Buffer.t Promise.t)
      =
      fun ~buffer:(x381 : zlib_InputType) ->
        fun ?options:(x382 : zlib_BrotliOptions option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x385 = Ojs.get_prop_ascii Import.zlib "brotliCompress" in
               Ojs.call (Ojs.get_prop_ascii x385 "__promisify__") "apply"
                 [|x385;((let x383 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x383 "push"
                               [|(zlib_InputType_to_js x381)|]);
                          (match x382 with
                           | Some x384 ->
                               ignore
                                 (Ojs.call x383 "push"
                                    [|(zlib_BrotliOptions_to_js x384)|])
                           | None -> ());
                          x383))|])
    let (brotliCompressSync :
      buf:zlib_InputType -> ?options:zlib_BrotliOptions -> unit -> Buffer.t)
      =
      fun ~buf:(x387 : zlib_InputType) ->
        fun ?options:(x388 : zlib_BrotliOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x391 = Import.zlib in
               Ojs.call (Ojs.get_prop_ascii x391 "brotliCompressSync")
                 "apply"
                 [|x391;((let x389 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x389 "push"
                               [|(zlib_InputType_to_js x387)|]);
                          (match x388 with
                           | Some x390 ->
                               ignore
                                 (Ojs.call x389 "push"
                                    [|(zlib_BrotliOptions_to_js x390)|])
                           | None -> ());
                          x389))|])
    let (brotliDecompress :
      buf:zlib_InputType ->
        options:zlib_BrotliOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x392 : zlib_InputType) ->
        fun ~options:(x393 : zlib_BrotliOptions) ->
          fun ~callback:(x394 : zlib_CompressCallback) ->
            ignore
              (Ojs.call Import.zlib "brotliDecompress"
                 [|(zlib_InputType_to_js x392);(zlib_BrotliOptions_to_js x393);(
                   zlib_CompressCallback_to_js x394)|])
    let (brotliDecompress :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x395 : zlib_InputType) ->
        fun ~callback:(x396 : zlib_CompressCallback) ->
          ignore
            (Ojs.call Import.zlib "brotliDecompress"
               [|(zlib_InputType_to_js x395);(zlib_CompressCallback_to_js
                                                x396)|])
    let (brotliDecompress__promisify__ :
      buffer:zlib_InputType ->
        ?options:zlib_BrotliOptions -> unit -> Buffer.t Promise.t)
      =
      fun ~buffer:(x397 : zlib_InputType) ->
        fun ?options:(x398 : zlib_BrotliOptions option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x401 = Ojs.get_prop_ascii Import.zlib "brotliDecompress" in
               Ojs.call (Ojs.get_prop_ascii x401 "__promisify__") "apply"
                 [|x401;((let x399 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x399 "push"
                               [|(zlib_InputType_to_js x397)|]);
                          (match x398 with
                           | Some x400 ->
                               ignore
                                 (Ojs.call x399 "push"
                                    [|(zlib_BrotliOptions_to_js x400)|])
                           | None -> ());
                          x399))|])
    let (brotliDecompressSync :
      buf:zlib_InputType -> ?options:zlib_BrotliOptions -> unit -> Buffer.t)
      =
      fun ~buf:(x403 : zlib_InputType) ->
        fun ?options:(x404 : zlib_BrotliOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x407 = Import.zlib in
               Ojs.call (Ojs.get_prop_ascii x407 "brotliDecompressSync")
                 "apply"
                 [|x407;((let x405 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x405 "push"
                               [|(zlib_InputType_to_js x403)|]);
                          (match x404 with
                           | Some x406 ->
                               ignore
                                 (Ojs.call x405 "push"
                                    [|(zlib_BrotliOptions_to_js x406)|])
                           | None -> ());
                          x405))|])
    let (deflate :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x408 : zlib_InputType) ->
        fun ~callback:(x409 : zlib_CompressCallback) ->
          ignore
            (Ojs.call Import.zlib "deflate"
               [|(zlib_InputType_to_js x408);(zlib_CompressCallback_to_js
                                                x409)|])
    let (deflate :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x410 : zlib_InputType) ->
        fun ~options:(x411 : zlib_ZlibOptions) ->
          fun ~callback:(x412 : zlib_CompressCallback) ->
            ignore
              (Ojs.call Import.zlib "deflate"
                 [|(zlib_InputType_to_js x410);(zlib_ZlibOptions_to_js x411);(
                   zlib_CompressCallback_to_js x412)|])
    let (deflate__promisify__ :
      buffer:zlib_InputType ->
        ?options:zlib_ZlibOptions -> unit -> Buffer.t Promise.t)
      =
      fun ~buffer:(x413 : zlib_InputType) ->
        fun ?options:(x414 : zlib_ZlibOptions option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x417 = Ojs.get_prop_ascii Import.zlib "deflate" in
               Ojs.call (Ojs.get_prop_ascii x417 "__promisify__") "apply"
                 [|x417;((let x415 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x415 "push"
                               [|(zlib_InputType_to_js x413)|]);
                          (match x414 with
                           | Some x416 ->
                               ignore
                                 (Ojs.call x415 "push"
                                    [|(zlib_ZlibOptions_to_js x416)|])
                           | None -> ());
                          x415))|])
    let (deflateSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t) =
      fun ~buf:(x419 : zlib_InputType) ->
        fun ?options:(x420 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x423 = Import.zlib in
               Ojs.call (Ojs.get_prop_ascii x423 "deflateSync") "apply"
                 [|x423;((let x421 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x421 "push"
                               [|(zlib_InputType_to_js x419)|]);
                          (match x420 with
                           | Some x422 ->
                               ignore
                                 (Ojs.call x421 "push"
                                    [|(zlib_ZlibOptions_to_js x422)|])
                           | None -> ());
                          x421))|])
    let (deflateRaw :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x424 : zlib_InputType) ->
        fun ~callback:(x425 : zlib_CompressCallback) ->
          ignore
            (Ojs.call Import.zlib "deflateRaw"
               [|(zlib_InputType_to_js x424);(zlib_CompressCallback_to_js
                                                x425)|])
    let (deflateRaw :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x426 : zlib_InputType) ->
        fun ~options:(x427 : zlib_ZlibOptions) ->
          fun ~callback:(x428 : zlib_CompressCallback) ->
            ignore
              (Ojs.call Import.zlib "deflateRaw"
                 [|(zlib_InputType_to_js x426);(zlib_ZlibOptions_to_js x427);(
                   zlib_CompressCallback_to_js x428)|])
    let (deflateRaw__promisify__ :
      buffer:zlib_InputType ->
        ?options:zlib_ZlibOptions -> unit -> Buffer.t Promise.t)
      =
      fun ~buffer:(x429 : zlib_InputType) ->
        fun ?options:(x430 : zlib_ZlibOptions option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x433 = Ojs.get_prop_ascii Import.zlib "deflateRaw" in
               Ojs.call (Ojs.get_prop_ascii x433 "__promisify__") "apply"
                 [|x433;((let x431 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x431 "push"
                               [|(zlib_InputType_to_js x429)|]);
                          (match x430 with
                           | Some x432 ->
                               ignore
                                 (Ojs.call x431 "push"
                                    [|(zlib_ZlibOptions_to_js x432)|])
                           | None -> ());
                          x431))|])
    let (deflateRawSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t) =
      fun ~buf:(x435 : zlib_InputType) ->
        fun ?options:(x436 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x439 = Import.zlib in
               Ojs.call (Ojs.get_prop_ascii x439 "deflateRawSync") "apply"
                 [|x439;((let x437 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x437 "push"
                               [|(zlib_InputType_to_js x435)|]);
                          (match x436 with
                           | Some x438 ->
                               ignore
                                 (Ojs.call x437 "push"
                                    [|(zlib_ZlibOptions_to_js x438)|])
                           | None -> ());
                          x437))|])
    let (gzip : buf:zlib_InputType -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x440 : zlib_InputType) ->
        fun ~callback:(x441 : zlib_CompressCallback) ->
          ignore
            (Ojs.call Import.zlib "gzip"
               [|(zlib_InputType_to_js x440);(zlib_CompressCallback_to_js
                                                x441)|])
    let (gzip :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x442 : zlib_InputType) ->
        fun ~options:(x443 : zlib_ZlibOptions) ->
          fun ~callback:(x444 : zlib_CompressCallback) ->
            ignore
              (Ojs.call Import.zlib "gzip"
                 [|(zlib_InputType_to_js x442);(zlib_ZlibOptions_to_js x443);(
                   zlib_CompressCallback_to_js x444)|])
    let (gzip__promisify__ :
      buffer:zlib_InputType ->
        ?options:zlib_ZlibOptions -> unit -> Buffer.t Promise.t)
      =
      fun ~buffer:(x445 : zlib_InputType) ->
        fun ?options:(x446 : zlib_ZlibOptions option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x449 = Ojs.get_prop_ascii Import.zlib "gzip" in
               Ojs.call (Ojs.get_prop_ascii x449 "__promisify__") "apply"
                 [|x449;((let x447 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x447 "push"
                               [|(zlib_InputType_to_js x445)|]);
                          (match x446 with
                           | Some x448 ->
                               ignore
                                 (Ojs.call x447 "push"
                                    [|(zlib_ZlibOptions_to_js x448)|])
                           | None -> ());
                          x447))|])
    let (gzipSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t) =
      fun ~buf:(x451 : zlib_InputType) ->
        fun ?options:(x452 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x455 = Import.zlib in
               Ojs.call (Ojs.get_prop_ascii x455 "gzipSync") "apply"
                 [|x455;((let x453 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x453 "push"
                               [|(zlib_InputType_to_js x451)|]);
                          (match x452 with
                           | Some x454 ->
                               ignore
                                 (Ojs.call x453 "push"
                                    [|(zlib_ZlibOptions_to_js x454)|])
                           | None -> ());
                          x453))|])
    let (gunzip :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x456 : zlib_InputType) ->
        fun ~callback:(x457 : zlib_CompressCallback) ->
          ignore
            (Ojs.call Import.zlib "gunzip"
               [|(zlib_InputType_to_js x456);(zlib_CompressCallback_to_js
                                                x457)|])
    let (gunzip :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x458 : zlib_InputType) ->
        fun ~options:(x459 : zlib_ZlibOptions) ->
          fun ~callback:(x460 : zlib_CompressCallback) ->
            ignore
              (Ojs.call Import.zlib "gunzip"
                 [|(zlib_InputType_to_js x458);(zlib_ZlibOptions_to_js x459);(
                   zlib_CompressCallback_to_js x460)|])
    let (gunzip__promisify__ :
      buffer:zlib_InputType ->
        ?options:zlib_ZlibOptions -> unit -> Buffer.t Promise.t)
      =
      fun ~buffer:(x461 : zlib_InputType) ->
        fun ?options:(x462 : zlib_ZlibOptions option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x465 = Ojs.get_prop_ascii Import.zlib "gunzip" in
               Ojs.call (Ojs.get_prop_ascii x465 "__promisify__") "apply"
                 [|x465;((let x463 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x463 "push"
                               [|(zlib_InputType_to_js x461)|]);
                          (match x462 with
                           | Some x464 ->
                               ignore
                                 (Ojs.call x463 "push"
                                    [|(zlib_ZlibOptions_to_js x464)|])
                           | None -> ());
                          x463))|])
    let (gunzipSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t) =
      fun ~buf:(x467 : zlib_InputType) ->
        fun ?options:(x468 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x471 = Import.zlib in
               Ojs.call (Ojs.get_prop_ascii x471 "gunzipSync") "apply"
                 [|x471;((let x469 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x469 "push"
                               [|(zlib_InputType_to_js x467)|]);
                          (match x468 with
                           | Some x470 ->
                               ignore
                                 (Ojs.call x469 "push"
                                    [|(zlib_ZlibOptions_to_js x470)|])
                           | None -> ());
                          x469))|])
    let (inflate :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x472 : zlib_InputType) ->
        fun ~callback:(x473 : zlib_CompressCallback) ->
          ignore
            (Ojs.call Import.zlib "inflate"
               [|(zlib_InputType_to_js x472);(zlib_CompressCallback_to_js
                                                x473)|])
    let (inflate :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x474 : zlib_InputType) ->
        fun ~options:(x475 : zlib_ZlibOptions) ->
          fun ~callback:(x476 : zlib_CompressCallback) ->
            ignore
              (Ojs.call Import.zlib "inflate"
                 [|(zlib_InputType_to_js x474);(zlib_ZlibOptions_to_js x475);(
                   zlib_CompressCallback_to_js x476)|])
    let (inflate__promisify__ :
      buffer:zlib_InputType ->
        ?options:zlib_ZlibOptions -> unit -> Buffer.t Promise.t)
      =
      fun ~buffer:(x477 : zlib_InputType) ->
        fun ?options:(x478 : zlib_ZlibOptions option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x481 = Ojs.get_prop_ascii Import.zlib "inflate" in
               Ojs.call (Ojs.get_prop_ascii x481 "__promisify__") "apply"
                 [|x481;((let x479 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x479 "push"
                               [|(zlib_InputType_to_js x477)|]);
                          (match x478 with
                           | Some x480 ->
                               ignore
                                 (Ojs.call x479 "push"
                                    [|(zlib_ZlibOptions_to_js x480)|])
                           | None -> ());
                          x479))|])
    let (inflateSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t) =
      fun ~buf:(x483 : zlib_InputType) ->
        fun ?options:(x484 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x487 = Import.zlib in
               Ojs.call (Ojs.get_prop_ascii x487 "inflateSync") "apply"
                 [|x487;((let x485 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x485 "push"
                               [|(zlib_InputType_to_js x483)|]);
                          (match x484 with
                           | Some x486 ->
                               ignore
                                 (Ojs.call x485 "push"
                                    [|(zlib_ZlibOptions_to_js x486)|])
                           | None -> ());
                          x485))|])
    let (inflateRaw :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x488 : zlib_InputType) ->
        fun ~callback:(x489 : zlib_CompressCallback) ->
          ignore
            (Ojs.call Import.zlib "inflateRaw"
               [|(zlib_InputType_to_js x488);(zlib_CompressCallback_to_js
                                                x489)|])
    let (inflateRaw :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x490 : zlib_InputType) ->
        fun ~options:(x491 : zlib_ZlibOptions) ->
          fun ~callback:(x492 : zlib_CompressCallback) ->
            ignore
              (Ojs.call Import.zlib "inflateRaw"
                 [|(zlib_InputType_to_js x490);(zlib_ZlibOptions_to_js x491);(
                   zlib_CompressCallback_to_js x492)|])
    let (inflateRaw__promisify__ :
      buffer:zlib_InputType ->
        ?options:zlib_ZlibOptions -> unit -> Buffer.t Promise.t)
      =
      fun ~buffer:(x493 : zlib_InputType) ->
        fun ?options:(x494 : zlib_ZlibOptions option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x497 = Ojs.get_prop_ascii Import.zlib "inflateRaw" in
               Ojs.call (Ojs.get_prop_ascii x497 "__promisify__") "apply"
                 [|x497;((let x495 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x495 "push"
                               [|(zlib_InputType_to_js x493)|]);
                          (match x494 with
                           | Some x496 ->
                               ignore
                                 (Ojs.call x495 "push"
                                    [|(zlib_ZlibOptions_to_js x496)|])
                           | None -> ());
                          x495))|])
    let (inflateRawSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t) =
      fun ~buf:(x499 : zlib_InputType) ->
        fun ?options:(x500 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x503 = Import.zlib in
               Ojs.call (Ojs.get_prop_ascii x503 "inflateRawSync") "apply"
                 [|x503;((let x501 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x501 "push"
                               [|(zlib_InputType_to_js x499)|]);
                          (match x500 with
                           | Some x502 ->
                               ignore
                                 (Ojs.call x501 "push"
                                    [|(zlib_ZlibOptions_to_js x502)|])
                           | None -> ());
                          x501))|])
    let (unzip :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x504 : zlib_InputType) ->
        fun ~callback:(x505 : zlib_CompressCallback) ->
          ignore
            (Ojs.call Import.zlib "unzip"
               [|(zlib_InputType_to_js x504);(zlib_CompressCallback_to_js
                                                x505)|])
    let (unzip :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x506 : zlib_InputType) ->
        fun ~options:(x507 : zlib_ZlibOptions) ->
          fun ~callback:(x508 : zlib_CompressCallback) ->
            ignore
              (Ojs.call Import.zlib "unzip"
                 [|(zlib_InputType_to_js x506);(zlib_ZlibOptions_to_js x507);(
                   zlib_CompressCallback_to_js x508)|])
    let (unzip__promisify__ :
      buffer:zlib_InputType ->
        ?options:zlib_ZlibOptions -> unit -> Buffer.t Promise.t)
      =
      fun ~buffer:(x509 : zlib_InputType) ->
        fun ?options:(x510 : zlib_ZlibOptions option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x513 = Ojs.get_prop_ascii Import.zlib "unzip" in
               Ojs.call (Ojs.get_prop_ascii x513 "__promisify__") "apply"
                 [|x513;((let x511 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x511 "push"
                               [|(zlib_InputType_to_js x509)|]);
                          (match x510 with
                           | Some x512 ->
                               ignore
                                 (Ojs.call x511 "push"
                                    [|(zlib_ZlibOptions_to_js x512)|])
                           | None -> ());
                          x511))|])
    let (unzipSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t) =
      fun ~buf:(x515 : zlib_InputType) ->
        fun ?options:(x516 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x519 = Import.zlib in
               Ojs.call (Ojs.get_prop_ascii x519 "unzipSync") "apply"
                 [|x519;((let x517 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x517 "push"
                               [|(zlib_InputType_to_js x515)|]);
                          (match x516 with
                           | Some x518 ->
                               ignore
                                 (Ojs.call x517 "push"
                                    [|(zlib_ZlibOptions_to_js x518)|])
                           | None -> ());
                          x517))|])
    module Constants =
      struct
        let (bROTLI_DECODE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODE")
        let (bROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES")
        let (bROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP")
        let (bROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES")
        let (bROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1")
        let (bROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2")
        let (bROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS")
        let (bROTLI_DECODER_ERROR_DICTIONARY_NOT_SET : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET")
        let (bROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1")
        let (bROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2")
        let (bROTLI_DECODER_ERROR_FORMAT_CL_SPACE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_CL_SPACE")
        let (bROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT")
        let (bROTLI_DECODER_ERROR_FORMAT_DICTIONARY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_DICTIONARY")
        let (bROTLI_DECODER_ERROR_FORMAT_DISTANCE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_DISTANCE")
        let (bROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE")
        let (bROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE")
        let (bROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE")
        let (bROTLI_DECODER_ERROR_FORMAT_PADDING_1 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_PADDING_1")
        let (bROTLI_DECODER_ERROR_FORMAT_PADDING_2 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_PADDING_2")
        let (bROTLI_DECODER_ERROR_FORMAT_RESERVED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_RESERVED")
        let (bROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET")
        let (bROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME")
        let (bROTLI_DECODER_ERROR_FORMAT_TRANSFORM : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_TRANSFORM")
        let (bROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS")
        let (bROTLI_DECODER_ERROR_INVALID_ARGUMENTS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_INVALID_ARGUMENTS")
        let (bROTLI_DECODER_ERROR_UNREACHABLE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_UNREACHABLE")
        let (bROTLI_DECODER_NEEDS_MORE_INPUT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_NEEDS_MORE_INPUT")
        let (bROTLI_DECODER_NEEDS_MORE_OUTPUT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_NEEDS_MORE_OUTPUT")
        let (bROTLI_DECODER_NO_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_NO_ERROR")
        let (bROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION : 
          int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION")
        let (bROTLI_DECODER_PARAM_LARGE_WINDOW : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_PARAM_LARGE_WINDOW")
        let (bROTLI_DECODER_RESULT_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_RESULT_ERROR")
        let (bROTLI_DECODER_RESULT_NEEDS_MORE_INPUT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT")
        let (bROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT")
        let (bROTLI_DECODER_RESULT_SUCCESS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_RESULT_SUCCESS")
        let (bROTLI_DECODER_SUCCESS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_SUCCESS")
        let (bROTLI_DEFAULT_MODE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DEFAULT_MODE")
        let (bROTLI_DEFAULT_QUALITY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DEFAULT_QUALITY")
        let (bROTLI_DEFAULT_WINDOW : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DEFAULT_WINDOW")
        let (bROTLI_ENCODE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_ENCODE")
        let (bROTLI_LARGE_MAX_WINDOW_BITS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_LARGE_MAX_WINDOW_BITS")
        let (bROTLI_MAX_INPUT_BLOCK_BITS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_MAX_INPUT_BLOCK_BITS")
        let (bROTLI_MAX_QUALITY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_MAX_QUALITY")
        let (bROTLI_MAX_WINDOW_BITS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_MAX_WINDOW_BITS")
        let (bROTLI_MIN_INPUT_BLOCK_BITS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_MIN_INPUT_BLOCK_BITS")
        let (bROTLI_MIN_QUALITY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_MIN_QUALITY")
        let (bROTLI_MIN_WINDOW_BITS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_MIN_WINDOW_BITS")
        let (bROTLI_MODE_FONT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_MODE_FONT")
        let (bROTLI_MODE_GENERIC : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_MODE_GENERIC")
        let (bROTLI_MODE_TEXT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_MODE_TEXT")
        let (bROTLI_OPERATION_EMIT_METADATA : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_OPERATION_EMIT_METADATA")
        let (bROTLI_OPERATION_FINISH : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_OPERATION_FINISH")
        let (bROTLI_OPERATION_FLUSH : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_OPERATION_FLUSH")
        let (bROTLI_OPERATION_PROCESS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_OPERATION_PROCESS")
        let (bROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING")
        let (bROTLI_PARAM_LARGE_WINDOW : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_PARAM_LARGE_WINDOW")
        let (bROTLI_PARAM_LGBLOCK : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_PARAM_LGBLOCK")
        let (bROTLI_PARAM_LGWIN : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_PARAM_LGWIN")
        let (bROTLI_PARAM_MODE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_PARAM_MODE")
        let (bROTLI_PARAM_NDIRECT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_PARAM_NDIRECT")
        let (bROTLI_PARAM_NPOSTFIX : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_PARAM_NPOSTFIX")
        let (bROTLI_PARAM_QUALITY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_PARAM_QUALITY")
        let (bROTLI_PARAM_SIZE_HINT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_PARAM_SIZE_HINT")
        let (dEFLATE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "DEFLATE")
        let (dEFLATERAW : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "DEFLATERAW")
        let (gUNZIP : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "GUNZIP")
        let (gZIP : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "GZIP")
        let (iNFLATE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "INFLATE")
        let (iNFLATERAW : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "INFLATERAW")
        let (uNZIP : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "UNZIP")
        let (z_NO_FLUSH : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_NO_FLUSH")
        let (z_PARTIAL_FLUSH : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_PARTIAL_FLUSH")
        let (z_SYNC_FLUSH : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_SYNC_FLUSH")
        let (z_FULL_FLUSH : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_FULL_FLUSH")
        let (z_FINISH : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_FINISH")
        let (z_BLOCK : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_BLOCK")
        let (z_TREES : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_TREES")
        let (z_OK : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_OK")
        let (z_STREAM_END : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_STREAM_END")
        let (z_NEED_DICT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_NEED_DICT")
        let (z_ERRNO : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_ERRNO")
        let (z_STREAM_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_STREAM_ERROR")
        let (z_DATA_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_DATA_ERROR")
        let (z_MEM_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_MEM_ERROR")
        let (z_BUF_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_BUF_ERROR")
        let (z_VERSION_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_VERSION_ERROR")
        let (z_NO_COMPRESSION : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_NO_COMPRESSION")
        let (z_BEST_SPEED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_BEST_SPEED")
        let (z_BEST_COMPRESSION : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_BEST_COMPRESSION")
        let (z_DEFAULT_COMPRESSION : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_DEFAULT_COMPRESSION")
        let (z_FILTERED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_FILTERED")
        let (z_HUFFMAN_ONLY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_HUFFMAN_ONLY")
        let (z_RLE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_RLE")
        let (z_FIXED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_FIXED")
        let (z_DEFAULT_STRATEGY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_DEFAULT_STRATEGY")
        let (z_DEFAULT_WINDOWBITS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_DEFAULT_WINDOWBITS")
        let (z_MIN_WINDOWBITS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_MIN_WINDOWBITS")
        let (z_MAX_WINDOWBITS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_MAX_WINDOWBITS")
        let (z_MIN_CHUNK : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_MIN_CHUNK")
        let (z_MAX_CHUNK : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_MAX_CHUNK")
        let (z_DEFAULT_CHUNK : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_DEFAULT_CHUNK")
        let (z_MIN_MEMLEVEL : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_MIN_MEMLEVEL")
        let (z_MAX_MEMLEVEL : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_MAX_MEMLEVEL")
        let (z_DEFAULT_MEMLEVEL : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_DEFAULT_MEMLEVEL")
        let (z_MIN_LEVEL : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_MIN_LEVEL")
        let (z_MAX_LEVEL : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_MAX_LEVEL")
        let (z_DEFAULT_LEVEL : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_DEFAULT_LEVEL")
        let (zLIB_VERNUM : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "ZLIB_VERNUM")
      end
    let (z_NO_FLUSH : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_NO_FLUSH")
    let (z_PARTIAL_FLUSH : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_PARTIAL_FLUSH")
    let (z_SYNC_FLUSH : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_SYNC_FLUSH")
    let (z_FULL_FLUSH : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_FULL_FLUSH")
    let (z_FINISH : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_FINISH")
    let (z_BLOCK : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_BLOCK")
    let (z_TREES : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_TREES")
    let (z_OK : int) = Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_OK")
    let (z_STREAM_END : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_STREAM_END")
    let (z_NEED_DICT : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_NEED_DICT")
    let (z_ERRNO : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_ERRNO")
    let (z_STREAM_ERROR : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_STREAM_ERROR")
    let (z_DATA_ERROR : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_DATA_ERROR")
    let (z_MEM_ERROR : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_MEM_ERROR")
    let (z_BUF_ERROR : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_BUF_ERROR")
    let (z_VERSION_ERROR : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_VERSION_ERROR")
    let (z_NO_COMPRESSION : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_NO_COMPRESSION")
    let (z_BEST_SPEED : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_BEST_SPEED")
    let (z_BEST_COMPRESSION : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_BEST_COMPRESSION")
    let (z_DEFAULT_COMPRESSION : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_DEFAULT_COMPRESSION")
    let (z_FILTERED : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_FILTERED")
    let (z_HUFFMAN_ONLY : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_HUFFMAN_ONLY")
    let (z_RLE : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_RLE")
    let (z_FIXED : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_FIXED")
    let (z_DEFAULT_STRATEGY : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_DEFAULT_STRATEGY")
    let (z_BINARY : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_BINARY")
    let (z_TEXT : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_TEXT")
    let (z_ASCII : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_ASCII")
    let (z_UNKNOWN : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_UNKNOWN")
    let (z_DEFLATED : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_DEFLATED")
  end
