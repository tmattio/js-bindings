[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get : t -> int -> bool or_number) =
      fun (x3 : t) ->
        fun (x4 : int) ->
          or_number_of_js Ojs.bool_of_js (Ojs.array_get (t_to_js x3) x4)
    let (set : t -> int -> bool or_number -> unit) =
      fun (x6 : t) ->
        fun (x7 : int) ->
          fun (x8 : bool or_number) ->
            Ojs.array_set (t_to_js x6) x7 (or_number_to_js Ojs.bool_to_js x8)
  end
module Zlib =
  struct
    open Node_stream
    module ZlibOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x11 : Ojs.t) -> x11
        and t_to_js : t -> Ojs.t = fun (x10 : Ojs.t) -> x10
        let (get_flush : t -> int) =
          fun (x12 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x12) "flush")
        let (set_flush : t -> int -> unit) =
          fun (x13 : t) ->
            fun (x14 : int) ->
              Ojs.set_prop_ascii (t_to_js x13) "flush" (Ojs.int_to_js x14)
        let (get_finishFlush : t -> int) =
          fun (x15 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x15) "finishFlush")
        let (set_finishFlush : t -> int -> unit) =
          fun (x16 : t) ->
            fun (x17 : int) ->
              Ojs.set_prop_ascii (t_to_js x16) "finishFlush"
                (Ojs.int_to_js x17)
        let (get_chunkSize : t -> int) =
          fun (x18 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x18) "chunkSize")
        let (set_chunkSize : t -> int -> unit) =
          fun (x19 : t) ->
            fun (x20 : int) ->
              Ojs.set_prop_ascii (t_to_js x19) "chunkSize"
                (Ojs.int_to_js x20)
        let (get_windowBits : t -> int) =
          fun (x21 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x21) "windowBits")
        let (set_windowBits : t -> int -> unit) =
          fun (x22 : t) ->
            fun (x23 : int) ->
              Ojs.set_prop_ascii (t_to_js x22) "windowBits"
                (Ojs.int_to_js x23)
        let (get_level : t -> int) =
          fun (x24 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x24) "level")
        let (set_level : t -> int -> unit) =
          fun (x25 : t) ->
            fun (x26 : int) ->
              Ojs.set_prop_ascii (t_to_js x25) "level" (Ojs.int_to_js x26)
        let (get_memLevel : t -> int) =
          fun (x27 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x27) "memLevel")
        let (set_memLevel : t -> int -> unit) =
          fun (x28 : t) ->
            fun (x29 : int) ->
              Ojs.set_prop_ascii (t_to_js x28) "memLevel" (Ojs.int_to_js x29)
        let (get_strategy : t -> int) =
          fun (x30 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x30) "strategy")
        let (set_strategy : t -> int -> unit) =
          fun (x31 : t) ->
            fun (x32 : int) ->
              Ojs.set_prop_ascii (t_to_js x31) "strategy" (Ojs.int_to_js x32)
        let (get_dictionary : t -> (ArrayBuffer.t, ArrayBufferView.t) union2)
          =
          fun (x33 : t) ->
            union2_of_js ArrayBuffer.t_of_js ArrayBufferView.t_of_js
              (Ojs.get_prop_ascii (t_to_js x33) "dictionary")
        let (set_dictionary :
          t -> (ArrayBuffer.t, ArrayBufferView.t) union2 -> unit) =
          fun (x36 : t) ->
            fun (x37 : (ArrayBuffer.t, ArrayBufferView.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x36) "dictionary"
                (union2_to_js ArrayBuffer.t_to_js ArrayBufferView.t_to_js x37)
        let (get_info : t -> bool) =
          fun (x40 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x40) "info")
        let (set_info : t -> bool -> unit) =
          fun (x41 : t) ->
            fun (x42 : bool) ->
              Ojs.set_prop_ascii (t_to_js x41) "info" (Ojs.bool_to_js x42)
        let (get_maxOutputLength : t -> int) =
          fun (x43 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x43) "maxOutputLength")
        let (set_maxOutputLength : t -> int -> unit) =
          fun (x44 : t) ->
            fun (x45 : int) ->
              Ojs.set_prop_ascii (t_to_js x44) "maxOutputLength"
                (Ojs.int_to_js x45)
      end
    module BrotliOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x47 : Ojs.t) -> x47
        and t_to_js : t -> Ojs.t = fun (x46 : Ojs.t) -> x46
        let (get_flush : t -> int) =
          fun (x48 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x48) "flush")
        let (set_flush : t -> int -> unit) =
          fun (x49 : t) ->
            fun (x50 : int) ->
              Ojs.set_prop_ascii (t_to_js x49) "flush" (Ojs.int_to_js x50)
        let (get_finishFlush : t -> int) =
          fun (x51 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x51) "finishFlush")
        let (set_finishFlush : t -> int -> unit) =
          fun (x52 : t) ->
            fun (x53 : int) ->
              Ojs.set_prop_ascii (t_to_js x52) "finishFlush"
                (Ojs.int_to_js x53)
        let (get_chunkSize : t -> int) =
          fun (x54 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x54) "chunkSize")
        let (set_chunkSize : t -> int -> unit) =
          fun (x55 : t) ->
            fun (x56 : int) ->
              Ojs.set_prop_ascii (t_to_js x55) "chunkSize"
                (Ojs.int_to_js x56)
        let (get_params : t -> AnonymousInterface0.t) =
          fun (x57 : t) ->
            AnonymousInterface0.t_of_js
              (Ojs.get_prop_ascii (t_to_js x57) "params")
        let (set_params : t -> AnonymousInterface0.t -> unit) =
          fun (x58 : t) ->
            fun (x59 : AnonymousInterface0.t) ->
              Ojs.set_prop_ascii (t_to_js x58) "params"
                (AnonymousInterface0.t_to_js x59)
        let (get_maxOutputLength : t -> int) =
          fun (x60 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x60) "maxOutputLength")
        let (set_maxOutputLength : t -> int -> unit) =
          fun (x61 : t) ->
            fun (x62 : int) ->
              Ojs.set_prop_ascii (t_to_js x61) "maxOutputLength"
                (Ojs.int_to_js x62)
      end
    module Zlib =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x64 : Ojs.t) -> x64
        and t_to_js : t -> Ojs.t = fun (x63 : Ojs.t) -> x63
        let (get_bytesRead : t -> int) =
          fun (x65 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x65) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x66 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x66) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x67 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x67) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x69 : t) ->
            fun (x70 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x69) "shell"
                (or_string_to_js Ojs.bool_to_js x70)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x75 : t) ->
            fun ?callback:(x72 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x76 = t_to_js x75 in
                   Ojs.call (Ojs.get_prop_ascii x76 "close") "apply"
                     [|x76;((let x73 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x72 with
                              | Some x74 ->
                                  ignore
                                    (Ojs.call x73 "push"
                                       [|(Ojs.fun_to_js 1 (fun _ -> x74 ()))|])
                              | None -> ());
                             x73))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x82 : t) ->
            fun ?kind:(x77 : int option) ->
              fun ?callback:(x78 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x83 = t_to_js x82 in
                     Ojs.call (Ojs.get_prop_ascii x83 "flush") "apply"
                       [|x83;((let x79 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x77 with
                                | Some x81 ->
                                    ignore
                                      (Ojs.call x79 "push"
                                         [|(Ojs.int_to_js x81)|])
                                | None -> ());
                               (match x78 with
                                | Some x80 ->
                                    ignore
                                      (Ojs.call x79 "push"
                                         [|(Ojs.fun_to_js 1 (fun _ -> x80 ()))|])
                                | None -> ());
                               x79))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x87 : t) ->
            fun ?callback:(x84 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x88 = t_to_js x87 in
                   Ojs.call (Ojs.get_prop_ascii x88 "flush") "apply"
                     [|x88;((let x85 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x84 with
                              | Some x86 ->
                                  ignore
                                    (Ojs.call x85 "push"
                                       [|(Ojs.fun_to_js 1 (fun _ -> x86 ()))|])
                              | None -> ());
                             x85))|])
      end
    module ZlibParams =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x90 : Ojs.t) -> x90
        and t_to_js : t -> Ojs.t = fun (x89 : Ojs.t) -> x89
        let (params :
          t -> level:int -> strategy:int -> callback:(unit -> unit) -> unit)
          =
          fun (x94 : t) ->
            fun ~level:(x91 : int) ->
              fun ~strategy:(x92 : int) ->
                fun ~callback:(x93 : unit -> unit) ->
                  ignore
                    (Ojs.call (t_to_js x94) "params"
                       [|(Ojs.int_to_js x91);(Ojs.int_to_js x92);(Ojs.fun_to_js
                                                                    1
                                                                    (
                                                                    fun _ ->
                                                                    x93 ()))|])
      end
    module ZlibReset =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x96 : Ojs.t) -> x96
        and t_to_js : t -> Ojs.t = fun (x95 : Ojs.t) -> x95
        let (reset : t -> unit) =
          fun (x97 : t) -> ignore (Ojs.call (t_to_js x97) "reset" [||])
      end
    module BrotliCompress =
      struct
        include struct include Stream.Transform end
        let (get_bytesRead : t -> int) =
          fun (x98 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x98) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x99 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x99) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x100 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x100) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x102 : t) ->
            fun (x103 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x102) "shell"
                (or_string_to_js Ojs.bool_to_js x103)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x108 : t) ->
            fun ?callback:(x105 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x109 = t_to_js x108 in
                   Ojs.call (Ojs.get_prop_ascii x109 "close") "apply"
                     [|x109;((let x106 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x105 with
                               | Some x107 ->
                                   ignore
                                     (Ojs.call x106 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x107 ()))|])
                               | None -> ());
                              x106))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x115 : t) ->
            fun ?kind:(x110 : int option) ->
              fun ?callback:(x111 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x116 = t_to_js x115 in
                     Ojs.call (Ojs.get_prop_ascii x116 "flush") "apply"
                       [|x116;((let x112 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x110 with
                                 | Some x114 ->
                                     ignore
                                       (Ojs.call x112 "push"
                                          [|(Ojs.int_to_js x114)|])
                                 | None -> ());
                                (match x111 with
                                 | Some x113 ->
                                     ignore
                                       (Ojs.call x112 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x113 ()))|])
                                 | None -> ());
                                x112))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x120 : t) ->
            fun ?callback:(x117 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x121 = t_to_js x120 in
                   Ojs.call (Ojs.get_prop_ascii x121 "flush") "apply"
                     [|x121;((let x118 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x117 with
                               | Some x119 ->
                                   ignore
                                     (Ojs.call x118 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x119 ()))|])
                               | None -> ());
                              x118))|])
      end
    module BrotliDecompress =
      struct
        include struct include Stream.Transform end
        let (get_bytesRead : t -> int) =
          fun (x122 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x122) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x123 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x123) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x124 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x124) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x126 : t) ->
            fun (x127 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x126) "shell"
                (or_string_to_js Ojs.bool_to_js x127)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x132 : t) ->
            fun ?callback:(x129 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x133 = t_to_js x132 in
                   Ojs.call (Ojs.get_prop_ascii x133 "close") "apply"
                     [|x133;((let x130 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x129 with
                               | Some x131 ->
                                   ignore
                                     (Ojs.call x130 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x131 ()))|])
                               | None -> ());
                              x130))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x139 : t) ->
            fun ?kind:(x134 : int option) ->
              fun ?callback:(x135 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x140 = t_to_js x139 in
                     Ojs.call (Ojs.get_prop_ascii x140 "flush") "apply"
                       [|x140;((let x136 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x134 with
                                 | Some x138 ->
                                     ignore
                                       (Ojs.call x136 "push"
                                          [|(Ojs.int_to_js x138)|])
                                 | None -> ());
                                (match x135 with
                                 | Some x137 ->
                                     ignore
                                       (Ojs.call x136 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x137 ()))|])
                                 | None -> ());
                                x136))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x144 : t) ->
            fun ?callback:(x141 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x145 = t_to_js x144 in
                   Ojs.call (Ojs.get_prop_ascii x145 "flush") "apply"
                     [|x145;((let x142 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x141 with
                               | Some x143 ->
                                   ignore
                                     (Ojs.call x142 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x143 ()))|])
                               | None -> ());
                              x142))|])
      end
    module Gzip =
      struct
        include struct include Stream.Transform end
        let (get_bytesRead : t -> int) =
          fun (x146 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x146) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x147 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x147) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x148 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x148) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x150 : t) ->
            fun (x151 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x150) "shell"
                (or_string_to_js Ojs.bool_to_js x151)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x156 : t) ->
            fun ?callback:(x153 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x157 = t_to_js x156 in
                   Ojs.call (Ojs.get_prop_ascii x157 "close") "apply"
                     [|x157;((let x154 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x153 with
                               | Some x155 ->
                                   ignore
                                     (Ojs.call x154 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x155 ()))|])
                               | None -> ());
                              x154))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x163 : t) ->
            fun ?kind:(x158 : int option) ->
              fun ?callback:(x159 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x164 = t_to_js x163 in
                     Ojs.call (Ojs.get_prop_ascii x164 "flush") "apply"
                       [|x164;((let x160 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x158 with
                                 | Some x162 ->
                                     ignore
                                       (Ojs.call x160 "push"
                                          [|(Ojs.int_to_js x162)|])
                                 | None -> ());
                                (match x159 with
                                 | Some x161 ->
                                     ignore
                                       (Ojs.call x160 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x161 ()))|])
                                 | None -> ());
                                x160))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x168 : t) ->
            fun ?callback:(x165 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x169 = t_to_js x168 in
                   Ojs.call (Ojs.get_prop_ascii x169 "flush") "apply"
                     [|x169;((let x166 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x165 with
                               | Some x167 ->
                                   ignore
                                     (Ojs.call x166 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x167 ()))|])
                               | None -> ());
                              x166))|])
      end
    module Gunzip =
      struct
        include struct include Stream.Transform end
        let (get_bytesRead : t -> int) =
          fun (x170 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x170) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x171 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x171) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x172 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x172) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x174 : t) ->
            fun (x175 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x174) "shell"
                (or_string_to_js Ojs.bool_to_js x175)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x180 : t) ->
            fun ?callback:(x177 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x181 = t_to_js x180 in
                   Ojs.call (Ojs.get_prop_ascii x181 "close") "apply"
                     [|x181;((let x178 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x177 with
                               | Some x179 ->
                                   ignore
                                     (Ojs.call x178 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x179 ()))|])
                               | None -> ());
                              x178))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x187 : t) ->
            fun ?kind:(x182 : int option) ->
              fun ?callback:(x183 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x188 = t_to_js x187 in
                     Ojs.call (Ojs.get_prop_ascii x188 "flush") "apply"
                       [|x188;((let x184 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x182 with
                                 | Some x186 ->
                                     ignore
                                       (Ojs.call x184 "push"
                                          [|(Ojs.int_to_js x186)|])
                                 | None -> ());
                                (match x183 with
                                 | Some x185 ->
                                     ignore
                                       (Ojs.call x184 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x185 ()))|])
                                 | None -> ());
                                x184))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x192 : t) ->
            fun ?callback:(x189 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x193 = t_to_js x192 in
                   Ojs.call (Ojs.get_prop_ascii x193 "flush") "apply"
                     [|x193;((let x190 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x189 with
                               | Some x191 ->
                                   ignore
                                     (Ojs.call x190 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x191 ()))|])
                               | None -> ());
                              x190))|])
      end
    module Deflate =
      struct
        include struct include Stream.Transform end
        let (get_bytesRead : t -> int) =
          fun (x194 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x194) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x195 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x195) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x196 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x196) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x198 : t) ->
            fun (x199 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x198) "shell"
                (or_string_to_js Ojs.bool_to_js x199)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x204 : t) ->
            fun ?callback:(x201 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x205 = t_to_js x204 in
                   Ojs.call (Ojs.get_prop_ascii x205 "close") "apply"
                     [|x205;((let x202 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x201 with
                               | Some x203 ->
                                   ignore
                                     (Ojs.call x202 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x203 ()))|])
                               | None -> ());
                              x202))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x211 : t) ->
            fun ?kind:(x206 : int option) ->
              fun ?callback:(x207 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x212 = t_to_js x211 in
                     Ojs.call (Ojs.get_prop_ascii x212 "flush") "apply"
                       [|x212;((let x208 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x206 with
                                 | Some x210 ->
                                     ignore
                                       (Ojs.call x208 "push"
                                          [|(Ojs.int_to_js x210)|])
                                 | None -> ());
                                (match x207 with
                                 | Some x209 ->
                                     ignore
                                       (Ojs.call x208 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x209 ()))|])
                                 | None -> ());
                                x208))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x216 : t) ->
            fun ?callback:(x213 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x217 = t_to_js x216 in
                   Ojs.call (Ojs.get_prop_ascii x217 "flush") "apply"
                     [|x217;((let x214 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x213 with
                               | Some x215 ->
                                   ignore
                                     (Ojs.call x214 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x215 ()))|])
                               | None -> ());
                              x214))|])
        let (reset : t -> unit) =
          fun (x218 : t) -> ignore (Ojs.call (t_to_js x218) "reset" [||])
        let (params :
          t -> level:int -> strategy:int -> callback:(unit -> unit) -> unit)
          =
          fun (x222 : t) ->
            fun ~level:(x219 : int) ->
              fun ~strategy:(x220 : int) ->
                fun ~callback:(x221 : unit -> unit) ->
                  ignore
                    (Ojs.call (t_to_js x222) "params"
                       [|(Ojs.int_to_js x219);(Ojs.int_to_js x220);(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x221 ()))|])
      end
    module Inflate =
      struct
        include struct include Stream.Transform end
        let (get_bytesRead : t -> int) =
          fun (x223 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x223) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x224 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x224) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x225 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x225) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x227 : t) ->
            fun (x228 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x227) "shell"
                (or_string_to_js Ojs.bool_to_js x228)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x233 : t) ->
            fun ?callback:(x230 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x234 = t_to_js x233 in
                   Ojs.call (Ojs.get_prop_ascii x234 "close") "apply"
                     [|x234;((let x231 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x230 with
                               | Some x232 ->
                                   ignore
                                     (Ojs.call x231 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x232 ()))|])
                               | None -> ());
                              x231))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x240 : t) ->
            fun ?kind:(x235 : int option) ->
              fun ?callback:(x236 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x241 = t_to_js x240 in
                     Ojs.call (Ojs.get_prop_ascii x241 "flush") "apply"
                       [|x241;((let x237 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x235 with
                                 | Some x239 ->
                                     ignore
                                       (Ojs.call x237 "push"
                                          [|(Ojs.int_to_js x239)|])
                                 | None -> ());
                                (match x236 with
                                 | Some x238 ->
                                     ignore
                                       (Ojs.call x237 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x238 ()))|])
                                 | None -> ());
                                x237))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x245 : t) ->
            fun ?callback:(x242 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x246 = t_to_js x245 in
                   Ojs.call (Ojs.get_prop_ascii x246 "flush") "apply"
                     [|x246;((let x243 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x242 with
                               | Some x244 ->
                                   ignore
                                     (Ojs.call x243 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x244 ()))|])
                               | None -> ());
                              x243))|])
        let (reset : t -> unit) =
          fun (x247 : t) -> ignore (Ojs.call (t_to_js x247) "reset" [||])
      end
    module DeflateRaw =
      struct
        include struct include Stream.Transform end
        let (get_bytesRead : t -> int) =
          fun (x248 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x248) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x249 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x249) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x250 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x250) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x252 : t) ->
            fun (x253 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x252) "shell"
                (or_string_to_js Ojs.bool_to_js x253)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x258 : t) ->
            fun ?callback:(x255 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x259 = t_to_js x258 in
                   Ojs.call (Ojs.get_prop_ascii x259 "close") "apply"
                     [|x259;((let x256 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x255 with
                               | Some x257 ->
                                   ignore
                                     (Ojs.call x256 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x257 ()))|])
                               | None -> ());
                              x256))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x265 : t) ->
            fun ?kind:(x260 : int option) ->
              fun ?callback:(x261 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x266 = t_to_js x265 in
                     Ojs.call (Ojs.get_prop_ascii x266 "flush") "apply"
                       [|x266;((let x262 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x260 with
                                 | Some x264 ->
                                     ignore
                                       (Ojs.call x262 "push"
                                          [|(Ojs.int_to_js x264)|])
                                 | None -> ());
                                (match x261 with
                                 | Some x263 ->
                                     ignore
                                       (Ojs.call x262 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x263 ()))|])
                                 | None -> ());
                                x262))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x270 : t) ->
            fun ?callback:(x267 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x271 = t_to_js x270 in
                   Ojs.call (Ojs.get_prop_ascii x271 "flush") "apply"
                     [|x271;((let x268 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x267 with
                               | Some x269 ->
                                   ignore
                                     (Ojs.call x268 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x269 ()))|])
                               | None -> ());
                              x268))|])
        let (reset : t -> unit) =
          fun (x272 : t) -> ignore (Ojs.call (t_to_js x272) "reset" [||])
        let (params :
          t -> level:int -> strategy:int -> callback:(unit -> unit) -> unit)
          =
          fun (x276 : t) ->
            fun ~level:(x273 : int) ->
              fun ~strategy:(x274 : int) ->
                fun ~callback:(x275 : unit -> unit) ->
                  ignore
                    (Ojs.call (t_to_js x276) "params"
                       [|(Ojs.int_to_js x273);(Ojs.int_to_js x274);(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x275 ()))|])
      end
    module InflateRaw =
      struct
        include struct include Stream.Transform end
        let (get_bytesRead : t -> int) =
          fun (x277 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x277) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x278 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x278) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x279 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x279) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x281 : t) ->
            fun (x282 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x281) "shell"
                (or_string_to_js Ojs.bool_to_js x282)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x287 : t) ->
            fun ?callback:(x284 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x288 = t_to_js x287 in
                   Ojs.call (Ojs.get_prop_ascii x288 "close") "apply"
                     [|x288;((let x285 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x284 with
                               | Some x286 ->
                                   ignore
                                     (Ojs.call x285 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x286 ()))|])
                               | None -> ());
                              x285))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x294 : t) ->
            fun ?kind:(x289 : int option) ->
              fun ?callback:(x290 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x295 = t_to_js x294 in
                     Ojs.call (Ojs.get_prop_ascii x295 "flush") "apply"
                       [|x295;((let x291 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x289 with
                                 | Some x293 ->
                                     ignore
                                       (Ojs.call x291 "push"
                                          [|(Ojs.int_to_js x293)|])
                                 | None -> ());
                                (match x290 with
                                 | Some x292 ->
                                     ignore
                                       (Ojs.call x291 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x292 ()))|])
                                 | None -> ());
                                x291))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x299 : t) ->
            fun ?callback:(x296 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x300 = t_to_js x299 in
                   Ojs.call (Ojs.get_prop_ascii x300 "flush") "apply"
                     [|x300;((let x297 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x296 with
                               | Some x298 ->
                                   ignore
                                     (Ojs.call x297 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x298 ()))|])
                               | None -> ());
                              x297))|])
        let (reset : t -> unit) =
          fun (x301 : t) -> ignore (Ojs.call (t_to_js x301) "reset" [||])
      end
    module Unzip =
      struct
        include struct include Stream.Transform end
        let (get_bytesRead : t -> int) =
          fun (x302 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x302) "bytesRead")
        let (get_bytesWritten : t -> int) =
          fun (x303 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x303) "bytesWritten")
        let (get_shell : t -> bool or_string) =
          fun (x304 : t) ->
            or_string_of_js Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x304) "shell")
        let (set_shell : t -> bool or_string -> unit) =
          fun (x306 : t) ->
            fun (x307 : bool or_string) ->
              Ojs.set_prop_ascii (t_to_js x306) "shell"
                (or_string_to_js Ojs.bool_to_js x307)
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x312 : t) ->
            fun ?callback:(x309 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x313 = t_to_js x312 in
                   Ojs.call (Ojs.get_prop_ascii x313 "close") "apply"
                     [|x313;((let x310 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x309 with
                               | Some x311 ->
                                   ignore
                                     (Ojs.call x310 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x311 ()))|])
                               | None -> ());
                              x310))|])
        let (flush :
          t -> ?kind:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x319 : t) ->
            fun ?kind:(x314 : int option) ->
              fun ?callback:(x315 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x320 = t_to_js x319 in
                     Ojs.call (Ojs.get_prop_ascii x320 "flush") "apply"
                       [|x320;((let x316 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x314 with
                                 | Some x318 ->
                                     ignore
                                       (Ojs.call x316 "push"
                                          [|(Ojs.int_to_js x318)|])
                                 | None -> ());
                                (match x315 with
                                 | Some x317 ->
                                     ignore
                                       (Ojs.call x316 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x317 ()))|])
                                 | None -> ());
                                x316))|])
        let (flush' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x324 : t) ->
            fun ?callback:(x321 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x325 = t_to_js x324 in
                   Ojs.call (Ojs.get_prop_ascii x325 "flush") "apply"
                     [|x325;((let x322 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x321 with
                               | Some x323 ->
                                   ignore
                                     (Ojs.call x322 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x323 ()))|])
                               | None -> ());
                              x322))|])
      end
    let (createBrotliCompress :
      ?options:zlib_BrotliOptions -> unit -> zlib_BrotliCompress) =
      fun ?options:(x326 : zlib_BrotliOptions option) ->
        fun () ->
          zlib_BrotliCompress_of_js
            (let x329 = Import.zlib in
             Ojs.call (Ojs.get_prop_ascii x329 "createBrotliCompress")
               "apply"
               [|x329;((let x327 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x326 with
                         | Some x328 ->
                             ignore
                               (Ojs.call x327 "push"
                                  [|(zlib_BrotliOptions_to_js x328)|])
                         | None -> ());
                        x327))|])
    let (createBrotliDecompress :
      ?options:zlib_BrotliOptions -> unit -> zlib_BrotliDecompress) =
      fun ?options:(x330 : zlib_BrotliOptions option) ->
        fun () ->
          zlib_BrotliDecompress_of_js
            (let x333 = Import.zlib in
             Ojs.call (Ojs.get_prop_ascii x333 "createBrotliDecompress")
               "apply"
               [|x333;((let x331 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x330 with
                         | Some x332 ->
                             ignore
                               (Ojs.call x331 "push"
                                  [|(zlib_BrotliOptions_to_js x332)|])
                         | None -> ());
                        x331))|])
    let (createGzip : ?options:zlib_ZlibOptions -> unit -> zlib_Gzip) =
      fun ?options:(x334 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_Gzip_of_js
            (let x337 = Import.zlib in
             Ojs.call (Ojs.get_prop_ascii x337 "createGzip") "apply"
               [|x337;((let x335 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x334 with
                         | Some x336 ->
                             ignore
                               (Ojs.call x335 "push"
                                  [|(zlib_ZlibOptions_to_js x336)|])
                         | None -> ());
                        x335))|])
    let (createGunzip : ?options:zlib_ZlibOptions -> unit -> zlib_Gunzip) =
      fun ?options:(x338 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_Gunzip_of_js
            (let x341 = Import.zlib in
             Ojs.call (Ojs.get_prop_ascii x341 "createGunzip") "apply"
               [|x341;((let x339 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x338 with
                         | Some x340 ->
                             ignore
                               (Ojs.call x339 "push"
                                  [|(zlib_ZlibOptions_to_js x340)|])
                         | None -> ());
                        x339))|])
    let (createDeflate : ?options:zlib_ZlibOptions -> unit -> zlib_Deflate) =
      fun ?options:(x342 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_Deflate_of_js
            (let x345 = Import.zlib in
             Ojs.call (Ojs.get_prop_ascii x345 "createDeflate") "apply"
               [|x345;((let x343 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x342 with
                         | Some x344 ->
                             ignore
                               (Ojs.call x343 "push"
                                  [|(zlib_ZlibOptions_to_js x344)|])
                         | None -> ());
                        x343))|])
    let (createInflate : ?options:zlib_ZlibOptions -> unit -> zlib_Inflate) =
      fun ?options:(x346 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_Inflate_of_js
            (let x349 = Import.zlib in
             Ojs.call (Ojs.get_prop_ascii x349 "createInflate") "apply"
               [|x349;((let x347 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x346 with
                         | Some x348 ->
                             ignore
                               (Ojs.call x347 "push"
                                  [|(zlib_ZlibOptions_to_js x348)|])
                         | None -> ());
                        x347))|])
    let (createDeflateRaw :
      ?options:zlib_ZlibOptions -> unit -> zlib_DeflateRaw) =
      fun ?options:(x350 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_DeflateRaw_of_js
            (let x353 = Import.zlib in
             Ojs.call (Ojs.get_prop_ascii x353 "createDeflateRaw") "apply"
               [|x353;((let x351 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x350 with
                         | Some x352 ->
                             ignore
                               (Ojs.call x351 "push"
                                  [|(zlib_ZlibOptions_to_js x352)|])
                         | None -> ());
                        x351))|])
    let (createInflateRaw :
      ?options:zlib_ZlibOptions -> unit -> zlib_InflateRaw) =
      fun ?options:(x354 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_InflateRaw_of_js
            (let x357 = Import.zlib in
             Ojs.call (Ojs.get_prop_ascii x357 "createInflateRaw") "apply"
               [|x357;((let x355 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x354 with
                         | Some x356 ->
                             ignore
                               (Ojs.call x355 "push"
                                  [|(zlib_ZlibOptions_to_js x356)|])
                         | None -> ());
                        x355))|])
    let (createUnzip : ?options:zlib_ZlibOptions -> unit -> zlib_Unzip) =
      fun ?options:(x358 : zlib_ZlibOptions option) ->
        fun () ->
          zlib_Unzip_of_js
            (let x361 = Import.zlib in
             Ojs.call (Ojs.get_prop_ascii x361 "createUnzip") "apply"
               [|x361;((let x359 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x358 with
                         | Some x360 ->
                             ignore
                               (Ojs.call x359 "push"
                                  [|(zlib_ZlibOptions_to_js x360)|])
                         | None -> ());
                        x359))|])
    module InputType =
      struct
        type t = (ArrayBuffer.t, ArrayBufferView.t) union2 or_string
        let rec t_of_js : Ojs.t -> t =
          fun (x366 : Ojs.t) ->
            or_string_of_js
              (fun (x367 : Ojs.t) ->
                 union2_of_js ArrayBuffer.t_of_js ArrayBufferView.t_of_js
                   x367) x366
        and t_to_js : t -> Ojs.t =
          fun (x362 : (ArrayBuffer.t, ArrayBufferView.t) union2 or_string) ->
            or_string_to_js
              (fun (x363 : (ArrayBuffer.t, ArrayBufferView.t) union2) ->
                 union2_to_js ArrayBuffer.t_to_js ArrayBufferView.t_to_js
                   x363) x362
      end
    module CompressCallback =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x371 : Ojs.t) -> x371
        and t_to_js : t -> Ojs.t = fun (x370 : Ojs.t) -> x370
        let (apply : t -> error:Error.t or_null -> result:Buffer.t -> unit) =
          fun (x375 : t) ->
            fun ~error:(x372 : Error.t or_null) ->
              fun ~result:(x374 : Buffer.t) ->
                ignore
                  (Ojs.apply (t_to_js x375)
                     [|(or_null_to_js Error.t_to_js x372);(Buffer.t_to_js
                                                             x374)|])
      end
    let (brotliCompress :
      buf:zlib_InputType ->
        options:zlib_BrotliOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x376 : zlib_InputType) ->
        fun ~options:(x377 : zlib_BrotliOptions) ->
          fun ~callback:(x378 : zlib_CompressCallback) ->
            ignore
              (Ojs.call Import.zlib "brotliCompress"
                 [|(zlib_InputType_to_js x376);(zlib_BrotliOptions_to_js x377);(
                   zlib_CompressCallback_to_js x378)|])
    let (brotliCompress__promisify__ :
      buffer:zlib_InputType ->
        ?options:zlib_BrotliOptions -> unit -> Buffer.t Promise.t)
      =
      fun ~buffer:(x379 : zlib_InputType) ->
        fun ?options:(x380 : zlib_BrotliOptions option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x383 = Ojs.get_prop_ascii Import.zlib "brotliCompress" in
               Ojs.call (Ojs.get_prop_ascii x383 "__promisify__") "apply"
                 [|x383;((let x381 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x381 "push"
                               [|(zlib_InputType_to_js x379)|]);
                          (match x380 with
                           | Some x382 ->
                               ignore
                                 (Ojs.call x381 "push"
                                    [|(zlib_BrotliOptions_to_js x382)|])
                           | None -> ());
                          x381))|])
    let (brotliCompressSync :
      buf:zlib_InputType -> ?options:zlib_BrotliOptions -> unit -> Buffer.t)
      =
      fun ~buf:(x385 : zlib_InputType) ->
        fun ?options:(x386 : zlib_BrotliOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x389 = Import.zlib in
               Ojs.call (Ojs.get_prop_ascii x389 "brotliCompressSync")
                 "apply"
                 [|x389;((let x387 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x387 "push"
                               [|(zlib_InputType_to_js x385)|]);
                          (match x386 with
                           | Some x388 ->
                               ignore
                                 (Ojs.call x387 "push"
                                    [|(zlib_BrotliOptions_to_js x388)|])
                           | None -> ());
                          x387))|])
    let (brotliDecompress :
      buf:zlib_InputType ->
        options:zlib_BrotliOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x390 : zlib_InputType) ->
        fun ~options:(x391 : zlib_BrotliOptions) ->
          fun ~callback:(x392 : zlib_CompressCallback) ->
            ignore
              (Ojs.call Import.zlib "brotliDecompress"
                 [|(zlib_InputType_to_js x390);(zlib_BrotliOptions_to_js x391);(
                   zlib_CompressCallback_to_js x392)|])
    let (brotliDecompress :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x393 : zlib_InputType) ->
        fun ~callback:(x394 : zlib_CompressCallback) ->
          ignore
            (Ojs.call Import.zlib "brotliDecompress"
               [|(zlib_InputType_to_js x393);(zlib_CompressCallback_to_js
                                                x394)|])
    let (brotliDecompress__promisify__ :
      buffer:zlib_InputType ->
        ?options:zlib_BrotliOptions -> unit -> Buffer.t Promise.t)
      =
      fun ~buffer:(x395 : zlib_InputType) ->
        fun ?options:(x396 : zlib_BrotliOptions option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x399 = Ojs.get_prop_ascii Import.zlib "brotliDecompress" in
               Ojs.call (Ojs.get_prop_ascii x399 "__promisify__") "apply"
                 [|x399;((let x397 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x397 "push"
                               [|(zlib_InputType_to_js x395)|]);
                          (match x396 with
                           | Some x398 ->
                               ignore
                                 (Ojs.call x397 "push"
                                    [|(zlib_BrotliOptions_to_js x398)|])
                           | None -> ());
                          x397))|])
    let (brotliDecompressSync :
      buf:zlib_InputType -> ?options:zlib_BrotliOptions -> unit -> Buffer.t)
      =
      fun ~buf:(x401 : zlib_InputType) ->
        fun ?options:(x402 : zlib_BrotliOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x405 = Import.zlib in
               Ojs.call (Ojs.get_prop_ascii x405 "brotliDecompressSync")
                 "apply"
                 [|x405;((let x403 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x403 "push"
                               [|(zlib_InputType_to_js x401)|]);
                          (match x402 with
                           | Some x404 ->
                               ignore
                                 (Ojs.call x403 "push"
                                    [|(zlib_BrotliOptions_to_js x404)|])
                           | None -> ());
                          x403))|])
    let (deflate :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x406 : zlib_InputType) ->
        fun ~callback:(x407 : zlib_CompressCallback) ->
          ignore
            (Ojs.call Import.zlib "deflate"
               [|(zlib_InputType_to_js x406);(zlib_CompressCallback_to_js
                                                x407)|])
    let (deflate :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x408 : zlib_InputType) ->
        fun ~options:(x409 : zlib_ZlibOptions) ->
          fun ~callback:(x410 : zlib_CompressCallback) ->
            ignore
              (Ojs.call Import.zlib "deflate"
                 [|(zlib_InputType_to_js x408);(zlib_ZlibOptions_to_js x409);(
                   zlib_CompressCallback_to_js x410)|])
    let (deflate__promisify__ :
      buffer:zlib_InputType ->
        ?options:zlib_ZlibOptions -> unit -> Buffer.t Promise.t)
      =
      fun ~buffer:(x411 : zlib_InputType) ->
        fun ?options:(x412 : zlib_ZlibOptions option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x415 = Ojs.get_prop_ascii Import.zlib "deflate" in
               Ojs.call (Ojs.get_prop_ascii x415 "__promisify__") "apply"
                 [|x415;((let x413 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x413 "push"
                               [|(zlib_InputType_to_js x411)|]);
                          (match x412 with
                           | Some x414 ->
                               ignore
                                 (Ojs.call x413 "push"
                                    [|(zlib_ZlibOptions_to_js x414)|])
                           | None -> ());
                          x413))|])
    let (deflateSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t) =
      fun ~buf:(x417 : zlib_InputType) ->
        fun ?options:(x418 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x421 = Import.zlib in
               Ojs.call (Ojs.get_prop_ascii x421 "deflateSync") "apply"
                 [|x421;((let x419 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x419 "push"
                               [|(zlib_InputType_to_js x417)|]);
                          (match x418 with
                           | Some x420 ->
                               ignore
                                 (Ojs.call x419 "push"
                                    [|(zlib_ZlibOptions_to_js x420)|])
                           | None -> ());
                          x419))|])
    let (deflateRaw :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x422 : zlib_InputType) ->
        fun ~callback:(x423 : zlib_CompressCallback) ->
          ignore
            (Ojs.call Import.zlib "deflateRaw"
               [|(zlib_InputType_to_js x422);(zlib_CompressCallback_to_js
                                                x423)|])
    let (deflateRaw :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x424 : zlib_InputType) ->
        fun ~options:(x425 : zlib_ZlibOptions) ->
          fun ~callback:(x426 : zlib_CompressCallback) ->
            ignore
              (Ojs.call Import.zlib "deflateRaw"
                 [|(zlib_InputType_to_js x424);(zlib_ZlibOptions_to_js x425);(
                   zlib_CompressCallback_to_js x426)|])
    let (deflateRaw__promisify__ :
      buffer:zlib_InputType ->
        ?options:zlib_ZlibOptions -> unit -> Buffer.t Promise.t)
      =
      fun ~buffer:(x427 : zlib_InputType) ->
        fun ?options:(x428 : zlib_ZlibOptions option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x431 = Ojs.get_prop_ascii Import.zlib "deflateRaw" in
               Ojs.call (Ojs.get_prop_ascii x431 "__promisify__") "apply"
                 [|x431;((let x429 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x429 "push"
                               [|(zlib_InputType_to_js x427)|]);
                          (match x428 with
                           | Some x430 ->
                               ignore
                                 (Ojs.call x429 "push"
                                    [|(zlib_ZlibOptions_to_js x430)|])
                           | None -> ());
                          x429))|])
    let (deflateRawSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t) =
      fun ~buf:(x433 : zlib_InputType) ->
        fun ?options:(x434 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x437 = Import.zlib in
               Ojs.call (Ojs.get_prop_ascii x437 "deflateRawSync") "apply"
                 [|x437;((let x435 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x435 "push"
                               [|(zlib_InputType_to_js x433)|]);
                          (match x434 with
                           | Some x436 ->
                               ignore
                                 (Ojs.call x435 "push"
                                    [|(zlib_ZlibOptions_to_js x436)|])
                           | None -> ());
                          x435))|])
    let (gzip : buf:zlib_InputType -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x438 : zlib_InputType) ->
        fun ~callback:(x439 : zlib_CompressCallback) ->
          ignore
            (Ojs.call Import.zlib "gzip"
               [|(zlib_InputType_to_js x438);(zlib_CompressCallback_to_js
                                                x439)|])
    let (gzip :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x440 : zlib_InputType) ->
        fun ~options:(x441 : zlib_ZlibOptions) ->
          fun ~callback:(x442 : zlib_CompressCallback) ->
            ignore
              (Ojs.call Import.zlib "gzip"
                 [|(zlib_InputType_to_js x440);(zlib_ZlibOptions_to_js x441);(
                   zlib_CompressCallback_to_js x442)|])
    let (gzip__promisify__ :
      buffer:zlib_InputType ->
        ?options:zlib_ZlibOptions -> unit -> Buffer.t Promise.t)
      =
      fun ~buffer:(x443 : zlib_InputType) ->
        fun ?options:(x444 : zlib_ZlibOptions option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x447 = Ojs.get_prop_ascii Import.zlib "gzip" in
               Ojs.call (Ojs.get_prop_ascii x447 "__promisify__") "apply"
                 [|x447;((let x445 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x445 "push"
                               [|(zlib_InputType_to_js x443)|]);
                          (match x444 with
                           | Some x446 ->
                               ignore
                                 (Ojs.call x445 "push"
                                    [|(zlib_ZlibOptions_to_js x446)|])
                           | None -> ());
                          x445))|])
    let (gzipSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t) =
      fun ~buf:(x449 : zlib_InputType) ->
        fun ?options:(x450 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x453 = Import.zlib in
               Ojs.call (Ojs.get_prop_ascii x453 "gzipSync") "apply"
                 [|x453;((let x451 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x451 "push"
                               [|(zlib_InputType_to_js x449)|]);
                          (match x450 with
                           | Some x452 ->
                               ignore
                                 (Ojs.call x451 "push"
                                    [|(zlib_ZlibOptions_to_js x452)|])
                           | None -> ());
                          x451))|])
    let (gunzip :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x454 : zlib_InputType) ->
        fun ~callback:(x455 : zlib_CompressCallback) ->
          ignore
            (Ojs.call Import.zlib "gunzip"
               [|(zlib_InputType_to_js x454);(zlib_CompressCallback_to_js
                                                x455)|])
    let (gunzip :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x456 : zlib_InputType) ->
        fun ~options:(x457 : zlib_ZlibOptions) ->
          fun ~callback:(x458 : zlib_CompressCallback) ->
            ignore
              (Ojs.call Import.zlib "gunzip"
                 [|(zlib_InputType_to_js x456);(zlib_ZlibOptions_to_js x457);(
                   zlib_CompressCallback_to_js x458)|])
    let (gunzip__promisify__ :
      buffer:zlib_InputType ->
        ?options:zlib_ZlibOptions -> unit -> Buffer.t Promise.t)
      =
      fun ~buffer:(x459 : zlib_InputType) ->
        fun ?options:(x460 : zlib_ZlibOptions option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x463 = Ojs.get_prop_ascii Import.zlib "gunzip" in
               Ojs.call (Ojs.get_prop_ascii x463 "__promisify__") "apply"
                 [|x463;((let x461 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x461 "push"
                               [|(zlib_InputType_to_js x459)|]);
                          (match x460 with
                           | Some x462 ->
                               ignore
                                 (Ojs.call x461 "push"
                                    [|(zlib_ZlibOptions_to_js x462)|])
                           | None -> ());
                          x461))|])
    let (gunzipSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t) =
      fun ~buf:(x465 : zlib_InputType) ->
        fun ?options:(x466 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x469 = Import.zlib in
               Ojs.call (Ojs.get_prop_ascii x469 "gunzipSync") "apply"
                 [|x469;((let x467 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x467 "push"
                               [|(zlib_InputType_to_js x465)|]);
                          (match x466 with
                           | Some x468 ->
                               ignore
                                 (Ojs.call x467 "push"
                                    [|(zlib_ZlibOptions_to_js x468)|])
                           | None -> ());
                          x467))|])
    let (inflate :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x470 : zlib_InputType) ->
        fun ~callback:(x471 : zlib_CompressCallback) ->
          ignore
            (Ojs.call Import.zlib "inflate"
               [|(zlib_InputType_to_js x470);(zlib_CompressCallback_to_js
                                                x471)|])
    let (inflate :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x472 : zlib_InputType) ->
        fun ~options:(x473 : zlib_ZlibOptions) ->
          fun ~callback:(x474 : zlib_CompressCallback) ->
            ignore
              (Ojs.call Import.zlib "inflate"
                 [|(zlib_InputType_to_js x472);(zlib_ZlibOptions_to_js x473);(
                   zlib_CompressCallback_to_js x474)|])
    let (inflate__promisify__ :
      buffer:zlib_InputType ->
        ?options:zlib_ZlibOptions -> unit -> Buffer.t Promise.t)
      =
      fun ~buffer:(x475 : zlib_InputType) ->
        fun ?options:(x476 : zlib_ZlibOptions option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x479 = Ojs.get_prop_ascii Import.zlib "inflate" in
               Ojs.call (Ojs.get_prop_ascii x479 "__promisify__") "apply"
                 [|x479;((let x477 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x477 "push"
                               [|(zlib_InputType_to_js x475)|]);
                          (match x476 with
                           | Some x478 ->
                               ignore
                                 (Ojs.call x477 "push"
                                    [|(zlib_ZlibOptions_to_js x478)|])
                           | None -> ());
                          x477))|])
    let (inflateSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t) =
      fun ~buf:(x481 : zlib_InputType) ->
        fun ?options:(x482 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x485 = Import.zlib in
               Ojs.call (Ojs.get_prop_ascii x485 "inflateSync") "apply"
                 [|x485;((let x483 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x483 "push"
                               [|(zlib_InputType_to_js x481)|]);
                          (match x482 with
                           | Some x484 ->
                               ignore
                                 (Ojs.call x483 "push"
                                    [|(zlib_ZlibOptions_to_js x484)|])
                           | None -> ());
                          x483))|])
    let (inflateRaw :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x486 : zlib_InputType) ->
        fun ~callback:(x487 : zlib_CompressCallback) ->
          ignore
            (Ojs.call Import.zlib "inflateRaw"
               [|(zlib_InputType_to_js x486);(zlib_CompressCallback_to_js
                                                x487)|])
    let (inflateRaw :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x488 : zlib_InputType) ->
        fun ~options:(x489 : zlib_ZlibOptions) ->
          fun ~callback:(x490 : zlib_CompressCallback) ->
            ignore
              (Ojs.call Import.zlib "inflateRaw"
                 [|(zlib_InputType_to_js x488);(zlib_ZlibOptions_to_js x489);(
                   zlib_CompressCallback_to_js x490)|])
    let (inflateRaw__promisify__ :
      buffer:zlib_InputType ->
        ?options:zlib_ZlibOptions -> unit -> Buffer.t Promise.t)
      =
      fun ~buffer:(x491 : zlib_InputType) ->
        fun ?options:(x492 : zlib_ZlibOptions option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x495 = Ojs.get_prop_ascii Import.zlib "inflateRaw" in
               Ojs.call (Ojs.get_prop_ascii x495 "__promisify__") "apply"
                 [|x495;((let x493 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x493 "push"
                               [|(zlib_InputType_to_js x491)|]);
                          (match x492 with
                           | Some x494 ->
                               ignore
                                 (Ojs.call x493 "push"
                                    [|(zlib_ZlibOptions_to_js x494)|])
                           | None -> ());
                          x493))|])
    let (inflateRawSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t) =
      fun ~buf:(x497 : zlib_InputType) ->
        fun ?options:(x498 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x501 = Import.zlib in
               Ojs.call (Ojs.get_prop_ascii x501 "inflateRawSync") "apply"
                 [|x501;((let x499 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x499 "push"
                               [|(zlib_InputType_to_js x497)|]);
                          (match x498 with
                           | Some x500 ->
                               ignore
                                 (Ojs.call x499 "push"
                                    [|(zlib_ZlibOptions_to_js x500)|])
                           | None -> ());
                          x499))|])
    let (unzip :
      buf:zlib_InputType -> callback:zlib_CompressCallback -> unit) =
      fun ~buf:(x502 : zlib_InputType) ->
        fun ~callback:(x503 : zlib_CompressCallback) ->
          ignore
            (Ojs.call Import.zlib "unzip"
               [|(zlib_InputType_to_js x502);(zlib_CompressCallback_to_js
                                                x503)|])
    let (unzip :
      buf:zlib_InputType ->
        options:zlib_ZlibOptions -> callback:zlib_CompressCallback -> unit)
      =
      fun ~buf:(x504 : zlib_InputType) ->
        fun ~options:(x505 : zlib_ZlibOptions) ->
          fun ~callback:(x506 : zlib_CompressCallback) ->
            ignore
              (Ojs.call Import.zlib "unzip"
                 [|(zlib_InputType_to_js x504);(zlib_ZlibOptions_to_js x505);(
                   zlib_CompressCallback_to_js x506)|])
    let (unzip__promisify__ :
      buffer:zlib_InputType ->
        ?options:zlib_ZlibOptions -> unit -> Buffer.t Promise.t)
      =
      fun ~buffer:(x507 : zlib_InputType) ->
        fun ?options:(x508 : zlib_ZlibOptions option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x511 = Ojs.get_prop_ascii Import.zlib "unzip" in
               Ojs.call (Ojs.get_prop_ascii x511 "__promisify__") "apply"
                 [|x511;((let x509 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x509 "push"
                               [|(zlib_InputType_to_js x507)|]);
                          (match x508 with
                           | Some x510 ->
                               ignore
                                 (Ojs.call x509 "push"
                                    [|(zlib_ZlibOptions_to_js x510)|])
                           | None -> ());
                          x509))|])
    let (unzipSync :
      buf:zlib_InputType -> ?options:zlib_ZlibOptions -> unit -> Buffer.t) =
      fun ~buf:(x513 : zlib_InputType) ->
        fun ?options:(x514 : zlib_ZlibOptions option) ->
          fun () ->
            Buffer.t_of_js
              (let x517 = Import.zlib in
               Ojs.call (Ojs.get_prop_ascii x517 "unzipSync") "apply"
                 [|x517;((let x515 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x515 "push"
                               [|(zlib_InputType_to_js x513)|]);
                          (match x514 with
                           | Some x516 ->
                               ignore
                                 (Ojs.call x515 "push"
                                    [|(zlib_ZlibOptions_to_js x516)|])
                           | None -> ());
                          x515))|])
    module Constants =
      struct
        let (bROTLI_DECODE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODE")
        let (bROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES")
        let (bROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP")
        let (bROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES")
        let (bROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1")
        let (bROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2")
        let (bROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS")
        let (bROTLI_DECODER_ERROR_DICTIONARY_NOT_SET : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET")
        let (bROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1")
        let (bROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2")
        let (bROTLI_DECODER_ERROR_FORMAT_CL_SPACE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_CL_SPACE")
        let (bROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT")
        let (bROTLI_DECODER_ERROR_FORMAT_DICTIONARY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_DICTIONARY")
        let (bROTLI_DECODER_ERROR_FORMAT_DISTANCE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_DISTANCE")
        let (bROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE")
        let (bROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE")
        let (bROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE")
        let (bROTLI_DECODER_ERROR_FORMAT_PADDING_1 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_PADDING_1")
        let (bROTLI_DECODER_ERROR_FORMAT_PADDING_2 : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_PADDING_2")
        let (bROTLI_DECODER_ERROR_FORMAT_RESERVED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_RESERVED")
        let (bROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET")
        let (bROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME")
        let (bROTLI_DECODER_ERROR_FORMAT_TRANSFORM : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_TRANSFORM")
        let (bROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS")
        let (bROTLI_DECODER_ERROR_INVALID_ARGUMENTS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_INVALID_ARGUMENTS")
        let (bROTLI_DECODER_ERROR_UNREACHABLE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_ERROR_UNREACHABLE")
        let (bROTLI_DECODER_NEEDS_MORE_INPUT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_NEEDS_MORE_INPUT")
        let (bROTLI_DECODER_NEEDS_MORE_OUTPUT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_NEEDS_MORE_OUTPUT")
        let (bROTLI_DECODER_NO_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_NO_ERROR")
        let (bROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION : 
          int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION")
        let (bROTLI_DECODER_PARAM_LARGE_WINDOW : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_PARAM_LARGE_WINDOW")
        let (bROTLI_DECODER_RESULT_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_RESULT_ERROR")
        let (bROTLI_DECODER_RESULT_NEEDS_MORE_INPUT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT")
        let (bROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT")
        let (bROTLI_DECODER_RESULT_SUCCESS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_RESULT_SUCCESS")
        let (bROTLI_DECODER_SUCCESS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DECODER_SUCCESS")
        let (bROTLI_DEFAULT_MODE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DEFAULT_MODE")
        let (bROTLI_DEFAULT_QUALITY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DEFAULT_QUALITY")
        let (bROTLI_DEFAULT_WINDOW : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_DEFAULT_WINDOW")
        let (bROTLI_ENCODE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_ENCODE")
        let (bROTLI_LARGE_MAX_WINDOW_BITS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_LARGE_MAX_WINDOW_BITS")
        let (bROTLI_MAX_INPUT_BLOCK_BITS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_MAX_INPUT_BLOCK_BITS")
        let (bROTLI_MAX_QUALITY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_MAX_QUALITY")
        let (bROTLI_MAX_WINDOW_BITS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_MAX_WINDOW_BITS")
        let (bROTLI_MIN_INPUT_BLOCK_BITS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_MIN_INPUT_BLOCK_BITS")
        let (bROTLI_MIN_QUALITY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_MIN_QUALITY")
        let (bROTLI_MIN_WINDOW_BITS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_MIN_WINDOW_BITS")
        let (bROTLI_MODE_FONT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_MODE_FONT")
        let (bROTLI_MODE_GENERIC : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_MODE_GENERIC")
        let (bROTLI_MODE_TEXT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_MODE_TEXT")
        let (bROTLI_OPERATION_EMIT_METADATA : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_OPERATION_EMIT_METADATA")
        let (bROTLI_OPERATION_FINISH : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_OPERATION_FINISH")
        let (bROTLI_OPERATION_FLUSH : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_OPERATION_FLUSH")
        let (bROTLI_OPERATION_PROCESS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_OPERATION_PROCESS")
        let (bROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING")
        let (bROTLI_PARAM_LARGE_WINDOW : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_PARAM_LARGE_WINDOW")
        let (bROTLI_PARAM_LGBLOCK : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_PARAM_LGBLOCK")
        let (bROTLI_PARAM_LGWIN : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_PARAM_LGWIN")
        let (bROTLI_PARAM_MODE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_PARAM_MODE")
        let (bROTLI_PARAM_NDIRECT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_PARAM_NDIRECT")
        let (bROTLI_PARAM_NPOSTFIX : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_PARAM_NPOSTFIX")
        let (bROTLI_PARAM_QUALITY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_PARAM_QUALITY")
        let (bROTLI_PARAM_SIZE_HINT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "BROTLI_PARAM_SIZE_HINT")
        let (dEFLATE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "DEFLATE")
        let (dEFLATERAW : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "DEFLATERAW")
        let (gUNZIP : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "GUNZIP")
        let (gZIP : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "GZIP")
        let (iNFLATE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "INFLATE")
        let (iNFLATERAW : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "INFLATERAW")
        let (uNZIP : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "UNZIP")
        let (z_NO_FLUSH : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_NO_FLUSH")
        let (z_PARTIAL_FLUSH : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_PARTIAL_FLUSH")
        let (z_SYNC_FLUSH : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_SYNC_FLUSH")
        let (z_FULL_FLUSH : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_FULL_FLUSH")
        let (z_FINISH : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_FINISH")
        let (z_BLOCK : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_BLOCK")
        let (z_TREES : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_TREES")
        let (z_OK : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_OK")
        let (z_STREAM_END : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_STREAM_END")
        let (z_NEED_DICT : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_NEED_DICT")
        let (z_ERRNO : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_ERRNO")
        let (z_STREAM_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_STREAM_ERROR")
        let (z_DATA_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_DATA_ERROR")
        let (z_MEM_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_MEM_ERROR")
        let (z_BUF_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_BUF_ERROR")
        let (z_VERSION_ERROR : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_VERSION_ERROR")
        let (z_NO_COMPRESSION : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_NO_COMPRESSION")
        let (z_BEST_SPEED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_BEST_SPEED")
        let (z_BEST_COMPRESSION : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_BEST_COMPRESSION")
        let (z_DEFAULT_COMPRESSION : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_DEFAULT_COMPRESSION")
        let (z_FILTERED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_FILTERED")
        let (z_HUFFMAN_ONLY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_HUFFMAN_ONLY")
        let (z_RLE : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_RLE")
        let (z_FIXED : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_FIXED")
        let (z_DEFAULT_STRATEGY : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_DEFAULT_STRATEGY")
        let (z_DEFAULT_WINDOWBITS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_DEFAULT_WINDOWBITS")
        let (z_MIN_WINDOWBITS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_MIN_WINDOWBITS")
        let (z_MAX_WINDOWBITS : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_MAX_WINDOWBITS")
        let (z_MIN_CHUNK : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_MIN_CHUNK")
        let (z_MAX_CHUNK : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_MAX_CHUNK")
        let (z_DEFAULT_CHUNK : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_DEFAULT_CHUNK")
        let (z_MIN_MEMLEVEL : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_MIN_MEMLEVEL")
        let (z_MAX_MEMLEVEL : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_MAX_MEMLEVEL")
        let (z_DEFAULT_MEMLEVEL : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_DEFAULT_MEMLEVEL")
        let (z_MIN_LEVEL : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_MIN_LEVEL")
        let (z_MAX_LEVEL : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_MAX_LEVEL")
        let (z_DEFAULT_LEVEL : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "Z_DEFAULT_LEVEL")
        let (zLIB_VERNUM : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.zlib "constants")
               "ZLIB_VERNUM")
      end
    let (z_NO_FLUSH : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_NO_FLUSH")
    let (z_PARTIAL_FLUSH : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_PARTIAL_FLUSH")
    let (z_SYNC_FLUSH : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_SYNC_FLUSH")
    let (z_FULL_FLUSH : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_FULL_FLUSH")
    let (z_FINISH : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_FINISH")
    let (z_BLOCK : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_BLOCK")
    let (z_TREES : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_TREES")
    let (z_OK : int) = Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_OK")
    let (z_STREAM_END : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_STREAM_END")
    let (z_NEED_DICT : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_NEED_DICT")
    let (z_ERRNO : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_ERRNO")
    let (z_STREAM_ERROR : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_STREAM_ERROR")
    let (z_DATA_ERROR : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_DATA_ERROR")
    let (z_MEM_ERROR : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_MEM_ERROR")
    let (z_BUF_ERROR : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_BUF_ERROR")
    let (z_VERSION_ERROR : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_VERSION_ERROR")
    let (z_NO_COMPRESSION : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_NO_COMPRESSION")
    let (z_BEST_SPEED : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_BEST_SPEED")
    let (z_BEST_COMPRESSION : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_BEST_COMPRESSION")
    let (z_DEFAULT_COMPRESSION : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_DEFAULT_COMPRESSION")
    let (z_FILTERED : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_FILTERED")
    let (z_HUFFMAN_ONLY : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_HUFFMAN_ONLY")
    let (z_RLE : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_RLE")
    let (z_FIXED : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_FIXED")
    let (z_DEFAULT_STRATEGY : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_DEFAULT_STRATEGY")
    let (z_BINARY : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_BINARY")
    let (z_TEXT : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_TEXT")
    let (z_ASCII : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_ASCII")
    let (z_UNKNOWN : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_UNKNOWN")
    let (z_DEFLATED : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.zlib "Z_DEFLATED")
  end
