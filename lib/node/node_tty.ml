[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
  end
module Tty =
  struct
    open Node_net
    let (isatty : fd:int -> bool) =
      fun ~fd:(x3 : int) ->
        Ojs.bool_of_js (Ojs.call Import.tty "isatty" [|(Ojs.int_to_js x3)|])
    module ReadStream =
      struct
        include struct include Net.Socket end
        let (create :
          fd:int -> ?options:Net.SocketConstructorOpts.t -> unit -> t) =
          fun ~fd:(x4 : int) ->
            fun ?options:(x5 : Net.SocketConstructorOpts.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Import.tty "ReadStream")
                     (let x6 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore (Ojs.call x6 "push" [|(Ojs.int_to_js x4)|]);
                      (match x5 with
                       | Some x7 ->
                           ignore
                             (Ojs.call x6 "push"
                                [|(Net.SocketConstructorOpts.t_to_js x7)|])
                       | None -> ());
                      x6))
        let (get_is_raw : t -> bool) =
          fun (x8 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x8) "isRaw")
        let (set_is_raw : t -> bool -> unit) =
          fun (x9 : t) ->
            fun (x10 : bool) ->
              Ojs.set_prop_ascii (t_to_js x9) "isRaw" (Ojs.bool_to_js x10)
        let (set_raw_mode : t -> mode:bool -> t) =
          fun (x12 : t) ->
            fun ~mode:(x11 : bool) ->
              t_of_js
                (Ojs.call (t_to_js x12) "setRawMode" [|(Ojs.bool_to_js x11)|])
        let (get_is_tty : t -> bool) =
          fun (x13 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x13) "isTTY")
        let (set_is_tty : t -> bool -> unit) =
          fun (x14 : t) ->
            fun (x15 : bool) ->
              Ojs.set_prop_ascii (t_to_js x14) "isTTY" (Ojs.bool_to_js x15)
      end
    module Direction =
      struct
        type t = [ `L_n_minus1  | `L_n_0  | `L_n_1 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x17 : Ojs.t) ->
            let x18 = x17 in
            match Ojs.int_of_js x18 with
            | (-1) -> `L_n_minus1
            | 0 -> `L_n_0
            | 1 -> `L_n_1
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x16 : [ `L_n_minus1  | `L_n_0  | `L_n_1 ]) ->
            match x16 with
            | `L_n_minus1 -> Ojs.int_to_js (-1)
            | `L_n_0 -> Ojs.int_to_js 0
            | `L_n_1 -> Ojs.int_to_js 1
      end
    module WriteStream =
      struct
        include struct include Net.Socket end
        let (create : fd:int -> t) =
          fun ~fd:(x19 : int) ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.tty "WriteStream")
                 [|(Ojs.int_to_js x19)|])
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x24 : t) ->
            fun ~event:(x20 : string) ->
              fun ~listener:(x21 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x24) "addListener"
                     [|(Ojs.string_to_js x20);(Ojs.fun_to_js_args
                                                 (fun (x22 : _) ->
                                                    x21
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js x22
                                                               0)))|])
        let (add_listener' :
          t -> event:[ `resize ] -> listener:(unit -> unit) -> t) =
          fun (x27 : t) ->
            fun ~event:(x25 : [ `resize ]) ->
              fun ~listener:(x26 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x27) "addListener"
                     [|((match x25 with
                         | `resize -> Ojs.string_to_js "resize"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x26 ()))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x33 : t) ->
            fun ~event:(x28 : symbol or_string) ->
              fun ~args:(x29 : any list) ->
                Ojs.bool_of_js
                  (let x34 = t_to_js x33 in
                   Ojs.call (Ojs.get_prop_ascii x34 "emit") "apply"
                     [|x34;((let x30 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x30 "push"
                                  [|(or_string_to_js symbol_to_js x28)|]);
                             List.iter
                               (fun (x31 : any) ->
                                  ignore
                                    (Ojs.call x30 "push" [|(any_to_js x31)|]))
                               x29;
                             x30))|])
        let (emit' : t -> event:[ `resize ] -> bool) =
          fun (x36 : t) ->
            fun ~event:(x35 : [ `resize ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x36) "emit"
                   [|((match x35 with | `resize -> Ojs.string_to_js "resize"))|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x41 : t) ->
            fun ~event:(x37 : string) ->
              fun ~listener:(x38 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x41) "on"
                     [|(Ojs.string_to_js x37);(Ojs.fun_to_js_args
                                                 (fun (x39 : _) ->
                                                    x38
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js x39
                                                               0)))|])
        let (on' : t -> event:[ `resize ] -> listener:(unit -> unit) -> t) =
          fun (x44 : t) ->
            fun ~event:(x42 : [ `resize ]) ->
              fun ~listener:(x43 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x44) "on"
                     [|((match x42 with
                         | `resize -> Ojs.string_to_js "resize"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x43 ()))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x49 : t) ->
            fun ~event:(x45 : string) ->
              fun ~listener:(x46 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x49) "once"
                     [|(Ojs.string_to_js x45);(Ojs.fun_to_js_args
                                                 (fun (x47 : _) ->
                                                    x46
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js x47
                                                               0)))|])
        let (once' : t -> event:[ `resize ] -> listener:(unit -> unit) -> t)
          =
          fun (x52 : t) ->
            fun ~event:(x50 : [ `resize ]) ->
              fun ~listener:(x51 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x52) "once"
                     [|((match x50 with
                         | `resize -> Ojs.string_to_js "resize"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x51 ()))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x57 : t) ->
            fun ~event:(x53 : string) ->
              fun ~listener:(x54 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x57) "prependListener"
                     [|(Ojs.string_to_js x53);(Ojs.fun_to_js_args
                                                 (fun (x55 : _) ->
                                                    x54
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js x55
                                                               0)))|])
        let (prepend_listener' :
          t -> event:[ `resize ] -> listener:(unit -> unit) -> t) =
          fun (x60 : t) ->
            fun ~event:(x58 : [ `resize ]) ->
              fun ~listener:(x59 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x60) "prependListener"
                     [|((match x58 with
                         | `resize -> Ojs.string_to_js "resize"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x59 ()))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x65 : t) ->
            fun ~event:(x61 : string) ->
              fun ~listener:(x62 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x65) "prependOnceListener"
                     [|(Ojs.string_to_js x61);(Ojs.fun_to_js_args
                                                 (fun (x63 : _) ->
                                                    x62
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js x63
                                                               0)))|])
        let (prepend_once_listener' :
          t -> event:[ `resize ] -> listener:(unit -> unit) -> t) =
          fun (x68 : t) ->
            fun ~event:(x66 : [ `resize ]) ->
              fun ~listener:(x67 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x68) "prependOnceListener"
                     [|((match x66 with
                         | `resize -> Ojs.string_to_js "resize"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x67 ()))|])
        let (clear_line :
          t -> dir:Direction.t -> ?callback:(unit -> unit) -> unit -> bool) =
          fun (x73 : t) ->
            fun ~dir:(x69 : Direction.t) ->
              fun ?callback:(x70 : (unit -> unit) option) ->
                fun () ->
                  Ojs.bool_of_js
                    (let x74 = t_to_js x73 in
                     Ojs.call (Ojs.get_prop_ascii x74 "clearLine") "apply"
                       [|x74;((let x71 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x71 "push"
                                    [|(Direction.t_to_js x69)|]);
                               (match x70 with
                                | Some x72 ->
                                    ignore
                                      (Ojs.call x71 "push"
                                         [|(Ojs.fun_to_js 1 (fun _ -> x72 ()))|])
                                | None -> ());
                               x71))|])
        let (clear_screen_down :
          t -> ?callback:(unit -> unit) -> unit -> bool) =
          fun (x78 : t) ->
            fun ?callback:(x75 : (unit -> unit) option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x79 = t_to_js x78 in
                   Ojs.call (Ojs.get_prop_ascii x79 "clearScreenDown")
                     "apply"
                     [|x79;((let x76 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x75 with
                              | Some x77 ->
                                  ignore
                                    (Ojs.call x76 "push"
                                       [|(Ojs.fun_to_js 1 (fun _ -> x77 ()))|])
                              | None -> ());
                             x76))|])
        let (cursor_to :
          t -> x:int -> ?y:int -> ?callback:(unit -> unit) -> unit -> bool) =
          fun (x86 : t) ->
            fun ~x:(x80 : int) ->
              fun ?y:(x81 : int option) ->
                fun ?callback:(x82 : (unit -> unit) option) ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x87 = t_to_js x86 in
                       Ojs.call (Ojs.get_prop_ascii x87 "cursorTo") "apply"
                         [|x87;((let x83 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x83 "push"
                                      [|(Ojs.int_to_js x80)|]);
                                 (match x81 with
                                  | Some x85 ->
                                      ignore
                                        (Ojs.call x83 "push"
                                           [|(Ojs.int_to_js x85)|])
                                  | None -> ());
                                 (match x82 with
                                  | Some x84 ->
                                      ignore
                                        (Ojs.call x83 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x84 ()))|])
                                  | None -> ());
                                 x83))|])
        let (cursor_to' : t -> x:int -> callback:(unit -> unit) -> bool) =
          fun (x90 : t) ->
            fun ~x:(x88 : int) ->
              fun ~callback:(x89 : unit -> unit) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x90) "cursorTo"
                     [|(Ojs.int_to_js x88);(Ojs.fun_to_js 1 (fun _ -> x89 ()))|])
        let (move_cursor :
          t -> dx:int -> dy:int -> ?callback:(unit -> unit) -> unit -> bool)
          =
          fun (x96 : t) ->
            fun ~dx:(x91 : int) ->
              fun ~dy:(x92 : int) ->
                fun ?callback:(x93 : (unit -> unit) option) ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x97 = t_to_js x96 in
                       Ojs.call (Ojs.get_prop_ascii x97 "moveCursor") "apply"
                         [|x97;((let x94 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x94 "push"
                                      [|(Ojs.int_to_js x91)|]);
                                 ignore
                                   (Ojs.call x94 "push"
                                      [|(Ojs.int_to_js x92)|]);
                                 (match x93 with
                                  | Some x95 ->
                                      ignore
                                        (Ojs.call x94 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x95 ()))|])
                                  | None -> ());
                                 x94))|])
        let (get_color_depth :
          t -> ?env:AnonymousInterface0.t -> unit -> int) =
          fun (x101 : t) ->
            fun ?env:(x98 : AnonymousInterface0.t option) ->
              fun () ->
                Ojs.int_of_js
                  (let x102 = t_to_js x101 in
                   Ojs.call (Ojs.get_prop_ascii x102 "getColorDepth") "apply"
                     [|x102;((let x99 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x98 with
                               | Some x100 ->
                                   ignore
                                     (Ojs.call x99 "push"
                                        [|(AnonymousInterface0.t_to_js x100)|])
                               | None -> ());
                              x99))|])
        let (has_colors : t -> ?depth:int -> unit -> bool) =
          fun (x106 : t) ->
            fun ?depth:(x103 : int option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x107 = t_to_js x106 in
                   Ojs.call (Ojs.get_prop_ascii x107 "hasColors") "apply"
                     [|x107;((let x104 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x103 with
                               | Some x105 ->
                                   ignore
                                     (Ojs.call x104 "push"
                                        [|(Ojs.int_to_js x105)|])
                               | None -> ());
                              x104))|])
        let (has_colors' : t -> ?env:AnonymousInterface0.t -> unit -> bool) =
          fun (x111 : t) ->
            fun ?env:(x108 : AnonymousInterface0.t option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x112 = t_to_js x111 in
                   Ojs.call (Ojs.get_prop_ascii x112 "hasColors") "apply"
                     [|x112;((let x109 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x108 with
                               | Some x110 ->
                                   ignore
                                     (Ojs.call x109 "push"
                                        [|(AnonymousInterface0.t_to_js x110)|])
                               | None -> ());
                              x109))|])
        let (has_colors'' :
          t -> depth:int -> ?env:AnonymousInterface0.t -> unit -> bool) =
          fun (x117 : t) ->
            fun ~depth:(x113 : int) ->
              fun ?env:(x114 : AnonymousInterface0.t option) ->
                fun () ->
                  Ojs.bool_of_js
                    (let x118 = t_to_js x117 in
                     Ojs.call (Ojs.get_prop_ascii x118 "hasColors") "apply"
                       [|x118;((let x115 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x115 "push"
                                     [|(Ojs.int_to_js x113)|]);
                                (match x114 with
                                 | Some x116 ->
                                     ignore
                                       (Ojs.call x115 "push"
                                          [|(AnonymousInterface0.t_to_js x116)|])
                                 | None -> ());
                                x115))|])
        let (get_window_size : t -> (int * int)) =
          fun (x119 : t) ->
            let x120 = Ojs.call (t_to_js x119) "getWindowSize" [||] in
            ((Ojs.int_of_js (Ojs.array_get x120 0)),
              (Ojs.int_of_js (Ojs.array_get x120 1)))
        let (get_columns : t -> int) =
          fun (x121 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x121) "columns")
        let (set_columns : t -> int -> unit) =
          fun (x122 : t) ->
            fun (x123 : int) ->
              Ojs.set_prop_ascii (t_to_js x122) "columns"
                (Ojs.int_to_js x123)
        let (get_rows : t -> int) =
          fun (x124 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x124) "rows")
        let (set_rows : t -> int -> unit) =
          fun (x125 : t) ->
            fun (x126 : int) ->
              Ojs.set_prop_ascii (t_to_js x125) "rows" (Ojs.int_to_js x126)
        let (get_is_tty : t -> bool) =
          fun (x127 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x127) "isTTY")
        let (set_is_tty : t -> bool -> unit) =
          fun (x128 : t) ->
            fun (x129 : bool) ->
              Ojs.set_prop_ascii (t_to_js x128) "isTTY" (Ojs.bool_to_js x129)
      end
  end
