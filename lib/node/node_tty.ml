[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type tty_Direction = [ `L_n_minus1  | `L_n_0  | `L_n_1 ]
        and tty_ReadStream = [ `Tty_ReadStream ] intf
        and tty_WriteStream = [ `Tty_WriteStream ] intf
        let rec tty_Direction_of_js : Ojs.t -> tty_Direction =
          fun (x2 : Ojs.t) ->
            let x3 = x2 in
            match Ojs.int_of_js x3 with
            | (-1) -> `L_n_minus1
            | 0 -> `L_n_0
            | 1 -> `L_n_1
            | _ -> assert false
        and tty_Direction_to_js : tty_Direction -> Ojs.t =
          fun (x1 : [ `L_n_minus1  | `L_n_0  | `L_n_1 ]) ->
            match x1 with
            | `L_n_minus1 -> Ojs.int_to_js (-1)
            | `L_n_0 -> Ojs.int_to_js 0
            | `L_n_1 -> Ojs.int_to_js 1
        and tty_ReadStream_of_js : Ojs.t -> tty_ReadStream = Obj.magic
        and tty_ReadStream_to_js : tty_ReadStream -> Ojs.t = Obj.magic
        and tty_WriteStream_of_js : Ojs.t -> tty_WriteStream = Obj.magic
        and tty_WriteStream_to_js : tty_WriteStream -> Ojs.t = Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x5 : Ojs.t) -> anonymous_interface_0_of_js x5
    and t_to_js : t -> Ojs.t =
      fun (x4 : anonymous_interface_0) -> anonymous_interface_0_to_js x4
  end
module Tty =
  struct
    open Node_net
    let (isatty : fd:int -> bool) =
      fun ~fd:(x6 : int) ->
        Ojs.bool_of_js (Ojs.call Import.tty "isatty" [|(Ojs.int_to_js x6)|])
    module ReadStream =
      struct
        type t = tty_ReadStream
        let rec t_of_js : Ojs.t -> t =
          fun (x8 : Ojs.t) -> tty_ReadStream_of_js x8
        and t_to_js : t -> Ojs.t =
          fun (x7 : tty_ReadStream) -> tty_ReadStream_to_js x7
        let (create :
          fd:int -> ?options:Net.SocketConstructorOpts.t -> unit -> t) =
          fun ~fd:(x9 : int) ->
            fun ?options:(x10 : Net.SocketConstructorOpts.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Import.tty "ReadStream")
                     (let x11 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore (Ojs.call x11 "push" [|(Ojs.int_to_js x9)|]);
                      (match x10 with
                       | Some x12 ->
                           ignore
                             (Ojs.call x11 "push"
                                [|(Net.SocketConstructorOpts.t_to_js x12)|])
                       | None -> ());
                      x11))
        let (get_isRaw : t -> bool) =
          fun (x13 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x13) "isRaw")
        let (set_isRaw : t -> bool -> unit) =
          fun (x14 : t) ->
            fun (x15 : bool) ->
              Ojs.set_prop_ascii (t_to_js x14) "isRaw" (Ojs.bool_to_js x15)
        let (setRawMode : t -> mode:bool -> t) =
          fun (x17 : t) ->
            fun ~mode:(x16 : bool) ->
              t_of_js
                (Ojs.call (t_to_js x17) "setRawMode" [|(Ojs.bool_to_js x16)|])
        let (get_isTTY : t -> bool) =
          fun (x18 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x18) "isTTY")
        let (set_isTTY : t -> bool -> unit) =
          fun (x19 : t) ->
            fun (x20 : bool) ->
              Ojs.set_prop_ascii (t_to_js x19) "isTTY" (Ojs.bool_to_js x20)
        let (cast : t -> Net.Socket.t) =
          fun (x21 : t) -> Net.Socket.t_of_js (t_to_js x21)
      end
    module Direction =
      struct
        type t = tty_Direction
        let rec t_of_js : Ojs.t -> t =
          fun (x23 : Ojs.t) -> tty_Direction_of_js x23
        and t_to_js : t -> Ojs.t =
          fun (x22 : tty_Direction) -> tty_Direction_to_js x22
      end
    module WriteStream =
      struct
        type t = tty_WriteStream
        let rec t_of_js : Ojs.t -> t =
          fun (x25 : Ojs.t) -> tty_WriteStream_of_js x25
        and t_to_js : t -> Ojs.t =
          fun (x24 : tty_WriteStream) -> tty_WriteStream_to_js x24
        let (create : fd:int -> t) =
          fun ~fd:(x26 : int) ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.tty "WriteStream")
                 [|(Ojs.int_to_js x26)|])
        let (addListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x31 : t) ->
            fun ~event:(x27 : string) ->
              fun ~listener:(x28 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x31) "addListener"
                     [|(Ojs.string_to_js x27);(Ojs.fun_to_js_args
                                                 (fun (x29 : _) ->
                                                    x28
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js x29
                                                               0)))|])
        let (addListener' :
          t -> event:[ `resize ] -> listener:(unit -> unit) -> t) =
          fun (x34 : t) ->
            fun ~event:(x32 : [ `resize ]) ->
              fun ~listener:(x33 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x34) "addListener"
                     [|((match x32 with
                         | `resize -> Ojs.string_to_js "resize"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x33 ()))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x40 : t) ->
            fun ~event:(x35 : symbol or_string) ->
              fun ~args:(x36 : any list) ->
                Ojs.bool_of_js
                  (let x41 = t_to_js x40 in
                   Ojs.call (Ojs.get_prop_ascii x41 "emit") "apply"
                     [|x41;((let x37 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x37 "push"
                                  [|(or_string_to_js symbol_to_js x35)|]);
                             List.iter
                               (fun (x38 : any) ->
                                  ignore
                                    (Ojs.call x37 "push" [|(any_to_js x38)|]))
                               x36;
                             x37))|])
        let (emit' : t -> event:[ `resize ] -> bool) =
          fun (x43 : t) ->
            fun ~event:(x42 : [ `resize ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x43) "emit"
                   [|((match x42 with | `resize -> Ojs.string_to_js "resize"))|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x48 : t) ->
            fun ~event:(x44 : string) ->
              fun ~listener:(x45 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x48) "on"
                     [|(Ojs.string_to_js x44);(Ojs.fun_to_js_args
                                                 (fun (x46 : _) ->
                                                    x45
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js x46
                                                               0)))|])
        let (on' : t -> event:[ `resize ] -> listener:(unit -> unit) -> t) =
          fun (x51 : t) ->
            fun ~event:(x49 : [ `resize ]) ->
              fun ~listener:(x50 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x51) "on"
                     [|((match x49 with
                         | `resize -> Ojs.string_to_js "resize"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x50 ()))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x56 : t) ->
            fun ~event:(x52 : string) ->
              fun ~listener:(x53 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x56) "once"
                     [|(Ojs.string_to_js x52);(Ojs.fun_to_js_args
                                                 (fun (x54 : _) ->
                                                    x53
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js x54
                                                               0)))|])
        let (once' : t -> event:[ `resize ] -> listener:(unit -> unit) -> t)
          =
          fun (x59 : t) ->
            fun ~event:(x57 : [ `resize ]) ->
              fun ~listener:(x58 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x59) "once"
                     [|((match x57 with
                         | `resize -> Ojs.string_to_js "resize"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x58 ()))|])
        let (prependListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x64 : t) ->
            fun ~event:(x60 : string) ->
              fun ~listener:(x61 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x64) "prependListener"
                     [|(Ojs.string_to_js x60);(Ojs.fun_to_js_args
                                                 (fun (x62 : _) ->
                                                    x61
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js x62
                                                               0)))|])
        let (prependListener' :
          t -> event:[ `resize ] -> listener:(unit -> unit) -> t) =
          fun (x67 : t) ->
            fun ~event:(x65 : [ `resize ]) ->
              fun ~listener:(x66 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x67) "prependListener"
                     [|((match x65 with
                         | `resize -> Ojs.string_to_js "resize"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x66 ()))|])
        let (prependOnceListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x72 : t) ->
            fun ~event:(x68 : string) ->
              fun ~listener:(x69 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x72) "prependOnceListener"
                     [|(Ojs.string_to_js x68);(Ojs.fun_to_js_args
                                                 (fun (x70 : _) ->
                                                    x69
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js x70
                                                               0)))|])
        let (prependOnceListener' :
          t -> event:[ `resize ] -> listener:(unit -> unit) -> t) =
          fun (x75 : t) ->
            fun ~event:(x73 : [ `resize ]) ->
              fun ~listener:(x74 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x75) "prependOnceListener"
                     [|((match x73 with
                         | `resize -> Ojs.string_to_js "resize"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x74 ()))|])
        let (clearLine :
          t -> dir:tty_Direction -> ?callback:(unit -> unit) -> unit -> bool)
          =
          fun (x80 : t) ->
            fun ~dir:(x76 : tty_Direction) ->
              fun ?callback:(x77 : (unit -> unit) option) ->
                fun () ->
                  Ojs.bool_of_js
                    (let x81 = t_to_js x80 in
                     Ojs.call (Ojs.get_prop_ascii x81 "clearLine") "apply"
                       [|x81;((let x78 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x78 "push"
                                    [|(tty_Direction_to_js x76)|]);
                               (match x77 with
                                | Some x79 ->
                                    ignore
                                      (Ojs.call x78 "push"
                                         [|(Ojs.fun_to_js 1 (fun _ -> x79 ()))|])
                                | None -> ());
                               x78))|])
        let (clearScreenDown : t -> ?callback:(unit -> unit) -> unit -> bool)
          =
          fun (x85 : t) ->
            fun ?callback:(x82 : (unit -> unit) option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x86 = t_to_js x85 in
                   Ojs.call (Ojs.get_prop_ascii x86 "clearScreenDown")
                     "apply"
                     [|x86;((let x83 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x82 with
                              | Some x84 ->
                                  ignore
                                    (Ojs.call x83 "push"
                                       [|(Ojs.fun_to_js 1 (fun _ -> x84 ()))|])
                              | None -> ());
                             x83))|])
        let (cursorTo :
          t -> x:int -> ?y:int -> ?callback:(unit -> unit) -> unit -> bool) =
          fun (x93 : t) ->
            fun ~x:(x87 : int) ->
              fun ?y:(x88 : int option) ->
                fun ?callback:(x89 : (unit -> unit) option) ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x94 = t_to_js x93 in
                       Ojs.call (Ojs.get_prop_ascii x94 "cursorTo") "apply"
                         [|x94;((let x90 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x90 "push"
                                      [|(Ojs.int_to_js x87)|]);
                                 (match x88 with
                                  | Some x92 ->
                                      ignore
                                        (Ojs.call x90 "push"
                                           [|(Ojs.int_to_js x92)|])
                                  | None -> ());
                                 (match x89 with
                                  | Some x91 ->
                                      ignore
                                        (Ojs.call x90 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x91 ()))|])
                                  | None -> ());
                                 x90))|])
        let (cursorTo' : t -> x:int -> callback:(unit -> unit) -> bool) =
          fun (x97 : t) ->
            fun ~x:(x95 : int) ->
              fun ~callback:(x96 : unit -> unit) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x97) "cursorTo"
                     [|(Ojs.int_to_js x95);(Ojs.fun_to_js 1 (fun _ -> x96 ()))|])
        let (moveCursor :
          t -> dx:int -> dy:int -> ?callback:(unit -> unit) -> unit -> bool)
          =
          fun (x103 : t) ->
            fun ~dx:(x98 : int) ->
              fun ~dy:(x99 : int) ->
                fun ?callback:(x100 : (unit -> unit) option) ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x104 = t_to_js x103 in
                       Ojs.call (Ojs.get_prop_ascii x104 "moveCursor")
                         "apply"
                         [|x104;((let x101 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x101 "push"
                                       [|(Ojs.int_to_js x98)|]);
                                  ignore
                                    (Ojs.call x101 "push"
                                       [|(Ojs.int_to_js x99)|]);
                                  (match x100 with
                                   | Some x102 ->
                                       ignore
                                         (Ojs.call x101 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x102 ()))|])
                                   | None -> ());
                                  x101))|])
        let (getColorDepth : t -> ?env:anonymous_interface_0 -> unit -> int)
          =
          fun (x108 : t) ->
            fun ?env:(x105 : anonymous_interface_0 option) ->
              fun () ->
                Ojs.int_of_js
                  (let x109 = t_to_js x108 in
                   Ojs.call (Ojs.get_prop_ascii x109 "getColorDepth") "apply"
                     [|x109;((let x106 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x105 with
                               | Some x107 ->
                                   ignore
                                     (Ojs.call x106 "push"
                                        [|(anonymous_interface_0_to_js x107)|])
                               | None -> ());
                              x106))|])
        let (hasColors : t -> ?depth:int -> unit -> bool) =
          fun (x113 : t) ->
            fun ?depth:(x110 : int option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x114 = t_to_js x113 in
                   Ojs.call (Ojs.get_prop_ascii x114 "hasColors") "apply"
                     [|x114;((let x111 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x110 with
                               | Some x112 ->
                                   ignore
                                     (Ojs.call x111 "push"
                                        [|(Ojs.int_to_js x112)|])
                               | None -> ());
                              x111))|])
        let (hasColors' : t -> ?env:anonymous_interface_0 -> unit -> bool) =
          fun (x118 : t) ->
            fun ?env:(x115 : anonymous_interface_0 option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x119 = t_to_js x118 in
                   Ojs.call (Ojs.get_prop_ascii x119 "hasColors") "apply"
                     [|x119;((let x116 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x115 with
                               | Some x117 ->
                                   ignore
                                     (Ojs.call x116 "push"
                                        [|(anonymous_interface_0_to_js x117)|])
                               | None -> ());
                              x116))|])
        let (hasColors'' :
          t -> depth:int -> ?env:anonymous_interface_0 -> unit -> bool) =
          fun (x124 : t) ->
            fun ~depth:(x120 : int) ->
              fun ?env:(x121 : anonymous_interface_0 option) ->
                fun () ->
                  Ojs.bool_of_js
                    (let x125 = t_to_js x124 in
                     Ojs.call (Ojs.get_prop_ascii x125 "hasColors") "apply"
                       [|x125;((let x122 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x122 "push"
                                     [|(Ojs.int_to_js x120)|]);
                                (match x121 with
                                 | Some x123 ->
                                     ignore
                                       (Ojs.call x122 "push"
                                          [|(anonymous_interface_0_to_js x123)|])
                                 | None -> ());
                                x122))|])
        let (getWindowSize : t -> (int * int)) =
          fun (x126 : t) ->
            let x127 = Ojs.call (t_to_js x126) "getWindowSize" [||] in
            ((Ojs.int_of_js (Ojs.array_get x127 0)),
              (Ojs.int_of_js (Ojs.array_get x127 1)))
        let (get_columns : t -> int) =
          fun (x128 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x128) "columns")
        let (set_columns : t -> int -> unit) =
          fun (x129 : t) ->
            fun (x130 : int) ->
              Ojs.set_prop_ascii (t_to_js x129) "columns"
                (Ojs.int_to_js x130)
        let (get_rows : t -> int) =
          fun (x131 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x131) "rows")
        let (set_rows : t -> int -> unit) =
          fun (x132 : t) ->
            fun (x133 : int) ->
              Ojs.set_prop_ascii (t_to_js x132) "rows" (Ojs.int_to_js x133)
        let (get_isTTY : t -> bool) =
          fun (x134 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x134) "isTTY")
        let (set_isTTY : t -> bool -> unit) =
          fun (x135 : t) ->
            fun (x136 : bool) ->
              Ojs.set_prop_ascii (t_to_js x135) "isTTY" (Ojs.bool_to_js x136)
        let (cast : t -> Net.Socket.t) =
          fun (x137 : t) -> Net.Socket.t_of_js (t_to_js x137)
      end
  end
