[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_rejectUnauthorized : t -> bool) =
      fun (x3 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3) "rejectUnauthorized")
    let (set_rejectUnauthorized : t -> bool -> unit) =
      fun (x4 : t) ->
        fun (x5 : bool) ->
          Ojs.set_prop_ascii (t_to_js x4) "rejectUnauthorized"
            (Ojs.bool_to_js x5)
    let (get_requestCert : t -> bool) =
      fun (x6 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x6) "requestCert")
    let (set_requestCert : t -> bool -> unit) =
      fun (x7 : t) ->
        fun (x8 : bool) ->
          Ojs.set_prop_ascii (t_to_js x7) "requestCert" (Ojs.bool_to_js x8)
  end
module Tls =
  struct
    open Node_net
    let (cLIENT_RENEG_LIMIT : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.tls "CLIENT_RENEG_LIMIT")
    let (cLIENT_RENEG_WINDOW : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.tls "CLIENT_RENEG_WINDOW")
    module Certificate =
      struct
        type t = tls_Certificate
        let rec t_of_js : Ojs.t -> t =
          fun (x10 : Ojs.t) -> tls_Certificate_of_js x10
        and t_to_js : t -> Ojs.t =
          fun (x9 : tls_Certificate) -> tls_Certificate_to_js x9
        let (get_C : t -> string) =
          fun (x11 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x11) "C")
        let (set_C : t -> string -> unit) =
          fun (x12 : t) ->
            fun (x13 : string) ->
              Ojs.set_prop_ascii (t_to_js x12) "C" (Ojs.string_to_js x13)
        let (get_ST : t -> string) =
          fun (x14 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x14) "ST")
        let (set_ST : t -> string -> unit) =
          fun (x15 : t) ->
            fun (x16 : string) ->
              Ojs.set_prop_ascii (t_to_js x15) "ST" (Ojs.string_to_js x16)
        let (get_L : t -> string) =
          fun (x17 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x17) "L")
        let (set_L : t -> string -> unit) =
          fun (x18 : t) ->
            fun (x19 : string) ->
              Ojs.set_prop_ascii (t_to_js x18) "L" (Ojs.string_to_js x19)
        let (get_O : t -> string) =
          fun (x20 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x20) "O")
        let (set_O : t -> string -> unit) =
          fun (x21 : t) ->
            fun (x22 : string) ->
              Ojs.set_prop_ascii (t_to_js x21) "O" (Ojs.string_to_js x22)
        let (get_OU : t -> string) =
          fun (x23 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x23) "OU")
        let (set_OU : t -> string -> unit) =
          fun (x24 : t) ->
            fun (x25 : string) ->
              Ojs.set_prop_ascii (t_to_js x24) "OU" (Ojs.string_to_js x25)
        let (get_CN : t -> string) =
          fun (x26 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x26) "CN")
        let (set_CN : t -> string -> unit) =
          fun (x27 : t) ->
            fun (x28 : string) ->
              Ojs.set_prop_ascii (t_to_js x27) "CN" (Ojs.string_to_js x28)
      end
    module PeerCertificate =
      struct
        type t = tls_PeerCertificate
        let rec t_of_js : Ojs.t -> t =
          fun (x30 : Ojs.t) -> tls_PeerCertificate_of_js x30
        and t_to_js : t -> Ojs.t =
          fun (x29 : tls_PeerCertificate) -> tls_PeerCertificate_to_js x29
        let (get_subject : t -> tls_Certificate) =
          fun (x31 : t) ->
            tls_Certificate_of_js
              (Ojs.get_prop_ascii (t_to_js x31) "subject")
        let (set_subject : t -> tls_Certificate -> unit) =
          fun (x32 : t) ->
            fun (x33 : tls_Certificate) ->
              Ojs.set_prop_ascii (t_to_js x32) "subject"
                (tls_Certificate_to_js x33)
        let (get_issuer : t -> tls_Certificate) =
          fun (x34 : t) ->
            tls_Certificate_of_js (Ojs.get_prop_ascii (t_to_js x34) "issuer")
        let (set_issuer : t -> tls_Certificate -> unit) =
          fun (x35 : t) ->
            fun (x36 : tls_Certificate) ->
              Ojs.set_prop_ascii (t_to_js x35) "issuer"
                (tls_Certificate_to_js x36)
        let (get_subjectaltname : t -> string) =
          fun (x37 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x37) "subjectaltname")
        let (set_subjectaltname : t -> string -> unit) =
          fun (x38 : t) ->
            fun (x39 : string) ->
              Ojs.set_prop_ascii (t_to_js x38) "subjectaltname"
                (Ojs.string_to_js x39)
        let (get_infoAccess : t -> string list Dict.t) =
          fun (x40 : t) ->
            Dict.t_of_js
              (fun (x41 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x41)
              (Ojs.get_prop_ascii (t_to_js x40) "infoAccess")
        let (set_infoAccess : t -> string list Dict.t -> unit) =
          fun (x43 : t) ->
            fun (x44 : string list Dict.t) ->
              Ojs.set_prop_ascii (t_to_js x43) "infoAccess"
                (Dict.t_to_js
                   (fun (x45 : string list) ->
                      Ojs.list_to_js Ojs.string_to_js x45) x44)
        let (get_modulus : t -> string) =
          fun (x47 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x47) "modulus")
        let (set_modulus : t -> string -> unit) =
          fun (x48 : t) ->
            fun (x49 : string) ->
              Ojs.set_prop_ascii (t_to_js x48) "modulus"
                (Ojs.string_to_js x49)
        let (get_exponent : t -> string) =
          fun (x50 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x50) "exponent")
        let (set_exponent : t -> string -> unit) =
          fun (x51 : t) ->
            fun (x52 : string) ->
              Ojs.set_prop_ascii (t_to_js x51) "exponent"
                (Ojs.string_to_js x52)
        let (get_valid_from : t -> string) =
          fun (x53 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x53) "valid_from")
        let (set_valid_from : t -> string -> unit) =
          fun (x54 : t) ->
            fun (x55 : string) ->
              Ojs.set_prop_ascii (t_to_js x54) "valid_from"
                (Ojs.string_to_js x55)
        let (get_valid_to : t -> string) =
          fun (x56 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x56) "valid_to")
        let (set_valid_to : t -> string -> unit) =
          fun (x57 : t) ->
            fun (x58 : string) ->
              Ojs.set_prop_ascii (t_to_js x57) "valid_to"
                (Ojs.string_to_js x58)
        let (get_fingerprint : t -> string) =
          fun (x59 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x59) "fingerprint")
        let (set_fingerprint : t -> string -> unit) =
          fun (x60 : t) ->
            fun (x61 : string) ->
              Ojs.set_prop_ascii (t_to_js x60) "fingerprint"
                (Ojs.string_to_js x61)
        let (get_fingerprint256 : t -> string) =
          fun (x62 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x62) "fingerprint256")
        let (set_fingerprint256 : t -> string -> unit) =
          fun (x63 : t) ->
            fun (x64 : string) ->
              Ojs.set_prop_ascii (t_to_js x63) "fingerprint256"
                (Ojs.string_to_js x64)
        let (get_ext_key_usage : t -> string list) =
          fun (x65 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x65) "ext_key_usage")
        let (set_ext_key_usage : t -> string list -> unit) =
          fun (x67 : t) ->
            fun (x68 : string list) ->
              Ojs.set_prop_ascii (t_to_js x67) "ext_key_usage"
                (Ojs.list_to_js Ojs.string_to_js x68)
        let (get_serialNumber : t -> string) =
          fun (x70 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x70) "serialNumber")
        let (set_serialNumber : t -> string -> unit) =
          fun (x71 : t) ->
            fun (x72 : string) ->
              Ojs.set_prop_ascii (t_to_js x71) "serialNumber"
                (Ojs.string_to_js x72)
        let (get_raw : t -> Buffer.t) =
          fun (x73 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x73) "raw")
        let (set_raw : t -> Buffer.t -> unit) =
          fun (x74 : t) ->
            fun (x75 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x74) "raw" (Buffer.t_to_js x75)
      end
    module DetailedPeerCertificate =
      struct
        type t = tls_DetailedPeerCertificate
        let rec t_of_js : Ojs.t -> t =
          fun (x77 : Ojs.t) -> tls_DetailedPeerCertificate_of_js x77
        and t_to_js : t -> Ojs.t =
          fun (x76 : tls_DetailedPeerCertificate) ->
            tls_DetailedPeerCertificate_to_js x76
        let (get_issuerCertificate : t -> t) =
          fun (x78 : t) ->
            t_of_js (Ojs.get_prop_ascii (t_to_js x78) "issuerCertificate")
        let (set_issuerCertificate : t -> t -> unit) =
          fun (x79 : t) ->
            fun (x80 : t) ->
              Ojs.set_prop_ascii (t_to_js x79) "issuerCertificate"
                (t_to_js x80)
        let (cast : t -> tls_PeerCertificate) =
          fun (x81 : t) -> tls_PeerCertificate_of_js (t_to_js x81)
      end
    module CipherNameAndProtocol =
      struct
        type t = tls_CipherNameAndProtocol
        let rec t_of_js : Ojs.t -> t =
          fun (x83 : Ojs.t) -> tls_CipherNameAndProtocol_of_js x83
        and t_to_js : t -> Ojs.t =
          fun (x82 : tls_CipherNameAndProtocol) ->
            tls_CipherNameAndProtocol_to_js x82
        let (get_name : t -> string) =
          fun (x84 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x84) "name")
        let (set_name : t -> string -> unit) =
          fun (x85 : t) ->
            fun (x86 : string) ->
              Ojs.set_prop_ascii (t_to_js x85) "name" (Ojs.string_to_js x86)
        let (get_version : t -> string) =
          fun (x87 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x87) "version")
        let (set_version : t -> string -> unit) =
          fun (x88 : t) ->
            fun (x89 : string) ->
              Ojs.set_prop_ascii (t_to_js x88) "version"
                (Ojs.string_to_js x89)
        let (get_standardName : t -> string) =
          fun (x90 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x90) "standardName")
        let (set_standardName : t -> string -> unit) =
          fun (x91 : t) ->
            fun (x92 : string) ->
              Ojs.set_prop_ascii (t_to_js x91) "standardName"
                (Ojs.string_to_js x92)
      end
    module EphemeralKeyInfo =
      struct
        type t = tls_EphemeralKeyInfo
        let rec t_of_js : Ojs.t -> t =
          fun (x94 : Ojs.t) -> tls_EphemeralKeyInfo_of_js x94
        and t_to_js : t -> Ojs.t =
          fun (x93 : tls_EphemeralKeyInfo) -> tls_EphemeralKeyInfo_to_js x93
        let (get_type : t -> string) =
          fun (x95 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x95) "type")
        let (set_type : t -> string -> unit) =
          fun (x96 : t) ->
            fun (x97 : string) ->
              Ojs.set_prop_ascii (t_to_js x96) "type" (Ojs.string_to_js x97)
        let (get_name : t -> string) =
          fun (x98 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x98) "name")
        let (set_name : t -> string -> unit) =
          fun (x99 : t) ->
            fun (x100 : string) ->
              Ojs.set_prop_ascii (t_to_js x99) "name" (Ojs.string_to_js x100)
        let (get_size : t -> int) =
          fun (x101 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x101) "size")
        let (set_size : t -> int -> unit) =
          fun (x102 : t) ->
            fun (x103 : int) ->
              Ojs.set_prop_ascii (t_to_js x102) "size" (Ojs.int_to_js x103)
      end
    module KeyObject =
      struct
        type t = tls_KeyObject
        let rec t_of_js : Ojs.t -> t =
          fun (x105 : Ojs.t) -> tls_KeyObject_of_js x105
        and t_to_js : t -> Ojs.t =
          fun (x104 : tls_KeyObject) -> tls_KeyObject_to_js x104
        let (get_pem : t -> Buffer.t or_string) =
          fun (x106 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x106) "pem")
        let (set_pem : t -> Buffer.t or_string -> unit) =
          fun (x108 : t) ->
            fun (x109 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x108) "pem"
                (or_string_to_js Buffer.t_to_js x109)
        let (get_passphrase : t -> string) =
          fun (x111 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x111) "passphrase")
        let (set_passphrase : t -> string -> unit) =
          fun (x112 : t) ->
            fun (x113 : string) ->
              Ojs.set_prop_ascii (t_to_js x112) "passphrase"
                (Ojs.string_to_js x113)
      end
    module PxfObject =
      struct
        type t = tls_PxfObject
        let rec t_of_js : Ojs.t -> t =
          fun (x115 : Ojs.t) -> tls_PxfObject_of_js x115
        and t_to_js : t -> Ojs.t =
          fun (x114 : tls_PxfObject) -> tls_PxfObject_to_js x114
        let (get_buf : t -> Buffer.t or_string) =
          fun (x116 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x116) "buf")
        let (set_buf : t -> Buffer.t or_string -> unit) =
          fun (x118 : t) ->
            fun (x119 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x118) "buf"
                (or_string_to_js Buffer.t_to_js x119)
        let (get_passphrase : t -> string) =
          fun (x121 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x121) "passphrase")
        let (set_passphrase : t -> string -> unit) =
          fun (x122 : t) ->
            fun (x123 : string) ->
              Ojs.set_prop_ascii (t_to_js x122) "passphrase"
                (Ojs.string_to_js x123)
      end
    module TLSSocketOptions =
      struct
        type t = tls_TLSSocketOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x125 : Ojs.t) -> tls_TLSSocketOptions_of_js x125
        and t_to_js : t -> Ojs.t =
          fun (x124 : tls_TLSSocketOptions) ->
            tls_TLSSocketOptions_to_js x124
        let (get_isServer : t -> bool) =
          fun (x126 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x126) "isServer")
        let (set_isServer : t -> bool -> unit) =
          fun (x127 : t) ->
            fun (x128 : bool) ->
              Ojs.set_prop_ascii (t_to_js x127) "isServer"
                (Ojs.bool_to_js x128)
        let (get_server : t -> Net.Server.t) =
          fun (x129 : t) ->
            Net.Server.t_of_js (Ojs.get_prop_ascii (t_to_js x129) "server")
        let (set_server : t -> Net.Server.t -> unit) =
          fun (x130 : t) ->
            fun (x131 : Net.Server.t) ->
              Ojs.set_prop_ascii (t_to_js x130) "server"
                (Net.Server.t_to_js x131)
        let (get_session : t -> Buffer.t) =
          fun (x132 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x132) "session")
        let (set_session : t -> Buffer.t -> unit) =
          fun (x133 : t) ->
            fun (x134 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x133) "session"
                (Buffer.t_to_js x134)
        let (get_requestOCSP : t -> bool) =
          fun (x135 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x135) "requestOCSP")
        let (set_requestOCSP : t -> bool -> unit) =
          fun (x136 : t) ->
            fun (x137 : bool) ->
              Ojs.set_prop_ascii (t_to_js x136) "requestOCSP"
                (Ojs.bool_to_js x137)
        let (cast : t -> tls_SecureContextOptions) =
          fun (x138 : t) -> tls_SecureContextOptions_of_js (t_to_js x138)
        let (cast' : t -> tls_CommonConnectionOptions) =
          fun (x139 : t) -> tls_CommonConnectionOptions_of_js (t_to_js x139)
      end
    module TLSSocket =
      struct
        type t = tls_TLSSocket
        let rec t_of_js : Ojs.t -> t =
          fun (x141 : Ojs.t) -> tls_TLSSocket_of_js x141
        and t_to_js : t -> Ojs.t =
          fun (x140 : tls_TLSSocket) -> tls_TLSSocket_to_js x140
        let (create :
          socket:Net.Socket.t -> ?options:tls_TLSSocketOptions -> unit -> t)
          =
          fun ~socket:(x142 : Net.Socket.t) ->
            fun ?options:(x143 : tls_TLSSocketOptions option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Import.tls "TLSSocket")
                     (let x144 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x144 "push" [|(Net.Socket.t_to_js x142)|]);
                      (match x143 with
                       | Some x145 ->
                           ignore
                             (Ojs.call x144 "push"
                                [|(tls_TLSSocketOptions_to_js x145)|])
                       | None -> ());
                      x144))
        let (get_authorized : t -> bool) =
          fun (x146 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x146) "authorized")
        let (set_authorized : t -> bool -> unit) =
          fun (x147 : t) ->
            fun (x148 : bool) ->
              Ojs.set_prop_ascii (t_to_js x147) "authorized"
                (Ojs.bool_to_js x148)
        let (get_authorizationError : t -> Error.t) =
          fun (x149 : t) ->
            Error.t_of_js
              (Ojs.get_prop_ascii (t_to_js x149) "authorizationError")
        let (set_authorizationError : t -> Error.t -> unit) =
          fun (x150 : t) ->
            fun (x151 : Error.t) ->
              Ojs.set_prop_ascii (t_to_js x150) "authorizationError"
                (Error.t_to_js x151)
        let (get_encrypted : t -> bool) =
          fun (x152 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x152) "encrypted")
        let (set_encrypted : t -> bool -> unit) =
          fun (x153 : t) ->
            fun (x154 : bool) ->
              Ojs.set_prop_ascii (t_to_js x153) "encrypted"
                (Ojs.bool_to_js x154)
        let (get_alpnProtocol : t -> string) =
          fun (x155 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x155) "alpnProtocol")
        let (set_alpnProtocol : t -> string -> unit) =
          fun (x156 : t) ->
            fun (x157 : string) ->
              Ojs.set_prop_ascii (t_to_js x156) "alpnProtocol"
                (Ojs.string_to_js x157)
        let (getCertificate :
          t -> (tls_PeerCertificate, untyped_object) union2 or_null) =
          fun (x158 : t) ->
            or_null_of_js
              (fun (x159 : Ojs.t) ->
                 union2_of_js tls_PeerCertificate_of_js untyped_object_of_js
                   x159) (Ojs.call (t_to_js x158) "getCertificate" [||])
        let (getCipher : t -> tls_CipherNameAndProtocol) =
          fun (x162 : t) ->
            tls_CipherNameAndProtocol_of_js
              (Ojs.call (t_to_js x162) "getCipher" [||])
        let (getEphemeralKeyInfo :
          t -> (tls_EphemeralKeyInfo, untyped_object) union2 or_null) =
          fun (x163 : t) ->
            or_null_of_js
              (fun (x164 : Ojs.t) ->
                 union2_of_js tls_EphemeralKeyInfo_of_js untyped_object_of_js
                   x164) (Ojs.call (t_to_js x163) "getEphemeralKeyInfo" [||])
        let (getFinished : t -> Buffer.t or_undefined) =
          fun (x167 : t) ->
            or_undefined_of_js Buffer.t_of_js
              (Ojs.call (t_to_js x167) "getFinished" [||])
        let (getPeerCertificate :
          t -> detailed:[ `L_b_true ] -> tls_DetailedPeerCertificate) =
          fun (x170 : t) ->
            fun ~detailed:(x169 : [ `L_b_true ]) ->
              tls_DetailedPeerCertificate_of_js
                (Ojs.call (t_to_js x170) "getPeerCertificate"
                   [|((match x169 with
                       | `L_b_true -> Ojs.string_to_js "LBTrue"))|])
        let (getPeerCertificate' :
          t -> ?detailed:[ `L_b_false ] -> unit -> tls_PeerCertificate) =
          fun (x174 : t) ->
            fun ?detailed:(x171 : [ `L_b_false ] option) ->
              fun () ->
                tls_PeerCertificate_of_js
                  (let x175 = t_to_js x174 in
                   Ojs.call (Ojs.get_prop_ascii x175 "getPeerCertificate")
                     "apply"
                     [|x175;((let x172 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x171 with
                               | Some x173 ->
                                   ignore
                                     (Ojs.call x172 "push"
                                        [|((match x173 with
                                            | `L_b_false ->
                                                Ojs.string_to_js "LBFalse"))|])
                               | None -> ());
                              x172))|])
        let (getPeerCertificate'' :
          t ->
            ?detailed:bool ->
              unit ->
                (tls_DetailedPeerCertificate, tls_PeerCertificate) union2)
          =
          fun (x179 : t) ->
            fun ?detailed:(x176 : bool option) ->
              fun () ->
                union2_of_js tls_DetailedPeerCertificate_of_js
                  tls_PeerCertificate_of_js
                  (let x180 = t_to_js x179 in
                   Ojs.call (Ojs.get_prop_ascii x180 "getPeerCertificate")
                     "apply"
                     [|x180;((let x177 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x176 with
                               | Some x178 ->
                                   ignore
                                     (Ojs.call x177 "push"
                                        [|(Ojs.bool_to_js x178)|])
                               | None -> ());
                              x177))|])
        let (getPeerFinished : t -> Buffer.t or_undefined) =
          fun (x183 : t) ->
            or_undefined_of_js Buffer.t_of_js
              (Ojs.call (t_to_js x183) "getPeerFinished" [||])
        let (getProtocol : t -> string or_null) =
          fun (x185 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x185) "getProtocol" [||])
        let (getSession : t -> Buffer.t or_undefined) =
          fun (x187 : t) ->
            or_undefined_of_js Buffer.t_of_js
              (Ojs.call (t_to_js x187) "getSession" [||])
        let (getSharedSigalgs : t -> string list) =
          fun (x189 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x189) "getSharedSigalgs" [||])
        let (getTLSTicket : t -> Buffer.t or_undefined) =
          fun (x191 : t) ->
            or_undefined_of_js Buffer.t_of_js
              (Ojs.call (t_to_js x191) "getTLSTicket" [||])
        let (isSessionReused : t -> bool) =
          fun (x193 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x193) "isSessionReused" [||])
        let (renegotiate :
          t ->
            options:AnonymousInterface0.t ->
              callback:(err:Error.t or_null -> unit) -> bool or_undefined)
          =
          fun (x198 : t) ->
            fun ~options:(x194 : AnonymousInterface0.t) ->
              fun ~callback:(x195 : err:Error.t or_null -> unit) ->
                or_undefined_of_js Ojs.bool_of_js
                  (Ojs.call (t_to_js x198) "renegotiate"
                     [|(AnonymousInterface0.t_to_js x194);(Ojs.fun_to_js 1
                                                             (fun
                                                                (x196 :
                                                                  Ojs.t)
                                                                ->
                                                                x195
                                                                  ~err:(
                                                                  or_null_of_js
                                                                    Error.t_of_js
                                                                    x196)))|])
        let (setMaxSendFragment : t -> size:int -> bool) =
          fun (x201 : t) ->
            fun ~size:(x200 : int) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x201) "setMaxSendFragment"
                   [|(Ojs.int_to_js x200)|])
        let (disableRenegotiation : t -> unit) =
          fun (x202 : t) ->
            ignore (Ojs.call (t_to_js x202) "disableRenegotiation" [||])
        let (enableTrace : t -> unit) =
          fun (x203 : t) ->
            ignore (Ojs.call (t_to_js x203) "enableTrace" [||])
        let (exportKeyingMaterial :
          t -> length:int -> label:string -> context:Buffer.t -> Buffer.t) =
          fun (x207 : t) ->
            fun ~length:(x204 : int) ->
              fun ~label:(x205 : string) ->
                fun ~context:(x206 : Buffer.t) ->
                  Buffer.t_of_js
                    (Ojs.call (t_to_js x207) "exportKeyingMaterial"
                       [|(Ojs.int_to_js x204);(Ojs.string_to_js x205);(
                         Buffer.t_to_js x206)|])
        let (addListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x212 : t) ->
            fun ~event:(x208 : string) ->
              fun ~listener:(x209 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x212) "addListener"
                     [|(Ojs.string_to_js x208);(Ojs.fun_to_js_args
                                                  (fun (x210 : _) ->
                                                     x209
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x210 0)))|])
        let (addListener' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x216 : t) ->
            fun ~event:(x213 : [ `OCSPResponse ]) ->
              fun ~listener:(x214 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x216) "addListener"
                     [|((match x213 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x215 : Ojs.t) ->
                            x214 ~response:(Buffer.t_of_js x215)))|])
        let (addListener'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x219 : t) ->
            fun ~event:(x217 : [ `secureConnect ]) ->
              fun ~listener:(x218 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x219) "addListener"
                     [|((match x217 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x218 ()))|])
        let (addListener''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x223 : t) ->
            fun ~event:(x220 : [ `session ]) ->
              fun ~listener:(x221 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x223) "addListener"
                     [|((match x220 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x222 : Ojs.t) ->
                            x221 ~session:(Buffer.t_of_js x222)))|])
        let (addListener'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x227 : t) ->
            fun ~event:(x224 : [ `keylog ]) ->
              fun ~listener:(x225 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x227) "addListener"
                     [|((match x224 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x226 :
                                                                    Ojs.t) ->
                                                                    x225
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x226)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x233 : t) ->
            fun ~event:(x228 : symbol or_string) ->
              fun ~args:(x229 : any list) ->
                Ojs.bool_of_js
                  (let x234 = t_to_js x233 in
                   Ojs.call (Ojs.get_prop_ascii x234 "emit") "apply"
                     [|x234;((let x230 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x230 "push"
                                   [|(or_string_to_js symbol_to_js x228)|]);
                              List.iter
                                (fun (x231 : any) ->
                                   ignore
                                     (Ojs.call x230 "push"
                                        [|(any_to_js x231)|])) x229;
                              x230))|])
        let (emit' :
          t -> event:[ `OCSPResponse ] -> response:Buffer.t -> bool) =
          fun (x237 : t) ->
            fun ~event:(x235 : [ `OCSPResponse ]) ->
              fun ~response:(x236 : Buffer.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x237) "emit"
                     [|((match x235 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Buffer.t_to_js x236)|])
        let (emit'' : t -> event:[ `secureConnect ] -> bool) =
          fun (x239 : t) ->
            fun ~event:(x238 : [ `secureConnect ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x239) "emit"
                   [|((match x238 with
                       | `secureConnect -> Ojs.string_to_js "secureConnect"))|])
        let (emit''' : t -> event:[ `session ] -> session:Buffer.t -> bool) =
          fun (x242 : t) ->
            fun ~event:(x240 : [ `session ]) ->
              fun ~session:(x241 : Buffer.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x242) "emit"
                     [|((match x240 with
                         | `session -> Ojs.string_to_js "session"));(
                       Buffer.t_to_js x241)|])
        let (emit'''' : t -> event:[ `keylog ] -> line:Buffer.t -> bool) =
          fun (x245 : t) ->
            fun ~event:(x243 : [ `keylog ]) ->
              fun ~line:(x244 : Buffer.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x245) "emit"
                     [|((match x243 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Buffer.t_to_js
                                                                    x244)|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x250 : t) ->
            fun ~event:(x246 : string) ->
              fun ~listener:(x247 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x250) "on"
                     [|(Ojs.string_to_js x246);(Ojs.fun_to_js_args
                                                  (fun (x248 : _) ->
                                                     x247
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x248 0)))|])
        let (on' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x254 : t) ->
            fun ~event:(x251 : [ `OCSPResponse ]) ->
              fun ~listener:(x252 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x254) "on"
                     [|((match x251 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x253 : Ojs.t) ->
                            x252 ~response:(Buffer.t_of_js x253)))|])
        let (on'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x257 : t) ->
            fun ~event:(x255 : [ `secureConnect ]) ->
              fun ~listener:(x256 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x257) "on"
                     [|((match x255 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x256 ()))|])
        let (on''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x261 : t) ->
            fun ~event:(x258 : [ `session ]) ->
              fun ~listener:(x259 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x261) "on"
                     [|((match x258 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x260 : Ojs.t) ->
                            x259 ~session:(Buffer.t_of_js x260)))|])
        let (on'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x265 : t) ->
            fun ~event:(x262 : [ `keylog ]) ->
              fun ~listener:(x263 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x265) "on"
                     [|((match x262 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x264 :
                                                                    Ojs.t) ->
                                                                    x263
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x264)))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x270 : t) ->
            fun ~event:(x266 : string) ->
              fun ~listener:(x267 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x270) "once"
                     [|(Ojs.string_to_js x266);(Ojs.fun_to_js_args
                                                  (fun (x268 : _) ->
                                                     x267
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x268 0)))|])
        let (once' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x274 : t) ->
            fun ~event:(x271 : [ `OCSPResponse ]) ->
              fun ~listener:(x272 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x274) "once"
                     [|((match x271 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x273 : Ojs.t) ->
                            x272 ~response:(Buffer.t_of_js x273)))|])
        let (once'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x277 : t) ->
            fun ~event:(x275 : [ `secureConnect ]) ->
              fun ~listener:(x276 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x277) "once"
                     [|((match x275 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x276 ()))|])
        let (once''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x281 : t) ->
            fun ~event:(x278 : [ `session ]) ->
              fun ~listener:(x279 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x281) "once"
                     [|((match x278 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x280 : Ojs.t) ->
                            x279 ~session:(Buffer.t_of_js x280)))|])
        let (once'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x285 : t) ->
            fun ~event:(x282 : [ `keylog ]) ->
              fun ~listener:(x283 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x285) "once"
                     [|((match x282 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x284 :
                                                                    Ojs.t) ->
                                                                    x283
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x284)))|])
        let (prependListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x290 : t) ->
            fun ~event:(x286 : string) ->
              fun ~listener:(x287 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x290) "prependListener"
                     [|(Ojs.string_to_js x286);(Ojs.fun_to_js_args
                                                  (fun (x288 : _) ->
                                                     x287
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x288 0)))|])
        let (prependListener' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x294 : t) ->
            fun ~event:(x291 : [ `OCSPResponse ]) ->
              fun ~listener:(x292 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x294) "prependListener"
                     [|((match x291 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x293 : Ojs.t) ->
                            x292 ~response:(Buffer.t_of_js x293)))|])
        let (prependListener'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x297 : t) ->
            fun ~event:(x295 : [ `secureConnect ]) ->
              fun ~listener:(x296 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x297) "prependListener"
                     [|((match x295 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x296 ()))|])
        let (prependListener''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x301 : t) ->
            fun ~event:(x298 : [ `session ]) ->
              fun ~listener:(x299 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x301) "prependListener"
                     [|((match x298 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x300 : Ojs.t) ->
                            x299 ~session:(Buffer.t_of_js x300)))|])
        let (prependListener'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x305 : t) ->
            fun ~event:(x302 : [ `keylog ]) ->
              fun ~listener:(x303 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x305) "prependListener"
                     [|((match x302 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x304 :
                                                                    Ojs.t) ->
                                                                    x303
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x304)))|])
        let (prependOnceListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x310 : t) ->
            fun ~event:(x306 : string) ->
              fun ~listener:(x307 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x310) "prependOnceListener"
                     [|(Ojs.string_to_js x306);(Ojs.fun_to_js_args
                                                  (fun (x308 : _) ->
                                                     x307
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x308 0)))|])
        let (prependOnceListener' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x314 : t) ->
            fun ~event:(x311 : [ `OCSPResponse ]) ->
              fun ~listener:(x312 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x314) "prependOnceListener"
                     [|((match x311 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x313 : Ojs.t) ->
                            x312 ~response:(Buffer.t_of_js x313)))|])
        let (prependOnceListener'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x317 : t) ->
            fun ~event:(x315 : [ `secureConnect ]) ->
              fun ~listener:(x316 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x317) "prependOnceListener"
                     [|((match x315 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x316 ()))|])
        let (prependOnceListener''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x321 : t) ->
            fun ~event:(x318 : [ `session ]) ->
              fun ~listener:(x319 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x321) "prependOnceListener"
                     [|((match x318 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x320 : Ojs.t) ->
                            x319 ~session:(Buffer.t_of_js x320)))|])
        let (prependOnceListener'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x325 : t) ->
            fun ~event:(x322 : [ `keylog ]) ->
              fun ~listener:(x323 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x325) "prependOnceListener"
                     [|((match x322 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x324 :
                                                                    Ojs.t) ->
                                                                    x323
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x324)))|])
        let (cast : t -> Net.Socket.t) =
          fun (x326 : t) -> Net.Socket.t_of_js (t_to_js x326)
      end
    module CommonConnectionOptions =
      struct
        type t = tls_CommonConnectionOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x328 : Ojs.t) -> tls_CommonConnectionOptions_of_js x328
        and t_to_js : t -> Ojs.t =
          fun (x327 : tls_CommonConnectionOptions) ->
            tls_CommonConnectionOptions_to_js x327
        let (get_secureContext : t -> tls_SecureContext) =
          fun (x329 : t) ->
            tls_SecureContext_of_js
              (Ojs.get_prop_ascii (t_to_js x329) "secureContext")
        let (set_secureContext : t -> tls_SecureContext -> unit) =
          fun (x330 : t) ->
            fun (x331 : tls_SecureContext) ->
              Ojs.set_prop_ascii (t_to_js x330) "secureContext"
                (tls_SecureContext_to_js x331)
        let (get_enableTrace : t -> bool) =
          fun (x332 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x332) "enableTrace")
        let (set_enableTrace : t -> bool -> unit) =
          fun (x333 : t) ->
            fun (x334 : bool) ->
              Ojs.set_prop_ascii (t_to_js x333) "enableTrace"
                (Ojs.bool_to_js x334)
        let (get_requestCert : t -> bool) =
          fun (x335 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x335) "requestCert")
        let (set_requestCert : t -> bool -> unit) =
          fun (x336 : t) ->
            fun (x337 : bool) ->
              Ojs.set_prop_ascii (t_to_js x336) "requestCert"
                (Ojs.bool_to_js x337)
        let (get_ALPNProtocols :
          t -> (Uint8Array.t, Uint8Array.t or_string) or_array) =
          fun (x338 : t) ->
            or_array_of_js Uint8Array.t_of_js
              (fun (x340 : Ojs.t) -> or_string_of_js Uint8Array.t_of_js x340)
              (Ojs.get_prop_ascii (t_to_js x338) "ALPNProtocols")
        let (set_ALPNProtocols :
          t -> (Uint8Array.t, Uint8Array.t or_string) or_array -> unit) =
          fun (x342 : t) ->
            fun (x343 : (Uint8Array.t, Uint8Array.t or_string) or_array) ->
              Ojs.set_prop_ascii (t_to_js x342) "ALPNProtocols"
                (or_array_to_js Uint8Array.t_to_js
                   (fun (x345 : Uint8Array.t or_string) ->
                      or_string_to_js Uint8Array.t_to_js x345) x343)
        let (sNICallback :
          t ->
            servername:string ->
              cb:(err:Error.t or_null -> ctx:tls_SecureContext -> unit) ->
                unit)
          =
          fun (x352 : t) ->
            fun ~servername:(x347 : string) ->
              fun
                ~cb:(x348 :
                      err:Error.t or_null -> ctx:tls_SecureContext -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x352) "SNICallback"
                     [|(Ojs.string_to_js x347);(Ojs.fun_to_js 2
                                                  (fun (x349 : Ojs.t) ->
                                                     fun (x351 : Ojs.t) ->
                                                       x348
                                                         ~err:(or_null_of_js
                                                                 Error.t_of_js
                                                                 x349)
                                                         ~ctx:(tls_SecureContext_of_js
                                                                 x351)))|])
        let (get_rejectUnauthorized : t -> bool) =
          fun (x353 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x353) "rejectUnauthorized")
        let (set_rejectUnauthorized : t -> bool -> unit) =
          fun (x354 : t) ->
            fun (x355 : bool) ->
              Ojs.set_prop_ascii (t_to_js x354) "rejectUnauthorized"
                (Ojs.bool_to_js x355)
      end
    module TlsOptions =
      struct
        type t = tls_TlsOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x357 : Ojs.t) -> tls_TlsOptions_of_js x357
        and t_to_js : t -> Ojs.t =
          fun (x356 : tls_TlsOptions) -> tls_TlsOptions_to_js x356
        let (get_handshakeTimeout : t -> int) =
          fun (x358 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x358) "handshakeTimeout")
        let (set_handshakeTimeout : t -> int -> unit) =
          fun (x359 : t) ->
            fun (x360 : int) ->
              Ojs.set_prop_ascii (t_to_js x359) "handshakeTimeout"
                (Ojs.int_to_js x360)
        let (get_sessionTimeout : t -> int) =
          fun (x361 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x361) "sessionTimeout")
        let (set_sessionTimeout : t -> int -> unit) =
          fun (x362 : t) ->
            fun (x363 : int) ->
              Ojs.set_prop_ascii (t_to_js x362) "sessionTimeout"
                (Ojs.int_to_js x363)
        let (get_ticketKeys : t -> Buffer.t) =
          fun (x364 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x364) "ticketKeys")
        let (set_ticketKeys : t -> Buffer.t -> unit) =
          fun (x365 : t) ->
            fun (x366 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x365) "ticketKeys"
                (Buffer.t_to_js x366)
        let (pskCallback :
          t ->
            socket:tls_TLSSocket ->
              identity:string -> (DataView.t, TypedArray.t) union2 or_null)
          =
          fun (x369 : t) ->
            fun ~socket:(x367 : tls_TLSSocket) ->
              fun ~identity:(x368 : string) ->
                or_null_of_js
                  (fun (x370 : Ojs.t) ->
                     union2_of_js DataView.t_of_js TypedArray.t_of_js x370)
                  (Ojs.call (t_to_js x369) "pskCallback"
                     [|(tls_TLSSocket_to_js x367);(Ojs.string_to_js x368)|])
        let (get_pskIdentityHint : t -> string) =
          fun (x373 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x373) "pskIdentityHint")
        let (set_pskIdentityHint : t -> string -> unit) =
          fun (x374 : t) ->
            fun (x375 : string) ->
              Ojs.set_prop_ascii (t_to_js x374) "pskIdentityHint"
                (Ojs.string_to_js x375)
        let (cast : t -> tls_SecureContextOptions) =
          fun (x376 : t) -> tls_SecureContextOptions_of_js (t_to_js x376)
        let (cast' : t -> tls_CommonConnectionOptions) =
          fun (x377 : t) -> tls_CommonConnectionOptions_of_js (t_to_js x377)
        let (cast'' : t -> Net.ServerOpts.t) =
          fun (x378 : t) -> Net.ServerOpts.t_of_js (t_to_js x378)
      end
    module PSKCallbackNegotation =
      struct
        type t = tls_PSKCallbackNegotation
        let rec t_of_js : Ojs.t -> t =
          fun (x380 : Ojs.t) -> tls_PSKCallbackNegotation_of_js x380
        and t_to_js : t -> Ojs.t =
          fun (x379 : tls_PSKCallbackNegotation) ->
            tls_PSKCallbackNegotation_to_js x379
        let (get_psk : t -> (DataView.t, TypedArray.t) union2) =
          fun (x381 : t) ->
            union2_of_js DataView.t_of_js TypedArray.t_of_js
              (Ojs.get_prop_ascii (t_to_js x381) "psk")
        let (set_psk : t -> (DataView.t, TypedArray.t) union2 -> unit) =
          fun (x384 : t) ->
            fun (x385 : (DataView.t, TypedArray.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x384) "psk"
                (union2_to_js DataView.t_to_js TypedArray.t_to_js x385)
        let (get_identity : t -> string) =
          fun (x388 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x388) "identity")
        let (set_identity : t -> string -> unit) =
          fun (x389 : t) ->
            fun (x390 : string) ->
              Ojs.set_prop_ascii (t_to_js x389) "identity"
                (Ojs.string_to_js x390)
      end
    module ConnectionOptions =
      struct
        type t = tls_ConnectionOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x392 : Ojs.t) -> tls_ConnectionOptions_of_js x392
        and t_to_js : t -> Ojs.t =
          fun (x391 : tls_ConnectionOptions) ->
            tls_ConnectionOptions_to_js x391
        let (get_host : t -> string) =
          fun (x393 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x393) "host")
        let (set_host : t -> string -> unit) =
          fun (x394 : t) ->
            fun (x395 : string) ->
              Ojs.set_prop_ascii (t_to_js x394) "host"
                (Ojs.string_to_js x395)
        let (get_port : t -> int) =
          fun (x396 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x396) "port")
        let (set_port : t -> int -> unit) =
          fun (x397 : t) ->
            fun (x398 : int) ->
              Ojs.set_prop_ascii (t_to_js x397) "port" (Ojs.int_to_js x398)
        let (get_path : t -> string) =
          fun (x399 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x399) "path")
        let (set_path : t -> string -> unit) =
          fun (x400 : t) ->
            fun (x401 : string) ->
              Ojs.set_prop_ascii (t_to_js x400) "path"
                (Ojs.string_to_js x401)
        let (get_socket : t -> Net.Socket.t) =
          fun (x402 : t) ->
            Net.Socket.t_of_js (Ojs.get_prop_ascii (t_to_js x402) "socket")
        let (set_socket : t -> Net.Socket.t -> unit) =
          fun (x403 : t) ->
            fun (x404 : Net.Socket.t) ->
              Ojs.set_prop_ascii (t_to_js x403) "socket"
                (Net.Socket.t_to_js x404)
        let (checkServerIdentity :
          t ->
            host:string -> cert:tls_PeerCertificate -> Error.t or_undefined)
          =
          fun (x407 : t) ->
            fun ~host:(x405 : string) ->
              fun ~cert:(x406 : tls_PeerCertificate) ->
                or_undefined_of_js Error.t_of_js
                  (Ojs.call (t_to_js x407) "checkServerIdentity"
                     [|(Ojs.string_to_js x405);(tls_PeerCertificate_to_js
                                                  x406)|])
        let (get_servername : t -> string) =
          fun (x409 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x409) "servername")
        let (set_servername : t -> string -> unit) =
          fun (x410 : t) ->
            fun (x411 : string) ->
              Ojs.set_prop_ascii (t_to_js x410) "servername"
                (Ojs.string_to_js x411)
        let (get_session : t -> Buffer.t) =
          fun (x412 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x412) "session")
        let (set_session : t -> Buffer.t -> unit) =
          fun (x413 : t) ->
            fun (x414 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x413) "session"
                (Buffer.t_to_js x414)
        let (get_minDHSize : t -> int) =
          fun (x415 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x415) "minDHSize")
        let (set_minDHSize : t -> int -> unit) =
          fun (x416 : t) ->
            fun (x417 : int) ->
              Ojs.set_prop_ascii (t_to_js x416) "minDHSize"
                (Ojs.int_to_js x417)
        let (get_lookup : t -> Net.LookupFunction.t) =
          fun (x418 : t) ->
            Net.LookupFunction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x418) "lookup")
        let (set_lookup : t -> Net.LookupFunction.t -> unit) =
          fun (x419 : t) ->
            fun (x420 : Net.LookupFunction.t) ->
              Ojs.set_prop_ascii (t_to_js x419) "lookup"
                (Net.LookupFunction.t_to_js x420)
        let (get_timeout : t -> int) =
          fun (x421 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x421) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x422 : t) ->
            fun (x423 : int) ->
              Ojs.set_prop_ascii (t_to_js x422) "timeout"
                (Ojs.int_to_js x423)
        let (pskCallback :
          t -> hint:string or_null -> tls_PSKCallbackNegotation or_null) =
          fun (x426 : t) ->
            fun ~hint:(x424 : string or_null) ->
              or_null_of_js tls_PSKCallbackNegotation_of_js
                (Ojs.call (t_to_js x426) "pskCallback"
                   [|(or_null_to_js Ojs.string_to_js x424)|])
        let (cast : t -> tls_SecureContextOptions) =
          fun (x428 : t) -> tls_SecureContextOptions_of_js (t_to_js x428)
        let (cast' : t -> tls_CommonConnectionOptions) =
          fun (x429 : t) -> tls_CommonConnectionOptions_of_js (t_to_js x429)
      end
    module Server =
      struct
        type t = tls_Server
        let rec t_of_js : Ojs.t -> t =
          fun (x431 : Ojs.t) -> tls_Server_of_js x431
        and t_to_js : t -> Ojs.t =
          fun (x430 : tls_Server) -> tls_Server_to_js x430
        let (create :
          ?secureConnectionListener:(socket:tls_TLSSocket -> unit) ->
            unit -> t)
          =
          fun
            ?secureConnectionListener:(x432 :
                                        (socket:tls_TLSSocket -> unit) option)
            ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.tls "Server")
                   (let x433 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x432 with
                     | Some x434 ->
                         ignore
                           (Ojs.call x433 "push"
                              [|(Ojs.fun_to_js 1
                                   (fun (x435 : Ojs.t) ->
                                      x434 ~socket:(tls_TLSSocket_of_js x435)))|])
                     | None -> ());
                    x433))
        let (create' :
          options:tls_TlsOptions ->
            ?secureConnectionListener:(socket:tls_TLSSocket -> unit) ->
              unit -> t)
          =
          fun ~options:(x436 : tls_TlsOptions) ->
            fun
              ?secureConnectionListener:(x437 :
                                          (socket:tls_TLSSocket -> unit)
                                            option)
              ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.tls "Server")
                     (let x438 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x438 "push" [|(tls_TlsOptions_to_js x436)|]);
                      (match x437 with
                       | Some x439 ->
                           ignore
                             (Ojs.call x438 "push"
                                [|(Ojs.fun_to_js 1
                                     (fun (x440 : Ojs.t) ->
                                        x439
                                          ~socket:(tls_TLSSocket_of_js x440)))|])
                       | None -> ());
                      x438))
        let (addContext :
          t ->
            hostName:string -> credentials:tls_SecureContextOptions -> unit)
          =
          fun (x443 : t) ->
            fun ~hostName:(x441 : string) ->
              fun ~credentials:(x442 : tls_SecureContextOptions) ->
                ignore
                  (Ojs.call (t_to_js x443) "addContext"
                     [|(Ojs.string_to_js x441);(tls_SecureContextOptions_to_js
                                                  x442)|])
        let (getTicketKeys : t -> Buffer.t) =
          fun (x444 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x444) "getTicketKeys" [||])
        let (setSecureContext :
          t -> details:tls_SecureContextOptions -> unit) =
          fun (x446 : t) ->
            fun ~details:(x445 : tls_SecureContextOptions) ->
              ignore
                (Ojs.call (t_to_js x446) "setSecureContext"
                   [|(tls_SecureContextOptions_to_js x445)|])
        let (setTicketKeys : t -> keys:Buffer.t -> unit) =
          fun (x448 : t) ->
            fun ~keys:(x447 : Buffer.t) ->
              ignore
                (Ojs.call (t_to_js x448) "setTicketKeys"
                   [|(Buffer.t_to_js x447)|])
        let (addListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x453 : t) ->
            fun ~event:(x449 : string) ->
              fun ~listener:(x450 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x453) "addListener"
                     [|(Ojs.string_to_js x449);(Ojs.fun_to_js_args
                                                  (fun (x451 : _) ->
                                                     x450
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x451 0)))|])
        let (addListener' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x458 : t) ->
            fun ~event:(x454 : [ `tlsClientError ]) ->
              fun
                ~listener:(x455 :
                            err:Error.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x458) "addListener"
                     [|((match x454 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x456 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x457 :
                                                                    Ojs.t) ->
                                                                    x455
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x456)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x457)))|])
        let (addListener'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          sessionData:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x466 : t) ->
            fun ~event:(x459 : [ `newSession ]) ->
              fun
                ~listener:(x460 :
                            sessionId:Buffer.t ->
                              sessionData:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x466) "addListener"
                     [|((match x459 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x461 : Ojs.t) ->
                            fun (x462 : Ojs.t) ->
                              fun (x463 : Ojs.t) ->
                                x460 ~sessionId:(Buffer.t_of_js x461)
                                  ~sessionData:(Buffer.t_of_js x462)
                                  ~callback:(fun ~err:(x464 : Error.t) ->
                                               fun ~resp:(x465 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x463
                                                      [|(Error.t_to_js x464);(
                                                        Buffer.t_to_js x465)|]))))|])
        let (addListener''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x475 : t) ->
            fun ~event:(x467 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x468 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x475) "addListener"
                     [|((match x467 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x469 : Ojs.t) ->
                            fun (x470 : Ojs.t) ->
                              fun (x471 : Ojs.t) ->
                                x468 ~certificate:(Buffer.t_of_js x469)
                                  ~issuer:(Buffer.t_of_js x470)
                                  ~callback:(fun
                                               ~err:(x472 : Error.t or_null)
                                               ->
                                               fun ~resp:(x474 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x471
                                                      [|(or_null_to_js
                                                           Error.t_to_js x472);(
                                                        Buffer.t_to_js x474)|]))))|])
        let (addListener'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      sessionData:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x482 : t) ->
            fun ~event:(x476 : [ `resumeSession ]) ->
              fun
                ~listener:(x477 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          sessionData:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x482) "addListener"
                     [|((match x476 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x478 : Ojs.t) ->
                            fun (x479 : Ojs.t) ->
                              x477 ~sessionId:(Buffer.t_of_js x478)
                                ~callback:(fun ~err:(x480 : Error.t) ->
                                             fun
                                               ~sessionData:(x481 : Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x479
                                                    [|(Error.t_to_js x480);(
                                                      Buffer.t_to_js x481)|]))))|])
        let (addListener''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x486 : t) ->
            fun ~event:(x483 : [ `secureConnection ]) ->
              fun ~listener:(x484 : tlsSocket:tls_TLSSocket -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x486) "addListener"
                     [|((match x483 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x485 :
                                                                    Ojs.t) ->
                                                                    x484
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x485)))|])
        let (addListener'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit) ->
                t)
          =
          fun (x491 : t) ->
            fun ~event:(x487 : [ `keylog ]) ->
              fun
                ~listener:(x488 :
                            line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x491) "addListener"
                     [|((match x487 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x489 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x490 :
                                                                    Ojs.t) ->
                                                                    x488
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x489)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x490)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x497 : t) ->
            fun ~event:(x492 : symbol or_string) ->
              fun ~args:(x493 : any list) ->
                Ojs.bool_of_js
                  (let x498 = t_to_js x497 in
                   Ojs.call (Ojs.get_prop_ascii x498 "emit") "apply"
                     [|x498;((let x494 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x494 "push"
                                   [|(or_string_to_js symbol_to_js x492)|]);
                              List.iter
                                (fun (x495 : any) ->
                                   ignore
                                     (Ojs.call x494 "push"
                                        [|(any_to_js x495)|])) x493;
                              x494))|])
        let (emit' :
          t ->
            event:[ `tlsClientError ] ->
              err:Error.t -> tlsSocket:tls_TLSSocket -> bool)
          =
          fun (x502 : t) ->
            fun ~event:(x499 : [ `tlsClientError ]) ->
              fun ~err:(x500 : Error.t) ->
                fun ~tlsSocket:(x501 : tls_TLSSocket) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x502) "emit"
                       [|((match x499 with
                           | `tlsClientError ->
                               Ojs.string_to_js "tlsClientError"));(Error.t_to_js
                                                                    x500);(
                         tls_TLSSocket_to_js x501)|])
        let (emit'' :
          t ->
            event:[ `newSession ] ->
              sessionId:Buffer.t ->
                sessionData:Buffer.t ->
                  callback:(err:Error.t -> resp:Buffer.t -> unit) -> bool)
          =
          fun (x509 : t) ->
            fun ~event:(x503 : [ `newSession ]) ->
              fun ~sessionId:(x504 : Buffer.t) ->
                fun ~sessionData:(x505 : Buffer.t) ->
                  fun ~callback:(x506 : err:Error.t -> resp:Buffer.t -> unit)
                    ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x509) "emit"
                         [|((match x503 with
                             | `newSession -> Ojs.string_to_js "newSession"));(
                           Buffer.t_to_js x504);(Buffer.t_to_js x505);(
                           Ojs.fun_to_js 2
                             (fun (x507 : Ojs.t) ->
                                fun (x508 : Ojs.t) ->
                                  x506 ~err:(Error.t_of_js x507)
                                    ~resp:(Buffer.t_of_js x508)))|])
        let (emit''' :
          t ->
            event:[ `OCSPRequest ] ->
              certificate:Buffer.t ->
                issuer:Buffer.t ->
                  callback:(err:Error.t or_null -> resp:Buffer.t -> unit) ->
                    bool)
          =
          fun (x517 : t) ->
            fun ~event:(x510 : [ `OCSPRequest ]) ->
              fun ~certificate:(x511 : Buffer.t) ->
                fun ~issuer:(x512 : Buffer.t) ->
                  fun
                    ~callback:(x513 :
                                err:Error.t or_null -> resp:Buffer.t -> unit)
                    ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x517) "emit"
                         [|((match x510 with
                             | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                           Buffer.t_to_js x511);(Buffer.t_to_js x512);(
                           Ojs.fun_to_js 2
                             (fun (x514 : Ojs.t) ->
                                fun (x516 : Ojs.t) ->
                                  x513
                                    ~err:(or_null_of_js Error.t_of_js x514)
                                    ~resp:(Buffer.t_of_js x516)))|])
        let (emit'''' :
          t ->
            event:[ `resumeSession ] ->
              sessionId:Buffer.t ->
                callback:(err:Error.t -> sessionData:Buffer.t -> unit) ->
                  bool)
          =
          fun (x523 : t) ->
            fun ~event:(x518 : [ `resumeSession ]) ->
              fun ~sessionId:(x519 : Buffer.t) ->
                fun
                  ~callback:(x520 :
                              err:Error.t -> sessionData:Buffer.t -> unit)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x523) "emit"
                       [|((match x518 with
                           | `resumeSession ->
                               Ojs.string_to_js "resumeSession"));(Buffer.t_to_js
                                                                    x519);(
                         Ojs.fun_to_js 2
                           (fun (x521 : Ojs.t) ->
                              fun (x522 : Ojs.t) ->
                                x520 ~err:(Error.t_of_js x521)
                                  ~sessionData:(Buffer.t_of_js x522)))|])
        let (emit''''' :
          t -> event:[ `secureConnection ] -> tlsSocket:tls_TLSSocket -> bool)
          =
          fun (x526 : t) ->
            fun ~event:(x524 : [ `secureConnection ]) ->
              fun ~tlsSocket:(x525 : tls_TLSSocket) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x526) "emit"
                     [|((match x524 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(tls_TLSSocket_to_js
                                                                    x525)|])
        let (emit'''''' :
          t ->
            event:[ `keylog ] ->
              line:Buffer.t -> tlsSocket:tls_TLSSocket -> bool)
          =
          fun (x530 : t) ->
            fun ~event:(x527 : [ `keylog ]) ->
              fun ~line:(x528 : Buffer.t) ->
                fun ~tlsSocket:(x529 : tls_TLSSocket) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x530) "emit"
                       [|((match x527 with
                           | `keylog -> Ojs.string_to_js "keylog"));(
                         Buffer.t_to_js x528);(tls_TLSSocket_to_js x529)|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x535 : t) ->
            fun ~event:(x531 : string) ->
              fun ~listener:(x532 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x535) "on"
                     [|(Ojs.string_to_js x531);(Ojs.fun_to_js_args
                                                  (fun (x533 : _) ->
                                                     x532
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x533 0)))|])
        let (on' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x540 : t) ->
            fun ~event:(x536 : [ `tlsClientError ]) ->
              fun
                ~listener:(x537 :
                            err:Error.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x540) "on"
                     [|((match x536 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x538 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x539 :
                                                                    Ojs.t) ->
                                                                    x537
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x538)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x539)))|])
        let (on'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          sessionData:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x548 : t) ->
            fun ~event:(x541 : [ `newSession ]) ->
              fun
                ~listener:(x542 :
                            sessionId:Buffer.t ->
                              sessionData:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x548) "on"
                     [|((match x541 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x543 : Ojs.t) ->
                            fun (x544 : Ojs.t) ->
                              fun (x545 : Ojs.t) ->
                                x542 ~sessionId:(Buffer.t_of_js x543)
                                  ~sessionData:(Buffer.t_of_js x544)
                                  ~callback:(fun ~err:(x546 : Error.t) ->
                                               fun ~resp:(x547 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x545
                                                      [|(Error.t_to_js x546);(
                                                        Buffer.t_to_js x547)|]))))|])
        let (on''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x557 : t) ->
            fun ~event:(x549 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x550 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x557) "on"
                     [|((match x549 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x551 : Ojs.t) ->
                            fun (x552 : Ojs.t) ->
                              fun (x553 : Ojs.t) ->
                                x550 ~certificate:(Buffer.t_of_js x551)
                                  ~issuer:(Buffer.t_of_js x552)
                                  ~callback:(fun
                                               ~err:(x554 : Error.t or_null)
                                               ->
                                               fun ~resp:(x556 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x553
                                                      [|(or_null_to_js
                                                           Error.t_to_js x554);(
                                                        Buffer.t_to_js x556)|]))))|])
        let (on'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      sessionData:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x564 : t) ->
            fun ~event:(x558 : [ `resumeSession ]) ->
              fun
                ~listener:(x559 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          sessionData:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x564) "on"
                     [|((match x558 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x560 : Ojs.t) ->
                            fun (x561 : Ojs.t) ->
                              x559 ~sessionId:(Buffer.t_of_js x560)
                                ~callback:(fun ~err:(x562 : Error.t) ->
                                             fun
                                               ~sessionData:(x563 : Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x561
                                                    [|(Error.t_to_js x562);(
                                                      Buffer.t_to_js x563)|]))))|])
        let (on''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x568 : t) ->
            fun ~event:(x565 : [ `secureConnection ]) ->
              fun ~listener:(x566 : tlsSocket:tls_TLSSocket -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x568) "on"
                     [|((match x565 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x567 :
                                                                    Ojs.t) ->
                                                                    x566
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x567)))|])
        let (on'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit) ->
                t)
          =
          fun (x573 : t) ->
            fun ~event:(x569 : [ `keylog ]) ->
              fun
                ~listener:(x570 :
                            line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x573) "on"
                     [|((match x569 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x571 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x572 :
                                                                    Ojs.t) ->
                                                                    x570
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x571)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x572)))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x578 : t) ->
            fun ~event:(x574 : string) ->
              fun ~listener:(x575 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x578) "once"
                     [|(Ojs.string_to_js x574);(Ojs.fun_to_js_args
                                                  (fun (x576 : _) ->
                                                     x575
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x576 0)))|])
        let (once' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x583 : t) ->
            fun ~event:(x579 : [ `tlsClientError ]) ->
              fun
                ~listener:(x580 :
                            err:Error.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x583) "once"
                     [|((match x579 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x581 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x582 :
                                                                    Ojs.t) ->
                                                                    x580
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x581)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x582)))|])
        let (once'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          sessionData:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x591 : t) ->
            fun ~event:(x584 : [ `newSession ]) ->
              fun
                ~listener:(x585 :
                            sessionId:Buffer.t ->
                              sessionData:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x591) "once"
                     [|((match x584 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x586 : Ojs.t) ->
                            fun (x587 : Ojs.t) ->
                              fun (x588 : Ojs.t) ->
                                x585 ~sessionId:(Buffer.t_of_js x586)
                                  ~sessionData:(Buffer.t_of_js x587)
                                  ~callback:(fun ~err:(x589 : Error.t) ->
                                               fun ~resp:(x590 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x588
                                                      [|(Error.t_to_js x589);(
                                                        Buffer.t_to_js x590)|]))))|])
        let (once''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x600 : t) ->
            fun ~event:(x592 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x593 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x600) "once"
                     [|((match x592 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x594 : Ojs.t) ->
                            fun (x595 : Ojs.t) ->
                              fun (x596 : Ojs.t) ->
                                x593 ~certificate:(Buffer.t_of_js x594)
                                  ~issuer:(Buffer.t_of_js x595)
                                  ~callback:(fun
                                               ~err:(x597 : Error.t or_null)
                                               ->
                                               fun ~resp:(x599 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x596
                                                      [|(or_null_to_js
                                                           Error.t_to_js x597);(
                                                        Buffer.t_to_js x599)|]))))|])
        let (once'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      sessionData:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x607 : t) ->
            fun ~event:(x601 : [ `resumeSession ]) ->
              fun
                ~listener:(x602 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          sessionData:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x607) "once"
                     [|((match x601 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x603 : Ojs.t) ->
                            fun (x604 : Ojs.t) ->
                              x602 ~sessionId:(Buffer.t_of_js x603)
                                ~callback:(fun ~err:(x605 : Error.t) ->
                                             fun
                                               ~sessionData:(x606 : Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x604
                                                    [|(Error.t_to_js x605);(
                                                      Buffer.t_to_js x606)|]))))|])
        let (once''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x611 : t) ->
            fun ~event:(x608 : [ `secureConnection ]) ->
              fun ~listener:(x609 : tlsSocket:tls_TLSSocket -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x611) "once"
                     [|((match x608 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x610 :
                                                                    Ojs.t) ->
                                                                    x609
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x610)))|])
        let (once'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit) ->
                t)
          =
          fun (x616 : t) ->
            fun ~event:(x612 : [ `keylog ]) ->
              fun
                ~listener:(x613 :
                            line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x616) "once"
                     [|((match x612 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x614 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x615 :
                                                                    Ojs.t) ->
                                                                    x613
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x614)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x615)))|])
        let (prependListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x621 : t) ->
            fun ~event:(x617 : string) ->
              fun ~listener:(x618 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x621) "prependListener"
                     [|(Ojs.string_to_js x617);(Ojs.fun_to_js_args
                                                  (fun (x619 : _) ->
                                                     x618
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x619 0)))|])
        let (prependListener' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x626 : t) ->
            fun ~event:(x622 : [ `tlsClientError ]) ->
              fun
                ~listener:(x623 :
                            err:Error.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x626) "prependListener"
                     [|((match x622 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x624 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x625 :
                                                                    Ojs.t) ->
                                                                    x623
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x624)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x625)))|])
        let (prependListener'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          sessionData:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x634 : t) ->
            fun ~event:(x627 : [ `newSession ]) ->
              fun
                ~listener:(x628 :
                            sessionId:Buffer.t ->
                              sessionData:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x634) "prependListener"
                     [|((match x627 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x629 : Ojs.t) ->
                            fun (x630 : Ojs.t) ->
                              fun (x631 : Ojs.t) ->
                                x628 ~sessionId:(Buffer.t_of_js x629)
                                  ~sessionData:(Buffer.t_of_js x630)
                                  ~callback:(fun ~err:(x632 : Error.t) ->
                                               fun ~resp:(x633 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x631
                                                      [|(Error.t_to_js x632);(
                                                        Buffer.t_to_js x633)|]))))|])
        let (prependListener''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x643 : t) ->
            fun ~event:(x635 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x636 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x643) "prependListener"
                     [|((match x635 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x637 : Ojs.t) ->
                            fun (x638 : Ojs.t) ->
                              fun (x639 : Ojs.t) ->
                                x636 ~certificate:(Buffer.t_of_js x637)
                                  ~issuer:(Buffer.t_of_js x638)
                                  ~callback:(fun
                                               ~err:(x640 : Error.t or_null)
                                               ->
                                               fun ~resp:(x642 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x639
                                                      [|(or_null_to_js
                                                           Error.t_to_js x640);(
                                                        Buffer.t_to_js x642)|]))))|])
        let (prependListener'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      sessionData:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x650 : t) ->
            fun ~event:(x644 : [ `resumeSession ]) ->
              fun
                ~listener:(x645 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          sessionData:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x650) "prependListener"
                     [|((match x644 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x646 : Ojs.t) ->
                            fun (x647 : Ojs.t) ->
                              x645 ~sessionId:(Buffer.t_of_js x646)
                                ~callback:(fun ~err:(x648 : Error.t) ->
                                             fun
                                               ~sessionData:(x649 : Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x647
                                                    [|(Error.t_to_js x648);(
                                                      Buffer.t_to_js x649)|]))))|])
        let (prependListener''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x654 : t) ->
            fun ~event:(x651 : [ `secureConnection ]) ->
              fun ~listener:(x652 : tlsSocket:tls_TLSSocket -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x654) "prependListener"
                     [|((match x651 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x653 :
                                                                    Ojs.t) ->
                                                                    x652
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x653)))|])
        let (prependListener'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit) ->
                t)
          =
          fun (x659 : t) ->
            fun ~event:(x655 : [ `keylog ]) ->
              fun
                ~listener:(x656 :
                            line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x659) "prependListener"
                     [|((match x655 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x657 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x658 :
                                                                    Ojs.t) ->
                                                                    x656
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x657)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x658)))|])
        let (prependOnceListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x664 : t) ->
            fun ~event:(x660 : string) ->
              fun ~listener:(x661 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x664) "prependOnceListener"
                     [|(Ojs.string_to_js x660);(Ojs.fun_to_js_args
                                                  (fun (x662 : _) ->
                                                     x661
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x662 0)))|])
        let (prependOnceListener' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x669 : t) ->
            fun ~event:(x665 : [ `tlsClientError ]) ->
              fun
                ~listener:(x666 :
                            err:Error.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x669) "prependOnceListener"
                     [|((match x665 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x667 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x668 :
                                                                    Ojs.t) ->
                                                                    x666
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x667)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x668)))|])
        let (prependOnceListener'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          sessionData:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x677 : t) ->
            fun ~event:(x670 : [ `newSession ]) ->
              fun
                ~listener:(x671 :
                            sessionId:Buffer.t ->
                              sessionData:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x677) "prependOnceListener"
                     [|((match x670 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x672 : Ojs.t) ->
                            fun (x673 : Ojs.t) ->
                              fun (x674 : Ojs.t) ->
                                x671 ~sessionId:(Buffer.t_of_js x672)
                                  ~sessionData:(Buffer.t_of_js x673)
                                  ~callback:(fun ~err:(x675 : Error.t) ->
                                               fun ~resp:(x676 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x674
                                                      [|(Error.t_to_js x675);(
                                                        Buffer.t_to_js x676)|]))))|])
        let (prependOnceListener''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x686 : t) ->
            fun ~event:(x678 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x679 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x686) "prependOnceListener"
                     [|((match x678 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x680 : Ojs.t) ->
                            fun (x681 : Ojs.t) ->
                              fun (x682 : Ojs.t) ->
                                x679 ~certificate:(Buffer.t_of_js x680)
                                  ~issuer:(Buffer.t_of_js x681)
                                  ~callback:(fun
                                               ~err:(x683 : Error.t or_null)
                                               ->
                                               fun ~resp:(x685 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x682
                                                      [|(or_null_to_js
                                                           Error.t_to_js x683);(
                                                        Buffer.t_to_js x685)|]))))|])
        let (prependOnceListener'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      sessionData:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x693 : t) ->
            fun ~event:(x687 : [ `resumeSession ]) ->
              fun
                ~listener:(x688 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          sessionData:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x693) "prependOnceListener"
                     [|((match x687 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x689 : Ojs.t) ->
                            fun (x690 : Ojs.t) ->
                              x688 ~sessionId:(Buffer.t_of_js x689)
                                ~callback:(fun ~err:(x691 : Error.t) ->
                                             fun
                                               ~sessionData:(x692 : Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x690
                                                    [|(Error.t_to_js x691);(
                                                      Buffer.t_to_js x692)|]))))|])
        let (prependOnceListener''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x697 : t) ->
            fun ~event:(x694 : [ `secureConnection ]) ->
              fun ~listener:(x695 : tlsSocket:tls_TLSSocket -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x697) "prependOnceListener"
                     [|((match x694 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x696 :
                                                                    Ojs.t) ->
                                                                    x695
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x696)))|])
        let (prependOnceListener'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit) ->
                t)
          =
          fun (x702 : t) ->
            fun ~event:(x698 : [ `keylog ]) ->
              fun
                ~listener:(x699 :
                            line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x702) "prependOnceListener"
                     [|((match x698 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x700 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x701 :
                                                                    Ojs.t) ->
                                                                    x699
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x700)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x701)))|])
        let (cast : t -> Net.Server.t) =
          fun (x703 : t) -> Net.Server.t_of_js (t_to_js x703)
      end
    module SecurePair =
      struct
        type t = tls_SecurePair
        let rec t_of_js : Ojs.t -> t =
          fun (x705 : Ojs.t) -> tls_SecurePair_of_js x705
        and t_to_js : t -> Ojs.t =
          fun (x704 : tls_SecurePair) -> tls_SecurePair_to_js x704
        let (get_encrypted : t -> tls_TLSSocket) =
          fun (x706 : t) ->
            tls_TLSSocket_of_js
              (Ojs.get_prop_ascii (t_to_js x706) "encrypted")
        let (set_encrypted : t -> tls_TLSSocket -> unit) =
          fun (x707 : t) ->
            fun (x708 : tls_TLSSocket) ->
              Ojs.set_prop_ascii (t_to_js x707) "encrypted"
                (tls_TLSSocket_to_js x708)
        let (get_cleartext : t -> tls_TLSSocket) =
          fun (x709 : t) ->
            tls_TLSSocket_of_js
              (Ojs.get_prop_ascii (t_to_js x709) "cleartext")
        let (set_cleartext : t -> tls_TLSSocket -> unit) =
          fun (x710 : t) ->
            fun (x711 : tls_TLSSocket) ->
              Ojs.set_prop_ascii (t_to_js x710) "cleartext"
                (tls_TLSSocket_to_js x711)
      end
    module SecureVersion =
      struct
        type t = [ `TLSv1  | `TLSv1_1  | `TLSv1_2  | `TLSv1_3 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x713 : Ojs.t) ->
            let x714 = x713 in
            match Ojs.string_of_js x714 with
            | "TLSv1" -> `TLSv1
            | "TLSv1.1" -> `TLSv1_1
            | "TLSv1.2" -> `TLSv1_2
            | "TLSv1.3" -> `TLSv1_3
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x712 : [ `TLSv1  | `TLSv1_1  | `TLSv1_2  | `TLSv1_3 ]) ->
            match x712 with
            | `TLSv1 -> Ojs.string_to_js "TLSv1"
            | `TLSv1_1 -> Ojs.string_to_js "TLSv1.1"
            | `TLSv1_2 -> Ojs.string_to_js "TLSv1.2"
            | `TLSv1_3 -> Ojs.string_to_js "TLSv1.3"
      end
    module SecureContextOptions =
      struct
        type t = tls_SecureContextOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x716 : Ojs.t) -> tls_SecureContextOptions_of_js x716
        and t_to_js : t -> Ojs.t =
          fun (x715 : tls_SecureContextOptions) ->
            tls_SecureContextOptions_to_js x715
        let (get_ca :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string) =
          fun (x717 : t) ->
            or_string_of_js
              (fun (x718 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x720 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x721 : Ojs.t) ->
                           or_string_of_js Buffer.t_of_js x721) x720) x718)
              (Ojs.get_prop_ascii (t_to_js x717) "ca")
        let (set_ca :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string -> unit)
          =
          fun (x723 : t) ->
            fun (x724 : (Buffer.t, Buffer.t or_string list) union2 or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x723) "ca"
                (or_string_to_js
                   (fun (x725 : (Buffer.t, Buffer.t or_string list) union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun (x727 : Buffer.t or_string list) ->
                           Ojs.list_to_js
                             (fun (x728 : Buffer.t or_string) ->
                                or_string_to_js Buffer.t_to_js x728) x727)
                        x725) x724)
        let (get_cert :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string) =
          fun (x730 : t) ->
            or_string_of_js
              (fun (x731 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x733 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x734 : Ojs.t) ->
                           or_string_of_js Buffer.t_of_js x734) x733) x731)
              (Ojs.get_prop_ascii (t_to_js x730) "cert")
        let (set_cert :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string -> unit)
          =
          fun (x736 : t) ->
            fun (x737 : (Buffer.t, Buffer.t or_string list) union2 or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x736) "cert"
                (or_string_to_js
                   (fun (x738 : (Buffer.t, Buffer.t or_string list) union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun (x740 : Buffer.t or_string list) ->
                           Ojs.list_to_js
                             (fun (x741 : Buffer.t or_string) ->
                                or_string_to_js Buffer.t_to_js x741) x740)
                        x738) x737)
        let (get_sigalgs : t -> string) =
          fun (x743 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x743) "sigalgs")
        let (set_sigalgs : t -> string -> unit) =
          fun (x744 : t) ->
            fun (x745 : string) ->
              Ojs.set_prop_ascii (t_to_js x744) "sigalgs"
                (Ojs.string_to_js x745)
        let (get_ciphers : t -> string) =
          fun (x746 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x746) "ciphers")
        let (set_ciphers : t -> string -> unit) =
          fun (x747 : t) ->
            fun (x748 : string) ->
              Ojs.set_prop_ascii (t_to_js x747) "ciphers"
                (Ojs.string_to_js x748)
        let (get_clientCertEngine : t -> string) =
          fun (x749 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x749) "clientCertEngine")
        let (set_clientCertEngine : t -> string -> unit) =
          fun (x750 : t) ->
            fun (x751 : string) ->
              Ojs.set_prop_ascii (t_to_js x750) "clientCertEngine"
                (Ojs.string_to_js x751)
        let (get_crl :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string) =
          fun (x752 : t) ->
            or_string_of_js
              (fun (x753 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x755 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x756 : Ojs.t) ->
                           or_string_of_js Buffer.t_of_js x756) x755) x753)
              (Ojs.get_prop_ascii (t_to_js x752) "crl")
        let (set_crl :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string -> unit)
          =
          fun (x758 : t) ->
            fun (x759 : (Buffer.t, Buffer.t or_string list) union2 or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x758) "crl"
                (or_string_to_js
                   (fun (x760 : (Buffer.t, Buffer.t or_string list) union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun (x762 : Buffer.t or_string list) ->
                           Ojs.list_to_js
                             (fun (x763 : Buffer.t or_string) ->
                                or_string_to_js Buffer.t_to_js x763) x762)
                        x760) x759)
        let (get_dhparam : t -> Buffer.t or_string) =
          fun (x765 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x765) "dhparam")
        let (set_dhparam : t -> Buffer.t or_string -> unit) =
          fun (x767 : t) ->
            fun (x768 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x767) "dhparam"
                (or_string_to_js Buffer.t_to_js x768)
        let (get_ecdhCurve : t -> string) =
          fun (x770 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x770) "ecdhCurve")
        let (set_ecdhCurve : t -> string -> unit) =
          fun (x771 : t) ->
            fun (x772 : string) ->
              Ojs.set_prop_ascii (t_to_js x771) "ecdhCurve"
                (Ojs.string_to_js x772)
        let (get_honorCipherOrder : t -> bool) =
          fun (x773 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x773) "honorCipherOrder")
        let (set_honorCipherOrder : t -> bool -> unit) =
          fun (x774 : t) ->
            fun (x775 : bool) ->
              Ojs.set_prop_ascii (t_to_js x774) "honorCipherOrder"
                (Ojs.bool_to_js x775)
        let (get_key :
          t ->
            (Buffer.t, (Buffer.t, tls_KeyObject) union2 list) union2
              or_string)
          =
          fun (x776 : t) ->
            or_string_of_js
              (fun (x777 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x779 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x780 : Ojs.t) ->
                           union2_of_js Buffer.t_of_js tls_KeyObject_of_js
                             x780) x779) x777)
              (Ojs.get_prop_ascii (t_to_js x776) "key")
        let (set_key :
          t ->
            (Buffer.t, (Buffer.t, tls_KeyObject) union2 list) union2
              or_string -> unit)
          =
          fun (x783 : t) ->
            fun
              (x784 :
                (Buffer.t, (Buffer.t, tls_KeyObject) union2 list) union2
                  or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x783) "key"
                (or_string_to_js
                   (fun
                      (x785 :
                        (Buffer.t, (Buffer.t, tls_KeyObject) union2 list)
                          union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun (x787 : (Buffer.t, tls_KeyObject) union2 list)
                           ->
                           Ojs.list_to_js
                             (fun (x788 : (Buffer.t, tls_KeyObject) union2)
                                ->
                                union2_to_js Buffer.t_to_js
                                  tls_KeyObject_to_js x788) x787) x785) x784)
        let (get_privateKeyEngine : t -> string) =
          fun (x791 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x791) "privateKeyEngine")
        let (set_privateKeyEngine : t -> string -> unit) =
          fun (x792 : t) ->
            fun (x793 : string) ->
              Ojs.set_prop_ascii (t_to_js x792) "privateKeyEngine"
                (Ojs.string_to_js x793)
        let (get_privateKeyIdentifier : t -> string) =
          fun (x794 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x794) "privateKeyIdentifier")
        let (set_privateKeyIdentifier : t -> string -> unit) =
          fun (x795 : t) ->
            fun (x796 : string) ->
              Ojs.set_prop_ascii (t_to_js x795) "privateKeyIdentifier"
                (Ojs.string_to_js x796)
        let (get_maxVersion : t -> tls_SecureVersion) =
          fun (x797 : t) ->
            tls_SecureVersion_of_js
              (Ojs.get_prop_ascii (t_to_js x797) "maxVersion")
        let (set_maxVersion : t -> tls_SecureVersion -> unit) =
          fun (x798 : t) ->
            fun (x799 : tls_SecureVersion) ->
              Ojs.set_prop_ascii (t_to_js x798) "maxVersion"
                (tls_SecureVersion_to_js x799)
        let (get_minVersion : t -> tls_SecureVersion) =
          fun (x800 : t) ->
            tls_SecureVersion_of_js
              (Ojs.get_prop_ascii (t_to_js x800) "minVersion")
        let (set_minVersion : t -> tls_SecureVersion -> unit) =
          fun (x801 : t) ->
            fun (x802 : tls_SecureVersion) ->
              Ojs.set_prop_ascii (t_to_js x801) "minVersion"
                (tls_SecureVersion_to_js x802)
        let (get_passphrase : t -> string) =
          fun (x803 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x803) "passphrase")
        let (set_passphrase : t -> string -> unit) =
          fun (x804 : t) ->
            fun (x805 : string) ->
              Ojs.set_prop_ascii (t_to_js x804) "passphrase"
                (Ojs.string_to_js x805)
        let (get_pfx :
          t ->
            (Buffer.t, (Buffer.t, tls_PxfObject) union2 or_string list)
              union2 or_string)
          =
          fun (x806 : t) ->
            or_string_of_js
              (fun (x807 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x809 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x810 : Ojs.t) ->
                           or_string_of_js
                             (fun (x811 : Ojs.t) ->
                                union2_of_js Buffer.t_of_js
                                  tls_PxfObject_of_js x811) x810) x809) x807)
              (Ojs.get_prop_ascii (t_to_js x806) "pfx")
        let (set_pfx :
          t ->
            (Buffer.t, (Buffer.t, tls_PxfObject) union2 or_string list)
              union2 or_string -> unit)
          =
          fun (x814 : t) ->
            fun
              (x815 :
                (Buffer.t, (Buffer.t, tls_PxfObject) union2 or_string list)
                  union2 or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x814) "pfx"
                (or_string_to_js
                   (fun
                      (x816 :
                        (Buffer.t,
                          (Buffer.t, tls_PxfObject) union2 or_string list)
                          union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun
                           (x818 :
                             (Buffer.t, tls_PxfObject) union2 or_string list)
                           ->
                           Ojs.list_to_js
                             (fun
                                (x819 :
                                  (Buffer.t, tls_PxfObject) union2 or_string)
                                ->
                                or_string_to_js
                                  (fun
                                     (x820 :
                                       (Buffer.t, tls_PxfObject) union2)
                                     ->
                                     union2_to_js Buffer.t_to_js
                                       tls_PxfObject_to_js x820) x819) x818)
                        x816) x815)
        let (get_secureOptions : t -> int) =
          fun (x823 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x823) "secureOptions")
        let (set_secureOptions : t -> int -> unit) =
          fun (x824 : t) ->
            fun (x825 : int) ->
              Ojs.set_prop_ascii (t_to_js x824) "secureOptions"
                (Ojs.int_to_js x825)
        let (get_secureProtocol : t -> string) =
          fun (x826 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x826) "secureProtocol")
        let (set_secureProtocol : t -> string -> unit) =
          fun (x827 : t) ->
            fun (x828 : string) ->
              Ojs.set_prop_ascii (t_to_js x827) "secureProtocol"
                (Ojs.string_to_js x828)
        let (get_sessionIdContext : t -> string) =
          fun (x829 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x829) "sessionIdContext")
        let (set_sessionIdContext : t -> string -> unit) =
          fun (x830 : t) ->
            fun (x831 : string) ->
              Ojs.set_prop_ascii (t_to_js x830) "sessionIdContext"
                (Ojs.string_to_js x831)
        let (get_ticketKeys : t -> Buffer.t) =
          fun (x832 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x832) "ticketKeys")
        let (set_ticketKeys : t -> Buffer.t -> unit) =
          fun (x833 : t) ->
            fun (x834 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x833) "ticketKeys"
                (Buffer.t_to_js x834)
        let (get_sessionTimeout : t -> int) =
          fun (x835 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x835) "sessionTimeout")
        let (set_sessionTimeout : t -> int -> unit) =
          fun (x836 : t) ->
            fun (x837 : int) ->
              Ojs.set_prop_ascii (t_to_js x836) "sessionTimeout"
                (Ojs.int_to_js x837)
      end
    module SecureContext =
      struct
        type t = tls_SecureContext
        let rec t_of_js : Ojs.t -> t =
          fun (x839 : Ojs.t) -> tls_SecureContext_of_js x839
        and t_to_js : t -> Ojs.t =
          fun (x838 : tls_SecureContext) -> tls_SecureContext_to_js x838
        let (get_context : t -> any) =
          fun (x840 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x840) "context")
        let (set_context : t -> any -> unit) =
          fun (x841 : t) ->
            fun (x842 : any) ->
              Ojs.set_prop_ascii (t_to_js x841) "context" (any_to_js x842)
      end
    let (checkServerIdentity :
      host:string -> cert:tls_PeerCertificate -> Error.t or_undefined) =
      fun ~host:(x843 : string) ->
        fun ~cert:(x844 : tls_PeerCertificate) ->
          or_undefined_of_js Error.t_of_js
            (Ojs.call Import.tls "checkServerIdentity"
               [|(Ojs.string_to_js x843);(tls_PeerCertificate_to_js x844)|])
    let (createServer :
      ?secureConnectionListener:(socket:tls_TLSSocket -> unit) ->
        unit -> tls_Server)
      =
      fun
        ?secureConnectionListener:(x846 :
                                    (socket:tls_TLSSocket -> unit) option)
        ->
        fun () ->
          tls_Server_of_js
            (let x850 = Import.tls in
             Ojs.call (Ojs.get_prop_ascii x850 "createServer") "apply"
               [|x850;((let x847 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x846 with
                         | Some x848 ->
                             ignore
                               (Ojs.call x847 "push"
                                  [|(Ojs.fun_to_js 1
                                       (fun (x849 : Ojs.t) ->
                                          x848
                                            ~socket:(tls_TLSSocket_of_js x849)))|])
                         | None -> ());
                        x847))|])
    let (createServer :
      options:tls_TlsOptions ->
        ?secureConnectionListener:(socket:tls_TLSSocket -> unit) ->
          unit -> tls_Server)
      =
      fun ~options:(x851 : tls_TlsOptions) ->
        fun
          ?secureConnectionListener:(x852 :
                                      (socket:tls_TLSSocket -> unit) option)
          ->
          fun () ->
            tls_Server_of_js
              (let x856 = Import.tls in
               Ojs.call (Ojs.get_prop_ascii x856 "createServer") "apply"
                 [|x856;((let x853 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x853 "push"
                               [|(tls_TlsOptions_to_js x851)|]);
                          (match x852 with
                           | Some x854 ->
                               ignore
                                 (Ojs.call x853 "push"
                                    [|(Ojs.fun_to_js 1
                                         (fun (x855 : Ojs.t) ->
                                            x854
                                              ~socket:(tls_TLSSocket_of_js
                                                         x855)))|])
                           | None -> ());
                          x853))|])
    let (connect :
      options:tls_ConnectionOptions ->
        ?secureConnectListener:(unit -> unit) -> unit -> tls_TLSSocket)
      =
      fun ~options:(x857 : tls_ConnectionOptions) ->
        fun ?secureConnectListener:(x858 : (unit -> unit) option) ->
          fun () ->
            tls_TLSSocket_of_js
              (let x861 = Import.tls in
               Ojs.call (Ojs.get_prop_ascii x861 "connect") "apply"
                 [|x861;((let x859 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x859 "push"
                               [|(tls_ConnectionOptions_to_js x857)|]);
                          (match x858 with
                           | Some x860 ->
                               ignore
                                 (Ojs.call x859 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x860 ()))|])
                           | None -> ());
                          x859))|])
    let (connect :
      port:int ->
        ?host:string ->
          ?options:tls_ConnectionOptions ->
            ?secureConnectListener:(unit -> unit) -> unit -> tls_TLSSocket)
      =
      fun ~port:(x862 : int) ->
        fun ?host:(x863 : string option) ->
          fun ?options:(x864 : tls_ConnectionOptions option) ->
            fun ?secureConnectListener:(x865 : (unit -> unit) option) ->
              fun () ->
                tls_TLSSocket_of_js
                  (let x870 = Import.tls in
                   Ojs.call (Ojs.get_prop_ascii x870 "connect") "apply"
                     [|x870;((let x866 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x866 "push"
                                   [|(Ojs.int_to_js x862)|]);
                              (match x863 with
                               | Some x869 ->
                                   ignore
                                     (Ojs.call x866 "push"
                                        [|(Ojs.string_to_js x869)|])
                               | None -> ());
                              (match x864 with
                               | Some x868 ->
                                   ignore
                                     (Ojs.call x866 "push"
                                        [|(tls_ConnectionOptions_to_js x868)|])
                               | None -> ());
                              (match x865 with
                               | Some x867 ->
                                   ignore
                                     (Ojs.call x866 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x867 ()))|])
                               | None -> ());
                              x866))|])
    let (connect :
      port:int ->
        ?options:tls_ConnectionOptions ->
          ?secureConnectListener:(unit -> unit) -> unit -> tls_TLSSocket)
      =
      fun ~port:(x871 : int) ->
        fun ?options:(x872 : tls_ConnectionOptions option) ->
          fun ?secureConnectListener:(x873 : (unit -> unit) option) ->
            fun () ->
              tls_TLSSocket_of_js
                (let x877 = Import.tls in
                 Ojs.call (Ojs.get_prop_ascii x877 "connect") "apply"
                   [|x877;((let x874 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x874 "push" [|(Ojs.int_to_js x871)|]);
                            (match x872 with
                             | Some x876 ->
                                 ignore
                                   (Ojs.call x874 "push"
                                      [|(tls_ConnectionOptions_to_js x876)|])
                             | None -> ());
                            (match x873 with
                             | Some x875 ->
                                 ignore
                                   (Ojs.call x874 "push"
                                      [|(Ojs.fun_to_js 1 (fun _ -> x875 ()))|])
                             | None -> ());
                            x874))|])
    let (createSecurePair :
      ?credentials:tls_SecureContext ->
        ?isServer:bool ->
          ?requestCert:bool ->
            ?rejectUnauthorized:bool -> unit -> tls_SecurePair)
      =
      fun ?credentials:(x878 : tls_SecureContext option) ->
        fun ?isServer:(x879 : bool option) ->
          fun ?requestCert:(x880 : bool option) ->
            fun ?rejectUnauthorized:(x881 : bool option) ->
              fun () ->
                tls_SecurePair_of_js
                  (let x887 = Import.tls in
                   Ojs.call (Ojs.get_prop_ascii x887 "createSecurePair")
                     "apply"
                     [|x887;((let x882 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x878 with
                               | Some x886 ->
                                   ignore
                                     (Ojs.call x882 "push"
                                        [|(tls_SecureContext_to_js x886)|])
                               | None -> ());
                              (match x879 with
                               | Some x885 ->
                                   ignore
                                     (Ojs.call x882 "push"
                                        [|(Ojs.bool_to_js x885)|])
                               | None -> ());
                              (match x880 with
                               | Some x884 ->
                                   ignore
                                     (Ojs.call x882 "push"
                                        [|(Ojs.bool_to_js x884)|])
                               | None -> ());
                              (match x881 with
                               | Some x883 ->
                                   ignore
                                     (Ojs.call x882 "push"
                                        [|(Ojs.bool_to_js x883)|])
                               | None -> ());
                              x882))|])
    let (createSecureContext :
      ?options:tls_SecureContextOptions -> unit -> tls_SecureContext) =
      fun ?options:(x888 : tls_SecureContextOptions option) ->
        fun () ->
          tls_SecureContext_of_js
            (let x891 = Import.tls in
             Ojs.call (Ojs.get_prop_ascii x891 "createSecureContext") "apply"
               [|x891;((let x889 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x888 with
                         | Some x890 ->
                             ignore
                               (Ojs.call x889 "push"
                                  [|(tls_SecureContextOptions_to_js x890)|])
                         | None -> ());
                        x889))|])
    let (getCiphers : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.tls "getCiphers" [||])
    let (dEFAULT_ECDH_CURVE : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.tls "DEFAULT_ECDH_CURVE")
    let (dEFAULT_MAX_VERSION : tls_SecureVersion) =
      tls_SecureVersion_of_js
        (Ojs.get_prop_ascii Import.tls "DEFAULT_MAX_VERSION")
    let (dEFAULT_MIN_VERSION : tls_SecureVersion) =
      tls_SecureVersion_of_js
        (Ojs.get_prop_ascii Import.tls "DEFAULT_MIN_VERSION")
    let (rootCertificates : string list) =
      Ojs.list_of_js Ojs.string_of_js
        (Ojs.get_prop_ascii Import.tls "rootCertificates")
  end
