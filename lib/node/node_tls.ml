[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_reject_unauthorized : t -> bool) =
      fun (x3 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3) "rejectUnauthorized")
    let (set_reject_unauthorized : t -> bool -> unit) =
      fun (x4 : t) ->
        fun (x5 : bool) ->
          Ojs.set_prop_ascii (t_to_js x4) "rejectUnauthorized"
            (Ojs.bool_to_js x5)
    let (get_request_cert : t -> bool) =
      fun (x6 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x6) "requestCert")
    let (set_request_cert : t -> bool -> unit) =
      fun (x7 : t) ->
        fun (x8 : bool) ->
          Ojs.set_prop_ascii (t_to_js x7) "requestCert" (Ojs.bool_to_js x8)
  end
module Tls =
  struct
    open Node_net
    let (client_reneg_limit : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.tls "CLIENT_RENEG_LIMIT")
    let (client_reneg_window : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.tls "CLIENT_RENEG_WINDOW")
    module Certificate =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x10 : Ojs.t) -> x10
        and t_to_js : t -> Ojs.t = fun (x9 : Ojs.t) -> x9
        let (get_c : t -> string) =
          fun (x11 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x11) "C")
        let (set_c : t -> string -> unit) =
          fun (x12 : t) ->
            fun (x13 : string) ->
              Ojs.set_prop_ascii (t_to_js x12) "C" (Ojs.string_to_js x13)
        let (get_st : t -> string) =
          fun (x14 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x14) "ST")
        let (set_st : t -> string -> unit) =
          fun (x15 : t) ->
            fun (x16 : string) ->
              Ojs.set_prop_ascii (t_to_js x15) "ST" (Ojs.string_to_js x16)
        let (get_l : t -> string) =
          fun (x17 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x17) "L")
        let (set_l : t -> string -> unit) =
          fun (x18 : t) ->
            fun (x19 : string) ->
              Ojs.set_prop_ascii (t_to_js x18) "L" (Ojs.string_to_js x19)
        let (get_o : t -> string) =
          fun (x20 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x20) "O")
        let (set_o : t -> string -> unit) =
          fun (x21 : t) ->
            fun (x22 : string) ->
              Ojs.set_prop_ascii (t_to_js x21) "O" (Ojs.string_to_js x22)
        let (get_ou : t -> string) =
          fun (x23 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x23) "OU")
        let (set_ou : t -> string -> unit) =
          fun (x24 : t) ->
            fun (x25 : string) ->
              Ojs.set_prop_ascii (t_to_js x24) "OU" (Ojs.string_to_js x25)
        let (get_cn : t -> string) =
          fun (x26 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x26) "CN")
        let (set_cn : t -> string -> unit) =
          fun (x27 : t) ->
            fun (x28 : string) ->
              Ojs.set_prop_ascii (t_to_js x27) "CN" (Ojs.string_to_js x28)
      end
    module PeerCertificate =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x30 : Ojs.t) -> x30
        and t_to_js : t -> Ojs.t = fun (x29 : Ojs.t) -> x29
        let (get_subject : t -> Certificate.t) =
          fun (x31 : t) ->
            Certificate.t_of_js (Ojs.get_prop_ascii (t_to_js x31) "subject")
        let (set_subject : t -> Certificate.t -> unit) =
          fun (x32 : t) ->
            fun (x33 : Certificate.t) ->
              Ojs.set_prop_ascii (t_to_js x32) "subject"
                (Certificate.t_to_js x33)
        let (get_issuer : t -> Certificate.t) =
          fun (x34 : t) ->
            Certificate.t_of_js (Ojs.get_prop_ascii (t_to_js x34) "issuer")
        let (set_issuer : t -> Certificate.t -> unit) =
          fun (x35 : t) ->
            fun (x36 : Certificate.t) ->
              Ojs.set_prop_ascii (t_to_js x35) "issuer"
                (Certificate.t_to_js x36)
        let (get_subjectaltname : t -> string) =
          fun (x37 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x37) "subjectaltname")
        let (set_subjectaltname : t -> string -> unit) =
          fun (x38 : t) ->
            fun (x39 : string) ->
              Ojs.set_prop_ascii (t_to_js x38) "subjectaltname"
                (Ojs.string_to_js x39)
        let (get_info_access : t -> string list Dict.t) =
          fun (x40 : t) ->
            Dict.t_of_js
              (fun (x41 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x41)
              (Ojs.get_prop_ascii (t_to_js x40) "infoAccess")
        let (set_info_access : t -> string list Dict.t -> unit) =
          fun (x43 : t) ->
            fun (x44 : string list Dict.t) ->
              Ojs.set_prop_ascii (t_to_js x43) "infoAccess"
                (Dict.t_to_js
                   (fun (x45 : string list) ->
                      Ojs.list_to_js Ojs.string_to_js x45) x44)
        let (get_modulus : t -> string) =
          fun (x47 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x47) "modulus")
        let (set_modulus : t -> string -> unit) =
          fun (x48 : t) ->
            fun (x49 : string) ->
              Ojs.set_prop_ascii (t_to_js x48) "modulus"
                (Ojs.string_to_js x49)
        let (get_exponent : t -> string) =
          fun (x50 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x50) "exponent")
        let (set_exponent : t -> string -> unit) =
          fun (x51 : t) ->
            fun (x52 : string) ->
              Ojs.set_prop_ascii (t_to_js x51) "exponent"
                (Ojs.string_to_js x52)
        let (get_valid_from : t -> string) =
          fun (x53 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x53) "valid_from")
        let (set_valid_from : t -> string -> unit) =
          fun (x54 : t) ->
            fun (x55 : string) ->
              Ojs.set_prop_ascii (t_to_js x54) "valid_from"
                (Ojs.string_to_js x55)
        let (get_valid_to : t -> string) =
          fun (x56 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x56) "valid_to")
        let (set_valid_to : t -> string -> unit) =
          fun (x57 : t) ->
            fun (x58 : string) ->
              Ojs.set_prop_ascii (t_to_js x57) "valid_to"
                (Ojs.string_to_js x58)
        let (get_fingerprint : t -> string) =
          fun (x59 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x59) "fingerprint")
        let (set_fingerprint : t -> string -> unit) =
          fun (x60 : t) ->
            fun (x61 : string) ->
              Ojs.set_prop_ascii (t_to_js x60) "fingerprint"
                (Ojs.string_to_js x61)
        let (get_fingerprint256 : t -> string) =
          fun (x62 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x62) "fingerprint256")
        let (set_fingerprint256 : t -> string -> unit) =
          fun (x63 : t) ->
            fun (x64 : string) ->
              Ojs.set_prop_ascii (t_to_js x63) "fingerprint256"
                (Ojs.string_to_js x64)
        let (get_ext_key_usage : t -> string list) =
          fun (x65 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x65) "ext_key_usage")
        let (set_ext_key_usage : t -> string list -> unit) =
          fun (x67 : t) ->
            fun (x68 : string list) ->
              Ojs.set_prop_ascii (t_to_js x67) "ext_key_usage"
                (Ojs.list_to_js Ojs.string_to_js x68)
        let (get_serial_number : t -> string) =
          fun (x70 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x70) "serialNumber")
        let (set_serial_number : t -> string -> unit) =
          fun (x71 : t) ->
            fun (x72 : string) ->
              Ojs.set_prop_ascii (t_to_js x71) "serialNumber"
                (Ojs.string_to_js x72)
        let (get_raw : t -> Buffer.t) =
          fun (x73 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x73) "raw")
        let (set_raw : t -> Buffer.t -> unit) =
          fun (x74 : t) ->
            fun (x75 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x74) "raw" (Buffer.t_to_js x75)
      end
    module DetailedPeerCertificate =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x77 : Ojs.t) -> x77
        and t_to_js : t -> Ojs.t = fun (x76 : Ojs.t) -> x76
        let (get_issuer_certificate : t -> t) =
          fun (x78 : t) ->
            t_of_js (Ojs.get_prop_ascii (t_to_js x78) "issuerCertificate")
        let (set_issuer_certificate : t -> t -> unit) =
          fun (x79 : t) ->
            fun (x80 : t) ->
              Ojs.set_prop_ascii (t_to_js x79) "issuerCertificate"
                (t_to_js x80)
        let (cast : t -> PeerCertificate.t) =
          fun (x81 : t) -> PeerCertificate.t_of_js (t_to_js x81)
      end
    module CipherNameAndProtocol =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x83 : Ojs.t) -> x83
        and t_to_js : t -> Ojs.t = fun (x82 : Ojs.t) -> x82
        let (get_name : t -> string) =
          fun (x84 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x84) "name")
        let (set_name : t -> string -> unit) =
          fun (x85 : t) ->
            fun (x86 : string) ->
              Ojs.set_prop_ascii (t_to_js x85) "name" (Ojs.string_to_js x86)
        let (get_version : t -> string) =
          fun (x87 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x87) "version")
        let (set_version : t -> string -> unit) =
          fun (x88 : t) ->
            fun (x89 : string) ->
              Ojs.set_prop_ascii (t_to_js x88) "version"
                (Ojs.string_to_js x89)
        let (get_standard_name : t -> string) =
          fun (x90 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x90) "standardName")
        let (set_standard_name : t -> string -> unit) =
          fun (x91 : t) ->
            fun (x92 : string) ->
              Ojs.set_prop_ascii (t_to_js x91) "standardName"
                (Ojs.string_to_js x92)
      end
    module EphemeralKeyInfo =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x94 : Ojs.t) -> x94
        and t_to_js : t -> Ojs.t = fun (x93 : Ojs.t) -> x93
        let (get_type : t -> string) =
          fun (x95 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x95) "type")
        let (set_type : t -> string -> unit) =
          fun (x96 : t) ->
            fun (x97 : string) ->
              Ojs.set_prop_ascii (t_to_js x96) "type" (Ojs.string_to_js x97)
        let (get_name : t -> string) =
          fun (x98 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x98) "name")
        let (set_name : t -> string -> unit) =
          fun (x99 : t) ->
            fun (x100 : string) ->
              Ojs.set_prop_ascii (t_to_js x99) "name" (Ojs.string_to_js x100)
        let (get_size : t -> int) =
          fun (x101 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x101) "size")
        let (set_size : t -> int -> unit) =
          fun (x102 : t) ->
            fun (x103 : int) ->
              Ojs.set_prop_ascii (t_to_js x102) "size" (Ojs.int_to_js x103)
      end
    module KeyObject =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x105 : Ojs.t) -> x105
        and t_to_js : t -> Ojs.t = fun (x104 : Ojs.t) -> x104
        let (get_pem : t -> Buffer.t or_string) =
          fun (x106 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x106) "pem")
        let (set_pem : t -> Buffer.t or_string -> unit) =
          fun (x108 : t) ->
            fun (x109 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x108) "pem"
                (or_string_to_js Buffer.t_to_js x109)
        let (get_passphrase : t -> string) =
          fun (x111 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x111) "passphrase")
        let (set_passphrase : t -> string -> unit) =
          fun (x112 : t) ->
            fun (x113 : string) ->
              Ojs.set_prop_ascii (t_to_js x112) "passphrase"
                (Ojs.string_to_js x113)
      end
    module PxfObject =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x115 : Ojs.t) -> x115
        and t_to_js : t -> Ojs.t = fun (x114 : Ojs.t) -> x114
        let (get_buf : t -> Buffer.t or_string) =
          fun (x116 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x116) "buf")
        let (set_buf : t -> Buffer.t or_string -> unit) =
          fun (x118 : t) ->
            fun (x119 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x118) "buf"
                (or_string_to_js Buffer.t_to_js x119)
        let (get_passphrase : t -> string) =
          fun (x121 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x121) "passphrase")
        let (set_passphrase : t -> string -> unit) =
          fun (x122 : t) ->
            fun (x123 : string) ->
              Ojs.set_prop_ascii (t_to_js x122) "passphrase"
                (Ojs.string_to_js x123)
      end
    module SecureVersion =
      struct
        type t = [ `TLSv1  | `TLSv1_1  | `TLSv1_2  | `TLSv1_3 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x125 : Ojs.t) ->
            let x126 = x125 in
            match Ojs.string_of_js x126 with
            | "TLSv1" -> `TLSv1
            | "TLSv1.1" -> `TLSv1_1
            | "TLSv1.2" -> `TLSv1_2
            | "TLSv1.3" -> `TLSv1_3
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x124 : [ `TLSv1  | `TLSv1_1  | `TLSv1_2  | `TLSv1_3 ]) ->
            match x124 with
            | `TLSv1 -> Ojs.string_to_js "TLSv1"
            | `TLSv1_1 -> Ojs.string_to_js "TLSv1.1"
            | `TLSv1_2 -> Ojs.string_to_js "TLSv1.2"
            | `TLSv1_3 -> Ojs.string_to_js "TLSv1.3"
      end
    module SecureContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x128 : Ojs.t) -> x128
        and t_to_js : t -> Ojs.t = fun (x127 : Ojs.t) -> x127
        let (get_context : t -> any) =
          fun (x129 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x129) "context")
        let (set_context : t -> any -> unit) =
          fun (x130 : t) ->
            fun (x131 : any) ->
              Ojs.set_prop_ascii (t_to_js x130) "context" (any_to_js x131)
      end
    module SecureContextOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x133 : Ojs.t) -> x133
        and t_to_js : t -> Ojs.t = fun (x132 : Ojs.t) -> x132
        let (get_ca :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string) =
          fun (x134 : t) ->
            or_string_of_js
              (fun (x135 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x137 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x138 : Ojs.t) ->
                           or_string_of_js Buffer.t_of_js x138) x137) x135)
              (Ojs.get_prop_ascii (t_to_js x134) "ca")
        let (set_ca :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string -> unit)
          =
          fun (x140 : t) ->
            fun (x141 : (Buffer.t, Buffer.t or_string list) union2 or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x140) "ca"
                (or_string_to_js
                   (fun (x142 : (Buffer.t, Buffer.t or_string list) union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun (x144 : Buffer.t or_string list) ->
                           Ojs.list_to_js
                             (fun (x145 : Buffer.t or_string) ->
                                or_string_to_js Buffer.t_to_js x145) x144)
                        x142) x141)
        let (get_cert :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string) =
          fun (x147 : t) ->
            or_string_of_js
              (fun (x148 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x150 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x151 : Ojs.t) ->
                           or_string_of_js Buffer.t_of_js x151) x150) x148)
              (Ojs.get_prop_ascii (t_to_js x147) "cert")
        let (set_cert :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string -> unit)
          =
          fun (x153 : t) ->
            fun (x154 : (Buffer.t, Buffer.t or_string list) union2 or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x153) "cert"
                (or_string_to_js
                   (fun (x155 : (Buffer.t, Buffer.t or_string list) union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun (x157 : Buffer.t or_string list) ->
                           Ojs.list_to_js
                             (fun (x158 : Buffer.t or_string) ->
                                or_string_to_js Buffer.t_to_js x158) x157)
                        x155) x154)
        let (get_sigalgs : t -> string) =
          fun (x160 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x160) "sigalgs")
        let (set_sigalgs : t -> string -> unit) =
          fun (x161 : t) ->
            fun (x162 : string) ->
              Ojs.set_prop_ascii (t_to_js x161) "sigalgs"
                (Ojs.string_to_js x162)
        let (get_ciphers : t -> string) =
          fun (x163 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x163) "ciphers")
        let (set_ciphers : t -> string -> unit) =
          fun (x164 : t) ->
            fun (x165 : string) ->
              Ojs.set_prop_ascii (t_to_js x164) "ciphers"
                (Ojs.string_to_js x165)
        let (get_client_cert_engine : t -> string) =
          fun (x166 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x166) "clientCertEngine")
        let (set_client_cert_engine : t -> string -> unit) =
          fun (x167 : t) ->
            fun (x168 : string) ->
              Ojs.set_prop_ascii (t_to_js x167) "clientCertEngine"
                (Ojs.string_to_js x168)
        let (get_crl :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string) =
          fun (x169 : t) ->
            or_string_of_js
              (fun (x170 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x172 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x173 : Ojs.t) ->
                           or_string_of_js Buffer.t_of_js x173) x172) x170)
              (Ojs.get_prop_ascii (t_to_js x169) "crl")
        let (set_crl :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string -> unit)
          =
          fun (x175 : t) ->
            fun (x176 : (Buffer.t, Buffer.t or_string list) union2 or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x175) "crl"
                (or_string_to_js
                   (fun (x177 : (Buffer.t, Buffer.t or_string list) union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun (x179 : Buffer.t or_string list) ->
                           Ojs.list_to_js
                             (fun (x180 : Buffer.t or_string) ->
                                or_string_to_js Buffer.t_to_js x180) x179)
                        x177) x176)
        let (get_dhparam : t -> Buffer.t or_string) =
          fun (x182 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x182) "dhparam")
        let (set_dhparam : t -> Buffer.t or_string -> unit) =
          fun (x184 : t) ->
            fun (x185 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x184) "dhparam"
                (or_string_to_js Buffer.t_to_js x185)
        let (get_ecdh_curve : t -> string) =
          fun (x187 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x187) "ecdhCurve")
        let (set_ecdh_curve : t -> string -> unit) =
          fun (x188 : t) ->
            fun (x189 : string) ->
              Ojs.set_prop_ascii (t_to_js x188) "ecdhCurve"
                (Ojs.string_to_js x189)
        let (get_honor_cipher_order : t -> bool) =
          fun (x190 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x190) "honorCipherOrder")
        let (set_honor_cipher_order : t -> bool -> unit) =
          fun (x191 : t) ->
            fun (x192 : bool) ->
              Ojs.set_prop_ascii (t_to_js x191) "honorCipherOrder"
                (Ojs.bool_to_js x192)
        let (get_key :
          t ->
            (Buffer.t, (Buffer.t, KeyObject.t) union2 list) union2 or_string)
          =
          fun (x193 : t) ->
            or_string_of_js
              (fun (x194 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x196 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x197 : Ojs.t) ->
                           union2_of_js Buffer.t_of_js KeyObject.t_of_js x197)
                        x196) x194) (Ojs.get_prop_ascii (t_to_js x193) "key")
        let (set_key :
          t ->
            (Buffer.t, (Buffer.t, KeyObject.t) union2 list) union2 or_string
              -> unit)
          =
          fun (x200 : t) ->
            fun
              (x201 :
                (Buffer.t, (Buffer.t, KeyObject.t) union2 list) union2
                  or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x200) "key"
                (or_string_to_js
                   (fun
                      (x202 :
                        (Buffer.t, (Buffer.t, KeyObject.t) union2 list)
                          union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun (x204 : (Buffer.t, KeyObject.t) union2 list) ->
                           Ojs.list_to_js
                             (fun (x205 : (Buffer.t, KeyObject.t) union2) ->
                                union2_to_js Buffer.t_to_js KeyObject.t_to_js
                                  x205) x204) x202) x201)
        let (get_private_key_engine : t -> string) =
          fun (x208 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x208) "privateKeyEngine")
        let (set_private_key_engine : t -> string -> unit) =
          fun (x209 : t) ->
            fun (x210 : string) ->
              Ojs.set_prop_ascii (t_to_js x209) "privateKeyEngine"
                (Ojs.string_to_js x210)
        let (get_private_key_identifier : t -> string) =
          fun (x211 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x211) "privateKeyIdentifier")
        let (set_private_key_identifier : t -> string -> unit) =
          fun (x212 : t) ->
            fun (x213 : string) ->
              Ojs.set_prop_ascii (t_to_js x212) "privateKeyIdentifier"
                (Ojs.string_to_js x213)
        let (get_max_version : t -> SecureVersion.t) =
          fun (x214 : t) ->
            SecureVersion.t_of_js
              (Ojs.get_prop_ascii (t_to_js x214) "maxVersion")
        let (set_max_version : t -> SecureVersion.t -> unit) =
          fun (x215 : t) ->
            fun (x216 : SecureVersion.t) ->
              Ojs.set_prop_ascii (t_to_js x215) "maxVersion"
                (SecureVersion.t_to_js x216)
        let (get_min_version : t -> SecureVersion.t) =
          fun (x217 : t) ->
            SecureVersion.t_of_js
              (Ojs.get_prop_ascii (t_to_js x217) "minVersion")
        let (set_min_version : t -> SecureVersion.t -> unit) =
          fun (x218 : t) ->
            fun (x219 : SecureVersion.t) ->
              Ojs.set_prop_ascii (t_to_js x218) "minVersion"
                (SecureVersion.t_to_js x219)
        let (get_passphrase : t -> string) =
          fun (x220 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x220) "passphrase")
        let (set_passphrase : t -> string -> unit) =
          fun (x221 : t) ->
            fun (x222 : string) ->
              Ojs.set_prop_ascii (t_to_js x221) "passphrase"
                (Ojs.string_to_js x222)
        let (get_pfx :
          t ->
            (Buffer.t, (Buffer.t, PxfObject.t) union2 or_string list) union2
              or_string)
          =
          fun (x223 : t) ->
            or_string_of_js
              (fun (x224 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x226 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x227 : Ojs.t) ->
                           or_string_of_js
                             (fun (x228 : Ojs.t) ->
                                union2_of_js Buffer.t_of_js PxfObject.t_of_js
                                  x228) x227) x226) x224)
              (Ojs.get_prop_ascii (t_to_js x223) "pfx")
        let (set_pfx :
          t ->
            (Buffer.t, (Buffer.t, PxfObject.t) union2 or_string list) union2
              or_string -> unit)
          =
          fun (x231 : t) ->
            fun
              (x232 :
                (Buffer.t, (Buffer.t, PxfObject.t) union2 or_string list)
                  union2 or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x231) "pfx"
                (or_string_to_js
                   (fun
                      (x233 :
                        (Buffer.t,
                          (Buffer.t, PxfObject.t) union2 or_string list)
                          union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun
                           (x235 :
                             (Buffer.t, PxfObject.t) union2 or_string list)
                           ->
                           Ojs.list_to_js
                             (fun
                                (x236 :
                                  (Buffer.t, PxfObject.t) union2 or_string)
                                ->
                                or_string_to_js
                                  (fun
                                     (x237 : (Buffer.t, PxfObject.t) union2)
                                     ->
                                     union2_to_js Buffer.t_to_js
                                       PxfObject.t_to_js x237) x236) x235)
                        x233) x232)
        let (get_secure_options : t -> int) =
          fun (x240 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x240) "secureOptions")
        let (set_secure_options : t -> int -> unit) =
          fun (x241 : t) ->
            fun (x242 : int) ->
              Ojs.set_prop_ascii (t_to_js x241) "secureOptions"
                (Ojs.int_to_js x242)
        let (get_secure_protocol : t -> string) =
          fun (x243 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x243) "secureProtocol")
        let (set_secure_protocol : t -> string -> unit) =
          fun (x244 : t) ->
            fun (x245 : string) ->
              Ojs.set_prop_ascii (t_to_js x244) "secureProtocol"
                (Ojs.string_to_js x245)
        let (get_session_id_context : t -> string) =
          fun (x246 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x246) "sessionIdContext")
        let (set_session_id_context : t -> string -> unit) =
          fun (x247 : t) ->
            fun (x248 : string) ->
              Ojs.set_prop_ascii (t_to_js x247) "sessionIdContext"
                (Ojs.string_to_js x248)
        let (get_ticket_keys : t -> Buffer.t) =
          fun (x249 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x249) "ticketKeys")
        let (set_ticket_keys : t -> Buffer.t -> unit) =
          fun (x250 : t) ->
            fun (x251 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x250) "ticketKeys"
                (Buffer.t_to_js x251)
        let (get_session_timeout : t -> int) =
          fun (x252 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x252) "sessionTimeout")
        let (set_session_timeout : t -> int -> unit) =
          fun (x253 : t) ->
            fun (x254 : int) ->
              Ojs.set_prop_ascii (t_to_js x253) "sessionTimeout"
                (Ojs.int_to_js x254)
      end
    module CommonConnectionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x256 : Ojs.t) -> x256
        and t_to_js : t -> Ojs.t = fun (x255 : Ojs.t) -> x255
        let (get_secure_context : t -> SecureContext.t) =
          fun (x257 : t) ->
            SecureContext.t_of_js
              (Ojs.get_prop_ascii (t_to_js x257) "secureContext")
        let (set_secure_context : t -> SecureContext.t -> unit) =
          fun (x258 : t) ->
            fun (x259 : SecureContext.t) ->
              Ojs.set_prop_ascii (t_to_js x258) "secureContext"
                (SecureContext.t_to_js x259)
        let (get_enable_trace : t -> bool) =
          fun (x260 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x260) "enableTrace")
        let (set_enable_trace : t -> bool -> unit) =
          fun (x261 : t) ->
            fun (x262 : bool) ->
              Ojs.set_prop_ascii (t_to_js x261) "enableTrace"
                (Ojs.bool_to_js x262)
        let (get_request_cert : t -> bool) =
          fun (x263 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x263) "requestCert")
        let (set_request_cert : t -> bool -> unit) =
          fun (x264 : t) ->
            fun (x265 : bool) ->
              Ojs.set_prop_ascii (t_to_js x264) "requestCert"
                (Ojs.bool_to_js x265)
        let (get_alpn_protocols :
          t -> (Uint8Array.t, Uint8Array.t or_string) or_array) =
          fun (x266 : t) ->
            or_array_of_js Uint8Array.t_of_js
              (fun (x268 : Ojs.t) -> or_string_of_js Uint8Array.t_of_js x268)
              (Ojs.get_prop_ascii (t_to_js x266) "ALPNProtocols")
        let (set_alpn_protocols :
          t -> (Uint8Array.t, Uint8Array.t or_string) or_array -> unit) =
          fun (x270 : t) ->
            fun (x271 : (Uint8Array.t, Uint8Array.t or_string) or_array) ->
              Ojs.set_prop_ascii (t_to_js x270) "ALPNProtocols"
                (or_array_to_js Uint8Array.t_to_js
                   (fun (x273 : Uint8Array.t or_string) ->
                      or_string_to_js Uint8Array.t_to_js x273) x271)
        let (s_ni_callback :
          t ->
            servername:string ->
              cb:(err:Error.t or_null -> ctx:SecureContext.t -> unit) -> unit)
          =
          fun (x280 : t) ->
            fun ~servername:(x275 : string) ->
              fun
                ~cb:(x276 :
                      err:Error.t or_null -> ctx:SecureContext.t -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x280) "SNICallback"
                     [|(Ojs.string_to_js x275);(Ojs.fun_to_js 2
                                                  (fun (x277 : Ojs.t) ->
                                                     fun (x279 : Ojs.t) ->
                                                       x276
                                                         ~err:(or_null_of_js
                                                                 Error.t_of_js
                                                                 x277)
                                                         ~ctx:(SecureContext.t_of_js
                                                                 x279)))|])
        let (get_reject_unauthorized : t -> bool) =
          fun (x281 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x281) "rejectUnauthorized")
        let (set_reject_unauthorized : t -> bool -> unit) =
          fun (x282 : t) ->
            fun (x283 : bool) ->
              Ojs.set_prop_ascii (t_to_js x282) "rejectUnauthorized"
                (Ojs.bool_to_js x283)
      end
    module TLSSocketOptions =
      struct
        include SecureContextOptions
        let (get_secure_context : t -> SecureContext.t) =
          fun (x284 : t) ->
            SecureContext.t_of_js
              (Ojs.get_prop_ascii (t_to_js x284) "secureContext")
        let (set_secure_context : t -> SecureContext.t -> unit) =
          fun (x285 : t) ->
            fun (x286 : SecureContext.t) ->
              Ojs.set_prop_ascii (t_to_js x285) "secureContext"
                (SecureContext.t_to_js x286)
        let (get_enable_trace : t -> bool) =
          fun (x287 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x287) "enableTrace")
        let (set_enable_trace : t -> bool -> unit) =
          fun (x288 : t) ->
            fun (x289 : bool) ->
              Ojs.set_prop_ascii (t_to_js x288) "enableTrace"
                (Ojs.bool_to_js x289)
        let (get_request_cert : t -> bool) =
          fun (x290 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x290) "requestCert")
        let (set_request_cert : t -> bool -> unit) =
          fun (x291 : t) ->
            fun (x292 : bool) ->
              Ojs.set_prop_ascii (t_to_js x291) "requestCert"
                (Ojs.bool_to_js x292)
        let (get_alpn_protocols :
          t -> (Uint8Array.t, Uint8Array.t or_string) or_array) =
          fun (x293 : t) ->
            or_array_of_js Uint8Array.t_of_js
              (fun (x295 : Ojs.t) -> or_string_of_js Uint8Array.t_of_js x295)
              (Ojs.get_prop_ascii (t_to_js x293) "ALPNProtocols")
        let (set_alpn_protocols :
          t -> (Uint8Array.t, Uint8Array.t or_string) or_array -> unit) =
          fun (x297 : t) ->
            fun (x298 : (Uint8Array.t, Uint8Array.t or_string) or_array) ->
              Ojs.set_prop_ascii (t_to_js x297) "ALPNProtocols"
                (or_array_to_js Uint8Array.t_to_js
                   (fun (x300 : Uint8Array.t or_string) ->
                      or_string_to_js Uint8Array.t_to_js x300) x298)
        let (s_ni_callback :
          t ->
            servername:string ->
              cb:(err:Error.t or_null -> ctx:SecureContext.t -> unit) -> unit)
          =
          fun (x307 : t) ->
            fun ~servername:(x302 : string) ->
              fun
                ~cb:(x303 :
                      err:Error.t or_null -> ctx:SecureContext.t -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x307) "SNICallback"
                     [|(Ojs.string_to_js x302);(Ojs.fun_to_js 2
                                                  (fun (x304 : Ojs.t) ->
                                                     fun (x306 : Ojs.t) ->
                                                       x303
                                                         ~err:(or_null_of_js
                                                                 Error.t_of_js
                                                                 x304)
                                                         ~ctx:(SecureContext.t_of_js
                                                                 x306)))|])
        let (get_reject_unauthorized : t -> bool) =
          fun (x308 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x308) "rejectUnauthorized")
        let (set_reject_unauthorized : t -> bool -> unit) =
          fun (x309 : t) ->
            fun (x310 : bool) ->
              Ojs.set_prop_ascii (t_to_js x309) "rejectUnauthorized"
                (Ojs.bool_to_js x310)
        let (get_is_server : t -> bool) =
          fun (x311 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x311) "isServer")
        let (set_is_server : t -> bool -> unit) =
          fun (x312 : t) ->
            fun (x313 : bool) ->
              Ojs.set_prop_ascii (t_to_js x312) "isServer"
                (Ojs.bool_to_js x313)
        let (get_server : t -> Net.Server.t) =
          fun (x314 : t) ->
            Net.Server.t_of_js (Ojs.get_prop_ascii (t_to_js x314) "server")
        let (set_server : t -> Net.Server.t -> unit) =
          fun (x315 : t) ->
            fun (x316 : Net.Server.t) ->
              Ojs.set_prop_ascii (t_to_js x315) "server"
                (Net.Server.t_to_js x316)
        let (get_session : t -> Buffer.t) =
          fun (x317 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x317) "session")
        let (set_session : t -> Buffer.t -> unit) =
          fun (x318 : t) ->
            fun (x319 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x318) "session"
                (Buffer.t_to_js x319)
        let (get_request_ocsp : t -> bool) =
          fun (x320 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x320) "requestOCSP")
        let (set_request_ocsp : t -> bool -> unit) =
          fun (x321 : t) ->
            fun (x322 : bool) ->
              Ojs.set_prop_ascii (t_to_js x321) "requestOCSP"
                (Ojs.bool_to_js x322)
      end
    module TLSSocket =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x324 : Ojs.t) -> x324
        and t_to_js : t -> Ojs.t = fun (x323 : Ojs.t) -> x323
        let (create :
          socket:Net.Socket.t -> ?options:TLSSocketOptions.t -> unit -> t) =
          fun ~socket:(x325 : Net.Socket.t) ->
            fun ?options:(x326 : TLSSocketOptions.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Import.tls "TLSSocket")
                     (let x327 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x327 "push" [|(Net.Socket.t_to_js x325)|]);
                      (match x326 with
                       | Some x328 ->
                           ignore
                             (Ojs.call x327 "push"
                                [|(TLSSocketOptions.t_to_js x328)|])
                       | None -> ());
                      x327))
        let (get_authorized : t -> bool) =
          fun (x329 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x329) "authorized")
        let (set_authorized : t -> bool -> unit) =
          fun (x330 : t) ->
            fun (x331 : bool) ->
              Ojs.set_prop_ascii (t_to_js x330) "authorized"
                (Ojs.bool_to_js x331)
        let (get_authorization_error : t -> Error.t) =
          fun (x332 : t) ->
            Error.t_of_js
              (Ojs.get_prop_ascii (t_to_js x332) "authorizationError")
        let (set_authorization_error : t -> Error.t -> unit) =
          fun (x333 : t) ->
            fun (x334 : Error.t) ->
              Ojs.set_prop_ascii (t_to_js x333) "authorizationError"
                (Error.t_to_js x334)
        let (get_encrypted : t -> bool) =
          fun (x335 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x335) "encrypted")
        let (set_encrypted : t -> bool -> unit) =
          fun (x336 : t) ->
            fun (x337 : bool) ->
              Ojs.set_prop_ascii (t_to_js x336) "encrypted"
                (Ojs.bool_to_js x337)
        let (get_alpn_protocol : t -> string) =
          fun (x338 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x338) "alpnProtocol")
        let (set_alpn_protocol : t -> string -> unit) =
          fun (x339 : t) ->
            fun (x340 : string) ->
              Ojs.set_prop_ascii (t_to_js x339) "alpnProtocol"
                (Ojs.string_to_js x340)
        let (get_certificate :
          t -> (PeerCertificate.t, untyped_object) union2 or_null) =
          fun (x341 : t) ->
            or_null_of_js
              (fun (x342 : Ojs.t) ->
                 union2_of_js PeerCertificate.t_of_js untyped_object_of_js
                   x342) (Ojs.call (t_to_js x341) "getCertificate" [||])
        let (get_cipher : t -> CipherNameAndProtocol.t) =
          fun (x345 : t) ->
            CipherNameAndProtocol.t_of_js
              (Ojs.call (t_to_js x345) "getCipher" [||])
        let (get_ephemeral_key_info :
          t -> (EphemeralKeyInfo.t, untyped_object) union2 or_null) =
          fun (x346 : t) ->
            or_null_of_js
              (fun (x347 : Ojs.t) ->
                 union2_of_js EphemeralKeyInfo.t_of_js untyped_object_of_js
                   x347) (Ojs.call (t_to_js x346) "getEphemeralKeyInfo" [||])
        let (get_finished : t -> Buffer.t or_undefined) =
          fun (x350 : t) ->
            or_undefined_of_js Buffer.t_of_js
              (Ojs.call (t_to_js x350) "getFinished" [||])
        let (get_peer_certificate :
          t -> detailed:[ `L_b_true ] -> DetailedPeerCertificate.t) =
          fun (x353 : t) ->
            fun ~detailed:(x352 : [ `L_b_true ]) ->
              DetailedPeerCertificate.t_of_js
                (Ojs.call (t_to_js x353) "getPeerCertificate"
                   [|((match x352 with
                       | `L_b_true -> Ojs.string_to_js "LBTrue"))|])
        let (get_peer_certificate' :
          t -> ?detailed:[ `L_b_false ] -> unit -> PeerCertificate.t) =
          fun (x357 : t) ->
            fun ?detailed:(x354 : [ `L_b_false ] option) ->
              fun () ->
                PeerCertificate.t_of_js
                  (let x358 = t_to_js x357 in
                   Ojs.call (Ojs.get_prop_ascii x358 "getPeerCertificate")
                     "apply"
                     [|x358;((let x355 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x354 with
                               | Some x356 ->
                                   ignore
                                     (Ojs.call x355 "push"
                                        [|((match x356 with
                                            | `L_b_false ->
                                                Ojs.string_to_js "LBFalse"))|])
                               | None -> ());
                              x355))|])
        let (get_peer_certificate'' :
          t ->
            ?detailed:bool ->
              unit -> (DetailedPeerCertificate.t, PeerCertificate.t) union2)
          =
          fun (x362 : t) ->
            fun ?detailed:(x359 : bool option) ->
              fun () ->
                union2_of_js DetailedPeerCertificate.t_of_js
                  PeerCertificate.t_of_js
                  (let x363 = t_to_js x362 in
                   Ojs.call (Ojs.get_prop_ascii x363 "getPeerCertificate")
                     "apply"
                     [|x363;((let x360 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x359 with
                               | Some x361 ->
                                   ignore
                                     (Ojs.call x360 "push"
                                        [|(Ojs.bool_to_js x361)|])
                               | None -> ());
                              x360))|])
        let (get_peer_finished : t -> Buffer.t or_undefined) =
          fun (x366 : t) ->
            or_undefined_of_js Buffer.t_of_js
              (Ojs.call (t_to_js x366) "getPeerFinished" [||])
        let (get_protocol : t -> string or_null) =
          fun (x368 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x368) "getProtocol" [||])
        let (get_session : t -> Buffer.t or_undefined) =
          fun (x370 : t) ->
            or_undefined_of_js Buffer.t_of_js
              (Ojs.call (t_to_js x370) "getSession" [||])
        let (get_shared_sigalgs : t -> string list) =
          fun (x372 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x372) "getSharedSigalgs" [||])
        let (get_tls_ticket : t -> Buffer.t or_undefined) =
          fun (x374 : t) ->
            or_undefined_of_js Buffer.t_of_js
              (Ojs.call (t_to_js x374) "getTLSTicket" [||])
        let (is_session_reused : t -> bool) =
          fun (x376 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x376) "isSessionReused" [||])
        let (renegotiate :
          t ->
            options:AnonymousInterface0.t ->
              callback:(err:Error.t or_null -> unit) -> bool or_undefined)
          =
          fun (x381 : t) ->
            fun ~options:(x377 : AnonymousInterface0.t) ->
              fun ~callback:(x378 : err:Error.t or_null -> unit) ->
                or_undefined_of_js Ojs.bool_of_js
                  (Ojs.call (t_to_js x381) "renegotiate"
                     [|(AnonymousInterface0.t_to_js x377);(Ojs.fun_to_js 1
                                                             (fun
                                                                (x379 :
                                                                  Ojs.t)
                                                                ->
                                                                x378
                                                                  ~err:(
                                                                  or_null_of_js
                                                                    Error.t_of_js
                                                                    x379)))|])
        let (set_max_send_fragment : t -> size:int -> bool) =
          fun (x384 : t) ->
            fun ~size:(x383 : int) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x384) "setMaxSendFragment"
                   [|(Ojs.int_to_js x383)|])
        let (disable_renegotiation : t -> unit) =
          fun (x385 : t) ->
            ignore (Ojs.call (t_to_js x385) "disableRenegotiation" [||])
        let (enable_trace : t -> unit) =
          fun (x386 : t) ->
            ignore (Ojs.call (t_to_js x386) "enableTrace" [||])
        let (export_keying_material :
          t -> length:int -> label:string -> context:Buffer.t -> Buffer.t) =
          fun (x390 : t) ->
            fun ~length:(x387 : int) ->
              fun ~label:(x388 : string) ->
                fun ~context:(x389 : Buffer.t) ->
                  Buffer.t_of_js
                    (Ojs.call (t_to_js x390) "exportKeyingMaterial"
                       [|(Ojs.int_to_js x387);(Ojs.string_to_js x388);(
                         Buffer.t_to_js x389)|])
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x395 : t) ->
            fun ~event:(x391 : string) ->
              fun ~listener:(x392 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x395) "addListener"
                     [|(Ojs.string_to_js x391);(Ojs.fun_to_js_args
                                                  (fun (x393 : _) ->
                                                     x392
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x393 0)))|])
        let (add_listener' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x399 : t) ->
            fun ~event:(x396 : [ `OCSPResponse ]) ->
              fun ~listener:(x397 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x399) "addListener"
                     [|((match x396 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x398 : Ojs.t) ->
                            x397 ~response:(Buffer.t_of_js x398)))|])
        let (add_listener'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x402 : t) ->
            fun ~event:(x400 : [ `secureConnect ]) ->
              fun ~listener:(x401 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x402) "addListener"
                     [|((match x400 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x401 ()))|])
        let (add_listener''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x406 : t) ->
            fun ~event:(x403 : [ `session ]) ->
              fun ~listener:(x404 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x406) "addListener"
                     [|((match x403 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x405 : Ojs.t) ->
                            x404 ~session:(Buffer.t_of_js x405)))|])
        let (add_listener'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x410 : t) ->
            fun ~event:(x407 : [ `keylog ]) ->
              fun ~listener:(x408 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x410) "addListener"
                     [|((match x407 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x409 :
                                                                    Ojs.t) ->
                                                                    x408
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x409)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x416 : t) ->
            fun ~event:(x411 : symbol or_string) ->
              fun ~args:(x412 : any list) ->
                Ojs.bool_of_js
                  (let x417 = t_to_js x416 in
                   Ojs.call (Ojs.get_prop_ascii x417 "emit") "apply"
                     [|x417;((let x413 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x413 "push"
                                   [|(or_string_to_js symbol_to_js x411)|]);
                              List.iter
                                (fun (x414 : any) ->
                                   ignore
                                     (Ojs.call x413 "push"
                                        [|(any_to_js x414)|])) x412;
                              x413))|])
        let (emit' :
          t -> event:[ `OCSPResponse ] -> response:Buffer.t -> bool) =
          fun (x420 : t) ->
            fun ~event:(x418 : [ `OCSPResponse ]) ->
              fun ~response:(x419 : Buffer.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x420) "emit"
                     [|((match x418 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Buffer.t_to_js x419)|])
        let (emit'' : t -> event:[ `secureConnect ] -> bool) =
          fun (x422 : t) ->
            fun ~event:(x421 : [ `secureConnect ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x422) "emit"
                   [|((match x421 with
                       | `secureConnect -> Ojs.string_to_js "secureConnect"))|])
        let (emit''' : t -> event:[ `session ] -> session:Buffer.t -> bool) =
          fun (x425 : t) ->
            fun ~event:(x423 : [ `session ]) ->
              fun ~session:(x424 : Buffer.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x425) "emit"
                     [|((match x423 with
                         | `session -> Ojs.string_to_js "session"));(
                       Buffer.t_to_js x424)|])
        let (emit'''' : t -> event:[ `keylog ] -> line:Buffer.t -> bool) =
          fun (x428 : t) ->
            fun ~event:(x426 : [ `keylog ]) ->
              fun ~line:(x427 : Buffer.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x428) "emit"
                     [|((match x426 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Buffer.t_to_js
                                                                    x427)|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x433 : t) ->
            fun ~event:(x429 : string) ->
              fun ~listener:(x430 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x433) "on"
                     [|(Ojs.string_to_js x429);(Ojs.fun_to_js_args
                                                  (fun (x431 : _) ->
                                                     x430
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x431 0)))|])
        let (on' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x437 : t) ->
            fun ~event:(x434 : [ `OCSPResponse ]) ->
              fun ~listener:(x435 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x437) "on"
                     [|((match x434 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x436 : Ojs.t) ->
                            x435 ~response:(Buffer.t_of_js x436)))|])
        let (on'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x440 : t) ->
            fun ~event:(x438 : [ `secureConnect ]) ->
              fun ~listener:(x439 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x440) "on"
                     [|((match x438 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x439 ()))|])
        let (on''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x444 : t) ->
            fun ~event:(x441 : [ `session ]) ->
              fun ~listener:(x442 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x444) "on"
                     [|((match x441 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x443 : Ojs.t) ->
                            x442 ~session:(Buffer.t_of_js x443)))|])
        let (on'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x448 : t) ->
            fun ~event:(x445 : [ `keylog ]) ->
              fun ~listener:(x446 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x448) "on"
                     [|((match x445 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x447 :
                                                                    Ojs.t) ->
                                                                    x446
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x447)))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x453 : t) ->
            fun ~event:(x449 : string) ->
              fun ~listener:(x450 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x453) "once"
                     [|(Ojs.string_to_js x449);(Ojs.fun_to_js_args
                                                  (fun (x451 : _) ->
                                                     x450
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x451 0)))|])
        let (once' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x457 : t) ->
            fun ~event:(x454 : [ `OCSPResponse ]) ->
              fun ~listener:(x455 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x457) "once"
                     [|((match x454 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x456 : Ojs.t) ->
                            x455 ~response:(Buffer.t_of_js x456)))|])
        let (once'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x460 : t) ->
            fun ~event:(x458 : [ `secureConnect ]) ->
              fun ~listener:(x459 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x460) "once"
                     [|((match x458 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x459 ()))|])
        let (once''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x464 : t) ->
            fun ~event:(x461 : [ `session ]) ->
              fun ~listener:(x462 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x464) "once"
                     [|((match x461 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x463 : Ojs.t) ->
                            x462 ~session:(Buffer.t_of_js x463)))|])
        let (once'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x468 : t) ->
            fun ~event:(x465 : [ `keylog ]) ->
              fun ~listener:(x466 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x468) "once"
                     [|((match x465 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x467 :
                                                                    Ojs.t) ->
                                                                    x466
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x467)))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x473 : t) ->
            fun ~event:(x469 : string) ->
              fun ~listener:(x470 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x473) "prependListener"
                     [|(Ojs.string_to_js x469);(Ojs.fun_to_js_args
                                                  (fun (x471 : _) ->
                                                     x470
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x471 0)))|])
        let (prepend_listener' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x477 : t) ->
            fun ~event:(x474 : [ `OCSPResponse ]) ->
              fun ~listener:(x475 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x477) "prependListener"
                     [|((match x474 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x476 : Ojs.t) ->
                            x475 ~response:(Buffer.t_of_js x476)))|])
        let (prepend_listener'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x480 : t) ->
            fun ~event:(x478 : [ `secureConnect ]) ->
              fun ~listener:(x479 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x480) "prependListener"
                     [|((match x478 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x479 ()))|])
        let (prepend_listener''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x484 : t) ->
            fun ~event:(x481 : [ `session ]) ->
              fun ~listener:(x482 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x484) "prependListener"
                     [|((match x481 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x483 : Ojs.t) ->
                            x482 ~session:(Buffer.t_of_js x483)))|])
        let (prepend_listener'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x488 : t) ->
            fun ~event:(x485 : [ `keylog ]) ->
              fun ~listener:(x486 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x488) "prependListener"
                     [|((match x485 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x487 :
                                                                    Ojs.t) ->
                                                                    x486
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x487)))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x493 : t) ->
            fun ~event:(x489 : string) ->
              fun ~listener:(x490 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x493) "prependOnceListener"
                     [|(Ojs.string_to_js x489);(Ojs.fun_to_js_args
                                                  (fun (x491 : _) ->
                                                     x490
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x491 0)))|])
        let (prepend_once_listener' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x497 : t) ->
            fun ~event:(x494 : [ `OCSPResponse ]) ->
              fun ~listener:(x495 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x497) "prependOnceListener"
                     [|((match x494 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x496 : Ojs.t) ->
                            x495 ~response:(Buffer.t_of_js x496)))|])
        let (prepend_once_listener'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x500 : t) ->
            fun ~event:(x498 : [ `secureConnect ]) ->
              fun ~listener:(x499 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x500) "prependOnceListener"
                     [|((match x498 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x499 ()))|])
        let (prepend_once_listener''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x504 : t) ->
            fun ~event:(x501 : [ `session ]) ->
              fun ~listener:(x502 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x504) "prependOnceListener"
                     [|((match x501 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x503 : Ojs.t) ->
                            x502 ~session:(Buffer.t_of_js x503)))|])
        let (prepend_once_listener'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x508 : t) ->
            fun ~event:(x505 : [ `keylog ]) ->
              fun ~listener:(x506 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x508) "prependOnceListener"
                     [|((match x505 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x507 :
                                                                    Ojs.t) ->
                                                                    x506
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x507)))|])
        let (cast : t -> Net.Socket.t) =
          fun (x509 : t) -> Net.Socket.t_of_js (t_to_js x509)
      end
    module SecurePair =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x511 : Ojs.t) -> x511
        and t_to_js : t -> Ojs.t = fun (x510 : Ojs.t) -> x510
        let (get_encrypted : t -> TLSSocket.t) =
          fun (x512 : t) ->
            TLSSocket.t_of_js (Ojs.get_prop_ascii (t_to_js x512) "encrypted")
        let (set_encrypted : t -> TLSSocket.t -> unit) =
          fun (x513 : t) ->
            fun (x514 : TLSSocket.t) ->
              Ojs.set_prop_ascii (t_to_js x513) "encrypted"
                (TLSSocket.t_to_js x514)
        let (get_cleartext : t -> TLSSocket.t) =
          fun (x515 : t) ->
            TLSSocket.t_of_js (Ojs.get_prop_ascii (t_to_js x515) "cleartext")
        let (set_cleartext : t -> TLSSocket.t -> unit) =
          fun (x516 : t) ->
            fun (x517 : TLSSocket.t) ->
              Ojs.set_prop_ascii (t_to_js x516) "cleartext"
                (TLSSocket.t_to_js x517)
      end
    module TlsOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x519 : Ojs.t) -> x519
        and t_to_js : t -> Ojs.t = fun (x518 : Ojs.t) -> x518
        let (get_handshake_timeout : t -> int) =
          fun (x520 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x520) "handshakeTimeout")
        let (set_handshake_timeout : t -> int -> unit) =
          fun (x521 : t) ->
            fun (x522 : int) ->
              Ojs.set_prop_ascii (t_to_js x521) "handshakeTimeout"
                (Ojs.int_to_js x522)
        let (get_session_timeout : t -> int) =
          fun (x523 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x523) "sessionTimeout")
        let (set_session_timeout : t -> int -> unit) =
          fun (x524 : t) ->
            fun (x525 : int) ->
              Ojs.set_prop_ascii (t_to_js x524) "sessionTimeout"
                (Ojs.int_to_js x525)
        let (get_ticket_keys : t -> Buffer.t) =
          fun (x526 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x526) "ticketKeys")
        let (set_ticket_keys : t -> Buffer.t -> unit) =
          fun (x527 : t) ->
            fun (x528 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x527) "ticketKeys"
                (Buffer.t_to_js x528)
        let (psk_callback :
          t ->
            socket:TLSSocket.t ->
              identity:string -> (DataView.t, TypedArray.t) union2 or_null)
          =
          fun (x531 : t) ->
            fun ~socket:(x529 : TLSSocket.t) ->
              fun ~identity:(x530 : string) ->
                or_null_of_js
                  (fun (x532 : Ojs.t) ->
                     union2_of_js DataView.t_of_js TypedArray.t_of_js x532)
                  (Ojs.call (t_to_js x531) "pskCallback"
                     [|(TLSSocket.t_to_js x529);(Ojs.string_to_js x530)|])
        let (get_psk_identity_hint : t -> string) =
          fun (x535 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x535) "pskIdentityHint")
        let (set_psk_identity_hint : t -> string -> unit) =
          fun (x536 : t) ->
            fun (x537 : string) ->
              Ojs.set_prop_ascii (t_to_js x536) "pskIdentityHint"
                (Ojs.string_to_js x537)
        let (cast : t -> SecureContextOptions.t) =
          fun (x538 : t) -> SecureContextOptions.t_of_js (t_to_js x538)
        let (cast' : t -> CommonConnectionOptions.t) =
          fun (x539 : t) -> CommonConnectionOptions.t_of_js (t_to_js x539)
        let (cast'' : t -> Net.ServerOpts.t) =
          fun (x540 : t) -> Net.ServerOpts.t_of_js (t_to_js x540)
      end
    module PSKCallbackNegotation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x542 : Ojs.t) -> x542
        and t_to_js : t -> Ojs.t = fun (x541 : Ojs.t) -> x541
        let (get_psk : t -> (DataView.t, TypedArray.t) union2) =
          fun (x543 : t) ->
            union2_of_js DataView.t_of_js TypedArray.t_of_js
              (Ojs.get_prop_ascii (t_to_js x543) "psk")
        let (set_psk : t -> (DataView.t, TypedArray.t) union2 -> unit) =
          fun (x546 : t) ->
            fun (x547 : (DataView.t, TypedArray.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x546) "psk"
                (union2_to_js DataView.t_to_js TypedArray.t_to_js x547)
        let (get_identity : t -> string) =
          fun (x550 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x550) "identity")
        let (set_identity : t -> string -> unit) =
          fun (x551 : t) ->
            fun (x552 : string) ->
              Ojs.set_prop_ascii (t_to_js x551) "identity"
                (Ojs.string_to_js x552)
      end
    module ConnectionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x554 : Ojs.t) -> x554
        and t_to_js : t -> Ojs.t = fun (x553 : Ojs.t) -> x553
        let (get_host : t -> string) =
          fun (x555 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x555) "host")
        let (set_host : t -> string -> unit) =
          fun (x556 : t) ->
            fun (x557 : string) ->
              Ojs.set_prop_ascii (t_to_js x556) "host"
                (Ojs.string_to_js x557)
        let (get_port : t -> int) =
          fun (x558 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x558) "port")
        let (set_port : t -> int -> unit) =
          fun (x559 : t) ->
            fun (x560 : int) ->
              Ojs.set_prop_ascii (t_to_js x559) "port" (Ojs.int_to_js x560)
        let (get_path : t -> string) =
          fun (x561 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x561) "path")
        let (set_path : t -> string -> unit) =
          fun (x562 : t) ->
            fun (x563 : string) ->
              Ojs.set_prop_ascii (t_to_js x562) "path"
                (Ojs.string_to_js x563)
        let (get_socket : t -> Net.Socket.t) =
          fun (x564 : t) ->
            Net.Socket.t_of_js (Ojs.get_prop_ascii (t_to_js x564) "socket")
        let (set_socket : t -> Net.Socket.t -> unit) =
          fun (x565 : t) ->
            fun (x566 : Net.Socket.t) ->
              Ojs.set_prop_ascii (t_to_js x565) "socket"
                (Net.Socket.t_to_js x566)
        let (check_server_identity :
          t -> host:string -> cert:PeerCertificate.t -> Error.t or_undefined)
          =
          fun (x569 : t) ->
            fun ~host:(x567 : string) ->
              fun ~cert:(x568 : PeerCertificate.t) ->
                or_undefined_of_js Error.t_of_js
                  (Ojs.call (t_to_js x569) "checkServerIdentity"
                     [|(Ojs.string_to_js x567);(PeerCertificate.t_to_js x568)|])
        let (get_servername : t -> string) =
          fun (x571 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x571) "servername")
        let (set_servername : t -> string -> unit) =
          fun (x572 : t) ->
            fun (x573 : string) ->
              Ojs.set_prop_ascii (t_to_js x572) "servername"
                (Ojs.string_to_js x573)
        let (get_session : t -> Buffer.t) =
          fun (x574 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x574) "session")
        let (set_session : t -> Buffer.t -> unit) =
          fun (x575 : t) ->
            fun (x576 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x575) "session"
                (Buffer.t_to_js x576)
        let (get_min_dh_size : t -> int) =
          fun (x577 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x577) "minDHSize")
        let (set_min_dh_size : t -> int -> unit) =
          fun (x578 : t) ->
            fun (x579 : int) ->
              Ojs.set_prop_ascii (t_to_js x578) "minDHSize"
                (Ojs.int_to_js x579)
        let (get_lookup : t -> Net.LookupFunction.t) =
          fun (x580 : t) ->
            Net.LookupFunction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x580) "lookup")
        let (set_lookup : t -> Net.LookupFunction.t -> unit) =
          fun (x581 : t) ->
            fun (x582 : Net.LookupFunction.t) ->
              Ojs.set_prop_ascii (t_to_js x581) "lookup"
                (Net.LookupFunction.t_to_js x582)
        let (get_timeout : t -> int) =
          fun (x583 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x583) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x584 : t) ->
            fun (x585 : int) ->
              Ojs.set_prop_ascii (t_to_js x584) "timeout"
                (Ojs.int_to_js x585)
        let (psk_callback :
          t -> hint:string or_null -> PSKCallbackNegotation.t or_null) =
          fun (x588 : t) ->
            fun ~hint:(x586 : string or_null) ->
              or_null_of_js PSKCallbackNegotation.t_of_js
                (Ojs.call (t_to_js x588) "pskCallback"
                   [|(or_null_to_js Ojs.string_to_js x586)|])
        let (cast : t -> SecureContextOptions.t) =
          fun (x590 : t) -> SecureContextOptions.t_of_js (t_to_js x590)
        let (cast' : t -> CommonConnectionOptions.t) =
          fun (x591 : t) -> CommonConnectionOptions.t_of_js (t_to_js x591)
      end
    module Server =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x593 : Ojs.t) -> x593
        and t_to_js : t -> Ojs.t = fun (x592 : Ojs.t) -> x592
        let (create :
          ?secure_connection_listener:(socket:TLSSocket.t -> unit) ->
            unit -> t)
          =
          fun
            ?secure_connection_listener:(x594 :
                                          (socket:TLSSocket.t -> unit) option)
            ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.tls "Server")
                   (let x595 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x594 with
                     | Some x596 ->
                         ignore
                           (Ojs.call x595 "push"
                              [|(Ojs.fun_to_js 1
                                   (fun (x597 : Ojs.t) ->
                                      x596 ~socket:(TLSSocket.t_of_js x597)))|])
                     | None -> ());
                    x595))
        let (create' :
          options:TlsOptions.t ->
            ?secure_connection_listener:(socket:TLSSocket.t -> unit) ->
              unit -> t)
          =
          fun ~options:(x598 : TlsOptions.t) ->
            fun
              ?secure_connection_listener:(x599 :
                                            (socket:TLSSocket.t -> unit)
                                              option)
              ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.tls "Server")
                     (let x600 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x600 "push" [|(TlsOptions.t_to_js x598)|]);
                      (match x599 with
                       | Some x601 ->
                           ignore
                             (Ojs.call x600 "push"
                                [|(Ojs.fun_to_js 1
                                     (fun (x602 : Ojs.t) ->
                                        x601 ~socket:(TLSSocket.t_of_js x602)))|])
                       | None -> ());
                      x600))
        let (add_context :
          t -> host_name:string -> credentials:SecureContextOptions.t -> unit)
          =
          fun (x605 : t) ->
            fun ~host_name:(x603 : string) ->
              fun ~credentials:(x604 : SecureContextOptions.t) ->
                ignore
                  (Ojs.call (t_to_js x605) "addContext"
                     [|(Ojs.string_to_js x603);(SecureContextOptions.t_to_js
                                                  x604)|])
        let (get_ticket_keys : t -> Buffer.t) =
          fun (x606 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x606) "getTicketKeys" [||])
        let (set_secure_context :
          t -> details:SecureContextOptions.t -> unit) =
          fun (x608 : t) ->
            fun ~details:(x607 : SecureContextOptions.t) ->
              ignore
                (Ojs.call (t_to_js x608) "setSecureContext"
                   [|(SecureContextOptions.t_to_js x607)|])
        let (set_ticket_keys : t -> keys:Buffer.t -> unit) =
          fun (x610 : t) ->
            fun ~keys:(x609 : Buffer.t) ->
              ignore
                (Ojs.call (t_to_js x610) "setTicketKeys"
                   [|(Buffer.t_to_js x609)|])
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x615 : t) ->
            fun ~event:(x611 : string) ->
              fun ~listener:(x612 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x615) "addListener"
                     [|(Ojs.string_to_js x611);(Ojs.fun_to_js_args
                                                  (fun (x613 : _) ->
                                                     x612
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x613 0)))|])
        let (add_listener' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x620 : t) ->
            fun ~event:(x616 : [ `tlsClientError ]) ->
              fun
                ~listener:(x617 :
                            err:Error.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x620) "addListener"
                     [|((match x616 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x618 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x619 :
                                                                    Ojs.t) ->
                                                                    x617
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x618)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x619)))|])
        let (add_listener'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          session_data:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x628 : t) ->
            fun ~event:(x621 : [ `newSession ]) ->
              fun
                ~listener:(x622 :
                            sessionId:Buffer.t ->
                              session_data:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x628) "addListener"
                     [|((match x621 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x623 : Ojs.t) ->
                            fun (x624 : Ojs.t) ->
                              fun (x625 : Ojs.t) ->
                                x622 ~sessionId:(Buffer.t_of_js x623)
                                  ~session_data:(Buffer.t_of_js x624)
                                  ~callback:(fun ~err:(x626 : Error.t) ->
                                               fun ~resp:(x627 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x625
                                                      [|(Error.t_to_js x626);(
                                                        Buffer.t_to_js x627)|]))))|])
        let (add_listener''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x637 : t) ->
            fun ~event:(x629 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x630 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x637) "addListener"
                     [|((match x629 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x631 : Ojs.t) ->
                            fun (x632 : Ojs.t) ->
                              fun (x633 : Ojs.t) ->
                                x630 ~certificate:(Buffer.t_of_js x631)
                                  ~issuer:(Buffer.t_of_js x632)
                                  ~callback:(fun
                                               ~err:(x634 : Error.t or_null)
                                               ->
                                               fun ~resp:(x636 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x633
                                                      [|(or_null_to_js
                                                           Error.t_to_js x634);(
                                                        Buffer.t_to_js x636)|]))))|])
        let (add_listener'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      session_data:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x644 : t) ->
            fun ~event:(x638 : [ `resumeSession ]) ->
              fun
                ~listener:(x639 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          session_data:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x644) "addListener"
                     [|((match x638 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x640 : Ojs.t) ->
                            fun (x641 : Ojs.t) ->
                              x639 ~sessionId:(Buffer.t_of_js x640)
                                ~callback:(fun ~err:(x642 : Error.t) ->
                                             fun
                                               ~session_data:(x643 :
                                                               Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x641
                                                    [|(Error.t_to_js x642);(
                                                      Buffer.t_to_js x643)|]))))|])
        let (add_listener''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:TLSSocket.t -> unit) -> t)
          =
          fun (x648 : t) ->
            fun ~event:(x645 : [ `secureConnection ]) ->
              fun ~listener:(x646 : tlsSocket:TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x648) "addListener"
                     [|((match x645 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x647 :
                                                                    Ojs.t) ->
                                                                    x646
                                                                    ~tlsSocket:(
                                                                    TLSSocket.t_of_js
                                                                    x647)))|])
        let (add_listener'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x653 : t) ->
            fun ~event:(x649 : [ `keylog ]) ->
              fun
                ~listener:(x650 :
                            line:Buffer.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x653) "addListener"
                     [|((match x649 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x651 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x652 :
                                                                    Ojs.t) ->
                                                                    x650
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x651)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x652)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x659 : t) ->
            fun ~event:(x654 : symbol or_string) ->
              fun ~args:(x655 : any list) ->
                Ojs.bool_of_js
                  (let x660 = t_to_js x659 in
                   Ojs.call (Ojs.get_prop_ascii x660 "emit") "apply"
                     [|x660;((let x656 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x656 "push"
                                   [|(or_string_to_js symbol_to_js x654)|]);
                              List.iter
                                (fun (x657 : any) ->
                                   ignore
                                     (Ojs.call x656 "push"
                                        [|(any_to_js x657)|])) x655;
                              x656))|])
        let (emit' :
          t ->
            event:[ `tlsClientError ] ->
              err:Error.t -> tls_socket:TLSSocket.t -> bool)
          =
          fun (x664 : t) ->
            fun ~event:(x661 : [ `tlsClientError ]) ->
              fun ~err:(x662 : Error.t) ->
                fun ~tls_socket:(x663 : TLSSocket.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x664) "emit"
                       [|((match x661 with
                           | `tlsClientError ->
                               Ojs.string_to_js "tlsClientError"));(Error.t_to_js
                                                                    x662);(
                         TLSSocket.t_to_js x663)|])
        let (emit'' :
          t ->
            event:[ `newSession ] ->
              session_id:Buffer.t ->
                session_data:Buffer.t ->
                  callback:(err:Error.t -> resp:Buffer.t -> unit) -> bool)
          =
          fun (x671 : t) ->
            fun ~event:(x665 : [ `newSession ]) ->
              fun ~session_id:(x666 : Buffer.t) ->
                fun ~session_data:(x667 : Buffer.t) ->
                  fun ~callback:(x668 : err:Error.t -> resp:Buffer.t -> unit)
                    ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x671) "emit"
                         [|((match x665 with
                             | `newSession -> Ojs.string_to_js "newSession"));(
                           Buffer.t_to_js x666);(Buffer.t_to_js x667);(
                           Ojs.fun_to_js 2
                             (fun (x669 : Ojs.t) ->
                                fun (x670 : Ojs.t) ->
                                  x668 ~err:(Error.t_of_js x669)
                                    ~resp:(Buffer.t_of_js x670)))|])
        let (emit''' :
          t ->
            event:[ `OCSPRequest ] ->
              certificate:Buffer.t ->
                issuer:Buffer.t ->
                  callback:(err:Error.t or_null -> resp:Buffer.t -> unit) ->
                    bool)
          =
          fun (x679 : t) ->
            fun ~event:(x672 : [ `OCSPRequest ]) ->
              fun ~certificate:(x673 : Buffer.t) ->
                fun ~issuer:(x674 : Buffer.t) ->
                  fun
                    ~callback:(x675 :
                                err:Error.t or_null -> resp:Buffer.t -> unit)
                    ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x679) "emit"
                         [|((match x672 with
                             | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                           Buffer.t_to_js x673);(Buffer.t_to_js x674);(
                           Ojs.fun_to_js 2
                             (fun (x676 : Ojs.t) ->
                                fun (x678 : Ojs.t) ->
                                  x675
                                    ~err:(or_null_of_js Error.t_of_js x676)
                                    ~resp:(Buffer.t_of_js x678)))|])
        let (emit'''' :
          t ->
            event:[ `resumeSession ] ->
              session_id:Buffer.t ->
                callback:(err:Error.t -> session_data:Buffer.t -> unit) ->
                  bool)
          =
          fun (x685 : t) ->
            fun ~event:(x680 : [ `resumeSession ]) ->
              fun ~session_id:(x681 : Buffer.t) ->
                fun
                  ~callback:(x682 :
                              err:Error.t -> session_data:Buffer.t -> unit)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x685) "emit"
                       [|((match x680 with
                           | `resumeSession ->
                               Ojs.string_to_js "resumeSession"));(Buffer.t_to_js
                                                                    x681);(
                         Ojs.fun_to_js 2
                           (fun (x683 : Ojs.t) ->
                              fun (x684 : Ojs.t) ->
                                x682 ~err:(Error.t_of_js x683)
                                  ~session_data:(Buffer.t_of_js x684)))|])
        let (emit''''' :
          t -> event:[ `secureConnection ] -> tls_socket:TLSSocket.t -> bool)
          =
          fun (x688 : t) ->
            fun ~event:(x686 : [ `secureConnection ]) ->
              fun ~tls_socket:(x687 : TLSSocket.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x688) "emit"
                     [|((match x686 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(TLSSocket.t_to_js
                                                                    x687)|])
        let (emit'''''' :
          t ->
            event:[ `keylog ] ->
              line:Buffer.t -> tls_socket:TLSSocket.t -> bool)
          =
          fun (x692 : t) ->
            fun ~event:(x689 : [ `keylog ]) ->
              fun ~line:(x690 : Buffer.t) ->
                fun ~tls_socket:(x691 : TLSSocket.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x692) "emit"
                       [|((match x689 with
                           | `keylog -> Ojs.string_to_js "keylog"));(
                         Buffer.t_to_js x690);(TLSSocket.t_to_js x691)|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x697 : t) ->
            fun ~event:(x693 : string) ->
              fun ~listener:(x694 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x697) "on"
                     [|(Ojs.string_to_js x693);(Ojs.fun_to_js_args
                                                  (fun (x695 : _) ->
                                                     x694
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x695 0)))|])
        let (on' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x702 : t) ->
            fun ~event:(x698 : [ `tlsClientError ]) ->
              fun
                ~listener:(x699 :
                            err:Error.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x702) "on"
                     [|((match x698 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x700 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x701 :
                                                                    Ojs.t) ->
                                                                    x699
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x700)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x701)))|])
        let (on'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          session_data:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x710 : t) ->
            fun ~event:(x703 : [ `newSession ]) ->
              fun
                ~listener:(x704 :
                            sessionId:Buffer.t ->
                              session_data:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x710) "on"
                     [|((match x703 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x705 : Ojs.t) ->
                            fun (x706 : Ojs.t) ->
                              fun (x707 : Ojs.t) ->
                                x704 ~sessionId:(Buffer.t_of_js x705)
                                  ~session_data:(Buffer.t_of_js x706)
                                  ~callback:(fun ~err:(x708 : Error.t) ->
                                               fun ~resp:(x709 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x707
                                                      [|(Error.t_to_js x708);(
                                                        Buffer.t_to_js x709)|]))))|])
        let (on''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x719 : t) ->
            fun ~event:(x711 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x712 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x719) "on"
                     [|((match x711 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x713 : Ojs.t) ->
                            fun (x714 : Ojs.t) ->
                              fun (x715 : Ojs.t) ->
                                x712 ~certificate:(Buffer.t_of_js x713)
                                  ~issuer:(Buffer.t_of_js x714)
                                  ~callback:(fun
                                               ~err:(x716 : Error.t or_null)
                                               ->
                                               fun ~resp:(x718 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x715
                                                      [|(or_null_to_js
                                                           Error.t_to_js x716);(
                                                        Buffer.t_to_js x718)|]))))|])
        let (on'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      session_data:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x726 : t) ->
            fun ~event:(x720 : [ `resumeSession ]) ->
              fun
                ~listener:(x721 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          session_data:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x726) "on"
                     [|((match x720 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x722 : Ojs.t) ->
                            fun (x723 : Ojs.t) ->
                              x721 ~sessionId:(Buffer.t_of_js x722)
                                ~callback:(fun ~err:(x724 : Error.t) ->
                                             fun
                                               ~session_data:(x725 :
                                                               Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x723
                                                    [|(Error.t_to_js x724);(
                                                      Buffer.t_to_js x725)|]))))|])
        let (on''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:TLSSocket.t -> unit) -> t)
          =
          fun (x730 : t) ->
            fun ~event:(x727 : [ `secureConnection ]) ->
              fun ~listener:(x728 : tlsSocket:TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x730) "on"
                     [|((match x727 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x729 :
                                                                    Ojs.t) ->
                                                                    x728
                                                                    ~tlsSocket:(
                                                                    TLSSocket.t_of_js
                                                                    x729)))|])
        let (on'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x735 : t) ->
            fun ~event:(x731 : [ `keylog ]) ->
              fun
                ~listener:(x732 :
                            line:Buffer.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x735) "on"
                     [|((match x731 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x733 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x734 :
                                                                    Ojs.t) ->
                                                                    x732
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x733)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x734)))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x740 : t) ->
            fun ~event:(x736 : string) ->
              fun ~listener:(x737 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x740) "once"
                     [|(Ojs.string_to_js x736);(Ojs.fun_to_js_args
                                                  (fun (x738 : _) ->
                                                     x737
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x738 0)))|])
        let (once' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x745 : t) ->
            fun ~event:(x741 : [ `tlsClientError ]) ->
              fun
                ~listener:(x742 :
                            err:Error.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x745) "once"
                     [|((match x741 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x743 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x744 :
                                                                    Ojs.t) ->
                                                                    x742
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x743)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x744)))|])
        let (once'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          session_data:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x753 : t) ->
            fun ~event:(x746 : [ `newSession ]) ->
              fun
                ~listener:(x747 :
                            sessionId:Buffer.t ->
                              session_data:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x753) "once"
                     [|((match x746 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x748 : Ojs.t) ->
                            fun (x749 : Ojs.t) ->
                              fun (x750 : Ojs.t) ->
                                x747 ~sessionId:(Buffer.t_of_js x748)
                                  ~session_data:(Buffer.t_of_js x749)
                                  ~callback:(fun ~err:(x751 : Error.t) ->
                                               fun ~resp:(x752 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x750
                                                      [|(Error.t_to_js x751);(
                                                        Buffer.t_to_js x752)|]))))|])
        let (once''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x762 : t) ->
            fun ~event:(x754 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x755 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x762) "once"
                     [|((match x754 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x756 : Ojs.t) ->
                            fun (x757 : Ojs.t) ->
                              fun (x758 : Ojs.t) ->
                                x755 ~certificate:(Buffer.t_of_js x756)
                                  ~issuer:(Buffer.t_of_js x757)
                                  ~callback:(fun
                                               ~err:(x759 : Error.t or_null)
                                               ->
                                               fun ~resp:(x761 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x758
                                                      [|(or_null_to_js
                                                           Error.t_to_js x759);(
                                                        Buffer.t_to_js x761)|]))))|])
        let (once'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      session_data:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x769 : t) ->
            fun ~event:(x763 : [ `resumeSession ]) ->
              fun
                ~listener:(x764 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          session_data:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x769) "once"
                     [|((match x763 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x765 : Ojs.t) ->
                            fun (x766 : Ojs.t) ->
                              x764 ~sessionId:(Buffer.t_of_js x765)
                                ~callback:(fun ~err:(x767 : Error.t) ->
                                             fun
                                               ~session_data:(x768 :
                                                               Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x766
                                                    [|(Error.t_to_js x767);(
                                                      Buffer.t_to_js x768)|]))))|])
        let (once''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:TLSSocket.t -> unit) -> t)
          =
          fun (x773 : t) ->
            fun ~event:(x770 : [ `secureConnection ]) ->
              fun ~listener:(x771 : tlsSocket:TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x773) "once"
                     [|((match x770 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x772 :
                                                                    Ojs.t) ->
                                                                    x771
                                                                    ~tlsSocket:(
                                                                    TLSSocket.t_of_js
                                                                    x772)))|])
        let (once'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x778 : t) ->
            fun ~event:(x774 : [ `keylog ]) ->
              fun
                ~listener:(x775 :
                            line:Buffer.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x778) "once"
                     [|((match x774 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x776 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x777 :
                                                                    Ojs.t) ->
                                                                    x775
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x776)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x777)))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x783 : t) ->
            fun ~event:(x779 : string) ->
              fun ~listener:(x780 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x783) "prependListener"
                     [|(Ojs.string_to_js x779);(Ojs.fun_to_js_args
                                                  (fun (x781 : _) ->
                                                     x780
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x781 0)))|])
        let (prepend_listener' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x788 : t) ->
            fun ~event:(x784 : [ `tlsClientError ]) ->
              fun
                ~listener:(x785 :
                            err:Error.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x788) "prependListener"
                     [|((match x784 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x786 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x787 :
                                                                    Ojs.t) ->
                                                                    x785
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x786)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x787)))|])
        let (prepend_listener'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          session_data:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x796 : t) ->
            fun ~event:(x789 : [ `newSession ]) ->
              fun
                ~listener:(x790 :
                            sessionId:Buffer.t ->
                              session_data:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x796) "prependListener"
                     [|((match x789 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x791 : Ojs.t) ->
                            fun (x792 : Ojs.t) ->
                              fun (x793 : Ojs.t) ->
                                x790 ~sessionId:(Buffer.t_of_js x791)
                                  ~session_data:(Buffer.t_of_js x792)
                                  ~callback:(fun ~err:(x794 : Error.t) ->
                                               fun ~resp:(x795 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x793
                                                      [|(Error.t_to_js x794);(
                                                        Buffer.t_to_js x795)|]))))|])
        let (prepend_listener''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x805 : t) ->
            fun ~event:(x797 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x798 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x805) "prependListener"
                     [|((match x797 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x799 : Ojs.t) ->
                            fun (x800 : Ojs.t) ->
                              fun (x801 : Ojs.t) ->
                                x798 ~certificate:(Buffer.t_of_js x799)
                                  ~issuer:(Buffer.t_of_js x800)
                                  ~callback:(fun
                                               ~err:(x802 : Error.t or_null)
                                               ->
                                               fun ~resp:(x804 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x801
                                                      [|(or_null_to_js
                                                           Error.t_to_js x802);(
                                                        Buffer.t_to_js x804)|]))))|])
        let (prepend_listener'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      session_data:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x812 : t) ->
            fun ~event:(x806 : [ `resumeSession ]) ->
              fun
                ~listener:(x807 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          session_data:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x812) "prependListener"
                     [|((match x806 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x808 : Ojs.t) ->
                            fun (x809 : Ojs.t) ->
                              x807 ~sessionId:(Buffer.t_of_js x808)
                                ~callback:(fun ~err:(x810 : Error.t) ->
                                             fun
                                               ~session_data:(x811 :
                                                               Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x809
                                                    [|(Error.t_to_js x810);(
                                                      Buffer.t_to_js x811)|]))))|])
        let (prepend_listener''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:TLSSocket.t -> unit) -> t)
          =
          fun (x816 : t) ->
            fun ~event:(x813 : [ `secureConnection ]) ->
              fun ~listener:(x814 : tlsSocket:TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x816) "prependListener"
                     [|((match x813 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x815 :
                                                                    Ojs.t) ->
                                                                    x814
                                                                    ~tlsSocket:(
                                                                    TLSSocket.t_of_js
                                                                    x815)))|])
        let (prepend_listener'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x821 : t) ->
            fun ~event:(x817 : [ `keylog ]) ->
              fun
                ~listener:(x818 :
                            line:Buffer.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x821) "prependListener"
                     [|((match x817 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x819 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x820 :
                                                                    Ojs.t) ->
                                                                    x818
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x819)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x820)))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x826 : t) ->
            fun ~event:(x822 : string) ->
              fun ~listener:(x823 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x826) "prependOnceListener"
                     [|(Ojs.string_to_js x822);(Ojs.fun_to_js_args
                                                  (fun (x824 : _) ->
                                                     x823
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x824 0)))|])
        let (prepend_once_listener' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x831 : t) ->
            fun ~event:(x827 : [ `tlsClientError ]) ->
              fun
                ~listener:(x828 :
                            err:Error.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x831) "prependOnceListener"
                     [|((match x827 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x829 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x830 :
                                                                    Ojs.t) ->
                                                                    x828
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x829)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x830)))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          session_data:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x839 : t) ->
            fun ~event:(x832 : [ `newSession ]) ->
              fun
                ~listener:(x833 :
                            sessionId:Buffer.t ->
                              session_data:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x839) "prependOnceListener"
                     [|((match x832 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x834 : Ojs.t) ->
                            fun (x835 : Ojs.t) ->
                              fun (x836 : Ojs.t) ->
                                x833 ~sessionId:(Buffer.t_of_js x834)
                                  ~session_data:(Buffer.t_of_js x835)
                                  ~callback:(fun ~err:(x837 : Error.t) ->
                                               fun ~resp:(x838 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x836
                                                      [|(Error.t_to_js x837);(
                                                        Buffer.t_to_js x838)|]))))|])
        let (prepend_once_listener''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x848 : t) ->
            fun ~event:(x840 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x841 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x848) "prependOnceListener"
                     [|((match x840 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x842 : Ojs.t) ->
                            fun (x843 : Ojs.t) ->
                              fun (x844 : Ojs.t) ->
                                x841 ~certificate:(Buffer.t_of_js x842)
                                  ~issuer:(Buffer.t_of_js x843)
                                  ~callback:(fun
                                               ~err:(x845 : Error.t or_null)
                                               ->
                                               fun ~resp:(x847 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x844
                                                      [|(or_null_to_js
                                                           Error.t_to_js x845);(
                                                        Buffer.t_to_js x847)|]))))|])
        let (prepend_once_listener'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      session_data:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x855 : t) ->
            fun ~event:(x849 : [ `resumeSession ]) ->
              fun
                ~listener:(x850 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          session_data:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x855) "prependOnceListener"
                     [|((match x849 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x851 : Ojs.t) ->
                            fun (x852 : Ojs.t) ->
                              x850 ~sessionId:(Buffer.t_of_js x851)
                                ~callback:(fun ~err:(x853 : Error.t) ->
                                             fun
                                               ~session_data:(x854 :
                                                               Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x852
                                                    [|(Error.t_to_js x853);(
                                                      Buffer.t_to_js x854)|]))))|])
        let (prepend_once_listener''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:TLSSocket.t -> unit) -> t)
          =
          fun (x859 : t) ->
            fun ~event:(x856 : [ `secureConnection ]) ->
              fun ~listener:(x857 : tlsSocket:TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x859) "prependOnceListener"
                     [|((match x856 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x858 :
                                                                    Ojs.t) ->
                                                                    x857
                                                                    ~tlsSocket:(
                                                                    TLSSocket.t_of_js
                                                                    x858)))|])
        let (prepend_once_listener'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x864 : t) ->
            fun ~event:(x860 : [ `keylog ]) ->
              fun
                ~listener:(x861 :
                            line:Buffer.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x864) "prependOnceListener"
                     [|((match x860 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x862 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x863 :
                                                                    Ojs.t) ->
                                                                    x861
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x862)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x863)))|])
        let (cast : t -> Net.Server.t) =
          fun (x865 : t) -> Net.Server.t_of_js (t_to_js x865)
      end
    let (check_server_identity :
      host:string -> cert:PeerCertificate.t -> Error.t or_undefined) =
      fun ~host:(x866 : string) ->
        fun ~cert:(x867 : PeerCertificate.t) ->
          or_undefined_of_js Error.t_of_js
            (Ojs.call Import.tls "checkServerIdentity"
               [|(Ojs.string_to_js x866);(PeerCertificate.t_to_js x867)|])
    let (create_server :
      ?secure_connection_listener:(socket:TLSSocket.t -> unit) ->
        unit -> Server.t)
      =
      fun
        ?secure_connection_listener:(x869 :
                                      (socket:TLSSocket.t -> unit) option)
        ->
        fun () ->
          Server.t_of_js
            (let x873 = Import.tls in
             Ojs.call (Ojs.get_prop_ascii x873 "createServer") "apply"
               [|x873;((let x870 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x869 with
                         | Some x871 ->
                             ignore
                               (Ojs.call x870 "push"
                                  [|(Ojs.fun_to_js 1
                                       (fun (x872 : Ojs.t) ->
                                          x871
                                            ~socket:(TLSSocket.t_of_js x872)))|])
                         | None -> ());
                        x870))|])
    let (create_server :
      options:TlsOptions.t ->
        ?secure_connection_listener:(socket:TLSSocket.t -> unit) ->
          unit -> Server.t)
      =
      fun ~options:(x874 : TlsOptions.t) ->
        fun
          ?secure_connection_listener:(x875 :
                                        (socket:TLSSocket.t -> unit) option)
          ->
          fun () ->
            Server.t_of_js
              (let x879 = Import.tls in
               Ojs.call (Ojs.get_prop_ascii x879 "createServer") "apply"
                 [|x879;((let x876 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x876 "push"
                               [|(TlsOptions.t_to_js x874)|]);
                          (match x875 with
                           | Some x877 ->
                               ignore
                                 (Ojs.call x876 "push"
                                    [|(Ojs.fun_to_js 1
                                         (fun (x878 : Ojs.t) ->
                                            x877
                                              ~socket:(TLSSocket.t_of_js x878)))|])
                           | None -> ());
                          x876))|])
    let (connect :
      options:ConnectionOptions.t ->
        ?secure_connect_listener:(unit -> unit) -> unit -> TLSSocket.t)
      =
      fun ~options:(x880 : ConnectionOptions.t) ->
        fun ?secure_connect_listener:(x881 : (unit -> unit) option) ->
          fun () ->
            TLSSocket.t_of_js
              (let x884 = Import.tls in
               Ojs.call (Ojs.get_prop_ascii x884 "connect") "apply"
                 [|x884;((let x882 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x882 "push"
                               [|(ConnectionOptions.t_to_js x880)|]);
                          (match x881 with
                           | Some x883 ->
                               ignore
                                 (Ojs.call x882 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x883 ()))|])
                           | None -> ());
                          x882))|])
    let (connect :
      port:int ->
        ?host:string ->
          ?options:ConnectionOptions.t ->
            ?secure_connect_listener:(unit -> unit) -> unit -> TLSSocket.t)
      =
      fun ~port:(x885 : int) ->
        fun ?host:(x886 : string option) ->
          fun ?options:(x887 : ConnectionOptions.t option) ->
            fun ?secure_connect_listener:(x888 : (unit -> unit) option) ->
              fun () ->
                TLSSocket.t_of_js
                  (let x893 = Import.tls in
                   Ojs.call (Ojs.get_prop_ascii x893 "connect") "apply"
                     [|x893;((let x889 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x889 "push"
                                   [|(Ojs.int_to_js x885)|]);
                              (match x886 with
                               | Some x892 ->
                                   ignore
                                     (Ojs.call x889 "push"
                                        [|(Ojs.string_to_js x892)|])
                               | None -> ());
                              (match x887 with
                               | Some x891 ->
                                   ignore
                                     (Ojs.call x889 "push"
                                        [|(ConnectionOptions.t_to_js x891)|])
                               | None -> ());
                              (match x888 with
                               | Some x890 ->
                                   ignore
                                     (Ojs.call x889 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x890 ()))|])
                               | None -> ());
                              x889))|])
    let (connect :
      port:int ->
        ?options:ConnectionOptions.t ->
          ?secure_connect_listener:(unit -> unit) -> unit -> TLSSocket.t)
      =
      fun ~port:(x894 : int) ->
        fun ?options:(x895 : ConnectionOptions.t option) ->
          fun ?secure_connect_listener:(x896 : (unit -> unit) option) ->
            fun () ->
              TLSSocket.t_of_js
                (let x900 = Import.tls in
                 Ojs.call (Ojs.get_prop_ascii x900 "connect") "apply"
                   [|x900;((let x897 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x897 "push" [|(Ojs.int_to_js x894)|]);
                            (match x895 with
                             | Some x899 ->
                                 ignore
                                   (Ojs.call x897 "push"
                                      [|(ConnectionOptions.t_to_js x899)|])
                             | None -> ());
                            (match x896 with
                             | Some x898 ->
                                 ignore
                                   (Ojs.call x897 "push"
                                      [|(Ojs.fun_to_js 1 (fun _ -> x898 ()))|])
                             | None -> ());
                            x897))|])
    let (create_secure_pair :
      ?credentials:SecureContext.t ->
        ?is_server:bool ->
          ?request_cert:bool ->
            ?reject_unauthorized:bool -> unit -> SecurePair.t)
      =
      fun ?credentials:(x901 : SecureContext.t option) ->
        fun ?is_server:(x902 : bool option) ->
          fun ?request_cert:(x903 : bool option) ->
            fun ?reject_unauthorized:(x904 : bool option) ->
              fun () ->
                SecurePair.t_of_js
                  (let x910 = Import.tls in
                   Ojs.call (Ojs.get_prop_ascii x910 "createSecurePair")
                     "apply"
                     [|x910;((let x905 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x901 with
                               | Some x909 ->
                                   ignore
                                     (Ojs.call x905 "push"
                                        [|(SecureContext.t_to_js x909)|])
                               | None -> ());
                              (match x902 with
                               | Some x908 ->
                                   ignore
                                     (Ojs.call x905 "push"
                                        [|(Ojs.bool_to_js x908)|])
                               | None -> ());
                              (match x903 with
                               | Some x907 ->
                                   ignore
                                     (Ojs.call x905 "push"
                                        [|(Ojs.bool_to_js x907)|])
                               | None -> ());
                              (match x904 with
                               | Some x906 ->
                                   ignore
                                     (Ojs.call x905 "push"
                                        [|(Ojs.bool_to_js x906)|])
                               | None -> ());
                              x905))|])
    let (create_secure_context :
      ?options:SecureContextOptions.t -> unit -> SecureContext.t) =
      fun ?options:(x911 : SecureContextOptions.t option) ->
        fun () ->
          SecureContext.t_of_js
            (let x914 = Import.tls in
             Ojs.call (Ojs.get_prop_ascii x914 "createSecureContext") "apply"
               [|x914;((let x912 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x911 with
                         | Some x913 ->
                             ignore
                               (Ojs.call x912 "push"
                                  [|(SecureContextOptions.t_to_js x913)|])
                         | None -> ());
                        x912))|])
    let (get_ciphers : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.tls "getCiphers" [||])
    let (default_ecdh_curve : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.tls "DEFAULT_ECDH_CURVE")
    let (default_max_version : SecureVersion.t) =
      SecureVersion.t_of_js
        (Ojs.get_prop_ascii Import.tls "DEFAULT_MAX_VERSION")
    let (default_min_version : SecureVersion.t) =
      SecureVersion.t_of_js
        (Ojs.get_prop_ascii Import.tls "DEFAULT_MIN_VERSION")
    let (root_certificates : string list) =
      Ojs.list_of_js Ojs.string_of_js
        (Ojs.get_prop_ascii Import.tls "rootCertificates")
  end
