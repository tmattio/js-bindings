[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type tls_Certificate = [ `Tls_Certificate ] intf
        and tls_CipherNameAndProtocol = [ `Tls_CipherNameAndProtocol ] intf
        and tls_CommonConnectionOptions =
          [ `Tls_CommonConnectionOptions ] intf
        and tls_ConnectionOptions =
          [ `Tls_ConnectionOptions  | `Tls_CommonConnectionOptions 
          | `Tls_SecureContextOptions ] intf
        and tls_DetailedPeerCertificate =
          [ `Tls_DetailedPeerCertificate  | `Tls_PeerCertificate ] intf
        and tls_EphemeralKeyInfo = [ `Tls_EphemeralKeyInfo ] intf
        and tls_KeyObject = [ `Tls_KeyObject ] intf
        and tls_PSKCallbackNegotation = [ `Tls_PSKCallbackNegotation ] intf
        and tls_PeerCertificate = [ `Tls_PeerCertificate ] intf
        and tls_PxfObject = [ `Tls_PxfObject ] intf
        and tls_SecureContext = [ `Tls_SecureContext ] intf
        and tls_SecureContextOptions = [ `Tls_SecureContextOptions ] intf
        and tls_SecurePair = [ `Tls_SecurePair ] intf
        and tls_SecureVersion =
          [ `TLSv1  | `TLSv1_1  | `TLSv1_2  | `TLSv1_3 ]
        and tls_Server = [ `Tls_Server ] intf
        and tls_TLSSocket = [ `Tls_TLSSocket ] intf
        and tls_TLSSocketOptions =
          [ `Tls_TLSSocketOptions  | `Tls_CommonConnectionOptions 
          | `Tls_SecureContextOptions ] intf
        and tls_TlsOptions =
          [ `Tls_TlsOptions  | `Tls_CommonConnectionOptions 
          | `Tls_SecureContextOptions ] intf
        let rec tls_Certificate_of_js : Ojs.t -> tls_Certificate = Obj.magic
        and tls_Certificate_to_js : tls_Certificate -> Ojs.t = Obj.magic
        and tls_CipherNameAndProtocol_of_js :
          Ojs.t -> tls_CipherNameAndProtocol = Obj.magic
        and tls_CipherNameAndProtocol_to_js :
          tls_CipherNameAndProtocol -> Ojs.t = Obj.magic
        and tls_CommonConnectionOptions_of_js :
          Ojs.t -> tls_CommonConnectionOptions = Obj.magic
        and tls_CommonConnectionOptions_to_js :
          tls_CommonConnectionOptions -> Ojs.t = Obj.magic
        and tls_ConnectionOptions_of_js : Ojs.t -> tls_ConnectionOptions =
          Obj.magic
        and tls_ConnectionOptions_to_js : tls_ConnectionOptions -> Ojs.t =
          Obj.magic
        and tls_DetailedPeerCertificate_of_js :
          Ojs.t -> tls_DetailedPeerCertificate = Obj.magic
        and tls_DetailedPeerCertificate_to_js :
          tls_DetailedPeerCertificate -> Ojs.t = Obj.magic
        and tls_EphemeralKeyInfo_of_js : Ojs.t -> tls_EphemeralKeyInfo =
          Obj.magic
        and tls_EphemeralKeyInfo_to_js : tls_EphemeralKeyInfo -> Ojs.t =
          Obj.magic
        and tls_KeyObject_of_js : Ojs.t -> tls_KeyObject = Obj.magic
        and tls_KeyObject_to_js : tls_KeyObject -> Ojs.t = Obj.magic
        and tls_PSKCallbackNegotation_of_js :
          Ojs.t -> tls_PSKCallbackNegotation = Obj.magic
        and tls_PSKCallbackNegotation_to_js :
          tls_PSKCallbackNegotation -> Ojs.t = Obj.magic
        and tls_PeerCertificate_of_js : Ojs.t -> tls_PeerCertificate =
          Obj.magic
        and tls_PeerCertificate_to_js : tls_PeerCertificate -> Ojs.t =
          Obj.magic
        and tls_PxfObject_of_js : Ojs.t -> tls_PxfObject = Obj.magic
        and tls_PxfObject_to_js : tls_PxfObject -> Ojs.t = Obj.magic
        and tls_SecureContext_of_js : Ojs.t -> tls_SecureContext = Obj.magic
        and tls_SecureContext_to_js : tls_SecureContext -> Ojs.t = Obj.magic
        and tls_SecureContextOptions_of_js :
          Ojs.t -> tls_SecureContextOptions = Obj.magic
        and tls_SecureContextOptions_to_js :
          tls_SecureContextOptions -> Ojs.t = Obj.magic
        and tls_SecurePair_of_js : Ojs.t -> tls_SecurePair = Obj.magic
        and tls_SecurePair_to_js : tls_SecurePair -> Ojs.t = Obj.magic
        and tls_SecureVersion_of_js : Ojs.t -> tls_SecureVersion =
          fun (x2 : Ojs.t) ->
            let x3 = x2 in
            match Ojs.string_of_js x3 with
            | "TLSv1" -> `TLSv1
            | "TLSv1.1" -> `TLSv1_1
            | "TLSv1.2" -> `TLSv1_2
            | "TLSv1.3" -> `TLSv1_3
            | _ -> assert false
        and tls_SecureVersion_to_js : tls_SecureVersion -> Ojs.t =
          fun (x1 : [ `TLSv1  | `TLSv1_1  | `TLSv1_2  | `TLSv1_3 ]) ->
            match x1 with
            | `TLSv1 -> Ojs.string_to_js "TLSv1"
            | `TLSv1_1 -> Ojs.string_to_js "TLSv1.1"
            | `TLSv1_2 -> Ojs.string_to_js "TLSv1.2"
            | `TLSv1_3 -> Ojs.string_to_js "TLSv1.3"
        and tls_Server_of_js : Ojs.t -> tls_Server = Obj.magic
        and tls_Server_to_js : tls_Server -> Ojs.t = Obj.magic
        and tls_TLSSocket_of_js : Ojs.t -> tls_TLSSocket = Obj.magic
        and tls_TLSSocket_to_js : tls_TLSSocket -> Ojs.t = Obj.magic
        and tls_TLSSocketOptions_of_js : Ojs.t -> tls_TLSSocketOptions =
          Obj.magic
        and tls_TLSSocketOptions_to_js : tls_TLSSocketOptions -> Ojs.t =
          Obj.magic
        and tls_TlsOptions_of_js : Ojs.t -> tls_TlsOptions = Obj.magic
        and tls_TlsOptions_to_js : tls_TlsOptions -> Ojs.t = Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x5 : Ojs.t) -> anonymous_interface_0_of_js x5
    and t_to_js : t -> Ojs.t =
      fun (x4 : anonymous_interface_0) -> anonymous_interface_0_to_js x4
    let (get_rejectUnauthorized : t -> bool) =
      fun (x6 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x6) "rejectUnauthorized")
    let (set_rejectUnauthorized : t -> bool -> unit) =
      fun (x7 : t) ->
        fun (x8 : bool) ->
          Ojs.set_prop_ascii (t_to_js x7) "rejectUnauthorized"
            (Ojs.bool_to_js x8)
    let (get_requestCert : t -> bool) =
      fun (x9 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x9) "requestCert")
    let (set_requestCert : t -> bool -> unit) =
      fun (x10 : t) ->
        fun (x11 : bool) ->
          Ojs.set_prop_ascii (t_to_js x10) "requestCert" (Ojs.bool_to_js x11)
  end
module Tls =
  struct
    open Node_net
    let (cLIENT_RENEG_LIMIT : float) =
      Ojs.float_of_js (Ojs.get_prop_ascii Import.tls "CLIENT_RENEG_LIMIT")
    let (cLIENT_RENEG_WINDOW : float) =
      Ojs.float_of_js (Ojs.get_prop_ascii Import.tls "CLIENT_RENEG_WINDOW")
    module Certificate =
      struct
        type t = tls_Certificate
        let rec t_of_js : Ojs.t -> t =
          fun (x13 : Ojs.t) -> tls_Certificate_of_js x13
        and t_to_js : t -> Ojs.t =
          fun (x12 : tls_Certificate) -> tls_Certificate_to_js x12
        let (get_C : t -> string) =
          fun (x14 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x14) "C")
        let (set_C : t -> string -> unit) =
          fun (x15 : t) ->
            fun (x16 : string) ->
              Ojs.set_prop_ascii (t_to_js x15) "C" (Ojs.string_to_js x16)
        let (get_ST : t -> string) =
          fun (x17 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x17) "ST")
        let (set_ST : t -> string -> unit) =
          fun (x18 : t) ->
            fun (x19 : string) ->
              Ojs.set_prop_ascii (t_to_js x18) "ST" (Ojs.string_to_js x19)
        let (get_L : t -> string) =
          fun (x20 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x20) "L")
        let (set_L : t -> string -> unit) =
          fun (x21 : t) ->
            fun (x22 : string) ->
              Ojs.set_prop_ascii (t_to_js x21) "L" (Ojs.string_to_js x22)
        let (get_O : t -> string) =
          fun (x23 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x23) "O")
        let (set_O : t -> string -> unit) =
          fun (x24 : t) ->
            fun (x25 : string) ->
              Ojs.set_prop_ascii (t_to_js x24) "O" (Ojs.string_to_js x25)
        let (get_OU : t -> string) =
          fun (x26 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x26) "OU")
        let (set_OU : t -> string -> unit) =
          fun (x27 : t) ->
            fun (x28 : string) ->
              Ojs.set_prop_ascii (t_to_js x27) "OU" (Ojs.string_to_js x28)
        let (get_CN : t -> string) =
          fun (x29 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x29) "CN")
        let (set_CN : t -> string -> unit) =
          fun (x30 : t) ->
            fun (x31 : string) ->
              Ojs.set_prop_ascii (t_to_js x30) "CN" (Ojs.string_to_js x31)
      end
    module PeerCertificate =
      struct
        type t = tls_PeerCertificate
        let rec t_of_js : Ojs.t -> t =
          fun (x33 : Ojs.t) -> tls_PeerCertificate_of_js x33
        and t_to_js : t -> Ojs.t =
          fun (x32 : tls_PeerCertificate) -> tls_PeerCertificate_to_js x32
        let (get_subject : t -> tls_Certificate) =
          fun (x34 : t) ->
            tls_Certificate_of_js
              (Ojs.get_prop_ascii (t_to_js x34) "subject")
        let (set_subject : t -> tls_Certificate -> unit) =
          fun (x35 : t) ->
            fun (x36 : tls_Certificate) ->
              Ojs.set_prop_ascii (t_to_js x35) "subject"
                (tls_Certificate_to_js x36)
        let (get_issuer : t -> tls_Certificate) =
          fun (x37 : t) ->
            tls_Certificate_of_js (Ojs.get_prop_ascii (t_to_js x37) "issuer")
        let (set_issuer : t -> tls_Certificate -> unit) =
          fun (x38 : t) ->
            fun (x39 : tls_Certificate) ->
              Ojs.set_prop_ascii (t_to_js x38) "issuer"
                (tls_Certificate_to_js x39)
        let (get_subjectaltname : t -> string) =
          fun (x40 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x40) "subjectaltname")
        let (set_subjectaltname : t -> string -> unit) =
          fun (x41 : t) ->
            fun (x42 : string) ->
              Ojs.set_prop_ascii (t_to_js x41) "subjectaltname"
                (Ojs.string_to_js x42)
        let (get_infoAccess : t -> string list Dict.t) =
          fun (x43 : t) ->
            Dict.t_of_js
              (fun (x44 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x44)
              (Ojs.get_prop_ascii (t_to_js x43) "infoAccess")
        let (set_infoAccess : t -> string list Dict.t -> unit) =
          fun (x46 : t) ->
            fun (x47 : string list Dict.t) ->
              Ojs.set_prop_ascii (t_to_js x46) "infoAccess"
                (Dict.t_to_js
                   (fun (x48 : string list) ->
                      Ojs.list_to_js Ojs.string_to_js x48) x47)
        let (get_modulus : t -> string) =
          fun (x50 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x50) "modulus")
        let (set_modulus : t -> string -> unit) =
          fun (x51 : t) ->
            fun (x52 : string) ->
              Ojs.set_prop_ascii (t_to_js x51) "modulus"
                (Ojs.string_to_js x52)
        let (get_exponent : t -> string) =
          fun (x53 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x53) "exponent")
        let (set_exponent : t -> string -> unit) =
          fun (x54 : t) ->
            fun (x55 : string) ->
              Ojs.set_prop_ascii (t_to_js x54) "exponent"
                (Ojs.string_to_js x55)
        let (get_valid_from : t -> string) =
          fun (x56 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x56) "valid_from")
        let (set_valid_from : t -> string -> unit) =
          fun (x57 : t) ->
            fun (x58 : string) ->
              Ojs.set_prop_ascii (t_to_js x57) "valid_from"
                (Ojs.string_to_js x58)
        let (get_valid_to : t -> string) =
          fun (x59 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x59) "valid_to")
        let (set_valid_to : t -> string -> unit) =
          fun (x60 : t) ->
            fun (x61 : string) ->
              Ojs.set_prop_ascii (t_to_js x60) "valid_to"
                (Ojs.string_to_js x61)
        let (get_fingerprint : t -> string) =
          fun (x62 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x62) "fingerprint")
        let (set_fingerprint : t -> string -> unit) =
          fun (x63 : t) ->
            fun (x64 : string) ->
              Ojs.set_prop_ascii (t_to_js x63) "fingerprint"
                (Ojs.string_to_js x64)
        let (get_fingerprint256 : t -> string) =
          fun (x65 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x65) "fingerprint256")
        let (set_fingerprint256 : t -> string -> unit) =
          fun (x66 : t) ->
            fun (x67 : string) ->
              Ojs.set_prop_ascii (t_to_js x66) "fingerprint256"
                (Ojs.string_to_js x67)
        let (get_ext_key_usage : t -> string list) =
          fun (x68 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x68) "ext_key_usage")
        let (set_ext_key_usage : t -> string list -> unit) =
          fun (x70 : t) ->
            fun (x71 : string list) ->
              Ojs.set_prop_ascii (t_to_js x70) "ext_key_usage"
                (Ojs.list_to_js Ojs.string_to_js x71)
        let (get_serialNumber : t -> string) =
          fun (x73 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x73) "serialNumber")
        let (set_serialNumber : t -> string -> unit) =
          fun (x74 : t) ->
            fun (x75 : string) ->
              Ojs.set_prop_ascii (t_to_js x74) "serialNumber"
                (Ojs.string_to_js x75)
        let (get_raw : t -> Buffer.t) =
          fun (x76 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x76) "raw")
        let (set_raw : t -> Buffer.t -> unit) =
          fun (x77 : t) ->
            fun (x78 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x77) "raw" (Buffer.t_to_js x78)
      end
    module DetailedPeerCertificate =
      struct
        type t = tls_DetailedPeerCertificate
        let rec t_of_js : Ojs.t -> t =
          fun (x80 : Ojs.t) -> tls_DetailedPeerCertificate_of_js x80
        and t_to_js : t -> Ojs.t =
          fun (x79 : tls_DetailedPeerCertificate) ->
            tls_DetailedPeerCertificate_to_js x79
        let (get_issuerCertificate : t -> t) =
          fun (x81 : t) ->
            t_of_js (Ojs.get_prop_ascii (t_to_js x81) "issuerCertificate")
        let (set_issuerCertificate : t -> t -> unit) =
          fun (x82 : t) ->
            fun (x83 : t) ->
              Ojs.set_prop_ascii (t_to_js x82) "issuerCertificate"
                (t_to_js x83)
        let (cast : t -> tls_PeerCertificate) =
          fun (x84 : t) -> tls_PeerCertificate_of_js (t_to_js x84)
      end
    module CipherNameAndProtocol =
      struct
        type t = tls_CipherNameAndProtocol
        let rec t_of_js : Ojs.t -> t =
          fun (x86 : Ojs.t) -> tls_CipherNameAndProtocol_of_js x86
        and t_to_js : t -> Ojs.t =
          fun (x85 : tls_CipherNameAndProtocol) ->
            tls_CipherNameAndProtocol_to_js x85
        let (get_name : t -> string) =
          fun (x87 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x87) "name")
        let (set_name : t -> string -> unit) =
          fun (x88 : t) ->
            fun (x89 : string) ->
              Ojs.set_prop_ascii (t_to_js x88) "name" (Ojs.string_to_js x89)
        let (get_version : t -> string) =
          fun (x90 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x90) "version")
        let (set_version : t -> string -> unit) =
          fun (x91 : t) ->
            fun (x92 : string) ->
              Ojs.set_prop_ascii (t_to_js x91) "version"
                (Ojs.string_to_js x92)
        let (get_standardName : t -> string) =
          fun (x93 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x93) "standardName")
        let (set_standardName : t -> string -> unit) =
          fun (x94 : t) ->
            fun (x95 : string) ->
              Ojs.set_prop_ascii (t_to_js x94) "standardName"
                (Ojs.string_to_js x95)
      end
    module EphemeralKeyInfo =
      struct
        type t = tls_EphemeralKeyInfo
        let rec t_of_js : Ojs.t -> t =
          fun (x97 : Ojs.t) -> tls_EphemeralKeyInfo_of_js x97
        and t_to_js : t -> Ojs.t =
          fun (x96 : tls_EphemeralKeyInfo) -> tls_EphemeralKeyInfo_to_js x96
        let (get_type : t -> string) =
          fun (x98 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x98) "type")
        let (set_type : t -> string -> unit) =
          fun (x99 : t) ->
            fun (x100 : string) ->
              Ojs.set_prop_ascii (t_to_js x99) "type" (Ojs.string_to_js x100)
        let (get_name : t -> string) =
          fun (x101 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x101) "name")
        let (set_name : t -> string -> unit) =
          fun (x102 : t) ->
            fun (x103 : string) ->
              Ojs.set_prop_ascii (t_to_js x102) "name"
                (Ojs.string_to_js x103)
        let (get_size : t -> float) =
          fun (x104 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x104) "size")
        let (set_size : t -> float -> unit) =
          fun (x105 : t) ->
            fun (x106 : float) ->
              Ojs.set_prop_ascii (t_to_js x105) "size" (Ojs.float_to_js x106)
      end
    module KeyObject =
      struct
        type t = tls_KeyObject
        let rec t_of_js : Ojs.t -> t =
          fun (x108 : Ojs.t) -> tls_KeyObject_of_js x108
        and t_to_js : t -> Ojs.t =
          fun (x107 : tls_KeyObject) -> tls_KeyObject_to_js x107
        let (get_pem : t -> Buffer.t or_string) =
          fun (x109 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x109) "pem")
        let (set_pem : t -> Buffer.t or_string -> unit) =
          fun (x111 : t) ->
            fun (x112 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x111) "pem"
                (or_string_to_js Buffer.t_to_js x112)
        let (get_passphrase : t -> string) =
          fun (x114 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x114) "passphrase")
        let (set_passphrase : t -> string -> unit) =
          fun (x115 : t) ->
            fun (x116 : string) ->
              Ojs.set_prop_ascii (t_to_js x115) "passphrase"
                (Ojs.string_to_js x116)
      end
    module PxfObject =
      struct
        type t = tls_PxfObject
        let rec t_of_js : Ojs.t -> t =
          fun (x118 : Ojs.t) -> tls_PxfObject_of_js x118
        and t_to_js : t -> Ojs.t =
          fun (x117 : tls_PxfObject) -> tls_PxfObject_to_js x117
        let (get_buf : t -> Buffer.t or_string) =
          fun (x119 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x119) "buf")
        let (set_buf : t -> Buffer.t or_string -> unit) =
          fun (x121 : t) ->
            fun (x122 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x121) "buf"
                (or_string_to_js Buffer.t_to_js x122)
        let (get_passphrase : t -> string) =
          fun (x124 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x124) "passphrase")
        let (set_passphrase : t -> string -> unit) =
          fun (x125 : t) ->
            fun (x126 : string) ->
              Ojs.set_prop_ascii (t_to_js x125) "passphrase"
                (Ojs.string_to_js x126)
      end
    module TLSSocketOptions =
      struct
        type t = tls_TLSSocketOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x128 : Ojs.t) -> tls_TLSSocketOptions_of_js x128
        and t_to_js : t -> Ojs.t =
          fun (x127 : tls_TLSSocketOptions) ->
            tls_TLSSocketOptions_to_js x127
        let (get_isServer : t -> bool) =
          fun (x129 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x129) "isServer")
        let (set_isServer : t -> bool -> unit) =
          fun (x130 : t) ->
            fun (x131 : bool) ->
              Ojs.set_prop_ascii (t_to_js x130) "isServer"
                (Ojs.bool_to_js x131)
        let (get_server : t -> Net.Server.t) =
          fun (x132 : t) ->
            Net.Server.t_of_js (Ojs.get_prop_ascii (t_to_js x132) "server")
        let (set_server : t -> Net.Server.t -> unit) =
          fun (x133 : t) ->
            fun (x134 : Net.Server.t) ->
              Ojs.set_prop_ascii (t_to_js x133) "server"
                (Net.Server.t_to_js x134)
        let (get_session : t -> Buffer.t) =
          fun (x135 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x135) "session")
        let (set_session : t -> Buffer.t -> unit) =
          fun (x136 : t) ->
            fun (x137 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x136) "session"
                (Buffer.t_to_js x137)
        let (get_requestOCSP : t -> bool) =
          fun (x138 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x138) "requestOCSP")
        let (set_requestOCSP : t -> bool -> unit) =
          fun (x139 : t) ->
            fun (x140 : bool) ->
              Ojs.set_prop_ascii (t_to_js x139) "requestOCSP"
                (Ojs.bool_to_js x140)
        let (cast : t -> tls_SecureContextOptions) =
          fun (x141 : t) -> tls_SecureContextOptions_of_js (t_to_js x141)
        let (cast' : t -> tls_CommonConnectionOptions) =
          fun (x142 : t) -> tls_CommonConnectionOptions_of_js (t_to_js x142)
      end
    module TLSSocket =
      struct
        type t = tls_TLSSocket
        let rec t_of_js : Ojs.t -> t =
          fun (x144 : Ojs.t) -> tls_TLSSocket_of_js x144
        and t_to_js : t -> Ojs.t =
          fun (x143 : tls_TLSSocket) -> tls_TLSSocket_to_js x143
        let (create :
          socket:Net.Socket.t -> ?options:tls_TLSSocketOptions -> unit -> t)
          =
          fun ~socket:(x145 : Net.Socket.t) ->
            fun ?options:(x146 : tls_TLSSocketOptions option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Import.tls "TLSSocket")
                     (let x147 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x147 "push" [|(Net.Socket.t_to_js x145)|]);
                      (match x146 with
                       | Some x148 ->
                           ignore
                             (Ojs.call x147 "push"
                                [|(tls_TLSSocketOptions_to_js x148)|])
                       | None -> ());
                      x147))
        let (get_authorized : t -> bool) =
          fun (x149 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x149) "authorized")
        let (set_authorized : t -> bool -> unit) =
          fun (x150 : t) ->
            fun (x151 : bool) ->
              Ojs.set_prop_ascii (t_to_js x150) "authorized"
                (Ojs.bool_to_js x151)
        let (get_authorizationError : t -> Error.t) =
          fun (x152 : t) ->
            Error.t_of_js
              (Ojs.get_prop_ascii (t_to_js x152) "authorizationError")
        let (set_authorizationError : t -> Error.t -> unit) =
          fun (x153 : t) ->
            fun (x154 : Error.t) ->
              Ojs.set_prop_ascii (t_to_js x153) "authorizationError"
                (Error.t_to_js x154)
        let (get_encrypted : t -> bool) =
          fun (x155 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x155) "encrypted")
        let (set_encrypted : t -> bool -> unit) =
          fun (x156 : t) ->
            fun (x157 : bool) ->
              Ojs.set_prop_ascii (t_to_js x156) "encrypted"
                (Ojs.bool_to_js x157)
        let (get_alpnProtocol : t -> string) =
          fun (x158 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x158) "alpnProtocol")
        let (set_alpnProtocol : t -> string -> unit) =
          fun (x159 : t) ->
            fun (x160 : string) ->
              Ojs.set_prop_ascii (t_to_js x159) "alpnProtocol"
                (Ojs.string_to_js x160)
        let (getCertificate :
          t -> (tls_PeerCertificate, untyped_object) union2 or_null) =
          fun (x161 : t) ->
            or_null_of_js
              (fun (x162 : Ojs.t) ->
                 union2_of_js tls_PeerCertificate_of_js untyped_object_of_js
                   x162) (Ojs.call (t_to_js x161) "getCertificate" [||])
        let (getCipher : t -> tls_CipherNameAndProtocol) =
          fun (x165 : t) ->
            tls_CipherNameAndProtocol_of_js
              (Ojs.call (t_to_js x165) "getCipher" [||])
        let (getEphemeralKeyInfo :
          t -> (tls_EphemeralKeyInfo, untyped_object) union2 or_null) =
          fun (x166 : t) ->
            or_null_of_js
              (fun (x167 : Ojs.t) ->
                 union2_of_js tls_EphemeralKeyInfo_of_js untyped_object_of_js
                   x167) (Ojs.call (t_to_js x166) "getEphemeralKeyInfo" [||])
        let (getFinished : t -> Buffer.t or_undefined) =
          fun (x170 : t) ->
            or_undefined_of_js Buffer.t_of_js
              (Ojs.call (t_to_js x170) "getFinished" [||])
        let (getPeerCertificate :
          t -> detailed:[ `L_b_true ] -> tls_DetailedPeerCertificate) =
          fun (x173 : t) ->
            fun ~detailed:(x172 : [ `L_b_true ]) ->
              tls_DetailedPeerCertificate_of_js
                (Ojs.call (t_to_js x173) "getPeerCertificate"
                   [|((match x172 with
                       | `L_b_true -> Ojs.string_to_js "LBTrue"))|])
        let (getPeerCertificate' :
          t -> ?detailed:[ `L_b_false ] -> unit -> tls_PeerCertificate) =
          fun (x177 : t) ->
            fun ?detailed:(x174 : [ `L_b_false ] option) ->
              fun () ->
                tls_PeerCertificate_of_js
                  (let x178 = t_to_js x177 in
                   Ojs.call (Ojs.get_prop_ascii x178 "getPeerCertificate")
                     "apply"
                     [|x178;((let x175 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x174 with
                               | Some x176 ->
                                   ignore
                                     (Ojs.call x175 "push"
                                        [|((match x176 with
                                            | `L_b_false ->
                                                Ojs.string_to_js "LBFalse"))|])
                               | None -> ());
                              x175))|])
        let (getPeerCertificate'' :
          t ->
            ?detailed:bool ->
              unit ->
                (tls_DetailedPeerCertificate, tls_PeerCertificate) union2)
          =
          fun (x182 : t) ->
            fun ?detailed:(x179 : bool option) ->
              fun () ->
                union2_of_js tls_DetailedPeerCertificate_of_js
                  tls_PeerCertificate_of_js
                  (let x183 = t_to_js x182 in
                   Ojs.call (Ojs.get_prop_ascii x183 "getPeerCertificate")
                     "apply"
                     [|x183;((let x180 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x179 with
                               | Some x181 ->
                                   ignore
                                     (Ojs.call x180 "push"
                                        [|(Ojs.bool_to_js x181)|])
                               | None -> ());
                              x180))|])
        let (getPeerFinished : t -> Buffer.t or_undefined) =
          fun (x186 : t) ->
            or_undefined_of_js Buffer.t_of_js
              (Ojs.call (t_to_js x186) "getPeerFinished" [||])
        let (getProtocol : t -> string or_null) =
          fun (x188 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x188) "getProtocol" [||])
        let (getSession : t -> Buffer.t or_undefined) =
          fun (x190 : t) ->
            or_undefined_of_js Buffer.t_of_js
              (Ojs.call (t_to_js x190) "getSession" [||])
        let (getSharedSigalgs : t -> string list) =
          fun (x192 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x192) "getSharedSigalgs" [||])
        let (getTLSTicket : t -> Buffer.t or_undefined) =
          fun (x194 : t) ->
            or_undefined_of_js Buffer.t_of_js
              (Ojs.call (t_to_js x194) "getTLSTicket" [||])
        let (isSessionReused : t -> bool) =
          fun (x196 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x196) "isSessionReused" [||])
        let (renegotiate :
          t ->
            options:anonymous_interface_0 ->
              callback:(err:Error.t or_null -> unit) -> bool or_undefined)
          =
          fun (x201 : t) ->
            fun ~options:(x197 : anonymous_interface_0) ->
              fun ~callback:(x198 : err:Error.t or_null -> unit) ->
                or_undefined_of_js Ojs.bool_of_js
                  (Ojs.call (t_to_js x201) "renegotiate"
                     [|(anonymous_interface_0_to_js x197);(Ojs.fun_to_js 1
                                                             (fun
                                                                (x199 :
                                                                  Ojs.t)
                                                                ->
                                                                x198
                                                                  ~err:(
                                                                  or_null_of_js
                                                                    Error.t_of_js
                                                                    x199)))|])
        let (setMaxSendFragment : t -> size:float -> bool) =
          fun (x204 : t) ->
            fun ~size:(x203 : float) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x204) "setMaxSendFragment"
                   [|(Ojs.float_to_js x203)|])
        let (disableRenegotiation : t -> unit) =
          fun (x205 : t) ->
            ignore (Ojs.call (t_to_js x205) "disableRenegotiation" [||])
        let (enableTrace : t -> unit) =
          fun (x206 : t) ->
            ignore (Ojs.call (t_to_js x206) "enableTrace" [||])
        let (exportKeyingMaterial :
          t -> length:float -> label:string -> context:Buffer.t -> Buffer.t)
          =
          fun (x210 : t) ->
            fun ~length:(x207 : float) ->
              fun ~label:(x208 : string) ->
                fun ~context:(x209 : Buffer.t) ->
                  Buffer.t_of_js
                    (Ojs.call (t_to_js x210) "exportKeyingMaterial"
                       [|(Ojs.float_to_js x207);(Ojs.string_to_js x208);(
                         Buffer.t_to_js x209)|])
        let (addListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x215 : t) ->
            fun ~event:(x211 : string) ->
              fun ~listener:(x212 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x215) "addListener"
                     [|(Ojs.string_to_js x211);(Ojs.fun_to_js_args
                                                  (fun (x213 : _) ->
                                                     x212
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x213 0)))|])
        let (addListener' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x219 : t) ->
            fun ~event:(x216 : [ `OCSPResponse ]) ->
              fun ~listener:(x217 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x219) "addListener"
                     [|((match x216 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x218 : Ojs.t) ->
                            x217 ~response:(Buffer.t_of_js x218)))|])
        let (addListener'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x222 : t) ->
            fun ~event:(x220 : [ `secureConnect ]) ->
              fun ~listener:(x221 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x222) "addListener"
                     [|((match x220 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x221 ()))|])
        let (addListener''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x226 : t) ->
            fun ~event:(x223 : [ `session ]) ->
              fun ~listener:(x224 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x226) "addListener"
                     [|((match x223 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x225 : Ojs.t) ->
                            x224 ~session:(Buffer.t_of_js x225)))|])
        let (addListener'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x230 : t) ->
            fun ~event:(x227 : [ `keylog ]) ->
              fun ~listener:(x228 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x230) "addListener"
                     [|((match x227 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x229 :
                                                                    Ojs.t) ->
                                                                    x228
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x229)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x236 : t) ->
            fun ~event:(x231 : symbol or_string) ->
              fun ~args:(x232 : any list) ->
                Ojs.bool_of_js
                  (let x237 = t_to_js x236 in
                   Ojs.call (Ojs.get_prop_ascii x237 "emit") "apply"
                     [|x237;((let x233 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x233 "push"
                                   [|(or_string_to_js symbol_to_js x231)|]);
                              List.iter
                                (fun (x234 : any) ->
                                   ignore
                                     (Ojs.call x233 "push"
                                        [|(any_to_js x234)|])) x232;
                              x233))|])
        let (emit' :
          t -> event:[ `OCSPResponse ] -> response:Buffer.t -> bool) =
          fun (x240 : t) ->
            fun ~event:(x238 : [ `OCSPResponse ]) ->
              fun ~response:(x239 : Buffer.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x240) "emit"
                     [|((match x238 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Buffer.t_to_js x239)|])
        let (emit'' : t -> event:[ `secureConnect ] -> bool) =
          fun (x242 : t) ->
            fun ~event:(x241 : [ `secureConnect ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x242) "emit"
                   [|((match x241 with
                       | `secureConnect -> Ojs.string_to_js "secureConnect"))|])
        let (emit''' : t -> event:[ `session ] -> session:Buffer.t -> bool) =
          fun (x245 : t) ->
            fun ~event:(x243 : [ `session ]) ->
              fun ~session:(x244 : Buffer.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x245) "emit"
                     [|((match x243 with
                         | `session -> Ojs.string_to_js "session"));(
                       Buffer.t_to_js x244)|])
        let (emit'''' : t -> event:[ `keylog ] -> line:Buffer.t -> bool) =
          fun (x248 : t) ->
            fun ~event:(x246 : [ `keylog ]) ->
              fun ~line:(x247 : Buffer.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x248) "emit"
                     [|((match x246 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Buffer.t_to_js
                                                                    x247)|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x253 : t) ->
            fun ~event:(x249 : string) ->
              fun ~listener:(x250 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x253) "on"
                     [|(Ojs.string_to_js x249);(Ojs.fun_to_js_args
                                                  (fun (x251 : _) ->
                                                     x250
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x251 0)))|])
        let (on' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x257 : t) ->
            fun ~event:(x254 : [ `OCSPResponse ]) ->
              fun ~listener:(x255 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x257) "on"
                     [|((match x254 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x256 : Ojs.t) ->
                            x255 ~response:(Buffer.t_of_js x256)))|])
        let (on'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x260 : t) ->
            fun ~event:(x258 : [ `secureConnect ]) ->
              fun ~listener:(x259 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x260) "on"
                     [|((match x258 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x259 ()))|])
        let (on''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x264 : t) ->
            fun ~event:(x261 : [ `session ]) ->
              fun ~listener:(x262 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x264) "on"
                     [|((match x261 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x263 : Ojs.t) ->
                            x262 ~session:(Buffer.t_of_js x263)))|])
        let (on'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x268 : t) ->
            fun ~event:(x265 : [ `keylog ]) ->
              fun ~listener:(x266 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x268) "on"
                     [|((match x265 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x267 :
                                                                    Ojs.t) ->
                                                                    x266
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x267)))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x273 : t) ->
            fun ~event:(x269 : string) ->
              fun ~listener:(x270 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x273) "once"
                     [|(Ojs.string_to_js x269);(Ojs.fun_to_js_args
                                                  (fun (x271 : _) ->
                                                     x270
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x271 0)))|])
        let (once' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x277 : t) ->
            fun ~event:(x274 : [ `OCSPResponse ]) ->
              fun ~listener:(x275 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x277) "once"
                     [|((match x274 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x276 : Ojs.t) ->
                            x275 ~response:(Buffer.t_of_js x276)))|])
        let (once'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x280 : t) ->
            fun ~event:(x278 : [ `secureConnect ]) ->
              fun ~listener:(x279 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x280) "once"
                     [|((match x278 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x279 ()))|])
        let (once''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x284 : t) ->
            fun ~event:(x281 : [ `session ]) ->
              fun ~listener:(x282 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x284) "once"
                     [|((match x281 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x283 : Ojs.t) ->
                            x282 ~session:(Buffer.t_of_js x283)))|])
        let (once'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x288 : t) ->
            fun ~event:(x285 : [ `keylog ]) ->
              fun ~listener:(x286 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x288) "once"
                     [|((match x285 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x287 :
                                                                    Ojs.t) ->
                                                                    x286
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x287)))|])
        let (prependListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x293 : t) ->
            fun ~event:(x289 : string) ->
              fun ~listener:(x290 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x293) "prependListener"
                     [|(Ojs.string_to_js x289);(Ojs.fun_to_js_args
                                                  (fun (x291 : _) ->
                                                     x290
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x291 0)))|])
        let (prependListener' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x297 : t) ->
            fun ~event:(x294 : [ `OCSPResponse ]) ->
              fun ~listener:(x295 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x297) "prependListener"
                     [|((match x294 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x296 : Ojs.t) ->
                            x295 ~response:(Buffer.t_of_js x296)))|])
        let (prependListener'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x300 : t) ->
            fun ~event:(x298 : [ `secureConnect ]) ->
              fun ~listener:(x299 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x300) "prependListener"
                     [|((match x298 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x299 ()))|])
        let (prependListener''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x304 : t) ->
            fun ~event:(x301 : [ `session ]) ->
              fun ~listener:(x302 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x304) "prependListener"
                     [|((match x301 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x303 : Ojs.t) ->
                            x302 ~session:(Buffer.t_of_js x303)))|])
        let (prependListener'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x308 : t) ->
            fun ~event:(x305 : [ `keylog ]) ->
              fun ~listener:(x306 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x308) "prependListener"
                     [|((match x305 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x307 :
                                                                    Ojs.t) ->
                                                                    x306
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x307)))|])
        let (prependOnceListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x313 : t) ->
            fun ~event:(x309 : string) ->
              fun ~listener:(x310 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x313) "prependOnceListener"
                     [|(Ojs.string_to_js x309);(Ojs.fun_to_js_args
                                                  (fun (x311 : _) ->
                                                     x310
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x311 0)))|])
        let (prependOnceListener' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x317 : t) ->
            fun ~event:(x314 : [ `OCSPResponse ]) ->
              fun ~listener:(x315 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x317) "prependOnceListener"
                     [|((match x314 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x316 : Ojs.t) ->
                            x315 ~response:(Buffer.t_of_js x316)))|])
        let (prependOnceListener'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x320 : t) ->
            fun ~event:(x318 : [ `secureConnect ]) ->
              fun ~listener:(x319 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x320) "prependOnceListener"
                     [|((match x318 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x319 ()))|])
        let (prependOnceListener''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x324 : t) ->
            fun ~event:(x321 : [ `session ]) ->
              fun ~listener:(x322 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x324) "prependOnceListener"
                     [|((match x321 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x323 : Ojs.t) ->
                            x322 ~session:(Buffer.t_of_js x323)))|])
        let (prependOnceListener'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x328 : t) ->
            fun ~event:(x325 : [ `keylog ]) ->
              fun ~listener:(x326 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x328) "prependOnceListener"
                     [|((match x325 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x327 :
                                                                    Ojs.t) ->
                                                                    x326
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x327)))|])
        let (cast : t -> Net.Socket.t) =
          fun (x329 : t) -> Net.Socket.t_of_js (t_to_js x329)
      end
    module CommonConnectionOptions =
      struct
        type t = tls_CommonConnectionOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x331 : Ojs.t) -> tls_CommonConnectionOptions_of_js x331
        and t_to_js : t -> Ojs.t =
          fun (x330 : tls_CommonConnectionOptions) ->
            tls_CommonConnectionOptions_to_js x330
        let (get_secureContext : t -> tls_SecureContext) =
          fun (x332 : t) ->
            tls_SecureContext_of_js
              (Ojs.get_prop_ascii (t_to_js x332) "secureContext")
        let (set_secureContext : t -> tls_SecureContext -> unit) =
          fun (x333 : t) ->
            fun (x334 : tls_SecureContext) ->
              Ojs.set_prop_ascii (t_to_js x333) "secureContext"
                (tls_SecureContext_to_js x334)
        let (get_enableTrace : t -> bool) =
          fun (x335 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x335) "enableTrace")
        let (set_enableTrace : t -> bool -> unit) =
          fun (x336 : t) ->
            fun (x337 : bool) ->
              Ojs.set_prop_ascii (t_to_js x336) "enableTrace"
                (Ojs.bool_to_js x337)
        let (get_requestCert : t -> bool) =
          fun (x338 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x338) "requestCert")
        let (set_requestCert : t -> bool -> unit) =
          fun (x339 : t) ->
            fun (x340 : bool) ->
              Ojs.set_prop_ascii (t_to_js x339) "requestCert"
                (Ojs.bool_to_js x340)
        let (get_ALPNProtocols :
          t -> (Uint8Array.t, Uint8Array.t or_string) or_array) =
          fun (x341 : t) ->
            or_array_of_js Uint8Array.t_of_js
              (fun (x343 : Ojs.t) -> or_string_of_js Uint8Array.t_of_js x343)
              (Ojs.get_prop_ascii (t_to_js x341) "ALPNProtocols")
        let (set_ALPNProtocols :
          t -> (Uint8Array.t, Uint8Array.t or_string) or_array -> unit) =
          fun (x345 : t) ->
            fun (x346 : (Uint8Array.t, Uint8Array.t or_string) or_array) ->
              Ojs.set_prop_ascii (t_to_js x345) "ALPNProtocols"
                (or_array_to_js Uint8Array.t_to_js
                   (fun (x348 : Uint8Array.t or_string) ->
                      or_string_to_js Uint8Array.t_to_js x348) x346)
        let (sNICallback :
          t ->
            servername:string ->
              cb:(err:Error.t or_null -> ctx:tls_SecureContext -> unit) ->
                unit)
          =
          fun (x355 : t) ->
            fun ~servername:(x350 : string) ->
              fun
                ~cb:(x351 :
                      err:Error.t or_null -> ctx:tls_SecureContext -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x355) "SNICallback"
                     [|(Ojs.string_to_js x350);(Ojs.fun_to_js 2
                                                  (fun (x352 : Ojs.t) ->
                                                     fun (x354 : Ojs.t) ->
                                                       x351
                                                         ~err:(or_null_of_js
                                                                 Error.t_of_js
                                                                 x352)
                                                         ~ctx:(tls_SecureContext_of_js
                                                                 x354)))|])
        let (get_rejectUnauthorized : t -> bool) =
          fun (x356 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x356) "rejectUnauthorized")
        let (set_rejectUnauthorized : t -> bool -> unit) =
          fun (x357 : t) ->
            fun (x358 : bool) ->
              Ojs.set_prop_ascii (t_to_js x357) "rejectUnauthorized"
                (Ojs.bool_to_js x358)
      end
    module TlsOptions =
      struct
        type t = tls_TlsOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x360 : Ojs.t) -> tls_TlsOptions_of_js x360
        and t_to_js : t -> Ojs.t =
          fun (x359 : tls_TlsOptions) -> tls_TlsOptions_to_js x359
        let (get_handshakeTimeout : t -> float) =
          fun (x361 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x361) "handshakeTimeout")
        let (set_handshakeTimeout : t -> float -> unit) =
          fun (x362 : t) ->
            fun (x363 : float) ->
              Ojs.set_prop_ascii (t_to_js x362) "handshakeTimeout"
                (Ojs.float_to_js x363)
        let (get_sessionTimeout : t -> float) =
          fun (x364 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x364) "sessionTimeout")
        let (set_sessionTimeout : t -> float -> unit) =
          fun (x365 : t) ->
            fun (x366 : float) ->
              Ojs.set_prop_ascii (t_to_js x365) "sessionTimeout"
                (Ojs.float_to_js x366)
        let (get_ticketKeys : t -> Buffer.t) =
          fun (x367 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x367) "ticketKeys")
        let (set_ticketKeys : t -> Buffer.t -> unit) =
          fun (x368 : t) ->
            fun (x369 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x368) "ticketKeys"
                (Buffer.t_to_js x369)
        let (pskCallback :
          t ->
            socket:tls_TLSSocket ->
              identity:string -> (DataView.t, TypedArray.t) union2 or_null)
          =
          fun (x372 : t) ->
            fun ~socket:(x370 : tls_TLSSocket) ->
              fun ~identity:(x371 : string) ->
                or_null_of_js
                  (fun (x373 : Ojs.t) ->
                     union2_of_js DataView.t_of_js TypedArray.t_of_js x373)
                  (Ojs.call (t_to_js x372) "pskCallback"
                     [|(tls_TLSSocket_to_js x370);(Ojs.string_to_js x371)|])
        let (get_pskIdentityHint : t -> string) =
          fun (x376 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x376) "pskIdentityHint")
        let (set_pskIdentityHint : t -> string -> unit) =
          fun (x377 : t) ->
            fun (x378 : string) ->
              Ojs.set_prop_ascii (t_to_js x377) "pskIdentityHint"
                (Ojs.string_to_js x378)
        let (cast : t -> tls_SecureContextOptions) =
          fun (x379 : t) -> tls_SecureContextOptions_of_js (t_to_js x379)
        let (cast' : t -> tls_CommonConnectionOptions) =
          fun (x380 : t) -> tls_CommonConnectionOptions_of_js (t_to_js x380)
        let (cast'' : t -> Net.ServerOpts.t) =
          fun (x381 : t) -> Net.ServerOpts.t_of_js (t_to_js x381)
      end
    module PSKCallbackNegotation =
      struct
        type t = tls_PSKCallbackNegotation
        let rec t_of_js : Ojs.t -> t =
          fun (x383 : Ojs.t) -> tls_PSKCallbackNegotation_of_js x383
        and t_to_js : t -> Ojs.t =
          fun (x382 : tls_PSKCallbackNegotation) ->
            tls_PSKCallbackNegotation_to_js x382
        let (get_psk : t -> (DataView.t, TypedArray.t) union2) =
          fun (x384 : t) ->
            union2_of_js DataView.t_of_js TypedArray.t_of_js
              (Ojs.get_prop_ascii (t_to_js x384) "psk")
        let (set_psk : t -> (DataView.t, TypedArray.t) union2 -> unit) =
          fun (x387 : t) ->
            fun (x388 : (DataView.t, TypedArray.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x387) "psk"
                (union2_to_js DataView.t_to_js TypedArray.t_to_js x388)
        let (get_identity : t -> string) =
          fun (x391 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x391) "identity")
        let (set_identity : t -> string -> unit) =
          fun (x392 : t) ->
            fun (x393 : string) ->
              Ojs.set_prop_ascii (t_to_js x392) "identity"
                (Ojs.string_to_js x393)
      end
    module ConnectionOptions =
      struct
        type t = tls_ConnectionOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x395 : Ojs.t) -> tls_ConnectionOptions_of_js x395
        and t_to_js : t -> Ojs.t =
          fun (x394 : tls_ConnectionOptions) ->
            tls_ConnectionOptions_to_js x394
        let (get_host : t -> string) =
          fun (x396 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x396) "host")
        let (set_host : t -> string -> unit) =
          fun (x397 : t) ->
            fun (x398 : string) ->
              Ojs.set_prop_ascii (t_to_js x397) "host"
                (Ojs.string_to_js x398)
        let (get_port : t -> float) =
          fun (x399 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x399) "port")
        let (set_port : t -> float -> unit) =
          fun (x400 : t) ->
            fun (x401 : float) ->
              Ojs.set_prop_ascii (t_to_js x400) "port" (Ojs.float_to_js x401)
        let (get_path : t -> string) =
          fun (x402 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x402) "path")
        let (set_path : t -> string -> unit) =
          fun (x403 : t) ->
            fun (x404 : string) ->
              Ojs.set_prop_ascii (t_to_js x403) "path"
                (Ojs.string_to_js x404)
        let (get_socket : t -> Net.Socket.t) =
          fun (x405 : t) ->
            Net.Socket.t_of_js (Ojs.get_prop_ascii (t_to_js x405) "socket")
        let (set_socket : t -> Net.Socket.t -> unit) =
          fun (x406 : t) ->
            fun (x407 : Net.Socket.t) ->
              Ojs.set_prop_ascii (t_to_js x406) "socket"
                (Net.Socket.t_to_js x407)
        let (checkServerIdentity :
          t ->
            host:string -> cert:tls_PeerCertificate -> Error.t or_undefined)
          =
          fun (x410 : t) ->
            fun ~host:(x408 : string) ->
              fun ~cert:(x409 : tls_PeerCertificate) ->
                or_undefined_of_js Error.t_of_js
                  (Ojs.call (t_to_js x410) "checkServerIdentity"
                     [|(Ojs.string_to_js x408);(tls_PeerCertificate_to_js
                                                  x409)|])
        let (get_servername : t -> string) =
          fun (x412 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x412) "servername")
        let (set_servername : t -> string -> unit) =
          fun (x413 : t) ->
            fun (x414 : string) ->
              Ojs.set_prop_ascii (t_to_js x413) "servername"
                (Ojs.string_to_js x414)
        let (get_session : t -> Buffer.t) =
          fun (x415 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x415) "session")
        let (set_session : t -> Buffer.t -> unit) =
          fun (x416 : t) ->
            fun (x417 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x416) "session"
                (Buffer.t_to_js x417)
        let (get_minDHSize : t -> float) =
          fun (x418 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x418) "minDHSize")
        let (set_minDHSize : t -> float -> unit) =
          fun (x419 : t) ->
            fun (x420 : float) ->
              Ojs.set_prop_ascii (t_to_js x419) "minDHSize"
                (Ojs.float_to_js x420)
        let (get_lookup : t -> Net.LookupFunction.t) =
          fun (x421 : t) ->
            Net.LookupFunction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x421) "lookup")
        let (set_lookup : t -> Net.LookupFunction.t -> unit) =
          fun (x422 : t) ->
            fun (x423 : Net.LookupFunction.t) ->
              Ojs.set_prop_ascii (t_to_js x422) "lookup"
                (Net.LookupFunction.t_to_js x423)
        let (get_timeout : t -> float) =
          fun (x424 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x424) "timeout")
        let (set_timeout : t -> float -> unit) =
          fun (x425 : t) ->
            fun (x426 : float) ->
              Ojs.set_prop_ascii (t_to_js x425) "timeout"
                (Ojs.float_to_js x426)
        let (pskCallback :
          t -> hint:string or_null -> tls_PSKCallbackNegotation or_null) =
          fun (x429 : t) ->
            fun ~hint:(x427 : string or_null) ->
              or_null_of_js tls_PSKCallbackNegotation_of_js
                (Ojs.call (t_to_js x429) "pskCallback"
                   [|(or_null_to_js Ojs.string_to_js x427)|])
        let (cast : t -> tls_SecureContextOptions) =
          fun (x431 : t) -> tls_SecureContextOptions_of_js (t_to_js x431)
        let (cast' : t -> tls_CommonConnectionOptions) =
          fun (x432 : t) -> tls_CommonConnectionOptions_of_js (t_to_js x432)
      end
    module Server =
      struct
        type t = tls_Server
        let rec t_of_js : Ojs.t -> t =
          fun (x434 : Ojs.t) -> tls_Server_of_js x434
        and t_to_js : t -> Ojs.t =
          fun (x433 : tls_Server) -> tls_Server_to_js x433
        let (create :
          ?secureConnectionListener:(socket:tls_TLSSocket -> unit) ->
            unit -> t)
          =
          fun
            ?secureConnectionListener:(x435 :
                                        (socket:tls_TLSSocket -> unit) option)
            ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.tls "Server")
                   (let x436 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x435 with
                     | Some x437 ->
                         ignore
                           (Ojs.call x436 "push"
                              [|(Ojs.fun_to_js 1
                                   (fun (x438 : Ojs.t) ->
                                      x437 ~socket:(tls_TLSSocket_of_js x438)))|])
                     | None -> ());
                    x436))
        let (create' :
          options:tls_TlsOptions ->
            ?secureConnectionListener:(socket:tls_TLSSocket -> unit) ->
              unit -> t)
          =
          fun ~options:(x439 : tls_TlsOptions) ->
            fun
              ?secureConnectionListener:(x440 :
                                          (socket:tls_TLSSocket -> unit)
                                            option)
              ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.tls "Server")
                     (let x441 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x441 "push" [|(tls_TlsOptions_to_js x439)|]);
                      (match x440 with
                       | Some x442 ->
                           ignore
                             (Ojs.call x441 "push"
                                [|(Ojs.fun_to_js 1
                                     (fun (x443 : Ojs.t) ->
                                        x442
                                          ~socket:(tls_TLSSocket_of_js x443)))|])
                       | None -> ());
                      x441))
        let (addContext :
          t ->
            hostName:string -> credentials:tls_SecureContextOptions -> unit)
          =
          fun (x446 : t) ->
            fun ~hostName:(x444 : string) ->
              fun ~credentials:(x445 : tls_SecureContextOptions) ->
                ignore
                  (Ojs.call (t_to_js x446) "addContext"
                     [|(Ojs.string_to_js x444);(tls_SecureContextOptions_to_js
                                                  x445)|])
        let (getTicketKeys : t -> Buffer.t) =
          fun (x447 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x447) "getTicketKeys" [||])
        let (setSecureContext :
          t -> details:tls_SecureContextOptions -> unit) =
          fun (x449 : t) ->
            fun ~details:(x448 : tls_SecureContextOptions) ->
              ignore
                (Ojs.call (t_to_js x449) "setSecureContext"
                   [|(tls_SecureContextOptions_to_js x448)|])
        let (setTicketKeys : t -> keys:Buffer.t -> unit) =
          fun (x451 : t) ->
            fun ~keys:(x450 : Buffer.t) ->
              ignore
                (Ojs.call (t_to_js x451) "setTicketKeys"
                   [|(Buffer.t_to_js x450)|])
        let (addListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x456 : t) ->
            fun ~event:(x452 : string) ->
              fun ~listener:(x453 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x456) "addListener"
                     [|(Ojs.string_to_js x452);(Ojs.fun_to_js_args
                                                  (fun (x454 : _) ->
                                                     x453
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x454 0)))|])
        let (addListener' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x461 : t) ->
            fun ~event:(x457 : [ `tlsClientError ]) ->
              fun
                ~listener:(x458 :
                            err:Error.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x461) "addListener"
                     [|((match x457 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x459 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x460 :
                                                                    Ojs.t) ->
                                                                    x458
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x459)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x460)))|])
        let (addListener'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          sessionData:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x469 : t) ->
            fun ~event:(x462 : [ `newSession ]) ->
              fun
                ~listener:(x463 :
                            sessionId:Buffer.t ->
                              sessionData:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x469) "addListener"
                     [|((match x462 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x464 : Ojs.t) ->
                            fun (x465 : Ojs.t) ->
                              fun (x466 : Ojs.t) ->
                                x463 ~sessionId:(Buffer.t_of_js x464)
                                  ~sessionData:(Buffer.t_of_js x465)
                                  ~callback:(fun ~err:(x467 : Error.t) ->
                                               fun ~resp:(x468 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x466
                                                      [|(Error.t_to_js x467);(
                                                        Buffer.t_to_js x468)|]))))|])
        let (addListener''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x478 : t) ->
            fun ~event:(x470 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x471 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x478) "addListener"
                     [|((match x470 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x472 : Ojs.t) ->
                            fun (x473 : Ojs.t) ->
                              fun (x474 : Ojs.t) ->
                                x471 ~certificate:(Buffer.t_of_js x472)
                                  ~issuer:(Buffer.t_of_js x473)
                                  ~callback:(fun
                                               ~err:(x475 : Error.t or_null)
                                               ->
                                               fun ~resp:(x477 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x474
                                                      [|(or_null_to_js
                                                           Error.t_to_js x475);(
                                                        Buffer.t_to_js x477)|]))))|])
        let (addListener'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      sessionData:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x485 : t) ->
            fun ~event:(x479 : [ `resumeSession ]) ->
              fun
                ~listener:(x480 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          sessionData:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x485) "addListener"
                     [|((match x479 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x481 : Ojs.t) ->
                            fun (x482 : Ojs.t) ->
                              x480 ~sessionId:(Buffer.t_of_js x481)
                                ~callback:(fun ~err:(x483 : Error.t) ->
                                             fun
                                               ~sessionData:(x484 : Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x482
                                                    [|(Error.t_to_js x483);(
                                                      Buffer.t_to_js x484)|]))))|])
        let (addListener''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x489 : t) ->
            fun ~event:(x486 : [ `secureConnection ]) ->
              fun ~listener:(x487 : tlsSocket:tls_TLSSocket -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x489) "addListener"
                     [|((match x486 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x488 :
                                                                    Ojs.t) ->
                                                                    x487
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x488)))|])
        let (addListener'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit) ->
                t)
          =
          fun (x494 : t) ->
            fun ~event:(x490 : [ `keylog ]) ->
              fun
                ~listener:(x491 :
                            line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x494) "addListener"
                     [|((match x490 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x492 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x493 :
                                                                    Ojs.t) ->
                                                                    x491
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x492)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x493)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x500 : t) ->
            fun ~event:(x495 : symbol or_string) ->
              fun ~args:(x496 : any list) ->
                Ojs.bool_of_js
                  (let x501 = t_to_js x500 in
                   Ojs.call (Ojs.get_prop_ascii x501 "emit") "apply"
                     [|x501;((let x497 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x497 "push"
                                   [|(or_string_to_js symbol_to_js x495)|]);
                              List.iter
                                (fun (x498 : any) ->
                                   ignore
                                     (Ojs.call x497 "push"
                                        [|(any_to_js x498)|])) x496;
                              x497))|])
        let (emit' :
          t ->
            event:[ `tlsClientError ] ->
              err:Error.t -> tlsSocket:tls_TLSSocket -> bool)
          =
          fun (x505 : t) ->
            fun ~event:(x502 : [ `tlsClientError ]) ->
              fun ~err:(x503 : Error.t) ->
                fun ~tlsSocket:(x504 : tls_TLSSocket) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x505) "emit"
                       [|((match x502 with
                           | `tlsClientError ->
                               Ojs.string_to_js "tlsClientError"));(Error.t_to_js
                                                                    x503);(
                         tls_TLSSocket_to_js x504)|])
        let (emit'' :
          t ->
            event:[ `newSession ] ->
              sessionId:Buffer.t ->
                sessionData:Buffer.t ->
                  callback:(err:Error.t -> resp:Buffer.t -> unit) -> bool)
          =
          fun (x512 : t) ->
            fun ~event:(x506 : [ `newSession ]) ->
              fun ~sessionId:(x507 : Buffer.t) ->
                fun ~sessionData:(x508 : Buffer.t) ->
                  fun ~callback:(x509 : err:Error.t -> resp:Buffer.t -> unit)
                    ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x512) "emit"
                         [|((match x506 with
                             | `newSession -> Ojs.string_to_js "newSession"));(
                           Buffer.t_to_js x507);(Buffer.t_to_js x508);(
                           Ojs.fun_to_js 2
                             (fun (x510 : Ojs.t) ->
                                fun (x511 : Ojs.t) ->
                                  x509 ~err:(Error.t_of_js x510)
                                    ~resp:(Buffer.t_of_js x511)))|])
        let (emit''' :
          t ->
            event:[ `OCSPRequest ] ->
              certificate:Buffer.t ->
                issuer:Buffer.t ->
                  callback:(err:Error.t or_null -> resp:Buffer.t -> unit) ->
                    bool)
          =
          fun (x520 : t) ->
            fun ~event:(x513 : [ `OCSPRequest ]) ->
              fun ~certificate:(x514 : Buffer.t) ->
                fun ~issuer:(x515 : Buffer.t) ->
                  fun
                    ~callback:(x516 :
                                err:Error.t or_null -> resp:Buffer.t -> unit)
                    ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x520) "emit"
                         [|((match x513 with
                             | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                           Buffer.t_to_js x514);(Buffer.t_to_js x515);(
                           Ojs.fun_to_js 2
                             (fun (x517 : Ojs.t) ->
                                fun (x519 : Ojs.t) ->
                                  x516
                                    ~err:(or_null_of_js Error.t_of_js x517)
                                    ~resp:(Buffer.t_of_js x519)))|])
        let (emit'''' :
          t ->
            event:[ `resumeSession ] ->
              sessionId:Buffer.t ->
                callback:(err:Error.t -> sessionData:Buffer.t -> unit) ->
                  bool)
          =
          fun (x526 : t) ->
            fun ~event:(x521 : [ `resumeSession ]) ->
              fun ~sessionId:(x522 : Buffer.t) ->
                fun
                  ~callback:(x523 :
                              err:Error.t -> sessionData:Buffer.t -> unit)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x526) "emit"
                       [|((match x521 with
                           | `resumeSession ->
                               Ojs.string_to_js "resumeSession"));(Buffer.t_to_js
                                                                    x522);(
                         Ojs.fun_to_js 2
                           (fun (x524 : Ojs.t) ->
                              fun (x525 : Ojs.t) ->
                                x523 ~err:(Error.t_of_js x524)
                                  ~sessionData:(Buffer.t_of_js x525)))|])
        let (emit''''' :
          t -> event:[ `secureConnection ] -> tlsSocket:tls_TLSSocket -> bool)
          =
          fun (x529 : t) ->
            fun ~event:(x527 : [ `secureConnection ]) ->
              fun ~tlsSocket:(x528 : tls_TLSSocket) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x529) "emit"
                     [|((match x527 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(tls_TLSSocket_to_js
                                                                    x528)|])
        let (emit'''''' :
          t ->
            event:[ `keylog ] ->
              line:Buffer.t -> tlsSocket:tls_TLSSocket -> bool)
          =
          fun (x533 : t) ->
            fun ~event:(x530 : [ `keylog ]) ->
              fun ~line:(x531 : Buffer.t) ->
                fun ~tlsSocket:(x532 : tls_TLSSocket) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x533) "emit"
                       [|((match x530 with
                           | `keylog -> Ojs.string_to_js "keylog"));(
                         Buffer.t_to_js x531);(tls_TLSSocket_to_js x532)|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x538 : t) ->
            fun ~event:(x534 : string) ->
              fun ~listener:(x535 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x538) "on"
                     [|(Ojs.string_to_js x534);(Ojs.fun_to_js_args
                                                  (fun (x536 : _) ->
                                                     x535
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x536 0)))|])
        let (on' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x543 : t) ->
            fun ~event:(x539 : [ `tlsClientError ]) ->
              fun
                ~listener:(x540 :
                            err:Error.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x543) "on"
                     [|((match x539 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x541 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x542 :
                                                                    Ojs.t) ->
                                                                    x540
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x541)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x542)))|])
        let (on'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          sessionData:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x551 : t) ->
            fun ~event:(x544 : [ `newSession ]) ->
              fun
                ~listener:(x545 :
                            sessionId:Buffer.t ->
                              sessionData:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x551) "on"
                     [|((match x544 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x546 : Ojs.t) ->
                            fun (x547 : Ojs.t) ->
                              fun (x548 : Ojs.t) ->
                                x545 ~sessionId:(Buffer.t_of_js x546)
                                  ~sessionData:(Buffer.t_of_js x547)
                                  ~callback:(fun ~err:(x549 : Error.t) ->
                                               fun ~resp:(x550 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x548
                                                      [|(Error.t_to_js x549);(
                                                        Buffer.t_to_js x550)|]))))|])
        let (on''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x560 : t) ->
            fun ~event:(x552 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x553 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x560) "on"
                     [|((match x552 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x554 : Ojs.t) ->
                            fun (x555 : Ojs.t) ->
                              fun (x556 : Ojs.t) ->
                                x553 ~certificate:(Buffer.t_of_js x554)
                                  ~issuer:(Buffer.t_of_js x555)
                                  ~callback:(fun
                                               ~err:(x557 : Error.t or_null)
                                               ->
                                               fun ~resp:(x559 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x556
                                                      [|(or_null_to_js
                                                           Error.t_to_js x557);(
                                                        Buffer.t_to_js x559)|]))))|])
        let (on'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      sessionData:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x567 : t) ->
            fun ~event:(x561 : [ `resumeSession ]) ->
              fun
                ~listener:(x562 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          sessionData:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x567) "on"
                     [|((match x561 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x563 : Ojs.t) ->
                            fun (x564 : Ojs.t) ->
                              x562 ~sessionId:(Buffer.t_of_js x563)
                                ~callback:(fun ~err:(x565 : Error.t) ->
                                             fun
                                               ~sessionData:(x566 : Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x564
                                                    [|(Error.t_to_js x565);(
                                                      Buffer.t_to_js x566)|]))))|])
        let (on''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x571 : t) ->
            fun ~event:(x568 : [ `secureConnection ]) ->
              fun ~listener:(x569 : tlsSocket:tls_TLSSocket -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x571) "on"
                     [|((match x568 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x570 :
                                                                    Ojs.t) ->
                                                                    x569
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x570)))|])
        let (on'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit) ->
                t)
          =
          fun (x576 : t) ->
            fun ~event:(x572 : [ `keylog ]) ->
              fun
                ~listener:(x573 :
                            line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x576) "on"
                     [|((match x572 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x574 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x575 :
                                                                    Ojs.t) ->
                                                                    x573
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x574)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x575)))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x581 : t) ->
            fun ~event:(x577 : string) ->
              fun ~listener:(x578 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x581) "once"
                     [|(Ojs.string_to_js x577);(Ojs.fun_to_js_args
                                                  (fun (x579 : _) ->
                                                     x578
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x579 0)))|])
        let (once' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x586 : t) ->
            fun ~event:(x582 : [ `tlsClientError ]) ->
              fun
                ~listener:(x583 :
                            err:Error.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x586) "once"
                     [|((match x582 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x584 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x585 :
                                                                    Ojs.t) ->
                                                                    x583
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x584)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x585)))|])
        let (once'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          sessionData:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x594 : t) ->
            fun ~event:(x587 : [ `newSession ]) ->
              fun
                ~listener:(x588 :
                            sessionId:Buffer.t ->
                              sessionData:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x594) "once"
                     [|((match x587 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x589 : Ojs.t) ->
                            fun (x590 : Ojs.t) ->
                              fun (x591 : Ojs.t) ->
                                x588 ~sessionId:(Buffer.t_of_js x589)
                                  ~sessionData:(Buffer.t_of_js x590)
                                  ~callback:(fun ~err:(x592 : Error.t) ->
                                               fun ~resp:(x593 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x591
                                                      [|(Error.t_to_js x592);(
                                                        Buffer.t_to_js x593)|]))))|])
        let (once''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x603 : t) ->
            fun ~event:(x595 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x596 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x603) "once"
                     [|((match x595 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x597 : Ojs.t) ->
                            fun (x598 : Ojs.t) ->
                              fun (x599 : Ojs.t) ->
                                x596 ~certificate:(Buffer.t_of_js x597)
                                  ~issuer:(Buffer.t_of_js x598)
                                  ~callback:(fun
                                               ~err:(x600 : Error.t or_null)
                                               ->
                                               fun ~resp:(x602 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x599
                                                      [|(or_null_to_js
                                                           Error.t_to_js x600);(
                                                        Buffer.t_to_js x602)|]))))|])
        let (once'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      sessionData:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x610 : t) ->
            fun ~event:(x604 : [ `resumeSession ]) ->
              fun
                ~listener:(x605 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          sessionData:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x610) "once"
                     [|((match x604 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x606 : Ojs.t) ->
                            fun (x607 : Ojs.t) ->
                              x605 ~sessionId:(Buffer.t_of_js x606)
                                ~callback:(fun ~err:(x608 : Error.t) ->
                                             fun
                                               ~sessionData:(x609 : Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x607
                                                    [|(Error.t_to_js x608);(
                                                      Buffer.t_to_js x609)|]))))|])
        let (once''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x614 : t) ->
            fun ~event:(x611 : [ `secureConnection ]) ->
              fun ~listener:(x612 : tlsSocket:tls_TLSSocket -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x614) "once"
                     [|((match x611 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x613 :
                                                                    Ojs.t) ->
                                                                    x612
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x613)))|])
        let (once'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit) ->
                t)
          =
          fun (x619 : t) ->
            fun ~event:(x615 : [ `keylog ]) ->
              fun
                ~listener:(x616 :
                            line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x619) "once"
                     [|((match x615 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x617 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x618 :
                                                                    Ojs.t) ->
                                                                    x616
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x617)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x618)))|])
        let (prependListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x624 : t) ->
            fun ~event:(x620 : string) ->
              fun ~listener:(x621 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x624) "prependListener"
                     [|(Ojs.string_to_js x620);(Ojs.fun_to_js_args
                                                  (fun (x622 : _) ->
                                                     x621
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x622 0)))|])
        let (prependListener' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x629 : t) ->
            fun ~event:(x625 : [ `tlsClientError ]) ->
              fun
                ~listener:(x626 :
                            err:Error.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x629) "prependListener"
                     [|((match x625 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x627 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x628 :
                                                                    Ojs.t) ->
                                                                    x626
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x627)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x628)))|])
        let (prependListener'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          sessionData:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x637 : t) ->
            fun ~event:(x630 : [ `newSession ]) ->
              fun
                ~listener:(x631 :
                            sessionId:Buffer.t ->
                              sessionData:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x637) "prependListener"
                     [|((match x630 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x632 : Ojs.t) ->
                            fun (x633 : Ojs.t) ->
                              fun (x634 : Ojs.t) ->
                                x631 ~sessionId:(Buffer.t_of_js x632)
                                  ~sessionData:(Buffer.t_of_js x633)
                                  ~callback:(fun ~err:(x635 : Error.t) ->
                                               fun ~resp:(x636 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x634
                                                      [|(Error.t_to_js x635);(
                                                        Buffer.t_to_js x636)|]))))|])
        let (prependListener''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x646 : t) ->
            fun ~event:(x638 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x639 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x646) "prependListener"
                     [|((match x638 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x640 : Ojs.t) ->
                            fun (x641 : Ojs.t) ->
                              fun (x642 : Ojs.t) ->
                                x639 ~certificate:(Buffer.t_of_js x640)
                                  ~issuer:(Buffer.t_of_js x641)
                                  ~callback:(fun
                                               ~err:(x643 : Error.t or_null)
                                               ->
                                               fun ~resp:(x645 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x642
                                                      [|(or_null_to_js
                                                           Error.t_to_js x643);(
                                                        Buffer.t_to_js x645)|]))))|])
        let (prependListener'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      sessionData:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x653 : t) ->
            fun ~event:(x647 : [ `resumeSession ]) ->
              fun
                ~listener:(x648 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          sessionData:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x653) "prependListener"
                     [|((match x647 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x649 : Ojs.t) ->
                            fun (x650 : Ojs.t) ->
                              x648 ~sessionId:(Buffer.t_of_js x649)
                                ~callback:(fun ~err:(x651 : Error.t) ->
                                             fun
                                               ~sessionData:(x652 : Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x650
                                                    [|(Error.t_to_js x651);(
                                                      Buffer.t_to_js x652)|]))))|])
        let (prependListener''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x657 : t) ->
            fun ~event:(x654 : [ `secureConnection ]) ->
              fun ~listener:(x655 : tlsSocket:tls_TLSSocket -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x657) "prependListener"
                     [|((match x654 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x656 :
                                                                    Ojs.t) ->
                                                                    x655
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x656)))|])
        let (prependListener'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit) ->
                t)
          =
          fun (x662 : t) ->
            fun ~event:(x658 : [ `keylog ]) ->
              fun
                ~listener:(x659 :
                            line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x662) "prependListener"
                     [|((match x658 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x660 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x661 :
                                                                    Ojs.t) ->
                                                                    x659
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x660)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x661)))|])
        let (prependOnceListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x667 : t) ->
            fun ~event:(x663 : string) ->
              fun ~listener:(x664 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x667) "prependOnceListener"
                     [|(Ojs.string_to_js x663);(Ojs.fun_to_js_args
                                                  (fun (x665 : _) ->
                                                     x664
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x665 0)))|])
        let (prependOnceListener' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x672 : t) ->
            fun ~event:(x668 : [ `tlsClientError ]) ->
              fun
                ~listener:(x669 :
                            err:Error.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x672) "prependOnceListener"
                     [|((match x668 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x670 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x671 :
                                                                    Ojs.t) ->
                                                                    x669
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x670)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x671)))|])
        let (prependOnceListener'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          sessionData:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x680 : t) ->
            fun ~event:(x673 : [ `newSession ]) ->
              fun
                ~listener:(x674 :
                            sessionId:Buffer.t ->
                              sessionData:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x680) "prependOnceListener"
                     [|((match x673 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x675 : Ojs.t) ->
                            fun (x676 : Ojs.t) ->
                              fun (x677 : Ojs.t) ->
                                x674 ~sessionId:(Buffer.t_of_js x675)
                                  ~sessionData:(Buffer.t_of_js x676)
                                  ~callback:(fun ~err:(x678 : Error.t) ->
                                               fun ~resp:(x679 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x677
                                                      [|(Error.t_to_js x678);(
                                                        Buffer.t_to_js x679)|]))))|])
        let (prependOnceListener''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x689 : t) ->
            fun ~event:(x681 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x682 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x689) "prependOnceListener"
                     [|((match x681 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x683 : Ojs.t) ->
                            fun (x684 : Ojs.t) ->
                              fun (x685 : Ojs.t) ->
                                x682 ~certificate:(Buffer.t_of_js x683)
                                  ~issuer:(Buffer.t_of_js x684)
                                  ~callback:(fun
                                               ~err:(x686 : Error.t or_null)
                                               ->
                                               fun ~resp:(x688 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x685
                                                      [|(or_null_to_js
                                                           Error.t_to_js x686);(
                                                        Buffer.t_to_js x688)|]))))|])
        let (prependOnceListener'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      sessionData:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x696 : t) ->
            fun ~event:(x690 : [ `resumeSession ]) ->
              fun
                ~listener:(x691 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          sessionData:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x696) "prependOnceListener"
                     [|((match x690 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x692 : Ojs.t) ->
                            fun (x693 : Ojs.t) ->
                              x691 ~sessionId:(Buffer.t_of_js x692)
                                ~callback:(fun ~err:(x694 : Error.t) ->
                                             fun
                                               ~sessionData:(x695 : Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x693
                                                    [|(Error.t_to_js x694);(
                                                      Buffer.t_to_js x695)|]))))|])
        let (prependOnceListener''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:tls_TLSSocket -> unit) -> t)
          =
          fun (x700 : t) ->
            fun ~event:(x697 : [ `secureConnection ]) ->
              fun ~listener:(x698 : tlsSocket:tls_TLSSocket -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x700) "prependOnceListener"
                     [|((match x697 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x699 :
                                                                    Ojs.t) ->
                                                                    x698
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x699)))|])
        let (prependOnceListener'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit) ->
                t)
          =
          fun (x705 : t) ->
            fun ~event:(x701 : [ `keylog ]) ->
              fun
                ~listener:(x702 :
                            line:Buffer.t -> tlsSocket:tls_TLSSocket -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x705) "prependOnceListener"
                     [|((match x701 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x703 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x704 :
                                                                    Ojs.t) ->
                                                                    x702
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x703)
                                                                    ~tlsSocket:(
                                                                    tls_TLSSocket_of_js
                                                                    x704)))|])
        let (cast : t -> Net.Server.t) =
          fun (x706 : t) -> Net.Server.t_of_js (t_to_js x706)
      end
    module SecurePair =
      struct
        type t = tls_SecurePair
        let rec t_of_js : Ojs.t -> t =
          fun (x708 : Ojs.t) -> tls_SecurePair_of_js x708
        and t_to_js : t -> Ojs.t =
          fun (x707 : tls_SecurePair) -> tls_SecurePair_to_js x707
        let (get_encrypted : t -> tls_TLSSocket) =
          fun (x709 : t) ->
            tls_TLSSocket_of_js
              (Ojs.get_prop_ascii (t_to_js x709) "encrypted")
        let (set_encrypted : t -> tls_TLSSocket -> unit) =
          fun (x710 : t) ->
            fun (x711 : tls_TLSSocket) ->
              Ojs.set_prop_ascii (t_to_js x710) "encrypted"
                (tls_TLSSocket_to_js x711)
        let (get_cleartext : t -> tls_TLSSocket) =
          fun (x712 : t) ->
            tls_TLSSocket_of_js
              (Ojs.get_prop_ascii (t_to_js x712) "cleartext")
        let (set_cleartext : t -> tls_TLSSocket -> unit) =
          fun (x713 : t) ->
            fun (x714 : tls_TLSSocket) ->
              Ojs.set_prop_ascii (t_to_js x713) "cleartext"
                (tls_TLSSocket_to_js x714)
      end
    module SecureVersion =
      struct
        type t = tls_SecureVersion
        let rec t_of_js : Ojs.t -> t =
          fun (x716 : Ojs.t) -> tls_SecureVersion_of_js x716
        and t_to_js : t -> Ojs.t =
          fun (x715 : tls_SecureVersion) -> tls_SecureVersion_to_js x715
      end
    module SecureContextOptions =
      struct
        type t = tls_SecureContextOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x718 : Ojs.t) -> tls_SecureContextOptions_of_js x718
        and t_to_js : t -> Ojs.t =
          fun (x717 : tls_SecureContextOptions) ->
            tls_SecureContextOptions_to_js x717
        let (get_ca :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string) =
          fun (x719 : t) ->
            or_string_of_js
              (fun (x720 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x722 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x723 : Ojs.t) ->
                           or_string_of_js Buffer.t_of_js x723) x722) x720)
              (Ojs.get_prop_ascii (t_to_js x719) "ca")
        let (set_ca :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string -> unit)
          =
          fun (x725 : t) ->
            fun (x726 : (Buffer.t, Buffer.t or_string list) union2 or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x725) "ca"
                (or_string_to_js
                   (fun (x727 : (Buffer.t, Buffer.t or_string list) union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun (x729 : Buffer.t or_string list) ->
                           Ojs.list_to_js
                             (fun (x730 : Buffer.t or_string) ->
                                or_string_to_js Buffer.t_to_js x730) x729)
                        x727) x726)
        let (get_cert :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string) =
          fun (x732 : t) ->
            or_string_of_js
              (fun (x733 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x735 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x736 : Ojs.t) ->
                           or_string_of_js Buffer.t_of_js x736) x735) x733)
              (Ojs.get_prop_ascii (t_to_js x732) "cert")
        let (set_cert :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string -> unit)
          =
          fun (x738 : t) ->
            fun (x739 : (Buffer.t, Buffer.t or_string list) union2 or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x738) "cert"
                (or_string_to_js
                   (fun (x740 : (Buffer.t, Buffer.t or_string list) union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun (x742 : Buffer.t or_string list) ->
                           Ojs.list_to_js
                             (fun (x743 : Buffer.t or_string) ->
                                or_string_to_js Buffer.t_to_js x743) x742)
                        x740) x739)
        let (get_sigalgs : t -> string) =
          fun (x745 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x745) "sigalgs")
        let (set_sigalgs : t -> string -> unit) =
          fun (x746 : t) ->
            fun (x747 : string) ->
              Ojs.set_prop_ascii (t_to_js x746) "sigalgs"
                (Ojs.string_to_js x747)
        let (get_ciphers : t -> string) =
          fun (x748 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x748) "ciphers")
        let (set_ciphers : t -> string -> unit) =
          fun (x749 : t) ->
            fun (x750 : string) ->
              Ojs.set_prop_ascii (t_to_js x749) "ciphers"
                (Ojs.string_to_js x750)
        let (get_clientCertEngine : t -> string) =
          fun (x751 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x751) "clientCertEngine")
        let (set_clientCertEngine : t -> string -> unit) =
          fun (x752 : t) ->
            fun (x753 : string) ->
              Ojs.set_prop_ascii (t_to_js x752) "clientCertEngine"
                (Ojs.string_to_js x753)
        let (get_crl :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string) =
          fun (x754 : t) ->
            or_string_of_js
              (fun (x755 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x757 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x758 : Ojs.t) ->
                           or_string_of_js Buffer.t_of_js x758) x757) x755)
              (Ojs.get_prop_ascii (t_to_js x754) "crl")
        let (set_crl :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string -> unit)
          =
          fun (x760 : t) ->
            fun (x761 : (Buffer.t, Buffer.t or_string list) union2 or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x760) "crl"
                (or_string_to_js
                   (fun (x762 : (Buffer.t, Buffer.t or_string list) union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun (x764 : Buffer.t or_string list) ->
                           Ojs.list_to_js
                             (fun (x765 : Buffer.t or_string) ->
                                or_string_to_js Buffer.t_to_js x765) x764)
                        x762) x761)
        let (get_dhparam : t -> Buffer.t or_string) =
          fun (x767 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x767) "dhparam")
        let (set_dhparam : t -> Buffer.t or_string -> unit) =
          fun (x769 : t) ->
            fun (x770 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x769) "dhparam"
                (or_string_to_js Buffer.t_to_js x770)
        let (get_ecdhCurve : t -> string) =
          fun (x772 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x772) "ecdhCurve")
        let (set_ecdhCurve : t -> string -> unit) =
          fun (x773 : t) ->
            fun (x774 : string) ->
              Ojs.set_prop_ascii (t_to_js x773) "ecdhCurve"
                (Ojs.string_to_js x774)
        let (get_honorCipherOrder : t -> bool) =
          fun (x775 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x775) "honorCipherOrder")
        let (set_honorCipherOrder : t -> bool -> unit) =
          fun (x776 : t) ->
            fun (x777 : bool) ->
              Ojs.set_prop_ascii (t_to_js x776) "honorCipherOrder"
                (Ojs.bool_to_js x777)
        let (get_key :
          t ->
            (Buffer.t, (Buffer.t, tls_KeyObject) union2 list) union2
              or_string)
          =
          fun (x778 : t) ->
            or_string_of_js
              (fun (x779 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x781 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x782 : Ojs.t) ->
                           union2_of_js Buffer.t_of_js tls_KeyObject_of_js
                             x782) x781) x779)
              (Ojs.get_prop_ascii (t_to_js x778) "key")
        let (set_key :
          t ->
            (Buffer.t, (Buffer.t, tls_KeyObject) union2 list) union2
              or_string -> unit)
          =
          fun (x785 : t) ->
            fun
              (x786 :
                (Buffer.t, (Buffer.t, tls_KeyObject) union2 list) union2
                  or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x785) "key"
                (or_string_to_js
                   (fun
                      (x787 :
                        (Buffer.t, (Buffer.t, tls_KeyObject) union2 list)
                          union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun (x789 : (Buffer.t, tls_KeyObject) union2 list)
                           ->
                           Ojs.list_to_js
                             (fun (x790 : (Buffer.t, tls_KeyObject) union2)
                                ->
                                union2_to_js Buffer.t_to_js
                                  tls_KeyObject_to_js x790) x789) x787) x786)
        let (get_privateKeyEngine : t -> string) =
          fun (x793 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x793) "privateKeyEngine")
        let (set_privateKeyEngine : t -> string -> unit) =
          fun (x794 : t) ->
            fun (x795 : string) ->
              Ojs.set_prop_ascii (t_to_js x794) "privateKeyEngine"
                (Ojs.string_to_js x795)
        let (get_privateKeyIdentifier : t -> string) =
          fun (x796 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x796) "privateKeyIdentifier")
        let (set_privateKeyIdentifier : t -> string -> unit) =
          fun (x797 : t) ->
            fun (x798 : string) ->
              Ojs.set_prop_ascii (t_to_js x797) "privateKeyIdentifier"
                (Ojs.string_to_js x798)
        let (get_maxVersion : t -> tls_SecureVersion) =
          fun (x799 : t) ->
            tls_SecureVersion_of_js
              (Ojs.get_prop_ascii (t_to_js x799) "maxVersion")
        let (set_maxVersion : t -> tls_SecureVersion -> unit) =
          fun (x800 : t) ->
            fun (x801 : tls_SecureVersion) ->
              Ojs.set_prop_ascii (t_to_js x800) "maxVersion"
                (tls_SecureVersion_to_js x801)
        let (get_minVersion : t -> tls_SecureVersion) =
          fun (x802 : t) ->
            tls_SecureVersion_of_js
              (Ojs.get_prop_ascii (t_to_js x802) "minVersion")
        let (set_minVersion : t -> tls_SecureVersion -> unit) =
          fun (x803 : t) ->
            fun (x804 : tls_SecureVersion) ->
              Ojs.set_prop_ascii (t_to_js x803) "minVersion"
                (tls_SecureVersion_to_js x804)
        let (get_passphrase : t -> string) =
          fun (x805 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x805) "passphrase")
        let (set_passphrase : t -> string -> unit) =
          fun (x806 : t) ->
            fun (x807 : string) ->
              Ojs.set_prop_ascii (t_to_js x806) "passphrase"
                (Ojs.string_to_js x807)
        let (get_pfx :
          t ->
            (Buffer.t, (Buffer.t, tls_PxfObject) union2 or_string list)
              union2 or_string)
          =
          fun (x808 : t) ->
            or_string_of_js
              (fun (x809 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x811 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x812 : Ojs.t) ->
                           or_string_of_js
                             (fun (x813 : Ojs.t) ->
                                union2_of_js Buffer.t_of_js
                                  tls_PxfObject_of_js x813) x812) x811) x809)
              (Ojs.get_prop_ascii (t_to_js x808) "pfx")
        let (set_pfx :
          t ->
            (Buffer.t, (Buffer.t, tls_PxfObject) union2 or_string list)
              union2 or_string -> unit)
          =
          fun (x816 : t) ->
            fun
              (x817 :
                (Buffer.t, (Buffer.t, tls_PxfObject) union2 or_string list)
                  union2 or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x816) "pfx"
                (or_string_to_js
                   (fun
                      (x818 :
                        (Buffer.t,
                          (Buffer.t, tls_PxfObject) union2 or_string list)
                          union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun
                           (x820 :
                             (Buffer.t, tls_PxfObject) union2 or_string list)
                           ->
                           Ojs.list_to_js
                             (fun
                                (x821 :
                                  (Buffer.t, tls_PxfObject) union2 or_string)
                                ->
                                or_string_to_js
                                  (fun
                                     (x822 :
                                       (Buffer.t, tls_PxfObject) union2)
                                     ->
                                     union2_to_js Buffer.t_to_js
                                       tls_PxfObject_to_js x822) x821) x820)
                        x818) x817)
        let (get_secureOptions : t -> float) =
          fun (x825 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x825) "secureOptions")
        let (set_secureOptions : t -> float -> unit) =
          fun (x826 : t) ->
            fun (x827 : float) ->
              Ojs.set_prop_ascii (t_to_js x826) "secureOptions"
                (Ojs.float_to_js x827)
        let (get_secureProtocol : t -> string) =
          fun (x828 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x828) "secureProtocol")
        let (set_secureProtocol : t -> string -> unit) =
          fun (x829 : t) ->
            fun (x830 : string) ->
              Ojs.set_prop_ascii (t_to_js x829) "secureProtocol"
                (Ojs.string_to_js x830)
        let (get_sessionIdContext : t -> string) =
          fun (x831 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x831) "sessionIdContext")
        let (set_sessionIdContext : t -> string -> unit) =
          fun (x832 : t) ->
            fun (x833 : string) ->
              Ojs.set_prop_ascii (t_to_js x832) "sessionIdContext"
                (Ojs.string_to_js x833)
        let (get_ticketKeys : t -> Buffer.t) =
          fun (x834 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x834) "ticketKeys")
        let (set_ticketKeys : t -> Buffer.t -> unit) =
          fun (x835 : t) ->
            fun (x836 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x835) "ticketKeys"
                (Buffer.t_to_js x836)
        let (get_sessionTimeout : t -> float) =
          fun (x837 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x837) "sessionTimeout")
        let (set_sessionTimeout : t -> float -> unit) =
          fun (x838 : t) ->
            fun (x839 : float) ->
              Ojs.set_prop_ascii (t_to_js x838) "sessionTimeout"
                (Ojs.float_to_js x839)
      end
    module SecureContext =
      struct
        type t = tls_SecureContext
        let rec t_of_js : Ojs.t -> t =
          fun (x841 : Ojs.t) -> tls_SecureContext_of_js x841
        and t_to_js : t -> Ojs.t =
          fun (x840 : tls_SecureContext) -> tls_SecureContext_to_js x840
        let (get_context : t -> any) =
          fun (x842 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x842) "context")
        let (set_context : t -> any -> unit) =
          fun (x843 : t) ->
            fun (x844 : any) ->
              Ojs.set_prop_ascii (t_to_js x843) "context" (any_to_js x844)
      end
    let (checkServerIdentity :
      host:string -> cert:tls_PeerCertificate -> Error.t or_undefined) =
      fun ~host:(x845 : string) ->
        fun ~cert:(x846 : tls_PeerCertificate) ->
          or_undefined_of_js Error.t_of_js
            (Ojs.call Import.tls "checkServerIdentity"
               [|(Ojs.string_to_js x845);(tls_PeerCertificate_to_js x846)|])
    let (createServer :
      ?secureConnectionListener:(socket:tls_TLSSocket -> unit) ->
        unit -> tls_Server)
      =
      fun
        ?secureConnectionListener:(x848 :
                                    (socket:tls_TLSSocket -> unit) option)
        ->
        fun () ->
          tls_Server_of_js
            (let x852 = Import.tls in
             Ojs.call (Ojs.get_prop_ascii x852 "createServer") "apply"
               [|x852;((let x849 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x848 with
                         | Some x850 ->
                             ignore
                               (Ojs.call x849 "push"
                                  [|(Ojs.fun_to_js 1
                                       (fun (x851 : Ojs.t) ->
                                          x850
                                            ~socket:(tls_TLSSocket_of_js x851)))|])
                         | None -> ());
                        x849))|])
    let (createServer :
      options:tls_TlsOptions ->
        ?secureConnectionListener:(socket:tls_TLSSocket -> unit) ->
          unit -> tls_Server)
      =
      fun ~options:(x853 : tls_TlsOptions) ->
        fun
          ?secureConnectionListener:(x854 :
                                      (socket:tls_TLSSocket -> unit) option)
          ->
          fun () ->
            tls_Server_of_js
              (let x858 = Import.tls in
               Ojs.call (Ojs.get_prop_ascii x858 "createServer") "apply"
                 [|x858;((let x855 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x855 "push"
                               [|(tls_TlsOptions_to_js x853)|]);
                          (match x854 with
                           | Some x856 ->
                               ignore
                                 (Ojs.call x855 "push"
                                    [|(Ojs.fun_to_js 1
                                         (fun (x857 : Ojs.t) ->
                                            x856
                                              ~socket:(tls_TLSSocket_of_js
                                                         x857)))|])
                           | None -> ());
                          x855))|])
    let (connect :
      options:tls_ConnectionOptions ->
        ?secureConnectListener:(unit -> unit) -> unit -> tls_TLSSocket)
      =
      fun ~options:(x859 : tls_ConnectionOptions) ->
        fun ?secureConnectListener:(x860 : (unit -> unit) option) ->
          fun () ->
            tls_TLSSocket_of_js
              (let x863 = Import.tls in
               Ojs.call (Ojs.get_prop_ascii x863 "connect") "apply"
                 [|x863;((let x861 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x861 "push"
                               [|(tls_ConnectionOptions_to_js x859)|]);
                          (match x860 with
                           | Some x862 ->
                               ignore
                                 (Ojs.call x861 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x862 ()))|])
                           | None -> ());
                          x861))|])
    let (connect :
      port:float ->
        ?host:string ->
          ?options:tls_ConnectionOptions ->
            ?secureConnectListener:(unit -> unit) -> unit -> tls_TLSSocket)
      =
      fun ~port:(x864 : float) ->
        fun ?host:(x865 : string option) ->
          fun ?options:(x866 : tls_ConnectionOptions option) ->
            fun ?secureConnectListener:(x867 : (unit -> unit) option) ->
              fun () ->
                tls_TLSSocket_of_js
                  (let x872 = Import.tls in
                   Ojs.call (Ojs.get_prop_ascii x872 "connect") "apply"
                     [|x872;((let x868 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x868 "push"
                                   [|(Ojs.float_to_js x864)|]);
                              (match x865 with
                               | Some x871 ->
                                   ignore
                                     (Ojs.call x868 "push"
                                        [|(Ojs.string_to_js x871)|])
                               | None -> ());
                              (match x866 with
                               | Some x870 ->
                                   ignore
                                     (Ojs.call x868 "push"
                                        [|(tls_ConnectionOptions_to_js x870)|])
                               | None -> ());
                              (match x867 with
                               | Some x869 ->
                                   ignore
                                     (Ojs.call x868 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x869 ()))|])
                               | None -> ());
                              x868))|])
    let (connect :
      port:float ->
        ?options:tls_ConnectionOptions ->
          ?secureConnectListener:(unit -> unit) -> unit -> tls_TLSSocket)
      =
      fun ~port:(x873 : float) ->
        fun ?options:(x874 : tls_ConnectionOptions option) ->
          fun ?secureConnectListener:(x875 : (unit -> unit) option) ->
            fun () ->
              tls_TLSSocket_of_js
                (let x879 = Import.tls in
                 Ojs.call (Ojs.get_prop_ascii x879 "connect") "apply"
                   [|x879;((let x876 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x876 "push"
                                 [|(Ojs.float_to_js x873)|]);
                            (match x874 with
                             | Some x878 ->
                                 ignore
                                   (Ojs.call x876 "push"
                                      [|(tls_ConnectionOptions_to_js x878)|])
                             | None -> ());
                            (match x875 with
                             | Some x877 ->
                                 ignore
                                   (Ojs.call x876 "push"
                                      [|(Ojs.fun_to_js 1 (fun _ -> x877 ()))|])
                             | None -> ());
                            x876))|])
    let (createSecurePair :
      ?credentials:tls_SecureContext ->
        ?isServer:bool ->
          ?requestCert:bool ->
            ?rejectUnauthorized:bool -> unit -> tls_SecurePair)
      =
      fun ?credentials:(x880 : tls_SecureContext option) ->
        fun ?isServer:(x881 : bool option) ->
          fun ?requestCert:(x882 : bool option) ->
            fun ?rejectUnauthorized:(x883 : bool option) ->
              fun () ->
                tls_SecurePair_of_js
                  (let x889 = Import.tls in
                   Ojs.call (Ojs.get_prop_ascii x889 "createSecurePair")
                     "apply"
                     [|x889;((let x884 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x880 with
                               | Some x888 ->
                                   ignore
                                     (Ojs.call x884 "push"
                                        [|(tls_SecureContext_to_js x888)|])
                               | None -> ());
                              (match x881 with
                               | Some x887 ->
                                   ignore
                                     (Ojs.call x884 "push"
                                        [|(Ojs.bool_to_js x887)|])
                               | None -> ());
                              (match x882 with
                               | Some x886 ->
                                   ignore
                                     (Ojs.call x884 "push"
                                        [|(Ojs.bool_to_js x886)|])
                               | None -> ());
                              (match x883 with
                               | Some x885 ->
                                   ignore
                                     (Ojs.call x884 "push"
                                        [|(Ojs.bool_to_js x885)|])
                               | None -> ());
                              x884))|])
    let (createSecureContext :
      ?options:tls_SecureContextOptions -> unit -> tls_SecureContext) =
      fun ?options:(x890 : tls_SecureContextOptions option) ->
        fun () ->
          tls_SecureContext_of_js
            (let x893 = Import.tls in
             Ojs.call (Ojs.get_prop_ascii x893 "createSecureContext") "apply"
               [|x893;((let x891 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x890 with
                         | Some x892 ->
                             ignore
                               (Ojs.call x891 "push"
                                  [|(tls_SecureContextOptions_to_js x892)|])
                         | None -> ());
                        x891))|])
    let (getCiphers : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.tls "getCiphers" [||])
    let (dEFAULT_ECDH_CURVE : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.tls "DEFAULT_ECDH_CURVE")
    let (dEFAULT_MAX_VERSION : tls_SecureVersion) =
      tls_SecureVersion_of_js
        (Ojs.get_prop_ascii Import.tls "DEFAULT_MAX_VERSION")
    let (dEFAULT_MIN_VERSION : tls_SecureVersion) =
      tls_SecureVersion_of_js
        (Ojs.get_prop_ascii Import.tls "DEFAULT_MIN_VERSION")
    let (rootCertificates : string list) =
      Ojs.list_of_js Ojs.string_of_js
        (Ojs.get_prop_ascii Import.tls "rootCertificates")
  end
