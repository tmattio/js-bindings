[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_reject_unauthorized : t -> bool) =
      fun (x3 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x3) "rejectUnauthorized")
    let (set_reject_unauthorized : t -> bool -> unit) =
      fun (x4 : t) ->
        fun (x5 : bool) ->
          Ojs.set_prop_ascii (t_to_js x4) "rejectUnauthorized"
            (Ojs.bool_to_js x5)
    let (get_request_cert : t -> bool) =
      fun (x6 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x6) "requestCert")
    let (set_request_cert : t -> bool -> unit) =
      fun (x7 : t) ->
        fun (x8 : bool) ->
          Ojs.set_prop_ascii (t_to_js x7) "requestCert" (Ojs.bool_to_js x8)
  end
module Tls =
  struct
    open Node_net
    let (client_reneg_limit : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.tls "CLIENT_RENEG_LIMIT")
    let (client_reneg_window : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.tls "CLIENT_RENEG_WINDOW")
    module Certificate =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x10 : Ojs.t) -> x10
        and t_to_js : t -> Ojs.t = fun (x9 : Ojs.t) -> x9
        let (get_c : t -> string) =
          fun (x11 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x11) "C")
        let (set_c : t -> string -> unit) =
          fun (x12 : t) ->
            fun (x13 : string) ->
              Ojs.set_prop_ascii (t_to_js x12) "C" (Ojs.string_to_js x13)
        let (get_st : t -> string) =
          fun (x14 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x14) "ST")
        let (set_st : t -> string -> unit) =
          fun (x15 : t) ->
            fun (x16 : string) ->
              Ojs.set_prop_ascii (t_to_js x15) "ST" (Ojs.string_to_js x16)
        let (get_l : t -> string) =
          fun (x17 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x17) "L")
        let (set_l : t -> string -> unit) =
          fun (x18 : t) ->
            fun (x19 : string) ->
              Ojs.set_prop_ascii (t_to_js x18) "L" (Ojs.string_to_js x19)
        let (get_o : t -> string) =
          fun (x20 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x20) "O")
        let (set_o : t -> string -> unit) =
          fun (x21 : t) ->
            fun (x22 : string) ->
              Ojs.set_prop_ascii (t_to_js x21) "O" (Ojs.string_to_js x22)
        let (get_ou : t -> string) =
          fun (x23 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x23) "OU")
        let (set_ou : t -> string -> unit) =
          fun (x24 : t) ->
            fun (x25 : string) ->
              Ojs.set_prop_ascii (t_to_js x24) "OU" (Ojs.string_to_js x25)
        let (get_cn : t -> string) =
          fun (x26 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x26) "CN")
        let (set_cn : t -> string -> unit) =
          fun (x27 : t) ->
            fun (x28 : string) ->
              Ojs.set_prop_ascii (t_to_js x27) "CN" (Ojs.string_to_js x28)
      end
    module PeerCertificate =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x30 : Ojs.t) -> x30
        and t_to_js : t -> Ojs.t = fun (x29 : Ojs.t) -> x29
        let (get_subject : t -> Certificate.t) =
          fun (x31 : t) ->
            Certificate.t_of_js (Ojs.get_prop_ascii (t_to_js x31) "subject")
        let (set_subject : t -> Certificate.t -> unit) =
          fun (x32 : t) ->
            fun (x33 : Certificate.t) ->
              Ojs.set_prop_ascii (t_to_js x32) "subject"
                (Certificate.t_to_js x33)
        let (get_issuer : t -> Certificate.t) =
          fun (x34 : t) ->
            Certificate.t_of_js (Ojs.get_prop_ascii (t_to_js x34) "issuer")
        let (set_issuer : t -> Certificate.t -> unit) =
          fun (x35 : t) ->
            fun (x36 : Certificate.t) ->
              Ojs.set_prop_ascii (t_to_js x35) "issuer"
                (Certificate.t_to_js x36)
        let (get_subjectaltname : t -> string) =
          fun (x37 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x37) "subjectaltname")
        let (set_subjectaltname : t -> string -> unit) =
          fun (x38 : t) ->
            fun (x39 : string) ->
              Ojs.set_prop_ascii (t_to_js x38) "subjectaltname"
                (Ojs.string_to_js x39)
        let (get_info_access : t -> string list Dict.t) =
          fun (x40 : t) ->
            Dict.t_of_js
              (fun (x41 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x41)
              (Ojs.get_prop_ascii (t_to_js x40) "infoAccess")
        let (set_info_access : t -> string list Dict.t -> unit) =
          fun (x43 : t) ->
            fun (x44 : string list Dict.t) ->
              Ojs.set_prop_ascii (t_to_js x43) "infoAccess"
                (Dict.t_to_js
                   (fun (x45 : string list) ->
                      Ojs.list_to_js Ojs.string_to_js x45) x44)
        let (get_modulus : t -> string) =
          fun (x47 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x47) "modulus")
        let (set_modulus : t -> string -> unit) =
          fun (x48 : t) ->
            fun (x49 : string) ->
              Ojs.set_prop_ascii (t_to_js x48) "modulus"
                (Ojs.string_to_js x49)
        let (get_exponent : t -> string) =
          fun (x50 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x50) "exponent")
        let (set_exponent : t -> string -> unit) =
          fun (x51 : t) ->
            fun (x52 : string) ->
              Ojs.set_prop_ascii (t_to_js x51) "exponent"
                (Ojs.string_to_js x52)
        let (get_valid_from : t -> string) =
          fun (x53 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x53) "valid_from")
        let (set_valid_from : t -> string -> unit) =
          fun (x54 : t) ->
            fun (x55 : string) ->
              Ojs.set_prop_ascii (t_to_js x54) "valid_from"
                (Ojs.string_to_js x55)
        let (get_valid_to : t -> string) =
          fun (x56 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x56) "valid_to")
        let (set_valid_to : t -> string -> unit) =
          fun (x57 : t) ->
            fun (x58 : string) ->
              Ojs.set_prop_ascii (t_to_js x57) "valid_to"
                (Ojs.string_to_js x58)
        let (get_fingerprint : t -> string) =
          fun (x59 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x59) "fingerprint")
        let (set_fingerprint : t -> string -> unit) =
          fun (x60 : t) ->
            fun (x61 : string) ->
              Ojs.set_prop_ascii (t_to_js x60) "fingerprint"
                (Ojs.string_to_js x61)
        let (get_fingerprint256 : t -> string) =
          fun (x62 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x62) "fingerprint256")
        let (set_fingerprint256 : t -> string -> unit) =
          fun (x63 : t) ->
            fun (x64 : string) ->
              Ojs.set_prop_ascii (t_to_js x63) "fingerprint256"
                (Ojs.string_to_js x64)
        let (get_ext_key_usage : t -> string list) =
          fun (x65 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x65) "ext_key_usage")
        let (set_ext_key_usage : t -> string list -> unit) =
          fun (x67 : t) ->
            fun (x68 : string list) ->
              Ojs.set_prop_ascii (t_to_js x67) "ext_key_usage"
                (Ojs.list_to_js Ojs.string_to_js x68)
        let (get_serial_number : t -> string) =
          fun (x70 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x70) "serialNumber")
        let (set_serial_number : t -> string -> unit) =
          fun (x71 : t) ->
            fun (x72 : string) ->
              Ojs.set_prop_ascii (t_to_js x71) "serialNumber"
                (Ojs.string_to_js x72)
        let (get_raw : t -> Buffer.t) =
          fun (x73 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x73) "raw")
        let (set_raw : t -> Buffer.t -> unit) =
          fun (x74 : t) ->
            fun (x75 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x74) "raw" (Buffer.t_to_js x75)
      end
    module DetailedPeerCertificate =
      struct
        include struct include PeerCertificate end
        let (get_issuer_certificate : t -> t) =
          fun (x76 : t) ->
            t_of_js (Ojs.get_prop_ascii (t_to_js x76) "issuerCertificate")
        let (set_issuer_certificate : t -> t -> unit) =
          fun (x77 : t) ->
            fun (x78 : t) ->
              Ojs.set_prop_ascii (t_to_js x77) "issuerCertificate"
                (t_to_js x78)
      end
    module CipherNameAndProtocol =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x80 : Ojs.t) -> x80
        and t_to_js : t -> Ojs.t = fun (x79 : Ojs.t) -> x79
        let (get_name : t -> string) =
          fun (x81 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x81) "name")
        let (set_name : t -> string -> unit) =
          fun (x82 : t) ->
            fun (x83 : string) ->
              Ojs.set_prop_ascii (t_to_js x82) "name" (Ojs.string_to_js x83)
        let (get_version : t -> string) =
          fun (x84 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x84) "version")
        let (set_version : t -> string -> unit) =
          fun (x85 : t) ->
            fun (x86 : string) ->
              Ojs.set_prop_ascii (t_to_js x85) "version"
                (Ojs.string_to_js x86)
        let (get_standard_name : t -> string) =
          fun (x87 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x87) "standardName")
        let (set_standard_name : t -> string -> unit) =
          fun (x88 : t) ->
            fun (x89 : string) ->
              Ojs.set_prop_ascii (t_to_js x88) "standardName"
                (Ojs.string_to_js x89)
      end
    module EphemeralKeyInfo =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x91 : Ojs.t) -> x91
        and t_to_js : t -> Ojs.t = fun (x90 : Ojs.t) -> x90
        let (get_type : t -> string) =
          fun (x92 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x92) "type")
        let (set_type : t -> string -> unit) =
          fun (x93 : t) ->
            fun (x94 : string) ->
              Ojs.set_prop_ascii (t_to_js x93) "type" (Ojs.string_to_js x94)
        let (get_name : t -> string) =
          fun (x95 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x95) "name")
        let (set_name : t -> string -> unit) =
          fun (x96 : t) ->
            fun (x97 : string) ->
              Ojs.set_prop_ascii (t_to_js x96) "name" (Ojs.string_to_js x97)
        let (get_size : t -> int) =
          fun (x98 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x98) "size")
        let (set_size : t -> int -> unit) =
          fun (x99 : t) ->
            fun (x100 : int) ->
              Ojs.set_prop_ascii (t_to_js x99) "size" (Ojs.int_to_js x100)
      end
    module KeyObject =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x102 : Ojs.t) -> x102
        and t_to_js : t -> Ojs.t = fun (x101 : Ojs.t) -> x101
        let (get_pem : t -> Buffer.t or_string) =
          fun (x103 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x103) "pem")
        let (set_pem : t -> Buffer.t or_string -> unit) =
          fun (x105 : t) ->
            fun (x106 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x105) "pem"
                (or_string_to_js Buffer.t_to_js x106)
        let (get_passphrase : t -> string) =
          fun (x108 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x108) "passphrase")
        let (set_passphrase : t -> string -> unit) =
          fun (x109 : t) ->
            fun (x110 : string) ->
              Ojs.set_prop_ascii (t_to_js x109) "passphrase"
                (Ojs.string_to_js x110)
      end
    module PxfObject =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x112 : Ojs.t) -> x112
        and t_to_js : t -> Ojs.t = fun (x111 : Ojs.t) -> x111
        let (get_buf : t -> Buffer.t or_string) =
          fun (x113 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x113) "buf")
        let (set_buf : t -> Buffer.t or_string -> unit) =
          fun (x115 : t) ->
            fun (x116 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x115) "buf"
                (or_string_to_js Buffer.t_to_js x116)
        let (get_passphrase : t -> string) =
          fun (x118 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x118) "passphrase")
        let (set_passphrase : t -> string -> unit) =
          fun (x119 : t) ->
            fun (x120 : string) ->
              Ojs.set_prop_ascii (t_to_js x119) "passphrase"
                (Ojs.string_to_js x120)
      end
    module SecureVersion =
      struct
        type t = [ `TLSv1  | `TLSv1_1  | `TLSv1_2  | `TLSv1_3 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x122 : Ojs.t) ->
            let x123 = x122 in
            match Ojs.string_of_js x123 with
            | "TLSv1" -> `TLSv1
            | "TLSv1.1" -> `TLSv1_1
            | "TLSv1.2" -> `TLSv1_2
            | "TLSv1.3" -> `TLSv1_3
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x121 : [ `TLSv1  | `TLSv1_1  | `TLSv1_2  | `TLSv1_3 ]) ->
            match x121 with
            | `TLSv1 -> Ojs.string_to_js "TLSv1"
            | `TLSv1_1 -> Ojs.string_to_js "TLSv1.1"
            | `TLSv1_2 -> Ojs.string_to_js "TLSv1.2"
            | `TLSv1_3 -> Ojs.string_to_js "TLSv1.3"
      end
    module SecureContext =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x125 : Ojs.t) -> x125
        and t_to_js : t -> Ojs.t = fun (x124 : Ojs.t) -> x124
        let (get_context : t -> any) =
          fun (x126 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x126) "context")
        let (set_context : t -> any -> unit) =
          fun (x127 : t) ->
            fun (x128 : any) ->
              Ojs.set_prop_ascii (t_to_js x127) "context" (any_to_js x128)
      end
    module SecureContextOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x130 : Ojs.t) -> x130
        and t_to_js : t -> Ojs.t = fun (x129 : Ojs.t) -> x129
        let (get_ca :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string) =
          fun (x131 : t) ->
            or_string_of_js
              (fun (x132 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x134 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x135 : Ojs.t) ->
                           or_string_of_js Buffer.t_of_js x135) x134) x132)
              (Ojs.get_prop_ascii (t_to_js x131) "ca")
        let (set_ca :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string -> unit)
          =
          fun (x137 : t) ->
            fun (x138 : (Buffer.t, Buffer.t or_string list) union2 or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x137) "ca"
                (or_string_to_js
                   (fun (x139 : (Buffer.t, Buffer.t or_string list) union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun (x141 : Buffer.t or_string list) ->
                           Ojs.list_to_js
                             (fun (x142 : Buffer.t or_string) ->
                                or_string_to_js Buffer.t_to_js x142) x141)
                        x139) x138)
        let (get_cert :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string) =
          fun (x144 : t) ->
            or_string_of_js
              (fun (x145 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x147 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x148 : Ojs.t) ->
                           or_string_of_js Buffer.t_of_js x148) x147) x145)
              (Ojs.get_prop_ascii (t_to_js x144) "cert")
        let (set_cert :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string -> unit)
          =
          fun (x150 : t) ->
            fun (x151 : (Buffer.t, Buffer.t or_string list) union2 or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x150) "cert"
                (or_string_to_js
                   (fun (x152 : (Buffer.t, Buffer.t or_string list) union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun (x154 : Buffer.t or_string list) ->
                           Ojs.list_to_js
                             (fun (x155 : Buffer.t or_string) ->
                                or_string_to_js Buffer.t_to_js x155) x154)
                        x152) x151)
        let (get_sigalgs : t -> string) =
          fun (x157 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x157) "sigalgs")
        let (set_sigalgs : t -> string -> unit) =
          fun (x158 : t) ->
            fun (x159 : string) ->
              Ojs.set_prop_ascii (t_to_js x158) "sigalgs"
                (Ojs.string_to_js x159)
        let (get_ciphers : t -> string) =
          fun (x160 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x160) "ciphers")
        let (set_ciphers : t -> string -> unit) =
          fun (x161 : t) ->
            fun (x162 : string) ->
              Ojs.set_prop_ascii (t_to_js x161) "ciphers"
                (Ojs.string_to_js x162)
        let (get_client_cert_engine : t -> string) =
          fun (x163 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x163) "clientCertEngine")
        let (set_client_cert_engine : t -> string -> unit) =
          fun (x164 : t) ->
            fun (x165 : string) ->
              Ojs.set_prop_ascii (t_to_js x164) "clientCertEngine"
                (Ojs.string_to_js x165)
        let (get_crl :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string) =
          fun (x166 : t) ->
            or_string_of_js
              (fun (x167 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x169 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x170 : Ojs.t) ->
                           or_string_of_js Buffer.t_of_js x170) x169) x167)
              (Ojs.get_prop_ascii (t_to_js x166) "crl")
        let (set_crl :
          t -> (Buffer.t, Buffer.t or_string list) union2 or_string -> unit)
          =
          fun (x172 : t) ->
            fun (x173 : (Buffer.t, Buffer.t or_string list) union2 or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x172) "crl"
                (or_string_to_js
                   (fun (x174 : (Buffer.t, Buffer.t or_string list) union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun (x176 : Buffer.t or_string list) ->
                           Ojs.list_to_js
                             (fun (x177 : Buffer.t or_string) ->
                                or_string_to_js Buffer.t_to_js x177) x176)
                        x174) x173)
        let (get_dhparam : t -> Buffer.t or_string) =
          fun (x179 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x179) "dhparam")
        let (set_dhparam : t -> Buffer.t or_string -> unit) =
          fun (x181 : t) ->
            fun (x182 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x181) "dhparam"
                (or_string_to_js Buffer.t_to_js x182)
        let (get_ecdh_curve : t -> string) =
          fun (x184 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x184) "ecdhCurve")
        let (set_ecdh_curve : t -> string -> unit) =
          fun (x185 : t) ->
            fun (x186 : string) ->
              Ojs.set_prop_ascii (t_to_js x185) "ecdhCurve"
                (Ojs.string_to_js x186)
        let (get_honor_cipher_order : t -> bool) =
          fun (x187 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x187) "honorCipherOrder")
        let (set_honor_cipher_order : t -> bool -> unit) =
          fun (x188 : t) ->
            fun (x189 : bool) ->
              Ojs.set_prop_ascii (t_to_js x188) "honorCipherOrder"
                (Ojs.bool_to_js x189)
        let (get_key :
          t ->
            (Buffer.t, (Buffer.t, KeyObject.t) union2 list) union2 or_string)
          =
          fun (x190 : t) ->
            or_string_of_js
              (fun (x191 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x193 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x194 : Ojs.t) ->
                           union2_of_js Buffer.t_of_js KeyObject.t_of_js x194)
                        x193) x191) (Ojs.get_prop_ascii (t_to_js x190) "key")
        let (set_key :
          t ->
            (Buffer.t, (Buffer.t, KeyObject.t) union2 list) union2 or_string
              -> unit)
          =
          fun (x197 : t) ->
            fun
              (x198 :
                (Buffer.t, (Buffer.t, KeyObject.t) union2 list) union2
                  or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x197) "key"
                (or_string_to_js
                   (fun
                      (x199 :
                        (Buffer.t, (Buffer.t, KeyObject.t) union2 list)
                          union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun (x201 : (Buffer.t, KeyObject.t) union2 list) ->
                           Ojs.list_to_js
                             (fun (x202 : (Buffer.t, KeyObject.t) union2) ->
                                union2_to_js Buffer.t_to_js KeyObject.t_to_js
                                  x202) x201) x199) x198)
        let (get_private_key_engine : t -> string) =
          fun (x205 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x205) "privateKeyEngine")
        let (set_private_key_engine : t -> string -> unit) =
          fun (x206 : t) ->
            fun (x207 : string) ->
              Ojs.set_prop_ascii (t_to_js x206) "privateKeyEngine"
                (Ojs.string_to_js x207)
        let (get_private_key_identifier : t -> string) =
          fun (x208 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x208) "privateKeyIdentifier")
        let (set_private_key_identifier : t -> string -> unit) =
          fun (x209 : t) ->
            fun (x210 : string) ->
              Ojs.set_prop_ascii (t_to_js x209) "privateKeyIdentifier"
                (Ojs.string_to_js x210)
        let (get_max_version : t -> SecureVersion.t) =
          fun (x211 : t) ->
            SecureVersion.t_of_js
              (Ojs.get_prop_ascii (t_to_js x211) "maxVersion")
        let (set_max_version : t -> SecureVersion.t -> unit) =
          fun (x212 : t) ->
            fun (x213 : SecureVersion.t) ->
              Ojs.set_prop_ascii (t_to_js x212) "maxVersion"
                (SecureVersion.t_to_js x213)
        let (get_min_version : t -> SecureVersion.t) =
          fun (x214 : t) ->
            SecureVersion.t_of_js
              (Ojs.get_prop_ascii (t_to_js x214) "minVersion")
        let (set_min_version : t -> SecureVersion.t -> unit) =
          fun (x215 : t) ->
            fun (x216 : SecureVersion.t) ->
              Ojs.set_prop_ascii (t_to_js x215) "minVersion"
                (SecureVersion.t_to_js x216)
        let (get_passphrase : t -> string) =
          fun (x217 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x217) "passphrase")
        let (set_passphrase : t -> string -> unit) =
          fun (x218 : t) ->
            fun (x219 : string) ->
              Ojs.set_prop_ascii (t_to_js x218) "passphrase"
                (Ojs.string_to_js x219)
        let (get_pfx :
          t ->
            (Buffer.t, (Buffer.t, PxfObject.t) union2 or_string list) union2
              or_string)
          =
          fun (x220 : t) ->
            or_string_of_js
              (fun (x221 : Ojs.t) ->
                 union2_of_js Buffer.t_of_js
                   (fun (x223 : Ojs.t) ->
                      Ojs.list_of_js
                        (fun (x224 : Ojs.t) ->
                           or_string_of_js
                             (fun (x225 : Ojs.t) ->
                                union2_of_js Buffer.t_of_js PxfObject.t_of_js
                                  x225) x224) x223) x221)
              (Ojs.get_prop_ascii (t_to_js x220) "pfx")
        let (set_pfx :
          t ->
            (Buffer.t, (Buffer.t, PxfObject.t) union2 or_string list) union2
              or_string -> unit)
          =
          fun (x228 : t) ->
            fun
              (x229 :
                (Buffer.t, (Buffer.t, PxfObject.t) union2 or_string list)
                  union2 or_string)
              ->
              Ojs.set_prop_ascii (t_to_js x228) "pfx"
                (or_string_to_js
                   (fun
                      (x230 :
                        (Buffer.t,
                          (Buffer.t, PxfObject.t) union2 or_string list)
                          union2)
                      ->
                      union2_to_js Buffer.t_to_js
                        (fun
                           (x232 :
                             (Buffer.t, PxfObject.t) union2 or_string list)
                           ->
                           Ojs.list_to_js
                             (fun
                                (x233 :
                                  (Buffer.t, PxfObject.t) union2 or_string)
                                ->
                                or_string_to_js
                                  (fun
                                     (x234 : (Buffer.t, PxfObject.t) union2)
                                     ->
                                     union2_to_js Buffer.t_to_js
                                       PxfObject.t_to_js x234) x233) x232)
                        x230) x229)
        let (get_secure_options : t -> int) =
          fun (x237 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x237) "secureOptions")
        let (set_secure_options : t -> int -> unit) =
          fun (x238 : t) ->
            fun (x239 : int) ->
              Ojs.set_prop_ascii (t_to_js x238) "secureOptions"
                (Ojs.int_to_js x239)
        let (get_secure_protocol : t -> string) =
          fun (x240 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x240) "secureProtocol")
        let (set_secure_protocol : t -> string -> unit) =
          fun (x241 : t) ->
            fun (x242 : string) ->
              Ojs.set_prop_ascii (t_to_js x241) "secureProtocol"
                (Ojs.string_to_js x242)
        let (get_session_id_context : t -> string) =
          fun (x243 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x243) "sessionIdContext")
        let (set_session_id_context : t -> string -> unit) =
          fun (x244 : t) ->
            fun (x245 : string) ->
              Ojs.set_prop_ascii (t_to_js x244) "sessionIdContext"
                (Ojs.string_to_js x245)
        let (get_ticket_keys : t -> Buffer.t) =
          fun (x246 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x246) "ticketKeys")
        let (set_ticket_keys : t -> Buffer.t -> unit) =
          fun (x247 : t) ->
            fun (x248 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x247) "ticketKeys"
                (Buffer.t_to_js x248)
        let (get_session_timeout : t -> int) =
          fun (x249 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x249) "sessionTimeout")
        let (set_session_timeout : t -> int -> unit) =
          fun (x250 : t) ->
            fun (x251 : int) ->
              Ojs.set_prop_ascii (t_to_js x250) "sessionTimeout"
                (Ojs.int_to_js x251)
      end
    module CommonConnectionOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x253 : Ojs.t) -> x253
        and t_to_js : t -> Ojs.t = fun (x252 : Ojs.t) -> x252
        let (get_secure_context : t -> SecureContext.t) =
          fun (x254 : t) ->
            SecureContext.t_of_js
              (Ojs.get_prop_ascii (t_to_js x254) "secureContext")
        let (set_secure_context : t -> SecureContext.t -> unit) =
          fun (x255 : t) ->
            fun (x256 : SecureContext.t) ->
              Ojs.set_prop_ascii (t_to_js x255) "secureContext"
                (SecureContext.t_to_js x256)
        let (get_enable_trace : t -> bool) =
          fun (x257 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x257) "enableTrace")
        let (set_enable_trace : t -> bool -> unit) =
          fun (x258 : t) ->
            fun (x259 : bool) ->
              Ojs.set_prop_ascii (t_to_js x258) "enableTrace"
                (Ojs.bool_to_js x259)
        let (get_request_cert : t -> bool) =
          fun (x260 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x260) "requestCert")
        let (set_request_cert : t -> bool -> unit) =
          fun (x261 : t) ->
            fun (x262 : bool) ->
              Ojs.set_prop_ascii (t_to_js x261) "requestCert"
                (Ojs.bool_to_js x262)
        let (get_alpn_protocols :
          t -> (Uint8Array.t, Uint8Array.t or_string) or_array) =
          fun (x263 : t) ->
            or_array_of_js Uint8Array.t_of_js
              (fun (x265 : Ojs.t) -> or_string_of_js Uint8Array.t_of_js x265)
              (Ojs.get_prop_ascii (t_to_js x263) "ALPNProtocols")
        let (set_alpn_protocols :
          t -> (Uint8Array.t, Uint8Array.t or_string) or_array -> unit) =
          fun (x267 : t) ->
            fun (x268 : (Uint8Array.t, Uint8Array.t or_string) or_array) ->
              Ojs.set_prop_ascii (t_to_js x267) "ALPNProtocols"
                (or_array_to_js Uint8Array.t_to_js
                   (fun (x270 : Uint8Array.t or_string) ->
                      or_string_to_js Uint8Array.t_to_js x270) x268)
        let (s_ni_callback :
          t ->
            servername:string ->
              cb:(err:Error.t or_null -> ctx:SecureContext.t -> unit) -> unit)
          =
          fun (x277 : t) ->
            fun ~servername:(x272 : string) ->
              fun
                ~cb:(x273 :
                      err:Error.t or_null -> ctx:SecureContext.t -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x277) "SNICallback"
                     [|(Ojs.string_to_js x272);(Ojs.fun_to_js 2
                                                  (fun (x274 : Ojs.t) ->
                                                     fun (x276 : Ojs.t) ->
                                                       x273
                                                         ~err:(or_null_of_js
                                                                 Error.t_of_js
                                                                 x274)
                                                         ~ctx:(SecureContext.t_of_js
                                                                 x276)))|])
        let (get_reject_unauthorized : t -> bool) =
          fun (x278 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x278) "rejectUnauthorized")
        let (set_reject_unauthorized : t -> bool -> unit) =
          fun (x279 : t) ->
            fun (x280 : bool) ->
              Ojs.set_prop_ascii (t_to_js x279) "rejectUnauthorized"
                (Ojs.bool_to_js x280)
      end
    module TLSSocketOptions =
      struct
        include SecureContextOptions
        let (get_secure_context : t -> SecureContext.t) =
          fun (x281 : t) ->
            SecureContext.t_of_js
              (Ojs.get_prop_ascii (t_to_js x281) "secureContext")
        let (set_secure_context : t -> SecureContext.t -> unit) =
          fun (x282 : t) ->
            fun (x283 : SecureContext.t) ->
              Ojs.set_prop_ascii (t_to_js x282) "secureContext"
                (SecureContext.t_to_js x283)
        let (get_enable_trace : t -> bool) =
          fun (x284 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x284) "enableTrace")
        let (set_enable_trace : t -> bool -> unit) =
          fun (x285 : t) ->
            fun (x286 : bool) ->
              Ojs.set_prop_ascii (t_to_js x285) "enableTrace"
                (Ojs.bool_to_js x286)
        let (get_request_cert : t -> bool) =
          fun (x287 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x287) "requestCert")
        let (set_request_cert : t -> bool -> unit) =
          fun (x288 : t) ->
            fun (x289 : bool) ->
              Ojs.set_prop_ascii (t_to_js x288) "requestCert"
                (Ojs.bool_to_js x289)
        let (get_alpn_protocols :
          t -> (Uint8Array.t, Uint8Array.t or_string) or_array) =
          fun (x290 : t) ->
            or_array_of_js Uint8Array.t_of_js
              (fun (x292 : Ojs.t) -> or_string_of_js Uint8Array.t_of_js x292)
              (Ojs.get_prop_ascii (t_to_js x290) "ALPNProtocols")
        let (set_alpn_protocols :
          t -> (Uint8Array.t, Uint8Array.t or_string) or_array -> unit) =
          fun (x294 : t) ->
            fun (x295 : (Uint8Array.t, Uint8Array.t or_string) or_array) ->
              Ojs.set_prop_ascii (t_to_js x294) "ALPNProtocols"
                (or_array_to_js Uint8Array.t_to_js
                   (fun (x297 : Uint8Array.t or_string) ->
                      or_string_to_js Uint8Array.t_to_js x297) x295)
        let (s_ni_callback :
          t ->
            servername:string ->
              cb:(err:Error.t or_null -> ctx:SecureContext.t -> unit) -> unit)
          =
          fun (x304 : t) ->
            fun ~servername:(x299 : string) ->
              fun
                ~cb:(x300 :
                      err:Error.t or_null -> ctx:SecureContext.t -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x304) "SNICallback"
                     [|(Ojs.string_to_js x299);(Ojs.fun_to_js 2
                                                  (fun (x301 : Ojs.t) ->
                                                     fun (x303 : Ojs.t) ->
                                                       x300
                                                         ~err:(or_null_of_js
                                                                 Error.t_of_js
                                                                 x301)
                                                         ~ctx:(SecureContext.t_of_js
                                                                 x303)))|])
        let (get_reject_unauthorized : t -> bool) =
          fun (x305 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x305) "rejectUnauthorized")
        let (set_reject_unauthorized : t -> bool -> unit) =
          fun (x306 : t) ->
            fun (x307 : bool) ->
              Ojs.set_prop_ascii (t_to_js x306) "rejectUnauthorized"
                (Ojs.bool_to_js x307)
        let (get_is_server : t -> bool) =
          fun (x308 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x308) "isServer")
        let (set_is_server : t -> bool -> unit) =
          fun (x309 : t) ->
            fun (x310 : bool) ->
              Ojs.set_prop_ascii (t_to_js x309) "isServer"
                (Ojs.bool_to_js x310)
        let (get_server : t -> Net.Server.t) =
          fun (x311 : t) ->
            Net.Server.t_of_js (Ojs.get_prop_ascii (t_to_js x311) "server")
        let (set_server : t -> Net.Server.t -> unit) =
          fun (x312 : t) ->
            fun (x313 : Net.Server.t) ->
              Ojs.set_prop_ascii (t_to_js x312) "server"
                (Net.Server.t_to_js x313)
        let (get_session : t -> Buffer.t) =
          fun (x314 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x314) "session")
        let (set_session : t -> Buffer.t -> unit) =
          fun (x315 : t) ->
            fun (x316 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x315) "session"
                (Buffer.t_to_js x316)
        let (get_request_ocsp : t -> bool) =
          fun (x317 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x317) "requestOCSP")
        let (set_request_ocsp : t -> bool -> unit) =
          fun (x318 : t) ->
            fun (x319 : bool) ->
              Ojs.set_prop_ascii (t_to_js x318) "requestOCSP"
                (Ojs.bool_to_js x319)
      end
    module TLSSocket =
      struct
        include struct include Net.Socket end
        let (create :
          socket:Net.Socket.t -> ?options:TLSSocketOptions.t -> unit -> t) =
          fun ~socket:(x320 : Net.Socket.t) ->
            fun ?options:(x321 : TLSSocketOptions.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Import.tls "TLSSocket")
                     (let x322 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x322 "push" [|(Net.Socket.t_to_js x320)|]);
                      (match x321 with
                       | Some x323 ->
                           ignore
                             (Ojs.call x322 "push"
                                [|(TLSSocketOptions.t_to_js x323)|])
                       | None -> ());
                      x322))
        let (get_authorized : t -> bool) =
          fun (x324 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x324) "authorized")
        let (set_authorized : t -> bool -> unit) =
          fun (x325 : t) ->
            fun (x326 : bool) ->
              Ojs.set_prop_ascii (t_to_js x325) "authorized"
                (Ojs.bool_to_js x326)
        let (get_authorization_error : t -> Error.t) =
          fun (x327 : t) ->
            Error.t_of_js
              (Ojs.get_prop_ascii (t_to_js x327) "authorizationError")
        let (set_authorization_error : t -> Error.t -> unit) =
          fun (x328 : t) ->
            fun (x329 : Error.t) ->
              Ojs.set_prop_ascii (t_to_js x328) "authorizationError"
                (Error.t_to_js x329)
        let (get_encrypted : t -> bool) =
          fun (x330 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x330) "encrypted")
        let (set_encrypted : t -> bool -> unit) =
          fun (x331 : t) ->
            fun (x332 : bool) ->
              Ojs.set_prop_ascii (t_to_js x331) "encrypted"
                (Ojs.bool_to_js x332)
        let (get_alpn_protocol : t -> string) =
          fun (x333 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x333) "alpnProtocol")
        let (set_alpn_protocol : t -> string -> unit) =
          fun (x334 : t) ->
            fun (x335 : string) ->
              Ojs.set_prop_ascii (t_to_js x334) "alpnProtocol"
                (Ojs.string_to_js x335)
        let (get_certificate :
          t -> (PeerCertificate.t, untyped_object) union2 or_null) =
          fun (x336 : t) ->
            or_null_of_js
              (fun (x337 : Ojs.t) ->
                 union2_of_js PeerCertificate.t_of_js untyped_object_of_js
                   x337) (Ojs.call (t_to_js x336) "getCertificate" [||])
        let (get_cipher : t -> CipherNameAndProtocol.t) =
          fun (x340 : t) ->
            CipherNameAndProtocol.t_of_js
              (Ojs.call (t_to_js x340) "getCipher" [||])
        let (get_ephemeral_key_info :
          t -> (EphemeralKeyInfo.t, untyped_object) union2 or_null) =
          fun (x341 : t) ->
            or_null_of_js
              (fun (x342 : Ojs.t) ->
                 union2_of_js EphemeralKeyInfo.t_of_js untyped_object_of_js
                   x342) (Ojs.call (t_to_js x341) "getEphemeralKeyInfo" [||])
        let (get_finished : t -> Buffer.t or_undefined) =
          fun (x345 : t) ->
            or_undefined_of_js Buffer.t_of_js
              (Ojs.call (t_to_js x345) "getFinished" [||])
        let (get_peer_certificate :
          t -> detailed:[ `L_b_true ] -> DetailedPeerCertificate.t) =
          fun (x348 : t) ->
            fun ~detailed:(x347 : [ `L_b_true ]) ->
              DetailedPeerCertificate.t_of_js
                (Ojs.call (t_to_js x348) "getPeerCertificate"
                   [|((match x347 with
                       | `L_b_true -> Ojs.string_to_js "LBTrue"))|])
        let (get_peer_certificate' :
          t -> ?detailed:[ `L_b_false ] -> unit -> PeerCertificate.t) =
          fun (x352 : t) ->
            fun ?detailed:(x349 : [ `L_b_false ] option) ->
              fun () ->
                PeerCertificate.t_of_js
                  (let x353 = t_to_js x352 in
                   Ojs.call (Ojs.get_prop_ascii x353 "getPeerCertificate")
                     "apply"
                     [|x353;((let x350 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x349 with
                               | Some x351 ->
                                   ignore
                                     (Ojs.call x350 "push"
                                        [|((match x351 with
                                            | `L_b_false ->
                                                Ojs.string_to_js "LBFalse"))|])
                               | None -> ());
                              x350))|])
        let (get_peer_certificate'' :
          t ->
            ?detailed:bool ->
              unit -> (DetailedPeerCertificate.t, PeerCertificate.t) union2)
          =
          fun (x357 : t) ->
            fun ?detailed:(x354 : bool option) ->
              fun () ->
                union2_of_js DetailedPeerCertificate.t_of_js
                  PeerCertificate.t_of_js
                  (let x358 = t_to_js x357 in
                   Ojs.call (Ojs.get_prop_ascii x358 "getPeerCertificate")
                     "apply"
                     [|x358;((let x355 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x354 with
                               | Some x356 ->
                                   ignore
                                     (Ojs.call x355 "push"
                                        [|(Ojs.bool_to_js x356)|])
                               | None -> ());
                              x355))|])
        let (get_peer_finished : t -> Buffer.t or_undefined) =
          fun (x361 : t) ->
            or_undefined_of_js Buffer.t_of_js
              (Ojs.call (t_to_js x361) "getPeerFinished" [||])
        let (get_protocol : t -> string or_null) =
          fun (x363 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x363) "getProtocol" [||])
        let (get_session : t -> Buffer.t or_undefined) =
          fun (x365 : t) ->
            or_undefined_of_js Buffer.t_of_js
              (Ojs.call (t_to_js x365) "getSession" [||])
        let (get_shared_sigalgs : t -> string list) =
          fun (x367 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x367) "getSharedSigalgs" [||])
        let (get_tls_ticket : t -> Buffer.t or_undefined) =
          fun (x369 : t) ->
            or_undefined_of_js Buffer.t_of_js
              (Ojs.call (t_to_js x369) "getTLSTicket" [||])
        let (is_session_reused : t -> bool) =
          fun (x371 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x371) "isSessionReused" [||])
        let (renegotiate :
          t ->
            options:AnonymousInterface0.t ->
              callback:(err:Error.t or_null -> unit) -> bool or_undefined)
          =
          fun (x376 : t) ->
            fun ~options:(x372 : AnonymousInterface0.t) ->
              fun ~callback:(x373 : err:Error.t or_null -> unit) ->
                or_undefined_of_js Ojs.bool_of_js
                  (Ojs.call (t_to_js x376) "renegotiate"
                     [|(AnonymousInterface0.t_to_js x372);(Ojs.fun_to_js 1
                                                             (fun
                                                                (x374 :
                                                                  Ojs.t)
                                                                ->
                                                                x373
                                                                  ~err:(
                                                                  or_null_of_js
                                                                    Error.t_of_js
                                                                    x374)))|])
        let (set_max_send_fragment : t -> size:int -> bool) =
          fun (x379 : t) ->
            fun ~size:(x378 : int) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x379) "setMaxSendFragment"
                   [|(Ojs.int_to_js x378)|])
        let (disable_renegotiation : t -> unit) =
          fun (x380 : t) ->
            ignore (Ojs.call (t_to_js x380) "disableRenegotiation" [||])
        let (enable_trace : t -> unit) =
          fun (x381 : t) ->
            ignore (Ojs.call (t_to_js x381) "enableTrace" [||])
        let (export_keying_material :
          t -> length:int -> label:string -> context:Buffer.t -> Buffer.t) =
          fun (x385 : t) ->
            fun ~length:(x382 : int) ->
              fun ~label:(x383 : string) ->
                fun ~context:(x384 : Buffer.t) ->
                  Buffer.t_of_js
                    (Ojs.call (t_to_js x385) "exportKeyingMaterial"
                       [|(Ojs.int_to_js x382);(Ojs.string_to_js x383);(
                         Buffer.t_to_js x384)|])
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x390 : t) ->
            fun ~event:(x386 : string) ->
              fun ~listener:(x387 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x390) "addListener"
                     [|(Ojs.string_to_js x386);(Ojs.fun_to_js_args
                                                  (fun (x388 : _) ->
                                                     x387
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x388 0)))|])
        let (add_listener' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x394 : t) ->
            fun ~event:(x391 : [ `OCSPResponse ]) ->
              fun ~listener:(x392 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x394) "addListener"
                     [|((match x391 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x393 : Ojs.t) ->
                            x392 ~response:(Buffer.t_of_js x393)))|])
        let (add_listener'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x397 : t) ->
            fun ~event:(x395 : [ `secureConnect ]) ->
              fun ~listener:(x396 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x397) "addListener"
                     [|((match x395 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x396 ()))|])
        let (add_listener''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x401 : t) ->
            fun ~event:(x398 : [ `session ]) ->
              fun ~listener:(x399 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x401) "addListener"
                     [|((match x398 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x400 : Ojs.t) ->
                            x399 ~session:(Buffer.t_of_js x400)))|])
        let (add_listener'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x405 : t) ->
            fun ~event:(x402 : [ `keylog ]) ->
              fun ~listener:(x403 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x405) "addListener"
                     [|((match x402 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x404 :
                                                                    Ojs.t) ->
                                                                    x403
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x404)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x411 : t) ->
            fun ~event:(x406 : symbol or_string) ->
              fun ~args:(x407 : any list) ->
                Ojs.bool_of_js
                  (let x412 = t_to_js x411 in
                   Ojs.call (Ojs.get_prop_ascii x412 "emit") "apply"
                     [|x412;((let x408 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x408 "push"
                                   [|(or_string_to_js symbol_to_js x406)|]);
                              List.iter
                                (fun (x409 : any) ->
                                   ignore
                                     (Ojs.call x408 "push"
                                        [|(any_to_js x409)|])) x407;
                              x408))|])
        let (emit' :
          t -> event:[ `OCSPResponse ] -> response:Buffer.t -> bool) =
          fun (x415 : t) ->
            fun ~event:(x413 : [ `OCSPResponse ]) ->
              fun ~response:(x414 : Buffer.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x415) "emit"
                     [|((match x413 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Buffer.t_to_js x414)|])
        let (emit'' : t -> event:[ `secureConnect ] -> bool) =
          fun (x417 : t) ->
            fun ~event:(x416 : [ `secureConnect ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x417) "emit"
                   [|((match x416 with
                       | `secureConnect -> Ojs.string_to_js "secureConnect"))|])
        let (emit''' : t -> event:[ `session ] -> session:Buffer.t -> bool) =
          fun (x420 : t) ->
            fun ~event:(x418 : [ `session ]) ->
              fun ~session:(x419 : Buffer.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x420) "emit"
                     [|((match x418 with
                         | `session -> Ojs.string_to_js "session"));(
                       Buffer.t_to_js x419)|])
        let (emit'''' : t -> event:[ `keylog ] -> line:Buffer.t -> bool) =
          fun (x423 : t) ->
            fun ~event:(x421 : [ `keylog ]) ->
              fun ~line:(x422 : Buffer.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x423) "emit"
                     [|((match x421 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Buffer.t_to_js
                                                                    x422)|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x428 : t) ->
            fun ~event:(x424 : string) ->
              fun ~listener:(x425 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x428) "on"
                     [|(Ojs.string_to_js x424);(Ojs.fun_to_js_args
                                                  (fun (x426 : _) ->
                                                     x425
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x426 0)))|])
        let (on' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x432 : t) ->
            fun ~event:(x429 : [ `OCSPResponse ]) ->
              fun ~listener:(x430 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x432) "on"
                     [|((match x429 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x431 : Ojs.t) ->
                            x430 ~response:(Buffer.t_of_js x431)))|])
        let (on'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x435 : t) ->
            fun ~event:(x433 : [ `secureConnect ]) ->
              fun ~listener:(x434 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x435) "on"
                     [|((match x433 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x434 ()))|])
        let (on''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x439 : t) ->
            fun ~event:(x436 : [ `session ]) ->
              fun ~listener:(x437 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x439) "on"
                     [|((match x436 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x438 : Ojs.t) ->
                            x437 ~session:(Buffer.t_of_js x438)))|])
        let (on'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x443 : t) ->
            fun ~event:(x440 : [ `keylog ]) ->
              fun ~listener:(x441 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x443) "on"
                     [|((match x440 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x442 :
                                                                    Ojs.t) ->
                                                                    x441
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x442)))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x448 : t) ->
            fun ~event:(x444 : string) ->
              fun ~listener:(x445 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x448) "once"
                     [|(Ojs.string_to_js x444);(Ojs.fun_to_js_args
                                                  (fun (x446 : _) ->
                                                     x445
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x446 0)))|])
        let (once' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x452 : t) ->
            fun ~event:(x449 : [ `OCSPResponse ]) ->
              fun ~listener:(x450 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x452) "once"
                     [|((match x449 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x451 : Ojs.t) ->
                            x450 ~response:(Buffer.t_of_js x451)))|])
        let (once'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x455 : t) ->
            fun ~event:(x453 : [ `secureConnect ]) ->
              fun ~listener:(x454 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x455) "once"
                     [|((match x453 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x454 ()))|])
        let (once''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x459 : t) ->
            fun ~event:(x456 : [ `session ]) ->
              fun ~listener:(x457 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x459) "once"
                     [|((match x456 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x458 : Ojs.t) ->
                            x457 ~session:(Buffer.t_of_js x458)))|])
        let (once'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x463 : t) ->
            fun ~event:(x460 : [ `keylog ]) ->
              fun ~listener:(x461 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x463) "once"
                     [|((match x460 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x462 :
                                                                    Ojs.t) ->
                                                                    x461
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x462)))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x468 : t) ->
            fun ~event:(x464 : string) ->
              fun ~listener:(x465 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x468) "prependListener"
                     [|(Ojs.string_to_js x464);(Ojs.fun_to_js_args
                                                  (fun (x466 : _) ->
                                                     x465
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x466 0)))|])
        let (prepend_listener' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x472 : t) ->
            fun ~event:(x469 : [ `OCSPResponse ]) ->
              fun ~listener:(x470 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x472) "prependListener"
                     [|((match x469 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x471 : Ojs.t) ->
                            x470 ~response:(Buffer.t_of_js x471)))|])
        let (prepend_listener'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x475 : t) ->
            fun ~event:(x473 : [ `secureConnect ]) ->
              fun ~listener:(x474 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x475) "prependListener"
                     [|((match x473 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x474 ()))|])
        let (prepend_listener''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x479 : t) ->
            fun ~event:(x476 : [ `session ]) ->
              fun ~listener:(x477 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x479) "prependListener"
                     [|((match x476 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x478 : Ojs.t) ->
                            x477 ~session:(Buffer.t_of_js x478)))|])
        let (prepend_listener'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x483 : t) ->
            fun ~event:(x480 : [ `keylog ]) ->
              fun ~listener:(x481 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x483) "prependListener"
                     [|((match x480 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x482 :
                                                                    Ojs.t) ->
                                                                    x481
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x482)))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x488 : t) ->
            fun ~event:(x484 : string) ->
              fun ~listener:(x485 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x488) "prependOnceListener"
                     [|(Ojs.string_to_js x484);(Ojs.fun_to_js_args
                                                  (fun (x486 : _) ->
                                                     x485
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x486 0)))|])
        let (prepend_once_listener' :
          t ->
            event:[ `OCSPResponse ] ->
              listener:(response:Buffer.t -> unit) -> t)
          =
          fun (x492 : t) ->
            fun ~event:(x489 : [ `OCSPResponse ]) ->
              fun ~listener:(x490 : response:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x492) "prependOnceListener"
                     [|((match x489 with
                         | `OCSPResponse -> Ojs.string_to_js "OCSPResponse"));(
                       Ojs.fun_to_js 1
                         (fun (x491 : Ojs.t) ->
                            x490 ~response:(Buffer.t_of_js x491)))|])
        let (prepend_once_listener'' :
          t -> event:[ `secureConnect ] -> listener:(unit -> unit) -> t) =
          fun (x495 : t) ->
            fun ~event:(x493 : [ `secureConnect ]) ->
              fun ~listener:(x494 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x495) "prependOnceListener"
                     [|((match x493 with
                         | `secureConnect -> Ojs.string_to_js "secureConnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x494 ()))|])
        let (prepend_once_listener''' :
          t -> event:[ `session ] -> listener:(session:Buffer.t -> unit) -> t)
          =
          fun (x499 : t) ->
            fun ~event:(x496 : [ `session ]) ->
              fun ~listener:(x497 : session:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x499) "prependOnceListener"
                     [|((match x496 with
                         | `session -> Ojs.string_to_js "session"));(
                       Ojs.fun_to_js 1
                         (fun (x498 : Ojs.t) ->
                            x497 ~session:(Buffer.t_of_js x498)))|])
        let (prepend_once_listener'''' :
          t -> event:[ `keylog ] -> listener:(line:Buffer.t -> unit) -> t) =
          fun (x503 : t) ->
            fun ~event:(x500 : [ `keylog ]) ->
              fun ~listener:(x501 : line:Buffer.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x503) "prependOnceListener"
                     [|((match x500 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x502 :
                                                                    Ojs.t) ->
                                                                    x501
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x502)))|])
      end
    module SecurePair =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x505 : Ojs.t) -> x505
        and t_to_js : t -> Ojs.t = fun (x504 : Ojs.t) -> x504
        let (get_encrypted : t -> TLSSocket.t) =
          fun (x506 : t) ->
            TLSSocket.t_of_js (Ojs.get_prop_ascii (t_to_js x506) "encrypted")
        let (set_encrypted : t -> TLSSocket.t -> unit) =
          fun (x507 : t) ->
            fun (x508 : TLSSocket.t) ->
              Ojs.set_prop_ascii (t_to_js x507) "encrypted"
                (TLSSocket.t_to_js x508)
        let (get_cleartext : t -> TLSSocket.t) =
          fun (x509 : t) ->
            TLSSocket.t_of_js (Ojs.get_prop_ascii (t_to_js x509) "cleartext")
        let (set_cleartext : t -> TLSSocket.t -> unit) =
          fun (x510 : t) ->
            fun (x511 : TLSSocket.t) ->
              Ojs.set_prop_ascii (t_to_js x510) "cleartext"
                (TLSSocket.t_to_js x511)
      end
    module TlsOptions =
      struct
        include struct include SecureContextOptions end
        let (get_handshake_timeout : t -> int) =
          fun (x512 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x512) "handshakeTimeout")
        let (set_handshake_timeout : t -> int -> unit) =
          fun (x513 : t) ->
            fun (x514 : int) ->
              Ojs.set_prop_ascii (t_to_js x513) "handshakeTimeout"
                (Ojs.int_to_js x514)
        let (get_session_timeout : t -> int) =
          fun (x515 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x515) "sessionTimeout")
        let (set_session_timeout : t -> int -> unit) =
          fun (x516 : t) ->
            fun (x517 : int) ->
              Ojs.set_prop_ascii (t_to_js x516) "sessionTimeout"
                (Ojs.int_to_js x517)
        let (get_ticket_keys : t -> Buffer.t) =
          fun (x518 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x518) "ticketKeys")
        let (set_ticket_keys : t -> Buffer.t -> unit) =
          fun (x519 : t) ->
            fun (x520 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x519) "ticketKeys"
                (Buffer.t_to_js x520)
        let (psk_callback :
          t ->
            socket:TLSSocket.t ->
              identity:string -> (DataView.t, TypedArray.t) union2 or_null)
          =
          fun (x523 : t) ->
            fun ~socket:(x521 : TLSSocket.t) ->
              fun ~identity:(x522 : string) ->
                or_null_of_js
                  (fun (x524 : Ojs.t) ->
                     union2_of_js DataView.t_of_js TypedArray.t_of_js x524)
                  (Ojs.call (t_to_js x523) "pskCallback"
                     [|(TLSSocket.t_to_js x521);(Ojs.string_to_js x522)|])
        let (get_psk_identity_hint : t -> string) =
          fun (x527 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x527) "pskIdentityHint")
        let (set_psk_identity_hint : t -> string -> unit) =
          fun (x528 : t) ->
            fun (x529 : string) ->
              Ojs.set_prop_ascii (t_to_js x528) "pskIdentityHint"
                (Ojs.string_to_js x529)
        let (cast' : t -> CommonConnectionOptions.t) =
          fun (x530 : t) -> CommonConnectionOptions.t_of_js (t_to_js x530)
        let (cast'' : t -> Net.ServerOpts.t) =
          fun (x531 : t) -> Net.ServerOpts.t_of_js (t_to_js x531)
      end
    module PSKCallbackNegotation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x533 : Ojs.t) -> x533
        and t_to_js : t -> Ojs.t = fun (x532 : Ojs.t) -> x532
        let (get_psk : t -> (DataView.t, TypedArray.t) union2) =
          fun (x534 : t) ->
            union2_of_js DataView.t_of_js TypedArray.t_of_js
              (Ojs.get_prop_ascii (t_to_js x534) "psk")
        let (set_psk : t -> (DataView.t, TypedArray.t) union2 -> unit) =
          fun (x537 : t) ->
            fun (x538 : (DataView.t, TypedArray.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x537) "psk"
                (union2_to_js DataView.t_to_js TypedArray.t_to_js x538)
        let (get_identity : t -> string) =
          fun (x541 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x541) "identity")
        let (set_identity : t -> string -> unit) =
          fun (x542 : t) ->
            fun (x543 : string) ->
              Ojs.set_prop_ascii (t_to_js x542) "identity"
                (Ojs.string_to_js x543)
      end
    module ConnectionOptions =
      struct
        include struct include SecureContextOptions end
        let (get_host : t -> string) =
          fun (x544 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x544) "host")
        let (set_host : t -> string -> unit) =
          fun (x545 : t) ->
            fun (x546 : string) ->
              Ojs.set_prop_ascii (t_to_js x545) "host"
                (Ojs.string_to_js x546)
        let (get_port : t -> int) =
          fun (x547 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x547) "port")
        let (set_port : t -> int -> unit) =
          fun (x548 : t) ->
            fun (x549 : int) ->
              Ojs.set_prop_ascii (t_to_js x548) "port" (Ojs.int_to_js x549)
        let (get_path : t -> string) =
          fun (x550 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x550) "path")
        let (set_path : t -> string -> unit) =
          fun (x551 : t) ->
            fun (x552 : string) ->
              Ojs.set_prop_ascii (t_to_js x551) "path"
                (Ojs.string_to_js x552)
        let (get_socket : t -> Net.Socket.t) =
          fun (x553 : t) ->
            Net.Socket.t_of_js (Ojs.get_prop_ascii (t_to_js x553) "socket")
        let (set_socket : t -> Net.Socket.t -> unit) =
          fun (x554 : t) ->
            fun (x555 : Net.Socket.t) ->
              Ojs.set_prop_ascii (t_to_js x554) "socket"
                (Net.Socket.t_to_js x555)
        let (check_server_identity :
          t -> host:string -> cert:PeerCertificate.t -> Error.t or_undefined)
          =
          fun (x558 : t) ->
            fun ~host:(x556 : string) ->
              fun ~cert:(x557 : PeerCertificate.t) ->
                or_undefined_of_js Error.t_of_js
                  (Ojs.call (t_to_js x558) "checkServerIdentity"
                     [|(Ojs.string_to_js x556);(PeerCertificate.t_to_js x557)|])
        let (get_servername : t -> string) =
          fun (x560 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x560) "servername")
        let (set_servername : t -> string -> unit) =
          fun (x561 : t) ->
            fun (x562 : string) ->
              Ojs.set_prop_ascii (t_to_js x561) "servername"
                (Ojs.string_to_js x562)
        let (get_session : t -> Buffer.t) =
          fun (x563 : t) ->
            Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x563) "session")
        let (set_session : t -> Buffer.t -> unit) =
          fun (x564 : t) ->
            fun (x565 : Buffer.t) ->
              Ojs.set_prop_ascii (t_to_js x564) "session"
                (Buffer.t_to_js x565)
        let (get_min_dh_size : t -> int) =
          fun (x566 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x566) "minDHSize")
        let (set_min_dh_size : t -> int -> unit) =
          fun (x567 : t) ->
            fun (x568 : int) ->
              Ojs.set_prop_ascii (t_to_js x567) "minDHSize"
                (Ojs.int_to_js x568)
        let (get_lookup : t -> Net.LookupFunction.t) =
          fun (x569 : t) ->
            Net.LookupFunction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x569) "lookup")
        let (set_lookup : t -> Net.LookupFunction.t -> unit) =
          fun (x570 : t) ->
            fun (x571 : Net.LookupFunction.t) ->
              Ojs.set_prop_ascii (t_to_js x570) "lookup"
                (Net.LookupFunction.t_to_js x571)
        let (get_timeout : t -> int) =
          fun (x572 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x572) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x573 : t) ->
            fun (x574 : int) ->
              Ojs.set_prop_ascii (t_to_js x573) "timeout"
                (Ojs.int_to_js x574)
        let (psk_callback :
          t -> hint:string or_null -> PSKCallbackNegotation.t or_null) =
          fun (x577 : t) ->
            fun ~hint:(x575 : string or_null) ->
              or_null_of_js PSKCallbackNegotation.t_of_js
                (Ojs.call (t_to_js x577) "pskCallback"
                   [|(or_null_to_js Ojs.string_to_js x575)|])
        let (cast' : t -> CommonConnectionOptions.t) =
          fun (x579 : t) -> CommonConnectionOptions.t_of_js (t_to_js x579)
      end
    module Server =
      struct
        include struct include Net.Server end
        let (create :
          ?secure_connection_listener:(socket:TLSSocket.t -> unit) ->
            unit -> t)
          =
          fun
            ?secure_connection_listener:(x580 :
                                          (socket:TLSSocket.t -> unit) option)
            ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.tls "Server")
                   (let x581 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x580 with
                     | Some x582 ->
                         ignore
                           (Ojs.call x581 "push"
                              [|(Ojs.fun_to_js 1
                                   (fun (x583 : Ojs.t) ->
                                      x582 ~socket:(TLSSocket.t_of_js x583)))|])
                     | None -> ());
                    x581))
        let (create' :
          options:TlsOptions.t ->
            ?secure_connection_listener:(socket:TLSSocket.t -> unit) ->
              unit -> t)
          =
          fun ~options:(x584 : TlsOptions.t) ->
            fun
              ?secure_connection_listener:(x585 :
                                            (socket:TLSSocket.t -> unit)
                                              option)
              ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.tls "Server")
                     (let x586 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x586 "push" [|(TlsOptions.t_to_js x584)|]);
                      (match x585 with
                       | Some x587 ->
                           ignore
                             (Ojs.call x586 "push"
                                [|(Ojs.fun_to_js 1
                                     (fun (x588 : Ojs.t) ->
                                        x587 ~socket:(TLSSocket.t_of_js x588)))|])
                       | None -> ());
                      x586))
        let (add_context :
          t -> host_name:string -> credentials:SecureContextOptions.t -> unit)
          =
          fun (x591 : t) ->
            fun ~host_name:(x589 : string) ->
              fun ~credentials:(x590 : SecureContextOptions.t) ->
                ignore
                  (Ojs.call (t_to_js x591) "addContext"
                     [|(Ojs.string_to_js x589);(SecureContextOptions.t_to_js
                                                  x590)|])
        let (get_ticket_keys : t -> Buffer.t) =
          fun (x592 : t) ->
            Buffer.t_of_js (Ojs.call (t_to_js x592) "getTicketKeys" [||])
        let (set_secure_context :
          t -> details:SecureContextOptions.t -> unit) =
          fun (x594 : t) ->
            fun ~details:(x593 : SecureContextOptions.t) ->
              ignore
                (Ojs.call (t_to_js x594) "setSecureContext"
                   [|(SecureContextOptions.t_to_js x593)|])
        let (set_ticket_keys : t -> keys:Buffer.t -> unit) =
          fun (x596 : t) ->
            fun ~keys:(x595 : Buffer.t) ->
              ignore
                (Ojs.call (t_to_js x596) "setTicketKeys"
                   [|(Buffer.t_to_js x595)|])
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x601 : t) ->
            fun ~event:(x597 : string) ->
              fun ~listener:(x598 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x601) "addListener"
                     [|(Ojs.string_to_js x597);(Ojs.fun_to_js_args
                                                  (fun (x599 : _) ->
                                                     x598
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x599 0)))|])
        let (add_listener' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x606 : t) ->
            fun ~event:(x602 : [ `tlsClientError ]) ->
              fun
                ~listener:(x603 :
                            err:Error.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x606) "addListener"
                     [|((match x602 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x604 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x605 :
                                                                    Ojs.t) ->
                                                                    x603
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x604)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x605)))|])
        let (add_listener'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          session_data:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x614 : t) ->
            fun ~event:(x607 : [ `newSession ]) ->
              fun
                ~listener:(x608 :
                            sessionId:Buffer.t ->
                              session_data:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x614) "addListener"
                     [|((match x607 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x609 : Ojs.t) ->
                            fun (x610 : Ojs.t) ->
                              fun (x611 : Ojs.t) ->
                                x608 ~sessionId:(Buffer.t_of_js x609)
                                  ~session_data:(Buffer.t_of_js x610)
                                  ~callback:(fun ~err:(x612 : Error.t) ->
                                               fun ~resp:(x613 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x611
                                                      [|(Error.t_to_js x612);(
                                                        Buffer.t_to_js x613)|]))))|])
        let (add_listener''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x623 : t) ->
            fun ~event:(x615 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x616 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x623) "addListener"
                     [|((match x615 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x617 : Ojs.t) ->
                            fun (x618 : Ojs.t) ->
                              fun (x619 : Ojs.t) ->
                                x616 ~certificate:(Buffer.t_of_js x617)
                                  ~issuer:(Buffer.t_of_js x618)
                                  ~callback:(fun
                                               ~err:(x620 : Error.t or_null)
                                               ->
                                               fun ~resp:(x622 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x619
                                                      [|(or_null_to_js
                                                           Error.t_to_js x620);(
                                                        Buffer.t_to_js x622)|]))))|])
        let (add_listener'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      session_data:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x630 : t) ->
            fun ~event:(x624 : [ `resumeSession ]) ->
              fun
                ~listener:(x625 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          session_data:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x630) "addListener"
                     [|((match x624 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x626 : Ojs.t) ->
                            fun (x627 : Ojs.t) ->
                              x625 ~sessionId:(Buffer.t_of_js x626)
                                ~callback:(fun ~err:(x628 : Error.t) ->
                                             fun
                                               ~session_data:(x629 :
                                                               Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x627
                                                    [|(Error.t_to_js x628);(
                                                      Buffer.t_to_js x629)|]))))|])
        let (add_listener''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:TLSSocket.t -> unit) -> t)
          =
          fun (x634 : t) ->
            fun ~event:(x631 : [ `secureConnection ]) ->
              fun ~listener:(x632 : tlsSocket:TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x634) "addListener"
                     [|((match x631 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x633 :
                                                                    Ojs.t) ->
                                                                    x632
                                                                    ~tlsSocket:(
                                                                    TLSSocket.t_of_js
                                                                    x633)))|])
        let (add_listener'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x639 : t) ->
            fun ~event:(x635 : [ `keylog ]) ->
              fun
                ~listener:(x636 :
                            line:Buffer.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x639) "addListener"
                     [|((match x635 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x637 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x638 :
                                                                    Ojs.t) ->
                                                                    x636
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x637)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x638)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x645 : t) ->
            fun ~event:(x640 : symbol or_string) ->
              fun ~args:(x641 : any list) ->
                Ojs.bool_of_js
                  (let x646 = t_to_js x645 in
                   Ojs.call (Ojs.get_prop_ascii x646 "emit") "apply"
                     [|x646;((let x642 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x642 "push"
                                   [|(or_string_to_js symbol_to_js x640)|]);
                              List.iter
                                (fun (x643 : any) ->
                                   ignore
                                     (Ojs.call x642 "push"
                                        [|(any_to_js x643)|])) x641;
                              x642))|])
        let (emit' :
          t ->
            event:[ `tlsClientError ] ->
              err:Error.t -> tls_socket:TLSSocket.t -> bool)
          =
          fun (x650 : t) ->
            fun ~event:(x647 : [ `tlsClientError ]) ->
              fun ~err:(x648 : Error.t) ->
                fun ~tls_socket:(x649 : TLSSocket.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x650) "emit"
                       [|((match x647 with
                           | `tlsClientError ->
                               Ojs.string_to_js "tlsClientError"));(Error.t_to_js
                                                                    x648);(
                         TLSSocket.t_to_js x649)|])
        let (emit'' :
          t ->
            event:[ `newSession ] ->
              session_id:Buffer.t ->
                session_data:Buffer.t ->
                  callback:(err:Error.t -> resp:Buffer.t -> unit) -> bool)
          =
          fun (x657 : t) ->
            fun ~event:(x651 : [ `newSession ]) ->
              fun ~session_id:(x652 : Buffer.t) ->
                fun ~session_data:(x653 : Buffer.t) ->
                  fun ~callback:(x654 : err:Error.t -> resp:Buffer.t -> unit)
                    ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x657) "emit"
                         [|((match x651 with
                             | `newSession -> Ojs.string_to_js "newSession"));(
                           Buffer.t_to_js x652);(Buffer.t_to_js x653);(
                           Ojs.fun_to_js 2
                             (fun (x655 : Ojs.t) ->
                                fun (x656 : Ojs.t) ->
                                  x654 ~err:(Error.t_of_js x655)
                                    ~resp:(Buffer.t_of_js x656)))|])
        let (emit''' :
          t ->
            event:[ `OCSPRequest ] ->
              certificate:Buffer.t ->
                issuer:Buffer.t ->
                  callback:(err:Error.t or_null -> resp:Buffer.t -> unit) ->
                    bool)
          =
          fun (x665 : t) ->
            fun ~event:(x658 : [ `OCSPRequest ]) ->
              fun ~certificate:(x659 : Buffer.t) ->
                fun ~issuer:(x660 : Buffer.t) ->
                  fun
                    ~callback:(x661 :
                                err:Error.t or_null -> resp:Buffer.t -> unit)
                    ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x665) "emit"
                         [|((match x658 with
                             | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                           Buffer.t_to_js x659);(Buffer.t_to_js x660);(
                           Ojs.fun_to_js 2
                             (fun (x662 : Ojs.t) ->
                                fun (x664 : Ojs.t) ->
                                  x661
                                    ~err:(or_null_of_js Error.t_of_js x662)
                                    ~resp:(Buffer.t_of_js x664)))|])
        let (emit'''' :
          t ->
            event:[ `resumeSession ] ->
              session_id:Buffer.t ->
                callback:(err:Error.t -> session_data:Buffer.t -> unit) ->
                  bool)
          =
          fun (x671 : t) ->
            fun ~event:(x666 : [ `resumeSession ]) ->
              fun ~session_id:(x667 : Buffer.t) ->
                fun
                  ~callback:(x668 :
                              err:Error.t -> session_data:Buffer.t -> unit)
                  ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x671) "emit"
                       [|((match x666 with
                           | `resumeSession ->
                               Ojs.string_to_js "resumeSession"));(Buffer.t_to_js
                                                                    x667);(
                         Ojs.fun_to_js 2
                           (fun (x669 : Ojs.t) ->
                              fun (x670 : Ojs.t) ->
                                x668 ~err:(Error.t_of_js x669)
                                  ~session_data:(Buffer.t_of_js x670)))|])
        let (emit''''' :
          t -> event:[ `secureConnection ] -> tls_socket:TLSSocket.t -> bool)
          =
          fun (x674 : t) ->
            fun ~event:(x672 : [ `secureConnection ]) ->
              fun ~tls_socket:(x673 : TLSSocket.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x674) "emit"
                     [|((match x672 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(TLSSocket.t_to_js
                                                                    x673)|])
        let (emit'''''' :
          t ->
            event:[ `keylog ] ->
              line:Buffer.t -> tls_socket:TLSSocket.t -> bool)
          =
          fun (x678 : t) ->
            fun ~event:(x675 : [ `keylog ]) ->
              fun ~line:(x676 : Buffer.t) ->
                fun ~tls_socket:(x677 : TLSSocket.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x678) "emit"
                       [|((match x675 with
                           | `keylog -> Ojs.string_to_js "keylog"));(
                         Buffer.t_to_js x676);(TLSSocket.t_to_js x677)|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x683 : t) ->
            fun ~event:(x679 : string) ->
              fun ~listener:(x680 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x683) "on"
                     [|(Ojs.string_to_js x679);(Ojs.fun_to_js_args
                                                  (fun (x681 : _) ->
                                                     x680
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x681 0)))|])
        let (on' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x688 : t) ->
            fun ~event:(x684 : [ `tlsClientError ]) ->
              fun
                ~listener:(x685 :
                            err:Error.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x688) "on"
                     [|((match x684 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x686 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x687 :
                                                                    Ojs.t) ->
                                                                    x685
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x686)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x687)))|])
        let (on'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          session_data:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x696 : t) ->
            fun ~event:(x689 : [ `newSession ]) ->
              fun
                ~listener:(x690 :
                            sessionId:Buffer.t ->
                              session_data:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x696) "on"
                     [|((match x689 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x691 : Ojs.t) ->
                            fun (x692 : Ojs.t) ->
                              fun (x693 : Ojs.t) ->
                                x690 ~sessionId:(Buffer.t_of_js x691)
                                  ~session_data:(Buffer.t_of_js x692)
                                  ~callback:(fun ~err:(x694 : Error.t) ->
                                               fun ~resp:(x695 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x693
                                                      [|(Error.t_to_js x694);(
                                                        Buffer.t_to_js x695)|]))))|])
        let (on''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x705 : t) ->
            fun ~event:(x697 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x698 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x705) "on"
                     [|((match x697 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x699 : Ojs.t) ->
                            fun (x700 : Ojs.t) ->
                              fun (x701 : Ojs.t) ->
                                x698 ~certificate:(Buffer.t_of_js x699)
                                  ~issuer:(Buffer.t_of_js x700)
                                  ~callback:(fun
                                               ~err:(x702 : Error.t or_null)
                                               ->
                                               fun ~resp:(x704 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x701
                                                      [|(or_null_to_js
                                                           Error.t_to_js x702);(
                                                        Buffer.t_to_js x704)|]))))|])
        let (on'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      session_data:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x712 : t) ->
            fun ~event:(x706 : [ `resumeSession ]) ->
              fun
                ~listener:(x707 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          session_data:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x712) "on"
                     [|((match x706 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x708 : Ojs.t) ->
                            fun (x709 : Ojs.t) ->
                              x707 ~sessionId:(Buffer.t_of_js x708)
                                ~callback:(fun ~err:(x710 : Error.t) ->
                                             fun
                                               ~session_data:(x711 :
                                                               Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x709
                                                    [|(Error.t_to_js x710);(
                                                      Buffer.t_to_js x711)|]))))|])
        let (on''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:TLSSocket.t -> unit) -> t)
          =
          fun (x716 : t) ->
            fun ~event:(x713 : [ `secureConnection ]) ->
              fun ~listener:(x714 : tlsSocket:TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x716) "on"
                     [|((match x713 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x715 :
                                                                    Ojs.t) ->
                                                                    x714
                                                                    ~tlsSocket:(
                                                                    TLSSocket.t_of_js
                                                                    x715)))|])
        let (on'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x721 : t) ->
            fun ~event:(x717 : [ `keylog ]) ->
              fun
                ~listener:(x718 :
                            line:Buffer.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x721) "on"
                     [|((match x717 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x719 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x720 :
                                                                    Ojs.t) ->
                                                                    x718
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x719)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x720)))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x726 : t) ->
            fun ~event:(x722 : string) ->
              fun ~listener:(x723 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x726) "once"
                     [|(Ojs.string_to_js x722);(Ojs.fun_to_js_args
                                                  (fun (x724 : _) ->
                                                     x723
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x724 0)))|])
        let (once' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x731 : t) ->
            fun ~event:(x727 : [ `tlsClientError ]) ->
              fun
                ~listener:(x728 :
                            err:Error.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x731) "once"
                     [|((match x727 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x729 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x730 :
                                                                    Ojs.t) ->
                                                                    x728
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x729)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x730)))|])
        let (once'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          session_data:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x739 : t) ->
            fun ~event:(x732 : [ `newSession ]) ->
              fun
                ~listener:(x733 :
                            sessionId:Buffer.t ->
                              session_data:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x739) "once"
                     [|((match x732 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x734 : Ojs.t) ->
                            fun (x735 : Ojs.t) ->
                              fun (x736 : Ojs.t) ->
                                x733 ~sessionId:(Buffer.t_of_js x734)
                                  ~session_data:(Buffer.t_of_js x735)
                                  ~callback:(fun ~err:(x737 : Error.t) ->
                                               fun ~resp:(x738 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x736
                                                      [|(Error.t_to_js x737);(
                                                        Buffer.t_to_js x738)|]))))|])
        let (once''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x748 : t) ->
            fun ~event:(x740 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x741 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x748) "once"
                     [|((match x740 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x742 : Ojs.t) ->
                            fun (x743 : Ojs.t) ->
                              fun (x744 : Ojs.t) ->
                                x741 ~certificate:(Buffer.t_of_js x742)
                                  ~issuer:(Buffer.t_of_js x743)
                                  ~callback:(fun
                                               ~err:(x745 : Error.t or_null)
                                               ->
                                               fun ~resp:(x747 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x744
                                                      [|(or_null_to_js
                                                           Error.t_to_js x745);(
                                                        Buffer.t_to_js x747)|]))))|])
        let (once'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      session_data:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x755 : t) ->
            fun ~event:(x749 : [ `resumeSession ]) ->
              fun
                ~listener:(x750 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          session_data:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x755) "once"
                     [|((match x749 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x751 : Ojs.t) ->
                            fun (x752 : Ojs.t) ->
                              x750 ~sessionId:(Buffer.t_of_js x751)
                                ~callback:(fun ~err:(x753 : Error.t) ->
                                             fun
                                               ~session_data:(x754 :
                                                               Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x752
                                                    [|(Error.t_to_js x753);(
                                                      Buffer.t_to_js x754)|]))))|])
        let (once''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:TLSSocket.t -> unit) -> t)
          =
          fun (x759 : t) ->
            fun ~event:(x756 : [ `secureConnection ]) ->
              fun ~listener:(x757 : tlsSocket:TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x759) "once"
                     [|((match x756 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x758 :
                                                                    Ojs.t) ->
                                                                    x757
                                                                    ~tlsSocket:(
                                                                    TLSSocket.t_of_js
                                                                    x758)))|])
        let (once'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x764 : t) ->
            fun ~event:(x760 : [ `keylog ]) ->
              fun
                ~listener:(x761 :
                            line:Buffer.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x764) "once"
                     [|((match x760 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x762 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x763 :
                                                                    Ojs.t) ->
                                                                    x761
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x762)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x763)))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x769 : t) ->
            fun ~event:(x765 : string) ->
              fun ~listener:(x766 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x769) "prependListener"
                     [|(Ojs.string_to_js x765);(Ojs.fun_to_js_args
                                                  (fun (x767 : _) ->
                                                     x766
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x767 0)))|])
        let (prepend_listener' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x774 : t) ->
            fun ~event:(x770 : [ `tlsClientError ]) ->
              fun
                ~listener:(x771 :
                            err:Error.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x774) "prependListener"
                     [|((match x770 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x772 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x773 :
                                                                    Ojs.t) ->
                                                                    x771
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x772)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x773)))|])
        let (prepend_listener'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          session_data:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x782 : t) ->
            fun ~event:(x775 : [ `newSession ]) ->
              fun
                ~listener:(x776 :
                            sessionId:Buffer.t ->
                              session_data:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x782) "prependListener"
                     [|((match x775 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x777 : Ojs.t) ->
                            fun (x778 : Ojs.t) ->
                              fun (x779 : Ojs.t) ->
                                x776 ~sessionId:(Buffer.t_of_js x777)
                                  ~session_data:(Buffer.t_of_js x778)
                                  ~callback:(fun ~err:(x780 : Error.t) ->
                                               fun ~resp:(x781 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x779
                                                      [|(Error.t_to_js x780);(
                                                        Buffer.t_to_js x781)|]))))|])
        let (prepend_listener''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x791 : t) ->
            fun ~event:(x783 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x784 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x791) "prependListener"
                     [|((match x783 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x785 : Ojs.t) ->
                            fun (x786 : Ojs.t) ->
                              fun (x787 : Ojs.t) ->
                                x784 ~certificate:(Buffer.t_of_js x785)
                                  ~issuer:(Buffer.t_of_js x786)
                                  ~callback:(fun
                                               ~err:(x788 : Error.t or_null)
                                               ->
                                               fun ~resp:(x790 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x787
                                                      [|(or_null_to_js
                                                           Error.t_to_js x788);(
                                                        Buffer.t_to_js x790)|]))))|])
        let (prepend_listener'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      session_data:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x798 : t) ->
            fun ~event:(x792 : [ `resumeSession ]) ->
              fun
                ~listener:(x793 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          session_data:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x798) "prependListener"
                     [|((match x792 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x794 : Ojs.t) ->
                            fun (x795 : Ojs.t) ->
                              x793 ~sessionId:(Buffer.t_of_js x794)
                                ~callback:(fun ~err:(x796 : Error.t) ->
                                             fun
                                               ~session_data:(x797 :
                                                               Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x795
                                                    [|(Error.t_to_js x796);(
                                                      Buffer.t_to_js x797)|]))))|])
        let (prepend_listener''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:TLSSocket.t -> unit) -> t)
          =
          fun (x802 : t) ->
            fun ~event:(x799 : [ `secureConnection ]) ->
              fun ~listener:(x800 : tlsSocket:TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x802) "prependListener"
                     [|((match x799 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x801 :
                                                                    Ojs.t) ->
                                                                    x800
                                                                    ~tlsSocket:(
                                                                    TLSSocket.t_of_js
                                                                    x801)))|])
        let (prepend_listener'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x807 : t) ->
            fun ~event:(x803 : [ `keylog ]) ->
              fun
                ~listener:(x804 :
                            line:Buffer.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x807) "prependListener"
                     [|((match x803 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x805 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x806 :
                                                                    Ojs.t) ->
                                                                    x804
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x805)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x806)))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x812 : t) ->
            fun ~event:(x808 : string) ->
              fun ~listener:(x809 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x812) "prependOnceListener"
                     [|(Ojs.string_to_js x808);(Ojs.fun_to_js_args
                                                  (fun (x810 : _) ->
                                                     x809
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x810 0)))|])
        let (prepend_once_listener' :
          t ->
            event:[ `tlsClientError ] ->
              listener:(err:Error.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x817 : t) ->
            fun ~event:(x813 : [ `tlsClientError ]) ->
              fun
                ~listener:(x814 :
                            err:Error.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x817) "prependOnceListener"
                     [|((match x813 with
                         | `tlsClientError ->
                             Ojs.string_to_js "tlsClientError"));(Ojs.fun_to_js
                                                                    2
                                                                    (
                                                                    fun
                                                                    (x815 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x816 :
                                                                    Ojs.t) ->
                                                                    x814
                                                                    ~err:(
                                                                    Error.t_of_js
                                                                    x815)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x816)))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `newSession ] ->
              listener:(sessionId:Buffer.t ->
                          session_data:Buffer.t ->
                            callback:(err:Error.t -> resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x825 : t) ->
            fun ~event:(x818 : [ `newSession ]) ->
              fun
                ~listener:(x819 :
                            sessionId:Buffer.t ->
                              session_data:Buffer.t ->
                                callback:(err:Error.t ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x825) "prependOnceListener"
                     [|((match x818 with
                         | `newSession -> Ojs.string_to_js "newSession"));(
                       Ojs.fun_to_js 3
                         (fun (x820 : Ojs.t) ->
                            fun (x821 : Ojs.t) ->
                              fun (x822 : Ojs.t) ->
                                x819 ~sessionId:(Buffer.t_of_js x820)
                                  ~session_data:(Buffer.t_of_js x821)
                                  ~callback:(fun ~err:(x823 : Error.t) ->
                                               fun ~resp:(x824 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x822
                                                      [|(Error.t_to_js x823);(
                                                        Buffer.t_to_js x824)|]))))|])
        let (prepend_once_listener''' :
          t ->
            event:[ `OCSPRequest ] ->
              listener:(certificate:Buffer.t ->
                          issuer:Buffer.t ->
                            callback:(err:Error.t or_null ->
                                        resp:Buffer.t -> unit)
                              -> unit)
                -> t)
          =
          fun (x834 : t) ->
            fun ~event:(x826 : [ `OCSPRequest ]) ->
              fun
                ~listener:(x827 :
                            certificate:Buffer.t ->
                              issuer:Buffer.t ->
                                callback:(err:Error.t or_null ->
                                            resp:Buffer.t -> unit)
                                  -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x834) "prependOnceListener"
                     [|((match x826 with
                         | `OCSPRequest -> Ojs.string_to_js "OCSPRequest"));(
                       Ojs.fun_to_js 3
                         (fun (x828 : Ojs.t) ->
                            fun (x829 : Ojs.t) ->
                              fun (x830 : Ojs.t) ->
                                x827 ~certificate:(Buffer.t_of_js x828)
                                  ~issuer:(Buffer.t_of_js x829)
                                  ~callback:(fun
                                               ~err:(x831 : Error.t or_null)
                                               ->
                                               fun ~resp:(x833 : Buffer.t) ->
                                                 ignore
                                                   (Ojs.apply x830
                                                      [|(or_null_to_js
                                                           Error.t_to_js x831);(
                                                        Buffer.t_to_js x833)|]))))|])
        let (prepend_once_listener'''' :
          t ->
            event:[ `resumeSession ] ->
              listener:(sessionId:Buffer.t ->
                          callback:(err:Error.t ->
                                      session_data:Buffer.t -> unit)
                            -> unit)
                -> t)
          =
          fun (x841 : t) ->
            fun ~event:(x835 : [ `resumeSession ]) ->
              fun
                ~listener:(x836 :
                            sessionId:Buffer.t ->
                              callback:(err:Error.t ->
                                          session_data:Buffer.t -> unit)
                                -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x841) "prependOnceListener"
                     [|((match x835 with
                         | `resumeSession -> Ojs.string_to_js "resumeSession"));(
                       Ojs.fun_to_js 2
                         (fun (x837 : Ojs.t) ->
                            fun (x838 : Ojs.t) ->
                              x836 ~sessionId:(Buffer.t_of_js x837)
                                ~callback:(fun ~err:(x839 : Error.t) ->
                                             fun
                                               ~session_data:(x840 :
                                                               Buffer.t)
                                               ->
                                               ignore
                                                 (Ojs.apply x838
                                                    [|(Error.t_to_js x839);(
                                                      Buffer.t_to_js x840)|]))))|])
        let (prepend_once_listener''''' :
          t ->
            event:[ `secureConnection ] ->
              listener:(tlsSocket:TLSSocket.t -> unit) -> t)
          =
          fun (x845 : t) ->
            fun ~event:(x842 : [ `secureConnection ]) ->
              fun ~listener:(x843 : tlsSocket:TLSSocket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x845) "prependOnceListener"
                     [|((match x842 with
                         | `secureConnection ->
                             Ojs.string_to_js "secureConnection"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x844 :
                                                                    Ojs.t) ->
                                                                    x843
                                                                    ~tlsSocket:(
                                                                    TLSSocket.t_of_js
                                                                    x844)))|])
        let (prepend_once_listener'''''' :
          t ->
            event:[ `keylog ] ->
              listener:(line:Buffer.t -> tls_socket:TLSSocket.t -> unit) -> t)
          =
          fun (x850 : t) ->
            fun ~event:(x846 : [ `keylog ]) ->
              fun
                ~listener:(x847 :
                            line:Buffer.t -> tls_socket:TLSSocket.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x850) "prependOnceListener"
                     [|((match x846 with
                         | `keylog -> Ojs.string_to_js "keylog"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x848 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x849 :
                                                                    Ojs.t) ->
                                                                    x847
                                                                    ~line:(
                                                                    Buffer.t_of_js
                                                                    x848)
                                                                    ~tls_socket:(
                                                                    TLSSocket.t_of_js
                                                                    x849)))|])
      end
    let (check_server_identity :
      host:string -> cert:PeerCertificate.t -> Error.t or_undefined) =
      fun ~host:(x851 : string) ->
        fun ~cert:(x852 : PeerCertificate.t) ->
          or_undefined_of_js Error.t_of_js
            (Ojs.call Import.tls "checkServerIdentity"
               [|(Ojs.string_to_js x851);(PeerCertificate.t_to_js x852)|])
    let (create_server :
      ?secure_connection_listener:(socket:TLSSocket.t -> unit) ->
        unit -> Server.t)
      =
      fun
        ?secure_connection_listener:(x854 :
                                      (socket:TLSSocket.t -> unit) option)
        ->
        fun () ->
          Server.t_of_js
            (let x858 = Import.tls in
             Ojs.call (Ojs.get_prop_ascii x858 "createServer") "apply"
               [|x858;((let x855 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x854 with
                         | Some x856 ->
                             ignore
                               (Ojs.call x855 "push"
                                  [|(Ojs.fun_to_js 1
                                       (fun (x857 : Ojs.t) ->
                                          x856
                                            ~socket:(TLSSocket.t_of_js x857)))|])
                         | None -> ());
                        x855))|])
    let (create_server :
      options:TlsOptions.t ->
        ?secure_connection_listener:(socket:TLSSocket.t -> unit) ->
          unit -> Server.t)
      =
      fun ~options:(x859 : TlsOptions.t) ->
        fun
          ?secure_connection_listener:(x860 :
                                        (socket:TLSSocket.t -> unit) option)
          ->
          fun () ->
            Server.t_of_js
              (let x864 = Import.tls in
               Ojs.call (Ojs.get_prop_ascii x864 "createServer") "apply"
                 [|x864;((let x861 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x861 "push"
                               [|(TlsOptions.t_to_js x859)|]);
                          (match x860 with
                           | Some x862 ->
                               ignore
                                 (Ojs.call x861 "push"
                                    [|(Ojs.fun_to_js 1
                                         (fun (x863 : Ojs.t) ->
                                            x862
                                              ~socket:(TLSSocket.t_of_js x863)))|])
                           | None -> ());
                          x861))|])
    let (connect :
      options:ConnectionOptions.t ->
        ?secure_connect_listener:(unit -> unit) -> unit -> TLSSocket.t)
      =
      fun ~options:(x865 : ConnectionOptions.t) ->
        fun ?secure_connect_listener:(x866 : (unit -> unit) option) ->
          fun () ->
            TLSSocket.t_of_js
              (let x869 = Import.tls in
               Ojs.call (Ojs.get_prop_ascii x869 "connect") "apply"
                 [|x869;((let x867 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x867 "push"
                               [|(ConnectionOptions.t_to_js x865)|]);
                          (match x866 with
                           | Some x868 ->
                               ignore
                                 (Ojs.call x867 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x868 ()))|])
                           | None -> ());
                          x867))|])
    let (connect :
      port:int ->
        ?host:string ->
          ?options:ConnectionOptions.t ->
            ?secure_connect_listener:(unit -> unit) -> unit -> TLSSocket.t)
      =
      fun ~port:(x870 : int) ->
        fun ?host:(x871 : string option) ->
          fun ?options:(x872 : ConnectionOptions.t option) ->
            fun ?secure_connect_listener:(x873 : (unit -> unit) option) ->
              fun () ->
                TLSSocket.t_of_js
                  (let x878 = Import.tls in
                   Ojs.call (Ojs.get_prop_ascii x878 "connect") "apply"
                     [|x878;((let x874 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x874 "push"
                                   [|(Ojs.int_to_js x870)|]);
                              (match x871 with
                               | Some x877 ->
                                   ignore
                                     (Ojs.call x874 "push"
                                        [|(Ojs.string_to_js x877)|])
                               | None -> ());
                              (match x872 with
                               | Some x876 ->
                                   ignore
                                     (Ojs.call x874 "push"
                                        [|(ConnectionOptions.t_to_js x876)|])
                               | None -> ());
                              (match x873 with
                               | Some x875 ->
                                   ignore
                                     (Ojs.call x874 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x875 ()))|])
                               | None -> ());
                              x874))|])
    let (connect :
      port:int ->
        ?options:ConnectionOptions.t ->
          ?secure_connect_listener:(unit -> unit) -> unit -> TLSSocket.t)
      =
      fun ~port:(x879 : int) ->
        fun ?options:(x880 : ConnectionOptions.t option) ->
          fun ?secure_connect_listener:(x881 : (unit -> unit) option) ->
            fun () ->
              TLSSocket.t_of_js
                (let x885 = Import.tls in
                 Ojs.call (Ojs.get_prop_ascii x885 "connect") "apply"
                   [|x885;((let x882 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x882 "push" [|(Ojs.int_to_js x879)|]);
                            (match x880 with
                             | Some x884 ->
                                 ignore
                                   (Ojs.call x882 "push"
                                      [|(ConnectionOptions.t_to_js x884)|])
                             | None -> ());
                            (match x881 with
                             | Some x883 ->
                                 ignore
                                   (Ojs.call x882 "push"
                                      [|(Ojs.fun_to_js 1 (fun _ -> x883 ()))|])
                             | None -> ());
                            x882))|])
    let (create_secure_pair :
      ?credentials:SecureContext.t ->
        ?is_server:bool ->
          ?request_cert:bool ->
            ?reject_unauthorized:bool -> unit -> SecurePair.t)
      =
      fun ?credentials:(x886 : SecureContext.t option) ->
        fun ?is_server:(x887 : bool option) ->
          fun ?request_cert:(x888 : bool option) ->
            fun ?reject_unauthorized:(x889 : bool option) ->
              fun () ->
                SecurePair.t_of_js
                  (let x895 = Import.tls in
                   Ojs.call (Ojs.get_prop_ascii x895 "createSecurePair")
                     "apply"
                     [|x895;((let x890 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x886 with
                               | Some x894 ->
                                   ignore
                                     (Ojs.call x890 "push"
                                        [|(SecureContext.t_to_js x894)|])
                               | None -> ());
                              (match x887 with
                               | Some x893 ->
                                   ignore
                                     (Ojs.call x890 "push"
                                        [|(Ojs.bool_to_js x893)|])
                               | None -> ());
                              (match x888 with
                               | Some x892 ->
                                   ignore
                                     (Ojs.call x890 "push"
                                        [|(Ojs.bool_to_js x892)|])
                               | None -> ());
                              (match x889 with
                               | Some x891 ->
                                   ignore
                                     (Ojs.call x890 "push"
                                        [|(Ojs.bool_to_js x891)|])
                               | None -> ());
                              x890))|])
    let (create_secure_context :
      ?options:SecureContextOptions.t -> unit -> SecureContext.t) =
      fun ?options:(x896 : SecureContextOptions.t option) ->
        fun () ->
          SecureContext.t_of_js
            (let x899 = Import.tls in
             Ojs.call (Ojs.get_prop_ascii x899 "createSecureContext") "apply"
               [|x899;((let x897 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x896 with
                         | Some x898 ->
                             ignore
                               (Ojs.call x897 "push"
                                  [|(SecureContextOptions.t_to_js x898)|])
                         | None -> ());
                        x897))|])
    let (get_ciphers : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.tls "getCiphers" [||])
    let (default_ecdh_curve : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.tls "DEFAULT_ECDH_CURVE")
    let (default_max_version : SecureVersion.t) =
      SecureVersion.t_of_js
        (Ojs.get_prop_ascii Import.tls "DEFAULT_MAX_VERSION")
    let (default_min_version : SecureVersion.t) =
      SecureVersion.t_of_js
        (Ojs.get_prop_ascii Import.tls "DEFAULT_MIN_VERSION")
    let (root_certificates : string list) =
      Ojs.list_of_js Ojs.string_of_js
        (Ojs.get_prop_ascii Import.tls "rootCertificates")
  end
