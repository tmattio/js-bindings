[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_MAX_LENGTH : t -> int) =
      fun (x3 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x3) "MAX_LENGTH")
    let (set_MAX_LENGTH : t -> int -> unit) =
      fun (x4 : t) ->
        fun (x5 : int) ->
          Ojs.set_prop_ascii (t_to_js x4) "MAX_LENGTH" (Ojs.int_to_js x5)
    let (get_MAX_STRING_LENGTH : t -> int) =
      fun (x6 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x6) "MAX_STRING_LENGTH")
    let (set_MAX_STRING_LENGTH : t -> int -> unit) =
      fun (x7 : t) ->
        fun (x8 : int) ->
          Ojs.set_prop_ascii (t_to_js x7) "MAX_STRING_LENGTH"
            (Ojs.int_to_js x8)
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x10 : Ojs.t) -> x10
    and t_to_js : t -> Ojs.t = fun (x9 : Ojs.t) -> x9
    let (create : t -> size:int -> Buffer.t) =
      fun (x12 : t) ->
        fun ~size:(x11 : int) ->
          Buffer.t_of_js (Ojs.new_obj (t_to_js x12) [|(Ojs.int_to_js x11)|])
    let (get_prototype : t -> Buffer.t) =
      fun (x13 : t) ->
        Buffer.t_of_js (Ojs.get_prop_ascii (t_to_js x13) "prototype")
    let (set_prototype : t -> Buffer.t -> unit) =
      fun (x14 : t) ->
        fun (x15 : Buffer.t) ->
          Ojs.set_prop_ascii (t_to_js x14) "prototype" (Buffer.t_to_js x15)
  end
module Buffer =
  struct
    let (inspect_max_bytes : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.buffer "INSPECT_MAX_BYTES")
    let (kMaxLength : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.buffer "kMaxLength")
    let (kStringMaxLength : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.buffer "kStringMaxLength")
    let (constants : AnonymousInterface0.t) =
      AnonymousInterface0.t_of_js
        (Ojs.get_prop_ascii Import.buffer "constants")
    let (buffType : any) =
      any_of_js (Ojs.get_prop_ascii Import.buffer "BuffType")
    module TranscodeEncoding =
      struct
        type t =
          [ `ascii  | `binary  | `latin1  | `ucs2  | `utf16le  | `utf8 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x17 : Ojs.t) ->
            let x18 = x17 in
            match Ojs.string_of_js x18 with
            | "ascii" -> `ascii
            | "binary" -> `binary
            | "latin1" -> `latin1
            | "ucs2" -> `ucs2
            | "utf16le" -> `utf16le
            | "utf8" -> `utf8
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x16 :
              [ `ascii  | `binary  | `latin1  | `ucs2  | `utf16le  | `utf8 ])
            ->
            match x16 with
            | `ascii -> Ojs.string_to_js "ascii"
            | `binary -> Ojs.string_to_js "binary"
            | `latin1 -> Ojs.string_to_js "latin1"
            | `ucs2 -> Ojs.string_to_js "ucs2"
            | `utf16le -> Ojs.string_to_js "utf16le"
            | `utf8 -> Ojs.string_to_js "utf8"
      end
    let (transcode :
      source:Uint8Array.t ->
        fromEnc:TranscodeEncoding.t -> toEnc:TranscodeEncoding.t -> Buffer.t)
      =
      fun ~source:(x19 : Uint8Array.t) ->
        fun ~fromEnc:(x20 : TranscodeEncoding.t) ->
          fun ~toEnc:(x21 : TranscodeEncoding.t) ->
            Buffer.t_of_js
              (Ojs.call Import.buffer "transcode"
                 [|(Uint8Array.t_to_js x19);(TranscodeEncoding.t_to_js x20);(
                   TranscodeEncoding.t_to_js x21)|])
    let (slowBuffer : AnonymousInterface1.t) =
      AnonymousInterface1.t_of_js
        (Ojs.get_prop_ascii Import.buffer "SlowBuffer")
  end
