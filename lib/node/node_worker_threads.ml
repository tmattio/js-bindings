[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_message : t -> any) =
      fun (x3 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x3) "message")
    let (set_message : t -> any -> unit) =
      fun (x4 : t) ->
        fun (x5 : any) ->
          Ojs.set_prop_ascii (t_to_js x4) "message" (any_to_js x5)
  end
module Worker_threads =
  struct
    module MessagePort =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x7 : Ojs.t) -> x7
        and t_to_js : t -> Ojs.t = fun (x6 : Ojs.t) -> x6
        let (close : t -> unit) =
          fun (x8 : t) -> ignore (Ojs.call (t_to_js x8) "close" [||])
        let (post_message : t -> value:any -> unit -> unit) =
          fun (x10 : t) ->
            fun ~value:(x9 : any) ->
              fun () ->
                ignore
                  (Ojs.call (t_to_js x10) "postMessage" [|(any_to_js x9)|])
        let (ref : t -> unit) =
          fun (x11 : t) -> ignore (Ojs.call (t_to_js x11) "ref" [||])
        let (unref : t -> unit) =
          fun (x12 : t) -> ignore (Ojs.call (t_to_js x12) "unref" [||])
        let (start : t -> unit) =
          fun (x13 : t) -> ignore (Ojs.call (t_to_js x13) "start" [||])
        let (add_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x16 : t) ->
            fun ~event:(x14 : [ `close ]) ->
              fun ~listener:(x15 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x16) "addListener"
                     [|((match x14 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x15 ()))|])
        let (add_listener' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x20 : t) ->
            fun ~event:(x17 : [ `message ]) ->
              fun ~listener:(x18 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x20) "addListener"
                     [|((match x17 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x19 : Ojs.t) -> x18 ~value:(any_of_js x19)))|])
        let (add_listener'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x24 : t) ->
            fun ~event:(x21 : [ `messageerror ]) ->
              fun ~listener:(x22 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x24) "addListener"
                     [|((match x21 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x23 : Ojs.t) -> x22 ~error:(Error.t_of_js x23)))|])
        let (add_listener''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x30 : t) ->
            fun ~event:(x25 : symbol or_string) ->
              fun ~listener:(x27 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x30) "addListener"
                     [|(or_string_to_js symbol_to_js x25);(Ojs.fun_to_js_args
                                                             (fun (x28 : _)
                                                                ->
                                                                x27
                                                                  ~args:(
                                                                  Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x28 0)))|])
        let (emit : t -> event:[ `close ] -> bool) =
          fun (x32 : t) ->
            fun ~event:(x31 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x32) "emit"
                   [|((match x31 with | `close -> Ojs.string_to_js "close"))|])
        let (emit' : t -> event:[ `message ] -> value:any -> bool) =
          fun (x35 : t) ->
            fun ~event:(x33 : [ `message ]) ->
              fun ~value:(x34 : any) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x35) "emit"
                     [|((match x33 with
                         | `message -> Ojs.string_to_js "message"));(
                       any_to_js x34)|])
        let (emit'' : t -> event:[ `messageerror ] -> error:Error.t -> bool)
          =
          fun (x38 : t) ->
            fun ~event:(x36 : [ `messageerror ]) ->
              fun ~error:(x37 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x38) "emit"
                     [|((match x36 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Error.t_to_js x37)|])
        let (emit''' : t -> event:symbol or_string -> args:any list -> bool)
          =
          fun (x44 : t) ->
            fun ~event:(x39 : symbol or_string) ->
              fun ~args:(x40 : any list) ->
                Ojs.bool_of_js
                  (let x45 = t_to_js x44 in
                   Ojs.call (Ojs.get_prop_ascii x45 "emit") "apply"
                     [|x45;((let x41 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x41 "push"
                                  [|(or_string_to_js symbol_to_js x39)|]);
                             List.iter
                               (fun (x42 : any) ->
                                  ignore
                                    (Ojs.call x41 "push" [|(any_to_js x42)|]))
                               x40;
                             x41))|])
        let (on : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x48 : t) ->
            fun ~event:(x46 : [ `close ]) ->
              fun ~listener:(x47 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x48) "on"
                     [|((match x46 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x47 ()))|])
        let (on' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x52 : t) ->
            fun ~event:(x49 : [ `message ]) ->
              fun ~listener:(x50 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x52) "on"
                     [|((match x49 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x51 : Ojs.t) -> x50 ~value:(any_of_js x51)))|])
        let (on'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x56 : t) ->
            fun ~event:(x53 : [ `messageerror ]) ->
              fun ~listener:(x54 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x56) "on"
                     [|((match x53 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x55 : Ojs.t) -> x54 ~error:(Error.t_of_js x55)))|])
        let (on''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x62 : t) ->
            fun ~event:(x57 : symbol or_string) ->
              fun ~listener:(x59 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x62) "on"
                     [|(or_string_to_js symbol_to_js x57);(Ojs.fun_to_js_args
                                                             (fun (x60 : _)
                                                                ->
                                                                x59
                                                                  ~args:(
                                                                  Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x60 0)))|])
        let (once : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x65 : t) ->
            fun ~event:(x63 : [ `close ]) ->
              fun ~listener:(x64 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x65) "once"
                     [|((match x63 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x64 ()))|])
        let (once' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x69 : t) ->
            fun ~event:(x66 : [ `message ]) ->
              fun ~listener:(x67 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x69) "once"
                     [|((match x66 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x68 : Ojs.t) -> x67 ~value:(any_of_js x68)))|])
        let (once'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x73 : t) ->
            fun ~event:(x70 : [ `messageerror ]) ->
              fun ~listener:(x71 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x73) "once"
                     [|((match x70 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x72 : Ojs.t) -> x71 ~error:(Error.t_of_js x72)))|])
        let (once''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x79 : t) ->
            fun ~event:(x74 : symbol or_string) ->
              fun ~listener:(x76 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x79) "once"
                     [|(or_string_to_js symbol_to_js x74);(Ojs.fun_to_js_args
                                                             (fun (x77 : _)
                                                                ->
                                                                x76
                                                                  ~args:(
                                                                  Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x77 0)))|])
        let (prepend_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x82 : t) ->
            fun ~event:(x80 : [ `close ]) ->
              fun ~listener:(x81 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x82) "prependListener"
                     [|((match x80 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x81 ()))|])
        let (prepend_listener' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x86 : t) ->
            fun ~event:(x83 : [ `message ]) ->
              fun ~listener:(x84 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x86) "prependListener"
                     [|((match x83 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x85 : Ojs.t) -> x84 ~value:(any_of_js x85)))|])
        let (prepend_listener'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x90 : t) ->
            fun ~event:(x87 : [ `messageerror ]) ->
              fun ~listener:(x88 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x90) "prependListener"
                     [|((match x87 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x89 : Ojs.t) -> x88 ~error:(Error.t_of_js x89)))|])
        let (prepend_listener''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x96 : t) ->
            fun ~event:(x91 : symbol or_string) ->
              fun ~listener:(x93 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x96) "prependListener"
                     [|(or_string_to_js symbol_to_js x91);(Ojs.fun_to_js_args
                                                             (fun (x94 : _)
                                                                ->
                                                                x93
                                                                  ~args:(
                                                                  Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x94 0)))|])
        let (prepend_once_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x99 : t) ->
            fun ~event:(x97 : [ `close ]) ->
              fun ~listener:(x98 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x99) "prependOnceListener"
                     [|((match x97 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x98 ()))|])
        let (prepend_once_listener' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x103 : t) ->
            fun ~event:(x100 : [ `message ]) ->
              fun ~listener:(x101 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x103) "prependOnceListener"
                     [|((match x100 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x102 : Ojs.t) -> x101 ~value:(any_of_js x102)))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x107 : t) ->
            fun ~event:(x104 : [ `messageerror ]) ->
              fun ~listener:(x105 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x107) "prependOnceListener"
                     [|((match x104 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x106 : Ojs.t) ->
                            x105 ~error:(Error.t_of_js x106)))|])
        let (prepend_once_listener''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x113 : t) ->
            fun ~event:(x108 : symbol or_string) ->
              fun ~listener:(x110 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x113) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x108);(Ojs.fun_to_js_args
                                                              (fun (x111 : _)
                                                                 ->
                                                                 x110
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x111 0)))|])
        let (remove_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x116 : t) ->
            fun ~event:(x114 : [ `close ]) ->
              fun ~listener:(x115 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x116) "removeListener"
                     [|((match x114 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x115 ()))|])
        let (remove_listener' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x120 : t) ->
            fun ~event:(x117 : [ `message ]) ->
              fun ~listener:(x118 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x120) "removeListener"
                     [|((match x117 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x119 : Ojs.t) -> x118 ~value:(any_of_js x119)))|])
        let (remove_listener'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x124 : t) ->
            fun ~event:(x121 : [ `messageerror ]) ->
              fun ~listener:(x122 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x124) "removeListener"
                     [|((match x121 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x123 : Ojs.t) ->
                            x122 ~error:(Error.t_of_js x123)))|])
        let (remove_listener''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x130 : t) ->
            fun ~event:(x125 : symbol or_string) ->
              fun ~listener:(x127 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x130) "removeListener"
                     [|(or_string_to_js symbol_to_js x125);(Ojs.fun_to_js_args
                                                              (fun (x128 : _)
                                                                 ->
                                                                 x127
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x128 0)))|])
        let (off : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x133 : t) ->
            fun ~event:(x131 : [ `close ]) ->
              fun ~listener:(x132 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x133) "off"
                     [|((match x131 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x132 ()))|])
        let (off' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x137 : t) ->
            fun ~event:(x134 : [ `message ]) ->
              fun ~listener:(x135 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x137) "off"
                     [|((match x134 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x136 : Ojs.t) -> x135 ~value:(any_of_js x136)))|])
        let (off'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x141 : t) ->
            fun ~event:(x138 : [ `messageerror ]) ->
              fun ~listener:(x139 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x141) "off"
                     [|((match x138 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x140 : Ojs.t) ->
                            x139 ~error:(Error.t_of_js x140)))|])
        let (off''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x147 : t) ->
            fun ~event:(x142 : symbol or_string) ->
              fun ~listener:(x144 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x147) "off"
                     [|(or_string_to_js symbol_to_js x142);(Ojs.fun_to_js_args
                                                              (fun (x145 : _)
                                                                 ->
                                                                 x144
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x145 0)))|])
      end
    module MessageChannel =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x149 : Ojs.t) -> x149
        and t_to_js : t -> Ojs.t = fun (x148 : Ojs.t) -> x148
        let (get_port1 : t -> MessagePort.t) =
          fun (x150 : t) ->
            MessagePort.t_of_js (Ojs.get_prop_ascii (t_to_js x150) "port1")
        let (get_port2 : t -> MessagePort.t) =
          fun (x151 : t) ->
            MessagePort.t_of_js (Ojs.get_prop_ascii (t_to_js x151) "port2")
      end
    module TransferListItem =
      struct
        type t =
          (ArrayBuffer.t, Node_fs_promises.Fs_promises.FileHandle.t,
            MessagePort.t) union3
        let rec t_of_js : Ojs.t -> t =
          fun (x156 : Ojs.t) ->
            union3_of_js ArrayBuffer.t_of_js
              Node_fs_promises.Fs_promises.FileHandle.t_of_js
              MessagePort.t_of_js x156
        and t_to_js : t -> Ojs.t =
          fun
            (x152 :
              (ArrayBuffer.t, Node_fs_promises.Fs_promises.FileHandle.t,
                MessagePort.t) union3)
            ->
            union3_to_js ArrayBuffer.t_to_js
              Node_fs_promises.Fs_promises.FileHandle.t_to_js
              MessagePort.t_to_js x152
      end
    module ResourceLimits =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x161 : Ojs.t) -> x161
        and t_to_js : t -> Ojs.t = fun (x160 : Ojs.t) -> x160
        let (get_max_young_generation_size_mb : t -> int) =
          fun (x162 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x162) "maxYoungGenerationSizeMb")
        let (set_max_young_generation_size_mb : t -> int -> unit) =
          fun (x163 : t) ->
            fun (x164 : int) ->
              Ojs.set_prop_ascii (t_to_js x163) "maxYoungGenerationSizeMb"
                (Ojs.int_to_js x164)
        let (get_max_old_generation_size_mb : t -> int) =
          fun (x165 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x165) "maxOldGenerationSizeMb")
        let (set_max_old_generation_size_mb : t -> int -> unit) =
          fun (x166 : t) ->
            fun (x167 : int) ->
              Ojs.set_prop_ascii (t_to_js x166) "maxOldGenerationSizeMb"
                (Ojs.int_to_js x167)
        let (get_code_range_size_mb : t -> int) =
          fun (x168 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x168) "codeRangeSizeMb")
        let (set_code_range_size_mb : t -> int -> unit) =
          fun (x169 : t) ->
            fun (x170 : int) ->
              Ojs.set_prop_ascii (t_to_js x169) "codeRangeSizeMb"
                (Ojs.int_to_js x170)
        let (get_stack_size_mb : t -> int) =
          fun (x171 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x171) "stackSizeMb")
        let (set_stack_size_mb : t -> int -> unit) =
          fun (x172 : t) ->
            fun (x173 : int) ->
              Ojs.set_prop_ascii (t_to_js x172) "stackSizeMb"
                (Ojs.int_to_js x173)
      end
    module WorkerOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x175 : Ojs.t) -> x175
        and t_to_js : t -> Ojs.t = fun (x174 : Ojs.t) -> x174
        let (get_argv : t -> any list) =
          fun (x176 : t) ->
            Ojs.list_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x176) "argv")
        let (set_argv : t -> any list -> unit) =
          fun (x178 : t) ->
            fun (x179 : any list) ->
              Ojs.set_prop_ascii (t_to_js x178) "argv"
                (Ojs.list_to_js any_to_js x179)
        let (get_env : t -> (string Dict.t, any) union2) =
          fun (x181 : t) ->
            union2_of_js
              (fun (x182 : Ojs.t) -> Dict.t_of_js Ojs.string_of_js x182)
              any_of_js (Ojs.get_prop_ascii (t_to_js x181) "env")
        let (set_env : t -> (string Dict.t, any) union2 -> unit) =
          fun (x185 : t) ->
            fun (x186 : (string Dict.t, any) union2) ->
              Ojs.set_prop_ascii (t_to_js x185) "env"
                (union2_to_js
                   (fun (x187 : string Dict.t) ->
                      Dict.t_to_js Ojs.string_to_js x187) any_to_js x186)
        let (get_eval : t -> bool) =
          fun (x190 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x190) "eval")
        let (set_eval : t -> bool -> unit) =
          fun (x191 : t) ->
            fun (x192 : bool) ->
              Ojs.set_prop_ascii (t_to_js x191) "eval" (Ojs.bool_to_js x192)
        let (get_worker_data : t -> any) =
          fun (x193 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x193) "workerData")
        let (set_worker_data : t -> any -> unit) =
          fun (x194 : t) ->
            fun (x195 : any) ->
              Ojs.set_prop_ascii (t_to_js x194) "workerData" (any_to_js x195)
        let (get_stdin : t -> bool) =
          fun (x196 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x196) "stdin")
        let (set_stdin : t -> bool -> unit) =
          fun (x197 : t) ->
            fun (x198 : bool) ->
              Ojs.set_prop_ascii (t_to_js x197) "stdin" (Ojs.bool_to_js x198)
        let (get_stdout : t -> bool) =
          fun (x199 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x199) "stdout")
        let (set_stdout : t -> bool -> unit) =
          fun (x200 : t) ->
            fun (x201 : bool) ->
              Ojs.set_prop_ascii (t_to_js x200) "stdout"
                (Ojs.bool_to_js x201)
        let (get_stderr : t -> bool) =
          fun (x202 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x202) "stderr")
        let (set_stderr : t -> bool -> unit) =
          fun (x203 : t) ->
            fun (x204 : bool) ->
              Ojs.set_prop_ascii (t_to_js x203) "stderr"
                (Ojs.bool_to_js x204)
        let (get_exec_argv : t -> string list) =
          fun (x205 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x205) "execArgv")
        let (set_exec_argv : t -> string list -> unit) =
          fun (x207 : t) ->
            fun (x208 : string list) ->
              Ojs.set_prop_ascii (t_to_js x207) "execArgv"
                (Ojs.list_to_js Ojs.string_to_js x208)
        let (get_resource_limits : t -> ResourceLimits.t) =
          fun (x210 : t) ->
            ResourceLimits.t_of_js
              (Ojs.get_prop_ascii (t_to_js x210) "resourceLimits")
        let (set_resource_limits : t -> ResourceLimits.t -> unit) =
          fun (x211 : t) ->
            fun (x212 : ResourceLimits.t) ->
              Ojs.set_prop_ascii (t_to_js x211) "resourceLimits"
                (ResourceLimits.t_to_js x212)
        let (get_transfer_list : t -> TransferListItem.t list) =
          fun (x213 : t) ->
            Ojs.list_of_js TransferListItem.t_of_js
              (Ojs.get_prop_ascii (t_to_js x213) "transferList")
        let (set_transfer_list : t -> TransferListItem.t list -> unit) =
          fun (x215 : t) ->
            fun (x216 : TransferListItem.t list) ->
              Ojs.set_prop_ascii (t_to_js x215) "transferList"
                (Ojs.list_to_js TransferListItem.t_to_js x216)
        let (get_track_unmanaged_fds : t -> bool) =
          fun (x218 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x218) "trackUnmanagedFds")
        let (set_track_unmanaged_fds : t -> bool -> unit) =
          fun (x219 : t) ->
            fun (x220 : bool) ->
              Ojs.set_prop_ascii (t_to_js x219) "trackUnmanagedFds"
                (Ojs.bool_to_js x220)
      end
    module Worker =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x222 : Ojs.t) -> x222
        and t_to_js : t -> Ojs.t = fun (x221 : Ojs.t) -> x221
        let (get_stdin : t -> Node_stream.Stream.Writable.t or_null) =
          fun (x223 : t) ->
            or_null_of_js Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x223) "stdin")
        let (get_stdout : t -> Node_stream.Stream.Writable.t) =
          fun (x225 : t) ->
            Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x225) "stdout")
        let (get_stderr : t -> Node_stream.Stream.Writable.t) =
          fun (x226 : t) ->
            Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x226) "stderr")
        let (get_thread_id : t -> int) =
          fun (x227 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x227) "threadId")
        let (get_resource_limits : t -> ResourceLimits.t) =
          fun (x228 : t) ->
            ResourceLimits.t_of_js
              (Ojs.get_prop_ascii (t_to_js x228) "resourceLimits")
        let (create :
          filename:Node_url.Url.Url.t or_string ->
            ?options:WorkerOptions.t -> unit -> t)
          =
          fun ~filename:(x229 : Node_url.Url.Url.t or_string) ->
            fun ?options:(x230 : WorkerOptions.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Import.worker_threads "Worker")
                     (let x231 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x231 "push"
                           [|(or_string_to_js Node_url.Url.Url.t_to_js x229)|]);
                      (match x230 with
                       | Some x232 ->
                           ignore
                             (Ojs.call x231 "push"
                                [|(WorkerOptions.t_to_js x232)|])
                       | None -> ());
                      x231))
        let (post_message :
          t ->
            value:any ->
              ?transfer_list:TransferListItem.t list -> unit -> unit)
          =
          fun (x239 : t) ->
            fun ~value:(x234 : any) ->
              fun ?transfer_list:(x235 : TransferListItem.t list option) ->
                fun () ->
                  ignore
                    (let x240 = t_to_js x239 in
                     Ojs.call (Ojs.get_prop_ascii x240 "postMessage") "apply"
                       [|x240;((let x236 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x236 "push" [|(any_to_js x234)|]);
                                (match x235 with
                                 | Some x237 ->
                                     ignore
                                       (Ojs.call x236 "push"
                                          [|(Ojs.list_to_js
                                               TransferListItem.t_to_js x237)|])
                                 | None -> ());
                                x236))|])
        let (ref : t -> unit) =
          fun (x241 : t) -> ignore (Ojs.call (t_to_js x241) "ref" [||])
        let (unref : t -> unit) =
          fun (x242 : t) -> ignore (Ojs.call (t_to_js x242) "unref" [||])
        let (terminate : t -> int Promise.t) =
          fun (x243 : t) ->
            Promise.t_of_js Ojs.int_of_js
              (Ojs.call (t_to_js x243) "terminate" [||])
        let (get_heap_snapshot :
          t -> Node_stream.Stream.Writable.t Promise.t) =
          fun (x245 : t) ->
            Promise.t_of_js Node_stream.Stream.Writable.t_of_js
              (Ojs.call (t_to_js x245) "getHeapSnapshot" [||])
        let (add_listener :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x250 : t) ->
            fun ~event:(x247 : [ `error ]) ->
              fun ~listener:(x248 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x250) "addListener"
                     [|((match x247 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x249 : Ojs.t) ->
                            x248 ~err:(Error.t_of_js x249)))|])
        let (add_listener' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x254 : t) ->
            fun ~event:(x251 : [ `exit ]) ->
              fun ~listener:(x252 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x254) "addListener"
                     [|((match x251 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x253 : Ojs.t) ->
                            x252 ~exitCode:(Ojs.int_of_js x253)))|])
        let (add_listener'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x258 : t) ->
            fun ~event:(x255 : [ `message ]) ->
              fun ~listener:(x256 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x258) "addListener"
                     [|((match x255 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x257 : Ojs.t) -> x256 ~value:(any_of_js x257)))|])
        let (add_listener''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x262 : t) ->
            fun ~event:(x259 : [ `messageerror ]) ->
              fun ~listener:(x260 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x262) "addListener"
                     [|((match x259 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x261 : Ojs.t) ->
                            x260 ~error:(Error.t_of_js x261)))|])
        let (add_listener'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x265 : t) ->
            fun ~event:(x263 : [ `online ]) ->
              fun ~listener:(x264 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x265) "addListener"
                     [|((match x263 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x264 ()))|])
        let (add_listener''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x271 : t) ->
            fun ~event:(x266 : symbol or_string) ->
              fun ~listener:(x268 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x271) "addListener"
                     [|(or_string_to_js symbol_to_js x266);(Ojs.fun_to_js_args
                                                              (fun (x269 : _)
                                                                 ->
                                                                 x268
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x269 0)))|])
        let (emit : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x274 : t) ->
            fun ~event:(x272 : [ `error ]) ->
              fun ~err:(x273 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x274) "emit"
                     [|((match x272 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x273)|])
        let (emit' : t -> event:[ `exit ] -> exit_code:int -> bool) =
          fun (x277 : t) ->
            fun ~event:(x275 : [ `exit ]) ->
              fun ~exit_code:(x276 : int) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x277) "emit"
                     [|((match x275 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.int_to_js x276)|])
        let (emit'' : t -> event:[ `message ] -> value:any -> bool) =
          fun (x280 : t) ->
            fun ~event:(x278 : [ `message ]) ->
              fun ~value:(x279 : any) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x280) "emit"
                     [|((match x278 with
                         | `message -> Ojs.string_to_js "message"));(
                       any_to_js x279)|])
        let (emit''' : t -> event:[ `messageerror ] -> error:Error.t -> bool)
          =
          fun (x283 : t) ->
            fun ~event:(x281 : [ `messageerror ]) ->
              fun ~error:(x282 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x283) "emit"
                     [|((match x281 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Error.t_to_js x282)|])
        let (emit'''' : t -> event:[ `online ] -> bool) =
          fun (x285 : t) ->
            fun ~event:(x284 : [ `online ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x285) "emit"
                   [|((match x284 with | `online -> Ojs.string_to_js "online"))|])
        let (emit''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x291 : t) ->
            fun ~event:(x286 : symbol or_string) ->
              fun ~args:(x287 : any list) ->
                Ojs.bool_of_js
                  (let x292 = t_to_js x291 in
                   Ojs.call (Ojs.get_prop_ascii x292 "emit") "apply"
                     [|x292;((let x288 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x288 "push"
                                   [|(or_string_to_js symbol_to_js x286)|]);
                              List.iter
                                (fun (x289 : any) ->
                                   ignore
                                     (Ojs.call x288 "push"
                                        [|(any_to_js x289)|])) x287;
                              x288))|])
        let (on :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x296 : t) ->
            fun ~event:(x293 : [ `error ]) ->
              fun ~listener:(x294 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x296) "on"
                     [|((match x293 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x295 : Ojs.t) ->
                            x294 ~err:(Error.t_of_js x295)))|])
        let (on' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x300 : t) ->
            fun ~event:(x297 : [ `exit ]) ->
              fun ~listener:(x298 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x300) "on"
                     [|((match x297 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x299 : Ojs.t) ->
                            x298 ~exitCode:(Ojs.int_of_js x299)))|])
        let (on'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x304 : t) ->
            fun ~event:(x301 : [ `message ]) ->
              fun ~listener:(x302 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x304) "on"
                     [|((match x301 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x303 : Ojs.t) -> x302 ~value:(any_of_js x303)))|])
        let (on''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x308 : t) ->
            fun ~event:(x305 : [ `messageerror ]) ->
              fun ~listener:(x306 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x308) "on"
                     [|((match x305 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x307 : Ojs.t) ->
                            x306 ~error:(Error.t_of_js x307)))|])
        let (on'''' : t -> event:[ `online ] -> listener:(unit -> unit) -> t)
          =
          fun (x311 : t) ->
            fun ~event:(x309 : [ `online ]) ->
              fun ~listener:(x310 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x311) "on"
                     [|((match x309 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x310 ()))|])
        let (on''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x317 : t) ->
            fun ~event:(x312 : symbol or_string) ->
              fun ~listener:(x314 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x317) "on"
                     [|(or_string_to_js symbol_to_js x312);(Ojs.fun_to_js_args
                                                              (fun (x315 : _)
                                                                 ->
                                                                 x314
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x315 0)))|])
        let (once :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x321 : t) ->
            fun ~event:(x318 : [ `error ]) ->
              fun ~listener:(x319 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x321) "once"
                     [|((match x318 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x320 : Ojs.t) ->
                            x319 ~err:(Error.t_of_js x320)))|])
        let (once' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x325 : t) ->
            fun ~event:(x322 : [ `exit ]) ->
              fun ~listener:(x323 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x325) "once"
                     [|((match x322 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x324 : Ojs.t) ->
                            x323 ~exitCode:(Ojs.int_of_js x324)))|])
        let (once'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x329 : t) ->
            fun ~event:(x326 : [ `message ]) ->
              fun ~listener:(x327 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x329) "once"
                     [|((match x326 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x328 : Ojs.t) -> x327 ~value:(any_of_js x328)))|])
        let (once''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x333 : t) ->
            fun ~event:(x330 : [ `messageerror ]) ->
              fun ~listener:(x331 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x333) "once"
                     [|((match x330 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x332 : Ojs.t) ->
                            x331 ~error:(Error.t_of_js x332)))|])
        let (once'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x336 : t) ->
            fun ~event:(x334 : [ `online ]) ->
              fun ~listener:(x335 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x336) "once"
                     [|((match x334 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x335 ()))|])
        let (once''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x342 : t) ->
            fun ~event:(x337 : symbol or_string) ->
              fun ~listener:(x339 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x342) "once"
                     [|(or_string_to_js symbol_to_js x337);(Ojs.fun_to_js_args
                                                              (fun (x340 : _)
                                                                 ->
                                                                 x339
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x340 0)))|])
        let (prepend_listener :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x346 : t) ->
            fun ~event:(x343 : [ `error ]) ->
              fun ~listener:(x344 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x346) "prependListener"
                     [|((match x343 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x345 : Ojs.t) ->
                            x344 ~err:(Error.t_of_js x345)))|])
        let (prepend_listener' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x350 : t) ->
            fun ~event:(x347 : [ `exit ]) ->
              fun ~listener:(x348 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x350) "prependListener"
                     [|((match x347 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x349 : Ojs.t) ->
                            x348 ~exitCode:(Ojs.int_of_js x349)))|])
        let (prepend_listener'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x354 : t) ->
            fun ~event:(x351 : [ `message ]) ->
              fun ~listener:(x352 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x354) "prependListener"
                     [|((match x351 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x353 : Ojs.t) -> x352 ~value:(any_of_js x353)))|])
        let (prepend_listener''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x358 : t) ->
            fun ~event:(x355 : [ `messageerror ]) ->
              fun ~listener:(x356 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x358) "prependListener"
                     [|((match x355 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x357 : Ojs.t) ->
                            x356 ~error:(Error.t_of_js x357)))|])
        let (prepend_listener'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x361 : t) ->
            fun ~event:(x359 : [ `online ]) ->
              fun ~listener:(x360 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x361) "prependListener"
                     [|((match x359 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x360 ()))|])
        let (prepend_listener''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x367 : t) ->
            fun ~event:(x362 : symbol or_string) ->
              fun ~listener:(x364 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x367) "prependListener"
                     [|(or_string_to_js symbol_to_js x362);(Ojs.fun_to_js_args
                                                              (fun (x365 : _)
                                                                 ->
                                                                 x364
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x365 0)))|])
        let (prepend_once_listener :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x371 : t) ->
            fun ~event:(x368 : [ `error ]) ->
              fun ~listener:(x369 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x371) "prependOnceListener"
                     [|((match x368 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x370 : Ojs.t) ->
                            x369 ~err:(Error.t_of_js x370)))|])
        let (prepend_once_listener' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x375 : t) ->
            fun ~event:(x372 : [ `exit ]) ->
              fun ~listener:(x373 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x375) "prependOnceListener"
                     [|((match x372 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x374 : Ojs.t) ->
                            x373 ~exitCode:(Ojs.int_of_js x374)))|])
        let (prepend_once_listener'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x379 : t) ->
            fun ~event:(x376 : [ `message ]) ->
              fun ~listener:(x377 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x379) "prependOnceListener"
                     [|((match x376 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x378 : Ojs.t) -> x377 ~value:(any_of_js x378)))|])
        let (prepend_once_listener''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x383 : t) ->
            fun ~event:(x380 : [ `messageerror ]) ->
              fun ~listener:(x381 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x383) "prependOnceListener"
                     [|((match x380 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x382 : Ojs.t) ->
                            x381 ~error:(Error.t_of_js x382)))|])
        let (prepend_once_listener'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x386 : t) ->
            fun ~event:(x384 : [ `online ]) ->
              fun ~listener:(x385 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x386) "prependOnceListener"
                     [|((match x384 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x385 ()))|])
        let (prepend_once_listener''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x392 : t) ->
            fun ~event:(x387 : symbol or_string) ->
              fun ~listener:(x389 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x392) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x387);(Ojs.fun_to_js_args
                                                              (fun (x390 : _)
                                                                 ->
                                                                 x389
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x390 0)))|])
        let (remove_listener :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x396 : t) ->
            fun ~event:(x393 : [ `error ]) ->
              fun ~listener:(x394 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x396) "removeListener"
                     [|((match x393 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x395 : Ojs.t) ->
                            x394 ~err:(Error.t_of_js x395)))|])
        let (remove_listener' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x400 : t) ->
            fun ~event:(x397 : [ `exit ]) ->
              fun ~listener:(x398 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x400) "removeListener"
                     [|((match x397 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x399 : Ojs.t) ->
                            x398 ~exitCode:(Ojs.int_of_js x399)))|])
        let (remove_listener'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x404 : t) ->
            fun ~event:(x401 : [ `message ]) ->
              fun ~listener:(x402 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x404) "removeListener"
                     [|((match x401 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x403 : Ojs.t) -> x402 ~value:(any_of_js x403)))|])
        let (remove_listener''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x408 : t) ->
            fun ~event:(x405 : [ `messageerror ]) ->
              fun ~listener:(x406 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x408) "removeListener"
                     [|((match x405 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x407 : Ojs.t) ->
                            x406 ~error:(Error.t_of_js x407)))|])
        let (remove_listener'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x411 : t) ->
            fun ~event:(x409 : [ `online ]) ->
              fun ~listener:(x410 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x411) "removeListener"
                     [|((match x409 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x410 ()))|])
        let (remove_listener''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x417 : t) ->
            fun ~event:(x412 : symbol or_string) ->
              fun ~listener:(x414 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x417) "removeListener"
                     [|(or_string_to_js symbol_to_js x412);(Ojs.fun_to_js_args
                                                              (fun (x415 : _)
                                                                 ->
                                                                 x414
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x415 0)))|])
        let (off :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x421 : t) ->
            fun ~event:(x418 : [ `error ]) ->
              fun ~listener:(x419 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x421) "off"
                     [|((match x418 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x420 : Ojs.t) ->
                            x419 ~err:(Error.t_of_js x420)))|])
        let (off' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x425 : t) ->
            fun ~event:(x422 : [ `exit ]) ->
              fun ~listener:(x423 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x425) "off"
                     [|((match x422 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x424 : Ojs.t) ->
                            x423 ~exitCode:(Ojs.int_of_js x424)))|])
        let (off'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x429 : t) ->
            fun ~event:(x426 : [ `message ]) ->
              fun ~listener:(x427 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x429) "off"
                     [|((match x426 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x428 : Ojs.t) -> x427 ~value:(any_of_js x428)))|])
        let (off''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x433 : t) ->
            fun ~event:(x430 : [ `messageerror ]) ->
              fun ~listener:(x431 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x433) "off"
                     [|((match x430 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x432 : Ojs.t) ->
                            x431 ~error:(Error.t_of_js x432)))|])
        let (off'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x436 : t) ->
            fun ~event:(x434 : [ `online ]) ->
              fun ~listener:(x435 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x436) "off"
                     [|((match x434 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x435 ()))|])
        let (off''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x442 : t) ->
            fun ~event:(x437 : symbol or_string) ->
              fun ~listener:(x439 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x442) "off"
                     [|(or_string_to_js symbol_to_js x437);(Ojs.fun_to_js_args
                                                              (fun (x440 : _)
                                                                 ->
                                                                 x439
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x440 0)))|])
      end
    let (mark_as_untransferable : object_:untyped_object -> unit) =
      fun ~object_:(x443 : untyped_object) ->
        ignore
          (Ojs.call Import.worker_threads "markAsUntransferable"
             [|(untyped_object_to_js x443)|])
    let (move_message_port_to_context :
      port:MessagePort.t -> context:Node_vm.Vm.Context.t -> MessagePort.t) =
      fun ~port:(x444 : MessagePort.t) ->
        fun ~context:(x445 : Node_vm.Vm.Context.t) ->
          MessagePort.t_of_js
            (Ojs.call Import.worker_threads "moveMessagePortToContext"
               [|(MessagePort.t_to_js x444);(Node_vm.Vm.Context.t_to_js x445)|])
    let (receive_message_on_port :
      port:MessagePort.t -> AnonymousInterface0.t or_undefined) =
      fun ~port:(x446 : MessagePort.t) ->
        or_undefined_of_js AnonymousInterface0.t_of_js
          (Ojs.call Import.worker_threads "receiveMessageOnPort"
             [|(MessagePort.t_to_js x446)|])
    let (is_main_thread : bool) =
      Ojs.bool_of_js
        (Ojs.get_prop_ascii Import.worker_threads "isMainThread")
    let (parent_port : MessagePort.t or_null) =
      or_null_of_js MessagePort.t_of_js
        (Ojs.get_prop_ascii Import.worker_threads "parentPort")
    let (resource_limits : ResourceLimits.t) =
      ResourceLimits.t_of_js
        (Ojs.get_prop_ascii Import.worker_threads "resourceLimits")
    let (share_env : any) =
      any_of_js (Ojs.get_prop_ascii Import.worker_threads "SHARE_ENV")
    let (thread_id : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.worker_threads "threadId")
    let (worker_data : any) =
      any_of_js (Ojs.get_prop_ascii Import.worker_threads "workerData")
  end
