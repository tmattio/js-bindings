[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_message : t -> any) =
      fun (x3 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x3) "message")
    let (set_message : t -> any -> unit) =
      fun (x4 : t) ->
        fun (x5 : any) ->
          Ojs.set_prop_ascii (t_to_js x4) "message" (any_to_js x5)
  end
module Worker_threads =
  struct
    module MessagePort =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x7 : Ojs.t) -> x7
        and t_to_js : t -> Ojs.t = fun (x6 : Ojs.t) -> x6
        let (close : t -> unit) =
          fun (x8 : t) -> ignore (Ojs.call (t_to_js x8) "close" [||])
        let (post_message : t -> value:any -> unit -> unit) =
          fun (x10 : t) ->
            fun ~value:(x9 : any) ->
              fun () ->
                ignore
                  (Ojs.call (t_to_js x10) "postMessage" [|(any_to_js x9)|])
        let (ref : t -> unit) =
          fun (x11 : t) -> ignore (Ojs.call (t_to_js x11) "ref" [||])
        let (unref : t -> unit) =
          fun (x12 : t) -> ignore (Ojs.call (t_to_js x12) "unref" [||])
        let (start : t -> unit) =
          fun (x13 : t) -> ignore (Ojs.call (t_to_js x13) "start" [||])
        let (add_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x16 : t) ->
            fun ~event:(x14 : [ `close ]) ->
              fun ~listener:(x15 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x16) "addListener"
                     [|((match x14 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x15 ()))|])
        let (add_listener' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x20 : t) ->
            fun ~event:(x17 : [ `message ]) ->
              fun ~listener:(x18 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x20) "addListener"
                     [|((match x17 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x19 : Ojs.t) -> x18 ~value:(any_of_js x19)))|])
        let (add_listener'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x24 : t) ->
            fun ~event:(x21 : [ `messageerror ]) ->
              fun ~listener:(x22 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x24) "addListener"
                     [|((match x21 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x23 : Ojs.t) -> x22 ~error:(Error.t_of_js x23)))|])
        let (add_listener''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x30 : t) ->
            fun ~event:(x25 : symbol or_string) ->
              fun ~listener:(x27 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x30) "addListener"
                     [|(or_string_to_js symbol_to_js x25);(Ojs.fun_to_js_args
                                                             (fun (x28 : _)
                                                                ->
                                                                x27
                                                                  ~args:(
                                                                  Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x28 0)))|])
        let (emit : t -> event:[ `close ] -> bool) =
          fun (x32 : t) ->
            fun ~event:(x31 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x32) "emit"
                   [|((match x31 with | `close -> Ojs.string_to_js "close"))|])
        let (emit' : t -> event:[ `message ] -> value:any -> bool) =
          fun (x35 : t) ->
            fun ~event:(x33 : [ `message ]) ->
              fun ~value:(x34 : any) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x35) "emit"
                     [|((match x33 with
                         | `message -> Ojs.string_to_js "message"));(
                       any_to_js x34)|])
        let (emit'' : t -> event:[ `messageerror ] -> error:Error.t -> bool)
          =
          fun (x38 : t) ->
            fun ~event:(x36 : [ `messageerror ]) ->
              fun ~error:(x37 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x38) "emit"
                     [|((match x36 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Error.t_to_js x37)|])
        let (emit''' : t -> event:symbol or_string -> args:any list -> bool)
          =
          fun (x44 : t) ->
            fun ~event:(x39 : symbol or_string) ->
              fun ~args:(x40 : any list) ->
                Ojs.bool_of_js
                  (let x45 = t_to_js x44 in
                   Ojs.call (Ojs.get_prop_ascii x45 "emit") "apply"
                     [|x45;((let x41 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x41 "push"
                                  [|(or_string_to_js symbol_to_js x39)|]);
                             List.iter
                               (fun (x42 : any) ->
                                  ignore
                                    (Ojs.call x41 "push" [|(any_to_js x42)|]))
                               x40;
                             x41))|])
        let (on : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x48 : t) ->
            fun ~event:(x46 : [ `close ]) ->
              fun ~listener:(x47 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x48) "on"
                     [|((match x46 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x47 ()))|])
        let (on' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x52 : t) ->
            fun ~event:(x49 : [ `message ]) ->
              fun ~listener:(x50 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x52) "on"
                     [|((match x49 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x51 : Ojs.t) -> x50 ~value:(any_of_js x51)))|])
        let (on'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x56 : t) ->
            fun ~event:(x53 : [ `messageerror ]) ->
              fun ~listener:(x54 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x56) "on"
                     [|((match x53 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x55 : Ojs.t) -> x54 ~error:(Error.t_of_js x55)))|])
        let (on''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x62 : t) ->
            fun ~event:(x57 : symbol or_string) ->
              fun ~listener:(x59 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x62) "on"
                     [|(or_string_to_js symbol_to_js x57);(Ojs.fun_to_js_args
                                                             (fun (x60 : _)
                                                                ->
                                                                x59
                                                                  ~args:(
                                                                  Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x60 0)))|])
        let (once : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x65 : t) ->
            fun ~event:(x63 : [ `close ]) ->
              fun ~listener:(x64 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x65) "once"
                     [|((match x63 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x64 ()))|])
        let (once' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x69 : t) ->
            fun ~event:(x66 : [ `message ]) ->
              fun ~listener:(x67 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x69) "once"
                     [|((match x66 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x68 : Ojs.t) -> x67 ~value:(any_of_js x68)))|])
        let (once'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x73 : t) ->
            fun ~event:(x70 : [ `messageerror ]) ->
              fun ~listener:(x71 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x73) "once"
                     [|((match x70 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x72 : Ojs.t) -> x71 ~error:(Error.t_of_js x72)))|])
        let (once''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x79 : t) ->
            fun ~event:(x74 : symbol or_string) ->
              fun ~listener:(x76 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x79) "once"
                     [|(or_string_to_js symbol_to_js x74);(Ojs.fun_to_js_args
                                                             (fun (x77 : _)
                                                                ->
                                                                x76
                                                                  ~args:(
                                                                  Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x77 0)))|])
        let (prepend_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x82 : t) ->
            fun ~event:(x80 : [ `close ]) ->
              fun ~listener:(x81 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x82) "prependListener"
                     [|((match x80 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x81 ()))|])
        let (prepend_listener' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x86 : t) ->
            fun ~event:(x83 : [ `message ]) ->
              fun ~listener:(x84 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x86) "prependListener"
                     [|((match x83 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x85 : Ojs.t) -> x84 ~value:(any_of_js x85)))|])
        let (prepend_listener'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x90 : t) ->
            fun ~event:(x87 : [ `messageerror ]) ->
              fun ~listener:(x88 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x90) "prependListener"
                     [|((match x87 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x89 : Ojs.t) -> x88 ~error:(Error.t_of_js x89)))|])
        let (prepend_listener''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x96 : t) ->
            fun ~event:(x91 : symbol or_string) ->
              fun ~listener:(x93 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x96) "prependListener"
                     [|(or_string_to_js symbol_to_js x91);(Ojs.fun_to_js_args
                                                             (fun (x94 : _)
                                                                ->
                                                                x93
                                                                  ~args:(
                                                                  Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x94 0)))|])
        let (prepend_once_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x99 : t) ->
            fun ~event:(x97 : [ `close ]) ->
              fun ~listener:(x98 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x99) "prependOnceListener"
                     [|((match x97 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x98 ()))|])
        let (prepend_once_listener' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x103 : t) ->
            fun ~event:(x100 : [ `message ]) ->
              fun ~listener:(x101 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x103) "prependOnceListener"
                     [|((match x100 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x102 : Ojs.t) -> x101 ~value:(any_of_js x102)))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x107 : t) ->
            fun ~event:(x104 : [ `messageerror ]) ->
              fun ~listener:(x105 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x107) "prependOnceListener"
                     [|((match x104 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x106 : Ojs.t) ->
                            x105 ~error:(Error.t_of_js x106)))|])
        let (prepend_once_listener''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x113 : t) ->
            fun ~event:(x108 : symbol or_string) ->
              fun ~listener:(x110 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x113) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x108);(Ojs.fun_to_js_args
                                                              (fun (x111 : _)
                                                                 ->
                                                                 x110
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x111 0)))|])
        let (remove_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x116 : t) ->
            fun ~event:(x114 : [ `close ]) ->
              fun ~listener:(x115 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x116) "removeListener"
                     [|((match x114 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x115 ()))|])
        let (remove_listener' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x120 : t) ->
            fun ~event:(x117 : [ `message ]) ->
              fun ~listener:(x118 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x120) "removeListener"
                     [|((match x117 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x119 : Ojs.t) -> x118 ~value:(any_of_js x119)))|])
        let (remove_listener'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x124 : t) ->
            fun ~event:(x121 : [ `messageerror ]) ->
              fun ~listener:(x122 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x124) "removeListener"
                     [|((match x121 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x123 : Ojs.t) ->
                            x122 ~error:(Error.t_of_js x123)))|])
        let (remove_listener''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x130 : t) ->
            fun ~event:(x125 : symbol or_string) ->
              fun ~listener:(x127 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x130) "removeListener"
                     [|(or_string_to_js symbol_to_js x125);(Ojs.fun_to_js_args
                                                              (fun (x128 : _)
                                                                 ->
                                                                 x127
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x128 0)))|])
        let (off : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x133 : t) ->
            fun ~event:(x131 : [ `close ]) ->
              fun ~listener:(x132 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x133) "off"
                     [|((match x131 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x132 ()))|])
        let (off' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x137 : t) ->
            fun ~event:(x134 : [ `message ]) ->
              fun ~listener:(x135 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x137) "off"
                     [|((match x134 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x136 : Ojs.t) -> x135 ~value:(any_of_js x136)))|])
        let (off'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x141 : t) ->
            fun ~event:(x138 : [ `messageerror ]) ->
              fun ~listener:(x139 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x141) "off"
                     [|((match x138 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x140 : Ojs.t) ->
                            x139 ~error:(Error.t_of_js x140)))|])
        let (off''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x147 : t) ->
            fun ~event:(x142 : symbol or_string) ->
              fun ~listener:(x144 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x147) "off"
                     [|(or_string_to_js symbol_to_js x142);(Ojs.fun_to_js_args
                                                              (fun (x145 : _)
                                                                 ->
                                                                 x144
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x145 0)))|])
        let (cast : t -> Node_events.Events.EventEmitter.t) =
          fun (x148 : t) ->
            Node_events.Events.EventEmitter.t_of_js (t_to_js x148)
      end
    module MessageChannel =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x150 : Ojs.t) -> x150
        and t_to_js : t -> Ojs.t = fun (x149 : Ojs.t) -> x149
        let (get_port1 : t -> MessagePort.t) =
          fun (x151 : t) ->
            MessagePort.t_of_js (Ojs.get_prop_ascii (t_to_js x151) "port1")
        let (get_port2 : t -> MessagePort.t) =
          fun (x152 : t) ->
            MessagePort.t_of_js (Ojs.get_prop_ascii (t_to_js x152) "port2")
      end
    module TransferListItem =
      struct
        type t =
          (ArrayBuffer.t, Node_fs_promises.Fs_promises.FileHandle.t,
            MessagePort.t) union3
        let rec t_of_js : Ojs.t -> t =
          fun (x157 : Ojs.t) ->
            union3_of_js ArrayBuffer.t_of_js
              Node_fs_promises.Fs_promises.FileHandle.t_of_js
              MessagePort.t_of_js x157
        and t_to_js : t -> Ojs.t =
          fun
            (x153 :
              (ArrayBuffer.t, Node_fs_promises.Fs_promises.FileHandle.t,
                MessagePort.t) union3)
            ->
            union3_to_js ArrayBuffer.t_to_js
              Node_fs_promises.Fs_promises.FileHandle.t_to_js
              MessagePort.t_to_js x153
      end
    module ResourceLimits =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x162 : Ojs.t) -> x162
        and t_to_js : t -> Ojs.t = fun (x161 : Ojs.t) -> x161
        let (get_max_young_generation_size_mb : t -> int) =
          fun (x163 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x163) "maxYoungGenerationSizeMb")
        let (set_max_young_generation_size_mb : t -> int -> unit) =
          fun (x164 : t) ->
            fun (x165 : int) ->
              Ojs.set_prop_ascii (t_to_js x164) "maxYoungGenerationSizeMb"
                (Ojs.int_to_js x165)
        let (get_max_old_generation_size_mb : t -> int) =
          fun (x166 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x166) "maxOldGenerationSizeMb")
        let (set_max_old_generation_size_mb : t -> int -> unit) =
          fun (x167 : t) ->
            fun (x168 : int) ->
              Ojs.set_prop_ascii (t_to_js x167) "maxOldGenerationSizeMb"
                (Ojs.int_to_js x168)
        let (get_code_range_size_mb : t -> int) =
          fun (x169 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x169) "codeRangeSizeMb")
        let (set_code_range_size_mb : t -> int -> unit) =
          fun (x170 : t) ->
            fun (x171 : int) ->
              Ojs.set_prop_ascii (t_to_js x170) "codeRangeSizeMb"
                (Ojs.int_to_js x171)
        let (get_stack_size_mb : t -> int) =
          fun (x172 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x172) "stackSizeMb")
        let (set_stack_size_mb : t -> int -> unit) =
          fun (x173 : t) ->
            fun (x174 : int) ->
              Ojs.set_prop_ascii (t_to_js x173) "stackSizeMb"
                (Ojs.int_to_js x174)
      end
    module WorkerOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x176 : Ojs.t) -> x176
        and t_to_js : t -> Ojs.t = fun (x175 : Ojs.t) -> x175
        let (get_argv : t -> any list) =
          fun (x177 : t) ->
            Ojs.list_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x177) "argv")
        let (set_argv : t -> any list -> unit) =
          fun (x179 : t) ->
            fun (x180 : any list) ->
              Ojs.set_prop_ascii (t_to_js x179) "argv"
                (Ojs.list_to_js any_to_js x180)
        let (get_env : t -> (string Dict.t, any) union2) =
          fun (x182 : t) ->
            union2_of_js
              (fun (x183 : Ojs.t) -> Dict.t_of_js Ojs.string_of_js x183)
              any_of_js (Ojs.get_prop_ascii (t_to_js x182) "env")
        let (set_env : t -> (string Dict.t, any) union2 -> unit) =
          fun (x186 : t) ->
            fun (x187 : (string Dict.t, any) union2) ->
              Ojs.set_prop_ascii (t_to_js x186) "env"
                (union2_to_js
                   (fun (x188 : string Dict.t) ->
                      Dict.t_to_js Ojs.string_to_js x188) any_to_js x187)
        let (get_eval : t -> bool) =
          fun (x191 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x191) "eval")
        let (set_eval : t -> bool -> unit) =
          fun (x192 : t) ->
            fun (x193 : bool) ->
              Ojs.set_prop_ascii (t_to_js x192) "eval" (Ojs.bool_to_js x193)
        let (get_worker_data : t -> any) =
          fun (x194 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x194) "workerData")
        let (set_worker_data : t -> any -> unit) =
          fun (x195 : t) ->
            fun (x196 : any) ->
              Ojs.set_prop_ascii (t_to_js x195) "workerData" (any_to_js x196)
        let (get_stdin : t -> bool) =
          fun (x197 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x197) "stdin")
        let (set_stdin : t -> bool -> unit) =
          fun (x198 : t) ->
            fun (x199 : bool) ->
              Ojs.set_prop_ascii (t_to_js x198) "stdin" (Ojs.bool_to_js x199)
        let (get_stdout : t -> bool) =
          fun (x200 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x200) "stdout")
        let (set_stdout : t -> bool -> unit) =
          fun (x201 : t) ->
            fun (x202 : bool) ->
              Ojs.set_prop_ascii (t_to_js x201) "stdout"
                (Ojs.bool_to_js x202)
        let (get_stderr : t -> bool) =
          fun (x203 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x203) "stderr")
        let (set_stderr : t -> bool -> unit) =
          fun (x204 : t) ->
            fun (x205 : bool) ->
              Ojs.set_prop_ascii (t_to_js x204) "stderr"
                (Ojs.bool_to_js x205)
        let (get_exec_argv : t -> string list) =
          fun (x206 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x206) "execArgv")
        let (set_exec_argv : t -> string list -> unit) =
          fun (x208 : t) ->
            fun (x209 : string list) ->
              Ojs.set_prop_ascii (t_to_js x208) "execArgv"
                (Ojs.list_to_js Ojs.string_to_js x209)
        let (get_resource_limits : t -> ResourceLimits.t) =
          fun (x211 : t) ->
            ResourceLimits.t_of_js
              (Ojs.get_prop_ascii (t_to_js x211) "resourceLimits")
        let (set_resource_limits : t -> ResourceLimits.t -> unit) =
          fun (x212 : t) ->
            fun (x213 : ResourceLimits.t) ->
              Ojs.set_prop_ascii (t_to_js x212) "resourceLimits"
                (ResourceLimits.t_to_js x213)
        let (get_transfer_list : t -> TransferListItem.t list) =
          fun (x214 : t) ->
            Ojs.list_of_js TransferListItem.t_of_js
              (Ojs.get_prop_ascii (t_to_js x214) "transferList")
        let (set_transfer_list : t -> TransferListItem.t list -> unit) =
          fun (x216 : t) ->
            fun (x217 : TransferListItem.t list) ->
              Ojs.set_prop_ascii (t_to_js x216) "transferList"
                (Ojs.list_to_js TransferListItem.t_to_js x217)
        let (get_track_unmanaged_fds : t -> bool) =
          fun (x219 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x219) "trackUnmanagedFds")
        let (set_track_unmanaged_fds : t -> bool -> unit) =
          fun (x220 : t) ->
            fun (x221 : bool) ->
              Ojs.set_prop_ascii (t_to_js x220) "trackUnmanagedFds"
                (Ojs.bool_to_js x221)
      end
    module Worker =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x223 : Ojs.t) -> x223
        and t_to_js : t -> Ojs.t = fun (x222 : Ojs.t) -> x222
        let (get_stdin : t -> Node_stream.Stream.Writable.t or_null) =
          fun (x224 : t) ->
            or_null_of_js Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x224) "stdin")
        let (get_stdout : t -> Node_stream.Stream.Writable.t) =
          fun (x226 : t) ->
            Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x226) "stdout")
        let (get_stderr : t -> Node_stream.Stream.Writable.t) =
          fun (x227 : t) ->
            Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x227) "stderr")
        let (get_thread_id : t -> int) =
          fun (x228 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x228) "threadId")
        let (get_resource_limits : t -> ResourceLimits.t) =
          fun (x229 : t) ->
            ResourceLimits.t_of_js
              (Ojs.get_prop_ascii (t_to_js x229) "resourceLimits")
        let (create :
          filename:Node_url.Url.Url.t or_string ->
            ?options:WorkerOptions.t -> unit -> t)
          =
          fun ~filename:(x230 : Node_url.Url.Url.t or_string) ->
            fun ?options:(x231 : WorkerOptions.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Import.worker_threads "Worker")
                     (let x232 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x232 "push"
                           [|(or_string_to_js Node_url.Url.Url.t_to_js x230)|]);
                      (match x231 with
                       | Some x233 ->
                           ignore
                             (Ojs.call x232 "push"
                                [|(WorkerOptions.t_to_js x233)|])
                       | None -> ());
                      x232))
        let (post_message :
          t ->
            value:any ->
              ?transfer_list:TransferListItem.t list -> unit -> unit)
          =
          fun (x240 : t) ->
            fun ~value:(x235 : any) ->
              fun ?transfer_list:(x236 : TransferListItem.t list option) ->
                fun () ->
                  ignore
                    (let x241 = t_to_js x240 in
                     Ojs.call (Ojs.get_prop_ascii x241 "postMessage") "apply"
                       [|x241;((let x237 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x237 "push" [|(any_to_js x235)|]);
                                (match x236 with
                                 | Some x238 ->
                                     ignore
                                       (Ojs.call x237 "push"
                                          [|(Ojs.list_to_js
                                               TransferListItem.t_to_js x238)|])
                                 | None -> ());
                                x237))|])
        let (ref : t -> unit) =
          fun (x242 : t) -> ignore (Ojs.call (t_to_js x242) "ref" [||])
        let (unref : t -> unit) =
          fun (x243 : t) -> ignore (Ojs.call (t_to_js x243) "unref" [||])
        let (terminate : t -> int Promise.t) =
          fun (x244 : t) ->
            Promise.t_of_js Ojs.int_of_js
              (Ojs.call (t_to_js x244) "terminate" [||])
        let (get_heap_snapshot :
          t -> Node_stream.Stream.Writable.t Promise.t) =
          fun (x246 : t) ->
            Promise.t_of_js Node_stream.Stream.Writable.t_of_js
              (Ojs.call (t_to_js x246) "getHeapSnapshot" [||])
        let (add_listener :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x251 : t) ->
            fun ~event:(x248 : [ `error ]) ->
              fun ~listener:(x249 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x251) "addListener"
                     [|((match x248 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x250 : Ojs.t) ->
                            x249 ~err:(Error.t_of_js x250)))|])
        let (add_listener' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x255 : t) ->
            fun ~event:(x252 : [ `exit ]) ->
              fun ~listener:(x253 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x255) "addListener"
                     [|((match x252 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x254 : Ojs.t) ->
                            x253 ~exitCode:(Ojs.int_of_js x254)))|])
        let (add_listener'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x259 : t) ->
            fun ~event:(x256 : [ `message ]) ->
              fun ~listener:(x257 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x259) "addListener"
                     [|((match x256 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x258 : Ojs.t) -> x257 ~value:(any_of_js x258)))|])
        let (add_listener''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x263 : t) ->
            fun ~event:(x260 : [ `messageerror ]) ->
              fun ~listener:(x261 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x263) "addListener"
                     [|((match x260 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x262 : Ojs.t) ->
                            x261 ~error:(Error.t_of_js x262)))|])
        let (add_listener'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x266 : t) ->
            fun ~event:(x264 : [ `online ]) ->
              fun ~listener:(x265 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x266) "addListener"
                     [|((match x264 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x265 ()))|])
        let (add_listener''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x272 : t) ->
            fun ~event:(x267 : symbol or_string) ->
              fun ~listener:(x269 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x272) "addListener"
                     [|(or_string_to_js symbol_to_js x267);(Ojs.fun_to_js_args
                                                              (fun (x270 : _)
                                                                 ->
                                                                 x269
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x270 0)))|])
        let (emit : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x275 : t) ->
            fun ~event:(x273 : [ `error ]) ->
              fun ~err:(x274 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x275) "emit"
                     [|((match x273 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x274)|])
        let (emit' : t -> event:[ `exit ] -> exit_code:int -> bool) =
          fun (x278 : t) ->
            fun ~event:(x276 : [ `exit ]) ->
              fun ~exit_code:(x277 : int) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x278) "emit"
                     [|((match x276 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.int_to_js x277)|])
        let (emit'' : t -> event:[ `message ] -> value:any -> bool) =
          fun (x281 : t) ->
            fun ~event:(x279 : [ `message ]) ->
              fun ~value:(x280 : any) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x281) "emit"
                     [|((match x279 with
                         | `message -> Ojs.string_to_js "message"));(
                       any_to_js x280)|])
        let (emit''' : t -> event:[ `messageerror ] -> error:Error.t -> bool)
          =
          fun (x284 : t) ->
            fun ~event:(x282 : [ `messageerror ]) ->
              fun ~error:(x283 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x284) "emit"
                     [|((match x282 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Error.t_to_js x283)|])
        let (emit'''' : t -> event:[ `online ] -> bool) =
          fun (x286 : t) ->
            fun ~event:(x285 : [ `online ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x286) "emit"
                   [|((match x285 with | `online -> Ojs.string_to_js "online"))|])
        let (emit''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x292 : t) ->
            fun ~event:(x287 : symbol or_string) ->
              fun ~args:(x288 : any list) ->
                Ojs.bool_of_js
                  (let x293 = t_to_js x292 in
                   Ojs.call (Ojs.get_prop_ascii x293 "emit") "apply"
                     [|x293;((let x289 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x289 "push"
                                   [|(or_string_to_js symbol_to_js x287)|]);
                              List.iter
                                (fun (x290 : any) ->
                                   ignore
                                     (Ojs.call x289 "push"
                                        [|(any_to_js x290)|])) x288;
                              x289))|])
        let (on :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x297 : t) ->
            fun ~event:(x294 : [ `error ]) ->
              fun ~listener:(x295 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x297) "on"
                     [|((match x294 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x296 : Ojs.t) ->
                            x295 ~err:(Error.t_of_js x296)))|])
        let (on' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x301 : t) ->
            fun ~event:(x298 : [ `exit ]) ->
              fun ~listener:(x299 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x301) "on"
                     [|((match x298 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x300 : Ojs.t) ->
                            x299 ~exitCode:(Ojs.int_of_js x300)))|])
        let (on'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x305 : t) ->
            fun ~event:(x302 : [ `message ]) ->
              fun ~listener:(x303 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x305) "on"
                     [|((match x302 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x304 : Ojs.t) -> x303 ~value:(any_of_js x304)))|])
        let (on''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x309 : t) ->
            fun ~event:(x306 : [ `messageerror ]) ->
              fun ~listener:(x307 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x309) "on"
                     [|((match x306 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x308 : Ojs.t) ->
                            x307 ~error:(Error.t_of_js x308)))|])
        let (on'''' : t -> event:[ `online ] -> listener:(unit -> unit) -> t)
          =
          fun (x312 : t) ->
            fun ~event:(x310 : [ `online ]) ->
              fun ~listener:(x311 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x312) "on"
                     [|((match x310 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x311 ()))|])
        let (on''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x318 : t) ->
            fun ~event:(x313 : symbol or_string) ->
              fun ~listener:(x315 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x318) "on"
                     [|(or_string_to_js symbol_to_js x313);(Ojs.fun_to_js_args
                                                              (fun (x316 : _)
                                                                 ->
                                                                 x315
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x316 0)))|])
        let (once :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x322 : t) ->
            fun ~event:(x319 : [ `error ]) ->
              fun ~listener:(x320 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x322) "once"
                     [|((match x319 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x321 : Ojs.t) ->
                            x320 ~err:(Error.t_of_js x321)))|])
        let (once' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x326 : t) ->
            fun ~event:(x323 : [ `exit ]) ->
              fun ~listener:(x324 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x326) "once"
                     [|((match x323 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x325 : Ojs.t) ->
                            x324 ~exitCode:(Ojs.int_of_js x325)))|])
        let (once'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x330 : t) ->
            fun ~event:(x327 : [ `message ]) ->
              fun ~listener:(x328 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x330) "once"
                     [|((match x327 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x329 : Ojs.t) -> x328 ~value:(any_of_js x329)))|])
        let (once''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x334 : t) ->
            fun ~event:(x331 : [ `messageerror ]) ->
              fun ~listener:(x332 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x334) "once"
                     [|((match x331 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x333 : Ojs.t) ->
                            x332 ~error:(Error.t_of_js x333)))|])
        let (once'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x337 : t) ->
            fun ~event:(x335 : [ `online ]) ->
              fun ~listener:(x336 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x337) "once"
                     [|((match x335 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x336 ()))|])
        let (once''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x343 : t) ->
            fun ~event:(x338 : symbol or_string) ->
              fun ~listener:(x340 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x343) "once"
                     [|(or_string_to_js symbol_to_js x338);(Ojs.fun_to_js_args
                                                              (fun (x341 : _)
                                                                 ->
                                                                 x340
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x341 0)))|])
        let (prepend_listener :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x347 : t) ->
            fun ~event:(x344 : [ `error ]) ->
              fun ~listener:(x345 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x347) "prependListener"
                     [|((match x344 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x346 : Ojs.t) ->
                            x345 ~err:(Error.t_of_js x346)))|])
        let (prepend_listener' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x351 : t) ->
            fun ~event:(x348 : [ `exit ]) ->
              fun ~listener:(x349 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x351) "prependListener"
                     [|((match x348 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x350 : Ojs.t) ->
                            x349 ~exitCode:(Ojs.int_of_js x350)))|])
        let (prepend_listener'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x355 : t) ->
            fun ~event:(x352 : [ `message ]) ->
              fun ~listener:(x353 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x355) "prependListener"
                     [|((match x352 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x354 : Ojs.t) -> x353 ~value:(any_of_js x354)))|])
        let (prepend_listener''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x359 : t) ->
            fun ~event:(x356 : [ `messageerror ]) ->
              fun ~listener:(x357 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x359) "prependListener"
                     [|((match x356 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x358 : Ojs.t) ->
                            x357 ~error:(Error.t_of_js x358)))|])
        let (prepend_listener'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x362 : t) ->
            fun ~event:(x360 : [ `online ]) ->
              fun ~listener:(x361 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x362) "prependListener"
                     [|((match x360 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x361 ()))|])
        let (prepend_listener''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x368 : t) ->
            fun ~event:(x363 : symbol or_string) ->
              fun ~listener:(x365 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x368) "prependListener"
                     [|(or_string_to_js symbol_to_js x363);(Ojs.fun_to_js_args
                                                              (fun (x366 : _)
                                                                 ->
                                                                 x365
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x366 0)))|])
        let (prepend_once_listener :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x372 : t) ->
            fun ~event:(x369 : [ `error ]) ->
              fun ~listener:(x370 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x372) "prependOnceListener"
                     [|((match x369 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x371 : Ojs.t) ->
                            x370 ~err:(Error.t_of_js x371)))|])
        let (prepend_once_listener' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x376 : t) ->
            fun ~event:(x373 : [ `exit ]) ->
              fun ~listener:(x374 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x376) "prependOnceListener"
                     [|((match x373 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x375 : Ojs.t) ->
                            x374 ~exitCode:(Ojs.int_of_js x375)))|])
        let (prepend_once_listener'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x380 : t) ->
            fun ~event:(x377 : [ `message ]) ->
              fun ~listener:(x378 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x380) "prependOnceListener"
                     [|((match x377 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x379 : Ojs.t) -> x378 ~value:(any_of_js x379)))|])
        let (prepend_once_listener''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x384 : t) ->
            fun ~event:(x381 : [ `messageerror ]) ->
              fun ~listener:(x382 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x384) "prependOnceListener"
                     [|((match x381 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x383 : Ojs.t) ->
                            x382 ~error:(Error.t_of_js x383)))|])
        let (prepend_once_listener'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x387 : t) ->
            fun ~event:(x385 : [ `online ]) ->
              fun ~listener:(x386 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x387) "prependOnceListener"
                     [|((match x385 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x386 ()))|])
        let (prepend_once_listener''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x393 : t) ->
            fun ~event:(x388 : symbol or_string) ->
              fun ~listener:(x390 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x393) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x388);(Ojs.fun_to_js_args
                                                              (fun (x391 : _)
                                                                 ->
                                                                 x390
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x391 0)))|])
        let (remove_listener :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x397 : t) ->
            fun ~event:(x394 : [ `error ]) ->
              fun ~listener:(x395 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x397) "removeListener"
                     [|((match x394 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x396 : Ojs.t) ->
                            x395 ~err:(Error.t_of_js x396)))|])
        let (remove_listener' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x401 : t) ->
            fun ~event:(x398 : [ `exit ]) ->
              fun ~listener:(x399 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x401) "removeListener"
                     [|((match x398 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x400 : Ojs.t) ->
                            x399 ~exitCode:(Ojs.int_of_js x400)))|])
        let (remove_listener'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x405 : t) ->
            fun ~event:(x402 : [ `message ]) ->
              fun ~listener:(x403 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x405) "removeListener"
                     [|((match x402 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x404 : Ojs.t) -> x403 ~value:(any_of_js x404)))|])
        let (remove_listener''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x409 : t) ->
            fun ~event:(x406 : [ `messageerror ]) ->
              fun ~listener:(x407 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x409) "removeListener"
                     [|((match x406 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x408 : Ojs.t) ->
                            x407 ~error:(Error.t_of_js x408)))|])
        let (remove_listener'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x412 : t) ->
            fun ~event:(x410 : [ `online ]) ->
              fun ~listener:(x411 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x412) "removeListener"
                     [|((match x410 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x411 ()))|])
        let (remove_listener''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x418 : t) ->
            fun ~event:(x413 : symbol or_string) ->
              fun ~listener:(x415 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x418) "removeListener"
                     [|(or_string_to_js symbol_to_js x413);(Ojs.fun_to_js_args
                                                              (fun (x416 : _)
                                                                 ->
                                                                 x415
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x416 0)))|])
        let (off :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x422 : t) ->
            fun ~event:(x419 : [ `error ]) ->
              fun ~listener:(x420 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x422) "off"
                     [|((match x419 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x421 : Ojs.t) ->
                            x420 ~err:(Error.t_of_js x421)))|])
        let (off' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x426 : t) ->
            fun ~event:(x423 : [ `exit ]) ->
              fun ~listener:(x424 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x426) "off"
                     [|((match x423 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x425 : Ojs.t) ->
                            x424 ~exitCode:(Ojs.int_of_js x425)))|])
        let (off'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x430 : t) ->
            fun ~event:(x427 : [ `message ]) ->
              fun ~listener:(x428 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x430) "off"
                     [|((match x427 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x429 : Ojs.t) -> x428 ~value:(any_of_js x429)))|])
        let (off''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x434 : t) ->
            fun ~event:(x431 : [ `messageerror ]) ->
              fun ~listener:(x432 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x434) "off"
                     [|((match x431 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x433 : Ojs.t) ->
                            x432 ~error:(Error.t_of_js x433)))|])
        let (off'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x437 : t) ->
            fun ~event:(x435 : [ `online ]) ->
              fun ~listener:(x436 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x437) "off"
                     [|((match x435 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x436 ()))|])
        let (off''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x443 : t) ->
            fun ~event:(x438 : symbol or_string) ->
              fun ~listener:(x440 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x443) "off"
                     [|(or_string_to_js symbol_to_js x438);(Ojs.fun_to_js_args
                                                              (fun (x441 : _)
                                                                 ->
                                                                 x440
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x441 0)))|])
        let (cast : t -> Node_events.Events.EventEmitter.t) =
          fun (x444 : t) ->
            Node_events.Events.EventEmitter.t_of_js (t_to_js x444)
      end
    let (mark_as_untransferable : object_:untyped_object -> unit) =
      fun ~object_:(x445 : untyped_object) ->
        ignore
          (Ojs.call Import.worker_threads "markAsUntransferable"
             [|(untyped_object_to_js x445)|])
    let (move_message_port_to_context :
      port:MessagePort.t -> context:Node_vm.Vm.Context.t -> MessagePort.t) =
      fun ~port:(x446 : MessagePort.t) ->
        fun ~context:(x447 : Node_vm.Vm.Context.t) ->
          MessagePort.t_of_js
            (Ojs.call Import.worker_threads "moveMessagePortToContext"
               [|(MessagePort.t_to_js x446);(Node_vm.Vm.Context.t_to_js x447)|])
    let (receive_message_on_port :
      port:MessagePort.t -> AnonymousInterface0.t or_undefined) =
      fun ~port:(x448 : MessagePort.t) ->
        or_undefined_of_js AnonymousInterface0.t_of_js
          (Ojs.call Import.worker_threads "receiveMessageOnPort"
             [|(MessagePort.t_to_js x448)|])
    let (is_main_thread : bool) =
      Ojs.bool_of_js
        (Ojs.get_prop_ascii Import.worker_threads "isMainThread")
    let (parent_port : MessagePort.t or_null) =
      or_null_of_js MessagePort.t_of_js
        (Ojs.get_prop_ascii Import.worker_threads "parentPort")
    let (resource_limits : ResourceLimits.t) =
      ResourceLimits.t_of_js
        (Ojs.get_prop_ascii Import.worker_threads "resourceLimits")
    let (share_env : any) =
      any_of_js (Ojs.get_prop_ascii Import.worker_threads "SHARE_ENV")
    let (thread_id : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.worker_threads "threadId")
    let (worker_data : any) =
      any_of_js (Ojs.get_prop_ascii Import.worker_threads "workerData")
  end
