[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_message : t -> any) =
      fun (x3 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x3) "message")
    let (set_message : t -> any -> unit) =
      fun (x4 : t) ->
        fun (x5 : any) ->
          Ojs.set_prop_ascii (t_to_js x4) "message" (any_to_js x5)
  end
module Worker_threads =
  struct
    let (is_main_thread : bool) =
      Ojs.bool_of_js
        (Ojs.get_prop_ascii Import.worker_threads "isMainThread")
    let (parent_port : worker_threads_MessagePort or_null) =
      or_null_of_js worker_threads_MessagePort_of_js
        (Ojs.get_prop_ascii Import.worker_threads "parentPort")
    let (resource_limits : worker_threads_ResourceLimits) =
      worker_threads_ResourceLimits_of_js
        (Ojs.get_prop_ascii Import.worker_threads "resourceLimits")
    let (share_env : any) =
      any_of_js (Ojs.get_prop_ascii Import.worker_threads "SHARE_ENV")
    let (thread_id : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.worker_threads "threadId")
    let (worker_data : any) =
      any_of_js (Ojs.get_prop_ascii Import.worker_threads "workerData")
    module MessageChannel =
      struct
        type t = worker_threads_MessageChannel
        let rec t_of_js : Ojs.t -> t =
          fun (x8 : Ojs.t) -> worker_threads_MessageChannel_of_js x8
        and t_to_js : t -> Ojs.t =
          fun (x7 : worker_threads_MessageChannel) ->
            worker_threads_MessageChannel_to_js x7
        let (get_port1 : t -> MessagePort.t) =
          fun (x9 : t) ->
            MessagePort.t_of_js (Ojs.get_prop_ascii (t_to_js x9) "port1")
        let (get_port2 : t -> MessagePort.t) =
          fun (x10 : t) ->
            MessagePort.t_of_js (Ojs.get_prop_ascii (t_to_js x10) "port2")
      end
    module TransferListItem =
      struct
        type t =
          (ArrayBuffer.t, Node_fs_promises.Fs_promises.FileHandle.t,
            MessagePort.t) union3
        let rec t_of_js : Ojs.t -> t =
          fun (x15 : Ojs.t) ->
            union3_of_js ArrayBuffer.t_of_js
              Node_fs_promises.Fs_promises.FileHandle.t_of_js
              MessagePort.t_of_js x15
        and t_to_js : t -> Ojs.t =
          fun
            (x11 :
              (ArrayBuffer.t, Node_fs_promises.Fs_promises.FileHandle.t,
                MessagePort.t) union3)
            ->
            union3_to_js ArrayBuffer.t_to_js
              Node_fs_promises.Fs_promises.FileHandle.t_to_js
              MessagePort.t_to_js x11
      end
    module MessagePort =
      struct
        type t = worker_threads_MessagePort
        let rec t_of_js : Ojs.t -> t =
          fun (x20 : Ojs.t) -> worker_threads_MessagePort_of_js x20
        and t_to_js : t -> Ojs.t =
          fun (x19 : worker_threads_MessagePort) ->
            worker_threads_MessagePort_to_js x19
        let (close : t -> unit) =
          fun (x21 : t) -> ignore (Ojs.call (t_to_js x21) "close" [||])
        let (post_message :
          t ->
            value:any ->
              ?transfer_list:TransferListItem.t list -> unit -> unit)
          =
          fun (x27 : t) ->
            fun ~value:(x22 : any) ->
              fun ?transfer_list:(x23 : TransferListItem.t list option) ->
                fun () ->
                  ignore
                    (let x28 = t_to_js x27 in
                     Ojs.call (Ojs.get_prop_ascii x28 "postMessage") "apply"
                       [|x28;((let x24 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x24 "push" [|(any_to_js x22)|]);
                               (match x23 with
                                | Some x25 ->
                                    ignore
                                      (Ojs.call x24 "push"
                                         [|(Ojs.list_to_js
                                              TransferListItem.t_to_js x25)|])
                                | None -> ());
                               x24))|])
        let (ref : t -> unit) =
          fun (x29 : t) -> ignore (Ojs.call (t_to_js x29) "ref" [||])
        let (unref : t -> unit) =
          fun (x30 : t) -> ignore (Ojs.call (t_to_js x30) "unref" [||])
        let (start : t -> unit) =
          fun (x31 : t) -> ignore (Ojs.call (t_to_js x31) "start" [||])
        let (add_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x34 : t) ->
            fun ~event:(x32 : [ `close ]) ->
              fun ~listener:(x33 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x34) "addListener"
                     [|((match x32 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x33 ()))|])
        let (add_listener' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x38 : t) ->
            fun ~event:(x35 : [ `message ]) ->
              fun ~listener:(x36 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x38) "addListener"
                     [|((match x35 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x37 : Ojs.t) -> x36 ~value:(any_of_js x37)))|])
        let (add_listener'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x42 : t) ->
            fun ~event:(x39 : [ `messageerror ]) ->
              fun ~listener:(x40 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x42) "addListener"
                     [|((match x39 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x41 : Ojs.t) -> x40 ~error:(Error.t_of_js x41)))|])
        let (add_listener''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x48 : t) ->
            fun ~event:(x43 : symbol or_string) ->
              fun ~listener:(x45 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x48) "addListener"
                     [|(or_string_to_js symbol_to_js x43);(Ojs.fun_to_js_args
                                                             (fun (x46 : _)
                                                                ->
                                                                x45
                                                                  ~args:(
                                                                  Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x46 0)))|])
        let (emit : t -> event:[ `close ] -> bool) =
          fun (x50 : t) ->
            fun ~event:(x49 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x50) "emit"
                   [|((match x49 with | `close -> Ojs.string_to_js "close"))|])
        let (emit' : t -> event:[ `message ] -> value:any -> bool) =
          fun (x53 : t) ->
            fun ~event:(x51 : [ `message ]) ->
              fun ~value:(x52 : any) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x53) "emit"
                     [|((match x51 with
                         | `message -> Ojs.string_to_js "message"));(
                       any_to_js x52)|])
        let (emit'' : t -> event:[ `messageerror ] -> error:Error.t -> bool)
          =
          fun (x56 : t) ->
            fun ~event:(x54 : [ `messageerror ]) ->
              fun ~error:(x55 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x56) "emit"
                     [|((match x54 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Error.t_to_js x55)|])
        let (emit''' : t -> event:symbol or_string -> args:any list -> bool)
          =
          fun (x62 : t) ->
            fun ~event:(x57 : symbol or_string) ->
              fun ~args:(x58 : any list) ->
                Ojs.bool_of_js
                  (let x63 = t_to_js x62 in
                   Ojs.call (Ojs.get_prop_ascii x63 "emit") "apply"
                     [|x63;((let x59 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x59 "push"
                                  [|(or_string_to_js symbol_to_js x57)|]);
                             List.iter
                               (fun (x60 : any) ->
                                  ignore
                                    (Ojs.call x59 "push" [|(any_to_js x60)|]))
                               x58;
                             x59))|])
        let (on : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x66 : t) ->
            fun ~event:(x64 : [ `close ]) ->
              fun ~listener:(x65 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x66) "on"
                     [|((match x64 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x65 ()))|])
        let (on' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x70 : t) ->
            fun ~event:(x67 : [ `message ]) ->
              fun ~listener:(x68 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x70) "on"
                     [|((match x67 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x69 : Ojs.t) -> x68 ~value:(any_of_js x69)))|])
        let (on'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x74 : t) ->
            fun ~event:(x71 : [ `messageerror ]) ->
              fun ~listener:(x72 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x74) "on"
                     [|((match x71 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x73 : Ojs.t) -> x72 ~error:(Error.t_of_js x73)))|])
        let (on''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x80 : t) ->
            fun ~event:(x75 : symbol or_string) ->
              fun ~listener:(x77 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x80) "on"
                     [|(or_string_to_js symbol_to_js x75);(Ojs.fun_to_js_args
                                                             (fun (x78 : _)
                                                                ->
                                                                x77
                                                                  ~args:(
                                                                  Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x78 0)))|])
        let (once : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x83 : t) ->
            fun ~event:(x81 : [ `close ]) ->
              fun ~listener:(x82 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x83) "once"
                     [|((match x81 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x82 ()))|])
        let (once' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x87 : t) ->
            fun ~event:(x84 : [ `message ]) ->
              fun ~listener:(x85 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x87) "once"
                     [|((match x84 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x86 : Ojs.t) -> x85 ~value:(any_of_js x86)))|])
        let (once'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x91 : t) ->
            fun ~event:(x88 : [ `messageerror ]) ->
              fun ~listener:(x89 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x91) "once"
                     [|((match x88 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x90 : Ojs.t) -> x89 ~error:(Error.t_of_js x90)))|])
        let (once''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x97 : t) ->
            fun ~event:(x92 : symbol or_string) ->
              fun ~listener:(x94 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x97) "once"
                     [|(or_string_to_js symbol_to_js x92);(Ojs.fun_to_js_args
                                                             (fun (x95 : _)
                                                                ->
                                                                x94
                                                                  ~args:(
                                                                  Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x95 0)))|])
        let (prepend_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x100 : t) ->
            fun ~event:(x98 : [ `close ]) ->
              fun ~listener:(x99 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x100) "prependListener"
                     [|((match x98 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x99 ()))|])
        let (prepend_listener' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x104 : t) ->
            fun ~event:(x101 : [ `message ]) ->
              fun ~listener:(x102 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x104) "prependListener"
                     [|((match x101 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x103 : Ojs.t) -> x102 ~value:(any_of_js x103)))|])
        let (prepend_listener'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x108 : t) ->
            fun ~event:(x105 : [ `messageerror ]) ->
              fun ~listener:(x106 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x108) "prependListener"
                     [|((match x105 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x107 : Ojs.t) ->
                            x106 ~error:(Error.t_of_js x107)))|])
        let (prepend_listener''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x114 : t) ->
            fun ~event:(x109 : symbol or_string) ->
              fun ~listener:(x111 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x114) "prependListener"
                     [|(or_string_to_js symbol_to_js x109);(Ojs.fun_to_js_args
                                                              (fun (x112 : _)
                                                                 ->
                                                                 x111
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x112 0)))|])
        let (prepend_once_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x117 : t) ->
            fun ~event:(x115 : [ `close ]) ->
              fun ~listener:(x116 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x117) "prependOnceListener"
                     [|((match x115 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x116 ()))|])
        let (prepend_once_listener' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x121 : t) ->
            fun ~event:(x118 : [ `message ]) ->
              fun ~listener:(x119 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x121) "prependOnceListener"
                     [|((match x118 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x120 : Ojs.t) -> x119 ~value:(any_of_js x120)))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x125 : t) ->
            fun ~event:(x122 : [ `messageerror ]) ->
              fun ~listener:(x123 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x125) "prependOnceListener"
                     [|((match x122 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x124 : Ojs.t) ->
                            x123 ~error:(Error.t_of_js x124)))|])
        let (prepend_once_listener''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x131 : t) ->
            fun ~event:(x126 : symbol or_string) ->
              fun ~listener:(x128 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x131) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x126);(Ojs.fun_to_js_args
                                                              (fun (x129 : _)
                                                                 ->
                                                                 x128
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x129 0)))|])
        let (remove_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x134 : t) ->
            fun ~event:(x132 : [ `close ]) ->
              fun ~listener:(x133 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x134) "removeListener"
                     [|((match x132 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x133 ()))|])
        let (remove_listener' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x138 : t) ->
            fun ~event:(x135 : [ `message ]) ->
              fun ~listener:(x136 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x138) "removeListener"
                     [|((match x135 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x137 : Ojs.t) -> x136 ~value:(any_of_js x137)))|])
        let (remove_listener'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x142 : t) ->
            fun ~event:(x139 : [ `messageerror ]) ->
              fun ~listener:(x140 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x142) "removeListener"
                     [|((match x139 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x141 : Ojs.t) ->
                            x140 ~error:(Error.t_of_js x141)))|])
        let (remove_listener''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x148 : t) ->
            fun ~event:(x143 : symbol or_string) ->
              fun ~listener:(x145 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x148) "removeListener"
                     [|(or_string_to_js symbol_to_js x143);(Ojs.fun_to_js_args
                                                              (fun (x146 : _)
                                                                 ->
                                                                 x145
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x146 0)))|])
        let (off : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x151 : t) ->
            fun ~event:(x149 : [ `close ]) ->
              fun ~listener:(x150 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x151) "off"
                     [|((match x149 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x150 ()))|])
        let (off' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x155 : t) ->
            fun ~event:(x152 : [ `message ]) ->
              fun ~listener:(x153 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x155) "off"
                     [|((match x152 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x154 : Ojs.t) -> x153 ~value:(any_of_js x154)))|])
        let (off'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x159 : t) ->
            fun ~event:(x156 : [ `messageerror ]) ->
              fun ~listener:(x157 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x159) "off"
                     [|((match x156 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x158 : Ojs.t) ->
                            x157 ~error:(Error.t_of_js x158)))|])
        let (off''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x165 : t) ->
            fun ~event:(x160 : symbol or_string) ->
              fun ~listener:(x162 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x165) "off"
                     [|(or_string_to_js symbol_to_js x160);(Ojs.fun_to_js_args
                                                              (fun (x163 : _)
                                                                 ->
                                                                 x162
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x163 0)))|])
        let (cast : t -> Node_events.Events.EventEmitter.t) =
          fun (x166 : t) ->
            Node_events.Events.EventEmitter.t_of_js (t_to_js x166)
      end
    module WorkerOptions =
      struct
        type t = worker_threads_WorkerOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x168 : Ojs.t) -> worker_threads_WorkerOptions_of_js x168
        and t_to_js : t -> Ojs.t =
          fun (x167 : worker_threads_WorkerOptions) ->
            worker_threads_WorkerOptions_to_js x167
        let (get_argv : t -> any list) =
          fun (x169 : t) ->
            Ojs.list_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x169) "argv")
        let (set_argv : t -> any list -> unit) =
          fun (x171 : t) ->
            fun (x172 : any list) ->
              Ojs.set_prop_ascii (t_to_js x171) "argv"
                (Ojs.list_to_js any_to_js x172)
        let (get_env : t -> (string Dict.t, any) union2) =
          fun (x174 : t) ->
            union2_of_js
              (fun (x175 : Ojs.t) -> Dict.t_of_js Ojs.string_of_js x175)
              any_of_js (Ojs.get_prop_ascii (t_to_js x174) "env")
        let (set_env : t -> (string Dict.t, any) union2 -> unit) =
          fun (x178 : t) ->
            fun (x179 : (string Dict.t, any) union2) ->
              Ojs.set_prop_ascii (t_to_js x178) "env"
                (union2_to_js
                   (fun (x180 : string Dict.t) ->
                      Dict.t_to_js Ojs.string_to_js x180) any_to_js x179)
        let (get_eval : t -> bool) =
          fun (x183 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x183) "eval")
        let (set_eval : t -> bool -> unit) =
          fun (x184 : t) ->
            fun (x185 : bool) ->
              Ojs.set_prop_ascii (t_to_js x184) "eval" (Ojs.bool_to_js x185)
        let (get_worker_data : t -> any) =
          fun (x186 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x186) "workerData")
        let (set_worker_data : t -> any -> unit) =
          fun (x187 : t) ->
            fun (x188 : any) ->
              Ojs.set_prop_ascii (t_to_js x187) "workerData" (any_to_js x188)
        let (get_stdin : t -> bool) =
          fun (x189 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x189) "stdin")
        let (set_stdin : t -> bool -> unit) =
          fun (x190 : t) ->
            fun (x191 : bool) ->
              Ojs.set_prop_ascii (t_to_js x190) "stdin" (Ojs.bool_to_js x191)
        let (get_stdout : t -> bool) =
          fun (x192 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x192) "stdout")
        let (set_stdout : t -> bool -> unit) =
          fun (x193 : t) ->
            fun (x194 : bool) ->
              Ojs.set_prop_ascii (t_to_js x193) "stdout"
                (Ojs.bool_to_js x194)
        let (get_stderr : t -> bool) =
          fun (x195 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x195) "stderr")
        let (set_stderr : t -> bool -> unit) =
          fun (x196 : t) ->
            fun (x197 : bool) ->
              Ojs.set_prop_ascii (t_to_js x196) "stderr"
                (Ojs.bool_to_js x197)
        let (get_exec_argv : t -> string list) =
          fun (x198 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x198) "execArgv")
        let (set_exec_argv : t -> string list -> unit) =
          fun (x200 : t) ->
            fun (x201 : string list) ->
              Ojs.set_prop_ascii (t_to_js x200) "execArgv"
                (Ojs.list_to_js Ojs.string_to_js x201)
        let (get_resource_limits : t -> ResourceLimits.t) =
          fun (x203 : t) ->
            ResourceLimits.t_of_js
              (Ojs.get_prop_ascii (t_to_js x203) "resourceLimits")
        let (set_resource_limits : t -> ResourceLimits.t -> unit) =
          fun (x204 : t) ->
            fun (x205 : ResourceLimits.t) ->
              Ojs.set_prop_ascii (t_to_js x204) "resourceLimits"
                (ResourceLimits.t_to_js x205)
        let (get_transfer_list : t -> TransferListItem.t list) =
          fun (x206 : t) ->
            Ojs.list_of_js TransferListItem.t_of_js
              (Ojs.get_prop_ascii (t_to_js x206) "transferList")
        let (set_transfer_list : t -> TransferListItem.t list -> unit) =
          fun (x208 : t) ->
            fun (x209 : TransferListItem.t list) ->
              Ojs.set_prop_ascii (t_to_js x208) "transferList"
                (Ojs.list_to_js TransferListItem.t_to_js x209)
        let (get_track_unmanaged_fds : t -> bool) =
          fun (x211 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x211) "trackUnmanagedFds")
        let (set_track_unmanaged_fds : t -> bool -> unit) =
          fun (x212 : t) ->
            fun (x213 : bool) ->
              Ojs.set_prop_ascii (t_to_js x212) "trackUnmanagedFds"
                (Ojs.bool_to_js x213)
      end
    module ResourceLimits =
      struct
        type t = worker_threads_ResourceLimits
        let rec t_of_js : Ojs.t -> t =
          fun (x215 : Ojs.t) -> worker_threads_ResourceLimits_of_js x215
        and t_to_js : t -> Ojs.t =
          fun (x214 : worker_threads_ResourceLimits) ->
            worker_threads_ResourceLimits_to_js x214
        let (get_max_young_generation_size_mb : t -> int) =
          fun (x216 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x216) "maxYoungGenerationSizeMb")
        let (set_max_young_generation_size_mb : t -> int -> unit) =
          fun (x217 : t) ->
            fun (x218 : int) ->
              Ojs.set_prop_ascii (t_to_js x217) "maxYoungGenerationSizeMb"
                (Ojs.int_to_js x218)
        let (get_max_old_generation_size_mb : t -> int) =
          fun (x219 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x219) "maxOldGenerationSizeMb")
        let (set_max_old_generation_size_mb : t -> int -> unit) =
          fun (x220 : t) ->
            fun (x221 : int) ->
              Ojs.set_prop_ascii (t_to_js x220) "maxOldGenerationSizeMb"
                (Ojs.int_to_js x221)
        let (get_code_range_size_mb : t -> int) =
          fun (x222 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x222) "codeRangeSizeMb")
        let (set_code_range_size_mb : t -> int -> unit) =
          fun (x223 : t) ->
            fun (x224 : int) ->
              Ojs.set_prop_ascii (t_to_js x223) "codeRangeSizeMb"
                (Ojs.int_to_js x224)
        let (get_stack_size_mb : t -> int) =
          fun (x225 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x225) "stackSizeMb")
        let (set_stack_size_mb : t -> int -> unit) =
          fun (x226 : t) ->
            fun (x227 : int) ->
              Ojs.set_prop_ascii (t_to_js x226) "stackSizeMb"
                (Ojs.int_to_js x227)
      end
    module Worker =
      struct
        type t = worker_threads_Worker
        let rec t_of_js : Ojs.t -> t =
          fun (x229 : Ojs.t) -> worker_threads_Worker_of_js x229
        and t_to_js : t -> Ojs.t =
          fun (x228 : worker_threads_Worker) ->
            worker_threads_Worker_to_js x228
        let (get_stdin : t -> Node_stream.Stream.Writable.t or_null) =
          fun (x230 : t) ->
            or_null_of_js Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x230) "stdin")
        let (get_stdout : t -> Node_stream.Stream.Writable.t) =
          fun (x232 : t) ->
            Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x232) "stdout")
        let (get_stderr : t -> Node_stream.Stream.Writable.t) =
          fun (x233 : t) ->
            Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x233) "stderr")
        let (get_thread_id : t -> int) =
          fun (x234 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x234) "threadId")
        let (get_resource_limits : t -> ResourceLimits.t) =
          fun (x235 : t) ->
            ResourceLimits.t_of_js
              (Ojs.get_prop_ascii (t_to_js x235) "resourceLimits")
        let (create :
          filename:Node_url.Url.Url.t or_string ->
            ?options:WorkerOptions.t -> unit -> t)
          =
          fun ~filename:(x236 : Node_url.Url.Url.t or_string) ->
            fun ?options:(x237 : WorkerOptions.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Import.worker_threads "Worker")
                     (let x238 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x238 "push"
                           [|(or_string_to_js Node_url.Url.Url.t_to_js x236)|]);
                      (match x237 with
                       | Some x239 ->
                           ignore
                             (Ojs.call x238 "push"
                                [|(WorkerOptions.t_to_js x239)|])
                       | None -> ());
                      x238))
        let (post_message :
          t ->
            value:any ->
              ?transfer_list:TransferListItem.t list -> unit -> unit)
          =
          fun (x246 : t) ->
            fun ~value:(x241 : any) ->
              fun ?transfer_list:(x242 : TransferListItem.t list option) ->
                fun () ->
                  ignore
                    (let x247 = t_to_js x246 in
                     Ojs.call (Ojs.get_prop_ascii x247 "postMessage") "apply"
                       [|x247;((let x243 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x243 "push" [|(any_to_js x241)|]);
                                (match x242 with
                                 | Some x244 ->
                                     ignore
                                       (Ojs.call x243 "push"
                                          [|(Ojs.list_to_js
                                               TransferListItem.t_to_js x244)|])
                                 | None -> ());
                                x243))|])
        let (ref : t -> unit) =
          fun (x248 : t) -> ignore (Ojs.call (t_to_js x248) "ref" [||])
        let (unref : t -> unit) =
          fun (x249 : t) -> ignore (Ojs.call (t_to_js x249) "unref" [||])
        let (terminate : t -> int Promise.t) =
          fun (x250 : t) ->
            Promise.t_of_js Ojs.int_of_js
              (Ojs.call (t_to_js x250) "terminate" [||])
        let (get_heap_snapshot :
          t -> Node_stream.Stream.Writable.t Promise.t) =
          fun (x252 : t) ->
            Promise.t_of_js Node_stream.Stream.Writable.t_of_js
              (Ojs.call (t_to_js x252) "getHeapSnapshot" [||])
        let (add_listener :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x257 : t) ->
            fun ~event:(x254 : [ `error ]) ->
              fun ~listener:(x255 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x257) "addListener"
                     [|((match x254 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x256 : Ojs.t) ->
                            x255 ~err:(Error.t_of_js x256)))|])
        let (add_listener' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x261 : t) ->
            fun ~event:(x258 : [ `exit ]) ->
              fun ~listener:(x259 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x261) "addListener"
                     [|((match x258 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x260 : Ojs.t) ->
                            x259 ~exitCode:(Ojs.int_of_js x260)))|])
        let (add_listener'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x265 : t) ->
            fun ~event:(x262 : [ `message ]) ->
              fun ~listener:(x263 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x265) "addListener"
                     [|((match x262 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x264 : Ojs.t) -> x263 ~value:(any_of_js x264)))|])
        let (add_listener''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x269 : t) ->
            fun ~event:(x266 : [ `messageerror ]) ->
              fun ~listener:(x267 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x269) "addListener"
                     [|((match x266 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x268 : Ojs.t) ->
                            x267 ~error:(Error.t_of_js x268)))|])
        let (add_listener'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x272 : t) ->
            fun ~event:(x270 : [ `online ]) ->
              fun ~listener:(x271 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x272) "addListener"
                     [|((match x270 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x271 ()))|])
        let (add_listener''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x278 : t) ->
            fun ~event:(x273 : symbol or_string) ->
              fun ~listener:(x275 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x278) "addListener"
                     [|(or_string_to_js symbol_to_js x273);(Ojs.fun_to_js_args
                                                              (fun (x276 : _)
                                                                 ->
                                                                 x275
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x276 0)))|])
        let (emit : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x281 : t) ->
            fun ~event:(x279 : [ `error ]) ->
              fun ~err:(x280 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x281) "emit"
                     [|((match x279 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x280)|])
        let (emit' : t -> event:[ `exit ] -> exit_code:int -> bool) =
          fun (x284 : t) ->
            fun ~event:(x282 : [ `exit ]) ->
              fun ~exit_code:(x283 : int) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x284) "emit"
                     [|((match x282 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.int_to_js x283)|])
        let (emit'' : t -> event:[ `message ] -> value:any -> bool) =
          fun (x287 : t) ->
            fun ~event:(x285 : [ `message ]) ->
              fun ~value:(x286 : any) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x287) "emit"
                     [|((match x285 with
                         | `message -> Ojs.string_to_js "message"));(
                       any_to_js x286)|])
        let (emit''' : t -> event:[ `messageerror ] -> error:Error.t -> bool)
          =
          fun (x290 : t) ->
            fun ~event:(x288 : [ `messageerror ]) ->
              fun ~error:(x289 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x290) "emit"
                     [|((match x288 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Error.t_to_js x289)|])
        let (emit'''' : t -> event:[ `online ] -> bool) =
          fun (x292 : t) ->
            fun ~event:(x291 : [ `online ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x292) "emit"
                   [|((match x291 with | `online -> Ojs.string_to_js "online"))|])
        let (emit''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x298 : t) ->
            fun ~event:(x293 : symbol or_string) ->
              fun ~args:(x294 : any list) ->
                Ojs.bool_of_js
                  (let x299 = t_to_js x298 in
                   Ojs.call (Ojs.get_prop_ascii x299 "emit") "apply"
                     [|x299;((let x295 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x295 "push"
                                   [|(or_string_to_js symbol_to_js x293)|]);
                              List.iter
                                (fun (x296 : any) ->
                                   ignore
                                     (Ojs.call x295 "push"
                                        [|(any_to_js x296)|])) x294;
                              x295))|])
        let (on :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x303 : t) ->
            fun ~event:(x300 : [ `error ]) ->
              fun ~listener:(x301 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x303) "on"
                     [|((match x300 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x302 : Ojs.t) ->
                            x301 ~err:(Error.t_of_js x302)))|])
        let (on' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x307 : t) ->
            fun ~event:(x304 : [ `exit ]) ->
              fun ~listener:(x305 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x307) "on"
                     [|((match x304 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x306 : Ojs.t) ->
                            x305 ~exitCode:(Ojs.int_of_js x306)))|])
        let (on'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x311 : t) ->
            fun ~event:(x308 : [ `message ]) ->
              fun ~listener:(x309 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x311) "on"
                     [|((match x308 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x310 : Ojs.t) -> x309 ~value:(any_of_js x310)))|])
        let (on''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x315 : t) ->
            fun ~event:(x312 : [ `messageerror ]) ->
              fun ~listener:(x313 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x315) "on"
                     [|((match x312 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x314 : Ojs.t) ->
                            x313 ~error:(Error.t_of_js x314)))|])
        let (on'''' : t -> event:[ `online ] -> listener:(unit -> unit) -> t)
          =
          fun (x318 : t) ->
            fun ~event:(x316 : [ `online ]) ->
              fun ~listener:(x317 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x318) "on"
                     [|((match x316 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x317 ()))|])
        let (on''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x324 : t) ->
            fun ~event:(x319 : symbol or_string) ->
              fun ~listener:(x321 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x324) "on"
                     [|(or_string_to_js symbol_to_js x319);(Ojs.fun_to_js_args
                                                              (fun (x322 : _)
                                                                 ->
                                                                 x321
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x322 0)))|])
        let (once :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x328 : t) ->
            fun ~event:(x325 : [ `error ]) ->
              fun ~listener:(x326 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x328) "once"
                     [|((match x325 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x327 : Ojs.t) ->
                            x326 ~err:(Error.t_of_js x327)))|])
        let (once' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x332 : t) ->
            fun ~event:(x329 : [ `exit ]) ->
              fun ~listener:(x330 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x332) "once"
                     [|((match x329 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x331 : Ojs.t) ->
                            x330 ~exitCode:(Ojs.int_of_js x331)))|])
        let (once'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x336 : t) ->
            fun ~event:(x333 : [ `message ]) ->
              fun ~listener:(x334 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x336) "once"
                     [|((match x333 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x335 : Ojs.t) -> x334 ~value:(any_of_js x335)))|])
        let (once''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x340 : t) ->
            fun ~event:(x337 : [ `messageerror ]) ->
              fun ~listener:(x338 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x340) "once"
                     [|((match x337 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x339 : Ojs.t) ->
                            x338 ~error:(Error.t_of_js x339)))|])
        let (once'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x343 : t) ->
            fun ~event:(x341 : [ `online ]) ->
              fun ~listener:(x342 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x343) "once"
                     [|((match x341 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x342 ()))|])
        let (once''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x349 : t) ->
            fun ~event:(x344 : symbol or_string) ->
              fun ~listener:(x346 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x349) "once"
                     [|(or_string_to_js symbol_to_js x344);(Ojs.fun_to_js_args
                                                              (fun (x347 : _)
                                                                 ->
                                                                 x346
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x347 0)))|])
        let (prepend_listener :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x353 : t) ->
            fun ~event:(x350 : [ `error ]) ->
              fun ~listener:(x351 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x353) "prependListener"
                     [|((match x350 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x352 : Ojs.t) ->
                            x351 ~err:(Error.t_of_js x352)))|])
        let (prepend_listener' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x357 : t) ->
            fun ~event:(x354 : [ `exit ]) ->
              fun ~listener:(x355 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x357) "prependListener"
                     [|((match x354 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x356 : Ojs.t) ->
                            x355 ~exitCode:(Ojs.int_of_js x356)))|])
        let (prepend_listener'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x361 : t) ->
            fun ~event:(x358 : [ `message ]) ->
              fun ~listener:(x359 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x361) "prependListener"
                     [|((match x358 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x360 : Ojs.t) -> x359 ~value:(any_of_js x360)))|])
        let (prepend_listener''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x365 : t) ->
            fun ~event:(x362 : [ `messageerror ]) ->
              fun ~listener:(x363 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x365) "prependListener"
                     [|((match x362 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x364 : Ojs.t) ->
                            x363 ~error:(Error.t_of_js x364)))|])
        let (prepend_listener'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x368 : t) ->
            fun ~event:(x366 : [ `online ]) ->
              fun ~listener:(x367 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x368) "prependListener"
                     [|((match x366 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x367 ()))|])
        let (prepend_listener''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x374 : t) ->
            fun ~event:(x369 : symbol or_string) ->
              fun ~listener:(x371 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x374) "prependListener"
                     [|(or_string_to_js symbol_to_js x369);(Ojs.fun_to_js_args
                                                              (fun (x372 : _)
                                                                 ->
                                                                 x371
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x372 0)))|])
        let (prepend_once_listener :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x378 : t) ->
            fun ~event:(x375 : [ `error ]) ->
              fun ~listener:(x376 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x378) "prependOnceListener"
                     [|((match x375 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x377 : Ojs.t) ->
                            x376 ~err:(Error.t_of_js x377)))|])
        let (prepend_once_listener' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x382 : t) ->
            fun ~event:(x379 : [ `exit ]) ->
              fun ~listener:(x380 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x382) "prependOnceListener"
                     [|((match x379 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x381 : Ojs.t) ->
                            x380 ~exitCode:(Ojs.int_of_js x381)))|])
        let (prepend_once_listener'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x386 : t) ->
            fun ~event:(x383 : [ `message ]) ->
              fun ~listener:(x384 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x386) "prependOnceListener"
                     [|((match x383 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x385 : Ojs.t) -> x384 ~value:(any_of_js x385)))|])
        let (prepend_once_listener''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x390 : t) ->
            fun ~event:(x387 : [ `messageerror ]) ->
              fun ~listener:(x388 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x390) "prependOnceListener"
                     [|((match x387 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x389 : Ojs.t) ->
                            x388 ~error:(Error.t_of_js x389)))|])
        let (prepend_once_listener'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x393 : t) ->
            fun ~event:(x391 : [ `online ]) ->
              fun ~listener:(x392 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x393) "prependOnceListener"
                     [|((match x391 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x392 ()))|])
        let (prepend_once_listener''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x399 : t) ->
            fun ~event:(x394 : symbol or_string) ->
              fun ~listener:(x396 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x399) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x394);(Ojs.fun_to_js_args
                                                              (fun (x397 : _)
                                                                 ->
                                                                 x396
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x397 0)))|])
        let (remove_listener :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x403 : t) ->
            fun ~event:(x400 : [ `error ]) ->
              fun ~listener:(x401 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x403) "removeListener"
                     [|((match x400 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x402 : Ojs.t) ->
                            x401 ~err:(Error.t_of_js x402)))|])
        let (remove_listener' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x407 : t) ->
            fun ~event:(x404 : [ `exit ]) ->
              fun ~listener:(x405 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x407) "removeListener"
                     [|((match x404 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x406 : Ojs.t) ->
                            x405 ~exitCode:(Ojs.int_of_js x406)))|])
        let (remove_listener'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x411 : t) ->
            fun ~event:(x408 : [ `message ]) ->
              fun ~listener:(x409 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x411) "removeListener"
                     [|((match x408 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x410 : Ojs.t) -> x409 ~value:(any_of_js x410)))|])
        let (remove_listener''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x415 : t) ->
            fun ~event:(x412 : [ `messageerror ]) ->
              fun ~listener:(x413 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x415) "removeListener"
                     [|((match x412 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x414 : Ojs.t) ->
                            x413 ~error:(Error.t_of_js x414)))|])
        let (remove_listener'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x418 : t) ->
            fun ~event:(x416 : [ `online ]) ->
              fun ~listener:(x417 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x418) "removeListener"
                     [|((match x416 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x417 ()))|])
        let (remove_listener''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x424 : t) ->
            fun ~event:(x419 : symbol or_string) ->
              fun ~listener:(x421 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x424) "removeListener"
                     [|(or_string_to_js symbol_to_js x419);(Ojs.fun_to_js_args
                                                              (fun (x422 : _)
                                                                 ->
                                                                 x421
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x422 0)))|])
        let (off :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x428 : t) ->
            fun ~event:(x425 : [ `error ]) ->
              fun ~listener:(x426 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x428) "off"
                     [|((match x425 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x427 : Ojs.t) ->
                            x426 ~err:(Error.t_of_js x427)))|])
        let (off' :
          t -> event:[ `exit ] -> listener:(exitCode:int -> unit) -> t) =
          fun (x432 : t) ->
            fun ~event:(x429 : [ `exit ]) ->
              fun ~listener:(x430 : exitCode:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x432) "off"
                     [|((match x429 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x431 : Ojs.t) ->
                            x430 ~exitCode:(Ojs.int_of_js x431)))|])
        let (off'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x436 : t) ->
            fun ~event:(x433 : [ `message ]) ->
              fun ~listener:(x434 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x436) "off"
                     [|((match x433 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x435 : Ojs.t) -> x434 ~value:(any_of_js x435)))|])
        let (off''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x440 : t) ->
            fun ~event:(x437 : [ `messageerror ]) ->
              fun ~listener:(x438 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x440) "off"
                     [|((match x437 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x439 : Ojs.t) ->
                            x438 ~error:(Error.t_of_js x439)))|])
        let (off'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x443 : t) ->
            fun ~event:(x441 : [ `online ]) ->
              fun ~listener:(x442 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x443) "off"
                     [|((match x441 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x442 ()))|])
        let (off''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x449 : t) ->
            fun ~event:(x444 : symbol or_string) ->
              fun ~listener:(x446 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x449) "off"
                     [|(or_string_to_js symbol_to_js x444);(Ojs.fun_to_js_args
                                                              (fun (x447 : _)
                                                                 ->
                                                                 x446
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x447 0)))|])
        let (cast : t -> Node_events.Events.EventEmitter.t) =
          fun (x450 : t) ->
            Node_events.Events.EventEmitter.t_of_js (t_to_js x450)
      end
    let (mark_as_untransferable : object_:untyped_object -> unit) =
      fun ~object_:(x451 : untyped_object) ->
        ignore
          (Ojs.call Import.worker_threads "markAsUntransferable"
             [|(untyped_object_to_js x451)|])
    let (move_message_port_to_context :
      port:MessagePort.t -> context:Node_vm.Vm.Context.t -> MessagePort.t) =
      fun ~port:(x452 : MessagePort.t) ->
        fun ~context:(x453 : Node_vm.Vm.Context.t) ->
          MessagePort.t_of_js
            (Ojs.call Import.worker_threads "moveMessagePortToContext"
               [|(MessagePort.t_to_js x452);(Node_vm.Vm.Context.t_to_js x453)|])
    let (receive_message_on_port :
      port:MessagePort.t -> AnonymousInterface0.t or_undefined) =
      fun ~port:(x454 : MessagePort.t) ->
        or_undefined_of_js AnonymousInterface0.t_of_js
          (Ojs.call Import.worker_threads "receiveMessageOnPort"
             [|(MessagePort.t_to_js x454)|])
  end
