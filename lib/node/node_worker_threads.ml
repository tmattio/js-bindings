[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type worker_threads_MessageChannel =
          [ `Worker_threads_MessageChannel ] intf
        and worker_threads_MessagePort = [ `Worker_threads_MessagePort ] intf
        and worker_threads_ResourceLimits =
          [ `Worker_threads_ResourceLimits ] intf
        and worker_threads_TransferListItem =
          (ArrayBuffer.t, Node_fs_promises.Fs_promises.FileHandle.t,
            worker_threads_MessagePort) union3
        and worker_threads_Worker = [ `Worker_threads_Worker ] intf
        and worker_threads_WorkerOptions =
          [ `Worker_threads_WorkerOptions ] intf
        let rec worker_threads_MessageChannel_of_js :
          Ojs.t -> worker_threads_MessageChannel = Obj.magic
        and worker_threads_MessageChannel_to_js :
          worker_threads_MessageChannel -> Ojs.t = Obj.magic
        and worker_threads_MessagePort_of_js :
          Ojs.t -> worker_threads_MessagePort = Obj.magic
        and worker_threads_MessagePort_to_js :
          worker_threads_MessagePort -> Ojs.t = Obj.magic
        and worker_threads_ResourceLimits_of_js :
          Ojs.t -> worker_threads_ResourceLimits = Obj.magic
        and worker_threads_ResourceLimits_to_js :
          worker_threads_ResourceLimits -> Ojs.t = Obj.magic
        and worker_threads_TransferListItem_of_js :
          Ojs.t -> worker_threads_TransferListItem =
          fun (x5 : Ojs.t) ->
            union3_of_js ArrayBuffer.t_of_js
              Node_fs_promises.Fs_promises.FileHandle.t_of_js
              worker_threads_MessagePort_of_js x5
        and worker_threads_TransferListItem_to_js :
          worker_threads_TransferListItem -> Ojs.t =
          fun
            (x1 :
              (ArrayBuffer.t, Node_fs_promises.Fs_promises.FileHandle.t,
                worker_threads_MessagePort) union3)
            ->
            union3_to_js ArrayBuffer.t_to_js
              Node_fs_promises.Fs_promises.FileHandle.t_to_js
              worker_threads_MessagePort_to_js x1
        and worker_threads_Worker_of_js : Ojs.t -> worker_threads_Worker =
          Obj.magic
        and worker_threads_Worker_to_js : worker_threads_Worker -> Ojs.t =
          Obj.magic
        and worker_threads_WorkerOptions_of_js :
          Ojs.t -> worker_threads_WorkerOptions = Obj.magic
        and worker_threads_WorkerOptions_to_js :
          worker_threads_WorkerOptions -> Ojs.t = Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x10 : Ojs.t) -> anonymous_interface_0_of_js x10
    and t_to_js : t -> Ojs.t =
      fun (x9 : anonymous_interface_0) -> anonymous_interface_0_to_js x9
    let (get_message : t -> any) =
      fun (x11 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x11) "message")
    let (set_message : t -> any -> unit) =
      fun (x12 : t) ->
        fun (x13 : any) ->
          Ojs.set_prop_ascii (t_to_js x12) "message" (any_to_js x13)
  end
module Worker_threads =
  struct
    let (isMainThread : bool) =
      Ojs.bool_of_js
        (Ojs.get_prop_ascii Import.worker_threads "isMainThread")
    let (parentPort : worker_threads_MessagePort or_null) =
      or_null_of_js worker_threads_MessagePort_of_js
        (Ojs.get_prop_ascii Import.worker_threads "parentPort")
    let (resourceLimits : worker_threads_ResourceLimits) =
      worker_threads_ResourceLimits_of_js
        (Ojs.get_prop_ascii Import.worker_threads "resourceLimits")
    let (sHARE_ENV : any) =
      any_of_js (Ojs.get_prop_ascii Import.worker_threads "SHARE_ENV")
    let (threadId : float) =
      Ojs.float_of_js (Ojs.get_prop_ascii Import.worker_threads "threadId")
    let (workerData : any) =
      any_of_js (Ojs.get_prop_ascii Import.worker_threads "workerData")
    module MessageChannel =
      struct
        type t = worker_threads_MessageChannel
        let rec t_of_js : Ojs.t -> t =
          fun (x16 : Ojs.t) -> worker_threads_MessageChannel_of_js x16
        and t_to_js : t -> Ojs.t =
          fun (x15 : worker_threads_MessageChannel) ->
            worker_threads_MessageChannel_to_js x15
        let (get_port1 : t -> worker_threads_MessagePort) =
          fun (x17 : t) ->
            worker_threads_MessagePort_of_js
              (Ojs.get_prop_ascii (t_to_js x17) "port1")
        let (get_port2 : t -> worker_threads_MessagePort) =
          fun (x18 : t) ->
            worker_threads_MessagePort_of_js
              (Ojs.get_prop_ascii (t_to_js x18) "port2")
      end
    module TransferListItem =
      struct
        type t = worker_threads_TransferListItem
        let rec t_of_js : Ojs.t -> t =
          fun (x20 : Ojs.t) -> worker_threads_TransferListItem_of_js x20
        and t_to_js : t -> Ojs.t =
          fun (x19 : worker_threads_TransferListItem) ->
            worker_threads_TransferListItem_to_js x19
      end
    module MessagePort =
      struct
        type t = worker_threads_MessagePort
        let rec t_of_js : Ojs.t -> t =
          fun (x22 : Ojs.t) -> worker_threads_MessagePort_of_js x22
        and t_to_js : t -> Ojs.t =
          fun (x21 : worker_threads_MessagePort) ->
            worker_threads_MessagePort_to_js x21
        let (close : t -> unit) =
          fun (x23 : t) -> ignore (Ojs.call (t_to_js x23) "close" [||])
        let (postMessage :
          t ->
            value:any ->
              ?transferList:worker_threads_TransferListItem list ->
                unit -> unit)
          =
          fun (x29 : t) ->
            fun ~value:(x24 : any) ->
              fun
                ?transferList:(x25 :
                                worker_threads_TransferListItem list option)
                ->
                fun () ->
                  ignore
                    (let x30 = t_to_js x29 in
                     Ojs.call (Ojs.get_prop_ascii x30 "postMessage") "apply"
                       [|x30;((let x26 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x26 "push" [|(any_to_js x24)|]);
                               (match x25 with
                                | Some x27 ->
                                    ignore
                                      (Ojs.call x26 "push"
                                         [|(Ojs.list_to_js
                                              worker_threads_TransferListItem_to_js
                                              x27)|])
                                | None -> ());
                               x26))|])
        let (ref : t -> unit) =
          fun (x31 : t) -> ignore (Ojs.call (t_to_js x31) "ref" [||])
        let (unref : t -> unit) =
          fun (x32 : t) -> ignore (Ojs.call (t_to_js x32) "unref" [||])
        let (start : t -> unit) =
          fun (x33 : t) -> ignore (Ojs.call (t_to_js x33) "start" [||])
        let (addListener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x36 : t) ->
            fun ~event:(x34 : [ `close ]) ->
              fun ~listener:(x35 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x36) "addListener"
                     [|((match x34 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x35 ()))|])
        let (addListener' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x40 : t) ->
            fun ~event:(x37 : [ `message ]) ->
              fun ~listener:(x38 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x40) "addListener"
                     [|((match x37 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x39 : Ojs.t) -> x38 ~value:(any_of_js x39)))|])
        let (addListener'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x44 : t) ->
            fun ~event:(x41 : [ `messageerror ]) ->
              fun ~listener:(x42 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x44) "addListener"
                     [|((match x41 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x43 : Ojs.t) -> x42 ~error:(Error.t_of_js x43)))|])
        let (addListener''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x50 : t) ->
            fun ~event:(x45 : symbol or_string) ->
              fun ~listener:(x47 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x50) "addListener"
                     [|(or_string_to_js symbol_to_js x45);(Ojs.fun_to_js_args
                                                             (fun (x48 : _)
                                                                ->
                                                                x47
                                                                  ~args:(
                                                                  Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x48 0)))|])
        let (emit : t -> event:[ `close ] -> bool) =
          fun (x52 : t) ->
            fun ~event:(x51 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x52) "emit"
                   [|((match x51 with | `close -> Ojs.string_to_js "close"))|])
        let (emit' : t -> event:[ `message ] -> value:any -> bool) =
          fun (x55 : t) ->
            fun ~event:(x53 : [ `message ]) ->
              fun ~value:(x54 : any) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x55) "emit"
                     [|((match x53 with
                         | `message -> Ojs.string_to_js "message"));(
                       any_to_js x54)|])
        let (emit'' : t -> event:[ `messageerror ] -> error:Error.t -> bool)
          =
          fun (x58 : t) ->
            fun ~event:(x56 : [ `messageerror ]) ->
              fun ~error:(x57 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x58) "emit"
                     [|((match x56 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Error.t_to_js x57)|])
        let (emit''' : t -> event:symbol or_string -> args:any list -> bool)
          =
          fun (x64 : t) ->
            fun ~event:(x59 : symbol or_string) ->
              fun ~args:(x60 : any list) ->
                Ojs.bool_of_js
                  (let x65 = t_to_js x64 in
                   Ojs.call (Ojs.get_prop_ascii x65 "emit") "apply"
                     [|x65;((let x61 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x61 "push"
                                  [|(or_string_to_js symbol_to_js x59)|]);
                             List.iter
                               (fun (x62 : any) ->
                                  ignore
                                    (Ojs.call x61 "push" [|(any_to_js x62)|]))
                               x60;
                             x61))|])
        let (on : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x68 : t) ->
            fun ~event:(x66 : [ `close ]) ->
              fun ~listener:(x67 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x68) "on"
                     [|((match x66 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x67 ()))|])
        let (on' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x72 : t) ->
            fun ~event:(x69 : [ `message ]) ->
              fun ~listener:(x70 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x72) "on"
                     [|((match x69 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x71 : Ojs.t) -> x70 ~value:(any_of_js x71)))|])
        let (on'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x76 : t) ->
            fun ~event:(x73 : [ `messageerror ]) ->
              fun ~listener:(x74 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x76) "on"
                     [|((match x73 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x75 : Ojs.t) -> x74 ~error:(Error.t_of_js x75)))|])
        let (on''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x82 : t) ->
            fun ~event:(x77 : symbol or_string) ->
              fun ~listener:(x79 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x82) "on"
                     [|(or_string_to_js symbol_to_js x77);(Ojs.fun_to_js_args
                                                             (fun (x80 : _)
                                                                ->
                                                                x79
                                                                  ~args:(
                                                                  Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x80 0)))|])
        let (once : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x85 : t) ->
            fun ~event:(x83 : [ `close ]) ->
              fun ~listener:(x84 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x85) "once"
                     [|((match x83 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x84 ()))|])
        let (once' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x89 : t) ->
            fun ~event:(x86 : [ `message ]) ->
              fun ~listener:(x87 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x89) "once"
                     [|((match x86 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x88 : Ojs.t) -> x87 ~value:(any_of_js x88)))|])
        let (once'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x93 : t) ->
            fun ~event:(x90 : [ `messageerror ]) ->
              fun ~listener:(x91 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x93) "once"
                     [|((match x90 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x92 : Ojs.t) -> x91 ~error:(Error.t_of_js x92)))|])
        let (once''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x99 : t) ->
            fun ~event:(x94 : symbol or_string) ->
              fun ~listener:(x96 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x99) "once"
                     [|(or_string_to_js symbol_to_js x94);(Ojs.fun_to_js_args
                                                             (fun (x97 : _)
                                                                ->
                                                                x96
                                                                  ~args:(
                                                                  Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x97 0)))|])
        let (prependListener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x102 : t) ->
            fun ~event:(x100 : [ `close ]) ->
              fun ~listener:(x101 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x102) "prependListener"
                     [|((match x100 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x101 ()))|])
        let (prependListener' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x106 : t) ->
            fun ~event:(x103 : [ `message ]) ->
              fun ~listener:(x104 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x106) "prependListener"
                     [|((match x103 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x105 : Ojs.t) -> x104 ~value:(any_of_js x105)))|])
        let (prependListener'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x110 : t) ->
            fun ~event:(x107 : [ `messageerror ]) ->
              fun ~listener:(x108 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x110) "prependListener"
                     [|((match x107 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x109 : Ojs.t) ->
                            x108 ~error:(Error.t_of_js x109)))|])
        let (prependListener''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x116 : t) ->
            fun ~event:(x111 : symbol or_string) ->
              fun ~listener:(x113 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x116) "prependListener"
                     [|(or_string_to_js symbol_to_js x111);(Ojs.fun_to_js_args
                                                              (fun (x114 : _)
                                                                 ->
                                                                 x113
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x114 0)))|])
        let (prependOnceListener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x119 : t) ->
            fun ~event:(x117 : [ `close ]) ->
              fun ~listener:(x118 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x119) "prependOnceListener"
                     [|((match x117 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x118 ()))|])
        let (prependOnceListener' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x123 : t) ->
            fun ~event:(x120 : [ `message ]) ->
              fun ~listener:(x121 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x123) "prependOnceListener"
                     [|((match x120 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x122 : Ojs.t) -> x121 ~value:(any_of_js x122)))|])
        let (prependOnceListener'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x127 : t) ->
            fun ~event:(x124 : [ `messageerror ]) ->
              fun ~listener:(x125 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x127) "prependOnceListener"
                     [|((match x124 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x126 : Ojs.t) ->
                            x125 ~error:(Error.t_of_js x126)))|])
        let (prependOnceListener''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x133 : t) ->
            fun ~event:(x128 : symbol or_string) ->
              fun ~listener:(x130 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x133) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x128);(Ojs.fun_to_js_args
                                                              (fun (x131 : _)
                                                                 ->
                                                                 x130
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x131 0)))|])
        let (removeListener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x136 : t) ->
            fun ~event:(x134 : [ `close ]) ->
              fun ~listener:(x135 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x136) "removeListener"
                     [|((match x134 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x135 ()))|])
        let (removeListener' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x140 : t) ->
            fun ~event:(x137 : [ `message ]) ->
              fun ~listener:(x138 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x140) "removeListener"
                     [|((match x137 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x139 : Ojs.t) -> x138 ~value:(any_of_js x139)))|])
        let (removeListener'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x144 : t) ->
            fun ~event:(x141 : [ `messageerror ]) ->
              fun ~listener:(x142 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x144) "removeListener"
                     [|((match x141 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x143 : Ojs.t) ->
                            x142 ~error:(Error.t_of_js x143)))|])
        let (removeListener''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x150 : t) ->
            fun ~event:(x145 : symbol or_string) ->
              fun ~listener:(x147 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x150) "removeListener"
                     [|(or_string_to_js symbol_to_js x145);(Ojs.fun_to_js_args
                                                              (fun (x148 : _)
                                                                 ->
                                                                 x147
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x148 0)))|])
        let (off : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x153 : t) ->
            fun ~event:(x151 : [ `close ]) ->
              fun ~listener:(x152 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x153) "off"
                     [|((match x151 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x152 ()))|])
        let (off' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x157 : t) ->
            fun ~event:(x154 : [ `message ]) ->
              fun ~listener:(x155 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x157) "off"
                     [|((match x154 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x156 : Ojs.t) -> x155 ~value:(any_of_js x156)))|])
        let (off'' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x161 : t) ->
            fun ~event:(x158 : [ `messageerror ]) ->
              fun ~listener:(x159 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x161) "off"
                     [|((match x158 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x160 : Ojs.t) ->
                            x159 ~error:(Error.t_of_js x160)))|])
        let (off''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x167 : t) ->
            fun ~event:(x162 : symbol or_string) ->
              fun ~listener:(x164 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x167) "off"
                     [|(or_string_to_js symbol_to_js x162);(Ojs.fun_to_js_args
                                                              (fun (x165 : _)
                                                                 ->
                                                                 x164
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x165 0)))|])
        let (cast : t -> Node_events.Events.EventEmitter.t) =
          fun (x168 : t) ->
            Node_events.Events.EventEmitter.t_of_js (t_to_js x168)
      end
    module WorkerOptions =
      struct
        type t = worker_threads_WorkerOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x170 : Ojs.t) -> worker_threads_WorkerOptions_of_js x170
        and t_to_js : t -> Ojs.t =
          fun (x169 : worker_threads_WorkerOptions) ->
            worker_threads_WorkerOptions_to_js x169
        let (get_argv : t -> any list) =
          fun (x171 : t) ->
            Ojs.list_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x171) "argv")
        let (set_argv : t -> any list -> unit) =
          fun (x173 : t) ->
            fun (x174 : any list) ->
              Ojs.set_prop_ascii (t_to_js x173) "argv"
                (Ojs.list_to_js any_to_js x174)
        let (get_env : t -> (string Dict.t, any) union2) =
          fun (x176 : t) ->
            union2_of_js
              (fun (x177 : Ojs.t) -> Dict.t_of_js Ojs.string_of_js x177)
              any_of_js (Ojs.get_prop_ascii (t_to_js x176) "env")
        let (set_env : t -> (string Dict.t, any) union2 -> unit) =
          fun (x180 : t) ->
            fun (x181 : (string Dict.t, any) union2) ->
              Ojs.set_prop_ascii (t_to_js x180) "env"
                (union2_to_js
                   (fun (x182 : string Dict.t) ->
                      Dict.t_to_js Ojs.string_to_js x182) any_to_js x181)
        let (get_eval : t -> bool) =
          fun (x185 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x185) "eval")
        let (set_eval : t -> bool -> unit) =
          fun (x186 : t) ->
            fun (x187 : bool) ->
              Ojs.set_prop_ascii (t_to_js x186) "eval" (Ojs.bool_to_js x187)
        let (get_workerData : t -> any) =
          fun (x188 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x188) "workerData")
        let (set_workerData : t -> any -> unit) =
          fun (x189 : t) ->
            fun (x190 : any) ->
              Ojs.set_prop_ascii (t_to_js x189) "workerData" (any_to_js x190)
        let (get_stdin : t -> bool) =
          fun (x191 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x191) "stdin")
        let (set_stdin : t -> bool -> unit) =
          fun (x192 : t) ->
            fun (x193 : bool) ->
              Ojs.set_prop_ascii (t_to_js x192) "stdin" (Ojs.bool_to_js x193)
        let (get_stdout : t -> bool) =
          fun (x194 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x194) "stdout")
        let (set_stdout : t -> bool -> unit) =
          fun (x195 : t) ->
            fun (x196 : bool) ->
              Ojs.set_prop_ascii (t_to_js x195) "stdout"
                (Ojs.bool_to_js x196)
        let (get_stderr : t -> bool) =
          fun (x197 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x197) "stderr")
        let (set_stderr : t -> bool -> unit) =
          fun (x198 : t) ->
            fun (x199 : bool) ->
              Ojs.set_prop_ascii (t_to_js x198) "stderr"
                (Ojs.bool_to_js x199)
        let (get_execArgv : t -> string list) =
          fun (x200 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x200) "execArgv")
        let (set_execArgv : t -> string list -> unit) =
          fun (x202 : t) ->
            fun (x203 : string list) ->
              Ojs.set_prop_ascii (t_to_js x202) "execArgv"
                (Ojs.list_to_js Ojs.string_to_js x203)
        let (get_resourceLimits : t -> worker_threads_ResourceLimits) =
          fun (x205 : t) ->
            worker_threads_ResourceLimits_of_js
              (Ojs.get_prop_ascii (t_to_js x205) "resourceLimits")
        let (set_resourceLimits : t -> worker_threads_ResourceLimits -> unit)
          =
          fun (x206 : t) ->
            fun (x207 : worker_threads_ResourceLimits) ->
              Ojs.set_prop_ascii (t_to_js x206) "resourceLimits"
                (worker_threads_ResourceLimits_to_js x207)
        let (get_transferList : t -> worker_threads_TransferListItem list) =
          fun (x208 : t) ->
            Ojs.list_of_js worker_threads_TransferListItem_of_js
              (Ojs.get_prop_ascii (t_to_js x208) "transferList")
        let (set_transferList :
          t -> worker_threads_TransferListItem list -> unit) =
          fun (x210 : t) ->
            fun (x211 : worker_threads_TransferListItem list) ->
              Ojs.set_prop_ascii (t_to_js x210) "transferList"
                (Ojs.list_to_js worker_threads_TransferListItem_to_js x211)
        let (get_trackUnmanagedFds : t -> bool) =
          fun (x213 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x213) "trackUnmanagedFds")
        let (set_trackUnmanagedFds : t -> bool -> unit) =
          fun (x214 : t) ->
            fun (x215 : bool) ->
              Ojs.set_prop_ascii (t_to_js x214) "trackUnmanagedFds"
                (Ojs.bool_to_js x215)
      end
    module ResourceLimits =
      struct
        type t = worker_threads_ResourceLimits
        let rec t_of_js : Ojs.t -> t =
          fun (x217 : Ojs.t) -> worker_threads_ResourceLimits_of_js x217
        and t_to_js : t -> Ojs.t =
          fun (x216 : worker_threads_ResourceLimits) ->
            worker_threads_ResourceLimits_to_js x216
        let (get_maxYoungGenerationSizeMb : t -> float) =
          fun (x218 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x218) "maxYoungGenerationSizeMb")
        let (set_maxYoungGenerationSizeMb : t -> float -> unit) =
          fun (x219 : t) ->
            fun (x220 : float) ->
              Ojs.set_prop_ascii (t_to_js x219) "maxYoungGenerationSizeMb"
                (Ojs.float_to_js x220)
        let (get_maxOldGenerationSizeMb : t -> float) =
          fun (x221 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x221) "maxOldGenerationSizeMb")
        let (set_maxOldGenerationSizeMb : t -> float -> unit) =
          fun (x222 : t) ->
            fun (x223 : float) ->
              Ojs.set_prop_ascii (t_to_js x222) "maxOldGenerationSizeMb"
                (Ojs.float_to_js x223)
        let (get_codeRangeSizeMb : t -> float) =
          fun (x224 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x224) "codeRangeSizeMb")
        let (set_codeRangeSizeMb : t -> float -> unit) =
          fun (x225 : t) ->
            fun (x226 : float) ->
              Ojs.set_prop_ascii (t_to_js x225) "codeRangeSizeMb"
                (Ojs.float_to_js x226)
        let (get_stackSizeMb : t -> float) =
          fun (x227 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x227) "stackSizeMb")
        let (set_stackSizeMb : t -> float -> unit) =
          fun (x228 : t) ->
            fun (x229 : float) ->
              Ojs.set_prop_ascii (t_to_js x228) "stackSizeMb"
                (Ojs.float_to_js x229)
      end
    module Worker =
      struct
        type t = worker_threads_Worker
        let rec t_of_js : Ojs.t -> t =
          fun (x231 : Ojs.t) -> worker_threads_Worker_of_js x231
        and t_to_js : t -> Ojs.t =
          fun (x230 : worker_threads_Worker) ->
            worker_threads_Worker_to_js x230
        let (get_stdin : t -> Node_stream.Stream.Writable.t or_null) =
          fun (x232 : t) ->
            or_null_of_js Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x232) "stdin")
        let (get_stdout : t -> Node_stream.Stream.Writable.t) =
          fun (x234 : t) ->
            Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x234) "stdout")
        let (get_stderr : t -> Node_stream.Stream.Writable.t) =
          fun (x235 : t) ->
            Node_stream.Stream.Writable.t_of_js
              (Ojs.get_prop_ascii (t_to_js x235) "stderr")
        let (get_threadId : t -> float) =
          fun (x236 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x236) "threadId")
        let (get_resourceLimits : t -> worker_threads_ResourceLimits) =
          fun (x237 : t) ->
            worker_threads_ResourceLimits_of_js
              (Ojs.get_prop_ascii (t_to_js x237) "resourceLimits")
        let (create :
          filename:Node_url.Url.Url.t or_string ->
            ?options:worker_threads_WorkerOptions -> unit -> t)
          =
          fun ~filename:(x238 : Node_url.Url.Url.t or_string) ->
            fun ?options:(x239 : worker_threads_WorkerOptions option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Import.worker_threads "Worker")
                     (let x240 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x240 "push"
                           [|(or_string_to_js Node_url.Url.Url.t_to_js x238)|]);
                      (match x239 with
                       | Some x241 ->
                           ignore
                             (Ojs.call x240 "push"
                                [|(worker_threads_WorkerOptions_to_js x241)|])
                       | None -> ());
                      x240))
        let (postMessage :
          t ->
            value:any ->
              ?transferList:worker_threads_TransferListItem list ->
                unit -> unit)
          =
          fun (x248 : t) ->
            fun ~value:(x243 : any) ->
              fun
                ?transferList:(x244 :
                                worker_threads_TransferListItem list option)
                ->
                fun () ->
                  ignore
                    (let x249 = t_to_js x248 in
                     Ojs.call (Ojs.get_prop_ascii x249 "postMessage") "apply"
                       [|x249;((let x245 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x245 "push" [|(any_to_js x243)|]);
                                (match x244 with
                                 | Some x246 ->
                                     ignore
                                       (Ojs.call x245 "push"
                                          [|(Ojs.list_to_js
                                               worker_threads_TransferListItem_to_js
                                               x246)|])
                                 | None -> ());
                                x245))|])
        let (ref : t -> unit) =
          fun (x250 : t) -> ignore (Ojs.call (t_to_js x250) "ref" [||])
        let (unref : t -> unit) =
          fun (x251 : t) -> ignore (Ojs.call (t_to_js x251) "unref" [||])
        let (terminate : t -> float Promise.t) =
          fun (x252 : t) ->
            Promise.t_of_js Ojs.float_of_js
              (Ojs.call (t_to_js x252) "terminate" [||])
        let (getHeapSnapshot : t -> Node_stream.Stream.Writable.t Promise.t)
          =
          fun (x254 : t) ->
            Promise.t_of_js Node_stream.Stream.Writable.t_of_js
              (Ojs.call (t_to_js x254) "getHeapSnapshot" [||])
        let (addListener :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x259 : t) ->
            fun ~event:(x256 : [ `error ]) ->
              fun ~listener:(x257 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x259) "addListener"
                     [|((match x256 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x258 : Ojs.t) ->
                            x257 ~err:(Error.t_of_js x258)))|])
        let (addListener' :
          t -> event:[ `exit ] -> listener:(exitCode:float -> unit) -> t) =
          fun (x263 : t) ->
            fun ~event:(x260 : [ `exit ]) ->
              fun ~listener:(x261 : exitCode:float -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x263) "addListener"
                     [|((match x260 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x262 : Ojs.t) ->
                            x261 ~exitCode:(Ojs.float_of_js x262)))|])
        let (addListener'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x267 : t) ->
            fun ~event:(x264 : [ `message ]) ->
              fun ~listener:(x265 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x267) "addListener"
                     [|((match x264 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x266 : Ojs.t) -> x265 ~value:(any_of_js x266)))|])
        let (addListener''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x271 : t) ->
            fun ~event:(x268 : [ `messageerror ]) ->
              fun ~listener:(x269 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x271) "addListener"
                     [|((match x268 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x270 : Ojs.t) ->
                            x269 ~error:(Error.t_of_js x270)))|])
        let (addListener'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x274 : t) ->
            fun ~event:(x272 : [ `online ]) ->
              fun ~listener:(x273 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x274) "addListener"
                     [|((match x272 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x273 ()))|])
        let (addListener''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x280 : t) ->
            fun ~event:(x275 : symbol or_string) ->
              fun ~listener:(x277 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x280) "addListener"
                     [|(or_string_to_js symbol_to_js x275);(Ojs.fun_to_js_args
                                                              (fun (x278 : _)
                                                                 ->
                                                                 x277
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x278 0)))|])
        let (emit : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x283 : t) ->
            fun ~event:(x281 : [ `error ]) ->
              fun ~err:(x282 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x283) "emit"
                     [|((match x281 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x282)|])
        let (emit' : t -> event:[ `exit ] -> exitCode:float -> bool) =
          fun (x286 : t) ->
            fun ~event:(x284 : [ `exit ]) ->
              fun ~exitCode:(x285 : float) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x286) "emit"
                     [|((match x284 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.float_to_js x285)|])
        let (emit'' : t -> event:[ `message ] -> value:any -> bool) =
          fun (x289 : t) ->
            fun ~event:(x287 : [ `message ]) ->
              fun ~value:(x288 : any) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x289) "emit"
                     [|((match x287 with
                         | `message -> Ojs.string_to_js "message"));(
                       any_to_js x288)|])
        let (emit''' : t -> event:[ `messageerror ] -> error:Error.t -> bool)
          =
          fun (x292 : t) ->
            fun ~event:(x290 : [ `messageerror ]) ->
              fun ~error:(x291 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x292) "emit"
                     [|((match x290 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Error.t_to_js x291)|])
        let (emit'''' : t -> event:[ `online ] -> bool) =
          fun (x294 : t) ->
            fun ~event:(x293 : [ `online ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x294) "emit"
                   [|((match x293 with | `online -> Ojs.string_to_js "online"))|])
        let (emit''''' :
          t -> event:symbol or_string -> args:any list -> bool) =
          fun (x300 : t) ->
            fun ~event:(x295 : symbol or_string) ->
              fun ~args:(x296 : any list) ->
                Ojs.bool_of_js
                  (let x301 = t_to_js x300 in
                   Ojs.call (Ojs.get_prop_ascii x301 "emit") "apply"
                     [|x301;((let x297 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x297 "push"
                                   [|(or_string_to_js symbol_to_js x295)|]);
                              List.iter
                                (fun (x298 : any) ->
                                   ignore
                                     (Ojs.call x297 "push"
                                        [|(any_to_js x298)|])) x296;
                              x297))|])
        let (on :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x305 : t) ->
            fun ~event:(x302 : [ `error ]) ->
              fun ~listener:(x303 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x305) "on"
                     [|((match x302 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x304 : Ojs.t) ->
                            x303 ~err:(Error.t_of_js x304)))|])
        let (on' :
          t -> event:[ `exit ] -> listener:(exitCode:float -> unit) -> t) =
          fun (x309 : t) ->
            fun ~event:(x306 : [ `exit ]) ->
              fun ~listener:(x307 : exitCode:float -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x309) "on"
                     [|((match x306 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x308 : Ojs.t) ->
                            x307 ~exitCode:(Ojs.float_of_js x308)))|])
        let (on'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x313 : t) ->
            fun ~event:(x310 : [ `message ]) ->
              fun ~listener:(x311 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x313) "on"
                     [|((match x310 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x312 : Ojs.t) -> x311 ~value:(any_of_js x312)))|])
        let (on''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x317 : t) ->
            fun ~event:(x314 : [ `messageerror ]) ->
              fun ~listener:(x315 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x317) "on"
                     [|((match x314 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x316 : Ojs.t) ->
                            x315 ~error:(Error.t_of_js x316)))|])
        let (on'''' : t -> event:[ `online ] -> listener:(unit -> unit) -> t)
          =
          fun (x320 : t) ->
            fun ~event:(x318 : [ `online ]) ->
              fun ~listener:(x319 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x320) "on"
                     [|((match x318 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x319 ()))|])
        let (on''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x326 : t) ->
            fun ~event:(x321 : symbol or_string) ->
              fun ~listener:(x323 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x326) "on"
                     [|(or_string_to_js symbol_to_js x321);(Ojs.fun_to_js_args
                                                              (fun (x324 : _)
                                                                 ->
                                                                 x323
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x324 0)))|])
        let (once :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x330 : t) ->
            fun ~event:(x327 : [ `error ]) ->
              fun ~listener:(x328 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x330) "once"
                     [|((match x327 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x329 : Ojs.t) ->
                            x328 ~err:(Error.t_of_js x329)))|])
        let (once' :
          t -> event:[ `exit ] -> listener:(exitCode:float -> unit) -> t) =
          fun (x334 : t) ->
            fun ~event:(x331 : [ `exit ]) ->
              fun ~listener:(x332 : exitCode:float -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x334) "once"
                     [|((match x331 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x333 : Ojs.t) ->
                            x332 ~exitCode:(Ojs.float_of_js x333)))|])
        let (once'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x338 : t) ->
            fun ~event:(x335 : [ `message ]) ->
              fun ~listener:(x336 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x338) "once"
                     [|((match x335 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x337 : Ojs.t) -> x336 ~value:(any_of_js x337)))|])
        let (once''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x342 : t) ->
            fun ~event:(x339 : [ `messageerror ]) ->
              fun ~listener:(x340 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x342) "once"
                     [|((match x339 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x341 : Ojs.t) ->
                            x340 ~error:(Error.t_of_js x341)))|])
        let (once'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x345 : t) ->
            fun ~event:(x343 : [ `online ]) ->
              fun ~listener:(x344 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x345) "once"
                     [|((match x343 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x344 ()))|])
        let (once''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x351 : t) ->
            fun ~event:(x346 : symbol or_string) ->
              fun ~listener:(x348 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x351) "once"
                     [|(or_string_to_js symbol_to_js x346);(Ojs.fun_to_js_args
                                                              (fun (x349 : _)
                                                                 ->
                                                                 x348
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x349 0)))|])
        let (prependListener :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x355 : t) ->
            fun ~event:(x352 : [ `error ]) ->
              fun ~listener:(x353 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x355) "prependListener"
                     [|((match x352 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x354 : Ojs.t) ->
                            x353 ~err:(Error.t_of_js x354)))|])
        let (prependListener' :
          t -> event:[ `exit ] -> listener:(exitCode:float -> unit) -> t) =
          fun (x359 : t) ->
            fun ~event:(x356 : [ `exit ]) ->
              fun ~listener:(x357 : exitCode:float -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x359) "prependListener"
                     [|((match x356 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x358 : Ojs.t) ->
                            x357 ~exitCode:(Ojs.float_of_js x358)))|])
        let (prependListener'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x363 : t) ->
            fun ~event:(x360 : [ `message ]) ->
              fun ~listener:(x361 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x363) "prependListener"
                     [|((match x360 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x362 : Ojs.t) -> x361 ~value:(any_of_js x362)))|])
        let (prependListener''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x367 : t) ->
            fun ~event:(x364 : [ `messageerror ]) ->
              fun ~listener:(x365 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x367) "prependListener"
                     [|((match x364 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x366 : Ojs.t) ->
                            x365 ~error:(Error.t_of_js x366)))|])
        let (prependListener'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x370 : t) ->
            fun ~event:(x368 : [ `online ]) ->
              fun ~listener:(x369 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x370) "prependListener"
                     [|((match x368 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x369 ()))|])
        let (prependListener''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x376 : t) ->
            fun ~event:(x371 : symbol or_string) ->
              fun ~listener:(x373 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x376) "prependListener"
                     [|(or_string_to_js symbol_to_js x371);(Ojs.fun_to_js_args
                                                              (fun (x374 : _)
                                                                 ->
                                                                 x373
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x374 0)))|])
        let (prependOnceListener :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x380 : t) ->
            fun ~event:(x377 : [ `error ]) ->
              fun ~listener:(x378 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x380) "prependOnceListener"
                     [|((match x377 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x379 : Ojs.t) ->
                            x378 ~err:(Error.t_of_js x379)))|])
        let (prependOnceListener' :
          t -> event:[ `exit ] -> listener:(exitCode:float -> unit) -> t) =
          fun (x384 : t) ->
            fun ~event:(x381 : [ `exit ]) ->
              fun ~listener:(x382 : exitCode:float -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x384) "prependOnceListener"
                     [|((match x381 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x383 : Ojs.t) ->
                            x382 ~exitCode:(Ojs.float_of_js x383)))|])
        let (prependOnceListener'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x388 : t) ->
            fun ~event:(x385 : [ `message ]) ->
              fun ~listener:(x386 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x388) "prependOnceListener"
                     [|((match x385 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x387 : Ojs.t) -> x386 ~value:(any_of_js x387)))|])
        let (prependOnceListener''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x392 : t) ->
            fun ~event:(x389 : [ `messageerror ]) ->
              fun ~listener:(x390 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x392) "prependOnceListener"
                     [|((match x389 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x391 : Ojs.t) ->
                            x390 ~error:(Error.t_of_js x391)))|])
        let (prependOnceListener'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x395 : t) ->
            fun ~event:(x393 : [ `online ]) ->
              fun ~listener:(x394 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x395) "prependOnceListener"
                     [|((match x393 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x394 ()))|])
        let (prependOnceListener''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x401 : t) ->
            fun ~event:(x396 : symbol or_string) ->
              fun ~listener:(x398 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x401) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x396);(Ojs.fun_to_js_args
                                                              (fun (x399 : _)
                                                                 ->
                                                                 x398
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x399 0)))|])
        let (removeListener :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x405 : t) ->
            fun ~event:(x402 : [ `error ]) ->
              fun ~listener:(x403 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x405) "removeListener"
                     [|((match x402 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x404 : Ojs.t) ->
                            x403 ~err:(Error.t_of_js x404)))|])
        let (removeListener' :
          t -> event:[ `exit ] -> listener:(exitCode:float -> unit) -> t) =
          fun (x409 : t) ->
            fun ~event:(x406 : [ `exit ]) ->
              fun ~listener:(x407 : exitCode:float -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x409) "removeListener"
                     [|((match x406 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x408 : Ojs.t) ->
                            x407 ~exitCode:(Ojs.float_of_js x408)))|])
        let (removeListener'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x413 : t) ->
            fun ~event:(x410 : [ `message ]) ->
              fun ~listener:(x411 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x413) "removeListener"
                     [|((match x410 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x412 : Ojs.t) -> x411 ~value:(any_of_js x412)))|])
        let (removeListener''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x417 : t) ->
            fun ~event:(x414 : [ `messageerror ]) ->
              fun ~listener:(x415 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x417) "removeListener"
                     [|((match x414 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x416 : Ojs.t) ->
                            x415 ~error:(Error.t_of_js x416)))|])
        let (removeListener'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x420 : t) ->
            fun ~event:(x418 : [ `online ]) ->
              fun ~listener:(x419 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x420) "removeListener"
                     [|((match x418 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x419 ()))|])
        let (removeListener''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x426 : t) ->
            fun ~event:(x421 : symbol or_string) ->
              fun ~listener:(x423 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x426) "removeListener"
                     [|(or_string_to_js symbol_to_js x421);(Ojs.fun_to_js_args
                                                              (fun (x424 : _)
                                                                 ->
                                                                 x423
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x424 0)))|])
        let (off :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x430 : t) ->
            fun ~event:(x427 : [ `error ]) ->
              fun ~listener:(x428 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x430) "off"
                     [|((match x427 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x429 : Ojs.t) ->
                            x428 ~err:(Error.t_of_js x429)))|])
        let (off' :
          t -> event:[ `exit ] -> listener:(exitCode:float -> unit) -> t) =
          fun (x434 : t) ->
            fun ~event:(x431 : [ `exit ]) ->
              fun ~listener:(x432 : exitCode:float -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x434) "off"
                     [|((match x431 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1
                         (fun (x433 : Ojs.t) ->
                            x432 ~exitCode:(Ojs.float_of_js x433)))|])
        let (off'' :
          t -> event:[ `message ] -> listener:(value:any -> unit) -> t) =
          fun (x438 : t) ->
            fun ~event:(x435 : [ `message ]) ->
              fun ~listener:(x436 : value:any -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x438) "off"
                     [|((match x435 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 1
                         (fun (x437 : Ojs.t) -> x436 ~value:(any_of_js x437)))|])
        let (off''' :
          t ->
            event:[ `messageerror ] -> listener:(error:Error.t -> unit) -> t)
          =
          fun (x442 : t) ->
            fun ~event:(x439 : [ `messageerror ]) ->
              fun ~listener:(x440 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x442) "off"
                     [|((match x439 with
                         | `messageerror -> Ojs.string_to_js "messageerror"));(
                       Ojs.fun_to_js 1
                         (fun (x441 : Ojs.t) ->
                            x440 ~error:(Error.t_of_js x441)))|])
        let (off'''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x445 : t) ->
            fun ~event:(x443 : [ `online ]) ->
              fun ~listener:(x444 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x445) "off"
                     [|((match x443 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x444 ()))|])
        let (off''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x451 : t) ->
            fun ~event:(x446 : symbol or_string) ->
              fun ~listener:(x448 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x451) "off"
                     [|(or_string_to_js symbol_to_js x446);(Ojs.fun_to_js_args
                                                              (fun (x449 : _)
                                                                 ->
                                                                 x448
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x449 0)))|])
        let (cast : t -> Node_events.Events.EventEmitter.t) =
          fun (x452 : t) ->
            Node_events.Events.EventEmitter.t_of_js (t_to_js x452)
      end
    let (markAsUntransferable : object_:untyped_object -> unit) =
      fun ~object_:(x453 : untyped_object) ->
        ignore
          (Ojs.call Import.worker_threads "markAsUntransferable"
             [|(untyped_object_to_js x453)|])
    let (moveMessagePortToContext :
      port:worker_threads_MessagePort ->
        context:Node_vm.Vm.Context.t -> worker_threads_MessagePort)
      =
      fun ~port:(x454 : worker_threads_MessagePort) ->
        fun ~context:(x455 : Node_vm.Vm.Context.t) ->
          worker_threads_MessagePort_of_js
            (Ojs.call Import.worker_threads "moveMessagePortToContext"
               [|(worker_threads_MessagePort_to_js x454);(Node_vm.Vm.Context.t_to_js
                                                            x455)|])
    let (receiveMessageOnPort :
      port:worker_threads_MessagePort -> anonymous_interface_0 or_undefined)
      =
      fun ~port:(x456 : worker_threads_MessagePort) ->
        or_undefined_of_js anonymous_interface_0_of_js
          (Ojs.call Import.worker_threads "receiveMessageOnPort"
             [|(worker_threads_MessagePort_to_js x456)|])
  end
