[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Module =
  struct
    module Module =
      struct
        let (syncBuiltinESMExports : unit -> unit) =
          fun () ->
            ignore
              (Ojs.call (Ojs.get_prop_ascii Import.module_ "Module")
                 "syncBuiltinESMExports" [||])
        let (findSourceMap :
          path:string -> ?error:Error.t -> unit -> module_Module_SourceMap) =
          fun ~path:(x1 : string) ->
            fun ?error:(x2 : Error.t option) ->
              fun () ->
                module_Module_SourceMap_of_js
                  (let x5 = Ojs.get_prop_ascii Import.module_ "Module" in
                   Ojs.call (Ojs.get_prop_ascii x5 "findSourceMap") "apply"
                     [|x5;((let x3 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x3 "push" [|(Ojs.string_to_js x1)|]);
                            (match x2 with
                             | Some x4 ->
                                 ignore
                                   (Ojs.call x3 "push" [|(Error.t_to_js x4)|])
                             | None -> ());
                            x3))|])
        module SourceMapPayload =
          struct
            type t = module_Module_SourceMapPayload
            let rec t_of_js : Ojs.t -> t =
              fun (x7 : Ojs.t) -> module_Module_SourceMapPayload_of_js x7
            and t_to_js : t -> Ojs.t =
              fun (x6 : module_Module_SourceMapPayload) ->
                module_Module_SourceMapPayload_to_js x6
            let (get_file : t -> string) =
              fun (x8 : t) ->
                Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x8) "file")
            let (set_file : t -> string -> unit) =
              fun (x9 : t) ->
                fun (x10 : string) ->
                  Ojs.set_prop_ascii (t_to_js x9) "file"
                    (Ojs.string_to_js x10)
            let (get_version : t -> int) =
              fun (x11 : t) ->
                Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x11) "version")
            let (set_version : t -> int -> unit) =
              fun (x12 : t) ->
                fun (x13 : int) ->
                  Ojs.set_prop_ascii (t_to_js x12) "version"
                    (Ojs.int_to_js x13)
            let (get_sources : t -> string list) =
              fun (x14 : t) ->
                Ojs.list_of_js Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x14) "sources")
            let (set_sources : t -> string list -> unit) =
              fun (x16 : t) ->
                fun (x17 : string list) ->
                  Ojs.set_prop_ascii (t_to_js x16) "sources"
                    (Ojs.list_to_js Ojs.string_to_js x17)
            let (get_sourcesContent : t -> string list) =
              fun (x19 : t) ->
                Ojs.list_of_js Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x19) "sourcesContent")
            let (set_sourcesContent : t -> string list -> unit) =
              fun (x21 : t) ->
                fun (x22 : string list) ->
                  Ojs.set_prop_ascii (t_to_js x21) "sourcesContent"
                    (Ojs.list_to_js Ojs.string_to_js x22)
            let (get_names : t -> string list) =
              fun (x24 : t) ->
                Ojs.list_of_js Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x24) "names")
            let (set_names : t -> string list -> unit) =
              fun (x26 : t) ->
                fun (x27 : string list) ->
                  Ojs.set_prop_ascii (t_to_js x26) "names"
                    (Ojs.list_to_js Ojs.string_to_js x27)
            let (get_mappings : t -> string) =
              fun (x29 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x29) "mappings")
            let (set_mappings : t -> string -> unit) =
              fun (x30 : t) ->
                fun (x31 : string) ->
                  Ojs.set_prop_ascii (t_to_js x30) "mappings"
                    (Ojs.string_to_js x31)
            let (get_sourceRoot : t -> string) =
              fun (x32 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x32) "sourceRoot")
            let (set_sourceRoot : t -> string -> unit) =
              fun (x33 : t) ->
                fun (x34 : string) ->
                  Ojs.set_prop_ascii (t_to_js x33) "sourceRoot"
                    (Ojs.string_to_js x34)
          end
        module SourceMapping =
          struct
            type t = module_Module_SourceMapping
            let rec t_of_js : Ojs.t -> t =
              fun (x36 : Ojs.t) -> module_Module_SourceMapping_of_js x36
            and t_to_js : t -> Ojs.t =
              fun (x35 : module_Module_SourceMapping) ->
                module_Module_SourceMapping_to_js x35
            let (get_generatedLine : t -> int) =
              fun (x37 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x37) "generatedLine")
            let (set_generatedLine : t -> int -> unit) =
              fun (x38 : t) ->
                fun (x39 : int) ->
                  Ojs.set_prop_ascii (t_to_js x38) "generatedLine"
                    (Ojs.int_to_js x39)
            let (get_generatedColumn : t -> int) =
              fun (x40 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x40) "generatedColumn")
            let (set_generatedColumn : t -> int -> unit) =
              fun (x41 : t) ->
                fun (x42 : int) ->
                  Ojs.set_prop_ascii (t_to_js x41) "generatedColumn"
                    (Ojs.int_to_js x42)
            let (get_originalSource : t -> string) =
              fun (x43 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x43) "originalSource")
            let (set_originalSource : t -> string -> unit) =
              fun (x44 : t) ->
                fun (x45 : string) ->
                  Ojs.set_prop_ascii (t_to_js x44) "originalSource"
                    (Ojs.string_to_js x45)
            let (get_originalLine : t -> int) =
              fun (x46 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x46) "originalLine")
            let (set_originalLine : t -> int -> unit) =
              fun (x47 : t) ->
                fun (x48 : int) ->
                  Ojs.set_prop_ascii (t_to_js x47) "originalLine"
                    (Ojs.int_to_js x48)
            let (get_originalColumn : t -> int) =
              fun (x49 : t) ->
                Ojs.int_of_js
                  (Ojs.get_prop_ascii (t_to_js x49) "originalColumn")
            let (set_originalColumn : t -> int -> unit) =
              fun (x50 : t) ->
                fun (x51 : int) ->
                  Ojs.set_prop_ascii (t_to_js x50) "originalColumn"
                    (Ojs.int_to_js x51)
          end
        module SourceMap =
          struct
            type t = module_Module_SourceMap
            let rec t_of_js : Ojs.t -> t =
              fun (x53 : Ojs.t) -> module_Module_SourceMap_of_js x53
            and t_to_js : t -> Ojs.t =
              fun (x52 : module_Module_SourceMap) ->
                module_Module_SourceMap_to_js x52
            let (get_payload : t -> module_Module_SourceMapPayload) =
              fun (x54 : t) ->
                module_Module_SourceMapPayload_of_js
                  (Ojs.get_prop_ascii (t_to_js x54) "payload")
            let (create : payload:module_Module_SourceMapPayload -> t) =
              fun ~payload:(x55 : module_Module_SourceMapPayload) ->
                t_of_js
                  (Ojs.new_obj
                     (Ojs.get_prop_ascii
                        (Ojs.get_prop_ascii Import.module_ "Module")
                        "SourceMap")
                     [|(module_Module_SourceMapPayload_to_js x55)|])
            let (findEntry :
              t -> line:int -> column:int -> module_Module_SourceMapping) =
              fun (x58 : t) ->
                fun ~line:(x56 : int) ->
                  fun ~column:(x57 : int) ->
                    module_Module_SourceMapping_of_js
                      (Ojs.call (t_to_js x58) "findEntry"
                         [|(Ojs.int_to_js x56);(Ojs.int_to_js x57)|])
          end
        type t = module_Module
        let rec t_of_js : Ojs.t -> t =
          fun (x60 : Ojs.t) -> module_Module_of_js x60
        and t_to_js : t -> Ojs.t =
          fun (x59 : module_Module) -> module_Module_to_js x59
        let (runMain : unit -> unit) =
          fun () ->
            ignore
              (Ojs.call (Ojs.get_prop_ascii Import.module_ "Module")
                 "runMain" [||])
        let (wrap : code:string -> string) =
          fun ~code:(x61 : string) ->
            Ojs.string_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.module_ "Module") "wrap"
                 [|(Ojs.string_to_js x61)|])
        let (createRequireFromPath : path:string -> NodeRequire.t) =
          fun ~path:(x62 : string) ->
            NodeRequire.t_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.module_ "Module")
                 "createRequireFromPath" [|(Ojs.string_to_js x62)|])
        let (createRequire :
          path:Node_url.Url.Url.t or_string -> NodeRequire.t) =
          fun ~path:(x63 : Node_url.Url.Url.t or_string) ->
            NodeRequire.t_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.module_ "Module")
                 "createRequire"
                 [|(or_string_to_js Node_url.Url.Url.t_to_js x63)|])
        let (get_builtinModules : unit -> string list) =
          fun () ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii Import.module_ "Module")
                 "builtinModules")
        let (set_builtinModules : string list -> unit) =
          fun (x66 : string list) ->
            Ojs.set_prop_ascii (Ojs.get_prop_ascii Import.module_ "Module")
              "builtinModules" (Ojs.list_to_js Ojs.string_to_js x66)
        let (get_Module : unit -> any) =
          fun () ->
            any_of_js
              (Ojs.get_prop_ascii
                 (Ojs.get_prop_ascii Import.module_ "Module") "Module")
        let (set_Module : any -> unit) =
          fun (x68 : any) ->
            Ojs.set_prop_ascii (Ojs.get_prop_ascii Import.module_ "Module")
              "Module" (any_to_js x68)
        let (create : id:string -> ?parent:t -> unit -> t) =
          fun ~id:(x69 : string) ->
            fun ?parent:(x70 : t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Import.module_ "Module")
                     (let x71 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore (Ojs.call x71 "push" [|(Ojs.string_to_js x69)|]);
                      (match x70 with
                       | Some x72 ->
                           ignore (Ojs.call x71 "push" [|(t_to_js x72)|])
                       | None -> ());
                      x71))
      end
  end
