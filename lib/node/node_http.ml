[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type http_Agent = [ `Http_Agent ] intf
        and http_AgentOptions = [ `Http_AgentOptions ] intf
        and http_ClientRequest =
          [ `Http_ClientRequest  | `Http_OutgoingMessage ] intf
        and http_ClientRequestArgs = [ `Http_ClientRequestArgs ] intf
        and http_HttpBase = [ `Http_HttpBase ] intf
        and http_IncomingHttpHeaders = [ `Http_IncomingHttpHeaders ] intf
        and http_IncomingMessage = [ `Http_IncomingMessage ] intf
        and http_InformationEvent = [ `Http_InformationEvent ] intf
        and http_OutgoingHttpHeader = string list or_string or_number
        and http_OutgoingHttpHeaders = [ `Http_OutgoingHttpHeaders ] intf
        and http_OutgoingMessage = [ `Http_OutgoingMessage ] intf
        and http_RequestListener = [ `Http_RequestListener ] intf
        and http_RequestOptions =
          [ `Http_RequestOptions  | `Http_ClientRequestArgs ] intf
        and http_Server = [ `Http_Server  | `Http_HttpBase ] intf
        and http_ServerOptions = [ `Http_ServerOptions ] intf
        and http_ServerResponse =
          [ `Http_ServerResponse  | `Http_OutgoingMessage ] intf
        let rec http_Agent_of_js : Ojs.t -> http_Agent = Obj.magic
        and http_Agent_to_js : http_Agent -> Ojs.t = Obj.magic
        and http_AgentOptions_of_js : Ojs.t -> http_AgentOptions = Obj.magic
        and http_AgentOptions_to_js : http_AgentOptions -> Ojs.t = Obj.magic
        and http_ClientRequest_of_js : Ojs.t -> http_ClientRequest =
          Obj.magic
        and http_ClientRequest_to_js : http_ClientRequest -> Ojs.t =
          Obj.magic
        and http_ClientRequestArgs_of_js : Ojs.t -> http_ClientRequestArgs =
          Obj.magic
        and http_ClientRequestArgs_to_js : http_ClientRequestArgs -> Ojs.t =
          Obj.magic
        and http_HttpBase_of_js : Ojs.t -> http_HttpBase = Obj.magic
        and http_HttpBase_to_js : http_HttpBase -> Ojs.t = Obj.magic
        and http_IncomingHttpHeaders_of_js :
          Ojs.t -> http_IncomingHttpHeaders = Obj.magic
        and http_IncomingHttpHeaders_to_js :
          http_IncomingHttpHeaders -> Ojs.t = Obj.magic
        and http_IncomingMessage_of_js : Ojs.t -> http_IncomingMessage =
          Obj.magic
        and http_IncomingMessage_to_js : http_IncomingMessage -> Ojs.t =
          Obj.magic
        and http_InformationEvent_of_js : Ojs.t -> http_InformationEvent =
          Obj.magic
        and http_InformationEvent_to_js : http_InformationEvent -> Ojs.t =
          Obj.magic
        and http_OutgoingHttpHeader_of_js : Ojs.t -> http_OutgoingHttpHeader
          =
          fun (x5 : Ojs.t) ->
            or_number_of_js
              (fun (x6 : Ojs.t) ->
                 or_string_of_js
                   (fun (x7 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x7)
                   x6) x5
        and http_OutgoingHttpHeader_to_js : http_OutgoingHttpHeader -> Ojs.t
          =
          fun (x1 : string list or_string or_number) ->
            or_number_to_js
              (fun (x2 : string list or_string) ->
                 or_string_to_js
                   (fun (x3 : string list) ->
                      Ojs.list_to_js Ojs.string_to_js x3) x2) x1
        and http_OutgoingHttpHeaders_of_js :
          Ojs.t -> http_OutgoingHttpHeaders = Obj.magic
        and http_OutgoingHttpHeaders_to_js :
          http_OutgoingHttpHeaders -> Ojs.t = Obj.magic
        and http_OutgoingMessage_of_js : Ojs.t -> http_OutgoingMessage =
          Obj.magic
        and http_OutgoingMessage_to_js : http_OutgoingMessage -> Ojs.t =
          Obj.magic
        and http_RequestListener_of_js : Ojs.t -> http_RequestListener =
          Obj.magic
        and http_RequestListener_to_js : http_RequestListener -> Ojs.t =
          Obj.magic
        and http_RequestOptions_of_js : Ojs.t -> http_RequestOptions =
          Obj.magic
        and http_RequestOptions_to_js : http_RequestOptions -> Ojs.t =
          Obj.magic
        and http_Server_of_js : Ojs.t -> http_Server = Obj.magic
        and http_Server_to_js : http_Server -> Ojs.t = Obj.magic
        and http_ServerOptions_of_js : Ojs.t -> http_ServerOptions =
          Obj.magic
        and http_ServerOptions_to_js : http_ServerOptions -> Ojs.t =
          Obj.magic
        and http_ServerResponse_of_js : Ojs.t -> http_ServerResponse =
          Obj.magic
        and http_ServerResponse_to_js : http_ServerResponse -> Ojs.t =
          Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x10 : Ojs.t) -> anonymous_interface_0_of_js x10
    and t_to_js : t -> Ojs.t =
      fun (x9 : anonymous_interface_0) -> anonymous_interface_0_to_js x9
    let (get : t -> float -> string or_undefined) =
      fun (x11 : t) ->
        fun (x12 : float) ->
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop (t_to_js x11) (Ojs.float_to_js x12))
    let (set : t -> float -> string or_undefined -> unit) =
      fun (x14 : t) ->
        fun (x15 : float) ->
          fun (x16 : string or_undefined) ->
            Ojs.set_prop (t_to_js x14) (Ojs.float_to_js x15)
              (or_undefined_to_js Ojs.string_to_js x16)
    let (get' : t -> string -> string or_undefined) =
      fun (x18 : t) ->
        fun (x19 : string) ->
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop (t_to_js x18) (Ojs.string_to_js x19))
    let (set' : t -> string -> string or_undefined -> unit) =
      fun (x21 : t) ->
        fun (x22 : string) ->
          fun (x23 : string or_undefined) ->
            Ojs.set_prop (t_to_js x21) (Ojs.string_to_js x22)
              (or_undefined_to_js Ojs.string_to_js x23)
  end
module Http =
  struct
    open Node_stream
    module IncomingHttpHeaders =
      struct
        type t = http_IncomingHttpHeaders
        let rec t_of_js : Ojs.t -> t =
          fun (x26 : Ojs.t) -> http_IncomingHttpHeaders_of_js x26
        and t_to_js : t -> Ojs.t =
          fun (x25 : http_IncomingHttpHeaders) ->
            http_IncomingHttpHeaders_to_js x25
        let (get_accept : t -> string) =
          fun (x27 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x27) "accept")
        let (set_accept : t -> string -> unit) =
          fun (x28 : t) ->
            fun (x29 : string) ->
              Ojs.set_prop_ascii (t_to_js x28) "accept"
                (Ojs.string_to_js x29)
        let (get_accept_language : t -> string) =
          fun (x30 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x30) "accept-language")
        let (set_accept_language : t -> string -> unit) =
          fun (x31 : t) ->
            fun (x32 : string) ->
              Ojs.set_prop_ascii (t_to_js x31) "accept-language"
                (Ojs.string_to_js x32)
        let (get_accept_patch : t -> string) =
          fun (x33 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x33) "accept-patch")
        let (set_accept_patch : t -> string -> unit) =
          fun (x34 : t) ->
            fun (x35 : string) ->
              Ojs.set_prop_ascii (t_to_js x34) "accept-patch"
                (Ojs.string_to_js x35)
        let (get_accept_ranges : t -> string) =
          fun (x36 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x36) "accept-ranges")
        let (set_accept_ranges : t -> string -> unit) =
          fun (x37 : t) ->
            fun (x38 : string) ->
              Ojs.set_prop_ascii (t_to_js x37) "accept-ranges"
                (Ojs.string_to_js x38)
        let (get_access_control_allow_credentials : t -> string) =
          fun (x39 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x39)
                 "access-control-allow-credentials")
        let (set_access_control_allow_credentials : t -> string -> unit) =
          fun (x40 : t) ->
            fun (x41 : string) ->
              Ojs.set_prop_ascii (t_to_js x40)
                "access-control-allow-credentials" (Ojs.string_to_js x41)
        let (get_access_control_allow_headers : t -> string) =
          fun (x42 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x42)
                 "access-control-allow-headers")
        let (set_access_control_allow_headers : t -> string -> unit) =
          fun (x43 : t) ->
            fun (x44 : string) ->
              Ojs.set_prop_ascii (t_to_js x43) "access-control-allow-headers"
                (Ojs.string_to_js x44)
        let (get_access_control_allow_methods : t -> string) =
          fun (x45 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x45)
                 "access-control-allow-methods")
        let (set_access_control_allow_methods : t -> string -> unit) =
          fun (x46 : t) ->
            fun (x47 : string) ->
              Ojs.set_prop_ascii (t_to_js x46) "access-control-allow-methods"
                (Ojs.string_to_js x47)
        let (get_access_control_allow_origin : t -> string) =
          fun (x48 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x48) "access-control-allow-origin")
        let (set_access_control_allow_origin : t -> string -> unit) =
          fun (x49 : t) ->
            fun (x50 : string) ->
              Ojs.set_prop_ascii (t_to_js x49) "access-control-allow-origin"
                (Ojs.string_to_js x50)
        let (get_access_control_expose_headers : t -> string) =
          fun (x51 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x51)
                 "access-control-expose-headers")
        let (set_access_control_expose_headers : t -> string -> unit) =
          fun (x52 : t) ->
            fun (x53 : string) ->
              Ojs.set_prop_ascii (t_to_js x52)
                "access-control-expose-headers" (Ojs.string_to_js x53)
        let (get_access_control_max_age : t -> string) =
          fun (x54 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x54) "access-control-max-age")
        let (set_access_control_max_age : t -> string -> unit) =
          fun (x55 : t) ->
            fun (x56 : string) ->
              Ojs.set_prop_ascii (t_to_js x55) "access-control-max-age"
                (Ojs.string_to_js x56)
        let (get_access_control_request_headers : t -> string) =
          fun (x57 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x57)
                 "access-control-request-headers")
        let (set_access_control_request_headers : t -> string -> unit) =
          fun (x58 : t) ->
            fun (x59 : string) ->
              Ojs.set_prop_ascii (t_to_js x58)
                "access-control-request-headers" (Ojs.string_to_js x59)
        let (get_access_control_request_method : t -> string) =
          fun (x60 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x60)
                 "access-control-request-method")
        let (set_access_control_request_method : t -> string -> unit) =
          fun (x61 : t) ->
            fun (x62 : string) ->
              Ojs.set_prop_ascii (t_to_js x61)
                "access-control-request-method" (Ojs.string_to_js x62)
        let (get_age : t -> string) =
          fun (x63 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x63) "age")
        let (set_age : t -> string -> unit) =
          fun (x64 : t) ->
            fun (x65 : string) ->
              Ojs.set_prop_ascii (t_to_js x64) "age" (Ojs.string_to_js x65)
        let (get_allow : t -> string) =
          fun (x66 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x66) "allow")
        let (set_allow : t -> string -> unit) =
          fun (x67 : t) ->
            fun (x68 : string) ->
              Ojs.set_prop_ascii (t_to_js x67) "allow" (Ojs.string_to_js x68)
        let (get_alt_svc : t -> string) =
          fun (x69 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x69) "alt-svc")
        let (set_alt_svc : t -> string -> unit) =
          fun (x70 : t) ->
            fun (x71 : string) ->
              Ojs.set_prop_ascii (t_to_js x70) "alt-svc"
                (Ojs.string_to_js x71)
        let (get_authorization : t -> string) =
          fun (x72 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x72) "authorization")
        let (set_authorization : t -> string -> unit) =
          fun (x73 : t) ->
            fun (x74 : string) ->
              Ojs.set_prop_ascii (t_to_js x73) "authorization"
                (Ojs.string_to_js x74)
        let (get_cache_control : t -> string) =
          fun (x75 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x75) "cache-control")
        let (set_cache_control : t -> string -> unit) =
          fun (x76 : t) ->
            fun (x77 : string) ->
              Ojs.set_prop_ascii (t_to_js x76) "cache-control"
                (Ojs.string_to_js x77)
        let (get_connection : t -> string) =
          fun (x78 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x78) "connection")
        let (set_connection : t -> string -> unit) =
          fun (x79 : t) ->
            fun (x80 : string) ->
              Ojs.set_prop_ascii (t_to_js x79) "connection"
                (Ojs.string_to_js x80)
        let (get_content_disposition : t -> string) =
          fun (x81 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x81) "content-disposition")
        let (set_content_disposition : t -> string -> unit) =
          fun (x82 : t) ->
            fun (x83 : string) ->
              Ojs.set_prop_ascii (t_to_js x82) "content-disposition"
                (Ojs.string_to_js x83)
        let (get_content_encoding : t -> string) =
          fun (x84 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x84) "content-encoding")
        let (set_content_encoding : t -> string -> unit) =
          fun (x85 : t) ->
            fun (x86 : string) ->
              Ojs.set_prop_ascii (t_to_js x85) "content-encoding"
                (Ojs.string_to_js x86)
        let (get_content_language : t -> string) =
          fun (x87 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x87) "content-language")
        let (set_content_language : t -> string -> unit) =
          fun (x88 : t) ->
            fun (x89 : string) ->
              Ojs.set_prop_ascii (t_to_js x88) "content-language"
                (Ojs.string_to_js x89)
        let (get_content_length : t -> string) =
          fun (x90 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x90) "content-length")
        let (set_content_length : t -> string -> unit) =
          fun (x91 : t) ->
            fun (x92 : string) ->
              Ojs.set_prop_ascii (t_to_js x91) "content-length"
                (Ojs.string_to_js x92)
        let (get_content_location : t -> string) =
          fun (x93 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x93) "content-location")
        let (set_content_location : t -> string -> unit) =
          fun (x94 : t) ->
            fun (x95 : string) ->
              Ojs.set_prop_ascii (t_to_js x94) "content-location"
                (Ojs.string_to_js x95)
        let (get_content_range : t -> string) =
          fun (x96 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x96) "content-range")
        let (set_content_range : t -> string -> unit) =
          fun (x97 : t) ->
            fun (x98 : string) ->
              Ojs.set_prop_ascii (t_to_js x97) "content-range"
                (Ojs.string_to_js x98)
        let (get_content_type : t -> string) =
          fun (x99 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x99) "content-type")
        let (set_content_type : t -> string -> unit) =
          fun (x100 : t) ->
            fun (x101 : string) ->
              Ojs.set_prop_ascii (t_to_js x100) "content-type"
                (Ojs.string_to_js x101)
        let (get_cookie : t -> string) =
          fun (x102 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x102) "cookie")
        let (set_cookie : t -> string -> unit) =
          fun (x103 : t) ->
            fun (x104 : string) ->
              Ojs.set_prop_ascii (t_to_js x103) "cookie"
                (Ojs.string_to_js x104)
        let (get_date : t -> string) =
          fun (x105 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x105) "date")
        let (set_date : t -> string -> unit) =
          fun (x106 : t) ->
            fun (x107 : string) ->
              Ojs.set_prop_ascii (t_to_js x106) "date"
                (Ojs.string_to_js x107)
        let (get_expect : t -> string) =
          fun (x108 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x108) "expect")
        let (set_expect : t -> string -> unit) =
          fun (x109 : t) ->
            fun (x110 : string) ->
              Ojs.set_prop_ascii (t_to_js x109) "expect"
                (Ojs.string_to_js x110)
        let (get_expires : t -> string) =
          fun (x111 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x111) "expires")
        let (set_expires : t -> string -> unit) =
          fun (x112 : t) ->
            fun (x113 : string) ->
              Ojs.set_prop_ascii (t_to_js x112) "expires"
                (Ojs.string_to_js x113)
        let (get_forwarded : t -> string) =
          fun (x114 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x114) "forwarded")
        let (set_forwarded : t -> string -> unit) =
          fun (x115 : t) ->
            fun (x116 : string) ->
              Ojs.set_prop_ascii (t_to_js x115) "forwarded"
                (Ojs.string_to_js x116)
        let (get_from : t -> string) =
          fun (x117 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x117) "from")
        let (set_from : t -> string -> unit) =
          fun (x118 : t) ->
            fun (x119 : string) ->
              Ojs.set_prop_ascii (t_to_js x118) "from"
                (Ojs.string_to_js x119)
        let (get_host : t -> string) =
          fun (x120 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x120) "host")
        let (set_host : t -> string -> unit) =
          fun (x121 : t) ->
            fun (x122 : string) ->
              Ojs.set_prop_ascii (t_to_js x121) "host"
                (Ojs.string_to_js x122)
        let (get_if_match : t -> string) =
          fun (x123 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x123) "if-match")
        let (set_if_match : t -> string -> unit) =
          fun (x124 : t) ->
            fun (x125 : string) ->
              Ojs.set_prop_ascii (t_to_js x124) "if-match"
                (Ojs.string_to_js x125)
        let (get_if_modified_since : t -> string) =
          fun (x126 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x126) "if-modified-since")
        let (set_if_modified_since : t -> string -> unit) =
          fun (x127 : t) ->
            fun (x128 : string) ->
              Ojs.set_prop_ascii (t_to_js x127) "if-modified-since"
                (Ojs.string_to_js x128)
        let (get_if_none_match : t -> string) =
          fun (x129 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x129) "if-none-match")
        let (set_if_none_match : t -> string -> unit) =
          fun (x130 : t) ->
            fun (x131 : string) ->
              Ojs.set_prop_ascii (t_to_js x130) "if-none-match"
                (Ojs.string_to_js x131)
        let (get_if_unmodified_since : t -> string) =
          fun (x132 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x132) "if-unmodified-since")
        let (set_if_unmodified_since : t -> string -> unit) =
          fun (x133 : t) ->
            fun (x134 : string) ->
              Ojs.set_prop_ascii (t_to_js x133) "if-unmodified-since"
                (Ojs.string_to_js x134)
        let (get_last_modified : t -> string) =
          fun (x135 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x135) "last-modified")
        let (set_last_modified : t -> string -> unit) =
          fun (x136 : t) ->
            fun (x137 : string) ->
              Ojs.set_prop_ascii (t_to_js x136) "last-modified"
                (Ojs.string_to_js x137)
        let (get_location : t -> string) =
          fun (x138 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x138) "location")
        let (set_location : t -> string -> unit) =
          fun (x139 : t) ->
            fun (x140 : string) ->
              Ojs.set_prop_ascii (t_to_js x139) "location"
                (Ojs.string_to_js x140)
        let (get_origin : t -> string) =
          fun (x141 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x141) "origin")
        let (set_origin : t -> string -> unit) =
          fun (x142 : t) ->
            fun (x143 : string) ->
              Ojs.set_prop_ascii (t_to_js x142) "origin"
                (Ojs.string_to_js x143)
        let (get_pragma : t -> string) =
          fun (x144 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x144) "pragma")
        let (set_pragma : t -> string -> unit) =
          fun (x145 : t) ->
            fun (x146 : string) ->
              Ojs.set_prop_ascii (t_to_js x145) "pragma"
                (Ojs.string_to_js x146)
        let (get_proxy_authenticate : t -> string) =
          fun (x147 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x147) "proxy-authenticate")
        let (set_proxy_authenticate : t -> string -> unit) =
          fun (x148 : t) ->
            fun (x149 : string) ->
              Ojs.set_prop_ascii (t_to_js x148) "proxy-authenticate"
                (Ojs.string_to_js x149)
        let (get_proxy_authorization : t -> string) =
          fun (x150 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x150) "proxy-authorization")
        let (set_proxy_authorization : t -> string -> unit) =
          fun (x151 : t) ->
            fun (x152 : string) ->
              Ojs.set_prop_ascii (t_to_js x151) "proxy-authorization"
                (Ojs.string_to_js x152)
        let (get_public_key_pins : t -> string) =
          fun (x153 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x153) "public-key-pins")
        let (set_public_key_pins : t -> string -> unit) =
          fun (x154 : t) ->
            fun (x155 : string) ->
              Ojs.set_prop_ascii (t_to_js x154) "public-key-pins"
                (Ojs.string_to_js x155)
        let (get_range : t -> string) =
          fun (x156 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x156) "range")
        let (set_range : t -> string -> unit) =
          fun (x157 : t) ->
            fun (x158 : string) ->
              Ojs.set_prop_ascii (t_to_js x157) "range"
                (Ojs.string_to_js x158)
        let (get_referer : t -> string) =
          fun (x159 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x159) "referer")
        let (set_referer : t -> string -> unit) =
          fun (x160 : t) ->
            fun (x161 : string) ->
              Ojs.set_prop_ascii (t_to_js x160) "referer"
                (Ojs.string_to_js x161)
        let (get_retry_after : t -> string) =
          fun (x162 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x162) "retry-after")
        let (set_retry_after : t -> string -> unit) =
          fun (x163 : t) ->
            fun (x164 : string) ->
              Ojs.set_prop_ascii (t_to_js x163) "retry-after"
                (Ojs.string_to_js x164)
        let (get_sec_websocket_accept : t -> string) =
          fun (x165 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x165) "sec-websocket-accept")
        let (set_sec_websocket_accept : t -> string -> unit) =
          fun (x166 : t) ->
            fun (x167 : string) ->
              Ojs.set_prop_ascii (t_to_js x166) "sec-websocket-accept"
                (Ojs.string_to_js x167)
        let (get_sec_websocket_extensions : t -> string) =
          fun (x168 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x168) "sec-websocket-extensions")
        let (set_sec_websocket_extensions : t -> string -> unit) =
          fun (x169 : t) ->
            fun (x170 : string) ->
              Ojs.set_prop_ascii (t_to_js x169) "sec-websocket-extensions"
                (Ojs.string_to_js x170)
        let (get_sec_websocket_key : t -> string) =
          fun (x171 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x171) "sec-websocket-key")
        let (set_sec_websocket_key : t -> string -> unit) =
          fun (x172 : t) ->
            fun (x173 : string) ->
              Ojs.set_prop_ascii (t_to_js x172) "sec-websocket-key"
                (Ojs.string_to_js x173)
        let (get_sec_websocket_protocol : t -> string) =
          fun (x174 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x174) "sec-websocket-protocol")
        let (set_sec_websocket_protocol : t -> string -> unit) =
          fun (x175 : t) ->
            fun (x176 : string) ->
              Ojs.set_prop_ascii (t_to_js x175) "sec-websocket-protocol"
                (Ojs.string_to_js x176)
        let (get_sec_websocket_version : t -> string) =
          fun (x177 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x177) "sec-websocket-version")
        let (set_sec_websocket_version : t -> string -> unit) =
          fun (x178 : t) ->
            fun (x179 : string) ->
              Ojs.set_prop_ascii (t_to_js x178) "sec-websocket-version"
                (Ojs.string_to_js x179)
        let (get_set_cookie : t -> string list) =
          fun (x180 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x180) "set-cookie")
        let (set_set_cookie : t -> string list -> unit) =
          fun (x182 : t) ->
            fun (x183 : string list) ->
              Ojs.set_prop_ascii (t_to_js x182) "set-cookie"
                (Ojs.list_to_js Ojs.string_to_js x183)
        let (get_strict_transport_security : t -> string) =
          fun (x185 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x185) "strict-transport-security")
        let (set_strict_transport_security : t -> string -> unit) =
          fun (x186 : t) ->
            fun (x187 : string) ->
              Ojs.set_prop_ascii (t_to_js x186) "strict-transport-security"
                (Ojs.string_to_js x187)
        let (get_tk : t -> string) =
          fun (x188 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x188) "tk")
        let (set_tk : t -> string -> unit) =
          fun (x189 : t) ->
            fun (x190 : string) ->
              Ojs.set_prop_ascii (t_to_js x189) "tk" (Ojs.string_to_js x190)
        let (get_trailer : t -> string) =
          fun (x191 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x191) "trailer")
        let (set_trailer : t -> string -> unit) =
          fun (x192 : t) ->
            fun (x193 : string) ->
              Ojs.set_prop_ascii (t_to_js x192) "trailer"
                (Ojs.string_to_js x193)
        let (get_transfer_encoding : t -> string) =
          fun (x194 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x194) "transfer-encoding")
        let (set_transfer_encoding : t -> string -> unit) =
          fun (x195 : t) ->
            fun (x196 : string) ->
              Ojs.set_prop_ascii (t_to_js x195) "transfer-encoding"
                (Ojs.string_to_js x196)
        let (get_upgrade : t -> string) =
          fun (x197 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x197) "upgrade")
        let (set_upgrade : t -> string -> unit) =
          fun (x198 : t) ->
            fun (x199 : string) ->
              Ojs.set_prop_ascii (t_to_js x198) "upgrade"
                (Ojs.string_to_js x199)
        let (get_user_agent : t -> string) =
          fun (x200 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x200) "user-agent")
        let (set_user_agent : t -> string -> unit) =
          fun (x201 : t) ->
            fun (x202 : string) ->
              Ojs.set_prop_ascii (t_to_js x201) "user-agent"
                (Ojs.string_to_js x202)
        let (get_vary : t -> string) =
          fun (x203 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x203) "vary")
        let (set_vary : t -> string -> unit) =
          fun (x204 : t) ->
            fun (x205 : string) ->
              Ojs.set_prop_ascii (t_to_js x204) "vary"
                (Ojs.string_to_js x205)
        let (get_via : t -> string) =
          fun (x206 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x206) "via")
        let (set_via : t -> string -> unit) =
          fun (x207 : t) ->
            fun (x208 : string) ->
              Ojs.set_prop_ascii (t_to_js x207) "via" (Ojs.string_to_js x208)
        let (get_warning : t -> string) =
          fun (x209 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x209) "warning")
        let (set_warning : t -> string -> unit) =
          fun (x210 : t) ->
            fun (x211 : string) ->
              Ojs.set_prop_ascii (t_to_js x210) "warning"
                (Ojs.string_to_js x211)
        let (get_www_authenticate : t -> string) =
          fun (x212 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x212) "www-authenticate")
        let (set_www_authenticate : t -> string -> unit) =
          fun (x213 : t) ->
            fun (x214 : string) ->
              Ojs.set_prop_ascii (t_to_js x213) "www-authenticate"
                (Ojs.string_to_js x214)
        let (cast : t -> string list or_string Dict.t) =
          fun (x215 : t) ->
            Dict.t_of_js
              (fun (x216 : Ojs.t) ->
                 or_string_of_js
                   (fun (x217 : Ojs.t) ->
                      Ojs.list_of_js Ojs.string_of_js x217) x216)
              (t_to_js x215)
      end
    module OutgoingHttpHeader =
      struct
        type t = http_OutgoingHttpHeader
        let rec t_of_js : Ojs.t -> t =
          fun (x220 : Ojs.t) -> http_OutgoingHttpHeader_of_js x220
        and t_to_js : t -> Ojs.t =
          fun (x219 : http_OutgoingHttpHeader) ->
            http_OutgoingHttpHeader_to_js x219
      end
    module OutgoingHttpHeaders =
      struct
        type t = http_OutgoingHttpHeaders
        let rec t_of_js : Ojs.t -> t =
          fun (x222 : Ojs.t) -> http_OutgoingHttpHeaders_of_js x222
        and t_to_js : t -> Ojs.t =
          fun (x221 : http_OutgoingHttpHeaders) ->
            http_OutgoingHttpHeaders_to_js x221
        let (cast : t -> http_OutgoingHttpHeader Dict.t) =
          fun (x223 : t) ->
            Dict.t_of_js http_OutgoingHttpHeader_of_js (t_to_js x223)
      end
    module ClientRequestArgs =
      struct
        type t = http_ClientRequestArgs
        let rec t_of_js : Ojs.t -> t =
          fun (x226 : Ojs.t) -> http_ClientRequestArgs_of_js x226
        and t_to_js : t -> Ojs.t =
          fun (x225 : http_ClientRequestArgs) ->
            http_ClientRequestArgs_to_js x225
        let (get_protocol : t -> string or_null) =
          fun (x227 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x227) "protocol")
        let (set_protocol : t -> string or_null -> unit) =
          fun (x229 : t) ->
            fun (x230 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x229) "protocol"
                (or_null_to_js Ojs.string_to_js x230)
        let (get_host : t -> string or_null) =
          fun (x232 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x232) "host")
        let (set_host : t -> string or_null -> unit) =
          fun (x234 : t) ->
            fun (x235 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x234) "host"
                (or_null_to_js Ojs.string_to_js x235)
        let (get_hostname : t -> string or_null) =
          fun (x237 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x237) "hostname")
        let (set_hostname : t -> string or_null -> unit) =
          fun (x239 : t) ->
            fun (x240 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x239) "hostname"
                (or_null_to_js Ojs.string_to_js x240)
        let (get_family : t -> float) =
          fun (x242 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x242) "family")
        let (set_family : t -> float -> unit) =
          fun (x243 : t) ->
            fun (x244 : float) ->
              Ojs.set_prop_ascii (t_to_js x243) "family"
                (Ojs.float_to_js x244)
        let (get_port : t -> string or_number or_null) =
          fun (x245 : t) ->
            or_null_of_js
              (fun (x246 : Ojs.t) -> or_number_of_js Ojs.string_of_js x246)
              (Ojs.get_prop_ascii (t_to_js x245) "port")
        let (set_port : t -> string or_number or_null -> unit) =
          fun (x248 : t) ->
            fun (x249 : string or_number or_null) ->
              Ojs.set_prop_ascii (t_to_js x248) "port"
                (or_null_to_js
                   (fun (x250 : string or_number) ->
                      or_number_to_js Ojs.string_to_js x250) x249)
        let (get_defaultPort : t -> string or_number) =
          fun (x252 : t) ->
            or_number_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x252) "defaultPort")
        let (set_defaultPort : t -> string or_number -> unit) =
          fun (x254 : t) ->
            fun (x255 : string or_number) ->
              Ojs.set_prop_ascii (t_to_js x254) "defaultPort"
                (or_number_to_js Ojs.string_to_js x255)
        let (get_localAddress : t -> string) =
          fun (x257 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x257) "localAddress")
        let (set_localAddress : t -> string -> unit) =
          fun (x258 : t) ->
            fun (x259 : string) ->
              Ojs.set_prop_ascii (t_to_js x258) "localAddress"
                (Ojs.string_to_js x259)
        let (get_socketPath : t -> string) =
          fun (x260 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x260) "socketPath")
        let (set_socketPath : t -> string -> unit) =
          fun (x261 : t) ->
            fun (x262 : string) ->
              Ojs.set_prop_ascii (t_to_js x261) "socketPath"
                (Ojs.string_to_js x262)
        let (get_maxHeaderSize : t -> float) =
          fun (x263 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x263) "maxHeaderSize")
        let (set_maxHeaderSize : t -> float -> unit) =
          fun (x264 : t) ->
            fun (x265 : float) ->
              Ojs.set_prop_ascii (t_to_js x264) "maxHeaderSize"
                (Ojs.float_to_js x265)
        let (get_method : t -> string) =
          fun (x266 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x266) "method")
        let (set_method : t -> string -> unit) =
          fun (x267 : t) ->
            fun (x268 : string) ->
              Ojs.set_prop_ascii (t_to_js x267) "method"
                (Ojs.string_to_js x268)
        let (get_path : t -> string or_null) =
          fun (x269 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x269) "path")
        let (set_path : t -> string or_null -> unit) =
          fun (x271 : t) ->
            fun (x272 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x271) "path"
                (or_null_to_js Ojs.string_to_js x272)
        let (get_headers : t -> http_OutgoingHttpHeaders) =
          fun (x274 : t) ->
            http_OutgoingHttpHeaders_of_js
              (Ojs.get_prop_ascii (t_to_js x274) "headers")
        let (set_headers : t -> http_OutgoingHttpHeaders -> unit) =
          fun (x275 : t) ->
            fun (x276 : http_OutgoingHttpHeaders) ->
              Ojs.set_prop_ascii (t_to_js x275) "headers"
                (http_OutgoingHttpHeaders_to_js x276)
        let (get_auth : t -> string or_null) =
          fun (x277 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x277) "auth")
        let (set_auth : t -> string or_null -> unit) =
          fun (x279 : t) ->
            fun (x280 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x279) "auth"
                (or_null_to_js Ojs.string_to_js x280)
        let (get_agent : t -> http_Agent or_boolean) =
          fun (x282 : t) ->
            or_boolean_of_js http_Agent_of_js
              (Ojs.get_prop_ascii (t_to_js x282) "agent")
        let (set_agent : t -> http_Agent or_boolean -> unit) =
          fun (x284 : t) ->
            fun (x285 : http_Agent or_boolean) ->
              Ojs.set_prop_ascii (t_to_js x284) "agent"
                (or_boolean_to_js http_Agent_to_js x285)
        let (get__defaultAgent : t -> http_Agent) =
          fun (x287 : t) ->
            http_Agent_of_js
              (Ojs.get_prop_ascii (t_to_js x287) "_defaultAgent")
        let (set__defaultAgent : t -> http_Agent -> unit) =
          fun (x288 : t) ->
            fun (x289 : http_Agent) ->
              Ojs.set_prop_ascii (t_to_js x288) "_defaultAgent"
                (http_Agent_to_js x289)
        let (get_timeout : t -> float) =
          fun (x290 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x290) "timeout")
        let (set_timeout : t -> float -> unit) =
          fun (x291 : t) ->
            fun (x292 : float) ->
              Ojs.set_prop_ascii (t_to_js x291) "timeout"
                (Ojs.float_to_js x292)
        let (get_setHost : t -> bool) =
          fun (x293 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x293) "setHost")
        let (set_setHost : t -> bool -> unit) =
          fun (x294 : t) ->
            fun (x295 : bool) ->
              Ojs.set_prop_ascii (t_to_js x294) "setHost"
                (Ojs.bool_to_js x295)
        let (createConnection :
          t ->
            options:t ->
              oncreate:(err:Error.t -> socket:Node_net.Net.Socket.t -> unit)
                -> Node_net.Net.Socket.t)
          =
          fun (x300 : t) ->
            fun ~options:(x296 : t) ->
              fun
                ~oncreate:(x297 :
                            err:Error.t ->
                              socket:Node_net.Net.Socket.t -> unit)
                ->
                Node_net.Net.Socket.t_of_js
                  (Ojs.call (t_to_js x300) "createConnection"
                     [|(t_to_js x296);(Ojs.fun_to_js 2
                                         (fun (x298 : Ojs.t) ->
                                            fun (x299 : Ojs.t) ->
                                              x297 ~err:(Error.t_of_js x298)
                                                ~socket:(Node_net.Net.Socket.t_of_js
                                                           x299)))|])
      end
    module ServerOptions =
      struct
        type t = http_ServerOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x302 : Ojs.t) -> http_ServerOptions_of_js x302
        and t_to_js : t -> Ojs.t =
          fun (x301 : http_ServerOptions) -> http_ServerOptions_to_js x301
        let (get_IncomingMessage : t -> any) =
          fun (x303 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x303) "IncomingMessage")
        let (set_IncomingMessage : t -> any -> unit) =
          fun (x304 : t) ->
            fun (x305 : any) ->
              Ojs.set_prop_ascii (t_to_js x304) "IncomingMessage"
                (any_to_js x305)
        let (get_ServerResponse : t -> any) =
          fun (x306 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x306) "ServerResponse")
        let (set_ServerResponse : t -> any -> unit) =
          fun (x307 : t) ->
            fun (x308 : any) ->
              Ojs.set_prop_ascii (t_to_js x307) "ServerResponse"
                (any_to_js x308)
        let (get_maxHeaderSize : t -> float) =
          fun (x309 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x309) "maxHeaderSize")
        let (set_maxHeaderSize : t -> float -> unit) =
          fun (x310 : t) ->
            fun (x311 : float) ->
              Ojs.set_prop_ascii (t_to_js x310) "maxHeaderSize"
                (Ojs.float_to_js x311)
        let (get_insecureHTTPParser : t -> bool) =
          fun (x312 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x312) "insecureHTTPParser")
        let (set_insecureHTTPParser : t -> bool -> unit) =
          fun (x313 : t) ->
            fun (x314 : bool) ->
              Ojs.set_prop_ascii (t_to_js x313) "insecureHTTPParser"
                (Ojs.bool_to_js x314)
      end
    module RequestListener =
      struct
        type t = http_RequestListener
        let rec t_of_js : Ojs.t -> t =
          fun (x316 : Ojs.t) -> http_RequestListener_of_js x316
        and t_to_js : t -> Ojs.t =
          fun (x315 : http_RequestListener) ->
            http_RequestListener_to_js x315
        let (apply :
          t -> req:http_IncomingMessage -> res:http_ServerResponse -> unit) =
          fun (x319 : t) ->
            fun ~req:(x317 : http_IncomingMessage) ->
              fun ~res:(x318 : http_ServerResponse) ->
                ignore
                  (Ojs.apply (t_to_js x319)
                     [|(http_IncomingMessage_to_js x317);(http_ServerResponse_to_js
                                                            x318)|])
      end
    module HttpBase =
      struct
        type t = http_HttpBase
        let rec t_of_js : Ojs.t -> t =
          fun (x321 : Ojs.t) -> http_HttpBase_of_js x321
        and t_to_js : t -> Ojs.t =
          fun (x320 : http_HttpBase) -> http_HttpBase_to_js x320
        let (setTimeout :
          t -> ?msecs:float -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x327 : t) ->
            fun ?msecs:(x322 : float option) ->
              fun ?callback:(x323 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x328 = t_to_js x327 in
                     Ojs.call (Ojs.get_prop_ascii x328 "setTimeout") "apply"
                       [|x328;((let x324 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x322 with
                                 | Some x326 ->
                                     ignore
                                       (Ojs.call x324 "push"
                                          [|(Ojs.float_to_js x326)|])
                                 | None -> ());
                                (match x323 with
                                 | Some x325 ->
                                     ignore
                                       (Ojs.call x324 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x325 ()))|])
                                 | None -> ());
                                x324))|])
        let (setTimeout' : t -> callback:(unit -> unit) -> t) =
          fun (x330 : t) ->
            fun ~callback:(x329 : unit -> unit) ->
              t_of_js
                (Ojs.call (t_to_js x330) "setTimeout"
                   [|(Ojs.fun_to_js 1 (fun _ -> x329 ()))|])
        let (get_maxHeadersCount : t -> float or_null) =
          fun (x331 : t) ->
            or_null_of_js Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x331) "maxHeadersCount")
        let (set_maxHeadersCount : t -> float or_null -> unit) =
          fun (x333 : t) ->
            fun (x334 : float or_null) ->
              Ojs.set_prop_ascii (t_to_js x333) "maxHeadersCount"
                (or_null_to_js Ojs.float_to_js x334)
        let (get_timeout : t -> float) =
          fun (x336 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x336) "timeout")
        let (set_timeout : t -> float -> unit) =
          fun (x337 : t) ->
            fun (x338 : float) ->
              Ojs.set_prop_ascii (t_to_js x337) "timeout"
                (Ojs.float_to_js x338)
        let (get_headersTimeout : t -> float) =
          fun (x339 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x339) "headersTimeout")
        let (set_headersTimeout : t -> float -> unit) =
          fun (x340 : t) ->
            fun (x341 : float) ->
              Ojs.set_prop_ascii (t_to_js x340) "headersTimeout"
                (Ojs.float_to_js x341)
        let (get_keepAliveTimeout : t -> float) =
          fun (x342 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x342) "keepAliveTimeout")
        let (set_keepAliveTimeout : t -> float -> unit) =
          fun (x343 : t) ->
            fun (x344 : float) ->
              Ojs.set_prop_ascii (t_to_js x343) "keepAliveTimeout"
                (Ojs.float_to_js x344)
        let (get_requestTimeout : t -> float) =
          fun (x345 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x345) "requestTimeout")
        let (set_requestTimeout : t -> float -> unit) =
          fun (x346 : t) ->
            fun (x347 : float) ->
              Ojs.set_prop_ascii (t_to_js x346) "requestTimeout"
                (Ojs.float_to_js x347)
      end
    module Server =
      struct
        type t = http_Server
        let rec t_of_js : Ojs.t -> t =
          fun (x349 : Ojs.t) -> http_Server_of_js x349
        and t_to_js : t -> Ojs.t =
          fun (x348 : http_Server) -> http_Server_to_js x348
        let (cast : t -> http_HttpBase) =
          fun (x350 : t) -> http_HttpBase_of_js (t_to_js x350)
        let (create : ?requestListener:http_RequestListener -> unit -> t) =
          fun ?requestListener:(x351 : http_RequestListener option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.http "Server")
                   (let x352 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x351 with
                     | Some x353 ->
                         ignore
                           (Ojs.call x352 "push"
                              [|(http_RequestListener_to_js x353)|])
                     | None -> ());
                    x352))
        let (create' :
          options:http_ServerOptions ->
            ?requestListener:http_RequestListener -> unit -> t)
          =
          fun ~options:(x354 : http_ServerOptions) ->
            fun ?requestListener:(x355 : http_RequestListener option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.http "Server")
                     (let x356 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x356 "push"
                           [|(http_ServerOptions_to_js x354)|]);
                      (match x355 with
                       | Some x357 ->
                           ignore
                             (Ojs.call x356 "push"
                                [|(http_RequestListener_to_js x357)|])
                       | None -> ());
                      x356))
        let (cast : t -> Node_net.Net.Server.t) =
          fun (x358 : t) -> Node_net.Net.Server.t_of_js (t_to_js x358)
      end
    module OutgoingMessage =
      struct
        type t = http_OutgoingMessage
        let rec t_of_js : Ojs.t -> t =
          fun (x360 : Ojs.t) -> http_OutgoingMessage_of_js x360
        and t_to_js : t -> Ojs.t =
          fun (x359 : http_OutgoingMessage) ->
            http_OutgoingMessage_to_js x359
        let (get_upgrading : t -> bool) =
          fun (x361 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x361) "upgrading")
        let (set_upgrading : t -> bool -> unit) =
          fun (x362 : t) ->
            fun (x363 : bool) ->
              Ojs.set_prop_ascii (t_to_js x362) "upgrading"
                (Ojs.bool_to_js x363)
        let (get_chunkedEncoding : t -> bool) =
          fun (x364 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x364) "chunkedEncoding")
        let (set_chunkedEncoding : t -> bool -> unit) =
          fun (x365 : t) ->
            fun (x366 : bool) ->
              Ojs.set_prop_ascii (t_to_js x365) "chunkedEncoding"
                (Ojs.bool_to_js x366)
        let (get_shouldKeepAlive : t -> bool) =
          fun (x367 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x367) "shouldKeepAlive")
        let (set_shouldKeepAlive : t -> bool -> unit) =
          fun (x368 : t) ->
            fun (x369 : bool) ->
              Ojs.set_prop_ascii (t_to_js x368) "shouldKeepAlive"
                (Ojs.bool_to_js x369)
        let (get_useChunkedEncodingByDefault : t -> bool) =
          fun (x370 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x370)
                 "useChunkedEncodingByDefault")
        let (set_useChunkedEncodingByDefault : t -> bool -> unit) =
          fun (x371 : t) ->
            fun (x372 : bool) ->
              Ojs.set_prop_ascii (t_to_js x371) "useChunkedEncodingByDefault"
                (Ojs.bool_to_js x372)
        let (get_sendDate : t -> bool) =
          fun (x373 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x373) "sendDate")
        let (set_sendDate : t -> bool -> unit) =
          fun (x374 : t) ->
            fun (x375 : bool) ->
              Ojs.set_prop_ascii (t_to_js x374) "sendDate"
                (Ojs.bool_to_js x375)
        let (get_finished : t -> bool) =
          fun (x376 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x376) "finished")
        let (set_finished : t -> bool -> unit) =
          fun (x377 : t) ->
            fun (x378 : bool) ->
              Ojs.set_prop_ascii (t_to_js x377) "finished"
                (Ojs.bool_to_js x378)
        let (get_headersSent : t -> bool) =
          fun (x379 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x379) "headersSent")
        let (set_headersSent : t -> bool -> unit) =
          fun (x380 : t) ->
            fun (x381 : bool) ->
              Ojs.set_prop_ascii (t_to_js x380) "headersSent"
                (Ojs.bool_to_js x381)
        let (get_connection : t -> Node_net.Net.Socket.t or_null) =
          fun (x382 : t) ->
            or_null_of_js Node_net.Net.Socket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x382) "connection")
        let (set_connection : t -> Node_net.Net.Socket.t or_null -> unit) =
          fun (x384 : t) ->
            fun (x385 : Node_net.Net.Socket.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x384) "connection"
                (or_null_to_js Node_net.Net.Socket.t_to_js x385)
        let (get_socket : t -> Node_net.Net.Socket.t or_null) =
          fun (x387 : t) ->
            or_null_of_js Node_net.Net.Socket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x387) "socket")
        let (set_socket : t -> Node_net.Net.Socket.t or_null -> unit) =
          fun (x389 : t) ->
            fun (x390 : Node_net.Net.Socket.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x389) "socket"
                (or_null_to_js Node_net.Net.Socket.t_to_js x390)
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.http "OutgoingMessage")
                 [||])
        let (setTimeout :
          t -> msecs:float -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x396 : t) ->
            fun ~msecs:(x392 : float) ->
              fun ?callback:(x393 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x397 = t_to_js x396 in
                     Ojs.call (Ojs.get_prop_ascii x397 "setTimeout") "apply"
                       [|x397;((let x394 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x394 "push"
                                     [|(Ojs.float_to_js x392)|]);
                                (match x393 with
                                 | Some x395 ->
                                     ignore
                                       (Ojs.call x394 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x395 ()))|])
                                 | None -> ());
                                x394))|])
        let (setHeader :
          t -> name:string -> value:string list or_string or_number -> unit)
          =
          fun (x403 : t) ->
            fun ~name:(x398 : string) ->
              fun ~value:(x399 : string list or_string or_number) ->
                ignore
                  (Ojs.call (t_to_js x403) "setHeader"
                     [|(Ojs.string_to_js x398);(or_number_to_js
                                                  (fun
                                                     (x400 :
                                                       string list or_string)
                                                     ->
                                                     or_string_to_js
                                                       (fun
                                                          (x401 :
                                                            string list)
                                                          ->
                                                          Ojs.list_to_js
                                                            Ojs.string_to_js
                                                            x401) x400) x399)|])
        let (getHeader :
          t -> name:string -> string list or_string or_number or_undefined) =
          fun (x405 : t) ->
            fun ~name:(x404 : string) ->
              or_undefined_of_js
                (fun (x406 : Ojs.t) ->
                   or_number_of_js
                     (fun (x407 : Ojs.t) ->
                        or_string_of_js
                          (fun (x408 : Ojs.t) ->
                             Ojs.list_of_js Ojs.string_of_js x408) x407) x406)
                (Ojs.call (t_to_js x405) "getHeader"
                   [|(Ojs.string_to_js x404)|])
        let (getHeaders : t -> http_OutgoingHttpHeaders) =
          fun (x410 : t) ->
            http_OutgoingHttpHeaders_of_js
              (Ojs.call (t_to_js x410) "getHeaders" [||])
        let (getHeaderNames : t -> string list) =
          fun (x411 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x411) "getHeaderNames" [||])
        let (hasHeader : t -> name:string -> bool) =
          fun (x414 : t) ->
            fun ~name:(x413 : string) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x414) "hasHeader"
                   [|(Ojs.string_to_js x413)|])
        let (removeHeader : t -> name:string -> unit) =
          fun (x416 : t) ->
            fun ~name:(x415 : string) ->
              ignore
                (Ojs.call (t_to_js x416) "removeHeader"
                   [|(Ojs.string_to_js x415)|])
        let (addTrailers :
          t ->
            headers:(http_OutgoingHttpHeaders, (string * string) list) union2
              -> unit)
          =
          fun (x424 : t) ->
            fun
              ~headers:(x417 :
                         (http_OutgoingHttpHeaders, (string * string) list)
                           union2)
              ->
              ignore
                (Ojs.call (t_to_js x424) "addTrailers"
                   [|(union2_to_js http_OutgoingHttpHeaders_to_js
                        (fun (x419 : (string * string) list) ->
                           Ojs.list_to_js
                             (fun (x420 : (string * string)) ->
                                let (x421, x422) = x420 in
                                let x423 = Ojs.array_make 2 in
                                Ojs.array_set x423 0 (Ojs.string_to_js x421);
                                Ojs.array_set x423 1 (Ojs.string_to_js x422);
                                x423) x419) x417)|])
        let (flushHeaders : t -> unit) =
          fun (x425 : t) ->
            ignore (Ojs.call (t_to_js x425) "flushHeaders" [||])
        let (cast : t -> Stream.Writable.t) =
          fun (x426 : t) -> Stream.Writable.t_of_js (t_to_js x426)
      end
    module ServerResponse =
      struct
        type t = http_ServerResponse
        let rec t_of_js : Ojs.t -> t =
          fun (x428 : Ojs.t) -> http_ServerResponse_of_js x428
        and t_to_js : t -> Ojs.t =
          fun (x427 : http_ServerResponse) -> http_ServerResponse_to_js x427
        let (get_statusCode : t -> float) =
          fun (x429 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x429) "statusCode")
        let (set_statusCode : t -> float -> unit) =
          fun (x430 : t) ->
            fun (x431 : float) ->
              Ojs.set_prop_ascii (t_to_js x430) "statusCode"
                (Ojs.float_to_js x431)
        let (get_statusMessage : t -> string) =
          fun (x432 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x432) "statusMessage")
        let (set_statusMessage : t -> string -> unit) =
          fun (x433 : t) ->
            fun (x434 : string) ->
              Ojs.set_prop_ascii (t_to_js x433) "statusMessage"
                (Ojs.string_to_js x434)
        let (create : req:http_IncomingMessage -> t) =
          fun ~req:(x435 : http_IncomingMessage) ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.http "ServerResponse")
                 [|(http_IncomingMessage_to_js x435)|])
        let (assignSocket : t -> socket:Node_net.Net.Socket.t -> unit) =
          fun (x437 : t) ->
            fun ~socket:(x436 : Node_net.Net.Socket.t) ->
              ignore
                (Ojs.call (t_to_js x437) "assignSocket"
                   [|(Node_net.Net.Socket.t_to_js x436)|])
        let (detachSocket : t -> socket:Node_net.Net.Socket.t -> unit) =
          fun (x439 : t) ->
            fun ~socket:(x438 : Node_net.Net.Socket.t) ->
              ignore
                (Ojs.call (t_to_js x439) "detachSocket"
                   [|(Node_net.Net.Socket.t_to_js x438)|])
        let (writeContinue : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x443 : t) ->
            fun ?callback:(x440 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x444 = t_to_js x443 in
                   Ojs.call (Ojs.get_prop_ascii x444 "writeContinue") "apply"
                     [|x444;((let x441 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x440 with
                               | Some x442 ->
                                   ignore
                                     (Ojs.call x441 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x442 ()))|])
                               | None -> ());
                              x441))|])
        let (writeHead :
          t ->
            statusCode:float ->
              ?reasonPhrase:string ->
                ?headers:(http_OutgoingHttpHeaders, http_OutgoingHttpHeader)
                  or_array -> unit -> t)
          =
          fun (x453 : t) ->
            fun ~statusCode:(x445 : float) ->
              fun ?reasonPhrase:(x446 : string option) ->
                fun
                  ?headers:(x447 :
                             (http_OutgoingHttpHeaders,
                               http_OutgoingHttpHeader) or_array option)
                  ->
                  fun () ->
                    t_of_js
                      (let x454 = t_to_js x453 in
                       Ojs.call (Ojs.get_prop_ascii x454 "writeHead") "apply"
                         [|x454;((let x448 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x448 "push"
                                       [|(Ojs.float_to_js x445)|]);
                                  (match x446 with
                                   | Some x452 ->
                                       ignore
                                         (Ojs.call x448 "push"
                                            [|(Ojs.string_to_js x452)|])
                                   | None -> ());
                                  (match x447 with
                                   | Some x449 ->
                                       ignore
                                         (Ojs.call x448 "push"
                                            [|(or_array_to_js
                                                 http_OutgoingHttpHeaders_to_js
                                                 http_OutgoingHttpHeader_to_js
                                                 x449)|])
                                   | None -> ());
                                  x448))|])
        let (writeHead' :
          t ->
            statusCode:float ->
              ?headers:(http_OutgoingHttpHeaders, http_OutgoingHttpHeader)
                or_array -> unit -> t)
          =
          fun (x461 : t) ->
            fun ~statusCode:(x455 : float) ->
              fun
                ?headers:(x456 :
                           (http_OutgoingHttpHeaders,
                             http_OutgoingHttpHeader) or_array option)
                ->
                fun () ->
                  t_of_js
                    (let x462 = t_to_js x461 in
                     Ojs.call (Ojs.get_prop_ascii x462 "writeHead") "apply"
                       [|x462;((let x457 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x457 "push"
                                     [|(Ojs.float_to_js x455)|]);
                                (match x456 with
                                 | Some x458 ->
                                     ignore
                                       (Ojs.call x457 "push"
                                          [|(or_array_to_js
                                               http_OutgoingHttpHeaders_to_js
                                               http_OutgoingHttpHeader_to_js
                                               x458)|])
                                 | None -> ());
                                x457))|])
        let (writeProcessing : t -> unit) =
          fun (x463 : t) ->
            ignore (Ojs.call (t_to_js x463) "writeProcessing" [||])
        let (cast : t -> http_OutgoingMessage) =
          fun (x464 : t) -> http_OutgoingMessage_of_js (t_to_js x464)
      end
    module InformationEvent =
      struct
        type t = http_InformationEvent
        let rec t_of_js : Ojs.t -> t =
          fun (x466 : Ojs.t) -> http_InformationEvent_of_js x466
        and t_to_js : t -> Ojs.t =
          fun (x465 : http_InformationEvent) ->
            http_InformationEvent_to_js x465
        let (get_statusCode : t -> float) =
          fun (x467 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x467) "statusCode")
        let (set_statusCode : t -> float -> unit) =
          fun (x468 : t) ->
            fun (x469 : float) ->
              Ojs.set_prop_ascii (t_to_js x468) "statusCode"
                (Ojs.float_to_js x469)
        let (get_statusMessage : t -> string) =
          fun (x470 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x470) "statusMessage")
        let (set_statusMessage : t -> string -> unit) =
          fun (x471 : t) ->
            fun (x472 : string) ->
              Ojs.set_prop_ascii (t_to_js x471) "statusMessage"
                (Ojs.string_to_js x472)
        let (get_httpVersion : t -> string) =
          fun (x473 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x473) "httpVersion")
        let (set_httpVersion : t -> string -> unit) =
          fun (x474 : t) ->
            fun (x475 : string) ->
              Ojs.set_prop_ascii (t_to_js x474) "httpVersion"
                (Ojs.string_to_js x475)
        let (get_httpVersionMajor : t -> float) =
          fun (x476 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x476) "httpVersionMajor")
        let (set_httpVersionMajor : t -> float -> unit) =
          fun (x477 : t) ->
            fun (x478 : float) ->
              Ojs.set_prop_ascii (t_to_js x477) "httpVersionMajor"
                (Ojs.float_to_js x478)
        let (get_httpVersionMinor : t -> float) =
          fun (x479 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x479) "httpVersionMinor")
        let (set_httpVersionMinor : t -> float -> unit) =
          fun (x480 : t) ->
            fun (x481 : float) ->
              Ojs.set_prop_ascii (t_to_js x480) "httpVersionMinor"
                (Ojs.float_to_js x481)
        let (get_headers : t -> http_IncomingHttpHeaders) =
          fun (x482 : t) ->
            http_IncomingHttpHeaders_of_js
              (Ojs.get_prop_ascii (t_to_js x482) "headers")
        let (set_headers : t -> http_IncomingHttpHeaders -> unit) =
          fun (x483 : t) ->
            fun (x484 : http_IncomingHttpHeaders) ->
              Ojs.set_prop_ascii (t_to_js x483) "headers"
                (http_IncomingHttpHeaders_to_js x484)
        let (get_rawHeaders : t -> string list) =
          fun (x485 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x485) "rawHeaders")
        let (set_rawHeaders : t -> string list -> unit) =
          fun (x487 : t) ->
            fun (x488 : string list) ->
              Ojs.set_prop_ascii (t_to_js x487) "rawHeaders"
                (Ojs.list_to_js Ojs.string_to_js x488)
      end
    module ClientRequest =
      struct
        type t = http_ClientRequest
        let rec t_of_js : Ojs.t -> t =
          fun (x491 : Ojs.t) -> http_ClientRequest_of_js x491
        and t_to_js : t -> Ojs.t =
          fun (x490 : http_ClientRequest) -> http_ClientRequest_to_js x490
        let (get_aborted : t -> bool) =
          fun (x492 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x492) "aborted")
        let (set_aborted : t -> bool -> unit) =
          fun (x493 : t) ->
            fun (x494 : bool) ->
              Ojs.set_prop_ascii (t_to_js x493) "aborted"
                (Ojs.bool_to_js x494)
        let (get_host : t -> string) =
          fun (x495 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x495) "host")
        let (set_host : t -> string -> unit) =
          fun (x496 : t) ->
            fun (x497 : string) ->
              Ojs.set_prop_ascii (t_to_js x496) "host"
                (Ojs.string_to_js x497)
        let (get_protocol : t -> string) =
          fun (x498 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x498) "protocol")
        let (set_protocol : t -> string -> unit) =
          fun (x499 : t) ->
            fun (x500 : string) ->
              Ojs.set_prop_ascii (t_to_js x499) "protocol"
                (Ojs.string_to_js x500)
        let (create :
          url:(http_ClientRequestArgs, Node_url.Url.Url.t) union2 or_string
            -> ?cb:(res:http_IncomingMessage -> unit) -> unit -> t)
          =
          fun
            ~url:(x501 :
                   (http_ClientRequestArgs, Node_url.Url.Url.t) union2
                     or_string)
            ->
            fun ?cb:(x502 : (res:http_IncomingMessage -> unit) option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Import.http "ClientRequest")
                     (let x503 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x503 "push"
                           [|(or_string_to_js
                                (fun
                                   (x506 :
                                     (http_ClientRequestArgs,
                                       Node_url.Url.Url.t) union2)
                                   ->
                                   union2_to_js http_ClientRequestArgs_to_js
                                     Node_url.Url.Url.t_to_js x506) x501)|]);
                      (match x502 with
                       | Some x504 ->
                           ignore
                             (Ojs.call x503 "push"
                                [|(Ojs.fun_to_js 1
                                     (fun (x505 : Ojs.t) ->
                                        x504
                                          ~res:(http_IncomingMessage_of_js
                                                  x505)))|])
                       | None -> ());
                      x503))
        let (get_method : t -> string) =
          fun (x509 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x509) "method")
        let (set_method : t -> string -> unit) =
          fun (x510 : t) ->
            fun (x511 : string) ->
              Ojs.set_prop_ascii (t_to_js x510) "method"
                (Ojs.string_to_js x511)
        let (get_path : t -> string) =
          fun (x512 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x512) "path")
        let (set_path : t -> string -> unit) =
          fun (x513 : t) ->
            fun (x514 : string) ->
              Ojs.set_prop_ascii (t_to_js x513) "path"
                (Ojs.string_to_js x514)
        let (abort : t -> unit) =
          fun (x515 : t) -> ignore (Ojs.call (t_to_js x515) "abort" [||])
        let (onSocket : t -> socket:Node_net.Net.Socket.t -> unit) =
          fun (x517 : t) ->
            fun ~socket:(x516 : Node_net.Net.Socket.t) ->
              ignore
                (Ojs.call (t_to_js x517) "onSocket"
                   [|(Node_net.Net.Socket.t_to_js x516)|])
        let (setTimeout :
          t -> timeout:float -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x522 : t) ->
            fun ~timeout:(x518 : float) ->
              fun ?callback:(x519 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x523 = t_to_js x522 in
                     Ojs.call (Ojs.get_prop_ascii x523 "setTimeout") "apply"
                       [|x523;((let x520 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x520 "push"
                                     [|(Ojs.float_to_js x518)|]);
                                (match x519 with
                                 | Some x521 ->
                                     ignore
                                       (Ojs.call x520 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x521 ()))|])
                                 | None -> ());
                                x520))|])
        let (setNoDelay : t -> ?noDelay:bool -> unit -> unit) =
          fun (x527 : t) ->
            fun ?noDelay:(x524 : bool option) ->
              fun () ->
                ignore
                  (let x528 = t_to_js x527 in
                   Ojs.call (Ojs.get_prop_ascii x528 "setNoDelay") "apply"
                     [|x528;((let x525 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x524 with
                               | Some x526 ->
                                   ignore
                                     (Ojs.call x525 "push"
                                        [|(Ojs.bool_to_js x526)|])
                               | None -> ());
                              x525))|])
        let (setSocketKeepAlive :
          t -> ?enable:bool -> ?initialDelay:float -> unit -> unit) =
          fun (x534 : t) ->
            fun ?enable:(x529 : bool option) ->
              fun ?initialDelay:(x530 : float option) ->
                fun () ->
                  ignore
                    (let x535 = t_to_js x534 in
                     Ojs.call (Ojs.get_prop_ascii x535 "setSocketKeepAlive")
                       "apply"
                       [|x535;((let x531 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x529 with
                                 | Some x533 ->
                                     ignore
                                       (Ojs.call x531 "push"
                                          [|(Ojs.bool_to_js x533)|])
                                 | None -> ());
                                (match x530 with
                                 | Some x532 ->
                                     ignore
                                       (Ojs.call x531 "push"
                                          [|(Ojs.float_to_js x532)|])
                                 | None -> ());
                                x531))|])
        let (addListener :
          t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x538 : t) ->
            fun ~event:(x536 : [ `abort ]) ->
              fun ~listener:(x537 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x538) "addListener"
                     [|((match x536 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x537 ()))|])
        let (addListener' :
          t ->
            event:[ `connect ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x544 : t) ->
            fun ~event:(x539 : [ `connect ]) ->
              fun
                ~listener:(x540 :
                            response:http_IncomingMessage ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x544) "addListener"
                     [|((match x539 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x541 : Ojs.t) ->
                            fun (x542 : Ojs.t) ->
                              fun (x543 : Ojs.t) ->
                                x540
                                  ~response:(http_IncomingMessage_of_js x541)
                                  ~socket:(Node_net.Net.Socket.t_of_js x542)
                                  ~head:(Buffer.t_of_js x543)))|])
        let (addListener'' :
          t -> event:[ `continue ] -> listener:(unit -> unit) -> t) =
          fun (x547 : t) ->
            fun ~event:(x545 : [ `continue ]) ->
              fun ~listener:(x546 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x547) "addListener"
                     [|((match x545 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x546 ()))|])
        let (addListener''' :
          t ->
            event:[ `information ] ->
              listener:(info:http_InformationEvent -> unit) -> t)
          =
          fun (x551 : t) ->
            fun ~event:(x548 : [ `information ]) ->
              fun ~listener:(x549 : info:http_InformationEvent -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x551) "addListener"
                     [|((match x548 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x550 : Ojs.t) ->
                            x549 ~info:(http_InformationEvent_of_js x550)))|])
        let (addListener'''' :
          t ->
            event:[ `response ] ->
              listener:(response:http_IncomingMessage -> unit) -> t)
          =
          fun (x555 : t) ->
            fun ~event:(x552 : [ `response ]) ->
              fun ~listener:(x553 : response:http_IncomingMessage -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x555) "addListener"
                     [|((match x552 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x554 : Ojs.t) ->
                            x553 ~response:(http_IncomingMessage_of_js x554)))|])
        let (addListener''''' :
          t ->
            event:[ `socket ] ->
              listener:(socket:Node_net.Net.Socket.t -> unit) -> t)
          =
          fun (x559 : t) ->
            fun ~event:(x556 : [ `socket ]) ->
              fun ~listener:(x557 : socket:Node_net.Net.Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x559) "addListener"
                     [|((match x556 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x558 :
                                                                    Ojs.t) ->
                                                                    x557
                                                                    ~socket:(
                                                                    Node_net.Net.Socket.t_of_js
                                                                    x558)))|])
        let (addListener'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x562 : t) ->
            fun ~event:(x560 : [ `timeout ]) ->
              fun ~listener:(x561 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x562) "addListener"
                     [|((match x560 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x561 ()))|])
        let (addListener''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x568 : t) ->
            fun ~event:(x563 : [ `upgrade ]) ->
              fun
                ~listener:(x564 :
                            response:http_IncomingMessage ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x568) "addListener"
                     [|((match x563 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x565 : Ojs.t) ->
                            fun (x566 : Ojs.t) ->
                              fun (x567 : Ojs.t) ->
                                x564
                                  ~response:(http_IncomingMessage_of_js x565)
                                  ~socket:(Node_net.Net.Socket.t_of_js x566)
                                  ~head:(Buffer.t_of_js x567)))|])
        let (addListener'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x571 : t) ->
            fun ~event:(x569 : [ `close ]) ->
              fun ~listener:(x570 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x571) "addListener"
                     [|((match x569 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x570 ()))|])
        let (addListener''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x574 : t) ->
            fun ~event:(x572 : [ `drain ]) ->
              fun ~listener:(x573 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x574) "addListener"
                     [|((match x572 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x573 ()))|])
        let (addListener'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x578 : t) ->
            fun ~event:(x575 : [ `error ]) ->
              fun ~listener:(x576 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x578) "addListener"
                     [|((match x575 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x577 : Ojs.t) ->
                            x576 ~err:(Error.t_of_js x577)))|])
        let (addListener''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x581 : t) ->
            fun ~event:(x579 : [ `finish ]) ->
              fun ~listener:(x580 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x581) "addListener"
                     [|((match x579 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x580 ()))|])
        let (addListener'''''''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x585 : t) ->
            fun ~event:(x582 : [ `pipe ]) ->
              fun ~listener:(x583 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x585) "addListener"
                     [|((match x582 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x584 : Ojs.t) ->
                            x583 ~src:(Stream.Readable.t_of_js x584)))|])
        let (addListener''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x589 : t) ->
            fun ~event:(x586 : [ `unpipe ]) ->
              fun ~listener:(x587 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x589) "addListener"
                     [|((match x586 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x588 :
                                                                    Ojs.t) ->
                                                                    x587
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x588)))|])
        let (addListener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x595 : t) ->
            fun ~event:(x590 : symbol or_string) ->
              fun ~listener:(x592 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x595) "addListener"
                     [|(or_string_to_js symbol_to_js x590);(Ojs.fun_to_js_args
                                                              (fun (x593 : _)
                                                                 ->
                                                                 x592
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x593 0)))|])
        let (on : t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x598 : t) ->
            fun ~event:(x596 : [ `abort ]) ->
              fun ~listener:(x597 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x598) "on"
                     [|((match x596 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x597 ()))|])
        let (on' :
          t ->
            event:[ `connect ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x604 : t) ->
            fun ~event:(x599 : [ `connect ]) ->
              fun
                ~listener:(x600 :
                            response:http_IncomingMessage ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x604) "on"
                     [|((match x599 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x601 : Ojs.t) ->
                            fun (x602 : Ojs.t) ->
                              fun (x603 : Ojs.t) ->
                                x600
                                  ~response:(http_IncomingMessage_of_js x601)
                                  ~socket:(Node_net.Net.Socket.t_of_js x602)
                                  ~head:(Buffer.t_of_js x603)))|])
        let (on'' : t -> event:[ `continue ] -> listener:(unit -> unit) -> t)
          =
          fun (x607 : t) ->
            fun ~event:(x605 : [ `continue ]) ->
              fun ~listener:(x606 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x607) "on"
                     [|((match x605 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x606 ()))|])
        let (on''' :
          t ->
            event:[ `information ] ->
              listener:(info:http_InformationEvent -> unit) -> t)
          =
          fun (x611 : t) ->
            fun ~event:(x608 : [ `information ]) ->
              fun ~listener:(x609 : info:http_InformationEvent -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x611) "on"
                     [|((match x608 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x610 : Ojs.t) ->
                            x609 ~info:(http_InformationEvent_of_js x610)))|])
        let (on'''' :
          t ->
            event:[ `response ] ->
              listener:(response:http_IncomingMessage -> unit) -> t)
          =
          fun (x615 : t) ->
            fun ~event:(x612 : [ `response ]) ->
              fun ~listener:(x613 : response:http_IncomingMessage -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x615) "on"
                     [|((match x612 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x614 : Ojs.t) ->
                            x613 ~response:(http_IncomingMessage_of_js x614)))|])
        let (on''''' :
          t ->
            event:[ `socket ] ->
              listener:(socket:Node_net.Net.Socket.t -> unit) -> t)
          =
          fun (x619 : t) ->
            fun ~event:(x616 : [ `socket ]) ->
              fun ~listener:(x617 : socket:Node_net.Net.Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x619) "on"
                     [|((match x616 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x618 :
                                                                    Ojs.t) ->
                                                                    x617
                                                                    ~socket:(
                                                                    Node_net.Net.Socket.t_of_js
                                                                    x618)))|])
        let (on'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x622 : t) ->
            fun ~event:(x620 : [ `timeout ]) ->
              fun ~listener:(x621 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x622) "on"
                     [|((match x620 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x621 ()))|])
        let (on''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x628 : t) ->
            fun ~event:(x623 : [ `upgrade ]) ->
              fun
                ~listener:(x624 :
                            response:http_IncomingMessage ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x628) "on"
                     [|((match x623 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x625 : Ojs.t) ->
                            fun (x626 : Ojs.t) ->
                              fun (x627 : Ojs.t) ->
                                x624
                                  ~response:(http_IncomingMessage_of_js x625)
                                  ~socket:(Node_net.Net.Socket.t_of_js x626)
                                  ~head:(Buffer.t_of_js x627)))|])
        let (on'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x631 : t) ->
            fun ~event:(x629 : [ `close ]) ->
              fun ~listener:(x630 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x631) "on"
                     [|((match x629 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x630 ()))|])
        let (on''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x634 : t) ->
            fun ~event:(x632 : [ `drain ]) ->
              fun ~listener:(x633 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x634) "on"
                     [|((match x632 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x633 ()))|])
        let (on'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x638 : t) ->
            fun ~event:(x635 : [ `error ]) ->
              fun ~listener:(x636 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x638) "on"
                     [|((match x635 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x637 : Ojs.t) ->
                            x636 ~err:(Error.t_of_js x637)))|])
        let (on''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x641 : t) ->
            fun ~event:(x639 : [ `finish ]) ->
              fun ~listener:(x640 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x641) "on"
                     [|((match x639 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x640 ()))|])
        let (on'''''''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x645 : t) ->
            fun ~event:(x642 : [ `pipe ]) ->
              fun ~listener:(x643 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x645) "on"
                     [|((match x642 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x644 : Ojs.t) ->
                            x643 ~src:(Stream.Readable.t_of_js x644)))|])
        let (on''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x649 : t) ->
            fun ~event:(x646 : [ `unpipe ]) ->
              fun ~listener:(x647 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x649) "on"
                     [|((match x646 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x648 :
                                                                    Ojs.t) ->
                                                                    x647
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x648)))|])
        let (on'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x655 : t) ->
            fun ~event:(x650 : symbol or_string) ->
              fun ~listener:(x652 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x655) "on"
                     [|(or_string_to_js symbol_to_js x650);(Ojs.fun_to_js_args
                                                              (fun (x653 : _)
                                                                 ->
                                                                 x652
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x653 0)))|])
        let (once : t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x658 : t) ->
            fun ~event:(x656 : [ `abort ]) ->
              fun ~listener:(x657 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x658) "once"
                     [|((match x656 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x657 ()))|])
        let (once' :
          t ->
            event:[ `connect ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x664 : t) ->
            fun ~event:(x659 : [ `connect ]) ->
              fun
                ~listener:(x660 :
                            response:http_IncomingMessage ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x664) "once"
                     [|((match x659 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x661 : Ojs.t) ->
                            fun (x662 : Ojs.t) ->
                              fun (x663 : Ojs.t) ->
                                x660
                                  ~response:(http_IncomingMessage_of_js x661)
                                  ~socket:(Node_net.Net.Socket.t_of_js x662)
                                  ~head:(Buffer.t_of_js x663)))|])
        let (once'' :
          t -> event:[ `continue ] -> listener:(unit -> unit) -> t) =
          fun (x667 : t) ->
            fun ~event:(x665 : [ `continue ]) ->
              fun ~listener:(x666 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x667) "once"
                     [|((match x665 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x666 ()))|])
        let (once''' :
          t ->
            event:[ `information ] ->
              listener:(info:http_InformationEvent -> unit) -> t)
          =
          fun (x671 : t) ->
            fun ~event:(x668 : [ `information ]) ->
              fun ~listener:(x669 : info:http_InformationEvent -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x671) "once"
                     [|((match x668 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x670 : Ojs.t) ->
                            x669 ~info:(http_InformationEvent_of_js x670)))|])
        let (once'''' :
          t ->
            event:[ `response ] ->
              listener:(response:http_IncomingMessage -> unit) -> t)
          =
          fun (x675 : t) ->
            fun ~event:(x672 : [ `response ]) ->
              fun ~listener:(x673 : response:http_IncomingMessage -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x675) "once"
                     [|((match x672 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x674 : Ojs.t) ->
                            x673 ~response:(http_IncomingMessage_of_js x674)))|])
        let (once''''' :
          t ->
            event:[ `socket ] ->
              listener:(socket:Node_net.Net.Socket.t -> unit) -> t)
          =
          fun (x679 : t) ->
            fun ~event:(x676 : [ `socket ]) ->
              fun ~listener:(x677 : socket:Node_net.Net.Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x679) "once"
                     [|((match x676 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x678 :
                                                                    Ojs.t) ->
                                                                    x677
                                                                    ~socket:(
                                                                    Node_net.Net.Socket.t_of_js
                                                                    x678)))|])
        let (once'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x682 : t) ->
            fun ~event:(x680 : [ `timeout ]) ->
              fun ~listener:(x681 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x682) "once"
                     [|((match x680 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x681 ()))|])
        let (once''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x688 : t) ->
            fun ~event:(x683 : [ `upgrade ]) ->
              fun
                ~listener:(x684 :
                            response:http_IncomingMessage ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x688) "once"
                     [|((match x683 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x685 : Ojs.t) ->
                            fun (x686 : Ojs.t) ->
                              fun (x687 : Ojs.t) ->
                                x684
                                  ~response:(http_IncomingMessage_of_js x685)
                                  ~socket:(Node_net.Net.Socket.t_of_js x686)
                                  ~head:(Buffer.t_of_js x687)))|])
        let (once'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x691 : t) ->
            fun ~event:(x689 : [ `close ]) ->
              fun ~listener:(x690 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x691) "once"
                     [|((match x689 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x690 ()))|])
        let (once''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x694 : t) ->
            fun ~event:(x692 : [ `drain ]) ->
              fun ~listener:(x693 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x694) "once"
                     [|((match x692 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x693 ()))|])
        let (once'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x698 : t) ->
            fun ~event:(x695 : [ `error ]) ->
              fun ~listener:(x696 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x698) "once"
                     [|((match x695 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x697 : Ojs.t) ->
                            x696 ~err:(Error.t_of_js x697)))|])
        let (once''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x701 : t) ->
            fun ~event:(x699 : [ `finish ]) ->
              fun ~listener:(x700 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x701) "once"
                     [|((match x699 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x700 ()))|])
        let (once'''''''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x705 : t) ->
            fun ~event:(x702 : [ `pipe ]) ->
              fun ~listener:(x703 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x705) "once"
                     [|((match x702 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x704 : Ojs.t) ->
                            x703 ~src:(Stream.Readable.t_of_js x704)))|])
        let (once''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x709 : t) ->
            fun ~event:(x706 : [ `unpipe ]) ->
              fun ~listener:(x707 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x709) "once"
                     [|((match x706 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x708 :
                                                                    Ojs.t) ->
                                                                    x707
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x708)))|])
        let (once'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x715 : t) ->
            fun ~event:(x710 : symbol or_string) ->
              fun ~listener:(x712 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x715) "once"
                     [|(or_string_to_js symbol_to_js x710);(Ojs.fun_to_js_args
                                                              (fun (x713 : _)
                                                                 ->
                                                                 x712
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x713 0)))|])
        let (prependListener :
          t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x718 : t) ->
            fun ~event:(x716 : [ `abort ]) ->
              fun ~listener:(x717 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x718) "prependListener"
                     [|((match x716 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x717 ()))|])
        let (prependListener' :
          t ->
            event:[ `connect ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x724 : t) ->
            fun ~event:(x719 : [ `connect ]) ->
              fun
                ~listener:(x720 :
                            response:http_IncomingMessage ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x724) "prependListener"
                     [|((match x719 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x721 : Ojs.t) ->
                            fun (x722 : Ojs.t) ->
                              fun (x723 : Ojs.t) ->
                                x720
                                  ~response:(http_IncomingMessage_of_js x721)
                                  ~socket:(Node_net.Net.Socket.t_of_js x722)
                                  ~head:(Buffer.t_of_js x723)))|])
        let (prependListener'' :
          t -> event:[ `continue ] -> listener:(unit -> unit) -> t) =
          fun (x727 : t) ->
            fun ~event:(x725 : [ `continue ]) ->
              fun ~listener:(x726 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x727) "prependListener"
                     [|((match x725 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x726 ()))|])
        let (prependListener''' :
          t ->
            event:[ `information ] ->
              listener:(info:http_InformationEvent -> unit) -> t)
          =
          fun (x731 : t) ->
            fun ~event:(x728 : [ `information ]) ->
              fun ~listener:(x729 : info:http_InformationEvent -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x731) "prependListener"
                     [|((match x728 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x730 : Ojs.t) ->
                            x729 ~info:(http_InformationEvent_of_js x730)))|])
        let (prependListener'''' :
          t ->
            event:[ `response ] ->
              listener:(response:http_IncomingMessage -> unit) -> t)
          =
          fun (x735 : t) ->
            fun ~event:(x732 : [ `response ]) ->
              fun ~listener:(x733 : response:http_IncomingMessage -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x735) "prependListener"
                     [|((match x732 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x734 : Ojs.t) ->
                            x733 ~response:(http_IncomingMessage_of_js x734)))|])
        let (prependListener''''' :
          t ->
            event:[ `socket ] ->
              listener:(socket:Node_net.Net.Socket.t -> unit) -> t)
          =
          fun (x739 : t) ->
            fun ~event:(x736 : [ `socket ]) ->
              fun ~listener:(x737 : socket:Node_net.Net.Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x739) "prependListener"
                     [|((match x736 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x738 :
                                                                    Ojs.t) ->
                                                                    x737
                                                                    ~socket:(
                                                                    Node_net.Net.Socket.t_of_js
                                                                    x738)))|])
        let (prependListener'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x742 : t) ->
            fun ~event:(x740 : [ `timeout ]) ->
              fun ~listener:(x741 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x742) "prependListener"
                     [|((match x740 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x741 ()))|])
        let (prependListener''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x748 : t) ->
            fun ~event:(x743 : [ `upgrade ]) ->
              fun
                ~listener:(x744 :
                            response:http_IncomingMessage ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x748) "prependListener"
                     [|((match x743 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x745 : Ojs.t) ->
                            fun (x746 : Ojs.t) ->
                              fun (x747 : Ojs.t) ->
                                x744
                                  ~response:(http_IncomingMessage_of_js x745)
                                  ~socket:(Node_net.Net.Socket.t_of_js x746)
                                  ~head:(Buffer.t_of_js x747)))|])
        let (prependListener'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x751 : t) ->
            fun ~event:(x749 : [ `close ]) ->
              fun ~listener:(x750 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x751) "prependListener"
                     [|((match x749 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x750 ()))|])
        let (prependListener''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x754 : t) ->
            fun ~event:(x752 : [ `drain ]) ->
              fun ~listener:(x753 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x754) "prependListener"
                     [|((match x752 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x753 ()))|])
        let (prependListener'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x758 : t) ->
            fun ~event:(x755 : [ `error ]) ->
              fun ~listener:(x756 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x758) "prependListener"
                     [|((match x755 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x757 : Ojs.t) ->
                            x756 ~err:(Error.t_of_js x757)))|])
        let (prependListener''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x761 : t) ->
            fun ~event:(x759 : [ `finish ]) ->
              fun ~listener:(x760 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x761) "prependListener"
                     [|((match x759 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x760 ()))|])
        let (prependListener'''''''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x765 : t) ->
            fun ~event:(x762 : [ `pipe ]) ->
              fun ~listener:(x763 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x765) "prependListener"
                     [|((match x762 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x764 : Ojs.t) ->
                            x763 ~src:(Stream.Readable.t_of_js x764)))|])
        let (prependListener''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x769 : t) ->
            fun ~event:(x766 : [ `unpipe ]) ->
              fun ~listener:(x767 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x769) "prependListener"
                     [|((match x766 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x768 :
                                                                    Ojs.t) ->
                                                                    x767
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x768)))|])
        let (prependListener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x775 : t) ->
            fun ~event:(x770 : symbol or_string) ->
              fun ~listener:(x772 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x775) "prependListener"
                     [|(or_string_to_js symbol_to_js x770);(Ojs.fun_to_js_args
                                                              (fun (x773 : _)
                                                                 ->
                                                                 x772
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x773 0)))|])
        let (prependOnceListener :
          t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x778 : t) ->
            fun ~event:(x776 : [ `abort ]) ->
              fun ~listener:(x777 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x778) "prependOnceListener"
                     [|((match x776 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x777 ()))|])
        let (prependOnceListener' :
          t ->
            event:[ `connect ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x784 : t) ->
            fun ~event:(x779 : [ `connect ]) ->
              fun
                ~listener:(x780 :
                            response:http_IncomingMessage ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x784) "prependOnceListener"
                     [|((match x779 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x781 : Ojs.t) ->
                            fun (x782 : Ojs.t) ->
                              fun (x783 : Ojs.t) ->
                                x780
                                  ~response:(http_IncomingMessage_of_js x781)
                                  ~socket:(Node_net.Net.Socket.t_of_js x782)
                                  ~head:(Buffer.t_of_js x783)))|])
        let (prependOnceListener'' :
          t -> event:[ `continue ] -> listener:(unit -> unit) -> t) =
          fun (x787 : t) ->
            fun ~event:(x785 : [ `continue ]) ->
              fun ~listener:(x786 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x787) "prependOnceListener"
                     [|((match x785 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x786 ()))|])
        let (prependOnceListener''' :
          t ->
            event:[ `information ] ->
              listener:(info:http_InformationEvent -> unit) -> t)
          =
          fun (x791 : t) ->
            fun ~event:(x788 : [ `information ]) ->
              fun ~listener:(x789 : info:http_InformationEvent -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x791) "prependOnceListener"
                     [|((match x788 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x790 : Ojs.t) ->
                            x789 ~info:(http_InformationEvent_of_js x790)))|])
        let (prependOnceListener'''' :
          t ->
            event:[ `response ] ->
              listener:(response:http_IncomingMessage -> unit) -> t)
          =
          fun (x795 : t) ->
            fun ~event:(x792 : [ `response ]) ->
              fun ~listener:(x793 : response:http_IncomingMessage -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x795) "prependOnceListener"
                     [|((match x792 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x794 : Ojs.t) ->
                            x793 ~response:(http_IncomingMessage_of_js x794)))|])
        let (prependOnceListener''''' :
          t ->
            event:[ `socket ] ->
              listener:(socket:Node_net.Net.Socket.t -> unit) -> t)
          =
          fun (x799 : t) ->
            fun ~event:(x796 : [ `socket ]) ->
              fun ~listener:(x797 : socket:Node_net.Net.Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x799) "prependOnceListener"
                     [|((match x796 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x798 :
                                                                    Ojs.t) ->
                                                                    x797
                                                                    ~socket:(
                                                                    Node_net.Net.Socket.t_of_js
                                                                    x798)))|])
        let (prependOnceListener'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x802 : t) ->
            fun ~event:(x800 : [ `timeout ]) ->
              fun ~listener:(x801 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x802) "prependOnceListener"
                     [|((match x800 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x801 ()))|])
        let (prependOnceListener''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:http_IncomingMessage ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x808 : t) ->
            fun ~event:(x803 : [ `upgrade ]) ->
              fun
                ~listener:(x804 :
                            response:http_IncomingMessage ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x808) "prependOnceListener"
                     [|((match x803 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x805 : Ojs.t) ->
                            fun (x806 : Ojs.t) ->
                              fun (x807 : Ojs.t) ->
                                x804
                                  ~response:(http_IncomingMessage_of_js x805)
                                  ~socket:(Node_net.Net.Socket.t_of_js x806)
                                  ~head:(Buffer.t_of_js x807)))|])
        let (prependOnceListener'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x811 : t) ->
            fun ~event:(x809 : [ `close ]) ->
              fun ~listener:(x810 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x811) "prependOnceListener"
                     [|((match x809 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x810 ()))|])
        let (prependOnceListener''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x814 : t) ->
            fun ~event:(x812 : [ `drain ]) ->
              fun ~listener:(x813 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x814) "prependOnceListener"
                     [|((match x812 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x813 ()))|])
        let (prependOnceListener'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x818 : t) ->
            fun ~event:(x815 : [ `error ]) ->
              fun ~listener:(x816 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x818) "prependOnceListener"
                     [|((match x815 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x817 : Ojs.t) ->
                            x816 ~err:(Error.t_of_js x817)))|])
        let (prependOnceListener''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x821 : t) ->
            fun ~event:(x819 : [ `finish ]) ->
              fun ~listener:(x820 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x821) "prependOnceListener"
                     [|((match x819 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x820 ()))|])
        let (prependOnceListener'''''''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x825 : t) ->
            fun ~event:(x822 : [ `pipe ]) ->
              fun ~listener:(x823 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x825) "prependOnceListener"
                     [|((match x822 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x824 : Ojs.t) ->
                            x823 ~src:(Stream.Readable.t_of_js x824)))|])
        let (prependOnceListener''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x829 : t) ->
            fun ~event:(x826 : [ `unpipe ]) ->
              fun ~listener:(x827 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x829) "prependOnceListener"
                     [|((match x826 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x828 :
                                                                    Ojs.t) ->
                                                                    x827
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x828)))|])
        let (prependOnceListener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x835 : t) ->
            fun ~event:(x830 : symbol or_string) ->
              fun ~listener:(x832 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x835) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x830);(Ojs.fun_to_js_args
                                                              (fun (x833 : _)
                                                                 ->
                                                                 x832
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x833 0)))|])
        let (cast : t -> http_OutgoingMessage) =
          fun (x836 : t) -> http_OutgoingMessage_of_js (t_to_js x836)
      end
    module IncomingMessage =
      struct
        include struct include Stream.Readable end
        let (create : socket:Node_net.Net.Socket.t -> t) =
          fun ~socket:(x837 : Node_net.Net.Socket.t) ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.http "IncomingMessage")
                 [|(Node_net.Net.Socket.t_to_js x837)|])
        let (get_aborted : t -> bool) =
          fun (x838 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x838) "aborted")
        let (set_aborted : t -> bool -> unit) =
          fun (x839 : t) ->
            fun (x840 : bool) ->
              Ojs.set_prop_ascii (t_to_js x839) "aborted"
                (Ojs.bool_to_js x840)
        let (get_httpVersion : t -> string) =
          fun (x841 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x841) "httpVersion")
        let (set_httpVersion : t -> string -> unit) =
          fun (x842 : t) ->
            fun (x843 : string) ->
              Ojs.set_prop_ascii (t_to_js x842) "httpVersion"
                (Ojs.string_to_js x843)
        let (get_httpVersionMajor : t -> float) =
          fun (x844 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x844) "httpVersionMajor")
        let (set_httpVersionMajor : t -> float -> unit) =
          fun (x845 : t) ->
            fun (x846 : float) ->
              Ojs.set_prop_ascii (t_to_js x845) "httpVersionMajor"
                (Ojs.float_to_js x846)
        let (get_httpVersionMinor : t -> float) =
          fun (x847 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x847) "httpVersionMinor")
        let (set_httpVersionMinor : t -> float -> unit) =
          fun (x848 : t) ->
            fun (x849 : float) ->
              Ojs.set_prop_ascii (t_to_js x848) "httpVersionMinor"
                (Ojs.float_to_js x849)
        let (get_complete : t -> bool) =
          fun (x850 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x850) "complete")
        let (set_complete : t -> bool -> unit) =
          fun (x851 : t) ->
            fun (x852 : bool) ->
              Ojs.set_prop_ascii (t_to_js x851) "complete"
                (Ojs.bool_to_js x852)
        let (get_connection : t -> Node_net.Net.Socket.t) =
          fun (x853 : t) ->
            Node_net.Net.Socket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x853) "connection")
        let (set_connection : t -> Node_net.Net.Socket.t -> unit) =
          fun (x854 : t) ->
            fun (x855 : Node_net.Net.Socket.t) ->
              Ojs.set_prop_ascii (t_to_js x854) "connection"
                (Node_net.Net.Socket.t_to_js x855)
        let (get_socket : t -> Node_net.Net.Socket.t) =
          fun (x856 : t) ->
            Node_net.Net.Socket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x856) "socket")
        let (set_socket : t -> Node_net.Net.Socket.t -> unit) =
          fun (x857 : t) ->
            fun (x858 : Node_net.Net.Socket.t) ->
              Ojs.set_prop_ascii (t_to_js x857) "socket"
                (Node_net.Net.Socket.t_to_js x858)
        let (get_headers : t -> http_IncomingHttpHeaders) =
          fun (x859 : t) ->
            http_IncomingHttpHeaders_of_js
              (Ojs.get_prop_ascii (t_to_js x859) "headers")
        let (set_headers : t -> http_IncomingHttpHeaders -> unit) =
          fun (x860 : t) ->
            fun (x861 : http_IncomingHttpHeaders) ->
              Ojs.set_prop_ascii (t_to_js x860) "headers"
                (http_IncomingHttpHeaders_to_js x861)
        let (get_rawHeaders : t -> string list) =
          fun (x862 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x862) "rawHeaders")
        let (set_rawHeaders : t -> string list -> unit) =
          fun (x864 : t) ->
            fun (x865 : string list) ->
              Ojs.set_prop_ascii (t_to_js x864) "rawHeaders"
                (Ojs.list_to_js Ojs.string_to_js x865)
        let (get_trailers : t -> string Dict.t) =
          fun (x867 : t) ->
            Dict.t_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x867) "trailers")
        let (set_trailers : t -> string Dict.t -> unit) =
          fun (x869 : t) ->
            fun (x870 : string Dict.t) ->
              Ojs.set_prop_ascii (t_to_js x869) "trailers"
                (Dict.t_to_js Ojs.string_to_js x870)
        let (get_rawTrailers : t -> string list) =
          fun (x872 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x872) "rawTrailers")
        let (set_rawTrailers : t -> string list -> unit) =
          fun (x874 : t) ->
            fun (x875 : string list) ->
              Ojs.set_prop_ascii (t_to_js x874) "rawTrailers"
                (Ojs.list_to_js Ojs.string_to_js x875)
        let (setTimeout :
          t -> msecs:float -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x881 : t) ->
            fun ~msecs:(x877 : float) ->
              fun ?callback:(x878 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x882 = t_to_js x881 in
                     Ojs.call (Ojs.get_prop_ascii x882 "setTimeout") "apply"
                       [|x882;((let x879 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x879 "push"
                                     [|(Ojs.float_to_js x877)|]);
                                (match x878 with
                                 | Some x880 ->
                                     ignore
                                       (Ojs.call x879 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x880 ()))|])
                                 | None -> ());
                                x879))|])
        let (get_method : t -> string) =
          fun (x883 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x883) "method")
        let (set_method : t -> string -> unit) =
          fun (x884 : t) ->
            fun (x885 : string) ->
              Ojs.set_prop_ascii (t_to_js x884) "method"
                (Ojs.string_to_js x885)
        let (get_url : t -> string) =
          fun (x886 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x886) "url")
        let (set_url : t -> string -> unit) =
          fun (x887 : t) ->
            fun (x888 : string) ->
              Ojs.set_prop_ascii (t_to_js x887) "url" (Ojs.string_to_js x888)
        let (get_statusCode : t -> float) =
          fun (x889 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x889) "statusCode")
        let (set_statusCode : t -> float -> unit) =
          fun (x890 : t) ->
            fun (x891 : float) ->
              Ojs.set_prop_ascii (t_to_js x890) "statusCode"
                (Ojs.float_to_js x891)
        let (get_statusMessage : t -> string) =
          fun (x892 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x892) "statusMessage")
        let (set_statusMessage : t -> string -> unit) =
          fun (x893 : t) ->
            fun (x894 : string) ->
              Ojs.set_prop_ascii (t_to_js x893) "statusMessage"
                (Ojs.string_to_js x894)
        let (destroy : t -> ?error:Error.t -> unit -> unit) =
          fun (x898 : t) ->
            fun ?error:(x895 : Error.t option) ->
              fun () ->
                ignore
                  (let x899 = t_to_js x898 in
                   Ojs.call (Ojs.get_prop_ascii x899 "destroy") "apply"
                     [|x899;((let x896 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x895 with
                               | Some x897 ->
                                   ignore
                                     (Ojs.call x896 "push"
                                        [|(Error.t_to_js x897)|])
                               | None -> ());
                              x896))|])
      end
    module AgentOptions =
      struct
        type t = http_AgentOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x901 : Ojs.t) -> http_AgentOptions_of_js x901
        and t_to_js : t -> Ojs.t =
          fun (x900 : http_AgentOptions) -> http_AgentOptions_to_js x900
        let (get_keepAlive : t -> bool) =
          fun (x902 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x902) "keepAlive")
        let (set_keepAlive : t -> bool -> unit) =
          fun (x903 : t) ->
            fun (x904 : bool) ->
              Ojs.set_prop_ascii (t_to_js x903) "keepAlive"
                (Ojs.bool_to_js x904)
        let (get_keepAliveMsecs : t -> float) =
          fun (x905 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x905) "keepAliveMsecs")
        let (set_keepAliveMsecs : t -> float -> unit) =
          fun (x906 : t) ->
            fun (x907 : float) ->
              Ojs.set_prop_ascii (t_to_js x906) "keepAliveMsecs"
                (Ojs.float_to_js x907)
        let (get_maxSockets : t -> float) =
          fun (x908 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x908) "maxSockets")
        let (set_maxSockets : t -> float -> unit) =
          fun (x909 : t) ->
            fun (x910 : float) ->
              Ojs.set_prop_ascii (t_to_js x909) "maxSockets"
                (Ojs.float_to_js x910)
        let (get_maxTotalSockets : t -> float) =
          fun (x911 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x911) "maxTotalSockets")
        let (set_maxTotalSockets : t -> float -> unit) =
          fun (x912 : t) ->
            fun (x913 : float) ->
              Ojs.set_prop_ascii (t_to_js x912) "maxTotalSockets"
                (Ojs.float_to_js x913)
        let (get_maxFreeSockets : t -> float) =
          fun (x914 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x914) "maxFreeSockets")
        let (set_maxFreeSockets : t -> float -> unit) =
          fun (x915 : t) ->
            fun (x916 : float) ->
              Ojs.set_prop_ascii (t_to_js x915) "maxFreeSockets"
                (Ojs.float_to_js x916)
        let (get_timeout : t -> float) =
          fun (x917 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x917) "timeout")
        let (set_timeout : t -> float -> unit) =
          fun (x918 : t) ->
            fun (x919 : float) ->
              Ojs.set_prop_ascii (t_to_js x918) "timeout"
                (Ojs.float_to_js x919)
        let (get_scheduling : t -> [ `fifo  | `lifo ]) =
          fun (x920 : t) ->
            let x921 = Ojs.get_prop_ascii (t_to_js x920) "scheduling" in
            match Ojs.string_of_js x921 with
            | "fifo" -> `fifo
            | "lifo" -> `lifo
            | _ -> assert false
        let (set_scheduling : t -> [ `fifo  | `lifo ] -> unit) =
          fun (x922 : t) ->
            fun (x923 : [ `fifo  | `lifo ]) ->
              Ojs.set_prop_ascii (t_to_js x922) "scheduling"
                (match x923 with
                 | `fifo -> Ojs.string_to_js "fifo"
                 | `lifo -> Ojs.string_to_js "lifo")
      end
    module Agent =
      struct
        type t = http_Agent
        let rec t_of_js : Ojs.t -> t =
          fun (x925 : Ojs.t) -> http_Agent_of_js x925
        and t_to_js : t -> Ojs.t =
          fun (x924 : http_Agent) -> http_Agent_to_js x924
        let (get_maxFreeSockets : t -> float) =
          fun (x926 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x926) "maxFreeSockets")
        let (set_maxFreeSockets : t -> float -> unit) =
          fun (x927 : t) ->
            fun (x928 : float) ->
              Ojs.set_prop_ascii (t_to_js x927) "maxFreeSockets"
                (Ojs.float_to_js x928)
        let (get_maxSockets : t -> float) =
          fun (x929 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x929) "maxSockets")
        let (set_maxSockets : t -> float -> unit) =
          fun (x930 : t) ->
            fun (x931 : float) ->
              Ojs.set_prop_ascii (t_to_js x930) "maxSockets"
                (Ojs.float_to_js x931)
        let (get_maxTotalSockets : t -> float) =
          fun (x932 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x932) "maxTotalSockets")
        let (set_maxTotalSockets : t -> float -> unit) =
          fun (x933 : t) ->
            fun (x934 : float) ->
              Ojs.set_prop_ascii (t_to_js x933) "maxTotalSockets"
                (Ojs.float_to_js x934)
        let (get_freeSockets :
          t -> Node_net.Net.Socket.t list ReadOnlyDict.t) =
          fun (x935 : t) ->
            ReadOnlyDict.t_of_js
              (fun (x936 : Ojs.t) ->
                 Ojs.list_of_js Node_net.Net.Socket.t_of_js x936)
              (Ojs.get_prop_ascii (t_to_js x935) "freeSockets")
        let (get_sockets : t -> Node_net.Net.Socket.t list ReadOnlyDict.t) =
          fun (x938 : t) ->
            ReadOnlyDict.t_of_js
              (fun (x939 : Ojs.t) ->
                 Ojs.list_of_js Node_net.Net.Socket.t_of_js x939)
              (Ojs.get_prop_ascii (t_to_js x938) "sockets")
        let (get_requests : t -> http_IncomingMessage list ReadOnlyDict.t) =
          fun (x941 : t) ->
            ReadOnlyDict.t_of_js
              (fun (x942 : Ojs.t) ->
                 Ojs.list_of_js http_IncomingMessage_of_js x942)
              (Ojs.get_prop_ascii (t_to_js x941) "requests")
        let (create : ?opts:http_AgentOptions -> unit -> t) =
          fun ?opts:(x944 : http_AgentOptions option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.http "Agent")
                   (let x945 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x944 with
                     | Some x946 ->
                         ignore
                           (Ojs.call x945 "push"
                              [|(http_AgentOptions_to_js x946)|])
                     | None -> ());
                    x945))
        let (destroy : t -> unit) =
          fun (x947 : t) -> ignore (Ojs.call (t_to_js x947) "destroy" [||])
      end
    let (mETHODS : string list) =
      Ojs.list_of_js Ojs.string_of_js
        (Ojs.get_prop_ascii Import.http "METHODS")
    let (sTATUS_CODES : anonymous_interface_0) =
      anonymous_interface_0_of_js
        (Ojs.get_prop_ascii Import.http "STATUS_CODES")
    let (createServer :
      ?requestListener:http_RequestListener -> unit -> http_Server) =
      fun ?requestListener:(x949 : http_RequestListener option) ->
        fun () ->
          http_Server_of_js
            (let x952 = Import.http in
             Ojs.call (Ojs.get_prop_ascii x952 "createServer") "apply"
               [|x952;((let x950 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x949 with
                         | Some x951 ->
                             ignore
                               (Ojs.call x950 "push"
                                  [|(http_RequestListener_to_js x951)|])
                         | None -> ());
                        x950))|])
    let (createServer :
      options:http_ServerOptions ->
        ?requestListener:http_RequestListener -> unit -> http_Server)
      =
      fun ~options:(x953 : http_ServerOptions) ->
        fun ?requestListener:(x954 : http_RequestListener option) ->
          fun () ->
            http_Server_of_js
              (let x957 = Import.http in
               Ojs.call (Ojs.get_prop_ascii x957 "createServer") "apply"
                 [|x957;((let x955 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x955 "push"
                               [|(http_ServerOptions_to_js x953)|]);
                          (match x954 with
                           | Some x956 ->
                               ignore
                                 (Ojs.call x955 "push"
                                    [|(http_RequestListener_to_js x956)|])
                           | None -> ());
                          x955))|])
    module RequestOptions =
      struct
        type t = http_RequestOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x959 : Ojs.t) -> http_RequestOptions_of_js x959
        and t_to_js : t -> Ojs.t =
          fun (x958 : http_RequestOptions) -> http_RequestOptions_to_js x958
        let (cast : t -> http_ClientRequestArgs) =
          fun (x960 : t) -> http_ClientRequestArgs_of_js (t_to_js x960)
      end
    let (request :
      options:(http_RequestOptions, Node_url.Url.Url.t) union2 or_string ->
        ?callback:(res:http_IncomingMessage -> unit) ->
          unit -> http_ClientRequest)
      =
      fun
        ~options:(x961 :
                   (http_RequestOptions, Node_url.Url.Url.t) union2 or_string)
        ->
        fun ?callback:(x962 : (res:http_IncomingMessage -> unit) option) ->
          fun () ->
            http_ClientRequest_of_js
              (let x969 = Import.http in
               Ojs.call (Ojs.get_prop_ascii x969 "request") "apply"
                 [|x969;((let x963 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x963 "push"
                               [|(or_string_to_js
                                    (fun
                                       (x966 :
                                         (http_RequestOptions,
                                           Node_url.Url.Url.t) union2)
                                       ->
                                       union2_to_js http_RequestOptions_to_js
                                         Node_url.Url.Url.t_to_js x966) x961)|]);
                          (match x962 with
                           | Some x964 ->
                               ignore
                                 (Ojs.call x963 "push"
                                    [|(Ojs.fun_to_js 1
                                         (fun (x965 : Ojs.t) ->
                                            x964
                                              ~res:(http_IncomingMessage_of_js
                                                      x965)))|])
                           | None -> ());
                          x963))|])
    let (request :
      url:Node_url.Url.Url.t or_string ->
        options:http_RequestOptions ->
          ?callback:(res:http_IncomingMessage -> unit) ->
            unit -> http_ClientRequest)
      =
      fun ~url:(x970 : Node_url.Url.Url.t or_string) ->
        fun ~options:(x971 : http_RequestOptions) ->
          fun ?callback:(x972 : (res:http_IncomingMessage -> unit) option) ->
            fun () ->
              http_ClientRequest_of_js
                (let x977 = Import.http in
                 Ojs.call (Ojs.get_prop_ascii x977 "request") "apply"
                   [|x977;((let x973 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x973 "push"
                                 [|(or_string_to_js Node_url.Url.Url.t_to_js
                                      x970)|]);
                            ignore
                              (Ojs.call x973 "push"
                                 [|(http_RequestOptions_to_js x971)|]);
                            (match x972 with
                             | Some x974 ->
                                 ignore
                                   (Ojs.call x973 "push"
                                      [|(Ojs.fun_to_js 1
                                           (fun (x975 : Ojs.t) ->
                                              x974
                                                ~res:(http_IncomingMessage_of_js
                                                        x975)))|])
                             | None -> ());
                            x973))|])
    let (get_ :
      options:(http_RequestOptions, Node_url.Url.Url.t) union2 or_string ->
        ?callback:(res:http_IncomingMessage -> unit) ->
          unit -> http_ClientRequest)
      =
      fun
        ~options:(x978 :
                   (http_RequestOptions, Node_url.Url.Url.t) union2 or_string)
        ->
        fun ?callback:(x979 : (res:http_IncomingMessage -> unit) option) ->
          fun () ->
            http_ClientRequest_of_js
              (let x986 = Import.http in
               Ojs.call (Ojs.get_prop_ascii x986 "get") "apply"
                 [|x986;((let x980 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x980 "push"
                               [|(or_string_to_js
                                    (fun
                                       (x983 :
                                         (http_RequestOptions,
                                           Node_url.Url.Url.t) union2)
                                       ->
                                       union2_to_js http_RequestOptions_to_js
                                         Node_url.Url.Url.t_to_js x983) x978)|]);
                          (match x979 with
                           | Some x981 ->
                               ignore
                                 (Ojs.call x980 "push"
                                    [|(Ojs.fun_to_js 1
                                         (fun (x982 : Ojs.t) ->
                                            x981
                                              ~res:(http_IncomingMessage_of_js
                                                      x982)))|])
                           | None -> ());
                          x980))|])
    let (get_ :
      url:Node_url.Url.Url.t or_string ->
        options:http_RequestOptions ->
          ?callback:(res:http_IncomingMessage -> unit) ->
            unit -> http_ClientRequest)
      =
      fun ~url:(x987 : Node_url.Url.Url.t or_string) ->
        fun ~options:(x988 : http_RequestOptions) ->
          fun ?callback:(x989 : (res:http_IncomingMessage -> unit) option) ->
            fun () ->
              http_ClientRequest_of_js
                (let x994 = Import.http in
                 Ojs.call (Ojs.get_prop_ascii x994 "get") "apply"
                   [|x994;((let x990 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x990 "push"
                                 [|(or_string_to_js Node_url.Url.Url.t_to_js
                                      x987)|]);
                            ignore
                              (Ojs.call x990 "push"
                                 [|(http_RequestOptions_to_js x988)|]);
                            (match x989 with
                             | Some x991 ->
                                 ignore
                                   (Ojs.call x990 "push"
                                      [|(Ojs.fun_to_js 1
                                           (fun (x992 : Ojs.t) ->
                                              x991
                                                ~res:(http_IncomingMessage_of_js
                                                        x992)))|])
                             | None -> ());
                            x990))|])
    let (globalAgent : http_Agent) =
      http_Agent_of_js (Ojs.get_prop_ascii Import.http "globalAgent")
    let (maxHeaderSize : float) =
      Ojs.float_of_js (Ojs.get_prop_ascii Import.http "maxHeaderSize")
  end
