[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get : t -> int -> string or_undefined) =
      fun (x3 : t) ->
        fun (x4 : int) ->
          or_undefined_of_js Ojs.string_of_js (Ojs.array_get (t_to_js x3) x4)
    let (set : t -> int -> string or_undefined -> unit) =
      fun (x6 : t) ->
        fun (x7 : int) ->
          fun (x8 : string or_undefined) ->
            Ojs.array_set (t_to_js x6) x7
              (or_undefined_to_js Ojs.string_to_js x8)
    let (get' : t -> string -> string or_undefined) =
      fun (x10 : t) ->
        fun (x11 : string) ->
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop (t_to_js x10) (Ojs.string_to_js x11))
    let (set' : t -> string -> string or_undefined -> unit) =
      fun (x13 : t) ->
        fun (x14 : string) ->
          fun (x15 : string or_undefined) ->
            Ojs.set_prop (t_to_js x13) (Ojs.string_to_js x14)
              (or_undefined_to_js Ojs.string_to_js x15)
  end
module Http =
  struct
    open Node_stream
    module IncomingHttpHeaders =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x18 : Ojs.t) -> x18
        and t_to_js : t -> Ojs.t = fun (x17 : Ojs.t) -> x17
        let (get_accept : t -> string) =
          fun (x19 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x19) "accept")
        let (set_accept : t -> string -> unit) =
          fun (x20 : t) ->
            fun (x21 : string) ->
              Ojs.set_prop_ascii (t_to_js x20) "accept"
                (Ojs.string_to_js x21)
        let (get_accept_language : t -> string) =
          fun (x22 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x22) "accept-language")
        let (set_accept_language : t -> string -> unit) =
          fun (x23 : t) ->
            fun (x24 : string) ->
              Ojs.set_prop_ascii (t_to_js x23) "accept-language"
                (Ojs.string_to_js x24)
        let (get_accept_patch : t -> string) =
          fun (x25 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x25) "accept-patch")
        let (set_accept_patch : t -> string -> unit) =
          fun (x26 : t) ->
            fun (x27 : string) ->
              Ojs.set_prop_ascii (t_to_js x26) "accept-patch"
                (Ojs.string_to_js x27)
        let (get_accept_ranges : t -> string) =
          fun (x28 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x28) "accept-ranges")
        let (set_accept_ranges : t -> string -> unit) =
          fun (x29 : t) ->
            fun (x30 : string) ->
              Ojs.set_prop_ascii (t_to_js x29) "accept-ranges"
                (Ojs.string_to_js x30)
        let (get_access_control_allow_credentials : t -> string) =
          fun (x31 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x31)
                 "access-control-allow-credentials")
        let (set_access_control_allow_credentials : t -> string -> unit) =
          fun (x32 : t) ->
            fun (x33 : string) ->
              Ojs.set_prop_ascii (t_to_js x32)
                "access-control-allow-credentials" (Ojs.string_to_js x33)
        let (get_access_control_allow_headers : t -> string) =
          fun (x34 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x34)
                 "access-control-allow-headers")
        let (set_access_control_allow_headers : t -> string -> unit) =
          fun (x35 : t) ->
            fun (x36 : string) ->
              Ojs.set_prop_ascii (t_to_js x35) "access-control-allow-headers"
                (Ojs.string_to_js x36)
        let (get_access_control_allow_methods : t -> string) =
          fun (x37 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x37)
                 "access-control-allow-methods")
        let (set_access_control_allow_methods : t -> string -> unit) =
          fun (x38 : t) ->
            fun (x39 : string) ->
              Ojs.set_prop_ascii (t_to_js x38) "access-control-allow-methods"
                (Ojs.string_to_js x39)
        let (get_access_control_allow_origin : t -> string) =
          fun (x40 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x40) "access-control-allow-origin")
        let (set_access_control_allow_origin : t -> string -> unit) =
          fun (x41 : t) ->
            fun (x42 : string) ->
              Ojs.set_prop_ascii (t_to_js x41) "access-control-allow-origin"
                (Ojs.string_to_js x42)
        let (get_access_control_expose_headers : t -> string) =
          fun (x43 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x43)
                 "access-control-expose-headers")
        let (set_access_control_expose_headers : t -> string -> unit) =
          fun (x44 : t) ->
            fun (x45 : string) ->
              Ojs.set_prop_ascii (t_to_js x44)
                "access-control-expose-headers" (Ojs.string_to_js x45)
        let (get_access_control_max_age : t -> string) =
          fun (x46 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x46) "access-control-max-age")
        let (set_access_control_max_age : t -> string -> unit) =
          fun (x47 : t) ->
            fun (x48 : string) ->
              Ojs.set_prop_ascii (t_to_js x47) "access-control-max-age"
                (Ojs.string_to_js x48)
        let (get_access_control_request_headers : t -> string) =
          fun (x49 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x49)
                 "access-control-request-headers")
        let (set_access_control_request_headers : t -> string -> unit) =
          fun (x50 : t) ->
            fun (x51 : string) ->
              Ojs.set_prop_ascii (t_to_js x50)
                "access-control-request-headers" (Ojs.string_to_js x51)
        let (get_access_control_request_method : t -> string) =
          fun (x52 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x52)
                 "access-control-request-method")
        let (set_access_control_request_method : t -> string -> unit) =
          fun (x53 : t) ->
            fun (x54 : string) ->
              Ojs.set_prop_ascii (t_to_js x53)
                "access-control-request-method" (Ojs.string_to_js x54)
        let (get_age : t -> string) =
          fun (x55 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x55) "age")
        let (set_age : t -> string -> unit) =
          fun (x56 : t) ->
            fun (x57 : string) ->
              Ojs.set_prop_ascii (t_to_js x56) "age" (Ojs.string_to_js x57)
        let (get_allow : t -> string) =
          fun (x58 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x58) "allow")
        let (set_allow : t -> string -> unit) =
          fun (x59 : t) ->
            fun (x60 : string) ->
              Ojs.set_prop_ascii (t_to_js x59) "allow" (Ojs.string_to_js x60)
        let (get_alt_svc : t -> string) =
          fun (x61 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x61) "alt-svc")
        let (set_alt_svc : t -> string -> unit) =
          fun (x62 : t) ->
            fun (x63 : string) ->
              Ojs.set_prop_ascii (t_to_js x62) "alt-svc"
                (Ojs.string_to_js x63)
        let (get_authorization : t -> string) =
          fun (x64 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x64) "authorization")
        let (set_authorization : t -> string -> unit) =
          fun (x65 : t) ->
            fun (x66 : string) ->
              Ojs.set_prop_ascii (t_to_js x65) "authorization"
                (Ojs.string_to_js x66)
        let (get_cache_control : t -> string) =
          fun (x67 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x67) "cache-control")
        let (set_cache_control : t -> string -> unit) =
          fun (x68 : t) ->
            fun (x69 : string) ->
              Ojs.set_prop_ascii (t_to_js x68) "cache-control"
                (Ojs.string_to_js x69)
        let (get_connection : t -> string) =
          fun (x70 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x70) "connection")
        let (set_connection : t -> string -> unit) =
          fun (x71 : t) ->
            fun (x72 : string) ->
              Ojs.set_prop_ascii (t_to_js x71) "connection"
                (Ojs.string_to_js x72)
        let (get_content_disposition : t -> string) =
          fun (x73 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x73) "content-disposition")
        let (set_content_disposition : t -> string -> unit) =
          fun (x74 : t) ->
            fun (x75 : string) ->
              Ojs.set_prop_ascii (t_to_js x74) "content-disposition"
                (Ojs.string_to_js x75)
        let (get_content_encoding : t -> string) =
          fun (x76 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x76) "content-encoding")
        let (set_content_encoding : t -> string -> unit) =
          fun (x77 : t) ->
            fun (x78 : string) ->
              Ojs.set_prop_ascii (t_to_js x77) "content-encoding"
                (Ojs.string_to_js x78)
        let (get_content_language : t -> string) =
          fun (x79 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x79) "content-language")
        let (set_content_language : t -> string -> unit) =
          fun (x80 : t) ->
            fun (x81 : string) ->
              Ojs.set_prop_ascii (t_to_js x80) "content-language"
                (Ojs.string_to_js x81)
        let (get_content_length : t -> string) =
          fun (x82 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x82) "content-length")
        let (set_content_length : t -> string -> unit) =
          fun (x83 : t) ->
            fun (x84 : string) ->
              Ojs.set_prop_ascii (t_to_js x83) "content-length"
                (Ojs.string_to_js x84)
        let (get_content_location : t -> string) =
          fun (x85 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x85) "content-location")
        let (set_content_location : t -> string -> unit) =
          fun (x86 : t) ->
            fun (x87 : string) ->
              Ojs.set_prop_ascii (t_to_js x86) "content-location"
                (Ojs.string_to_js x87)
        let (get_content_range : t -> string) =
          fun (x88 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x88) "content-range")
        let (set_content_range : t -> string -> unit) =
          fun (x89 : t) ->
            fun (x90 : string) ->
              Ojs.set_prop_ascii (t_to_js x89) "content-range"
                (Ojs.string_to_js x90)
        let (get_content_type : t -> string) =
          fun (x91 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x91) "content-type")
        let (set_content_type : t -> string -> unit) =
          fun (x92 : t) ->
            fun (x93 : string) ->
              Ojs.set_prop_ascii (t_to_js x92) "content-type"
                (Ojs.string_to_js x93)
        let (get_cookie : t -> string) =
          fun (x94 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x94) "cookie")
        let (set_cookie : t -> string -> unit) =
          fun (x95 : t) ->
            fun (x96 : string) ->
              Ojs.set_prop_ascii (t_to_js x95) "cookie"
                (Ojs.string_to_js x96)
        let (get_date : t -> string) =
          fun (x97 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x97) "date")
        let (set_date : t -> string -> unit) =
          fun (x98 : t) ->
            fun (x99 : string) ->
              Ojs.set_prop_ascii (t_to_js x98) "date" (Ojs.string_to_js x99)
        let (get_expect : t -> string) =
          fun (x100 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x100) "expect")
        let (set_expect : t -> string -> unit) =
          fun (x101 : t) ->
            fun (x102 : string) ->
              Ojs.set_prop_ascii (t_to_js x101) "expect"
                (Ojs.string_to_js x102)
        let (get_expires : t -> string) =
          fun (x103 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x103) "expires")
        let (set_expires : t -> string -> unit) =
          fun (x104 : t) ->
            fun (x105 : string) ->
              Ojs.set_prop_ascii (t_to_js x104) "expires"
                (Ojs.string_to_js x105)
        let (get_forwarded : t -> string) =
          fun (x106 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x106) "forwarded")
        let (set_forwarded : t -> string -> unit) =
          fun (x107 : t) ->
            fun (x108 : string) ->
              Ojs.set_prop_ascii (t_to_js x107) "forwarded"
                (Ojs.string_to_js x108)
        let (get_from : t -> string) =
          fun (x109 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x109) "from")
        let (set_from : t -> string -> unit) =
          fun (x110 : t) ->
            fun (x111 : string) ->
              Ojs.set_prop_ascii (t_to_js x110) "from"
                (Ojs.string_to_js x111)
        let (get_host : t -> string) =
          fun (x112 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x112) "host")
        let (set_host : t -> string -> unit) =
          fun (x113 : t) ->
            fun (x114 : string) ->
              Ojs.set_prop_ascii (t_to_js x113) "host"
                (Ojs.string_to_js x114)
        let (get_if_match : t -> string) =
          fun (x115 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x115) "if-match")
        let (set_if_match : t -> string -> unit) =
          fun (x116 : t) ->
            fun (x117 : string) ->
              Ojs.set_prop_ascii (t_to_js x116) "if-match"
                (Ojs.string_to_js x117)
        let (get_if_modified_since : t -> string) =
          fun (x118 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x118) "if-modified-since")
        let (set_if_modified_since : t -> string -> unit) =
          fun (x119 : t) ->
            fun (x120 : string) ->
              Ojs.set_prop_ascii (t_to_js x119) "if-modified-since"
                (Ojs.string_to_js x120)
        let (get_if_none_match : t -> string) =
          fun (x121 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x121) "if-none-match")
        let (set_if_none_match : t -> string -> unit) =
          fun (x122 : t) ->
            fun (x123 : string) ->
              Ojs.set_prop_ascii (t_to_js x122) "if-none-match"
                (Ojs.string_to_js x123)
        let (get_if_unmodified_since : t -> string) =
          fun (x124 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x124) "if-unmodified-since")
        let (set_if_unmodified_since : t -> string -> unit) =
          fun (x125 : t) ->
            fun (x126 : string) ->
              Ojs.set_prop_ascii (t_to_js x125) "if-unmodified-since"
                (Ojs.string_to_js x126)
        let (get_last_modified : t -> string) =
          fun (x127 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x127) "last-modified")
        let (set_last_modified : t -> string -> unit) =
          fun (x128 : t) ->
            fun (x129 : string) ->
              Ojs.set_prop_ascii (t_to_js x128) "last-modified"
                (Ojs.string_to_js x129)
        let (get_location : t -> string) =
          fun (x130 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x130) "location")
        let (set_location : t -> string -> unit) =
          fun (x131 : t) ->
            fun (x132 : string) ->
              Ojs.set_prop_ascii (t_to_js x131) "location"
                (Ojs.string_to_js x132)
        let (get_origin : t -> string) =
          fun (x133 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x133) "origin")
        let (set_origin : t -> string -> unit) =
          fun (x134 : t) ->
            fun (x135 : string) ->
              Ojs.set_prop_ascii (t_to_js x134) "origin"
                (Ojs.string_to_js x135)
        let (get_pragma : t -> string) =
          fun (x136 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x136) "pragma")
        let (set_pragma : t -> string -> unit) =
          fun (x137 : t) ->
            fun (x138 : string) ->
              Ojs.set_prop_ascii (t_to_js x137) "pragma"
                (Ojs.string_to_js x138)
        let (get_proxy_authenticate : t -> string) =
          fun (x139 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x139) "proxy-authenticate")
        let (set_proxy_authenticate : t -> string -> unit) =
          fun (x140 : t) ->
            fun (x141 : string) ->
              Ojs.set_prop_ascii (t_to_js x140) "proxy-authenticate"
                (Ojs.string_to_js x141)
        let (get_proxy_authorization : t -> string) =
          fun (x142 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x142) "proxy-authorization")
        let (set_proxy_authorization : t -> string -> unit) =
          fun (x143 : t) ->
            fun (x144 : string) ->
              Ojs.set_prop_ascii (t_to_js x143) "proxy-authorization"
                (Ojs.string_to_js x144)
        let (get_public_key_pins : t -> string) =
          fun (x145 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x145) "public-key-pins")
        let (set_public_key_pins : t -> string -> unit) =
          fun (x146 : t) ->
            fun (x147 : string) ->
              Ojs.set_prop_ascii (t_to_js x146) "public-key-pins"
                (Ojs.string_to_js x147)
        let (get_range : t -> string) =
          fun (x148 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x148) "range")
        let (set_range : t -> string -> unit) =
          fun (x149 : t) ->
            fun (x150 : string) ->
              Ojs.set_prop_ascii (t_to_js x149) "range"
                (Ojs.string_to_js x150)
        let (get_referer : t -> string) =
          fun (x151 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x151) "referer")
        let (set_referer : t -> string -> unit) =
          fun (x152 : t) ->
            fun (x153 : string) ->
              Ojs.set_prop_ascii (t_to_js x152) "referer"
                (Ojs.string_to_js x153)
        let (get_retry_after : t -> string) =
          fun (x154 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x154) "retry-after")
        let (set_retry_after : t -> string -> unit) =
          fun (x155 : t) ->
            fun (x156 : string) ->
              Ojs.set_prop_ascii (t_to_js x155) "retry-after"
                (Ojs.string_to_js x156)
        let (get_sec_websocket_accept : t -> string) =
          fun (x157 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x157) "sec-websocket-accept")
        let (set_sec_websocket_accept : t -> string -> unit) =
          fun (x158 : t) ->
            fun (x159 : string) ->
              Ojs.set_prop_ascii (t_to_js x158) "sec-websocket-accept"
                (Ojs.string_to_js x159)
        let (get_sec_websocket_extensions : t -> string) =
          fun (x160 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x160) "sec-websocket-extensions")
        let (set_sec_websocket_extensions : t -> string -> unit) =
          fun (x161 : t) ->
            fun (x162 : string) ->
              Ojs.set_prop_ascii (t_to_js x161) "sec-websocket-extensions"
                (Ojs.string_to_js x162)
        let (get_sec_websocket_key : t -> string) =
          fun (x163 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x163) "sec-websocket-key")
        let (set_sec_websocket_key : t -> string -> unit) =
          fun (x164 : t) ->
            fun (x165 : string) ->
              Ojs.set_prop_ascii (t_to_js x164) "sec-websocket-key"
                (Ojs.string_to_js x165)
        let (get_sec_websocket_protocol : t -> string) =
          fun (x166 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x166) "sec-websocket-protocol")
        let (set_sec_websocket_protocol : t -> string -> unit) =
          fun (x167 : t) ->
            fun (x168 : string) ->
              Ojs.set_prop_ascii (t_to_js x167) "sec-websocket-protocol"
                (Ojs.string_to_js x168)
        let (get_sec_websocket_version : t -> string) =
          fun (x169 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x169) "sec-websocket-version")
        let (set_sec_websocket_version : t -> string -> unit) =
          fun (x170 : t) ->
            fun (x171 : string) ->
              Ojs.set_prop_ascii (t_to_js x170) "sec-websocket-version"
                (Ojs.string_to_js x171)
        let (get_set_cookie : t -> string list) =
          fun (x172 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x172) "set-cookie")
        let (set_set_cookie : t -> string list -> unit) =
          fun (x174 : t) ->
            fun (x175 : string list) ->
              Ojs.set_prop_ascii (t_to_js x174) "set-cookie"
                (Ojs.list_to_js Ojs.string_to_js x175)
        let (get_strict_transport_security : t -> string) =
          fun (x177 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x177) "strict-transport-security")
        let (set_strict_transport_security : t -> string -> unit) =
          fun (x178 : t) ->
            fun (x179 : string) ->
              Ojs.set_prop_ascii (t_to_js x178) "strict-transport-security"
                (Ojs.string_to_js x179)
        let (get_tk : t -> string) =
          fun (x180 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x180) "tk")
        let (set_tk : t -> string -> unit) =
          fun (x181 : t) ->
            fun (x182 : string) ->
              Ojs.set_prop_ascii (t_to_js x181) "tk" (Ojs.string_to_js x182)
        let (get_trailer : t -> string) =
          fun (x183 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x183) "trailer")
        let (set_trailer : t -> string -> unit) =
          fun (x184 : t) ->
            fun (x185 : string) ->
              Ojs.set_prop_ascii (t_to_js x184) "trailer"
                (Ojs.string_to_js x185)
        let (get_transfer_encoding : t -> string) =
          fun (x186 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x186) "transfer-encoding")
        let (set_transfer_encoding : t -> string -> unit) =
          fun (x187 : t) ->
            fun (x188 : string) ->
              Ojs.set_prop_ascii (t_to_js x187) "transfer-encoding"
                (Ojs.string_to_js x188)
        let (get_upgrade : t -> string) =
          fun (x189 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x189) "upgrade")
        let (set_upgrade : t -> string -> unit) =
          fun (x190 : t) ->
            fun (x191 : string) ->
              Ojs.set_prop_ascii (t_to_js x190) "upgrade"
                (Ojs.string_to_js x191)
        let (get_user_agent : t -> string) =
          fun (x192 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x192) "user-agent")
        let (set_user_agent : t -> string -> unit) =
          fun (x193 : t) ->
            fun (x194 : string) ->
              Ojs.set_prop_ascii (t_to_js x193) "user-agent"
                (Ojs.string_to_js x194)
        let (get_vary : t -> string) =
          fun (x195 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x195) "vary")
        let (set_vary : t -> string -> unit) =
          fun (x196 : t) ->
            fun (x197 : string) ->
              Ojs.set_prop_ascii (t_to_js x196) "vary"
                (Ojs.string_to_js x197)
        let (get_via : t -> string) =
          fun (x198 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x198) "via")
        let (set_via : t -> string -> unit) =
          fun (x199 : t) ->
            fun (x200 : string) ->
              Ojs.set_prop_ascii (t_to_js x199) "via" (Ojs.string_to_js x200)
        let (get_warning : t -> string) =
          fun (x201 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x201) "warning")
        let (set_warning : t -> string -> unit) =
          fun (x202 : t) ->
            fun (x203 : string) ->
              Ojs.set_prop_ascii (t_to_js x202) "warning"
                (Ojs.string_to_js x203)
        let (get_www_authenticate : t -> string) =
          fun (x204 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x204) "www-authenticate")
        let (set_www_authenticate : t -> string -> unit) =
          fun (x205 : t) ->
            fun (x206 : string) ->
              Ojs.set_prop_ascii (t_to_js x205) "www-authenticate"
                (Ojs.string_to_js x206)
        let (cast : t -> string list or_string Dict.t) =
          fun (x207 : t) ->
            Dict.t_of_js
              (fun (x208 : Ojs.t) ->
                 or_string_of_js
                   (fun (x209 : Ojs.t) ->
                      Ojs.list_of_js Ojs.string_of_js x209) x208)
              (t_to_js x207)
      end
    module OutgoingHttpHeader =
      struct
        type t = string list or_string or_number
        let rec t_of_js : Ojs.t -> t =
          fun (x215 : Ojs.t) ->
            or_number_of_js
              (fun (x216 : Ojs.t) ->
                 or_string_of_js
                   (fun (x217 : Ojs.t) ->
                      Ojs.list_of_js Ojs.string_of_js x217) x216) x215
        and t_to_js : t -> Ojs.t =
          fun (x211 : string list or_string or_number) ->
            or_number_to_js
              (fun (x212 : string list or_string) ->
                 or_string_to_js
                   (fun (x213 : string list) ->
                      Ojs.list_to_js Ojs.string_to_js x213) x212) x211
      end
    module OutgoingHttpHeaders =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x220 : Ojs.t) -> x220
        and t_to_js : t -> Ojs.t = fun (x219 : Ojs.t) -> x219
        let (cast : t -> OutgoingHttpHeader.t Dict.t) =
          fun (x221 : t) ->
            Dict.t_of_js OutgoingHttpHeader.t_of_js (t_to_js x221)
      end
    module IncomingMessage =
      struct
        include struct include Stream.Readable end
        let (create : socket:Node_net.Net.Socket.t -> t) =
          fun ~socket:(x223 : Node_net.Net.Socket.t) ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.http "IncomingMessage")
                 [|(Node_net.Net.Socket.t_to_js x223)|])
        let (get_aborted : t -> bool) =
          fun (x224 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x224) "aborted")
        let (set_aborted : t -> bool -> unit) =
          fun (x225 : t) ->
            fun (x226 : bool) ->
              Ojs.set_prop_ascii (t_to_js x225) "aborted"
                (Ojs.bool_to_js x226)
        let (get_http_version : t -> string) =
          fun (x227 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x227) "httpVersion")
        let (set_http_version : t -> string -> unit) =
          fun (x228 : t) ->
            fun (x229 : string) ->
              Ojs.set_prop_ascii (t_to_js x228) "httpVersion"
                (Ojs.string_to_js x229)
        let (get_http_version_major : t -> int) =
          fun (x230 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x230) "httpVersionMajor")
        let (set_http_version_major : t -> int -> unit) =
          fun (x231 : t) ->
            fun (x232 : int) ->
              Ojs.set_prop_ascii (t_to_js x231) "httpVersionMajor"
                (Ojs.int_to_js x232)
        let (get_http_version_minor : t -> int) =
          fun (x233 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x233) "httpVersionMinor")
        let (set_http_version_minor : t -> int -> unit) =
          fun (x234 : t) ->
            fun (x235 : int) ->
              Ojs.set_prop_ascii (t_to_js x234) "httpVersionMinor"
                (Ojs.int_to_js x235)
        let (get_complete : t -> bool) =
          fun (x236 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x236) "complete")
        let (set_complete : t -> bool -> unit) =
          fun (x237 : t) ->
            fun (x238 : bool) ->
              Ojs.set_prop_ascii (t_to_js x237) "complete"
                (Ojs.bool_to_js x238)
        let (get_connection : t -> Node_net.Net.Socket.t) =
          fun (x239 : t) ->
            Node_net.Net.Socket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x239) "connection")
        let (set_connection : t -> Node_net.Net.Socket.t -> unit) =
          fun (x240 : t) ->
            fun (x241 : Node_net.Net.Socket.t) ->
              Ojs.set_prop_ascii (t_to_js x240) "connection"
                (Node_net.Net.Socket.t_to_js x241)
        let (get_socket : t -> Node_net.Net.Socket.t) =
          fun (x242 : t) ->
            Node_net.Net.Socket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x242) "socket")
        let (set_socket : t -> Node_net.Net.Socket.t -> unit) =
          fun (x243 : t) ->
            fun (x244 : Node_net.Net.Socket.t) ->
              Ojs.set_prop_ascii (t_to_js x243) "socket"
                (Node_net.Net.Socket.t_to_js x244)
        let (get_headers : t -> IncomingHttpHeaders.t) =
          fun (x245 : t) ->
            IncomingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x245) "headers")
        let (set_headers : t -> IncomingHttpHeaders.t -> unit) =
          fun (x246 : t) ->
            fun (x247 : IncomingHttpHeaders.t) ->
              Ojs.set_prop_ascii (t_to_js x246) "headers"
                (IncomingHttpHeaders.t_to_js x247)
        let (get_raw_headers : t -> string list) =
          fun (x248 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x248) "rawHeaders")
        let (set_raw_headers : t -> string list -> unit) =
          fun (x250 : t) ->
            fun (x251 : string list) ->
              Ojs.set_prop_ascii (t_to_js x250) "rawHeaders"
                (Ojs.list_to_js Ojs.string_to_js x251)
        let (get_trailers : t -> string Dict.t) =
          fun (x253 : t) ->
            Dict.t_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x253) "trailers")
        let (set_trailers : t -> string Dict.t -> unit) =
          fun (x255 : t) ->
            fun (x256 : string Dict.t) ->
              Ojs.set_prop_ascii (t_to_js x255) "trailers"
                (Dict.t_to_js Ojs.string_to_js x256)
        let (get_raw_trailers : t -> string list) =
          fun (x258 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x258) "rawTrailers")
        let (set_raw_trailers : t -> string list -> unit) =
          fun (x260 : t) ->
            fun (x261 : string list) ->
              Ojs.set_prop_ascii (t_to_js x260) "rawTrailers"
                (Ojs.list_to_js Ojs.string_to_js x261)
        let (set_timeout :
          t -> msecs:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x267 : t) ->
            fun ~msecs:(x263 : int) ->
              fun ?callback:(x264 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x268 = t_to_js x267 in
                     Ojs.call (Ojs.get_prop_ascii x268 "setTimeout") "apply"
                       [|x268;((let x265 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x265 "push"
                                     [|(Ojs.int_to_js x263)|]);
                                (match x264 with
                                 | Some x266 ->
                                     ignore
                                       (Ojs.call x265 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x266 ()))|])
                                 | None -> ());
                                x265))|])
        let (get_method : t -> string) =
          fun (x269 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x269) "method")
        let (set_method : t -> string -> unit) =
          fun (x270 : t) ->
            fun (x271 : string) ->
              Ojs.set_prop_ascii (t_to_js x270) "method"
                (Ojs.string_to_js x271)
        let (get_url : t -> string) =
          fun (x272 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x272) "url")
        let (set_url : t -> string -> unit) =
          fun (x273 : t) ->
            fun (x274 : string) ->
              Ojs.set_prop_ascii (t_to_js x273) "url" (Ojs.string_to_js x274)
        let (get_status_code : t -> int) =
          fun (x275 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x275) "statusCode")
        let (set_status_code : t -> int -> unit) =
          fun (x276 : t) ->
            fun (x277 : int) ->
              Ojs.set_prop_ascii (t_to_js x276) "statusCode"
                (Ojs.int_to_js x277)
        let (get_status_message : t -> string) =
          fun (x278 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x278) "statusMessage")
        let (set_status_message : t -> string -> unit) =
          fun (x279 : t) ->
            fun (x280 : string) ->
              Ojs.set_prop_ascii (t_to_js x279) "statusMessage"
                (Ojs.string_to_js x280)
        let (destroy : t -> ?error:Error.t -> unit -> unit) =
          fun (x284 : t) ->
            fun ?error:(x281 : Error.t option) ->
              fun () ->
                ignore
                  (let x285 = t_to_js x284 in
                   Ojs.call (Ojs.get_prop_ascii x285 "destroy") "apply"
                     [|x285;((let x282 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x281 with
                               | Some x283 ->
                                   ignore
                                     (Ojs.call x282 "push"
                                        [|(Error.t_to_js x283)|])
                               | None -> ());
                              x282))|])
      end
    module ServerOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x287 : Ojs.t) -> x287
        and t_to_js : t -> Ojs.t = fun (x286 : Ojs.t) -> x286
        let (get_incoming_message : t -> any) =
          fun (x288 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x288) "IncomingMessage")
        let (set_incoming_message : t -> any -> unit) =
          fun (x289 : t) ->
            fun (x290 : any) ->
              Ojs.set_prop_ascii (t_to_js x289) "IncomingMessage"
                (any_to_js x290)
        let (get_server_response : t -> any) =
          fun (x291 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x291) "ServerResponse")
        let (set_server_response : t -> any -> unit) =
          fun (x292 : t) ->
            fun (x293 : any) ->
              Ojs.set_prop_ascii (t_to_js x292) "ServerResponse"
                (any_to_js x293)
        let (get_max_header_size : t -> int) =
          fun (x294 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x294) "maxHeaderSize")
        let (set_max_header_size : t -> int -> unit) =
          fun (x295 : t) ->
            fun (x296 : int) ->
              Ojs.set_prop_ascii (t_to_js x295) "maxHeaderSize"
                (Ojs.int_to_js x296)
        let (get_insecure_http_parser : t -> bool) =
          fun (x297 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x297) "insecureHTTPParser")
        let (set_insecure_http_parser : t -> bool -> unit) =
          fun (x298 : t) ->
            fun (x299 : bool) ->
              Ojs.set_prop_ascii (t_to_js x298) "insecureHTTPParser"
                (Ojs.bool_to_js x299)
      end
    module HttpBase =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x301 : Ojs.t) -> x301
        and t_to_js : t -> Ojs.t = fun (x300 : Ojs.t) -> x300
        let (set_timeout :
          t -> ?msecs:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x307 : t) ->
            fun ?msecs:(x302 : int option) ->
              fun ?callback:(x303 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x308 = t_to_js x307 in
                     Ojs.call (Ojs.get_prop_ascii x308 "setTimeout") "apply"
                       [|x308;((let x304 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x302 with
                                 | Some x306 ->
                                     ignore
                                       (Ojs.call x304 "push"
                                          [|(Ojs.int_to_js x306)|])
                                 | None -> ());
                                (match x303 with
                                 | Some x305 ->
                                     ignore
                                       (Ojs.call x304 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x305 ()))|])
                                 | None -> ());
                                x304))|])
        let (set_timeout' : t -> callback:(unit -> unit) -> t) =
          fun (x310 : t) ->
            fun ~callback:(x309 : unit -> unit) ->
              t_of_js
                (Ojs.call (t_to_js x310) "setTimeout"
                   [|(Ojs.fun_to_js 1 (fun _ -> x309 ()))|])
        let (get_max_headers_count : t -> int or_null) =
          fun (x311 : t) ->
            or_null_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x311) "maxHeadersCount")
        let (set_max_headers_count : t -> int or_null -> unit) =
          fun (x313 : t) ->
            fun (x314 : int or_null) ->
              Ojs.set_prop_ascii (t_to_js x313) "maxHeadersCount"
                (or_null_to_js Ojs.int_to_js x314)
        let (get_timeout : t -> int) =
          fun (x316 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x316) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x317 : t) ->
            fun (x318 : int) ->
              Ojs.set_prop_ascii (t_to_js x317) "timeout"
                (Ojs.int_to_js x318)
        let (get_headers_timeout : t -> int) =
          fun (x319 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x319) "headersTimeout")
        let (set_headers_timeout : t -> int -> unit) =
          fun (x320 : t) ->
            fun (x321 : int) ->
              Ojs.set_prop_ascii (t_to_js x320) "headersTimeout"
                (Ojs.int_to_js x321)
        let (get_keep_alive_timeout : t -> int) =
          fun (x322 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x322) "keepAliveTimeout")
        let (set_keep_alive_timeout : t -> int -> unit) =
          fun (x323 : t) ->
            fun (x324 : int) ->
              Ojs.set_prop_ascii (t_to_js x323) "keepAliveTimeout"
                (Ojs.int_to_js x324)
        let (get_request_timeout : t -> int) =
          fun (x325 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x325) "requestTimeout")
        let (set_request_timeout : t -> int -> unit) =
          fun (x326 : t) ->
            fun (x327 : int) ->
              Ojs.set_prop_ascii (t_to_js x326) "requestTimeout"
                (Ojs.int_to_js x327)
      end
    module OutgoingMessage =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x329 : Ojs.t) -> x329
        and t_to_js : t -> Ojs.t = fun (x328 : Ojs.t) -> x328
        let (get_upgrading : t -> bool) =
          fun (x330 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x330) "upgrading")
        let (set_upgrading : t -> bool -> unit) =
          fun (x331 : t) ->
            fun (x332 : bool) ->
              Ojs.set_prop_ascii (t_to_js x331) "upgrading"
                (Ojs.bool_to_js x332)
        let (get_chunked_encoding : t -> bool) =
          fun (x333 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x333) "chunkedEncoding")
        let (set_chunked_encoding : t -> bool -> unit) =
          fun (x334 : t) ->
            fun (x335 : bool) ->
              Ojs.set_prop_ascii (t_to_js x334) "chunkedEncoding"
                (Ojs.bool_to_js x335)
        let (get_should_keep_alive : t -> bool) =
          fun (x336 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x336) "shouldKeepAlive")
        let (set_should_keep_alive : t -> bool -> unit) =
          fun (x337 : t) ->
            fun (x338 : bool) ->
              Ojs.set_prop_ascii (t_to_js x337) "shouldKeepAlive"
                (Ojs.bool_to_js x338)
        let (get_use_chunked_encoding_by_default : t -> bool) =
          fun (x339 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x339)
                 "useChunkedEncodingByDefault")
        let (set_use_chunked_encoding_by_default : t -> bool -> unit) =
          fun (x340 : t) ->
            fun (x341 : bool) ->
              Ojs.set_prop_ascii (t_to_js x340) "useChunkedEncodingByDefault"
                (Ojs.bool_to_js x341)
        let (get_send_date : t -> bool) =
          fun (x342 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x342) "sendDate")
        let (set_send_date : t -> bool -> unit) =
          fun (x343 : t) ->
            fun (x344 : bool) ->
              Ojs.set_prop_ascii (t_to_js x343) "sendDate"
                (Ojs.bool_to_js x344)
        let (get_finished : t -> bool) =
          fun (x345 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x345) "finished")
        let (set_finished : t -> bool -> unit) =
          fun (x346 : t) ->
            fun (x347 : bool) ->
              Ojs.set_prop_ascii (t_to_js x346) "finished"
                (Ojs.bool_to_js x347)
        let (get_headers_sent : t -> bool) =
          fun (x348 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x348) "headersSent")
        let (set_headers_sent : t -> bool -> unit) =
          fun (x349 : t) ->
            fun (x350 : bool) ->
              Ojs.set_prop_ascii (t_to_js x349) "headersSent"
                (Ojs.bool_to_js x350)
        let (get_connection : t -> Node_net.Net.Socket.t or_null) =
          fun (x351 : t) ->
            or_null_of_js Node_net.Net.Socket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x351) "connection")
        let (set_connection : t -> Node_net.Net.Socket.t or_null -> unit) =
          fun (x353 : t) ->
            fun (x354 : Node_net.Net.Socket.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x353) "connection"
                (or_null_to_js Node_net.Net.Socket.t_to_js x354)
        let (get_socket : t -> Node_net.Net.Socket.t or_null) =
          fun (x356 : t) ->
            or_null_of_js Node_net.Net.Socket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x356) "socket")
        let (set_socket : t -> Node_net.Net.Socket.t or_null -> unit) =
          fun (x358 : t) ->
            fun (x359 : Node_net.Net.Socket.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x358) "socket"
                (or_null_to_js Node_net.Net.Socket.t_to_js x359)
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.http "OutgoingMessage")
                 [||])
        let (set_timeout :
          t -> msecs:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x365 : t) ->
            fun ~msecs:(x361 : int) ->
              fun ?callback:(x362 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x366 = t_to_js x365 in
                     Ojs.call (Ojs.get_prop_ascii x366 "setTimeout") "apply"
                       [|x366;((let x363 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x363 "push"
                                     [|(Ojs.int_to_js x361)|]);
                                (match x362 with
                                 | Some x364 ->
                                     ignore
                                       (Ojs.call x363 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x364 ()))|])
                                 | None -> ());
                                x363))|])
        let (set_header :
          t -> name:string -> value:string list or_string or_number -> unit)
          =
          fun (x372 : t) ->
            fun ~name:(x367 : string) ->
              fun ~value:(x368 : string list or_string or_number) ->
                ignore
                  (Ojs.call (t_to_js x372) "setHeader"
                     [|(Ojs.string_to_js x367);(or_number_to_js
                                                  (fun
                                                     (x369 :
                                                       string list or_string)
                                                     ->
                                                     or_string_to_js
                                                       (fun
                                                          (x370 :
                                                            string list)
                                                          ->
                                                          Ojs.list_to_js
                                                            Ojs.string_to_js
                                                            x370) x369) x368)|])
        let (get_header :
          t -> name:string -> string list or_string or_number or_undefined) =
          fun (x374 : t) ->
            fun ~name:(x373 : string) ->
              or_undefined_of_js
                (fun (x375 : Ojs.t) ->
                   or_number_of_js
                     (fun (x376 : Ojs.t) ->
                        or_string_of_js
                          (fun (x377 : Ojs.t) ->
                             Ojs.list_of_js Ojs.string_of_js x377) x376) x375)
                (Ojs.call (t_to_js x374) "getHeader"
                   [|(Ojs.string_to_js x373)|])
        let (get_headers : t -> OutgoingHttpHeaders.t) =
          fun (x379 : t) ->
            OutgoingHttpHeaders.t_of_js
              (Ojs.call (t_to_js x379) "getHeaders" [||])
        let (get_header_names : t -> string list) =
          fun (x380 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x380) "getHeaderNames" [||])
        let (has_header : t -> name:string -> bool) =
          fun (x383 : t) ->
            fun ~name:(x382 : string) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x383) "hasHeader"
                   [|(Ojs.string_to_js x382)|])
        let (remove_header : t -> name:string -> unit) =
          fun (x385 : t) ->
            fun ~name:(x384 : string) ->
              ignore
                (Ojs.call (t_to_js x385) "removeHeader"
                   [|(Ojs.string_to_js x384)|])
        let (add_trailers :
          t ->
            headers:(OutgoingHttpHeaders.t, (string * string) list) union2 ->
              unit)
          =
          fun (x393 : t) ->
            fun
              ~headers:(x386 :
                         (OutgoingHttpHeaders.t, (string * string) list)
                           union2)
              ->
              ignore
                (Ojs.call (t_to_js x393) "addTrailers"
                   [|(union2_to_js OutgoingHttpHeaders.t_to_js
                        (fun (x388 : (string * string) list) ->
                           Ojs.list_to_js
                             (fun (x389 : (string * string)) ->
                                let (x390, x391) = x389 in
                                let x392 = Ojs.array_make 2 in
                                Ojs.array_set x392 0 (Ojs.string_to_js x390);
                                Ojs.array_set x392 1 (Ojs.string_to_js x391);
                                x392) x388) x386)|])
        let (flush_headers : t -> unit) =
          fun (x394 : t) ->
            ignore (Ojs.call (t_to_js x394) "flushHeaders" [||])
        let (cast : t -> Stream.Writable.t) =
          fun (x395 : t) -> Stream.Writable.t_of_js (t_to_js x395)
      end
    module ServerResponse =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x397 : Ojs.t) -> x397
        and t_to_js : t -> Ojs.t = fun (x396 : Ojs.t) -> x396
        let (get_status_code : t -> int) =
          fun (x398 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x398) "statusCode")
        let (set_status_code : t -> int -> unit) =
          fun (x399 : t) ->
            fun (x400 : int) ->
              Ojs.set_prop_ascii (t_to_js x399) "statusCode"
                (Ojs.int_to_js x400)
        let (get_status_message : t -> string) =
          fun (x401 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x401) "statusMessage")
        let (set_status_message : t -> string -> unit) =
          fun (x402 : t) ->
            fun (x403 : string) ->
              Ojs.set_prop_ascii (t_to_js x402) "statusMessage"
                (Ojs.string_to_js x403)
        let (create : req:IncomingMessage.t -> t) =
          fun ~req:(x404 : IncomingMessage.t) ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.http "ServerResponse")
                 [|(IncomingMessage.t_to_js x404)|])
        let (assign_socket : t -> socket:Node_net.Net.Socket.t -> unit) =
          fun (x406 : t) ->
            fun ~socket:(x405 : Node_net.Net.Socket.t) ->
              ignore
                (Ojs.call (t_to_js x406) "assignSocket"
                   [|(Node_net.Net.Socket.t_to_js x405)|])
        let (detach_socket : t -> socket:Node_net.Net.Socket.t -> unit) =
          fun (x408 : t) ->
            fun ~socket:(x407 : Node_net.Net.Socket.t) ->
              ignore
                (Ojs.call (t_to_js x408) "detachSocket"
                   [|(Node_net.Net.Socket.t_to_js x407)|])
        let (write_continue : t -> ?callback:(unit -> unit) -> unit -> unit)
          =
          fun (x412 : t) ->
            fun ?callback:(x409 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x413 = t_to_js x412 in
                   Ojs.call (Ojs.get_prop_ascii x413 "writeContinue") "apply"
                     [|x413;((let x410 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x409 with
                               | Some x411 ->
                                   ignore
                                     (Ojs.call x410 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x411 ()))|])
                               | None -> ());
                              x410))|])
        let (write_head :
          t ->
            status_code:int ->
              ?reason_phrase:string ->
                ?headers:(OutgoingHttpHeaders.t, OutgoingHttpHeader.t)
                  or_array -> unit -> t)
          =
          fun (x422 : t) ->
            fun ~status_code:(x414 : int) ->
              fun ?reason_phrase:(x415 : string option) ->
                fun
                  ?headers:(x416 :
                             (OutgoingHttpHeaders.t, OutgoingHttpHeader.t)
                               or_array option)
                  ->
                  fun () ->
                    t_of_js
                      (let x423 = t_to_js x422 in
                       Ojs.call (Ojs.get_prop_ascii x423 "writeHead") "apply"
                         [|x423;((let x417 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x417 "push"
                                       [|(Ojs.int_to_js x414)|]);
                                  (match x415 with
                                   | Some x421 ->
                                       ignore
                                         (Ojs.call x417 "push"
                                            [|(Ojs.string_to_js x421)|])
                                   | None -> ());
                                  (match x416 with
                                   | Some x418 ->
                                       ignore
                                         (Ojs.call x417 "push"
                                            [|(or_array_to_js
                                                 OutgoingHttpHeaders.t_to_js
                                                 OutgoingHttpHeader.t_to_js
                                                 x418)|])
                                   | None -> ());
                                  x417))|])
        let (write_head' :
          t ->
            status_code:int ->
              ?headers:(OutgoingHttpHeaders.t, OutgoingHttpHeader.t) or_array
                -> unit -> t)
          =
          fun (x430 : t) ->
            fun ~status_code:(x424 : int) ->
              fun
                ?headers:(x425 :
                           (OutgoingHttpHeaders.t, OutgoingHttpHeader.t)
                             or_array option)
                ->
                fun () ->
                  t_of_js
                    (let x431 = t_to_js x430 in
                     Ojs.call (Ojs.get_prop_ascii x431 "writeHead") "apply"
                       [|x431;((let x426 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x426 "push"
                                     [|(Ojs.int_to_js x424)|]);
                                (match x425 with
                                 | Some x427 ->
                                     ignore
                                       (Ojs.call x426 "push"
                                          [|(or_array_to_js
                                               OutgoingHttpHeaders.t_to_js
                                               OutgoingHttpHeader.t_to_js
                                               x427)|])
                                 | None -> ());
                                x426))|])
        let (write_processing : t -> unit) =
          fun (x432 : t) ->
            ignore (Ojs.call (t_to_js x432) "writeProcessing" [||])
        let (cast : t -> OutgoingMessage.t) =
          fun (x433 : t) -> OutgoingMessage.t_of_js (t_to_js x433)
      end
    module RequestListener =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x435 : Ojs.t) -> x435
        and t_to_js : t -> Ojs.t = fun (x434 : Ojs.t) -> x434
        let (apply :
          t -> req:IncomingMessage.t -> res:ServerResponse.t -> unit) =
          fun (x438 : t) ->
            fun ~req:(x436 : IncomingMessage.t) ->
              fun ~res:(x437 : ServerResponse.t) ->
                ignore
                  (Ojs.apply (t_to_js x438)
                     [|(IncomingMessage.t_to_js x436);(ServerResponse.t_to_js
                                                         x437)|])
      end
    module Server =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x440 : Ojs.t) -> x440
        and t_to_js : t -> Ojs.t = fun (x439 : Ojs.t) -> x439
        let (cast : t -> HttpBase.t) =
          fun (x441 : t) -> HttpBase.t_of_js (t_to_js x441)
        let (create : ?request_listener:RequestListener.t -> unit -> t) =
          fun ?request_listener:(x442 : RequestListener.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.http "Server")
                   (let x443 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x442 with
                     | Some x444 ->
                         ignore
                           (Ojs.call x443 "push"
                              [|(RequestListener.t_to_js x444)|])
                     | None -> ());
                    x443))
        let (create' :
          options:ServerOptions.t ->
            ?request_listener:RequestListener.t -> unit -> t)
          =
          fun ~options:(x445 : ServerOptions.t) ->
            fun ?request_listener:(x446 : RequestListener.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.http "Server")
                     (let x447 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x447 "push"
                           [|(ServerOptions.t_to_js x445)|]);
                      (match x446 with
                       | Some x448 ->
                           ignore
                             (Ojs.call x447 "push"
                                [|(RequestListener.t_to_js x448)|])
                       | None -> ());
                      x447))
        let (cast : t -> Node_net.Net.Server.t) =
          fun (x449 : t) -> Node_net.Net.Server.t_of_js (t_to_js x449)
      end
    module InformationEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x451 : Ojs.t) -> x451
        and t_to_js : t -> Ojs.t = fun (x450 : Ojs.t) -> x450
        let (get_status_code : t -> int) =
          fun (x452 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x452) "statusCode")
        let (set_status_code : t -> int -> unit) =
          fun (x453 : t) ->
            fun (x454 : int) ->
              Ojs.set_prop_ascii (t_to_js x453) "statusCode"
                (Ojs.int_to_js x454)
        let (get_status_message : t -> string) =
          fun (x455 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x455) "statusMessage")
        let (set_status_message : t -> string -> unit) =
          fun (x456 : t) ->
            fun (x457 : string) ->
              Ojs.set_prop_ascii (t_to_js x456) "statusMessage"
                (Ojs.string_to_js x457)
        let (get_http_version : t -> string) =
          fun (x458 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x458) "httpVersion")
        let (set_http_version : t -> string -> unit) =
          fun (x459 : t) ->
            fun (x460 : string) ->
              Ojs.set_prop_ascii (t_to_js x459) "httpVersion"
                (Ojs.string_to_js x460)
        let (get_http_version_major : t -> int) =
          fun (x461 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x461) "httpVersionMajor")
        let (set_http_version_major : t -> int -> unit) =
          fun (x462 : t) ->
            fun (x463 : int) ->
              Ojs.set_prop_ascii (t_to_js x462) "httpVersionMajor"
                (Ojs.int_to_js x463)
        let (get_http_version_minor : t -> int) =
          fun (x464 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x464) "httpVersionMinor")
        let (set_http_version_minor : t -> int -> unit) =
          fun (x465 : t) ->
            fun (x466 : int) ->
              Ojs.set_prop_ascii (t_to_js x465) "httpVersionMinor"
                (Ojs.int_to_js x466)
        let (get_headers : t -> IncomingHttpHeaders.t) =
          fun (x467 : t) ->
            IncomingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x467) "headers")
        let (set_headers : t -> IncomingHttpHeaders.t -> unit) =
          fun (x468 : t) ->
            fun (x469 : IncomingHttpHeaders.t) ->
              Ojs.set_prop_ascii (t_to_js x468) "headers"
                (IncomingHttpHeaders.t_to_js x469)
        let (get_raw_headers : t -> string list) =
          fun (x470 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x470) "rawHeaders")
        let (set_raw_headers : t -> string list -> unit) =
          fun (x472 : t) ->
            fun (x473 : string list) ->
              Ojs.set_prop_ascii (t_to_js x472) "rawHeaders"
                (Ojs.list_to_js Ojs.string_to_js x473)
      end
    module AgentOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x476 : Ojs.t) -> x476
        and t_to_js : t -> Ojs.t = fun (x475 : Ojs.t) -> x475
        let (get_keep_alive : t -> bool) =
          fun (x477 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x477) "keepAlive")
        let (set_keep_alive : t -> bool -> unit) =
          fun (x478 : t) ->
            fun (x479 : bool) ->
              Ojs.set_prop_ascii (t_to_js x478) "keepAlive"
                (Ojs.bool_to_js x479)
        let (get_keep_alive_msecs : t -> int) =
          fun (x480 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x480) "keepAliveMsecs")
        let (set_keep_alive_msecs : t -> int -> unit) =
          fun (x481 : t) ->
            fun (x482 : int) ->
              Ojs.set_prop_ascii (t_to_js x481) "keepAliveMsecs"
                (Ojs.int_to_js x482)
        let (get_max_sockets : t -> int) =
          fun (x483 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x483) "maxSockets")
        let (set_max_sockets : t -> int -> unit) =
          fun (x484 : t) ->
            fun (x485 : int) ->
              Ojs.set_prop_ascii (t_to_js x484) "maxSockets"
                (Ojs.int_to_js x485)
        let (get_max_total_sockets : t -> int) =
          fun (x486 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x486) "maxTotalSockets")
        let (set_max_total_sockets : t -> int -> unit) =
          fun (x487 : t) ->
            fun (x488 : int) ->
              Ojs.set_prop_ascii (t_to_js x487) "maxTotalSockets"
                (Ojs.int_to_js x488)
        let (get_max_free_sockets : t -> int) =
          fun (x489 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x489) "maxFreeSockets")
        let (set_max_free_sockets : t -> int -> unit) =
          fun (x490 : t) ->
            fun (x491 : int) ->
              Ojs.set_prop_ascii (t_to_js x490) "maxFreeSockets"
                (Ojs.int_to_js x491)
        let (get_timeout : t -> int) =
          fun (x492 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x492) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x493 : t) ->
            fun (x494 : int) ->
              Ojs.set_prop_ascii (t_to_js x493) "timeout"
                (Ojs.int_to_js x494)
        let (get_scheduling : t -> [ `fifo  | `lifo ]) =
          fun (x495 : t) ->
            let x496 = Ojs.get_prop_ascii (t_to_js x495) "scheduling" in
            match Ojs.string_of_js x496 with
            | "fifo" -> `fifo
            | "lifo" -> `lifo
            | _ -> assert false
        let (set_scheduling : t -> [ `fifo  | `lifo ] -> unit) =
          fun (x497 : t) ->
            fun (x498 : [ `fifo  | `lifo ]) ->
              Ojs.set_prop_ascii (t_to_js x497) "scheduling"
                (match x498 with
                 | `fifo -> Ojs.string_to_js "fifo"
                 | `lifo -> Ojs.string_to_js "lifo")
      end
    module Agent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x500 : Ojs.t) -> x500
        and t_to_js : t -> Ojs.t = fun (x499 : Ojs.t) -> x499
        let (get_max_free_sockets : t -> int) =
          fun (x501 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x501) "maxFreeSockets")
        let (set_max_free_sockets : t -> int -> unit) =
          fun (x502 : t) ->
            fun (x503 : int) ->
              Ojs.set_prop_ascii (t_to_js x502) "maxFreeSockets"
                (Ojs.int_to_js x503)
        let (get_max_sockets : t -> int) =
          fun (x504 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x504) "maxSockets")
        let (set_max_sockets : t -> int -> unit) =
          fun (x505 : t) ->
            fun (x506 : int) ->
              Ojs.set_prop_ascii (t_to_js x505) "maxSockets"
                (Ojs.int_to_js x506)
        let (get_max_total_sockets : t -> int) =
          fun (x507 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x507) "maxTotalSockets")
        let (set_max_total_sockets : t -> int -> unit) =
          fun (x508 : t) ->
            fun (x509 : int) ->
              Ojs.set_prop_ascii (t_to_js x508) "maxTotalSockets"
                (Ojs.int_to_js x509)
        let (get_free_sockets :
          t -> Node_net.Net.Socket.t list ReadOnlyDict.t) =
          fun (x510 : t) ->
            ReadOnlyDict.t_of_js
              (fun (x511 : Ojs.t) ->
                 Ojs.list_of_js Node_net.Net.Socket.t_of_js x511)
              (Ojs.get_prop_ascii (t_to_js x510) "freeSockets")
        let (get_sockets : t -> Node_net.Net.Socket.t list ReadOnlyDict.t) =
          fun (x513 : t) ->
            ReadOnlyDict.t_of_js
              (fun (x514 : Ojs.t) ->
                 Ojs.list_of_js Node_net.Net.Socket.t_of_js x514)
              (Ojs.get_prop_ascii (t_to_js x513) "sockets")
        let (get_requests : t -> IncomingMessage.t list ReadOnlyDict.t) =
          fun (x516 : t) ->
            ReadOnlyDict.t_of_js
              (fun (x517 : Ojs.t) ->
                 Ojs.list_of_js IncomingMessage.t_of_js x517)
              (Ojs.get_prop_ascii (t_to_js x516) "requests")
        let (create : ?opts:AgentOptions.t -> unit -> t) =
          fun ?opts:(x519 : AgentOptions.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.http "Agent")
                   (let x520 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x519 with
                     | Some x521 ->
                         ignore
                           (Ojs.call x520 "push"
                              [|(AgentOptions.t_to_js x521)|])
                     | None -> ());
                    x520))
        let (destroy : t -> unit) =
          fun (x522 : t) -> ignore (Ojs.call (t_to_js x522) "destroy" [||])
      end
    module ClientRequestArgs =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x524 : Ojs.t) -> x524
        and t_to_js : t -> Ojs.t = fun (x523 : Ojs.t) -> x523
        let (get_protocol : t -> string or_null) =
          fun (x525 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x525) "protocol")
        let (set_protocol : t -> string or_null -> unit) =
          fun (x527 : t) ->
            fun (x528 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x527) "protocol"
                (or_null_to_js Ojs.string_to_js x528)
        let (get_host : t -> string or_null) =
          fun (x530 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x530) "host")
        let (set_host : t -> string or_null -> unit) =
          fun (x532 : t) ->
            fun (x533 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x532) "host"
                (or_null_to_js Ojs.string_to_js x533)
        let (get_hostname : t -> string or_null) =
          fun (x535 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x535) "hostname")
        let (set_hostname : t -> string or_null -> unit) =
          fun (x537 : t) ->
            fun (x538 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x537) "hostname"
                (or_null_to_js Ojs.string_to_js x538)
        let (get_family : t -> int) =
          fun (x540 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x540) "family")
        let (set_family : t -> int -> unit) =
          fun (x541 : t) ->
            fun (x542 : int) ->
              Ojs.set_prop_ascii (t_to_js x541) "family" (Ojs.int_to_js x542)
        let (get_port : t -> string or_number or_null) =
          fun (x543 : t) ->
            or_null_of_js
              (fun (x544 : Ojs.t) -> or_number_of_js Ojs.string_of_js x544)
              (Ojs.get_prop_ascii (t_to_js x543) "port")
        let (set_port : t -> string or_number or_null -> unit) =
          fun (x546 : t) ->
            fun (x547 : string or_number or_null) ->
              Ojs.set_prop_ascii (t_to_js x546) "port"
                (or_null_to_js
                   (fun (x548 : string or_number) ->
                      or_number_to_js Ojs.string_to_js x548) x547)
        let (get_default_port : t -> string or_number) =
          fun (x550 : t) ->
            or_number_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x550) "defaultPort")
        let (set_default_port : t -> string or_number -> unit) =
          fun (x552 : t) ->
            fun (x553 : string or_number) ->
              Ojs.set_prop_ascii (t_to_js x552) "defaultPort"
                (or_number_to_js Ojs.string_to_js x553)
        let (get_local_address : t -> string) =
          fun (x555 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x555) "localAddress")
        let (set_local_address : t -> string -> unit) =
          fun (x556 : t) ->
            fun (x557 : string) ->
              Ojs.set_prop_ascii (t_to_js x556) "localAddress"
                (Ojs.string_to_js x557)
        let (get_socket_path : t -> string) =
          fun (x558 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x558) "socketPath")
        let (set_socket_path : t -> string -> unit) =
          fun (x559 : t) ->
            fun (x560 : string) ->
              Ojs.set_prop_ascii (t_to_js x559) "socketPath"
                (Ojs.string_to_js x560)
        let (get_max_header_size : t -> int) =
          fun (x561 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x561) "maxHeaderSize")
        let (set_max_header_size : t -> int -> unit) =
          fun (x562 : t) ->
            fun (x563 : int) ->
              Ojs.set_prop_ascii (t_to_js x562) "maxHeaderSize"
                (Ojs.int_to_js x563)
        let (get_method : t -> string) =
          fun (x564 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x564) "method")
        let (set_method : t -> string -> unit) =
          fun (x565 : t) ->
            fun (x566 : string) ->
              Ojs.set_prop_ascii (t_to_js x565) "method"
                (Ojs.string_to_js x566)
        let (get_path : t -> string or_null) =
          fun (x567 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x567) "path")
        let (set_path : t -> string or_null -> unit) =
          fun (x569 : t) ->
            fun (x570 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x569) "path"
                (or_null_to_js Ojs.string_to_js x570)
        let (get_headers : t -> OutgoingHttpHeaders.t) =
          fun (x572 : t) ->
            OutgoingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x572) "headers")
        let (set_headers : t -> OutgoingHttpHeaders.t -> unit) =
          fun (x573 : t) ->
            fun (x574 : OutgoingHttpHeaders.t) ->
              Ojs.set_prop_ascii (t_to_js x573) "headers"
                (OutgoingHttpHeaders.t_to_js x574)
        let (get_auth : t -> string or_null) =
          fun (x575 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x575) "auth")
        let (set_auth : t -> string or_null -> unit) =
          fun (x577 : t) ->
            fun (x578 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x577) "auth"
                (or_null_to_js Ojs.string_to_js x578)
        let (get_agent : t -> Agent.t or_boolean) =
          fun (x580 : t) ->
            or_boolean_of_js Agent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x580) "agent")
        let (set_agent : t -> Agent.t or_boolean -> unit) =
          fun (x582 : t) ->
            fun (x583 : Agent.t or_boolean) ->
              Ojs.set_prop_ascii (t_to_js x582) "agent"
                (or_boolean_to_js Agent.t_to_js x583)
        let (get_default_agent : t -> Agent.t) =
          fun (x585 : t) ->
            Agent.t_of_js (Ojs.get_prop_ascii (t_to_js x585) "_defaultAgent")
        let (set_default_agent : t -> Agent.t -> unit) =
          fun (x586 : t) ->
            fun (x587 : Agent.t) ->
              Ojs.set_prop_ascii (t_to_js x586) "_defaultAgent"
                (Agent.t_to_js x587)
        let (get_timeout : t -> int) =
          fun (x588 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x588) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x589 : t) ->
            fun (x590 : int) ->
              Ojs.set_prop_ascii (t_to_js x589) "timeout"
                (Ojs.int_to_js x590)
        let (get_set_host : t -> bool) =
          fun (x591 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x591) "setHost")
        let (set_set_host : t -> bool -> unit) =
          fun (x592 : t) ->
            fun (x593 : bool) ->
              Ojs.set_prop_ascii (t_to_js x592) "setHost"
                (Ojs.bool_to_js x593)
        let (create_connection :
          t ->
            options:t ->
              oncreate:(err:Error.t -> socket:Node_net.Net.Socket.t -> unit)
                -> Node_net.Net.Socket.t)
          =
          fun (x598 : t) ->
            fun ~options:(x594 : t) ->
              fun
                ~oncreate:(x595 :
                            err:Error.t ->
                              socket:Node_net.Net.Socket.t -> unit)
                ->
                Node_net.Net.Socket.t_of_js
                  (Ojs.call (t_to_js x598) "createConnection"
                     [|(t_to_js x594);(Ojs.fun_to_js 2
                                         (fun (x596 : Ojs.t) ->
                                            fun (x597 : Ojs.t) ->
                                              x595 ~err:(Error.t_of_js x596)
                                                ~socket:(Node_net.Net.Socket.t_of_js
                                                           x597)))|])
      end
    let (methods : string list) =
      Ojs.list_of_js Ojs.string_of_js
        (Ojs.get_prop_ascii Import.http "METHODS")
    let (status_codes : AnonymousInterface0.t) =
      AnonymousInterface0.t_of_js
        (Ojs.get_prop_ascii Import.http "STATUS_CODES")
    let (create_server :
      ?request_listener:RequestListener.t -> unit -> Server.t) =
      fun ?request_listener:(x600 : RequestListener.t option) ->
        fun () ->
          Server.t_of_js
            (let x603 = Import.http in
             Ojs.call (Ojs.get_prop_ascii x603 "createServer") "apply"
               [|x603;((let x601 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x600 with
                         | Some x602 ->
                             ignore
                               (Ojs.call x601 "push"
                                  [|(RequestListener.t_to_js x602)|])
                         | None -> ());
                        x601))|])
    let (create_server :
      options:ServerOptions.t ->
        ?request_listener:RequestListener.t -> unit -> Server.t)
      =
      fun ~options:(x604 : ServerOptions.t) ->
        fun ?request_listener:(x605 : RequestListener.t option) ->
          fun () ->
            Server.t_of_js
              (let x608 = Import.http in
               Ojs.call (Ojs.get_prop_ascii x608 "createServer") "apply"
                 [|x608;((let x606 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x606 "push"
                               [|(ServerOptions.t_to_js x604)|]);
                          (match x605 with
                           | Some x607 ->
                               ignore
                                 (Ojs.call x606 "push"
                                    [|(RequestListener.t_to_js x607)|])
                           | None -> ());
                          x606))|])
    module RequestOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x610 : Ojs.t) -> x610
        and t_to_js : t -> Ojs.t = fun (x609 : Ojs.t) -> x609
        let (cast : t -> ClientRequestArgs.t) =
          fun (x611 : t) -> ClientRequestArgs.t_of_js (t_to_js x611)
      end
    module ClientRequest =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x613 : Ojs.t) -> x613
        and t_to_js : t -> Ojs.t = fun (x612 : Ojs.t) -> x612
        let (get_aborted : t -> bool) =
          fun (x614 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x614) "aborted")
        let (set_aborted : t -> bool -> unit) =
          fun (x615 : t) ->
            fun (x616 : bool) ->
              Ojs.set_prop_ascii (t_to_js x615) "aborted"
                (Ojs.bool_to_js x616)
        let (get_host : t -> string) =
          fun (x617 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x617) "host")
        let (set_host : t -> string -> unit) =
          fun (x618 : t) ->
            fun (x619 : string) ->
              Ojs.set_prop_ascii (t_to_js x618) "host"
                (Ojs.string_to_js x619)
        let (get_protocol : t -> string) =
          fun (x620 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x620) "protocol")
        let (set_protocol : t -> string -> unit) =
          fun (x621 : t) ->
            fun (x622 : string) ->
              Ojs.set_prop_ascii (t_to_js x621) "protocol"
                (Ojs.string_to_js x622)
        let (create :
          url:(ClientRequestArgs.t, Node_url.Url.Url.t) union2 or_string ->
            ?cb:(res:IncomingMessage.t -> unit) -> unit -> t)
          =
          fun
            ~url:(x623 :
                   (ClientRequestArgs.t, Node_url.Url.Url.t) union2 or_string)
            ->
            fun ?cb:(x624 : (res:IncomingMessage.t -> unit) option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Import.http "ClientRequest")
                     (let x625 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x625 "push"
                           [|(or_string_to_js
                                (fun
                                   (x628 :
                                     (ClientRequestArgs.t,
                                       Node_url.Url.Url.t) union2)
                                   ->
                                   union2_to_js ClientRequestArgs.t_to_js
                                     Node_url.Url.Url.t_to_js x628) x623)|]);
                      (match x624 with
                       | Some x626 ->
                           ignore
                             (Ojs.call x625 "push"
                                [|(Ojs.fun_to_js 1
                                     (fun (x627 : Ojs.t) ->
                                        x626
                                          ~res:(IncomingMessage.t_of_js x627)))|])
                       | None -> ());
                      x625))
        let (get_method : t -> string) =
          fun (x631 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x631) "method")
        let (set_method : t -> string -> unit) =
          fun (x632 : t) ->
            fun (x633 : string) ->
              Ojs.set_prop_ascii (t_to_js x632) "method"
                (Ojs.string_to_js x633)
        let (get_path : t -> string) =
          fun (x634 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x634) "path")
        let (set_path : t -> string -> unit) =
          fun (x635 : t) ->
            fun (x636 : string) ->
              Ojs.set_prop_ascii (t_to_js x635) "path"
                (Ojs.string_to_js x636)
        let (abort : t -> unit) =
          fun (x637 : t) -> ignore (Ojs.call (t_to_js x637) "abort" [||])
        let (on_socket : t -> socket:Node_net.Net.Socket.t -> unit) =
          fun (x639 : t) ->
            fun ~socket:(x638 : Node_net.Net.Socket.t) ->
              ignore
                (Ojs.call (t_to_js x639) "onSocket"
                   [|(Node_net.Net.Socket.t_to_js x638)|])
        let (set_timeout :
          t -> timeout:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x644 : t) ->
            fun ~timeout:(x640 : int) ->
              fun ?callback:(x641 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x645 = t_to_js x644 in
                     Ojs.call (Ojs.get_prop_ascii x645 "setTimeout") "apply"
                       [|x645;((let x642 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x642 "push"
                                     [|(Ojs.int_to_js x640)|]);
                                (match x641 with
                                 | Some x643 ->
                                     ignore
                                       (Ojs.call x642 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x643 ()))|])
                                 | None -> ());
                                x642))|])
        let (set_no_delay : t -> ?no_delay:bool -> unit -> unit) =
          fun (x649 : t) ->
            fun ?no_delay:(x646 : bool option) ->
              fun () ->
                ignore
                  (let x650 = t_to_js x649 in
                   Ojs.call (Ojs.get_prop_ascii x650 "setNoDelay") "apply"
                     [|x650;((let x647 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x646 with
                               | Some x648 ->
                                   ignore
                                     (Ojs.call x647 "push"
                                        [|(Ojs.bool_to_js x648)|])
                               | None -> ());
                              x647))|])
        let (set_socket_keep_alive :
          t -> ?enable:bool -> ?initial_delay:int -> unit -> unit) =
          fun (x656 : t) ->
            fun ?enable:(x651 : bool option) ->
              fun ?initial_delay:(x652 : int option) ->
                fun () ->
                  ignore
                    (let x657 = t_to_js x656 in
                     Ojs.call (Ojs.get_prop_ascii x657 "setSocketKeepAlive")
                       "apply"
                       [|x657;((let x653 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x651 with
                                 | Some x655 ->
                                     ignore
                                       (Ojs.call x653 "push"
                                          [|(Ojs.bool_to_js x655)|])
                                 | None -> ());
                                (match x652 with
                                 | Some x654 ->
                                     ignore
                                       (Ojs.call x653 "push"
                                          [|(Ojs.int_to_js x654)|])
                                 | None -> ());
                                x653))|])
        let (add_listener :
          t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x660 : t) ->
            fun ~event:(x658 : [ `abort ]) ->
              fun ~listener:(x659 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x660) "addListener"
                     [|((match x658 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x659 ()))|])
        let (add_listener' :
          t ->
            event:[ `connect ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x666 : t) ->
            fun ~event:(x661 : [ `connect ]) ->
              fun
                ~listener:(x662 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x666) "addListener"
                     [|((match x661 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x663 : Ojs.t) ->
                            fun (x664 : Ojs.t) ->
                              fun (x665 : Ojs.t) ->
                                x662 ~response:(IncomingMessage.t_of_js x663)
                                  ~socket:(Node_net.Net.Socket.t_of_js x664)
                                  ~head:(Buffer.t_of_js x665)))|])
        let (add_listener'' :
          t -> event:[ `continue ] -> listener:(unit -> unit) -> t) =
          fun (x669 : t) ->
            fun ~event:(x667 : [ `continue ]) ->
              fun ~listener:(x668 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x669) "addListener"
                     [|((match x667 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x668 ()))|])
        let (add_listener''' :
          t ->
            event:[ `information ] ->
              listener:(info:InformationEvent.t -> unit) -> t)
          =
          fun (x673 : t) ->
            fun ~event:(x670 : [ `information ]) ->
              fun ~listener:(x671 : info:InformationEvent.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x673) "addListener"
                     [|((match x670 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x672 : Ojs.t) ->
                            x671 ~info:(InformationEvent.t_of_js x672)))|])
        let (add_listener'''' :
          t ->
            event:[ `response ] ->
              listener:(response:IncomingMessage.t -> unit) -> t)
          =
          fun (x677 : t) ->
            fun ~event:(x674 : [ `response ]) ->
              fun ~listener:(x675 : response:IncomingMessage.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x677) "addListener"
                     [|((match x674 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x676 : Ojs.t) ->
                            x675 ~response:(IncomingMessage.t_of_js x676)))|])
        let (add_listener''''' :
          t ->
            event:[ `socket ] ->
              listener:(socket:Node_net.Net.Socket.t -> unit) -> t)
          =
          fun (x681 : t) ->
            fun ~event:(x678 : [ `socket ]) ->
              fun ~listener:(x679 : socket:Node_net.Net.Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x681) "addListener"
                     [|((match x678 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x680 :
                                                                    Ojs.t) ->
                                                                    x679
                                                                    ~socket:(
                                                                    Node_net.Net.Socket.t_of_js
                                                                    x680)))|])
        let (add_listener'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x684 : t) ->
            fun ~event:(x682 : [ `timeout ]) ->
              fun ~listener:(x683 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x684) "addListener"
                     [|((match x682 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x683 ()))|])
        let (add_listener''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x690 : t) ->
            fun ~event:(x685 : [ `upgrade ]) ->
              fun
                ~listener:(x686 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x690) "addListener"
                     [|((match x685 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x687 : Ojs.t) ->
                            fun (x688 : Ojs.t) ->
                              fun (x689 : Ojs.t) ->
                                x686 ~response:(IncomingMessage.t_of_js x687)
                                  ~socket:(Node_net.Net.Socket.t_of_js x688)
                                  ~head:(Buffer.t_of_js x689)))|])
        let (add_listener'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x693 : t) ->
            fun ~event:(x691 : [ `close ]) ->
              fun ~listener:(x692 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x693) "addListener"
                     [|((match x691 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x692 ()))|])
        let (add_listener''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x696 : t) ->
            fun ~event:(x694 : [ `drain ]) ->
              fun ~listener:(x695 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x696) "addListener"
                     [|((match x694 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x695 ()))|])
        let (add_listener'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x700 : t) ->
            fun ~event:(x697 : [ `error ]) ->
              fun ~listener:(x698 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x700) "addListener"
                     [|((match x697 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x699 : Ojs.t) ->
                            x698 ~err:(Error.t_of_js x699)))|])
        let (add_listener''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x703 : t) ->
            fun ~event:(x701 : [ `finish ]) ->
              fun ~listener:(x702 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x703) "addListener"
                     [|((match x701 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x702 ()))|])
        let (add_listener'''''''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x707 : t) ->
            fun ~event:(x704 : [ `pipe ]) ->
              fun ~listener:(x705 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x707) "addListener"
                     [|((match x704 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x706 : Ojs.t) ->
                            x705 ~src:(Stream.Readable.t_of_js x706)))|])
        let (add_listener''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x711 : t) ->
            fun ~event:(x708 : [ `unpipe ]) ->
              fun ~listener:(x709 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x711) "addListener"
                     [|((match x708 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x710 :
                                                                    Ojs.t) ->
                                                                    x709
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x710)))|])
        let (add_listener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x717 : t) ->
            fun ~event:(x712 : symbol or_string) ->
              fun ~listener:(x714 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x717) "addListener"
                     [|(or_string_to_js symbol_to_js x712);(Ojs.fun_to_js_args
                                                              (fun (x715 : _)
                                                                 ->
                                                                 x714
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x715 0)))|])
        let (on : t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x720 : t) ->
            fun ~event:(x718 : [ `abort ]) ->
              fun ~listener:(x719 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x720) "on"
                     [|((match x718 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x719 ()))|])
        let (on' :
          t ->
            event:[ `connect ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x726 : t) ->
            fun ~event:(x721 : [ `connect ]) ->
              fun
                ~listener:(x722 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x726) "on"
                     [|((match x721 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x723 : Ojs.t) ->
                            fun (x724 : Ojs.t) ->
                              fun (x725 : Ojs.t) ->
                                x722 ~response:(IncomingMessage.t_of_js x723)
                                  ~socket:(Node_net.Net.Socket.t_of_js x724)
                                  ~head:(Buffer.t_of_js x725)))|])
        let (on'' : t -> event:[ `continue ] -> listener:(unit -> unit) -> t)
          =
          fun (x729 : t) ->
            fun ~event:(x727 : [ `continue ]) ->
              fun ~listener:(x728 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x729) "on"
                     [|((match x727 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x728 ()))|])
        let (on''' :
          t ->
            event:[ `information ] ->
              listener:(info:InformationEvent.t -> unit) -> t)
          =
          fun (x733 : t) ->
            fun ~event:(x730 : [ `information ]) ->
              fun ~listener:(x731 : info:InformationEvent.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x733) "on"
                     [|((match x730 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x732 : Ojs.t) ->
                            x731 ~info:(InformationEvent.t_of_js x732)))|])
        let (on'''' :
          t ->
            event:[ `response ] ->
              listener:(response:IncomingMessage.t -> unit) -> t)
          =
          fun (x737 : t) ->
            fun ~event:(x734 : [ `response ]) ->
              fun ~listener:(x735 : response:IncomingMessage.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x737) "on"
                     [|((match x734 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x736 : Ojs.t) ->
                            x735 ~response:(IncomingMessage.t_of_js x736)))|])
        let (on''''' :
          t ->
            event:[ `socket ] ->
              listener:(socket:Node_net.Net.Socket.t -> unit) -> t)
          =
          fun (x741 : t) ->
            fun ~event:(x738 : [ `socket ]) ->
              fun ~listener:(x739 : socket:Node_net.Net.Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x741) "on"
                     [|((match x738 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x740 :
                                                                    Ojs.t) ->
                                                                    x739
                                                                    ~socket:(
                                                                    Node_net.Net.Socket.t_of_js
                                                                    x740)))|])
        let (on'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x744 : t) ->
            fun ~event:(x742 : [ `timeout ]) ->
              fun ~listener:(x743 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x744) "on"
                     [|((match x742 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x743 ()))|])
        let (on''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x750 : t) ->
            fun ~event:(x745 : [ `upgrade ]) ->
              fun
                ~listener:(x746 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x750) "on"
                     [|((match x745 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x747 : Ojs.t) ->
                            fun (x748 : Ojs.t) ->
                              fun (x749 : Ojs.t) ->
                                x746 ~response:(IncomingMessage.t_of_js x747)
                                  ~socket:(Node_net.Net.Socket.t_of_js x748)
                                  ~head:(Buffer.t_of_js x749)))|])
        let (on'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x753 : t) ->
            fun ~event:(x751 : [ `close ]) ->
              fun ~listener:(x752 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x753) "on"
                     [|((match x751 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x752 ()))|])
        let (on''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x756 : t) ->
            fun ~event:(x754 : [ `drain ]) ->
              fun ~listener:(x755 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x756) "on"
                     [|((match x754 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x755 ()))|])
        let (on'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x760 : t) ->
            fun ~event:(x757 : [ `error ]) ->
              fun ~listener:(x758 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x760) "on"
                     [|((match x757 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x759 : Ojs.t) ->
                            x758 ~err:(Error.t_of_js x759)))|])
        let (on''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x763 : t) ->
            fun ~event:(x761 : [ `finish ]) ->
              fun ~listener:(x762 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x763) "on"
                     [|((match x761 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x762 ()))|])
        let (on'''''''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x767 : t) ->
            fun ~event:(x764 : [ `pipe ]) ->
              fun ~listener:(x765 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x767) "on"
                     [|((match x764 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x766 : Ojs.t) ->
                            x765 ~src:(Stream.Readable.t_of_js x766)))|])
        let (on''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x771 : t) ->
            fun ~event:(x768 : [ `unpipe ]) ->
              fun ~listener:(x769 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x771) "on"
                     [|((match x768 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x770 :
                                                                    Ojs.t) ->
                                                                    x769
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x770)))|])
        let (on'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x777 : t) ->
            fun ~event:(x772 : symbol or_string) ->
              fun ~listener:(x774 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x777) "on"
                     [|(or_string_to_js symbol_to_js x772);(Ojs.fun_to_js_args
                                                              (fun (x775 : _)
                                                                 ->
                                                                 x774
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x775 0)))|])
        let (once : t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x780 : t) ->
            fun ~event:(x778 : [ `abort ]) ->
              fun ~listener:(x779 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x780) "once"
                     [|((match x778 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x779 ()))|])
        let (once' :
          t ->
            event:[ `connect ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x786 : t) ->
            fun ~event:(x781 : [ `connect ]) ->
              fun
                ~listener:(x782 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x786) "once"
                     [|((match x781 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x783 : Ojs.t) ->
                            fun (x784 : Ojs.t) ->
                              fun (x785 : Ojs.t) ->
                                x782 ~response:(IncomingMessage.t_of_js x783)
                                  ~socket:(Node_net.Net.Socket.t_of_js x784)
                                  ~head:(Buffer.t_of_js x785)))|])
        let (once'' :
          t -> event:[ `continue ] -> listener:(unit -> unit) -> t) =
          fun (x789 : t) ->
            fun ~event:(x787 : [ `continue ]) ->
              fun ~listener:(x788 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x789) "once"
                     [|((match x787 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x788 ()))|])
        let (once''' :
          t ->
            event:[ `information ] ->
              listener:(info:InformationEvent.t -> unit) -> t)
          =
          fun (x793 : t) ->
            fun ~event:(x790 : [ `information ]) ->
              fun ~listener:(x791 : info:InformationEvent.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x793) "once"
                     [|((match x790 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x792 : Ojs.t) ->
                            x791 ~info:(InformationEvent.t_of_js x792)))|])
        let (once'''' :
          t ->
            event:[ `response ] ->
              listener:(response:IncomingMessage.t -> unit) -> t)
          =
          fun (x797 : t) ->
            fun ~event:(x794 : [ `response ]) ->
              fun ~listener:(x795 : response:IncomingMessage.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x797) "once"
                     [|((match x794 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x796 : Ojs.t) ->
                            x795 ~response:(IncomingMessage.t_of_js x796)))|])
        let (once''''' :
          t ->
            event:[ `socket ] ->
              listener:(socket:Node_net.Net.Socket.t -> unit) -> t)
          =
          fun (x801 : t) ->
            fun ~event:(x798 : [ `socket ]) ->
              fun ~listener:(x799 : socket:Node_net.Net.Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x801) "once"
                     [|((match x798 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x800 :
                                                                    Ojs.t) ->
                                                                    x799
                                                                    ~socket:(
                                                                    Node_net.Net.Socket.t_of_js
                                                                    x800)))|])
        let (once'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x804 : t) ->
            fun ~event:(x802 : [ `timeout ]) ->
              fun ~listener:(x803 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x804) "once"
                     [|((match x802 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x803 ()))|])
        let (once''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x810 : t) ->
            fun ~event:(x805 : [ `upgrade ]) ->
              fun
                ~listener:(x806 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x810) "once"
                     [|((match x805 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x807 : Ojs.t) ->
                            fun (x808 : Ojs.t) ->
                              fun (x809 : Ojs.t) ->
                                x806 ~response:(IncomingMessage.t_of_js x807)
                                  ~socket:(Node_net.Net.Socket.t_of_js x808)
                                  ~head:(Buffer.t_of_js x809)))|])
        let (once'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x813 : t) ->
            fun ~event:(x811 : [ `close ]) ->
              fun ~listener:(x812 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x813) "once"
                     [|((match x811 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x812 ()))|])
        let (once''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x816 : t) ->
            fun ~event:(x814 : [ `drain ]) ->
              fun ~listener:(x815 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x816) "once"
                     [|((match x814 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x815 ()))|])
        let (once'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x820 : t) ->
            fun ~event:(x817 : [ `error ]) ->
              fun ~listener:(x818 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x820) "once"
                     [|((match x817 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x819 : Ojs.t) ->
                            x818 ~err:(Error.t_of_js x819)))|])
        let (once''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x823 : t) ->
            fun ~event:(x821 : [ `finish ]) ->
              fun ~listener:(x822 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x823) "once"
                     [|((match x821 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x822 ()))|])
        let (once'''''''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x827 : t) ->
            fun ~event:(x824 : [ `pipe ]) ->
              fun ~listener:(x825 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x827) "once"
                     [|((match x824 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x826 : Ojs.t) ->
                            x825 ~src:(Stream.Readable.t_of_js x826)))|])
        let (once''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x831 : t) ->
            fun ~event:(x828 : [ `unpipe ]) ->
              fun ~listener:(x829 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x831) "once"
                     [|((match x828 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x830 :
                                                                    Ojs.t) ->
                                                                    x829
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x830)))|])
        let (once'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x837 : t) ->
            fun ~event:(x832 : symbol or_string) ->
              fun ~listener:(x834 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x837) "once"
                     [|(or_string_to_js symbol_to_js x832);(Ojs.fun_to_js_args
                                                              (fun (x835 : _)
                                                                 ->
                                                                 x834
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x835 0)))|])
        let (prepend_listener :
          t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x840 : t) ->
            fun ~event:(x838 : [ `abort ]) ->
              fun ~listener:(x839 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x840) "prependListener"
                     [|((match x838 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x839 ()))|])
        let (prepend_listener' :
          t ->
            event:[ `connect ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x846 : t) ->
            fun ~event:(x841 : [ `connect ]) ->
              fun
                ~listener:(x842 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x846) "prependListener"
                     [|((match x841 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x843 : Ojs.t) ->
                            fun (x844 : Ojs.t) ->
                              fun (x845 : Ojs.t) ->
                                x842 ~response:(IncomingMessage.t_of_js x843)
                                  ~socket:(Node_net.Net.Socket.t_of_js x844)
                                  ~head:(Buffer.t_of_js x845)))|])
        let (prepend_listener'' :
          t -> event:[ `continue ] -> listener:(unit -> unit) -> t) =
          fun (x849 : t) ->
            fun ~event:(x847 : [ `continue ]) ->
              fun ~listener:(x848 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x849) "prependListener"
                     [|((match x847 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x848 ()))|])
        let (prepend_listener''' :
          t ->
            event:[ `information ] ->
              listener:(info:InformationEvent.t -> unit) -> t)
          =
          fun (x853 : t) ->
            fun ~event:(x850 : [ `information ]) ->
              fun ~listener:(x851 : info:InformationEvent.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x853) "prependListener"
                     [|((match x850 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x852 : Ojs.t) ->
                            x851 ~info:(InformationEvent.t_of_js x852)))|])
        let (prepend_listener'''' :
          t ->
            event:[ `response ] ->
              listener:(response:IncomingMessage.t -> unit) -> t)
          =
          fun (x857 : t) ->
            fun ~event:(x854 : [ `response ]) ->
              fun ~listener:(x855 : response:IncomingMessage.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x857) "prependListener"
                     [|((match x854 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x856 : Ojs.t) ->
                            x855 ~response:(IncomingMessage.t_of_js x856)))|])
        let (prepend_listener''''' :
          t ->
            event:[ `socket ] ->
              listener:(socket:Node_net.Net.Socket.t -> unit) -> t)
          =
          fun (x861 : t) ->
            fun ~event:(x858 : [ `socket ]) ->
              fun ~listener:(x859 : socket:Node_net.Net.Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x861) "prependListener"
                     [|((match x858 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x860 :
                                                                    Ojs.t) ->
                                                                    x859
                                                                    ~socket:(
                                                                    Node_net.Net.Socket.t_of_js
                                                                    x860)))|])
        let (prepend_listener'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x864 : t) ->
            fun ~event:(x862 : [ `timeout ]) ->
              fun ~listener:(x863 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x864) "prependListener"
                     [|((match x862 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x863 ()))|])
        let (prepend_listener''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x870 : t) ->
            fun ~event:(x865 : [ `upgrade ]) ->
              fun
                ~listener:(x866 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x870) "prependListener"
                     [|((match x865 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x867 : Ojs.t) ->
                            fun (x868 : Ojs.t) ->
                              fun (x869 : Ojs.t) ->
                                x866 ~response:(IncomingMessage.t_of_js x867)
                                  ~socket:(Node_net.Net.Socket.t_of_js x868)
                                  ~head:(Buffer.t_of_js x869)))|])
        let (prepend_listener'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x873 : t) ->
            fun ~event:(x871 : [ `close ]) ->
              fun ~listener:(x872 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x873) "prependListener"
                     [|((match x871 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x872 ()))|])
        let (prepend_listener''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x876 : t) ->
            fun ~event:(x874 : [ `drain ]) ->
              fun ~listener:(x875 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x876) "prependListener"
                     [|((match x874 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x875 ()))|])
        let (prepend_listener'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x880 : t) ->
            fun ~event:(x877 : [ `error ]) ->
              fun ~listener:(x878 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x880) "prependListener"
                     [|((match x877 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x879 : Ojs.t) ->
                            x878 ~err:(Error.t_of_js x879)))|])
        let (prepend_listener''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x883 : t) ->
            fun ~event:(x881 : [ `finish ]) ->
              fun ~listener:(x882 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x883) "prependListener"
                     [|((match x881 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x882 ()))|])
        let (prepend_listener'''''''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x887 : t) ->
            fun ~event:(x884 : [ `pipe ]) ->
              fun ~listener:(x885 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x887) "prependListener"
                     [|((match x884 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x886 : Ojs.t) ->
                            x885 ~src:(Stream.Readable.t_of_js x886)))|])
        let (prepend_listener''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x891 : t) ->
            fun ~event:(x888 : [ `unpipe ]) ->
              fun ~listener:(x889 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x891) "prependListener"
                     [|((match x888 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x890 :
                                                                    Ojs.t) ->
                                                                    x889
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x890)))|])
        let (prepend_listener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x897 : t) ->
            fun ~event:(x892 : symbol or_string) ->
              fun ~listener:(x894 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x897) "prependListener"
                     [|(or_string_to_js symbol_to_js x892);(Ojs.fun_to_js_args
                                                              (fun (x895 : _)
                                                                 ->
                                                                 x894
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x895 0)))|])
        let (prepend_once_listener :
          t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x900 : t) ->
            fun ~event:(x898 : [ `abort ]) ->
              fun ~listener:(x899 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x900) "prependOnceListener"
                     [|((match x898 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x899 ()))|])
        let (prepend_once_listener' :
          t ->
            event:[ `connect ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x906 : t) ->
            fun ~event:(x901 : [ `connect ]) ->
              fun
                ~listener:(x902 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x906) "prependOnceListener"
                     [|((match x901 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x903 : Ojs.t) ->
                            fun (x904 : Ojs.t) ->
                              fun (x905 : Ojs.t) ->
                                x902 ~response:(IncomingMessage.t_of_js x903)
                                  ~socket:(Node_net.Net.Socket.t_of_js x904)
                                  ~head:(Buffer.t_of_js x905)))|])
        let (prepend_once_listener'' :
          t -> event:[ `continue ] -> listener:(unit -> unit) -> t) =
          fun (x909 : t) ->
            fun ~event:(x907 : [ `continue ]) ->
              fun ~listener:(x908 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x909) "prependOnceListener"
                     [|((match x907 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x908 ()))|])
        let (prepend_once_listener''' :
          t ->
            event:[ `information ] ->
              listener:(info:InformationEvent.t -> unit) -> t)
          =
          fun (x913 : t) ->
            fun ~event:(x910 : [ `information ]) ->
              fun ~listener:(x911 : info:InformationEvent.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x913) "prependOnceListener"
                     [|((match x910 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x912 : Ojs.t) ->
                            x911 ~info:(InformationEvent.t_of_js x912)))|])
        let (prepend_once_listener'''' :
          t ->
            event:[ `response ] ->
              listener:(response:IncomingMessage.t -> unit) -> t)
          =
          fun (x917 : t) ->
            fun ~event:(x914 : [ `response ]) ->
              fun ~listener:(x915 : response:IncomingMessage.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x917) "prependOnceListener"
                     [|((match x914 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x916 : Ojs.t) ->
                            x915 ~response:(IncomingMessage.t_of_js x916)))|])
        let (prepend_once_listener''''' :
          t ->
            event:[ `socket ] ->
              listener:(socket:Node_net.Net.Socket.t -> unit) -> t)
          =
          fun (x921 : t) ->
            fun ~event:(x918 : [ `socket ]) ->
              fun ~listener:(x919 : socket:Node_net.Net.Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x921) "prependOnceListener"
                     [|((match x918 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x920 :
                                                                    Ojs.t) ->
                                                                    x919
                                                                    ~socket:(
                                                                    Node_net.Net.Socket.t_of_js
                                                                    x920)))|])
        let (prepend_once_listener'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x924 : t) ->
            fun ~event:(x922 : [ `timeout ]) ->
              fun ~listener:(x923 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x924) "prependOnceListener"
                     [|((match x922 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x923 ()))|])
        let (prepend_once_listener''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x930 : t) ->
            fun ~event:(x925 : [ `upgrade ]) ->
              fun
                ~listener:(x926 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x930) "prependOnceListener"
                     [|((match x925 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x927 : Ojs.t) ->
                            fun (x928 : Ojs.t) ->
                              fun (x929 : Ojs.t) ->
                                x926 ~response:(IncomingMessage.t_of_js x927)
                                  ~socket:(Node_net.Net.Socket.t_of_js x928)
                                  ~head:(Buffer.t_of_js x929)))|])
        let (prepend_once_listener'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x933 : t) ->
            fun ~event:(x931 : [ `close ]) ->
              fun ~listener:(x932 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x933) "prependOnceListener"
                     [|((match x931 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x932 ()))|])
        let (prepend_once_listener''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x936 : t) ->
            fun ~event:(x934 : [ `drain ]) ->
              fun ~listener:(x935 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x936) "prependOnceListener"
                     [|((match x934 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x935 ()))|])
        let (prepend_once_listener'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x940 : t) ->
            fun ~event:(x937 : [ `error ]) ->
              fun ~listener:(x938 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x940) "prependOnceListener"
                     [|((match x937 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x939 : Ojs.t) ->
                            x938 ~err:(Error.t_of_js x939)))|])
        let (prepend_once_listener''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x943 : t) ->
            fun ~event:(x941 : [ `finish ]) ->
              fun ~listener:(x942 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x943) "prependOnceListener"
                     [|((match x941 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x942 ()))|])
        let (prepend_once_listener'''''''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x947 : t) ->
            fun ~event:(x944 : [ `pipe ]) ->
              fun ~listener:(x945 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x947) "prependOnceListener"
                     [|((match x944 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x946 : Ojs.t) ->
                            x945 ~src:(Stream.Readable.t_of_js x946)))|])
        let (prepend_once_listener''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x951 : t) ->
            fun ~event:(x948 : [ `unpipe ]) ->
              fun ~listener:(x949 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x951) "prependOnceListener"
                     [|((match x948 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x950 :
                                                                    Ojs.t) ->
                                                                    x949
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x950)))|])
        let (prepend_once_listener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x957 : t) ->
            fun ~event:(x952 : symbol or_string) ->
              fun ~listener:(x954 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x957) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x952);(Ojs.fun_to_js_args
                                                              (fun (x955 : _)
                                                                 ->
                                                                 x954
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x955 0)))|])
        let (cast : t -> OutgoingMessage.t) =
          fun (x958 : t) -> OutgoingMessage.t_of_js (t_to_js x958)
      end
    let (request :
      options:(RequestOptions.t, Node_url.Url.Url.t) union2 or_string ->
        ?callback:(res:IncomingMessage.t -> unit) -> unit -> ClientRequest.t)
      =
      fun
        ~options:(x959 :
                   (RequestOptions.t, Node_url.Url.Url.t) union2 or_string)
        ->
        fun ?callback:(x960 : (res:IncomingMessage.t -> unit) option) ->
          fun () ->
            ClientRequest.t_of_js
              (let x967 = Import.http in
               Ojs.call (Ojs.get_prop_ascii x967 "request") "apply"
                 [|x967;((let x961 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x961 "push"
                               [|(or_string_to_js
                                    (fun
                                       (x964 :
                                         (RequestOptions.t,
                                           Node_url.Url.Url.t) union2)
                                       ->
                                       union2_to_js RequestOptions.t_to_js
                                         Node_url.Url.Url.t_to_js x964) x959)|]);
                          (match x960 with
                           | Some x962 ->
                               ignore
                                 (Ojs.call x961 "push"
                                    [|(Ojs.fun_to_js 1
                                         (fun (x963 : Ojs.t) ->
                                            x962
                                              ~res:(IncomingMessage.t_of_js
                                                      x963)))|])
                           | None -> ());
                          x961))|])
    let (request :
      url:Node_url.Url.Url.t or_string ->
        options:RequestOptions.t ->
          ?callback:(res:IncomingMessage.t -> unit) ->
            unit -> ClientRequest.t)
      =
      fun ~url:(x968 : Node_url.Url.Url.t or_string) ->
        fun ~options:(x969 : RequestOptions.t) ->
          fun ?callback:(x970 : (res:IncomingMessage.t -> unit) option) ->
            fun () ->
              ClientRequest.t_of_js
                (let x975 = Import.http in
                 Ojs.call (Ojs.get_prop_ascii x975 "request") "apply"
                   [|x975;((let x971 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x971 "push"
                                 [|(or_string_to_js Node_url.Url.Url.t_to_js
                                      x968)|]);
                            ignore
                              (Ojs.call x971 "push"
                                 [|(RequestOptions.t_to_js x969)|]);
                            (match x970 with
                             | Some x972 ->
                                 ignore
                                   (Ojs.call x971 "push"
                                      [|(Ojs.fun_to_js 1
                                           (fun (x973 : Ojs.t) ->
                                              x972
                                                ~res:(IncomingMessage.t_of_js
                                                        x973)))|])
                             | None -> ());
                            x971))|])
    let (get_ :
      options:(RequestOptions.t, Node_url.Url.Url.t) union2 or_string ->
        ?callback:(res:IncomingMessage.t -> unit) -> unit -> ClientRequest.t)
      =
      fun
        ~options:(x976 :
                   (RequestOptions.t, Node_url.Url.Url.t) union2 or_string)
        ->
        fun ?callback:(x977 : (res:IncomingMessage.t -> unit) option) ->
          fun () ->
            ClientRequest.t_of_js
              (let x984 = Import.http in
               Ojs.call (Ojs.get_prop_ascii x984 "get") "apply"
                 [|x984;((let x978 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x978 "push"
                               [|(or_string_to_js
                                    (fun
                                       (x981 :
                                         (RequestOptions.t,
                                           Node_url.Url.Url.t) union2)
                                       ->
                                       union2_to_js RequestOptions.t_to_js
                                         Node_url.Url.Url.t_to_js x981) x976)|]);
                          (match x977 with
                           | Some x979 ->
                               ignore
                                 (Ojs.call x978 "push"
                                    [|(Ojs.fun_to_js 1
                                         (fun (x980 : Ojs.t) ->
                                            x979
                                              ~res:(IncomingMessage.t_of_js
                                                      x980)))|])
                           | None -> ());
                          x978))|])
    let (get_ :
      url:Node_url.Url.Url.t or_string ->
        options:RequestOptions.t ->
          ?callback:(res:IncomingMessage.t -> unit) ->
            unit -> ClientRequest.t)
      =
      fun ~url:(x985 : Node_url.Url.Url.t or_string) ->
        fun ~options:(x986 : RequestOptions.t) ->
          fun ?callback:(x987 : (res:IncomingMessage.t -> unit) option) ->
            fun () ->
              ClientRequest.t_of_js
                (let x992 = Import.http in
                 Ojs.call (Ojs.get_prop_ascii x992 "get") "apply"
                   [|x992;((let x988 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x988 "push"
                                 [|(or_string_to_js Node_url.Url.Url.t_to_js
                                      x985)|]);
                            ignore
                              (Ojs.call x988 "push"
                                 [|(RequestOptions.t_to_js x986)|]);
                            (match x987 with
                             | Some x989 ->
                                 ignore
                                   (Ojs.call x988 "push"
                                      [|(Ojs.fun_to_js 1
                                           (fun (x990 : Ojs.t) ->
                                              x989
                                                ~res:(IncomingMessage.t_of_js
                                                        x990)))|])
                             | None -> ());
                            x988))|])
    let (global_agent : Agent.t) =
      Agent.t_of_js (Ojs.get_prop_ascii Import.http "globalAgent")
    let (max_header_size : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.http "maxHeaderSize")
  end
