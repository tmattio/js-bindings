[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get : t -> int -> string or_undefined) =
      fun (x3 : t) ->
        fun (x4 : int) ->
          or_undefined_of_js Ojs.string_of_js (Ojs.array_get (t_to_js x3) x4)
    let (set : t -> int -> string or_undefined -> unit) =
      fun (x6 : t) ->
        fun (x7 : int) ->
          fun (x8 : string or_undefined) ->
            Ojs.array_set (t_to_js x6) x7
              (or_undefined_to_js Ojs.string_to_js x8)
    let (get' : t -> string -> string or_undefined) =
      fun (x10 : t) ->
        fun (x11 : string) ->
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop (t_to_js x10) (Ojs.string_to_js x11))
    let (set' : t -> string -> string or_undefined -> unit) =
      fun (x13 : t) ->
        fun (x14 : string) ->
          fun (x15 : string or_undefined) ->
            Ojs.set_prop (t_to_js x13) (Ojs.string_to_js x14)
              (or_undefined_to_js Ojs.string_to_js x15)
  end
module Http =
  struct
    open Node_stream
    module IncomingHttpHeaders =
      struct
        type t = string list or_string Dict.t
        let rec t_of_js : Ojs.t -> t =
          fun (x21 : Ojs.t) ->
            Dict.t_of_js
              (fun (x22 : Ojs.t) ->
                 or_string_of_js
                   (fun (x23 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x23)
                   x22) x21
        and t_to_js : t -> Ojs.t =
          fun (x17 : string list or_string Dict.t) ->
            Dict.t_to_js
              (fun (x18 : string list or_string) ->
                 or_string_to_js
                   (fun (x19 : string list) ->
                      Ojs.list_to_js Ojs.string_to_js x19) x18) x17
        let (get_accept : t -> string) =
          fun (x25 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x25) "accept")
        let (set_accept : t -> string -> unit) =
          fun (x26 : t) ->
            fun (x27 : string) ->
              Ojs.set_prop_ascii (t_to_js x26) "accept"
                (Ojs.string_to_js x27)
        let (get_accept_language : t -> string) =
          fun (x28 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x28) "accept-language")
        let (set_accept_language : t -> string -> unit) =
          fun (x29 : t) ->
            fun (x30 : string) ->
              Ojs.set_prop_ascii (t_to_js x29) "accept-language"
                (Ojs.string_to_js x30)
        let (get_accept_patch : t -> string) =
          fun (x31 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x31) "accept-patch")
        let (set_accept_patch : t -> string -> unit) =
          fun (x32 : t) ->
            fun (x33 : string) ->
              Ojs.set_prop_ascii (t_to_js x32) "accept-patch"
                (Ojs.string_to_js x33)
        let (get_accept_ranges : t -> string) =
          fun (x34 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x34) "accept-ranges")
        let (set_accept_ranges : t -> string -> unit) =
          fun (x35 : t) ->
            fun (x36 : string) ->
              Ojs.set_prop_ascii (t_to_js x35) "accept-ranges"
                (Ojs.string_to_js x36)
        let (get_access_control_allow_credentials : t -> string) =
          fun (x37 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x37)
                 "access-control-allow-credentials")
        let (set_access_control_allow_credentials : t -> string -> unit) =
          fun (x38 : t) ->
            fun (x39 : string) ->
              Ojs.set_prop_ascii (t_to_js x38)
                "access-control-allow-credentials" (Ojs.string_to_js x39)
        let (get_access_control_allow_headers : t -> string) =
          fun (x40 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x40)
                 "access-control-allow-headers")
        let (set_access_control_allow_headers : t -> string -> unit) =
          fun (x41 : t) ->
            fun (x42 : string) ->
              Ojs.set_prop_ascii (t_to_js x41) "access-control-allow-headers"
                (Ojs.string_to_js x42)
        let (get_access_control_allow_methods : t -> string) =
          fun (x43 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x43)
                 "access-control-allow-methods")
        let (set_access_control_allow_methods : t -> string -> unit) =
          fun (x44 : t) ->
            fun (x45 : string) ->
              Ojs.set_prop_ascii (t_to_js x44) "access-control-allow-methods"
                (Ojs.string_to_js x45)
        let (get_access_control_allow_origin : t -> string) =
          fun (x46 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x46) "access-control-allow-origin")
        let (set_access_control_allow_origin : t -> string -> unit) =
          fun (x47 : t) ->
            fun (x48 : string) ->
              Ojs.set_prop_ascii (t_to_js x47) "access-control-allow-origin"
                (Ojs.string_to_js x48)
        let (get_access_control_expose_headers : t -> string) =
          fun (x49 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x49)
                 "access-control-expose-headers")
        let (set_access_control_expose_headers : t -> string -> unit) =
          fun (x50 : t) ->
            fun (x51 : string) ->
              Ojs.set_prop_ascii (t_to_js x50)
                "access-control-expose-headers" (Ojs.string_to_js x51)
        let (get_access_control_max_age : t -> string) =
          fun (x52 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x52) "access-control-max-age")
        let (set_access_control_max_age : t -> string -> unit) =
          fun (x53 : t) ->
            fun (x54 : string) ->
              Ojs.set_prop_ascii (t_to_js x53) "access-control-max-age"
                (Ojs.string_to_js x54)
        let (get_access_control_request_headers : t -> string) =
          fun (x55 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x55)
                 "access-control-request-headers")
        let (set_access_control_request_headers : t -> string -> unit) =
          fun (x56 : t) ->
            fun (x57 : string) ->
              Ojs.set_prop_ascii (t_to_js x56)
                "access-control-request-headers" (Ojs.string_to_js x57)
        let (get_access_control_request_method : t -> string) =
          fun (x58 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x58)
                 "access-control-request-method")
        let (set_access_control_request_method : t -> string -> unit) =
          fun (x59 : t) ->
            fun (x60 : string) ->
              Ojs.set_prop_ascii (t_to_js x59)
                "access-control-request-method" (Ojs.string_to_js x60)
        let (get_age : t -> string) =
          fun (x61 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x61) "age")
        let (set_age : t -> string -> unit) =
          fun (x62 : t) ->
            fun (x63 : string) ->
              Ojs.set_prop_ascii (t_to_js x62) "age" (Ojs.string_to_js x63)
        let (get_allow : t -> string) =
          fun (x64 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x64) "allow")
        let (set_allow : t -> string -> unit) =
          fun (x65 : t) ->
            fun (x66 : string) ->
              Ojs.set_prop_ascii (t_to_js x65) "allow" (Ojs.string_to_js x66)
        let (get_alt_svc : t -> string) =
          fun (x67 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x67) "alt-svc")
        let (set_alt_svc : t -> string -> unit) =
          fun (x68 : t) ->
            fun (x69 : string) ->
              Ojs.set_prop_ascii (t_to_js x68) "alt-svc"
                (Ojs.string_to_js x69)
        let (get_authorization : t -> string) =
          fun (x70 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x70) "authorization")
        let (set_authorization : t -> string -> unit) =
          fun (x71 : t) ->
            fun (x72 : string) ->
              Ojs.set_prop_ascii (t_to_js x71) "authorization"
                (Ojs.string_to_js x72)
        let (get_cache_control : t -> string) =
          fun (x73 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x73) "cache-control")
        let (set_cache_control : t -> string -> unit) =
          fun (x74 : t) ->
            fun (x75 : string) ->
              Ojs.set_prop_ascii (t_to_js x74) "cache-control"
                (Ojs.string_to_js x75)
        let (get_connection : t -> string) =
          fun (x76 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x76) "connection")
        let (set_connection : t -> string -> unit) =
          fun (x77 : t) ->
            fun (x78 : string) ->
              Ojs.set_prop_ascii (t_to_js x77) "connection"
                (Ojs.string_to_js x78)
        let (get_content_disposition : t -> string) =
          fun (x79 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x79) "content-disposition")
        let (set_content_disposition : t -> string -> unit) =
          fun (x80 : t) ->
            fun (x81 : string) ->
              Ojs.set_prop_ascii (t_to_js x80) "content-disposition"
                (Ojs.string_to_js x81)
        let (get_content_encoding : t -> string) =
          fun (x82 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x82) "content-encoding")
        let (set_content_encoding : t -> string -> unit) =
          fun (x83 : t) ->
            fun (x84 : string) ->
              Ojs.set_prop_ascii (t_to_js x83) "content-encoding"
                (Ojs.string_to_js x84)
        let (get_content_language : t -> string) =
          fun (x85 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x85) "content-language")
        let (set_content_language : t -> string -> unit) =
          fun (x86 : t) ->
            fun (x87 : string) ->
              Ojs.set_prop_ascii (t_to_js x86) "content-language"
                (Ojs.string_to_js x87)
        let (get_content_length : t -> string) =
          fun (x88 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x88) "content-length")
        let (set_content_length : t -> string -> unit) =
          fun (x89 : t) ->
            fun (x90 : string) ->
              Ojs.set_prop_ascii (t_to_js x89) "content-length"
                (Ojs.string_to_js x90)
        let (get_content_location : t -> string) =
          fun (x91 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x91) "content-location")
        let (set_content_location : t -> string -> unit) =
          fun (x92 : t) ->
            fun (x93 : string) ->
              Ojs.set_prop_ascii (t_to_js x92) "content-location"
                (Ojs.string_to_js x93)
        let (get_content_range : t -> string) =
          fun (x94 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x94) "content-range")
        let (set_content_range : t -> string -> unit) =
          fun (x95 : t) ->
            fun (x96 : string) ->
              Ojs.set_prop_ascii (t_to_js x95) "content-range"
                (Ojs.string_to_js x96)
        let (get_content_type : t -> string) =
          fun (x97 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x97) "content-type")
        let (set_content_type : t -> string -> unit) =
          fun (x98 : t) ->
            fun (x99 : string) ->
              Ojs.set_prop_ascii (t_to_js x98) "content-type"
                (Ojs.string_to_js x99)
        let (get_cookie : t -> string) =
          fun (x100 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x100) "cookie")
        let (set_cookie : t -> string -> unit) =
          fun (x101 : t) ->
            fun (x102 : string) ->
              Ojs.set_prop_ascii (t_to_js x101) "cookie"
                (Ojs.string_to_js x102)
        let (get_date : t -> string) =
          fun (x103 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x103) "date")
        let (set_date : t -> string -> unit) =
          fun (x104 : t) ->
            fun (x105 : string) ->
              Ojs.set_prop_ascii (t_to_js x104) "date"
                (Ojs.string_to_js x105)
        let (get_expect : t -> string) =
          fun (x106 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x106) "expect")
        let (set_expect : t -> string -> unit) =
          fun (x107 : t) ->
            fun (x108 : string) ->
              Ojs.set_prop_ascii (t_to_js x107) "expect"
                (Ojs.string_to_js x108)
        let (get_expires : t -> string) =
          fun (x109 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x109) "expires")
        let (set_expires : t -> string -> unit) =
          fun (x110 : t) ->
            fun (x111 : string) ->
              Ojs.set_prop_ascii (t_to_js x110) "expires"
                (Ojs.string_to_js x111)
        let (get_forwarded : t -> string) =
          fun (x112 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x112) "forwarded")
        let (set_forwarded : t -> string -> unit) =
          fun (x113 : t) ->
            fun (x114 : string) ->
              Ojs.set_prop_ascii (t_to_js x113) "forwarded"
                (Ojs.string_to_js x114)
        let (get_from : t -> string) =
          fun (x115 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x115) "from")
        let (set_from : t -> string -> unit) =
          fun (x116 : t) ->
            fun (x117 : string) ->
              Ojs.set_prop_ascii (t_to_js x116) "from"
                (Ojs.string_to_js x117)
        let (get_host : t -> string) =
          fun (x118 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x118) "host")
        let (set_host : t -> string -> unit) =
          fun (x119 : t) ->
            fun (x120 : string) ->
              Ojs.set_prop_ascii (t_to_js x119) "host"
                (Ojs.string_to_js x120)
        let (get_if_match : t -> string) =
          fun (x121 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x121) "if-match")
        let (set_if_match : t -> string -> unit) =
          fun (x122 : t) ->
            fun (x123 : string) ->
              Ojs.set_prop_ascii (t_to_js x122) "if-match"
                (Ojs.string_to_js x123)
        let (get_if_modified_since : t -> string) =
          fun (x124 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x124) "if-modified-since")
        let (set_if_modified_since : t -> string -> unit) =
          fun (x125 : t) ->
            fun (x126 : string) ->
              Ojs.set_prop_ascii (t_to_js x125) "if-modified-since"
                (Ojs.string_to_js x126)
        let (get_if_none_match : t -> string) =
          fun (x127 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x127) "if-none-match")
        let (set_if_none_match : t -> string -> unit) =
          fun (x128 : t) ->
            fun (x129 : string) ->
              Ojs.set_prop_ascii (t_to_js x128) "if-none-match"
                (Ojs.string_to_js x129)
        let (get_if_unmodified_since : t -> string) =
          fun (x130 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x130) "if-unmodified-since")
        let (set_if_unmodified_since : t -> string -> unit) =
          fun (x131 : t) ->
            fun (x132 : string) ->
              Ojs.set_prop_ascii (t_to_js x131) "if-unmodified-since"
                (Ojs.string_to_js x132)
        let (get_last_modified : t -> string) =
          fun (x133 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x133) "last-modified")
        let (set_last_modified : t -> string -> unit) =
          fun (x134 : t) ->
            fun (x135 : string) ->
              Ojs.set_prop_ascii (t_to_js x134) "last-modified"
                (Ojs.string_to_js x135)
        let (get_location : t -> string) =
          fun (x136 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x136) "location")
        let (set_location : t -> string -> unit) =
          fun (x137 : t) ->
            fun (x138 : string) ->
              Ojs.set_prop_ascii (t_to_js x137) "location"
                (Ojs.string_to_js x138)
        let (get_origin : t -> string) =
          fun (x139 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x139) "origin")
        let (set_origin : t -> string -> unit) =
          fun (x140 : t) ->
            fun (x141 : string) ->
              Ojs.set_prop_ascii (t_to_js x140) "origin"
                (Ojs.string_to_js x141)
        let (get_pragma : t -> string) =
          fun (x142 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x142) "pragma")
        let (set_pragma : t -> string -> unit) =
          fun (x143 : t) ->
            fun (x144 : string) ->
              Ojs.set_prop_ascii (t_to_js x143) "pragma"
                (Ojs.string_to_js x144)
        let (get_proxy_authenticate : t -> string) =
          fun (x145 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x145) "proxy-authenticate")
        let (set_proxy_authenticate : t -> string -> unit) =
          fun (x146 : t) ->
            fun (x147 : string) ->
              Ojs.set_prop_ascii (t_to_js x146) "proxy-authenticate"
                (Ojs.string_to_js x147)
        let (get_proxy_authorization : t -> string) =
          fun (x148 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x148) "proxy-authorization")
        let (set_proxy_authorization : t -> string -> unit) =
          fun (x149 : t) ->
            fun (x150 : string) ->
              Ojs.set_prop_ascii (t_to_js x149) "proxy-authorization"
                (Ojs.string_to_js x150)
        let (get_public_key_pins : t -> string) =
          fun (x151 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x151) "public-key-pins")
        let (set_public_key_pins : t -> string -> unit) =
          fun (x152 : t) ->
            fun (x153 : string) ->
              Ojs.set_prop_ascii (t_to_js x152) "public-key-pins"
                (Ojs.string_to_js x153)
        let (get_range : t -> string) =
          fun (x154 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x154) "range")
        let (set_range : t -> string -> unit) =
          fun (x155 : t) ->
            fun (x156 : string) ->
              Ojs.set_prop_ascii (t_to_js x155) "range"
                (Ojs.string_to_js x156)
        let (get_referer : t -> string) =
          fun (x157 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x157) "referer")
        let (set_referer : t -> string -> unit) =
          fun (x158 : t) ->
            fun (x159 : string) ->
              Ojs.set_prop_ascii (t_to_js x158) "referer"
                (Ojs.string_to_js x159)
        let (get_retry_after : t -> string) =
          fun (x160 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x160) "retry-after")
        let (set_retry_after : t -> string -> unit) =
          fun (x161 : t) ->
            fun (x162 : string) ->
              Ojs.set_prop_ascii (t_to_js x161) "retry-after"
                (Ojs.string_to_js x162)
        let (get_sec_websocket_accept : t -> string) =
          fun (x163 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x163) "sec-websocket-accept")
        let (set_sec_websocket_accept : t -> string -> unit) =
          fun (x164 : t) ->
            fun (x165 : string) ->
              Ojs.set_prop_ascii (t_to_js x164) "sec-websocket-accept"
                (Ojs.string_to_js x165)
        let (get_sec_websocket_extensions : t -> string) =
          fun (x166 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x166) "sec-websocket-extensions")
        let (set_sec_websocket_extensions : t -> string -> unit) =
          fun (x167 : t) ->
            fun (x168 : string) ->
              Ojs.set_prop_ascii (t_to_js x167) "sec-websocket-extensions"
                (Ojs.string_to_js x168)
        let (get_sec_websocket_key : t -> string) =
          fun (x169 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x169) "sec-websocket-key")
        let (set_sec_websocket_key : t -> string -> unit) =
          fun (x170 : t) ->
            fun (x171 : string) ->
              Ojs.set_prop_ascii (t_to_js x170) "sec-websocket-key"
                (Ojs.string_to_js x171)
        let (get_sec_websocket_protocol : t -> string) =
          fun (x172 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x172) "sec-websocket-protocol")
        let (set_sec_websocket_protocol : t -> string -> unit) =
          fun (x173 : t) ->
            fun (x174 : string) ->
              Ojs.set_prop_ascii (t_to_js x173) "sec-websocket-protocol"
                (Ojs.string_to_js x174)
        let (get_sec_websocket_version : t -> string) =
          fun (x175 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x175) "sec-websocket-version")
        let (set_sec_websocket_version : t -> string -> unit) =
          fun (x176 : t) ->
            fun (x177 : string) ->
              Ojs.set_prop_ascii (t_to_js x176) "sec-websocket-version"
                (Ojs.string_to_js x177)
        let (get_set_cookie : t -> string list) =
          fun (x178 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x178) "set-cookie")
        let (set_set_cookie : t -> string list -> unit) =
          fun (x180 : t) ->
            fun (x181 : string list) ->
              Ojs.set_prop_ascii (t_to_js x180) "set-cookie"
                (Ojs.list_to_js Ojs.string_to_js x181)
        let (get_strict_transport_security : t -> string) =
          fun (x183 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x183) "strict-transport-security")
        let (set_strict_transport_security : t -> string -> unit) =
          fun (x184 : t) ->
            fun (x185 : string) ->
              Ojs.set_prop_ascii (t_to_js x184) "strict-transport-security"
                (Ojs.string_to_js x185)
        let (get_tk : t -> string) =
          fun (x186 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x186) "tk")
        let (set_tk : t -> string -> unit) =
          fun (x187 : t) ->
            fun (x188 : string) ->
              Ojs.set_prop_ascii (t_to_js x187) "tk" (Ojs.string_to_js x188)
        let (get_trailer : t -> string) =
          fun (x189 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x189) "trailer")
        let (set_trailer : t -> string -> unit) =
          fun (x190 : t) ->
            fun (x191 : string) ->
              Ojs.set_prop_ascii (t_to_js x190) "trailer"
                (Ojs.string_to_js x191)
        let (get_transfer_encoding : t -> string) =
          fun (x192 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x192) "transfer-encoding")
        let (set_transfer_encoding : t -> string -> unit) =
          fun (x193 : t) ->
            fun (x194 : string) ->
              Ojs.set_prop_ascii (t_to_js x193) "transfer-encoding"
                (Ojs.string_to_js x194)
        let (get_upgrade : t -> string) =
          fun (x195 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x195) "upgrade")
        let (set_upgrade : t -> string -> unit) =
          fun (x196 : t) ->
            fun (x197 : string) ->
              Ojs.set_prop_ascii (t_to_js x196) "upgrade"
                (Ojs.string_to_js x197)
        let (get_user_agent : t -> string) =
          fun (x198 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x198) "user-agent")
        let (set_user_agent : t -> string -> unit) =
          fun (x199 : t) ->
            fun (x200 : string) ->
              Ojs.set_prop_ascii (t_to_js x199) "user-agent"
                (Ojs.string_to_js x200)
        let (get_vary : t -> string) =
          fun (x201 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x201) "vary")
        let (set_vary : t -> string -> unit) =
          fun (x202 : t) ->
            fun (x203 : string) ->
              Ojs.set_prop_ascii (t_to_js x202) "vary"
                (Ojs.string_to_js x203)
        let (get_via : t -> string) =
          fun (x204 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x204) "via")
        let (set_via : t -> string -> unit) =
          fun (x205 : t) ->
            fun (x206 : string) ->
              Ojs.set_prop_ascii (t_to_js x205) "via" (Ojs.string_to_js x206)
        let (get_warning : t -> string) =
          fun (x207 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x207) "warning")
        let (set_warning : t -> string -> unit) =
          fun (x208 : t) ->
            fun (x209 : string) ->
              Ojs.set_prop_ascii (t_to_js x208) "warning"
                (Ojs.string_to_js x209)
        let (get_www_authenticate : t -> string) =
          fun (x210 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x210) "www-authenticate")
        let (set_www_authenticate : t -> string -> unit) =
          fun (x211 : t) ->
            fun (x212 : string) ->
              Ojs.set_prop_ascii (t_to_js x211) "www-authenticate"
                (Ojs.string_to_js x212)
      end
    module OutgoingHttpHeader =
      struct
        type t = string list or_string or_number
        let rec t_of_js : Ojs.t -> t =
          fun (x217 : Ojs.t) ->
            or_number_of_js
              (fun (x218 : Ojs.t) ->
                 or_string_of_js
                   (fun (x219 : Ojs.t) ->
                      Ojs.list_of_js Ojs.string_of_js x219) x218) x217
        and t_to_js : t -> Ojs.t =
          fun (x213 : string list or_string or_number) ->
            or_number_to_js
              (fun (x214 : string list or_string) ->
                 or_string_to_js
                   (fun (x215 : string list) ->
                      Ojs.list_to_js Ojs.string_to_js x215) x214) x213
      end
    module OutgoingHttpHeaders =
      struct
        type t = OutgoingHttpHeader.t Dict.t
        let rec t_of_js : Ojs.t -> t =
          fun (x223 : Ojs.t) -> Dict.t_of_js OutgoingHttpHeader.t_of_js x223
        and t_to_js : t -> Ojs.t =
          fun (x221 : OutgoingHttpHeader.t Dict.t) ->
            Dict.t_to_js OutgoingHttpHeader.t_to_js x221
      end
    module IncomingMessage =
      struct
        include struct include Stream.Readable end
        let (create : socket:Node_net.Net.Socket.t -> t) =
          fun ~socket:(x225 : Node_net.Net.Socket.t) ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.http "IncomingMessage")
                 [|(Node_net.Net.Socket.t_to_js x225)|])
        let (get_aborted : t -> bool) =
          fun (x226 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x226) "aborted")
        let (set_aborted : t -> bool -> unit) =
          fun (x227 : t) ->
            fun (x228 : bool) ->
              Ojs.set_prop_ascii (t_to_js x227) "aborted"
                (Ojs.bool_to_js x228)
        let (get_http_version : t -> string) =
          fun (x229 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x229) "httpVersion")
        let (set_http_version : t -> string -> unit) =
          fun (x230 : t) ->
            fun (x231 : string) ->
              Ojs.set_prop_ascii (t_to_js x230) "httpVersion"
                (Ojs.string_to_js x231)
        let (get_http_version_major : t -> int) =
          fun (x232 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x232) "httpVersionMajor")
        let (set_http_version_major : t -> int -> unit) =
          fun (x233 : t) ->
            fun (x234 : int) ->
              Ojs.set_prop_ascii (t_to_js x233) "httpVersionMajor"
                (Ojs.int_to_js x234)
        let (get_http_version_minor : t -> int) =
          fun (x235 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x235) "httpVersionMinor")
        let (set_http_version_minor : t -> int -> unit) =
          fun (x236 : t) ->
            fun (x237 : int) ->
              Ojs.set_prop_ascii (t_to_js x236) "httpVersionMinor"
                (Ojs.int_to_js x237)
        let (get_complete : t -> bool) =
          fun (x238 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x238) "complete")
        let (set_complete : t -> bool -> unit) =
          fun (x239 : t) ->
            fun (x240 : bool) ->
              Ojs.set_prop_ascii (t_to_js x239) "complete"
                (Ojs.bool_to_js x240)
        let (get_connection : t -> Node_net.Net.Socket.t) =
          fun (x241 : t) ->
            Node_net.Net.Socket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x241) "connection")
        let (set_connection : t -> Node_net.Net.Socket.t -> unit) =
          fun (x242 : t) ->
            fun (x243 : Node_net.Net.Socket.t) ->
              Ojs.set_prop_ascii (t_to_js x242) "connection"
                (Node_net.Net.Socket.t_to_js x243)
        let (get_socket : t -> Node_net.Net.Socket.t) =
          fun (x244 : t) ->
            Node_net.Net.Socket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x244) "socket")
        let (set_socket : t -> Node_net.Net.Socket.t -> unit) =
          fun (x245 : t) ->
            fun (x246 : Node_net.Net.Socket.t) ->
              Ojs.set_prop_ascii (t_to_js x245) "socket"
                (Node_net.Net.Socket.t_to_js x246)
        let (get_headers : t -> IncomingHttpHeaders.t) =
          fun (x247 : t) ->
            IncomingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x247) "headers")
        let (set_headers : t -> IncomingHttpHeaders.t -> unit) =
          fun (x248 : t) ->
            fun (x249 : IncomingHttpHeaders.t) ->
              Ojs.set_prop_ascii (t_to_js x248) "headers"
                (IncomingHttpHeaders.t_to_js x249)
        let (get_raw_headers : t -> string list) =
          fun (x250 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x250) "rawHeaders")
        let (set_raw_headers : t -> string list -> unit) =
          fun (x252 : t) ->
            fun (x253 : string list) ->
              Ojs.set_prop_ascii (t_to_js x252) "rawHeaders"
                (Ojs.list_to_js Ojs.string_to_js x253)
        let (get_trailers : t -> string Dict.t) =
          fun (x255 : t) ->
            Dict.t_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x255) "trailers")
        let (set_trailers : t -> string Dict.t -> unit) =
          fun (x257 : t) ->
            fun (x258 : string Dict.t) ->
              Ojs.set_prop_ascii (t_to_js x257) "trailers"
                (Dict.t_to_js Ojs.string_to_js x258)
        let (get_raw_trailers : t -> string list) =
          fun (x260 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x260) "rawTrailers")
        let (set_raw_trailers : t -> string list -> unit) =
          fun (x262 : t) ->
            fun (x263 : string list) ->
              Ojs.set_prop_ascii (t_to_js x262) "rawTrailers"
                (Ojs.list_to_js Ojs.string_to_js x263)
        let (set_timeout :
          t -> msecs:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x269 : t) ->
            fun ~msecs:(x265 : int) ->
              fun ?callback:(x266 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x270 = t_to_js x269 in
                     Ojs.call (Ojs.get_prop_ascii x270 "setTimeout") "apply"
                       [|x270;((let x267 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x267 "push"
                                     [|(Ojs.int_to_js x265)|]);
                                (match x266 with
                                 | Some x268 ->
                                     ignore
                                       (Ojs.call x267 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x268 ()))|])
                                 | None -> ());
                                x267))|])
        let (get_method : t -> string) =
          fun (x271 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x271) "method")
        let (set_method : t -> string -> unit) =
          fun (x272 : t) ->
            fun (x273 : string) ->
              Ojs.set_prop_ascii (t_to_js x272) "method"
                (Ojs.string_to_js x273)
        let (get_url : t -> string) =
          fun (x274 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x274) "url")
        let (set_url : t -> string -> unit) =
          fun (x275 : t) ->
            fun (x276 : string) ->
              Ojs.set_prop_ascii (t_to_js x275) "url" (Ojs.string_to_js x276)
        let (get_status_code : t -> int) =
          fun (x277 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x277) "statusCode")
        let (set_status_code : t -> int -> unit) =
          fun (x278 : t) ->
            fun (x279 : int) ->
              Ojs.set_prop_ascii (t_to_js x278) "statusCode"
                (Ojs.int_to_js x279)
        let (get_status_message : t -> string) =
          fun (x280 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x280) "statusMessage")
        let (set_status_message : t -> string -> unit) =
          fun (x281 : t) ->
            fun (x282 : string) ->
              Ojs.set_prop_ascii (t_to_js x281) "statusMessage"
                (Ojs.string_to_js x282)
        let (destroy : t -> ?error:Error.t -> unit -> unit) =
          fun (x286 : t) ->
            fun ?error:(x283 : Error.t option) ->
              fun () ->
                ignore
                  (let x287 = t_to_js x286 in
                   Ojs.call (Ojs.get_prop_ascii x287 "destroy") "apply"
                     [|x287;((let x284 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x283 with
                               | Some x285 ->
                                   ignore
                                     (Ojs.call x284 "push"
                                        [|(Error.t_to_js x285)|])
                               | None -> ());
                              x284))|])
      end
    module ServerOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x289 : Ojs.t) -> x289
        and t_to_js : t -> Ojs.t = fun (x288 : Ojs.t) -> x288
        let (get_incoming_message : t -> any) =
          fun (x290 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x290) "IncomingMessage")
        let (set_incoming_message : t -> any -> unit) =
          fun (x291 : t) ->
            fun (x292 : any) ->
              Ojs.set_prop_ascii (t_to_js x291) "IncomingMessage"
                (any_to_js x292)
        let (get_server_response : t -> any) =
          fun (x293 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x293) "ServerResponse")
        let (set_server_response : t -> any -> unit) =
          fun (x294 : t) ->
            fun (x295 : any) ->
              Ojs.set_prop_ascii (t_to_js x294) "ServerResponse"
                (any_to_js x295)
        let (get_max_header_size : t -> int) =
          fun (x296 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x296) "maxHeaderSize")
        let (set_max_header_size : t -> int -> unit) =
          fun (x297 : t) ->
            fun (x298 : int) ->
              Ojs.set_prop_ascii (t_to_js x297) "maxHeaderSize"
                (Ojs.int_to_js x298)
        let (get_insecure_http_parser : t -> bool) =
          fun (x299 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x299) "insecureHTTPParser")
        let (set_insecure_http_parser : t -> bool -> unit) =
          fun (x300 : t) ->
            fun (x301 : bool) ->
              Ojs.set_prop_ascii (t_to_js x300) "insecureHTTPParser"
                (Ojs.bool_to_js x301)
      end
    module HttpBase =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x303 : Ojs.t) -> x303
        and t_to_js : t -> Ojs.t = fun (x302 : Ojs.t) -> x302
        let (set_timeout :
          t -> ?msecs:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x309 : t) ->
            fun ?msecs:(x304 : int option) ->
              fun ?callback:(x305 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x310 = t_to_js x309 in
                     Ojs.call (Ojs.get_prop_ascii x310 "setTimeout") "apply"
                       [|x310;((let x306 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x304 with
                                 | Some x308 ->
                                     ignore
                                       (Ojs.call x306 "push"
                                          [|(Ojs.int_to_js x308)|])
                                 | None -> ());
                                (match x305 with
                                 | Some x307 ->
                                     ignore
                                       (Ojs.call x306 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x307 ()))|])
                                 | None -> ());
                                x306))|])
        let (set_timeout' : t -> callback:(unit -> unit) -> t) =
          fun (x312 : t) ->
            fun ~callback:(x311 : unit -> unit) ->
              t_of_js
                (Ojs.call (t_to_js x312) "setTimeout"
                   [|(Ojs.fun_to_js 1 (fun _ -> x311 ()))|])
        let (get_max_headers_count : t -> int or_null) =
          fun (x313 : t) ->
            or_null_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x313) "maxHeadersCount")
        let (set_max_headers_count : t -> int or_null -> unit) =
          fun (x315 : t) ->
            fun (x316 : int or_null) ->
              Ojs.set_prop_ascii (t_to_js x315) "maxHeadersCount"
                (or_null_to_js Ojs.int_to_js x316)
        let (get_timeout : t -> int) =
          fun (x318 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x318) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x319 : t) ->
            fun (x320 : int) ->
              Ojs.set_prop_ascii (t_to_js x319) "timeout"
                (Ojs.int_to_js x320)
        let (get_headers_timeout : t -> int) =
          fun (x321 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x321) "headersTimeout")
        let (set_headers_timeout : t -> int -> unit) =
          fun (x322 : t) ->
            fun (x323 : int) ->
              Ojs.set_prop_ascii (t_to_js x322) "headersTimeout"
                (Ojs.int_to_js x323)
        let (get_keep_alive_timeout : t -> int) =
          fun (x324 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x324) "keepAliveTimeout")
        let (set_keep_alive_timeout : t -> int -> unit) =
          fun (x325 : t) ->
            fun (x326 : int) ->
              Ojs.set_prop_ascii (t_to_js x325) "keepAliveTimeout"
                (Ojs.int_to_js x326)
        let (get_request_timeout : t -> int) =
          fun (x327 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x327) "requestTimeout")
        let (set_request_timeout : t -> int -> unit) =
          fun (x328 : t) ->
            fun (x329 : int) ->
              Ojs.set_prop_ascii (t_to_js x328) "requestTimeout"
                (Ojs.int_to_js x329)
      end
    module OutgoingMessage =
      struct
        include struct include Stream.Writable end
        let (get_upgrading : t -> bool) =
          fun (x330 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x330) "upgrading")
        let (set_upgrading : t -> bool -> unit) =
          fun (x331 : t) ->
            fun (x332 : bool) ->
              Ojs.set_prop_ascii (t_to_js x331) "upgrading"
                (Ojs.bool_to_js x332)
        let (get_chunked_encoding : t -> bool) =
          fun (x333 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x333) "chunkedEncoding")
        let (set_chunked_encoding : t -> bool -> unit) =
          fun (x334 : t) ->
            fun (x335 : bool) ->
              Ojs.set_prop_ascii (t_to_js x334) "chunkedEncoding"
                (Ojs.bool_to_js x335)
        let (get_should_keep_alive : t -> bool) =
          fun (x336 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x336) "shouldKeepAlive")
        let (set_should_keep_alive : t -> bool -> unit) =
          fun (x337 : t) ->
            fun (x338 : bool) ->
              Ojs.set_prop_ascii (t_to_js x337) "shouldKeepAlive"
                (Ojs.bool_to_js x338)
        let (get_use_chunked_encoding_by_default : t -> bool) =
          fun (x339 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x339)
                 "useChunkedEncodingByDefault")
        let (set_use_chunked_encoding_by_default : t -> bool -> unit) =
          fun (x340 : t) ->
            fun (x341 : bool) ->
              Ojs.set_prop_ascii (t_to_js x340) "useChunkedEncodingByDefault"
                (Ojs.bool_to_js x341)
        let (get_send_date : t -> bool) =
          fun (x342 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x342) "sendDate")
        let (set_send_date : t -> bool -> unit) =
          fun (x343 : t) ->
            fun (x344 : bool) ->
              Ojs.set_prop_ascii (t_to_js x343) "sendDate"
                (Ojs.bool_to_js x344)
        let (get_finished : t -> bool) =
          fun (x345 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x345) "finished")
        let (set_finished : t -> bool -> unit) =
          fun (x346 : t) ->
            fun (x347 : bool) ->
              Ojs.set_prop_ascii (t_to_js x346) "finished"
                (Ojs.bool_to_js x347)
        let (get_headers_sent : t -> bool) =
          fun (x348 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x348) "headersSent")
        let (set_headers_sent : t -> bool -> unit) =
          fun (x349 : t) ->
            fun (x350 : bool) ->
              Ojs.set_prop_ascii (t_to_js x349) "headersSent"
                (Ojs.bool_to_js x350)
        let (get_connection : t -> Node_net.Net.Socket.t or_null) =
          fun (x351 : t) ->
            or_null_of_js Node_net.Net.Socket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x351) "connection")
        let (set_connection : t -> Node_net.Net.Socket.t or_null -> unit) =
          fun (x353 : t) ->
            fun (x354 : Node_net.Net.Socket.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x353) "connection"
                (or_null_to_js Node_net.Net.Socket.t_to_js x354)
        let (get_socket : t -> Node_net.Net.Socket.t or_null) =
          fun (x356 : t) ->
            or_null_of_js Node_net.Net.Socket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x356) "socket")
        let (set_socket : t -> Node_net.Net.Socket.t or_null -> unit) =
          fun (x358 : t) ->
            fun (x359 : Node_net.Net.Socket.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x358) "socket"
                (or_null_to_js Node_net.Net.Socket.t_to_js x359)
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.http "OutgoingMessage")
                 [||])
        let (set_timeout :
          t -> msecs:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x365 : t) ->
            fun ~msecs:(x361 : int) ->
              fun ?callback:(x362 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x366 = t_to_js x365 in
                     Ojs.call (Ojs.get_prop_ascii x366 "setTimeout") "apply"
                       [|x366;((let x363 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x363 "push"
                                     [|(Ojs.int_to_js x361)|]);
                                (match x362 with
                                 | Some x364 ->
                                     ignore
                                       (Ojs.call x363 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x364 ()))|])
                                 | None -> ());
                                x363))|])
        let (set_header :
          t -> name:string -> value:string list or_string or_number -> unit)
          =
          fun (x372 : t) ->
            fun ~name:(x367 : string) ->
              fun ~value:(x368 : string list or_string or_number) ->
                ignore
                  (Ojs.call (t_to_js x372) "setHeader"
                     [|(Ojs.string_to_js x367);(or_number_to_js
                                                  (fun
                                                     (x369 :
                                                       string list or_string)
                                                     ->
                                                     or_string_to_js
                                                       (fun
                                                          (x370 :
                                                            string list)
                                                          ->
                                                          Ojs.list_to_js
                                                            Ojs.string_to_js
                                                            x370) x369) x368)|])
        let (get_header :
          t -> name:string -> string list or_string or_number or_undefined) =
          fun (x374 : t) ->
            fun ~name:(x373 : string) ->
              or_undefined_of_js
                (fun (x375 : Ojs.t) ->
                   or_number_of_js
                     (fun (x376 : Ojs.t) ->
                        or_string_of_js
                          (fun (x377 : Ojs.t) ->
                             Ojs.list_of_js Ojs.string_of_js x377) x376) x375)
                (Ojs.call (t_to_js x374) "getHeader"
                   [|(Ojs.string_to_js x373)|])
        let (get_headers : t -> OutgoingHttpHeaders.t) =
          fun (x379 : t) ->
            OutgoingHttpHeaders.t_of_js
              (Ojs.call (t_to_js x379) "getHeaders" [||])
        let (get_header_names : t -> string list) =
          fun (x380 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x380) "getHeaderNames" [||])
        let (has_header : t -> name:string -> bool) =
          fun (x383 : t) ->
            fun ~name:(x382 : string) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x383) "hasHeader"
                   [|(Ojs.string_to_js x382)|])
        let (remove_header : t -> name:string -> unit) =
          fun (x385 : t) ->
            fun ~name:(x384 : string) ->
              ignore
                (Ojs.call (t_to_js x385) "removeHeader"
                   [|(Ojs.string_to_js x384)|])
        let (add_trailers :
          t ->
            headers:(OutgoingHttpHeaders.t, (string * string) list) union2 ->
              unit)
          =
          fun (x393 : t) ->
            fun
              ~headers:(x386 :
                         (OutgoingHttpHeaders.t, (string * string) list)
                           union2)
              ->
              ignore
                (Ojs.call (t_to_js x393) "addTrailers"
                   [|(union2_to_js OutgoingHttpHeaders.t_to_js
                        (fun (x388 : (string * string) list) ->
                           Ojs.list_to_js
                             (fun (x389 : (string * string)) ->
                                let (x390, x391) = x389 in
                                let x392 = Ojs.array_make 2 in
                                Ojs.array_set x392 0 (Ojs.string_to_js x390);
                                Ojs.array_set x392 1 (Ojs.string_to_js x391);
                                x392) x388) x386)|])
        let (flush_headers : t -> unit) =
          fun (x394 : t) ->
            ignore (Ojs.call (t_to_js x394) "flushHeaders" [||])
      end
    module ServerResponse =
      struct
        include struct include OutgoingMessage end
        let (get_status_code : t -> int) =
          fun (x395 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x395) "statusCode")
        let (set_status_code : t -> int -> unit) =
          fun (x396 : t) ->
            fun (x397 : int) ->
              Ojs.set_prop_ascii (t_to_js x396) "statusCode"
                (Ojs.int_to_js x397)
        let (get_status_message : t -> string) =
          fun (x398 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x398) "statusMessage")
        let (set_status_message : t -> string -> unit) =
          fun (x399 : t) ->
            fun (x400 : string) ->
              Ojs.set_prop_ascii (t_to_js x399) "statusMessage"
                (Ojs.string_to_js x400)
        let (create : req:IncomingMessage.t -> t) =
          fun ~req:(x401 : IncomingMessage.t) ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.http "ServerResponse")
                 [|(IncomingMessage.t_to_js x401)|])
        let (assign_socket : t -> socket:Node_net.Net.Socket.t -> unit) =
          fun (x403 : t) ->
            fun ~socket:(x402 : Node_net.Net.Socket.t) ->
              ignore
                (Ojs.call (t_to_js x403) "assignSocket"
                   [|(Node_net.Net.Socket.t_to_js x402)|])
        let (detach_socket : t -> socket:Node_net.Net.Socket.t -> unit) =
          fun (x405 : t) ->
            fun ~socket:(x404 : Node_net.Net.Socket.t) ->
              ignore
                (Ojs.call (t_to_js x405) "detachSocket"
                   [|(Node_net.Net.Socket.t_to_js x404)|])
        let (write_continue : t -> ?callback:(unit -> unit) -> unit -> unit)
          =
          fun (x409 : t) ->
            fun ?callback:(x406 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x410 = t_to_js x409 in
                   Ojs.call (Ojs.get_prop_ascii x410 "writeContinue") "apply"
                     [|x410;((let x407 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x406 with
                               | Some x408 ->
                                   ignore
                                     (Ojs.call x407 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x408 ()))|])
                               | None -> ());
                              x407))|])
        let (write_head :
          t ->
            status_code:int ->
              ?reason_phrase:string ->
                ?headers:(OutgoingHttpHeaders.t, OutgoingHttpHeader.t)
                  or_array -> unit -> t)
          =
          fun (x419 : t) ->
            fun ~status_code:(x411 : int) ->
              fun ?reason_phrase:(x412 : string option) ->
                fun
                  ?headers:(x413 :
                             (OutgoingHttpHeaders.t, OutgoingHttpHeader.t)
                               or_array option)
                  ->
                  fun () ->
                    t_of_js
                      (let x420 = t_to_js x419 in
                       Ojs.call (Ojs.get_prop_ascii x420 "writeHead") "apply"
                         [|x420;((let x414 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x414 "push"
                                       [|(Ojs.int_to_js x411)|]);
                                  (match x412 with
                                   | Some x418 ->
                                       ignore
                                         (Ojs.call x414 "push"
                                            [|(Ojs.string_to_js x418)|])
                                   | None -> ());
                                  (match x413 with
                                   | Some x415 ->
                                       ignore
                                         (Ojs.call x414 "push"
                                            [|(or_array_to_js
                                                 OutgoingHttpHeaders.t_to_js
                                                 OutgoingHttpHeader.t_to_js
                                                 x415)|])
                                   | None -> ());
                                  x414))|])
        let (write_head' :
          t ->
            status_code:int ->
              ?headers:(OutgoingHttpHeaders.t, OutgoingHttpHeader.t) or_array
                -> unit -> t)
          =
          fun (x427 : t) ->
            fun ~status_code:(x421 : int) ->
              fun
                ?headers:(x422 :
                           (OutgoingHttpHeaders.t, OutgoingHttpHeader.t)
                             or_array option)
                ->
                fun () ->
                  t_of_js
                    (let x428 = t_to_js x427 in
                     Ojs.call (Ojs.get_prop_ascii x428 "writeHead") "apply"
                       [|x428;((let x423 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x423 "push"
                                     [|(Ojs.int_to_js x421)|]);
                                (match x422 with
                                 | Some x424 ->
                                     ignore
                                       (Ojs.call x423 "push"
                                          [|(or_array_to_js
                                               OutgoingHttpHeaders.t_to_js
                                               OutgoingHttpHeader.t_to_js
                                               x424)|])
                                 | None -> ());
                                x423))|])
        let (write_processing : t -> unit) =
          fun (x429 : t) ->
            ignore (Ojs.call (t_to_js x429) "writeProcessing" [||])
      end
    module RequestListener =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x431 : Ojs.t) -> x431
        and t_to_js : t -> Ojs.t = fun (x430 : Ojs.t) -> x430
        let (apply :
          t -> req:IncomingMessage.t -> res:ServerResponse.t -> unit) =
          fun (x434 : t) ->
            fun ~req:(x432 : IncomingMessage.t) ->
              fun ~res:(x433 : ServerResponse.t) ->
                ignore
                  (Ojs.apply (t_to_js x434)
                     [|(IncomingMessage.t_to_js x432);(ServerResponse.t_to_js
                                                         x433)|])
      end
    module Server =
      struct
        include struct include HttpBase end
        include struct include Node_net.Net.Server end
        let (create : ?request_listener:RequestListener.t -> unit -> t) =
          fun ?request_listener:(x435 : RequestListener.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.http "Server")
                   (let x436 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x435 with
                     | Some x437 ->
                         ignore
                           (Ojs.call x436 "push"
                              [|(RequestListener.t_to_js x437)|])
                     | None -> ());
                    x436))
        let (create' :
          options:ServerOptions.t ->
            ?request_listener:RequestListener.t -> unit -> t)
          =
          fun ~options:(x438 : ServerOptions.t) ->
            fun ?request_listener:(x439 : RequestListener.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.http "Server")
                     (let x440 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x440 "push"
                           [|(ServerOptions.t_to_js x438)|]);
                      (match x439 with
                       | Some x441 ->
                           ignore
                             (Ojs.call x440 "push"
                                [|(RequestListener.t_to_js x441)|])
                       | None -> ());
                      x440))
      end
    module InformationEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x443 : Ojs.t) -> x443
        and t_to_js : t -> Ojs.t = fun (x442 : Ojs.t) -> x442
        let (get_status_code : t -> int) =
          fun (x444 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x444) "statusCode")
        let (set_status_code : t -> int -> unit) =
          fun (x445 : t) ->
            fun (x446 : int) ->
              Ojs.set_prop_ascii (t_to_js x445) "statusCode"
                (Ojs.int_to_js x446)
        let (get_status_message : t -> string) =
          fun (x447 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x447) "statusMessage")
        let (set_status_message : t -> string -> unit) =
          fun (x448 : t) ->
            fun (x449 : string) ->
              Ojs.set_prop_ascii (t_to_js x448) "statusMessage"
                (Ojs.string_to_js x449)
        let (get_http_version : t -> string) =
          fun (x450 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x450) "httpVersion")
        let (set_http_version : t -> string -> unit) =
          fun (x451 : t) ->
            fun (x452 : string) ->
              Ojs.set_prop_ascii (t_to_js x451) "httpVersion"
                (Ojs.string_to_js x452)
        let (get_http_version_major : t -> int) =
          fun (x453 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x453) "httpVersionMajor")
        let (set_http_version_major : t -> int -> unit) =
          fun (x454 : t) ->
            fun (x455 : int) ->
              Ojs.set_prop_ascii (t_to_js x454) "httpVersionMajor"
                (Ojs.int_to_js x455)
        let (get_http_version_minor : t -> int) =
          fun (x456 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x456) "httpVersionMinor")
        let (set_http_version_minor : t -> int -> unit) =
          fun (x457 : t) ->
            fun (x458 : int) ->
              Ojs.set_prop_ascii (t_to_js x457) "httpVersionMinor"
                (Ojs.int_to_js x458)
        let (get_headers : t -> IncomingHttpHeaders.t) =
          fun (x459 : t) ->
            IncomingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x459) "headers")
        let (set_headers : t -> IncomingHttpHeaders.t -> unit) =
          fun (x460 : t) ->
            fun (x461 : IncomingHttpHeaders.t) ->
              Ojs.set_prop_ascii (t_to_js x460) "headers"
                (IncomingHttpHeaders.t_to_js x461)
        let (get_raw_headers : t -> string list) =
          fun (x462 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x462) "rawHeaders")
        let (set_raw_headers : t -> string list -> unit) =
          fun (x464 : t) ->
            fun (x465 : string list) ->
              Ojs.set_prop_ascii (t_to_js x464) "rawHeaders"
                (Ojs.list_to_js Ojs.string_to_js x465)
      end
    module AgentOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x468 : Ojs.t) -> x468
        and t_to_js : t -> Ojs.t = fun (x467 : Ojs.t) -> x467
        let (get_keep_alive : t -> bool) =
          fun (x469 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x469) "keepAlive")
        let (set_keep_alive : t -> bool -> unit) =
          fun (x470 : t) ->
            fun (x471 : bool) ->
              Ojs.set_prop_ascii (t_to_js x470) "keepAlive"
                (Ojs.bool_to_js x471)
        let (get_keep_alive_msecs : t -> int) =
          fun (x472 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x472) "keepAliveMsecs")
        let (set_keep_alive_msecs : t -> int -> unit) =
          fun (x473 : t) ->
            fun (x474 : int) ->
              Ojs.set_prop_ascii (t_to_js x473) "keepAliveMsecs"
                (Ojs.int_to_js x474)
        let (get_max_sockets : t -> int) =
          fun (x475 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x475) "maxSockets")
        let (set_max_sockets : t -> int -> unit) =
          fun (x476 : t) ->
            fun (x477 : int) ->
              Ojs.set_prop_ascii (t_to_js x476) "maxSockets"
                (Ojs.int_to_js x477)
        let (get_max_total_sockets : t -> int) =
          fun (x478 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x478) "maxTotalSockets")
        let (set_max_total_sockets : t -> int -> unit) =
          fun (x479 : t) ->
            fun (x480 : int) ->
              Ojs.set_prop_ascii (t_to_js x479) "maxTotalSockets"
                (Ojs.int_to_js x480)
        let (get_max_free_sockets : t -> int) =
          fun (x481 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x481) "maxFreeSockets")
        let (set_max_free_sockets : t -> int -> unit) =
          fun (x482 : t) ->
            fun (x483 : int) ->
              Ojs.set_prop_ascii (t_to_js x482) "maxFreeSockets"
                (Ojs.int_to_js x483)
        let (get_timeout : t -> int) =
          fun (x484 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x484) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x485 : t) ->
            fun (x486 : int) ->
              Ojs.set_prop_ascii (t_to_js x485) "timeout"
                (Ojs.int_to_js x486)
        let (get_scheduling : t -> [ `fifo  | `lifo ]) =
          fun (x487 : t) ->
            let x488 = Ojs.get_prop_ascii (t_to_js x487) "scheduling" in
            match Ojs.string_of_js x488 with
            | "fifo" -> `fifo
            | "lifo" -> `lifo
            | _ -> assert false
        let (set_scheduling : t -> [ `fifo  | `lifo ] -> unit) =
          fun (x489 : t) ->
            fun (x490 : [ `fifo  | `lifo ]) ->
              Ojs.set_prop_ascii (t_to_js x489) "scheduling"
                (match x490 with
                 | `fifo -> Ojs.string_to_js "fifo"
                 | `lifo -> Ojs.string_to_js "lifo")
      end
    module Agent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x492 : Ojs.t) -> x492
        and t_to_js : t -> Ojs.t = fun (x491 : Ojs.t) -> x491
        let (get_max_free_sockets : t -> int) =
          fun (x493 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x493) "maxFreeSockets")
        let (set_max_free_sockets : t -> int -> unit) =
          fun (x494 : t) ->
            fun (x495 : int) ->
              Ojs.set_prop_ascii (t_to_js x494) "maxFreeSockets"
                (Ojs.int_to_js x495)
        let (get_max_sockets : t -> int) =
          fun (x496 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x496) "maxSockets")
        let (set_max_sockets : t -> int -> unit) =
          fun (x497 : t) ->
            fun (x498 : int) ->
              Ojs.set_prop_ascii (t_to_js x497) "maxSockets"
                (Ojs.int_to_js x498)
        let (get_max_total_sockets : t -> int) =
          fun (x499 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x499) "maxTotalSockets")
        let (set_max_total_sockets : t -> int -> unit) =
          fun (x500 : t) ->
            fun (x501 : int) ->
              Ojs.set_prop_ascii (t_to_js x500) "maxTotalSockets"
                (Ojs.int_to_js x501)
        let (get_free_sockets :
          t -> Node_net.Net.Socket.t list ReadOnlyDict.t) =
          fun (x502 : t) ->
            ReadOnlyDict.t_of_js
              (fun (x503 : Ojs.t) ->
                 Ojs.list_of_js Node_net.Net.Socket.t_of_js x503)
              (Ojs.get_prop_ascii (t_to_js x502) "freeSockets")
        let (get_sockets : t -> Node_net.Net.Socket.t list ReadOnlyDict.t) =
          fun (x505 : t) ->
            ReadOnlyDict.t_of_js
              (fun (x506 : Ojs.t) ->
                 Ojs.list_of_js Node_net.Net.Socket.t_of_js x506)
              (Ojs.get_prop_ascii (t_to_js x505) "sockets")
        let (get_requests : t -> IncomingMessage.t list ReadOnlyDict.t) =
          fun (x508 : t) ->
            ReadOnlyDict.t_of_js
              (fun (x509 : Ojs.t) ->
                 Ojs.list_of_js IncomingMessage.t_of_js x509)
              (Ojs.get_prop_ascii (t_to_js x508) "requests")
        let (create : ?opts:AgentOptions.t -> unit -> t) =
          fun ?opts:(x511 : AgentOptions.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.http "Agent")
                   (let x512 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x511 with
                     | Some x513 ->
                         ignore
                           (Ojs.call x512 "push"
                              [|(AgentOptions.t_to_js x513)|])
                     | None -> ());
                    x512))
        let (destroy : t -> unit) =
          fun (x514 : t) -> ignore (Ojs.call (t_to_js x514) "destroy" [||])
      end
    module ClientRequestArgs =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x516 : Ojs.t) -> x516
        and t_to_js : t -> Ojs.t = fun (x515 : Ojs.t) -> x515
        let (get_protocol : t -> string or_null) =
          fun (x517 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x517) "protocol")
        let (set_protocol : t -> string or_null -> unit) =
          fun (x519 : t) ->
            fun (x520 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x519) "protocol"
                (or_null_to_js Ojs.string_to_js x520)
        let (get_host : t -> string or_null) =
          fun (x522 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x522) "host")
        let (set_host : t -> string or_null -> unit) =
          fun (x524 : t) ->
            fun (x525 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x524) "host"
                (or_null_to_js Ojs.string_to_js x525)
        let (get_hostname : t -> string or_null) =
          fun (x527 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x527) "hostname")
        let (set_hostname : t -> string or_null -> unit) =
          fun (x529 : t) ->
            fun (x530 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x529) "hostname"
                (or_null_to_js Ojs.string_to_js x530)
        let (get_family : t -> int) =
          fun (x532 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x532) "family")
        let (set_family : t -> int -> unit) =
          fun (x533 : t) ->
            fun (x534 : int) ->
              Ojs.set_prop_ascii (t_to_js x533) "family" (Ojs.int_to_js x534)
        let (get_port : t -> string or_number or_null) =
          fun (x535 : t) ->
            or_null_of_js
              (fun (x536 : Ojs.t) -> or_number_of_js Ojs.string_of_js x536)
              (Ojs.get_prop_ascii (t_to_js x535) "port")
        let (set_port : t -> string or_number or_null -> unit) =
          fun (x538 : t) ->
            fun (x539 : string or_number or_null) ->
              Ojs.set_prop_ascii (t_to_js x538) "port"
                (or_null_to_js
                   (fun (x540 : string or_number) ->
                      or_number_to_js Ojs.string_to_js x540) x539)
        let (get_default_port : t -> string or_number) =
          fun (x542 : t) ->
            or_number_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x542) "defaultPort")
        let (set_default_port : t -> string or_number -> unit) =
          fun (x544 : t) ->
            fun (x545 : string or_number) ->
              Ojs.set_prop_ascii (t_to_js x544) "defaultPort"
                (or_number_to_js Ojs.string_to_js x545)
        let (get_local_address : t -> string) =
          fun (x547 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x547) "localAddress")
        let (set_local_address : t -> string -> unit) =
          fun (x548 : t) ->
            fun (x549 : string) ->
              Ojs.set_prop_ascii (t_to_js x548) "localAddress"
                (Ojs.string_to_js x549)
        let (get_socket_path : t -> string) =
          fun (x550 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x550) "socketPath")
        let (set_socket_path : t -> string -> unit) =
          fun (x551 : t) ->
            fun (x552 : string) ->
              Ojs.set_prop_ascii (t_to_js x551) "socketPath"
                (Ojs.string_to_js x552)
        let (get_max_header_size : t -> int) =
          fun (x553 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x553) "maxHeaderSize")
        let (set_max_header_size : t -> int -> unit) =
          fun (x554 : t) ->
            fun (x555 : int) ->
              Ojs.set_prop_ascii (t_to_js x554) "maxHeaderSize"
                (Ojs.int_to_js x555)
        let (get_method : t -> string) =
          fun (x556 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x556) "method")
        let (set_method : t -> string -> unit) =
          fun (x557 : t) ->
            fun (x558 : string) ->
              Ojs.set_prop_ascii (t_to_js x557) "method"
                (Ojs.string_to_js x558)
        let (get_path : t -> string or_null) =
          fun (x559 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x559) "path")
        let (set_path : t -> string or_null -> unit) =
          fun (x561 : t) ->
            fun (x562 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x561) "path"
                (or_null_to_js Ojs.string_to_js x562)
        let (get_headers : t -> OutgoingHttpHeaders.t) =
          fun (x564 : t) ->
            OutgoingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x564) "headers")
        let (set_headers : t -> OutgoingHttpHeaders.t -> unit) =
          fun (x565 : t) ->
            fun (x566 : OutgoingHttpHeaders.t) ->
              Ojs.set_prop_ascii (t_to_js x565) "headers"
                (OutgoingHttpHeaders.t_to_js x566)
        let (get_auth : t -> string or_null) =
          fun (x567 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x567) "auth")
        let (set_auth : t -> string or_null -> unit) =
          fun (x569 : t) ->
            fun (x570 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x569) "auth"
                (or_null_to_js Ojs.string_to_js x570)
        let (get_agent : t -> Agent.t or_boolean) =
          fun (x572 : t) ->
            or_boolean_of_js Agent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x572) "agent")
        let (set_agent : t -> Agent.t or_boolean -> unit) =
          fun (x574 : t) ->
            fun (x575 : Agent.t or_boolean) ->
              Ojs.set_prop_ascii (t_to_js x574) "agent"
                (or_boolean_to_js Agent.t_to_js x575)
        let (get_default_agent : t -> Agent.t) =
          fun (x577 : t) ->
            Agent.t_of_js (Ojs.get_prop_ascii (t_to_js x577) "_defaultAgent")
        let (set_default_agent : t -> Agent.t -> unit) =
          fun (x578 : t) ->
            fun (x579 : Agent.t) ->
              Ojs.set_prop_ascii (t_to_js x578) "_defaultAgent"
                (Agent.t_to_js x579)
        let (get_timeout : t -> int) =
          fun (x580 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x580) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x581 : t) ->
            fun (x582 : int) ->
              Ojs.set_prop_ascii (t_to_js x581) "timeout"
                (Ojs.int_to_js x582)
        let (get_set_host : t -> bool) =
          fun (x583 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x583) "setHost")
        let (set_set_host : t -> bool -> unit) =
          fun (x584 : t) ->
            fun (x585 : bool) ->
              Ojs.set_prop_ascii (t_to_js x584) "setHost"
                (Ojs.bool_to_js x585)
        let (create_connection :
          t ->
            options:t ->
              oncreate:(err:Error.t -> socket:Node_net.Net.Socket.t -> unit)
                -> Node_net.Net.Socket.t)
          =
          fun (x590 : t) ->
            fun ~options:(x586 : t) ->
              fun
                ~oncreate:(x587 :
                            err:Error.t ->
                              socket:Node_net.Net.Socket.t -> unit)
                ->
                Node_net.Net.Socket.t_of_js
                  (Ojs.call (t_to_js x590) "createConnection"
                     [|(t_to_js x586);(Ojs.fun_to_js 2
                                         (fun (x588 : Ojs.t) ->
                                            fun (x589 : Ojs.t) ->
                                              x587 ~err:(Error.t_of_js x588)
                                                ~socket:(Node_net.Net.Socket.t_of_js
                                                           x589)))|])
      end
    let (methods : string list) =
      Ojs.list_of_js Ojs.string_of_js
        (Ojs.get_prop_ascii Import.http "METHODS")
    let (status_codes : AnonymousInterface0.t) =
      AnonymousInterface0.t_of_js
        (Ojs.get_prop_ascii Import.http "STATUS_CODES")
    let (create_server :
      ?request_listener:RequestListener.t -> unit -> Server.t) =
      fun ?request_listener:(x592 : RequestListener.t option) ->
        fun () ->
          Server.t_of_js
            (let x595 = Import.http in
             Ojs.call (Ojs.get_prop_ascii x595 "createServer") "apply"
               [|x595;((let x593 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x592 with
                         | Some x594 ->
                             ignore
                               (Ojs.call x593 "push"
                                  [|(RequestListener.t_to_js x594)|])
                         | None -> ());
                        x593))|])
    let (create_server :
      options:ServerOptions.t ->
        ?request_listener:RequestListener.t -> unit -> Server.t)
      =
      fun ~options:(x596 : ServerOptions.t) ->
        fun ?request_listener:(x597 : RequestListener.t option) ->
          fun () ->
            Server.t_of_js
              (let x600 = Import.http in
               Ojs.call (Ojs.get_prop_ascii x600 "createServer") "apply"
                 [|x600;((let x598 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x598 "push"
                               [|(ServerOptions.t_to_js x596)|]);
                          (match x597 with
                           | Some x599 ->
                               ignore
                                 (Ojs.call x598 "push"
                                    [|(RequestListener.t_to_js x599)|])
                           | None -> ());
                          x598))|])
    module RequestOptions =
      struct include struct include ClientRequestArgs end end
    module ClientRequest =
      struct
        include struct include OutgoingMessage end
        let (get_aborted : t -> bool) =
          fun (x601 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x601) "aborted")
        let (set_aborted : t -> bool -> unit) =
          fun (x602 : t) ->
            fun (x603 : bool) ->
              Ojs.set_prop_ascii (t_to_js x602) "aborted"
                (Ojs.bool_to_js x603)
        let (get_host : t -> string) =
          fun (x604 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x604) "host")
        let (set_host : t -> string -> unit) =
          fun (x605 : t) ->
            fun (x606 : string) ->
              Ojs.set_prop_ascii (t_to_js x605) "host"
                (Ojs.string_to_js x606)
        let (get_protocol : t -> string) =
          fun (x607 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x607) "protocol")
        let (set_protocol : t -> string -> unit) =
          fun (x608 : t) ->
            fun (x609 : string) ->
              Ojs.set_prop_ascii (t_to_js x608) "protocol"
                (Ojs.string_to_js x609)
        let (create :
          url:(ClientRequestArgs.t, Node_url.Url.Url.t) union2 or_string ->
            ?cb:(res:IncomingMessage.t -> unit) -> unit -> t)
          =
          fun
            ~url:(x610 :
                   (ClientRequestArgs.t, Node_url.Url.Url.t) union2 or_string)
            ->
            fun ?cb:(x611 : (res:IncomingMessage.t -> unit) option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Import.http "ClientRequest")
                     (let x612 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x612 "push"
                           [|(or_string_to_js
                                (fun
                                   (x615 :
                                     (ClientRequestArgs.t,
                                       Node_url.Url.Url.t) union2)
                                   ->
                                   union2_to_js ClientRequestArgs.t_to_js
                                     Node_url.Url.Url.t_to_js x615) x610)|]);
                      (match x611 with
                       | Some x613 ->
                           ignore
                             (Ojs.call x612 "push"
                                [|(Ojs.fun_to_js 1
                                     (fun (x614 : Ojs.t) ->
                                        x613
                                          ~res:(IncomingMessage.t_of_js x614)))|])
                       | None -> ());
                      x612))
        let (get_method : t -> string) =
          fun (x618 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x618) "method")
        let (set_method : t -> string -> unit) =
          fun (x619 : t) ->
            fun (x620 : string) ->
              Ojs.set_prop_ascii (t_to_js x619) "method"
                (Ojs.string_to_js x620)
        let (get_path : t -> string) =
          fun (x621 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x621) "path")
        let (set_path : t -> string -> unit) =
          fun (x622 : t) ->
            fun (x623 : string) ->
              Ojs.set_prop_ascii (t_to_js x622) "path"
                (Ojs.string_to_js x623)
        let (abort : t -> unit) =
          fun (x624 : t) -> ignore (Ojs.call (t_to_js x624) "abort" [||])
        let (on_socket : t -> socket:Node_net.Net.Socket.t -> unit) =
          fun (x626 : t) ->
            fun ~socket:(x625 : Node_net.Net.Socket.t) ->
              ignore
                (Ojs.call (t_to_js x626) "onSocket"
                   [|(Node_net.Net.Socket.t_to_js x625)|])
        let (set_timeout :
          t -> timeout:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x631 : t) ->
            fun ~timeout:(x627 : int) ->
              fun ?callback:(x628 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x632 = t_to_js x631 in
                     Ojs.call (Ojs.get_prop_ascii x632 "setTimeout") "apply"
                       [|x632;((let x629 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x629 "push"
                                     [|(Ojs.int_to_js x627)|]);
                                (match x628 with
                                 | Some x630 ->
                                     ignore
                                       (Ojs.call x629 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x630 ()))|])
                                 | None -> ());
                                x629))|])
        let (set_no_delay : t -> ?no_delay:bool -> unit -> unit) =
          fun (x636 : t) ->
            fun ?no_delay:(x633 : bool option) ->
              fun () ->
                ignore
                  (let x637 = t_to_js x636 in
                   Ojs.call (Ojs.get_prop_ascii x637 "setNoDelay") "apply"
                     [|x637;((let x634 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x633 with
                               | Some x635 ->
                                   ignore
                                     (Ojs.call x634 "push"
                                        [|(Ojs.bool_to_js x635)|])
                               | None -> ());
                              x634))|])
        let (set_socket_keep_alive :
          t -> ?enable:bool -> ?initial_delay:int -> unit -> unit) =
          fun (x643 : t) ->
            fun ?enable:(x638 : bool option) ->
              fun ?initial_delay:(x639 : int option) ->
                fun () ->
                  ignore
                    (let x644 = t_to_js x643 in
                     Ojs.call (Ojs.get_prop_ascii x644 "setSocketKeepAlive")
                       "apply"
                       [|x644;((let x640 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x638 with
                                 | Some x642 ->
                                     ignore
                                       (Ojs.call x640 "push"
                                          [|(Ojs.bool_to_js x642)|])
                                 | None -> ());
                                (match x639 with
                                 | Some x641 ->
                                     ignore
                                       (Ojs.call x640 "push"
                                          [|(Ojs.int_to_js x641)|])
                                 | None -> ());
                                x640))|])
        module AbortListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x646 : Ojs.t) -> fun () -> ignore (Ojs.apply x646 [||])
            and t_to_js : t -> Ojs.t =
              fun (x645 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x645 ())
          end
        module ConnectListener =
          struct
            type t =
              response:IncomingMessage.t ->
                socket:Node_net.Net.Socket.t -> head:Buffer.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x651 : Ojs.t) ->
                fun ~response:(x652 : IncomingMessage.t) ->
                  fun ~socket:(x653 : Node_net.Net.Socket.t) ->
                    fun ~head:(x654 : Buffer.t) ->
                      ignore
                        (Ojs.apply x651
                           [|(IncomingMessage.t_to_js x652);(Node_net.Net.Socket.t_to_js
                                                               x653);(
                             Buffer.t_to_js x654)|])
            and t_to_js : t -> Ojs.t =
              fun
                (x647 :
                  response:IncomingMessage.t ->
                    socket:Node_net.Net.Socket.t -> head:Buffer.t -> unit)
                ->
                Ojs.fun_to_js 3
                  (fun (x648 : Ojs.t) ->
                     fun (x649 : Ojs.t) ->
                       fun (x650 : Ojs.t) ->
                         x647 ~response:(IncomingMessage.t_of_js x648)
                           ~socket:(Node_net.Net.Socket.t_of_js x649)
                           ~head:(Buffer.t_of_js x650))
          end
        module ContinueListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x656 : Ojs.t) -> fun () -> ignore (Ojs.apply x656 [||])
            and t_to_js : t -> Ojs.t =
              fun (x655 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x655 ())
          end
        module InformationListener =
          struct
            type t = info:InformationEvent.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x659 : Ojs.t) ->
                fun ~info:(x660 : InformationEvent.t) ->
                  ignore (Ojs.apply x659 [|(InformationEvent.t_to_js x660)|])
            and t_to_js : t -> Ojs.t =
              fun (x657 : info:InformationEvent.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x658 : Ojs.t) ->
                     x657 ~info:(InformationEvent.t_of_js x658))
          end
        module ResponseListener =
          struct
            type t = response:IncomingMessage.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x663 : Ojs.t) ->
                fun ~response:(x664 : IncomingMessage.t) ->
                  ignore (Ojs.apply x663 [|(IncomingMessage.t_to_js x664)|])
            and t_to_js : t -> Ojs.t =
              fun (x661 : response:IncomingMessage.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x662 : Ojs.t) ->
                     x661 ~response:(IncomingMessage.t_of_js x662))
          end
        module SocketListener =
          struct
            type t = socket:Node_net.Net.Socket.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x667 : Ojs.t) ->
                fun ~socket:(x668 : Node_net.Net.Socket.t) ->
                  ignore
                    (Ojs.apply x667 [|(Node_net.Net.Socket.t_to_js x668)|])
            and t_to_js : t -> Ojs.t =
              fun (x665 : socket:Node_net.Net.Socket.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x666 : Ojs.t) ->
                     x665 ~socket:(Node_net.Net.Socket.t_of_js x666))
          end
        module TimeoutListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x670 : Ojs.t) -> fun () -> ignore (Ojs.apply x670 [||])
            and t_to_js : t -> Ojs.t =
              fun (x669 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x669 ())
          end
        module UpgradeListener =
          struct
            type t =
              response:IncomingMessage.t ->
                socket:Node_net.Net.Socket.t -> head:Buffer.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x675 : Ojs.t) ->
                fun ~response:(x676 : IncomingMessage.t) ->
                  fun ~socket:(x677 : Node_net.Net.Socket.t) ->
                    fun ~head:(x678 : Buffer.t) ->
                      ignore
                        (Ojs.apply x675
                           [|(IncomingMessage.t_to_js x676);(Node_net.Net.Socket.t_to_js
                                                               x677);(
                             Buffer.t_to_js x678)|])
            and t_to_js : t -> Ojs.t =
              fun
                (x671 :
                  response:IncomingMessage.t ->
                    socket:Node_net.Net.Socket.t -> head:Buffer.t -> unit)
                ->
                Ojs.fun_to_js 3
                  (fun (x672 : Ojs.t) ->
                     fun (x673 : Ojs.t) ->
                       fun (x674 : Ojs.t) ->
                         x671 ~response:(IncomingMessage.t_of_js x672)
                           ~socket:(Node_net.Net.Socket.t_of_js x673)
                           ~head:(Buffer.t_of_js x674))
          end
        module CloseListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x680 : Ojs.t) -> fun () -> ignore (Ojs.apply x680 [||])
            and t_to_js : t -> Ojs.t =
              fun (x679 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x679 ())
          end
        module DrainListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x682 : Ojs.t) -> fun () -> ignore (Ojs.apply x682 [||])
            and t_to_js : t -> Ojs.t =
              fun (x681 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x681 ())
          end
        module ErrorListener =
          struct
            type t = err:Error.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x685 : Ojs.t) ->
                fun ~err:(x686 : Error.t) ->
                  ignore (Ojs.apply x685 [|(Error.t_to_js x686)|])
            and t_to_js : t -> Ojs.t =
              fun (x683 : err:Error.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x684 : Ojs.t) -> x683 ~err:(Error.t_of_js x684))
          end
        module FinishListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x688 : Ojs.t) -> fun () -> ignore (Ojs.apply x688 [||])
            and t_to_js : t -> Ojs.t =
              fun (x687 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x687 ())
          end
        module PipeListener =
          struct
            type t = src:Stream.Readable.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x691 : Ojs.t) ->
                fun ~src:(x692 : Stream.Readable.t) ->
                  ignore (Ojs.apply x691 [|(Stream.Readable.t_to_js x692)|])
            and t_to_js : t -> Ojs.t =
              fun (x689 : src:Stream.Readable.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x690 : Ojs.t) ->
                     x689 ~src:(Stream.Readable.t_of_js x690))
          end
        module UnpipeListener =
          struct
            type t = src:Stream.Readable.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x695 : Ojs.t) ->
                fun ~src:(x696 : Stream.Readable.t) ->
                  ignore (Ojs.apply x695 [|(Stream.Readable.t_to_js x696)|])
            and t_to_js : t -> Ojs.t =
              fun (x693 : src:Stream.Readable.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x694 : Ojs.t) ->
                     x693 ~src:(Stream.Readable.t_of_js x694))
          end
        type listener =
          [ `Abort of AbortListener.t  | `Connect of ConnectListener.t 
          | `Continue of ContinueListener.t 
          | `Information of InformationListener.t 
          | `Response of ResponseListener.t  | `Socket of SocketListener.t 
          | `Timeout of TimeoutListener.t  | `Upgrade of UpgradeListener.t 
          | `Close of CloseListener.t  | `Drain of DrainListener.t 
          | `Error of ErrorListener.t  | `Finish of FinishListener.t 
          | `Pipe of PipeListener.t  | `Unpipe of UnpipeListener.t ]
        let rec listener_to_js : listener -> Ojs.t =
          fun
            (x697 :
              [ `Abort of AbortListener.t  | `Connect of ConnectListener.t 
              | `Continue of ContinueListener.t 
              | `Information of InformationListener.t 
              | `Response of ResponseListener.t 
              | `Socket of SocketListener.t  | `Timeout of TimeoutListener.t 
              | `Upgrade of UpgradeListener.t  | `Close of CloseListener.t 
              | `Drain of DrainListener.t  | `Error of ErrorListener.t 
              | `Finish of FinishListener.t  | `Pipe of PipeListener.t 
              | `Unpipe of UnpipeListener.t ])
            ->
            match x697 with
            | `Abort x698 -> AbortListener.t_to_js x698
            | `Connect x699 -> ConnectListener.t_to_js x699
            | `Continue x700 -> ContinueListener.t_to_js x700
            | `Information x701 -> InformationListener.t_to_js x701
            | `Response x702 -> ResponseListener.t_to_js x702
            | `Socket x703 -> SocketListener.t_to_js x703
            | `Timeout x704 -> TimeoutListener.t_to_js x704
            | `Upgrade x705 -> UpgradeListener.t_to_js x705
            | `Close x706 -> CloseListener.t_to_js x706
            | `Drain x707 -> DrainListener.t_to_js x707
            | `Error x708 -> ErrorListener.t_to_js x708
            | `Finish x709 -> FinishListener.t_to_js x709
            | `Pipe x710 -> PipeListener.t_to_js x710
            | `Unpipe x711 -> UnpipeListener.t_to_js x711
        let (on : t -> string -> Ojs.t -> unit) =
          fun (x716 : t) ->
            fun (x714 : string) ->
              fun (x715 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x716) "on"
                     [|(Ojs.string_to_js x714);x715|])
        let (add_listener : t -> string -> Ojs.t -> unit) =
          fun (x719 : t) ->
            fun (x717 : string) ->
              fun (x718 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x719) "addListener"
                     [|(Ojs.string_to_js x717);x718|])
        let (once : t -> string -> Ojs.t -> unit) =
          fun (x722 : t) ->
            fun (x720 : string) ->
              fun (x721 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x722) "once"
                     [|(Ojs.string_to_js x720);x721|])
        let (prepend_listener : t -> string -> Ojs.t -> unit) =
          fun (x725 : t) ->
            fun (x723 : string) ->
              fun (x724 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x725) "prependListener"
                     [|(Ojs.string_to_js x723);x724|])
        let (prepend_once_listener : t -> string -> Ojs.t -> unit) =
          fun (x728 : t) ->
            fun (x726 : string) ->
              fun (x727 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x728) "prependOnceListener"
                     [|(Ojs.string_to_js x726);x727|])
        let with_listener_fn fn t =
          function
          | `Abort f -> (fn t "abort") @@ (AbortListener.t_to_js f)
          | `Connect f -> (fn t "connect") @@ (ConnectListener.t_to_js f)
          | `Continue f -> (fn t "continue") @@ (ContinueListener.t_to_js f)
          | `Information f ->
              (fn t "information") @@ (InformationListener.t_to_js f)
          | `Response f -> (fn t "response") @@ (ResponseListener.t_to_js f)
          | `Socket f -> (fn t "socket") @@ (SocketListener.t_to_js f)
          | `Timeout f -> (fn t "timeout") @@ (TimeoutListener.t_to_js f)
          | `Upgrade f -> (fn t "upgrade") @@ (UpgradeListener.t_to_js f)
          | `Close f -> (fn t "close") @@ (CloseListener.t_to_js f)
          | `Drain f -> (fn t "drain") @@ (DrainListener.t_to_js f)
          | `Error f -> (fn t "error") @@ (ErrorListener.t_to_js f)
          | `Finish f -> (fn t "finish") @@ (FinishListener.t_to_js f)
          | `Pipe f -> (fn t "pipe") @@ (PipeListener.t_to_js f)
          | `Unpipe f -> (fn t "unpipe") @@ (UnpipeListener.t_to_js f)
        let on = with_listener_fn on
        let add_listener = with_listener_fn add_listener
        let once = with_listener_fn once
        let prepend_listener = with_listener_fn prepend_listener
        let prepend_once_listener = with_listener_fn prepend_once_listener
      end
    let (request :
      options:(RequestOptions.t, Node_url.Url.Url.t) union2 or_string ->
        ?callback:(res:IncomingMessage.t -> unit) -> unit -> ClientRequest.t)
      =
      fun
        ~options:(x743 :
                   (RequestOptions.t, Node_url.Url.Url.t) union2 or_string)
        ->
        fun ?callback:(x744 : (res:IncomingMessage.t -> unit) option) ->
          fun () ->
            ClientRequest.t_of_js
              (let x751 = Import.http in
               Ojs.call (Ojs.get_prop_ascii x751 "request") "apply"
                 [|x751;((let x745 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x745 "push"
                               [|(or_string_to_js
                                    (fun
                                       (x748 :
                                         (RequestOptions.t,
                                           Node_url.Url.Url.t) union2)
                                       ->
                                       union2_to_js RequestOptions.t_to_js
                                         Node_url.Url.Url.t_to_js x748) x743)|]);
                          (match x744 with
                           | Some x746 ->
                               ignore
                                 (Ojs.call x745 "push"
                                    [|(Ojs.fun_to_js 1
                                         (fun (x747 : Ojs.t) ->
                                            x746
                                              ~res:(IncomingMessage.t_of_js
                                                      x747)))|])
                           | None -> ());
                          x745))|])
    let (request :
      url:Node_url.Url.Url.t or_string ->
        options:RequestOptions.t ->
          ?callback:(res:IncomingMessage.t -> unit) ->
            unit -> ClientRequest.t)
      =
      fun ~url:(x752 : Node_url.Url.Url.t or_string) ->
        fun ~options:(x753 : RequestOptions.t) ->
          fun ?callback:(x754 : (res:IncomingMessage.t -> unit) option) ->
            fun () ->
              ClientRequest.t_of_js
                (let x759 = Import.http in
                 Ojs.call (Ojs.get_prop_ascii x759 "request") "apply"
                   [|x759;((let x755 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x755 "push"
                                 [|(or_string_to_js Node_url.Url.Url.t_to_js
                                      x752)|]);
                            ignore
                              (Ojs.call x755 "push"
                                 [|(RequestOptions.t_to_js x753)|]);
                            (match x754 with
                             | Some x756 ->
                                 ignore
                                   (Ojs.call x755 "push"
                                      [|(Ojs.fun_to_js 1
                                           (fun (x757 : Ojs.t) ->
                                              x756
                                                ~res:(IncomingMessage.t_of_js
                                                        x757)))|])
                             | None -> ());
                            x755))|])
    let (get_ :
      options:(RequestOptions.t, Node_url.Url.Url.t) union2 or_string ->
        ?callback:(res:IncomingMessage.t -> unit) -> unit -> ClientRequest.t)
      =
      fun
        ~options:(x760 :
                   (RequestOptions.t, Node_url.Url.Url.t) union2 or_string)
        ->
        fun ?callback:(x761 : (res:IncomingMessage.t -> unit) option) ->
          fun () ->
            ClientRequest.t_of_js
              (let x768 = Import.http in
               Ojs.call (Ojs.get_prop_ascii x768 "get") "apply"
                 [|x768;((let x762 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x762 "push"
                               [|(or_string_to_js
                                    (fun
                                       (x765 :
                                         (RequestOptions.t,
                                           Node_url.Url.Url.t) union2)
                                       ->
                                       union2_to_js RequestOptions.t_to_js
                                         Node_url.Url.Url.t_to_js x765) x760)|]);
                          (match x761 with
                           | Some x763 ->
                               ignore
                                 (Ojs.call x762 "push"
                                    [|(Ojs.fun_to_js 1
                                         (fun (x764 : Ojs.t) ->
                                            x763
                                              ~res:(IncomingMessage.t_of_js
                                                      x764)))|])
                           | None -> ());
                          x762))|])
    let (get_ :
      url:Node_url.Url.Url.t or_string ->
        options:RequestOptions.t ->
          ?callback:(res:IncomingMessage.t -> unit) ->
            unit -> ClientRequest.t)
      =
      fun ~url:(x769 : Node_url.Url.Url.t or_string) ->
        fun ~options:(x770 : RequestOptions.t) ->
          fun ?callback:(x771 : (res:IncomingMessage.t -> unit) option) ->
            fun () ->
              ClientRequest.t_of_js
                (let x776 = Import.http in
                 Ojs.call (Ojs.get_prop_ascii x776 "get") "apply"
                   [|x776;((let x772 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x772 "push"
                                 [|(or_string_to_js Node_url.Url.Url.t_to_js
                                      x769)|]);
                            ignore
                              (Ojs.call x772 "push"
                                 [|(RequestOptions.t_to_js x770)|]);
                            (match x771 with
                             | Some x773 ->
                                 ignore
                                   (Ojs.call x772 "push"
                                      [|(Ojs.fun_to_js 1
                                           (fun (x774 : Ojs.t) ->
                                              x773
                                                ~res:(IncomingMessage.t_of_js
                                                        x774)))|])
                             | None -> ());
                            x772))|])
    let (global_agent : Agent.t) =
      Agent.t_of_js (Ojs.get_prop_ascii Import.http "globalAgent")
    let (max_header_size : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.http "maxHeaderSize")
  end
