[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get : t -> int -> string or_undefined) =
      fun (x3 : t) ->
        fun (x4 : int) ->
          or_undefined_of_js Ojs.string_of_js (Ojs.array_get (t_to_js x3) x4)
    let (set : t -> int -> string or_undefined -> unit) =
      fun (x6 : t) ->
        fun (x7 : int) ->
          fun (x8 : string or_undefined) ->
            Ojs.array_set (t_to_js x6) x7
              (or_undefined_to_js Ojs.string_to_js x8)
    let (get' : t -> string -> string or_undefined) =
      fun (x10 : t) ->
        fun (x11 : string) ->
          or_undefined_of_js Ojs.string_of_js
            (Ojs.get_prop (t_to_js x10) (Ojs.string_to_js x11))
    let (set' : t -> string -> string or_undefined -> unit) =
      fun (x13 : t) ->
        fun (x14 : string) ->
          fun (x15 : string or_undefined) ->
            Ojs.set_prop (t_to_js x13) (Ojs.string_to_js x14)
              (or_undefined_to_js Ojs.string_to_js x15)
  end
module Http =
  struct
    open Node_stream
    module IncomingHttpHeaders =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x18 : Ojs.t) -> x18
        and t_to_js : t -> Ojs.t = fun (x17 : Ojs.t) -> x17
        let (get_accept : t -> string) =
          fun (x19 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x19) "accept")
        let (set_accept : t -> string -> unit) =
          fun (x20 : t) ->
            fun (x21 : string) ->
              Ojs.set_prop_ascii (t_to_js x20) "accept"
                (Ojs.string_to_js x21)
        let (get_accept_language : t -> string) =
          fun (x22 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x22) "accept-language")
        let (set_accept_language : t -> string -> unit) =
          fun (x23 : t) ->
            fun (x24 : string) ->
              Ojs.set_prop_ascii (t_to_js x23) "accept-language"
                (Ojs.string_to_js x24)
        let (get_accept_patch : t -> string) =
          fun (x25 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x25) "accept-patch")
        let (set_accept_patch : t -> string -> unit) =
          fun (x26 : t) ->
            fun (x27 : string) ->
              Ojs.set_prop_ascii (t_to_js x26) "accept-patch"
                (Ojs.string_to_js x27)
        let (get_accept_ranges : t -> string) =
          fun (x28 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x28) "accept-ranges")
        let (set_accept_ranges : t -> string -> unit) =
          fun (x29 : t) ->
            fun (x30 : string) ->
              Ojs.set_prop_ascii (t_to_js x29) "accept-ranges"
                (Ojs.string_to_js x30)
        let (get_access_control_allow_credentials : t -> string) =
          fun (x31 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x31)
                 "access-control-allow-credentials")
        let (set_access_control_allow_credentials : t -> string -> unit) =
          fun (x32 : t) ->
            fun (x33 : string) ->
              Ojs.set_prop_ascii (t_to_js x32)
                "access-control-allow-credentials" (Ojs.string_to_js x33)
        let (get_access_control_allow_headers : t -> string) =
          fun (x34 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x34)
                 "access-control-allow-headers")
        let (set_access_control_allow_headers : t -> string -> unit) =
          fun (x35 : t) ->
            fun (x36 : string) ->
              Ojs.set_prop_ascii (t_to_js x35) "access-control-allow-headers"
                (Ojs.string_to_js x36)
        let (get_access_control_allow_methods : t -> string) =
          fun (x37 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x37)
                 "access-control-allow-methods")
        let (set_access_control_allow_methods : t -> string -> unit) =
          fun (x38 : t) ->
            fun (x39 : string) ->
              Ojs.set_prop_ascii (t_to_js x38) "access-control-allow-methods"
                (Ojs.string_to_js x39)
        let (get_access_control_allow_origin : t -> string) =
          fun (x40 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x40) "access-control-allow-origin")
        let (set_access_control_allow_origin : t -> string -> unit) =
          fun (x41 : t) ->
            fun (x42 : string) ->
              Ojs.set_prop_ascii (t_to_js x41) "access-control-allow-origin"
                (Ojs.string_to_js x42)
        let (get_access_control_expose_headers : t -> string) =
          fun (x43 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x43)
                 "access-control-expose-headers")
        let (set_access_control_expose_headers : t -> string -> unit) =
          fun (x44 : t) ->
            fun (x45 : string) ->
              Ojs.set_prop_ascii (t_to_js x44)
                "access-control-expose-headers" (Ojs.string_to_js x45)
        let (get_access_control_max_age : t -> string) =
          fun (x46 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x46) "access-control-max-age")
        let (set_access_control_max_age : t -> string -> unit) =
          fun (x47 : t) ->
            fun (x48 : string) ->
              Ojs.set_prop_ascii (t_to_js x47) "access-control-max-age"
                (Ojs.string_to_js x48)
        let (get_access_control_request_headers : t -> string) =
          fun (x49 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x49)
                 "access-control-request-headers")
        let (set_access_control_request_headers : t -> string -> unit) =
          fun (x50 : t) ->
            fun (x51 : string) ->
              Ojs.set_prop_ascii (t_to_js x50)
                "access-control-request-headers" (Ojs.string_to_js x51)
        let (get_access_control_request_method : t -> string) =
          fun (x52 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x52)
                 "access-control-request-method")
        let (set_access_control_request_method : t -> string -> unit) =
          fun (x53 : t) ->
            fun (x54 : string) ->
              Ojs.set_prop_ascii (t_to_js x53)
                "access-control-request-method" (Ojs.string_to_js x54)
        let (get_age : t -> string) =
          fun (x55 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x55) "age")
        let (set_age : t -> string -> unit) =
          fun (x56 : t) ->
            fun (x57 : string) ->
              Ojs.set_prop_ascii (t_to_js x56) "age" (Ojs.string_to_js x57)
        let (get_allow : t -> string) =
          fun (x58 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x58) "allow")
        let (set_allow : t -> string -> unit) =
          fun (x59 : t) ->
            fun (x60 : string) ->
              Ojs.set_prop_ascii (t_to_js x59) "allow" (Ojs.string_to_js x60)
        let (get_alt_svc : t -> string) =
          fun (x61 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x61) "alt-svc")
        let (set_alt_svc : t -> string -> unit) =
          fun (x62 : t) ->
            fun (x63 : string) ->
              Ojs.set_prop_ascii (t_to_js x62) "alt-svc"
                (Ojs.string_to_js x63)
        let (get_authorization : t -> string) =
          fun (x64 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x64) "authorization")
        let (set_authorization : t -> string -> unit) =
          fun (x65 : t) ->
            fun (x66 : string) ->
              Ojs.set_prop_ascii (t_to_js x65) "authorization"
                (Ojs.string_to_js x66)
        let (get_cache_control : t -> string) =
          fun (x67 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x67) "cache-control")
        let (set_cache_control : t -> string -> unit) =
          fun (x68 : t) ->
            fun (x69 : string) ->
              Ojs.set_prop_ascii (t_to_js x68) "cache-control"
                (Ojs.string_to_js x69)
        let (get_connection : t -> string) =
          fun (x70 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x70) "connection")
        let (set_connection : t -> string -> unit) =
          fun (x71 : t) ->
            fun (x72 : string) ->
              Ojs.set_prop_ascii (t_to_js x71) "connection"
                (Ojs.string_to_js x72)
        let (get_content_disposition : t -> string) =
          fun (x73 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x73) "content-disposition")
        let (set_content_disposition : t -> string -> unit) =
          fun (x74 : t) ->
            fun (x75 : string) ->
              Ojs.set_prop_ascii (t_to_js x74) "content-disposition"
                (Ojs.string_to_js x75)
        let (get_content_encoding : t -> string) =
          fun (x76 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x76) "content-encoding")
        let (set_content_encoding : t -> string -> unit) =
          fun (x77 : t) ->
            fun (x78 : string) ->
              Ojs.set_prop_ascii (t_to_js x77) "content-encoding"
                (Ojs.string_to_js x78)
        let (get_content_language : t -> string) =
          fun (x79 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x79) "content-language")
        let (set_content_language : t -> string -> unit) =
          fun (x80 : t) ->
            fun (x81 : string) ->
              Ojs.set_prop_ascii (t_to_js x80) "content-language"
                (Ojs.string_to_js x81)
        let (get_content_length : t -> string) =
          fun (x82 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x82) "content-length")
        let (set_content_length : t -> string -> unit) =
          fun (x83 : t) ->
            fun (x84 : string) ->
              Ojs.set_prop_ascii (t_to_js x83) "content-length"
                (Ojs.string_to_js x84)
        let (get_content_location : t -> string) =
          fun (x85 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x85) "content-location")
        let (set_content_location : t -> string -> unit) =
          fun (x86 : t) ->
            fun (x87 : string) ->
              Ojs.set_prop_ascii (t_to_js x86) "content-location"
                (Ojs.string_to_js x87)
        let (get_content_range : t -> string) =
          fun (x88 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x88) "content-range")
        let (set_content_range : t -> string -> unit) =
          fun (x89 : t) ->
            fun (x90 : string) ->
              Ojs.set_prop_ascii (t_to_js x89) "content-range"
                (Ojs.string_to_js x90)
        let (get_content_type : t -> string) =
          fun (x91 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x91) "content-type")
        let (set_content_type : t -> string -> unit) =
          fun (x92 : t) ->
            fun (x93 : string) ->
              Ojs.set_prop_ascii (t_to_js x92) "content-type"
                (Ojs.string_to_js x93)
        let (get_cookie : t -> string) =
          fun (x94 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x94) "cookie")
        let (set_cookie : t -> string -> unit) =
          fun (x95 : t) ->
            fun (x96 : string) ->
              Ojs.set_prop_ascii (t_to_js x95) "cookie"
                (Ojs.string_to_js x96)
        let (get_date : t -> string) =
          fun (x97 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x97) "date")
        let (set_date : t -> string -> unit) =
          fun (x98 : t) ->
            fun (x99 : string) ->
              Ojs.set_prop_ascii (t_to_js x98) "date" (Ojs.string_to_js x99)
        let (get_expect : t -> string) =
          fun (x100 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x100) "expect")
        let (set_expect : t -> string -> unit) =
          fun (x101 : t) ->
            fun (x102 : string) ->
              Ojs.set_prop_ascii (t_to_js x101) "expect"
                (Ojs.string_to_js x102)
        let (get_expires : t -> string) =
          fun (x103 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x103) "expires")
        let (set_expires : t -> string -> unit) =
          fun (x104 : t) ->
            fun (x105 : string) ->
              Ojs.set_prop_ascii (t_to_js x104) "expires"
                (Ojs.string_to_js x105)
        let (get_forwarded : t -> string) =
          fun (x106 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x106) "forwarded")
        let (set_forwarded : t -> string -> unit) =
          fun (x107 : t) ->
            fun (x108 : string) ->
              Ojs.set_prop_ascii (t_to_js x107) "forwarded"
                (Ojs.string_to_js x108)
        let (get_from : t -> string) =
          fun (x109 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x109) "from")
        let (set_from : t -> string -> unit) =
          fun (x110 : t) ->
            fun (x111 : string) ->
              Ojs.set_prop_ascii (t_to_js x110) "from"
                (Ojs.string_to_js x111)
        let (get_host : t -> string) =
          fun (x112 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x112) "host")
        let (set_host : t -> string -> unit) =
          fun (x113 : t) ->
            fun (x114 : string) ->
              Ojs.set_prop_ascii (t_to_js x113) "host"
                (Ojs.string_to_js x114)
        let (get_if_match : t -> string) =
          fun (x115 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x115) "if-match")
        let (set_if_match : t -> string -> unit) =
          fun (x116 : t) ->
            fun (x117 : string) ->
              Ojs.set_prop_ascii (t_to_js x116) "if-match"
                (Ojs.string_to_js x117)
        let (get_if_modified_since : t -> string) =
          fun (x118 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x118) "if-modified-since")
        let (set_if_modified_since : t -> string -> unit) =
          fun (x119 : t) ->
            fun (x120 : string) ->
              Ojs.set_prop_ascii (t_to_js x119) "if-modified-since"
                (Ojs.string_to_js x120)
        let (get_if_none_match : t -> string) =
          fun (x121 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x121) "if-none-match")
        let (set_if_none_match : t -> string -> unit) =
          fun (x122 : t) ->
            fun (x123 : string) ->
              Ojs.set_prop_ascii (t_to_js x122) "if-none-match"
                (Ojs.string_to_js x123)
        let (get_if_unmodified_since : t -> string) =
          fun (x124 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x124) "if-unmodified-since")
        let (set_if_unmodified_since : t -> string -> unit) =
          fun (x125 : t) ->
            fun (x126 : string) ->
              Ojs.set_prop_ascii (t_to_js x125) "if-unmodified-since"
                (Ojs.string_to_js x126)
        let (get_last_modified : t -> string) =
          fun (x127 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x127) "last-modified")
        let (set_last_modified : t -> string -> unit) =
          fun (x128 : t) ->
            fun (x129 : string) ->
              Ojs.set_prop_ascii (t_to_js x128) "last-modified"
                (Ojs.string_to_js x129)
        let (get_location : t -> string) =
          fun (x130 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x130) "location")
        let (set_location : t -> string -> unit) =
          fun (x131 : t) ->
            fun (x132 : string) ->
              Ojs.set_prop_ascii (t_to_js x131) "location"
                (Ojs.string_to_js x132)
        let (get_origin : t -> string) =
          fun (x133 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x133) "origin")
        let (set_origin : t -> string -> unit) =
          fun (x134 : t) ->
            fun (x135 : string) ->
              Ojs.set_prop_ascii (t_to_js x134) "origin"
                (Ojs.string_to_js x135)
        let (get_pragma : t -> string) =
          fun (x136 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x136) "pragma")
        let (set_pragma : t -> string -> unit) =
          fun (x137 : t) ->
            fun (x138 : string) ->
              Ojs.set_prop_ascii (t_to_js x137) "pragma"
                (Ojs.string_to_js x138)
        let (get_proxy_authenticate : t -> string) =
          fun (x139 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x139) "proxy-authenticate")
        let (set_proxy_authenticate : t -> string -> unit) =
          fun (x140 : t) ->
            fun (x141 : string) ->
              Ojs.set_prop_ascii (t_to_js x140) "proxy-authenticate"
                (Ojs.string_to_js x141)
        let (get_proxy_authorization : t -> string) =
          fun (x142 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x142) "proxy-authorization")
        let (set_proxy_authorization : t -> string -> unit) =
          fun (x143 : t) ->
            fun (x144 : string) ->
              Ojs.set_prop_ascii (t_to_js x143) "proxy-authorization"
                (Ojs.string_to_js x144)
        let (get_public_key_pins : t -> string) =
          fun (x145 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x145) "public-key-pins")
        let (set_public_key_pins : t -> string -> unit) =
          fun (x146 : t) ->
            fun (x147 : string) ->
              Ojs.set_prop_ascii (t_to_js x146) "public-key-pins"
                (Ojs.string_to_js x147)
        let (get_range : t -> string) =
          fun (x148 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x148) "range")
        let (set_range : t -> string -> unit) =
          fun (x149 : t) ->
            fun (x150 : string) ->
              Ojs.set_prop_ascii (t_to_js x149) "range"
                (Ojs.string_to_js x150)
        let (get_referer : t -> string) =
          fun (x151 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x151) "referer")
        let (set_referer : t -> string -> unit) =
          fun (x152 : t) ->
            fun (x153 : string) ->
              Ojs.set_prop_ascii (t_to_js x152) "referer"
                (Ojs.string_to_js x153)
        let (get_retry_after : t -> string) =
          fun (x154 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x154) "retry-after")
        let (set_retry_after : t -> string -> unit) =
          fun (x155 : t) ->
            fun (x156 : string) ->
              Ojs.set_prop_ascii (t_to_js x155) "retry-after"
                (Ojs.string_to_js x156)
        let (get_sec_websocket_accept : t -> string) =
          fun (x157 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x157) "sec-websocket-accept")
        let (set_sec_websocket_accept : t -> string -> unit) =
          fun (x158 : t) ->
            fun (x159 : string) ->
              Ojs.set_prop_ascii (t_to_js x158) "sec-websocket-accept"
                (Ojs.string_to_js x159)
        let (get_sec_websocket_extensions : t -> string) =
          fun (x160 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x160) "sec-websocket-extensions")
        let (set_sec_websocket_extensions : t -> string -> unit) =
          fun (x161 : t) ->
            fun (x162 : string) ->
              Ojs.set_prop_ascii (t_to_js x161) "sec-websocket-extensions"
                (Ojs.string_to_js x162)
        let (get_sec_websocket_key : t -> string) =
          fun (x163 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x163) "sec-websocket-key")
        let (set_sec_websocket_key : t -> string -> unit) =
          fun (x164 : t) ->
            fun (x165 : string) ->
              Ojs.set_prop_ascii (t_to_js x164) "sec-websocket-key"
                (Ojs.string_to_js x165)
        let (get_sec_websocket_protocol : t -> string) =
          fun (x166 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x166) "sec-websocket-protocol")
        let (set_sec_websocket_protocol : t -> string -> unit) =
          fun (x167 : t) ->
            fun (x168 : string) ->
              Ojs.set_prop_ascii (t_to_js x167) "sec-websocket-protocol"
                (Ojs.string_to_js x168)
        let (get_sec_websocket_version : t -> string) =
          fun (x169 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x169) "sec-websocket-version")
        let (set_sec_websocket_version : t -> string -> unit) =
          fun (x170 : t) ->
            fun (x171 : string) ->
              Ojs.set_prop_ascii (t_to_js x170) "sec-websocket-version"
                (Ojs.string_to_js x171)
        let (get_set_cookie : t -> string list) =
          fun (x172 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x172) "set-cookie")
        let (set_set_cookie : t -> string list -> unit) =
          fun (x174 : t) ->
            fun (x175 : string list) ->
              Ojs.set_prop_ascii (t_to_js x174) "set-cookie"
                (Ojs.list_to_js Ojs.string_to_js x175)
        let (get_strict_transport_security : t -> string) =
          fun (x177 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x177) "strict-transport-security")
        let (set_strict_transport_security : t -> string -> unit) =
          fun (x178 : t) ->
            fun (x179 : string) ->
              Ojs.set_prop_ascii (t_to_js x178) "strict-transport-security"
                (Ojs.string_to_js x179)
        let (get_tk : t -> string) =
          fun (x180 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x180) "tk")
        let (set_tk : t -> string -> unit) =
          fun (x181 : t) ->
            fun (x182 : string) ->
              Ojs.set_prop_ascii (t_to_js x181) "tk" (Ojs.string_to_js x182)
        let (get_trailer : t -> string) =
          fun (x183 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x183) "trailer")
        let (set_trailer : t -> string -> unit) =
          fun (x184 : t) ->
            fun (x185 : string) ->
              Ojs.set_prop_ascii (t_to_js x184) "trailer"
                (Ojs.string_to_js x185)
        let (get_transfer_encoding : t -> string) =
          fun (x186 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x186) "transfer-encoding")
        let (set_transfer_encoding : t -> string -> unit) =
          fun (x187 : t) ->
            fun (x188 : string) ->
              Ojs.set_prop_ascii (t_to_js x187) "transfer-encoding"
                (Ojs.string_to_js x188)
        let (get_upgrade : t -> string) =
          fun (x189 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x189) "upgrade")
        let (set_upgrade : t -> string -> unit) =
          fun (x190 : t) ->
            fun (x191 : string) ->
              Ojs.set_prop_ascii (t_to_js x190) "upgrade"
                (Ojs.string_to_js x191)
        let (get_user_agent : t -> string) =
          fun (x192 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x192) "user-agent")
        let (set_user_agent : t -> string -> unit) =
          fun (x193 : t) ->
            fun (x194 : string) ->
              Ojs.set_prop_ascii (t_to_js x193) "user-agent"
                (Ojs.string_to_js x194)
        let (get_vary : t -> string) =
          fun (x195 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x195) "vary")
        let (set_vary : t -> string -> unit) =
          fun (x196 : t) ->
            fun (x197 : string) ->
              Ojs.set_prop_ascii (t_to_js x196) "vary"
                (Ojs.string_to_js x197)
        let (get_via : t -> string) =
          fun (x198 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x198) "via")
        let (set_via : t -> string -> unit) =
          fun (x199 : t) ->
            fun (x200 : string) ->
              Ojs.set_prop_ascii (t_to_js x199) "via" (Ojs.string_to_js x200)
        let (get_warning : t -> string) =
          fun (x201 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x201) "warning")
        let (set_warning : t -> string -> unit) =
          fun (x202 : t) ->
            fun (x203 : string) ->
              Ojs.set_prop_ascii (t_to_js x202) "warning"
                (Ojs.string_to_js x203)
        let (get_www_authenticate : t -> string) =
          fun (x204 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x204) "www-authenticate")
        let (set_www_authenticate : t -> string -> unit) =
          fun (x205 : t) ->
            fun (x206 : string) ->
              Ojs.set_prop_ascii (t_to_js x205) "www-authenticate"
                (Ojs.string_to_js x206)
        let (cast : t -> string list or_string Dict.t) =
          fun (x207 : t) ->
            Dict.t_of_js
              (fun (x208 : Ojs.t) ->
                 or_string_of_js
                   (fun (x209 : Ojs.t) ->
                      Ojs.list_of_js Ojs.string_of_js x209) x208)
              (t_to_js x207)
      end
    module OutgoingHttpHeader =
      struct
        type t = string list or_string or_number
        let rec t_of_js : Ojs.t -> t =
          fun (x215 : Ojs.t) ->
            or_number_of_js
              (fun (x216 : Ojs.t) ->
                 or_string_of_js
                   (fun (x217 : Ojs.t) ->
                      Ojs.list_of_js Ojs.string_of_js x217) x216) x215
        and t_to_js : t -> Ojs.t =
          fun (x211 : string list or_string or_number) ->
            or_number_to_js
              (fun (x212 : string list or_string) ->
                 or_string_to_js
                   (fun (x213 : string list) ->
                      Ojs.list_to_js Ojs.string_to_js x213) x212) x211
      end
    module OutgoingHttpHeaders =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x220 : Ojs.t) -> x220
        and t_to_js : t -> Ojs.t = fun (x219 : Ojs.t) -> x219
        let (cast : t -> OutgoingHttpHeader.t Dict.t) =
          fun (x221 : t) ->
            Dict.t_of_js OutgoingHttpHeader.t_of_js (t_to_js x221)
      end
    module ClientRequestArgs =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x224 : Ojs.t) -> x224
        and t_to_js : t -> Ojs.t = fun (x223 : Ojs.t) -> x223
        let (get_protocol : t -> string or_null) =
          fun (x225 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x225) "protocol")
        let (set_protocol : t -> string or_null -> unit) =
          fun (x227 : t) ->
            fun (x228 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x227) "protocol"
                (or_null_to_js Ojs.string_to_js x228)
        let (get_host : t -> string or_null) =
          fun (x230 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x230) "host")
        let (set_host : t -> string or_null -> unit) =
          fun (x232 : t) ->
            fun (x233 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x232) "host"
                (or_null_to_js Ojs.string_to_js x233)
        let (get_hostname : t -> string or_null) =
          fun (x235 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x235) "hostname")
        let (set_hostname : t -> string or_null -> unit) =
          fun (x237 : t) ->
            fun (x238 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x237) "hostname"
                (or_null_to_js Ojs.string_to_js x238)
        let (get_family : t -> int) =
          fun (x240 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x240) "family")
        let (set_family : t -> int -> unit) =
          fun (x241 : t) ->
            fun (x242 : int) ->
              Ojs.set_prop_ascii (t_to_js x241) "family" (Ojs.int_to_js x242)
        let (get_port : t -> string or_number or_null) =
          fun (x243 : t) ->
            or_null_of_js
              (fun (x244 : Ojs.t) -> or_number_of_js Ojs.string_of_js x244)
              (Ojs.get_prop_ascii (t_to_js x243) "port")
        let (set_port : t -> string or_number or_null -> unit) =
          fun (x246 : t) ->
            fun (x247 : string or_number or_null) ->
              Ojs.set_prop_ascii (t_to_js x246) "port"
                (or_null_to_js
                   (fun (x248 : string or_number) ->
                      or_number_to_js Ojs.string_to_js x248) x247)
        let (get_default_port : t -> string or_number) =
          fun (x250 : t) ->
            or_number_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x250) "defaultPort")
        let (set_default_port : t -> string or_number -> unit) =
          fun (x252 : t) ->
            fun (x253 : string or_number) ->
              Ojs.set_prop_ascii (t_to_js x252) "defaultPort"
                (or_number_to_js Ojs.string_to_js x253)
        let (get_local_address : t -> string) =
          fun (x255 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x255) "localAddress")
        let (set_local_address : t -> string -> unit) =
          fun (x256 : t) ->
            fun (x257 : string) ->
              Ojs.set_prop_ascii (t_to_js x256) "localAddress"
                (Ojs.string_to_js x257)
        let (get_socket_path : t -> string) =
          fun (x258 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x258) "socketPath")
        let (set_socket_path : t -> string -> unit) =
          fun (x259 : t) ->
            fun (x260 : string) ->
              Ojs.set_prop_ascii (t_to_js x259) "socketPath"
                (Ojs.string_to_js x260)
        let (get_max_header_size : t -> int) =
          fun (x261 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x261) "maxHeaderSize")
        let (set_max_header_size : t -> int -> unit) =
          fun (x262 : t) ->
            fun (x263 : int) ->
              Ojs.set_prop_ascii (t_to_js x262) "maxHeaderSize"
                (Ojs.int_to_js x263)
        let (get_method : t -> string) =
          fun (x264 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x264) "method")
        let (set_method : t -> string -> unit) =
          fun (x265 : t) ->
            fun (x266 : string) ->
              Ojs.set_prop_ascii (t_to_js x265) "method"
                (Ojs.string_to_js x266)
        let (get_path : t -> string or_null) =
          fun (x267 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x267) "path")
        let (set_path : t -> string or_null -> unit) =
          fun (x269 : t) ->
            fun (x270 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x269) "path"
                (or_null_to_js Ojs.string_to_js x270)
        let (get_headers : t -> OutgoingHttpHeaders.t) =
          fun (x272 : t) ->
            OutgoingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x272) "headers")
        let (set_headers : t -> OutgoingHttpHeaders.t -> unit) =
          fun (x273 : t) ->
            fun (x274 : OutgoingHttpHeaders.t) ->
              Ojs.set_prop_ascii (t_to_js x273) "headers"
                (OutgoingHttpHeaders.t_to_js x274)
        let (get_auth : t -> string or_null) =
          fun (x275 : t) ->
            or_null_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x275) "auth")
        let (set_auth : t -> string or_null -> unit) =
          fun (x277 : t) ->
            fun (x278 : string or_null) ->
              Ojs.set_prop_ascii (t_to_js x277) "auth"
                (or_null_to_js Ojs.string_to_js x278)
        let (get_agent : t -> Agent.t or_boolean) =
          fun (x280 : t) ->
            or_boolean_of_js Agent.t_of_js
              (Ojs.get_prop_ascii (t_to_js x280) "agent")
        let (set_agent : t -> Agent.t or_boolean -> unit) =
          fun (x282 : t) ->
            fun (x283 : Agent.t or_boolean) ->
              Ojs.set_prop_ascii (t_to_js x282) "agent"
                (or_boolean_to_js Agent.t_to_js x283)
        let (get_default_agent : t -> Agent.t) =
          fun (x285 : t) ->
            Agent.t_of_js (Ojs.get_prop_ascii (t_to_js x285) "_defaultAgent")
        let (set_default_agent : t -> Agent.t -> unit) =
          fun (x286 : t) ->
            fun (x287 : Agent.t) ->
              Ojs.set_prop_ascii (t_to_js x286) "_defaultAgent"
                (Agent.t_to_js x287)
        let (get_timeout : t -> int) =
          fun (x288 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x288) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x289 : t) ->
            fun (x290 : int) ->
              Ojs.set_prop_ascii (t_to_js x289) "timeout"
                (Ojs.int_to_js x290)
        let (get_set_host : t -> bool) =
          fun (x291 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x291) "setHost")
        let (set_set_host : t -> bool -> unit) =
          fun (x292 : t) ->
            fun (x293 : bool) ->
              Ojs.set_prop_ascii (t_to_js x292) "setHost"
                (Ojs.bool_to_js x293)
        let (create_connection :
          t ->
            options:t ->
              oncreate:(err:Error.t -> socket:Node_net.Net.Socket.t -> unit)
                -> Node_net.Net.Socket.t)
          =
          fun (x298 : t) ->
            fun ~options:(x294 : t) ->
              fun
                ~oncreate:(x295 :
                            err:Error.t ->
                              socket:Node_net.Net.Socket.t -> unit)
                ->
                Node_net.Net.Socket.t_of_js
                  (Ojs.call (t_to_js x298) "createConnection"
                     [|(t_to_js x294);(Ojs.fun_to_js 2
                                         (fun (x296 : Ojs.t) ->
                                            fun (x297 : Ojs.t) ->
                                              x295 ~err:(Error.t_of_js x296)
                                                ~socket:(Node_net.Net.Socket.t_of_js
                                                           x297)))|])
      end
    module ServerOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x300 : Ojs.t) -> x300
        and t_to_js : t -> Ojs.t = fun (x299 : Ojs.t) -> x299
        let (get_incoming_message : t -> any) =
          fun (x301 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x301) "IncomingMessage")
        let (set_incoming_message : t -> any -> unit) =
          fun (x302 : t) ->
            fun (x303 : any) ->
              Ojs.set_prop_ascii (t_to_js x302) "IncomingMessage"
                (any_to_js x303)
        let (get_server_response : t -> any) =
          fun (x304 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x304) "ServerResponse")
        let (set_server_response : t -> any -> unit) =
          fun (x305 : t) ->
            fun (x306 : any) ->
              Ojs.set_prop_ascii (t_to_js x305) "ServerResponse"
                (any_to_js x306)
        let (get_max_header_size : t -> int) =
          fun (x307 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x307) "maxHeaderSize")
        let (set_max_header_size : t -> int -> unit) =
          fun (x308 : t) ->
            fun (x309 : int) ->
              Ojs.set_prop_ascii (t_to_js x308) "maxHeaderSize"
                (Ojs.int_to_js x309)
        let (get_insecure_http_parser : t -> bool) =
          fun (x310 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x310) "insecureHTTPParser")
        let (set_insecure_http_parser : t -> bool -> unit) =
          fun (x311 : t) ->
            fun (x312 : bool) ->
              Ojs.set_prop_ascii (t_to_js x311) "insecureHTTPParser"
                (Ojs.bool_to_js x312)
      end
    module RequestListener =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x314 : Ojs.t) -> x314
        and t_to_js : t -> Ojs.t = fun (x313 : Ojs.t) -> x313
        let (apply :
          t -> req:IncomingMessage.t -> res:ServerResponse.t -> unit) =
          fun (x317 : t) ->
            fun ~req:(x315 : IncomingMessage.t) ->
              fun ~res:(x316 : ServerResponse.t) ->
                ignore
                  (Ojs.apply (t_to_js x317)
                     [|(IncomingMessage.t_to_js x315);(ServerResponse.t_to_js
                                                         x316)|])
      end
    module HttpBase =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x319 : Ojs.t) -> x319
        and t_to_js : t -> Ojs.t = fun (x318 : Ojs.t) -> x318
        let (set_timeout :
          t -> ?msecs:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x325 : t) ->
            fun ?msecs:(x320 : int option) ->
              fun ?callback:(x321 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x326 = t_to_js x325 in
                     Ojs.call (Ojs.get_prop_ascii x326 "setTimeout") "apply"
                       [|x326;((let x322 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x320 with
                                 | Some x324 ->
                                     ignore
                                       (Ojs.call x322 "push"
                                          [|(Ojs.int_to_js x324)|])
                                 | None -> ());
                                (match x321 with
                                 | Some x323 ->
                                     ignore
                                       (Ojs.call x322 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x323 ()))|])
                                 | None -> ());
                                x322))|])
        let (set_timeout' : t -> callback:(unit -> unit) -> t) =
          fun (x328 : t) ->
            fun ~callback:(x327 : unit -> unit) ->
              t_of_js
                (Ojs.call (t_to_js x328) "setTimeout"
                   [|(Ojs.fun_to_js 1 (fun _ -> x327 ()))|])
        let (get_max_headers_count : t -> int or_null) =
          fun (x329 : t) ->
            or_null_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x329) "maxHeadersCount")
        let (set_max_headers_count : t -> int or_null -> unit) =
          fun (x331 : t) ->
            fun (x332 : int or_null) ->
              Ojs.set_prop_ascii (t_to_js x331) "maxHeadersCount"
                (or_null_to_js Ojs.int_to_js x332)
        let (get_timeout : t -> int) =
          fun (x334 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x334) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x335 : t) ->
            fun (x336 : int) ->
              Ojs.set_prop_ascii (t_to_js x335) "timeout"
                (Ojs.int_to_js x336)
        let (get_headers_timeout : t -> int) =
          fun (x337 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x337) "headersTimeout")
        let (set_headers_timeout : t -> int -> unit) =
          fun (x338 : t) ->
            fun (x339 : int) ->
              Ojs.set_prop_ascii (t_to_js x338) "headersTimeout"
                (Ojs.int_to_js x339)
        let (get_keep_alive_timeout : t -> int) =
          fun (x340 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x340) "keepAliveTimeout")
        let (set_keep_alive_timeout : t -> int -> unit) =
          fun (x341 : t) ->
            fun (x342 : int) ->
              Ojs.set_prop_ascii (t_to_js x341) "keepAliveTimeout"
                (Ojs.int_to_js x342)
        let (get_request_timeout : t -> int) =
          fun (x343 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x343) "requestTimeout")
        let (set_request_timeout : t -> int -> unit) =
          fun (x344 : t) ->
            fun (x345 : int) ->
              Ojs.set_prop_ascii (t_to_js x344) "requestTimeout"
                (Ojs.int_to_js x345)
      end
    module Server =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x347 : Ojs.t) -> x347
        and t_to_js : t -> Ojs.t = fun (x346 : Ojs.t) -> x346
        let (cast : t -> HttpBase.t) =
          fun (x348 : t) -> HttpBase.t_of_js (t_to_js x348)
        let (create : ?request_listener:RequestListener.t -> unit -> t) =
          fun ?request_listener:(x349 : RequestListener.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.http "Server")
                   (let x350 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x349 with
                     | Some x351 ->
                         ignore
                           (Ojs.call x350 "push"
                              [|(RequestListener.t_to_js x351)|])
                     | None -> ());
                    x350))
        let (create' :
          options:ServerOptions.t ->
            ?request_listener:RequestListener.t -> unit -> t)
          =
          fun ~options:(x352 : ServerOptions.t) ->
            fun ?request_listener:(x353 : RequestListener.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.http "Server")
                     (let x354 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x354 "push"
                           [|(ServerOptions.t_to_js x352)|]);
                      (match x353 with
                       | Some x355 ->
                           ignore
                             (Ojs.call x354 "push"
                                [|(RequestListener.t_to_js x355)|])
                       | None -> ());
                      x354))
        let (cast : t -> Node_net.Net.Server.t) =
          fun (x356 : t) -> Node_net.Net.Server.t_of_js (t_to_js x356)
      end
    module OutgoingMessage =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x358 : Ojs.t) -> x358
        and t_to_js : t -> Ojs.t = fun (x357 : Ojs.t) -> x357
        let (get_upgrading : t -> bool) =
          fun (x359 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x359) "upgrading")
        let (set_upgrading : t -> bool -> unit) =
          fun (x360 : t) ->
            fun (x361 : bool) ->
              Ojs.set_prop_ascii (t_to_js x360) "upgrading"
                (Ojs.bool_to_js x361)
        let (get_chunked_encoding : t -> bool) =
          fun (x362 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x362) "chunkedEncoding")
        let (set_chunked_encoding : t -> bool -> unit) =
          fun (x363 : t) ->
            fun (x364 : bool) ->
              Ojs.set_prop_ascii (t_to_js x363) "chunkedEncoding"
                (Ojs.bool_to_js x364)
        let (get_should_keep_alive : t -> bool) =
          fun (x365 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x365) "shouldKeepAlive")
        let (set_should_keep_alive : t -> bool -> unit) =
          fun (x366 : t) ->
            fun (x367 : bool) ->
              Ojs.set_prop_ascii (t_to_js x366) "shouldKeepAlive"
                (Ojs.bool_to_js x367)
        let (get_use_chunked_encoding_by_default : t -> bool) =
          fun (x368 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x368)
                 "useChunkedEncodingByDefault")
        let (set_use_chunked_encoding_by_default : t -> bool -> unit) =
          fun (x369 : t) ->
            fun (x370 : bool) ->
              Ojs.set_prop_ascii (t_to_js x369) "useChunkedEncodingByDefault"
                (Ojs.bool_to_js x370)
        let (get_send_date : t -> bool) =
          fun (x371 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x371) "sendDate")
        let (set_send_date : t -> bool -> unit) =
          fun (x372 : t) ->
            fun (x373 : bool) ->
              Ojs.set_prop_ascii (t_to_js x372) "sendDate"
                (Ojs.bool_to_js x373)
        let (get_finished : t -> bool) =
          fun (x374 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x374) "finished")
        let (set_finished : t -> bool -> unit) =
          fun (x375 : t) ->
            fun (x376 : bool) ->
              Ojs.set_prop_ascii (t_to_js x375) "finished"
                (Ojs.bool_to_js x376)
        let (get_headers_sent : t -> bool) =
          fun (x377 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x377) "headersSent")
        let (set_headers_sent : t -> bool -> unit) =
          fun (x378 : t) ->
            fun (x379 : bool) ->
              Ojs.set_prop_ascii (t_to_js x378) "headersSent"
                (Ojs.bool_to_js x379)
        let (get_connection : t -> Node_net.Net.Socket.t or_null) =
          fun (x380 : t) ->
            or_null_of_js Node_net.Net.Socket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x380) "connection")
        let (set_connection : t -> Node_net.Net.Socket.t or_null -> unit) =
          fun (x382 : t) ->
            fun (x383 : Node_net.Net.Socket.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x382) "connection"
                (or_null_to_js Node_net.Net.Socket.t_to_js x383)
        let (get_socket : t -> Node_net.Net.Socket.t or_null) =
          fun (x385 : t) ->
            or_null_of_js Node_net.Net.Socket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x385) "socket")
        let (set_socket : t -> Node_net.Net.Socket.t or_null -> unit) =
          fun (x387 : t) ->
            fun (x388 : Node_net.Net.Socket.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x387) "socket"
                (or_null_to_js Node_net.Net.Socket.t_to_js x388)
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.http "OutgoingMessage")
                 [||])
        let (set_timeout :
          t -> msecs:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x394 : t) ->
            fun ~msecs:(x390 : int) ->
              fun ?callback:(x391 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x395 = t_to_js x394 in
                     Ojs.call (Ojs.get_prop_ascii x395 "setTimeout") "apply"
                       [|x395;((let x392 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x392 "push"
                                     [|(Ojs.int_to_js x390)|]);
                                (match x391 with
                                 | Some x393 ->
                                     ignore
                                       (Ojs.call x392 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x393 ()))|])
                                 | None -> ());
                                x392))|])
        let (set_header :
          t -> name:string -> value:string list or_string or_number -> unit)
          =
          fun (x401 : t) ->
            fun ~name:(x396 : string) ->
              fun ~value:(x397 : string list or_string or_number) ->
                ignore
                  (Ojs.call (t_to_js x401) "setHeader"
                     [|(Ojs.string_to_js x396);(or_number_to_js
                                                  (fun
                                                     (x398 :
                                                       string list or_string)
                                                     ->
                                                     or_string_to_js
                                                       (fun
                                                          (x399 :
                                                            string list)
                                                          ->
                                                          Ojs.list_to_js
                                                            Ojs.string_to_js
                                                            x399) x398) x397)|])
        let (get_header :
          t -> name:string -> string list or_string or_number or_undefined) =
          fun (x403 : t) ->
            fun ~name:(x402 : string) ->
              or_undefined_of_js
                (fun (x404 : Ojs.t) ->
                   or_number_of_js
                     (fun (x405 : Ojs.t) ->
                        or_string_of_js
                          (fun (x406 : Ojs.t) ->
                             Ojs.list_of_js Ojs.string_of_js x406) x405) x404)
                (Ojs.call (t_to_js x403) "getHeader"
                   [|(Ojs.string_to_js x402)|])
        let (get_headers : t -> OutgoingHttpHeaders.t) =
          fun (x408 : t) ->
            OutgoingHttpHeaders.t_of_js
              (Ojs.call (t_to_js x408) "getHeaders" [||])
        let (get_header_names : t -> string list) =
          fun (x409 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x409) "getHeaderNames" [||])
        let (has_header : t -> name:string -> bool) =
          fun (x412 : t) ->
            fun ~name:(x411 : string) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x412) "hasHeader"
                   [|(Ojs.string_to_js x411)|])
        let (remove_header : t -> name:string -> unit) =
          fun (x414 : t) ->
            fun ~name:(x413 : string) ->
              ignore
                (Ojs.call (t_to_js x414) "removeHeader"
                   [|(Ojs.string_to_js x413)|])
        let (add_trailers :
          t ->
            headers:(OutgoingHttpHeaders.t, (string * string) list) union2 ->
              unit)
          =
          fun (x422 : t) ->
            fun
              ~headers:(x415 :
                         (OutgoingHttpHeaders.t, (string * string) list)
                           union2)
              ->
              ignore
                (Ojs.call (t_to_js x422) "addTrailers"
                   [|(union2_to_js OutgoingHttpHeaders.t_to_js
                        (fun (x417 : (string * string) list) ->
                           Ojs.list_to_js
                             (fun (x418 : (string * string)) ->
                                let (x419, x420) = x418 in
                                let x421 = Ojs.array_make 2 in
                                Ojs.array_set x421 0 (Ojs.string_to_js x419);
                                Ojs.array_set x421 1 (Ojs.string_to_js x420);
                                x421) x417) x415)|])
        let (flush_headers : t -> unit) =
          fun (x423 : t) ->
            ignore (Ojs.call (t_to_js x423) "flushHeaders" [||])
        let (cast : t -> Stream.Writable.t) =
          fun (x424 : t) -> Stream.Writable.t_of_js (t_to_js x424)
      end
    module ServerResponse =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x426 : Ojs.t) -> x426
        and t_to_js : t -> Ojs.t = fun (x425 : Ojs.t) -> x425
        let (get_status_code : t -> int) =
          fun (x427 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x427) "statusCode")
        let (set_status_code : t -> int -> unit) =
          fun (x428 : t) ->
            fun (x429 : int) ->
              Ojs.set_prop_ascii (t_to_js x428) "statusCode"
                (Ojs.int_to_js x429)
        let (get_status_message : t -> string) =
          fun (x430 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x430) "statusMessage")
        let (set_status_message : t -> string -> unit) =
          fun (x431 : t) ->
            fun (x432 : string) ->
              Ojs.set_prop_ascii (t_to_js x431) "statusMessage"
                (Ojs.string_to_js x432)
        let (create : req:IncomingMessage.t -> t) =
          fun ~req:(x433 : IncomingMessage.t) ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.http "ServerResponse")
                 [|(IncomingMessage.t_to_js x433)|])
        let (assign_socket : t -> socket:Node_net.Net.Socket.t -> unit) =
          fun (x435 : t) ->
            fun ~socket:(x434 : Node_net.Net.Socket.t) ->
              ignore
                (Ojs.call (t_to_js x435) "assignSocket"
                   [|(Node_net.Net.Socket.t_to_js x434)|])
        let (detach_socket : t -> socket:Node_net.Net.Socket.t -> unit) =
          fun (x437 : t) ->
            fun ~socket:(x436 : Node_net.Net.Socket.t) ->
              ignore
                (Ojs.call (t_to_js x437) "detachSocket"
                   [|(Node_net.Net.Socket.t_to_js x436)|])
        let (write_continue : t -> ?callback:(unit -> unit) -> unit -> unit)
          =
          fun (x441 : t) ->
            fun ?callback:(x438 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x442 = t_to_js x441 in
                   Ojs.call (Ojs.get_prop_ascii x442 "writeContinue") "apply"
                     [|x442;((let x439 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x438 with
                               | Some x440 ->
                                   ignore
                                     (Ojs.call x439 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x440 ()))|])
                               | None -> ());
                              x439))|])
        let (write_head :
          t ->
            status_code:int ->
              ?reason_phrase:string ->
                ?headers:(OutgoingHttpHeaders.t, OutgoingHttpHeader.t)
                  or_array -> unit -> t)
          =
          fun (x451 : t) ->
            fun ~status_code:(x443 : int) ->
              fun ?reason_phrase:(x444 : string option) ->
                fun
                  ?headers:(x445 :
                             (OutgoingHttpHeaders.t, OutgoingHttpHeader.t)
                               or_array option)
                  ->
                  fun () ->
                    t_of_js
                      (let x452 = t_to_js x451 in
                       Ojs.call (Ojs.get_prop_ascii x452 "writeHead") "apply"
                         [|x452;((let x446 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x446 "push"
                                       [|(Ojs.int_to_js x443)|]);
                                  (match x444 with
                                   | Some x450 ->
                                       ignore
                                         (Ojs.call x446 "push"
                                            [|(Ojs.string_to_js x450)|])
                                   | None -> ());
                                  (match x445 with
                                   | Some x447 ->
                                       ignore
                                         (Ojs.call x446 "push"
                                            [|(or_array_to_js
                                                 OutgoingHttpHeaders.t_to_js
                                                 OutgoingHttpHeader.t_to_js
                                                 x447)|])
                                   | None -> ());
                                  x446))|])
        let (write_head' :
          t ->
            status_code:int ->
              ?headers:(OutgoingHttpHeaders.t, OutgoingHttpHeader.t) or_array
                -> unit -> t)
          =
          fun (x459 : t) ->
            fun ~status_code:(x453 : int) ->
              fun
                ?headers:(x454 :
                           (OutgoingHttpHeaders.t, OutgoingHttpHeader.t)
                             or_array option)
                ->
                fun () ->
                  t_of_js
                    (let x460 = t_to_js x459 in
                     Ojs.call (Ojs.get_prop_ascii x460 "writeHead") "apply"
                       [|x460;((let x455 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x455 "push"
                                     [|(Ojs.int_to_js x453)|]);
                                (match x454 with
                                 | Some x456 ->
                                     ignore
                                       (Ojs.call x455 "push"
                                          [|(or_array_to_js
                                               OutgoingHttpHeaders.t_to_js
                                               OutgoingHttpHeader.t_to_js
                                               x456)|])
                                 | None -> ());
                                x455))|])
        let (write_processing : t -> unit) =
          fun (x461 : t) ->
            ignore (Ojs.call (t_to_js x461) "writeProcessing" [||])
        let (cast : t -> OutgoingMessage.t) =
          fun (x462 : t) -> OutgoingMessage.t_of_js (t_to_js x462)
      end
    module InformationEvent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x464 : Ojs.t) -> x464
        and t_to_js : t -> Ojs.t = fun (x463 : Ojs.t) -> x463
        let (get_status_code : t -> int) =
          fun (x465 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x465) "statusCode")
        let (set_status_code : t -> int -> unit) =
          fun (x466 : t) ->
            fun (x467 : int) ->
              Ojs.set_prop_ascii (t_to_js x466) "statusCode"
                (Ojs.int_to_js x467)
        let (get_status_message : t -> string) =
          fun (x468 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x468) "statusMessage")
        let (set_status_message : t -> string -> unit) =
          fun (x469 : t) ->
            fun (x470 : string) ->
              Ojs.set_prop_ascii (t_to_js x469) "statusMessage"
                (Ojs.string_to_js x470)
        let (get_http_version : t -> string) =
          fun (x471 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x471) "httpVersion")
        let (set_http_version : t -> string -> unit) =
          fun (x472 : t) ->
            fun (x473 : string) ->
              Ojs.set_prop_ascii (t_to_js x472) "httpVersion"
                (Ojs.string_to_js x473)
        let (get_http_version_major : t -> int) =
          fun (x474 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x474) "httpVersionMajor")
        let (set_http_version_major : t -> int -> unit) =
          fun (x475 : t) ->
            fun (x476 : int) ->
              Ojs.set_prop_ascii (t_to_js x475) "httpVersionMajor"
                (Ojs.int_to_js x476)
        let (get_http_version_minor : t -> int) =
          fun (x477 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x477) "httpVersionMinor")
        let (set_http_version_minor : t -> int -> unit) =
          fun (x478 : t) ->
            fun (x479 : int) ->
              Ojs.set_prop_ascii (t_to_js x478) "httpVersionMinor"
                (Ojs.int_to_js x479)
        let (get_headers : t -> IncomingHttpHeaders.t) =
          fun (x480 : t) ->
            IncomingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x480) "headers")
        let (set_headers : t -> IncomingHttpHeaders.t -> unit) =
          fun (x481 : t) ->
            fun (x482 : IncomingHttpHeaders.t) ->
              Ojs.set_prop_ascii (t_to_js x481) "headers"
                (IncomingHttpHeaders.t_to_js x482)
        let (get_raw_headers : t -> string list) =
          fun (x483 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x483) "rawHeaders")
        let (set_raw_headers : t -> string list -> unit) =
          fun (x485 : t) ->
            fun (x486 : string list) ->
              Ojs.set_prop_ascii (t_to_js x485) "rawHeaders"
                (Ojs.list_to_js Ojs.string_to_js x486)
      end
    module ClientRequest =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x489 : Ojs.t) -> x489
        and t_to_js : t -> Ojs.t = fun (x488 : Ojs.t) -> x488
        let (get_aborted : t -> bool) =
          fun (x490 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x490) "aborted")
        let (set_aborted : t -> bool -> unit) =
          fun (x491 : t) ->
            fun (x492 : bool) ->
              Ojs.set_prop_ascii (t_to_js x491) "aborted"
                (Ojs.bool_to_js x492)
        let (get_host : t -> string) =
          fun (x493 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x493) "host")
        let (set_host : t -> string -> unit) =
          fun (x494 : t) ->
            fun (x495 : string) ->
              Ojs.set_prop_ascii (t_to_js x494) "host"
                (Ojs.string_to_js x495)
        let (get_protocol : t -> string) =
          fun (x496 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x496) "protocol")
        let (set_protocol : t -> string -> unit) =
          fun (x497 : t) ->
            fun (x498 : string) ->
              Ojs.set_prop_ascii (t_to_js x497) "protocol"
                (Ojs.string_to_js x498)
        let (create :
          url:(ClientRequestArgs.t, Node_url.Url.Url.t) union2 or_string ->
            ?cb:(res:IncomingMessage.t -> unit) -> unit -> t)
          =
          fun
            ~url:(x499 :
                   (ClientRequestArgs.t, Node_url.Url.Url.t) union2 or_string)
            ->
            fun ?cb:(x500 : (res:IncomingMessage.t -> unit) option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Import.http "ClientRequest")
                     (let x501 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore
                        (Ojs.call x501 "push"
                           [|(or_string_to_js
                                (fun
                                   (x504 :
                                     (ClientRequestArgs.t,
                                       Node_url.Url.Url.t) union2)
                                   ->
                                   union2_to_js ClientRequestArgs.t_to_js
                                     Node_url.Url.Url.t_to_js x504) x499)|]);
                      (match x500 with
                       | Some x502 ->
                           ignore
                             (Ojs.call x501 "push"
                                [|(Ojs.fun_to_js 1
                                     (fun (x503 : Ojs.t) ->
                                        x502
                                          ~res:(IncomingMessage.t_of_js x503)))|])
                       | None -> ());
                      x501))
        let (get_method : t -> string) =
          fun (x507 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x507) "method")
        let (set_method : t -> string -> unit) =
          fun (x508 : t) ->
            fun (x509 : string) ->
              Ojs.set_prop_ascii (t_to_js x508) "method"
                (Ojs.string_to_js x509)
        let (get_path : t -> string) =
          fun (x510 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x510) "path")
        let (set_path : t -> string -> unit) =
          fun (x511 : t) ->
            fun (x512 : string) ->
              Ojs.set_prop_ascii (t_to_js x511) "path"
                (Ojs.string_to_js x512)
        let (abort : t -> unit) =
          fun (x513 : t) -> ignore (Ojs.call (t_to_js x513) "abort" [||])
        let (on_socket : t -> socket:Node_net.Net.Socket.t -> unit) =
          fun (x515 : t) ->
            fun ~socket:(x514 : Node_net.Net.Socket.t) ->
              ignore
                (Ojs.call (t_to_js x515) "onSocket"
                   [|(Node_net.Net.Socket.t_to_js x514)|])
        let (set_timeout :
          t -> timeout:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x520 : t) ->
            fun ~timeout:(x516 : int) ->
              fun ?callback:(x517 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x521 = t_to_js x520 in
                     Ojs.call (Ojs.get_prop_ascii x521 "setTimeout") "apply"
                       [|x521;((let x518 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x518 "push"
                                     [|(Ojs.int_to_js x516)|]);
                                (match x517 with
                                 | Some x519 ->
                                     ignore
                                       (Ojs.call x518 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x519 ()))|])
                                 | None -> ());
                                x518))|])
        let (set_no_delay : t -> ?no_delay:bool -> unit -> unit) =
          fun (x525 : t) ->
            fun ?no_delay:(x522 : bool option) ->
              fun () ->
                ignore
                  (let x526 = t_to_js x525 in
                   Ojs.call (Ojs.get_prop_ascii x526 "setNoDelay") "apply"
                     [|x526;((let x523 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x522 with
                               | Some x524 ->
                                   ignore
                                     (Ojs.call x523 "push"
                                        [|(Ojs.bool_to_js x524)|])
                               | None -> ());
                              x523))|])
        let (set_socket_keep_alive :
          t -> ?enable:bool -> ?initial_delay:int -> unit -> unit) =
          fun (x532 : t) ->
            fun ?enable:(x527 : bool option) ->
              fun ?initial_delay:(x528 : int option) ->
                fun () ->
                  ignore
                    (let x533 = t_to_js x532 in
                     Ojs.call (Ojs.get_prop_ascii x533 "setSocketKeepAlive")
                       "apply"
                       [|x533;((let x529 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x527 with
                                 | Some x531 ->
                                     ignore
                                       (Ojs.call x529 "push"
                                          [|(Ojs.bool_to_js x531)|])
                                 | None -> ());
                                (match x528 with
                                 | Some x530 ->
                                     ignore
                                       (Ojs.call x529 "push"
                                          [|(Ojs.int_to_js x530)|])
                                 | None -> ());
                                x529))|])
        let (add_listener :
          t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x536 : t) ->
            fun ~event:(x534 : [ `abort ]) ->
              fun ~listener:(x535 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x536) "addListener"
                     [|((match x534 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x535 ()))|])
        let (add_listener' :
          t ->
            event:[ `connect ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x542 : t) ->
            fun ~event:(x537 : [ `connect ]) ->
              fun
                ~listener:(x538 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x542) "addListener"
                     [|((match x537 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x539 : Ojs.t) ->
                            fun (x540 : Ojs.t) ->
                              fun (x541 : Ojs.t) ->
                                x538 ~response:(IncomingMessage.t_of_js x539)
                                  ~socket:(Node_net.Net.Socket.t_of_js x540)
                                  ~head:(Buffer.t_of_js x541)))|])
        let (add_listener'' :
          t -> event:[ `continue ] -> listener:(unit -> unit) -> t) =
          fun (x545 : t) ->
            fun ~event:(x543 : [ `continue ]) ->
              fun ~listener:(x544 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x545) "addListener"
                     [|((match x543 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x544 ()))|])
        let (add_listener''' :
          t ->
            event:[ `information ] ->
              listener:(info:InformationEvent.t -> unit) -> t)
          =
          fun (x549 : t) ->
            fun ~event:(x546 : [ `information ]) ->
              fun ~listener:(x547 : info:InformationEvent.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x549) "addListener"
                     [|((match x546 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x548 : Ojs.t) ->
                            x547 ~info:(InformationEvent.t_of_js x548)))|])
        let (add_listener'''' :
          t ->
            event:[ `response ] ->
              listener:(response:IncomingMessage.t -> unit) -> t)
          =
          fun (x553 : t) ->
            fun ~event:(x550 : [ `response ]) ->
              fun ~listener:(x551 : response:IncomingMessage.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x553) "addListener"
                     [|((match x550 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x552 : Ojs.t) ->
                            x551 ~response:(IncomingMessage.t_of_js x552)))|])
        let (add_listener''''' :
          t ->
            event:[ `socket ] ->
              listener:(socket:Node_net.Net.Socket.t -> unit) -> t)
          =
          fun (x557 : t) ->
            fun ~event:(x554 : [ `socket ]) ->
              fun ~listener:(x555 : socket:Node_net.Net.Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x557) "addListener"
                     [|((match x554 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x556 :
                                                                    Ojs.t) ->
                                                                    x555
                                                                    ~socket:(
                                                                    Node_net.Net.Socket.t_of_js
                                                                    x556)))|])
        let (add_listener'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x560 : t) ->
            fun ~event:(x558 : [ `timeout ]) ->
              fun ~listener:(x559 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x560) "addListener"
                     [|((match x558 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x559 ()))|])
        let (add_listener''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x566 : t) ->
            fun ~event:(x561 : [ `upgrade ]) ->
              fun
                ~listener:(x562 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x566) "addListener"
                     [|((match x561 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x563 : Ojs.t) ->
                            fun (x564 : Ojs.t) ->
                              fun (x565 : Ojs.t) ->
                                x562 ~response:(IncomingMessage.t_of_js x563)
                                  ~socket:(Node_net.Net.Socket.t_of_js x564)
                                  ~head:(Buffer.t_of_js x565)))|])
        let (add_listener'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x569 : t) ->
            fun ~event:(x567 : [ `close ]) ->
              fun ~listener:(x568 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x569) "addListener"
                     [|((match x567 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x568 ()))|])
        let (add_listener''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x572 : t) ->
            fun ~event:(x570 : [ `drain ]) ->
              fun ~listener:(x571 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x572) "addListener"
                     [|((match x570 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x571 ()))|])
        let (add_listener'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x576 : t) ->
            fun ~event:(x573 : [ `error ]) ->
              fun ~listener:(x574 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x576) "addListener"
                     [|((match x573 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x575 : Ojs.t) ->
                            x574 ~err:(Error.t_of_js x575)))|])
        let (add_listener''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x579 : t) ->
            fun ~event:(x577 : [ `finish ]) ->
              fun ~listener:(x578 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x579) "addListener"
                     [|((match x577 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x578 ()))|])
        let (add_listener'''''''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x583 : t) ->
            fun ~event:(x580 : [ `pipe ]) ->
              fun ~listener:(x581 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x583) "addListener"
                     [|((match x580 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x582 : Ojs.t) ->
                            x581 ~src:(Stream.Readable.t_of_js x582)))|])
        let (add_listener''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x587 : t) ->
            fun ~event:(x584 : [ `unpipe ]) ->
              fun ~listener:(x585 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x587) "addListener"
                     [|((match x584 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x586 :
                                                                    Ojs.t) ->
                                                                    x585
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x586)))|])
        let (add_listener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x593 : t) ->
            fun ~event:(x588 : symbol or_string) ->
              fun ~listener:(x590 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x593) "addListener"
                     [|(or_string_to_js symbol_to_js x588);(Ojs.fun_to_js_args
                                                              (fun (x591 : _)
                                                                 ->
                                                                 x590
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x591 0)))|])
        let (on : t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x596 : t) ->
            fun ~event:(x594 : [ `abort ]) ->
              fun ~listener:(x595 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x596) "on"
                     [|((match x594 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x595 ()))|])
        let (on' :
          t ->
            event:[ `connect ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x602 : t) ->
            fun ~event:(x597 : [ `connect ]) ->
              fun
                ~listener:(x598 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x602) "on"
                     [|((match x597 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x599 : Ojs.t) ->
                            fun (x600 : Ojs.t) ->
                              fun (x601 : Ojs.t) ->
                                x598 ~response:(IncomingMessage.t_of_js x599)
                                  ~socket:(Node_net.Net.Socket.t_of_js x600)
                                  ~head:(Buffer.t_of_js x601)))|])
        let (on'' : t -> event:[ `continue ] -> listener:(unit -> unit) -> t)
          =
          fun (x605 : t) ->
            fun ~event:(x603 : [ `continue ]) ->
              fun ~listener:(x604 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x605) "on"
                     [|((match x603 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x604 ()))|])
        let (on''' :
          t ->
            event:[ `information ] ->
              listener:(info:InformationEvent.t -> unit) -> t)
          =
          fun (x609 : t) ->
            fun ~event:(x606 : [ `information ]) ->
              fun ~listener:(x607 : info:InformationEvent.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x609) "on"
                     [|((match x606 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x608 : Ojs.t) ->
                            x607 ~info:(InformationEvent.t_of_js x608)))|])
        let (on'''' :
          t ->
            event:[ `response ] ->
              listener:(response:IncomingMessage.t -> unit) -> t)
          =
          fun (x613 : t) ->
            fun ~event:(x610 : [ `response ]) ->
              fun ~listener:(x611 : response:IncomingMessage.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x613) "on"
                     [|((match x610 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x612 : Ojs.t) ->
                            x611 ~response:(IncomingMessage.t_of_js x612)))|])
        let (on''''' :
          t ->
            event:[ `socket ] ->
              listener:(socket:Node_net.Net.Socket.t -> unit) -> t)
          =
          fun (x617 : t) ->
            fun ~event:(x614 : [ `socket ]) ->
              fun ~listener:(x615 : socket:Node_net.Net.Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x617) "on"
                     [|((match x614 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x616 :
                                                                    Ojs.t) ->
                                                                    x615
                                                                    ~socket:(
                                                                    Node_net.Net.Socket.t_of_js
                                                                    x616)))|])
        let (on'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x620 : t) ->
            fun ~event:(x618 : [ `timeout ]) ->
              fun ~listener:(x619 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x620) "on"
                     [|((match x618 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x619 ()))|])
        let (on''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x626 : t) ->
            fun ~event:(x621 : [ `upgrade ]) ->
              fun
                ~listener:(x622 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x626) "on"
                     [|((match x621 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x623 : Ojs.t) ->
                            fun (x624 : Ojs.t) ->
                              fun (x625 : Ojs.t) ->
                                x622 ~response:(IncomingMessage.t_of_js x623)
                                  ~socket:(Node_net.Net.Socket.t_of_js x624)
                                  ~head:(Buffer.t_of_js x625)))|])
        let (on'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x629 : t) ->
            fun ~event:(x627 : [ `close ]) ->
              fun ~listener:(x628 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x629) "on"
                     [|((match x627 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x628 ()))|])
        let (on''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x632 : t) ->
            fun ~event:(x630 : [ `drain ]) ->
              fun ~listener:(x631 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x632) "on"
                     [|((match x630 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x631 ()))|])
        let (on'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x636 : t) ->
            fun ~event:(x633 : [ `error ]) ->
              fun ~listener:(x634 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x636) "on"
                     [|((match x633 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x635 : Ojs.t) ->
                            x634 ~err:(Error.t_of_js x635)))|])
        let (on''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x639 : t) ->
            fun ~event:(x637 : [ `finish ]) ->
              fun ~listener:(x638 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x639) "on"
                     [|((match x637 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x638 ()))|])
        let (on'''''''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x643 : t) ->
            fun ~event:(x640 : [ `pipe ]) ->
              fun ~listener:(x641 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x643) "on"
                     [|((match x640 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x642 : Ojs.t) ->
                            x641 ~src:(Stream.Readable.t_of_js x642)))|])
        let (on''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x647 : t) ->
            fun ~event:(x644 : [ `unpipe ]) ->
              fun ~listener:(x645 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x647) "on"
                     [|((match x644 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x646 :
                                                                    Ojs.t) ->
                                                                    x645
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x646)))|])
        let (on'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x653 : t) ->
            fun ~event:(x648 : symbol or_string) ->
              fun ~listener:(x650 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x653) "on"
                     [|(or_string_to_js symbol_to_js x648);(Ojs.fun_to_js_args
                                                              (fun (x651 : _)
                                                                 ->
                                                                 x650
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x651 0)))|])
        let (once : t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x656 : t) ->
            fun ~event:(x654 : [ `abort ]) ->
              fun ~listener:(x655 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x656) "once"
                     [|((match x654 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x655 ()))|])
        let (once' :
          t ->
            event:[ `connect ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x662 : t) ->
            fun ~event:(x657 : [ `connect ]) ->
              fun
                ~listener:(x658 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x662) "once"
                     [|((match x657 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x659 : Ojs.t) ->
                            fun (x660 : Ojs.t) ->
                              fun (x661 : Ojs.t) ->
                                x658 ~response:(IncomingMessage.t_of_js x659)
                                  ~socket:(Node_net.Net.Socket.t_of_js x660)
                                  ~head:(Buffer.t_of_js x661)))|])
        let (once'' :
          t -> event:[ `continue ] -> listener:(unit -> unit) -> t) =
          fun (x665 : t) ->
            fun ~event:(x663 : [ `continue ]) ->
              fun ~listener:(x664 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x665) "once"
                     [|((match x663 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x664 ()))|])
        let (once''' :
          t ->
            event:[ `information ] ->
              listener:(info:InformationEvent.t -> unit) -> t)
          =
          fun (x669 : t) ->
            fun ~event:(x666 : [ `information ]) ->
              fun ~listener:(x667 : info:InformationEvent.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x669) "once"
                     [|((match x666 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x668 : Ojs.t) ->
                            x667 ~info:(InformationEvent.t_of_js x668)))|])
        let (once'''' :
          t ->
            event:[ `response ] ->
              listener:(response:IncomingMessage.t -> unit) -> t)
          =
          fun (x673 : t) ->
            fun ~event:(x670 : [ `response ]) ->
              fun ~listener:(x671 : response:IncomingMessage.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x673) "once"
                     [|((match x670 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x672 : Ojs.t) ->
                            x671 ~response:(IncomingMessage.t_of_js x672)))|])
        let (once''''' :
          t ->
            event:[ `socket ] ->
              listener:(socket:Node_net.Net.Socket.t -> unit) -> t)
          =
          fun (x677 : t) ->
            fun ~event:(x674 : [ `socket ]) ->
              fun ~listener:(x675 : socket:Node_net.Net.Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x677) "once"
                     [|((match x674 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x676 :
                                                                    Ojs.t) ->
                                                                    x675
                                                                    ~socket:(
                                                                    Node_net.Net.Socket.t_of_js
                                                                    x676)))|])
        let (once'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x680 : t) ->
            fun ~event:(x678 : [ `timeout ]) ->
              fun ~listener:(x679 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x680) "once"
                     [|((match x678 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x679 ()))|])
        let (once''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x686 : t) ->
            fun ~event:(x681 : [ `upgrade ]) ->
              fun
                ~listener:(x682 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x686) "once"
                     [|((match x681 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x683 : Ojs.t) ->
                            fun (x684 : Ojs.t) ->
                              fun (x685 : Ojs.t) ->
                                x682 ~response:(IncomingMessage.t_of_js x683)
                                  ~socket:(Node_net.Net.Socket.t_of_js x684)
                                  ~head:(Buffer.t_of_js x685)))|])
        let (once'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x689 : t) ->
            fun ~event:(x687 : [ `close ]) ->
              fun ~listener:(x688 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x689) "once"
                     [|((match x687 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x688 ()))|])
        let (once''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x692 : t) ->
            fun ~event:(x690 : [ `drain ]) ->
              fun ~listener:(x691 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x692) "once"
                     [|((match x690 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x691 ()))|])
        let (once'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x696 : t) ->
            fun ~event:(x693 : [ `error ]) ->
              fun ~listener:(x694 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x696) "once"
                     [|((match x693 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x695 : Ojs.t) ->
                            x694 ~err:(Error.t_of_js x695)))|])
        let (once''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x699 : t) ->
            fun ~event:(x697 : [ `finish ]) ->
              fun ~listener:(x698 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x699) "once"
                     [|((match x697 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x698 ()))|])
        let (once'''''''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x703 : t) ->
            fun ~event:(x700 : [ `pipe ]) ->
              fun ~listener:(x701 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x703) "once"
                     [|((match x700 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x702 : Ojs.t) ->
                            x701 ~src:(Stream.Readable.t_of_js x702)))|])
        let (once''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x707 : t) ->
            fun ~event:(x704 : [ `unpipe ]) ->
              fun ~listener:(x705 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x707) "once"
                     [|((match x704 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x706 :
                                                                    Ojs.t) ->
                                                                    x705
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x706)))|])
        let (once'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x713 : t) ->
            fun ~event:(x708 : symbol or_string) ->
              fun ~listener:(x710 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x713) "once"
                     [|(or_string_to_js symbol_to_js x708);(Ojs.fun_to_js_args
                                                              (fun (x711 : _)
                                                                 ->
                                                                 x710
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x711 0)))|])
        let (prepend_listener :
          t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x716 : t) ->
            fun ~event:(x714 : [ `abort ]) ->
              fun ~listener:(x715 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x716) "prependListener"
                     [|((match x714 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x715 ()))|])
        let (prepend_listener' :
          t ->
            event:[ `connect ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x722 : t) ->
            fun ~event:(x717 : [ `connect ]) ->
              fun
                ~listener:(x718 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x722) "prependListener"
                     [|((match x717 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x719 : Ojs.t) ->
                            fun (x720 : Ojs.t) ->
                              fun (x721 : Ojs.t) ->
                                x718 ~response:(IncomingMessage.t_of_js x719)
                                  ~socket:(Node_net.Net.Socket.t_of_js x720)
                                  ~head:(Buffer.t_of_js x721)))|])
        let (prepend_listener'' :
          t -> event:[ `continue ] -> listener:(unit -> unit) -> t) =
          fun (x725 : t) ->
            fun ~event:(x723 : [ `continue ]) ->
              fun ~listener:(x724 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x725) "prependListener"
                     [|((match x723 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x724 ()))|])
        let (prepend_listener''' :
          t ->
            event:[ `information ] ->
              listener:(info:InformationEvent.t -> unit) -> t)
          =
          fun (x729 : t) ->
            fun ~event:(x726 : [ `information ]) ->
              fun ~listener:(x727 : info:InformationEvent.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x729) "prependListener"
                     [|((match x726 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x728 : Ojs.t) ->
                            x727 ~info:(InformationEvent.t_of_js x728)))|])
        let (prepend_listener'''' :
          t ->
            event:[ `response ] ->
              listener:(response:IncomingMessage.t -> unit) -> t)
          =
          fun (x733 : t) ->
            fun ~event:(x730 : [ `response ]) ->
              fun ~listener:(x731 : response:IncomingMessage.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x733) "prependListener"
                     [|((match x730 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x732 : Ojs.t) ->
                            x731 ~response:(IncomingMessage.t_of_js x732)))|])
        let (prepend_listener''''' :
          t ->
            event:[ `socket ] ->
              listener:(socket:Node_net.Net.Socket.t -> unit) -> t)
          =
          fun (x737 : t) ->
            fun ~event:(x734 : [ `socket ]) ->
              fun ~listener:(x735 : socket:Node_net.Net.Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x737) "prependListener"
                     [|((match x734 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x736 :
                                                                    Ojs.t) ->
                                                                    x735
                                                                    ~socket:(
                                                                    Node_net.Net.Socket.t_of_js
                                                                    x736)))|])
        let (prepend_listener'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x740 : t) ->
            fun ~event:(x738 : [ `timeout ]) ->
              fun ~listener:(x739 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x740) "prependListener"
                     [|((match x738 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x739 ()))|])
        let (prepend_listener''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x746 : t) ->
            fun ~event:(x741 : [ `upgrade ]) ->
              fun
                ~listener:(x742 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x746) "prependListener"
                     [|((match x741 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x743 : Ojs.t) ->
                            fun (x744 : Ojs.t) ->
                              fun (x745 : Ojs.t) ->
                                x742 ~response:(IncomingMessage.t_of_js x743)
                                  ~socket:(Node_net.Net.Socket.t_of_js x744)
                                  ~head:(Buffer.t_of_js x745)))|])
        let (prepend_listener'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x749 : t) ->
            fun ~event:(x747 : [ `close ]) ->
              fun ~listener:(x748 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x749) "prependListener"
                     [|((match x747 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x748 ()))|])
        let (prepend_listener''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x752 : t) ->
            fun ~event:(x750 : [ `drain ]) ->
              fun ~listener:(x751 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x752) "prependListener"
                     [|((match x750 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x751 ()))|])
        let (prepend_listener'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x756 : t) ->
            fun ~event:(x753 : [ `error ]) ->
              fun ~listener:(x754 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x756) "prependListener"
                     [|((match x753 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x755 : Ojs.t) ->
                            x754 ~err:(Error.t_of_js x755)))|])
        let (prepend_listener''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x759 : t) ->
            fun ~event:(x757 : [ `finish ]) ->
              fun ~listener:(x758 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x759) "prependListener"
                     [|((match x757 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x758 ()))|])
        let (prepend_listener'''''''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x763 : t) ->
            fun ~event:(x760 : [ `pipe ]) ->
              fun ~listener:(x761 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x763) "prependListener"
                     [|((match x760 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x762 : Ojs.t) ->
                            x761 ~src:(Stream.Readable.t_of_js x762)))|])
        let (prepend_listener''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x767 : t) ->
            fun ~event:(x764 : [ `unpipe ]) ->
              fun ~listener:(x765 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x767) "prependListener"
                     [|((match x764 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x766 :
                                                                    Ojs.t) ->
                                                                    x765
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x766)))|])
        let (prepend_listener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x773 : t) ->
            fun ~event:(x768 : symbol or_string) ->
              fun ~listener:(x770 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x773) "prependListener"
                     [|(or_string_to_js symbol_to_js x768);(Ojs.fun_to_js_args
                                                              (fun (x771 : _)
                                                                 ->
                                                                 x770
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x771 0)))|])
        let (prepend_once_listener :
          t -> event:[ `abort ] -> listener:(unit -> unit) -> t) =
          fun (x776 : t) ->
            fun ~event:(x774 : [ `abort ]) ->
              fun ~listener:(x775 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x776) "prependOnceListener"
                     [|((match x774 with | `abort -> Ojs.string_to_js "abort"));(
                       Ojs.fun_to_js 1 (fun _ -> x775 ()))|])
        let (prepend_once_listener' :
          t ->
            event:[ `connect ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x782 : t) ->
            fun ~event:(x777 : [ `connect ]) ->
              fun
                ~listener:(x778 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x782) "prependOnceListener"
                     [|((match x777 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 3
                         (fun (x779 : Ojs.t) ->
                            fun (x780 : Ojs.t) ->
                              fun (x781 : Ojs.t) ->
                                x778 ~response:(IncomingMessage.t_of_js x779)
                                  ~socket:(Node_net.Net.Socket.t_of_js x780)
                                  ~head:(Buffer.t_of_js x781)))|])
        let (prepend_once_listener'' :
          t -> event:[ `continue ] -> listener:(unit -> unit) -> t) =
          fun (x785 : t) ->
            fun ~event:(x783 : [ `continue ]) ->
              fun ~listener:(x784 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x785) "prependOnceListener"
                     [|((match x783 with
                         | `continue -> Ojs.string_to_js "continue"));(
                       Ojs.fun_to_js 1 (fun _ -> x784 ()))|])
        let (prepend_once_listener''' :
          t ->
            event:[ `information ] ->
              listener:(info:InformationEvent.t -> unit) -> t)
          =
          fun (x789 : t) ->
            fun ~event:(x786 : [ `information ]) ->
              fun ~listener:(x787 : info:InformationEvent.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x789) "prependOnceListener"
                     [|((match x786 with
                         | `information -> Ojs.string_to_js "information"));(
                       Ojs.fun_to_js 1
                         (fun (x788 : Ojs.t) ->
                            x787 ~info:(InformationEvent.t_of_js x788)))|])
        let (prepend_once_listener'''' :
          t ->
            event:[ `response ] ->
              listener:(response:IncomingMessage.t -> unit) -> t)
          =
          fun (x793 : t) ->
            fun ~event:(x790 : [ `response ]) ->
              fun ~listener:(x791 : response:IncomingMessage.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x793) "prependOnceListener"
                     [|((match x790 with
                         | `response -> Ojs.string_to_js "response"));(
                       Ojs.fun_to_js 1
                         (fun (x792 : Ojs.t) ->
                            x791 ~response:(IncomingMessage.t_of_js x792)))|])
        let (prepend_once_listener''''' :
          t ->
            event:[ `socket ] ->
              listener:(socket:Node_net.Net.Socket.t -> unit) -> t)
          =
          fun (x797 : t) ->
            fun ~event:(x794 : [ `socket ]) ->
              fun ~listener:(x795 : socket:Node_net.Net.Socket.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x797) "prependOnceListener"
                     [|((match x794 with
                         | `socket -> Ojs.string_to_js "socket"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x796 :
                                                                    Ojs.t) ->
                                                                    x795
                                                                    ~socket:(
                                                                    Node_net.Net.Socket.t_of_js
                                                                    x796)))|])
        let (prepend_once_listener'''''' :
          t -> event:[ `timeout ] -> listener:(unit -> unit) -> t) =
          fun (x800 : t) ->
            fun ~event:(x798 : [ `timeout ]) ->
              fun ~listener:(x799 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x800) "prependOnceListener"
                     [|((match x798 with
                         | `timeout -> Ojs.string_to_js "timeout"));(
                       Ojs.fun_to_js 1 (fun _ -> x799 ()))|])
        let (prepend_once_listener''''''' :
          t ->
            event:[ `upgrade ] ->
              listener:(response:IncomingMessage.t ->
                          socket:Node_net.Net.Socket.t ->
                            head:Buffer.t -> unit)
                -> t)
          =
          fun (x806 : t) ->
            fun ~event:(x801 : [ `upgrade ]) ->
              fun
                ~listener:(x802 :
                            response:IncomingMessage.t ->
                              socket:Node_net.Net.Socket.t ->
                                head:Buffer.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x806) "prependOnceListener"
                     [|((match x801 with
                         | `upgrade -> Ojs.string_to_js "upgrade"));(
                       Ojs.fun_to_js 3
                         (fun (x803 : Ojs.t) ->
                            fun (x804 : Ojs.t) ->
                              fun (x805 : Ojs.t) ->
                                x802 ~response:(IncomingMessage.t_of_js x803)
                                  ~socket:(Node_net.Net.Socket.t_of_js x804)
                                  ~head:(Buffer.t_of_js x805)))|])
        let (prepend_once_listener'''''''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x809 : t) ->
            fun ~event:(x807 : [ `close ]) ->
              fun ~listener:(x808 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x809) "prependOnceListener"
                     [|((match x807 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x808 ()))|])
        let (prepend_once_listener''''''''' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x812 : t) ->
            fun ~event:(x810 : [ `drain ]) ->
              fun ~listener:(x811 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x812) "prependOnceListener"
                     [|((match x810 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x811 ()))|])
        let (prepend_once_listener'''''''''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x816 : t) ->
            fun ~event:(x813 : [ `error ]) ->
              fun ~listener:(x814 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x816) "prependOnceListener"
                     [|((match x813 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x815 : Ojs.t) ->
                            x814 ~err:(Error.t_of_js x815)))|])
        let (prepend_once_listener''''''''''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x819 : t) ->
            fun ~event:(x817 : [ `finish ]) ->
              fun ~listener:(x818 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x819) "prependOnceListener"
                     [|((match x817 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x818 ()))|])
        let (prepend_once_listener'''''''''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x823 : t) ->
            fun ~event:(x820 : [ `pipe ]) ->
              fun ~listener:(x821 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x823) "prependOnceListener"
                     [|((match x820 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x822 : Ojs.t) ->
                            x821 ~src:(Stream.Readable.t_of_js x822)))|])
        let (prepend_once_listener''''''''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x827 : t) ->
            fun ~event:(x824 : [ `unpipe ]) ->
              fun ~listener:(x825 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x827) "prependOnceListener"
                     [|((match x824 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x826 :
                                                                    Ojs.t) ->
                                                                    x825
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x826)))|])
        let (prepend_once_listener'''''''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x833 : t) ->
            fun ~event:(x828 : symbol or_string) ->
              fun ~listener:(x830 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x833) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x828);(Ojs.fun_to_js_args
                                                              (fun (x831 : _)
                                                                 ->
                                                                 x830
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x831 0)))|])
        let (cast : t -> OutgoingMessage.t) =
          fun (x834 : t) -> OutgoingMessage.t_of_js (t_to_js x834)
      end
    module IncomingMessage =
      struct
        include struct include Stream.Readable end
        let (create : socket:Node_net.Net.Socket.t -> t) =
          fun ~socket:(x835 : Node_net.Net.Socket.t) ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.http "IncomingMessage")
                 [|(Node_net.Net.Socket.t_to_js x835)|])
        let (get_aborted : t -> bool) =
          fun (x836 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x836) "aborted")
        let (set_aborted : t -> bool -> unit) =
          fun (x837 : t) ->
            fun (x838 : bool) ->
              Ojs.set_prop_ascii (t_to_js x837) "aborted"
                (Ojs.bool_to_js x838)
        let (get_http_version : t -> string) =
          fun (x839 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x839) "httpVersion")
        let (set_http_version : t -> string -> unit) =
          fun (x840 : t) ->
            fun (x841 : string) ->
              Ojs.set_prop_ascii (t_to_js x840) "httpVersion"
                (Ojs.string_to_js x841)
        let (get_http_version_major : t -> int) =
          fun (x842 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x842) "httpVersionMajor")
        let (set_http_version_major : t -> int -> unit) =
          fun (x843 : t) ->
            fun (x844 : int) ->
              Ojs.set_prop_ascii (t_to_js x843) "httpVersionMajor"
                (Ojs.int_to_js x844)
        let (get_http_version_minor : t -> int) =
          fun (x845 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x845) "httpVersionMinor")
        let (set_http_version_minor : t -> int -> unit) =
          fun (x846 : t) ->
            fun (x847 : int) ->
              Ojs.set_prop_ascii (t_to_js x846) "httpVersionMinor"
                (Ojs.int_to_js x847)
        let (get_complete : t -> bool) =
          fun (x848 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x848) "complete")
        let (set_complete : t -> bool -> unit) =
          fun (x849 : t) ->
            fun (x850 : bool) ->
              Ojs.set_prop_ascii (t_to_js x849) "complete"
                (Ojs.bool_to_js x850)
        let (get_connection : t -> Node_net.Net.Socket.t) =
          fun (x851 : t) ->
            Node_net.Net.Socket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x851) "connection")
        let (set_connection : t -> Node_net.Net.Socket.t -> unit) =
          fun (x852 : t) ->
            fun (x853 : Node_net.Net.Socket.t) ->
              Ojs.set_prop_ascii (t_to_js x852) "connection"
                (Node_net.Net.Socket.t_to_js x853)
        let (get_socket : t -> Node_net.Net.Socket.t) =
          fun (x854 : t) ->
            Node_net.Net.Socket.t_of_js
              (Ojs.get_prop_ascii (t_to_js x854) "socket")
        let (set_socket : t -> Node_net.Net.Socket.t -> unit) =
          fun (x855 : t) ->
            fun (x856 : Node_net.Net.Socket.t) ->
              Ojs.set_prop_ascii (t_to_js x855) "socket"
                (Node_net.Net.Socket.t_to_js x856)
        let (get_headers : t -> IncomingHttpHeaders.t) =
          fun (x857 : t) ->
            IncomingHttpHeaders.t_of_js
              (Ojs.get_prop_ascii (t_to_js x857) "headers")
        let (set_headers : t -> IncomingHttpHeaders.t -> unit) =
          fun (x858 : t) ->
            fun (x859 : IncomingHttpHeaders.t) ->
              Ojs.set_prop_ascii (t_to_js x858) "headers"
                (IncomingHttpHeaders.t_to_js x859)
        let (get_raw_headers : t -> string list) =
          fun (x860 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x860) "rawHeaders")
        let (set_raw_headers : t -> string list -> unit) =
          fun (x862 : t) ->
            fun (x863 : string list) ->
              Ojs.set_prop_ascii (t_to_js x862) "rawHeaders"
                (Ojs.list_to_js Ojs.string_to_js x863)
        let (get_trailers : t -> string Dict.t) =
          fun (x865 : t) ->
            Dict.t_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x865) "trailers")
        let (set_trailers : t -> string Dict.t -> unit) =
          fun (x867 : t) ->
            fun (x868 : string Dict.t) ->
              Ojs.set_prop_ascii (t_to_js x867) "trailers"
                (Dict.t_to_js Ojs.string_to_js x868)
        let (get_raw_trailers : t -> string list) =
          fun (x870 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x870) "rawTrailers")
        let (set_raw_trailers : t -> string list -> unit) =
          fun (x872 : t) ->
            fun (x873 : string list) ->
              Ojs.set_prop_ascii (t_to_js x872) "rawTrailers"
                (Ojs.list_to_js Ojs.string_to_js x873)
        let (set_timeout :
          t -> msecs:int -> ?callback:(unit -> unit) -> unit -> t) =
          fun (x879 : t) ->
            fun ~msecs:(x875 : int) ->
              fun ?callback:(x876 : (unit -> unit) option) ->
                fun () ->
                  t_of_js
                    (let x880 = t_to_js x879 in
                     Ojs.call (Ojs.get_prop_ascii x880 "setTimeout") "apply"
                       [|x880;((let x877 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x877 "push"
                                     [|(Ojs.int_to_js x875)|]);
                                (match x876 with
                                 | Some x878 ->
                                     ignore
                                       (Ojs.call x877 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x878 ()))|])
                                 | None -> ());
                                x877))|])
        let (get_method : t -> string) =
          fun (x881 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x881) "method")
        let (set_method : t -> string -> unit) =
          fun (x882 : t) ->
            fun (x883 : string) ->
              Ojs.set_prop_ascii (t_to_js x882) "method"
                (Ojs.string_to_js x883)
        let (get_url : t -> string) =
          fun (x884 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x884) "url")
        let (set_url : t -> string -> unit) =
          fun (x885 : t) ->
            fun (x886 : string) ->
              Ojs.set_prop_ascii (t_to_js x885) "url" (Ojs.string_to_js x886)
        let (get_status_code : t -> int) =
          fun (x887 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x887) "statusCode")
        let (set_status_code : t -> int -> unit) =
          fun (x888 : t) ->
            fun (x889 : int) ->
              Ojs.set_prop_ascii (t_to_js x888) "statusCode"
                (Ojs.int_to_js x889)
        let (get_status_message : t -> string) =
          fun (x890 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x890) "statusMessage")
        let (set_status_message : t -> string -> unit) =
          fun (x891 : t) ->
            fun (x892 : string) ->
              Ojs.set_prop_ascii (t_to_js x891) "statusMessage"
                (Ojs.string_to_js x892)
        let (destroy : t -> ?error:Error.t -> unit -> unit) =
          fun (x896 : t) ->
            fun ?error:(x893 : Error.t option) ->
              fun () ->
                ignore
                  (let x897 = t_to_js x896 in
                   Ojs.call (Ojs.get_prop_ascii x897 "destroy") "apply"
                     [|x897;((let x894 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x893 with
                               | Some x895 ->
                                   ignore
                                     (Ojs.call x894 "push"
                                        [|(Error.t_to_js x895)|])
                               | None -> ());
                              x894))|])
      end
    module AgentOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x899 : Ojs.t) -> x899
        and t_to_js : t -> Ojs.t = fun (x898 : Ojs.t) -> x898
        let (get_keep_alive : t -> bool) =
          fun (x900 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x900) "keepAlive")
        let (set_keep_alive : t -> bool -> unit) =
          fun (x901 : t) ->
            fun (x902 : bool) ->
              Ojs.set_prop_ascii (t_to_js x901) "keepAlive"
                (Ojs.bool_to_js x902)
        let (get_keep_alive_msecs : t -> int) =
          fun (x903 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x903) "keepAliveMsecs")
        let (set_keep_alive_msecs : t -> int -> unit) =
          fun (x904 : t) ->
            fun (x905 : int) ->
              Ojs.set_prop_ascii (t_to_js x904) "keepAliveMsecs"
                (Ojs.int_to_js x905)
        let (get_max_sockets : t -> int) =
          fun (x906 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x906) "maxSockets")
        let (set_max_sockets : t -> int -> unit) =
          fun (x907 : t) ->
            fun (x908 : int) ->
              Ojs.set_prop_ascii (t_to_js x907) "maxSockets"
                (Ojs.int_to_js x908)
        let (get_max_total_sockets : t -> int) =
          fun (x909 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x909) "maxTotalSockets")
        let (set_max_total_sockets : t -> int -> unit) =
          fun (x910 : t) ->
            fun (x911 : int) ->
              Ojs.set_prop_ascii (t_to_js x910) "maxTotalSockets"
                (Ojs.int_to_js x911)
        let (get_max_free_sockets : t -> int) =
          fun (x912 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x912) "maxFreeSockets")
        let (set_max_free_sockets : t -> int -> unit) =
          fun (x913 : t) ->
            fun (x914 : int) ->
              Ojs.set_prop_ascii (t_to_js x913) "maxFreeSockets"
                (Ojs.int_to_js x914)
        let (get_timeout : t -> int) =
          fun (x915 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x915) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x916 : t) ->
            fun (x917 : int) ->
              Ojs.set_prop_ascii (t_to_js x916) "timeout"
                (Ojs.int_to_js x917)
        let (get_scheduling : t -> [ `fifo  | `lifo ]) =
          fun (x918 : t) ->
            let x919 = Ojs.get_prop_ascii (t_to_js x918) "scheduling" in
            match Ojs.string_of_js x919 with
            | "fifo" -> `fifo
            | "lifo" -> `lifo
            | _ -> assert false
        let (set_scheduling : t -> [ `fifo  | `lifo ] -> unit) =
          fun (x920 : t) ->
            fun (x921 : [ `fifo  | `lifo ]) ->
              Ojs.set_prop_ascii (t_to_js x920) "scheduling"
                (match x921 with
                 | `fifo -> Ojs.string_to_js "fifo"
                 | `lifo -> Ojs.string_to_js "lifo")
      end
    module Agent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x923 : Ojs.t) -> x923
        and t_to_js : t -> Ojs.t = fun (x922 : Ojs.t) -> x922
        let (get_max_free_sockets : t -> int) =
          fun (x924 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x924) "maxFreeSockets")
        let (set_max_free_sockets : t -> int -> unit) =
          fun (x925 : t) ->
            fun (x926 : int) ->
              Ojs.set_prop_ascii (t_to_js x925) "maxFreeSockets"
                (Ojs.int_to_js x926)
        let (get_max_sockets : t -> int) =
          fun (x927 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x927) "maxSockets")
        let (set_max_sockets : t -> int -> unit) =
          fun (x928 : t) ->
            fun (x929 : int) ->
              Ojs.set_prop_ascii (t_to_js x928) "maxSockets"
                (Ojs.int_to_js x929)
        let (get_max_total_sockets : t -> int) =
          fun (x930 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x930) "maxTotalSockets")
        let (set_max_total_sockets : t -> int -> unit) =
          fun (x931 : t) ->
            fun (x932 : int) ->
              Ojs.set_prop_ascii (t_to_js x931) "maxTotalSockets"
                (Ojs.int_to_js x932)
        let (get_free_sockets :
          t -> Node_net.Net.Socket.t list ReadOnlyDict.t) =
          fun (x933 : t) ->
            ReadOnlyDict.t_of_js
              (fun (x934 : Ojs.t) ->
                 Ojs.list_of_js Node_net.Net.Socket.t_of_js x934)
              (Ojs.get_prop_ascii (t_to_js x933) "freeSockets")
        let (get_sockets : t -> Node_net.Net.Socket.t list ReadOnlyDict.t) =
          fun (x936 : t) ->
            ReadOnlyDict.t_of_js
              (fun (x937 : Ojs.t) ->
                 Ojs.list_of_js Node_net.Net.Socket.t_of_js x937)
              (Ojs.get_prop_ascii (t_to_js x936) "sockets")
        let (get_requests : t -> IncomingMessage.t list ReadOnlyDict.t) =
          fun (x939 : t) ->
            ReadOnlyDict.t_of_js
              (fun (x940 : Ojs.t) ->
                 Ojs.list_of_js IncomingMessage.t_of_js x940)
              (Ojs.get_prop_ascii (t_to_js x939) "requests")
        let (create : ?opts:AgentOptions.t -> unit -> t) =
          fun ?opts:(x942 : AgentOptions.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.http "Agent")
                   (let x943 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x942 with
                     | Some x944 ->
                         ignore
                           (Ojs.call x943 "push"
                              [|(AgentOptions.t_to_js x944)|])
                     | None -> ());
                    x943))
        let (destroy : t -> unit) =
          fun (x945 : t) -> ignore (Ojs.call (t_to_js x945) "destroy" [||])
      end
    let (m_ethods : string list) =
      Ojs.list_of_js Ojs.string_of_js
        (Ojs.get_prop_ascii Import.http "METHODS")
    let (s_tatus_codes : AnonymousInterface0.t) =
      AnonymousInterface0.t_of_js
        (Ojs.get_prop_ascii Import.http "STATUS_CODES")
    let (create_server :
      ?request_listener:RequestListener.t -> unit -> Server.t) =
      fun ?request_listener:(x947 : RequestListener.t option) ->
        fun () ->
          Server.t_of_js
            (let x950 = Import.http in
             Ojs.call (Ojs.get_prop_ascii x950 "createServer") "apply"
               [|x950;((let x948 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x947 with
                         | Some x949 ->
                             ignore
                               (Ojs.call x948 "push"
                                  [|(RequestListener.t_to_js x949)|])
                         | None -> ());
                        x948))|])
    let (create_server :
      options:ServerOptions.t ->
        ?request_listener:RequestListener.t -> unit -> Server.t)
      =
      fun ~options:(x951 : ServerOptions.t) ->
        fun ?request_listener:(x952 : RequestListener.t option) ->
          fun () ->
            Server.t_of_js
              (let x955 = Import.http in
               Ojs.call (Ojs.get_prop_ascii x955 "createServer") "apply"
                 [|x955;((let x953 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x953 "push"
                               [|(ServerOptions.t_to_js x951)|]);
                          (match x952 with
                           | Some x954 ->
                               ignore
                                 (Ojs.call x953 "push"
                                    [|(RequestListener.t_to_js x954)|])
                           | None -> ());
                          x953))|])
    module RequestOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x957 : Ojs.t) -> x957
        and t_to_js : t -> Ojs.t = fun (x956 : Ojs.t) -> x956
        let (cast : t -> ClientRequestArgs.t) =
          fun (x958 : t) -> ClientRequestArgs.t_of_js (t_to_js x958)
      end
    let (request :
      options:(RequestOptions.t, Node_url.Url.Url.t) union2 or_string ->
        ?callback:(res:IncomingMessage.t -> unit) -> unit -> ClientRequest.t)
      =
      fun
        ~options:(x959 :
                   (RequestOptions.t, Node_url.Url.Url.t) union2 or_string)
        ->
        fun ?callback:(x960 : (res:IncomingMessage.t -> unit) option) ->
          fun () ->
            ClientRequest.t_of_js
              (let x967 = Import.http in
               Ojs.call (Ojs.get_prop_ascii x967 "request") "apply"
                 [|x967;((let x961 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x961 "push"
                               [|(or_string_to_js
                                    (fun
                                       (x964 :
                                         (RequestOptions.t,
                                           Node_url.Url.Url.t) union2)
                                       ->
                                       union2_to_js RequestOptions.t_to_js
                                         Node_url.Url.Url.t_to_js x964) x959)|]);
                          (match x960 with
                           | Some x962 ->
                               ignore
                                 (Ojs.call x961 "push"
                                    [|(Ojs.fun_to_js 1
                                         (fun (x963 : Ojs.t) ->
                                            x962
                                              ~res:(IncomingMessage.t_of_js
                                                      x963)))|])
                           | None -> ());
                          x961))|])
    let (request :
      url:Node_url.Url.Url.t or_string ->
        options:RequestOptions.t ->
          ?callback:(res:IncomingMessage.t -> unit) ->
            unit -> ClientRequest.t)
      =
      fun ~url:(x968 : Node_url.Url.Url.t or_string) ->
        fun ~options:(x969 : RequestOptions.t) ->
          fun ?callback:(x970 : (res:IncomingMessage.t -> unit) option) ->
            fun () ->
              ClientRequest.t_of_js
                (let x975 = Import.http in
                 Ojs.call (Ojs.get_prop_ascii x975 "request") "apply"
                   [|x975;((let x971 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x971 "push"
                                 [|(or_string_to_js Node_url.Url.Url.t_to_js
                                      x968)|]);
                            ignore
                              (Ojs.call x971 "push"
                                 [|(RequestOptions.t_to_js x969)|]);
                            (match x970 with
                             | Some x972 ->
                                 ignore
                                   (Ojs.call x971 "push"
                                      [|(Ojs.fun_to_js 1
                                           (fun (x973 : Ojs.t) ->
                                              x972
                                                ~res:(IncomingMessage.t_of_js
                                                        x973)))|])
                             | None -> ());
                            x971))|])
    let (get_ :
      options:(RequestOptions.t, Node_url.Url.Url.t) union2 or_string ->
        ?callback:(res:IncomingMessage.t -> unit) -> unit -> ClientRequest.t)
      =
      fun
        ~options:(x976 :
                   (RequestOptions.t, Node_url.Url.Url.t) union2 or_string)
        ->
        fun ?callback:(x977 : (res:IncomingMessage.t -> unit) option) ->
          fun () ->
            ClientRequest.t_of_js
              (let x984 = Import.http in
               Ojs.call (Ojs.get_prop_ascii x984 "get") "apply"
                 [|x984;((let x978 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x978 "push"
                               [|(or_string_to_js
                                    (fun
                                       (x981 :
                                         (RequestOptions.t,
                                           Node_url.Url.Url.t) union2)
                                       ->
                                       union2_to_js RequestOptions.t_to_js
                                         Node_url.Url.Url.t_to_js x981) x976)|]);
                          (match x977 with
                           | Some x979 ->
                               ignore
                                 (Ojs.call x978 "push"
                                    [|(Ojs.fun_to_js 1
                                         (fun (x980 : Ojs.t) ->
                                            x979
                                              ~res:(IncomingMessage.t_of_js
                                                      x980)))|])
                           | None -> ());
                          x978))|])
    let (get_ :
      url:Node_url.Url.Url.t or_string ->
        options:RequestOptions.t ->
          ?callback:(res:IncomingMessage.t -> unit) ->
            unit -> ClientRequest.t)
      =
      fun ~url:(x985 : Node_url.Url.Url.t or_string) ->
        fun ~options:(x986 : RequestOptions.t) ->
          fun ?callback:(x987 : (res:IncomingMessage.t -> unit) option) ->
            fun () ->
              ClientRequest.t_of_js
                (let x992 = Import.http in
                 Ojs.call (Ojs.get_prop_ascii x992 "get") "apply"
                   [|x992;((let x988 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x988 "push"
                                 [|(or_string_to_js Node_url.Url.Url.t_to_js
                                      x985)|]);
                            ignore
                              (Ojs.call x988 "push"
                                 [|(RequestOptions.t_to_js x986)|]);
                            (match x987 with
                             | Some x989 ->
                                 ignore
                                   (Ojs.call x988 "push"
                                      [|(Ojs.fun_to_js 1
                                           (fun (x990 : Ojs.t) ->
                                              x989
                                                ~res:(IncomingMessage.t_of_js
                                                        x990)))|])
                             | None -> ());
                            x988))|])
    let (global_agent : http_Agent) =
      http_Agent_of_js (Ojs.get_prop_ascii Import.http "globalAgent")
    let (max_header_size : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.http "maxHeaderSize")
  end
