[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4 : Ojs.t) -> x4
    and t_to_js : t -> Ojs.t = fun (x3 : Ojs.t) -> x3
    let (get_fatal : t -> bool) =
      fun (x5 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x5) "fatal")
    let (set_fatal : t -> bool -> unit) =
      fun (x6 : t) ->
        fun (x7 : bool) ->
          Ojs.set_prop_ascii (t_to_js x6) "fatal" (Ojs.bool_to_js x7)
    let (get_ignore_bom : t -> bool) =
      fun (x8 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x8) "ignoreBOM")
    let (set_ignore_bom : t -> bool -> unit) =
      fun (x9 : t) ->
        fun (x10 : bool) ->
          Ojs.set_prop_ascii (t_to_js x9) "ignoreBOM" (Ojs.bool_to_js x10)
  end
module AnonymousInterface2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x12 : Ojs.t) -> x12
    and t_to_js : t -> Ojs.t = fun (x11 : Ojs.t) -> x11
    let (get_stream : t -> bool) =
      fun (x13 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x13) "stream")
    let (set_stream : t -> bool -> unit) =
      fun (x14 : t) ->
        fun (x15 : bool) ->
          Ojs.set_prop_ascii (t_to_js x14) "stream" (Ojs.bool_to_js x15)
  end
module Util =
  struct
    module InspectOptions =
      struct include struct include InspectOptions end end
    module Style =
      struct
        type t =
          [ `bigint  | `boolean  | `date  | `module_  | `null  | `number 
          | `regexp  | `special  | `string  | `symbol  | `undefined ]
        let rec t_of_js : Ojs.t -> t =
          fun (x17 : Ojs.t) ->
            let x18 = x17 in
            match Ojs.string_of_js x18 with
            | "bigint" -> `bigint
            | "boolean" -> `boolean
            | "date" -> `date
            | "module" -> `module_
            | "null" -> `null
            | "number" -> `number
            | "regexp" -> `regexp
            | "special" -> `special
            | "string" -> `string
            | "symbol" -> `symbol
            | "undefined" -> `undefined
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x16 :
              [ `bigint  | `boolean  | `date  | `module_  | `null  | 
                `number 
              | `regexp  | `special  | `string  | `symbol  | `undefined ])
            ->
            match x16 with
            | `bigint -> Ojs.string_to_js "bigint"
            | `boolean -> Ojs.string_to_js "boolean"
            | `date -> Ojs.string_to_js "date"
            | `module_ -> Ojs.string_to_js "module"
            | `null -> Ojs.string_to_js "null"
            | `number -> Ojs.string_to_js "number"
            | `regexp -> Ojs.string_to_js "regexp"
            | `special -> Ojs.string_to_js "special"
            | `string -> Ojs.string_to_js "string"
            | `symbol -> Ojs.string_to_js "symbol"
            | `undefined -> Ojs.string_to_js "undefined"
      end
    module InspectOptionsStylized =
      struct
        include struct include InspectOptions end
        let (stylize : t -> text:string -> style_type:Style.t -> string) =
          fun (x21 : t) ->
            fun ~text:(x19 : string) ->
              fun ~style_type:(x20 : Style.t) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x21) "stylize"
                     [|(Ojs.string_to_js x19);(Style.t_to_js x20)|])
      end
    module CustomInspectFunction =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x23 : Ojs.t) -> x23
        and t_to_js : t -> Ojs.t = fun (x22 : Ojs.t) -> x22
        let (apply :
          t -> depth:int -> options:InspectOptionsStylized.t -> string) =
          fun (x26 : t) ->
            fun ~depth:(x24 : int) ->
              fun ~options:(x25 : InspectOptionsStylized.t) ->
                Ojs.string_of_js
                  (Ojs.apply (t_to_js x26)
                     [|(Ojs.int_to_js x24);(InspectOptionsStylized.t_to_js
                                              x25)|])
      end
    let (format : ?format:any -> param:any list -> unit -> string) =
      fun ?format:(x27 : any option) ->
        fun ~param:(x28 : any list) ->
          fun () ->
            Ojs.string_of_js
              (let x32 = Import.util in
               Ojs.call (Ojs.get_prop_ascii x32 "format") "apply"
                 [|x32;((let x29 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         (match x27 with
                          | Some x31 ->
                              ignore
                                (Ojs.call x29 "push" [|(any_to_js x31)|])
                          | None -> ());
                         List.iter
                           (fun (x30 : any) ->
                              ignore
                                (Ojs.call x29 "push" [|(any_to_js x30)|]))
                           x28;
                         x29))|])
    let (format_with_options :
      inspect_options:InspectOptions.t ->
        ?format:any -> param:any list -> unit -> string)
      =
      fun ~inspect_options:(x33 : InspectOptions.t) ->
        fun ?format:(x34 : any option) ->
          fun ~param:(x35 : any list) ->
            fun () ->
              Ojs.string_of_js
                (let x39 = Import.util in
                 Ojs.call (Ojs.get_prop_ascii x39 "formatWithOptions")
                   "apply"
                   [|x39;((let x36 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x36 "push"
                                [|(InspectOptions.t_to_js x33)|]);
                           (match x34 with
                            | Some x38 ->
                                ignore
                                  (Ojs.call x36 "push" [|(any_to_js x38)|])
                            | None -> ());
                           List.iter
                             (fun (x37 : any) ->
                                ignore
                                  (Ojs.call x36 "push" [|(any_to_js x37)|]))
                             x35;
                           x36))|])
    let (log : string:string -> unit) =
      fun ~string:(x40 : string) ->
        ignore (Ojs.call Import.util "log" [|(Ojs.string_to_js x40)|])
    let (inspect :
      object_:any ->
        ?show_hidden:bool ->
          ?depth:int or_null -> ?color:bool -> unit -> string)
      =
      fun ~object_:(x41 : any) ->
        fun ?show_hidden:(x42 : bool option) ->
          fun ?depth:(x43 : int or_null option) ->
            fun ?color:(x44 : bool option) ->
              fun () ->
                Ojs.string_of_js
                  (let x50 = Import.util in
                   Ojs.call (Ojs.get_prop_ascii x50 "inspect") "apply"
                     [|x50;((let x45 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore (Ojs.call x45 "push" [|(any_to_js x41)|]);
                             (match x42 with
                              | Some x49 ->
                                  ignore
                                    (Ojs.call x45 "push"
                                       [|(Ojs.bool_to_js x49)|])
                              | None -> ());
                             (match x43 with
                              | Some x47 ->
                                  ignore
                                    (Ojs.call x45 "push"
                                       [|(or_null_to_js Ojs.int_to_js x47)|])
                              | None -> ());
                             (match x44 with
                              | Some x46 ->
                                  ignore
                                    (Ojs.call x45 "push"
                                       [|(Ojs.bool_to_js x46)|])
                              | None -> ());
                             x45))|])
    let (inspect : object_:any -> options:InspectOptions.t -> string) =
      fun ~object_:(x51 : any) ->
        fun ~options:(x52 : InspectOptions.t) ->
          Ojs.string_of_js
            (Ojs.call Import.util "inspect"
               [|(any_to_js x51);(InspectOptions.t_to_js x52)|])
    module Inspect =
      struct
        let (colors : (int * int) Dict.t) =
          Dict.t_of_js
            (fun (x53 : Ojs.t) ->
               let x54 = x53 in
               ((Ojs.int_of_js (Ojs.array_get x54 0)),
                 (Ojs.int_of_js (Ojs.array_get x54 1))))
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.util "inspect")
               "colors")
        let (styles : any) =
          any_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.util "inspect")
               "styles")
        let (default_options : InspectOptions.t) =
          InspectOptions.t_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.util "inspect")
               "defaultOptions")
        let (repl_defaults : InspectOptions.t) =
          InspectOptions.t_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.util "inspect")
               "replDefaults")
        let (custom : any) =
          any_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.util "inspect")
               "custom")
      end
    let (is_array : object_:any -> bool) =
      fun ~object_:(x55 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isArray" [|(any_to_js x55)|])
    let (is_reg_exp : object_:any -> bool) =
      fun ~object_:(x56 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isRegExp" [|(any_to_js x56)|])
    let (is_date : object_:any -> bool) =
      fun ~object_:(x57 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isDate" [|(any_to_js x57)|])
    let (is_error : object_:any -> bool) =
      fun ~object_:(x58 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isError" [|(any_to_js x58)|])
    let (inherits : constructor:any -> super_constructor:any -> unit) =
      fun ~constructor:(x59 : any) ->
        fun ~super_constructor:(x60 : any) ->
          ignore
            (Ojs.call Import.util "inherits"
               [|(any_to_js x59);(any_to_js x60)|])
    let (debuglog : key:string -> msg:string -> param:any list -> unit) =
      fun ~key:(x61 : string) ->
        fun ~msg:(x62 : string) ->
          fun ~param:(x63 : any list) ->
            ignore
              (Ojs.call
                 (Ojs.call Import.util "debuglog" [|(Ojs.string_to_js x61)|])
                 "apply"
                 [|Ojs.null;((let x64 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x64 "push"
                                   [|(Ojs.string_to_js x62)|]);
                              List.iter
                                (fun (x65 : any) ->
                                   ignore
                                     (Ojs.call x64 "push" [|(any_to_js x65)|]))
                                x63;
                              x64))|])
    let (is_boolean : object_:any -> bool) =
      fun ~object_:(x66 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isBoolean" [|(any_to_js x66)|])
    let (is_buffer : object_:any -> bool) =
      fun ~object_:(x67 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isBuffer" [|(any_to_js x67)|])
    let (is_function : object_:any -> bool) =
      fun ~object_:(x68 : any) ->
        Ojs.bool_of_js
          (Ojs.call Import.util "isFunction" [|(any_to_js x68)|])
    let (is_null : object_:any -> bool) =
      fun ~object_:(x69 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isNull" [|(any_to_js x69)|])
    let (is_null_or_undefined : object_:any -> bool) =
      fun ~object_:(x70 : any) ->
        Ojs.bool_of_js
          (Ojs.call Import.util "isNullOrUndefined" [|(any_to_js x70)|])
    let (is_number : object_:any -> bool) =
      fun ~object_:(x71 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isNumber" [|(any_to_js x71)|])
    let (is_object : object_:any -> bool) =
      fun ~object_:(x72 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isObject" [|(any_to_js x72)|])
    let (is_primitive : object_:any -> bool) =
      fun ~object_:(x73 : any) ->
        Ojs.bool_of_js
          (Ojs.call Import.util "isPrimitive" [|(any_to_js x73)|])
    let (is_string : object_:any -> bool) =
      fun ~object_:(x74 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isString" [|(any_to_js x74)|])
    let (is_symbol : object_:any -> bool) =
      fun ~object_:(x75 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isSymbol" [|(any_to_js x75)|])
    let (is_undefined : object_:any -> bool) =
      fun ~object_:(x76 : any) ->
        Ojs.bool_of_js
          (Ojs.call Import.util "isUndefined" [|(any_to_js x76)|])
    let (deprecate : fn:'T -> message:string -> ?code:string -> unit -> 'T) =
      fun ~fn:(x77 : 'T) ->
        fun ~message:(x78 : string) ->
          fun ?code:(x79 : string option) ->
            fun () ->
              Obj.magic
                (let x82 = Import.util in
                 Ojs.call (Ojs.get_prop_ascii x82 "deprecate") "apply"
                   [|x82;((let x80 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore (Ojs.call x80 "push" [|(Obj.magic x77)|]);
                           ignore
                             (Ojs.call x80 "push" [|(Ojs.string_to_js x78)|]);
                           (match x79 with
                            | Some x81 ->
                                ignore
                                  (Ojs.call x80 "push"
                                     [|(Ojs.string_to_js x81)|])
                            | None -> ());
                           x80))|])
    let (is_deep_strict_equal : val1:any -> val2:any -> bool) =
      fun ~val1:(x83 : any) ->
        fun ~val2:(x84 : any) ->
          Ojs.bool_of_js
            (Ojs.call Import.util "isDeepStrictEqual"
               [|(any_to_js x83);(any_to_js x84)|])
    let (callbackify :
      fn:(unit -> unit Promise.t) ->
        callback:(err:ErrnoException.t -> unit) -> unit)
      =
      fun ~fn:(x85 : unit -> unit Promise.t) ->
        fun ~callback:(x87 : err:ErrnoException.t -> unit) ->
          ignore
            (Ojs.apply
               (Ojs.call Import.util "callbackify"
                  [|(Ojs.fun_to_js 1
                       (fun _ -> Promise.t_to_js Ojs.unit_to_js (x85 ())))|])
               [|(Ojs.fun_to_js 1
                    (fun (x88 : Ojs.t) ->
                       x87 ~err:(ErrnoException.t_of_js x88)))|])
    let (callbackify :
      fn:(unit -> 'TResult Promise.t) ->
        callback:(err:ErrnoException.t -> result:'TResult -> unit) -> unit)
      =
      fun ~fn:(x89 : unit -> 'TResult Promise.t) ->
        fun ~callback:(x91 : err:ErrnoException.t -> result:'TResult -> unit)
          ->
          ignore
            (Ojs.apply
               (Ojs.call Import.util "callbackify"
                  [|(Ojs.fun_to_js 1
                       (fun _ -> Promise.t_to_js Obj.magic (x89 ())))|])
               [|(Ojs.fun_to_js 2
                    (fun (x92 : Ojs.t) ->
                       fun (x93 : Ojs.t) ->
                         x91 ~err:(ErrnoException.t_of_js x92)
                           ~result:(Obj.magic x93)))|])
    let (callbackify :
      fn:(arg1:'T1 -> unit Promise.t) ->
        arg1:'T1 -> callback:(err:ErrnoException.t -> unit) -> unit)
      =
      fun ~fn:(x94 : arg1:'T1 -> unit Promise.t) ->
        fun ~arg1:(x97 : 'T1) ->
          fun ~callback:(x98 : err:ErrnoException.t -> unit) ->
            ignore
              (Ojs.apply
                 (Ojs.call Import.util "callbackify"
                    [|(Ojs.fun_to_js 1
                         (fun (x95 : Ojs.t) ->
                            Promise.t_to_js Ojs.unit_to_js
                              (x94 ~arg1:(Obj.magic x95))))|])
                 [|(Obj.magic x97);(Ojs.fun_to_js 1
                                      (fun (x99 : Ojs.t) ->
                                         x98
                                           ~err:(ErrnoException.t_of_js x99)))|])
    let (callbackify :
      fn:(arg1:'T1 -> 'TResult Promise.t) ->
        arg1:'T1 ->
          callback:(err:ErrnoException.t -> result:'TResult -> unit) -> unit)
      =
      fun ~fn:(x100 : arg1:'T1 -> 'TResult Promise.t) ->
        fun ~arg1:(x103 : 'T1) ->
          fun
            ~callback:(x104 :
                        err:ErrnoException.t -> result:'TResult -> unit)
            ->
            ignore
              (Ojs.apply
                 (Ojs.call Import.util "callbackify"
                    [|(Ojs.fun_to_js 1
                         (fun (x101 : Ojs.t) ->
                            Promise.t_to_js Obj.magic
                              (x100 ~arg1:(Obj.magic x101))))|])
                 [|(Obj.magic x103);(Ojs.fun_to_js 2
                                       (fun (x105 : Ojs.t) ->
                                          fun (x106 : Ojs.t) ->
                                            x104
                                              ~err:(ErrnoException.t_of_js
                                                      x105)
                                              ~result:(Obj.magic x106)))|])
    let (callbackify :
      fn:(arg1:'T1 -> arg2:'T2 -> unit Promise.t) ->
        arg1:'T1 ->
          arg2:'T2 -> callback:(err:ErrnoException.t -> unit) -> unit)
      =
      fun ~fn:(x107 : arg1:'T1 -> arg2:'T2 -> unit Promise.t) ->
        fun ~arg1:(x111 : 'T1) ->
          fun ~arg2:(x112 : 'T2) ->
            fun ~callback:(x113 : err:ErrnoException.t -> unit) ->
              ignore
                (Ojs.apply
                   (Ojs.call Import.util "callbackify"
                      [|(Ojs.fun_to_js 2
                           (fun (x108 : Ojs.t) ->
                              fun (x109 : Ojs.t) ->
                                Promise.t_to_js Ojs.unit_to_js
                                  (x107 ~arg1:(Obj.magic x108)
                                     ~arg2:(Obj.magic x109))))|])
                   [|(Obj.magic x111);(Obj.magic x112);(Ojs.fun_to_js 1
                                                          (fun (x114 : Ojs.t)
                                                             ->
                                                             x113
                                                               ~err:(
                                                               ErrnoException.t_of_js
                                                                 x114)))|])
    let (callbackify :
      fn:(arg1:'T1 -> arg2:'T2 -> 'TResult Promise.t) ->
        arg1:'T1 ->
          arg2:'T2 ->
            callback:(err:ErrnoException.t or_null -> result:'TResult -> unit)
              -> unit)
      =
      fun ~fn:(x115 : arg1:'T1 -> arg2:'T2 -> 'TResult Promise.t) ->
        fun ~arg1:(x119 : 'T1) ->
          fun ~arg2:(x120 : 'T2) ->
            fun
              ~callback:(x121 :
                          err:ErrnoException.t or_null ->
                            result:'TResult -> unit)
              ->
              ignore
                (Ojs.apply
                   (Ojs.call Import.util "callbackify"
                      [|(Ojs.fun_to_js 2
                           (fun (x116 : Ojs.t) ->
                              fun (x117 : Ojs.t) ->
                                Promise.t_to_js Obj.magic
                                  (x115 ~arg1:(Obj.magic x116)
                                     ~arg2:(Obj.magic x117))))|])
                   [|(Obj.magic x119);(Obj.magic x120);(Ojs.fun_to_js 2
                                                          (fun (x122 : Ojs.t)
                                                             ->
                                                             fun
                                                               (x124 : Ojs.t)
                                                               ->
                                                               x121
                                                                 ~err:(
                                                                 or_null_of_js
                                                                   ErrnoException.t_of_js
                                                                   x122)
                                                                 ~result:(
                                                                 Obj.magic
                                                                   x124)))|])
    let (callbackify :
      fn:(arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> unit Promise.t) ->
        arg1:'T1 ->
          arg2:'T2 ->
            arg3:'T3 -> callback:(err:ErrnoException.t -> unit) -> unit)
      =
      fun ~fn:(x125 : arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> unit Promise.t) ->
        fun ~arg1:(x130 : 'T1) ->
          fun ~arg2:(x131 : 'T2) ->
            fun ~arg3:(x132 : 'T3) ->
              fun ~callback:(x133 : err:ErrnoException.t -> unit) ->
                ignore
                  (Ojs.apply
                     (Ojs.call Import.util "callbackify"
                        [|(Ojs.fun_to_js 3
                             (fun (x126 : Ojs.t) ->
                                fun (x127 : Ojs.t) ->
                                  fun (x128 : Ojs.t) ->
                                    Promise.t_to_js Ojs.unit_to_js
                                      (x125 ~arg1:(Obj.magic x126)
                                         ~arg2:(Obj.magic x127)
                                         ~arg3:(Obj.magic x128))))|])
                     [|(Obj.magic x130);(Obj.magic x131);(Obj.magic x132);(
                       Ojs.fun_to_js 1
                         (fun (x134 : Ojs.t) ->
                            x133 ~err:(ErrnoException.t_of_js x134)))|])
    let (callbackify :
      fn:(arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> 'TResult Promise.t) ->
        arg1:'T1 ->
          arg2:'T2 ->
            arg3:'T3 ->
              callback:(err:ErrnoException.t or_null ->
                          result:'TResult -> unit)
                -> unit)
      =
      fun ~fn:(x135 : arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> 'TResult Promise.t)
        ->
        fun ~arg1:(x140 : 'T1) ->
          fun ~arg2:(x141 : 'T2) ->
            fun ~arg3:(x142 : 'T3) ->
              fun
                ~callback:(x143 :
                            err:ErrnoException.t or_null ->
                              result:'TResult -> unit)
                ->
                ignore
                  (Ojs.apply
                     (Ojs.call Import.util "callbackify"
                        [|(Ojs.fun_to_js 3
                             (fun (x136 : Ojs.t) ->
                                fun (x137 : Ojs.t) ->
                                  fun (x138 : Ojs.t) ->
                                    Promise.t_to_js Obj.magic
                                      (x135 ~arg1:(Obj.magic x136)
                                         ~arg2:(Obj.magic x137)
                                         ~arg3:(Obj.magic x138))))|])
                     [|(Obj.magic x140);(Obj.magic x141);(Obj.magic x142);(
                       Ojs.fun_to_js 2
                         (fun (x144 : Ojs.t) ->
                            fun (x146 : Ojs.t) ->
                              x143
                                ~err:(or_null_of_js ErrnoException.t_of_js
                                        x144) ~result:(Obj.magic x146)))|])
    let (callbackify :
      fn:(arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> arg4:'T4 -> unit Promise.t) ->
        arg1:'T1 ->
          arg2:'T2 ->
            arg3:'T3 ->
              arg4:'T4 -> callback:(err:ErrnoException.t -> unit) -> unit)
      =
      fun
        ~fn:(x147 :
              arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> arg4:'T4 -> unit Promise.t)
        ->
        fun ~arg1:(x153 : 'T1) ->
          fun ~arg2:(x154 : 'T2) ->
            fun ~arg3:(x155 : 'T3) ->
              fun ~arg4:(x156 : 'T4) ->
                fun ~callback:(x157 : err:ErrnoException.t -> unit) ->
                  ignore
                    (Ojs.apply
                       (Ojs.call Import.util "callbackify"
                          [|(Ojs.fun_to_js 4
                               (fun (x148 : Ojs.t) ->
                                  fun (x149 : Ojs.t) ->
                                    fun (x150 : Ojs.t) ->
                                      fun (x151 : Ojs.t) ->
                                        Promise.t_to_js Ojs.unit_to_js
                                          (x147 ~arg1:(Obj.magic x148)
                                             ~arg2:(Obj.magic x149)
                                             ~arg3:(Obj.magic x150)
                                             ~arg4:(Obj.magic x151))))|])
                       [|(Obj.magic x153);(Obj.magic x154);(Obj.magic x155);(
                         Obj.magic x156);(Ojs.fun_to_js 1
                                            (fun (x158 : Ojs.t) ->
                                               x157
                                                 ~err:(ErrnoException.t_of_js
                                                         x158)))|])
    let (callbackify :
      fn:(arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> arg4:'T4 -> 'TResult Promise.t)
        ->
        arg1:'T1 ->
          arg2:'T2 ->
            arg3:'T3 ->
              arg4:'T4 ->
                callback:(err:ErrnoException.t or_null ->
                            result:'TResult -> unit)
                  -> unit)
      =
      fun
        ~fn:(x159 :
              arg1:'T1 ->
                arg2:'T2 -> arg3:'T3 -> arg4:'T4 -> 'TResult Promise.t)
        ->
        fun ~arg1:(x165 : 'T1) ->
          fun ~arg2:(x166 : 'T2) ->
            fun ~arg3:(x167 : 'T3) ->
              fun ~arg4:(x168 : 'T4) ->
                fun
                  ~callback:(x169 :
                              err:ErrnoException.t or_null ->
                                result:'TResult -> unit)
                  ->
                  ignore
                    (Ojs.apply
                       (Ojs.call Import.util "callbackify"
                          [|(Ojs.fun_to_js 4
                               (fun (x160 : Ojs.t) ->
                                  fun (x161 : Ojs.t) ->
                                    fun (x162 : Ojs.t) ->
                                      fun (x163 : Ojs.t) ->
                                        Promise.t_to_js Obj.magic
                                          (x159 ~arg1:(Obj.magic x160)
                                             ~arg2:(Obj.magic x161)
                                             ~arg3:(Obj.magic x162)
                                             ~arg4:(Obj.magic x163))))|])
                       [|(Obj.magic x165);(Obj.magic x166);(Obj.magic x167);(
                         Obj.magic x168);(Ojs.fun_to_js 2
                                            (fun (x170 : Ojs.t) ->
                                               fun (x172 : Ojs.t) ->
                                                 x169
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x170)
                                                   ~result:(Obj.magic x172)))|])
    let (callbackify :
      fn:(arg1:'T1 ->
            arg2:'T2 -> arg3:'T3 -> arg4:'T4 -> arg5:'T5 -> unit Promise.t)
        ->
        arg1:'T1 ->
          arg2:'T2 ->
            arg3:'T3 ->
              arg4:'T4 ->
                arg5:'T5 -> callback:(err:ErrnoException.t -> unit) -> unit)
      =
      fun
        ~fn:(x173 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 -> arg4:'T4 -> arg5:'T5 -> unit Promise.t)
        ->
        fun ~arg1:(x180 : 'T1) ->
          fun ~arg2:(x181 : 'T2) ->
            fun ~arg3:(x182 : 'T3) ->
              fun ~arg4:(x183 : 'T4) ->
                fun ~arg5:(x184 : 'T5) ->
                  fun ~callback:(x185 : err:ErrnoException.t -> unit) ->
                    ignore
                      (Ojs.apply
                         (Ojs.call Import.util "callbackify"
                            [|(Ojs.fun_to_js 5
                                 (fun (x174 : Ojs.t) ->
                                    fun (x175 : Ojs.t) ->
                                      fun (x176 : Ojs.t) ->
                                        fun (x177 : Ojs.t) ->
                                          fun (x178 : Ojs.t) ->
                                            Promise.t_to_js Ojs.unit_to_js
                                              (x173 ~arg1:(Obj.magic x174)
                                                 ~arg2:(Obj.magic x175)
                                                 ~arg3:(Obj.magic x176)
                                                 ~arg4:(Obj.magic x177)
                                                 ~arg5:(Obj.magic x178))))|])
                         [|(Obj.magic x180);(Obj.magic x181);(Obj.magic x182);(
                           Obj.magic x183);(Obj.magic x184);(Ojs.fun_to_js 1
                                                               (fun
                                                                  (x186 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x185
                                                                    ~err:(
                                                                    ErrnoException.t_of_js
                                                                    x186)))|])
    let (callbackify :
      fn:(arg1:'T1 ->
            arg2:'T2 ->
              arg3:'T3 -> arg4:'T4 -> arg5:'T5 -> 'TResult Promise.t)
        ->
        arg1:'T1 ->
          arg2:'T2 ->
            arg3:'T3 ->
              arg4:'T4 ->
                arg5:'T5 ->
                  callback:(err:ErrnoException.t or_null ->
                              result:'TResult -> unit)
                    -> unit)
      =
      fun
        ~fn:(x187 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 -> arg4:'T4 -> arg5:'T5 -> 'TResult Promise.t)
        ->
        fun ~arg1:(x194 : 'T1) ->
          fun ~arg2:(x195 : 'T2) ->
            fun ~arg3:(x196 : 'T3) ->
              fun ~arg4:(x197 : 'T4) ->
                fun ~arg5:(x198 : 'T5) ->
                  fun
                    ~callback:(x199 :
                                err:ErrnoException.t or_null ->
                                  result:'TResult -> unit)
                    ->
                    ignore
                      (Ojs.apply
                         (Ojs.call Import.util "callbackify"
                            [|(Ojs.fun_to_js 5
                                 (fun (x188 : Ojs.t) ->
                                    fun (x189 : Ojs.t) ->
                                      fun (x190 : Ojs.t) ->
                                        fun (x191 : Ojs.t) ->
                                          fun (x192 : Ojs.t) ->
                                            Promise.t_to_js Obj.magic
                                              (x187 ~arg1:(Obj.magic x188)
                                                 ~arg2:(Obj.magic x189)
                                                 ~arg3:(Obj.magic x190)
                                                 ~arg4:(Obj.magic x191)
                                                 ~arg5:(Obj.magic x192))))|])
                         [|(Obj.magic x194);(Obj.magic x195);(Obj.magic x196);(
                           Obj.magic x197);(Obj.magic x198);(Ojs.fun_to_js 2
                                                               (fun
                                                                  (x200 :
                                                                    Ojs.t)
                                                                  ->
                                                                  fun
                                                                    (x202 :
                                                                    Ojs.t) ->
                                                                    x199
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x200)
                                                                    ~result:(
                                                                    Obj.magic
                                                                    x202)))|])
    let (callbackify :
      fn:(arg1:'T1 ->
            arg2:'T2 ->
              arg3:'T3 -> arg4:'T4 -> arg5:'T5 -> arg6:'T6 -> unit Promise.t)
        ->
        arg1:'T1 ->
          arg2:'T2 ->
            arg3:'T3 ->
              arg4:'T4 ->
                arg5:'T5 ->
                  arg6:'T6 -> callback:(err:ErrnoException.t -> unit) -> unit)
      =
      fun
        ~fn:(x203 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 ->
                    arg4:'T4 -> arg5:'T5 -> arg6:'T6 -> unit Promise.t)
        ->
        fun ~arg1:(x211 : 'T1) ->
          fun ~arg2:(x212 : 'T2) ->
            fun ~arg3:(x213 : 'T3) ->
              fun ~arg4:(x214 : 'T4) ->
                fun ~arg5:(x215 : 'T5) ->
                  fun ~arg6:(x216 : 'T6) ->
                    fun ~callback:(x217 : err:ErrnoException.t -> unit) ->
                      ignore
                        (Ojs.apply
                           (Ojs.call Import.util "callbackify"
                              [|(Ojs.fun_to_js 6
                                   (fun (x204 : Ojs.t) ->
                                      fun (x205 : Ojs.t) ->
                                        fun (x206 : Ojs.t) ->
                                          fun (x207 : Ojs.t) ->
                                            fun (x208 : Ojs.t) ->
                                              fun (x209 : Ojs.t) ->
                                                Promise.t_to_js
                                                  Ojs.unit_to_js
                                                  (x203
                                                     ~arg1:(Obj.magic x204)
                                                     ~arg2:(Obj.magic x205)
                                                     ~arg3:(Obj.magic x206)
                                                     ~arg4:(Obj.magic x207)
                                                     ~arg5:(Obj.magic x208)
                                                     ~arg6:(Obj.magic x209))))|])
                           [|(Obj.magic x211);(Obj.magic x212);(Obj.magic
                                                                  x213);(
                             Obj.magic x214);(Obj.magic x215);(Obj.magic x216);(
                             Ojs.fun_to_js 1
                               (fun (x218 : Ojs.t) ->
                                  x217 ~err:(ErrnoException.t_of_js x218)))|])
    let (callbackify :
      fn:(arg1:'T1 ->
            arg2:'T2 ->
              arg3:'T3 ->
                arg4:'T4 -> arg5:'T5 -> arg6:'T6 -> 'TResult Promise.t)
        ->
        arg1:'T1 ->
          arg2:'T2 ->
            arg3:'T3 ->
              arg4:'T4 ->
                arg5:'T5 ->
                  arg6:'T6 ->
                    callback:(err:ErrnoException.t or_null ->
                                result:'TResult -> unit)
                      -> unit)
      =
      fun
        ~fn:(x219 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 ->
                    arg4:'T4 -> arg5:'T5 -> arg6:'T6 -> 'TResult Promise.t)
        ->
        fun ~arg1:(x227 : 'T1) ->
          fun ~arg2:(x228 : 'T2) ->
            fun ~arg3:(x229 : 'T3) ->
              fun ~arg4:(x230 : 'T4) ->
                fun ~arg5:(x231 : 'T5) ->
                  fun ~arg6:(x232 : 'T6) ->
                    fun
                      ~callback:(x233 :
                                  err:ErrnoException.t or_null ->
                                    result:'TResult -> unit)
                      ->
                      ignore
                        (Ojs.apply
                           (Ojs.call Import.util "callbackify"
                              [|(Ojs.fun_to_js 6
                                   (fun (x220 : Ojs.t) ->
                                      fun (x221 : Ojs.t) ->
                                        fun (x222 : Ojs.t) ->
                                          fun (x223 : Ojs.t) ->
                                            fun (x224 : Ojs.t) ->
                                              fun (x225 : Ojs.t) ->
                                                Promise.t_to_js Obj.magic
                                                  (x219
                                                     ~arg1:(Obj.magic x220)
                                                     ~arg2:(Obj.magic x221)
                                                     ~arg3:(Obj.magic x222)
                                                     ~arg4:(Obj.magic x223)
                                                     ~arg5:(Obj.magic x224)
                                                     ~arg6:(Obj.magic x225))))|])
                           [|(Obj.magic x227);(Obj.magic x228);(Obj.magic
                                                                  x229);(
                             Obj.magic x230);(Obj.magic x231);(Obj.magic x232);(
                             Ojs.fun_to_js 2
                               (fun (x234 : Ojs.t) ->
                                  fun (x236 : Ojs.t) ->
                                    x233
                                      ~err:(or_null_of_js
                                              ErrnoException.t_of_js x234)
                                      ~result:(Obj.magic x236)))|])
    module CustomPromisifyLegacy =
      struct
        type 'TCustom t = Ojs.t
        let rec t_of_js :
          'TCustom . (Ojs.t -> 'TCustom) -> Ojs.t -> 'TCustom t = fun (type
          __TCustom) ->
          fun (__TCustom_of_js : Ojs.t -> __TCustom) ->
            fun (x238 : Ojs.t) -> x238
        and t_to_js : 'TCustom . ('TCustom -> Ojs.t) -> 'TCustom t -> Ojs.t =
          fun (type __TCustom) ->
          fun (__TCustom_to_js : __TCustom -> Ojs.t) ->
            fun (x237 : Ojs.t) -> x237
        let (get___promisify__ : 'TCustom t -> 'TCustom) =
          fun (x239 : 'TCustom t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x239) "__promisify__")
        let (set___promisify__ : 'TCustom t -> 'TCustom -> unit) =
          fun (x241 : 'TCustom t) ->
            fun (x242 : 'TCustom) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x241) "__promisify__"
                (Obj.magic x242)
        let (cast : 'TCustom t -> untyped_function) =
          fun (x244 : 'TCustom t) ->
            untyped_function_of_js (t_to_js Obj.magic x244)
      end
    module CustomPromisifySymbol =
      struct
        type 'TCustom t = Ojs.t
        let rec t_of_js :
          'TCustom . (Ojs.t -> 'TCustom) -> Ojs.t -> 'TCustom t = fun (type
          __TCustom) ->
          fun (__TCustom_of_js : Ojs.t -> __TCustom) ->
            fun (x247 : Ojs.t) -> x247
        and t_to_js : 'TCustom . ('TCustom -> Ojs.t) -> 'TCustom t -> Ojs.t =
          fun (type __TCustom) ->
          fun (__TCustom_to_js : __TCustom -> Ojs.t) ->
            fun (x246 : Ojs.t) -> x246
        let (get__promisify_custom_ : 'TCustom t -> 'TCustom) =
          fun (x248 : 'TCustom t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x248)
                 "[promisify.custom]")
        let (set__promisify_custom_ : 'TCustom t -> 'TCustom -> unit) =
          fun (x250 : 'TCustom t) ->
            fun (x251 : 'TCustom) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x250)
                "[promisify.custom]" (Obj.magic x251)
        let (cast : 'TCustom t -> untyped_function) =
          fun (x253 : 'TCustom t) ->
            untyped_function_of_js (t_to_js Obj.magic x253)
      end
    module CustomPromisify =
      struct
        type 'TCustom t =
          ('TCustom CustomPromisifyLegacy.t,
            'TCustom CustomPromisifySymbol.t) union2
        let rec t_of_js :
          'TCustom . (Ojs.t -> 'TCustom) -> Ojs.t -> 'TCustom t = fun (type
          __TCustom) ->
          fun (__TCustom_of_js : Ojs.t -> __TCustom) ->
            fun (x260 : Ojs.t) ->
              union2_of_js
                (fun (x261 : Ojs.t) ->
                   CustomPromisifyLegacy.t_of_js __TCustom_of_js x261)
                (fun (x263 : Ojs.t) ->
                   CustomPromisifySymbol.t_of_js __TCustom_of_js x263) x260
        and t_to_js : 'TCustom . ('TCustom -> Ojs.t) -> 'TCustom t -> Ojs.t =
          fun (type __TCustom) ->
          fun (__TCustom_to_js : __TCustom -> Ojs.t) ->
            fun
              (x255 :
                (__TCustom CustomPromisifyLegacy.t,
                  __TCustom CustomPromisifySymbol.t) union2)
              ->
              union2_to_js
                (fun (x256 : __TCustom CustomPromisifyLegacy.t) ->
                   CustomPromisifyLegacy.t_to_js __TCustom_to_js x256)
                (fun (x258 : __TCustom CustomPromisifySymbol.t) ->
                   CustomPromisifySymbol.t_to_js __TCustom_to_js x258) x255
      end
    let (promisify : fn:'TCustom CustomPromisify.t -> 'TCustom) =
      fun ~fn:(x265 : 'TCustom CustomPromisify.t) ->
        Obj.magic
          (Ojs.call Import.util "promisify"
             [|(CustomPromisify.t_to_js Obj.magic x265)|])
    let (promisify :
      fn:(callback:(err:any -> result:'TResult -> unit) -> unit) ->
        unit -> 'TResult Promise.t)
      =
      fun ~fn:(x267 : callback:(err:any -> result:'TResult -> unit) -> unit)
        ->
        fun () ->
          Promise.t_of_js Obj.magic
            (Ojs.apply
               (Ojs.call Import.util "promisify"
                  [|(Ojs.fun_to_js 1
                       (fun (x268 : Ojs.t) ->
                          x267
                            ~callback:(fun ~err:(x269 : any) ->
                                         fun ~result:(x270 : 'TResult) ->
                                           ignore
                                             (Ojs.apply x268
                                                [|(any_to_js x269);(Obj.magic
                                                                    x270)|]))))|])
               [||])
    let (promisify :
      fn:(callback:(?err:any -> unit -> unit) -> unit) ->
        unit -> unit Promise.t)
      =
      fun ~fn:(x272 : callback:(?err:any -> unit -> unit) -> unit) ->
        fun () ->
          Promise.t_of_js Ojs.unit_of_js
            (Ojs.apply
               (Ojs.call Import.util "promisify"
                  [|(Ojs.fun_to_js 1
                       (fun (x273 : Ojs.t) ->
                          x272
                            ~callback:(fun ?err:(x274 : any option) ->
                                         fun () ->
                                           ignore
                                             (Ojs.call x273 "apply"
                                                [|Ojs.null;((let x275 =
                                                               Ojs.new_obj
                                                                 (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                 [||] in
                                                             (match x274 with
                                                              | Some x276 ->
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x275
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x276)|])
                                                              | None -> ());
                                                             x275))|]))))|])
               [||])
    let (promisify :
      fn:(arg1:'T1 -> callback:(err:any -> result:'TResult -> unit) -> unit)
        -> arg1:'T1 -> 'TResult Promise.t)
      =
      fun
        ~fn:(x278 :
              arg1:'T1 ->
                callback:(err:any -> result:'TResult -> unit) -> unit)
        ->
        fun ~arg1:(x283 : 'T1) ->
          Promise.t_of_js Obj.magic
            (Ojs.apply
               (Ojs.call Import.util "promisify"
                  [|(Ojs.fun_to_js 2
                       (fun (x279 : Ojs.t) ->
                          fun (x280 : Ojs.t) ->
                            x278 ~arg1:(Obj.magic x279)
                              ~callback:(fun ~err:(x281 : any) ->
                                           fun ~result:(x282 : 'TResult) ->
                                             ignore
                                               (Ojs.apply x280
                                                  [|(any_to_js x281);(
                                                    Obj.magic x282)|]))))|])
               [|(Obj.magic x283)|])
    let (promisify :
      fn:(arg1:'T1 -> callback:(?err:any -> unit -> unit) -> unit) ->
        arg1:'T1 -> unit Promise.t)
      =
      fun
        ~fn:(x285 : arg1:'T1 -> callback:(?err:any -> unit -> unit) -> unit)
        ->
        fun ~arg1:(x291 : 'T1) ->
          Promise.t_of_js Ojs.unit_of_js
            (Ojs.apply
               (Ojs.call Import.util "promisify"
                  [|(Ojs.fun_to_js 2
                       (fun (x286 : Ojs.t) ->
                          fun (x287 : Ojs.t) ->
                            x285 ~arg1:(Obj.magic x286)
                              ~callback:(fun ?err:(x288 : any option) ->
                                           fun () ->
                                             ignore
                                               (Ojs.call x287 "apply"
                                                  [|Ojs.null;((let x289 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               (match x288
                                                                with
                                                                | Some x290
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x289
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x290)|])
                                                                | None -> ());
                                                               x289))|]))))|])
               [|(Obj.magic x291)|])
    let (promisify :
      fn:(arg1:'T1 ->
            arg2:'T2 -> callback:(err:any -> result:'TResult -> unit) -> unit)
        -> arg1:'T1 -> arg2:'T2 -> 'TResult Promise.t)
      =
      fun
        ~fn:(x293 :
              arg1:'T1 ->
                arg2:'T2 ->
                  callback:(err:any -> result:'TResult -> unit) -> unit)
        ->
        fun ~arg1:(x299 : 'T1) ->
          fun ~arg2:(x300 : 'T2) ->
            Promise.t_of_js Obj.magic
              (Ojs.apply
                 (Ojs.call Import.util "promisify"
                    [|(Ojs.fun_to_js 3
                         (fun (x294 : Ojs.t) ->
                            fun (x295 : Ojs.t) ->
                              fun (x296 : Ojs.t) ->
                                x293 ~arg1:(Obj.magic x294)
                                  ~arg2:(Obj.magic x295)
                                  ~callback:(fun ~err:(x297 : any) ->
                                               fun ~result:(x298 : 'TResult)
                                                 ->
                                                 ignore
                                                   (Ojs.apply x296
                                                      [|(any_to_js x297);(
                                                        Obj.magic x298)|]))))|])
                 [|(Obj.magic x299);(Obj.magic x300)|])
    let (promisify :
      fn:(arg1:'T1 -> arg2:'T2 -> callback:(?err:any -> unit -> unit) -> unit)
        -> arg1:'T1 -> arg2:'T2 -> unit Promise.t)
      =
      fun
        ~fn:(x302 :
              arg1:'T1 ->
                arg2:'T2 -> callback:(?err:any -> unit -> unit) -> unit)
        ->
        fun ~arg1:(x309 : 'T1) ->
          fun ~arg2:(x310 : 'T2) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.apply
                 (Ojs.call Import.util "promisify"
                    [|(Ojs.fun_to_js 3
                         (fun (x303 : Ojs.t) ->
                            fun (x304 : Ojs.t) ->
                              fun (x305 : Ojs.t) ->
                                x302 ~arg1:(Obj.magic x303)
                                  ~arg2:(Obj.magic x304)
                                  ~callback:(fun ?err:(x306 : any option) ->
                                               fun () ->
                                                 ignore
                                                   (Ojs.call x305 "apply"
                                                      [|Ojs.null;((let x307 =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                   (match x306
                                                                    with
                                                                    | 
                                                                    Some x308
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x307
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x308)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                   x307))|]))))|])
                 [|(Obj.magic x309);(Obj.magic x310)|])
    let (promisify :
      fn:(arg1:'T1 ->
            arg2:'T2 ->
              arg3:'T3 ->
                callback:(err:any -> result:'TResult -> unit) -> unit)
        -> arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> 'TResult Promise.t)
      =
      fun
        ~fn:(x312 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 ->
                    callback:(err:any -> result:'TResult -> unit) -> unit)
        ->
        fun ~arg1:(x319 : 'T1) ->
          fun ~arg2:(x320 : 'T2) ->
            fun ~arg3:(x321 : 'T3) ->
              Promise.t_of_js Obj.magic
                (Ojs.apply
                   (Ojs.call Import.util "promisify"
                      [|(Ojs.fun_to_js 4
                           (fun (x313 : Ojs.t) ->
                              fun (x314 : Ojs.t) ->
                                fun (x315 : Ojs.t) ->
                                  fun (x316 : Ojs.t) ->
                                    x312 ~arg1:(Obj.magic x313)
                                      ~arg2:(Obj.magic x314)
                                      ~arg3:(Obj.magic x315)
                                      ~callback:(fun ~err:(x317 : any) ->
                                                   fun
                                                     ~result:(x318 :
                                                               'TResult)
                                                     ->
                                                     ignore
                                                       (Ojs.apply x316
                                                          [|(any_to_js x317);(
                                                            Obj.magic x318)|]))))|])
                   [|(Obj.magic x319);(Obj.magic x320);(Obj.magic x321)|])
    let (promisify :
      fn:(arg1:'T1 ->
            arg2:'T2 ->
              arg3:'T3 -> callback:(?err:any -> unit -> unit) -> unit)
        -> arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> unit Promise.t)
      =
      fun
        ~fn:(x323 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 -> callback:(?err:any -> unit -> unit) -> unit)
        ->
        fun ~arg1:(x331 : 'T1) ->
          fun ~arg2:(x332 : 'T2) ->
            fun ~arg3:(x333 : 'T3) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.apply
                   (Ojs.call Import.util "promisify"
                      [|(Ojs.fun_to_js 4
                           (fun (x324 : Ojs.t) ->
                              fun (x325 : Ojs.t) ->
                                fun (x326 : Ojs.t) ->
                                  fun (x327 : Ojs.t) ->
                                    x323 ~arg1:(Obj.magic x324)
                                      ~arg2:(Obj.magic x325)
                                      ~arg3:(Obj.magic x326)
                                      ~callback:(fun ?err:(x328 : any option)
                                                   ->
                                                   fun () ->
                                                     ignore
                                                       (Ojs.call x327 "apply"
                                                          [|Ojs.null;((
                                                            let x329 =
                                                              Ojs.new_obj
                                                                (Ojs.get_prop_ascii
                                                                   Ojs.global
                                                                   "Array")
                                                                [||] in
                                                            (match x328 with
                                                             | Some x330 ->
                                                                 ignore
                                                                   (Ojs.call
                                                                    x329
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x330)|])
                                                             | None -> ());
                                                            x329))|]))))|])
                   [|(Obj.magic x331);(Obj.magic x332);(Obj.magic x333)|])
    let (promisify :
      fn:(arg1:'T1 ->
            arg2:'T2 ->
              arg3:'T3 ->
                arg4:'T4 ->
                  callback:(err:any -> result:'TResult -> unit) -> unit)
        -> arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> arg4:'T4 -> 'TResult Promise.t)
      =
      fun
        ~fn:(x335 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 ->
                    arg4:'T4 ->
                      callback:(err:any -> result:'TResult -> unit) -> unit)
        ->
        fun ~arg1:(x343 : 'T1) ->
          fun ~arg2:(x344 : 'T2) ->
            fun ~arg3:(x345 : 'T3) ->
              fun ~arg4:(x346 : 'T4) ->
                Promise.t_of_js Obj.magic
                  (Ojs.apply
                     (Ojs.call Import.util "promisify"
                        [|(Ojs.fun_to_js 5
                             (fun (x336 : Ojs.t) ->
                                fun (x337 : Ojs.t) ->
                                  fun (x338 : Ojs.t) ->
                                    fun (x339 : Ojs.t) ->
                                      fun (x340 : Ojs.t) ->
                                        x335 ~arg1:(Obj.magic x336)
                                          ~arg2:(Obj.magic x337)
                                          ~arg3:(Obj.magic x338)
                                          ~arg4:(Obj.magic x339)
                                          ~callback:(fun ~err:(x341 : any) ->
                                                       fun
                                                         ~result:(x342 :
                                                                   'TResult)
                                                         ->
                                                         ignore
                                                           (Ojs.apply x340
                                                              [|(any_to_js
                                                                   x341);(
                                                                Obj.magic
                                                                  x342)|]))))|])
                     [|(Obj.magic x343);(Obj.magic x344);(Obj.magic x345);(
                       Obj.magic x346)|])
    let (promisify :
      fn:(arg1:'T1 ->
            arg2:'T2 ->
              arg3:'T3 ->
                arg4:'T4 -> callback:(?err:any -> unit -> unit) -> unit)
        -> arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> arg4:'T4 -> unit Promise.t)
      =
      fun
        ~fn:(x348 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 ->
                    arg4:'T4 -> callback:(?err:any -> unit -> unit) -> unit)
        ->
        fun ~arg1:(x357 : 'T1) ->
          fun ~arg2:(x358 : 'T2) ->
            fun ~arg3:(x359 : 'T3) ->
              fun ~arg4:(x360 : 'T4) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.apply
                     (Ojs.call Import.util "promisify"
                        [|(Ojs.fun_to_js 5
                             (fun (x349 : Ojs.t) ->
                                fun (x350 : Ojs.t) ->
                                  fun (x351 : Ojs.t) ->
                                    fun (x352 : Ojs.t) ->
                                      fun (x353 : Ojs.t) ->
                                        x348 ~arg1:(Obj.magic x349)
                                          ~arg2:(Obj.magic x350)
                                          ~arg3:(Obj.magic x351)
                                          ~arg4:(Obj.magic x352)
                                          ~callback:(fun
                                                       ?err:(x354 :
                                                              any option)
                                                       ->
                                                       fun () ->
                                                         ignore
                                                           (Ojs.call x353
                                                              "apply"
                                                              [|Ojs.null;((
                                                                let x355 =
                                                                  Ojs.new_obj
                                                                    (
                                                                    Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                (match x354
                                                                 with
                                                                 | Some x356
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x355
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x356)|])
                                                                 | None -> ());
                                                                x355))|]))))|])
                     [|(Obj.magic x357);(Obj.magic x358);(Obj.magic x359);(
                       Obj.magic x360)|])
    let (promisify :
      fn:(arg1:'T1 ->
            arg2:'T2 ->
              arg3:'T3 ->
                arg4:'T4 ->
                  arg5:'T5 ->
                    callback:(err:any -> result:'TResult -> unit) -> unit)
        ->
        arg1:'T1 ->
          arg2:'T2 -> arg3:'T3 -> arg4:'T4 -> arg5:'T5 -> 'TResult Promise.t)
      =
      fun
        ~fn:(x362 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 ->
                    arg4:'T4 ->
                      arg5:'T5 ->
                        callback:(err:any -> result:'TResult -> unit) -> unit)
        ->
        fun ~arg1:(x371 : 'T1) ->
          fun ~arg2:(x372 : 'T2) ->
            fun ~arg3:(x373 : 'T3) ->
              fun ~arg4:(x374 : 'T4) ->
                fun ~arg5:(x375 : 'T5) ->
                  Promise.t_of_js Obj.magic
                    (Ojs.apply
                       (Ojs.call Import.util "promisify"
                          [|(Ojs.fun_to_js 6
                               (fun (x363 : Ojs.t) ->
                                  fun (x364 : Ojs.t) ->
                                    fun (x365 : Ojs.t) ->
                                      fun (x366 : Ojs.t) ->
                                        fun (x367 : Ojs.t) ->
                                          fun (x368 : Ojs.t) ->
                                            x362 ~arg1:(Obj.magic x363)
                                              ~arg2:(Obj.magic x364)
                                              ~arg3:(Obj.magic x365)
                                              ~arg4:(Obj.magic x366)
                                              ~arg5:(Obj.magic x367)
                                              ~callback:(fun
                                                           ~err:(x369 : any)
                                                           ->
                                                           fun
                                                             ~result:
                                                             (x370 :
                                                               'TResult)
                                                             ->
                                                             ignore
                                                               (Ojs.apply
                                                                  x368
                                                                  [|(
                                                                    any_to_js
                                                                    x369);(
                                                                    Obj.magic
                                                                    x370)|]))))|])
                       [|(Obj.magic x371);(Obj.magic x372);(Obj.magic x373);(
                         Obj.magic x374);(Obj.magic x375)|])
    let (promisify :
      fn:(arg1:'T1 ->
            arg2:'T2 ->
              arg3:'T3 ->
                arg4:'T4 ->
                  arg5:'T5 -> callback:(?err:any -> unit -> unit) -> unit)
        ->
        arg1:'T1 ->
          arg2:'T2 -> arg3:'T3 -> arg4:'T4 -> arg5:'T5 -> unit Promise.t)
      =
      fun
        ~fn:(x377 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 ->
                    arg4:'T4 ->
                      arg5:'T5 -> callback:(?err:any -> unit -> unit) -> unit)
        ->
        fun ~arg1:(x387 : 'T1) ->
          fun ~arg2:(x388 : 'T2) ->
            fun ~arg3:(x389 : 'T3) ->
              fun ~arg4:(x390 : 'T4) ->
                fun ~arg5:(x391 : 'T5) ->
                  Promise.t_of_js Ojs.unit_of_js
                    (Ojs.apply
                       (Ojs.call Import.util "promisify"
                          [|(Ojs.fun_to_js 6
                               (fun (x378 : Ojs.t) ->
                                  fun (x379 : Ojs.t) ->
                                    fun (x380 : Ojs.t) ->
                                      fun (x381 : Ojs.t) ->
                                        fun (x382 : Ojs.t) ->
                                          fun (x383 : Ojs.t) ->
                                            x377 ~arg1:(Obj.magic x378)
                                              ~arg2:(Obj.magic x379)
                                              ~arg3:(Obj.magic x380)
                                              ~arg4:(Obj.magic x381)
                                              ~arg5:(Obj.magic x382)
                                              ~callback:(fun
                                                           ?err:(x384 :
                                                                  any option)
                                                           ->
                                                           fun () ->
                                                             ignore
                                                               (Ojs.call x383
                                                                  "apply"
                                                                  [|Ojs.null;((
                                                                    let x385
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    (
                                                                    match x384
                                                                    with
                                                                    | 
                                                                    Some x386
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x385
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x386)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x385))|]))))|])
                       [|(Obj.magic x387);(Obj.magic x388);(Obj.magic x389);(
                         Obj.magic x390);(Obj.magic x391)|])
    let (promisify : fn:untyped_function -> untyped_function) =
      fun ~fn:(x393 : untyped_function) ->
        untyped_function_of_js
          (Ojs.call Import.util "promisify" [|(untyped_function_to_js x393)|])
    module Promisify =
      struct
        let (custom : any) =
          any_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.util "promisify")
               "custom")
      end
    module Types =
      struct
        let (is_any_array_buffer : object_:any -> bool) =
          fun ~object_:(x394 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isAnyArrayBuffer" [|(any_to_js x394)|])
        let (is_arguments_object : object_:any -> bool) =
          fun ~object_:(x395 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isArgumentsObject" [|(any_to_js x395)|])
        let (is_array_buffer : object_:any -> bool) =
          fun ~object_:(x396 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isArrayBuffer" [|(any_to_js x396)|])
        let (is_array_buffer_view : object_:any -> bool) =
          fun ~object_:(x397 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isArrayBufferView" [|(any_to_js x397)|])
        let (is_async_function : object_:any -> bool) =
          fun ~object_:(x398 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isAsyncFunction" [|(any_to_js x398)|])
        let (is_big_int64Array : value:any -> bool) =
          fun ~value:(x399 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isBigInt64Array" [|(any_to_js x399)|])
        let (is_big_uint64Array : value:any -> bool) =
          fun ~value:(x400 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isBigUint64Array" [|(any_to_js x400)|])
        let (is_boolean_object : object_:any -> bool) =
          fun ~object_:(x401 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isBooleanObject" [|(any_to_js x401)|])
        let (is_boxed_primitive : object_:any -> bool) =
          fun ~object_:(x402 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isBoxedPrimitive" [|(any_to_js x402)|])
        let (is_data_view : object_:any -> bool) =
          fun ~object_:(x403 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isDataView"
                 [|(any_to_js x403)|])
        let (is_date : object_:any -> bool) =
          fun ~object_:(x404 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isDate"
                 [|(any_to_js x404)|])
        let (is_external : object_:any -> bool) =
          fun ~object_:(x405 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isExternal"
                 [|(any_to_js x405)|])
        let (is_float32Array : object_:any -> bool) =
          fun ~object_:(x406 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isFloat32Array" [|(any_to_js x406)|])
        let (is_float64Array : object_:any -> bool) =
          fun ~object_:(x407 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isFloat64Array" [|(any_to_js x407)|])
        let (is_generator_function : object_:any -> bool) =
          fun ~object_:(x408 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isGeneratorFunction" [|(any_to_js x408)|])
        let (is_generator_object : object_:any -> bool) =
          fun ~object_:(x409 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isGeneratorObject" [|(any_to_js x409)|])
        let (is_int8Array : object_:any -> bool) =
          fun ~object_:(x410 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isInt8Array" [|(any_to_js x410)|])
        let (is_int16Array : object_:any -> bool) =
          fun ~object_:(x411 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isInt16Array" [|(any_to_js x411)|])
        let (is_int32Array : object_:any -> bool) =
          fun ~object_:(x412 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isInt32Array" [|(any_to_js x412)|])
        let (is_map : object_:('T, AnonymousInterface0.t) union2 -> bool) =
          fun ~object_:(x413 : ('T, AnonymousInterface0.t) union2) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isMap"
                 [|(union2_to_js Obj.magic AnonymousInterface0.t_to_js x413)|])
        let (is_map_iterator : object_:any -> bool) =
          fun ~object_:(x416 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isMapIterator" [|(any_to_js x416)|])
        let (is_module_namespace_object : value:any -> bool) =
          fun ~value:(x417 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isModuleNamespaceObject" [|(any_to_js x417)|])
        let (is_native_error : object_:any -> bool) =
          fun ~object_:(x418 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isNativeError" [|(any_to_js x418)|])
        let (is_number_object : object_:any -> bool) =
          fun ~object_:(x419 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isNumberObject" [|(any_to_js x419)|])
        let (is_promise : object_:any -> bool) =
          fun ~object_:(x420 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isPromise"
                 [|(any_to_js x420)|])
        let (is_proxy : object_:any -> bool) =
          fun ~object_:(x421 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isProxy"
                 [|(any_to_js x421)|])
        let (is_reg_exp : object_:any -> bool) =
          fun ~object_:(x422 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isRegExp"
                 [|(any_to_js x422)|])
        let (is_set : object_:('T, AnonymousInterface0.t) union2 -> bool) =
          fun ~object_:(x423 : ('T, AnonymousInterface0.t) union2) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isSet"
                 [|(union2_to_js Obj.magic AnonymousInterface0.t_to_js x423)|])
        let (is_set_iterator : object_:any -> bool) =
          fun ~object_:(x426 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isSetIterator" [|(any_to_js x426)|])
        let (is_shared_array_buffer : object_:any -> bool) =
          fun ~object_:(x427 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isSharedArrayBuffer" [|(any_to_js x427)|])
        let (is_string_object : object_:any -> bool) =
          fun ~object_:(x428 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isStringObject" [|(any_to_js x428)|])
        let (is_symbol_object : object_:any -> bool) =
          fun ~object_:(x429 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isSymbolObject" [|(any_to_js x429)|])
        let (is_typed_array : object_:any -> bool) =
          fun ~object_:(x430 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isTypedArray" [|(any_to_js x430)|])
        let (is_uint8Array : object_:any -> bool) =
          fun ~object_:(x431 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isUint8Array" [|(any_to_js x431)|])
        let (is_uint8ClampedArray : object_:any -> bool) =
          fun ~object_:(x432 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isUint8ClampedArray" [|(any_to_js x432)|])
        let (is_uint16Array : object_:any -> bool) =
          fun ~object_:(x433 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isUint16Array" [|(any_to_js x433)|])
        let (is_uint32Array : object_:any -> bool) =
          fun ~object_:(x434 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isUint32Array" [|(any_to_js x434)|])
        let (is_weak_map : object_:any -> bool) =
          fun ~object_:(x435 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isWeakMap"
                 [|(any_to_js x435)|])
        let (is_weak_set : object_:any -> bool) =
          fun ~object_:(x436 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isWeakSet"
                 [|(any_to_js x436)|])
      end
    module TextDecoder =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x438 : Ojs.t) -> x438
        and t_to_js : t -> Ojs.t = fun (x437 : Ojs.t) -> x437
        let (get_encoding : t -> string) =
          fun (x439 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x439) "encoding")
        let (get_fatal : t -> bool) =
          fun (x440 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x440) "fatal")
        let (get_ignore_bom : t -> bool) =
          fun (x441 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x441) "ignoreBOM")
        let (create :
          ?encoding:string -> ?options:AnonymousInterface1.t -> unit -> t) =
          fun ?encoding:(x442 : string option) ->
            fun ?options:(x443 : AnonymousInterface1.t option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Import.util "TextDecoder")
                     (let x444 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x442 with
                       | Some x446 ->
                           ignore
                             (Ojs.call x444 "push"
                                [|(Ojs.string_to_js x446)|])
                       | None -> ());
                      (match x443 with
                       | Some x445 ->
                           ignore
                             (Ojs.call x444 "push"
                                [|(AnonymousInterface1.t_to_js x445)|])
                       | None -> ());
                      x444))
        let (decode :
          t ->
            ?input:(ArrayBuffer.t, ArrayBufferView.t) union2 or_null ->
              ?options:AnonymousInterface2.t -> unit -> string)
          =
          fun (x455 : t) ->
            fun
              ?input:(x447 :
                       (ArrayBuffer.t, ArrayBufferView.t) union2 or_null
                         option)
              ->
              fun ?options:(x448 : AnonymousInterface2.t option) ->
                fun () ->
                  Ojs.string_of_js
                    (let x456 = t_to_js x455 in
                     Ojs.call (Ojs.get_prop_ascii x456 "decode") "apply"
                       [|x456;((let x449 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x447 with
                                 | Some x451 ->
                                     ignore
                                       (Ojs.call x449 "push"
                                          [|(or_null_to_js
                                               (fun
                                                  (x452 :
                                                    (ArrayBuffer.t,
                                                      ArrayBufferView.t)
                                                      union2)
                                                  ->
                                                  union2_to_js
                                                    ArrayBuffer.t_to_js
                                                    ArrayBufferView.t_to_js
                                                    x452) x451)|])
                                 | None -> ());
                                (match x448 with
                                 | Some x450 ->
                                     ignore
                                       (Ojs.call x449 "push"
                                          [|(AnonymousInterface2.t_to_js x450)|])
                                 | None -> ());
                                x449))|])
      end
    module EncodeIntoResult =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x458 : Ojs.t) -> x458
        and t_to_js : t -> Ojs.t = fun (x457 : Ojs.t) -> x457
        let (get_read : t -> int) =
          fun (x459 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x459) "read")
        let (set_read : t -> int -> unit) =
          fun (x460 : t) ->
            fun (x461 : int) ->
              Ojs.set_prop_ascii (t_to_js x460) "read" (Ojs.int_to_js x461)
        let (get_written : t -> int) =
          fun (x462 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x462) "written")
        let (set_written : t -> int -> unit) =
          fun (x463 : t) ->
            fun (x464 : int) ->
              Ojs.set_prop_ascii (t_to_js x463) "written"
                (Ojs.int_to_js x464)
      end
    module TextEncoder =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x466 : Ojs.t) -> x466
        and t_to_js : t -> Ojs.t = fun (x465 : Ojs.t) -> x465
        let (get_encoding : t -> string) =
          fun (x467 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x467) "encoding")
        let (encode : t -> ?input:string -> unit -> Uint8Array.t) =
          fun (x471 : t) ->
            fun ?input:(x468 : string option) ->
              fun () ->
                Uint8Array.t_of_js
                  (let x472 = t_to_js x471 in
                   Ojs.call (Ojs.get_prop_ascii x472 "encode") "apply"
                     [|x472;((let x469 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x468 with
                               | Some x470 ->
                                   ignore
                                     (Ojs.call x469 "push"
                                        [|(Ojs.string_to_js x470)|])
                               | None -> ());
                              x469))|])
        let (encode_into :
          t -> input:string -> output:Uint8Array.t -> EncodeIntoResult.t) =
          fun (x475 : t) ->
            fun ~input:(x473 : string) ->
              fun ~output:(x474 : Uint8Array.t) ->
                EncodeIntoResult.t_of_js
                  (Ojs.call (t_to_js x475) "encodeInto"
                     [|(Ojs.string_to_js x473);(Uint8Array.t_to_js x474)|])
      end
  end
