[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
        type anonymous_interface_1 = [ `anonymous_interface_1 ] intf
        let rec anonymous_interface_1_of_js : Ojs.t -> anonymous_interface_1
          = Obj.magic
        and anonymous_interface_1_to_js : anonymous_interface_1 -> Ojs.t =
          Obj.magic
        type anonymous_interface_2 = [ `anonymous_interface_2 ] intf
        let rec anonymous_interface_2_of_js : Ojs.t -> anonymous_interface_2
          = Obj.magic
        and anonymous_interface_2_to_js : anonymous_interface_2 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type util_CustomInspectFunction =
          [ `Util_CustomInspectFunction ] intf
        and 'TCustom util_CustomPromisify =
          ('TCustom util_CustomPromisifyLegacy,
            'TCustom util_CustomPromisifySymbol) union2
        and 'TCustom util_CustomPromisifyLegacy =
          [ `Util_CustomPromisifyLegacy of 'TCustom  | `Function ] intf
        and 'TCustom util_CustomPromisifySymbol =
          [ `Util_CustomPromisifySymbol of 'TCustom  | `Function ] intf
        and util_EncodeIntoResult = [ `Util_EncodeIntoResult ] intf
        and util_InspectOptions = [ `Util_InspectOptions ] intf
        and util_InspectOptionsStylized =
          [ `Util_InspectOptionsStylized  | `Util_InspectOptions ] intf
        and util_Style =
          [ `bigint  | `boolean  | `date  | `module_  | `null  | `number 
          | `regexp  | `special  | `string  | `symbol  | `undefined ]
        and util_TextDecoder = [ `Util_TextDecoder ] intf
        and util_TextEncoder = [ `Util_TextEncoder ] intf
        let rec util_CustomInspectFunction_of_js :
          Ojs.t -> util_CustomInspectFunction = Obj.magic
        and util_CustomInspectFunction_to_js :
          util_CustomInspectFunction -> Ojs.t = Obj.magic
        and util_CustomPromisify_of_js :
          'TCustom .
            (Ojs.t -> 'TCustom) -> Ojs.t -> 'TCustom util_CustomPromisify
          = fun (type __TCustom) ->
          fun (__TCustom_of_js : Ojs.t -> __TCustom) ->
            fun (x6 : Ojs.t) ->
              union2_of_js
                (fun (x7 : Ojs.t) ->
                   util_CustomPromisifyLegacy_of_js __TCustom_of_js x7)
                (fun (x9 : Ojs.t) ->
                   util_CustomPromisifySymbol_of_js __TCustom_of_js x9) x6
        and util_CustomPromisify_to_js :
          'TCustom .
            ('TCustom -> Ojs.t) -> 'TCustom util_CustomPromisify -> Ojs.t
          = fun (type __TCustom) ->
          fun (__TCustom_to_js : __TCustom -> Ojs.t) ->
            fun
              (x1 :
                (__TCustom util_CustomPromisifyLegacy,
                  __TCustom util_CustomPromisifySymbol) union2)
              ->
              union2_to_js
                (fun (x2 : __TCustom util_CustomPromisifyLegacy) ->
                   util_CustomPromisifyLegacy_to_js __TCustom_to_js x2)
                (fun (x4 : __TCustom util_CustomPromisifySymbol) ->
                   util_CustomPromisifySymbol_to_js __TCustom_to_js x4) x1
        and util_CustomPromisifyLegacy_of_js :
          'TCustom .
            (Ojs.t -> 'TCustom) ->
              Ojs.t -> 'TCustom util_CustomPromisifyLegacy
          = fun _TCustom -> Obj.magic
        and util_CustomPromisifyLegacy_to_js :
          'TCustom .
            ('TCustom -> Ojs.t) ->
              'TCustom util_CustomPromisifyLegacy -> Ojs.t
          = fun _TCustom -> Obj.magic
        and util_CustomPromisifySymbol_of_js :
          'TCustom .
            (Ojs.t -> 'TCustom) ->
              Ojs.t -> 'TCustom util_CustomPromisifySymbol
          = fun _TCustom -> Obj.magic
        and util_CustomPromisifySymbol_to_js :
          'TCustom .
            ('TCustom -> Ojs.t) ->
              'TCustom util_CustomPromisifySymbol -> Ojs.t
          = fun _TCustom -> Obj.magic
        and util_EncodeIntoResult_of_js : Ojs.t -> util_EncodeIntoResult =
          Obj.magic
        and util_EncodeIntoResult_to_js : util_EncodeIntoResult -> Ojs.t =
          Obj.magic
        and util_InspectOptions_of_js : Ojs.t -> util_InspectOptions =
          Obj.magic
        and util_InspectOptions_to_js : util_InspectOptions -> Ojs.t =
          Obj.magic
        and util_InspectOptionsStylized_of_js :
          Ojs.t -> util_InspectOptionsStylized = Obj.magic
        and util_InspectOptionsStylized_to_js :
          util_InspectOptionsStylized -> Ojs.t = Obj.magic
        and util_Style_of_js : Ojs.t -> util_Style =
          fun (x12 : Ojs.t) ->
            let x13 = x12 in
            match Ojs.string_of_js x13 with
            | "bigint" -> `bigint
            | "boolean" -> `boolean
            | "date" -> `date
            | "module" -> `module_
            | "null" -> `null
            | "number" -> `number
            | "regexp" -> `regexp
            | "special" -> `special
            | "string" -> `string
            | "symbol" -> `symbol
            | "undefined" -> `undefined
            | _ -> assert false
        and util_Style_to_js : util_Style -> Ojs.t =
          fun
            (x11 :
              [ `bigint  | `boolean  | `date  | `module_  | `null  | 
                `number 
              | `regexp  | `special  | `string  | `symbol  | `undefined ])
            ->
            match x11 with
            | `bigint -> Ojs.string_to_js "bigint"
            | `boolean -> Ojs.string_to_js "boolean"
            | `date -> Ojs.string_to_js "date"
            | `module_ -> Ojs.string_to_js "module"
            | `null -> Ojs.string_to_js "null"
            | `number -> Ojs.string_to_js "number"
            | `regexp -> Ojs.string_to_js "regexp"
            | `special -> Ojs.string_to_js "special"
            | `string -> Ojs.string_to_js "string"
            | `symbol -> Ojs.string_to_js "symbol"
            | `undefined -> Ojs.string_to_js "undefined"
        and util_TextDecoder_of_js : Ojs.t -> util_TextDecoder = Obj.magic
        and util_TextDecoder_to_js : util_TextDecoder -> Ojs.t = Obj.magic
        and util_TextEncoder_of_js : Ojs.t -> util_TextEncoder = Obj.magic
        and util_TextEncoder_to_js : util_TextEncoder -> Ojs.t = Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x15 : Ojs.t) -> anonymous_interface_0_of_js x15
    and t_to_js : t -> Ojs.t =
      fun (x14 : anonymous_interface_0) -> anonymous_interface_0_to_js x14
  end
module AnonymousInterface1 =
  struct
    type t = anonymous_interface_1
    let rec t_of_js : Ojs.t -> t =
      fun (x17 : Ojs.t) -> anonymous_interface_1_of_js x17
    and t_to_js : t -> Ojs.t =
      fun (x16 : anonymous_interface_1) -> anonymous_interface_1_to_js x16
    let (get_fatal : t -> bool) =
      fun (x18 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x18) "fatal")
    let (set_fatal : t -> bool -> unit) =
      fun (x19 : t) ->
        fun (x20 : bool) ->
          Ojs.set_prop_ascii (t_to_js x19) "fatal" (Ojs.bool_to_js x20)
    let (get_ignoreBOM : t -> bool) =
      fun (x21 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x21) "ignoreBOM")
    let (set_ignoreBOM : t -> bool -> unit) =
      fun (x22 : t) ->
        fun (x23 : bool) ->
          Ojs.set_prop_ascii (t_to_js x22) "ignoreBOM" (Ojs.bool_to_js x23)
  end
module AnonymousInterface2 =
  struct
    type t = anonymous_interface_2
    let rec t_of_js : Ojs.t -> t =
      fun (x25 : Ojs.t) -> anonymous_interface_2_of_js x25
    and t_to_js : t -> Ojs.t =
      fun (x24 : anonymous_interface_2) -> anonymous_interface_2_to_js x24
    let (get_stream : t -> bool) =
      fun (x26 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x26) "stream")
    let (set_stream : t -> bool -> unit) =
      fun (x27 : t) ->
        fun (x28 : bool) ->
          Ojs.set_prop_ascii (t_to_js x27) "stream" (Ojs.bool_to_js x28)
  end
module Util =
  struct
    module InspectOptions =
      struct
        type t = util_InspectOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x30 : Ojs.t) -> util_InspectOptions_of_js x30
        and t_to_js : t -> Ojs.t =
          fun (x29 : util_InspectOptions) -> util_InspectOptions_to_js x29
        let (cast : t -> InspectOptions.t) =
          fun (x31 : t) -> InspectOptions.t_of_js (t_to_js x31)
      end
    module Style =
      struct
        type t = util_Style
        let rec t_of_js : Ojs.t -> t =
          fun (x33 : Ojs.t) -> util_Style_of_js x33
        and t_to_js : t -> Ojs.t =
          fun (x32 : util_Style) -> util_Style_to_js x32
      end
    module CustomInspectFunction =
      struct
        type t = util_CustomInspectFunction
        let rec t_of_js : Ojs.t -> t =
          fun (x35 : Ojs.t) -> util_CustomInspectFunction_of_js x35
        and t_to_js : t -> Ojs.t =
          fun (x34 : util_CustomInspectFunction) ->
            util_CustomInspectFunction_to_js x34
        let (apply :
          t -> depth:int -> options:util_InspectOptionsStylized -> string) =
          fun (x38 : t) ->
            fun ~depth:(x36 : int) ->
              fun ~options:(x37 : util_InspectOptionsStylized) ->
                Ojs.string_of_js
                  (Ojs.apply (t_to_js x38)
                     [|(Ojs.int_to_js x36);(util_InspectOptionsStylized_to_js
                                              x37)|])
      end
    module InspectOptionsStylized =
      struct
        type t = util_InspectOptionsStylized
        let rec t_of_js : Ojs.t -> t =
          fun (x40 : Ojs.t) -> util_InspectOptionsStylized_of_js x40
        and t_to_js : t -> Ojs.t =
          fun (x39 : util_InspectOptionsStylized) ->
            util_InspectOptionsStylized_to_js x39
        let (stylize : t -> text:string -> styleType:util_Style -> string) =
          fun (x43 : t) ->
            fun ~text:(x41 : string) ->
              fun ~styleType:(x42 : util_Style) ->
                Ojs.string_of_js
                  (Ojs.call (t_to_js x43) "stylize"
                     [|(Ojs.string_to_js x41);(util_Style_to_js x42)|])
        let (cast : t -> util_InspectOptions) =
          fun (x44 : t) -> util_InspectOptions_of_js (t_to_js x44)
      end
    let (format : ?format:any -> param:any list -> string) =
      fun ?format:(x45 : any option) ->
        fun ~param:(x46 : any list) ->
          Ojs.string_of_js
            (let x50 = Import.util in
             Ojs.call (Ojs.get_prop_ascii x50 "format") "apply"
               [|x50;((let x47 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       (match x45 with
                        | Some x49 ->
                            ignore (Ojs.call x47 "push" [|(any_to_js x49)|])
                        | None -> ());
                       List.iter
                         (fun (x48 : any) ->
                            ignore (Ojs.call x47 "push" [|(any_to_js x48)|]))
                         x46;
                       x47))|])
    let (formatWithOptions :
      inspectOptions:util_InspectOptions ->
        ?format:any -> param:any list -> string)
      =
      fun ~inspectOptions:(x51 : util_InspectOptions) ->
        fun ?format:(x52 : any option) ->
          fun ~param:(x53 : any list) ->
            Ojs.string_of_js
              (let x57 = Import.util in
               Ojs.call (Ojs.get_prop_ascii x57 "formatWithOptions") "apply"
                 [|x57;((let x54 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         ignore
                           (Ojs.call x54 "push"
                              [|(util_InspectOptions_to_js x51)|]);
                         (match x52 with
                          | Some x56 ->
                              ignore
                                (Ojs.call x54 "push" [|(any_to_js x56)|])
                          | None -> ());
                         List.iter
                           (fun (x55 : any) ->
                              ignore
                                (Ojs.call x54 "push" [|(any_to_js x55)|]))
                           x53;
                         x54))|])
    let (log : string:string -> unit) =
      fun ~string:(x58 : string) ->
        ignore (Ojs.call Import.util "log" [|(Ojs.string_to_js x58)|])
    let (inspect :
      object_:any ->
        ?showHidden:bool ->
          ?depth:int or_null -> ?color:bool -> unit -> string)
      =
      fun ~object_:(x59 : any) ->
        fun ?showHidden:(x60 : bool option) ->
          fun ?depth:(x61 : int or_null option) ->
            fun ?color:(x62 : bool option) ->
              fun () ->
                Ojs.string_of_js
                  (let x68 = Import.util in
                   Ojs.call (Ojs.get_prop_ascii x68 "inspect") "apply"
                     [|x68;((let x63 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore (Ojs.call x63 "push" [|(any_to_js x59)|]);
                             (match x60 with
                              | Some x67 ->
                                  ignore
                                    (Ojs.call x63 "push"
                                       [|(Ojs.bool_to_js x67)|])
                              | None -> ());
                             (match x61 with
                              | Some x65 ->
                                  ignore
                                    (Ojs.call x63 "push"
                                       [|(or_null_to_js Ojs.int_to_js x65)|])
                              | None -> ());
                             (match x62 with
                              | Some x64 ->
                                  ignore
                                    (Ojs.call x63 "push"
                                       [|(Ojs.bool_to_js x64)|])
                              | None -> ());
                             x63))|])
    let (inspect : object_:any -> options:util_InspectOptions -> string) =
      fun ~object_:(x69 : any) ->
        fun ~options:(x70 : util_InspectOptions) ->
          Ojs.string_of_js
            (Ojs.call Import.util "inspect"
               [|(any_to_js x69);(util_InspectOptions_to_js x70)|])
    module Inspect =
      struct
        let (colors : (int * int) Dict.t) =
          Dict.t_of_js
            (fun (x71 : Ojs.t) ->
               let x72 = x71 in
               ((Ojs.int_of_js (Ojs.array_get x72 0)),
                 (Ojs.int_of_js (Ojs.array_get x72 1))))
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.util "inspect")
               "colors")
        let (styles : any) =
          any_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.util "inspect")
               "styles")
        let (defaultOptions : util_InspectOptions) =
          util_InspectOptions_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.util "inspect")
               "defaultOptions")
        let (replDefaults : util_InspectOptions) =
          util_InspectOptions_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.util "inspect")
               "replDefaults")
        let (custom : any) =
          any_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.util "inspect")
               "custom")
      end
    let (isArray : object_:any -> bool) =
      fun ~object_:(x73 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isArray" [|(any_to_js x73)|])
    let (isRegExp : object_:any -> bool) =
      fun ~object_:(x74 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isRegExp" [|(any_to_js x74)|])
    let (isDate : object_:any -> bool) =
      fun ~object_:(x75 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isDate" [|(any_to_js x75)|])
    let (isError : object_:any -> bool) =
      fun ~object_:(x76 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isError" [|(any_to_js x76)|])
    let (inherits : constructor:any -> superConstructor:any -> unit) =
      fun ~constructor:(x77 : any) ->
        fun ~superConstructor:(x78 : any) ->
          ignore
            (Ojs.call Import.util "inherits"
               [|(any_to_js x77);(any_to_js x78)|])
    let (debuglog : key:string -> msg:string -> param:any list -> unit) =
      fun ~key:(x79 : string) ->
        fun ~msg:(x80 : string) ->
          fun ~param:(x81 : any list) ->
            ignore
              (Ojs.call
                 (Ojs.call Import.util "debuglog" [|(Ojs.string_to_js x79)|])
                 "apply"
                 [|Ojs.null;((let x82 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x82 "push"
                                   [|(Ojs.string_to_js x80)|]);
                              List.iter
                                (fun (x83 : any) ->
                                   ignore
                                     (Ojs.call x82 "push" [|(any_to_js x83)|]))
                                x81;
                              x82))|])
    let (isBoolean : object_:any -> bool) =
      fun ~object_:(x84 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isBoolean" [|(any_to_js x84)|])
    let (isBuffer : object_:any -> bool) =
      fun ~object_:(x85 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isBuffer" [|(any_to_js x85)|])
    let (isFunction : object_:any -> bool) =
      fun ~object_:(x86 : any) ->
        Ojs.bool_of_js
          (Ojs.call Import.util "isFunction" [|(any_to_js x86)|])
    let (isNull : object_:any -> bool) =
      fun ~object_:(x87 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isNull" [|(any_to_js x87)|])
    let (isNullOrUndefined : object_:any -> bool) =
      fun ~object_:(x88 : any) ->
        Ojs.bool_of_js
          (Ojs.call Import.util "isNullOrUndefined" [|(any_to_js x88)|])
    let (isNumber : object_:any -> bool) =
      fun ~object_:(x89 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isNumber" [|(any_to_js x89)|])
    let (isObject : object_:any -> bool) =
      fun ~object_:(x90 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isObject" [|(any_to_js x90)|])
    let (isPrimitive : object_:any -> bool) =
      fun ~object_:(x91 : any) ->
        Ojs.bool_of_js
          (Ojs.call Import.util "isPrimitive" [|(any_to_js x91)|])
    let (isString : object_:any -> bool) =
      fun ~object_:(x92 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isString" [|(any_to_js x92)|])
    let (isSymbol : object_:any -> bool) =
      fun ~object_:(x93 : any) ->
        Ojs.bool_of_js (Ojs.call Import.util "isSymbol" [|(any_to_js x93)|])
    let (isUndefined : object_:any -> bool) =
      fun ~object_:(x94 : any) ->
        Ojs.bool_of_js
          (Ojs.call Import.util "isUndefined" [|(any_to_js x94)|])
    let (deprecate : fn:'T -> message:string -> ?code:string -> unit -> 'T) =
      fun ~fn:(x95 : 'T) ->
        fun ~message:(x96 : string) ->
          fun ?code:(x97 : string option) ->
            fun () ->
              Obj.magic
                (let x100 = Import.util in
                 Ojs.call (Ojs.get_prop_ascii x100 "deprecate") "apply"
                   [|x100;((let x98 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore (Ojs.call x98 "push" [|(Obj.magic x95)|]);
                            ignore
                              (Ojs.call x98 "push" [|(Ojs.string_to_js x96)|]);
                            (match x97 with
                             | Some x99 ->
                                 ignore
                                   (Ojs.call x98 "push"
                                      [|(Ojs.string_to_js x99)|])
                             | None -> ());
                            x98))|])
    let (isDeepStrictEqual : val1:any -> val2:any -> bool) =
      fun ~val1:(x101 : any) ->
        fun ~val2:(x102 : any) ->
          Ojs.bool_of_js
            (Ojs.call Import.util "isDeepStrictEqual"
               [|(any_to_js x101);(any_to_js x102)|])
    let (callbackify :
      fn:(unit -> unit Promise.t) ->
        callback:(err:ErrnoException.t -> unit) -> unit)
      =
      fun ~fn:(x103 : unit -> unit Promise.t) ->
        fun ~callback:(x105 : err:ErrnoException.t -> unit) ->
          ignore
            (Ojs.apply
               (Ojs.call Import.util "callbackify"
                  [|(Ojs.fun_to_js 1
                       (fun _ -> Promise.t_to_js Ojs.unit_to_js (x103 ())))|])
               [|(Ojs.fun_to_js 1
                    (fun (x106 : Ojs.t) ->
                       x105 ~err:(ErrnoException.t_of_js x106)))|])
    let (callbackify :
      fn:(unit -> 'TResult Promise.t) ->
        callback:(err:ErrnoException.t -> result:'TResult -> unit) -> unit)
      =
      fun ~fn:(x107 : unit -> 'TResult Promise.t) ->
        fun
          ~callback:(x109 : err:ErrnoException.t -> result:'TResult -> unit)
          ->
          ignore
            (Ojs.apply
               (Ojs.call Import.util "callbackify"
                  [|(Ojs.fun_to_js 1
                       (fun _ -> Promise.t_to_js Obj.magic (x107 ())))|])
               [|(Ojs.fun_to_js 2
                    (fun (x110 : Ojs.t) ->
                       fun (x111 : Ojs.t) ->
                         x109 ~err:(ErrnoException.t_of_js x110)
                           ~result:(Obj.magic x111)))|])
    let (callbackify :
      fn:(arg1:'T1 -> unit Promise.t) ->
        arg1:'T1 -> callback:(err:ErrnoException.t -> unit) -> unit)
      =
      fun ~fn:(x112 : arg1:'T1 -> unit Promise.t) ->
        fun ~arg1:(x115 : 'T1) ->
          fun ~callback:(x116 : err:ErrnoException.t -> unit) ->
            ignore
              (Ojs.apply
                 (Ojs.call Import.util "callbackify"
                    [|(Ojs.fun_to_js 1
                         (fun (x113 : Ojs.t) ->
                            Promise.t_to_js Ojs.unit_to_js
                              (x112 ~arg1:(Obj.magic x113))))|])
                 [|(Obj.magic x115);(Ojs.fun_to_js 1
                                       (fun (x117 : Ojs.t) ->
                                          x116
                                            ~err:(ErrnoException.t_of_js x117)))|])
    let (callbackify :
      fn:(arg1:'T1 -> 'TResult Promise.t) ->
        arg1:'T1 ->
          callback:(err:ErrnoException.t -> result:'TResult -> unit) -> unit)
      =
      fun ~fn:(x118 : arg1:'T1 -> 'TResult Promise.t) ->
        fun ~arg1:(x121 : 'T1) ->
          fun
            ~callback:(x122 :
                        err:ErrnoException.t -> result:'TResult -> unit)
            ->
            ignore
              (Ojs.apply
                 (Ojs.call Import.util "callbackify"
                    [|(Ojs.fun_to_js 1
                         (fun (x119 : Ojs.t) ->
                            Promise.t_to_js Obj.magic
                              (x118 ~arg1:(Obj.magic x119))))|])
                 [|(Obj.magic x121);(Ojs.fun_to_js 2
                                       (fun (x123 : Ojs.t) ->
                                          fun (x124 : Ojs.t) ->
                                            x122
                                              ~err:(ErrnoException.t_of_js
                                                      x123)
                                              ~result:(Obj.magic x124)))|])
    let (callbackify :
      fn:(arg1:'T1 -> arg2:'T2 -> unit Promise.t) ->
        arg1:'T1 ->
          arg2:'T2 -> callback:(err:ErrnoException.t -> unit) -> unit)
      =
      fun ~fn:(x125 : arg1:'T1 -> arg2:'T2 -> unit Promise.t) ->
        fun ~arg1:(x129 : 'T1) ->
          fun ~arg2:(x130 : 'T2) ->
            fun ~callback:(x131 : err:ErrnoException.t -> unit) ->
              ignore
                (Ojs.apply
                   (Ojs.call Import.util "callbackify"
                      [|(Ojs.fun_to_js 2
                           (fun (x126 : Ojs.t) ->
                              fun (x127 : Ojs.t) ->
                                Promise.t_to_js Ojs.unit_to_js
                                  (x125 ~arg1:(Obj.magic x126)
                                     ~arg2:(Obj.magic x127))))|])
                   [|(Obj.magic x129);(Obj.magic x130);(Ojs.fun_to_js 1
                                                          (fun (x132 : Ojs.t)
                                                             ->
                                                             x131
                                                               ~err:(
                                                               ErrnoException.t_of_js
                                                                 x132)))|])
    let (callbackify :
      fn:(arg1:'T1 -> arg2:'T2 -> 'TResult Promise.t) ->
        arg1:'T1 ->
          arg2:'T2 ->
            callback:(err:ErrnoException.t or_null -> result:'TResult -> unit)
              -> unit)
      =
      fun ~fn:(x133 : arg1:'T1 -> arg2:'T2 -> 'TResult Promise.t) ->
        fun ~arg1:(x137 : 'T1) ->
          fun ~arg2:(x138 : 'T2) ->
            fun
              ~callback:(x139 :
                          err:ErrnoException.t or_null ->
                            result:'TResult -> unit)
              ->
              ignore
                (Ojs.apply
                   (Ojs.call Import.util "callbackify"
                      [|(Ojs.fun_to_js 2
                           (fun (x134 : Ojs.t) ->
                              fun (x135 : Ojs.t) ->
                                Promise.t_to_js Obj.magic
                                  (x133 ~arg1:(Obj.magic x134)
                                     ~arg2:(Obj.magic x135))))|])
                   [|(Obj.magic x137);(Obj.magic x138);(Ojs.fun_to_js 2
                                                          (fun (x140 : Ojs.t)
                                                             ->
                                                             fun
                                                               (x142 : Ojs.t)
                                                               ->
                                                               x139
                                                                 ~err:(
                                                                 or_null_of_js
                                                                   ErrnoException.t_of_js
                                                                   x140)
                                                                 ~result:(
                                                                 Obj.magic
                                                                   x142)))|])
    let (callbackify :
      fn:(arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> unit Promise.t) ->
        arg1:'T1 ->
          arg2:'T2 ->
            arg3:'T3 -> callback:(err:ErrnoException.t -> unit) -> unit)
      =
      fun ~fn:(x143 : arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> unit Promise.t) ->
        fun ~arg1:(x148 : 'T1) ->
          fun ~arg2:(x149 : 'T2) ->
            fun ~arg3:(x150 : 'T3) ->
              fun ~callback:(x151 : err:ErrnoException.t -> unit) ->
                ignore
                  (Ojs.apply
                     (Ojs.call Import.util "callbackify"
                        [|(Ojs.fun_to_js 3
                             (fun (x144 : Ojs.t) ->
                                fun (x145 : Ojs.t) ->
                                  fun (x146 : Ojs.t) ->
                                    Promise.t_to_js Ojs.unit_to_js
                                      (x143 ~arg1:(Obj.magic x144)
                                         ~arg2:(Obj.magic x145)
                                         ~arg3:(Obj.magic x146))))|])
                     [|(Obj.magic x148);(Obj.magic x149);(Obj.magic x150);(
                       Ojs.fun_to_js 1
                         (fun (x152 : Ojs.t) ->
                            x151 ~err:(ErrnoException.t_of_js x152)))|])
    let (callbackify :
      fn:(arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> 'TResult Promise.t) ->
        arg1:'T1 ->
          arg2:'T2 ->
            arg3:'T3 ->
              callback:(err:ErrnoException.t or_null ->
                          result:'TResult -> unit)
                -> unit)
      =
      fun ~fn:(x153 : arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> 'TResult Promise.t)
        ->
        fun ~arg1:(x158 : 'T1) ->
          fun ~arg2:(x159 : 'T2) ->
            fun ~arg3:(x160 : 'T3) ->
              fun
                ~callback:(x161 :
                            err:ErrnoException.t or_null ->
                              result:'TResult -> unit)
                ->
                ignore
                  (Ojs.apply
                     (Ojs.call Import.util "callbackify"
                        [|(Ojs.fun_to_js 3
                             (fun (x154 : Ojs.t) ->
                                fun (x155 : Ojs.t) ->
                                  fun (x156 : Ojs.t) ->
                                    Promise.t_to_js Obj.magic
                                      (x153 ~arg1:(Obj.magic x154)
                                         ~arg2:(Obj.magic x155)
                                         ~arg3:(Obj.magic x156))))|])
                     [|(Obj.magic x158);(Obj.magic x159);(Obj.magic x160);(
                       Ojs.fun_to_js 2
                         (fun (x162 : Ojs.t) ->
                            fun (x164 : Ojs.t) ->
                              x161
                                ~err:(or_null_of_js ErrnoException.t_of_js
                                        x162) ~result:(Obj.magic x164)))|])
    let (callbackify :
      fn:(arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> arg4:'T4 -> unit Promise.t) ->
        arg1:'T1 ->
          arg2:'T2 ->
            arg3:'T3 ->
              arg4:'T4 -> callback:(err:ErrnoException.t -> unit) -> unit)
      =
      fun
        ~fn:(x165 :
              arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> arg4:'T4 -> unit Promise.t)
        ->
        fun ~arg1:(x171 : 'T1) ->
          fun ~arg2:(x172 : 'T2) ->
            fun ~arg3:(x173 : 'T3) ->
              fun ~arg4:(x174 : 'T4) ->
                fun ~callback:(x175 : err:ErrnoException.t -> unit) ->
                  ignore
                    (Ojs.apply
                       (Ojs.call Import.util "callbackify"
                          [|(Ojs.fun_to_js 4
                               (fun (x166 : Ojs.t) ->
                                  fun (x167 : Ojs.t) ->
                                    fun (x168 : Ojs.t) ->
                                      fun (x169 : Ojs.t) ->
                                        Promise.t_to_js Ojs.unit_to_js
                                          (x165 ~arg1:(Obj.magic x166)
                                             ~arg2:(Obj.magic x167)
                                             ~arg3:(Obj.magic x168)
                                             ~arg4:(Obj.magic x169))))|])
                       [|(Obj.magic x171);(Obj.magic x172);(Obj.magic x173);(
                         Obj.magic x174);(Ojs.fun_to_js 1
                                            (fun (x176 : Ojs.t) ->
                                               x175
                                                 ~err:(ErrnoException.t_of_js
                                                         x176)))|])
    let (callbackify :
      fn:(arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> arg4:'T4 -> 'TResult Promise.t)
        ->
        arg1:'T1 ->
          arg2:'T2 ->
            arg3:'T3 ->
              arg4:'T4 ->
                callback:(err:ErrnoException.t or_null ->
                            result:'TResult -> unit)
                  -> unit)
      =
      fun
        ~fn:(x177 :
              arg1:'T1 ->
                arg2:'T2 -> arg3:'T3 -> arg4:'T4 -> 'TResult Promise.t)
        ->
        fun ~arg1:(x183 : 'T1) ->
          fun ~arg2:(x184 : 'T2) ->
            fun ~arg3:(x185 : 'T3) ->
              fun ~arg4:(x186 : 'T4) ->
                fun
                  ~callback:(x187 :
                              err:ErrnoException.t or_null ->
                                result:'TResult -> unit)
                  ->
                  ignore
                    (Ojs.apply
                       (Ojs.call Import.util "callbackify"
                          [|(Ojs.fun_to_js 4
                               (fun (x178 : Ojs.t) ->
                                  fun (x179 : Ojs.t) ->
                                    fun (x180 : Ojs.t) ->
                                      fun (x181 : Ojs.t) ->
                                        Promise.t_to_js Obj.magic
                                          (x177 ~arg1:(Obj.magic x178)
                                             ~arg2:(Obj.magic x179)
                                             ~arg3:(Obj.magic x180)
                                             ~arg4:(Obj.magic x181))))|])
                       [|(Obj.magic x183);(Obj.magic x184);(Obj.magic x185);(
                         Obj.magic x186);(Ojs.fun_to_js 2
                                            (fun (x188 : Ojs.t) ->
                                               fun (x190 : Ojs.t) ->
                                                 x187
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x188)
                                                   ~result:(Obj.magic x190)))|])
    let (callbackify :
      fn:(arg1:'T1 ->
            arg2:'T2 -> arg3:'T3 -> arg4:'T4 -> arg5:'T5 -> unit Promise.t)
        ->
        arg1:'T1 ->
          arg2:'T2 ->
            arg3:'T3 ->
              arg4:'T4 ->
                arg5:'T5 -> callback:(err:ErrnoException.t -> unit) -> unit)
      =
      fun
        ~fn:(x191 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 -> arg4:'T4 -> arg5:'T5 -> unit Promise.t)
        ->
        fun ~arg1:(x198 : 'T1) ->
          fun ~arg2:(x199 : 'T2) ->
            fun ~arg3:(x200 : 'T3) ->
              fun ~arg4:(x201 : 'T4) ->
                fun ~arg5:(x202 : 'T5) ->
                  fun ~callback:(x203 : err:ErrnoException.t -> unit) ->
                    ignore
                      (Ojs.apply
                         (Ojs.call Import.util "callbackify"
                            [|(Ojs.fun_to_js 5
                                 (fun (x192 : Ojs.t) ->
                                    fun (x193 : Ojs.t) ->
                                      fun (x194 : Ojs.t) ->
                                        fun (x195 : Ojs.t) ->
                                          fun (x196 : Ojs.t) ->
                                            Promise.t_to_js Ojs.unit_to_js
                                              (x191 ~arg1:(Obj.magic x192)
                                                 ~arg2:(Obj.magic x193)
                                                 ~arg3:(Obj.magic x194)
                                                 ~arg4:(Obj.magic x195)
                                                 ~arg5:(Obj.magic x196))))|])
                         [|(Obj.magic x198);(Obj.magic x199);(Obj.magic x200);(
                           Obj.magic x201);(Obj.magic x202);(Ojs.fun_to_js 1
                                                               (fun
                                                                  (x204 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x203
                                                                    ~err:(
                                                                    ErrnoException.t_of_js
                                                                    x204)))|])
    let (callbackify :
      fn:(arg1:'T1 ->
            arg2:'T2 ->
              arg3:'T3 -> arg4:'T4 -> arg5:'T5 -> 'TResult Promise.t)
        ->
        arg1:'T1 ->
          arg2:'T2 ->
            arg3:'T3 ->
              arg4:'T4 ->
                arg5:'T5 ->
                  callback:(err:ErrnoException.t or_null ->
                              result:'TResult -> unit)
                    -> unit)
      =
      fun
        ~fn:(x205 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 -> arg4:'T4 -> arg5:'T5 -> 'TResult Promise.t)
        ->
        fun ~arg1:(x212 : 'T1) ->
          fun ~arg2:(x213 : 'T2) ->
            fun ~arg3:(x214 : 'T3) ->
              fun ~arg4:(x215 : 'T4) ->
                fun ~arg5:(x216 : 'T5) ->
                  fun
                    ~callback:(x217 :
                                err:ErrnoException.t or_null ->
                                  result:'TResult -> unit)
                    ->
                    ignore
                      (Ojs.apply
                         (Ojs.call Import.util "callbackify"
                            [|(Ojs.fun_to_js 5
                                 (fun (x206 : Ojs.t) ->
                                    fun (x207 : Ojs.t) ->
                                      fun (x208 : Ojs.t) ->
                                        fun (x209 : Ojs.t) ->
                                          fun (x210 : Ojs.t) ->
                                            Promise.t_to_js Obj.magic
                                              (x205 ~arg1:(Obj.magic x206)
                                                 ~arg2:(Obj.magic x207)
                                                 ~arg3:(Obj.magic x208)
                                                 ~arg4:(Obj.magic x209)
                                                 ~arg5:(Obj.magic x210))))|])
                         [|(Obj.magic x212);(Obj.magic x213);(Obj.magic x214);(
                           Obj.magic x215);(Obj.magic x216);(Ojs.fun_to_js 2
                                                               (fun
                                                                  (x218 :
                                                                    Ojs.t)
                                                                  ->
                                                                  fun
                                                                    (x220 :
                                                                    Ojs.t) ->
                                                                    x217
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x218)
                                                                    ~result:(
                                                                    Obj.magic
                                                                    x220)))|])
    let (callbackify :
      fn:(arg1:'T1 ->
            arg2:'T2 ->
              arg3:'T3 -> arg4:'T4 -> arg5:'T5 -> arg6:'T6 -> unit Promise.t)
        ->
        arg1:'T1 ->
          arg2:'T2 ->
            arg3:'T3 ->
              arg4:'T4 ->
                arg5:'T5 ->
                  arg6:'T6 -> callback:(err:ErrnoException.t -> unit) -> unit)
      =
      fun
        ~fn:(x221 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 ->
                    arg4:'T4 -> arg5:'T5 -> arg6:'T6 -> unit Promise.t)
        ->
        fun ~arg1:(x229 : 'T1) ->
          fun ~arg2:(x230 : 'T2) ->
            fun ~arg3:(x231 : 'T3) ->
              fun ~arg4:(x232 : 'T4) ->
                fun ~arg5:(x233 : 'T5) ->
                  fun ~arg6:(x234 : 'T6) ->
                    fun ~callback:(x235 : err:ErrnoException.t -> unit) ->
                      ignore
                        (Ojs.apply
                           (Ojs.call Import.util "callbackify"
                              [|(Ojs.fun_to_js 6
                                   (fun (x222 : Ojs.t) ->
                                      fun (x223 : Ojs.t) ->
                                        fun (x224 : Ojs.t) ->
                                          fun (x225 : Ojs.t) ->
                                            fun (x226 : Ojs.t) ->
                                              fun (x227 : Ojs.t) ->
                                                Promise.t_to_js
                                                  Ojs.unit_to_js
                                                  (x221
                                                     ~arg1:(Obj.magic x222)
                                                     ~arg2:(Obj.magic x223)
                                                     ~arg3:(Obj.magic x224)
                                                     ~arg4:(Obj.magic x225)
                                                     ~arg5:(Obj.magic x226)
                                                     ~arg6:(Obj.magic x227))))|])
                           [|(Obj.magic x229);(Obj.magic x230);(Obj.magic
                                                                  x231);(
                             Obj.magic x232);(Obj.magic x233);(Obj.magic x234);(
                             Ojs.fun_to_js 1
                               (fun (x236 : Ojs.t) ->
                                  x235 ~err:(ErrnoException.t_of_js x236)))|])
    let (callbackify :
      fn:(arg1:'T1 ->
            arg2:'T2 ->
              arg3:'T3 ->
                arg4:'T4 -> arg5:'T5 -> arg6:'T6 -> 'TResult Promise.t)
        ->
        arg1:'T1 ->
          arg2:'T2 ->
            arg3:'T3 ->
              arg4:'T4 ->
                arg5:'T5 ->
                  arg6:'T6 ->
                    callback:(err:ErrnoException.t or_null ->
                                result:'TResult -> unit)
                      -> unit)
      =
      fun
        ~fn:(x237 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 ->
                    arg4:'T4 -> arg5:'T5 -> arg6:'T6 -> 'TResult Promise.t)
        ->
        fun ~arg1:(x245 : 'T1) ->
          fun ~arg2:(x246 : 'T2) ->
            fun ~arg3:(x247 : 'T3) ->
              fun ~arg4:(x248 : 'T4) ->
                fun ~arg5:(x249 : 'T5) ->
                  fun ~arg6:(x250 : 'T6) ->
                    fun
                      ~callback:(x251 :
                                  err:ErrnoException.t or_null ->
                                    result:'TResult -> unit)
                      ->
                      ignore
                        (Ojs.apply
                           (Ojs.call Import.util "callbackify"
                              [|(Ojs.fun_to_js 6
                                   (fun (x238 : Ojs.t) ->
                                      fun (x239 : Ojs.t) ->
                                        fun (x240 : Ojs.t) ->
                                          fun (x241 : Ojs.t) ->
                                            fun (x242 : Ojs.t) ->
                                              fun (x243 : Ojs.t) ->
                                                Promise.t_to_js Obj.magic
                                                  (x237
                                                     ~arg1:(Obj.magic x238)
                                                     ~arg2:(Obj.magic x239)
                                                     ~arg3:(Obj.magic x240)
                                                     ~arg4:(Obj.magic x241)
                                                     ~arg5:(Obj.magic x242)
                                                     ~arg6:(Obj.magic x243))))|])
                           [|(Obj.magic x245);(Obj.magic x246);(Obj.magic
                                                                  x247);(
                             Obj.magic x248);(Obj.magic x249);(Obj.magic x250);(
                             Ojs.fun_to_js 2
                               (fun (x252 : Ojs.t) ->
                                  fun (x254 : Ojs.t) ->
                                    x251
                                      ~err:(or_null_of_js
                                              ErrnoException.t_of_js x252)
                                      ~result:(Obj.magic x254)))|])
    module CustomPromisifyLegacy =
      struct
        type 'TCustom t = 'TCustom util_CustomPromisifyLegacy
        let rec t_of_js :
          'TCustom . (Ojs.t -> 'TCustom) -> Ojs.t -> 'TCustom t = fun (type
          __TCustom) ->
          fun (__TCustom_of_js : Ojs.t -> __TCustom) ->
            fun (x257 : Ojs.t) ->
              util_CustomPromisifyLegacy_of_js __TCustom_of_js x257
        and t_to_js : 'TCustom . ('TCustom -> Ojs.t) -> 'TCustom t -> Ojs.t =
          fun (type __TCustom) ->
          fun (__TCustom_to_js : __TCustom -> Ojs.t) ->
            fun (x255 : __TCustom util_CustomPromisifyLegacy) ->
              util_CustomPromisifyLegacy_to_js __TCustom_to_js x255
        let (get___promisify__ : 'TCustom t -> 'TCustom) =
          fun (x259 : 'TCustom t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x259) "__promisify__")
        let (set___promisify__ : 'TCustom t -> 'TCustom -> unit) =
          fun (x261 : 'TCustom t) ->
            fun (x262 : 'TCustom) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x261) "__promisify__"
                (Obj.magic x262)
        let (cast : 'TCustom t -> untyped_function) =
          fun (x264 : 'TCustom t) ->
            untyped_function_of_js (t_to_js Obj.magic x264)
      end
    module CustomPromisifySymbol =
      struct
        type 'TCustom t = 'TCustom util_CustomPromisifySymbol
        let rec t_of_js :
          'TCustom . (Ojs.t -> 'TCustom) -> Ojs.t -> 'TCustom t = fun (type
          __TCustom) ->
          fun (__TCustom_of_js : Ojs.t -> __TCustom) ->
            fun (x268 : Ojs.t) ->
              util_CustomPromisifySymbol_of_js __TCustom_of_js x268
        and t_to_js : 'TCustom . ('TCustom -> Ojs.t) -> 'TCustom t -> Ojs.t =
          fun (type __TCustom) ->
          fun (__TCustom_to_js : __TCustom -> Ojs.t) ->
            fun (x266 : __TCustom util_CustomPromisifySymbol) ->
              util_CustomPromisifySymbol_to_js __TCustom_to_js x266
        let (get__promisify_custom_ : 'TCustom t -> 'TCustom) =
          fun (x270 : 'TCustom t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x270)
                 "[promisify.custom]")
        let (set__promisify_custom_ : 'TCustom t -> 'TCustom -> unit) =
          fun (x272 : 'TCustom t) ->
            fun (x273 : 'TCustom) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x272)
                "[promisify.custom]" (Obj.magic x273)
        let (cast : 'TCustom t -> untyped_function) =
          fun (x275 : 'TCustom t) ->
            untyped_function_of_js (t_to_js Obj.magic x275)
      end
    module CustomPromisify =
      struct
        type 'TCustom t = 'TCustom util_CustomPromisify
        let rec t_of_js :
          'TCustom . (Ojs.t -> 'TCustom) -> Ojs.t -> 'TCustom t = fun (type
          __TCustom) ->
          fun (__TCustom_of_js : Ojs.t -> __TCustom) ->
            fun (x279 : Ojs.t) ->
              util_CustomPromisify_of_js __TCustom_of_js x279
        and t_to_js : 'TCustom . ('TCustom -> Ojs.t) -> 'TCustom t -> Ojs.t =
          fun (type __TCustom) ->
          fun (__TCustom_to_js : __TCustom -> Ojs.t) ->
            fun (x277 : __TCustom util_CustomPromisify) ->
              util_CustomPromisify_to_js __TCustom_to_js x277
      end
    let (promisify : fn:'TCustom util_CustomPromisify -> 'TCustom) =
      fun ~fn:(x281 : 'TCustom util_CustomPromisify) ->
        Obj.magic
          (Ojs.call Import.util "promisify"
             [|(util_CustomPromisify_to_js Obj.magic x281)|])
    let (promisify :
      fn:(callback:(err:any -> result:'TResult -> unit) -> unit) ->
        unit -> 'TResult Promise.t)
      =
      fun ~fn:(x283 : callback:(err:any -> result:'TResult -> unit) -> unit)
        ->
        fun () ->
          Promise.t_of_js Obj.magic
            (Ojs.apply
               (Ojs.call Import.util "promisify"
                  [|(Ojs.fun_to_js 1
                       (fun (x284 : Ojs.t) ->
                          x283
                            ~callback:(fun ~err:(x285 : any) ->
                                         fun ~result:(x286 : 'TResult) ->
                                           ignore
                                             (Ojs.apply x284
                                                [|(any_to_js x285);(Obj.magic
                                                                    x286)|]))))|])
               [||])
    let (promisify :
      fn:(callback:(?err:any -> unit -> unit) -> unit) ->
        unit -> unit Promise.t)
      =
      fun ~fn:(x288 : callback:(?err:any -> unit -> unit) -> unit) ->
        fun () ->
          Promise.t_of_js Ojs.unit_of_js
            (Ojs.apply
               (Ojs.call Import.util "promisify"
                  [|(Ojs.fun_to_js 1
                       (fun (x289 : Ojs.t) ->
                          x288
                            ~callback:(fun ?err:(x290 : any option) ->
                                         fun () ->
                                           ignore
                                             (Ojs.call x289 "apply"
                                                [|Ojs.null;((let x291 =
                                                               Ojs.new_obj
                                                                 (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                 [||] in
                                                             (match x290 with
                                                              | Some x292 ->
                                                                  ignore
                                                                    (
                                                                    Ojs.call
                                                                    x291
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x292)|])
                                                              | None -> ());
                                                             x291))|]))))|])
               [||])
    let (promisify :
      fn:(arg1:'T1 -> callback:(err:any -> result:'TResult -> unit) -> unit)
        -> arg1:'T1 -> 'TResult Promise.t)
      =
      fun
        ~fn:(x294 :
              arg1:'T1 ->
                callback:(err:any -> result:'TResult -> unit) -> unit)
        ->
        fun ~arg1:(x299 : 'T1) ->
          Promise.t_of_js Obj.magic
            (Ojs.apply
               (Ojs.call Import.util "promisify"
                  [|(Ojs.fun_to_js 2
                       (fun (x295 : Ojs.t) ->
                          fun (x296 : Ojs.t) ->
                            x294 ~arg1:(Obj.magic x295)
                              ~callback:(fun ~err:(x297 : any) ->
                                           fun ~result:(x298 : 'TResult) ->
                                             ignore
                                               (Ojs.apply x296
                                                  [|(any_to_js x297);(
                                                    Obj.magic x298)|]))))|])
               [|(Obj.magic x299)|])
    let (promisify :
      fn:(arg1:'T1 -> callback:(?err:any -> unit -> unit) -> unit) ->
        arg1:'T1 -> unit Promise.t)
      =
      fun
        ~fn:(x301 : arg1:'T1 -> callback:(?err:any -> unit -> unit) -> unit)
        ->
        fun ~arg1:(x307 : 'T1) ->
          Promise.t_of_js Ojs.unit_of_js
            (Ojs.apply
               (Ojs.call Import.util "promisify"
                  [|(Ojs.fun_to_js 2
                       (fun (x302 : Ojs.t) ->
                          fun (x303 : Ojs.t) ->
                            x301 ~arg1:(Obj.magic x302)
                              ~callback:(fun ?err:(x304 : any option) ->
                                           fun () ->
                                             ignore
                                               (Ojs.call x303 "apply"
                                                  [|Ojs.null;((let x305 =
                                                                 Ojs.new_obj
                                                                   (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                   [||] in
                                                               (match x304
                                                                with
                                                                | Some x306
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x305
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x306)|])
                                                                | None -> ());
                                                               x305))|]))))|])
               [|(Obj.magic x307)|])
    let (promisify :
      fn:(arg1:'T1 ->
            arg2:'T2 -> callback:(err:any -> result:'TResult -> unit) -> unit)
        -> arg1:'T1 -> arg2:'T2 -> 'TResult Promise.t)
      =
      fun
        ~fn:(x309 :
              arg1:'T1 ->
                arg2:'T2 ->
                  callback:(err:any -> result:'TResult -> unit) -> unit)
        ->
        fun ~arg1:(x315 : 'T1) ->
          fun ~arg2:(x316 : 'T2) ->
            Promise.t_of_js Obj.magic
              (Ojs.apply
                 (Ojs.call Import.util "promisify"
                    [|(Ojs.fun_to_js 3
                         (fun (x310 : Ojs.t) ->
                            fun (x311 : Ojs.t) ->
                              fun (x312 : Ojs.t) ->
                                x309 ~arg1:(Obj.magic x310)
                                  ~arg2:(Obj.magic x311)
                                  ~callback:(fun ~err:(x313 : any) ->
                                               fun ~result:(x314 : 'TResult)
                                                 ->
                                                 ignore
                                                   (Ojs.apply x312
                                                      [|(any_to_js x313);(
                                                        Obj.magic x314)|]))))|])
                 [|(Obj.magic x315);(Obj.magic x316)|])
    let (promisify :
      fn:(arg1:'T1 -> arg2:'T2 -> callback:(?err:any -> unit -> unit) -> unit)
        -> arg1:'T1 -> arg2:'T2 -> unit Promise.t)
      =
      fun
        ~fn:(x318 :
              arg1:'T1 ->
                arg2:'T2 -> callback:(?err:any -> unit -> unit) -> unit)
        ->
        fun ~arg1:(x325 : 'T1) ->
          fun ~arg2:(x326 : 'T2) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.apply
                 (Ojs.call Import.util "promisify"
                    [|(Ojs.fun_to_js 3
                         (fun (x319 : Ojs.t) ->
                            fun (x320 : Ojs.t) ->
                              fun (x321 : Ojs.t) ->
                                x318 ~arg1:(Obj.magic x319)
                                  ~arg2:(Obj.magic x320)
                                  ~callback:(fun ?err:(x322 : any option) ->
                                               fun () ->
                                                 ignore
                                                   (Ojs.call x321 "apply"
                                                      [|Ojs.null;((let x323 =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                   (match x322
                                                                    with
                                                                    | 
                                                                    Some x324
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x323
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x324)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                   x323))|]))))|])
                 [|(Obj.magic x325);(Obj.magic x326)|])
    let (promisify :
      fn:(arg1:'T1 ->
            arg2:'T2 ->
              arg3:'T3 ->
                callback:(err:any -> result:'TResult -> unit) -> unit)
        -> arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> 'TResult Promise.t)
      =
      fun
        ~fn:(x328 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 ->
                    callback:(err:any -> result:'TResult -> unit) -> unit)
        ->
        fun ~arg1:(x335 : 'T1) ->
          fun ~arg2:(x336 : 'T2) ->
            fun ~arg3:(x337 : 'T3) ->
              Promise.t_of_js Obj.magic
                (Ojs.apply
                   (Ojs.call Import.util "promisify"
                      [|(Ojs.fun_to_js 4
                           (fun (x329 : Ojs.t) ->
                              fun (x330 : Ojs.t) ->
                                fun (x331 : Ojs.t) ->
                                  fun (x332 : Ojs.t) ->
                                    x328 ~arg1:(Obj.magic x329)
                                      ~arg2:(Obj.magic x330)
                                      ~arg3:(Obj.magic x331)
                                      ~callback:(fun ~err:(x333 : any) ->
                                                   fun
                                                     ~result:(x334 :
                                                               'TResult)
                                                     ->
                                                     ignore
                                                       (Ojs.apply x332
                                                          [|(any_to_js x333);(
                                                            Obj.magic x334)|]))))|])
                   [|(Obj.magic x335);(Obj.magic x336);(Obj.magic x337)|])
    let (promisify :
      fn:(arg1:'T1 ->
            arg2:'T2 ->
              arg3:'T3 -> callback:(?err:any -> unit -> unit) -> unit)
        -> arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> unit Promise.t)
      =
      fun
        ~fn:(x339 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 -> callback:(?err:any -> unit -> unit) -> unit)
        ->
        fun ~arg1:(x347 : 'T1) ->
          fun ~arg2:(x348 : 'T2) ->
            fun ~arg3:(x349 : 'T3) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.apply
                   (Ojs.call Import.util "promisify"
                      [|(Ojs.fun_to_js 4
                           (fun (x340 : Ojs.t) ->
                              fun (x341 : Ojs.t) ->
                                fun (x342 : Ojs.t) ->
                                  fun (x343 : Ojs.t) ->
                                    x339 ~arg1:(Obj.magic x340)
                                      ~arg2:(Obj.magic x341)
                                      ~arg3:(Obj.magic x342)
                                      ~callback:(fun ?err:(x344 : any option)
                                                   ->
                                                   fun () ->
                                                     ignore
                                                       (Ojs.call x343 "apply"
                                                          [|Ojs.null;((
                                                            let x345 =
                                                              Ojs.new_obj
                                                                (Ojs.get_prop_ascii
                                                                   Ojs.global
                                                                   "Array")
                                                                [||] in
                                                            (match x344 with
                                                             | Some x346 ->
                                                                 ignore
                                                                   (Ojs.call
                                                                    x345
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x346)|])
                                                             | None -> ());
                                                            x345))|]))))|])
                   [|(Obj.magic x347);(Obj.magic x348);(Obj.magic x349)|])
    let (promisify :
      fn:(arg1:'T1 ->
            arg2:'T2 ->
              arg3:'T3 ->
                arg4:'T4 ->
                  callback:(err:any -> result:'TResult -> unit) -> unit)
        -> arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> arg4:'T4 -> 'TResult Promise.t)
      =
      fun
        ~fn:(x351 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 ->
                    arg4:'T4 ->
                      callback:(err:any -> result:'TResult -> unit) -> unit)
        ->
        fun ~arg1:(x359 : 'T1) ->
          fun ~arg2:(x360 : 'T2) ->
            fun ~arg3:(x361 : 'T3) ->
              fun ~arg4:(x362 : 'T4) ->
                Promise.t_of_js Obj.magic
                  (Ojs.apply
                     (Ojs.call Import.util "promisify"
                        [|(Ojs.fun_to_js 5
                             (fun (x352 : Ojs.t) ->
                                fun (x353 : Ojs.t) ->
                                  fun (x354 : Ojs.t) ->
                                    fun (x355 : Ojs.t) ->
                                      fun (x356 : Ojs.t) ->
                                        x351 ~arg1:(Obj.magic x352)
                                          ~arg2:(Obj.magic x353)
                                          ~arg3:(Obj.magic x354)
                                          ~arg4:(Obj.magic x355)
                                          ~callback:(fun ~err:(x357 : any) ->
                                                       fun
                                                         ~result:(x358 :
                                                                   'TResult)
                                                         ->
                                                         ignore
                                                           (Ojs.apply x356
                                                              [|(any_to_js
                                                                   x357);(
                                                                Obj.magic
                                                                  x358)|]))))|])
                     [|(Obj.magic x359);(Obj.magic x360);(Obj.magic x361);(
                       Obj.magic x362)|])
    let (promisify :
      fn:(arg1:'T1 ->
            arg2:'T2 ->
              arg3:'T3 ->
                arg4:'T4 -> callback:(?err:any -> unit -> unit) -> unit)
        -> arg1:'T1 -> arg2:'T2 -> arg3:'T3 -> arg4:'T4 -> unit Promise.t)
      =
      fun
        ~fn:(x364 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 ->
                    arg4:'T4 -> callback:(?err:any -> unit -> unit) -> unit)
        ->
        fun ~arg1:(x373 : 'T1) ->
          fun ~arg2:(x374 : 'T2) ->
            fun ~arg3:(x375 : 'T3) ->
              fun ~arg4:(x376 : 'T4) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.apply
                     (Ojs.call Import.util "promisify"
                        [|(Ojs.fun_to_js 5
                             (fun (x365 : Ojs.t) ->
                                fun (x366 : Ojs.t) ->
                                  fun (x367 : Ojs.t) ->
                                    fun (x368 : Ojs.t) ->
                                      fun (x369 : Ojs.t) ->
                                        x364 ~arg1:(Obj.magic x365)
                                          ~arg2:(Obj.magic x366)
                                          ~arg3:(Obj.magic x367)
                                          ~arg4:(Obj.magic x368)
                                          ~callback:(fun
                                                       ?err:(x370 :
                                                              any option)
                                                       ->
                                                       fun () ->
                                                         ignore
                                                           (Ojs.call x369
                                                              "apply"
                                                              [|Ojs.null;((
                                                                let x371 =
                                                                  Ojs.new_obj
                                                                    (
                                                                    Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                (match x370
                                                                 with
                                                                 | Some x372
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x371
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x372)|])
                                                                 | None -> ());
                                                                x371))|]))))|])
                     [|(Obj.magic x373);(Obj.magic x374);(Obj.magic x375);(
                       Obj.magic x376)|])
    let (promisify :
      fn:(arg1:'T1 ->
            arg2:'T2 ->
              arg3:'T3 ->
                arg4:'T4 ->
                  arg5:'T5 ->
                    callback:(err:any -> result:'TResult -> unit) -> unit)
        ->
        arg1:'T1 ->
          arg2:'T2 -> arg3:'T3 -> arg4:'T4 -> arg5:'T5 -> 'TResult Promise.t)
      =
      fun
        ~fn:(x378 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 ->
                    arg4:'T4 ->
                      arg5:'T5 ->
                        callback:(err:any -> result:'TResult -> unit) -> unit)
        ->
        fun ~arg1:(x387 : 'T1) ->
          fun ~arg2:(x388 : 'T2) ->
            fun ~arg3:(x389 : 'T3) ->
              fun ~arg4:(x390 : 'T4) ->
                fun ~arg5:(x391 : 'T5) ->
                  Promise.t_of_js Obj.magic
                    (Ojs.apply
                       (Ojs.call Import.util "promisify"
                          [|(Ojs.fun_to_js 6
                               (fun (x379 : Ojs.t) ->
                                  fun (x380 : Ojs.t) ->
                                    fun (x381 : Ojs.t) ->
                                      fun (x382 : Ojs.t) ->
                                        fun (x383 : Ojs.t) ->
                                          fun (x384 : Ojs.t) ->
                                            x378 ~arg1:(Obj.magic x379)
                                              ~arg2:(Obj.magic x380)
                                              ~arg3:(Obj.magic x381)
                                              ~arg4:(Obj.magic x382)
                                              ~arg5:(Obj.magic x383)
                                              ~callback:(fun
                                                           ~err:(x385 : any)
                                                           ->
                                                           fun
                                                             ~result:
                                                             (x386 :
                                                               'TResult)
                                                             ->
                                                             ignore
                                                               (Ojs.apply
                                                                  x384
                                                                  [|(
                                                                    any_to_js
                                                                    x385);(
                                                                    Obj.magic
                                                                    x386)|]))))|])
                       [|(Obj.magic x387);(Obj.magic x388);(Obj.magic x389);(
                         Obj.magic x390);(Obj.magic x391)|])
    let (promisify :
      fn:(arg1:'T1 ->
            arg2:'T2 ->
              arg3:'T3 ->
                arg4:'T4 ->
                  arg5:'T5 -> callback:(?err:any -> unit -> unit) -> unit)
        ->
        arg1:'T1 ->
          arg2:'T2 -> arg3:'T3 -> arg4:'T4 -> arg5:'T5 -> unit Promise.t)
      =
      fun
        ~fn:(x393 :
              arg1:'T1 ->
                arg2:'T2 ->
                  arg3:'T3 ->
                    arg4:'T4 ->
                      arg5:'T5 -> callback:(?err:any -> unit -> unit) -> unit)
        ->
        fun ~arg1:(x403 : 'T1) ->
          fun ~arg2:(x404 : 'T2) ->
            fun ~arg3:(x405 : 'T3) ->
              fun ~arg4:(x406 : 'T4) ->
                fun ~arg5:(x407 : 'T5) ->
                  Promise.t_of_js Ojs.unit_of_js
                    (Ojs.apply
                       (Ojs.call Import.util "promisify"
                          [|(Ojs.fun_to_js 6
                               (fun (x394 : Ojs.t) ->
                                  fun (x395 : Ojs.t) ->
                                    fun (x396 : Ojs.t) ->
                                      fun (x397 : Ojs.t) ->
                                        fun (x398 : Ojs.t) ->
                                          fun (x399 : Ojs.t) ->
                                            x393 ~arg1:(Obj.magic x394)
                                              ~arg2:(Obj.magic x395)
                                              ~arg3:(Obj.magic x396)
                                              ~arg4:(Obj.magic x397)
                                              ~arg5:(Obj.magic x398)
                                              ~callback:(fun
                                                           ?err:(x400 :
                                                                  any option)
                                                           ->
                                                           fun () ->
                                                             ignore
                                                               (Ojs.call x399
                                                                  "apply"
                                                                  [|Ojs.null;((
                                                                    let x401
                                                                    =
                                                                    Ojs.new_obj
                                                                    (Ojs.get_prop_ascii
                                                                    Ojs.global
                                                                    "Array")
                                                                    [||] in
                                                                    (
                                                                    match x400
                                                                    with
                                                                    | 
                                                                    Some x402
                                                                    ->
                                                                    ignore
                                                                    (Ojs.call
                                                                    x401
                                                                    "push"
                                                                    [|(
                                                                    any_to_js
                                                                    x402)|])
                                                                    | 
                                                                    None ->
                                                                    ());
                                                                    x401))|]))))|])
                       [|(Obj.magic x403);(Obj.magic x404);(Obj.magic x405);(
                         Obj.magic x406);(Obj.magic x407)|])
    let (promisify : fn:untyped_function -> untyped_function) =
      fun ~fn:(x409 : untyped_function) ->
        untyped_function_of_js
          (Ojs.call Import.util "promisify" [|(untyped_function_to_js x409)|])
    module Promisify =
      struct
        let (custom : any) =
          any_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.util "promisify")
               "custom")
      end
    module Types =
      struct
        let (isAnyArrayBuffer : object_:any -> bool) =
          fun ~object_:(x410 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isAnyArrayBuffer" [|(any_to_js x410)|])
        let (isArgumentsObject : object_:any -> bool) =
          fun ~object_:(x411 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isArgumentsObject" [|(any_to_js x411)|])
        let (isArrayBuffer : object_:any -> bool) =
          fun ~object_:(x412 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isArrayBuffer" [|(any_to_js x412)|])
        let (isArrayBufferView : object_:any -> bool) =
          fun ~object_:(x413 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isArrayBufferView" [|(any_to_js x413)|])
        let (isAsyncFunction : object_:any -> bool) =
          fun ~object_:(x414 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isAsyncFunction" [|(any_to_js x414)|])
        let (isBigInt64Array : value:any -> bool) =
          fun ~value:(x415 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isBigInt64Array" [|(any_to_js x415)|])
        let (isBigUint64Array : value:any -> bool) =
          fun ~value:(x416 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isBigUint64Array" [|(any_to_js x416)|])
        let (isBooleanObject : object_:any -> bool) =
          fun ~object_:(x417 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isBooleanObject" [|(any_to_js x417)|])
        let (isBoxedPrimitive : object_:any -> bool) =
          fun ~object_:(x418 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isBoxedPrimitive" [|(any_to_js x418)|])
        let (isDataView : object_:any -> bool) =
          fun ~object_:(x419 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isDataView"
                 [|(any_to_js x419)|])
        let (isDate : object_:any -> bool) =
          fun ~object_:(x420 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isDate"
                 [|(any_to_js x420)|])
        let (isExternal : object_:any -> bool) =
          fun ~object_:(x421 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isExternal"
                 [|(any_to_js x421)|])
        let (isFloat32Array : object_:any -> bool) =
          fun ~object_:(x422 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isFloat32Array" [|(any_to_js x422)|])
        let (isFloat64Array : object_:any -> bool) =
          fun ~object_:(x423 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isFloat64Array" [|(any_to_js x423)|])
        let (isGeneratorFunction : object_:any -> bool) =
          fun ~object_:(x424 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isGeneratorFunction" [|(any_to_js x424)|])
        let (isGeneratorObject : object_:any -> bool) =
          fun ~object_:(x425 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isGeneratorObject" [|(any_to_js x425)|])
        let (isInt8Array : object_:any -> bool) =
          fun ~object_:(x426 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isInt8Array" [|(any_to_js x426)|])
        let (isInt16Array : object_:any -> bool) =
          fun ~object_:(x427 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isInt16Array" [|(any_to_js x427)|])
        let (isInt32Array : object_:any -> bool) =
          fun ~object_:(x428 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isInt32Array" [|(any_to_js x428)|])
        let (isMap : object_:('T, anonymous_interface_0) union2 -> bool) =
          fun ~object_:(x429 : ('T, anonymous_interface_0) union2) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isMap"
                 [|(union2_to_js Obj.magic anonymous_interface_0_to_js x429)|])
        let (isMapIterator : object_:any -> bool) =
          fun ~object_:(x432 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isMapIterator" [|(any_to_js x432)|])
        let (isModuleNamespaceObject : value:any -> bool) =
          fun ~value:(x433 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isModuleNamespaceObject" [|(any_to_js x433)|])
        let (isNativeError : object_:any -> bool) =
          fun ~object_:(x434 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isNativeError" [|(any_to_js x434)|])
        let (isNumberObject : object_:any -> bool) =
          fun ~object_:(x435 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isNumberObject" [|(any_to_js x435)|])
        let (isPromise : object_:any -> bool) =
          fun ~object_:(x436 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isPromise"
                 [|(any_to_js x436)|])
        let (isProxy : object_:any -> bool) =
          fun ~object_:(x437 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isProxy"
                 [|(any_to_js x437)|])
        let (isRegExp : object_:any -> bool) =
          fun ~object_:(x438 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isRegExp"
                 [|(any_to_js x438)|])
        let (isSet : object_:('T, anonymous_interface_0) union2 -> bool) =
          fun ~object_:(x439 : ('T, anonymous_interface_0) union2) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isSet"
                 [|(union2_to_js Obj.magic anonymous_interface_0_to_js x439)|])
        let (isSetIterator : object_:any -> bool) =
          fun ~object_:(x442 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isSetIterator" [|(any_to_js x442)|])
        let (isSharedArrayBuffer : object_:any -> bool) =
          fun ~object_:(x443 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isSharedArrayBuffer" [|(any_to_js x443)|])
        let (isStringObject : object_:any -> bool) =
          fun ~object_:(x444 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isStringObject" [|(any_to_js x444)|])
        let (isSymbolObject : object_:any -> bool) =
          fun ~object_:(x445 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isSymbolObject" [|(any_to_js x445)|])
        let (isTypedArray : object_:any -> bool) =
          fun ~object_:(x446 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isTypedArray" [|(any_to_js x446)|])
        let (isUint8Array : object_:any -> bool) =
          fun ~object_:(x447 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isUint8Array" [|(any_to_js x447)|])
        let (isUint8ClampedArray : object_:any -> bool) =
          fun ~object_:(x448 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isUint8ClampedArray" [|(any_to_js x448)|])
        let (isUint16Array : object_:any -> bool) =
          fun ~object_:(x449 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isUint16Array" [|(any_to_js x449)|])
        let (isUint32Array : object_:any -> bool) =
          fun ~object_:(x450 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types")
                 "isUint32Array" [|(any_to_js x450)|])
        let (isWeakMap : object_:any -> bool) =
          fun ~object_:(x451 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isWeakMap"
                 [|(any_to_js x451)|])
        let (isWeakSet : object_:any -> bool) =
          fun ~object_:(x452 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.util "types") "isWeakSet"
                 [|(any_to_js x452)|])
      end
    module TextDecoder =
      struct
        type t = util_TextDecoder
        let rec t_of_js : Ojs.t -> t =
          fun (x454 : Ojs.t) -> util_TextDecoder_of_js x454
        and t_to_js : t -> Ojs.t =
          fun (x453 : util_TextDecoder) -> util_TextDecoder_to_js x453
        let (get_encoding : t -> string) =
          fun (x455 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x455) "encoding")
        let (get_fatal : t -> bool) =
          fun (x456 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x456) "fatal")
        let (get_ignoreBOM : t -> bool) =
          fun (x457 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x457) "ignoreBOM")
        let (create :
          ?encoding:string -> ?options:anonymous_interface_1 -> unit -> t) =
          fun ?encoding:(x458 : string option) ->
            fun ?options:(x459 : anonymous_interface_1 option) ->
              fun () ->
                t_of_js
                  (Ojs.new_obj_arr
                     (Ojs.get_prop_ascii Import.util "TextDecoder")
                     (let x460 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      (match x458 with
                       | Some x462 ->
                           ignore
                             (Ojs.call x460 "push"
                                [|(Ojs.string_to_js x462)|])
                       | None -> ());
                      (match x459 with
                       | Some x461 ->
                           ignore
                             (Ojs.call x460 "push"
                                [|(anonymous_interface_1_to_js x461)|])
                       | None -> ());
                      x460))
        let (decode :
          t ->
            ?input:(ArrayBuffer.t, ArrayBufferView.t) union2 or_null ->
              ?options:anonymous_interface_2 -> unit -> string)
          =
          fun (x471 : t) ->
            fun
              ?input:(x463 :
                       (ArrayBuffer.t, ArrayBufferView.t) union2 or_null
                         option)
              ->
              fun ?options:(x464 : anonymous_interface_2 option) ->
                fun () ->
                  Ojs.string_of_js
                    (let x472 = t_to_js x471 in
                     Ojs.call (Ojs.get_prop_ascii x472 "decode") "apply"
                       [|x472;((let x465 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x463 with
                                 | Some x467 ->
                                     ignore
                                       (Ojs.call x465 "push"
                                          [|(or_null_to_js
                                               (fun
                                                  (x468 :
                                                    (ArrayBuffer.t,
                                                      ArrayBufferView.t)
                                                      union2)
                                                  ->
                                                  union2_to_js
                                                    ArrayBuffer.t_to_js
                                                    ArrayBufferView.t_to_js
                                                    x468) x467)|])
                                 | None -> ());
                                (match x464 with
                                 | Some x466 ->
                                     ignore
                                       (Ojs.call x465 "push"
                                          [|(anonymous_interface_2_to_js x466)|])
                                 | None -> ());
                                x465))|])
      end
    module EncodeIntoResult =
      struct
        type t = util_EncodeIntoResult
        let rec t_of_js : Ojs.t -> t =
          fun (x474 : Ojs.t) -> util_EncodeIntoResult_of_js x474
        and t_to_js : t -> Ojs.t =
          fun (x473 : util_EncodeIntoResult) ->
            util_EncodeIntoResult_to_js x473
        let (get_read : t -> int) =
          fun (x475 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x475) "read")
        let (set_read : t -> int -> unit) =
          fun (x476 : t) ->
            fun (x477 : int) ->
              Ojs.set_prop_ascii (t_to_js x476) "read" (Ojs.int_to_js x477)
        let (get_written : t -> int) =
          fun (x478 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x478) "written")
        let (set_written : t -> int -> unit) =
          fun (x479 : t) ->
            fun (x480 : int) ->
              Ojs.set_prop_ascii (t_to_js x479) "written"
                (Ojs.int_to_js x480)
      end
    module TextEncoder =
      struct
        type t = util_TextEncoder
        let rec t_of_js : Ojs.t -> t =
          fun (x482 : Ojs.t) -> util_TextEncoder_of_js x482
        and t_to_js : t -> Ojs.t =
          fun (x481 : util_TextEncoder) -> util_TextEncoder_to_js x481
        let (get_encoding : t -> string) =
          fun (x483 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x483) "encoding")
        let (encode : t -> ?input:string -> unit -> Uint8Array.t) =
          fun (x487 : t) ->
            fun ?input:(x484 : string option) ->
              fun () ->
                Uint8Array.t_of_js
                  (let x488 = t_to_js x487 in
                   Ojs.call (Ojs.get_prop_ascii x488 "encode") "apply"
                     [|x488;((let x485 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x484 with
                               | Some x486 ->
                                   ignore
                                     (Ojs.call x485 "push"
                                        [|(Ojs.string_to_js x486)|])
                               | None -> ());
                              x485))|])
        let (encodeInto :
          t -> input:string -> output:Uint8Array.t -> util_EncodeIntoResult)
          =
          fun (x491 : t) ->
            fun ~input:(x489 : string) ->
              fun ~output:(x490 : Uint8Array.t) ->
                util_EncodeIntoResult_of_js
                  (Ojs.call (t_to_js x491) "encodeInto"
                     [|(Ojs.string_to_js x489);(Uint8Array.t_to_js x490)|])
      end
  end
