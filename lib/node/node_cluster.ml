[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Cluster =
  struct
    open Node_net
    module ClusterSettings =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
        and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
        let (get_exec_argv : t -> string list) =
          fun (x3 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3) "execArgv")
        let (set_exec_argv : t -> string list -> unit) =
          fun (x5 : t) ->
            fun (x6 : string list) ->
              Ojs.set_prop_ascii (t_to_js x5) "execArgv"
                (Ojs.list_to_js Ojs.string_to_js x6)
        let (get_exec : t -> string) =
          fun (x8 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x8) "exec")
        let (set_exec : t -> string -> unit) =
          fun (x9 : t) ->
            fun (x10 : string) ->
              Ojs.set_prop_ascii (t_to_js x9) "exec" (Ojs.string_to_js x10)
        let (get_args : t -> string list) =
          fun (x11 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x11) "args")
        let (set_args : t -> string list -> unit) =
          fun (x13 : t) ->
            fun (x14 : string list) ->
              Ojs.set_prop_ascii (t_to_js x13) "args"
                (Ojs.list_to_js Ojs.string_to_js x14)
        let (get_silent : t -> bool) =
          fun (x16 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x16) "silent")
        let (set_silent : t -> bool -> unit) =
          fun (x17 : t) ->
            fun (x18 : bool) ->
              Ojs.set_prop_ascii (t_to_js x17) "silent" (Ojs.bool_to_js x18)
        let (get_stdio : t -> any list) =
          fun (x19 : t) ->
            Ojs.list_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x19) "stdio")
        let (set_stdio : t -> any list -> unit) =
          fun (x21 : t) ->
            fun (x22 : any list) ->
              Ojs.set_prop_ascii (t_to_js x21) "stdio"
                (Ojs.list_to_js any_to_js x22)
        let (get_uid : t -> int) =
          fun (x24 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x24) "uid")
        let (set_uid : t -> int -> unit) =
          fun (x25 : t) ->
            fun (x26 : int) ->
              Ojs.set_prop_ascii (t_to_js x25) "uid" (Ojs.int_to_js x26)
        let (get_gid : t -> int) =
          fun (x27 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x27) "gid")
        let (set_gid : t -> int -> unit) =
          fun (x28 : t) ->
            fun (x29 : int) ->
              Ojs.set_prop_ascii (t_to_js x28) "gid" (Ojs.int_to_js x29)
        let (get_inspect_port : t -> (unit -> int) or_number) =
          fun (x30 : t) ->
            or_number_of_js
              (fun (x31 : Ojs.t) ->
                 fun () -> Ojs.int_of_js (Ojs.apply x31 [||]))
              (Ojs.get_prop_ascii (t_to_js x30) "inspectPort")
        let (set_inspect_port : t -> (unit -> int) or_number -> unit) =
          fun (x32 : t) ->
            fun (x33 : (unit -> int) or_number) ->
              Ojs.set_prop_ascii (t_to_js x32) "inspectPort"
                (or_number_to_js
                   (fun (x34 : unit -> int) ->
                      Ojs.fun_to_js 1 (fun _ -> Ojs.int_to_js (x34 ()))) x33)
      end
    module Address =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x36 : Ojs.t) -> x36
        and t_to_js : t -> Ojs.t = fun (x35 : Ojs.t) -> x35
        let (get_address : t -> string) =
          fun (x37 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x37) "address")
        let (set_address : t -> string -> unit) =
          fun (x38 : t) ->
            fun (x39 : string) ->
              Ojs.set_prop_ascii (t_to_js x38) "address"
                (Ojs.string_to_js x39)
        let (get_port : t -> int) =
          fun (x40 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x40) "port")
        let (set_port : t -> int -> unit) =
          fun (x41 : t) ->
            fun (x42 : int) ->
              Ojs.set_prop_ascii (t_to_js x41) "port" (Ojs.int_to_js x42)
        let (get_address_type : t -> [ `udp4  | `udp6 ] or_number) =
          fun (x43 : t) ->
            or_number_of_js
              (fun (x44 : Ojs.t) ->
                 let x45 = x44 in
                 match Ojs.string_of_js x45 with
                 | "udp4" -> `udp4
                 | "udp6" -> `udp6
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x43) "addressType")
        let (set_address_type : t -> [ `udp4  | `udp6 ] or_number -> unit) =
          fun (x46 : t) ->
            fun (x47 : [ `udp4  | `udp6 ] or_number) ->
              Ojs.set_prop_ascii (t_to_js x46) "addressType"
                (or_number_to_js
                   (fun (x48 : [ `udp4  | `udp6 ]) ->
                      match x48 with
                      | `udp4 -> Ojs.string_to_js "udp4"
                      | `udp6 -> Ojs.string_to_js "udp6") x47)
      end
    module Worker =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x50 : Ojs.t) -> x50
        and t_to_js : t -> Ojs.t = fun (x49 : Ojs.t) -> x49
        let (get_id : t -> int) =
          fun (x51 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x51) "id")
        let (set_id : t -> int -> unit) =
          fun (x52 : t) ->
            fun (x53 : int) ->
              Ojs.set_prop_ascii (t_to_js x52) "id" (Ojs.int_to_js x53)
        let (get_process :
          t -> Node_child_process.Child_process.ChildProcess.t) =
          fun (x54 : t) ->
            Node_child_process.Child_process.ChildProcess.t_of_js
              (Ojs.get_prop_ascii (t_to_js x54) "process")
        let (set_process :
          t -> Node_child_process.Child_process.ChildProcess.t -> unit) =
          fun (x55 : t) ->
            fun (x56 : Node_child_process.Child_process.ChildProcess.t) ->
              Ojs.set_prop_ascii (t_to_js x55) "process"
                (Node_child_process.Child_process.ChildProcess.t_to_js x56)
        let (send :
          t ->
            message:Node_child_process.Child_process.Serializable.t ->
              ?send_handle:Node_child_process.Child_process.SendHandle.t ->
                ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
          =
          fun (x65 : t) ->
            fun
              ~message:(x57 :
                         Node_child_process.Child_process.Serializable.t)
              ->
              fun
                ?send_handle:(x58 :
                               Node_child_process.Child_process.SendHandle.t
                                 option)
                ->
                fun ?callback:(x59 : (error:Error.t or_null -> unit) option)
                  ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x66 = t_to_js x65 in
                       Ojs.call (Ojs.get_prop_ascii x66 "send") "apply"
                         [|x66;((let x60 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x60 "push"
                                      [|(Node_child_process.Child_process.Serializable.t_to_js
                                           x57)|]);
                                 (match x58 with
                                  | Some x64 ->
                                      ignore
                                        (Ojs.call x60 "push"
                                           [|(Node_child_process.Child_process.SendHandle.t_to_js
                                                x64)|])
                                  | None -> ());
                                 (match x59 with
                                  | Some x61 ->
                                      ignore
                                        (Ojs.call x60 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun (x62 : Ojs.t) ->
                                                   x61
                                                     ~error:(or_null_of_js
                                                               Error.t_of_js
                                                               x62)))|])
                                  | None -> ());
                                 x60))|])
        let (kill : t -> ?signal:string -> unit -> unit) =
          fun (x70 : t) ->
            fun ?signal:(x67 : string option) ->
              fun () ->
                ignore
                  (let x71 = t_to_js x70 in
                   Ojs.call (Ojs.get_prop_ascii x71 "kill") "apply"
                     [|x71;((let x68 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x67 with
                              | Some x69 ->
                                  ignore
                                    (Ojs.call x68 "push"
                                       [|(Ojs.string_to_js x69)|])
                              | None -> ());
                             x68))|])
        let (destroy : t -> ?signal:string -> unit -> unit) =
          fun (x75 : t) ->
            fun ?signal:(x72 : string option) ->
              fun () ->
                ignore
                  (let x76 = t_to_js x75 in
                   Ojs.call (Ojs.get_prop_ascii x76 "destroy") "apply"
                     [|x76;((let x73 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x72 with
                              | Some x74 ->
                                  ignore
                                    (Ojs.call x73 "push"
                                       [|(Ojs.string_to_js x74)|])
                              | None -> ());
                             x73))|])
        let (disconnect : t -> unit) =
          fun (x77 : t) -> ignore (Ojs.call (t_to_js x77) "disconnect" [||])
        let (is_connected : t -> bool) =
          fun (x78 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x78) "isConnected" [||])
        let (is_dead : t -> bool) =
          fun (x79 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x79) "isDead" [||])
        let (get_exited_after_disconnect : t -> bool) =
          fun (x80 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x80) "exitedAfterDisconnect")
        let (set_exited_after_disconnect : t -> bool -> unit) =
          fun (x81 : t) ->
            fun (x82 : bool) ->
              Ojs.set_prop_ascii (t_to_js x81) "exitedAfterDisconnect"
                (Ojs.bool_to_js x82)
        module DisconnectListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x84 : Ojs.t) -> fun () -> ignore (Ojs.apply x84 [||])
            and t_to_js : t -> Ojs.t =
              fun (x83 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x83 ())
          end
        module ErrorListener =
          struct
            type t = error:Error.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x87 : Ojs.t) ->
                fun ~error:(x88 : Error.t) ->
                  ignore (Ojs.apply x87 [|(Error.t_to_js x88)|])
            and t_to_js : t -> Ojs.t =
              fun (x85 : error:Error.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x86 : Ojs.t) -> x85 ~error:(Error.t_of_js x86))
          end
        module ExitListener =
          struct
            type t = code:int -> signal:string -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x92 : Ojs.t) ->
                fun ~code:(x93 : int) ->
                  fun ~signal:(x94 : string) ->
                    ignore
                      (Ojs.apply x92
                         [|(Ojs.int_to_js x93);(Ojs.string_to_js x94)|])
            and t_to_js : t -> Ojs.t =
              fun (x89 : code:int -> signal:string -> unit) ->
                Ojs.fun_to_js 2
                  (fun (x90 : Ojs.t) ->
                     fun (x91 : Ojs.t) ->
                       x89 ~code:(Ojs.int_of_js x90)
                         ~signal:(Ojs.string_of_js x91))
          end
        module ListeningListener =
          struct
            type t = address:Address.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x97 : Ojs.t) ->
                fun ~address:(x98 : Address.t) ->
                  ignore (Ojs.apply x97 [|(Address.t_to_js x98)|])
            and t_to_js : t -> Ojs.t =
              fun (x95 : address:Address.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x96 : Ojs.t) -> x95 ~address:(Address.t_of_js x96))
          end
        module MessageListener =
          struct
            type t =
              message:any ->
                handle:(Net.Server.t, Net.Socket.t) union2 -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x104 : Ojs.t) ->
                fun ~message:(x105 : any) ->
                  fun ~handle:(x106 : (Net.Server.t, Net.Socket.t) union2) ->
                    ignore
                      (Ojs.apply x104
                         [|(any_to_js x105);(union2_to_js Net.Server.t_to_js
                                               Net.Socket.t_to_js x106)|])
            and t_to_js : t -> Ojs.t =
              fun
                (x99 :
                  message:any ->
                    handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
                ->
                Ojs.fun_to_js 2
                  (fun (x100 : Ojs.t) ->
                     fun (x101 : Ojs.t) ->
                       x99 ~message:(any_of_js x100)
                         ~handle:(union2_of_js Net.Server.t_of_js
                                    Net.Socket.t_of_js x101))
          end
        module OnlineListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x110 : Ojs.t) -> fun () -> ignore (Ojs.apply x110 [||])
            and t_to_js : t -> Ojs.t =
              fun (x109 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x109 ())
          end
        type listener =
          [ `Disconnect of DisconnectListener.t  | `Error of ErrorListener.t 
          | `Exit of ExitListener.t  | `Listening of ListeningListener.t 
          | `Message of MessageListener.t  | `Online of OnlineListener.t ]
        let rec listener_to_js : listener -> Ojs.t =
          fun
            (x111 :
              [ `Disconnect of DisconnectListener.t 
              | `Error of ErrorListener.t  | `Exit of ExitListener.t 
              | `Listening of ListeningListener.t 
              | `Message of MessageListener.t 
              | `Online of OnlineListener.t ])
            ->
            match x111 with
            | `Disconnect x112 -> DisconnectListener.t_to_js x112
            | `Error x113 -> ErrorListener.t_to_js x113
            | `Exit x114 -> ExitListener.t_to_js x114
            | `Listening x115 -> ListeningListener.t_to_js x115
            | `Message x116 -> MessageListener.t_to_js x116
            | `Online x117 -> OnlineListener.t_to_js x117
        let (on : t -> string -> Ojs.t -> unit) =
          fun (x122 : t) ->
            fun (x120 : string) ->
              fun (x121 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x122) "on"
                     [|(Ojs.string_to_js x120);x121|])
        let (add_listener : t -> string -> Ojs.t -> unit) =
          fun (x125 : t) ->
            fun (x123 : string) ->
              fun (x124 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x125) "addListener"
                     [|(Ojs.string_to_js x123);x124|])
        let (once : t -> string -> Ojs.t -> unit) =
          fun (x128 : t) ->
            fun (x126 : string) ->
              fun (x127 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x128) "once"
                     [|(Ojs.string_to_js x126);x127|])
        let (prepend_listener : t -> string -> Ojs.t -> unit) =
          fun (x131 : t) ->
            fun (x129 : string) ->
              fun (x130 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x131) "prependListener"
                     [|(Ojs.string_to_js x129);x130|])
        let (prepend_once_listener : t -> string -> Ojs.t -> unit) =
          fun (x134 : t) ->
            fun (x132 : string) ->
              fun (x133 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x134) "prependOnceListener"
                     [|(Ojs.string_to_js x132);x133|])
        let with_listener_fn fn t =
          function
          | `Disconnect f ->
              (fn t "disconnect") @@ (DisconnectListener.t_to_js f)
          | `Error f -> (fn t "error") @@ (ErrorListener.t_to_js f)
          | `Exit f -> (fn t "exit") @@ (ExitListener.t_to_js f)
          | `Listening f ->
              (fn t "listening") @@ (ListeningListener.t_to_js f)
          | `Message f -> (fn t "message") @@ (MessageListener.t_to_js f)
          | `Online f -> (fn t "online") @@ (OnlineListener.t_to_js f)
        let on = with_listener_fn on
        let add_listener = with_listener_fn add_listener
        let once = with_listener_fn once
        let prepend_listener = with_listener_fn prepend_listener
        let prepend_once_listener = with_listener_fn prepend_once_listener
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x146 : t) ->
            fun ~event:(x141 : symbol or_string) ->
              fun ~args:(x142 : any list) ->
                Ojs.bool_of_js
                  (let x147 = t_to_js x146 in
                   Ojs.call (Ojs.get_prop_ascii x147 "emit") "apply"
                     [|x147;((let x143 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x143 "push"
                                   [|(or_string_to_js symbol_to_js x141)|]);
                              List.iter
                                (fun (x144 : any) ->
                                   ignore
                                     (Ojs.call x143 "push"
                                        [|(any_to_js x144)|])) x142;
                              x143))|])
        let (emit_disconnect : t -> event:[ `disconnect ] -> bool) =
          fun (x149 : t) ->
            fun ~event:(x148 : [ `disconnect ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x149) "emit"
                   [|((match x148 with
                       | `disconnect -> Ojs.string_to_js "disconnect"))|])
        let (emit_error : t -> event:[ `error ] -> error:Error.t -> bool) =
          fun (x152 : t) ->
            fun ~event:(x150 : [ `error ]) ->
              fun ~error:(x151 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x152) "emit"
                     [|((match x150 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x151)|])
        let (emit_exit :
          t -> event:[ `exit ] -> code:int -> signal:string -> bool) =
          fun (x156 : t) ->
            fun ~event:(x153 : [ `exit ]) ->
              fun ~code:(x154 : int) ->
                fun ~signal:(x155 : string) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x156) "emit"
                       [|((match x153 with | `exit -> Ojs.string_to_js "exit"));(
                         Ojs.int_to_js x154);(Ojs.string_to_js x155)|])
        let (emit_listening :
          t -> event:[ `listening ] -> address:Address.t -> bool) =
          fun (x159 : t) ->
            fun ~event:(x157 : [ `listening ]) ->
              fun ~address:(x158 : Address.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x159) "emit"
                     [|((match x157 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Address.t_to_js x158)|])
        let (emit_message :
          t ->
            event:[ `message ] ->
              message:any ->
                handle:(Net.Server.t, Net.Socket.t) union2 -> bool)
          =
          fun (x165 : t) ->
            fun ~event:(x160 : [ `message ]) ->
              fun ~message:(x161 : any) ->
                fun ~handle:(x162 : (Net.Server.t, Net.Socket.t) union2) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x165) "emit"
                       [|((match x160 with
                           | `message -> Ojs.string_to_js "message"));(
                         any_to_js x161);(union2_to_js Net.Server.t_to_js
                                            Net.Socket.t_to_js x162)|])
        let (emit_online : t -> event:[ `online ] -> bool) =
          fun (x167 : t) ->
            fun ~event:(x166 : [ `online ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x167) "emit"
                   [|((match x166 with | `online -> Ojs.string_to_js "online"))|])
      end
    module Cluster =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x169 : Ojs.t) -> x169
        and t_to_js : t -> Ojs.t = fun (x168 : Ojs.t) -> x168
        let (get_worker : t -> Worker.t) =
          fun (x170 : t) ->
            Worker.t_of_js (Ojs.get_prop_ascii (t_to_js x170) "Worker")
        let (set_worker : t -> Worker.t -> unit) =
          fun (x171 : t) ->
            fun (x172 : Worker.t) ->
              Ojs.set_prop_ascii (t_to_js x171) "Worker"
                (Worker.t_to_js x172)
        let (disconnect : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x176 : t) ->
            fun ?callback:(x173 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x177 = t_to_js x176 in
                   Ojs.call (Ojs.get_prop_ascii x177 "disconnect") "apply"
                     [|x177;((let x174 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x173 with
                               | Some x175 ->
                                   ignore
                                     (Ojs.call x174 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x175 ()))|])
                               | None -> ());
                              x174))|])
        let (fork : t -> ?env:any -> unit -> Worker.t) =
          fun (x181 : t) ->
            fun ?env:(x178 : any option) ->
              fun () ->
                Worker.t_of_js
                  (let x182 = t_to_js x181 in
                   Ojs.call (Ojs.get_prop_ascii x182 "fork") "apply"
                     [|x182;((let x179 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x178 with
                               | Some x180 ->
                                   ignore
                                     (Ojs.call x179 "push"
                                        [|(any_to_js x180)|])
                               | None -> ());
                              x179))|])
        let (get_is_master : t -> bool) =
          fun (x183 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x183) "isMaster")
        let (set_is_master : t -> bool -> unit) =
          fun (x184 : t) ->
            fun (x185 : bool) ->
              Ojs.set_prop_ascii (t_to_js x184) "isMaster"
                (Ojs.bool_to_js x185)
        let (get_is_worker : t -> bool) =
          fun (x186 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x186) "isWorker")
        let (set_is_worker : t -> bool -> unit) =
          fun (x187 : t) ->
            fun (x188 : bool) ->
              Ojs.set_prop_ascii (t_to_js x187) "isWorker"
                (Ojs.bool_to_js x188)
        let (get_scheduling_policy : t -> int) =
          fun (x189 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x189) "schedulingPolicy")
        let (set_scheduling_policy : t -> int -> unit) =
          fun (x190 : t) ->
            fun (x191 : int) ->
              Ojs.set_prop_ascii (t_to_js x190) "schedulingPolicy"
                (Ojs.int_to_js x191)
        let (get_settings : t -> ClusterSettings.t) =
          fun (x192 : t) ->
            ClusterSettings.t_of_js
              (Ojs.get_prop_ascii (t_to_js x192) "settings")
        let (set_settings : t -> ClusterSettings.t -> unit) =
          fun (x193 : t) ->
            fun (x194 : ClusterSettings.t) ->
              Ojs.set_prop_ascii (t_to_js x193) "settings"
                (ClusterSettings.t_to_js x194)
        let (setup_master : t -> ?settings:ClusterSettings.t -> unit -> unit)
          =
          fun (x198 : t) ->
            fun ?settings:(x195 : ClusterSettings.t option) ->
              fun () ->
                ignore
                  (let x199 = t_to_js x198 in
                   Ojs.call (Ojs.get_prop_ascii x199 "setupMaster") "apply"
                     [|x199;((let x196 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x195 with
                               | Some x197 ->
                                   ignore
                                     (Ojs.call x196 "push"
                                        [|(ClusterSettings.t_to_js x197)|])
                               | None -> ());
                              x196))|])
        let (get_worker : t -> Worker.t) =
          fun (x200 : t) ->
            Worker.t_of_js (Ojs.get_prop_ascii (t_to_js x200) "worker")
        let (set_worker : t -> Worker.t -> unit) =
          fun (x201 : t) ->
            fun (x202 : Worker.t) ->
              Ojs.set_prop_ascii (t_to_js x201) "worker"
                (Worker.t_to_js x202)
        let (get_workers : t -> Worker.t Dict.t) =
          fun (x203 : t) ->
            Dict.t_of_js Worker.t_of_js
              (Ojs.get_prop_ascii (t_to_js x203) "workers")
        let (set_workers : t -> Worker.t Dict.t -> unit) =
          fun (x205 : t) ->
            fun (x206 : Worker.t Dict.t) ->
              Ojs.set_prop_ascii (t_to_js x205) "workers"
                (Dict.t_to_js Worker.t_to_js x206)
        let (get_sched_none : t -> int) =
          fun (x208 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x208) "SCHED_NONE")
        let (get_sched_rr : t -> int) =
          fun (x209 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x209) "SCHED_RR")
        module DisconnectListener =
          struct
            type t = worker:Worker.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x212 : Ojs.t) ->
                fun ~worker:(x213 : Worker.t) ->
                  ignore (Ojs.apply x212 [|(Worker.t_to_js x213)|])
            and t_to_js : t -> Ojs.t =
              fun (x210 : worker:Worker.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x211 : Ojs.t) -> x210 ~worker:(Worker.t_of_js x211))
          end
        module ExitListener =
          struct
            type t = worker:Worker.t -> code:int -> signal:string -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x218 : Ojs.t) ->
                fun ~worker:(x219 : Worker.t) ->
                  fun ~code:(x220 : int) ->
                    fun ~signal:(x221 : string) ->
                      ignore
                        (Ojs.apply x218
                           [|(Worker.t_to_js x219);(Ojs.int_to_js x220);(
                             Ojs.string_to_js x221)|])
            and t_to_js : t -> Ojs.t =
              fun
                (x214 : worker:Worker.t -> code:int -> signal:string -> unit)
                ->
                Ojs.fun_to_js 3
                  (fun (x215 : Ojs.t) ->
                     fun (x216 : Ojs.t) ->
                       fun (x217 : Ojs.t) ->
                         x214 ~worker:(Worker.t_of_js x215)
                           ~code:(Ojs.int_of_js x216)
                           ~signal:(Ojs.string_of_js x217))
          end
        module ForkListener =
          struct
            type t = worker:Worker.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x224 : Ojs.t) ->
                fun ~worker:(x225 : Worker.t) ->
                  ignore (Ojs.apply x224 [|(Worker.t_to_js x225)|])
            and t_to_js : t -> Ojs.t =
              fun (x222 : worker:Worker.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x223 : Ojs.t) -> x222 ~worker:(Worker.t_of_js x223))
          end
        module ListeningListener =
          struct
            type t = worker:Worker.t -> address:Address.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x229 : Ojs.t) ->
                fun ~worker:(x230 : Worker.t) ->
                  fun ~address:(x231 : Address.t) ->
                    ignore
                      (Ojs.apply x229
                         [|(Worker.t_to_js x230);(Address.t_to_js x231)|])
            and t_to_js : t -> Ojs.t =
              fun (x226 : worker:Worker.t -> address:Address.t -> unit) ->
                Ojs.fun_to_js 2
                  (fun (x227 : Ojs.t) ->
                     fun (x228 : Ojs.t) ->
                       x226 ~worker:(Worker.t_of_js x227)
                         ~address:(Address.t_of_js x228))
          end
        module MessageListener =
          struct
            type t =
              worker:Worker.t ->
                message:any ->
                  handle:(Net.Server.t, Net.Socket.t) union2 -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x238 : Ojs.t) ->
                fun ~worker:(x239 : Worker.t) ->
                  fun ~message:(x240 : any) ->
                    fun ~handle:(x241 : (Net.Server.t, Net.Socket.t) union2)
                      ->
                      ignore
                        (Ojs.apply x238
                           [|(Worker.t_to_js x239);(any_to_js x240);(
                             union2_to_js Net.Server.t_to_js
                               Net.Socket.t_to_js x241)|])
            and t_to_js : t -> Ojs.t =
              fun
                (x232 :
                  worker:Worker.t ->
                    message:any ->
                      handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
                ->
                Ojs.fun_to_js 3
                  (fun (x233 : Ojs.t) ->
                     fun (x234 : Ojs.t) ->
                       fun (x235 : Ojs.t) ->
                         x232 ~worker:(Worker.t_of_js x233)
                           ~message:(any_of_js x234)
                           ~handle:(union2_of_js Net.Server.t_of_js
                                      Net.Socket.t_of_js x235))
          end
        module OnlineListener =
          struct
            type t = worker:Worker.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x246 : Ojs.t) ->
                fun ~worker:(x247 : Worker.t) ->
                  ignore (Ojs.apply x246 [|(Worker.t_to_js x247)|])
            and t_to_js : t -> Ojs.t =
              fun (x244 : worker:Worker.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x245 : Ojs.t) -> x244 ~worker:(Worker.t_of_js x245))
          end
        module SetupListener =
          struct
            type t = settings:ClusterSettings.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x250 : Ojs.t) ->
                fun ~settings:(x251 : ClusterSettings.t) ->
                  ignore (Ojs.apply x250 [|(ClusterSettings.t_to_js x251)|])
            and t_to_js : t -> Ojs.t =
              fun (x248 : settings:ClusterSettings.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x249 : Ojs.t) ->
                     x248 ~settings:(ClusterSettings.t_of_js x249))
          end
        type listener =
          [ `Disconnect of DisconnectListener.t  | `Exit of ExitListener.t 
          | `Fork of ForkListener.t  | `Listening of ListeningListener.t 
          | `Message of MessageListener.t  | `Online of OnlineListener.t 
          | `Setup of SetupListener.t ]
        let rec listener_to_js : listener -> Ojs.t =
          fun
            (x252 :
              [ `Disconnect of DisconnectListener.t 
              | `Exit of ExitListener.t  | `Fork of ForkListener.t 
              | `Listening of ListeningListener.t 
              | `Message of MessageListener.t  | `Online of OnlineListener.t 
              | `Setup of SetupListener.t ])
            ->
            match x252 with
            | `Disconnect x253 -> DisconnectListener.t_to_js x253
            | `Exit x254 -> ExitListener.t_to_js x254
            | `Fork x255 -> ForkListener.t_to_js x255
            | `Listening x256 -> ListeningListener.t_to_js x256
            | `Message x257 -> MessageListener.t_to_js x257
            | `Online x258 -> OnlineListener.t_to_js x258
            | `Setup x259 -> SetupListener.t_to_js x259
        let (on : t -> string -> Ojs.t -> unit) =
          fun (x264 : t) ->
            fun (x262 : string) ->
              fun (x263 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x264) "on"
                     [|(Ojs.string_to_js x262);x263|])
        let (add_listener : t -> string -> Ojs.t -> unit) =
          fun (x267 : t) ->
            fun (x265 : string) ->
              fun (x266 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x267) "addListener"
                     [|(Ojs.string_to_js x265);x266|])
        let (once : t -> string -> Ojs.t -> unit) =
          fun (x270 : t) ->
            fun (x268 : string) ->
              fun (x269 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x270) "once"
                     [|(Ojs.string_to_js x268);x269|])
        let (prepend_listener : t -> string -> Ojs.t -> unit) =
          fun (x273 : t) ->
            fun (x271 : string) ->
              fun (x272 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x273) "prependListener"
                     [|(Ojs.string_to_js x271);x272|])
        let (prepend_once_listener : t -> string -> Ojs.t -> unit) =
          fun (x276 : t) ->
            fun (x274 : string) ->
              fun (x275 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x276) "prependOnceListener"
                     [|(Ojs.string_to_js x274);x275|])
        let with_listener_fn fn t =
          function
          | `Disconnect f ->
              (fn t "disconnect") @@ (DisconnectListener.t_to_js f)
          | `Exit f -> (fn t "exit") @@ (ExitListener.t_to_js f)
          | `Fork f -> (fn t "fork") @@ (ForkListener.t_to_js f)
          | `Listening f ->
              (fn t "listening") @@ (ListeningListener.t_to_js f)
          | `Message f -> (fn t "message") @@ (MessageListener.t_to_js f)
          | `Online f -> (fn t "online") @@ (OnlineListener.t_to_js f)
          | `Setup f -> (fn t "setup") @@ (SetupListener.t_to_js f)
        let on = with_listener_fn on
        let add_listener = with_listener_fn add_listener
        let once = with_listener_fn once
        let prepend_listener = with_listener_fn prepend_listener
        let prepend_once_listener = with_listener_fn prepend_once_listener
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x289 : t) ->
            fun ~event:(x284 : symbol or_string) ->
              fun ~args:(x285 : any list) ->
                Ojs.bool_of_js
                  (let x290 = t_to_js x289 in
                   Ojs.call (Ojs.get_prop_ascii x290 "emit") "apply"
                     [|x290;((let x286 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x286 "push"
                                   [|(or_string_to_js symbol_to_js x284)|]);
                              List.iter
                                (fun (x287 : any) ->
                                   ignore
                                     (Ojs.call x286 "push"
                                        [|(any_to_js x287)|])) x285;
                              x286))|])
        let (emit' : t -> event:[ `disconnect ] -> worker:Worker.t -> bool) =
          fun (x293 : t) ->
            fun ~event:(x291 : [ `disconnect ]) ->
              fun ~worker:(x292 : Worker.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x293) "emit"
                     [|((match x291 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Worker.t_to_js x292)|])
        let (emit'' :
          t ->
            event:[ `exit ] ->
              worker:Worker.t -> code:int -> signal:string -> bool)
          =
          fun (x298 : t) ->
            fun ~event:(x294 : [ `exit ]) ->
              fun ~worker:(x295 : Worker.t) ->
                fun ~code:(x296 : int) ->
                  fun ~signal:(x297 : string) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x298) "emit"
                         [|((match x294 with
                             | `exit -> Ojs.string_to_js "exit"));(Worker.t_to_js
                                                                    x295);(
                           Ojs.int_to_js x296);(Ojs.string_to_js x297)|])
        let (emit''' : t -> event:[ `fork ] -> worker:Worker.t -> bool) =
          fun (x301 : t) ->
            fun ~event:(x299 : [ `fork ]) ->
              fun ~worker:(x300 : Worker.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x301) "emit"
                     [|((match x299 with | `fork -> Ojs.string_to_js "fork"));(
                       Worker.t_to_js x300)|])
        let (emit'''' :
          t ->
            event:[ `listening ] ->
              worker:Worker.t -> address:Address.t -> bool)
          =
          fun (x305 : t) ->
            fun ~event:(x302 : [ `listening ]) ->
              fun ~worker:(x303 : Worker.t) ->
                fun ~address:(x304 : Address.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x305) "emit"
                       [|((match x302 with
                           | `listening -> Ojs.string_to_js "listening"));(
                         Worker.t_to_js x303);(Address.t_to_js x304)|])
        let (emit''''' :
          t ->
            event:[ `message ] ->
              worker:Worker.t ->
                message:any ->
                  handle:(Net.Server.t, Net.Socket.t) union2 -> bool)
          =
          fun (x312 : t) ->
            fun ~event:(x306 : [ `message ]) ->
              fun ~worker:(x307 : Worker.t) ->
                fun ~message:(x308 : any) ->
                  fun ~handle:(x309 : (Net.Server.t, Net.Socket.t) union2) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x312) "emit"
                         [|((match x306 with
                             | `message -> Ojs.string_to_js "message"));(
                           Worker.t_to_js x307);(any_to_js x308);(union2_to_js
                                                                    Net.Server.t_to_js
                                                                    Net.Socket.t_to_js
                                                                    x309)|])
        let (emit'''''' : t -> event:[ `online ] -> worker:Worker.t -> bool)
          =
          fun (x315 : t) ->
            fun ~event:(x313 : [ `online ]) ->
              fun ~worker:(x314 : Worker.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x315) "emit"
                     [|((match x313 with
                         | `online -> Ojs.string_to_js "online"));(Worker.t_to_js
                                                                    x314)|])
        let (emit''''''' :
          t -> event:[ `setup ] -> settings:ClusterSettings.t -> bool) =
          fun (x318 : t) ->
            fun ~event:(x316 : [ `setup ]) ->
              fun ~settings:(x317 : ClusterSettings.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x318) "emit"
                     [|((match x316 with | `setup -> Ojs.string_to_js "setup"));(
                       ClusterSettings.t_to_js x317)|])
      end
    let (s_ched_none : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.cluster "SCHED_NONE")
    let (s_ched_rr : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.cluster "SCHED_RR")
    let (disconnect : ?callback:(unit -> unit) -> unit -> unit) =
      fun ?callback:(x319 : (unit -> unit) option) ->
        fun () ->
          ignore
            (let x322 = Import.cluster in
             Ojs.call (Ojs.get_prop_ascii x322 "disconnect") "apply"
               [|x322;((let x320 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x319 with
                         | Some x321 ->
                             ignore
                               (Ojs.call x320 "push"
                                  [|(Ojs.fun_to_js 1 (fun _ -> x321 ()))|])
                         | None -> ());
                        x320))|])
    let (fork : ?env:any -> unit -> Worker.t) =
      fun ?env:(x323 : any option) ->
        fun () ->
          Worker.t_of_js
            (let x326 = Import.cluster in
             Ojs.call (Ojs.get_prop_ascii x326 "fork") "apply"
               [|x326;((let x324 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x323 with
                         | Some x325 ->
                             ignore
                               (Ojs.call x324 "push" [|(any_to_js x325)|])
                         | None -> ());
                        x324))|])
    let (is_master : bool) =
      Ojs.bool_of_js (Ojs.get_prop_ascii Import.cluster "isMaster")
    let (is_worker : bool) =
      Ojs.bool_of_js (Ojs.get_prop_ascii Import.cluster "isWorker")
    let (scheduling_policy : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.cluster "schedulingPolicy")
    let (settings : ClusterSettings.t) =
      ClusterSettings.t_of_js (Ojs.get_prop_ascii Import.cluster "settings")
    let (setup_master : ?settings:ClusterSettings.t -> unit -> unit) =
      fun ?settings:(x327 : ClusterSettings.t option) ->
        fun () ->
          ignore
            (let x330 = Import.cluster in
             Ojs.call (Ojs.get_prop_ascii x330 "setupMaster") "apply"
               [|x330;((let x328 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x327 with
                         | Some x329 ->
                             ignore
                               (Ojs.call x328 "push"
                                  [|(ClusterSettings.t_to_js x329)|])
                         | None -> ());
                        x328))|])
    let (worker : Worker.t) =
      Worker.t_of_js (Ojs.get_prop_ascii Import.cluster "worker")
    let (workers : Worker.t Dict.t) =
      Dict.t_of_js Worker.t_of_js
        (Ojs.get_prop_ascii Import.cluster "workers")
    let (add_listener :
      event:string -> listener:(args:any list -> unit) -> Cluster.t) =
      fun ~event:(x332 : string) ->
        fun ~listener:(x333 : args:any list -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "addListener"
               [|(Ojs.string_to_js x332);(Ojs.fun_to_js_args
                                            (fun (x334 : _) ->
                                               x333
                                                 ~args:(Ojs.list_of_js_from
                                                          any_of_js x334 0)))|])
    let (add_listener :
      event:[ `disconnect ] ->
        listener:(worker:Worker.t -> unit) -> Cluster.t)
      =
      fun ~event:(x336 : [ `disconnect ]) ->
        fun ~listener:(x337 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "addListener"
               [|((match x336 with
                   | `disconnect -> Ojs.string_to_js "disconnect"));(
                 Ojs.fun_to_js 1
                   (fun (x338 : Ojs.t) -> x337 ~worker:(Worker.t_of_js x338)))|])
    let (add_listener :
      event:[ `exit ] ->
        listener:(worker:Worker.t -> code:int -> signal:string -> unit) ->
          Cluster.t)
      =
      fun ~event:(x339 : [ `exit ]) ->
        fun
          ~listener:(x340 :
                      worker:Worker.t -> code:int -> signal:string -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "addListener"
               [|((match x339 with | `exit -> Ojs.string_to_js "exit"));(
                 Ojs.fun_to_js 3
                   (fun (x341 : Ojs.t) ->
                      fun (x342 : Ojs.t) ->
                        fun (x343 : Ojs.t) ->
                          x340 ~worker:(Worker.t_of_js x341)
                            ~code:(Ojs.int_of_js x342)
                            ~signal:(Ojs.string_of_js x343)))|])
    let (add_listener :
      event:[ `fork ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x344 : [ `fork ]) ->
        fun ~listener:(x345 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "addListener"
               [|((match x344 with | `fork -> Ojs.string_to_js "fork"));(
                 Ojs.fun_to_js 1
                   (fun (x346 : Ojs.t) -> x345 ~worker:(Worker.t_of_js x346)))|])
    let (add_listener :
      event:[ `listening ] ->
        listener:(worker:Worker.t -> address:Address.t -> unit) -> Cluster.t)
      =
      fun ~event:(x347 : [ `listening ]) ->
        fun ~listener:(x348 : worker:Worker.t -> address:Address.t -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "addListener"
               [|((match x347 with
                   | `listening -> Ojs.string_to_js "listening"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x349 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x350 :
                                                                    Ojs.t) ->
                                                                    x348
                                                                    ~worker:(
                                                                    Worker.t_of_js
                                                                    x349)
                                                                    ~address:(
                                                                    Address.t_of_js
                                                                    x350)))|])
    let (add_listener :
      event:[ `message ] ->
        listener:(worker:Worker.t ->
                    message:any ->
                      handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          -> Cluster.t)
      =
      fun ~event:(x351 : [ `message ]) ->
        fun
          ~listener:(x352 :
                      worker:Worker.t ->
                        message:any ->
                          handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "addListener"
               [|((match x351 with | `message -> Ojs.string_to_js "message"));(
                 Ojs.fun_to_js 3
                   (fun (x353 : Ojs.t) ->
                      fun (x354 : Ojs.t) ->
                        fun (x355 : Ojs.t) ->
                          x352 ~worker:(Worker.t_of_js x353)
                            ~message:(any_of_js x354)
                            ~handle:(union2_of_js Net.Server.t_of_js
                                       Net.Socket.t_of_js x355)))|])
    let (add_listener :
      event:[ `online ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x358 : [ `online ]) ->
        fun ~listener:(x359 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "addListener"
               [|((match x358 with | `online -> Ojs.string_to_js "online"));(
                 Ojs.fun_to_js 1
                   (fun (x360 : Ojs.t) -> x359 ~worker:(Worker.t_of_js x360)))|])
    let (add_listener :
      event:[ `setup ] ->
        listener:(settings:ClusterSettings.t -> unit) -> Cluster.t)
      =
      fun ~event:(x361 : [ `setup ]) ->
        fun ~listener:(x362 : settings:ClusterSettings.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "addListener"
               [|((match x361 with | `setup -> Ojs.string_to_js "setup"));(
                 Ojs.fun_to_js 1
                   (fun (x363 : Ojs.t) ->
                      x362 ~settings:(ClusterSettings.t_of_js x363)))|])
    let (emit : event:symbol or_string -> args:any list -> bool) =
      fun ~event:(x364 : symbol or_string) ->
        fun ~args:(x365 : any list) ->
          Ojs.bool_of_js
            (let x369 = Import.cluster in
             Ojs.call (Ojs.get_prop_ascii x369 "emit") "apply"
               [|x369;((let x366 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x366 "push"
                             [|(or_string_to_js symbol_to_js x364)|]);
                        List.iter
                          (fun (x367 : any) ->
                             ignore
                               (Ojs.call x366 "push" [|(any_to_js x367)|]))
                          x365;
                        x366))|])
    let (emit : event:[ `disconnect ] -> worker:Worker.t -> bool) =
      fun ~event:(x370 : [ `disconnect ]) ->
        fun ~worker:(x371 : Worker.t) ->
          Ojs.bool_of_js
            (Ojs.call Import.cluster "emit"
               [|((match x370 with
                   | `disconnect -> Ojs.string_to_js "disconnect"));(
                 Worker.t_to_js x371)|])
    let (emit :
      event:[ `exit ] -> worker:Worker.t -> code:int -> signal:string -> bool)
      =
      fun ~event:(x372 : [ `exit ]) ->
        fun ~worker:(x373 : Worker.t) ->
          fun ~code:(x374 : int) ->
            fun ~signal:(x375 : string) ->
              Ojs.bool_of_js
                (Ojs.call Import.cluster "emit"
                   [|((match x372 with | `exit -> Ojs.string_to_js "exit"));(
                     Worker.t_to_js x373);(Ojs.int_to_js x374);(Ojs.string_to_js
                                                                  x375)|])
    let (emit : event:[ `fork ] -> worker:Worker.t -> bool) =
      fun ~event:(x376 : [ `fork ]) ->
        fun ~worker:(x377 : Worker.t) ->
          Ojs.bool_of_js
            (Ojs.call Import.cluster "emit"
               [|((match x376 with | `fork -> Ojs.string_to_js "fork"));(
                 Worker.t_to_js x377)|])
    let (emit :
      event:[ `listening ] -> worker:Worker.t -> address:Address.t -> bool) =
      fun ~event:(x378 : [ `listening ]) ->
        fun ~worker:(x379 : Worker.t) ->
          fun ~address:(x380 : Address.t) ->
            Ojs.bool_of_js
              (Ojs.call Import.cluster "emit"
                 [|((match x378 with
                     | `listening -> Ojs.string_to_js "listening"));(
                   Worker.t_to_js x379);(Address.t_to_js x380)|])
    let (emit :
      event:[ `message ] ->
        worker:Worker.t ->
          message:any -> handle:(Net.Server.t, Net.Socket.t) union2 -> bool)
      =
      fun ~event:(x381 : [ `message ]) ->
        fun ~worker:(x382 : Worker.t) ->
          fun ~message:(x383 : any) ->
            fun ~handle:(x384 : (Net.Server.t, Net.Socket.t) union2) ->
              Ojs.bool_of_js
                (Ojs.call Import.cluster "emit"
                   [|((match x381 with
                       | `message -> Ojs.string_to_js "message"));(Worker.t_to_js
                                                                    x382);(
                     any_to_js x383);(union2_to_js Net.Server.t_to_js
                                        Net.Socket.t_to_js x384)|])
    let (emit : event:[ `online ] -> worker:Worker.t -> bool) =
      fun ~event:(x387 : [ `online ]) ->
        fun ~worker:(x388 : Worker.t) ->
          Ojs.bool_of_js
            (Ojs.call Import.cluster "emit"
               [|((match x387 with | `online -> Ojs.string_to_js "online"));(
                 Worker.t_to_js x388)|])
    let (emit : event:[ `setup ] -> settings:ClusterSettings.t -> bool) =
      fun ~event:(x389 : [ `setup ]) ->
        fun ~settings:(x390 : ClusterSettings.t) ->
          Ojs.bool_of_js
            (Ojs.call Import.cluster "emit"
               [|((match x389 with | `setup -> Ojs.string_to_js "setup"));(
                 ClusterSettings.t_to_js x390)|])
    let (on : event:string -> listener:(args:any list -> unit) -> Cluster.t)
      =
      fun ~event:(x391 : string) ->
        fun ~listener:(x392 : args:any list -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "on"
               [|(Ojs.string_to_js x391);(Ojs.fun_to_js_args
                                            (fun (x393 : _) ->
                                               x392
                                                 ~args:(Ojs.list_of_js_from
                                                          any_of_js x393 0)))|])
    let (on :
      event:[ `disconnect ] ->
        listener:(worker:Worker.t -> unit) -> Cluster.t)
      =
      fun ~event:(x395 : [ `disconnect ]) ->
        fun ~listener:(x396 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "on"
               [|((match x395 with
                   | `disconnect -> Ojs.string_to_js "disconnect"));(
                 Ojs.fun_to_js 1
                   (fun (x397 : Ojs.t) -> x396 ~worker:(Worker.t_of_js x397)))|])
    let (on :
      event:[ `exit ] ->
        listener:(worker:Worker.t -> code:int -> signal:string -> unit) ->
          Cluster.t)
      =
      fun ~event:(x398 : [ `exit ]) ->
        fun
          ~listener:(x399 :
                      worker:Worker.t -> code:int -> signal:string -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "on"
               [|((match x398 with | `exit -> Ojs.string_to_js "exit"));(
                 Ojs.fun_to_js 3
                   (fun (x400 : Ojs.t) ->
                      fun (x401 : Ojs.t) ->
                        fun (x402 : Ojs.t) ->
                          x399 ~worker:(Worker.t_of_js x400)
                            ~code:(Ojs.int_of_js x401)
                            ~signal:(Ojs.string_of_js x402)))|])
    let (on :
      event:[ `fork ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x403 : [ `fork ]) ->
        fun ~listener:(x404 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "on"
               [|((match x403 with | `fork -> Ojs.string_to_js "fork"));(
                 Ojs.fun_to_js 1
                   (fun (x405 : Ojs.t) -> x404 ~worker:(Worker.t_of_js x405)))|])
    let (on :
      event:[ `listening ] ->
        listener:(worker:Worker.t -> address:Address.t -> unit) -> Cluster.t)
      =
      fun ~event:(x406 : [ `listening ]) ->
        fun ~listener:(x407 : worker:Worker.t -> address:Address.t -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "on"
               [|((match x406 with
                   | `listening -> Ojs.string_to_js "listening"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x408 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x409 :
                                                                    Ojs.t) ->
                                                                    x407
                                                                    ~worker:(
                                                                    Worker.t_of_js
                                                                    x408)
                                                                    ~address:(
                                                                    Address.t_of_js
                                                                    x409)))|])
    let (on :
      event:[ `message ] ->
        listener:(worker:Worker.t ->
                    message:any ->
                      handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          -> Cluster.t)
      =
      fun ~event:(x410 : [ `message ]) ->
        fun
          ~listener:(x411 :
                      worker:Worker.t ->
                        message:any ->
                          handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "on"
               [|((match x410 with | `message -> Ojs.string_to_js "message"));(
                 Ojs.fun_to_js 3
                   (fun (x412 : Ojs.t) ->
                      fun (x413 : Ojs.t) ->
                        fun (x414 : Ojs.t) ->
                          x411 ~worker:(Worker.t_of_js x412)
                            ~message:(any_of_js x413)
                            ~handle:(union2_of_js Net.Server.t_of_js
                                       Net.Socket.t_of_js x414)))|])
    let (on :
      event:[ `online ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x417 : [ `online ]) ->
        fun ~listener:(x418 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "on"
               [|((match x417 with | `online -> Ojs.string_to_js "online"));(
                 Ojs.fun_to_js 1
                   (fun (x419 : Ojs.t) -> x418 ~worker:(Worker.t_of_js x419)))|])
    let (on :
      event:[ `setup ] ->
        listener:(settings:ClusterSettings.t -> unit) -> Cluster.t)
      =
      fun ~event:(x420 : [ `setup ]) ->
        fun ~listener:(x421 : settings:ClusterSettings.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "on"
               [|((match x420 with | `setup -> Ojs.string_to_js "setup"));(
                 Ojs.fun_to_js 1
                   (fun (x422 : Ojs.t) ->
                      x421 ~settings:(ClusterSettings.t_of_js x422)))|])
    let (once :
      event:string -> listener:(args:any list -> unit) -> Cluster.t) =
      fun ~event:(x423 : string) ->
        fun ~listener:(x424 : args:any list -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "once"
               [|(Ojs.string_to_js x423);(Ojs.fun_to_js_args
                                            (fun (x425 : _) ->
                                               x424
                                                 ~args:(Ojs.list_of_js_from
                                                          any_of_js x425 0)))|])
    let (once :
      event:[ `disconnect ] ->
        listener:(worker:Worker.t -> unit) -> Cluster.t)
      =
      fun ~event:(x427 : [ `disconnect ]) ->
        fun ~listener:(x428 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "once"
               [|((match x427 with
                   | `disconnect -> Ojs.string_to_js "disconnect"));(
                 Ojs.fun_to_js 1
                   (fun (x429 : Ojs.t) -> x428 ~worker:(Worker.t_of_js x429)))|])
    let (once :
      event:[ `exit ] ->
        listener:(worker:Worker.t -> code:int -> signal:string -> unit) ->
          Cluster.t)
      =
      fun ~event:(x430 : [ `exit ]) ->
        fun
          ~listener:(x431 :
                      worker:Worker.t -> code:int -> signal:string -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "once"
               [|((match x430 with | `exit -> Ojs.string_to_js "exit"));(
                 Ojs.fun_to_js 3
                   (fun (x432 : Ojs.t) ->
                      fun (x433 : Ojs.t) ->
                        fun (x434 : Ojs.t) ->
                          x431 ~worker:(Worker.t_of_js x432)
                            ~code:(Ojs.int_of_js x433)
                            ~signal:(Ojs.string_of_js x434)))|])
    let (once :
      event:[ `fork ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x435 : [ `fork ]) ->
        fun ~listener:(x436 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "once"
               [|((match x435 with | `fork -> Ojs.string_to_js "fork"));(
                 Ojs.fun_to_js 1
                   (fun (x437 : Ojs.t) -> x436 ~worker:(Worker.t_of_js x437)))|])
    let (once :
      event:[ `listening ] ->
        listener:(worker:Worker.t -> address:Address.t -> unit) -> Cluster.t)
      =
      fun ~event:(x438 : [ `listening ]) ->
        fun ~listener:(x439 : worker:Worker.t -> address:Address.t -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "once"
               [|((match x438 with
                   | `listening -> Ojs.string_to_js "listening"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x440 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x441 :
                                                                    Ojs.t) ->
                                                                    x439
                                                                    ~worker:(
                                                                    Worker.t_of_js
                                                                    x440)
                                                                    ~address:(
                                                                    Address.t_of_js
                                                                    x441)))|])
    let (once :
      event:[ `message ] ->
        listener:(worker:Worker.t ->
                    message:any ->
                      handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          -> Cluster.t)
      =
      fun ~event:(x442 : [ `message ]) ->
        fun
          ~listener:(x443 :
                      worker:Worker.t ->
                        message:any ->
                          handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "once"
               [|((match x442 with | `message -> Ojs.string_to_js "message"));(
                 Ojs.fun_to_js 3
                   (fun (x444 : Ojs.t) ->
                      fun (x445 : Ojs.t) ->
                        fun (x446 : Ojs.t) ->
                          x443 ~worker:(Worker.t_of_js x444)
                            ~message:(any_of_js x445)
                            ~handle:(union2_of_js Net.Server.t_of_js
                                       Net.Socket.t_of_js x446)))|])
    let (once :
      event:[ `online ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x449 : [ `online ]) ->
        fun ~listener:(x450 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "once"
               [|((match x449 with | `online -> Ojs.string_to_js "online"));(
                 Ojs.fun_to_js 1
                   (fun (x451 : Ojs.t) -> x450 ~worker:(Worker.t_of_js x451)))|])
    let (once :
      event:[ `setup ] ->
        listener:(settings:ClusterSettings.t -> unit) -> Cluster.t)
      =
      fun ~event:(x452 : [ `setup ]) ->
        fun ~listener:(x453 : settings:ClusterSettings.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "once"
               [|((match x452 with | `setup -> Ojs.string_to_js "setup"));(
                 Ojs.fun_to_js 1
                   (fun (x454 : Ojs.t) ->
                      x453 ~settings:(ClusterSettings.t_of_js x454)))|])
    let (remove_listener :
      event:string -> listener:(args:any list -> unit) -> Cluster.t) =
      fun ~event:(x455 : string) ->
        fun ~listener:(x456 : args:any list -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "removeListener"
               [|(Ojs.string_to_js x455);(Ojs.fun_to_js_args
                                            (fun (x457 : _) ->
                                               x456
                                                 ~args:(Ojs.list_of_js_from
                                                          any_of_js x457 0)))|])
    let (remove_all_listeners : ?event:string -> unit -> Cluster.t) =
      fun ?event:(x459 : string option) ->
        fun () ->
          Cluster.t_of_js
            (let x462 = Import.cluster in
             Ojs.call (Ojs.get_prop_ascii x462 "removeAllListeners") "apply"
               [|x462;((let x460 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x459 with
                         | Some x461 ->
                             ignore
                               (Ojs.call x460 "push"
                                  [|(Ojs.string_to_js x461)|])
                         | None -> ());
                        x460))|])
    let (set_max_listeners : n:int -> Cluster.t) =
      fun ~n:(x463 : int) ->
        Cluster.t_of_js
          (Ojs.call Import.cluster "setMaxListeners" [|(Ojs.int_to_js x463)|])
    let (get_max_listeners : unit -> int) =
      fun () ->
        Ojs.int_of_js (Ojs.call Import.cluster "getMaxListeners" [||])
    let (listeners : event:string -> untyped_function list) =
      fun ~event:(x464 : string) ->
        Ojs.list_of_js untyped_function_of_js
          (Ojs.call Import.cluster "listeners" [|(Ojs.string_to_js x464)|])
    let (listener_count : type_:string -> int) =
      fun ~type_:(x466 : string) ->
        Ojs.int_of_js
          (Ojs.call Import.cluster "listenerCount"
             [|(Ojs.string_to_js x466)|])
    let (prepend_listener :
      event:string -> listener:(args:any list -> unit) -> Cluster.t) =
      fun ~event:(x467 : string) ->
        fun ~listener:(x468 : args:any list -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependListener"
               [|(Ojs.string_to_js x467);(Ojs.fun_to_js_args
                                            (fun (x469 : _) ->
                                               x468
                                                 ~args:(Ojs.list_of_js_from
                                                          any_of_js x469 0)))|])
    let (prepend_listener :
      event:[ `disconnect ] ->
        listener:(worker:Worker.t -> unit) -> Cluster.t)
      =
      fun ~event:(x471 : [ `disconnect ]) ->
        fun ~listener:(x472 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependListener"
               [|((match x471 with
                   | `disconnect -> Ojs.string_to_js "disconnect"));(
                 Ojs.fun_to_js 1
                   (fun (x473 : Ojs.t) -> x472 ~worker:(Worker.t_of_js x473)))|])
    let (prepend_listener :
      event:[ `exit ] ->
        listener:(worker:Worker.t -> code:int -> signal:string -> unit) ->
          Cluster.t)
      =
      fun ~event:(x474 : [ `exit ]) ->
        fun
          ~listener:(x475 :
                      worker:Worker.t -> code:int -> signal:string -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependListener"
               [|((match x474 with | `exit -> Ojs.string_to_js "exit"));(
                 Ojs.fun_to_js 3
                   (fun (x476 : Ojs.t) ->
                      fun (x477 : Ojs.t) ->
                        fun (x478 : Ojs.t) ->
                          x475 ~worker:(Worker.t_of_js x476)
                            ~code:(Ojs.int_of_js x477)
                            ~signal:(Ojs.string_of_js x478)))|])
    let (prepend_listener :
      event:[ `fork ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x479 : [ `fork ]) ->
        fun ~listener:(x480 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependListener"
               [|((match x479 with | `fork -> Ojs.string_to_js "fork"));(
                 Ojs.fun_to_js 1
                   (fun (x481 : Ojs.t) -> x480 ~worker:(Worker.t_of_js x481)))|])
    let (prepend_listener :
      event:[ `listening ] ->
        listener:(worker:Worker.t -> address:Address.t -> unit) -> Cluster.t)
      =
      fun ~event:(x482 : [ `listening ]) ->
        fun ~listener:(x483 : worker:Worker.t -> address:Address.t -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependListener"
               [|((match x482 with
                   | `listening -> Ojs.string_to_js "listening"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x484 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x485 :
                                                                    Ojs.t) ->
                                                                    x483
                                                                    ~worker:(
                                                                    Worker.t_of_js
                                                                    x484)
                                                                    ~address:(
                                                                    Address.t_of_js
                                                                    x485)))|])
    let (prepend_listener :
      event:[ `message ] ->
        listener:(worker:Worker.t ->
                    message:any ->
                      handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          -> Cluster.t)
      =
      fun ~event:(x486 : [ `message ]) ->
        fun
          ~listener:(x487 :
                      worker:Worker.t ->
                        message:any ->
                          handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependListener"
               [|((match x486 with | `message -> Ojs.string_to_js "message"));(
                 Ojs.fun_to_js 3
                   (fun (x488 : Ojs.t) ->
                      fun (x489 : Ojs.t) ->
                        fun (x490 : Ojs.t) ->
                          x487 ~worker:(Worker.t_of_js x488)
                            ~message:(any_of_js x489)
                            ~handle:(union2_of_js Net.Server.t_of_js
                                       Net.Socket.t_of_js x490)))|])
    let (prepend_listener :
      event:[ `online ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x493 : [ `online ]) ->
        fun ~listener:(x494 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependListener"
               [|((match x493 with | `online -> Ojs.string_to_js "online"));(
                 Ojs.fun_to_js 1
                   (fun (x495 : Ojs.t) -> x494 ~worker:(Worker.t_of_js x495)))|])
    let (prepend_listener :
      event:[ `setup ] ->
        listener:(settings:ClusterSettings.t -> unit) -> Cluster.t)
      =
      fun ~event:(x496 : [ `setup ]) ->
        fun ~listener:(x497 : settings:ClusterSettings.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependListener"
               [|((match x496 with | `setup -> Ojs.string_to_js "setup"));(
                 Ojs.fun_to_js 1
                   (fun (x498 : Ojs.t) ->
                      x497 ~settings:(ClusterSettings.t_of_js x498)))|])
    let (prepend_once_listener :
      event:string -> listener:(args:any list -> unit) -> Cluster.t) =
      fun ~event:(x499 : string) ->
        fun ~listener:(x500 : args:any list -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependOnceListener"
               [|(Ojs.string_to_js x499);(Ojs.fun_to_js_args
                                            (fun (x501 : _) ->
                                               x500
                                                 ~args:(Ojs.list_of_js_from
                                                          any_of_js x501 0)))|])
    let (prepend_once_listener :
      event:[ `disconnect ] ->
        listener:(worker:Worker.t -> unit) -> Cluster.t)
      =
      fun ~event:(x503 : [ `disconnect ]) ->
        fun ~listener:(x504 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependOnceListener"
               [|((match x503 with
                   | `disconnect -> Ojs.string_to_js "disconnect"));(
                 Ojs.fun_to_js 1
                   (fun (x505 : Ojs.t) -> x504 ~worker:(Worker.t_of_js x505)))|])
    let (prepend_once_listener :
      event:[ `exit ] ->
        listener:(worker:Worker.t -> code:int -> signal:string -> unit) ->
          Cluster.t)
      =
      fun ~event:(x506 : [ `exit ]) ->
        fun
          ~listener:(x507 :
                      worker:Worker.t -> code:int -> signal:string -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependOnceListener"
               [|((match x506 with | `exit -> Ojs.string_to_js "exit"));(
                 Ojs.fun_to_js 3
                   (fun (x508 : Ojs.t) ->
                      fun (x509 : Ojs.t) ->
                        fun (x510 : Ojs.t) ->
                          x507 ~worker:(Worker.t_of_js x508)
                            ~code:(Ojs.int_of_js x509)
                            ~signal:(Ojs.string_of_js x510)))|])
    let (prepend_once_listener :
      event:[ `fork ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x511 : [ `fork ]) ->
        fun ~listener:(x512 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependOnceListener"
               [|((match x511 with | `fork -> Ojs.string_to_js "fork"));(
                 Ojs.fun_to_js 1
                   (fun (x513 : Ojs.t) -> x512 ~worker:(Worker.t_of_js x513)))|])
    let (prepend_once_listener :
      event:[ `listening ] ->
        listener:(worker:Worker.t -> address:Address.t -> unit) -> Cluster.t)
      =
      fun ~event:(x514 : [ `listening ]) ->
        fun ~listener:(x515 : worker:Worker.t -> address:Address.t -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependOnceListener"
               [|((match x514 with
                   | `listening -> Ojs.string_to_js "listening"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x516 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x517 :
                                                                    Ojs.t) ->
                                                                    x515
                                                                    ~worker:(
                                                                    Worker.t_of_js
                                                                    x516)
                                                                    ~address:(
                                                                    Address.t_of_js
                                                                    x517)))|])
    let (prepend_once_listener :
      event:[ `message ] ->
        listener:(worker:Worker.t ->
                    message:any ->
                      handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          -> Cluster.t)
      =
      fun ~event:(x518 : [ `message ]) ->
        fun
          ~listener:(x519 :
                      worker:Worker.t ->
                        message:any ->
                          handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependOnceListener"
               [|((match x518 with | `message -> Ojs.string_to_js "message"));(
                 Ojs.fun_to_js 3
                   (fun (x520 : Ojs.t) ->
                      fun (x521 : Ojs.t) ->
                        fun (x522 : Ojs.t) ->
                          x519 ~worker:(Worker.t_of_js x520)
                            ~message:(any_of_js x521)
                            ~handle:(union2_of_js Net.Server.t_of_js
                                       Net.Socket.t_of_js x522)))|])
    let (prepend_once_listener :
      event:[ `online ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x525 : [ `online ]) ->
        fun ~listener:(x526 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependOnceListener"
               [|((match x525 with | `online -> Ojs.string_to_js "online"));(
                 Ojs.fun_to_js 1
                   (fun (x527 : Ojs.t) -> x526 ~worker:(Worker.t_of_js x527)))|])
    let (prepend_once_listener :
      event:[ `setup ] ->
        listener:(settings:ClusterSettings.t -> unit) -> Cluster.t)
      =
      fun ~event:(x528 : [ `setup ]) ->
        fun ~listener:(x529 : settings:ClusterSettings.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependOnceListener"
               [|((match x528 with | `setup -> Ojs.string_to_js "setup"));(
                 Ojs.fun_to_js 1
                   (fun (x530 : Ojs.t) ->
                      x529 ~settings:(ClusterSettings.t_of_js x530)))|])
    let (event_names : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.cluster "eventNames" [||])
  end
