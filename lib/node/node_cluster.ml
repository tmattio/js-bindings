[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Cluster =
  struct
    open Node_net
    module ClusterSettings =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
        and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
        let (get_exec_argv : t -> string list) =
          fun (x3 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x3) "execArgv")
        let (set_exec_argv : t -> string list -> unit) =
          fun (x5 : t) ->
            fun (x6 : string list) ->
              Ojs.set_prop_ascii (t_to_js x5) "execArgv"
                (Ojs.list_to_js Ojs.string_to_js x6)
        let (get_exec : t -> string) =
          fun (x8 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x8) "exec")
        let (set_exec : t -> string -> unit) =
          fun (x9 : t) ->
            fun (x10 : string) ->
              Ojs.set_prop_ascii (t_to_js x9) "exec" (Ojs.string_to_js x10)
        let (get_args : t -> string list) =
          fun (x11 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x11) "args")
        let (set_args : t -> string list -> unit) =
          fun (x13 : t) ->
            fun (x14 : string list) ->
              Ojs.set_prop_ascii (t_to_js x13) "args"
                (Ojs.list_to_js Ojs.string_to_js x14)
        let (get_silent : t -> bool) =
          fun (x16 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x16) "silent")
        let (set_silent : t -> bool -> unit) =
          fun (x17 : t) ->
            fun (x18 : bool) ->
              Ojs.set_prop_ascii (t_to_js x17) "silent" (Ojs.bool_to_js x18)
        let (get_stdio : t -> any list) =
          fun (x19 : t) ->
            Ojs.list_of_js any_of_js
              (Ojs.get_prop_ascii (t_to_js x19) "stdio")
        let (set_stdio : t -> any list -> unit) =
          fun (x21 : t) ->
            fun (x22 : any list) ->
              Ojs.set_prop_ascii (t_to_js x21) "stdio"
                (Ojs.list_to_js any_to_js x22)
        let (get_uid : t -> int) =
          fun (x24 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x24) "uid")
        let (set_uid : t -> int -> unit) =
          fun (x25 : t) ->
            fun (x26 : int) ->
              Ojs.set_prop_ascii (t_to_js x25) "uid" (Ojs.int_to_js x26)
        let (get_gid : t -> int) =
          fun (x27 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x27) "gid")
        let (set_gid : t -> int -> unit) =
          fun (x28 : t) ->
            fun (x29 : int) ->
              Ojs.set_prop_ascii (t_to_js x28) "gid" (Ojs.int_to_js x29)
        let (get_inspect_port : t -> (unit -> int) or_number) =
          fun (x30 : t) ->
            or_number_of_js
              (fun (x31 : Ojs.t) ->
                 fun () -> Ojs.int_of_js (Ojs.apply x31 [||]))
              (Ojs.get_prop_ascii (t_to_js x30) "inspectPort")
        let (set_inspect_port : t -> (unit -> int) or_number -> unit) =
          fun (x32 : t) ->
            fun (x33 : (unit -> int) or_number) ->
              Ojs.set_prop_ascii (t_to_js x32) "inspectPort"
                (or_number_to_js
                   (fun (x34 : unit -> int) ->
                      Ojs.fun_to_js 1 (fun _ -> Ojs.int_to_js (x34 ()))) x33)
      end
    module Address =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x36 : Ojs.t) -> x36
        and t_to_js : t -> Ojs.t = fun (x35 : Ojs.t) -> x35
        let (get_address : t -> string) =
          fun (x37 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x37) "address")
        let (set_address : t -> string -> unit) =
          fun (x38 : t) ->
            fun (x39 : string) ->
              Ojs.set_prop_ascii (t_to_js x38) "address"
                (Ojs.string_to_js x39)
        let (get_port : t -> int) =
          fun (x40 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x40) "port")
        let (set_port : t -> int -> unit) =
          fun (x41 : t) ->
            fun (x42 : int) ->
              Ojs.set_prop_ascii (t_to_js x41) "port" (Ojs.int_to_js x42)
        let (get_address_type : t -> [ `udp4  | `udp6 ] or_number) =
          fun (x43 : t) ->
            or_number_of_js
              (fun (x44 : Ojs.t) ->
                 let x45 = x44 in
                 match Ojs.string_of_js x45 with
                 | "udp4" -> `udp4
                 | "udp6" -> `udp6
                 | _ -> assert false)
              (Ojs.get_prop_ascii (t_to_js x43) "addressType")
        let (set_address_type : t -> [ `udp4  | `udp6 ] or_number -> unit) =
          fun (x46 : t) ->
            fun (x47 : [ `udp4  | `udp6 ] or_number) ->
              Ojs.set_prop_ascii (t_to_js x46) "addressType"
                (or_number_to_js
                   (fun (x48 : [ `udp4  | `udp6 ]) ->
                      match x48 with
                      | `udp4 -> Ojs.string_to_js "udp4"
                      | `udp6 -> Ojs.string_to_js "udp6") x47)
      end
    module Worker =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x50 : Ojs.t) -> x50
        and t_to_js : t -> Ojs.t = fun (x49 : Ojs.t) -> x49
        let (get_id : t -> int) =
          fun (x51 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x51) "id")
        let (set_id : t -> int -> unit) =
          fun (x52 : t) ->
            fun (x53 : int) ->
              Ojs.set_prop_ascii (t_to_js x52) "id" (Ojs.int_to_js x53)
        let (get_process :
          t -> Node_child_process.Child_process.ChildProcess.t) =
          fun (x54 : t) ->
            Node_child_process.Child_process.ChildProcess.t_of_js
              (Ojs.get_prop_ascii (t_to_js x54) "process")
        let (set_process :
          t -> Node_child_process.Child_process.ChildProcess.t -> unit) =
          fun (x55 : t) ->
            fun (x56 : Node_child_process.Child_process.ChildProcess.t) ->
              Ojs.set_prop_ascii (t_to_js x55) "process"
                (Node_child_process.Child_process.ChildProcess.t_to_js x56)
        let (send :
          t ->
            message:Node_child_process.Child_process.Serializable.t ->
              ?send_handle:Node_child_process.Child_process.SendHandle.t ->
                ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
          =
          fun (x65 : t) ->
            fun
              ~message:(x57 :
                         Node_child_process.Child_process.Serializable.t)
              ->
              fun
                ?send_handle:(x58 :
                               Node_child_process.Child_process.SendHandle.t
                                 option)
                ->
                fun ?callback:(x59 : (error:Error.t or_null -> unit) option)
                  ->
                  fun () ->
                    Ojs.bool_of_js
                      (let x66 = t_to_js x65 in
                       Ojs.call (Ojs.get_prop_ascii x66 "send") "apply"
                         [|x66;((let x60 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x60 "push"
                                      [|(Node_child_process.Child_process.Serializable.t_to_js
                                           x57)|]);
                                 (match x58 with
                                  | Some x64 ->
                                      ignore
                                        (Ojs.call x60 "push"
                                           [|(Node_child_process.Child_process.SendHandle.t_to_js
                                                x64)|])
                                  | None -> ());
                                 (match x59 with
                                  | Some x61 ->
                                      ignore
                                        (Ojs.call x60 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun (x62 : Ojs.t) ->
                                                   x61
                                                     ~error:(or_null_of_js
                                                               Error.t_of_js
                                                               x62)))|])
                                  | None -> ());
                                 x60))|])
        let (kill : t -> ?signal:string -> unit -> unit) =
          fun (x70 : t) ->
            fun ?signal:(x67 : string option) ->
              fun () ->
                ignore
                  (let x71 = t_to_js x70 in
                   Ojs.call (Ojs.get_prop_ascii x71 "kill") "apply"
                     [|x71;((let x68 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x67 with
                              | Some x69 ->
                                  ignore
                                    (Ojs.call x68 "push"
                                       [|(Ojs.string_to_js x69)|])
                              | None -> ());
                             x68))|])
        let (destroy : t -> ?signal:string -> unit -> unit) =
          fun (x75 : t) ->
            fun ?signal:(x72 : string option) ->
              fun () ->
                ignore
                  (let x76 = t_to_js x75 in
                   Ojs.call (Ojs.get_prop_ascii x76 "destroy") "apply"
                     [|x76;((let x73 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x72 with
                              | Some x74 ->
                                  ignore
                                    (Ojs.call x73 "push"
                                       [|(Ojs.string_to_js x74)|])
                              | None -> ());
                             x73))|])
        let (disconnect : t -> unit) =
          fun (x77 : t) -> ignore (Ojs.call (t_to_js x77) "disconnect" [||])
        let (is_connected : t -> bool) =
          fun (x78 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x78) "isConnected" [||])
        let (is_dead : t -> bool) =
          fun (x79 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x79) "isDead" [||])
        let (get_exited_after_disconnect : t -> bool) =
          fun (x80 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x80) "exitedAfterDisconnect")
        let (set_exited_after_disconnect : t -> bool -> unit) =
          fun (x81 : t) ->
            fun (x82 : bool) ->
              Ojs.set_prop_ascii (t_to_js x81) "exitedAfterDisconnect"
                (Ojs.bool_to_js x82)
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x87 : t) ->
            fun ~event:(x83 : string) ->
              fun ~listener:(x84 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x87) "addListener"
                     [|(Ojs.string_to_js x83);(Ojs.fun_to_js_args
                                                 (fun (x85 : _) ->
                                                    x84
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js x85
                                                               0)))|])
        let (add_listener' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x90 : t) ->
            fun ~event:(x88 : [ `disconnect ]) ->
              fun ~listener:(x89 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x90) "addListener"
                     [|((match x88 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x89 ()))|])
        let (add_listener'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x94 : t) ->
            fun ~event:(x91 : [ `error ]) ->
              fun ~listener:(x92 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x94) "addListener"
                     [|((match x91 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x93 : Ojs.t) -> x92 ~error:(Error.t_of_js x93)))|])
        let (add_listener''' :
          t ->
            event:[ `exit ] ->
              listener:(code:int -> signal:string -> unit) -> t)
          =
          fun (x99 : t) ->
            fun ~event:(x95 : [ `exit ]) ->
              fun ~listener:(x96 : code:int -> signal:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x99) "addListener"
                     [|((match x95 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x97 : Ojs.t) ->
                            fun (x98 : Ojs.t) ->
                              x96 ~code:(Ojs.int_of_js x97)
                                ~signal:(Ojs.string_of_js x98)))|])
        let (add_listener'''' :
          t ->
            event:[ `listening ] -> listener:(address:Address.t -> unit) -> t)
          =
          fun (x103 : t) ->
            fun ~event:(x100 : [ `listening ]) ->
              fun ~listener:(x101 : address:Address.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x103) "addListener"
                     [|((match x100 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1
                         (fun (x102 : Ojs.t) ->
                            x101 ~address:(Address.t_of_js x102)))|])
        let (add_listener''''' :
          t ->
            event:[ `message ] ->
              listener:(message:any ->
                          handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
                -> t)
          =
          fun (x110 : t) ->
            fun ~event:(x104 : [ `message ]) ->
              fun
                ~listener:(x105 :
                            message:any ->
                              handle:(Net.Server.t, Net.Socket.t) union2 ->
                                unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x110) "addListener"
                     [|((match x104 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x106 : Ojs.t) ->
                            fun (x107 : Ojs.t) ->
                              x105 ~message:(any_of_js x106)
                                ~handle:(union2_of_js Net.Server.t_of_js
                                           Net.Socket.t_of_js x107)))|])
        let (add_listener'''''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x113 : t) ->
            fun ~event:(x111 : [ `online ]) ->
              fun ~listener:(x112 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x113) "addListener"
                     [|((match x111 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x112 ()))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x119 : t) ->
            fun ~event:(x114 : symbol or_string) ->
              fun ~args:(x115 : any list) ->
                Ojs.bool_of_js
                  (let x120 = t_to_js x119 in
                   Ojs.call (Ojs.get_prop_ascii x120 "emit") "apply"
                     [|x120;((let x116 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x116 "push"
                                   [|(or_string_to_js symbol_to_js x114)|]);
                              List.iter
                                (fun (x117 : any) ->
                                   ignore
                                     (Ojs.call x116 "push"
                                        [|(any_to_js x117)|])) x115;
                              x116))|])
        let (emit' : t -> event:[ `disconnect ] -> bool) =
          fun (x122 : t) ->
            fun ~event:(x121 : [ `disconnect ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x122) "emit"
                   [|((match x121 with
                       | `disconnect -> Ojs.string_to_js "disconnect"))|])
        let (emit'' : t -> event:[ `error ] -> error:Error.t -> bool) =
          fun (x125 : t) ->
            fun ~event:(x123 : [ `error ]) ->
              fun ~error:(x124 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x125) "emit"
                     [|((match x123 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x124)|])
        let (emit''' :
          t -> event:[ `exit ] -> code:int -> signal:string -> bool) =
          fun (x129 : t) ->
            fun ~event:(x126 : [ `exit ]) ->
              fun ~code:(x127 : int) ->
                fun ~signal:(x128 : string) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x129) "emit"
                       [|((match x126 with | `exit -> Ojs.string_to_js "exit"));(
                         Ojs.int_to_js x127);(Ojs.string_to_js x128)|])
        let (emit'''' :
          t -> event:[ `listening ] -> address:Address.t -> bool) =
          fun (x132 : t) ->
            fun ~event:(x130 : [ `listening ]) ->
              fun ~address:(x131 : Address.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x132) "emit"
                     [|((match x130 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Address.t_to_js x131)|])
        let (emit''''' :
          t ->
            event:[ `message ] ->
              message:any ->
                handle:(Net.Server.t, Net.Socket.t) union2 -> bool)
          =
          fun (x138 : t) ->
            fun ~event:(x133 : [ `message ]) ->
              fun ~message:(x134 : any) ->
                fun ~handle:(x135 : (Net.Server.t, Net.Socket.t) union2) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x138) "emit"
                       [|((match x133 with
                           | `message -> Ojs.string_to_js "message"));(
                         any_to_js x134);(union2_to_js Net.Server.t_to_js
                                            Net.Socket.t_to_js x135)|])
        let (emit'''''' : t -> event:[ `online ] -> bool) =
          fun (x140 : t) ->
            fun ~event:(x139 : [ `online ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x140) "emit"
                   [|((match x139 with | `online -> Ojs.string_to_js "online"))|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x145 : t) ->
            fun ~event:(x141 : string) ->
              fun ~listener:(x142 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x145) "on"
                     [|(Ojs.string_to_js x141);(Ojs.fun_to_js_args
                                                  (fun (x143 : _) ->
                                                     x142
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x143 0)))|])
        let (on' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x148 : t) ->
            fun ~event:(x146 : [ `disconnect ]) ->
              fun ~listener:(x147 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x148) "on"
                     [|((match x146 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x147 ()))|])
        let (on'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x152 : t) ->
            fun ~event:(x149 : [ `error ]) ->
              fun ~listener:(x150 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x152) "on"
                     [|((match x149 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x151 : Ojs.t) ->
                            x150 ~error:(Error.t_of_js x151)))|])
        let (on''' :
          t ->
            event:[ `exit ] ->
              listener:(code:int -> signal:string -> unit) -> t)
          =
          fun (x157 : t) ->
            fun ~event:(x153 : [ `exit ]) ->
              fun ~listener:(x154 : code:int -> signal:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x157) "on"
                     [|((match x153 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x155 : Ojs.t) ->
                            fun (x156 : Ojs.t) ->
                              x154 ~code:(Ojs.int_of_js x155)
                                ~signal:(Ojs.string_of_js x156)))|])
        let (on'''' :
          t ->
            event:[ `listening ] -> listener:(address:Address.t -> unit) -> t)
          =
          fun (x161 : t) ->
            fun ~event:(x158 : [ `listening ]) ->
              fun ~listener:(x159 : address:Address.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x161) "on"
                     [|((match x158 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1
                         (fun (x160 : Ojs.t) ->
                            x159 ~address:(Address.t_of_js x160)))|])
        let (on''''' :
          t ->
            event:[ `message ] ->
              listener:(message:any ->
                          handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
                -> t)
          =
          fun (x168 : t) ->
            fun ~event:(x162 : [ `message ]) ->
              fun
                ~listener:(x163 :
                            message:any ->
                              handle:(Net.Server.t, Net.Socket.t) union2 ->
                                unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x168) "on"
                     [|((match x162 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x164 : Ojs.t) ->
                            fun (x165 : Ojs.t) ->
                              x163 ~message:(any_of_js x164)
                                ~handle:(union2_of_js Net.Server.t_of_js
                                           Net.Socket.t_of_js x165)))|])
        let (on'''''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x171 : t) ->
            fun ~event:(x169 : [ `online ]) ->
              fun ~listener:(x170 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x171) "on"
                     [|((match x169 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x170 ()))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x176 : t) ->
            fun ~event:(x172 : string) ->
              fun ~listener:(x173 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x176) "once"
                     [|(Ojs.string_to_js x172);(Ojs.fun_to_js_args
                                                  (fun (x174 : _) ->
                                                     x173
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x174 0)))|])
        let (once' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x179 : t) ->
            fun ~event:(x177 : [ `disconnect ]) ->
              fun ~listener:(x178 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x179) "once"
                     [|((match x177 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x178 ()))|])
        let (once'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x183 : t) ->
            fun ~event:(x180 : [ `error ]) ->
              fun ~listener:(x181 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x183) "once"
                     [|((match x180 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x182 : Ojs.t) ->
                            x181 ~error:(Error.t_of_js x182)))|])
        let (once''' :
          t ->
            event:[ `exit ] ->
              listener:(code:int -> signal:string -> unit) -> t)
          =
          fun (x188 : t) ->
            fun ~event:(x184 : [ `exit ]) ->
              fun ~listener:(x185 : code:int -> signal:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x188) "once"
                     [|((match x184 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x186 : Ojs.t) ->
                            fun (x187 : Ojs.t) ->
                              x185 ~code:(Ojs.int_of_js x186)
                                ~signal:(Ojs.string_of_js x187)))|])
        let (once'''' :
          t ->
            event:[ `listening ] -> listener:(address:Address.t -> unit) -> t)
          =
          fun (x192 : t) ->
            fun ~event:(x189 : [ `listening ]) ->
              fun ~listener:(x190 : address:Address.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x192) "once"
                     [|((match x189 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1
                         (fun (x191 : Ojs.t) ->
                            x190 ~address:(Address.t_of_js x191)))|])
        let (once''''' :
          t ->
            event:[ `message ] ->
              listener:(message:any ->
                          handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
                -> t)
          =
          fun (x199 : t) ->
            fun ~event:(x193 : [ `message ]) ->
              fun
                ~listener:(x194 :
                            message:any ->
                              handle:(Net.Server.t, Net.Socket.t) union2 ->
                                unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x199) "once"
                     [|((match x193 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x195 : Ojs.t) ->
                            fun (x196 : Ojs.t) ->
                              x194 ~message:(any_of_js x195)
                                ~handle:(union2_of_js Net.Server.t_of_js
                                           Net.Socket.t_of_js x196)))|])
        let (once'''''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x202 : t) ->
            fun ~event:(x200 : [ `online ]) ->
              fun ~listener:(x201 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x202) "once"
                     [|((match x200 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x201 ()))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x207 : t) ->
            fun ~event:(x203 : string) ->
              fun ~listener:(x204 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x207) "prependListener"
                     [|(Ojs.string_to_js x203);(Ojs.fun_to_js_args
                                                  (fun (x205 : _) ->
                                                     x204
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x205 0)))|])
        let (prepend_listener' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x210 : t) ->
            fun ~event:(x208 : [ `disconnect ]) ->
              fun ~listener:(x209 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x210) "prependListener"
                     [|((match x208 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x209 ()))|])
        let (prepend_listener'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x214 : t) ->
            fun ~event:(x211 : [ `error ]) ->
              fun ~listener:(x212 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x214) "prependListener"
                     [|((match x211 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x213 : Ojs.t) ->
                            x212 ~error:(Error.t_of_js x213)))|])
        let (prepend_listener''' :
          t ->
            event:[ `exit ] ->
              listener:(code:int -> signal:string -> unit) -> t)
          =
          fun (x219 : t) ->
            fun ~event:(x215 : [ `exit ]) ->
              fun ~listener:(x216 : code:int -> signal:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x219) "prependListener"
                     [|((match x215 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x217 : Ojs.t) ->
                            fun (x218 : Ojs.t) ->
                              x216 ~code:(Ojs.int_of_js x217)
                                ~signal:(Ojs.string_of_js x218)))|])
        let (prepend_listener'''' :
          t ->
            event:[ `listening ] -> listener:(address:Address.t -> unit) -> t)
          =
          fun (x223 : t) ->
            fun ~event:(x220 : [ `listening ]) ->
              fun ~listener:(x221 : address:Address.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x223) "prependListener"
                     [|((match x220 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1
                         (fun (x222 : Ojs.t) ->
                            x221 ~address:(Address.t_of_js x222)))|])
        let (prepend_listener''''' :
          t ->
            event:[ `message ] ->
              listener:(message:any ->
                          handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
                -> t)
          =
          fun (x230 : t) ->
            fun ~event:(x224 : [ `message ]) ->
              fun
                ~listener:(x225 :
                            message:any ->
                              handle:(Net.Server.t, Net.Socket.t) union2 ->
                                unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x230) "prependListener"
                     [|((match x224 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x226 : Ojs.t) ->
                            fun (x227 : Ojs.t) ->
                              x225 ~message:(any_of_js x226)
                                ~handle:(union2_of_js Net.Server.t_of_js
                                           Net.Socket.t_of_js x227)))|])
        let (prepend_listener'''''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x233 : t) ->
            fun ~event:(x231 : [ `online ]) ->
              fun ~listener:(x232 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x233) "prependListener"
                     [|((match x231 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x232 ()))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x238 : t) ->
            fun ~event:(x234 : string) ->
              fun ~listener:(x235 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x238) "prependOnceListener"
                     [|(Ojs.string_to_js x234);(Ojs.fun_to_js_args
                                                  (fun (x236 : _) ->
                                                     x235
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x236 0)))|])
        let (prepend_once_listener' :
          t -> event:[ `disconnect ] -> listener:(unit -> unit) -> t) =
          fun (x241 : t) ->
            fun ~event:(x239 : [ `disconnect ]) ->
              fun ~listener:(x240 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x241) "prependOnceListener"
                     [|((match x239 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1 (fun _ -> x240 ()))|])
        let (prepend_once_listener'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x245 : t) ->
            fun ~event:(x242 : [ `error ]) ->
              fun ~listener:(x243 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x245) "prependOnceListener"
                     [|((match x242 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x244 : Ojs.t) ->
                            x243 ~error:(Error.t_of_js x244)))|])
        let (prepend_once_listener''' :
          t ->
            event:[ `exit ] ->
              listener:(code:int -> signal:string -> unit) -> t)
          =
          fun (x250 : t) ->
            fun ~event:(x246 : [ `exit ]) ->
              fun ~listener:(x247 : code:int -> signal:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x250) "prependOnceListener"
                     [|((match x246 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 2
                         (fun (x248 : Ojs.t) ->
                            fun (x249 : Ojs.t) ->
                              x247 ~code:(Ojs.int_of_js x248)
                                ~signal:(Ojs.string_of_js x249)))|])
        let (prepend_once_listener'''' :
          t ->
            event:[ `listening ] -> listener:(address:Address.t -> unit) -> t)
          =
          fun (x254 : t) ->
            fun ~event:(x251 : [ `listening ]) ->
              fun ~listener:(x252 : address:Address.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x254) "prependOnceListener"
                     [|((match x251 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1
                         (fun (x253 : Ojs.t) ->
                            x252 ~address:(Address.t_of_js x253)))|])
        let (prepend_once_listener''''' :
          t ->
            event:[ `message ] ->
              listener:(message:any ->
                          handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
                -> t)
          =
          fun (x261 : t) ->
            fun ~event:(x255 : [ `message ]) ->
              fun
                ~listener:(x256 :
                            message:any ->
                              handle:(Net.Server.t, Net.Socket.t) union2 ->
                                unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x261) "prependOnceListener"
                     [|((match x255 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x257 : Ojs.t) ->
                            fun (x258 : Ojs.t) ->
                              x256 ~message:(any_of_js x257)
                                ~handle:(union2_of_js Net.Server.t_of_js
                                           Net.Socket.t_of_js x258)))|])
        let (prepend_once_listener'''''' :
          t -> event:[ `online ] -> listener:(unit -> unit) -> t) =
          fun (x264 : t) ->
            fun ~event:(x262 : [ `online ]) ->
              fun ~listener:(x263 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x264) "prependOnceListener"
                     [|((match x262 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x263 ()))|])
        let (cast : t -> Node_events.Events.EventEmitter.t) =
          fun (x265 : t) ->
            Node_events.Events.EventEmitter.t_of_js (t_to_js x265)
      end
    module Cluster =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x267 : Ojs.t) -> x267
        and t_to_js : t -> Ojs.t = fun (x266 : Ojs.t) -> x266
        let (get_worker : t -> Worker.t) =
          fun (x268 : t) ->
            Worker.t_of_js (Ojs.get_prop_ascii (t_to_js x268) "Worker")
        let (set_worker : t -> Worker.t -> unit) =
          fun (x269 : t) ->
            fun (x270 : Worker.t) ->
              Ojs.set_prop_ascii (t_to_js x269) "Worker"
                (Worker.t_to_js x270)
        let (disconnect : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x274 : t) ->
            fun ?callback:(x271 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x275 = t_to_js x274 in
                   Ojs.call (Ojs.get_prop_ascii x275 "disconnect") "apply"
                     [|x275;((let x272 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x271 with
                               | Some x273 ->
                                   ignore
                                     (Ojs.call x272 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x273 ()))|])
                               | None -> ());
                              x272))|])
        let (fork : t -> ?env:any -> unit -> Worker.t) =
          fun (x279 : t) ->
            fun ?env:(x276 : any option) ->
              fun () ->
                Worker.t_of_js
                  (let x280 = t_to_js x279 in
                   Ojs.call (Ojs.get_prop_ascii x280 "fork") "apply"
                     [|x280;((let x277 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x276 with
                               | Some x278 ->
                                   ignore
                                     (Ojs.call x277 "push"
                                        [|(any_to_js x278)|])
                               | None -> ());
                              x277))|])
        let (get_is_master : t -> bool) =
          fun (x281 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x281) "isMaster")
        let (set_is_master : t -> bool -> unit) =
          fun (x282 : t) ->
            fun (x283 : bool) ->
              Ojs.set_prop_ascii (t_to_js x282) "isMaster"
                (Ojs.bool_to_js x283)
        let (get_is_worker : t -> bool) =
          fun (x284 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x284) "isWorker")
        let (set_is_worker : t -> bool -> unit) =
          fun (x285 : t) ->
            fun (x286 : bool) ->
              Ojs.set_prop_ascii (t_to_js x285) "isWorker"
                (Ojs.bool_to_js x286)
        let (get_scheduling_policy : t -> int) =
          fun (x287 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x287) "schedulingPolicy")
        let (set_scheduling_policy : t -> int -> unit) =
          fun (x288 : t) ->
            fun (x289 : int) ->
              Ojs.set_prop_ascii (t_to_js x288) "schedulingPolicy"
                (Ojs.int_to_js x289)
        let (get_settings : t -> ClusterSettings.t) =
          fun (x290 : t) ->
            ClusterSettings.t_of_js
              (Ojs.get_prop_ascii (t_to_js x290) "settings")
        let (set_settings : t -> ClusterSettings.t -> unit) =
          fun (x291 : t) ->
            fun (x292 : ClusterSettings.t) ->
              Ojs.set_prop_ascii (t_to_js x291) "settings"
                (ClusterSettings.t_to_js x292)
        let (setup_master : t -> ?settings:ClusterSettings.t -> unit -> unit)
          =
          fun (x296 : t) ->
            fun ?settings:(x293 : ClusterSettings.t option) ->
              fun () ->
                ignore
                  (let x297 = t_to_js x296 in
                   Ojs.call (Ojs.get_prop_ascii x297 "setupMaster") "apply"
                     [|x297;((let x294 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x293 with
                               | Some x295 ->
                                   ignore
                                     (Ojs.call x294 "push"
                                        [|(ClusterSettings.t_to_js x295)|])
                               | None -> ());
                              x294))|])
        let (get_worker : t -> Worker.t) =
          fun (x298 : t) ->
            Worker.t_of_js (Ojs.get_prop_ascii (t_to_js x298) "worker")
        let (set_worker : t -> Worker.t -> unit) =
          fun (x299 : t) ->
            fun (x300 : Worker.t) ->
              Ojs.set_prop_ascii (t_to_js x299) "worker"
                (Worker.t_to_js x300)
        let (get_workers : t -> Worker.t Dict.t) =
          fun (x301 : t) ->
            Dict.t_of_js Worker.t_of_js
              (Ojs.get_prop_ascii (t_to_js x301) "workers")
        let (set_workers : t -> Worker.t Dict.t -> unit) =
          fun (x303 : t) ->
            fun (x304 : Worker.t Dict.t) ->
              Ojs.set_prop_ascii (t_to_js x303) "workers"
                (Dict.t_to_js Worker.t_to_js x304)
        let (get_sched_none : t -> int) =
          fun (x306 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x306) "SCHED_NONE")
        let (get_sched_rr : t -> int) =
          fun (x307 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x307) "SCHED_RR")
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x312 : t) ->
            fun ~event:(x308 : string) ->
              fun ~listener:(x309 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x312) "addListener"
                     [|(Ojs.string_to_js x308);(Ojs.fun_to_js_args
                                                  (fun (x310 : _) ->
                                                     x309
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x310 0)))|])
        let (add_listener' :
          t ->
            event:[ `disconnect ] -> listener:(worker:Worker.t -> unit) -> t)
          =
          fun (x316 : t) ->
            fun ~event:(x313 : [ `disconnect ]) ->
              fun ~listener:(x314 : worker:Worker.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x316) "addListener"
                     [|((match x313 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1
                         (fun (x315 : Ojs.t) ->
                            x314 ~worker:(Worker.t_of_js x315)))|])
        let (add_listener'' :
          t ->
            event:[ `exit ] ->
              listener:(worker:Worker.t -> code:int -> signal:string -> unit)
                -> t)
          =
          fun (x322 : t) ->
            fun ~event:(x317 : [ `exit ]) ->
              fun
                ~listener:(x318 :
                            worker:Worker.t ->
                              code:int -> signal:string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x322) "addListener"
                     [|((match x317 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 3
                         (fun (x319 : Ojs.t) ->
                            fun (x320 : Ojs.t) ->
                              fun (x321 : Ojs.t) ->
                                x318 ~worker:(Worker.t_of_js x319)
                                  ~code:(Ojs.int_of_js x320)
                                  ~signal:(Ojs.string_of_js x321)))|])
        let (add_listener''' :
          t -> event:[ `fork ] -> listener:(worker:Worker.t -> unit) -> t) =
          fun (x326 : t) ->
            fun ~event:(x323 : [ `fork ]) ->
              fun ~listener:(x324 : worker:Worker.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x326) "addListener"
                     [|((match x323 with | `fork -> Ojs.string_to_js "fork"));(
                       Ojs.fun_to_js 1
                         (fun (x325 : Ojs.t) ->
                            x324 ~worker:(Worker.t_of_js x325)))|])
        let (add_listener'''' :
          t ->
            event:[ `listening ] ->
              listener:(worker:Worker.t -> address:Address.t -> unit) -> t)
          =
          fun (x331 : t) ->
            fun ~event:(x327 : [ `listening ]) ->
              fun
                ~listener:(x328 :
                            worker:Worker.t -> address:Address.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x331) "addListener"
                     [|((match x327 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 2
                         (fun (x329 : Ojs.t) ->
                            fun (x330 : Ojs.t) ->
                              x328 ~worker:(Worker.t_of_js x329)
                                ~address:(Address.t_of_js x330)))|])
        let (add_listener''''' :
          t ->
            event:[ `message ] ->
              listener:(worker:Worker.t ->
                          message:any ->
                            handle:(Net.Server.t, Net.Socket.t) union2 ->
                              unit)
                -> t)
          =
          fun (x339 : t) ->
            fun ~event:(x332 : [ `message ]) ->
              fun
                ~listener:(x333 :
                            worker:Worker.t ->
                              message:any ->
                                handle:(Net.Server.t, Net.Socket.t) union2 ->
                                  unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x339) "addListener"
                     [|((match x332 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 3
                         (fun (x334 : Ojs.t) ->
                            fun (x335 : Ojs.t) ->
                              fun (x336 : Ojs.t) ->
                                x333 ~worker:(Worker.t_of_js x334)
                                  ~message:(any_of_js x335)
                                  ~handle:(union2_of_js Net.Server.t_of_js
                                             Net.Socket.t_of_js x336)))|])
        let (add_listener'''''' :
          t -> event:[ `online ] -> listener:(worker:Worker.t -> unit) -> t)
          =
          fun (x343 : t) ->
            fun ~event:(x340 : [ `online ]) ->
              fun ~listener:(x341 : worker:Worker.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x343) "addListener"
                     [|((match x340 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x342 :
                                                                    Ojs.t) ->
                                                                    x341
                                                                    ~worker:(
                                                                    Worker.t_of_js
                                                                    x342)))|])
        let (add_listener''''''' :
          t ->
            event:[ `setup ] ->
              listener:(settings:ClusterSettings.t -> unit) -> t)
          =
          fun (x347 : t) ->
            fun ~event:(x344 : [ `setup ]) ->
              fun ~listener:(x345 : settings:ClusterSettings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x347) "addListener"
                     [|((match x344 with | `setup -> Ojs.string_to_js "setup"));(
                       Ojs.fun_to_js 1
                         (fun (x346 : Ojs.t) ->
                            x345 ~settings:(ClusterSettings.t_of_js x346)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x353 : t) ->
            fun ~event:(x348 : symbol or_string) ->
              fun ~args:(x349 : any list) ->
                Ojs.bool_of_js
                  (let x354 = t_to_js x353 in
                   Ojs.call (Ojs.get_prop_ascii x354 "emit") "apply"
                     [|x354;((let x350 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x350 "push"
                                   [|(or_string_to_js symbol_to_js x348)|]);
                              List.iter
                                (fun (x351 : any) ->
                                   ignore
                                     (Ojs.call x350 "push"
                                        [|(any_to_js x351)|])) x349;
                              x350))|])
        let (emit' : t -> event:[ `disconnect ] -> worker:Worker.t -> bool) =
          fun (x357 : t) ->
            fun ~event:(x355 : [ `disconnect ]) ->
              fun ~worker:(x356 : Worker.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x357) "emit"
                     [|((match x355 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Worker.t_to_js x356)|])
        let (emit'' :
          t ->
            event:[ `exit ] ->
              worker:Worker.t -> code:int -> signal:string -> bool)
          =
          fun (x362 : t) ->
            fun ~event:(x358 : [ `exit ]) ->
              fun ~worker:(x359 : Worker.t) ->
                fun ~code:(x360 : int) ->
                  fun ~signal:(x361 : string) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x362) "emit"
                         [|((match x358 with
                             | `exit -> Ojs.string_to_js "exit"));(Worker.t_to_js
                                                                    x359);(
                           Ojs.int_to_js x360);(Ojs.string_to_js x361)|])
        let (emit''' : t -> event:[ `fork ] -> worker:Worker.t -> bool) =
          fun (x365 : t) ->
            fun ~event:(x363 : [ `fork ]) ->
              fun ~worker:(x364 : Worker.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x365) "emit"
                     [|((match x363 with | `fork -> Ojs.string_to_js "fork"));(
                       Worker.t_to_js x364)|])
        let (emit'''' :
          t ->
            event:[ `listening ] ->
              worker:Worker.t -> address:Address.t -> bool)
          =
          fun (x369 : t) ->
            fun ~event:(x366 : [ `listening ]) ->
              fun ~worker:(x367 : Worker.t) ->
                fun ~address:(x368 : Address.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x369) "emit"
                       [|((match x366 with
                           | `listening -> Ojs.string_to_js "listening"));(
                         Worker.t_to_js x367);(Address.t_to_js x368)|])
        let (emit''''' :
          t ->
            event:[ `message ] ->
              worker:Worker.t ->
                message:any ->
                  handle:(Net.Server.t, Net.Socket.t) union2 -> bool)
          =
          fun (x376 : t) ->
            fun ~event:(x370 : [ `message ]) ->
              fun ~worker:(x371 : Worker.t) ->
                fun ~message:(x372 : any) ->
                  fun ~handle:(x373 : (Net.Server.t, Net.Socket.t) union2) ->
                    Ojs.bool_of_js
                      (Ojs.call (t_to_js x376) "emit"
                         [|((match x370 with
                             | `message -> Ojs.string_to_js "message"));(
                           Worker.t_to_js x371);(any_to_js x372);(union2_to_js
                                                                    Net.Server.t_to_js
                                                                    Net.Socket.t_to_js
                                                                    x373)|])
        let (emit'''''' : t -> event:[ `online ] -> worker:Worker.t -> bool)
          =
          fun (x379 : t) ->
            fun ~event:(x377 : [ `online ]) ->
              fun ~worker:(x378 : Worker.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x379) "emit"
                     [|((match x377 with
                         | `online -> Ojs.string_to_js "online"));(Worker.t_to_js
                                                                    x378)|])
        let (emit''''''' :
          t -> event:[ `setup ] -> settings:ClusterSettings.t -> bool) =
          fun (x382 : t) ->
            fun ~event:(x380 : [ `setup ]) ->
              fun ~settings:(x381 : ClusterSettings.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x382) "emit"
                     [|((match x380 with | `setup -> Ojs.string_to_js "setup"));(
                       ClusterSettings.t_to_js x381)|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x387 : t) ->
            fun ~event:(x383 : string) ->
              fun ~listener:(x384 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x387) "on"
                     [|(Ojs.string_to_js x383);(Ojs.fun_to_js_args
                                                  (fun (x385 : _) ->
                                                     x384
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x385 0)))|])
        let (on' :
          t ->
            event:[ `disconnect ] -> listener:(worker:Worker.t -> unit) -> t)
          =
          fun (x391 : t) ->
            fun ~event:(x388 : [ `disconnect ]) ->
              fun ~listener:(x389 : worker:Worker.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x391) "on"
                     [|((match x388 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1
                         (fun (x390 : Ojs.t) ->
                            x389 ~worker:(Worker.t_of_js x390)))|])
        let (on'' :
          t ->
            event:[ `exit ] ->
              listener:(worker:Worker.t -> code:int -> signal:string -> unit)
                -> t)
          =
          fun (x397 : t) ->
            fun ~event:(x392 : [ `exit ]) ->
              fun
                ~listener:(x393 :
                            worker:Worker.t ->
                              code:int -> signal:string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x397) "on"
                     [|((match x392 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 3
                         (fun (x394 : Ojs.t) ->
                            fun (x395 : Ojs.t) ->
                              fun (x396 : Ojs.t) ->
                                x393 ~worker:(Worker.t_of_js x394)
                                  ~code:(Ojs.int_of_js x395)
                                  ~signal:(Ojs.string_of_js x396)))|])
        let (on''' :
          t -> event:[ `fork ] -> listener:(worker:Worker.t -> unit) -> t) =
          fun (x401 : t) ->
            fun ~event:(x398 : [ `fork ]) ->
              fun ~listener:(x399 : worker:Worker.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x401) "on"
                     [|((match x398 with | `fork -> Ojs.string_to_js "fork"));(
                       Ojs.fun_to_js 1
                         (fun (x400 : Ojs.t) ->
                            x399 ~worker:(Worker.t_of_js x400)))|])
        let (on'''' :
          t ->
            event:[ `listening ] ->
              listener:(worker:Worker.t -> address:Address.t -> unit) -> t)
          =
          fun (x406 : t) ->
            fun ~event:(x402 : [ `listening ]) ->
              fun
                ~listener:(x403 :
                            worker:Worker.t -> address:Address.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x406) "on"
                     [|((match x402 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 2
                         (fun (x404 : Ojs.t) ->
                            fun (x405 : Ojs.t) ->
                              x403 ~worker:(Worker.t_of_js x404)
                                ~address:(Address.t_of_js x405)))|])
        let (on''''' :
          t ->
            event:[ `message ] ->
              listener:(worker:Worker.t ->
                          message:any ->
                            handle:(Net.Server.t, Net.Socket.t) union2 ->
                              unit)
                -> t)
          =
          fun (x414 : t) ->
            fun ~event:(x407 : [ `message ]) ->
              fun
                ~listener:(x408 :
                            worker:Worker.t ->
                              message:any ->
                                handle:(Net.Server.t, Net.Socket.t) union2 ->
                                  unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x414) "on"
                     [|((match x407 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 3
                         (fun (x409 : Ojs.t) ->
                            fun (x410 : Ojs.t) ->
                              fun (x411 : Ojs.t) ->
                                x408 ~worker:(Worker.t_of_js x409)
                                  ~message:(any_of_js x410)
                                  ~handle:(union2_of_js Net.Server.t_of_js
                                             Net.Socket.t_of_js x411)))|])
        let (on'''''' :
          t -> event:[ `online ] -> listener:(worker:Worker.t -> unit) -> t)
          =
          fun (x418 : t) ->
            fun ~event:(x415 : [ `online ]) ->
              fun ~listener:(x416 : worker:Worker.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x418) "on"
                     [|((match x415 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x417 :
                                                                    Ojs.t) ->
                                                                    x416
                                                                    ~worker:(
                                                                    Worker.t_of_js
                                                                    x417)))|])
        let (on''''''' :
          t ->
            event:[ `setup ] ->
              listener:(settings:ClusterSettings.t -> unit) -> t)
          =
          fun (x422 : t) ->
            fun ~event:(x419 : [ `setup ]) ->
              fun ~listener:(x420 : settings:ClusterSettings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x422) "on"
                     [|((match x419 with | `setup -> Ojs.string_to_js "setup"));(
                       Ojs.fun_to_js 1
                         (fun (x421 : Ojs.t) ->
                            x420 ~settings:(ClusterSettings.t_of_js x421)))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x427 : t) ->
            fun ~event:(x423 : string) ->
              fun ~listener:(x424 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x427) "once"
                     [|(Ojs.string_to_js x423);(Ojs.fun_to_js_args
                                                  (fun (x425 : _) ->
                                                     x424
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x425 0)))|])
        let (once' :
          t ->
            event:[ `disconnect ] -> listener:(worker:Worker.t -> unit) -> t)
          =
          fun (x431 : t) ->
            fun ~event:(x428 : [ `disconnect ]) ->
              fun ~listener:(x429 : worker:Worker.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x431) "once"
                     [|((match x428 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1
                         (fun (x430 : Ojs.t) ->
                            x429 ~worker:(Worker.t_of_js x430)))|])
        let (once'' :
          t ->
            event:[ `exit ] ->
              listener:(worker:Worker.t -> code:int -> signal:string -> unit)
                -> t)
          =
          fun (x437 : t) ->
            fun ~event:(x432 : [ `exit ]) ->
              fun
                ~listener:(x433 :
                            worker:Worker.t ->
                              code:int -> signal:string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x437) "once"
                     [|((match x432 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 3
                         (fun (x434 : Ojs.t) ->
                            fun (x435 : Ojs.t) ->
                              fun (x436 : Ojs.t) ->
                                x433 ~worker:(Worker.t_of_js x434)
                                  ~code:(Ojs.int_of_js x435)
                                  ~signal:(Ojs.string_of_js x436)))|])
        let (once''' :
          t -> event:[ `fork ] -> listener:(worker:Worker.t -> unit) -> t) =
          fun (x441 : t) ->
            fun ~event:(x438 : [ `fork ]) ->
              fun ~listener:(x439 : worker:Worker.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x441) "once"
                     [|((match x438 with | `fork -> Ojs.string_to_js "fork"));(
                       Ojs.fun_to_js 1
                         (fun (x440 : Ojs.t) ->
                            x439 ~worker:(Worker.t_of_js x440)))|])
        let (once'''' :
          t ->
            event:[ `listening ] ->
              listener:(worker:Worker.t -> address:Address.t -> unit) -> t)
          =
          fun (x446 : t) ->
            fun ~event:(x442 : [ `listening ]) ->
              fun
                ~listener:(x443 :
                            worker:Worker.t -> address:Address.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x446) "once"
                     [|((match x442 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 2
                         (fun (x444 : Ojs.t) ->
                            fun (x445 : Ojs.t) ->
                              x443 ~worker:(Worker.t_of_js x444)
                                ~address:(Address.t_of_js x445)))|])
        let (once''''' :
          t ->
            event:[ `message ] ->
              listener:(worker:Worker.t ->
                          message:any ->
                            handle:(Net.Server.t, Net.Socket.t) union2 ->
                              unit)
                -> t)
          =
          fun (x454 : t) ->
            fun ~event:(x447 : [ `message ]) ->
              fun
                ~listener:(x448 :
                            worker:Worker.t ->
                              message:any ->
                                handle:(Net.Server.t, Net.Socket.t) union2 ->
                                  unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x454) "once"
                     [|((match x447 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 3
                         (fun (x449 : Ojs.t) ->
                            fun (x450 : Ojs.t) ->
                              fun (x451 : Ojs.t) ->
                                x448 ~worker:(Worker.t_of_js x449)
                                  ~message:(any_of_js x450)
                                  ~handle:(union2_of_js Net.Server.t_of_js
                                             Net.Socket.t_of_js x451)))|])
        let (once'''''' :
          t -> event:[ `online ] -> listener:(worker:Worker.t -> unit) -> t)
          =
          fun (x458 : t) ->
            fun ~event:(x455 : [ `online ]) ->
              fun ~listener:(x456 : worker:Worker.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x458) "once"
                     [|((match x455 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x457 :
                                                                    Ojs.t) ->
                                                                    x456
                                                                    ~worker:(
                                                                    Worker.t_of_js
                                                                    x457)))|])
        let (once''''''' :
          t ->
            event:[ `setup ] ->
              listener:(settings:ClusterSettings.t -> unit) -> t)
          =
          fun (x462 : t) ->
            fun ~event:(x459 : [ `setup ]) ->
              fun ~listener:(x460 : settings:ClusterSettings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x462) "once"
                     [|((match x459 with | `setup -> Ojs.string_to_js "setup"));(
                       Ojs.fun_to_js 1
                         (fun (x461 : Ojs.t) ->
                            x460 ~settings:(ClusterSettings.t_of_js x461)))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x467 : t) ->
            fun ~event:(x463 : string) ->
              fun ~listener:(x464 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x467) "prependListener"
                     [|(Ojs.string_to_js x463);(Ojs.fun_to_js_args
                                                  (fun (x465 : _) ->
                                                     x464
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x465 0)))|])
        let (prepend_listener' :
          t ->
            event:[ `disconnect ] -> listener:(worker:Worker.t -> unit) -> t)
          =
          fun (x471 : t) ->
            fun ~event:(x468 : [ `disconnect ]) ->
              fun ~listener:(x469 : worker:Worker.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x471) "prependListener"
                     [|((match x468 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1
                         (fun (x470 : Ojs.t) ->
                            x469 ~worker:(Worker.t_of_js x470)))|])
        let (prepend_listener'' :
          t ->
            event:[ `exit ] ->
              listener:(worker:Worker.t -> code:int -> signal:string -> unit)
                -> t)
          =
          fun (x477 : t) ->
            fun ~event:(x472 : [ `exit ]) ->
              fun
                ~listener:(x473 :
                            worker:Worker.t ->
                              code:int -> signal:string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x477) "prependListener"
                     [|((match x472 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 3
                         (fun (x474 : Ojs.t) ->
                            fun (x475 : Ojs.t) ->
                              fun (x476 : Ojs.t) ->
                                x473 ~worker:(Worker.t_of_js x474)
                                  ~code:(Ojs.int_of_js x475)
                                  ~signal:(Ojs.string_of_js x476)))|])
        let (prepend_listener''' :
          t -> event:[ `fork ] -> listener:(worker:Worker.t -> unit) -> t) =
          fun (x481 : t) ->
            fun ~event:(x478 : [ `fork ]) ->
              fun ~listener:(x479 : worker:Worker.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x481) "prependListener"
                     [|((match x478 with | `fork -> Ojs.string_to_js "fork"));(
                       Ojs.fun_to_js 1
                         (fun (x480 : Ojs.t) ->
                            x479 ~worker:(Worker.t_of_js x480)))|])
        let (prepend_listener'''' :
          t ->
            event:[ `listening ] ->
              listener:(worker:Worker.t -> address:Address.t -> unit) -> t)
          =
          fun (x486 : t) ->
            fun ~event:(x482 : [ `listening ]) ->
              fun
                ~listener:(x483 :
                            worker:Worker.t -> address:Address.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x486) "prependListener"
                     [|((match x482 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 2
                         (fun (x484 : Ojs.t) ->
                            fun (x485 : Ojs.t) ->
                              x483 ~worker:(Worker.t_of_js x484)
                                ~address:(Address.t_of_js x485)))|])
        let (prepend_listener''''' :
          t ->
            event:[ `message ] ->
              listener:(worker:Worker.t ->
                          message:any ->
                            handle:(Net.Server.t, Net.Socket.t) union2 ->
                              unit)
                -> t)
          =
          fun (x494 : t) ->
            fun ~event:(x487 : [ `message ]) ->
              fun
                ~listener:(x488 :
                            worker:Worker.t ->
                              message:any ->
                                handle:(Net.Server.t, Net.Socket.t) union2 ->
                                  unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x494) "prependListener"
                     [|((match x487 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 3
                         (fun (x489 : Ojs.t) ->
                            fun (x490 : Ojs.t) ->
                              fun (x491 : Ojs.t) ->
                                x488 ~worker:(Worker.t_of_js x489)
                                  ~message:(any_of_js x490)
                                  ~handle:(union2_of_js Net.Server.t_of_js
                                             Net.Socket.t_of_js x491)))|])
        let (prepend_listener'''''' :
          t -> event:[ `online ] -> listener:(worker:Worker.t -> unit) -> t)
          =
          fun (x498 : t) ->
            fun ~event:(x495 : [ `online ]) ->
              fun ~listener:(x496 : worker:Worker.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x498) "prependListener"
                     [|((match x495 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x497 :
                                                                    Ojs.t) ->
                                                                    x496
                                                                    ~worker:(
                                                                    Worker.t_of_js
                                                                    x497)))|])
        let (prepend_listener''''''' :
          t ->
            event:[ `setup ] ->
              listener:(settings:ClusterSettings.t -> unit) -> t)
          =
          fun (x502 : t) ->
            fun ~event:(x499 : [ `setup ]) ->
              fun ~listener:(x500 : settings:ClusterSettings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x502) "prependListener"
                     [|((match x499 with | `setup -> Ojs.string_to_js "setup"));(
                       Ojs.fun_to_js 1
                         (fun (x501 : Ojs.t) ->
                            x500 ~settings:(ClusterSettings.t_of_js x501)))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x507 : t) ->
            fun ~event:(x503 : string) ->
              fun ~listener:(x504 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x507) "prependOnceListener"
                     [|(Ojs.string_to_js x503);(Ojs.fun_to_js_args
                                                  (fun (x505 : _) ->
                                                     x504
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x505 0)))|])
        let (prepend_once_listener' :
          t ->
            event:[ `disconnect ] -> listener:(worker:Worker.t -> unit) -> t)
          =
          fun (x511 : t) ->
            fun ~event:(x508 : [ `disconnect ]) ->
              fun ~listener:(x509 : worker:Worker.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x511) "prependOnceListener"
                     [|((match x508 with
                         | `disconnect -> Ojs.string_to_js "disconnect"));(
                       Ojs.fun_to_js 1
                         (fun (x510 : Ojs.t) ->
                            x509 ~worker:(Worker.t_of_js x510)))|])
        let (prepend_once_listener'' :
          t ->
            event:[ `exit ] ->
              listener:(worker:Worker.t -> code:int -> signal:string -> unit)
                -> t)
          =
          fun (x517 : t) ->
            fun ~event:(x512 : [ `exit ]) ->
              fun
                ~listener:(x513 :
                            worker:Worker.t ->
                              code:int -> signal:string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x517) "prependOnceListener"
                     [|((match x512 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 3
                         (fun (x514 : Ojs.t) ->
                            fun (x515 : Ojs.t) ->
                              fun (x516 : Ojs.t) ->
                                x513 ~worker:(Worker.t_of_js x514)
                                  ~code:(Ojs.int_of_js x515)
                                  ~signal:(Ojs.string_of_js x516)))|])
        let (prepend_once_listener''' :
          t -> event:[ `fork ] -> listener:(worker:Worker.t -> unit) -> t) =
          fun (x521 : t) ->
            fun ~event:(x518 : [ `fork ]) ->
              fun ~listener:(x519 : worker:Worker.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x521) "prependOnceListener"
                     [|((match x518 with | `fork -> Ojs.string_to_js "fork"));(
                       Ojs.fun_to_js 1
                         (fun (x520 : Ojs.t) ->
                            x519 ~worker:(Worker.t_of_js x520)))|])
        let (prepend_once_listener'''' :
          t ->
            event:[ `listening ] ->
              listener:(worker:Worker.t -> address:Address.t -> unit) -> t)
          =
          fun (x526 : t) ->
            fun ~event:(x522 : [ `listening ]) ->
              fun
                ~listener:(x523 :
                            worker:Worker.t -> address:Address.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x526) "prependOnceListener"
                     [|((match x522 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 2
                         (fun (x524 : Ojs.t) ->
                            fun (x525 : Ojs.t) ->
                              x523 ~worker:(Worker.t_of_js x524)
                                ~address:(Address.t_of_js x525)))|])
        let (prepend_once_listener''''' :
          t ->
            event:[ `message ] ->
              listener:(worker:Worker.t ->
                          message:any ->
                            handle:(Net.Server.t, Net.Socket.t) union2 ->
                              unit)
                -> t)
          =
          fun (x534 : t) ->
            fun ~event:(x527 : [ `message ]) ->
              fun
                ~listener:(x528 :
                            worker:Worker.t ->
                              message:any ->
                                handle:(Net.Server.t, Net.Socket.t) union2 ->
                                  unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x534) "prependOnceListener"
                     [|((match x527 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 3
                         (fun (x529 : Ojs.t) ->
                            fun (x530 : Ojs.t) ->
                              fun (x531 : Ojs.t) ->
                                x528 ~worker:(Worker.t_of_js x529)
                                  ~message:(any_of_js x530)
                                  ~handle:(union2_of_js Net.Server.t_of_js
                                             Net.Socket.t_of_js x531)))|])
        let (prepend_once_listener'''''' :
          t -> event:[ `online ] -> listener:(worker:Worker.t -> unit) -> t)
          =
          fun (x538 : t) ->
            fun ~event:(x535 : [ `online ]) ->
              fun ~listener:(x536 : worker:Worker.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x538) "prependOnceListener"
                     [|((match x535 with
                         | `online -> Ojs.string_to_js "online"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x537 :
                                                                    Ojs.t) ->
                                                                    x536
                                                                    ~worker:(
                                                                    Worker.t_of_js
                                                                    x537)))|])
        let (prepend_once_listener''''''' :
          t ->
            event:[ `setup ] ->
              listener:(settings:ClusterSettings.t -> unit) -> t)
          =
          fun (x542 : t) ->
            fun ~event:(x539 : [ `setup ]) ->
              fun ~listener:(x540 : settings:ClusterSettings.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x542) "prependOnceListener"
                     [|((match x539 with | `setup -> Ojs.string_to_js "setup"));(
                       Ojs.fun_to_js 1
                         (fun (x541 : Ojs.t) ->
                            x540 ~settings:(ClusterSettings.t_of_js x541)))|])
        let (cast : t -> Node_events.Events.EventEmitter.t) =
          fun (x543 : t) ->
            Node_events.Events.EventEmitter.t_of_js (t_to_js x543)
      end
    let (s_ched_none : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.cluster "SCHED_NONE")
    let (s_ched_rr : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.cluster "SCHED_RR")
    let (disconnect : ?callback:(unit -> unit) -> unit -> unit) =
      fun ?callback:(x544 : (unit -> unit) option) ->
        fun () ->
          ignore
            (let x547 = Import.cluster in
             Ojs.call (Ojs.get_prop_ascii x547 "disconnect") "apply"
               [|x547;((let x545 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x544 with
                         | Some x546 ->
                             ignore
                               (Ojs.call x545 "push"
                                  [|(Ojs.fun_to_js 1 (fun _ -> x546 ()))|])
                         | None -> ());
                        x545))|])
    let (fork : ?env:any -> unit -> Worker.t) =
      fun ?env:(x548 : any option) ->
        fun () ->
          Worker.t_of_js
            (let x551 = Import.cluster in
             Ojs.call (Ojs.get_prop_ascii x551 "fork") "apply"
               [|x551;((let x549 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x548 with
                         | Some x550 ->
                             ignore
                               (Ojs.call x549 "push" [|(any_to_js x550)|])
                         | None -> ());
                        x549))|])
    let (is_master : bool) =
      Ojs.bool_of_js (Ojs.get_prop_ascii Import.cluster "isMaster")
    let (is_worker : bool) =
      Ojs.bool_of_js (Ojs.get_prop_ascii Import.cluster "isWorker")
    let (scheduling_policy : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.cluster "schedulingPolicy")
    let (settings : ClusterSettings.t) =
      ClusterSettings.t_of_js (Ojs.get_prop_ascii Import.cluster "settings")
    let (setup_master : ?settings:ClusterSettings.t -> unit -> unit) =
      fun ?settings:(x552 : ClusterSettings.t option) ->
        fun () ->
          ignore
            (let x555 = Import.cluster in
             Ojs.call (Ojs.get_prop_ascii x555 "setupMaster") "apply"
               [|x555;((let x553 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x552 with
                         | Some x554 ->
                             ignore
                               (Ojs.call x553 "push"
                                  [|(ClusterSettings.t_to_js x554)|])
                         | None -> ());
                        x553))|])
    let (worker : Worker.t) =
      Worker.t_of_js (Ojs.get_prop_ascii Import.cluster "worker")
    let (workers : Worker.t Dict.t) =
      Dict.t_of_js Worker.t_of_js
        (Ojs.get_prop_ascii Import.cluster "workers")
    let (add_listener :
      event:string -> listener:(args:any list -> unit) -> Cluster.t) =
      fun ~event:(x557 : string) ->
        fun ~listener:(x558 : args:any list -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "addListener"
               [|(Ojs.string_to_js x557);(Ojs.fun_to_js_args
                                            (fun (x559 : _) ->
                                               x558
                                                 ~args:(Ojs.list_of_js_from
                                                          any_of_js x559 0)))|])
    let (add_listener :
      event:[ `disconnect ] ->
        listener:(worker:Worker.t -> unit) -> Cluster.t)
      =
      fun ~event:(x561 : [ `disconnect ]) ->
        fun ~listener:(x562 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "addListener"
               [|((match x561 with
                   | `disconnect -> Ojs.string_to_js "disconnect"));(
                 Ojs.fun_to_js 1
                   (fun (x563 : Ojs.t) -> x562 ~worker:(Worker.t_of_js x563)))|])
    let (add_listener :
      event:[ `exit ] ->
        listener:(worker:Worker.t -> code:int -> signal:string -> unit) ->
          Cluster.t)
      =
      fun ~event:(x564 : [ `exit ]) ->
        fun
          ~listener:(x565 :
                      worker:Worker.t -> code:int -> signal:string -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "addListener"
               [|((match x564 with | `exit -> Ojs.string_to_js "exit"));(
                 Ojs.fun_to_js 3
                   (fun (x566 : Ojs.t) ->
                      fun (x567 : Ojs.t) ->
                        fun (x568 : Ojs.t) ->
                          x565 ~worker:(Worker.t_of_js x566)
                            ~code:(Ojs.int_of_js x567)
                            ~signal:(Ojs.string_of_js x568)))|])
    let (add_listener :
      event:[ `fork ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x569 : [ `fork ]) ->
        fun ~listener:(x570 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "addListener"
               [|((match x569 with | `fork -> Ojs.string_to_js "fork"));(
                 Ojs.fun_to_js 1
                   (fun (x571 : Ojs.t) -> x570 ~worker:(Worker.t_of_js x571)))|])
    let (add_listener :
      event:[ `listening ] ->
        listener:(worker:Worker.t -> address:Address.t -> unit) -> Cluster.t)
      =
      fun ~event:(x572 : [ `listening ]) ->
        fun ~listener:(x573 : worker:Worker.t -> address:Address.t -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "addListener"
               [|((match x572 with
                   | `listening -> Ojs.string_to_js "listening"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x574 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x575 :
                                                                    Ojs.t) ->
                                                                    x573
                                                                    ~worker:(
                                                                    Worker.t_of_js
                                                                    x574)
                                                                    ~address:(
                                                                    Address.t_of_js
                                                                    x575)))|])
    let (add_listener :
      event:[ `message ] ->
        listener:(worker:Worker.t ->
                    message:any ->
                      handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          -> Cluster.t)
      =
      fun ~event:(x576 : [ `message ]) ->
        fun
          ~listener:(x577 :
                      worker:Worker.t ->
                        message:any ->
                          handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "addListener"
               [|((match x576 with | `message -> Ojs.string_to_js "message"));(
                 Ojs.fun_to_js 3
                   (fun (x578 : Ojs.t) ->
                      fun (x579 : Ojs.t) ->
                        fun (x580 : Ojs.t) ->
                          x577 ~worker:(Worker.t_of_js x578)
                            ~message:(any_of_js x579)
                            ~handle:(union2_of_js Net.Server.t_of_js
                                       Net.Socket.t_of_js x580)))|])
    let (add_listener :
      event:[ `online ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x583 : [ `online ]) ->
        fun ~listener:(x584 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "addListener"
               [|((match x583 with | `online -> Ojs.string_to_js "online"));(
                 Ojs.fun_to_js 1
                   (fun (x585 : Ojs.t) -> x584 ~worker:(Worker.t_of_js x585)))|])
    let (add_listener :
      event:[ `setup ] ->
        listener:(settings:ClusterSettings.t -> unit) -> Cluster.t)
      =
      fun ~event:(x586 : [ `setup ]) ->
        fun ~listener:(x587 : settings:ClusterSettings.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "addListener"
               [|((match x586 with | `setup -> Ojs.string_to_js "setup"));(
                 Ojs.fun_to_js 1
                   (fun (x588 : Ojs.t) ->
                      x587 ~settings:(ClusterSettings.t_of_js x588)))|])
    let (emit : event:symbol or_string -> args:any list -> bool) =
      fun ~event:(x589 : symbol or_string) ->
        fun ~args:(x590 : any list) ->
          Ojs.bool_of_js
            (let x594 = Import.cluster in
             Ojs.call (Ojs.get_prop_ascii x594 "emit") "apply"
               [|x594;((let x591 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x591 "push"
                             [|(or_string_to_js symbol_to_js x589)|]);
                        List.iter
                          (fun (x592 : any) ->
                             ignore
                               (Ojs.call x591 "push" [|(any_to_js x592)|]))
                          x590;
                        x591))|])
    let (emit : event:[ `disconnect ] -> worker:Worker.t -> bool) =
      fun ~event:(x595 : [ `disconnect ]) ->
        fun ~worker:(x596 : Worker.t) ->
          Ojs.bool_of_js
            (Ojs.call Import.cluster "emit"
               [|((match x595 with
                   | `disconnect -> Ojs.string_to_js "disconnect"));(
                 Worker.t_to_js x596)|])
    let (emit :
      event:[ `exit ] -> worker:Worker.t -> code:int -> signal:string -> bool)
      =
      fun ~event:(x597 : [ `exit ]) ->
        fun ~worker:(x598 : Worker.t) ->
          fun ~code:(x599 : int) ->
            fun ~signal:(x600 : string) ->
              Ojs.bool_of_js
                (Ojs.call Import.cluster "emit"
                   [|((match x597 with | `exit -> Ojs.string_to_js "exit"));(
                     Worker.t_to_js x598);(Ojs.int_to_js x599);(Ojs.string_to_js
                                                                  x600)|])
    let (emit : event:[ `fork ] -> worker:Worker.t -> bool) =
      fun ~event:(x601 : [ `fork ]) ->
        fun ~worker:(x602 : Worker.t) ->
          Ojs.bool_of_js
            (Ojs.call Import.cluster "emit"
               [|((match x601 with | `fork -> Ojs.string_to_js "fork"));(
                 Worker.t_to_js x602)|])
    let (emit :
      event:[ `listening ] -> worker:Worker.t -> address:Address.t -> bool) =
      fun ~event:(x603 : [ `listening ]) ->
        fun ~worker:(x604 : Worker.t) ->
          fun ~address:(x605 : Address.t) ->
            Ojs.bool_of_js
              (Ojs.call Import.cluster "emit"
                 [|((match x603 with
                     | `listening -> Ojs.string_to_js "listening"));(
                   Worker.t_to_js x604);(Address.t_to_js x605)|])
    let (emit :
      event:[ `message ] ->
        worker:Worker.t ->
          message:any -> handle:(Net.Server.t, Net.Socket.t) union2 -> bool)
      =
      fun ~event:(x606 : [ `message ]) ->
        fun ~worker:(x607 : Worker.t) ->
          fun ~message:(x608 : any) ->
            fun ~handle:(x609 : (Net.Server.t, Net.Socket.t) union2) ->
              Ojs.bool_of_js
                (Ojs.call Import.cluster "emit"
                   [|((match x606 with
                       | `message -> Ojs.string_to_js "message"));(Worker.t_to_js
                                                                    x607);(
                     any_to_js x608);(union2_to_js Net.Server.t_to_js
                                        Net.Socket.t_to_js x609)|])
    let (emit : event:[ `online ] -> worker:Worker.t -> bool) =
      fun ~event:(x612 : [ `online ]) ->
        fun ~worker:(x613 : Worker.t) ->
          Ojs.bool_of_js
            (Ojs.call Import.cluster "emit"
               [|((match x612 with | `online -> Ojs.string_to_js "online"));(
                 Worker.t_to_js x613)|])
    let (emit : event:[ `setup ] -> settings:ClusterSettings.t -> bool) =
      fun ~event:(x614 : [ `setup ]) ->
        fun ~settings:(x615 : ClusterSettings.t) ->
          Ojs.bool_of_js
            (Ojs.call Import.cluster "emit"
               [|((match x614 with | `setup -> Ojs.string_to_js "setup"));(
                 ClusterSettings.t_to_js x615)|])
    let (on : event:string -> listener:(args:any list -> unit) -> Cluster.t)
      =
      fun ~event:(x616 : string) ->
        fun ~listener:(x617 : args:any list -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "on"
               [|(Ojs.string_to_js x616);(Ojs.fun_to_js_args
                                            (fun (x618 : _) ->
                                               x617
                                                 ~args:(Ojs.list_of_js_from
                                                          any_of_js x618 0)))|])
    let (on :
      event:[ `disconnect ] ->
        listener:(worker:Worker.t -> unit) -> Cluster.t)
      =
      fun ~event:(x620 : [ `disconnect ]) ->
        fun ~listener:(x621 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "on"
               [|((match x620 with
                   | `disconnect -> Ojs.string_to_js "disconnect"));(
                 Ojs.fun_to_js 1
                   (fun (x622 : Ojs.t) -> x621 ~worker:(Worker.t_of_js x622)))|])
    let (on :
      event:[ `exit ] ->
        listener:(worker:Worker.t -> code:int -> signal:string -> unit) ->
          Cluster.t)
      =
      fun ~event:(x623 : [ `exit ]) ->
        fun
          ~listener:(x624 :
                      worker:Worker.t -> code:int -> signal:string -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "on"
               [|((match x623 with | `exit -> Ojs.string_to_js "exit"));(
                 Ojs.fun_to_js 3
                   (fun (x625 : Ojs.t) ->
                      fun (x626 : Ojs.t) ->
                        fun (x627 : Ojs.t) ->
                          x624 ~worker:(Worker.t_of_js x625)
                            ~code:(Ojs.int_of_js x626)
                            ~signal:(Ojs.string_of_js x627)))|])
    let (on :
      event:[ `fork ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x628 : [ `fork ]) ->
        fun ~listener:(x629 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "on"
               [|((match x628 with | `fork -> Ojs.string_to_js "fork"));(
                 Ojs.fun_to_js 1
                   (fun (x630 : Ojs.t) -> x629 ~worker:(Worker.t_of_js x630)))|])
    let (on :
      event:[ `listening ] ->
        listener:(worker:Worker.t -> address:Address.t -> unit) -> Cluster.t)
      =
      fun ~event:(x631 : [ `listening ]) ->
        fun ~listener:(x632 : worker:Worker.t -> address:Address.t -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "on"
               [|((match x631 with
                   | `listening -> Ojs.string_to_js "listening"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x633 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x634 :
                                                                    Ojs.t) ->
                                                                    x632
                                                                    ~worker:(
                                                                    Worker.t_of_js
                                                                    x633)
                                                                    ~address:(
                                                                    Address.t_of_js
                                                                    x634)))|])
    let (on :
      event:[ `message ] ->
        listener:(worker:Worker.t ->
                    message:any ->
                      handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          -> Cluster.t)
      =
      fun ~event:(x635 : [ `message ]) ->
        fun
          ~listener:(x636 :
                      worker:Worker.t ->
                        message:any ->
                          handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "on"
               [|((match x635 with | `message -> Ojs.string_to_js "message"));(
                 Ojs.fun_to_js 3
                   (fun (x637 : Ojs.t) ->
                      fun (x638 : Ojs.t) ->
                        fun (x639 : Ojs.t) ->
                          x636 ~worker:(Worker.t_of_js x637)
                            ~message:(any_of_js x638)
                            ~handle:(union2_of_js Net.Server.t_of_js
                                       Net.Socket.t_of_js x639)))|])
    let (on :
      event:[ `online ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x642 : [ `online ]) ->
        fun ~listener:(x643 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "on"
               [|((match x642 with | `online -> Ojs.string_to_js "online"));(
                 Ojs.fun_to_js 1
                   (fun (x644 : Ojs.t) -> x643 ~worker:(Worker.t_of_js x644)))|])
    let (on :
      event:[ `setup ] ->
        listener:(settings:ClusterSettings.t -> unit) -> Cluster.t)
      =
      fun ~event:(x645 : [ `setup ]) ->
        fun ~listener:(x646 : settings:ClusterSettings.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "on"
               [|((match x645 with | `setup -> Ojs.string_to_js "setup"));(
                 Ojs.fun_to_js 1
                   (fun (x647 : Ojs.t) ->
                      x646 ~settings:(ClusterSettings.t_of_js x647)))|])
    let (once :
      event:string -> listener:(args:any list -> unit) -> Cluster.t) =
      fun ~event:(x648 : string) ->
        fun ~listener:(x649 : args:any list -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "once"
               [|(Ojs.string_to_js x648);(Ojs.fun_to_js_args
                                            (fun (x650 : _) ->
                                               x649
                                                 ~args:(Ojs.list_of_js_from
                                                          any_of_js x650 0)))|])
    let (once :
      event:[ `disconnect ] ->
        listener:(worker:Worker.t -> unit) -> Cluster.t)
      =
      fun ~event:(x652 : [ `disconnect ]) ->
        fun ~listener:(x653 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "once"
               [|((match x652 with
                   | `disconnect -> Ojs.string_to_js "disconnect"));(
                 Ojs.fun_to_js 1
                   (fun (x654 : Ojs.t) -> x653 ~worker:(Worker.t_of_js x654)))|])
    let (once :
      event:[ `exit ] ->
        listener:(worker:Worker.t -> code:int -> signal:string -> unit) ->
          Cluster.t)
      =
      fun ~event:(x655 : [ `exit ]) ->
        fun
          ~listener:(x656 :
                      worker:Worker.t -> code:int -> signal:string -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "once"
               [|((match x655 with | `exit -> Ojs.string_to_js "exit"));(
                 Ojs.fun_to_js 3
                   (fun (x657 : Ojs.t) ->
                      fun (x658 : Ojs.t) ->
                        fun (x659 : Ojs.t) ->
                          x656 ~worker:(Worker.t_of_js x657)
                            ~code:(Ojs.int_of_js x658)
                            ~signal:(Ojs.string_of_js x659)))|])
    let (once :
      event:[ `fork ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x660 : [ `fork ]) ->
        fun ~listener:(x661 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "once"
               [|((match x660 with | `fork -> Ojs.string_to_js "fork"));(
                 Ojs.fun_to_js 1
                   (fun (x662 : Ojs.t) -> x661 ~worker:(Worker.t_of_js x662)))|])
    let (once :
      event:[ `listening ] ->
        listener:(worker:Worker.t -> address:Address.t -> unit) -> Cluster.t)
      =
      fun ~event:(x663 : [ `listening ]) ->
        fun ~listener:(x664 : worker:Worker.t -> address:Address.t -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "once"
               [|((match x663 with
                   | `listening -> Ojs.string_to_js "listening"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x665 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x666 :
                                                                    Ojs.t) ->
                                                                    x664
                                                                    ~worker:(
                                                                    Worker.t_of_js
                                                                    x665)
                                                                    ~address:(
                                                                    Address.t_of_js
                                                                    x666)))|])
    let (once :
      event:[ `message ] ->
        listener:(worker:Worker.t ->
                    message:any ->
                      handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          -> Cluster.t)
      =
      fun ~event:(x667 : [ `message ]) ->
        fun
          ~listener:(x668 :
                      worker:Worker.t ->
                        message:any ->
                          handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "once"
               [|((match x667 with | `message -> Ojs.string_to_js "message"));(
                 Ojs.fun_to_js 3
                   (fun (x669 : Ojs.t) ->
                      fun (x670 : Ojs.t) ->
                        fun (x671 : Ojs.t) ->
                          x668 ~worker:(Worker.t_of_js x669)
                            ~message:(any_of_js x670)
                            ~handle:(union2_of_js Net.Server.t_of_js
                                       Net.Socket.t_of_js x671)))|])
    let (once :
      event:[ `online ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x674 : [ `online ]) ->
        fun ~listener:(x675 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "once"
               [|((match x674 with | `online -> Ojs.string_to_js "online"));(
                 Ojs.fun_to_js 1
                   (fun (x676 : Ojs.t) -> x675 ~worker:(Worker.t_of_js x676)))|])
    let (once :
      event:[ `setup ] ->
        listener:(settings:ClusterSettings.t -> unit) -> Cluster.t)
      =
      fun ~event:(x677 : [ `setup ]) ->
        fun ~listener:(x678 : settings:ClusterSettings.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "once"
               [|((match x677 with | `setup -> Ojs.string_to_js "setup"));(
                 Ojs.fun_to_js 1
                   (fun (x679 : Ojs.t) ->
                      x678 ~settings:(ClusterSettings.t_of_js x679)))|])
    let (remove_listener :
      event:string -> listener:(args:any list -> unit) -> Cluster.t) =
      fun ~event:(x680 : string) ->
        fun ~listener:(x681 : args:any list -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "removeListener"
               [|(Ojs.string_to_js x680);(Ojs.fun_to_js_args
                                            (fun (x682 : _) ->
                                               x681
                                                 ~args:(Ojs.list_of_js_from
                                                          any_of_js x682 0)))|])
    let (remove_all_listeners : ?event:string -> unit -> Cluster.t) =
      fun ?event:(x684 : string option) ->
        fun () ->
          Cluster.t_of_js
            (let x687 = Import.cluster in
             Ojs.call (Ojs.get_prop_ascii x687 "removeAllListeners") "apply"
               [|x687;((let x685 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x684 with
                         | Some x686 ->
                             ignore
                               (Ojs.call x685 "push"
                                  [|(Ojs.string_to_js x686)|])
                         | None -> ());
                        x685))|])
    let (set_max_listeners : n:int -> Cluster.t) =
      fun ~n:(x688 : int) ->
        Cluster.t_of_js
          (Ojs.call Import.cluster "setMaxListeners" [|(Ojs.int_to_js x688)|])
    let (get_max_listeners : unit -> int) =
      fun () ->
        Ojs.int_of_js (Ojs.call Import.cluster "getMaxListeners" [||])
    let (listeners : event:string -> untyped_function list) =
      fun ~event:(x689 : string) ->
        Ojs.list_of_js untyped_function_of_js
          (Ojs.call Import.cluster "listeners" [|(Ojs.string_to_js x689)|])
    let (listener_count : type_:string -> int) =
      fun ~type_:(x691 : string) ->
        Ojs.int_of_js
          (Ojs.call Import.cluster "listenerCount"
             [|(Ojs.string_to_js x691)|])
    let (prepend_listener :
      event:string -> listener:(args:any list -> unit) -> Cluster.t) =
      fun ~event:(x692 : string) ->
        fun ~listener:(x693 : args:any list -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependListener"
               [|(Ojs.string_to_js x692);(Ojs.fun_to_js_args
                                            (fun (x694 : _) ->
                                               x693
                                                 ~args:(Ojs.list_of_js_from
                                                          any_of_js x694 0)))|])
    let (prepend_listener :
      event:[ `disconnect ] ->
        listener:(worker:Worker.t -> unit) -> Cluster.t)
      =
      fun ~event:(x696 : [ `disconnect ]) ->
        fun ~listener:(x697 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependListener"
               [|((match x696 with
                   | `disconnect -> Ojs.string_to_js "disconnect"));(
                 Ojs.fun_to_js 1
                   (fun (x698 : Ojs.t) -> x697 ~worker:(Worker.t_of_js x698)))|])
    let (prepend_listener :
      event:[ `exit ] ->
        listener:(worker:Worker.t -> code:int -> signal:string -> unit) ->
          Cluster.t)
      =
      fun ~event:(x699 : [ `exit ]) ->
        fun
          ~listener:(x700 :
                      worker:Worker.t -> code:int -> signal:string -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependListener"
               [|((match x699 with | `exit -> Ojs.string_to_js "exit"));(
                 Ojs.fun_to_js 3
                   (fun (x701 : Ojs.t) ->
                      fun (x702 : Ojs.t) ->
                        fun (x703 : Ojs.t) ->
                          x700 ~worker:(Worker.t_of_js x701)
                            ~code:(Ojs.int_of_js x702)
                            ~signal:(Ojs.string_of_js x703)))|])
    let (prepend_listener :
      event:[ `fork ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x704 : [ `fork ]) ->
        fun ~listener:(x705 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependListener"
               [|((match x704 with | `fork -> Ojs.string_to_js "fork"));(
                 Ojs.fun_to_js 1
                   (fun (x706 : Ojs.t) -> x705 ~worker:(Worker.t_of_js x706)))|])
    let (prepend_listener :
      event:[ `listening ] ->
        listener:(worker:Worker.t -> address:Address.t -> unit) -> Cluster.t)
      =
      fun ~event:(x707 : [ `listening ]) ->
        fun ~listener:(x708 : worker:Worker.t -> address:Address.t -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependListener"
               [|((match x707 with
                   | `listening -> Ojs.string_to_js "listening"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x709 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x710 :
                                                                    Ojs.t) ->
                                                                    x708
                                                                    ~worker:(
                                                                    Worker.t_of_js
                                                                    x709)
                                                                    ~address:(
                                                                    Address.t_of_js
                                                                    x710)))|])
    let (prepend_listener :
      event:[ `message ] ->
        listener:(worker:Worker.t ->
                    message:any ->
                      handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          -> Cluster.t)
      =
      fun ~event:(x711 : [ `message ]) ->
        fun
          ~listener:(x712 :
                      worker:Worker.t ->
                        message:any ->
                          handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependListener"
               [|((match x711 with | `message -> Ojs.string_to_js "message"));(
                 Ojs.fun_to_js 3
                   (fun (x713 : Ojs.t) ->
                      fun (x714 : Ojs.t) ->
                        fun (x715 : Ojs.t) ->
                          x712 ~worker:(Worker.t_of_js x713)
                            ~message:(any_of_js x714)
                            ~handle:(union2_of_js Net.Server.t_of_js
                                       Net.Socket.t_of_js x715)))|])
    let (prepend_listener :
      event:[ `online ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x718 : [ `online ]) ->
        fun ~listener:(x719 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependListener"
               [|((match x718 with | `online -> Ojs.string_to_js "online"));(
                 Ojs.fun_to_js 1
                   (fun (x720 : Ojs.t) -> x719 ~worker:(Worker.t_of_js x720)))|])
    let (prepend_listener :
      event:[ `setup ] ->
        listener:(settings:ClusterSettings.t -> unit) -> Cluster.t)
      =
      fun ~event:(x721 : [ `setup ]) ->
        fun ~listener:(x722 : settings:ClusterSettings.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependListener"
               [|((match x721 with | `setup -> Ojs.string_to_js "setup"));(
                 Ojs.fun_to_js 1
                   (fun (x723 : Ojs.t) ->
                      x722 ~settings:(ClusterSettings.t_of_js x723)))|])
    let (prepend_once_listener :
      event:string -> listener:(args:any list -> unit) -> Cluster.t) =
      fun ~event:(x724 : string) ->
        fun ~listener:(x725 : args:any list -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependOnceListener"
               [|(Ojs.string_to_js x724);(Ojs.fun_to_js_args
                                            (fun (x726 : _) ->
                                               x725
                                                 ~args:(Ojs.list_of_js_from
                                                          any_of_js x726 0)))|])
    let (prepend_once_listener :
      event:[ `disconnect ] ->
        listener:(worker:Worker.t -> unit) -> Cluster.t)
      =
      fun ~event:(x728 : [ `disconnect ]) ->
        fun ~listener:(x729 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependOnceListener"
               [|((match x728 with
                   | `disconnect -> Ojs.string_to_js "disconnect"));(
                 Ojs.fun_to_js 1
                   (fun (x730 : Ojs.t) -> x729 ~worker:(Worker.t_of_js x730)))|])
    let (prepend_once_listener :
      event:[ `exit ] ->
        listener:(worker:Worker.t -> code:int -> signal:string -> unit) ->
          Cluster.t)
      =
      fun ~event:(x731 : [ `exit ]) ->
        fun
          ~listener:(x732 :
                      worker:Worker.t -> code:int -> signal:string -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependOnceListener"
               [|((match x731 with | `exit -> Ojs.string_to_js "exit"));(
                 Ojs.fun_to_js 3
                   (fun (x733 : Ojs.t) ->
                      fun (x734 : Ojs.t) ->
                        fun (x735 : Ojs.t) ->
                          x732 ~worker:(Worker.t_of_js x733)
                            ~code:(Ojs.int_of_js x734)
                            ~signal:(Ojs.string_of_js x735)))|])
    let (prepend_once_listener :
      event:[ `fork ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x736 : [ `fork ]) ->
        fun ~listener:(x737 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependOnceListener"
               [|((match x736 with | `fork -> Ojs.string_to_js "fork"));(
                 Ojs.fun_to_js 1
                   (fun (x738 : Ojs.t) -> x737 ~worker:(Worker.t_of_js x738)))|])
    let (prepend_once_listener :
      event:[ `listening ] ->
        listener:(worker:Worker.t -> address:Address.t -> unit) -> Cluster.t)
      =
      fun ~event:(x739 : [ `listening ]) ->
        fun ~listener:(x740 : worker:Worker.t -> address:Address.t -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependOnceListener"
               [|((match x739 with
                   | `listening -> Ojs.string_to_js "listening"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x741 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x742 :
                                                                    Ojs.t) ->
                                                                    x740
                                                                    ~worker:(
                                                                    Worker.t_of_js
                                                                    x741)
                                                                    ~address:(
                                                                    Address.t_of_js
                                                                    x742)))|])
    let (prepend_once_listener :
      event:[ `message ] ->
        listener:(worker:Worker.t ->
                    message:any ->
                      handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          -> Cluster.t)
      =
      fun ~event:(x743 : [ `message ]) ->
        fun
          ~listener:(x744 :
                      worker:Worker.t ->
                        message:any ->
                          handle:(Net.Server.t, Net.Socket.t) union2 -> unit)
          ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependOnceListener"
               [|((match x743 with | `message -> Ojs.string_to_js "message"));(
                 Ojs.fun_to_js 3
                   (fun (x745 : Ojs.t) ->
                      fun (x746 : Ojs.t) ->
                        fun (x747 : Ojs.t) ->
                          x744 ~worker:(Worker.t_of_js x745)
                            ~message:(any_of_js x746)
                            ~handle:(union2_of_js Net.Server.t_of_js
                                       Net.Socket.t_of_js x747)))|])
    let (prepend_once_listener :
      event:[ `online ] -> listener:(worker:Worker.t -> unit) -> Cluster.t) =
      fun ~event:(x750 : [ `online ]) ->
        fun ~listener:(x751 : worker:Worker.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependOnceListener"
               [|((match x750 with | `online -> Ojs.string_to_js "online"));(
                 Ojs.fun_to_js 1
                   (fun (x752 : Ojs.t) -> x751 ~worker:(Worker.t_of_js x752)))|])
    let (prepend_once_listener :
      event:[ `setup ] ->
        listener:(settings:ClusterSettings.t -> unit) -> Cluster.t)
      =
      fun ~event:(x753 : [ `setup ]) ->
        fun ~listener:(x754 : settings:ClusterSettings.t -> unit) ->
          Cluster.t_of_js
            (Ojs.call Import.cluster "prependOnceListener"
               [|((match x753 with | `setup -> Ojs.string_to_js "setup"));(
                 Ojs.fun_to_js 1
                   (fun (x755 : Ojs.t) ->
                      x754 ~settings:(ClusterSettings.t_of_js x755)))|])
    let (event_names : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.cluster "eventNames" [||])
  end
