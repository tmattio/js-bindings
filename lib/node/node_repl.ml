[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_options : t -> Node_util.Util.InspectOptions.t) =
      fun (x3 : t) ->
        Node_util.Util.InspectOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x3) "options")
    let (set_options : t -> Node_util.Util.InspectOptions.t -> unit) =
      fun (x4 : t) ->
        fun (x5 : Node_util.Util.InspectOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x4) "options"
            (Node_util.Util.InspectOptions.t_to_js x5)
  end
module Repl =
  struct
    module REPLCommandAction =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x7 : Ojs.t) -> x7
        and t_to_js : t -> Ojs.t = fun (x6 : Ojs.t) -> x6
      end
    module REPLCommand =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x9 : Ojs.t) -> x9
        and t_to_js : t -> Ojs.t = fun (x8 : Ojs.t) -> x8
        let (get_help : t -> string) =
          fun (x10 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x10) "help")
        let (set_help : t -> string -> unit) =
          fun (x11 : t) ->
            fun (x12 : string) ->
              Ojs.set_prop_ascii (t_to_js x11) "help" (Ojs.string_to_js x12)
        let (get_action : t -> REPLCommandAction.t) =
          fun (x13 : t) ->
            REPLCommandAction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x13) "action")
        let (set_action : t -> REPLCommandAction.t -> unit) =
          fun (x14 : t) ->
            fun (x15 : REPLCommandAction.t) ->
              Ojs.set_prop_ascii (t_to_js x14) "action"
                (REPLCommandAction.t_to_js x15)
      end
    module REPLEval =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x17 : Ojs.t) -> x17
        and t_to_js : t -> Ojs.t = fun (x16 : Ojs.t) -> x16
      end
    module REPLWriter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x19 : Ojs.t) -> x19
        and t_to_js : t -> Ojs.t = fun (x18 : Ojs.t) -> x18
      end
    module REPLServer =
      struct
        include struct include Node_readline.Readline.Interface end
        let (get_context : t -> Node_vm.Vm.Context.t) =
          fun (x20 : t) ->
            Node_vm.Vm.Context.t_of_js
              (Ojs.get_prop_ascii (t_to_js x20) "context")
        let (get_input_stream : t -> ReadableStream.t) =
          fun (x21 : t) ->
            ReadableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x21) "inputStream")
        let (get_output_stream : t -> WritableStream.t) =
          fun (x22 : t) ->
            WritableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x22) "outputStream")
        let (get_input : t -> ReadableStream.t) =
          fun (x23 : t) ->
            ReadableStream.t_of_js (Ojs.get_prop_ascii (t_to_js x23) "input")
        let (get_output : t -> WritableStream.t) =
          fun (x24 : t) ->
            WritableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x24) "output")
        let (get_commands : t -> REPLCommand.t ReadOnlyDict.t) =
          fun (x25 : t) ->
            ReadOnlyDict.t_of_js REPLCommand.t_of_js
              (Ojs.get_prop_ascii (t_to_js x25) "commands")
        let (get_editor_mode : t -> bool) =
          fun (x27 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x27) "editorMode")
        let (get_underscore_assigned : t -> bool) =
          fun (x28 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x28) "underscoreAssigned")
        let (get_last : t -> any) =
          fun (x29 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x29) "last")
        let (get_underscore_err_assigned : t -> bool) =
          fun (x30 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x30) "underscoreErrAssigned")
        let (get_last_error : t -> any) =
          fun (x31 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x31) "lastError")
        let (get_eval : t -> REPLEval.t) =
          fun (x32 : t) ->
            REPLEval.t_of_js (Ojs.get_prop_ascii (t_to_js x32) "eval")
        let (get_use_colors : t -> bool) =
          fun (x33 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x33) "useColors")
        let (get_use_global : t -> bool) =
          fun (x34 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x34) "useGlobal")
        let (get_ignore_undefined : t -> bool) =
          fun (x35 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x35) "ignoreUndefined")
        let (get_writer : t -> REPLWriter.t) =
          fun (x36 : t) ->
            REPLWriter.t_of_js (Ojs.get_prop_ascii (t_to_js x36) "writer")
        let (get_completer :
          t ->
            (Node_readline.Readline.AsyncCompleter.t,
              Node_readline.Readline.Completer.t) union2)
          =
          fun (x37 : t) ->
            union2_of_js Node_readline.Readline.AsyncCompleter.t_of_js
              Node_readline.Readline.Completer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x37) "completer")
        let (get_repl_mode : t -> any) =
          fun (x40 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x40) "replMode")
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.repl "REPLServer") [||])
        let (define_command :
          t ->
            keyword:string ->
              cmd:(REPLCommand.t, REPLCommandAction.t) union2 -> unit)
          =
          fun (x45 : t) ->
            fun ~keyword:(x41 : string) ->
              fun ~cmd:(x42 : (REPLCommand.t, REPLCommandAction.t) union2) ->
                ignore
                  (Ojs.call (t_to_js x45) "defineCommand"
                     [|(Ojs.string_to_js x41);(union2_to_js
                                                 REPLCommand.t_to_js
                                                 REPLCommandAction.t_to_js
                                                 x42)|])
        let (display_prompt : t -> ?preserve_cursor:bool -> unit -> unit) =
          fun (x49 : t) ->
            fun ?preserve_cursor:(x46 : bool option) ->
              fun () ->
                ignore
                  (let x50 = t_to_js x49 in
                   Ojs.call (Ojs.get_prop_ascii x50 "displayPrompt") "apply"
                     [|x50;((let x47 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x46 with
                              | Some x48 ->
                                  ignore
                                    (Ojs.call x47 "push"
                                       [|(Ojs.bool_to_js x48)|])
                              | None -> ());
                             x47))|])
        let (clear_buffered_command : t -> unit) =
          fun (x51 : t) ->
            ignore (Ojs.call (t_to_js x51) "clearBufferedCommand" [||])
        let (setup_history :
          t ->
            path:string -> cb:(err:Error.t or_null -> repl:t -> unit) -> unit)
          =
          fun (x57 : t) ->
            fun ~path:(x52 : string) ->
              fun ~cb:(x53 : err:Error.t or_null -> repl:t -> unit) ->
                ignore
                  (Ojs.call (t_to_js x57) "setupHistory"
                     [|(Ojs.string_to_js x52);(Ojs.fun_to_js 2
                                                 (fun (x54 : Ojs.t) ->
                                                    fun (x56 : Ojs.t) ->
                                                      x53
                                                        ~err:(or_null_of_js
                                                                Error.t_of_js
                                                                x54)
                                                        ~repl:(t_of_js x56)))|])
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x62 : t) ->
            fun ~event:(x58 : string) ->
              fun ~listener:(x59 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x62) "addListener"
                     [|(Ojs.string_to_js x58);(Ojs.fun_to_js_args
                                                 (fun (x60 : _) ->
                                                    x59
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js x60
                                                               0)))|])
        let (add_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x65 : t) ->
            fun ~event:(x63 : [ `close ]) ->
              fun ~listener:(x64 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x65) "addListener"
                     [|((match x63 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x64 ()))|])
        let (add_listener'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x69 : t) ->
            fun ~event:(x66 : [ `line ]) ->
              fun ~listener:(x67 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x69) "addListener"
                     [|((match x66 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x68 : Ojs.t) ->
                            x67 ~input:(Ojs.string_of_js x68)))|])
        let (add_listener''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x72 : t) ->
            fun ~event:(x70 : [ `pause ]) ->
              fun ~listener:(x71 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x72) "addListener"
                     [|((match x70 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x71 ()))|])
        let (add_listener'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x75 : t) ->
            fun ~event:(x73 : [ `resume ]) ->
              fun ~listener:(x74 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x75) "addListener"
                     [|((match x73 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x74 ()))|])
        let (add_listener''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x78 : t) ->
            fun ~event:(x76 : [ `SIGCONT ]) ->
              fun ~listener:(x77 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x78) "addListener"
                     [|((match x76 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x77 ()))|])
        let (add_listener'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x81 : t) ->
            fun ~event:(x79 : [ `SIGINT ]) ->
              fun ~listener:(x80 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x81) "addListener"
                     [|((match x79 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x80 ()))|])
        let (add_listener''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x84 : t) ->
            fun ~event:(x82 : [ `SIGTSTP ]) ->
              fun ~listener:(x83 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x84) "addListener"
                     [|((match x82 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x83 ()))|])
        let (add_listener'''''''' :
          t -> event:[ `exit ] -> listener:(unit -> unit) -> t) =
          fun (x87 : t) ->
            fun ~event:(x85 : [ `exit ]) ->
              fun ~listener:(x86 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x87) "addListener"
                     [|((match x85 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1 (fun _ -> x86 ()))|])
        let (add_listener''''''''' :
          t ->
            event:[ `reset ] ->
              listener:(context:Node_vm.Vm.Context.t -> unit) -> t)
          =
          fun (x91 : t) ->
            fun ~event:(x88 : [ `reset ]) ->
              fun ~listener:(x89 : context:Node_vm.Vm.Context.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x91) "addListener"
                     [|((match x88 with | `reset -> Ojs.string_to_js "reset"));(
                       Ojs.fun_to_js 1
                         (fun (x90 : Ojs.t) ->
                            x89 ~context:(Node_vm.Vm.Context.t_of_js x90)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x97 : t) ->
            fun ~event:(x92 : symbol or_string) ->
              fun ~args:(x93 : any list) ->
                Ojs.bool_of_js
                  (let x98 = t_to_js x97 in
                   Ojs.call (Ojs.get_prop_ascii x98 "emit") "apply"
                     [|x98;((let x94 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x94 "push"
                                  [|(or_string_to_js symbol_to_js x92)|]);
                             List.iter
                               (fun (x95 : any) ->
                                  ignore
                                    (Ojs.call x94 "push" [|(any_to_js x95)|]))
                               x93;
                             x94))|])
        let (emit' : t -> event:[ `close ] -> bool) =
          fun (x100 : t) ->
            fun ~event:(x99 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x100) "emit"
                   [|((match x99 with | `close -> Ojs.string_to_js "close"))|])
        let (emit'' : t -> event:[ `line ] -> input:string -> bool) =
          fun (x103 : t) ->
            fun ~event:(x101 : [ `line ]) ->
              fun ~input:(x102 : string) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x103) "emit"
                     [|((match x101 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.string_to_js x102)|])
        let (emit''' : t -> event:[ `pause ] -> bool) =
          fun (x105 : t) ->
            fun ~event:(x104 : [ `pause ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x105) "emit"
                   [|((match x104 with | `pause -> Ojs.string_to_js "pause"))|])
        let (emit'''' : t -> event:[ `resume ] -> bool) =
          fun (x107 : t) ->
            fun ~event:(x106 : [ `resume ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x107) "emit"
                   [|((match x106 with | `resume -> Ojs.string_to_js "resume"))|])
        let (emit''''' : t -> event:[ `SIGCONT ] -> bool) =
          fun (x109 : t) ->
            fun ~event:(x108 : [ `SIGCONT ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x109) "emit"
                   [|((match x108 with
                       | `SIGCONT -> Ojs.string_to_js "SIGCONT"))|])
        let (emit'''''' : t -> event:[ `SIGINT ] -> bool) =
          fun (x111 : t) ->
            fun ~event:(x110 : [ `SIGINT ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x111) "emit"
                   [|((match x110 with | `SIGINT -> Ojs.string_to_js "SIGINT"))|])
        let (emit''''''' : t -> event:[ `SIGTSTP ] -> bool) =
          fun (x113 : t) ->
            fun ~event:(x112 : [ `SIGTSTP ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x113) "emit"
                   [|((match x112 with
                       | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"))|])
        let (emit'''''''' : t -> event:[ `exit ] -> bool) =
          fun (x115 : t) ->
            fun ~event:(x114 : [ `exit ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x115) "emit"
                   [|((match x114 with | `exit -> Ojs.string_to_js "exit"))|])
        let (emit''''''''' :
          t -> event:[ `reset ] -> context:Node_vm.Vm.Context.t -> bool) =
          fun (x118 : t) ->
            fun ~event:(x116 : [ `reset ]) ->
              fun ~context:(x117 : Node_vm.Vm.Context.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x118) "emit"
                     [|((match x116 with | `reset -> Ojs.string_to_js "reset"));(
                       Node_vm.Vm.Context.t_to_js x117)|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x123 : t) ->
            fun ~event:(x119 : string) ->
              fun ~listener:(x120 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x123) "on"
                     [|(Ojs.string_to_js x119);(Ojs.fun_to_js_args
                                                  (fun (x121 : _) ->
                                                     x120
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x121 0)))|])
        let (on' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x126 : t) ->
            fun ~event:(x124 : [ `close ]) ->
              fun ~listener:(x125 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x126) "on"
                     [|((match x124 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x125 ()))|])
        let (on'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x130 : t) ->
            fun ~event:(x127 : [ `line ]) ->
              fun ~listener:(x128 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x130) "on"
                     [|((match x127 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x129 : Ojs.t) ->
                            x128 ~input:(Ojs.string_of_js x129)))|])
        let (on''' : t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x133 : t) ->
            fun ~event:(x131 : [ `pause ]) ->
              fun ~listener:(x132 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x133) "on"
                     [|((match x131 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x132 ()))|])
        let (on'''' : t -> event:[ `resume ] -> listener:(unit -> unit) -> t)
          =
          fun (x136 : t) ->
            fun ~event:(x134 : [ `resume ]) ->
              fun ~listener:(x135 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x136) "on"
                     [|((match x134 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x135 ()))|])
        let (on''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x139 : t) ->
            fun ~event:(x137 : [ `SIGCONT ]) ->
              fun ~listener:(x138 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x139) "on"
                     [|((match x137 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x138 ()))|])
        let (on'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x142 : t) ->
            fun ~event:(x140 : [ `SIGINT ]) ->
              fun ~listener:(x141 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x142) "on"
                     [|((match x140 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x141 ()))|])
        let (on''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x145 : t) ->
            fun ~event:(x143 : [ `SIGTSTP ]) ->
              fun ~listener:(x144 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x145) "on"
                     [|((match x143 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x144 ()))|])
        let (on'''''''' :
          t -> event:[ `exit ] -> listener:(unit -> unit) -> t) =
          fun (x148 : t) ->
            fun ~event:(x146 : [ `exit ]) ->
              fun ~listener:(x147 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x148) "on"
                     [|((match x146 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1 (fun _ -> x147 ()))|])
        let (on''''''''' :
          t ->
            event:[ `reset ] ->
              listener:(context:Node_vm.Vm.Context.t -> unit) -> t)
          =
          fun (x152 : t) ->
            fun ~event:(x149 : [ `reset ]) ->
              fun ~listener:(x150 : context:Node_vm.Vm.Context.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x152) "on"
                     [|((match x149 with | `reset -> Ojs.string_to_js "reset"));(
                       Ojs.fun_to_js 1
                         (fun (x151 : Ojs.t) ->
                            x150 ~context:(Node_vm.Vm.Context.t_of_js x151)))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x157 : t) ->
            fun ~event:(x153 : string) ->
              fun ~listener:(x154 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x157) "once"
                     [|(Ojs.string_to_js x153);(Ojs.fun_to_js_args
                                                  (fun (x155 : _) ->
                                                     x154
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x155 0)))|])
        let (once' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x160 : t) ->
            fun ~event:(x158 : [ `close ]) ->
              fun ~listener:(x159 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x160) "once"
                     [|((match x158 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x159 ()))|])
        let (once'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x164 : t) ->
            fun ~event:(x161 : [ `line ]) ->
              fun ~listener:(x162 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x164) "once"
                     [|((match x161 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x163 : Ojs.t) ->
                            x162 ~input:(Ojs.string_of_js x163)))|])
        let (once''' : t -> event:[ `pause ] -> listener:(unit -> unit) -> t)
          =
          fun (x167 : t) ->
            fun ~event:(x165 : [ `pause ]) ->
              fun ~listener:(x166 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x167) "once"
                     [|((match x165 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x166 ()))|])
        let (once'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x170 : t) ->
            fun ~event:(x168 : [ `resume ]) ->
              fun ~listener:(x169 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x170) "once"
                     [|((match x168 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x169 ()))|])
        let (once''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x173 : t) ->
            fun ~event:(x171 : [ `SIGCONT ]) ->
              fun ~listener:(x172 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x173) "once"
                     [|((match x171 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x172 ()))|])
        let (once'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x176 : t) ->
            fun ~event:(x174 : [ `SIGINT ]) ->
              fun ~listener:(x175 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x176) "once"
                     [|((match x174 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x175 ()))|])
        let (once''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x179 : t) ->
            fun ~event:(x177 : [ `SIGTSTP ]) ->
              fun ~listener:(x178 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x179) "once"
                     [|((match x177 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x178 ()))|])
        let (once'''''''' :
          t -> event:[ `exit ] -> listener:(unit -> unit) -> t) =
          fun (x182 : t) ->
            fun ~event:(x180 : [ `exit ]) ->
              fun ~listener:(x181 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x182) "once"
                     [|((match x180 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1 (fun _ -> x181 ()))|])
        let (once''''''''' :
          t ->
            event:[ `reset ] ->
              listener:(context:Node_vm.Vm.Context.t -> unit) -> t)
          =
          fun (x186 : t) ->
            fun ~event:(x183 : [ `reset ]) ->
              fun ~listener:(x184 : context:Node_vm.Vm.Context.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x186) "once"
                     [|((match x183 with | `reset -> Ojs.string_to_js "reset"));(
                       Ojs.fun_to_js 1
                         (fun (x185 : Ojs.t) ->
                            x184 ~context:(Node_vm.Vm.Context.t_of_js x185)))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x191 : t) ->
            fun ~event:(x187 : string) ->
              fun ~listener:(x188 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x191) "prependListener"
                     [|(Ojs.string_to_js x187);(Ojs.fun_to_js_args
                                                  (fun (x189 : _) ->
                                                     x188
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x189 0)))|])
        let (prepend_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x194 : t) ->
            fun ~event:(x192 : [ `close ]) ->
              fun ~listener:(x193 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x194) "prependListener"
                     [|((match x192 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x193 ()))|])
        let (prepend_listener'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x198 : t) ->
            fun ~event:(x195 : [ `line ]) ->
              fun ~listener:(x196 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x198) "prependListener"
                     [|((match x195 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x197 : Ojs.t) ->
                            x196 ~input:(Ojs.string_of_js x197)))|])
        let (prepend_listener''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x201 : t) ->
            fun ~event:(x199 : [ `pause ]) ->
              fun ~listener:(x200 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x201) "prependListener"
                     [|((match x199 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x200 ()))|])
        let (prepend_listener'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x204 : t) ->
            fun ~event:(x202 : [ `resume ]) ->
              fun ~listener:(x203 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x204) "prependListener"
                     [|((match x202 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x203 ()))|])
        let (prepend_listener''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x207 : t) ->
            fun ~event:(x205 : [ `SIGCONT ]) ->
              fun ~listener:(x206 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x207) "prependListener"
                     [|((match x205 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x206 ()))|])
        let (prepend_listener'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x210 : t) ->
            fun ~event:(x208 : [ `SIGINT ]) ->
              fun ~listener:(x209 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x210) "prependListener"
                     [|((match x208 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x209 ()))|])
        let (prepend_listener''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x213 : t) ->
            fun ~event:(x211 : [ `SIGTSTP ]) ->
              fun ~listener:(x212 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x213) "prependListener"
                     [|((match x211 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x212 ()))|])
        let (prepend_listener'''''''' :
          t -> event:[ `exit ] -> listener:(unit -> unit) -> t) =
          fun (x216 : t) ->
            fun ~event:(x214 : [ `exit ]) ->
              fun ~listener:(x215 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x216) "prependListener"
                     [|((match x214 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1 (fun _ -> x215 ()))|])
        let (prepend_listener''''''''' :
          t ->
            event:[ `reset ] ->
              listener:(context:Node_vm.Vm.Context.t -> unit) -> t)
          =
          fun (x220 : t) ->
            fun ~event:(x217 : [ `reset ]) ->
              fun ~listener:(x218 : context:Node_vm.Vm.Context.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x220) "prependListener"
                     [|((match x217 with | `reset -> Ojs.string_to_js "reset"));(
                       Ojs.fun_to_js 1
                         (fun (x219 : Ojs.t) ->
                            x218 ~context:(Node_vm.Vm.Context.t_of_js x219)))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x225 : t) ->
            fun ~event:(x221 : string) ->
              fun ~listener:(x222 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x225) "prependOnceListener"
                     [|(Ojs.string_to_js x221);(Ojs.fun_to_js_args
                                                  (fun (x223 : _) ->
                                                     x222
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x223 0)))|])
        let (prepend_once_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x228 : t) ->
            fun ~event:(x226 : [ `close ]) ->
              fun ~listener:(x227 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x228) "prependOnceListener"
                     [|((match x226 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x227 ()))|])
        let (prepend_once_listener'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x232 : t) ->
            fun ~event:(x229 : [ `line ]) ->
              fun ~listener:(x230 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x232) "prependOnceListener"
                     [|((match x229 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x231 : Ojs.t) ->
                            x230 ~input:(Ojs.string_of_js x231)))|])
        let (prepend_once_listener''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x235 : t) ->
            fun ~event:(x233 : [ `pause ]) ->
              fun ~listener:(x234 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x235) "prependOnceListener"
                     [|((match x233 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x234 ()))|])
        let (prepend_once_listener'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x238 : t) ->
            fun ~event:(x236 : [ `resume ]) ->
              fun ~listener:(x237 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x238) "prependOnceListener"
                     [|((match x236 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x237 ()))|])
        let (prepend_once_listener''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x241 : t) ->
            fun ~event:(x239 : [ `SIGCONT ]) ->
              fun ~listener:(x240 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x241) "prependOnceListener"
                     [|((match x239 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x240 ()))|])
        let (prepend_once_listener'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x244 : t) ->
            fun ~event:(x242 : [ `SIGINT ]) ->
              fun ~listener:(x243 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x244) "prependOnceListener"
                     [|((match x242 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x243 ()))|])
        let (prepend_once_listener''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x247 : t) ->
            fun ~event:(x245 : [ `SIGTSTP ]) ->
              fun ~listener:(x246 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x247) "prependOnceListener"
                     [|((match x245 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x246 ()))|])
        let (prepend_once_listener'''''''' :
          t -> event:[ `exit ] -> listener:(unit -> unit) -> t) =
          fun (x250 : t) ->
            fun ~event:(x248 : [ `exit ]) ->
              fun ~listener:(x249 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x250) "prependOnceListener"
                     [|((match x248 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1 (fun _ -> x249 ()))|])
        let (prepend_once_listener''''''''' :
          t ->
            event:[ `reset ] ->
              listener:(context:Node_vm.Vm.Context.t -> unit) -> t)
          =
          fun (x254 : t) ->
            fun ~event:(x251 : [ `reset ]) ->
              fun ~listener:(x252 : context:Node_vm.Vm.Context.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x254) "prependOnceListener"
                     [|((match x251 with | `reset -> Ojs.string_to_js "reset"));(
                       Ojs.fun_to_js 1
                         (fun (x253 : Ojs.t) ->
                            x252 ~context:(Node_vm.Vm.Context.t_of_js x253)))|])
      end
    let (writer : (REPLWriter.t, AnonymousInterface0.t) intersection2) =
      intersection2_of_js REPLWriter.t_of_js AnonymousInterface0.t_of_js
        (Ojs.get_prop_ascii Import.repl "writer")
    module ReplOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x258 : Ojs.t) -> x258
        and t_to_js : t -> Ojs.t = fun (x257 : Ojs.t) -> x257
        let (get_prompt : t -> string) =
          fun (x259 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x259) "prompt")
        let (set_prompt : t -> string -> unit) =
          fun (x260 : t) ->
            fun (x261 : string) ->
              Ojs.set_prop_ascii (t_to_js x260) "prompt"
                (Ojs.string_to_js x261)
        let (get_input : t -> ReadableStream.t) =
          fun (x262 : t) ->
            ReadableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x262) "input")
        let (set_input : t -> ReadableStream.t -> unit) =
          fun (x263 : t) ->
            fun (x264 : ReadableStream.t) ->
              Ojs.set_prop_ascii (t_to_js x263) "input"
                (ReadableStream.t_to_js x264)
        let (get_output : t -> WritableStream.t) =
          fun (x265 : t) ->
            WritableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x265) "output")
        let (set_output : t -> WritableStream.t -> unit) =
          fun (x266 : t) ->
            fun (x267 : WritableStream.t) ->
              Ojs.set_prop_ascii (t_to_js x266) "output"
                (WritableStream.t_to_js x267)
        let (get_terminal : t -> bool) =
          fun (x268 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x268) "terminal")
        let (set_terminal : t -> bool -> unit) =
          fun (x269 : t) ->
            fun (x270 : bool) ->
              Ojs.set_prop_ascii (t_to_js x269) "terminal"
                (Ojs.bool_to_js x270)
        let (get_eval : t -> REPLEval.t) =
          fun (x271 : t) ->
            REPLEval.t_of_js (Ojs.get_prop_ascii (t_to_js x271) "eval")
        let (set_eval : t -> REPLEval.t -> unit) =
          fun (x272 : t) ->
            fun (x273 : REPLEval.t) ->
              Ojs.set_prop_ascii (t_to_js x272) "eval"
                (REPLEval.t_to_js x273)
        let (get_preview : t -> bool) =
          fun (x274 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x274) "preview")
        let (set_preview : t -> bool -> unit) =
          fun (x275 : t) ->
            fun (x276 : bool) ->
              Ojs.set_prop_ascii (t_to_js x275) "preview"
                (Ojs.bool_to_js x276)
        let (get_use_colors : t -> bool) =
          fun (x277 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x277) "useColors")
        let (set_use_colors : t -> bool -> unit) =
          fun (x278 : t) ->
            fun (x279 : bool) ->
              Ojs.set_prop_ascii (t_to_js x278) "useColors"
                (Ojs.bool_to_js x279)
        let (get_use_global : t -> bool) =
          fun (x280 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x280) "useGlobal")
        let (set_use_global : t -> bool -> unit) =
          fun (x281 : t) ->
            fun (x282 : bool) ->
              Ojs.set_prop_ascii (t_to_js x281) "useGlobal"
                (Ojs.bool_to_js x282)
        let (get_ignore_undefined : t -> bool) =
          fun (x283 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x283) "ignoreUndefined")
        let (set_ignore_undefined : t -> bool -> unit) =
          fun (x284 : t) ->
            fun (x285 : bool) ->
              Ojs.set_prop_ascii (t_to_js x284) "ignoreUndefined"
                (Ojs.bool_to_js x285)
        let (get_writer : t -> REPLWriter.t) =
          fun (x286 : t) ->
            REPLWriter.t_of_js (Ojs.get_prop_ascii (t_to_js x286) "writer")
        let (set_writer : t -> REPLWriter.t -> unit) =
          fun (x287 : t) ->
            fun (x288 : REPLWriter.t) ->
              Ojs.set_prop_ascii (t_to_js x287) "writer"
                (REPLWriter.t_to_js x288)
        let (get_completer :
          t ->
            (Node_readline.Readline.AsyncCompleter.t,
              Node_readline.Readline.Completer.t) union2)
          =
          fun (x289 : t) ->
            union2_of_js Node_readline.Readline.AsyncCompleter.t_of_js
              Node_readline.Readline.Completer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x289) "completer")
        let (set_completer :
          t ->
            (Node_readline.Readline.AsyncCompleter.t,
              Node_readline.Readline.Completer.t) union2 -> unit)
          =
          fun (x292 : t) ->
            fun
              (x293 :
                (Node_readline.Readline.AsyncCompleter.t,
                  Node_readline.Readline.Completer.t) union2)
              ->
              Ojs.set_prop_ascii (t_to_js x292) "completer"
                (union2_to_js Node_readline.Readline.AsyncCompleter.t_to_js
                   Node_readline.Readline.Completer.t_to_js x293)
        let (get_repl_mode : t -> any) =
          fun (x296 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x296) "replMode")
        let (set_repl_mode : t -> any -> unit) =
          fun (x297 : t) ->
            fun (x298 : any) ->
              Ojs.set_prop_ascii (t_to_js x297) "replMode" (any_to_js x298)
        let (get_break_eval_on_sigint : t -> bool) =
          fun (x299 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x299) "breakEvalOnSigint")
        let (set_break_eval_on_sigint : t -> bool -> unit) =
          fun (x300 : t) ->
            fun (x301 : bool) ->
              Ojs.set_prop_ascii (t_to_js x300) "breakEvalOnSigint"
                (Ojs.bool_to_js x301)
      end
    let (r_epl_mode_sloppy : any) =
      any_of_js (Ojs.get_prop_ascii Import.repl "REPL_MODE_SLOPPY")
    let (r_epl_mode_strict : any) =
      any_of_js (Ojs.get_prop_ascii Import.repl "REPL_MODE_STRICT")
    let (start : ?options:ReplOptions.t or_string -> unit -> REPLServer.t) =
      fun ?options:(x302 : ReplOptions.t or_string option) ->
        fun () ->
          REPLServer.t_of_js
            (let x306 = Import.repl in
             Ojs.call (Ojs.get_prop_ascii x306 "start") "apply"
               [|x306;((let x303 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x302 with
                         | Some x304 ->
                             ignore
                               (Ojs.call x303 "push"
                                  [|(or_string_to_js ReplOptions.t_to_js x304)|])
                         | None -> ());
                        x303))|])
    module Recoverable =
      struct
        include struct include SyntaxError end
        let (get_err : t -> Error.t) =
          fun (x307 : t) ->
            Error.t_of_js (Ojs.get_prop_ascii (t_to_js x307) "err")
        let (set_err : t -> Error.t -> unit) =
          fun (x308 : t) ->
            fun (x309 : Error.t) ->
              Ojs.set_prop_ascii (t_to_js x308) "err" (Error.t_to_js x309)
        let (create : err:Error.t -> t) =
          fun ~err:(x310 : Error.t) ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.repl "Recoverable")
                 [|(Error.t_to_js x310)|])
      end
  end
