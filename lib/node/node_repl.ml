[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_options : t -> Node_util.Util.InspectOptions.t) =
      fun (x3 : t) ->
        Node_util.Util.InspectOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x3) "options")
    let (set_options : t -> Node_util.Util.InspectOptions.t -> unit) =
      fun (x4 : t) ->
        fun (x5 : Node_util.Util.InspectOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x4) "options"
            (Node_util.Util.InspectOptions.t_to_js x5)
  end
module Repl =
  struct
    module ReplOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x7 : Ojs.t) -> x7
        and t_to_js : t -> Ojs.t = fun (x6 : Ojs.t) -> x6
        let (get_prompt : t -> string) =
          fun (x8 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x8) "prompt")
        let (set_prompt : t -> string -> unit) =
          fun (x9 : t) ->
            fun (x10 : string) ->
              Ojs.set_prop_ascii (t_to_js x9) "prompt" (Ojs.string_to_js x10)
        let (get_input : t -> ReadableStream.t) =
          fun (x11 : t) ->
            ReadableStream.t_of_js (Ojs.get_prop_ascii (t_to_js x11) "input")
        let (set_input : t -> ReadableStream.t -> unit) =
          fun (x12 : t) ->
            fun (x13 : ReadableStream.t) ->
              Ojs.set_prop_ascii (t_to_js x12) "input"
                (ReadableStream.t_to_js x13)
        let (get_output : t -> WritableStream.t) =
          fun (x14 : t) ->
            WritableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x14) "output")
        let (set_output : t -> WritableStream.t -> unit) =
          fun (x15 : t) ->
            fun (x16 : WritableStream.t) ->
              Ojs.set_prop_ascii (t_to_js x15) "output"
                (WritableStream.t_to_js x16)
        let (get_terminal : t -> bool) =
          fun (x17 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x17) "terminal")
        let (set_terminal : t -> bool -> unit) =
          fun (x18 : t) ->
            fun (x19 : bool) ->
              Ojs.set_prop_ascii (t_to_js x18) "terminal"
                (Ojs.bool_to_js x19)
        let (get_eval : t -> REPLEval.t) =
          fun (x20 : t) ->
            REPLEval.t_of_js (Ojs.get_prop_ascii (t_to_js x20) "eval")
        let (set_eval : t -> REPLEval.t -> unit) =
          fun (x21 : t) ->
            fun (x22 : REPLEval.t) ->
              Ojs.set_prop_ascii (t_to_js x21) "eval" (REPLEval.t_to_js x22)
        let (get_preview : t -> bool) =
          fun (x23 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x23) "preview")
        let (set_preview : t -> bool -> unit) =
          fun (x24 : t) ->
            fun (x25 : bool) ->
              Ojs.set_prop_ascii (t_to_js x24) "preview" (Ojs.bool_to_js x25)
        let (get_use_colors : t -> bool) =
          fun (x26 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x26) "useColors")
        let (set_use_colors : t -> bool -> unit) =
          fun (x27 : t) ->
            fun (x28 : bool) ->
              Ojs.set_prop_ascii (t_to_js x27) "useColors"
                (Ojs.bool_to_js x28)
        let (get_use_global : t -> bool) =
          fun (x29 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x29) "useGlobal")
        let (set_use_global : t -> bool -> unit) =
          fun (x30 : t) ->
            fun (x31 : bool) ->
              Ojs.set_prop_ascii (t_to_js x30) "useGlobal"
                (Ojs.bool_to_js x31)
        let (get_ignore_undefined : t -> bool) =
          fun (x32 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x32) "ignoreUndefined")
        let (set_ignore_undefined : t -> bool -> unit) =
          fun (x33 : t) ->
            fun (x34 : bool) ->
              Ojs.set_prop_ascii (t_to_js x33) "ignoreUndefined"
                (Ojs.bool_to_js x34)
        let (get_writer : t -> REPLWriter.t) =
          fun (x35 : t) ->
            REPLWriter.t_of_js (Ojs.get_prop_ascii (t_to_js x35) "writer")
        let (set_writer : t -> REPLWriter.t -> unit) =
          fun (x36 : t) ->
            fun (x37 : REPLWriter.t) ->
              Ojs.set_prop_ascii (t_to_js x36) "writer"
                (REPLWriter.t_to_js x37)
        let (get_completer :
          t ->
            (Node_readline.Readline.AsyncCompleter.t,
              Node_readline.Readline.Completer.t) union2)
          =
          fun (x38 : t) ->
            union2_of_js Node_readline.Readline.AsyncCompleter.t_of_js
              Node_readline.Readline.Completer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x38) "completer")
        let (set_completer :
          t ->
            (Node_readline.Readline.AsyncCompleter.t,
              Node_readline.Readline.Completer.t) union2 -> unit)
          =
          fun (x41 : t) ->
            fun
              (x42 :
                (Node_readline.Readline.AsyncCompleter.t,
                  Node_readline.Readline.Completer.t) union2)
              ->
              Ojs.set_prop_ascii (t_to_js x41) "completer"
                (union2_to_js Node_readline.Readline.AsyncCompleter.t_to_js
                   Node_readline.Readline.Completer.t_to_js x42)
        let (get_repl_mode : t -> any) =
          fun (x45 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x45) "replMode")
        let (set_repl_mode : t -> any -> unit) =
          fun (x46 : t) ->
            fun (x47 : any) ->
              Ojs.set_prop_ascii (t_to_js x46) "replMode" (any_to_js x47)
        let (get_break_eval_on_sigint : t -> bool) =
          fun (x48 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x48) "breakEvalOnSigint")
        let (set_break_eval_on_sigint : t -> bool -> unit) =
          fun (x49 : t) ->
            fun (x50 : bool) ->
              Ojs.set_prop_ascii (t_to_js x49) "breakEvalOnSigint"
                (Ojs.bool_to_js x50)
      end
    module REPLEval =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x52 : Ojs.t) -> x52
        and t_to_js : t -> Ojs.t = fun (x51 : Ojs.t) -> x51
        let (apply :
          t ->
            this:REPLServer.t ->
              eval_cmd:string ->
                context:Node_vm.Vm.Context.t ->
                  file:string ->
                    cb:(err:Error.t or_null -> result:any -> unit) -> unit)
          =
          fun (x61 : t) ->
            fun ~this:(x53 : REPLServer.t) ->
              fun ~eval_cmd:(x54 : string) ->
                fun ~context:(x55 : Node_vm.Vm.Context.t) ->
                  fun ~file:(x56 : string) ->
                    fun ~cb:(x57 : err:Error.t or_null -> result:any -> unit)
                      ->
                      ignore
                        (Ojs.apply (t_to_js x61)
                           [|(REPLServer.t_to_js x53);(Ojs.string_to_js x54);(
                             Node_vm.Vm.Context.t_to_js x55);(Ojs.string_to_js
                                                                x56);(
                             Ojs.fun_to_js 2
                               (fun (x58 : Ojs.t) ->
                                  fun (x60 : Ojs.t) ->
                                    x57
                                      ~err:(or_null_of_js Error.t_of_js x58)
                                      ~result:(any_of_js x60)))|])
      end
    module REPLWriter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x63 : Ojs.t) -> x63
        and t_to_js : t -> Ojs.t = fun (x62 : Ojs.t) -> x62
        let (apply : t -> this:REPLServer.t -> obj:any -> string) =
          fun (x66 : t) ->
            fun ~this:(x64 : REPLServer.t) ->
              fun ~obj:(x65 : any) ->
                Ojs.string_of_js
                  (Ojs.apply (t_to_js x66)
                     [|(REPLServer.t_to_js x64);(any_to_js x65)|])
      end
    let (writer : (REPLWriter.t, AnonymousInterface0.t) intersection2) =
      intersection2_of_js REPLWriter.t_of_js AnonymousInterface0.t_of_js
        (Ojs.get_prop_ascii Import.repl "writer")
    module REPLCommandAction =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x70 : Ojs.t) -> x70
        and t_to_js : t -> Ojs.t = fun (x69 : Ojs.t) -> x69
        let (apply : t -> this:REPLServer.t -> text:string -> unit) =
          fun (x73 : t) ->
            fun ~this:(x71 : REPLServer.t) ->
              fun ~text:(x72 : string) ->
                ignore
                  (Ojs.apply (t_to_js x73)
                     [|(REPLServer.t_to_js x71);(Ojs.string_to_js x72)|])
      end
    module REPLCommand =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x75 : Ojs.t) -> x75
        and t_to_js : t -> Ojs.t = fun (x74 : Ojs.t) -> x74
        let (get_help : t -> string) =
          fun (x76 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x76) "help")
        let (set_help : t -> string -> unit) =
          fun (x77 : t) ->
            fun (x78 : string) ->
              Ojs.set_prop_ascii (t_to_js x77) "help" (Ojs.string_to_js x78)
        let (get_action : t -> REPLCommandAction.t) =
          fun (x79 : t) ->
            REPLCommandAction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x79) "action")
        let (set_action : t -> REPLCommandAction.t -> unit) =
          fun (x80 : t) ->
            fun (x81 : REPLCommandAction.t) ->
              Ojs.set_prop_ascii (t_to_js x80) "action"
                (REPLCommandAction.t_to_js x81)
      end
    module REPLServer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x83 : Ojs.t) -> x83
        and t_to_js : t -> Ojs.t = fun (x82 : Ojs.t) -> x82
        let (get_context : t -> Node_vm.Vm.Context.t) =
          fun (x84 : t) ->
            Node_vm.Vm.Context.t_of_js
              (Ojs.get_prop_ascii (t_to_js x84) "context")
        let (get_input_stream : t -> ReadableStream.t) =
          fun (x85 : t) ->
            ReadableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x85) "inputStream")
        let (get_output_stream : t -> WritableStream.t) =
          fun (x86 : t) ->
            WritableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x86) "outputStream")
        let (get_input : t -> ReadableStream.t) =
          fun (x87 : t) ->
            ReadableStream.t_of_js (Ojs.get_prop_ascii (t_to_js x87) "input")
        let (get_output : t -> WritableStream.t) =
          fun (x88 : t) ->
            WritableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x88) "output")
        let (get_commands : t -> REPLCommand.t ReadOnlyDict.t) =
          fun (x89 : t) ->
            ReadOnlyDict.t_of_js REPLCommand.t_of_js
              (Ojs.get_prop_ascii (t_to_js x89) "commands")
        let (get_editor_mode : t -> bool) =
          fun (x91 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x91) "editorMode")
        let (get_underscore_assigned : t -> bool) =
          fun (x92 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x92) "underscoreAssigned")
        let (get_last : t -> any) =
          fun (x93 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x93) "last")
        let (get_underscore_err_assigned : t -> bool) =
          fun (x94 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x94) "underscoreErrAssigned")
        let (get_last_error : t -> any) =
          fun (x95 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x95) "lastError")
        let (get_eval : t -> REPLEval.t) =
          fun (x96 : t) ->
            REPLEval.t_of_js (Ojs.get_prop_ascii (t_to_js x96) "eval")
        let (get_use_colors : t -> bool) =
          fun (x97 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x97) "useColors")
        let (get_use_global : t -> bool) =
          fun (x98 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x98) "useGlobal")
        let (get_ignore_undefined : t -> bool) =
          fun (x99 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x99) "ignoreUndefined")
        let (get_writer : t -> REPLWriter.t) =
          fun (x100 : t) ->
            REPLWriter.t_of_js (Ojs.get_prop_ascii (t_to_js x100) "writer")
        let (get_completer :
          t ->
            (Node_readline.Readline.AsyncCompleter.t,
              Node_readline.Readline.Completer.t) union2)
          =
          fun (x101 : t) ->
            union2_of_js Node_readline.Readline.AsyncCompleter.t_of_js
              Node_readline.Readline.Completer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x101) "completer")
        let (get_repl_mode : t -> any) =
          fun (x104 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x104) "replMode")
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.repl "REPLServer") [||])
        let (define_command :
          t ->
            keyword:string ->
              cmd:(REPLCommand.t, REPLCommandAction.t) union2 -> unit)
          =
          fun (x109 : t) ->
            fun ~keyword:(x105 : string) ->
              fun ~cmd:(x106 : (REPLCommand.t, REPLCommandAction.t) union2)
                ->
                ignore
                  (Ojs.call (t_to_js x109) "defineCommand"
                     [|(Ojs.string_to_js x105);(union2_to_js
                                                  REPLCommand.t_to_js
                                                  REPLCommandAction.t_to_js
                                                  x106)|])
        let (display_prompt : t -> ?preserve_cursor:bool -> unit -> unit) =
          fun (x113 : t) ->
            fun ?preserve_cursor:(x110 : bool option) ->
              fun () ->
                ignore
                  (let x114 = t_to_js x113 in
                   Ojs.call (Ojs.get_prop_ascii x114 "displayPrompt") "apply"
                     [|x114;((let x111 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x110 with
                               | Some x112 ->
                                   ignore
                                     (Ojs.call x111 "push"
                                        [|(Ojs.bool_to_js x112)|])
                               | None -> ());
                              x111))|])
        let (clear_buffered_command : t -> unit) =
          fun (x115 : t) ->
            ignore (Ojs.call (t_to_js x115) "clearBufferedCommand" [||])
        let (setup_history :
          t ->
            path:string -> cb:(err:Error.t or_null -> repl:t -> unit) -> unit)
          =
          fun (x121 : t) ->
            fun ~path:(x116 : string) ->
              fun ~cb:(x117 : err:Error.t or_null -> repl:t -> unit) ->
                ignore
                  (Ojs.call (t_to_js x121) "setupHistory"
                     [|(Ojs.string_to_js x116);(Ojs.fun_to_js 2
                                                  (fun (x118 : Ojs.t) ->
                                                     fun (x120 : Ojs.t) ->
                                                       x117
                                                         ~err:(or_null_of_js
                                                                 Error.t_of_js
                                                                 x118)
                                                         ~repl:(t_of_js x120)))|])
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x126 : t) ->
            fun ~event:(x122 : string) ->
              fun ~listener:(x123 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x126) "addListener"
                     [|(Ojs.string_to_js x122);(Ojs.fun_to_js_args
                                                  (fun (x124 : _) ->
                                                     x123
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x124 0)))|])
        let (add_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x129 : t) ->
            fun ~event:(x127 : [ `close ]) ->
              fun ~listener:(x128 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x129) "addListener"
                     [|((match x127 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x128 ()))|])
        let (add_listener'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x133 : t) ->
            fun ~event:(x130 : [ `line ]) ->
              fun ~listener:(x131 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x133) "addListener"
                     [|((match x130 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x132 : Ojs.t) ->
                            x131 ~input:(Ojs.string_of_js x132)))|])
        let (add_listener''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x136 : t) ->
            fun ~event:(x134 : [ `pause ]) ->
              fun ~listener:(x135 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x136) "addListener"
                     [|((match x134 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x135 ()))|])
        let (add_listener'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x139 : t) ->
            fun ~event:(x137 : [ `resume ]) ->
              fun ~listener:(x138 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x139) "addListener"
                     [|((match x137 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x138 ()))|])
        let (add_listener''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x142 : t) ->
            fun ~event:(x140 : [ `SIGCONT ]) ->
              fun ~listener:(x141 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x142) "addListener"
                     [|((match x140 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x141 ()))|])
        let (add_listener'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x145 : t) ->
            fun ~event:(x143 : [ `SIGINT ]) ->
              fun ~listener:(x144 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x145) "addListener"
                     [|((match x143 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x144 ()))|])
        let (add_listener''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x148 : t) ->
            fun ~event:(x146 : [ `SIGTSTP ]) ->
              fun ~listener:(x147 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x148) "addListener"
                     [|((match x146 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x147 ()))|])
        let (add_listener'''''''' :
          t -> event:[ `exit ] -> listener:(unit -> unit) -> t) =
          fun (x151 : t) ->
            fun ~event:(x149 : [ `exit ]) ->
              fun ~listener:(x150 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x151) "addListener"
                     [|((match x149 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1 (fun _ -> x150 ()))|])
        let (add_listener''''''''' :
          t ->
            event:[ `reset ] ->
              listener:(context:Node_vm.Vm.Context.t -> unit) -> t)
          =
          fun (x155 : t) ->
            fun ~event:(x152 : [ `reset ]) ->
              fun ~listener:(x153 : context:Node_vm.Vm.Context.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x155) "addListener"
                     [|((match x152 with | `reset -> Ojs.string_to_js "reset"));(
                       Ojs.fun_to_js 1
                         (fun (x154 : Ojs.t) ->
                            x153 ~context:(Node_vm.Vm.Context.t_of_js x154)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x161 : t) ->
            fun ~event:(x156 : symbol or_string) ->
              fun ~args:(x157 : any list) ->
                Ojs.bool_of_js
                  (let x162 = t_to_js x161 in
                   Ojs.call (Ojs.get_prop_ascii x162 "emit") "apply"
                     [|x162;((let x158 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x158 "push"
                                   [|(or_string_to_js symbol_to_js x156)|]);
                              List.iter
                                (fun (x159 : any) ->
                                   ignore
                                     (Ojs.call x158 "push"
                                        [|(any_to_js x159)|])) x157;
                              x158))|])
        let (emit' : t -> event:[ `close ] -> bool) =
          fun (x164 : t) ->
            fun ~event:(x163 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x164) "emit"
                   [|((match x163 with | `close -> Ojs.string_to_js "close"))|])
        let (emit'' : t -> event:[ `line ] -> input:string -> bool) =
          fun (x167 : t) ->
            fun ~event:(x165 : [ `line ]) ->
              fun ~input:(x166 : string) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x167) "emit"
                     [|((match x165 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.string_to_js x166)|])
        let (emit''' : t -> event:[ `pause ] -> bool) =
          fun (x169 : t) ->
            fun ~event:(x168 : [ `pause ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x169) "emit"
                   [|((match x168 with | `pause -> Ojs.string_to_js "pause"))|])
        let (emit'''' : t -> event:[ `resume ] -> bool) =
          fun (x171 : t) ->
            fun ~event:(x170 : [ `resume ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x171) "emit"
                   [|((match x170 with | `resume -> Ojs.string_to_js "resume"))|])
        let (emit''''' : t -> event:[ `SIGCONT ] -> bool) =
          fun (x173 : t) ->
            fun ~event:(x172 : [ `SIGCONT ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x173) "emit"
                   [|((match x172 with
                       | `SIGCONT -> Ojs.string_to_js "SIGCONT"))|])
        let (emit'''''' : t -> event:[ `SIGINT ] -> bool) =
          fun (x175 : t) ->
            fun ~event:(x174 : [ `SIGINT ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x175) "emit"
                   [|((match x174 with | `SIGINT -> Ojs.string_to_js "SIGINT"))|])
        let (emit''''''' : t -> event:[ `SIGTSTP ] -> bool) =
          fun (x177 : t) ->
            fun ~event:(x176 : [ `SIGTSTP ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x177) "emit"
                   [|((match x176 with
                       | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"))|])
        let (emit'''''''' : t -> event:[ `exit ] -> bool) =
          fun (x179 : t) ->
            fun ~event:(x178 : [ `exit ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x179) "emit"
                   [|((match x178 with | `exit -> Ojs.string_to_js "exit"))|])
        let (emit''''''''' :
          t -> event:[ `reset ] -> context:Node_vm.Vm.Context.t -> bool) =
          fun (x182 : t) ->
            fun ~event:(x180 : [ `reset ]) ->
              fun ~context:(x181 : Node_vm.Vm.Context.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x182) "emit"
                     [|((match x180 with | `reset -> Ojs.string_to_js "reset"));(
                       Node_vm.Vm.Context.t_to_js x181)|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x187 : t) ->
            fun ~event:(x183 : string) ->
              fun ~listener:(x184 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x187) "on"
                     [|(Ojs.string_to_js x183);(Ojs.fun_to_js_args
                                                  (fun (x185 : _) ->
                                                     x184
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x185 0)))|])
        let (on' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x190 : t) ->
            fun ~event:(x188 : [ `close ]) ->
              fun ~listener:(x189 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x190) "on"
                     [|((match x188 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x189 ()))|])
        let (on'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x194 : t) ->
            fun ~event:(x191 : [ `line ]) ->
              fun ~listener:(x192 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x194) "on"
                     [|((match x191 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x193 : Ojs.t) ->
                            x192 ~input:(Ojs.string_of_js x193)))|])
        let (on''' : t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x197 : t) ->
            fun ~event:(x195 : [ `pause ]) ->
              fun ~listener:(x196 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x197) "on"
                     [|((match x195 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x196 ()))|])
        let (on'''' : t -> event:[ `resume ] -> listener:(unit -> unit) -> t)
          =
          fun (x200 : t) ->
            fun ~event:(x198 : [ `resume ]) ->
              fun ~listener:(x199 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x200) "on"
                     [|((match x198 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x199 ()))|])
        let (on''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x203 : t) ->
            fun ~event:(x201 : [ `SIGCONT ]) ->
              fun ~listener:(x202 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x203) "on"
                     [|((match x201 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x202 ()))|])
        let (on'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x206 : t) ->
            fun ~event:(x204 : [ `SIGINT ]) ->
              fun ~listener:(x205 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x206) "on"
                     [|((match x204 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x205 ()))|])
        let (on''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x209 : t) ->
            fun ~event:(x207 : [ `SIGTSTP ]) ->
              fun ~listener:(x208 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x209) "on"
                     [|((match x207 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x208 ()))|])
        let (on'''''''' :
          t -> event:[ `exit ] -> listener:(unit -> unit) -> t) =
          fun (x212 : t) ->
            fun ~event:(x210 : [ `exit ]) ->
              fun ~listener:(x211 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x212) "on"
                     [|((match x210 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1 (fun _ -> x211 ()))|])
        let (on''''''''' :
          t ->
            event:[ `reset ] ->
              listener:(context:Node_vm.Vm.Context.t -> unit) -> t)
          =
          fun (x216 : t) ->
            fun ~event:(x213 : [ `reset ]) ->
              fun ~listener:(x214 : context:Node_vm.Vm.Context.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x216) "on"
                     [|((match x213 with | `reset -> Ojs.string_to_js "reset"));(
                       Ojs.fun_to_js 1
                         (fun (x215 : Ojs.t) ->
                            x214 ~context:(Node_vm.Vm.Context.t_of_js x215)))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x221 : t) ->
            fun ~event:(x217 : string) ->
              fun ~listener:(x218 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x221) "once"
                     [|(Ojs.string_to_js x217);(Ojs.fun_to_js_args
                                                  (fun (x219 : _) ->
                                                     x218
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x219 0)))|])
        let (once' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x224 : t) ->
            fun ~event:(x222 : [ `close ]) ->
              fun ~listener:(x223 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x224) "once"
                     [|((match x222 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x223 ()))|])
        let (once'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x228 : t) ->
            fun ~event:(x225 : [ `line ]) ->
              fun ~listener:(x226 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x228) "once"
                     [|((match x225 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x227 : Ojs.t) ->
                            x226 ~input:(Ojs.string_of_js x227)))|])
        let (once''' : t -> event:[ `pause ] -> listener:(unit -> unit) -> t)
          =
          fun (x231 : t) ->
            fun ~event:(x229 : [ `pause ]) ->
              fun ~listener:(x230 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x231) "once"
                     [|((match x229 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x230 ()))|])
        let (once'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x234 : t) ->
            fun ~event:(x232 : [ `resume ]) ->
              fun ~listener:(x233 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x234) "once"
                     [|((match x232 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x233 ()))|])
        let (once''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x237 : t) ->
            fun ~event:(x235 : [ `SIGCONT ]) ->
              fun ~listener:(x236 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x237) "once"
                     [|((match x235 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x236 ()))|])
        let (once'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x240 : t) ->
            fun ~event:(x238 : [ `SIGINT ]) ->
              fun ~listener:(x239 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x240) "once"
                     [|((match x238 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x239 ()))|])
        let (once''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x243 : t) ->
            fun ~event:(x241 : [ `SIGTSTP ]) ->
              fun ~listener:(x242 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x243) "once"
                     [|((match x241 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x242 ()))|])
        let (once'''''''' :
          t -> event:[ `exit ] -> listener:(unit -> unit) -> t) =
          fun (x246 : t) ->
            fun ~event:(x244 : [ `exit ]) ->
              fun ~listener:(x245 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x246) "once"
                     [|((match x244 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1 (fun _ -> x245 ()))|])
        let (once''''''''' :
          t ->
            event:[ `reset ] ->
              listener:(context:Node_vm.Vm.Context.t -> unit) -> t)
          =
          fun (x250 : t) ->
            fun ~event:(x247 : [ `reset ]) ->
              fun ~listener:(x248 : context:Node_vm.Vm.Context.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x250) "once"
                     [|((match x247 with | `reset -> Ojs.string_to_js "reset"));(
                       Ojs.fun_to_js 1
                         (fun (x249 : Ojs.t) ->
                            x248 ~context:(Node_vm.Vm.Context.t_of_js x249)))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x255 : t) ->
            fun ~event:(x251 : string) ->
              fun ~listener:(x252 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x255) "prependListener"
                     [|(Ojs.string_to_js x251);(Ojs.fun_to_js_args
                                                  (fun (x253 : _) ->
                                                     x252
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x253 0)))|])
        let (prepend_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x258 : t) ->
            fun ~event:(x256 : [ `close ]) ->
              fun ~listener:(x257 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x258) "prependListener"
                     [|((match x256 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x257 ()))|])
        let (prepend_listener'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x262 : t) ->
            fun ~event:(x259 : [ `line ]) ->
              fun ~listener:(x260 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x262) "prependListener"
                     [|((match x259 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x261 : Ojs.t) ->
                            x260 ~input:(Ojs.string_of_js x261)))|])
        let (prepend_listener''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x265 : t) ->
            fun ~event:(x263 : [ `pause ]) ->
              fun ~listener:(x264 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x265) "prependListener"
                     [|((match x263 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x264 ()))|])
        let (prepend_listener'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x268 : t) ->
            fun ~event:(x266 : [ `resume ]) ->
              fun ~listener:(x267 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x268) "prependListener"
                     [|((match x266 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x267 ()))|])
        let (prepend_listener''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x271 : t) ->
            fun ~event:(x269 : [ `SIGCONT ]) ->
              fun ~listener:(x270 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x271) "prependListener"
                     [|((match x269 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x270 ()))|])
        let (prepend_listener'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x274 : t) ->
            fun ~event:(x272 : [ `SIGINT ]) ->
              fun ~listener:(x273 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x274) "prependListener"
                     [|((match x272 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x273 ()))|])
        let (prepend_listener''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x277 : t) ->
            fun ~event:(x275 : [ `SIGTSTP ]) ->
              fun ~listener:(x276 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x277) "prependListener"
                     [|((match x275 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x276 ()))|])
        let (prepend_listener'''''''' :
          t -> event:[ `exit ] -> listener:(unit -> unit) -> t) =
          fun (x280 : t) ->
            fun ~event:(x278 : [ `exit ]) ->
              fun ~listener:(x279 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x280) "prependListener"
                     [|((match x278 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1 (fun _ -> x279 ()))|])
        let (prepend_listener''''''''' :
          t ->
            event:[ `reset ] ->
              listener:(context:Node_vm.Vm.Context.t -> unit) -> t)
          =
          fun (x284 : t) ->
            fun ~event:(x281 : [ `reset ]) ->
              fun ~listener:(x282 : context:Node_vm.Vm.Context.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x284) "prependListener"
                     [|((match x281 with | `reset -> Ojs.string_to_js "reset"));(
                       Ojs.fun_to_js 1
                         (fun (x283 : Ojs.t) ->
                            x282 ~context:(Node_vm.Vm.Context.t_of_js x283)))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x289 : t) ->
            fun ~event:(x285 : string) ->
              fun ~listener:(x286 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x289) "prependOnceListener"
                     [|(Ojs.string_to_js x285);(Ojs.fun_to_js_args
                                                  (fun (x287 : _) ->
                                                     x286
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x287 0)))|])
        let (prepend_once_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x292 : t) ->
            fun ~event:(x290 : [ `close ]) ->
              fun ~listener:(x291 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x292) "prependOnceListener"
                     [|((match x290 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x291 ()))|])
        let (prepend_once_listener'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x296 : t) ->
            fun ~event:(x293 : [ `line ]) ->
              fun ~listener:(x294 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x296) "prependOnceListener"
                     [|((match x293 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x295 : Ojs.t) ->
                            x294 ~input:(Ojs.string_of_js x295)))|])
        let (prepend_once_listener''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x299 : t) ->
            fun ~event:(x297 : [ `pause ]) ->
              fun ~listener:(x298 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x299) "prependOnceListener"
                     [|((match x297 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x298 ()))|])
        let (prepend_once_listener'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x302 : t) ->
            fun ~event:(x300 : [ `resume ]) ->
              fun ~listener:(x301 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x302) "prependOnceListener"
                     [|((match x300 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x301 ()))|])
        let (prepend_once_listener''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x305 : t) ->
            fun ~event:(x303 : [ `SIGCONT ]) ->
              fun ~listener:(x304 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x305) "prependOnceListener"
                     [|((match x303 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x304 ()))|])
        let (prepend_once_listener'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x308 : t) ->
            fun ~event:(x306 : [ `SIGINT ]) ->
              fun ~listener:(x307 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x308) "prependOnceListener"
                     [|((match x306 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x307 ()))|])
        let (prepend_once_listener''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x311 : t) ->
            fun ~event:(x309 : [ `SIGTSTP ]) ->
              fun ~listener:(x310 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x311) "prependOnceListener"
                     [|((match x309 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x310 ()))|])
        let (prepend_once_listener'''''''' :
          t -> event:[ `exit ] -> listener:(unit -> unit) -> t) =
          fun (x314 : t) ->
            fun ~event:(x312 : [ `exit ]) ->
              fun ~listener:(x313 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x314) "prependOnceListener"
                     [|((match x312 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1 (fun _ -> x313 ()))|])
        let (prepend_once_listener''''''''' :
          t ->
            event:[ `reset ] ->
              listener:(context:Node_vm.Vm.Context.t -> unit) -> t)
          =
          fun (x318 : t) ->
            fun ~event:(x315 : [ `reset ]) ->
              fun ~listener:(x316 : context:Node_vm.Vm.Context.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x318) "prependOnceListener"
                     [|((match x315 with | `reset -> Ojs.string_to_js "reset"));(
                       Ojs.fun_to_js 1
                         (fun (x317 : Ojs.t) ->
                            x316 ~context:(Node_vm.Vm.Context.t_of_js x317)))|])
        let (cast : t -> Node_readline.Readline.Interface.t) =
          fun (x319 : t) ->
            Node_readline.Readline.Interface.t_of_js (t_to_js x319)
      end
    let (r_epl_mode_sloppy : any) =
      any_of_js (Ojs.get_prop_ascii Import.repl "REPL_MODE_SLOPPY")
    let (r_epl_mode_strict : any) =
      any_of_js (Ojs.get_prop_ascii Import.repl "REPL_MODE_STRICT")
    let (start : ?options:ReplOptions.t or_string -> unit -> REPLServer.t) =
      fun ?options:(x320 : ReplOptions.t or_string option) ->
        fun () ->
          REPLServer.t_of_js
            (let x324 = Import.repl in
             Ojs.call (Ojs.get_prop_ascii x324 "start") "apply"
               [|x324;((let x321 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x320 with
                         | Some x322 ->
                             ignore
                               (Ojs.call x321 "push"
                                  [|(or_string_to_js ReplOptions.t_to_js x322)|])
                         | None -> ());
                        x321))|])
    module Recoverable =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x326 : Ojs.t) -> x326
        and t_to_js : t -> Ojs.t = fun (x325 : Ojs.t) -> x325
        let (get_err : t -> Error.t) =
          fun (x327 : t) ->
            Error.t_of_js (Ojs.get_prop_ascii (t_to_js x327) "err")
        let (set_err : t -> Error.t -> unit) =
          fun (x328 : t) ->
            fun (x329 : Error.t) ->
              Ojs.set_prop_ascii (t_to_js x328) "err" (Error.t_to_js x329)
        let (create : err:Error.t -> t) =
          fun ~err:(x330 : Error.t) ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.repl "Recoverable")
                 [|(Error.t_to_js x330)|])
        let (cast : t -> SyntaxError.t) =
          fun (x331 : t) -> SyntaxError.t_of_js (t_to_js x331)
      end
  end
