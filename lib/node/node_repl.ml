[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_options : t -> Node_util.Util.InspectOptions.t) =
      fun (x3 : t) ->
        Node_util.Util.InspectOptions.t_of_js
          (Ojs.get_prop_ascii (t_to_js x3) "options")
    let (set_options : t -> Node_util.Util.InspectOptions.t -> unit) =
      fun (x4 : t) ->
        fun (x5 : Node_util.Util.InspectOptions.t) ->
          Ojs.set_prop_ascii (t_to_js x4) "options"
            (Node_util.Util.InspectOptions.t_to_js x5)
  end
module Repl =
  struct
    module REPLCommandAction =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x7 : Ojs.t) -> x7
        and t_to_js : t -> Ojs.t = fun (x6 : Ojs.t) -> x6
      end
    module REPLCommand =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x9 : Ojs.t) -> x9
        and t_to_js : t -> Ojs.t = fun (x8 : Ojs.t) -> x8
        let (get_help : t -> string) =
          fun (x10 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x10) "help")
        let (set_help : t -> string -> unit) =
          fun (x11 : t) ->
            fun (x12 : string) ->
              Ojs.set_prop_ascii (t_to_js x11) "help" (Ojs.string_to_js x12)
        let (get_action : t -> REPLCommandAction.t) =
          fun (x13 : t) ->
            REPLCommandAction.t_of_js
              (Ojs.get_prop_ascii (t_to_js x13) "action")
        let (set_action : t -> REPLCommandAction.t -> unit) =
          fun (x14 : t) ->
            fun (x15 : REPLCommandAction.t) ->
              Ojs.set_prop_ascii (t_to_js x14) "action"
                (REPLCommandAction.t_to_js x15)
      end
    module REPLEval =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x17 : Ojs.t) -> x17
        and t_to_js : t -> Ojs.t = fun (x16 : Ojs.t) -> x16
      end
    module REPLWriter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x19 : Ojs.t) -> x19
        and t_to_js : t -> Ojs.t = fun (x18 : Ojs.t) -> x18
      end
    module REPLServer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x21 : Ojs.t) -> x21
        and t_to_js : t -> Ojs.t = fun (x20 : Ojs.t) -> x20
        let (get_context : t -> Node_vm.Vm.Context.t) =
          fun (x22 : t) ->
            Node_vm.Vm.Context.t_of_js
              (Ojs.get_prop_ascii (t_to_js x22) "context")
        let (get_input_stream : t -> ReadableStream.t) =
          fun (x23 : t) ->
            ReadableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x23) "inputStream")
        let (get_output_stream : t -> WritableStream.t) =
          fun (x24 : t) ->
            WritableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x24) "outputStream")
        let (get_input : t -> ReadableStream.t) =
          fun (x25 : t) ->
            ReadableStream.t_of_js (Ojs.get_prop_ascii (t_to_js x25) "input")
        let (get_output : t -> WritableStream.t) =
          fun (x26 : t) ->
            WritableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x26) "output")
        let (get_commands : t -> REPLCommand.t ReadOnlyDict.t) =
          fun (x27 : t) ->
            ReadOnlyDict.t_of_js REPLCommand.t_of_js
              (Ojs.get_prop_ascii (t_to_js x27) "commands")
        let (get_editor_mode : t -> bool) =
          fun (x29 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x29) "editorMode")
        let (get_underscore_assigned : t -> bool) =
          fun (x30 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x30) "underscoreAssigned")
        let (get_last : t -> any) =
          fun (x31 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x31) "last")
        let (get_underscore_err_assigned : t -> bool) =
          fun (x32 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x32) "underscoreErrAssigned")
        let (get_last_error : t -> any) =
          fun (x33 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x33) "lastError")
        let (get_eval : t -> REPLEval.t) =
          fun (x34 : t) ->
            REPLEval.t_of_js (Ojs.get_prop_ascii (t_to_js x34) "eval")
        let (get_use_colors : t -> bool) =
          fun (x35 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x35) "useColors")
        let (get_use_global : t -> bool) =
          fun (x36 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x36) "useGlobal")
        let (get_ignore_undefined : t -> bool) =
          fun (x37 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x37) "ignoreUndefined")
        let (get_writer : t -> REPLWriter.t) =
          fun (x38 : t) ->
            REPLWriter.t_of_js (Ojs.get_prop_ascii (t_to_js x38) "writer")
        let (get_completer :
          t ->
            (Node_readline.Readline.AsyncCompleter.t,
              Node_readline.Readline.Completer.t) union2)
          =
          fun (x39 : t) ->
            union2_of_js Node_readline.Readline.AsyncCompleter.t_of_js
              Node_readline.Readline.Completer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x39) "completer")
        let (get_repl_mode : t -> any) =
          fun (x42 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x42) "replMode")
        let (create : unit -> t) =
          fun () ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.repl "REPLServer") [||])
        let (define_command :
          t ->
            keyword:string ->
              cmd:(REPLCommand.t, REPLCommandAction.t) union2 -> unit)
          =
          fun (x47 : t) ->
            fun ~keyword:(x43 : string) ->
              fun ~cmd:(x44 : (REPLCommand.t, REPLCommandAction.t) union2) ->
                ignore
                  (Ojs.call (t_to_js x47) "defineCommand"
                     [|(Ojs.string_to_js x43);(union2_to_js
                                                 REPLCommand.t_to_js
                                                 REPLCommandAction.t_to_js
                                                 x44)|])
        let (display_prompt : t -> ?preserve_cursor:bool -> unit -> unit) =
          fun (x51 : t) ->
            fun ?preserve_cursor:(x48 : bool option) ->
              fun () ->
                ignore
                  (let x52 = t_to_js x51 in
                   Ojs.call (Ojs.get_prop_ascii x52 "displayPrompt") "apply"
                     [|x52;((let x49 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x48 with
                              | Some x50 ->
                                  ignore
                                    (Ojs.call x49 "push"
                                       [|(Ojs.bool_to_js x50)|])
                              | None -> ());
                             x49))|])
        let (clear_buffered_command : t -> unit) =
          fun (x53 : t) ->
            ignore (Ojs.call (t_to_js x53) "clearBufferedCommand" [||])
        let (setup_history :
          t ->
            path:string -> cb:(err:Error.t or_null -> repl:t -> unit) -> unit)
          =
          fun (x59 : t) ->
            fun ~path:(x54 : string) ->
              fun ~cb:(x55 : err:Error.t or_null -> repl:t -> unit) ->
                ignore
                  (Ojs.call (t_to_js x59) "setupHistory"
                     [|(Ojs.string_to_js x54);(Ojs.fun_to_js 2
                                                 (fun (x56 : Ojs.t) ->
                                                    fun (x58 : Ojs.t) ->
                                                      x55
                                                        ~err:(or_null_of_js
                                                                Error.t_of_js
                                                                x56)
                                                        ~repl:(t_of_js x58)))|])
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x64 : t) ->
            fun ~event:(x60 : string) ->
              fun ~listener:(x61 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x64) "addListener"
                     [|(Ojs.string_to_js x60);(Ojs.fun_to_js_args
                                                 (fun (x62 : _) ->
                                                    x61
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js x62
                                                               0)))|])
        let (add_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x67 : t) ->
            fun ~event:(x65 : [ `close ]) ->
              fun ~listener:(x66 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x67) "addListener"
                     [|((match x65 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x66 ()))|])
        let (add_listener'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x71 : t) ->
            fun ~event:(x68 : [ `line ]) ->
              fun ~listener:(x69 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x71) "addListener"
                     [|((match x68 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x70 : Ojs.t) ->
                            x69 ~input:(Ojs.string_of_js x70)))|])
        let (add_listener''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x74 : t) ->
            fun ~event:(x72 : [ `pause ]) ->
              fun ~listener:(x73 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x74) "addListener"
                     [|((match x72 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x73 ()))|])
        let (add_listener'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x77 : t) ->
            fun ~event:(x75 : [ `resume ]) ->
              fun ~listener:(x76 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x77) "addListener"
                     [|((match x75 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x76 ()))|])
        let (add_listener''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x80 : t) ->
            fun ~event:(x78 : [ `SIGCONT ]) ->
              fun ~listener:(x79 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x80) "addListener"
                     [|((match x78 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x79 ()))|])
        let (add_listener'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x83 : t) ->
            fun ~event:(x81 : [ `SIGINT ]) ->
              fun ~listener:(x82 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x83) "addListener"
                     [|((match x81 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x82 ()))|])
        let (add_listener''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x86 : t) ->
            fun ~event:(x84 : [ `SIGTSTP ]) ->
              fun ~listener:(x85 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x86) "addListener"
                     [|((match x84 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x85 ()))|])
        let (add_listener'''''''' :
          t -> event:[ `exit ] -> listener:(unit -> unit) -> t) =
          fun (x89 : t) ->
            fun ~event:(x87 : [ `exit ]) ->
              fun ~listener:(x88 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x89) "addListener"
                     [|((match x87 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1 (fun _ -> x88 ()))|])
        let (add_listener''''''''' :
          t ->
            event:[ `reset ] ->
              listener:(context:Node_vm.Vm.Context.t -> unit) -> t)
          =
          fun (x93 : t) ->
            fun ~event:(x90 : [ `reset ]) ->
              fun ~listener:(x91 : context:Node_vm.Vm.Context.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x93) "addListener"
                     [|((match x90 with | `reset -> Ojs.string_to_js "reset"));(
                       Ojs.fun_to_js 1
                         (fun (x92 : Ojs.t) ->
                            x91 ~context:(Node_vm.Vm.Context.t_of_js x92)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x99 : t) ->
            fun ~event:(x94 : symbol or_string) ->
              fun ~args:(x95 : any list) ->
                Ojs.bool_of_js
                  (let x100 = t_to_js x99 in
                   Ojs.call (Ojs.get_prop_ascii x100 "emit") "apply"
                     [|x100;((let x96 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x96 "push"
                                   [|(or_string_to_js symbol_to_js x94)|]);
                              List.iter
                                (fun (x97 : any) ->
                                   ignore
                                     (Ojs.call x96 "push" [|(any_to_js x97)|]))
                                x95;
                              x96))|])
        let (emit' : t -> event:[ `close ] -> bool) =
          fun (x102 : t) ->
            fun ~event:(x101 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x102) "emit"
                   [|((match x101 with | `close -> Ojs.string_to_js "close"))|])
        let (emit'' : t -> event:[ `line ] -> input:string -> bool) =
          fun (x105 : t) ->
            fun ~event:(x103 : [ `line ]) ->
              fun ~input:(x104 : string) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x105) "emit"
                     [|((match x103 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.string_to_js x104)|])
        let (emit''' : t -> event:[ `pause ] -> bool) =
          fun (x107 : t) ->
            fun ~event:(x106 : [ `pause ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x107) "emit"
                   [|((match x106 with | `pause -> Ojs.string_to_js "pause"))|])
        let (emit'''' : t -> event:[ `resume ] -> bool) =
          fun (x109 : t) ->
            fun ~event:(x108 : [ `resume ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x109) "emit"
                   [|((match x108 with | `resume -> Ojs.string_to_js "resume"))|])
        let (emit''''' : t -> event:[ `SIGCONT ] -> bool) =
          fun (x111 : t) ->
            fun ~event:(x110 : [ `SIGCONT ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x111) "emit"
                   [|((match x110 with
                       | `SIGCONT -> Ojs.string_to_js "SIGCONT"))|])
        let (emit'''''' : t -> event:[ `SIGINT ] -> bool) =
          fun (x113 : t) ->
            fun ~event:(x112 : [ `SIGINT ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x113) "emit"
                   [|((match x112 with | `SIGINT -> Ojs.string_to_js "SIGINT"))|])
        let (emit''''''' : t -> event:[ `SIGTSTP ] -> bool) =
          fun (x115 : t) ->
            fun ~event:(x114 : [ `SIGTSTP ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x115) "emit"
                   [|((match x114 with
                       | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"))|])
        let (emit'''''''' : t -> event:[ `exit ] -> bool) =
          fun (x117 : t) ->
            fun ~event:(x116 : [ `exit ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x117) "emit"
                   [|((match x116 with | `exit -> Ojs.string_to_js "exit"))|])
        let (emit''''''''' :
          t -> event:[ `reset ] -> context:Node_vm.Vm.Context.t -> bool) =
          fun (x120 : t) ->
            fun ~event:(x118 : [ `reset ]) ->
              fun ~context:(x119 : Node_vm.Vm.Context.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x120) "emit"
                     [|((match x118 with | `reset -> Ojs.string_to_js "reset"));(
                       Node_vm.Vm.Context.t_to_js x119)|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x125 : t) ->
            fun ~event:(x121 : string) ->
              fun ~listener:(x122 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x125) "on"
                     [|(Ojs.string_to_js x121);(Ojs.fun_to_js_args
                                                  (fun (x123 : _) ->
                                                     x122
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x123 0)))|])
        let (on' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x128 : t) ->
            fun ~event:(x126 : [ `close ]) ->
              fun ~listener:(x127 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x128) "on"
                     [|((match x126 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x127 ()))|])
        let (on'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x132 : t) ->
            fun ~event:(x129 : [ `line ]) ->
              fun ~listener:(x130 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x132) "on"
                     [|((match x129 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x131 : Ojs.t) ->
                            x130 ~input:(Ojs.string_of_js x131)))|])
        let (on''' : t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x135 : t) ->
            fun ~event:(x133 : [ `pause ]) ->
              fun ~listener:(x134 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x135) "on"
                     [|((match x133 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x134 ()))|])
        let (on'''' : t -> event:[ `resume ] -> listener:(unit -> unit) -> t)
          =
          fun (x138 : t) ->
            fun ~event:(x136 : [ `resume ]) ->
              fun ~listener:(x137 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x138) "on"
                     [|((match x136 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x137 ()))|])
        let (on''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x141 : t) ->
            fun ~event:(x139 : [ `SIGCONT ]) ->
              fun ~listener:(x140 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x141) "on"
                     [|((match x139 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x140 ()))|])
        let (on'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x144 : t) ->
            fun ~event:(x142 : [ `SIGINT ]) ->
              fun ~listener:(x143 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x144) "on"
                     [|((match x142 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x143 ()))|])
        let (on''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x147 : t) ->
            fun ~event:(x145 : [ `SIGTSTP ]) ->
              fun ~listener:(x146 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x147) "on"
                     [|((match x145 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x146 ()))|])
        let (on'''''''' :
          t -> event:[ `exit ] -> listener:(unit -> unit) -> t) =
          fun (x150 : t) ->
            fun ~event:(x148 : [ `exit ]) ->
              fun ~listener:(x149 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x150) "on"
                     [|((match x148 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1 (fun _ -> x149 ()))|])
        let (on''''''''' :
          t ->
            event:[ `reset ] ->
              listener:(context:Node_vm.Vm.Context.t -> unit) -> t)
          =
          fun (x154 : t) ->
            fun ~event:(x151 : [ `reset ]) ->
              fun ~listener:(x152 : context:Node_vm.Vm.Context.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x154) "on"
                     [|((match x151 with | `reset -> Ojs.string_to_js "reset"));(
                       Ojs.fun_to_js 1
                         (fun (x153 : Ojs.t) ->
                            x152 ~context:(Node_vm.Vm.Context.t_of_js x153)))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x159 : t) ->
            fun ~event:(x155 : string) ->
              fun ~listener:(x156 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x159) "once"
                     [|(Ojs.string_to_js x155);(Ojs.fun_to_js_args
                                                  (fun (x157 : _) ->
                                                     x156
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x157 0)))|])
        let (once' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x162 : t) ->
            fun ~event:(x160 : [ `close ]) ->
              fun ~listener:(x161 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x162) "once"
                     [|((match x160 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x161 ()))|])
        let (once'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x166 : t) ->
            fun ~event:(x163 : [ `line ]) ->
              fun ~listener:(x164 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x166) "once"
                     [|((match x163 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x165 : Ojs.t) ->
                            x164 ~input:(Ojs.string_of_js x165)))|])
        let (once''' : t -> event:[ `pause ] -> listener:(unit -> unit) -> t)
          =
          fun (x169 : t) ->
            fun ~event:(x167 : [ `pause ]) ->
              fun ~listener:(x168 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x169) "once"
                     [|((match x167 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x168 ()))|])
        let (once'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x172 : t) ->
            fun ~event:(x170 : [ `resume ]) ->
              fun ~listener:(x171 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x172) "once"
                     [|((match x170 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x171 ()))|])
        let (once''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x175 : t) ->
            fun ~event:(x173 : [ `SIGCONT ]) ->
              fun ~listener:(x174 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x175) "once"
                     [|((match x173 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x174 ()))|])
        let (once'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x178 : t) ->
            fun ~event:(x176 : [ `SIGINT ]) ->
              fun ~listener:(x177 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x178) "once"
                     [|((match x176 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x177 ()))|])
        let (once''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x181 : t) ->
            fun ~event:(x179 : [ `SIGTSTP ]) ->
              fun ~listener:(x180 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x181) "once"
                     [|((match x179 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x180 ()))|])
        let (once'''''''' :
          t -> event:[ `exit ] -> listener:(unit -> unit) -> t) =
          fun (x184 : t) ->
            fun ~event:(x182 : [ `exit ]) ->
              fun ~listener:(x183 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x184) "once"
                     [|((match x182 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1 (fun _ -> x183 ()))|])
        let (once''''''''' :
          t ->
            event:[ `reset ] ->
              listener:(context:Node_vm.Vm.Context.t -> unit) -> t)
          =
          fun (x188 : t) ->
            fun ~event:(x185 : [ `reset ]) ->
              fun ~listener:(x186 : context:Node_vm.Vm.Context.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x188) "once"
                     [|((match x185 with | `reset -> Ojs.string_to_js "reset"));(
                       Ojs.fun_to_js 1
                         (fun (x187 : Ojs.t) ->
                            x186 ~context:(Node_vm.Vm.Context.t_of_js x187)))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x193 : t) ->
            fun ~event:(x189 : string) ->
              fun ~listener:(x190 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x193) "prependListener"
                     [|(Ojs.string_to_js x189);(Ojs.fun_to_js_args
                                                  (fun (x191 : _) ->
                                                     x190
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x191 0)))|])
        let (prepend_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x196 : t) ->
            fun ~event:(x194 : [ `close ]) ->
              fun ~listener:(x195 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x196) "prependListener"
                     [|((match x194 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x195 ()))|])
        let (prepend_listener'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x200 : t) ->
            fun ~event:(x197 : [ `line ]) ->
              fun ~listener:(x198 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x200) "prependListener"
                     [|((match x197 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x199 : Ojs.t) ->
                            x198 ~input:(Ojs.string_of_js x199)))|])
        let (prepend_listener''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x203 : t) ->
            fun ~event:(x201 : [ `pause ]) ->
              fun ~listener:(x202 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x203) "prependListener"
                     [|((match x201 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x202 ()))|])
        let (prepend_listener'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x206 : t) ->
            fun ~event:(x204 : [ `resume ]) ->
              fun ~listener:(x205 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x206) "prependListener"
                     [|((match x204 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x205 ()))|])
        let (prepend_listener''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x209 : t) ->
            fun ~event:(x207 : [ `SIGCONT ]) ->
              fun ~listener:(x208 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x209) "prependListener"
                     [|((match x207 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x208 ()))|])
        let (prepend_listener'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x212 : t) ->
            fun ~event:(x210 : [ `SIGINT ]) ->
              fun ~listener:(x211 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x212) "prependListener"
                     [|((match x210 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x211 ()))|])
        let (prepend_listener''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x215 : t) ->
            fun ~event:(x213 : [ `SIGTSTP ]) ->
              fun ~listener:(x214 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x215) "prependListener"
                     [|((match x213 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x214 ()))|])
        let (prepend_listener'''''''' :
          t -> event:[ `exit ] -> listener:(unit -> unit) -> t) =
          fun (x218 : t) ->
            fun ~event:(x216 : [ `exit ]) ->
              fun ~listener:(x217 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x218) "prependListener"
                     [|((match x216 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1 (fun _ -> x217 ()))|])
        let (prepend_listener''''''''' :
          t ->
            event:[ `reset ] ->
              listener:(context:Node_vm.Vm.Context.t -> unit) -> t)
          =
          fun (x222 : t) ->
            fun ~event:(x219 : [ `reset ]) ->
              fun ~listener:(x220 : context:Node_vm.Vm.Context.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x222) "prependListener"
                     [|((match x219 with | `reset -> Ojs.string_to_js "reset"));(
                       Ojs.fun_to_js 1
                         (fun (x221 : Ojs.t) ->
                            x220 ~context:(Node_vm.Vm.Context.t_of_js x221)))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x227 : t) ->
            fun ~event:(x223 : string) ->
              fun ~listener:(x224 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x227) "prependOnceListener"
                     [|(Ojs.string_to_js x223);(Ojs.fun_to_js_args
                                                  (fun (x225 : _) ->
                                                     x224
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x225 0)))|])
        let (prepend_once_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x230 : t) ->
            fun ~event:(x228 : [ `close ]) ->
              fun ~listener:(x229 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x230) "prependOnceListener"
                     [|((match x228 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x229 ()))|])
        let (prepend_once_listener'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x234 : t) ->
            fun ~event:(x231 : [ `line ]) ->
              fun ~listener:(x232 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x234) "prependOnceListener"
                     [|((match x231 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x233 : Ojs.t) ->
                            x232 ~input:(Ojs.string_of_js x233)))|])
        let (prepend_once_listener''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x237 : t) ->
            fun ~event:(x235 : [ `pause ]) ->
              fun ~listener:(x236 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x237) "prependOnceListener"
                     [|((match x235 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x236 ()))|])
        let (prepend_once_listener'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x240 : t) ->
            fun ~event:(x238 : [ `resume ]) ->
              fun ~listener:(x239 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x240) "prependOnceListener"
                     [|((match x238 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x239 ()))|])
        let (prepend_once_listener''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x243 : t) ->
            fun ~event:(x241 : [ `SIGCONT ]) ->
              fun ~listener:(x242 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x243) "prependOnceListener"
                     [|((match x241 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x242 ()))|])
        let (prepend_once_listener'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x246 : t) ->
            fun ~event:(x244 : [ `SIGINT ]) ->
              fun ~listener:(x245 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x246) "prependOnceListener"
                     [|((match x244 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x245 ()))|])
        let (prepend_once_listener''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x249 : t) ->
            fun ~event:(x247 : [ `SIGTSTP ]) ->
              fun ~listener:(x248 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x249) "prependOnceListener"
                     [|((match x247 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x248 ()))|])
        let (prepend_once_listener'''''''' :
          t -> event:[ `exit ] -> listener:(unit -> unit) -> t) =
          fun (x252 : t) ->
            fun ~event:(x250 : [ `exit ]) ->
              fun ~listener:(x251 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x252) "prependOnceListener"
                     [|((match x250 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.fun_to_js 1 (fun _ -> x251 ()))|])
        let (prepend_once_listener''''''''' :
          t ->
            event:[ `reset ] ->
              listener:(context:Node_vm.Vm.Context.t -> unit) -> t)
          =
          fun (x256 : t) ->
            fun ~event:(x253 : [ `reset ]) ->
              fun ~listener:(x254 : context:Node_vm.Vm.Context.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x256) "prependOnceListener"
                     [|((match x253 with | `reset -> Ojs.string_to_js "reset"));(
                       Ojs.fun_to_js 1
                         (fun (x255 : Ojs.t) ->
                            x254 ~context:(Node_vm.Vm.Context.t_of_js x255)))|])
        let (cast : t -> Node_readline.Readline.Interface.t) =
          fun (x257 : t) ->
            Node_readline.Readline.Interface.t_of_js (t_to_js x257)
      end
    let (writer : (REPLWriter.t, AnonymousInterface0.t) intersection2) =
      intersection2_of_js REPLWriter.t_of_js AnonymousInterface0.t_of_js
        (Ojs.get_prop_ascii Import.repl "writer")
    module ReplOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x261 : Ojs.t) -> x261
        and t_to_js : t -> Ojs.t = fun (x260 : Ojs.t) -> x260
        let (get_prompt : t -> string) =
          fun (x262 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x262) "prompt")
        let (set_prompt : t -> string -> unit) =
          fun (x263 : t) ->
            fun (x264 : string) ->
              Ojs.set_prop_ascii (t_to_js x263) "prompt"
                (Ojs.string_to_js x264)
        let (get_input : t -> ReadableStream.t) =
          fun (x265 : t) ->
            ReadableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x265) "input")
        let (set_input : t -> ReadableStream.t -> unit) =
          fun (x266 : t) ->
            fun (x267 : ReadableStream.t) ->
              Ojs.set_prop_ascii (t_to_js x266) "input"
                (ReadableStream.t_to_js x267)
        let (get_output : t -> WritableStream.t) =
          fun (x268 : t) ->
            WritableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x268) "output")
        let (set_output : t -> WritableStream.t -> unit) =
          fun (x269 : t) ->
            fun (x270 : WritableStream.t) ->
              Ojs.set_prop_ascii (t_to_js x269) "output"
                (WritableStream.t_to_js x270)
        let (get_terminal : t -> bool) =
          fun (x271 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x271) "terminal")
        let (set_terminal : t -> bool -> unit) =
          fun (x272 : t) ->
            fun (x273 : bool) ->
              Ojs.set_prop_ascii (t_to_js x272) "terminal"
                (Ojs.bool_to_js x273)
        let (get_eval : t -> REPLEval.t) =
          fun (x274 : t) ->
            REPLEval.t_of_js (Ojs.get_prop_ascii (t_to_js x274) "eval")
        let (set_eval : t -> REPLEval.t -> unit) =
          fun (x275 : t) ->
            fun (x276 : REPLEval.t) ->
              Ojs.set_prop_ascii (t_to_js x275) "eval"
                (REPLEval.t_to_js x276)
        let (get_preview : t -> bool) =
          fun (x277 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x277) "preview")
        let (set_preview : t -> bool -> unit) =
          fun (x278 : t) ->
            fun (x279 : bool) ->
              Ojs.set_prop_ascii (t_to_js x278) "preview"
                (Ojs.bool_to_js x279)
        let (get_use_colors : t -> bool) =
          fun (x280 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x280) "useColors")
        let (set_use_colors : t -> bool -> unit) =
          fun (x281 : t) ->
            fun (x282 : bool) ->
              Ojs.set_prop_ascii (t_to_js x281) "useColors"
                (Ojs.bool_to_js x282)
        let (get_use_global : t -> bool) =
          fun (x283 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x283) "useGlobal")
        let (set_use_global : t -> bool -> unit) =
          fun (x284 : t) ->
            fun (x285 : bool) ->
              Ojs.set_prop_ascii (t_to_js x284) "useGlobal"
                (Ojs.bool_to_js x285)
        let (get_ignore_undefined : t -> bool) =
          fun (x286 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x286) "ignoreUndefined")
        let (set_ignore_undefined : t -> bool -> unit) =
          fun (x287 : t) ->
            fun (x288 : bool) ->
              Ojs.set_prop_ascii (t_to_js x287) "ignoreUndefined"
                (Ojs.bool_to_js x288)
        let (get_writer : t -> REPLWriter.t) =
          fun (x289 : t) ->
            REPLWriter.t_of_js (Ojs.get_prop_ascii (t_to_js x289) "writer")
        let (set_writer : t -> REPLWriter.t -> unit) =
          fun (x290 : t) ->
            fun (x291 : REPLWriter.t) ->
              Ojs.set_prop_ascii (t_to_js x290) "writer"
                (REPLWriter.t_to_js x291)
        let (get_completer :
          t ->
            (Node_readline.Readline.AsyncCompleter.t,
              Node_readline.Readline.Completer.t) union2)
          =
          fun (x292 : t) ->
            union2_of_js Node_readline.Readline.AsyncCompleter.t_of_js
              Node_readline.Readline.Completer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x292) "completer")
        let (set_completer :
          t ->
            (Node_readline.Readline.AsyncCompleter.t,
              Node_readline.Readline.Completer.t) union2 -> unit)
          =
          fun (x295 : t) ->
            fun
              (x296 :
                (Node_readline.Readline.AsyncCompleter.t,
                  Node_readline.Readline.Completer.t) union2)
              ->
              Ojs.set_prop_ascii (t_to_js x295) "completer"
                (union2_to_js Node_readline.Readline.AsyncCompleter.t_to_js
                   Node_readline.Readline.Completer.t_to_js x296)
        let (get_repl_mode : t -> any) =
          fun (x299 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x299) "replMode")
        let (set_repl_mode : t -> any -> unit) =
          fun (x300 : t) ->
            fun (x301 : any) ->
              Ojs.set_prop_ascii (t_to_js x300) "replMode" (any_to_js x301)
        let (get_break_eval_on_sigint : t -> bool) =
          fun (x302 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x302) "breakEvalOnSigint")
        let (set_break_eval_on_sigint : t -> bool -> unit) =
          fun (x303 : t) ->
            fun (x304 : bool) ->
              Ojs.set_prop_ascii (t_to_js x303) "breakEvalOnSigint"
                (Ojs.bool_to_js x304)
      end
    let (r_epl_mode_sloppy : any) =
      any_of_js (Ojs.get_prop_ascii Import.repl "REPL_MODE_SLOPPY")
    let (r_epl_mode_strict : any) =
      any_of_js (Ojs.get_prop_ascii Import.repl "REPL_MODE_STRICT")
    let (start : ?options:ReplOptions.t or_string -> unit -> REPLServer.t) =
      fun ?options:(x305 : ReplOptions.t or_string option) ->
        fun () ->
          REPLServer.t_of_js
            (let x309 = Import.repl in
             Ojs.call (Ojs.get_prop_ascii x309 "start") "apply"
               [|x309;((let x306 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x305 with
                         | Some x307 ->
                             ignore
                               (Ojs.call x306 "push"
                                  [|(or_string_to_js ReplOptions.t_to_js x307)|])
                         | None -> ());
                        x306))|])
    module Recoverable =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x311 : Ojs.t) -> x311
        and t_to_js : t -> Ojs.t = fun (x310 : Ojs.t) -> x310
        let (get_err : t -> Error.t) =
          fun (x312 : t) ->
            Error.t_of_js (Ojs.get_prop_ascii (t_to_js x312) "err")
        let (set_err : t -> Error.t -> unit) =
          fun (x313 : t) ->
            fun (x314 : Error.t) ->
              Ojs.set_prop_ascii (t_to_js x313) "err" (Error.t_to_js x314)
        let (create : err:Error.t -> t) =
          fun ~err:(x315 : Error.t) ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.repl "Recoverable")
                 [|(Error.t_to_js x315)|])
        let (cast : t -> SyntaxError.t) =
          fun (x316 : t) -> SyntaxError.t_of_js (t_to_js x316)
      end
  end
