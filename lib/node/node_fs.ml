[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
open Node_stream
module Fs =
  struct
    module OpenMode =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
        and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
      end
    module Mode =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4 : Ojs.t) -> x4
        and t_to_js : t -> Ojs.t = fun (x3 : Ojs.t) -> x3
      end
    module StatsBase =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) -> fun (__T_of_js : Ojs.t -> __T) -> fun (x6 : Ojs.t) -> x6
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x5 : Ojs.t) -> x5
        let (is_file : 'T t -> bool) =
          fun (x7 : 'T t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js Obj.magic x7) "isFile" [||])
        let (is_directory : 'T t -> bool) =
          fun (x9 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.call (t_to_js Obj.magic x9) "isDirectory" [||])
        let (is_block_device : 'T t -> bool) =
          fun (x11 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.call (t_to_js Obj.magic x11) "isBlockDevice" [||])
        let (is_character_device : 'T t -> bool) =
          fun (x13 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.call (t_to_js Obj.magic x13) "isCharacterDevice" [||])
        let (is_symbolic_link : 'T t -> bool) =
          fun (x15 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.call (t_to_js Obj.magic x15) "isSymbolicLink" [||])
        let (is_fifo : 'T t -> bool) =
          fun (x17 : 'T t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js Obj.magic x17) "isFIFO" [||])
        let (is_socket : 'T t -> bool) =
          fun (x19 : 'T t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js Obj.magic x19) "isSocket" [||])
        let (get_dev : 'T t -> 'T) =
          fun (x21 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x21) "dev")
        let (set_dev : 'T t -> 'T -> unit) =
          fun (x23 : 'T t) ->
            fun (x24 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x23) "dev"
                (Obj.magic x24)
        let (get_ino : 'T t -> 'T) =
          fun (x26 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x26) "ino")
        let (set_ino : 'T t -> 'T -> unit) =
          fun (x28 : 'T t) ->
            fun (x29 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x28) "ino"
                (Obj.magic x29)
        let (get_mode : 'T t -> 'T) =
          fun (x31 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x31) "mode")
        let (set_mode : 'T t -> 'T -> unit) =
          fun (x33 : 'T t) ->
            fun (x34 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x33) "mode"
                (Obj.magic x34)
        let (get_nlink : 'T t -> 'T) =
          fun (x36 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x36) "nlink")
        let (set_nlink : 'T t -> 'T -> unit) =
          fun (x38 : 'T t) ->
            fun (x39 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x38) "nlink"
                (Obj.magic x39)
        let (get_uid : 'T t -> 'T) =
          fun (x41 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x41) "uid")
        let (set_uid : 'T t -> 'T -> unit) =
          fun (x43 : 'T t) ->
            fun (x44 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x43) "uid"
                (Obj.magic x44)
        let (get_gid : 'T t -> 'T) =
          fun (x46 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x46) "gid")
        let (set_gid : 'T t -> 'T -> unit) =
          fun (x48 : 'T t) ->
            fun (x49 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x48) "gid"
                (Obj.magic x49)
        let (get_rdev : 'T t -> 'T) =
          fun (x51 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x51) "rdev")
        let (set_rdev : 'T t -> 'T -> unit) =
          fun (x53 : 'T t) ->
            fun (x54 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x53) "rdev"
                (Obj.magic x54)
        let (get_size : 'T t -> 'T) =
          fun (x56 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x56) "size")
        let (set_size : 'T t -> 'T -> unit) =
          fun (x58 : 'T t) ->
            fun (x59 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x58) "size"
                (Obj.magic x59)
        let (get_blksize : 'T t -> 'T) =
          fun (x61 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x61) "blksize")
        let (set_blksize : 'T t -> 'T -> unit) =
          fun (x63 : 'T t) ->
            fun (x64 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x63) "blksize"
                (Obj.magic x64)
        let (get_blocks : 'T t -> 'T) =
          fun (x66 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x66) "blocks")
        let (set_blocks : 'T t -> 'T -> unit) =
          fun (x68 : 'T t) ->
            fun (x69 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x68) "blocks"
                (Obj.magic x69)
        let (get_atime_ms : 'T t -> 'T) =
          fun (x71 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x71) "atimeMs")
        let (set_atime_ms : 'T t -> 'T -> unit) =
          fun (x73 : 'T t) ->
            fun (x74 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x73) "atimeMs"
                (Obj.magic x74)
        let (get_mtime_ms : 'T t -> 'T) =
          fun (x76 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x76) "mtimeMs")
        let (set_mtime_ms : 'T t -> 'T -> unit) =
          fun (x78 : 'T t) ->
            fun (x79 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x78) "mtimeMs"
                (Obj.magic x79)
        let (get_ctime_ms : 'T t -> 'T) =
          fun (x81 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x81) "ctimeMs")
        let (set_ctime_ms : 'T t -> 'T -> unit) =
          fun (x83 : 'T t) ->
            fun (x84 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x83) "ctimeMs"
                (Obj.magic x84)
        let (get_birthtime_ms : 'T t -> 'T) =
          fun (x86 : 'T t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x86) "birthtimeMs")
        let (set_birthtime_ms : 'T t -> 'T -> unit) =
          fun (x88 : 'T t) ->
            fun (x89 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x88) "birthtimeMs"
                (Obj.magic x89)
        let (get_atime : 'T t -> Date.t) =
          fun (x91 : 'T t) ->
            Date.t_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x91) "atime")
        let (set_atime : 'T t -> Date.t -> unit) =
          fun (x93 : 'T t) ->
            fun (x94 : Date.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x93) "atime"
                (Date.t_to_js x94)
        let (get_mtime : 'T t -> Date.t) =
          fun (x96 : 'T t) ->
            Date.t_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x96) "mtime")
        let (set_mtime : 'T t -> Date.t -> unit) =
          fun (x98 : 'T t) ->
            fun (x99 : Date.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x98) "mtime"
                (Date.t_to_js x99)
        let (get_ctime : 'T t -> Date.t) =
          fun (x101 : 'T t) ->
            Date.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x101) "ctime")
        let (set_ctime : 'T t -> Date.t -> unit) =
          fun (x103 : 'T t) ->
            fun (x104 : Date.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x103) "ctime"
                (Date.t_to_js x104)
        let (get_birthtime : 'T t -> Date.t) =
          fun (x106 : 'T t) ->
            Date.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x106) "birthtime")
        let (set_birthtime : 'T t -> Date.t -> unit) =
          fun (x108 : 'T t) ->
            fun (x109 : Date.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x108) "birthtime"
                (Date.t_to_js x109)
      end
    module Stats =
      struct
        include struct include StatsBase end
        type t = int StatsBase.t
        let rec t_of_js : Ojs.t -> t =
          fun (x113 : Ojs.t) -> StatsBase.t_of_js Ojs.int_of_js x113
        and t_to_js : t -> Ojs.t =
          fun (x111 : int StatsBase.t) ->
            StatsBase.t_to_js Ojs.int_to_js x111
      end
    module AnonymousInterface0 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x116 : Ojs.t) -> x116
        and t_to_js : t -> Ojs.t = fun (x115 : Ojs.t) -> x115
        let (get_bigint : t -> [ `L_b_false ]) =
          fun (x117 : t) ->
            let x118 = Ojs.get_prop_ascii (t_to_js x117) "bigint" in
            match Ojs.bool_of_js x118 with
            | false -> `L_b_false
            | _ -> assert false
        let (set_bigint : t -> [ `L_b_false ] -> unit) =
          fun (x119 : t) ->
            fun (x120 : [ `L_b_false ]) ->
              Ojs.set_prop_ascii (t_to_js x119) "bigint"
                (match x120 with | `L_b_false -> Ojs.string_to_js "LBFalse")
      end
    module AnonymousInterface1 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x122 : Ojs.t) -> x122
        and t_to_js : t -> Ojs.t = fun (x121 : Ojs.t) -> x121
        let (get_bigint : t -> [ `L_b_true ]) =
          fun (x123 : t) ->
            let x124 = Ojs.get_prop_ascii (t_to_js x123) "bigint" in
            match Ojs.bool_of_js x124 with
            | true -> `L_b_true
            | _ -> assert false
        let (set_bigint : t -> [ `L_b_true ] -> unit) =
          fun (x125 : t) ->
            fun (x126 : [ `L_b_true ]) ->
              Ojs.set_prop_ascii (t_to_js x125) "bigint"
                (match x126 with | `L_b_true -> Ojs.string_to_js "LBTrue")
      end
    module AnonymousInterface2 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x128 : Ojs.t) -> x128
        and t_to_js : t -> Ojs.t = fun (x127 : Ojs.t) -> x127
        let (get_bytes_read : t -> int) =
          fun (x129 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x129) "bytesRead")
        let (set_bytes_read : t -> int -> unit) =
          fun (x130 : t) ->
            fun (x131 : int) ->
              Ojs.set_prop_ascii (t_to_js x130) "bytesRead"
                (Ojs.int_to_js x131)
        let (get_buffer : t -> 'TBuffer) =
          fun (x132 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x132) "buffer")
        let (set_buffer : t -> 'TBuffer -> unit) =
          fun (x133 : t) ->
            fun (x134 : 'TBuffer) ->
              Ojs.set_prop_ascii (t_to_js x133) "buffer" (Obj.magic x134)
      end
    module AnonymousInterface3 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x136 : Ojs.t) -> x136
        and t_to_js : t -> Ojs.t = fun (x135 : Ojs.t) -> x135
        let (get_bytes_written : t -> int) =
          fun (x137 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x137) "bytesWritten")
        let (set_bytes_written : t -> int -> unit) =
          fun (x138 : t) ->
            fun (x139 : int) ->
              Ojs.set_prop_ascii (t_to_js x138) "bytesWritten"
                (Ojs.int_to_js x139)
        let (get_buffer : t -> 'TBuffer) =
          fun (x140 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x140) "buffer")
        let (set_buffer : t -> 'TBuffer -> unit) =
          fun (x141 : t) ->
            fun (x142 : 'TBuffer) ->
              Ojs.set_prop_ascii (t_to_js x141) "buffer" (Obj.magic x142)
      end
    module AnonymousInterface4 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x144 : Ojs.t) -> x144
        and t_to_js : t -> Ojs.t = fun (x143 : Ojs.t) -> x143
        let (get_bytes_written : t -> int) =
          fun (x145 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x145) "bytesWritten")
        let (set_bytes_written : t -> int -> unit) =
          fun (x146 : t) ->
            fun (x147 : int) ->
              Ojs.set_prop_ascii (t_to_js x146) "bytesWritten"
                (Ojs.int_to_js x147)
        let (get_buffer : t -> string) =
          fun (x148 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x148) "buffer")
        let (set_buffer : t -> string -> unit) =
          fun (x149 : t) ->
            fun (x150 : string) ->
              Ojs.set_prop_ascii (t_to_js x149) "buffer"
                (Ojs.string_to_js x150)
      end
    module AnonymousInterface5 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x152 : Ojs.t) -> x152
        and t_to_js : t -> Ojs.t = fun (x151 : Ojs.t) -> x151
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x153 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x153) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x154 : t) ->
            fun (x155 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x154) "encoding"
                (BufferEncoding.t_to_js x155)
        let (get_flag : t -> string) =
          fun (x156 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x156) "flag")
        let (set_flag : t -> string -> unit) =
          fun (x157 : t) ->
            fun (x158 : string) ->
              Ojs.set_prop_ascii (t_to_js x157) "flag"
                (Ojs.string_to_js x158)
      end
    module AnonymousInterface6 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x160 : Ojs.t) -> x160
        and t_to_js : t -> Ojs.t = fun (x159 : Ojs.t) -> x159
        let (get_encoding : t -> never or_null) =
          fun (x161 : t) ->
            or_null_of_js never_of_js
              (Ojs.get_prop_ascii (t_to_js x161) "encoding")
        let (set_encoding : t -> never or_null -> unit) =
          fun (x163 : t) ->
            fun (x164 : never or_null) ->
              Ojs.set_prop_ascii (t_to_js x163) "encoding"
                (or_null_to_js never_to_js x164)
        let (get_flag : t -> string) =
          fun (x166 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x166) "flag")
        let (set_flag : t -> string -> unit) =
          fun (x167 : t) ->
            fun (x168 : string) ->
              Ojs.set_prop_ascii (t_to_js x167) "flag"
                (Ojs.string_to_js x168)
      end
    module AnonymousInterface7 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x170 : Ojs.t) -> x170
        and t_to_js : t -> Ojs.t = fun (x169 : Ojs.t) -> x169
        let (get_encoding : t -> [ `buffer ]) =
          fun (x171 : t) ->
            let x172 = Ojs.get_prop_ascii (t_to_js x171) "encoding" in
            match Ojs.string_of_js x172 with
            | "buffer" -> `buffer
            | _ -> assert false
        let (set_encoding : t -> [ `buffer ] -> unit) =
          fun (x173 : t) ->
            fun (x174 : [ `buffer ]) ->
              Ojs.set_prop_ascii (t_to_js x173) "encoding"
                (match x174 with | `buffer -> Ojs.string_to_js "buffer")
      end
    module AnonymousInterface8 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x176 : Ojs.t) -> x176
        and t_to_js : t -> Ojs.t = fun (x175 : Ojs.t) -> x175
        let (get_encoding : t -> [ `buffer ]) =
          fun (x177 : t) ->
            let x178 = Ojs.get_prop_ascii (t_to_js x177) "encoding" in
            match Ojs.string_of_js x178 with
            | "buffer" -> `buffer
            | _ -> assert false
        let (set_encoding : t -> [ `buffer ] -> unit) =
          fun (x179 : t) ->
            fun (x180 : [ `buffer ]) ->
              Ojs.set_prop_ascii (t_to_js x179) "encoding"
                (match x180 with | `buffer -> Ojs.string_to_js "buffer")
        let (get_persistent : t -> bool) =
          fun (x181 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x181) "persistent")
        let (set_persistent : t -> bool -> unit) =
          fun (x182 : t) ->
            fun (x183 : bool) ->
              Ojs.set_prop_ascii (t_to_js x182) "persistent"
                (Ojs.bool_to_js x183)
        let (get_recursive : t -> bool) =
          fun (x184 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x184) "recursive")
        let (set_recursive : t -> bool -> unit) =
          fun (x185 : t) ->
            fun (x186 : bool) ->
              Ojs.set_prop_ascii (t_to_js x185) "recursive"
                (Ojs.bool_to_js x186)
      end
    module AnonymousInterface9 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x188 : Ojs.t) -> x188
        and t_to_js : t -> Ojs.t = fun (x187 : Ojs.t) -> x187
        let (get_encoding : t -> [ `buffer ]) =
          fun (x189 : t) ->
            let x190 = Ojs.get_prop_ascii (t_to_js x189) "encoding" in
            match Ojs.string_of_js x190 with
            | "buffer" -> `buffer
            | _ -> assert false
        let (set_encoding : t -> [ `buffer ] -> unit) =
          fun (x191 : t) ->
            fun (x192 : [ `buffer ]) ->
              Ojs.set_prop_ascii (t_to_js x191) "encoding"
                (match x192 with | `buffer -> Ojs.string_to_js "buffer")
        let (get_with_file_types : t -> [ `L_b_false ]) =
          fun (x193 : t) ->
            let x194 = Ojs.get_prop_ascii (t_to_js x193) "withFileTypes" in
            match Ojs.bool_of_js x194 with
            | false -> `L_b_false
            | _ -> assert false
        let (set_with_file_types : t -> [ `L_b_false ] -> unit) =
          fun (x195 : t) ->
            fun (x196 : [ `L_b_false ]) ->
              Ojs.set_prop_ascii (t_to_js x195) "withFileTypes"
                (match x196 with | `L_b_false -> Ojs.string_to_js "LBFalse")
      end
    module AnonymousInterface10 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x198 : Ojs.t) -> x198
        and t_to_js : t -> Ojs.t = fun (x197 : Ojs.t) -> x197
        let (get_encoding : t -> BufferEncoding.t or_null) =
          fun (x199 : t) ->
            or_null_of_js BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x199) "encoding")
        let (set_encoding : t -> BufferEncoding.t or_null -> unit) =
          fun (x201 : t) ->
            fun (x202 : BufferEncoding.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x201) "encoding"
                (or_null_to_js BufferEncoding.t_to_js x202)
        let (get_persistent : t -> bool) =
          fun (x204 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x204) "persistent")
        let (set_persistent : t -> bool -> unit) =
          fun (x205 : t) ->
            fun (x206 : bool) ->
              Ojs.set_prop_ascii (t_to_js x205) "persistent"
                (Ojs.bool_to_js x206)
        let (get_recursive : t -> bool) =
          fun (x207 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x207) "recursive")
        let (set_recursive : t -> bool -> unit) =
          fun (x208 : t) ->
            fun (x209 : bool) ->
              Ojs.set_prop_ascii (t_to_js x208) "recursive"
                (Ojs.bool_to_js x209)
      end
    module AnonymousInterface11 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x211 : Ojs.t) -> x211
        and t_to_js : t -> Ojs.t = fun (x210 : Ojs.t) -> x210
        let (get_encoding : t -> BufferEncoding.t or_null) =
          fun (x212 : t) ->
            or_null_of_js BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x212) "encoding")
        let (set_encoding : t -> BufferEncoding.t or_null -> unit) =
          fun (x214 : t) ->
            fun (x215 : BufferEncoding.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x214) "encoding"
                (or_null_to_js BufferEncoding.t_to_js x215)
        let (get_with_file_types : t -> [ `L_b_false ]) =
          fun (x217 : t) ->
            let x218 = Ojs.get_prop_ascii (t_to_js x217) "withFileTypes" in
            match Ojs.bool_of_js x218 with
            | false -> `L_b_false
            | _ -> assert false
        let (set_with_file_types : t -> [ `L_b_false ] -> unit) =
          fun (x219 : t) ->
            fun (x220 : [ `L_b_false ]) ->
              Ojs.set_prop_ascii (t_to_js x219) "withFileTypes"
                (match x220 with | `L_b_false -> Ojs.string_to_js "LBFalse")
      end
    module AnonymousInterface12 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x222 : Ojs.t) -> x222
        and t_to_js : t -> Ojs.t = fun (x221 : Ojs.t) -> x221
        let (get_flag : t -> string) =
          fun (x223 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x223) "flag")
        let (set_flag : t -> string -> unit) =
          fun (x224 : t) ->
            fun (x225 : string) ->
              Ojs.set_prop_ascii (t_to_js x224) "flag"
                (Ojs.string_to_js x225)
      end
    module AnonymousInterface13 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x227 : Ojs.t) -> x227
        and t_to_js : t -> Ojs.t = fun (x226 : Ojs.t) -> x226
        let (get_flags : t -> string) =
          fun (x228 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x228) "flags")
        let (set_flags : t -> string -> unit) =
          fun (x229 : t) ->
            fun (x230 : string) ->
              Ojs.set_prop_ascii (t_to_js x229) "flags"
                (Ojs.string_to_js x230)
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x231 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x231) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x232 : t) ->
            fun (x233 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x232) "encoding"
                (BufferEncoding.t_to_js x233)
        let (get_fd : t -> int) =
          fun (x234 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x234) "fd")
        let (set_fd : t -> int -> unit) =
          fun (x235 : t) ->
            fun (x236 : int) ->
              Ojs.set_prop_ascii (t_to_js x235) "fd" (Ojs.int_to_js x236)
        let (get_mode : t -> int) =
          fun (x237 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x237) "mode")
        let (set_mode : t -> int -> unit) =
          fun (x238 : t) ->
            fun (x239 : int) ->
              Ojs.set_prop_ascii (t_to_js x238) "mode" (Ojs.int_to_js x239)
        let (get_auto_close : t -> bool) =
          fun (x240 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x240) "autoClose")
        let (set_auto_close : t -> bool -> unit) =
          fun (x241 : t) ->
            fun (x242 : bool) ->
              Ojs.set_prop_ascii (t_to_js x241) "autoClose"
                (Ojs.bool_to_js x242)
        let (get_emit_close : t -> bool) =
          fun (x243 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x243) "emitClose")
        let (set_emit_close : t -> bool -> unit) =
          fun (x244 : t) ->
            fun (x245 : bool) ->
              Ojs.set_prop_ascii (t_to_js x244) "emitClose"
                (Ojs.bool_to_js x245)
        let (get_start : t -> int) =
          fun (x246 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x246) "start")
        let (set_start : t -> int -> unit) =
          fun (x247 : t) ->
            fun (x248 : int) ->
              Ojs.set_prop_ascii (t_to_js x247) "start" (Ojs.int_to_js x248)
        let (get_end : t -> int) =
          fun (x249 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x249) "end")
        let (set_end : t -> int -> unit) =
          fun (x250 : t) ->
            fun (x251 : int) ->
              Ojs.set_prop_ascii (t_to_js x250) "end" (Ojs.int_to_js x251)
        let (get_high_water_mark : t -> int) =
          fun (x252 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x252) "highWaterMark")
        let (set_high_water_mark : t -> int -> unit) =
          fun (x253 : t) ->
            fun (x254 : int) ->
              Ojs.set_prop_ascii (t_to_js x253) "highWaterMark"
                (Ojs.int_to_js x254)
      end
    module AnonymousInterface14 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x256 : Ojs.t) -> x256
        and t_to_js : t -> Ojs.t = fun (x255 : Ojs.t) -> x255
        let (get_flags : t -> string) =
          fun (x257 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x257) "flags")
        let (set_flags : t -> string -> unit) =
          fun (x258 : t) ->
            fun (x259 : string) ->
              Ojs.set_prop_ascii (t_to_js x258) "flags"
                (Ojs.string_to_js x259)
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x260 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x260) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x261 : t) ->
            fun (x262 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x261) "encoding"
                (BufferEncoding.t_to_js x262)
        let (get_fd : t -> int) =
          fun (x263 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x263) "fd")
        let (set_fd : t -> int -> unit) =
          fun (x264 : t) ->
            fun (x265 : int) ->
              Ojs.set_prop_ascii (t_to_js x264) "fd" (Ojs.int_to_js x265)
        let (get_mode : t -> int) =
          fun (x266 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x266) "mode")
        let (set_mode : t -> int -> unit) =
          fun (x267 : t) ->
            fun (x268 : int) ->
              Ojs.set_prop_ascii (t_to_js x267) "mode" (Ojs.int_to_js x268)
        let (get_auto_close : t -> bool) =
          fun (x269 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x269) "autoClose")
        let (set_auto_close : t -> bool -> unit) =
          fun (x270 : t) ->
            fun (x271 : bool) ->
              Ojs.set_prop_ascii (t_to_js x270) "autoClose"
                (Ojs.bool_to_js x271)
        let (get_emit_close : t -> bool) =
          fun (x272 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x272) "emitClose")
        let (set_emit_close : t -> bool -> unit) =
          fun (x273 : t) ->
            fun (x274 : bool) ->
              Ojs.set_prop_ascii (t_to_js x273) "emitClose"
                (Ojs.bool_to_js x274)
        let (get_start : t -> int) =
          fun (x275 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x275) "start")
        let (set_start : t -> int -> unit) =
          fun (x276 : t) ->
            fun (x277 : int) ->
              Ojs.set_prop_ascii (t_to_js x276) "start" (Ojs.int_to_js x277)
        let (get_high_water_mark : t -> int) =
          fun (x278 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x278) "highWaterMark")
        let (set_high_water_mark : t -> int -> unit) =
          fun (x279 : t) ->
            fun (x280 : int) ->
              Ojs.set_prop_ascii (t_to_js x279) "highWaterMark"
                (Ojs.int_to_js x280)
      end
    module AnonymousInterface15 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x282 : Ojs.t) -> x282
        and t_to_js : t -> Ojs.t = fun (x281 : Ojs.t) -> x281
        let (get_mode : t -> Mode.t) =
          fun (x283 : t) ->
            Mode.t_of_js (Ojs.get_prop_ascii (t_to_js x283) "mode")
        let (set_mode : t -> Mode.t -> unit) =
          fun (x284 : t) ->
            fun (x285 : Mode.t) ->
              Ojs.set_prop_ascii (t_to_js x284) "mode" (Mode.t_to_js x285)
        let (get_flag : t -> string) =
          fun (x286 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x286) "flag")
        let (set_flag : t -> string -> unit) =
          fun (x287 : t) ->
            fun (x288 : string) ->
              Ojs.set_prop_ascii (t_to_js x287) "flag"
                (Ojs.string_to_js x288)
      end
    module AnonymousInterface16 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x290 : Ojs.t) -> x290
        and t_to_js : t -> Ojs.t = fun (x289 : Ojs.t) -> x289
        let (get_persistent : t -> bool) =
          fun (x291 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x291) "persistent")
        let (set_persistent : t -> bool -> unit) =
          fun (x292 : t) ->
            fun (x293 : bool) ->
              Ojs.set_prop_ascii (t_to_js x292) "persistent"
                (Ojs.bool_to_js x293)
        let (get_interval : t -> int) =
          fun (x294 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x294) "interval")
        let (set_interval : t -> int -> unit) =
          fun (x295 : t) ->
            fun (x296 : int) ->
              Ojs.set_prop_ascii (t_to_js x295) "interval"
                (Ojs.int_to_js x296)
      end
    module AnonymousInterface17 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x298 : Ojs.t) -> x298
        and t_to_js : t -> Ojs.t = fun (x297 : Ojs.t) -> x297
        let (get_recursive : t -> [ `L_b_false ]) =
          fun (x299 : t) ->
            let x300 = Ojs.get_prop_ascii (t_to_js x299) "recursive" in
            match Ojs.bool_of_js x300 with
            | false -> `L_b_false
            | _ -> assert false
        let (set_recursive : t -> [ `L_b_false ] -> unit) =
          fun (x301 : t) ->
            fun (x302 : [ `L_b_false ]) ->
              Ojs.set_prop_ascii (t_to_js x301) "recursive"
                (match x302 with | `L_b_false -> Ojs.string_to_js "LBFalse")
      end
    module AnonymousInterface18 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x304 : Ojs.t) -> x304
        and t_to_js : t -> Ojs.t = fun (x303 : Ojs.t) -> x303
        let (get_recursive : t -> [ `L_b_true ]) =
          fun (x305 : t) ->
            let x306 = Ojs.get_prop_ascii (t_to_js x305) "recursive" in
            match Ojs.bool_of_js x306 with
            | true -> `L_b_true
            | _ -> assert false
        let (set_recursive : t -> [ `L_b_true ] -> unit) =
          fun (x307 : t) ->
            fun (x308 : [ `L_b_true ]) ->
              Ojs.set_prop_ascii (t_to_js x307) "recursive"
                (match x308 with | `L_b_true -> Ojs.string_to_js "LBTrue")
      end
    module AnonymousInterface19 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x310 : Ojs.t) -> x310
        and t_to_js : t -> Ojs.t = fun (x309 : Ojs.t) -> x309
        let (get_with_file_types : t -> [ `L_b_false ]) =
          fun (x311 : t) ->
            let x312 = Ojs.get_prop_ascii (t_to_js x311) "withFileTypes" in
            match Ojs.bool_of_js x312 with
            | false -> `L_b_false
            | _ -> assert false
        let (set_with_file_types : t -> [ `L_b_false ] -> unit) =
          fun (x313 : t) ->
            fun (x314 : [ `L_b_false ]) ->
              Ojs.set_prop_ascii (t_to_js x313) "withFileTypes"
                (match x314 with | `L_b_false -> Ojs.string_to_js "LBFalse")
      end
    module AnonymousInterface20 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x316 : Ojs.t) -> x316
        and t_to_js : t -> Ojs.t = fun (x315 : Ojs.t) -> x315
        let (get_with_file_types : t -> [ `L_b_true ]) =
          fun (x317 : t) ->
            let x318 = Ojs.get_prop_ascii (t_to_js x317) "withFileTypes" in
            match Ojs.bool_of_js x318 with
            | true -> `L_b_true
            | _ -> assert false
        let (set_with_file_types : t -> [ `L_b_true ] -> unit) =
          fun (x319 : t) ->
            fun (x320 : [ `L_b_true ]) ->
              Ojs.set_prop_ascii (t_to_js x319) "withFileTypes"
                (match x320 with | `L_b_true -> Ojs.string_to_js "LBTrue")
      end
    module PathLike =
      struct
        type t = string
        let rec t_of_js : Ojs.t -> t =
          fun (x322 : Ojs.t) -> Ojs.string_of_js x322
        and t_to_js : t -> Ojs.t =
          fun (x321 : string) -> Ojs.string_to_js x321
      end
    module NoParamCallback =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x324 : Ojs.t) -> x324
        and t_to_js : t -> Ojs.t = fun (x323 : Ojs.t) -> x323
        let (apply : t -> err:ErrnoException.t or_null -> unit) =
          fun (x327 : t) ->
            fun ~err:(x325 : ErrnoException.t or_null) ->
              ignore
                (Ojs.apply (t_to_js x327)
                   [|(or_null_to_js ErrnoException.t_to_js x325)|])
      end
    module BufferEncodingOption =
      struct
        type t = [ `buffer ]
        let rec t_of_js : Ojs.t -> t =
          fun (x329 : Ojs.t) ->
            let x330 = x329 in
            match Ojs.string_of_js x330 with
            | "buffer" -> `buffer
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x328 : [ `buffer ]) ->
            match x328 with | `buffer -> Ojs.string_to_js "buffer"
      end
    module BaseEncodingOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x332 : Ojs.t) -> x332
        and t_to_js : t -> Ojs.t = fun (x331 : Ojs.t) -> x331
        let (get_encoding : t -> BufferEncoding.t or_null) =
          fun (x333 : t) ->
            or_null_of_js BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x333) "encoding")
        let (set_encoding : t -> BufferEncoding.t or_null -> unit) =
          fun (x335 : t) ->
            fun (x336 : BufferEncoding.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x335) "encoding"
                (or_null_to_js BufferEncoding.t_to_js x336)
      end
    module Dirent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x339 : Ojs.t) -> x339
        and t_to_js : t -> Ojs.t = fun (x338 : Ojs.t) -> x338
        let (is_file : t -> bool) =
          fun (x340 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x340) "isFile" [||])
        let (is_directory : t -> bool) =
          fun (x341 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x341) "isDirectory" [||])
        let (is_block_device : t -> bool) =
          fun (x342 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x342) "isBlockDevice" [||])
        let (is_character_device : t -> bool) =
          fun (x343 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x343) "isCharacterDevice" [||])
        let (is_symbolic_link : t -> bool) =
          fun (x344 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x344) "isSymbolicLink" [||])
        let (is_fifo : t -> bool) =
          fun (x345 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x345) "isFIFO" [||])
        let (is_socket : t -> bool) =
          fun (x346 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x346) "isSocket" [||])
        let (get_name : t -> string) =
          fun (x347 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x347) "name")
        let (set_name : t -> string -> unit) =
          fun (x348 : t) ->
            fun (x349 : string) ->
              Ojs.set_prop_ascii (t_to_js x348) "name"
                (Ojs.string_to_js x349)
      end
    module Dir =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x351 : Ojs.t) -> x351
        and t_to_js : t -> Ojs.t = fun (x350 : Ojs.t) -> x350
        let (get_path : t -> string) =
          fun (x352 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x352) "path")
        let (close : t -> unit Promise.t) =
          fun (x353 : t) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call (t_to_js x353) "close" [||])
        let (close' : t -> cb:NoParamCallback.t -> unit) =
          fun (x356 : t) ->
            fun ~cb:(x355 : NoParamCallback.t) ->
              ignore
                (Ojs.call (t_to_js x356) "close"
                   [|(NoParamCallback.t_to_js x355)|])
        let (close_sync : t -> unit) =
          fun (x357 : t) -> ignore (Ojs.call (t_to_js x357) "closeSync" [||])
        let (read : t -> Dirent.t or_null Promise.t) =
          fun (x358 : t) ->
            Promise.t_of_js
              (fun (x359 : Ojs.t) -> or_null_of_js Dirent.t_of_js x359)
              (Ojs.call (t_to_js x358) "read" [||])
        let (read' :
          t ->
            cb:(err:ErrnoException.t or_null ->
                  dir_ent:Dirent.t or_null -> unit)
              -> unit)
          =
          fun (x366 : t) ->
            fun
              ~cb:(x361 :
                    err:ErrnoException.t or_null ->
                      dir_ent:Dirent.t or_null -> unit)
              ->
              ignore
                (Ojs.call (t_to_js x366) "read"
                   [|(Ojs.fun_to_js 2
                        (fun (x362 : Ojs.t) ->
                           fun (x364 : Ojs.t) ->
                             x361
                               ~err:(or_null_of_js ErrnoException.t_of_js
                                       x362)
                               ~dir_ent:(or_null_of_js Dirent.t_of_js x364)))|])
        let (read_sync : t -> Dirent.t or_null) =
          fun (x367 : t) ->
            or_null_of_js Dirent.t_of_js
              (Ojs.call (t_to_js x367) "readSync" [||])
      end
    module FSWatcher =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x370 : Ojs.t) -> x370
        and t_to_js : t -> Ojs.t = fun (x369 : Ojs.t) -> x369
        let (close : t -> unit) =
          fun (x371 : t) -> ignore (Ojs.call (t_to_js x371) "close" [||])
        module ChangeListener =
          struct
            type t = eventType:string -> filename:Buffer.t or_string -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x376 : Ojs.t) ->
                fun ~eventType:(x377 : string) ->
                  fun ~filename:(x378 : Buffer.t or_string) ->
                    ignore
                      (Ojs.apply x376
                         [|(Ojs.string_to_js x377);(or_string_to_js
                                                      Buffer.t_to_js x378)|])
            and t_to_js : t -> Ojs.t =
              fun
                (x372 :
                  eventType:string -> filename:Buffer.t or_string -> unit)
                ->
                Ojs.fun_to_js 2
                  (fun (x373 : Ojs.t) ->
                     fun (x374 : Ojs.t) ->
                       x372 ~eventType:(Ojs.string_of_js x373)
                         ~filename:(or_string_of_js Buffer.t_of_js x374))
          end
        module ErrorListener =
          struct
            type t = error:Error.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x382 : Ojs.t) ->
                fun ~error:(x383 : Error.t) ->
                  ignore (Ojs.apply x382 [|(Error.t_to_js x383)|])
            and t_to_js : t -> Ojs.t =
              fun (x380 : error:Error.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x381 : Ojs.t) -> x380 ~error:(Error.t_of_js x381))
          end
        module CloseListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x385 : Ojs.t) -> fun () -> ignore (Ojs.apply x385 [||])
            and t_to_js : t -> Ojs.t =
              fun (x384 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x384 ())
          end
        type listener =
          [ `Change of ChangeListener.t  | `Error of ErrorListener.t 
          | `Close of CloseListener.t ]
        let rec listener_to_js : listener -> Ojs.t =
          fun
            (x386 :
              [ `Change of ChangeListener.t  | `Error of ErrorListener.t 
              | `Close of CloseListener.t ])
            ->
            match x386 with
            | `Change x387 -> ChangeListener.t_to_js x387
            | `Error x388 -> ErrorListener.t_to_js x388
            | `Close x389 -> CloseListener.t_to_js x389
        let (on : t -> string -> Ojs.t -> unit) =
          fun (x394 : t) ->
            fun (x392 : string) ->
              fun (x393 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x394) "on"
                     [|(Ojs.string_to_js x392);x393|])
        let (add_listener : t -> string -> Ojs.t -> unit) =
          fun (x397 : t) ->
            fun (x395 : string) ->
              fun (x396 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x397) "addListener"
                     [|(Ojs.string_to_js x395);x396|])
        let (once : t -> string -> Ojs.t -> unit) =
          fun (x400 : t) ->
            fun (x398 : string) ->
              fun (x399 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x400) "once"
                     [|(Ojs.string_to_js x398);x399|])
        let (prepend_listener : t -> string -> Ojs.t -> unit) =
          fun (x403 : t) ->
            fun (x401 : string) ->
              fun (x402 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x403) "prependListener"
                     [|(Ojs.string_to_js x401);x402|])
        let (prepend_once_listener : t -> string -> Ojs.t -> unit) =
          fun (x406 : t) ->
            fun (x404 : string) ->
              fun (x405 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x406) "prependOnceListener"
                     [|(Ojs.string_to_js x404);x405|])
        let with_listener_fn fn t =
          function
          | `Change f -> (fn t "change") @@ (ChangeListener.t_to_js f)
          | `Error f -> (fn t "error") @@ (ErrorListener.t_to_js f)
          | `Close f -> (fn t "close") @@ (CloseListener.t_to_js f)
        let on = with_listener_fn on
        let add_listener = with_listener_fn add_listener
        let once = with_listener_fn once
        let prepend_listener = with_listener_fn prepend_listener
        let prepend_once_listener = with_listener_fn prepend_once_listener
      end
    module ReadStream =
      struct
        include struct include Stream.Readable end
        let (close : t -> unit) =
          fun (x410 : t) -> ignore (Ojs.call (t_to_js x410) "close" [||])
        let (get_bytes_read : t -> int) =
          fun (x411 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x411) "bytesRead")
        let (set_bytes_read : t -> int -> unit) =
          fun (x412 : t) ->
            fun (x413 : int) ->
              Ojs.set_prop_ascii (t_to_js x412) "bytesRead"
                (Ojs.int_to_js x413)
        let (get_path : t -> Buffer.t or_string) =
          fun (x414 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x414) "path")
        let (set_path : t -> Buffer.t or_string -> unit) =
          fun (x416 : t) ->
            fun (x417 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x416) "path"
                (or_string_to_js Buffer.t_to_js x417)
        let (get_pending : t -> bool) =
          fun (x419 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x419) "pending")
        let (set_pending : t -> bool -> unit) =
          fun (x420 : t) ->
            fun (x421 : bool) ->
              Ojs.set_prop_ascii (t_to_js x420) "pending"
                (Ojs.bool_to_js x421)
        module CloseListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x423 : Ojs.t) -> fun () -> ignore (Ojs.apply x423 [||])
            and t_to_js : t -> Ojs.t =
              fun (x422 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x422 ())
          end
        module DataListener =
          struct
            type t = chunk:Buffer.t or_string -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x427 : Ojs.t) ->
                fun ~chunk:(x428 : Buffer.t or_string) ->
                  ignore
                    (Ojs.apply x427 [|(or_string_to_js Buffer.t_to_js x428)|])
            and t_to_js : t -> Ojs.t =
              fun (x424 : chunk:Buffer.t or_string -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x425 : Ojs.t) ->
                     x424 ~chunk:(or_string_of_js Buffer.t_of_js x425))
          end
        module EndListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x431 : Ojs.t) -> fun () -> ignore (Ojs.apply x431 [||])
            and t_to_js : t -> Ojs.t =
              fun (x430 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x430 ())
          end
        module ErrorListener =
          struct
            type t = err:Error.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x434 : Ojs.t) ->
                fun ~err:(x435 : Error.t) ->
                  ignore (Ojs.apply x434 [|(Error.t_to_js x435)|])
            and t_to_js : t -> Ojs.t =
              fun (x432 : err:Error.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x433 : Ojs.t) -> x432 ~err:(Error.t_of_js x433))
          end
        module OpenListener =
          struct
            type t = fd:int -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x438 : Ojs.t) ->
                fun ~fd:(x439 : int) ->
                  ignore (Ojs.apply x438 [|(Ojs.int_to_js x439)|])
            and t_to_js : t -> Ojs.t =
              fun (x436 : fd:int -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x437 : Ojs.t) -> x436 ~fd:(Ojs.int_of_js x437))
          end
        module PauseListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x441 : Ojs.t) -> fun () -> ignore (Ojs.apply x441 [||])
            and t_to_js : t -> Ojs.t =
              fun (x440 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x440 ())
          end
        module ReadableListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x443 : Ojs.t) -> fun () -> ignore (Ojs.apply x443 [||])
            and t_to_js : t -> Ojs.t =
              fun (x442 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x442 ())
          end
        module ReadyListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x445 : Ojs.t) -> fun () -> ignore (Ojs.apply x445 [||])
            and t_to_js : t -> Ojs.t =
              fun (x444 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x444 ())
          end
        module ResumeListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x447 : Ojs.t) -> fun () -> ignore (Ojs.apply x447 [||])
            and t_to_js : t -> Ojs.t =
              fun (x446 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x446 ())
          end
        type listener =
          [ `Close of CloseListener.t  | `Data of DataListener.t 
          | `End of EndListener.t  | `Error of ErrorListener.t 
          | `Open of OpenListener.t  | `Pause of PauseListener.t 
          | `Readable of ReadableListener.t  | `Ready of ReadyListener.t 
          | `Resume of ResumeListener.t ]
        let rec listener_to_js : listener -> Ojs.t =
          fun
            (x448 :
              [ `Close of CloseListener.t  | `Data of DataListener.t 
              | `End of EndListener.t  | `Error of ErrorListener.t 
              | `Open of OpenListener.t  | `Pause of PauseListener.t 
              | `Readable of ReadableListener.t  | `Ready of ReadyListener.t 
              | `Resume of ResumeListener.t ])
            ->
            match x448 with
            | `Close x449 -> CloseListener.t_to_js x449
            | `Data x450 -> DataListener.t_to_js x450
            | `End x451 -> EndListener.t_to_js x451
            | `Error x452 -> ErrorListener.t_to_js x452
            | `Open x453 -> OpenListener.t_to_js x453
            | `Pause x454 -> PauseListener.t_to_js x454
            | `Readable x455 -> ReadableListener.t_to_js x455
            | `Ready x456 -> ReadyListener.t_to_js x456
            | `Resume x457 -> ResumeListener.t_to_js x457
        let (on : t -> string -> Ojs.t -> unit) =
          fun (x462 : t) ->
            fun (x460 : string) ->
              fun (x461 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x462) "on"
                     [|(Ojs.string_to_js x460);x461|])
        let (add_listener : t -> string -> Ojs.t -> unit) =
          fun (x465 : t) ->
            fun (x463 : string) ->
              fun (x464 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x465) "addListener"
                     [|(Ojs.string_to_js x463);x464|])
        let (once : t -> string -> Ojs.t -> unit) =
          fun (x468 : t) ->
            fun (x466 : string) ->
              fun (x467 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x468) "once"
                     [|(Ojs.string_to_js x466);x467|])
        let (prepend_listener : t -> string -> Ojs.t -> unit) =
          fun (x471 : t) ->
            fun (x469 : string) ->
              fun (x470 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x471) "prependListener"
                     [|(Ojs.string_to_js x469);x470|])
        let (prepend_once_listener : t -> string -> Ojs.t -> unit) =
          fun (x474 : t) ->
            fun (x472 : string) ->
              fun (x473 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x474) "prependOnceListener"
                     [|(Ojs.string_to_js x472);x473|])
        let with_listener_fn fn t =
          function
          | `Close f -> (fn t "close") @@ (CloseListener.t_to_js f)
          | `Data f -> (fn t "data") @@ (DataListener.t_to_js f)
          | `End f -> (fn t "end") @@ (EndListener.t_to_js f)
          | `Error f -> (fn t "error") @@ (ErrorListener.t_to_js f)
          | `Open f -> (fn t "open") @@ (OpenListener.t_to_js f)
          | `Pause f -> (fn t "pause") @@ (PauseListener.t_to_js f)
          | `Readable f -> (fn t "readable") @@ (ReadableListener.t_to_js f)
          | `Ready f -> (fn t "ready") @@ (ReadyListener.t_to_js f)
          | `Resume f -> (fn t "resume") @@ (ResumeListener.t_to_js f)
        let on = with_listener_fn on
        let add_listener = with_listener_fn add_listener
        let once = with_listener_fn once
        let prepend_listener = with_listener_fn prepend_listener
        let prepend_once_listener = with_listener_fn prepend_once_listener
      end
    module WriteStream =
      struct
        include struct include Stream.Writable end
        let (close : t -> unit) =
          fun (x484 : t) -> ignore (Ojs.call (t_to_js x484) "close" [||])
        let (get_bytes_written : t -> int) =
          fun (x485 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x485) "bytesWritten")
        let (set_bytes_written : t -> int -> unit) =
          fun (x486 : t) ->
            fun (x487 : int) ->
              Ojs.set_prop_ascii (t_to_js x486) "bytesWritten"
                (Ojs.int_to_js x487)
        let (get_path : t -> Buffer.t or_string) =
          fun (x488 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x488) "path")
        let (set_path : t -> Buffer.t or_string -> unit) =
          fun (x490 : t) ->
            fun (x491 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x490) "path"
                (or_string_to_js Buffer.t_to_js x491)
        let (get_pending : t -> bool) =
          fun (x493 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x493) "pending")
        let (set_pending : t -> bool -> unit) =
          fun (x494 : t) ->
            fun (x495 : bool) ->
              Ojs.set_prop_ascii (t_to_js x494) "pending"
                (Ojs.bool_to_js x495)
        module CloseListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x497 : Ojs.t) -> fun () -> ignore (Ojs.apply x497 [||])
            and t_to_js : t -> Ojs.t =
              fun (x496 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x496 ())
          end
        module DrainListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x499 : Ojs.t) -> fun () -> ignore (Ojs.apply x499 [||])
            and t_to_js : t -> Ojs.t =
              fun (x498 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x498 ())
          end
        module ErrorListener =
          struct
            type t = err:Error.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x502 : Ojs.t) ->
                fun ~err:(x503 : Error.t) ->
                  ignore (Ojs.apply x502 [|(Error.t_to_js x503)|])
            and t_to_js : t -> Ojs.t =
              fun (x500 : err:Error.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x501 : Ojs.t) -> x500 ~err:(Error.t_of_js x501))
          end
        module FinishListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x505 : Ojs.t) -> fun () -> ignore (Ojs.apply x505 [||])
            and t_to_js : t -> Ojs.t =
              fun (x504 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x504 ())
          end
        module Open_Listener =
          struct
            type t = fd:int -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x508 : Ojs.t) ->
                fun ~fd:(x509 : int) ->
                  ignore (Ojs.apply x508 [|(Ojs.int_to_js x509)|])
            and t_to_js : t -> Ojs.t =
              fun (x506 : fd:int -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x507 : Ojs.t) -> x506 ~fd:(Ojs.int_of_js x507))
          end
        module PipeListener =
          struct
            type t = src:Stream.Readable.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x512 : Ojs.t) ->
                fun ~src:(x513 : Stream.Readable.t) ->
                  ignore (Ojs.apply x512 [|(Stream.Readable.t_to_js x513)|])
            and t_to_js : t -> Ojs.t =
              fun (x510 : src:Stream.Readable.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x511 : Ojs.t) ->
                     x510 ~src:(Stream.Readable.t_of_js x511))
          end
        module ReadyListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x515 : Ojs.t) -> fun () -> ignore (Ojs.apply x515 [||])
            and t_to_js : t -> Ojs.t =
              fun (x514 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x514 ())
          end
        module UnpipeListener =
          struct
            type t = src:Stream.Readable.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x518 : Ojs.t) ->
                fun ~src:(x519 : Stream.Readable.t) ->
                  ignore (Ojs.apply x518 [|(Stream.Readable.t_to_js x519)|])
            and t_to_js : t -> Ojs.t =
              fun (x516 : src:Stream.Readable.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x517 : Ojs.t) ->
                     x516 ~src:(Stream.Readable.t_of_js x517))
          end
        type listener =
          [ `Close of CloseListener.t  | `Drain of DrainListener.t 
          | `Error of ErrorListener.t  | `Finish of FinishListener.t 
          | `Open_ of Open_Listener.t  | `Pipe of PipeListener.t 
          | `Ready of ReadyListener.t  | `Unpipe of UnpipeListener.t ]
        let rec listener_to_js : listener -> Ojs.t =
          fun
            (x520 :
              [ `Close of CloseListener.t  | `Drain of DrainListener.t 
              | `Error of ErrorListener.t  | `Finish of FinishListener.t 
              | `Open_ of Open_Listener.t  | `Pipe of PipeListener.t 
              | `Ready of ReadyListener.t  | `Unpipe of UnpipeListener.t ])
            ->
            match x520 with
            | `Close x521 -> CloseListener.t_to_js x521
            | `Drain x522 -> DrainListener.t_to_js x522
            | `Error x523 -> ErrorListener.t_to_js x523
            | `Finish x524 -> FinishListener.t_to_js x524
            | `Open_ x525 -> Open_Listener.t_to_js x525
            | `Pipe x526 -> PipeListener.t_to_js x526
            | `Ready x527 -> ReadyListener.t_to_js x527
            | `Unpipe x528 -> UnpipeListener.t_to_js x528
        let (on : t -> string -> Ojs.t -> unit) =
          fun (x533 : t) ->
            fun (x531 : string) ->
              fun (x532 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x533) "on"
                     [|(Ojs.string_to_js x531);x532|])
        let (add_listener : t -> string -> Ojs.t -> unit) =
          fun (x536 : t) ->
            fun (x534 : string) ->
              fun (x535 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x536) "addListener"
                     [|(Ojs.string_to_js x534);x535|])
        let (once : t -> string -> Ojs.t -> unit) =
          fun (x539 : t) ->
            fun (x537 : string) ->
              fun (x538 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x539) "once"
                     [|(Ojs.string_to_js x537);x538|])
        let (prepend_listener : t -> string -> Ojs.t -> unit) =
          fun (x542 : t) ->
            fun (x540 : string) ->
              fun (x541 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x542) "prependListener"
                     [|(Ojs.string_to_js x540);x541|])
        let (prepend_once_listener : t -> string -> Ojs.t -> unit) =
          fun (x545 : t) ->
            fun (x543 : string) ->
              fun (x544 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x545) "prependOnceListener"
                     [|(Ojs.string_to_js x543);x544|])
        let with_listener_fn fn t =
          function
          | `Close f -> (fn t "close") @@ (CloseListener.t_to_js f)
          | `Drain f -> (fn t "drain") @@ (DrainListener.t_to_js f)
          | `Error f -> (fn t "error") @@ (ErrorListener.t_to_js f)
          | `Finish f -> (fn t "finish") @@ (FinishListener.t_to_js f)
          | `Open_ f -> (fn t "open_") @@ (Open_Listener.t_to_js f)
          | `Pipe f -> (fn t "pipe") @@ (PipeListener.t_to_js f)
          | `Ready f -> (fn t "ready") @@ (ReadyListener.t_to_js f)
          | `Unpipe f -> (fn t "unpipe") @@ (UnpipeListener.t_to_js f)
        let on = with_listener_fn on
        let add_listener = with_listener_fn add_listener
        let once = with_listener_fn once
        let prepend_listener = with_listener_fn prepend_listener
        let prepend_once_listener = with_listener_fn prepend_once_listener
      end
    let (rename :
      PathLike.t -> PathLike.t -> callback:NoParamCallback.t -> unit) =
      fun (x554 : PathLike.t) ->
        fun (x555 : PathLike.t) ->
          fun ~callback:(x556 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "rename"
                 [|(PathLike.t_to_js x554);(PathLike.t_to_js x555);(NoParamCallback.t_to_js
                                                                    x556)|])
    module Rename =
      struct
        let (__promisify__ : PathLike.t -> PathLike.t -> unit Promise.t) =
          fun (x557 : PathLike.t) ->
            fun (x558 : PathLike.t) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "rename")
                   "__promisify__"
                   [|(PathLike.t_to_js x557);(PathLike.t_to_js x558)|])
      end
    let (rename_sync : PathLike.t -> PathLike.t -> unit) =
      fun (x560 : PathLike.t) ->
        fun (x561 : PathLike.t) ->
          ignore
            (Ojs.call Import.fs "renameSync"
               [|(PathLike.t_to_js x560);(PathLike.t_to_js x561)|])
    let (truncate :
      PathLike.t ->
        len:int or_null_or_undefined -> callback:NoParamCallback.t -> unit)
      =
      fun (x562 : PathLike.t) ->
        fun ~len:(x563 : int or_null_or_undefined) ->
          fun ~callback:(x565 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "truncate"
                 [|(PathLike.t_to_js x562);(or_null_or_undefined_to_js
                                              Ojs.int_to_js x563);(NoParamCallback.t_to_js
                                                                    x565)|])
    let (truncate : PathLike.t -> callback:NoParamCallback.t -> unit) =
      fun (x566 : PathLike.t) ->
        fun ~callback:(x567 : NoParamCallback.t) ->
          ignore
            (Ojs.call Import.fs "truncate"
               [|(PathLike.t_to_js x566);(NoParamCallback.t_to_js x567)|])
    module Truncate =
      struct
        let (__promisify__ :
          PathLike.t -> ?len:int or_null -> unit -> unit Promise.t) =
          fun (x568 : PathLike.t) ->
            fun ?len:(x569 : int or_null option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x573 = Ojs.get_prop_ascii Import.fs "truncate" in
                   Ojs.call (Ojs.get_prop_ascii x573 "__promisify__") "apply"
                     [|x573;((let x570 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x570 "push"
                                   [|(PathLike.t_to_js x568)|]);
                              (match x569 with
                               | Some x571 ->
                                   ignore
                                     (Ojs.call x570 "push"
                                        [|(or_null_to_js Ojs.int_to_js x571)|])
                               | None -> ());
                              x570))|])
      end
    let (truncate_sync : PathLike.t -> ?len:int or_null -> unit -> unit) =
      fun (x575 : PathLike.t) ->
        fun ?len:(x576 : int or_null option) ->
          fun () ->
            ignore
              (let x580 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x580 "truncateSync") "apply"
                 [|x580;((let x577 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x577 "push" [|(PathLike.t_to_js x575)|]);
                          (match x576 with
                           | Some x578 ->
                               ignore
                                 (Ojs.call x577 "push"
                                    [|(or_null_to_js Ojs.int_to_js x578)|])
                           | None -> ());
                          x577))|])
    let (ftruncate :
      int ->
        len:int or_null_or_undefined -> callback:NoParamCallback.t -> unit)
      =
      fun (x581 : int) ->
        fun ~len:(x582 : int or_null_or_undefined) ->
          fun ~callback:(x584 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "ftruncate"
                 [|(Ojs.int_to_js x581);(or_null_or_undefined_to_js
                                           Ojs.int_to_js x582);(NoParamCallback.t_to_js
                                                                  x584)|])
    let (ftruncate : int -> callback:NoParamCallback.t -> unit) =
      fun (x585 : int) ->
        fun ~callback:(x586 : NoParamCallback.t) ->
          ignore
            (Ojs.call Import.fs "ftruncate"
               [|(Ojs.int_to_js x585);(NoParamCallback.t_to_js x586)|])
    module Ftruncate =
      struct
        let (__promisify__ :
          int -> ?len:int or_null -> unit -> unit Promise.t) =
          fun (x587 : int) ->
            fun ?len:(x588 : int or_null option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x592 = Ojs.get_prop_ascii Import.fs "ftruncate" in
                   Ojs.call (Ojs.get_prop_ascii x592 "__promisify__") "apply"
                     [|x592;((let x589 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x589 "push"
                                   [|(Ojs.int_to_js x587)|]);
                              (match x588 with
                               | Some x590 ->
                                   ignore
                                     (Ojs.call x589 "push"
                                        [|(or_null_to_js Ojs.int_to_js x590)|])
                               | None -> ());
                              x589))|])
      end
    let (ftruncate_sync : int -> ?len:int or_null -> unit -> unit) =
      fun (x594 : int) ->
        fun ?len:(x595 : int or_null option) ->
          fun () ->
            ignore
              (let x599 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x599 "ftruncateSync") "apply"
                 [|x599;((let x596 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x596 "push" [|(Ojs.int_to_js x594)|]);
                          (match x595 with
                           | Some x597 ->
                               ignore
                                 (Ojs.call x596 "push"
                                    [|(or_null_to_js Ojs.int_to_js x597)|])
                           | None -> ());
                          x596))|])
    let (chown :
      PathLike.t -> uid:int -> gid:int -> callback:NoParamCallback.t -> unit)
      =
      fun (x600 : PathLike.t) ->
        fun ~uid:(x601 : int) ->
          fun ~gid:(x602 : int) ->
            fun ~callback:(x603 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "chown"
                   [|(PathLike.t_to_js x600);(Ojs.int_to_js x601);(Ojs.int_to_js
                                                                    x602);(
                     NoParamCallback.t_to_js x603)|])
    module Chown =
      struct
        let (__promisify__ :
          PathLike.t -> uid:int -> gid:int -> unit Promise.t) =
          fun (x604 : PathLike.t) ->
            fun ~uid:(x605 : int) ->
              fun ~gid:(x606 : int) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (Ojs.get_prop_ascii Import.fs "chown")
                     "__promisify__"
                     [|(PathLike.t_to_js x604);(Ojs.int_to_js x605);(
                       Ojs.int_to_js x606)|])
      end
    let (chown_sync : PathLike.t -> uid:int -> gid:int -> unit) =
      fun (x608 : PathLike.t) ->
        fun ~uid:(x609 : int) ->
          fun ~gid:(x610 : int) ->
            ignore
              (Ojs.call Import.fs "chownSync"
                 [|(PathLike.t_to_js x608);(Ojs.int_to_js x609);(Ojs.int_to_js
                                                                   x610)|])
    let (fchown :
      int -> uid:int -> gid:int -> callback:NoParamCallback.t -> unit) =
      fun (x611 : int) ->
        fun ~uid:(x612 : int) ->
          fun ~gid:(x613 : int) ->
            fun ~callback:(x614 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "fchown"
                   [|(Ojs.int_to_js x611);(Ojs.int_to_js x612);(Ojs.int_to_js
                                                                  x613);(
                     NoParamCallback.t_to_js x614)|])
    module Fchown =
      struct
        let (__promisify__ : int -> uid:int -> gid:int -> unit Promise.t) =
          fun (x615 : int) ->
            fun ~uid:(x616 : int) ->
              fun ~gid:(x617 : int) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (Ojs.get_prop_ascii Import.fs "fchown")
                     "__promisify__"
                     [|(Ojs.int_to_js x615);(Ojs.int_to_js x616);(Ojs.int_to_js
                                                                    x617)|])
      end
    let (fchown_sync : int -> uid:int -> gid:int -> unit) =
      fun (x619 : int) ->
        fun ~uid:(x620 : int) ->
          fun ~gid:(x621 : int) ->
            ignore
              (Ojs.call Import.fs "fchownSync"
                 [|(Ojs.int_to_js x619);(Ojs.int_to_js x620);(Ojs.int_to_js
                                                                x621)|])
    let (lchown :
      PathLike.t -> uid:int -> gid:int -> callback:NoParamCallback.t -> unit)
      =
      fun (x622 : PathLike.t) ->
        fun ~uid:(x623 : int) ->
          fun ~gid:(x624 : int) ->
            fun ~callback:(x625 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "lchown"
                   [|(PathLike.t_to_js x622);(Ojs.int_to_js x623);(Ojs.int_to_js
                                                                    x624);(
                     NoParamCallback.t_to_js x625)|])
    module Lchown =
      struct
        let (__promisify__ :
          PathLike.t -> uid:int -> gid:int -> unit Promise.t) =
          fun (x626 : PathLike.t) ->
            fun ~uid:(x627 : int) ->
              fun ~gid:(x628 : int) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (Ojs.get_prop_ascii Import.fs "lchown")
                     "__promisify__"
                     [|(PathLike.t_to_js x626);(Ojs.int_to_js x627);(
                       Ojs.int_to_js x628)|])
      end
    let (lchown_sync : PathLike.t -> uid:int -> gid:int -> unit) =
      fun (x630 : PathLike.t) ->
        fun ~uid:(x631 : int) ->
          fun ~gid:(x632 : int) ->
            ignore
              (Ojs.call Import.fs "lchownSync"
                 [|(PathLike.t_to_js x630);(Ojs.int_to_js x631);(Ojs.int_to_js
                                                                   x632)|])
    let (lutimes :
      PathLike.t ->
        atime:Date.t or_string or_number ->
          mtime:Date.t or_string or_number ->
            callback:NoParamCallback.t -> unit)
      =
      fun (x633 : PathLike.t) ->
        fun ~atime:(x634 : Date.t or_string or_number) ->
          fun ~mtime:(x637 : Date.t or_string or_number) ->
            fun ~callback:(x640 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "lutimes"
                   [|(PathLike.t_to_js x633);(or_number_to_js
                                                (fun
                                                   (x635 : Date.t or_string)
                                                   ->
                                                   or_string_to_js
                                                     Date.t_to_js x635) x634);(
                     or_number_to_js
                       (fun (x638 : Date.t or_string) ->
                          or_string_to_js Date.t_to_js x638) x637);(NoParamCallback.t_to_js
                                                                    x640)|])
    module Lutimes =
      struct
        let (__promisify__ :
          PathLike.t ->
            atime:Date.t or_string or_number ->
              mtime:Date.t or_string or_number -> unit Promise.t)
          =
          fun (x641 : PathLike.t) ->
            fun ~atime:(x642 : Date.t or_string or_number) ->
              fun ~mtime:(x645 : Date.t or_string or_number) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (Ojs.get_prop_ascii Import.fs "lutimes")
                     "__promisify__"
                     [|(PathLike.t_to_js x641);(or_number_to_js
                                                  (fun
                                                     (x643 :
                                                       Date.t or_string)
                                                     ->
                                                     or_string_to_js
                                                       Date.t_to_js x643)
                                                  x642);(or_number_to_js
                                                           (fun
                                                              (x646 :
                                                                Date.t
                                                                  or_string)
                                                              ->
                                                              or_string_to_js
                                                                Date.t_to_js
                                                                x646) x645)|])
      end
    let (lutimes_sync :
      PathLike.t ->
        atime:Date.t or_string or_number ->
          mtime:Date.t or_string or_number -> unit)
      =
      fun (x649 : PathLike.t) ->
        fun ~atime:(x650 : Date.t or_string or_number) ->
          fun ~mtime:(x653 : Date.t or_string or_number) ->
            ignore
              (Ojs.call Import.fs "lutimesSync"
                 [|(PathLike.t_to_js x649);(or_number_to_js
                                              (fun (x651 : Date.t or_string)
                                                 ->
                                                 or_string_to_js Date.t_to_js
                                                   x651) x650);(or_number_to_js
                                                                  (fun
                                                                    (x654 :
                                                                    Date.t
                                                                    or_string)
                                                                    ->
                                                                    or_string_to_js
                                                                    Date.t_to_js
                                                                    x654)
                                                                  x653)|])
    let (chmod :
      PathLike.t -> mode:Mode.t -> callback:NoParamCallback.t -> unit) =
      fun (x656 : PathLike.t) ->
        fun ~mode:(x657 : Mode.t) ->
          fun ~callback:(x658 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "chmod"
                 [|(PathLike.t_to_js x656);(Mode.t_to_js x657);(NoParamCallback.t_to_js
                                                                  x658)|])
    module Chmod =
      struct
        let (__promisify__ : PathLike.t -> mode:Mode.t -> unit Promise.t) =
          fun (x659 : PathLike.t) ->
            fun ~mode:(x660 : Mode.t) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "chmod")
                   "__promisify__"
                   [|(PathLike.t_to_js x659);(Mode.t_to_js x660)|])
      end
    let (chmod_sync : PathLike.t -> mode:Mode.t -> unit) =
      fun (x662 : PathLike.t) ->
        fun ~mode:(x663 : Mode.t) ->
          ignore
            (Ojs.call Import.fs "chmodSync"
               [|(PathLike.t_to_js x662);(Mode.t_to_js x663)|])
    let (fchmod : int -> mode:Mode.t -> callback:NoParamCallback.t -> unit) =
      fun (x664 : int) ->
        fun ~mode:(x665 : Mode.t) ->
          fun ~callback:(x666 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "fchmod"
                 [|(Ojs.int_to_js x664);(Mode.t_to_js x665);(NoParamCallback.t_to_js
                                                               x666)|])
    module Fchmod =
      struct
        let (__promisify__ : int -> mode:Mode.t -> unit Promise.t) =
          fun (x667 : int) ->
            fun ~mode:(x668 : Mode.t) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "fchmod")
                   "__promisify__"
                   [|(Ojs.int_to_js x667);(Mode.t_to_js x668)|])
      end
    let (fchmod_sync : int -> mode:Mode.t -> unit) =
      fun (x670 : int) ->
        fun ~mode:(x671 : Mode.t) ->
          ignore
            (Ojs.call Import.fs "fchmodSync"
               [|(Ojs.int_to_js x670);(Mode.t_to_js x671)|])
    let (lchmod :
      PathLike.t -> mode:Mode.t -> callback:NoParamCallback.t -> unit) =
      fun (x672 : PathLike.t) ->
        fun ~mode:(x673 : Mode.t) ->
          fun ~callback:(x674 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "lchmod"
                 [|(PathLike.t_to_js x672);(Mode.t_to_js x673);(NoParamCallback.t_to_js
                                                                  x674)|])
    module Lchmod =
      struct
        let (__promisify__ : PathLike.t -> mode:Mode.t -> unit Promise.t) =
          fun (x675 : PathLike.t) ->
            fun ~mode:(x676 : Mode.t) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "lchmod")
                   "__promisify__"
                   [|(PathLike.t_to_js x675);(Mode.t_to_js x676)|])
      end
    let (lchmod_sync : PathLike.t -> mode:Mode.t -> unit) =
      fun (x678 : PathLike.t) ->
        fun ~mode:(x679 : Mode.t) ->
          ignore
            (Ojs.call Import.fs "lchmodSync"
               [|(PathLike.t_to_js x678);(Mode.t_to_js x679)|])
    let (stat :
      PathLike.t ->
        callback:(err:ErrnoException.t or_null -> stats:Stats.t -> unit) ->
          unit)
      =
      fun (x680 : PathLike.t) ->
        fun
          ~callback:(x681 :
                      err:ErrnoException.t or_null -> stats:Stats.t -> unit)
          ->
          ignore
            (Ojs.call Import.fs "stat"
               [|(PathLike.t_to_js x680);(Ojs.fun_to_js 2
                                            (fun (x682 : Ojs.t) ->
                                               fun (x684 : Ojs.t) ->
                                                 x681
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x682)
                                                   ~stats:(Stats.t_of_js x684)))|])
    module StatOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x686 : Ojs.t) -> x686
        and t_to_js : t -> Ojs.t = fun (x685 : Ojs.t) -> x685
        let (get_bigint : t -> bool) =
          fun (x687 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x687) "bigint")
        let (set_bigint : t -> bool -> unit) =
          fun (x688 : t) ->
            fun (x689 : bool) ->
              Ojs.set_prop_ascii (t_to_js x688) "bigint"
                (Ojs.bool_to_js x689)
      end
    let (stat :
      PathLike.t ->
        options:(StatOptions.t, AnonymousInterface0.t) intersection2
          or_undefined ->
          callback:(err:ErrnoException.t or_null -> stats:Stats.t -> unit) ->
            unit)
      =
      fun (x690 : PathLike.t) ->
        fun
          ~options:(x691 :
                     (StatOptions.t, AnonymousInterface0.t) intersection2
                       or_undefined)
          ->
          fun
            ~callback:(x695 :
                        err:ErrnoException.t or_null -> stats:Stats.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "stat"
                 [|(PathLike.t_to_js x690);(or_undefined_to_js
                                              (fun
                                                 (x692 :
                                                   (StatOptions.t,
                                                     AnonymousInterface0.t)
                                                     intersection2)
                                                 ->
                                                 intersection2_to_js
                                                   StatOptions.t_to_js
                                                   AnonymousInterface0.t_to_js
                                                   x692) x691);(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x696 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x698 :
                                                                    Ojs.t) ->
                                                                    x695
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x696)
                                                                    ~stats:(
                                                                    Stats.t_of_js
                                                                    x698)))|])
    module BigIntStats =
      struct
        type t = bigint StatsBase.t
        let rec t_of_js : Ojs.t -> t =
          fun (x701 : Ojs.t) -> StatsBase.t_of_js bigint_of_js x701
        and t_to_js : t -> Ojs.t =
          fun (x699 : bigint StatsBase.t) ->
            StatsBase.t_to_js bigint_to_js x699
        let (get_atime_ns : t -> bigint) =
          fun (x703 : t) ->
            bigint_of_js (Ojs.get_prop_ascii (t_to_js x703) "atimeNs")
        let (set_atime_ns : t -> bigint -> unit) =
          fun (x704 : t) ->
            fun (x705 : bigint) ->
              Ojs.set_prop_ascii (t_to_js x704) "atimeNs" (bigint_to_js x705)
        let (get_mtime_ns : t -> bigint) =
          fun (x706 : t) ->
            bigint_of_js (Ojs.get_prop_ascii (t_to_js x706) "mtimeNs")
        let (set_mtime_ns : t -> bigint -> unit) =
          fun (x707 : t) ->
            fun (x708 : bigint) ->
              Ojs.set_prop_ascii (t_to_js x707) "mtimeNs" (bigint_to_js x708)
        let (get_ctime_ns : t -> bigint) =
          fun (x709 : t) ->
            bigint_of_js (Ojs.get_prop_ascii (t_to_js x709) "ctimeNs")
        let (set_ctime_ns : t -> bigint -> unit) =
          fun (x710 : t) ->
            fun (x711 : bigint) ->
              Ojs.set_prop_ascii (t_to_js x710) "ctimeNs" (bigint_to_js x711)
        let (get_birthtime_ns : t -> bigint) =
          fun (x712 : t) ->
            bigint_of_js (Ojs.get_prop_ascii (t_to_js x712) "birthtimeNs")
        let (set_birthtime_ns : t -> bigint -> unit) =
          fun (x713 : t) ->
            fun (x714 : bigint) ->
              Ojs.set_prop_ascii (t_to_js x713) "birthtimeNs"
                (bigint_to_js x714)
      end
    let (stat :
      PathLike.t ->
        options:(StatOptions.t, AnonymousInterface1.t) intersection2 ->
          callback:(err:ErrnoException.t or_null ->
                      stats:BigIntStats.t -> unit)
            -> unit)
      =
      fun (x715 : PathLike.t) ->
        fun
          ~options:(x716 :
                     (StatOptions.t, AnonymousInterface1.t) intersection2)
          ->
          fun
            ~callback:(x719 :
                        err:ErrnoException.t or_null ->
                          stats:BigIntStats.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "stat"
                 [|(PathLike.t_to_js x715);(intersection2_to_js
                                              StatOptions.t_to_js
                                              AnonymousInterface1.t_to_js
                                              x716);(Ojs.fun_to_js 2
                                                       (fun (x720 : Ojs.t) ->
                                                          fun (x722 : Ojs.t)
                                                            ->
                                                            x719
                                                              ~err:(or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x720)
                                                              ~stats:(
                                                              BigIntStats.t_of_js
                                                                x722)))|])
    let (stat :
      PathLike.t ->
        options:StatOptions.t or_undefined ->
          callback:(err:ErrnoException.t or_null ->
                      stats:(BigIntStats.t, Stats.t) union2 -> unit)
            -> unit)
      =
      fun (x723 : PathLike.t) ->
        fun ~options:(x724 : StatOptions.t or_undefined) ->
          fun
            ~callback:(x726 :
                        err:ErrnoException.t or_null ->
                          stats:(BigIntStats.t, Stats.t) union2 -> unit)
            ->
            ignore
              (Ojs.call Import.fs "stat"
                 [|(PathLike.t_to_js x723);(or_undefined_to_js
                                              StatOptions.t_to_js x724);(
                   Ojs.fun_to_js 2
                     (fun (x727 : Ojs.t) ->
                        fun (x729 : Ojs.t) ->
                          x726
                            ~err:(or_null_of_js ErrnoException.t_of_js x727)
                            ~stats:(union2_of_js BigIntStats.t_of_js
                                      Stats.t_of_js x729)))|])
    module Stat =
      struct
        let (__promisify__ :
          PathLike.t ->
            ?options:(StatOptions.t, AnonymousInterface0.t) intersection2 ->
              unit -> Stats.t Promise.t)
          =
          fun (x732 : PathLike.t) ->
            fun
              ?options:(x733 :
                         (StatOptions.t, AnonymousInterface0.t) intersection2
                           option)
              ->
              fun () ->
                Promise.t_of_js Stats.t_of_js
                  (let x738 = Ojs.get_prop_ascii Import.fs "stat" in
                   Ojs.call (Ojs.get_prop_ascii x738 "__promisify__") "apply"
                     [|x738;((let x734 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x734 "push"
                                   [|(PathLike.t_to_js x732)|]);
                              (match x733 with
                               | Some x735 ->
                                   ignore
                                     (Ojs.call x734 "push"
                                        [|(intersection2_to_js
                                             StatOptions.t_to_js
                                             AnonymousInterface0.t_to_js x735)|])
                               | None -> ());
                              x734))|])
        let (__promisify__ :
          PathLike.t ->
            options:(StatOptions.t, AnonymousInterface1.t) intersection2 ->
              BigIntStats.t Promise.t)
          =
          fun (x740 : PathLike.t) ->
            fun
              ~options:(x741 :
                         (StatOptions.t, AnonymousInterface1.t) intersection2)
              ->
              Promise.t_of_js BigIntStats.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "stat")
                   "__promisify__"
                   [|(PathLike.t_to_js x740);(intersection2_to_js
                                                StatOptions.t_to_js
                                                AnonymousInterface1.t_to_js
                                                x741)|])
        let (__promisify__ :
          PathLike.t ->
            ?options:StatOptions.t ->
              unit -> (BigIntStats.t, Stats.t) union2 Promise.t)
          =
          fun (x745 : PathLike.t) ->
            fun ?options:(x746 : StatOptions.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x750 : Ojs.t) ->
                     union2_of_js BigIntStats.t_of_js Stats.t_of_js x750)
                  (let x749 = Ojs.get_prop_ascii Import.fs "stat" in
                   Ojs.call (Ojs.get_prop_ascii x749 "__promisify__") "apply"
                     [|x749;((let x747 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x747 "push"
                                   [|(PathLike.t_to_js x745)|]);
                              (match x746 with
                               | Some x748 ->
                                   ignore
                                     (Ojs.call x747 "push"
                                        [|(StatOptions.t_to_js x748)|])
                               | None -> ());
                              x747))|])
      end
    let (stat_sync :
      PathLike.t ->
        ?options:(StatOptions.t, AnonymousInterface0.t) intersection2 ->
          unit -> Stats.t)
      =
      fun (x753 : PathLike.t) ->
        fun
          ?options:(x754 :
                     (StatOptions.t, AnonymousInterface0.t) intersection2
                       option)
          ->
          fun () ->
            Stats.t_of_js
              (let x759 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x759 "statSync") "apply"
                 [|x759;((let x755 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x755 "push" [|(PathLike.t_to_js x753)|]);
                          (match x754 with
                           | Some x756 ->
                               ignore
                                 (Ojs.call x755 "push"
                                    [|(intersection2_to_js
                                         StatOptions.t_to_js
                                         AnonymousInterface0.t_to_js x756)|])
                           | None -> ());
                          x755))|])
    let (stat_sync :
      PathLike.t ->
        options:(StatOptions.t, AnonymousInterface1.t) intersection2 ->
          BigIntStats.t)
      =
      fun (x760 : PathLike.t) ->
        fun
          ~options:(x761 :
                     (StatOptions.t, AnonymousInterface1.t) intersection2)
          ->
          BigIntStats.t_of_js
            (Ojs.call Import.fs "statSync"
               [|(PathLike.t_to_js x760);(intersection2_to_js
                                            StatOptions.t_to_js
                                            AnonymousInterface1.t_to_js x761)|])
    let (stat_sync :
      PathLike.t ->
        ?options:StatOptions.t -> unit -> (BigIntStats.t, Stats.t) union2)
      =
      fun (x764 : PathLike.t) ->
        fun ?options:(x765 : StatOptions.t option) ->
          fun () ->
            union2_of_js BigIntStats.t_of_js Stats.t_of_js
              (let x768 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x768 "statSync") "apply"
                 [|x768;((let x766 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x766 "push" [|(PathLike.t_to_js x764)|]);
                          (match x765 with
                           | Some x767 ->
                               ignore
                                 (Ojs.call x766 "push"
                                    [|(StatOptions.t_to_js x767)|])
                           | None -> ());
                          x766))|])
    let (fstat :
      int ->
        callback:(err:ErrnoException.t or_null -> stats:Stats.t -> unit) ->
          unit)
      =
      fun (x771 : int) ->
        fun
          ~callback:(x772 :
                      err:ErrnoException.t or_null -> stats:Stats.t -> unit)
          ->
          ignore
            (Ojs.call Import.fs "fstat"
               [|(Ojs.int_to_js x771);(Ojs.fun_to_js 2
                                         (fun (x773 : Ojs.t) ->
                                            fun (x775 : Ojs.t) ->
                                              x772
                                                ~err:(or_null_of_js
                                                        ErrnoException.t_of_js
                                                        x773)
                                                ~stats:(Stats.t_of_js x775)))|])
    let (fstat :
      int ->
        options:(StatOptions.t, AnonymousInterface0.t) intersection2
          or_undefined ->
          callback:(err:ErrnoException.t or_null -> stats:Stats.t -> unit) ->
            unit)
      =
      fun (x776 : int) ->
        fun
          ~options:(x777 :
                     (StatOptions.t, AnonymousInterface0.t) intersection2
                       or_undefined)
          ->
          fun
            ~callback:(x781 :
                        err:ErrnoException.t or_null -> stats:Stats.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "fstat"
                 [|(Ojs.int_to_js x776);(or_undefined_to_js
                                           (fun
                                              (x778 :
                                                (StatOptions.t,
                                                  AnonymousInterface0.t)
                                                  intersection2)
                                              ->
                                              intersection2_to_js
                                                StatOptions.t_to_js
                                                AnonymousInterface0.t_to_js
                                                x778) x777);(Ojs.fun_to_js 2
                                                               (fun
                                                                  (x782 :
                                                                    Ojs.t)
                                                                  ->
                                                                  fun
                                                                    (x784 :
                                                                    Ojs.t) ->
                                                                    x781
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x782)
                                                                    ~stats:(
                                                                    Stats.t_of_js
                                                                    x784)))|])
    let (fstat :
      int ->
        options:(StatOptions.t, AnonymousInterface1.t) intersection2 ->
          callback:(err:ErrnoException.t or_null ->
                      stats:BigIntStats.t -> unit)
            -> unit)
      =
      fun (x785 : int) ->
        fun
          ~options:(x786 :
                     (StatOptions.t, AnonymousInterface1.t) intersection2)
          ->
          fun
            ~callback:(x789 :
                        err:ErrnoException.t or_null ->
                          stats:BigIntStats.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "fstat"
                 [|(Ojs.int_to_js x785);(intersection2_to_js
                                           StatOptions.t_to_js
                                           AnonymousInterface1.t_to_js x786);(
                   Ojs.fun_to_js 2
                     (fun (x790 : Ojs.t) ->
                        fun (x792 : Ojs.t) ->
                          x789
                            ~err:(or_null_of_js ErrnoException.t_of_js x790)
                            ~stats:(BigIntStats.t_of_js x792)))|])
    let (fstat :
      int ->
        options:StatOptions.t or_undefined ->
          callback:(err:ErrnoException.t or_null ->
                      stats:(BigIntStats.t, Stats.t) union2 -> unit)
            -> unit)
      =
      fun (x793 : int) ->
        fun ~options:(x794 : StatOptions.t or_undefined) ->
          fun
            ~callback:(x796 :
                        err:ErrnoException.t or_null ->
                          stats:(BigIntStats.t, Stats.t) union2 -> unit)
            ->
            ignore
              (Ojs.call Import.fs "fstat"
                 [|(Ojs.int_to_js x793);(or_undefined_to_js
                                           StatOptions.t_to_js x794);(
                   Ojs.fun_to_js 2
                     (fun (x797 : Ojs.t) ->
                        fun (x799 : Ojs.t) ->
                          x796
                            ~err:(or_null_of_js ErrnoException.t_of_js x797)
                            ~stats:(union2_of_js BigIntStats.t_of_js
                                      Stats.t_of_js x799)))|])
    module Fstat =
      struct
        let (__promisify__ :
          int ->
            ?options:(StatOptions.t, AnonymousInterface0.t) intersection2 ->
              unit -> Stats.t Promise.t)
          =
          fun (x802 : int) ->
            fun
              ?options:(x803 :
                         (StatOptions.t, AnonymousInterface0.t) intersection2
                           option)
              ->
              fun () ->
                Promise.t_of_js Stats.t_of_js
                  (let x808 = Ojs.get_prop_ascii Import.fs "fstat" in
                   Ojs.call (Ojs.get_prop_ascii x808 "__promisify__") "apply"
                     [|x808;((let x804 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x804 "push"
                                   [|(Ojs.int_to_js x802)|]);
                              (match x803 with
                               | Some x805 ->
                                   ignore
                                     (Ojs.call x804 "push"
                                        [|(intersection2_to_js
                                             StatOptions.t_to_js
                                             AnonymousInterface0.t_to_js x805)|])
                               | None -> ());
                              x804))|])
        let (__promisify__ :
          int ->
            options:(StatOptions.t, AnonymousInterface1.t) intersection2 ->
              BigIntStats.t Promise.t)
          =
          fun (x810 : int) ->
            fun
              ~options:(x811 :
                         (StatOptions.t, AnonymousInterface1.t) intersection2)
              ->
              Promise.t_of_js BigIntStats.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "fstat")
                   "__promisify__"
                   [|(Ojs.int_to_js x810);(intersection2_to_js
                                             StatOptions.t_to_js
                                             AnonymousInterface1.t_to_js x811)|])
        let (__promisify__ :
          int ->
            ?options:StatOptions.t ->
              unit -> (BigIntStats.t, Stats.t) union2 Promise.t)
          =
          fun (x815 : int) ->
            fun ?options:(x816 : StatOptions.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x820 : Ojs.t) ->
                     union2_of_js BigIntStats.t_of_js Stats.t_of_js x820)
                  (let x819 = Ojs.get_prop_ascii Import.fs "fstat" in
                   Ojs.call (Ojs.get_prop_ascii x819 "__promisify__") "apply"
                     [|x819;((let x817 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x817 "push"
                                   [|(Ojs.int_to_js x815)|]);
                              (match x816 with
                               | Some x818 ->
                                   ignore
                                     (Ojs.call x817 "push"
                                        [|(StatOptions.t_to_js x818)|])
                               | None -> ());
                              x817))|])
      end
    let (fstat_sync :
      int ->
        ?options:(StatOptions.t, AnonymousInterface0.t) intersection2 ->
          unit -> Stats.t)
      =
      fun (x823 : int) ->
        fun
          ?options:(x824 :
                     (StatOptions.t, AnonymousInterface0.t) intersection2
                       option)
          ->
          fun () ->
            Stats.t_of_js
              (let x829 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x829 "fstatSync") "apply"
                 [|x829;((let x825 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x825 "push" [|(Ojs.int_to_js x823)|]);
                          (match x824 with
                           | Some x826 ->
                               ignore
                                 (Ojs.call x825 "push"
                                    [|(intersection2_to_js
                                         StatOptions.t_to_js
                                         AnonymousInterface0.t_to_js x826)|])
                           | None -> ());
                          x825))|])
    let (fstat_sync :
      int ->
        options:(StatOptions.t, AnonymousInterface1.t) intersection2 ->
          BigIntStats.t)
      =
      fun (x830 : int) ->
        fun
          ~options:(x831 :
                     (StatOptions.t, AnonymousInterface1.t) intersection2)
          ->
          BigIntStats.t_of_js
            (Ojs.call Import.fs "fstatSync"
               [|(Ojs.int_to_js x830);(intersection2_to_js
                                         StatOptions.t_to_js
                                         AnonymousInterface1.t_to_js x831)|])
    let (fstat_sync :
      int ->
        ?options:StatOptions.t -> unit -> (BigIntStats.t, Stats.t) union2)
      =
      fun (x834 : int) ->
        fun ?options:(x835 : StatOptions.t option) ->
          fun () ->
            union2_of_js BigIntStats.t_of_js Stats.t_of_js
              (let x838 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x838 "fstatSync") "apply"
                 [|x838;((let x836 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x836 "push" [|(Ojs.int_to_js x834)|]);
                          (match x835 with
                           | Some x837 ->
                               ignore
                                 (Ojs.call x836 "push"
                                    [|(StatOptions.t_to_js x837)|])
                           | None -> ());
                          x836))|])
    let (lstat :
      PathLike.t ->
        callback:(err:ErrnoException.t or_null -> stats:Stats.t -> unit) ->
          unit)
      =
      fun (x841 : PathLike.t) ->
        fun
          ~callback:(x842 :
                      err:ErrnoException.t or_null -> stats:Stats.t -> unit)
          ->
          ignore
            (Ojs.call Import.fs "lstat"
               [|(PathLike.t_to_js x841);(Ojs.fun_to_js 2
                                            (fun (x843 : Ojs.t) ->
                                               fun (x845 : Ojs.t) ->
                                                 x842
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x843)
                                                   ~stats:(Stats.t_of_js x845)))|])
    let (lstat :
      PathLike.t ->
        options:(StatOptions.t, AnonymousInterface0.t) intersection2
          or_undefined ->
          callback:(err:ErrnoException.t or_null -> stats:Stats.t -> unit) ->
            unit)
      =
      fun (x846 : PathLike.t) ->
        fun
          ~options:(x847 :
                     (StatOptions.t, AnonymousInterface0.t) intersection2
                       or_undefined)
          ->
          fun
            ~callback:(x851 :
                        err:ErrnoException.t or_null -> stats:Stats.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "lstat"
                 [|(PathLike.t_to_js x846);(or_undefined_to_js
                                              (fun
                                                 (x848 :
                                                   (StatOptions.t,
                                                     AnonymousInterface0.t)
                                                     intersection2)
                                                 ->
                                                 intersection2_to_js
                                                   StatOptions.t_to_js
                                                   AnonymousInterface0.t_to_js
                                                   x848) x847);(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x852 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x854 :
                                                                    Ojs.t) ->
                                                                    x851
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x852)
                                                                    ~stats:(
                                                                    Stats.t_of_js
                                                                    x854)))|])
    let (lstat :
      PathLike.t ->
        options:(StatOptions.t, AnonymousInterface1.t) intersection2 ->
          callback:(err:ErrnoException.t or_null ->
                      stats:BigIntStats.t -> unit)
            -> unit)
      =
      fun (x855 : PathLike.t) ->
        fun
          ~options:(x856 :
                     (StatOptions.t, AnonymousInterface1.t) intersection2)
          ->
          fun
            ~callback:(x859 :
                        err:ErrnoException.t or_null ->
                          stats:BigIntStats.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "lstat"
                 [|(PathLike.t_to_js x855);(intersection2_to_js
                                              StatOptions.t_to_js
                                              AnonymousInterface1.t_to_js
                                              x856);(Ojs.fun_to_js 2
                                                       (fun (x860 : Ojs.t) ->
                                                          fun (x862 : Ojs.t)
                                                            ->
                                                            x859
                                                              ~err:(or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x860)
                                                              ~stats:(
                                                              BigIntStats.t_of_js
                                                                x862)))|])
    let (lstat :
      PathLike.t ->
        options:StatOptions.t or_undefined ->
          callback:(err:ErrnoException.t or_null ->
                      stats:(BigIntStats.t, Stats.t) union2 -> unit)
            -> unit)
      =
      fun (x863 : PathLike.t) ->
        fun ~options:(x864 : StatOptions.t or_undefined) ->
          fun
            ~callback:(x866 :
                        err:ErrnoException.t or_null ->
                          stats:(BigIntStats.t, Stats.t) union2 -> unit)
            ->
            ignore
              (Ojs.call Import.fs "lstat"
                 [|(PathLike.t_to_js x863);(or_undefined_to_js
                                              StatOptions.t_to_js x864);(
                   Ojs.fun_to_js 2
                     (fun (x867 : Ojs.t) ->
                        fun (x869 : Ojs.t) ->
                          x866
                            ~err:(or_null_of_js ErrnoException.t_of_js x867)
                            ~stats:(union2_of_js BigIntStats.t_of_js
                                      Stats.t_of_js x869)))|])
    module Lstat =
      struct
        let (__promisify__ :
          PathLike.t ->
            ?options:(StatOptions.t, AnonymousInterface0.t) intersection2 ->
              unit -> Stats.t Promise.t)
          =
          fun (x872 : PathLike.t) ->
            fun
              ?options:(x873 :
                         (StatOptions.t, AnonymousInterface0.t) intersection2
                           option)
              ->
              fun () ->
                Promise.t_of_js Stats.t_of_js
                  (let x878 = Ojs.get_prop_ascii Import.fs "lstat" in
                   Ojs.call (Ojs.get_prop_ascii x878 "__promisify__") "apply"
                     [|x878;((let x874 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x874 "push"
                                   [|(PathLike.t_to_js x872)|]);
                              (match x873 with
                               | Some x875 ->
                                   ignore
                                     (Ojs.call x874 "push"
                                        [|(intersection2_to_js
                                             StatOptions.t_to_js
                                             AnonymousInterface0.t_to_js x875)|])
                               | None -> ());
                              x874))|])
        let (__promisify__ :
          PathLike.t ->
            options:(StatOptions.t, AnonymousInterface1.t) intersection2 ->
              BigIntStats.t Promise.t)
          =
          fun (x880 : PathLike.t) ->
            fun
              ~options:(x881 :
                         (StatOptions.t, AnonymousInterface1.t) intersection2)
              ->
              Promise.t_of_js BigIntStats.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "lstat")
                   "__promisify__"
                   [|(PathLike.t_to_js x880);(intersection2_to_js
                                                StatOptions.t_to_js
                                                AnonymousInterface1.t_to_js
                                                x881)|])
        let (__promisify__ :
          PathLike.t ->
            ?options:StatOptions.t ->
              unit -> (BigIntStats.t, Stats.t) union2 Promise.t)
          =
          fun (x885 : PathLike.t) ->
            fun ?options:(x886 : StatOptions.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x890 : Ojs.t) ->
                     union2_of_js BigIntStats.t_of_js Stats.t_of_js x890)
                  (let x889 = Ojs.get_prop_ascii Import.fs "lstat" in
                   Ojs.call (Ojs.get_prop_ascii x889 "__promisify__") "apply"
                     [|x889;((let x887 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x887 "push"
                                   [|(PathLike.t_to_js x885)|]);
                              (match x886 with
                               | Some x888 ->
                                   ignore
                                     (Ojs.call x887 "push"
                                        [|(StatOptions.t_to_js x888)|])
                               | None -> ());
                              x887))|])
      end
    let (lstat_sync :
      PathLike.t ->
        ?options:(StatOptions.t, AnonymousInterface0.t) intersection2 ->
          unit -> Stats.t)
      =
      fun (x893 : PathLike.t) ->
        fun
          ?options:(x894 :
                     (StatOptions.t, AnonymousInterface0.t) intersection2
                       option)
          ->
          fun () ->
            Stats.t_of_js
              (let x899 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x899 "lstatSync") "apply"
                 [|x899;((let x895 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x895 "push" [|(PathLike.t_to_js x893)|]);
                          (match x894 with
                           | Some x896 ->
                               ignore
                                 (Ojs.call x895 "push"
                                    [|(intersection2_to_js
                                         StatOptions.t_to_js
                                         AnonymousInterface0.t_to_js x896)|])
                           | None -> ());
                          x895))|])
    let (lstat_sync :
      PathLike.t ->
        options:(StatOptions.t, AnonymousInterface1.t) intersection2 ->
          BigIntStats.t)
      =
      fun (x900 : PathLike.t) ->
        fun
          ~options:(x901 :
                     (StatOptions.t, AnonymousInterface1.t) intersection2)
          ->
          BigIntStats.t_of_js
            (Ojs.call Import.fs "lstatSync"
               [|(PathLike.t_to_js x900);(intersection2_to_js
                                            StatOptions.t_to_js
                                            AnonymousInterface1.t_to_js x901)|])
    let (lstat_sync :
      PathLike.t ->
        ?options:StatOptions.t -> unit -> (BigIntStats.t, Stats.t) union2)
      =
      fun (x904 : PathLike.t) ->
        fun ?options:(x905 : StatOptions.t option) ->
          fun () ->
            union2_of_js BigIntStats.t_of_js Stats.t_of_js
              (let x908 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x908 "lstatSync") "apply"
                 [|x908;((let x906 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x906 "push" [|(PathLike.t_to_js x904)|]);
                          (match x905 with
                           | Some x907 ->
                               ignore
                                 (Ojs.call x906 "push"
                                    [|(StatOptions.t_to_js x907)|])
                           | None -> ());
                          x906))|])
    let (link :
      PathLike.t -> PathLike.t -> callback:NoParamCallback.t -> unit) =
      fun (x911 : PathLike.t) ->
        fun (x912 : PathLike.t) ->
          fun ~callback:(x913 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "link"
                 [|(PathLike.t_to_js x911);(PathLike.t_to_js x912);(NoParamCallback.t_to_js
                                                                    x913)|])
    module Link =
      struct
        let (__promisify__ : PathLike.t -> PathLike.t -> unit Promise.t) =
          fun (x914 : PathLike.t) ->
            fun (x915 : PathLike.t) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "link")
                   "__promisify__"
                   [|(PathLike.t_to_js x914);(PathLike.t_to_js x915)|])
      end
    let (link_sync : PathLike.t -> PathLike.t -> unit) =
      fun (x917 : PathLike.t) ->
        fun (x918 : PathLike.t) ->
          ignore
            (Ojs.call Import.fs "linkSync"
               [|(PathLike.t_to_js x917);(PathLike.t_to_js x918)|])
    let (symlink :
      target:string ->
        PathLike.t ->
          type_:[ `dir  | `file  | `junction ] or_null_or_undefined ->
            callback:NoParamCallback.t -> unit)
      =
      fun ~target:(x919 : string) ->
        fun (x920 : PathLike.t) ->
          fun
            ~type_:(x921 :
                     [ `dir  | `file  | `junction ] or_null_or_undefined)
            ->
            fun ~callback:(x923 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "symlink"
                   [|(Ojs.string_to_js x919);(PathLike.t_to_js x920);(
                     or_null_or_undefined_to_js
                       (fun (x922 : [ `dir  | `file  | `junction ]) ->
                          match x922 with
                          | `dir -> Ojs.string_to_js "dir"
                          | `file -> Ojs.string_to_js "file"
                          | `junction -> Ojs.string_to_js "junction") x921);(
                     NoParamCallback.t_to_js x923)|])
    let (symlink :
      target:string -> PathLike.t -> callback:NoParamCallback.t -> unit) =
      fun ~target:(x924 : string) ->
        fun (x925 : PathLike.t) ->
          fun ~callback:(x926 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "symlink"
                 [|(Ojs.string_to_js x924);(PathLike.t_to_js x925);(NoParamCallback.t_to_js
                                                                    x926)|])
    module Symlink =
      struct
        let (__promisify__ :
          target:string ->
            PathLike.t -> ?type_:string or_null -> unit -> unit Promise.t)
          =
          fun ~target:(x927 : string) ->
            fun (x928 : PathLike.t) ->
              fun ?type_:(x929 : string or_null option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x933 = Ojs.get_prop_ascii Import.fs "symlink" in
                     Ojs.call (Ojs.get_prop_ascii x933 "__promisify__")
                       "apply"
                       [|x933;((let x930 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x930 "push"
                                     [|(Ojs.string_to_js x927)|]);
                                ignore
                                  (Ojs.call x930 "push"
                                     [|(PathLike.t_to_js x928)|]);
                                (match x929 with
                                 | Some x931 ->
                                     ignore
                                       (Ojs.call x930 "push"
                                          [|(or_null_to_js Ojs.string_to_js
                                               x931)|])
                                 | None -> ());
                                x930))|])
        module Type =
          struct
            type t = [ `dir  | `file  | `junction ]
            let rec t_of_js : Ojs.t -> t =
              fun (x936 : Ojs.t) ->
                let x937 = x936 in
                match Ojs.string_of_js x937 with
                | "dir" -> `dir
                | "file" -> `file
                | "junction" -> `junction
                | _ -> assert false
            and t_to_js : t -> Ojs.t =
              fun (x935 : [ `dir  | `file  | `junction ]) ->
                match x935 with
                | `dir -> Ojs.string_to_js "dir"
                | `file -> Ojs.string_to_js "file"
                | `junction -> Ojs.string_to_js "junction"
          end
      end
    let (symlink_sync :
      target:string ->
        PathLike.t ->
          ?type_:[ `dir  | `file  | `junction ] or_null -> unit -> unit)
      =
      fun ~target:(x938 : string) ->
        fun (x939 : PathLike.t) ->
          fun ?type_:(x940 : [ `dir  | `file  | `junction ] or_null option)
            ->
            fun () ->
              ignore
                (let x944 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x944 "symlinkSync") "apply"
                   [|x944;((let x941 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x941 "push"
                                 [|(Ojs.string_to_js x938)|]);
                            ignore
                              (Ojs.call x941 "push"
                                 [|(PathLike.t_to_js x939)|]);
                            (match x940 with
                             | Some x942 ->
                                 ignore
                                   (Ojs.call x941 "push"
                                      [|(or_null_to_js
                                           (fun
                                              (x943 :
                                                [ `dir  | `file 
                                                | `junction ])
                                              ->
                                              match x943 with
                                              | `dir ->
                                                  Ojs.string_to_js "dir"
                                              | `file ->
                                                  Ojs.string_to_js "file"
                                              | `junction ->
                                                  Ojs.string_to_js "junction")
                                           x942)|])
                             | None -> ());
                            x941))|])
    let (readlink :
      PathLike.t ->
        options:(BaseEncodingOptions.t, BufferEncoding.t) union2
          or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null ->
                      link_string:string -> unit)
            -> unit)
      =
      fun (x945 : PathLike.t) ->
        fun
          ~options:(x946 :
                     (BaseEncodingOptions.t, BufferEncoding.t) union2
                       or_null_or_undefined)
          ->
          fun
            ~callback:(x950 :
                        err:ErrnoException.t or_null ->
                          link_string:string -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readlink"
                 [|(PathLike.t_to_js x945);(or_null_or_undefined_to_js
                                              (fun
                                                 (x947 :
                                                   (BaseEncodingOptions.t,
                                                     BufferEncoding.t) union2)
                                                 ->
                                                 union2_to_js
                                                   BaseEncodingOptions.t_to_js
                                                   BufferEncoding.t_to_js
                                                   x947) x946);(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x951 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x953 :
                                                                    Ojs.t) ->
                                                                    x950
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x951)
                                                                    ~link_string:(
                                                                    Ojs.string_of_js
                                                                    x953)))|])
    let (readlink :
      PathLike.t ->
        options:BufferEncodingOption.t ->
          callback:(err:ErrnoException.t or_null ->
                      link_string:Buffer.t -> unit)
            -> unit)
      =
      fun (x954 : PathLike.t) ->
        fun ~options:(x955 : BufferEncodingOption.t) ->
          fun
            ~callback:(x956 :
                        err:ErrnoException.t or_null ->
                          link_string:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readlink"
                 [|(PathLike.t_to_js x954);(BufferEncodingOption.t_to_js x955);(
                   Ojs.fun_to_js 2
                     (fun (x957 : Ojs.t) ->
                        fun (x959 : Ojs.t) ->
                          x956
                            ~err:(or_null_of_js ErrnoException.t_of_js x957)
                            ~link_string:(Buffer.t_of_js x959)))|])
    let (readlink :
      PathLike.t ->
        options:BaseEncodingOptions.t or_string or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null ->
                      link_string:Buffer.t or_string -> unit)
            -> unit)
      =
      fun (x960 : PathLike.t) ->
        fun
          ~options:(x961 :
                     BaseEncodingOptions.t or_string or_null_or_undefined)
          ->
          fun
            ~callback:(x964 :
                        err:ErrnoException.t or_null ->
                          link_string:Buffer.t or_string -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readlink"
                 [|(PathLike.t_to_js x960);(or_null_or_undefined_to_js
                                              (fun
                                                 (x962 :
                                                   BaseEncodingOptions.t
                                                     or_string)
                                                 ->
                                                 or_string_to_js
                                                   BaseEncodingOptions.t_to_js
                                                   x962) x961);(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x965 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x967 :
                                                                    Ojs.t) ->
                                                                    x964
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x965)
                                                                    ~link_string:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x967)))|])
    let (readlink :
      PathLike.t ->
        callback:(err:ErrnoException.t or_null -> link_string:string -> unit)
          -> unit)
      =
      fun (x969 : PathLike.t) ->
        fun
          ~callback:(x970 :
                      err:ErrnoException.t or_null ->
                        link_string:string -> unit)
          ->
          ignore
            (Ojs.call Import.fs "readlink"
               [|(PathLike.t_to_js x969);(Ojs.fun_to_js 2
                                            (fun (x971 : Ojs.t) ->
                                               fun (x973 : Ojs.t) ->
                                                 x970
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x971)
                                                   ~link_string:(Ojs.string_of_js
                                                                   x973)))|])
    module Readlink =
      struct
        let (__promisify__ :
          PathLike.t ->
            ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
              -> unit -> string Promise.t)
          =
          fun (x974 : PathLike.t) ->
            fun
              ?options:(x975 :
                         (BaseEncodingOptions.t, BufferEncoding.t) union2
                           or_null option)
              ->
              fun () ->
                Promise.t_of_js Ojs.string_of_js
                  (let x981 = Ojs.get_prop_ascii Import.fs "readlink" in
                   Ojs.call (Ojs.get_prop_ascii x981 "__promisify__") "apply"
                     [|x981;((let x976 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x976 "push"
                                   [|(PathLike.t_to_js x974)|]);
                              (match x975 with
                               | Some x977 ->
                                   ignore
                                     (Ojs.call x976 "push"
                                        [|(or_null_to_js
                                             (fun
                                                (x978 :
                                                  (BaseEncodingOptions.t,
                                                    BufferEncoding.t) union2)
                                                ->
                                                union2_to_js
                                                  BaseEncodingOptions.t_to_js
                                                  BufferEncoding.t_to_js x978)
                                             x977)|])
                               | None -> ());
                              x976))|])
        let (__promisify__ :
          PathLike.t -> options:BufferEncodingOption.t -> Buffer.t Promise.t)
          =
          fun (x983 : PathLike.t) ->
            fun ~options:(x984 : BufferEncodingOption.t) ->
              Promise.t_of_js Buffer.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "readlink")
                   "__promisify__"
                   [|(PathLike.t_to_js x983);(BufferEncodingOption.t_to_js
                                                x984)|])
        let (__promisify__ :
          PathLike.t ->
            ?options:BaseEncodingOptions.t or_string or_null ->
              unit -> Buffer.t or_string Promise.t)
          =
          fun (x986 : PathLike.t) ->
            fun
              ?options:(x987 :
                         BaseEncodingOptions.t or_string or_null option)
              ->
              fun () ->
                Promise.t_of_js
                  (fun (x993 : Ojs.t) -> or_string_of_js Buffer.t_of_js x993)
                  (let x992 = Ojs.get_prop_ascii Import.fs "readlink" in
                   Ojs.call (Ojs.get_prop_ascii x992 "__promisify__") "apply"
                     [|x992;((let x988 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x988 "push"
                                   [|(PathLike.t_to_js x986)|]);
                              (match x987 with
                               | Some x989 ->
                                   ignore
                                     (Ojs.call x988 "push"
                                        [|(or_null_to_js
                                             (fun
                                                (x990 :
                                                  BaseEncodingOptions.t
                                                    or_string)
                                                ->
                                                or_string_to_js
                                                  BaseEncodingOptions.t_to_js
                                                  x990) x989)|])
                               | None -> ());
                              x988))|])
      end
    let (readlink_sync :
      PathLike.t ->
        ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null ->
          unit -> string)
      =
      fun (x995 : PathLike.t) ->
        fun
          ?options:(x996 :
                     (BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
                       option)
          ->
          fun () ->
            Ojs.string_of_js
              (let x1002 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1002 "readlinkSync") "apply"
                 [|x1002;((let x997 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x997 "push"
                                [|(PathLike.t_to_js x995)|]);
                           (match x996 with
                            | Some x998 ->
                                ignore
                                  (Ojs.call x997 "push"
                                     [|(or_null_to_js
                                          (fun
                                             (x999 :
                                               (BaseEncodingOptions.t,
                                                 BufferEncoding.t) union2)
                                             ->
                                             union2_to_js
                                               BaseEncodingOptions.t_to_js
                                               BufferEncoding.t_to_js x999)
                                          x998)|])
                            | None -> ());
                           x997))|])
    let (readlink_sync :
      PathLike.t -> options:BufferEncodingOption.t -> Buffer.t) =
      fun (x1003 : PathLike.t) ->
        fun ~options:(x1004 : BufferEncodingOption.t) ->
          Buffer.t_of_js
            (Ojs.call Import.fs "readlinkSync"
               [|(PathLike.t_to_js x1003);(BufferEncodingOption.t_to_js x1004)|])
    let (readlink_sync :
      PathLike.t ->
        ?options:BaseEncodingOptions.t or_string or_null ->
          unit -> Buffer.t or_string)
      =
      fun (x1005 : PathLike.t) ->
        fun ?options:(x1006 : BaseEncodingOptions.t or_string or_null option)
          ->
          fun () ->
            or_string_of_js Buffer.t_of_js
              (let x1011 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1011 "readlinkSync") "apply"
                 [|x1011;((let x1007 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1007 "push"
                                [|(PathLike.t_to_js x1005)|]);
                           (match x1006 with
                            | Some x1008 ->
                                ignore
                                  (Ojs.call x1007 "push"
                                     [|(or_null_to_js
                                          (fun
                                             (x1009 :
                                               BaseEncodingOptions.t
                                                 or_string)
                                             ->
                                             or_string_to_js
                                               BaseEncodingOptions.t_to_js
                                               x1009) x1008)|])
                            | None -> ());
                           x1007))|])
    let (realpath :
      PathLike.t ->
        options:(BaseEncodingOptions.t, BufferEncoding.t) union2
          or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null -> PathLike.t -> unit) ->
            unit)
      =
      fun (x1013 : PathLike.t) ->
        fun
          ~options:(x1014 :
                     (BaseEncodingOptions.t, BufferEncoding.t) union2
                       or_null_or_undefined)
          ->
          fun
            ~callback:(x1018 :
                        err:ErrnoException.t or_null -> PathLike.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "realpath"
                 [|(PathLike.t_to_js x1013);(or_null_or_undefined_to_js
                                               (fun
                                                  (x1015 :
                                                    (BaseEncodingOptions.t,
                                                      BufferEncoding.t)
                                                      union2)
                                                  ->
                                                  union2_to_js
                                                    BaseEncodingOptions.t_to_js
                                                    BufferEncoding.t_to_js
                                                    x1015) x1014);(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1019 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1021 :
                                                                    Ojs.t) ->
                                                                    x1018
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1019)
                                                                    (PathLike.t_of_js
                                                                    x1021)))|])
    let (realpath :
      PathLike.t ->
        options:BufferEncodingOption.t ->
          callback:(err:ErrnoException.t or_null -> Buffer.t -> unit) -> unit)
      =
      fun (x1022 : PathLike.t) ->
        fun ~options:(x1023 : BufferEncodingOption.t) ->
          fun
            ~callback:(x1024 :
                        err:ErrnoException.t or_null -> Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "realpath"
                 [|(PathLike.t_to_js x1022);(BufferEncodingOption.t_to_js
                                               x1023);(Ojs.fun_to_js 2
                                                         (fun (x1025 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x1027 : Ojs.t)
                                                              ->
                                                              x1024
                                                                ~err:(
                                                                or_null_of_js
                                                                  ErrnoException.t_of_js
                                                                  x1025)
                                                                (Buffer.t_of_js
                                                                   x1027)))|])
    let (realpath :
      PathLike.t ->
        options:BaseEncodingOptions.t or_string or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null ->
                      Buffer.t or_string -> unit)
            -> unit)
      =
      fun (x1028 : PathLike.t) ->
        fun
          ~options:(x1029 :
                     BaseEncodingOptions.t or_string or_null_or_undefined)
          ->
          fun
            ~callback:(x1032 :
                        err:ErrnoException.t or_null ->
                          Buffer.t or_string -> unit)
            ->
            ignore
              (Ojs.call Import.fs "realpath"
                 [|(PathLike.t_to_js x1028);(or_null_or_undefined_to_js
                                               (fun
                                                  (x1030 :
                                                    BaseEncodingOptions.t
                                                      or_string)
                                                  ->
                                                  or_string_to_js
                                                    BaseEncodingOptions.t_to_js
                                                    x1030) x1029);(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1033 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1035 :
                                                                    Ojs.t) ->
                                                                    x1032
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1033)
                                                                    (or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1035)))|])
    let (realpath :
      PathLike.t ->
        callback:(err:ErrnoException.t or_null -> PathLike.t -> unit) -> unit)
      =
      fun (x1037 : PathLike.t) ->
        fun
          ~callback:(x1038 :
                      err:ErrnoException.t or_null -> PathLike.t -> unit)
          ->
          ignore
            (Ojs.call Import.fs "realpath"
               [|(PathLike.t_to_js x1037);(Ojs.fun_to_js 2
                                             (fun (x1039 : Ojs.t) ->
                                                fun (x1041 : Ojs.t) ->
                                                  x1038
                                                    ~err:(or_null_of_js
                                                            ErrnoException.t_of_js
                                                            x1039)
                                                    (PathLike.t_of_js x1041)))|])
    module Realpath =
      struct
        let (__promisify__ :
          PathLike.t ->
            ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
              -> unit -> string Promise.t)
          =
          fun (x1042 : PathLike.t) ->
            fun
              ?options:(x1043 :
                         (BaseEncodingOptions.t, BufferEncoding.t) union2
                           or_null option)
              ->
              fun () ->
                Promise.t_of_js Ojs.string_of_js
                  (let x1049 = Ojs.get_prop_ascii Import.fs "realpath" in
                   Ojs.call (Ojs.get_prop_ascii x1049 "__promisify__")
                     "apply"
                     [|x1049;((let x1044 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1044 "push"
                                    [|(PathLike.t_to_js x1042)|]);
                               (match x1043 with
                                | Some x1045 ->
                                    ignore
                                      (Ojs.call x1044 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1046 :
                                                   (BaseEncodingOptions.t,
                                                     BufferEncoding.t) union2)
                                                 ->
                                                 union2_to_js
                                                   BaseEncodingOptions.t_to_js
                                                   BufferEncoding.t_to_js
                                                   x1046) x1045)|])
                                | None -> ());
                               x1044))|])
        let (__promisify__ :
          PathLike.t -> options:BufferEncodingOption.t -> Buffer.t Promise.t)
          =
          fun (x1051 : PathLike.t) ->
            fun ~options:(x1052 : BufferEncodingOption.t) ->
              Promise.t_of_js Buffer.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "realpath")
                   "__promisify__"
                   [|(PathLike.t_to_js x1051);(BufferEncodingOption.t_to_js
                                                 x1052)|])
        let (__promisify__ :
          PathLike.t ->
            ?options:BaseEncodingOptions.t or_string or_null ->
              unit -> Buffer.t or_string Promise.t)
          =
          fun (x1054 : PathLike.t) ->
            fun
              ?options:(x1055 :
                         BaseEncodingOptions.t or_string or_null option)
              ->
              fun () ->
                Promise.t_of_js
                  (fun (x1061 : Ojs.t) ->
                     or_string_of_js Buffer.t_of_js x1061)
                  (let x1060 = Ojs.get_prop_ascii Import.fs "realpath" in
                   Ojs.call (Ojs.get_prop_ascii x1060 "__promisify__")
                     "apply"
                     [|x1060;((let x1056 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1056 "push"
                                    [|(PathLike.t_to_js x1054)|]);
                               (match x1055 with
                                | Some x1057 ->
                                    ignore
                                      (Ojs.call x1056 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1058 :
                                                   BaseEncodingOptions.t
                                                     or_string)
                                                 ->
                                                 or_string_to_js
                                                   BaseEncodingOptions.t_to_js
                                                   x1058) x1057)|])
                                | None -> ());
                               x1056))|])
        let (native :
          PathLike.t ->
            options:(BaseEncodingOptions.t, BufferEncoding.t) union2
              or_null_or_undefined ->
              callback:(err:ErrnoException.t or_null -> PathLike.t -> unit)
                -> unit)
          =
          fun (x1063 : PathLike.t) ->
            fun
              ~options:(x1064 :
                         (BaseEncodingOptions.t, BufferEncoding.t) union2
                           or_null_or_undefined)
              ->
              fun
                ~callback:(x1068 :
                            err:ErrnoException.t or_null ->
                              PathLike.t -> unit)
                ->
                ignore
                  (Ojs.call (Ojs.get_prop_ascii Import.fs "realpath")
                     "native"
                     [|(PathLike.t_to_js x1063);(or_null_or_undefined_to_js
                                                   (fun
                                                      (x1065 :
                                                        (BaseEncodingOptions.t,
                                                          BufferEncoding.t)
                                                          union2)
                                                      ->
                                                      union2_to_js
                                                        BaseEncodingOptions.t_to_js
                                                        BufferEncoding.t_to_js
                                                        x1065) x1064);(
                       Ojs.fun_to_js 2
                         (fun (x1069 : Ojs.t) ->
                            fun (x1071 : Ojs.t) ->
                              x1068
                                ~err:(or_null_of_js ErrnoException.t_of_js
                                        x1069) (PathLike.t_of_js x1071)))|])
        let (native :
          PathLike.t ->
            options:BufferEncodingOption.t ->
              callback:(err:ErrnoException.t or_null -> Buffer.t -> unit) ->
                unit)
          =
          fun (x1072 : PathLike.t) ->
            fun ~options:(x1073 : BufferEncodingOption.t) ->
              fun
                ~callback:(x1074 :
                            err:ErrnoException.t or_null -> Buffer.t -> unit)
                ->
                ignore
                  (Ojs.call (Ojs.get_prop_ascii Import.fs "realpath")
                     "native"
                     [|(PathLike.t_to_js x1072);(BufferEncodingOption.t_to_js
                                                   x1073);(Ojs.fun_to_js 2
                                                             (fun
                                                                (x1075 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x1077 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x1074
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1075)
                                                                    (
                                                                    Buffer.t_of_js
                                                                    x1077)))|])
        let (native :
          PathLike.t ->
            options:BaseEncodingOptions.t or_string or_null_or_undefined ->
              callback:(err:ErrnoException.t or_null ->
                          Buffer.t or_string -> unit)
                -> unit)
          =
          fun (x1078 : PathLike.t) ->
            fun
              ~options:(x1079 :
                         BaseEncodingOptions.t or_string or_null_or_undefined)
              ->
              fun
                ~callback:(x1082 :
                            err:ErrnoException.t or_null ->
                              Buffer.t or_string -> unit)
                ->
                ignore
                  (Ojs.call (Ojs.get_prop_ascii Import.fs "realpath")
                     "native"
                     [|(PathLike.t_to_js x1078);(or_null_or_undefined_to_js
                                                   (fun
                                                      (x1080 :
                                                        BaseEncodingOptions.t
                                                          or_string)
                                                      ->
                                                      or_string_to_js
                                                        BaseEncodingOptions.t_to_js
                                                        x1080) x1079);(
                       Ojs.fun_to_js 2
                         (fun (x1083 : Ojs.t) ->
                            fun (x1085 : Ojs.t) ->
                              x1082
                                ~err:(or_null_of_js ErrnoException.t_of_js
                                        x1083)
                                (or_string_of_js Buffer.t_of_js x1085)))|])
        let (native :
          PathLike.t ->
            callback:(err:ErrnoException.t or_null -> PathLike.t -> unit) ->
              unit)
          =
          fun (x1087 : PathLike.t) ->
            fun
              ~callback:(x1088 :
                          err:ErrnoException.t or_null -> PathLike.t -> unit)
              ->
              ignore
                (Ojs.call (Ojs.get_prop_ascii Import.fs "realpath") "native"
                   [|(PathLike.t_to_js x1087);(Ojs.fun_to_js 2
                                                 (fun (x1089 : Ojs.t) ->
                                                    fun (x1091 : Ojs.t) ->
                                                      x1088
                                                        ~err:(or_null_of_js
                                                                ErrnoException.t_of_js
                                                                x1089)
                                                        (PathLike.t_of_js
                                                           x1091)))|])
      end
    let (realpath_sync :
      PathLike.t ->
        ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null ->
          unit -> string)
      =
      fun (x1092 : PathLike.t) ->
        fun
          ?options:(x1093 :
                     (BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
                       option)
          ->
          fun () ->
            Ojs.string_of_js
              (let x1099 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1099 "realpathSync") "apply"
                 [|x1099;((let x1094 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1094 "push"
                                [|(PathLike.t_to_js x1092)|]);
                           (match x1093 with
                            | Some x1095 ->
                                ignore
                                  (Ojs.call x1094 "push"
                                     [|(or_null_to_js
                                          (fun
                                             (x1096 :
                                               (BaseEncodingOptions.t,
                                                 BufferEncoding.t) union2)
                                             ->
                                             union2_to_js
                                               BaseEncodingOptions.t_to_js
                                               BufferEncoding.t_to_js x1096)
                                          x1095)|])
                            | None -> ());
                           x1094))|])
    let (realpath_sync :
      PathLike.t -> options:BufferEncodingOption.t -> Buffer.t) =
      fun (x1100 : PathLike.t) ->
        fun ~options:(x1101 : BufferEncodingOption.t) ->
          Buffer.t_of_js
            (Ojs.call Import.fs "realpathSync"
               [|(PathLike.t_to_js x1100);(BufferEncodingOption.t_to_js x1101)|])
    let (realpath_sync :
      PathLike.t ->
        ?options:BaseEncodingOptions.t or_string or_null ->
          unit -> Buffer.t or_string)
      =
      fun (x1102 : PathLike.t) ->
        fun ?options:(x1103 : BaseEncodingOptions.t or_string or_null option)
          ->
          fun () ->
            or_string_of_js Buffer.t_of_js
              (let x1108 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1108 "realpathSync") "apply"
                 [|x1108;((let x1104 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1104 "push"
                                [|(PathLike.t_to_js x1102)|]);
                           (match x1103 with
                            | Some x1105 ->
                                ignore
                                  (Ojs.call x1104 "push"
                                     [|(or_null_to_js
                                          (fun
                                             (x1106 :
                                               BaseEncodingOptions.t
                                                 or_string)
                                             ->
                                             or_string_to_js
                                               BaseEncodingOptions.t_to_js
                                               x1106) x1105)|])
                            | None -> ());
                           x1104))|])
    module RealpathSync =
      struct
        let (native :
          PathLike.t ->
            ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
              -> unit -> string)
          =
          fun (x1110 : PathLike.t) ->
            fun
              ?options:(x1111 :
                         (BaseEncodingOptions.t, BufferEncoding.t) union2
                           or_null option)
              ->
              fun () ->
                Ojs.string_of_js
                  (let x1117 = Ojs.get_prop_ascii Import.fs "realpathSync" in
                   Ojs.call (Ojs.get_prop_ascii x1117 "native") "apply"
                     [|x1117;((let x1112 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1112 "push"
                                    [|(PathLike.t_to_js x1110)|]);
                               (match x1111 with
                                | Some x1113 ->
                                    ignore
                                      (Ojs.call x1112 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1114 :
                                                   (BaseEncodingOptions.t,
                                                     BufferEncoding.t) union2)
                                                 ->
                                                 union2_to_js
                                                   BaseEncodingOptions.t_to_js
                                                   BufferEncoding.t_to_js
                                                   x1114) x1113)|])
                                | None -> ());
                               x1112))|])
        let (native :
          PathLike.t -> options:BufferEncodingOption.t -> Buffer.t) =
          fun (x1118 : PathLike.t) ->
            fun ~options:(x1119 : BufferEncodingOption.t) ->
              Buffer.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "realpathSync")
                   "native"
                   [|(PathLike.t_to_js x1118);(BufferEncodingOption.t_to_js
                                                 x1119)|])
        let (native :
          PathLike.t ->
            ?options:BaseEncodingOptions.t or_string or_null ->
              unit -> Buffer.t or_string)
          =
          fun (x1120 : PathLike.t) ->
            fun
              ?options:(x1121 :
                         BaseEncodingOptions.t or_string or_null option)
              ->
              fun () ->
                or_string_of_js Buffer.t_of_js
                  (let x1126 = Ojs.get_prop_ascii Import.fs "realpathSync" in
                   Ojs.call (Ojs.get_prop_ascii x1126 "native") "apply"
                     [|x1126;((let x1122 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1122 "push"
                                    [|(PathLike.t_to_js x1120)|]);
                               (match x1121 with
                                | Some x1123 ->
                                    ignore
                                      (Ojs.call x1122 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1124 :
                                                   BaseEncodingOptions.t
                                                     or_string)
                                                 ->
                                                 or_string_to_js
                                                   BaseEncodingOptions.t_to_js
                                                   x1124) x1123)|])
                                | None -> ());
                               x1122))|])
      end
    let (unlink : PathLike.t -> callback:NoParamCallback.t -> unit) =
      fun (x1128 : PathLike.t) ->
        fun ~callback:(x1129 : NoParamCallback.t) ->
          ignore
            (Ojs.call Import.fs "unlink"
               [|(PathLike.t_to_js x1128);(NoParamCallback.t_to_js x1129)|])
    module Unlink =
      struct
        let (__promisify__ : PathLike.t -> unit Promise.t) =
          fun (x1130 : PathLike.t) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.fs "unlink")
                 "__promisify__" [|(PathLike.t_to_js x1130)|])
      end
    let (unlink_sync : PathLike.t -> unit) =
      fun (x1132 : PathLike.t) ->
        ignore (Ojs.call Import.fs "unlinkSync" [|(PathLike.t_to_js x1132)|])
    module RmDirOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1134 : Ojs.t) -> x1134
        and t_to_js : t -> Ojs.t = fun (x1133 : Ojs.t) -> x1133
        let (get_max_retries : t -> int) =
          fun (x1135 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1135) "maxRetries")
        let (set_max_retries : t -> int -> unit) =
          fun (x1136 : t) ->
            fun (x1137 : int) ->
              Ojs.set_prop_ascii (t_to_js x1136) "maxRetries"
                (Ojs.int_to_js x1137)
        let (get_recursive : t -> bool) =
          fun (x1138 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1138) "recursive")
        let (set_recursive : t -> bool -> unit) =
          fun (x1139 : t) ->
            fun (x1140 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1139) "recursive"
                (Ojs.bool_to_js x1140)
        let (get_retry_delay : t -> int) =
          fun (x1141 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1141) "retryDelay")
        let (set_retry_delay : t -> int -> unit) =
          fun (x1142 : t) ->
            fun (x1143 : int) ->
              Ojs.set_prop_ascii (t_to_js x1142) "retryDelay"
                (Ojs.int_to_js x1143)
      end
    let (rmdir : PathLike.t -> callback:NoParamCallback.t -> unit) =
      fun (x1144 : PathLike.t) ->
        fun ~callback:(x1145 : NoParamCallback.t) ->
          ignore
            (Ojs.call Import.fs "rmdir"
               [|(PathLike.t_to_js x1144);(NoParamCallback.t_to_js x1145)|])
    let (rmdir :
      PathLike.t ->
        options:RmDirOptions.t -> callback:NoParamCallback.t -> unit)
      =
      fun (x1146 : PathLike.t) ->
        fun ~options:(x1147 : RmDirOptions.t) ->
          fun ~callback:(x1148 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "rmdir"
                 [|(PathLike.t_to_js x1146);(RmDirOptions.t_to_js x1147);(
                   NoParamCallback.t_to_js x1148)|])
    module Rmdir =
      struct
        let (__promisify__ :
          PathLike.t -> ?options:RmDirOptions.t -> unit -> unit Promise.t) =
          fun (x1149 : PathLike.t) ->
            fun ?options:(x1150 : RmDirOptions.t option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x1153 = Ojs.get_prop_ascii Import.fs "rmdir" in
                   Ojs.call (Ojs.get_prop_ascii x1153 "__promisify__")
                     "apply"
                     [|x1153;((let x1151 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1151 "push"
                                    [|(PathLike.t_to_js x1149)|]);
                               (match x1150 with
                                | Some x1152 ->
                                    ignore
                                      (Ojs.call x1151 "push"
                                         [|(RmDirOptions.t_to_js x1152)|])
                                | None -> ());
                               x1151))|])
      end
    let (rmdir_sync : PathLike.t -> ?options:RmDirOptions.t -> unit -> unit)
      =
      fun (x1155 : PathLike.t) ->
        fun ?options:(x1156 : RmDirOptions.t option) ->
          fun () ->
            ignore
              (let x1159 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1159 "rmdirSync") "apply"
                 [|x1159;((let x1157 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1157 "push"
                                [|(PathLike.t_to_js x1155)|]);
                           (match x1156 with
                            | Some x1158 ->
                                ignore
                                  (Ojs.call x1157 "push"
                                     [|(RmDirOptions.t_to_js x1158)|])
                            | None -> ());
                           x1157))|])
    module RmOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1161 : Ojs.t) -> x1161
        and t_to_js : t -> Ojs.t = fun (x1160 : Ojs.t) -> x1160
        let (get_force : t -> bool) =
          fun (x1162 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1162) "force")
        let (set_force : t -> bool -> unit) =
          fun (x1163 : t) ->
            fun (x1164 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1163) "force"
                (Ojs.bool_to_js x1164)
        let (get_max_retries : t -> int) =
          fun (x1165 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1165) "maxRetries")
        let (set_max_retries : t -> int -> unit) =
          fun (x1166 : t) ->
            fun (x1167 : int) ->
              Ojs.set_prop_ascii (t_to_js x1166) "maxRetries"
                (Ojs.int_to_js x1167)
        let (get_recursive : t -> bool) =
          fun (x1168 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1168) "recursive")
        let (set_recursive : t -> bool -> unit) =
          fun (x1169 : t) ->
            fun (x1170 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1169) "recursive"
                (Ojs.bool_to_js x1170)
        let (get_retry_delay : t -> int) =
          fun (x1171 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1171) "retryDelay")
        let (set_retry_delay : t -> int -> unit) =
          fun (x1172 : t) ->
            fun (x1173 : int) ->
              Ojs.set_prop_ascii (t_to_js x1172) "retryDelay"
                (Ojs.int_to_js x1173)
      end
    let (rm :
      PathLike.t -> ?options:RmOptions.t -> NoParamCallback.t -> unit) =
      fun (x1174 : PathLike.t) ->
        fun ?options:(x1175 : RmOptions.t option) ->
          fun (x1176 : NoParamCallback.t) ->
            ignore
              (let x1179 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1179 "rm") "apply"
                 [|x1179;((let x1177 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1177 "push"
                                [|(PathLike.t_to_js x1174)|]);
                           (match x1175 with
                            | Some x1178 ->
                                ignore
                                  (Ojs.call x1177 "push"
                                     [|(RmOptions.t_to_js x1178)|])
                            | None -> ());
                           ignore
                             (Ojs.call x1177 "push"
                                [|(NoParamCallback.t_to_js x1176)|]);
                           x1177))|])
    module Rm =
      struct
        let (__promisify__ :
          PathLike.t -> ?options:RmOptions.t -> unit -> unit Promise.t) =
          fun (x1180 : PathLike.t) ->
            fun ?options:(x1181 : RmOptions.t option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x1184 = Ojs.get_prop_ascii Import.fs "rm" in
                   Ojs.call (Ojs.get_prop_ascii x1184 "__promisify__")
                     "apply"
                     [|x1184;((let x1182 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1182 "push"
                                    [|(PathLike.t_to_js x1180)|]);
                               (match x1181 with
                                | Some x1183 ->
                                    ignore
                                      (Ojs.call x1182 "push"
                                         [|(RmOptions.t_to_js x1183)|])
                                | None -> ());
                               x1182))|])
      end
    let (rm_sync : PathLike.t -> ?options:RmOptions.t -> unit -> unit) =
      fun (x1186 : PathLike.t) ->
        fun ?options:(x1187 : RmOptions.t option) ->
          fun () ->
            ignore
              (let x1190 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1190 "rmSync") "apply"
                 [|x1190;((let x1188 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1188 "push"
                                [|(PathLike.t_to_js x1186)|]);
                           (match x1187 with
                            | Some x1189 ->
                                ignore
                                  (Ojs.call x1188 "push"
                                     [|(RmOptions.t_to_js x1189)|])
                            | None -> ());
                           x1188))|])
    module MakeDirectoryOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1192 : Ojs.t) -> x1192
        and t_to_js : t -> Ojs.t = fun (x1191 : Ojs.t) -> x1191
        let (get_recursive : t -> bool) =
          fun (x1193 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1193) "recursive")
        let (set_recursive : t -> bool -> unit) =
          fun (x1194 : t) ->
            fun (x1195 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1194) "recursive"
                (Ojs.bool_to_js x1195)
        let (get_mode : t -> Mode.t) =
          fun (x1196 : t) ->
            Mode.t_of_js (Ojs.get_prop_ascii (t_to_js x1196) "mode")
        let (set_mode : t -> Mode.t -> unit) =
          fun (x1197 : t) ->
            fun (x1198 : Mode.t) ->
              Ojs.set_prop_ascii (t_to_js x1197) "mode" (Mode.t_to_js x1198)
      end
    let (mkdir :
      PathLike.t ->
        options:(MakeDirectoryOptions.t, AnonymousInterface18.t)
          intersection2 ->
          callback:(err:ErrnoException.t or_null ->
                      ?path:PathLike.t -> unit -> unit)
            -> unit)
      =
      fun (x1199 : PathLike.t) ->
        fun
          ~options:(x1200 :
                     (MakeDirectoryOptions.t, AnonymousInterface18.t)
                       intersection2)
          ->
          fun
            ~callback:(x1203 :
                        err:ErrnoException.t or_null ->
                          ?path:PathLike.t -> unit -> unit)
            ->
            ignore
              (Ojs.call Import.fs "mkdir"
                 [|(PathLike.t_to_js x1199);(intersection2_to_js
                                               MakeDirectoryOptions.t_to_js
                                               AnonymousInterface18.t_to_js
                                               x1200);(Ojs.fun_to_js 2
                                                         (fun (x1204 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x1206 : Ojs.t)
                                                              ->
                                                              x1203
                                                                ~err:(
                                                                or_null_of_js
                                                                  ErrnoException.t_of_js
                                                                  x1204)
                                                                ?path:(
                                                                Ojs.option_of_js
                                                                  PathLike.t_of_js
                                                                  x1206) ()))|])
    let (mkdir :
      PathLike.t ->
        options:Mode.t or_null_or_undefined ->
          callback:NoParamCallback.t -> unit)
      =
      fun (x1208 : PathLike.t) ->
        fun ~options:(x1209 : Mode.t or_null_or_undefined) ->
          fun ~callback:(x1211 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "mkdir"
                 [|(PathLike.t_to_js x1208);(or_null_or_undefined_to_js
                                               Mode.t_to_js x1209);(NoParamCallback.t_to_js
                                                                    x1211)|])
    let (mkdir :
      PathLike.t ->
        options:(MakeDirectoryOptions.t, Mode.t) union2 or_null_or_undefined
          ->
          callback:(err:ErrnoException.t or_null ->
                      ?path:PathLike.t -> unit -> unit)
            -> unit)
      =
      fun (x1212 : PathLike.t) ->
        fun
          ~options:(x1213 :
                     (MakeDirectoryOptions.t, Mode.t) union2
                       or_null_or_undefined)
          ->
          fun
            ~callback:(x1217 :
                        err:ErrnoException.t or_null ->
                          ?path:PathLike.t -> unit -> unit)
            ->
            ignore
              (Ojs.call Import.fs "mkdir"
                 [|(PathLike.t_to_js x1212);(or_null_or_undefined_to_js
                                               (fun
                                                  (x1214 :
                                                    (MakeDirectoryOptions.t,
                                                      Mode.t) union2)
                                                  ->
                                                  union2_to_js
                                                    MakeDirectoryOptions.t_to_js
                                                    Mode.t_to_js x1214) x1213);(
                   Ojs.fun_to_js 2
                     (fun (x1218 : Ojs.t) ->
                        fun (x1220 : Ojs.t) ->
                          x1217
                            ~err:(or_null_of_js ErrnoException.t_of_js x1218)
                            ?path:(Ojs.option_of_js PathLike.t_of_js x1220)
                            ()))|])
    let (mkdir : PathLike.t -> callback:NoParamCallback.t -> unit) =
      fun (x1222 : PathLike.t) ->
        fun ~callback:(x1223 : NoParamCallback.t) ->
          ignore
            (Ojs.call Import.fs "mkdir"
               [|(PathLike.t_to_js x1222);(NoParamCallback.t_to_js x1223)|])
    module Mkdir =
      struct
        let (__promisify__ :
          PathLike.t ->
            options:(MakeDirectoryOptions.t, AnonymousInterface18.t)
              intersection2 -> string or_undefined Promise.t)
          =
          fun (x1224 : PathLike.t) ->
            fun
              ~options:(x1225 :
                         (MakeDirectoryOptions.t, AnonymousInterface18.t)
                           intersection2)
              ->
              Promise.t_of_js
                (fun (x1228 : Ojs.t) ->
                   or_undefined_of_js Ojs.string_of_js x1228)
                (Ojs.call (Ojs.get_prop_ascii Import.fs "mkdir")
                   "__promisify__"
                   [|(PathLike.t_to_js x1224);(intersection2_to_js
                                                 MakeDirectoryOptions.t_to_js
                                                 AnonymousInterface18.t_to_js
                                                 x1225)|])
        let (__promisify__ :
          PathLike.t -> ?options:Mode.t or_null -> unit -> unit Promise.t) =
          fun (x1230 : PathLike.t) ->
            fun ?options:(x1231 : Mode.t or_null option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x1235 = Ojs.get_prop_ascii Import.fs "mkdir" in
                   Ojs.call (Ojs.get_prop_ascii x1235 "__promisify__")
                     "apply"
                     [|x1235;((let x1232 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1232 "push"
                                    [|(PathLike.t_to_js x1230)|]);
                               (match x1231 with
                                | Some x1233 ->
                                    ignore
                                      (Ojs.call x1232 "push"
                                         [|(or_null_to_js Mode.t_to_js x1233)|])
                                | None -> ());
                               x1232))|])
        let (__promisify__ :
          PathLike.t ->
            ?options:(MakeDirectoryOptions.t, Mode.t) union2 or_null ->
              unit -> string or_undefined Promise.t)
          =
          fun (x1237 : PathLike.t) ->
            fun
              ?options:(x1238 :
                         (MakeDirectoryOptions.t, Mode.t) union2 or_null
                           option)
              ->
              fun () ->
                Promise.t_of_js
                  (fun (x1245 : Ojs.t) ->
                     or_undefined_of_js Ojs.string_of_js x1245)
                  (let x1244 = Ojs.get_prop_ascii Import.fs "mkdir" in
                   Ojs.call (Ojs.get_prop_ascii x1244 "__promisify__")
                     "apply"
                     [|x1244;((let x1239 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1239 "push"
                                    [|(PathLike.t_to_js x1237)|]);
                               (match x1238 with
                                | Some x1240 ->
                                    ignore
                                      (Ojs.call x1239 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1241 :
                                                   (MakeDirectoryOptions.t,
                                                     Mode.t) union2)
                                                 ->
                                                 union2_to_js
                                                   MakeDirectoryOptions.t_to_js
                                                   Mode.t_to_js x1241) x1240)|])
                                | None -> ());
                               x1239))|])
      end
    let (mkdir_sync :
      PathLike.t ->
        options:(MakeDirectoryOptions.t, AnonymousInterface18.t)
          intersection2 -> string or_undefined)
      =
      fun (x1247 : PathLike.t) ->
        fun
          ~options:(x1248 :
                     (MakeDirectoryOptions.t, AnonymousInterface18.t)
                       intersection2)
          ->
          or_undefined_of_js Ojs.string_of_js
            (Ojs.call Import.fs "mkdirSync"
               [|(PathLike.t_to_js x1247);(intersection2_to_js
                                             MakeDirectoryOptions.t_to_js
                                             AnonymousInterface18.t_to_js
                                             x1248)|])
    let (mkdir_sync : PathLike.t -> ?options:Mode.t or_null -> unit -> unit)
      =
      fun (x1252 : PathLike.t) ->
        fun ?options:(x1253 : Mode.t or_null option) ->
          fun () ->
            ignore
              (let x1257 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1257 "mkdirSync") "apply"
                 [|x1257;((let x1254 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1254 "push"
                                [|(PathLike.t_to_js x1252)|]);
                           (match x1253 with
                            | Some x1255 ->
                                ignore
                                  (Ojs.call x1254 "push"
                                     [|(or_null_to_js Mode.t_to_js x1255)|])
                            | None -> ());
                           x1254))|])
    let (mkdir_sync :
      PathLike.t ->
        ?options:(MakeDirectoryOptions.t, Mode.t) union2 or_null ->
          unit -> string or_undefined)
      =
      fun (x1258 : PathLike.t) ->
        fun
          ?options:(x1259 :
                     (MakeDirectoryOptions.t, Mode.t) union2 or_null option)
          ->
          fun () ->
            or_undefined_of_js Ojs.string_of_js
              (let x1265 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1265 "mkdirSync") "apply"
                 [|x1265;((let x1260 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1260 "push"
                                [|(PathLike.t_to_js x1258)|]);
                           (match x1259 with
                            | Some x1261 ->
                                ignore
                                  (Ojs.call x1260 "push"
                                     [|(or_null_to_js
                                          (fun
                                             (x1262 :
                                               (MakeDirectoryOptions.t,
                                                 Mode.t) union2)
                                             ->
                                             union2_to_js
                                               MakeDirectoryOptions.t_to_js
                                               Mode.t_to_js x1262) x1261)|])
                            | None -> ());
                           x1260))|])
    let (mkdtemp :
      prefix:string ->
        options:(BaseEncodingOptions.t, BufferEncoding.t) union2
          or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null -> folder:string -> unit) ->
            unit)
      =
      fun ~prefix:(x1267 : string) ->
        fun
          ~options:(x1268 :
                     (BaseEncodingOptions.t, BufferEncoding.t) union2
                       or_null_or_undefined)
          ->
          fun
            ~callback:(x1272 :
                        err:ErrnoException.t or_null -> folder:string -> unit)
            ->
            ignore
              (Ojs.call Import.fs "mkdtemp"
                 [|(Ojs.string_to_js x1267);(or_null_or_undefined_to_js
                                               (fun
                                                  (x1269 :
                                                    (BaseEncodingOptions.t,
                                                      BufferEncoding.t)
                                                      union2)
                                                  ->
                                                  union2_to_js
                                                    BaseEncodingOptions.t_to_js
                                                    BufferEncoding.t_to_js
                                                    x1269) x1268);(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1273 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1275 :
                                                                    Ojs.t) ->
                                                                    x1272
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1273)
                                                                    ~folder:(
                                                                    Ojs.string_of_js
                                                                    x1275)))|])
    let (mkdtemp :
      prefix:string ->
        options:(AnonymousInterface7.t, [ `buffer ]) or_enum ->
          callback:(err:ErrnoException.t or_null -> folder:Buffer.t -> unit)
            -> unit)
      =
      fun ~prefix:(x1276 : string) ->
        fun ~options:(x1277 : (AnonymousInterface7.t, [ `buffer ]) or_enum)
          ->
          fun
            ~callback:(x1280 :
                        err:ErrnoException.t or_null ->
                          folder:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "mkdtemp"
                 [|(Ojs.string_to_js x1276);(or_enum_to_js
                                               AnonymousInterface7.t_to_js
                                               (fun (x1279 : [ `buffer ]) ->
                                                  match x1279 with
                                                  | `buffer ->
                                                      Ojs.string_to_js
                                                        "buffer") x1277);(
                   Ojs.fun_to_js 2
                     (fun (x1281 : Ojs.t) ->
                        fun (x1283 : Ojs.t) ->
                          x1280
                            ~err:(or_null_of_js ErrnoException.t_of_js x1281)
                            ~folder:(Buffer.t_of_js x1283)))|])
    let (mkdtemp :
      prefix:string ->
        options:BaseEncodingOptions.t or_string or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null ->
                      folder:Buffer.t or_string -> unit)
            -> unit)
      =
      fun ~prefix:(x1284 : string) ->
        fun
          ~options:(x1285 :
                     BaseEncodingOptions.t or_string or_null_or_undefined)
          ->
          fun
            ~callback:(x1288 :
                        err:ErrnoException.t or_null ->
                          folder:Buffer.t or_string -> unit)
            ->
            ignore
              (Ojs.call Import.fs "mkdtemp"
                 [|(Ojs.string_to_js x1284);(or_null_or_undefined_to_js
                                               (fun
                                                  (x1286 :
                                                    BaseEncodingOptions.t
                                                      or_string)
                                                  ->
                                                  or_string_to_js
                                                    BaseEncodingOptions.t_to_js
                                                    x1286) x1285);(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1289 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1291 :
                                                                    Ojs.t) ->
                                                                    x1288
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1289)
                                                                    ~folder:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1291)))|])
    let (mkdtemp :
      prefix:string ->
        callback:(err:ErrnoException.t or_null -> folder:string -> unit) ->
          unit)
      =
      fun ~prefix:(x1293 : string) ->
        fun
          ~callback:(x1294 :
                      err:ErrnoException.t or_null -> folder:string -> unit)
          ->
          ignore
            (Ojs.call Import.fs "mkdtemp"
               [|(Ojs.string_to_js x1293);(Ojs.fun_to_js 2
                                             (fun (x1295 : Ojs.t) ->
                                                fun (x1297 : Ojs.t) ->
                                                  x1294
                                                    ~err:(or_null_of_js
                                                            ErrnoException.t_of_js
                                                            x1295)
                                                    ~folder:(Ojs.string_of_js
                                                               x1297)))|])
    module Mkdtemp =
      struct
        let (__promisify__ :
          prefix:string ->
            ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
              -> unit -> string Promise.t)
          =
          fun ~prefix:(x1298 : string) ->
            fun
              ?options:(x1299 :
                         (BaseEncodingOptions.t, BufferEncoding.t) union2
                           or_null option)
              ->
              fun () ->
                Promise.t_of_js Ojs.string_of_js
                  (let x1305 = Ojs.get_prop_ascii Import.fs "mkdtemp" in
                   Ojs.call (Ojs.get_prop_ascii x1305 "__promisify__")
                     "apply"
                     [|x1305;((let x1300 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1300 "push"
                                    [|(Ojs.string_to_js x1298)|]);
                               (match x1299 with
                                | Some x1301 ->
                                    ignore
                                      (Ojs.call x1300 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1302 :
                                                   (BaseEncodingOptions.t,
                                                     BufferEncoding.t) union2)
                                                 ->
                                                 union2_to_js
                                                   BaseEncodingOptions.t_to_js
                                                   BufferEncoding.t_to_js
                                                   x1302) x1301)|])
                                | None -> ());
                               x1300))|])
        let (__promisify__ :
          prefix:string ->
            options:BufferEncodingOption.t -> Buffer.t Promise.t)
          =
          fun ~prefix:(x1307 : string) ->
            fun ~options:(x1308 : BufferEncodingOption.t) ->
              Promise.t_of_js Buffer.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "mkdtemp")
                   "__promisify__"
                   [|(Ojs.string_to_js x1307);(BufferEncodingOption.t_to_js
                                                 x1308)|])
        let (__promisify__ :
          prefix:string ->
            ?options:BaseEncodingOptions.t or_string or_null ->
              unit -> Buffer.t or_string Promise.t)
          =
          fun ~prefix:(x1310 : string) ->
            fun
              ?options:(x1311 :
                         BaseEncodingOptions.t or_string or_null option)
              ->
              fun () ->
                Promise.t_of_js
                  (fun (x1317 : Ojs.t) ->
                     or_string_of_js Buffer.t_of_js x1317)
                  (let x1316 = Ojs.get_prop_ascii Import.fs "mkdtemp" in
                   Ojs.call (Ojs.get_prop_ascii x1316 "__promisify__")
                     "apply"
                     [|x1316;((let x1312 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1312 "push"
                                    [|(Ojs.string_to_js x1310)|]);
                               (match x1311 with
                                | Some x1313 ->
                                    ignore
                                      (Ojs.call x1312 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1314 :
                                                   BaseEncodingOptions.t
                                                     or_string)
                                                 ->
                                                 or_string_to_js
                                                   BaseEncodingOptions.t_to_js
                                                   x1314) x1313)|])
                                | None -> ());
                               x1312))|])
      end
    let (mkdtemp_sync :
      prefix:string ->
        ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null ->
          unit -> string)
      =
      fun ~prefix:(x1319 : string) ->
        fun
          ?options:(x1320 :
                     (BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
                       option)
          ->
          fun () ->
            Ojs.string_of_js
              (let x1326 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1326 "mkdtempSync") "apply"
                 [|x1326;((let x1321 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1321 "push"
                                [|(Ojs.string_to_js x1319)|]);
                           (match x1320 with
                            | Some x1322 ->
                                ignore
                                  (Ojs.call x1321 "push"
                                     [|(or_null_to_js
                                          (fun
                                             (x1323 :
                                               (BaseEncodingOptions.t,
                                                 BufferEncoding.t) union2)
                                             ->
                                             union2_to_js
                                               BaseEncodingOptions.t_to_js
                                               BufferEncoding.t_to_js x1323)
                                          x1322)|])
                            | None -> ());
                           x1321))|])
    let (mkdtemp_sync :
      prefix:string -> options:BufferEncodingOption.t -> Buffer.t) =
      fun ~prefix:(x1327 : string) ->
        fun ~options:(x1328 : BufferEncodingOption.t) ->
          Buffer.t_of_js
            (Ojs.call Import.fs "mkdtempSync"
               [|(Ojs.string_to_js x1327);(BufferEncodingOption.t_to_js x1328)|])
    let (mkdtemp_sync :
      prefix:string ->
        ?options:BaseEncodingOptions.t or_string or_null ->
          unit -> Buffer.t or_string)
      =
      fun ~prefix:(x1329 : string) ->
        fun ?options:(x1330 : BaseEncodingOptions.t or_string or_null option)
          ->
          fun () ->
            or_string_of_js Buffer.t_of_js
              (let x1335 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1335 "mkdtempSync") "apply"
                 [|x1335;((let x1331 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1331 "push"
                                [|(Ojs.string_to_js x1329)|]);
                           (match x1330 with
                            | Some x1332 ->
                                ignore
                                  (Ojs.call x1331 "push"
                                     [|(or_null_to_js
                                          (fun
                                             (x1333 :
                                               BaseEncodingOptions.t
                                                 or_string)
                                             ->
                                             or_string_to_js
                                               BaseEncodingOptions.t_to_js
                                               x1333) x1332)|])
                            | None -> ());
                           x1331))|])
    let (readdir :
      PathLike.t ->
        options:(BufferEncoding.t, AnonymousInterface11.t) union2
          or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null -> files:string list -> unit)
            -> unit)
      =
      fun (x1337 : PathLike.t) ->
        fun
          ~options:(x1338 :
                     (BufferEncoding.t, AnonymousInterface11.t) union2
                       or_null_or_undefined)
          ->
          fun
            ~callback:(x1342 :
                        err:ErrnoException.t or_null ->
                          files:string list -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readdir"
                 [|(PathLike.t_to_js x1337);(or_null_or_undefined_to_js
                                               (fun
                                                  (x1339 :
                                                    (BufferEncoding.t,
                                                      AnonymousInterface11.t)
                                                      union2)
                                                  ->
                                                  union2_to_js
                                                    BufferEncoding.t_to_js
                                                    AnonymousInterface11.t_to_js
                                                    x1339) x1338);(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1343 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1345 :
                                                                    Ojs.t) ->
                                                                    x1342
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1343)
                                                                    ~files:(
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x1345)))|])
    let (readdir :
      PathLike.t ->
        options:(AnonymousInterface9.t, [ `buffer ]) or_enum ->
          callback:(err:ErrnoException.t or_null ->
                      files:Buffer.t list -> unit)
            -> unit)
      =
      fun (x1347 : PathLike.t) ->
        fun ~options:(x1348 : (AnonymousInterface9.t, [ `buffer ]) or_enum)
          ->
          fun
            ~callback:(x1351 :
                        err:ErrnoException.t or_null ->
                          files:Buffer.t list -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readdir"
                 [|(PathLike.t_to_js x1347);(or_enum_to_js
                                               AnonymousInterface9.t_to_js
                                               (fun (x1350 : [ `buffer ]) ->
                                                  match x1350 with
                                                  | `buffer ->
                                                      Ojs.string_to_js
                                                        "buffer") x1348);(
                   Ojs.fun_to_js 2
                     (fun (x1352 : Ojs.t) ->
                        fun (x1354 : Ojs.t) ->
                          x1351
                            ~err:(or_null_of_js ErrnoException.t_of_js x1352)
                            ~files:(Ojs.list_of_js Buffer.t_of_js x1354)))|])
    let (readdir :
      PathLike.t ->
        options:BufferEncoding.t or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null ->
                      files:Buffer.t or_string list -> unit)
            -> unit)
      =
      fun (x1356 : PathLike.t) ->
        fun ~options:(x1357 : BufferEncoding.t or_null_or_undefined) ->
          fun
            ~callback:(x1359 :
                        err:ErrnoException.t or_null ->
                          files:Buffer.t or_string list -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readdir"
                 [|(PathLike.t_to_js x1356);(or_null_or_undefined_to_js
                                               BufferEncoding.t_to_js x1357);(
                   Ojs.fun_to_js 2
                     (fun (x1360 : Ojs.t) ->
                        fun (x1362 : Ojs.t) ->
                          x1359
                            ~err:(or_null_of_js ErrnoException.t_of_js x1360)
                            ~files:(Ojs.list_of_js
                                      (fun (x1363 : Ojs.t) ->
                                         or_string_of_js Buffer.t_of_js x1363)
                                      x1362)))|])
    let (readdir :
      PathLike.t ->
        callback:(err:ErrnoException.t or_null -> files:string list -> unit)
          -> unit)
      =
      fun (x1365 : PathLike.t) ->
        fun
          ~callback:(x1366 :
                      err:ErrnoException.t or_null ->
                        files:string list -> unit)
          ->
          ignore
            (Ojs.call Import.fs "readdir"
               [|(PathLike.t_to_js x1365);(Ojs.fun_to_js 2
                                             (fun (x1367 : Ojs.t) ->
                                                fun (x1369 : Ojs.t) ->
                                                  x1366
                                                    ~err:(or_null_of_js
                                                            ErrnoException.t_of_js
                                                            x1367)
                                                    ~files:(Ojs.list_of_js
                                                              Ojs.string_of_js
                                                              x1369)))|])
    let (readdir :
      PathLike.t ->
        options:(BaseEncodingOptions.t, AnonymousInterface20.t) intersection2
          ->
          callback:(err:ErrnoException.t or_null ->
                      files:Dirent.t list -> unit)
            -> unit)
      =
      fun (x1371 : PathLike.t) ->
        fun
          ~options:(x1372 :
                     (BaseEncodingOptions.t, AnonymousInterface20.t)
                       intersection2)
          ->
          fun
            ~callback:(x1375 :
                        err:ErrnoException.t or_null ->
                          files:Dirent.t list -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readdir"
                 [|(PathLike.t_to_js x1371);(intersection2_to_js
                                               BaseEncodingOptions.t_to_js
                                               AnonymousInterface20.t_to_js
                                               x1372);(Ojs.fun_to_js 2
                                                         (fun (x1376 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x1378 : Ojs.t)
                                                              ->
                                                              x1375
                                                                ~err:(
                                                                or_null_of_js
                                                                  ErrnoException.t_of_js
                                                                  x1376)
                                                                ~files:(
                                                                Ojs.list_of_js
                                                                  Dirent.t_of_js
                                                                  x1378)))|])
    module Readdir =
      struct
        let (__promisify__ :
          PathLike.t ->
            ?options:(BufferEncoding.t, AnonymousInterface11.t) union2
              or_null -> unit -> string list Promise.t)
          =
          fun (x1380 : PathLike.t) ->
            fun
              ?options:(x1381 :
                         (BufferEncoding.t, AnonymousInterface11.t) union2
                           or_null option)
              ->
              fun () ->
                Promise.t_of_js
                  (fun (x1388 : Ojs.t) ->
                     Ojs.list_of_js Ojs.string_of_js x1388)
                  (let x1387 = Ojs.get_prop_ascii Import.fs "readdir" in
                   Ojs.call (Ojs.get_prop_ascii x1387 "__promisify__")
                     "apply"
                     [|x1387;((let x1382 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1382 "push"
                                    [|(PathLike.t_to_js x1380)|]);
                               (match x1381 with
                                | Some x1383 ->
                                    ignore
                                      (Ojs.call x1382 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1384 :
                                                   (BufferEncoding.t,
                                                     AnonymousInterface11.t)
                                                     union2)
                                                 ->
                                                 union2_to_js
                                                   BufferEncoding.t_to_js
                                                   AnonymousInterface11.t_to_js
                                                   x1384) x1383)|])
                                | None -> ());
                               x1382))|])
        let (__promisify__ :
          PathLike.t ->
            options:(AnonymousInterface9.t, [ `buffer ]) or_enum ->
              Buffer.t list Promise.t)
          =
          fun (x1390 : PathLike.t) ->
            fun
              ~options:(x1391 : (AnonymousInterface9.t, [ `buffer ]) or_enum)
              ->
              Promise.t_of_js
                (fun (x1394 : Ojs.t) -> Ojs.list_of_js Buffer.t_of_js x1394)
                (Ojs.call (Ojs.get_prop_ascii Import.fs "readdir")
                   "__promisify__"
                   [|(PathLike.t_to_js x1390);(or_enum_to_js
                                                 AnonymousInterface9.t_to_js
                                                 (fun (x1393 : [ `buffer ])
                                                    ->
                                                    match x1393 with
                                                    | `buffer ->
                                                        Ojs.string_to_js
                                                          "buffer") x1391)|])
        let (__promisify__ :
          PathLike.t ->
            ?options:BufferEncoding.t or_null ->
              unit -> Buffer.t or_string list Promise.t)
          =
          fun (x1396 : PathLike.t) ->
            fun ?options:(x1397 : BufferEncoding.t or_null option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x1402 : Ojs.t) ->
                     Ojs.list_of_js
                       (fun (x1403 : Ojs.t) ->
                          or_string_of_js Buffer.t_of_js x1403) x1402)
                  (let x1401 = Ojs.get_prop_ascii Import.fs "readdir" in
                   Ojs.call (Ojs.get_prop_ascii x1401 "__promisify__")
                     "apply"
                     [|x1401;((let x1398 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1398 "push"
                                    [|(PathLike.t_to_js x1396)|]);
                               (match x1397 with
                                | Some x1399 ->
                                    ignore
                                      (Ojs.call x1398 "push"
                                         [|(or_null_to_js
                                              BufferEncoding.t_to_js x1399)|])
                                | None -> ());
                               x1398))|])
        let (__promisify__ :
          PathLike.t ->
            options:(BaseEncodingOptions.t, AnonymousInterface20.t)
              intersection2 -> Dirent.t list Promise.t)
          =
          fun (x1405 : PathLike.t) ->
            fun
              ~options:(x1406 :
                         (BaseEncodingOptions.t, AnonymousInterface20.t)
                           intersection2)
              ->
              Promise.t_of_js
                (fun (x1409 : Ojs.t) -> Ojs.list_of_js Dirent.t_of_js x1409)
                (Ojs.call (Ojs.get_prop_ascii Import.fs "readdir")
                   "__promisify__"
                   [|(PathLike.t_to_js x1405);(intersection2_to_js
                                                 BaseEncodingOptions.t_to_js
                                                 AnonymousInterface20.t_to_js
                                                 x1406)|])
      end
    let (readdir_sync :
      PathLike.t ->
        ?options:(BufferEncoding.t, AnonymousInterface11.t) union2 or_null ->
          unit -> string list)
      =
      fun (x1411 : PathLike.t) ->
        fun
          ?options:(x1412 :
                     (BufferEncoding.t, AnonymousInterface11.t) union2
                       or_null option)
          ->
          fun () ->
            Ojs.list_of_js Ojs.string_of_js
              (let x1418 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1418 "readdirSync") "apply"
                 [|x1418;((let x1413 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1413 "push"
                                [|(PathLike.t_to_js x1411)|]);
                           (match x1412 with
                            | Some x1414 ->
                                ignore
                                  (Ojs.call x1413 "push"
                                     [|(or_null_to_js
                                          (fun
                                             (x1415 :
                                               (BufferEncoding.t,
                                                 AnonymousInterface11.t)
                                                 union2)
                                             ->
                                             union2_to_js
                                               BufferEncoding.t_to_js
                                               AnonymousInterface11.t_to_js
                                               x1415) x1414)|])
                            | None -> ());
                           x1413))|])
    let (readdir_sync :
      PathLike.t ->
        options:(AnonymousInterface9.t, [ `buffer ]) or_enum -> Buffer.t list)
      =
      fun (x1420 : PathLike.t) ->
        fun ~options:(x1421 : (AnonymousInterface9.t, [ `buffer ]) or_enum)
          ->
          Ojs.list_of_js Buffer.t_of_js
            (Ojs.call Import.fs "readdirSync"
               [|(PathLike.t_to_js x1420);(or_enum_to_js
                                             AnonymousInterface9.t_to_js
                                             (fun (x1423 : [ `buffer ]) ->
                                                match x1423 with
                                                | `buffer ->
                                                    Ojs.string_to_js "buffer")
                                             x1421)|])
    let (readdir_sync :
      PathLike.t ->
        ?options:BufferEncoding.t or_null -> unit -> Buffer.t or_string list)
      =
      fun (x1425 : PathLike.t) ->
        fun ?options:(x1426 : BufferEncoding.t or_null option) ->
          fun () ->
            Ojs.list_of_js
              (fun (x1431 : Ojs.t) -> or_string_of_js Buffer.t_of_js x1431)
              (let x1430 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1430 "readdirSync") "apply"
                 [|x1430;((let x1427 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1427 "push"
                                [|(PathLike.t_to_js x1425)|]);
                           (match x1426 with
                            | Some x1428 ->
                                ignore
                                  (Ojs.call x1427 "push"
                                     [|(or_null_to_js BufferEncoding.t_to_js
                                          x1428)|])
                            | None -> ());
                           x1427))|])
    let (readdir_sync :
      PathLike.t ->
        options:(BaseEncodingOptions.t, AnonymousInterface20.t) intersection2
          -> Dirent.t list)
      =
      fun (x1433 : PathLike.t) ->
        fun
          ~options:(x1434 :
                     (BaseEncodingOptions.t, AnonymousInterface20.t)
                       intersection2)
          ->
          Ojs.list_of_js Dirent.t_of_js
            (Ojs.call Import.fs "readdirSync"
               [|(PathLike.t_to_js x1433);(intersection2_to_js
                                             BaseEncodingOptions.t_to_js
                                             AnonymousInterface20.t_to_js
                                             x1434)|])
    let (close : int -> callback:NoParamCallback.t -> unit) =
      fun (x1438 : int) ->
        fun ~callback:(x1439 : NoParamCallback.t) ->
          ignore
            (Ojs.call Import.fs "close"
               [|(Ojs.int_to_js x1438);(NoParamCallback.t_to_js x1439)|])
    module Close =
      struct
        let (__promisify__ : int -> unit Promise.t) =
          fun (x1440 : int) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.fs "close")
                 "__promisify__" [|(Ojs.int_to_js x1440)|])
      end
    let (close_sync : int -> unit) =
      fun (x1442 : int) ->
        ignore (Ojs.call Import.fs "closeSync" [|(Ojs.int_to_js x1442)|])
    let (open_ :
      PathLike.t ->
        flags:OpenMode.t ->
          mode:Mode.t or_null_or_undefined ->
            callback:(err:ErrnoException.t or_null -> fd:int -> unit) -> unit)
      =
      fun (x1443 : PathLike.t) ->
        fun ~flags:(x1444 : OpenMode.t) ->
          fun ~mode:(x1445 : Mode.t or_null_or_undefined) ->
            fun
              ~callback:(x1447 :
                          err:ErrnoException.t or_null -> fd:int -> unit)
              ->
              ignore
                (Ojs.call Import.fs "open"
                   [|(PathLike.t_to_js x1443);(OpenMode.t_to_js x1444);(
                     or_null_or_undefined_to_js Mode.t_to_js x1445);(
                     Ojs.fun_to_js 2
                       (fun (x1448 : Ojs.t) ->
                          fun (x1450 : Ojs.t) ->
                            x1447
                              ~err:(or_null_of_js ErrnoException.t_of_js
                                      x1448) ~fd:(Ojs.int_of_js x1450)))|])
    let (open_ :
      PathLike.t ->
        flags:OpenMode.t ->
          callback:(err:ErrnoException.t or_null -> fd:int -> unit) -> unit)
      =
      fun (x1451 : PathLike.t) ->
        fun ~flags:(x1452 : OpenMode.t) ->
          fun
            ~callback:(x1453 :
                        err:ErrnoException.t or_null -> fd:int -> unit)
            ->
            ignore
              (Ojs.call Import.fs "open"
                 [|(PathLike.t_to_js x1451);(OpenMode.t_to_js x1452);(
                   Ojs.fun_to_js 2
                     (fun (x1454 : Ojs.t) ->
                        fun (x1456 : Ojs.t) ->
                          x1453
                            ~err:(or_null_of_js ErrnoException.t_of_js x1454)
                            ~fd:(Ojs.int_of_js x1456)))|])
    module Open =
      struct
        let (__promisify__ :
          PathLike.t ->
            flags:OpenMode.t -> ?mode:Mode.t or_null -> unit -> int Promise.t)
          =
          fun (x1457 : PathLike.t) ->
            fun ~flags:(x1458 : OpenMode.t) ->
              fun ?mode:(x1459 : Mode.t or_null option) ->
                fun () ->
                  Promise.t_of_js Ojs.int_of_js
                    (let x1463 = Ojs.get_prop_ascii Import.fs "open" in
                     Ojs.call (Ojs.get_prop_ascii x1463 "__promisify__")
                       "apply"
                       [|x1463;((let x1460 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1460 "push"
                                      [|(PathLike.t_to_js x1457)|]);
                                 ignore
                                   (Ojs.call x1460 "push"
                                      [|(OpenMode.t_to_js x1458)|]);
                                 (match x1459 with
                                  | Some x1461 ->
                                      ignore
                                        (Ojs.call x1460 "push"
                                           [|(or_null_to_js Mode.t_to_js
                                                x1461)|])
                                  | None -> ());
                                 x1460))|])
      end
    let (open_sync :
      PathLike.t -> flags:OpenMode.t -> ?mode:Mode.t or_null -> unit -> int)
      =
      fun (x1465 : PathLike.t) ->
        fun ~flags:(x1466 : OpenMode.t) ->
          fun ?mode:(x1467 : Mode.t or_null option) ->
            fun () ->
              Ojs.int_of_js
                (let x1471 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x1471 "openSync") "apply"
                   [|x1471;((let x1468 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1468 "push"
                                  [|(PathLike.t_to_js x1465)|]);
                             ignore
                               (Ojs.call x1468 "push"
                                  [|(OpenMode.t_to_js x1466)|]);
                             (match x1467 with
                              | Some x1469 ->
                                  ignore
                                    (Ojs.call x1468 "push"
                                       [|(or_null_to_js Mode.t_to_js x1469)|])
                              | None -> ());
                             x1468))|])
    let (utimes :
      PathLike.t ->
        atime:Date.t or_string or_number ->
          mtime:Date.t or_string or_number ->
            callback:NoParamCallback.t -> unit)
      =
      fun (x1472 : PathLike.t) ->
        fun ~atime:(x1473 : Date.t or_string or_number) ->
          fun ~mtime:(x1476 : Date.t or_string or_number) ->
            fun ~callback:(x1479 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "utimes"
                   [|(PathLike.t_to_js x1472);(or_number_to_js
                                                 (fun
                                                    (x1474 :
                                                      Date.t or_string)
                                                    ->
                                                    or_string_to_js
                                                      Date.t_to_js x1474)
                                                 x1473);(or_number_to_js
                                                           (fun
                                                              (x1477 :
                                                                Date.t
                                                                  or_string)
                                                              ->
                                                              or_string_to_js
                                                                Date.t_to_js
                                                                x1477) x1476);(
                     NoParamCallback.t_to_js x1479)|])
    module Utimes =
      struct
        let (__promisify__ :
          PathLike.t ->
            atime:Date.t or_string or_number ->
              mtime:Date.t or_string or_number -> unit Promise.t)
          =
          fun (x1480 : PathLike.t) ->
            fun ~atime:(x1481 : Date.t or_string or_number) ->
              fun ~mtime:(x1484 : Date.t or_string or_number) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (Ojs.get_prop_ascii Import.fs "utimes")
                     "__promisify__"
                     [|(PathLike.t_to_js x1480);(or_number_to_js
                                                   (fun
                                                      (x1482 :
                                                        Date.t or_string)
                                                      ->
                                                      or_string_to_js
                                                        Date.t_to_js x1482)
                                                   x1481);(or_number_to_js
                                                             (fun
                                                                (x1485 :
                                                                  Date.t
                                                                    or_string)
                                                                ->
                                                                or_string_to_js
                                                                  Date.t_to_js
                                                                  x1485)
                                                             x1484)|])
      end
    let (utimes_sync :
      PathLike.t ->
        atime:Date.t or_string or_number ->
          mtime:Date.t or_string or_number -> unit)
      =
      fun (x1488 : PathLike.t) ->
        fun ~atime:(x1489 : Date.t or_string or_number) ->
          fun ~mtime:(x1492 : Date.t or_string or_number) ->
            ignore
              (Ojs.call Import.fs "utimesSync"
                 [|(PathLike.t_to_js x1488);(or_number_to_js
                                               (fun
                                                  (x1490 : Date.t or_string)
                                                  ->
                                                  or_string_to_js
                                                    Date.t_to_js x1490) x1489);(
                   or_number_to_js
                     (fun (x1493 : Date.t or_string) ->
                        or_string_to_js Date.t_to_js x1493) x1492)|])
    let (futimes :
      int ->
        atime:Date.t or_string or_number ->
          mtime:Date.t or_string or_number ->
            callback:NoParamCallback.t -> unit)
      =
      fun (x1495 : int) ->
        fun ~atime:(x1496 : Date.t or_string or_number) ->
          fun ~mtime:(x1499 : Date.t or_string or_number) ->
            fun ~callback:(x1502 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "futimes"
                   [|(Ojs.int_to_js x1495);(or_number_to_js
                                              (fun (x1497 : Date.t or_string)
                                                 ->
                                                 or_string_to_js Date.t_to_js
                                                   x1497) x1496);(or_number_to_js
                                                                    (
                                                                    fun
                                                                    (x1500 :
                                                                    Date.t
                                                                    or_string)
                                                                    ->
                                                                    or_string_to_js
                                                                    Date.t_to_js
                                                                    x1500)
                                                                    x1499);(
                     NoParamCallback.t_to_js x1502)|])
    module Futimes =
      struct
        let (__promisify__ :
          int ->
            atime:Date.t or_string or_number ->
              mtime:Date.t or_string or_number -> unit Promise.t)
          =
          fun (x1503 : int) ->
            fun ~atime:(x1504 : Date.t or_string or_number) ->
              fun ~mtime:(x1507 : Date.t or_string or_number) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (Ojs.get_prop_ascii Import.fs "futimes")
                     "__promisify__"
                     [|(Ojs.int_to_js x1503);(or_number_to_js
                                                (fun
                                                   (x1505 : Date.t or_string)
                                                   ->
                                                   or_string_to_js
                                                     Date.t_to_js x1505)
                                                x1504);(or_number_to_js
                                                          (fun
                                                             (x1508 :
                                                               Date.t
                                                                 or_string)
                                                             ->
                                                             or_string_to_js
                                                               Date.t_to_js
                                                               x1508) x1507)|])
      end
    let (futimes_sync :
      int ->
        atime:Date.t or_string or_number ->
          mtime:Date.t or_string or_number -> unit)
      =
      fun (x1511 : int) ->
        fun ~atime:(x1512 : Date.t or_string or_number) ->
          fun ~mtime:(x1515 : Date.t or_string or_number) ->
            ignore
              (Ojs.call Import.fs "futimesSync"
                 [|(Ojs.int_to_js x1511);(or_number_to_js
                                            (fun (x1513 : Date.t or_string)
                                               ->
                                               or_string_to_js Date.t_to_js
                                                 x1513) x1512);(or_number_to_js
                                                                  (fun
                                                                    (x1516 :
                                                                    Date.t
                                                                    or_string)
                                                                    ->
                                                                    or_string_to_js
                                                                    Date.t_to_js
                                                                    x1516)
                                                                  x1515)|])
    let (fsync : int -> callback:NoParamCallback.t -> unit) =
      fun (x1518 : int) ->
        fun ~callback:(x1519 : NoParamCallback.t) ->
          ignore
            (Ojs.call Import.fs "fsync"
               [|(Ojs.int_to_js x1518);(NoParamCallback.t_to_js x1519)|])
    module Fsync =
      struct
        let (__promisify__ : int -> unit Promise.t) =
          fun (x1520 : int) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.fs "fsync")
                 "__promisify__" [|(Ojs.int_to_js x1520)|])
      end
    let (fsync_sync : int -> unit) =
      fun (x1522 : int) ->
        ignore (Ojs.call Import.fs "fsyncSync" [|(Ojs.int_to_js x1522)|])
    let (write :
      int ->
        buffer:'TBuffer ->
          offset:int or_null_or_undefined ->
            length:int or_null_or_undefined ->
              position:int or_null_or_undefined ->
                callback:(err:ErrnoException.t or_null ->
                            written:int -> buffer:'TBuffer -> unit)
                  -> unit)
      =
      fun (x1523 : int) ->
        fun ~buffer:(x1524 : 'TBuffer) ->
          fun ~offset:(x1525 : int or_null_or_undefined) ->
            fun ~length:(x1527 : int or_null_or_undefined) ->
              fun ~position:(x1529 : int or_null_or_undefined) ->
                fun
                  ~callback:(x1531 :
                              err:ErrnoException.t or_null ->
                                written:int -> buffer:'TBuffer -> unit)
                  ->
                  ignore
                    (Ojs.call Import.fs "write"
                       [|(Ojs.int_to_js x1523);(Obj.magic x1524);(or_null_or_undefined_to_js
                                                                    Ojs.int_to_js
                                                                    x1525);(
                         or_null_or_undefined_to_js Ojs.int_to_js x1527);(
                         or_null_or_undefined_to_js Ojs.int_to_js x1529);(
                         Ojs.fun_to_js 3
                           (fun (x1532 : Ojs.t) ->
                              fun (x1534 : Ojs.t) ->
                                fun (x1535 : Ojs.t) ->
                                  x1531
                                    ~err:(or_null_of_js
                                            ErrnoException.t_of_js x1532)
                                    ~written:(Ojs.int_of_js x1534)
                                    ~buffer:(Obj.magic x1535)))|])
    let (write :
      int ->
        buffer:'TBuffer ->
          offset:int or_null_or_undefined ->
            length:int or_null_or_undefined ->
              callback:(err:ErrnoException.t or_null ->
                          written:int -> buffer:'TBuffer -> unit)
                -> unit)
      =
      fun (x1536 : int) ->
        fun ~buffer:(x1537 : 'TBuffer) ->
          fun ~offset:(x1538 : int or_null_or_undefined) ->
            fun ~length:(x1540 : int or_null_or_undefined) ->
              fun
                ~callback:(x1542 :
                            err:ErrnoException.t or_null ->
                              written:int -> buffer:'TBuffer -> unit)
                ->
                ignore
                  (Ojs.call Import.fs "write"
                     [|(Ojs.int_to_js x1536);(Obj.magic x1537);(or_null_or_undefined_to_js
                                                                  Ojs.int_to_js
                                                                  x1538);(
                       or_null_or_undefined_to_js Ojs.int_to_js x1540);(
                       Ojs.fun_to_js 3
                         (fun (x1543 : Ojs.t) ->
                            fun (x1545 : Ojs.t) ->
                              fun (x1546 : Ojs.t) ->
                                x1542
                                  ~err:(or_null_of_js ErrnoException.t_of_js
                                          x1543)
                                  ~written:(Ojs.int_of_js x1545)
                                  ~buffer:(Obj.magic x1546)))|])
    let (write :
      int ->
        buffer:'TBuffer ->
          offset:int or_null_or_undefined ->
            callback:(err:ErrnoException.t or_null ->
                        written:int -> buffer:'TBuffer -> unit)
              -> unit)
      =
      fun (x1547 : int) ->
        fun ~buffer:(x1548 : 'TBuffer) ->
          fun ~offset:(x1549 : int or_null_or_undefined) ->
            fun
              ~callback:(x1551 :
                          err:ErrnoException.t or_null ->
                            written:int -> buffer:'TBuffer -> unit)
              ->
              ignore
                (Ojs.call Import.fs "write"
                   [|(Ojs.int_to_js x1547);(Obj.magic x1548);(or_null_or_undefined_to_js
                                                                Ojs.int_to_js
                                                                x1549);(
                     Ojs.fun_to_js 3
                       (fun (x1552 : Ojs.t) ->
                          fun (x1554 : Ojs.t) ->
                            fun (x1555 : Ojs.t) ->
                              x1551
                                ~err:(or_null_of_js ErrnoException.t_of_js
                                        x1552) ~written:(Ojs.int_of_js x1554)
                                ~buffer:(Obj.magic x1555)))|])
    let (write :
      int ->
        buffer:'TBuffer ->
          callback:(err:ErrnoException.t or_null ->
                      written:int -> buffer:'TBuffer -> unit)
            -> unit)
      =
      fun (x1556 : int) ->
        fun ~buffer:(x1557 : 'TBuffer) ->
          fun
            ~callback:(x1558 :
                        err:ErrnoException.t or_null ->
                          written:int -> buffer:'TBuffer -> unit)
            ->
            ignore
              (Ojs.call Import.fs "write"
                 [|(Ojs.int_to_js x1556);(Obj.magic x1557);(Ojs.fun_to_js 3
                                                              (fun
                                                                 (x1559 :
                                                                   Ojs.t)
                                                                 ->
                                                                 fun
                                                                   (x1561 :
                                                                    Ojs.t)
                                                                   ->
                                                                   fun
                                                                    (x1562 :
                                                                    Ojs.t) ->
                                                                    x1558
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1559)
                                                                    ~written:(
                                                                    Ojs.int_of_js
                                                                    x1561)
                                                                    ~buffer:(
                                                                    Obj.magic
                                                                    x1562)))|])
    let (write :
      int ->
        string:string ->
          position:int or_null_or_undefined ->
            encoding:BufferEncoding.t or_null_or_undefined ->
              callback:(err:ErrnoException.t or_null ->
                          written:int -> str:string -> unit)
                -> unit)
      =
      fun (x1563 : int) ->
        fun ~string:(x1564 : string) ->
          fun ~position:(x1565 : int or_null_or_undefined) ->
            fun ~encoding:(x1567 : BufferEncoding.t or_null_or_undefined) ->
              fun
                ~callback:(x1569 :
                            err:ErrnoException.t or_null ->
                              written:int -> str:string -> unit)
                ->
                ignore
                  (Ojs.call Import.fs "write"
                     [|(Ojs.int_to_js x1563);(Ojs.string_to_js x1564);(
                       or_null_or_undefined_to_js Ojs.int_to_js x1565);(
                       or_null_or_undefined_to_js BufferEncoding.t_to_js
                         x1567);(Ojs.fun_to_js 3
                                   (fun (x1570 : Ojs.t) ->
                                      fun (x1572 : Ojs.t) ->
                                        fun (x1573 : Ojs.t) ->
                                          x1569
                                            ~err:(or_null_of_js
                                                    ErrnoException.t_of_js
                                                    x1570)
                                            ~written:(Ojs.int_of_js x1572)
                                            ~str:(Ojs.string_of_js x1573)))|])
    let (write :
      int ->
        string:string ->
          position:int or_null_or_undefined ->
            callback:(err:ErrnoException.t or_null ->
                        written:int -> str:string -> unit)
              -> unit)
      =
      fun (x1574 : int) ->
        fun ~string:(x1575 : string) ->
          fun ~position:(x1576 : int or_null_or_undefined) ->
            fun
              ~callback:(x1578 :
                          err:ErrnoException.t or_null ->
                            written:int -> str:string -> unit)
              ->
              ignore
                (Ojs.call Import.fs "write"
                   [|(Ojs.int_to_js x1574);(Ojs.string_to_js x1575);(
                     or_null_or_undefined_to_js Ojs.int_to_js x1576);(
                     Ojs.fun_to_js 3
                       (fun (x1579 : Ojs.t) ->
                          fun (x1581 : Ojs.t) ->
                            fun (x1582 : Ojs.t) ->
                              x1578
                                ~err:(or_null_of_js ErrnoException.t_of_js
                                        x1579) ~written:(Ojs.int_of_js x1581)
                                ~str:(Ojs.string_of_js x1582)))|])
    let (write :
      int ->
        string:string ->
          callback:(err:ErrnoException.t or_null ->
                      written:int -> str:string -> unit)
            -> unit)
      =
      fun (x1583 : int) ->
        fun ~string:(x1584 : string) ->
          fun
            ~callback:(x1585 :
                        err:ErrnoException.t or_null ->
                          written:int -> str:string -> unit)
            ->
            ignore
              (Ojs.call Import.fs "write"
                 [|(Ojs.int_to_js x1583);(Ojs.string_to_js x1584);(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1586 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1588 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1589 :
                                                                    Ojs.t) ->
                                                                    x1585
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1586)
                                                                    ~written:(
                                                                    Ojs.int_of_js
                                                                    x1588)
                                                                    ~str:(
                                                                    Ojs.string_of_js
                                                                    x1589)))|])
    module Write =
      struct
        let (__promisify__ :
          int ->
            ?buffer:'TBuffer ->
              ?offset:int ->
                ?length:int ->
                  ?position:int or_null ->
                    unit -> AnonymousInterface3.t Promise.t)
          =
          fun (x1590 : int) ->
            fun ?buffer:(x1591 : 'TBuffer option) ->
              fun ?offset:(x1592 : int option) ->
                fun ?length:(x1593 : int option) ->
                  fun ?position:(x1594 : int or_null option) ->
                    fun () ->
                      Promise.t_of_js AnonymousInterface3.t_of_js
                        (let x1601 = Ojs.get_prop_ascii Import.fs "write" in
                         Ojs.call (Ojs.get_prop_ascii x1601 "__promisify__")
                           "apply"
                           [|x1601;((let x1595 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1595 "push"
                                          [|(Ojs.int_to_js x1590)|]);
                                     (match x1591 with
                                      | Some x1600 ->
                                          ignore
                                            (Ojs.call x1595 "push"
                                               [|(Obj.magic x1600)|])
                                      | None -> ());
                                     (match x1592 with
                                      | Some x1599 ->
                                          ignore
                                            (Ojs.call x1595 "push"
                                               [|(Ojs.int_to_js x1599)|])
                                      | None -> ());
                                     (match x1593 with
                                      | Some x1598 ->
                                          ignore
                                            (Ojs.call x1595 "push"
                                               [|(Ojs.int_to_js x1598)|])
                                      | None -> ());
                                     (match x1594 with
                                      | Some x1596 ->
                                          ignore
                                            (Ojs.call x1595 "push"
                                               [|(or_null_to_js Ojs.int_to_js
                                                    x1596)|])
                                      | None -> ());
                                     x1595))|])
        let (__promisify__ :
          int ->
            string:string ->
              ?position:int or_null ->
                ?encoding:BufferEncoding.t or_null ->
                  unit -> AnonymousInterface4.t Promise.t)
          =
          fun (x1603 : int) ->
            fun ~string:(x1604 : string) ->
              fun ?position:(x1605 : int or_null option) ->
                fun ?encoding:(x1606 : BufferEncoding.t or_null option) ->
                  fun () ->
                    Promise.t_of_js AnonymousInterface4.t_of_js
                      (let x1612 = Ojs.get_prop_ascii Import.fs "write" in
                       Ojs.call (Ojs.get_prop_ascii x1612 "__promisify__")
                         "apply"
                         [|x1612;((let x1607 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1607 "push"
                                        [|(Ojs.int_to_js x1603)|]);
                                   ignore
                                     (Ojs.call x1607 "push"
                                        [|(Ojs.string_to_js x1604)|]);
                                   (match x1605 with
                                    | Some x1610 ->
                                        ignore
                                          (Ojs.call x1607 "push"
                                             [|(or_null_to_js Ojs.int_to_js
                                                  x1610)|])
                                    | None -> ());
                                   (match x1606 with
                                    | Some x1608 ->
                                        ignore
                                          (Ojs.call x1607 "push"
                                             [|(or_null_to_js
                                                  BufferEncoding.t_to_js
                                                  x1608)|])
                                    | None -> ());
                                   x1607))|])
      end
    let (write_sync :
      int ->
        buffer:ArrayBufferView.t ->
          ?offset:int or_null ->
            ?length:int or_null -> ?position:int or_null -> unit -> int)
      =
      fun (x1614 : int) ->
        fun ~buffer:(x1615 : ArrayBufferView.t) ->
          fun ?offset:(x1616 : int or_null option) ->
            fun ?length:(x1617 : int or_null option) ->
              fun ?position:(x1618 : int or_null option) ->
                fun () ->
                  Ojs.int_of_js
                    (let x1626 = Import.fs in
                     Ojs.call (Ojs.get_prop_ascii x1626 "writeSync") "apply"
                       [|x1626;((let x1619 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1619 "push"
                                      [|(Ojs.int_to_js x1614)|]);
                                 ignore
                                   (Ojs.call x1619 "push"
                                      [|(ArrayBufferView.t_to_js x1615)|]);
                                 (match x1616 with
                                  | Some x1624 ->
                                      ignore
                                        (Ojs.call x1619 "push"
                                           [|(or_null_to_js Ojs.int_to_js
                                                x1624)|])
                                  | None -> ());
                                 (match x1617 with
                                  | Some x1622 ->
                                      ignore
                                        (Ojs.call x1619 "push"
                                           [|(or_null_to_js Ojs.int_to_js
                                                x1622)|])
                                  | None -> ());
                                 (match x1618 with
                                  | Some x1620 ->
                                      ignore
                                        (Ojs.call x1619 "push"
                                           [|(or_null_to_js Ojs.int_to_js
                                                x1620)|])
                                  | None -> ());
                                 x1619))|])
    let (write_sync :
      int ->
        string:string ->
          ?position:int or_null ->
            ?encoding:BufferEncoding.t or_null -> unit -> int)
      =
      fun (x1627 : int) ->
        fun ~string:(x1628 : string) ->
          fun ?position:(x1629 : int or_null option) ->
            fun ?encoding:(x1630 : BufferEncoding.t or_null option) ->
              fun () ->
                Ojs.int_of_js
                  (let x1636 = Import.fs in
                   Ojs.call (Ojs.get_prop_ascii x1636 "writeSync") "apply"
                     [|x1636;((let x1631 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1631 "push"
                                    [|(Ojs.int_to_js x1627)|]);
                               ignore
                                 (Ojs.call x1631 "push"
                                    [|(Ojs.string_to_js x1628)|]);
                               (match x1629 with
                                | Some x1634 ->
                                    ignore
                                      (Ojs.call x1631 "push"
                                         [|(or_null_to_js Ojs.int_to_js x1634)|])
                                | None -> ());
                               (match x1630 with
                                | Some x1632 ->
                                    ignore
                                      (Ojs.call x1631 "push"
                                         [|(or_null_to_js
                                              BufferEncoding.t_to_js x1632)|])
                                | None -> ());
                               x1631))|])
    let (read :
      int ->
        buffer:'TBuffer ->
          offset:int ->
            length:int ->
              position:int or_null ->
                callback:(err:ErrnoException.t or_null ->
                            bytes_read:int -> buffer:'TBuffer -> unit)
                  -> unit)
      =
      fun (x1637 : int) ->
        fun ~buffer:(x1638 : 'TBuffer) ->
          fun ~offset:(x1639 : int) ->
            fun ~length:(x1640 : int) ->
              fun ~position:(x1641 : int or_null) ->
                fun
                  ~callback:(x1643 :
                              err:ErrnoException.t or_null ->
                                bytes_read:int -> buffer:'TBuffer -> unit)
                  ->
                  ignore
                    (Ojs.call Import.fs "read"
                       [|(Ojs.int_to_js x1637);(Obj.magic x1638);(Ojs.int_to_js
                                                                    x1639);(
                         Ojs.int_to_js x1640);(or_null_to_js Ojs.int_to_js
                                                 x1641);(Ojs.fun_to_js 3
                                                           (fun
                                                              (x1644 : Ojs.t)
                                                              ->
                                                              fun
                                                                (x1646 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x1647 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x1643
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1644)
                                                                    ~bytes_read:(
                                                                    Ojs.int_of_js
                                                                    x1646)
                                                                    ~buffer:(
                                                                    Obj.magic
                                                                    x1647)))|])
    module Read =
      struct
        let (__promisify__ :
          int ->
            buffer:'TBuffer ->
              offset:int ->
                length:int ->
                  position:int or_null -> AnonymousInterface2.t Promise.t)
          =
          fun (x1648 : int) ->
            fun ~buffer:(x1649 : 'TBuffer) ->
              fun ~offset:(x1650 : int) ->
                fun ~length:(x1651 : int) ->
                  fun ~position:(x1652 : int or_null) ->
                    Promise.t_of_js AnonymousInterface2.t_of_js
                      (Ojs.call (Ojs.get_prop_ascii Import.fs "read")
                         "__promisify__"
                         [|(Ojs.int_to_js x1648);(Obj.magic x1649);(Ojs.int_to_js
                                                                    x1650);(
                           Ojs.int_to_js x1651);(or_null_to_js Ojs.int_to_js
                                                   x1652)|])
      end
    module ReadSyncOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1656 : Ojs.t) -> x1656
        and t_to_js : t -> Ojs.t = fun (x1655 : Ojs.t) -> x1655
        let (get_offset : t -> int) =
          fun (x1657 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1657) "offset")
        let (set_offset : t -> int -> unit) =
          fun (x1658 : t) ->
            fun (x1659 : int) ->
              Ojs.set_prop_ascii (t_to_js x1658) "offset"
                (Ojs.int_to_js x1659)
        let (get_length : t -> int) =
          fun (x1660 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1660) "length")
        let (set_length : t -> int -> unit) =
          fun (x1661 : t) ->
            fun (x1662 : int) ->
              Ojs.set_prop_ascii (t_to_js x1661) "length"
                (Ojs.int_to_js x1662)
        let (get_position : t -> int or_null) =
          fun (x1663 : t) ->
            or_null_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1663) "position")
        let (set_position : t -> int or_null -> unit) =
          fun (x1665 : t) ->
            fun (x1666 : int or_null) ->
              Ojs.set_prop_ascii (t_to_js x1665) "position"
                (or_null_to_js Ojs.int_to_js x1666)
      end
    let (read_sync :
      int ->
        buffer:ArrayBufferView.t ->
          offset:int -> length:int -> position:int or_null -> int)
      =
      fun (x1668 : int) ->
        fun ~buffer:(x1669 : ArrayBufferView.t) ->
          fun ~offset:(x1670 : int) ->
            fun ~length:(x1671 : int) ->
              fun ~position:(x1672 : int or_null) ->
                Ojs.int_of_js
                  (Ojs.call Import.fs "readSync"
                     [|(Ojs.int_to_js x1668);(ArrayBufferView.t_to_js x1669);(
                       Ojs.int_to_js x1670);(Ojs.int_to_js x1671);(or_null_to_js
                                                                    Ojs.int_to_js
                                                                    x1672)|])
    let (read_sync :
      int ->
        buffer:ArrayBufferView.t -> ?opts:ReadSyncOptions.t -> unit -> int)
      =
      fun (x1674 : int) ->
        fun ~buffer:(x1675 : ArrayBufferView.t) ->
          fun ?opts:(x1676 : ReadSyncOptions.t option) ->
            fun () ->
              Ojs.int_of_js
                (let x1679 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x1679 "readSync") "apply"
                   [|x1679;((let x1677 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1677 "push"
                                  [|(Ojs.int_to_js x1674)|]);
                             ignore
                               (Ojs.call x1677 "push"
                                  [|(ArrayBufferView.t_to_js x1675)|]);
                             (match x1676 with
                              | Some x1678 ->
                                  ignore
                                    (Ojs.call x1677 "push"
                                       [|(ReadSyncOptions.t_to_js x1678)|])
                              | None -> ());
                             x1677))|])
    let (read_file :
      PathLike.t or_number ->
        options:AnonymousInterface6.t or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null -> data:Buffer.t -> unit) ->
            unit)
      =
      fun (x1680 : PathLike.t or_number) ->
        fun ~options:(x1682 : AnonymousInterface6.t or_null_or_undefined) ->
          fun
            ~callback:(x1684 :
                        err:ErrnoException.t or_null -> data:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readFile"
                 [|(or_number_to_js PathLike.t_to_js x1680);(or_null_or_undefined_to_js
                                                               AnonymousInterface6.t_to_js
                                                               x1682);(
                   Ojs.fun_to_js 2
                     (fun (x1685 : Ojs.t) ->
                        fun (x1687 : Ojs.t) ->
                          x1684
                            ~err:(or_null_of_js ErrnoException.t_of_js x1685)
                            ~data:(Buffer.t_of_js x1687)))|])
    let (read_file :
      PathLike.t or_number ->
        options:AnonymousInterface5.t or_string ->
          callback:(err:ErrnoException.t or_null -> data:string -> unit) ->
            unit)
      =
      fun (x1688 : PathLike.t or_number) ->
        fun ~options:(x1690 : AnonymousInterface5.t or_string) ->
          fun
            ~callback:(x1692 :
                        err:ErrnoException.t or_null -> data:string -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readFile"
                 [|(or_number_to_js PathLike.t_to_js x1688);(or_string_to_js
                                                               AnonymousInterface5.t_to_js
                                                               x1690);(
                   Ojs.fun_to_js 2
                     (fun (x1693 : Ojs.t) ->
                        fun (x1695 : Ojs.t) ->
                          x1692
                            ~err:(or_null_of_js ErrnoException.t_of_js x1693)
                            ~data:(Ojs.string_of_js x1695)))|])
    let (read_file :
      PathLike.t or_number ->
        options:(BaseEncodingOptions.t, AnonymousInterface12.t) intersection2
          or_string or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null ->
                      data:Buffer.t or_string -> unit)
            -> unit)
      =
      fun (x1696 : PathLike.t or_number) ->
        fun
          ~options:(x1698 :
                     (BaseEncodingOptions.t, AnonymousInterface12.t)
                       intersection2 or_string or_null_or_undefined)
          ->
          fun
            ~callback:(x1703 :
                        err:ErrnoException.t or_null ->
                          data:Buffer.t or_string -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readFile"
                 [|(or_number_to_js PathLike.t_to_js x1696);(or_null_or_undefined_to_js
                                                               (fun
                                                                  (x1699 :
                                                                    (BaseEncodingOptions.t,
                                                                    AnonymousInterface12.t)
                                                                    intersection2
                                                                    or_string)
                                                                  ->
                                                                  or_string_to_js
                                                                    (
                                                                    fun
                                                                    (x1700 :
                                                                    (BaseEncodingOptions.t,
                                                                    AnonymousInterface12.t)
                                                                    intersection2)
                                                                    ->
                                                                    intersection2_to_js
                                                                    BaseEncodingOptions.t_to_js
                                                                    AnonymousInterface12.t_to_js
                                                                    x1700)
                                                                    x1699)
                                                               x1698);(
                   Ojs.fun_to_js 2
                     (fun (x1704 : Ojs.t) ->
                        fun (x1706 : Ojs.t) ->
                          x1703
                            ~err:(or_null_of_js ErrnoException.t_of_js x1704)
                            ~data:(or_string_of_js Buffer.t_of_js x1706)))|])
    let (read_file :
      PathLike.t or_number ->
        callback:(err:ErrnoException.t or_null -> data:Buffer.t -> unit) ->
          unit)
      =
      fun (x1708 : PathLike.t or_number) ->
        fun
          ~callback:(x1710 :
                      err:ErrnoException.t or_null -> data:Buffer.t -> unit)
          ->
          ignore
            (Ojs.call Import.fs "readFile"
               [|(or_number_to_js PathLike.t_to_js x1708);(Ojs.fun_to_js 2
                                                             (fun
                                                                (x1711 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x1713 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x1710
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1711)
                                                                    ~data:(
                                                                    Buffer.t_of_js
                                                                    x1713)))|])
    module ReadFile =
      struct
        let (__promisify__ :
          PathLike.t or_number ->
            ?options:AnonymousInterface6.t or_null ->
              unit -> Buffer.t Promise.t)
          =
          fun (x1714 : PathLike.t or_number) ->
            fun ?options:(x1715 : AnonymousInterface6.t or_null option) ->
              fun () ->
                Promise.t_of_js Buffer.t_of_js
                  (let x1720 = Ojs.get_prop_ascii Import.fs "readFile" in
                   Ojs.call (Ojs.get_prop_ascii x1720 "__promisify__")
                     "apply"
                     [|x1720;((let x1716 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1716 "push"
                                    [|(or_number_to_js PathLike.t_to_js x1714)|]);
                               (match x1715 with
                                | Some x1717 ->
                                    ignore
                                      (Ojs.call x1716 "push"
                                         [|(or_null_to_js
                                              AnonymousInterface6.t_to_js
                                              x1717)|])
                                | None -> ());
                               x1716))|])
        let (__promisify__ :
          PathLike.t or_number ->
            options:AnonymousInterface5.t or_string -> string Promise.t)
          =
          fun (x1722 : PathLike.t or_number) ->
            fun ~options:(x1724 : AnonymousInterface5.t or_string) ->
              Promise.t_of_js Ojs.string_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "readFile")
                   "__promisify__"
                   [|(or_number_to_js PathLike.t_to_js x1722);(or_string_to_js
                                                                 AnonymousInterface5.t_to_js
                                                                 x1724)|])
        let (__promisify__ :
          PathLike.t or_number ->
            ?options:(BaseEncodingOptions.t, AnonymousInterface12.t)
              intersection2 or_string or_null ->
              unit -> Buffer.t or_string Promise.t)
          =
          fun (x1727 : PathLike.t or_number) ->
            fun
              ?options:(x1728 :
                         (BaseEncodingOptions.t, AnonymousInterface12.t)
                           intersection2 or_string or_null option)
              ->
              fun () ->
                Promise.t_of_js
                  (fun (x1737 : Ojs.t) ->
                     or_string_of_js Buffer.t_of_js x1737)
                  (let x1736 = Ojs.get_prop_ascii Import.fs "readFile" in
                   Ojs.call (Ojs.get_prop_ascii x1736 "__promisify__")
                     "apply"
                     [|x1736;((let x1729 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1729 "push"
                                    [|(or_number_to_js PathLike.t_to_js x1727)|]);
                               (match x1728 with
                                | Some x1730 ->
                                    ignore
                                      (Ojs.call x1729 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1731 :
                                                   (BaseEncodingOptions.t,
                                                     AnonymousInterface12.t)
                                                     intersection2 or_string)
                                                 ->
                                                 or_string_to_js
                                                   (fun
                                                      (x1732 :
                                                        (BaseEncodingOptions.t,
                                                          AnonymousInterface12.t)
                                                          intersection2)
                                                      ->
                                                      intersection2_to_js
                                                        BaseEncodingOptions.t_to_js
                                                        AnonymousInterface12.t_to_js
                                                        x1732) x1731) x1730)|])
                                | None -> ());
                               x1729))|])
      end
    let (read_file_sync :
      PathLike.t or_number ->
        ?options:AnonymousInterface6.t -> unit -> Buffer.t)
      =
      fun (x1739 : PathLike.t or_number) ->
        fun ?options:(x1740 : AnonymousInterface6.t option) ->
          fun () ->
            Buffer.t_of_js
              (let x1744 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1744 "readFileSync") "apply"
                 [|x1744;((let x1741 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1741 "push"
                                [|(or_number_to_js PathLike.t_to_js x1739)|]);
                           (match x1740 with
                            | Some x1742 ->
                                ignore
                                  (Ojs.call x1741 "push"
                                     [|(AnonymousInterface6.t_to_js x1742)|])
                            | None -> ());
                           x1741))|])
    let (read_file_sync :
      PathLike.t or_number ->
        options:(BufferEncoding.t, AnonymousInterface5.t) union2 -> string)
      =
      fun (x1745 : PathLike.t or_number) ->
        fun
          ~options:(x1747 : (BufferEncoding.t, AnonymousInterface5.t) union2)
          ->
          Ojs.string_of_js
            (Ojs.call Import.fs "readFileSync"
               [|(or_number_to_js PathLike.t_to_js x1745);(union2_to_js
                                                             BufferEncoding.t_to_js
                                                             AnonymousInterface5.t_to_js
                                                             x1747)|])
    let (read_file_sync :
      PathLike.t or_number ->
        ?options:BufferEncoding.t -> unit -> Buffer.t or_string)
      =
      fun (x1750 : PathLike.t or_number) ->
        fun ?options:(x1751 : BufferEncoding.t option) ->
          fun () ->
            or_string_of_js Buffer.t_of_js
              (let x1755 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1755 "readFileSync") "apply"
                 [|x1755;((let x1752 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1752 "push"
                                [|(or_number_to_js PathLike.t_to_js x1750)|]);
                           (match x1751 with
                            | Some x1753 ->
                                ignore
                                  (Ojs.call x1752 "push"
                                     [|(BufferEncoding.t_to_js x1753)|])
                            | None -> ());
                           x1752))|])
    let (read_file_sync :
      PathLike.t -> ?options:BufferEncoding.t -> unit -> string) =
      fun (x1757 : PathLike.t) ->
        fun ?options:(x1758 : BufferEncoding.t option) ->
          fun () ->
            Ojs.string_of_js
              (let x1761 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1761 "readFileSync") "apply"
                 [|x1761;((let x1759 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1759 "push"
                                [|(PathLike.t_to_js x1757)|]);
                           (match x1758 with
                            | Some x1760 ->
                                ignore
                                  (Ojs.call x1759 "push"
                                     [|(BufferEncoding.t_to_js x1760)|])
                            | None -> ());
                           x1759))|])
    module WriteFileOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1763 : Ojs.t) -> x1763
        and t_to_js : t -> Ojs.t = fun (x1762 : Ojs.t) -> x1762
      end
    let (write_file :
      PathLike.t or_number ->
        data:ArrayBufferView.t or_string ->
          options:WriteFileOptions.t -> callback:NoParamCallback.t -> unit)
      =
      fun (x1764 : PathLike.t or_number) ->
        fun ~data:(x1766 : ArrayBufferView.t or_string) ->
          fun ~options:(x1768 : WriteFileOptions.t) ->
            fun ~callback:(x1769 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "writeFile"
                   [|(or_number_to_js PathLike.t_to_js x1764);(or_string_to_js
                                                                 ArrayBufferView.t_to_js
                                                                 x1766);(
                     WriteFileOptions.t_to_js x1768);(NoParamCallback.t_to_js
                                                        x1769)|])
    let (write_file :
      PathLike.t or_number ->
        data:ArrayBufferView.t or_string ->
          callback:NoParamCallback.t -> unit)
      =
      fun (x1770 : PathLike.t or_number) ->
        fun ~data:(x1772 : ArrayBufferView.t or_string) ->
          fun ~callback:(x1774 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "writeFile"
                 [|(or_number_to_js PathLike.t_to_js x1770);(or_string_to_js
                                                               ArrayBufferView.t_to_js
                                                               x1772);(
                   NoParamCallback.t_to_js x1774)|])
    module WriteFile =
      struct
        let (__promisify__ :
          PathLike.t or_number ->
            data:ArrayBufferView.t or_string ->
              ?options:WriteFileOptions.t -> unit -> unit Promise.t)
          =
          fun (x1775 : PathLike.t or_number) ->
            fun ~data:(x1776 : ArrayBufferView.t or_string) ->
              fun ?options:(x1777 : WriteFileOptions.t option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x1782 = Ojs.get_prop_ascii Import.fs "writeFile" in
                     Ojs.call (Ojs.get_prop_ascii x1782 "__promisify__")
                       "apply"
                       [|x1782;((let x1778 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1778 "push"
                                      [|(or_number_to_js PathLike.t_to_js
                                           x1775)|]);
                                 ignore
                                   (Ojs.call x1778 "push"
                                      [|(or_string_to_js
                                           ArrayBufferView.t_to_js x1776)|]);
                                 (match x1777 with
                                  | Some x1779 ->
                                      ignore
                                        (Ojs.call x1778 "push"
                                           [|(WriteFileOptions.t_to_js x1779)|])
                                  | None -> ());
                                 x1778))|])
      end
    let (write_file_sync :
      PathLike.t or_number ->
        data:ArrayBufferView.t or_string ->
          ?options:WriteFileOptions.t -> unit -> unit)
      =
      fun (x1784 : PathLike.t or_number) ->
        fun ~data:(x1785 : ArrayBufferView.t or_string) ->
          fun ?options:(x1786 : WriteFileOptions.t option) ->
            fun () ->
              ignore
                (let x1791 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x1791 "writeFileSync") "apply"
                   [|x1791;((let x1787 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1787 "push"
                                  [|(or_number_to_js PathLike.t_to_js x1784)|]);
                             ignore
                               (Ojs.call x1787 "push"
                                  [|(or_string_to_js ArrayBufferView.t_to_js
                                       x1785)|]);
                             (match x1786 with
                              | Some x1788 ->
                                  ignore
                                    (Ojs.call x1787 "push"
                                       [|(WriteFileOptions.t_to_js x1788)|])
                              | None -> ());
                             x1787))|])
    let (append_file :
      file:string or_number ->
        data:Uint8Array.t or_string ->
          options:WriteFileOptions.t -> callback:NoParamCallback.t -> unit)
      =
      fun ~file:(x1792 : string or_number) ->
        fun ~data:(x1794 : Uint8Array.t or_string) ->
          fun ~options:(x1796 : WriteFileOptions.t) ->
            fun ~callback:(x1797 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "appendFile"
                   [|(or_number_to_js Ojs.string_to_js x1792);(or_string_to_js
                                                                 Uint8Array.t_to_js
                                                                 x1794);(
                     WriteFileOptions.t_to_js x1796);(NoParamCallback.t_to_js
                                                        x1797)|])
    let (append_file :
      file:string or_number ->
        data:Uint8Array.t or_string -> callback:NoParamCallback.t -> unit)
      =
      fun ~file:(x1798 : string or_number) ->
        fun ~data:(x1800 : Uint8Array.t or_string) ->
          fun ~callback:(x1802 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "appendFile"
                 [|(or_number_to_js Ojs.string_to_js x1798);(or_string_to_js
                                                               Uint8Array.t_to_js
                                                               x1800);(
                   NoParamCallback.t_to_js x1802)|])
    module AppendFile =
      struct
        let (__promisify__ :
          file:string or_number ->
            data:Uint8Array.t or_string ->
              ?options:WriteFileOptions.t -> unit -> unit Promise.t)
          =
          fun ~file:(x1803 : string or_number) ->
            fun ~data:(x1804 : Uint8Array.t or_string) ->
              fun ?options:(x1805 : WriteFileOptions.t option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x1810 = Ojs.get_prop_ascii Import.fs "appendFile" in
                     Ojs.call (Ojs.get_prop_ascii x1810 "__promisify__")
                       "apply"
                       [|x1810;((let x1806 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1806 "push"
                                      [|(or_number_to_js Ojs.string_to_js
                                           x1803)|]);
                                 ignore
                                   (Ojs.call x1806 "push"
                                      [|(or_string_to_js Uint8Array.t_to_js
                                           x1804)|]);
                                 (match x1805 with
                                  | Some x1807 ->
                                      ignore
                                        (Ojs.call x1806 "push"
                                           [|(WriteFileOptions.t_to_js x1807)|])
                                  | None -> ());
                                 x1806))|])
      end
    let (append_file_sync :
      file:string or_number ->
        data:Uint8Array.t or_string ->
          ?options:WriteFileOptions.t -> unit -> unit)
      =
      fun ~file:(x1812 : string or_number) ->
        fun ~data:(x1813 : Uint8Array.t or_string) ->
          fun ?options:(x1814 : WriteFileOptions.t option) ->
            fun () ->
              ignore
                (let x1819 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x1819 "appendFileSync") "apply"
                   [|x1819;((let x1815 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1815 "push"
                                  [|(or_number_to_js Ojs.string_to_js x1812)|]);
                             ignore
                               (Ojs.call x1815 "push"
                                  [|(or_string_to_js Uint8Array.t_to_js x1813)|]);
                             (match x1814 with
                              | Some x1816 ->
                                  ignore
                                    (Ojs.call x1815 "push"
                                       [|(WriteFileOptions.t_to_js x1816)|])
                              | None -> ());
                             x1815))|])
    let (watch_file :
      filename:string ->
        options:AnonymousInterface16.t or_undefined ->
          listener:(curr:Stats.t -> prev:Stats.t -> unit) -> unit)
      =
      fun ~filename:(x1820 : string) ->
        fun ~options:(x1821 : AnonymousInterface16.t or_undefined) ->
          fun ~listener:(x1823 : curr:Stats.t -> prev:Stats.t -> unit) ->
            ignore
              (Ojs.call Import.fs "watchFile"
                 [|(Ojs.string_to_js x1820);(or_undefined_to_js
                                               AnonymousInterface16.t_to_js
                                               x1821);(Ojs.fun_to_js 2
                                                         (fun (x1824 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x1825 : Ojs.t)
                                                              ->
                                                              x1823
                                                                ~curr:(
                                                                Stats.t_of_js
                                                                  x1824)
                                                                ~prev:(
                                                                Stats.t_of_js
                                                                  x1825)))|])
    let (watch_file :
      filename:string ->
        listener:(curr:Stats.t -> prev:Stats.t -> unit) -> unit)
      =
      fun ~filename:(x1826 : string) ->
        fun ~listener:(x1827 : curr:Stats.t -> prev:Stats.t -> unit) ->
          ignore
            (Ojs.call Import.fs "watchFile"
               [|(Ojs.string_to_js x1826);(Ojs.fun_to_js 2
                                             (fun (x1828 : Ojs.t) ->
                                                fun (x1829 : Ojs.t) ->
                                                  x1827
                                                    ~curr:(Stats.t_of_js
                                                             x1828)
                                                    ~prev:(Stats.t_of_js
                                                             x1829)))|])
    let (unwatch_file :
      filename:string ->
        ?listener:(curr:Stats.t -> prev:Stats.t -> unit) -> unit -> unit)
      =
      fun ~filename:(x1830 : string) ->
        fun ?listener:(x1831 : (curr:Stats.t -> prev:Stats.t -> unit) option)
          ->
          fun () ->
            ignore
              (let x1836 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1836 "unwatchFile") "apply"
                 [|x1836;((let x1832 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1832 "push"
                                [|(Ojs.string_to_js x1830)|]);
                           (match x1831 with
                            | Some x1833 ->
                                ignore
                                  (Ojs.call x1832 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x1834 : Ojs.t) ->
                                             fun (x1835 : Ojs.t) ->
                                               x1833
                                                 ~curr:(Stats.t_of_js x1834)
                                                 ~prev:(Stats.t_of_js x1835)))|])
                            | None -> ());
                           x1832))|])
    let (watch :
      filename:string ->
        options:(BufferEncoding.t, AnonymousInterface10.t) union2
          or_null_or_undefined ->
          ?listener:(event:[ `change  | `rename ] -> filename:string -> unit)
            -> unit -> FSWatcher.t)
      =
      fun ~filename:(x1837 : string) ->
        fun
          ~options:(x1838 :
                     (BufferEncoding.t, AnonymousInterface10.t) union2
                       or_null_or_undefined)
          ->
          fun
            ?listener:(x1839 :
                        (event:[ `change  | `rename ] ->
                           filename:string -> unit)
                          option)
            ->
            fun () ->
              FSWatcher.t_of_js
                (let x1848 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x1848 "watch") "apply"
                   [|x1848;((let x1840 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1840 "push"
                                  [|(Ojs.string_to_js x1837)|]);
                             ignore
                               (Ojs.call x1840 "push"
                                  [|(or_null_or_undefined_to_js
                                       (fun
                                          (x1845 :
                                            (BufferEncoding.t,
                                              AnonymousInterface10.t) union2)
                                          ->
                                          union2_to_js BufferEncoding.t_to_js
                                            AnonymousInterface10.t_to_js
                                            x1845) x1838)|]);
                             (match x1839 with
                              | Some x1841 ->
                                  ignore
                                    (Ojs.call x1840 "push"
                                       [|(Ojs.fun_to_js 2
                                            (fun (x1842 : Ojs.t) ->
                                               fun (x1844 : Ojs.t) ->
                                                 x1841
                                                   ~event:(let x1843 = x1842 in
                                                           match Ojs.string_of_js
                                                                   x1843
                                                           with
                                                           | "change" ->
                                                               `change
                                                           | "rename" ->
                                                               `rename
                                                           | _ ->
                                                               assert false)
                                                   ~filename:(Ojs.string_of_js
                                                                x1844)))|])
                              | None -> ());
                             x1840))|])
    let (watch :
      filename:string ->
        options:(AnonymousInterface8.t, [ `buffer ]) or_enum ->
          ?listener:(event:[ `change  | `rename ] ->
                       filename:Buffer.t -> unit)
            -> unit -> FSWatcher.t)
      =
      fun ~filename:(x1849 : string) ->
        fun ~options:(x1850 : (AnonymousInterface8.t, [ `buffer ]) or_enum)
          ->
          fun
            ?listener:(x1851 :
                        (event:[ `change  | `rename ] ->
                           filename:Buffer.t -> unit)
                          option)
            ->
            fun () ->
              FSWatcher.t_of_js
                (let x1859 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x1859 "watch") "apply"
                   [|x1859;((let x1852 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1852 "push"
                                  [|(Ojs.string_to_js x1849)|]);
                             ignore
                               (Ojs.call x1852 "push"
                                  [|(or_enum_to_js
                                       AnonymousInterface8.t_to_js
                                       (fun (x1858 : [ `buffer ]) ->
                                          match x1858 with
                                          | `buffer ->
                                              Ojs.string_to_js "buffer")
                                       x1850)|]);
                             (match x1851 with
                              | Some x1853 ->
                                  ignore
                                    (Ojs.call x1852 "push"
                                       [|(Ojs.fun_to_js 2
                                            (fun (x1854 : Ojs.t) ->
                                               fun (x1856 : Ojs.t) ->
                                                 x1853
                                                   ~event:(let x1855 = x1854 in
                                                           match Ojs.string_of_js
                                                                   x1855
                                                           with
                                                           | "change" ->
                                                               `change
                                                           | "rename" ->
                                                               `rename
                                                           | _ ->
                                                               assert false)
                                                   ~filename:(Buffer.t_of_js
                                                                x1856)))|])
                              | None -> ());
                             x1852))|])
    let (watch :
      filename:string ->
        options:AnonymousInterface10.t or_string or_null ->
          ?listener:(event:[ `change  | `rename ] ->
                       filename:Buffer.t or_string -> unit)
            -> unit -> FSWatcher.t)
      =
      fun ~filename:(x1860 : string) ->
        fun ~options:(x1861 : AnonymousInterface10.t or_string or_null) ->
          fun
            ?listener:(x1862 :
                        (event:[ `change  | `rename ] ->
                           filename:Buffer.t or_string -> unit)
                          option)
            ->
            fun () ->
              FSWatcher.t_of_js
                (let x1871 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x1871 "watch") "apply"
                   [|x1871;((let x1863 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1863 "push"
                                  [|(Ojs.string_to_js x1860)|]);
                             ignore
                               (Ojs.call x1863 "push"
                                  [|(or_null_to_js
                                       (fun
                                          (x1869 :
                                            AnonymousInterface10.t or_string)
                                          ->
                                          or_string_to_js
                                            AnonymousInterface10.t_to_js
                                            x1869) x1861)|]);
                             (match x1862 with
                              | Some x1864 ->
                                  ignore
                                    (Ojs.call x1863 "push"
                                       [|(Ojs.fun_to_js 2
                                            (fun (x1865 : Ojs.t) ->
                                               fun (x1867 : Ojs.t) ->
                                                 x1864
                                                   ~event:(let x1866 = x1865 in
                                                           match Ojs.string_of_js
                                                                   x1866
                                                           with
                                                           | "change" ->
                                                               `change
                                                           | "rename" ->
                                                               `rename
                                                           | _ ->
                                                               assert false)
                                                   ~filename:(or_string_of_js
                                                                Buffer.t_of_js
                                                                x1867)))|])
                              | None -> ());
                             x1863))|])
    let (watch :
      filename:string ->
        ?listener:(event:[ `change  | `rename ] -> filename:string -> any) ->
          unit -> FSWatcher.t)
      =
      fun ~filename:(x1872 : string) ->
        fun
          ?listener:(x1873 :
                      (event:[ `change  | `rename ] -> filename:string -> any)
                        option)
          ->
          fun () ->
            FSWatcher.t_of_js
              (let x1879 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1879 "watch") "apply"
                 [|x1879;((let x1874 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1874 "push"
                                [|(Ojs.string_to_js x1872)|]);
                           (match x1873 with
                            | Some x1875 ->
                                ignore
                                  (Ojs.call x1874 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x1876 : Ojs.t) ->
                                             fun (x1878 : Ojs.t) ->
                                               any_to_js
                                                 (x1875
                                                    ~event:(let x1877 = x1876 in
                                                            match Ojs.string_of_js
                                                                    x1877
                                                            with
                                                            | "change" ->
                                                                `change
                                                            | "rename" ->
                                                                `rename
                                                            | _ ->
                                                                assert false)
                                                    ~filename:(Ojs.string_of_js
                                                                 x1878))))|])
                            | None -> ());
                           x1874))|])
    let (exists : PathLike.t -> callback:(exists:bool -> unit) -> unit) =
      fun (x1880 : PathLike.t) ->
        fun ~callback:(x1881 : exists:bool -> unit) ->
          ignore
            (Ojs.call Import.fs "exists"
               [|(PathLike.t_to_js x1880);(Ojs.fun_to_js 1
                                             (fun (x1882 : Ojs.t) ->
                                                x1881
                                                  ~exists:(Ojs.bool_of_js
                                                             x1882)))|])
    module Exists =
      struct
        let (__promisify__ : PathLike.t -> bool Promise.t) =
          fun (x1883 : PathLike.t) ->
            Promise.t_of_js Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.fs "exists")
                 "__promisify__" [|(PathLike.t_to_js x1883)|])
      end
    let (exists_sync : PathLike.t -> bool) =
      fun (x1885 : PathLike.t) ->
        Ojs.bool_of_js
          (Ojs.call Import.fs "existsSync" [|(PathLike.t_to_js x1885)|])
    module Constants =
      struct
        let (f_ok : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "F_OK")
        let (r_ok : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "R_OK")
        let (w_ok : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "W_OK")
        let (x_ok : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "X_OK")
        let (c_opyfile_excl : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "COPYFILE_EXCL")
        let (c_opyfile_ficlone : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "COPYFILE_FICLONE")
        let (c_opyfile_ficlone_force : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "COPYFILE_FICLONE_FORCE")
        let (o_rdonly : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_RDONLY")
        let (o_wronly : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_WRONLY")
        let (o_rdwr : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_RDWR")
        let (o_creat : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_CREAT")
        let (o_excl : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_EXCL")
        let (o_noctty : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_NOCTTY")
        let (o_trunc : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_TRUNC")
        let (o_append : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_APPEND")
        let (o_directory : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_DIRECTORY")
        let (o_noatime : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_NOATIME")
        let (o_nofollow : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_NOFOLLOW")
        let (o_sync : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_SYNC")
        let (o_dsync : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_DSYNC")
        let (o_symlink : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_SYMLINK")
        let (o_direct : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_DIRECT")
        let (o_nonblock : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_NONBLOCK")
        let (s_ifmt : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IFMT")
        let (s_ifreg : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IFREG")
        let (s_ifdir : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IFDIR")
        let (s_ifchr : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IFCHR")
        let (s_ifblk : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IFBLK")
        let (s_ififo : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IFIFO")
        let (s_iflnk : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IFLNK")
        let (s_ifsock : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IFSOCK")
        let (s_irwxu : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IRWXU")
        let (s_irusr : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IRUSR")
        let (s_iwusr : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IWUSR")
        let (s_ixusr : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IXUSR")
        let (s_irwxg : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IRWXG")
        let (s_irgrp : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IRGRP")
        let (s_iwgrp : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IWGRP")
        let (s_ixgrp : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IXGRP")
        let (s_irwxo : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IRWXO")
        let (s_iroth : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IROTH")
        let (s_iwoth : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IWOTH")
        let (s_ixoth : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IXOTH")
        let (u_v_o_filemap_fs : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "UV_O_FILEMAP_FS")
      end
    let (access :
      PathLike.t ->
        mode:int or_undefined -> callback:NoParamCallback.t -> unit)
      =
      fun (x1886 : PathLike.t) ->
        fun ~mode:(x1887 : int or_undefined) ->
          fun ~callback:(x1889 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "access"
                 [|(PathLike.t_to_js x1886);(or_undefined_to_js Ojs.int_to_js
                                               x1887);(NoParamCallback.t_to_js
                                                         x1889)|])
    let (access : PathLike.t -> NoParamCallback.t -> unit) =
      fun (x1890 : PathLike.t) ->
        fun (x1891 : NoParamCallback.t) ->
          ignore
            (Ojs.call Import.fs "access"
               [|(PathLike.t_to_js x1890);(NoParamCallback.t_to_js x1891)|])
    module Access =
      struct
        let (__promisify__ :
          PathLike.t -> ?mode:int -> unit -> unit Promise.t) =
          fun (x1892 : PathLike.t) ->
            fun ?mode:(x1893 : int option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x1896 = Ojs.get_prop_ascii Import.fs "access" in
                   Ojs.call (Ojs.get_prop_ascii x1896 "__promisify__")
                     "apply"
                     [|x1896;((let x1894 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1894 "push"
                                    [|(PathLike.t_to_js x1892)|]);
                               (match x1893 with
                                | Some x1895 ->
                                    ignore
                                      (Ojs.call x1894 "push"
                                         [|(Ojs.int_to_js x1895)|])
                                | None -> ());
                               x1894))|])
      end
    let (access_sync : PathLike.t -> ?mode:int -> unit -> unit) =
      fun (x1898 : PathLike.t) ->
        fun ?mode:(x1899 : int option) ->
          fun () ->
            ignore
              (let x1902 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1902 "accessSync") "apply"
                 [|x1902;((let x1900 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1900 "push"
                                [|(PathLike.t_to_js x1898)|]);
                           (match x1899 with
                            | Some x1901 ->
                                ignore
                                  (Ojs.call x1900 "push"
                                     [|(Ojs.int_to_js x1901)|])
                            | None -> ());
                           x1900))|])
    let (create_read_stream :
      PathLike.t ->
        ?options:AnonymousInterface13.t or_string -> unit -> ReadStream.t)
      =
      fun (x1903 : PathLike.t) ->
        fun ?options:(x1904 : AnonymousInterface13.t or_string option) ->
          fun () ->
            ReadStream.t_of_js
              (let x1908 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1908 "createReadStream") "apply"
                 [|x1908;((let x1905 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1905 "push"
                                [|(PathLike.t_to_js x1903)|]);
                           (match x1904 with
                            | Some x1906 ->
                                ignore
                                  (Ojs.call x1905 "push"
                                     [|(or_string_to_js
                                          AnonymousInterface13.t_to_js x1906)|])
                            | None -> ());
                           x1905))|])
    let (create_write_stream :
      PathLike.t ->
        ?options:AnonymousInterface14.t or_string -> unit -> WriteStream.t)
      =
      fun (x1909 : PathLike.t) ->
        fun ?options:(x1910 : AnonymousInterface14.t or_string option) ->
          fun () ->
            WriteStream.t_of_js
              (let x1914 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1914 "createWriteStream")
                 "apply"
                 [|x1914;((let x1911 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1911 "push"
                                [|(PathLike.t_to_js x1909)|]);
                           (match x1910 with
                            | Some x1912 ->
                                ignore
                                  (Ojs.call x1911 "push"
                                     [|(or_string_to_js
                                          AnonymousInterface14.t_to_js x1912)|])
                            | None -> ());
                           x1911))|])
    let (fdatasync : int -> NoParamCallback.t -> unit) =
      fun (x1915 : int) ->
        fun (x1916 : NoParamCallback.t) ->
          ignore
            (Ojs.call Import.fs "fdatasync"
               [|(Ojs.int_to_js x1915);(NoParamCallback.t_to_js x1916)|])
    module Fdatasync =
      struct
        let (__promisify__ : int -> unit Promise.t) =
          fun (x1917 : int) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.fs "fdatasync")
                 "__promisify__" [|(Ojs.int_to_js x1917)|])
      end
    let (fdatasync_sync : int -> unit) =
      fun (x1919 : int) ->
        ignore (Ojs.call Import.fs "fdatasyncSync" [|(Ojs.int_to_js x1919)|])
    let (copy_file :
      src:string -> dest:string -> callback:NoParamCallback.t -> unit) =
      fun ~src:(x1920 : string) ->
        fun ~dest:(x1921 : string) ->
          fun ~callback:(x1922 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "copyFile"
                 [|(Ojs.string_to_js x1920);(Ojs.string_to_js x1921);(
                   NoParamCallback.t_to_js x1922)|])
    let (copy_file :
      src:string ->
        dest:string -> flags:int -> callback:NoParamCallback.t -> unit)
      =
      fun ~src:(x1923 : string) ->
        fun ~dest:(x1924 : string) ->
          fun ~flags:(x1925 : int) ->
            fun ~callback:(x1926 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "copyFile"
                   [|(Ojs.string_to_js x1923);(Ojs.string_to_js x1924);(
                     Ojs.int_to_js x1925);(NoParamCallback.t_to_js x1926)|])
    module CopyFile =
      struct
        let (__promisify__ :
          src:string -> dst:string -> ?flags:int -> unit -> unit Promise.t) =
          fun ~src:(x1927 : string) ->
            fun ~dst:(x1928 : string) ->
              fun ?flags:(x1929 : int option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x1932 = Ojs.get_prop_ascii Import.fs "copyFile" in
                     Ojs.call (Ojs.get_prop_ascii x1932 "__promisify__")
                       "apply"
                       [|x1932;((let x1930 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1930 "push"
                                      [|(Ojs.string_to_js x1927)|]);
                                 ignore
                                   (Ojs.call x1930 "push"
                                      [|(Ojs.string_to_js x1928)|]);
                                 (match x1929 with
                                  | Some x1931 ->
                                      ignore
                                        (Ojs.call x1930 "push"
                                           [|(Ojs.int_to_js x1931)|])
                                  | None -> ());
                                 x1930))|])
      end
    let (copy_file_sync :
      src:string -> dest:string -> ?flags:int -> unit -> unit) =
      fun ~src:(x1934 : string) ->
        fun ~dest:(x1935 : string) ->
          fun ?flags:(x1936 : int option) ->
            fun () ->
              ignore
                (let x1939 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x1939 "copyFileSync") "apply"
                   [|x1939;((let x1937 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1937 "push"
                                  [|(Ojs.string_to_js x1934)|]);
                             ignore
                               (Ojs.call x1937 "push"
                                  [|(Ojs.string_to_js x1935)|]);
                             (match x1936 with
                              | Some x1938 ->
                                  ignore
                                    (Ojs.call x1937 "push"
                                       [|(Ojs.int_to_js x1938)|])
                              | None -> ());
                             x1937))|])
    let (writev :
      int ->
        buffers:ArrayBufferView.t list ->
          cb:(err:ErrnoException.t or_null ->
                bytes_written:int -> buffers:ArrayBufferView.t list -> unit)
            -> unit)
      =
      fun (x1940 : int) ->
        fun ~buffers:(x1941 : ArrayBufferView.t list) ->
          fun
            ~cb:(x1943 :
                  err:ErrnoException.t or_null ->
                    bytes_written:int ->
                      buffers:ArrayBufferView.t list -> unit)
            ->
            ignore
              (Ojs.call Import.fs "writev"
                 [|(Ojs.int_to_js x1940);(Ojs.list_to_js
                                            ArrayBufferView.t_to_js x1941);(
                   Ojs.fun_to_js 3
                     (fun (x1944 : Ojs.t) ->
                        fun (x1946 : Ojs.t) ->
                          fun (x1947 : Ojs.t) ->
                            x1943
                              ~err:(or_null_of_js ErrnoException.t_of_js
                                      x1944)
                              ~bytes_written:(Ojs.int_of_js x1946)
                              ~buffers:(Ojs.list_of_js
                                          ArrayBufferView.t_of_js x1947)))|])
    let (writev :
      int ->
        buffers:ArrayBufferView.t list ->
          position:int ->
            cb:(err:ErrnoException.t or_null ->
                  bytes_written:int -> buffers:ArrayBufferView.t list -> unit)
              -> unit)
      =
      fun (x1949 : int) ->
        fun ~buffers:(x1950 : ArrayBufferView.t list) ->
          fun ~position:(x1952 : int) ->
            fun
              ~cb:(x1953 :
                    err:ErrnoException.t or_null ->
                      bytes_written:int ->
                        buffers:ArrayBufferView.t list -> unit)
              ->
              ignore
                (Ojs.call Import.fs "writev"
                   [|(Ojs.int_to_js x1949);(Ojs.list_to_js
                                              ArrayBufferView.t_to_js x1950);(
                     Ojs.int_to_js x1952);(Ojs.fun_to_js 3
                                             (fun (x1954 : Ojs.t) ->
                                                fun (x1956 : Ojs.t) ->
                                                  fun (x1957 : Ojs.t) ->
                                                    x1953
                                                      ~err:(or_null_of_js
                                                              ErrnoException.t_of_js
                                                              x1954)
                                                      ~bytes_written:(
                                                      Ojs.int_of_js x1956)
                                                      ~buffers:(Ojs.list_of_js
                                                                  ArrayBufferView.t_of_js
                                                                  x1957)))|])
    module WriteVResult =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1960 : Ojs.t) -> x1960
        and t_to_js : t -> Ojs.t = fun (x1959 : Ojs.t) -> x1959
        let (get_bytes_written : t -> int) =
          fun (x1961 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1961) "bytesWritten")
        let (set_bytes_written : t -> int -> unit) =
          fun (x1962 : t) ->
            fun (x1963 : int) ->
              Ojs.set_prop_ascii (t_to_js x1962) "bytesWritten"
                (Ojs.int_to_js x1963)
        let (get_buffers : t -> ArrayBufferView.t list) =
          fun (x1964 : t) ->
            Ojs.list_of_js ArrayBufferView.t_of_js
              (Ojs.get_prop_ascii (t_to_js x1964) "buffers")
        let (set_buffers : t -> ArrayBufferView.t list -> unit) =
          fun (x1966 : t) ->
            fun (x1967 : ArrayBufferView.t list) ->
              Ojs.set_prop_ascii (t_to_js x1966) "buffers"
                (Ojs.list_to_js ArrayBufferView.t_to_js x1967)
      end
    module Writev =
      struct
        let (__promisify__ :
          int ->
            buffers:ArrayBufferView.t list ->
              ?position:int -> unit -> WriteVResult.t Promise.t)
          =
          fun (x1969 : int) ->
            fun ~buffers:(x1970 : ArrayBufferView.t list) ->
              fun ?position:(x1971 : int option) ->
                fun () ->
                  Promise.t_of_js WriteVResult.t_of_js
                    (let x1975 = Ojs.get_prop_ascii Import.fs "writev" in
                     Ojs.call (Ojs.get_prop_ascii x1975 "__promisify__")
                       "apply"
                       [|x1975;((let x1972 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1972 "push"
                                      [|(Ojs.int_to_js x1969)|]);
                                 ignore
                                   (Ojs.call x1972 "push"
                                      [|(Ojs.list_to_js
                                           ArrayBufferView.t_to_js x1970)|]);
                                 (match x1971 with
                                  | Some x1973 ->
                                      ignore
                                        (Ojs.call x1972 "push"
                                           [|(Ojs.int_to_js x1973)|])
                                  | None -> ());
                                 x1972))|])
      end
    let (writev_sync :
      int -> buffers:ArrayBufferView.t list -> ?position:int -> unit -> int)
      =
      fun (x1977 : int) ->
        fun ~buffers:(x1978 : ArrayBufferView.t list) ->
          fun ?position:(x1979 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x1983 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x1983 "writevSync") "apply"
                   [|x1983;((let x1980 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1980 "push"
                                  [|(Ojs.int_to_js x1977)|]);
                             ignore
                               (Ojs.call x1980 "push"
                                  [|(Ojs.list_to_js ArrayBufferView.t_to_js
                                       x1978)|]);
                             (match x1979 with
                              | Some x1981 ->
                                  ignore
                                    (Ojs.call x1980 "push"
                                       [|(Ojs.int_to_js x1981)|])
                              | None -> ());
                             x1980))|])
    let (readv :
      int ->
        buffers:ArrayBufferView.t list ->
          cb:(err:ErrnoException.t or_null ->
                bytes_read:int -> buffers:ArrayBufferView.t list -> unit)
            -> unit)
      =
      fun (x1984 : int) ->
        fun ~buffers:(x1985 : ArrayBufferView.t list) ->
          fun
            ~cb:(x1987 :
                  err:ErrnoException.t or_null ->
                    bytes_read:int -> buffers:ArrayBufferView.t list -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readv"
                 [|(Ojs.int_to_js x1984);(Ojs.list_to_js
                                            ArrayBufferView.t_to_js x1985);(
                   Ojs.fun_to_js 3
                     (fun (x1988 : Ojs.t) ->
                        fun (x1990 : Ojs.t) ->
                          fun (x1991 : Ojs.t) ->
                            x1987
                              ~err:(or_null_of_js ErrnoException.t_of_js
                                      x1988)
                              ~bytes_read:(Ojs.int_of_js x1990)
                              ~buffers:(Ojs.list_of_js
                                          ArrayBufferView.t_of_js x1991)))|])
    let (readv :
      int ->
        buffers:ArrayBufferView.t list ->
          position:int ->
            cb:(err:ErrnoException.t or_null ->
                  bytes_read:int -> buffers:ArrayBufferView.t list -> unit)
              -> unit)
      =
      fun (x1993 : int) ->
        fun ~buffers:(x1994 : ArrayBufferView.t list) ->
          fun ~position:(x1996 : int) ->
            fun
              ~cb:(x1997 :
                    err:ErrnoException.t or_null ->
                      bytes_read:int ->
                        buffers:ArrayBufferView.t list -> unit)
              ->
              ignore
                (Ojs.call Import.fs "readv"
                   [|(Ojs.int_to_js x1993);(Ojs.list_to_js
                                              ArrayBufferView.t_to_js x1994);(
                     Ojs.int_to_js x1996);(Ojs.fun_to_js 3
                                             (fun (x1998 : Ojs.t) ->
                                                fun (x2000 : Ojs.t) ->
                                                  fun (x2001 : Ojs.t) ->
                                                    x1997
                                                      ~err:(or_null_of_js
                                                              ErrnoException.t_of_js
                                                              x1998)
                                                      ~bytes_read:(Ojs.int_of_js
                                                                    x2000)
                                                      ~buffers:(Ojs.list_of_js
                                                                  ArrayBufferView.t_of_js
                                                                  x2001)))|])
    module ReadVResult =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2004 : Ojs.t) -> x2004
        and t_to_js : t -> Ojs.t = fun (x2003 : Ojs.t) -> x2003
        let (get_bytes_read : t -> int) =
          fun (x2005 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2005) "bytesRead")
        let (set_bytes_read : t -> int -> unit) =
          fun (x2006 : t) ->
            fun (x2007 : int) ->
              Ojs.set_prop_ascii (t_to_js x2006) "bytesRead"
                (Ojs.int_to_js x2007)
        let (get_buffers : t -> ArrayBufferView.t list) =
          fun (x2008 : t) ->
            Ojs.list_of_js ArrayBufferView.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2008) "buffers")
        let (set_buffers : t -> ArrayBufferView.t list -> unit) =
          fun (x2010 : t) ->
            fun (x2011 : ArrayBufferView.t list) ->
              Ojs.set_prop_ascii (t_to_js x2010) "buffers"
                (Ojs.list_to_js ArrayBufferView.t_to_js x2011)
      end
    module Readv =
      struct
        let (__promisify__ :
          int ->
            buffers:ArrayBufferView.t list ->
              ?position:int -> unit -> ReadVResult.t Promise.t)
          =
          fun (x2013 : int) ->
            fun ~buffers:(x2014 : ArrayBufferView.t list) ->
              fun ?position:(x2015 : int option) ->
                fun () ->
                  Promise.t_of_js ReadVResult.t_of_js
                    (let x2019 = Ojs.get_prop_ascii Import.fs "readv" in
                     Ojs.call (Ojs.get_prop_ascii x2019 "__promisify__")
                       "apply"
                       [|x2019;((let x2016 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2016 "push"
                                      [|(Ojs.int_to_js x2013)|]);
                                 ignore
                                   (Ojs.call x2016 "push"
                                      [|(Ojs.list_to_js
                                           ArrayBufferView.t_to_js x2014)|]);
                                 (match x2015 with
                                  | Some x2017 ->
                                      ignore
                                        (Ojs.call x2016 "push"
                                           [|(Ojs.int_to_js x2017)|])
                                  | None -> ());
                                 x2016))|])
      end
    let (readv_sync :
      int -> buffers:ArrayBufferView.t list -> ?position:int -> unit -> int)
      =
      fun (x2021 : int) ->
        fun ~buffers:(x2022 : ArrayBufferView.t list) ->
          fun ?position:(x2023 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x2027 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x2027 "readvSync") "apply"
                   [|x2027;((let x2024 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2024 "push"
                                  [|(Ojs.int_to_js x2021)|]);
                             ignore
                               (Ojs.call x2024 "push"
                                  [|(Ojs.list_to_js ArrayBufferView.t_to_js
                                       x2022)|]);
                             (match x2023 with
                              | Some x2025 ->
                                  ignore
                                    (Ojs.call x2024 "push"
                                       [|(Ojs.int_to_js x2025)|])
                              | None -> ());
                             x2024))|])
    module OpenDirOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2029 : Ojs.t) -> x2029
        and t_to_js : t -> Ojs.t = fun (x2028 : Ojs.t) -> x2028
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x2030 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2030) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x2031 : t) ->
            fun (x2032 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x2031) "encoding"
                (BufferEncoding.t_to_js x2032)
        let (get_buffer_size : t -> int) =
          fun (x2033 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2033) "bufferSize")
        let (set_buffer_size : t -> int -> unit) =
          fun (x2034 : t) ->
            fun (x2035 : int) ->
              Ojs.set_prop_ascii (t_to_js x2034) "bufferSize"
                (Ojs.int_to_js x2035)
      end
    let (opendir_sync :
      PathLike.t -> ?options:OpenDirOptions.t -> unit -> Dir.t) =
      fun (x2036 : PathLike.t) ->
        fun ?options:(x2037 : OpenDirOptions.t option) ->
          fun () ->
            Dir.t_of_js
              (let x2040 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x2040 "opendirSync") "apply"
                 [|x2040;((let x2038 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2038 "push"
                                [|(PathLike.t_to_js x2036)|]);
                           (match x2037 with
                            | Some x2039 ->
                                ignore
                                  (Ojs.call x2038 "push"
                                     [|(OpenDirOptions.t_to_js x2039)|])
                            | None -> ());
                           x2038))|])
    let (opendir :
      PathLike.t ->
        cb:(err:ErrnoException.t or_null -> dir:Dir.t -> unit) -> unit)
      =
      fun (x2041 : PathLike.t) ->
        fun ~cb:(x2042 : err:ErrnoException.t or_null -> dir:Dir.t -> unit)
          ->
          ignore
            (Ojs.call Import.fs "opendir"
               [|(PathLike.t_to_js x2041);(Ojs.fun_to_js 2
                                             (fun (x2043 : Ojs.t) ->
                                                fun (x2045 : Ojs.t) ->
                                                  x2042
                                                    ~err:(or_null_of_js
                                                            ErrnoException.t_of_js
                                                            x2043)
                                                    ~dir:(Dir.t_of_js x2045)))|])
    let (opendir :
      PathLike.t ->
        options:OpenDirOptions.t ->
          cb:(err:ErrnoException.t or_null -> dir:Dir.t -> unit) -> unit)
      =
      fun (x2046 : PathLike.t) ->
        fun ~options:(x2047 : OpenDirOptions.t) ->
          fun ~cb:(x2048 : err:ErrnoException.t or_null -> dir:Dir.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "opendir"
                 [|(PathLike.t_to_js x2046);(OpenDirOptions.t_to_js x2047);(
                   Ojs.fun_to_js 2
                     (fun (x2049 : Ojs.t) ->
                        fun (x2051 : Ojs.t) ->
                          x2048
                            ~err:(or_null_of_js ErrnoException.t_of_js x2049)
                            ~dir:(Dir.t_of_js x2051)))|])
    module Opendir =
      struct
        let (__promisify__ :
          PathLike.t -> ?options:OpenDirOptions.t -> unit -> Dir.t Promise.t)
          =
          fun (x2052 : PathLike.t) ->
            fun ?options:(x2053 : OpenDirOptions.t option) ->
              fun () ->
                Promise.t_of_js Dir.t_of_js
                  (let x2056 = Ojs.get_prop_ascii Import.fs "opendir" in
                   Ojs.call (Ojs.get_prop_ascii x2056 "__promisify__")
                     "apply"
                     [|x2056;((let x2054 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2054 "push"
                                    [|(PathLike.t_to_js x2052)|]);
                               (match x2053 with
                                | Some x2055 ->
                                    ignore
                                      (Ojs.call x2054 "push"
                                         [|(OpenDirOptions.t_to_js x2055)|])
                                | None -> ());
                               x2054))|])
      end
    module BigIntOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2059 : Ojs.t) -> x2059
        and t_to_js : t -> Ojs.t = fun (x2058 : Ojs.t) -> x2058
        let (get_bigint : t -> [ `L_b_true ]) =
          fun (x2060 : t) ->
            let x2061 = Ojs.get_prop_ascii (t_to_js x2060) "bigint" in
            match Ojs.bool_of_js x2061 with
            | true -> `L_b_true
            | _ -> assert false
        let (set_bigint : t -> [ `L_b_true ] -> unit) =
          fun (x2062 : t) ->
            fun (x2063 : [ `L_b_true ]) ->
              Ojs.set_prop_ascii (t_to_js x2062) "bigint"
                (match x2063 with | `L_b_true -> Ojs.string_to_js "LBTrue")
      end
  end
