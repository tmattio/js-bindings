[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
open Node_stream
module Fs =
  struct
    module OpenMode =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
        and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
      end
    module Mode =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x4 : Ojs.t) -> x4
        and t_to_js : t -> Ojs.t = fun (x3 : Ojs.t) -> x3
      end
    module StatsBase =
      struct
        type 'T t = Ojs.t
        let rec t_of_js : 'T . (Ojs.t -> 'T) -> Ojs.t -> 'T t = fun (type
          __T) -> fun (__T_of_js : Ojs.t -> __T) -> fun (x6 : Ojs.t) -> x6
        and t_to_js : 'T . ('T -> Ojs.t) -> 'T t -> Ojs.t = fun (type __T) ->
          fun (__T_to_js : __T -> Ojs.t) -> fun (x5 : Ojs.t) -> x5
        let (is_file : 'T t -> bool) =
          fun (x7 : 'T t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js Obj.magic x7) "isFile" [||])
        let (is_directory : 'T t -> bool) =
          fun (x9 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.call (t_to_js Obj.magic x9) "isDirectory" [||])
        let (is_block_device : 'T t -> bool) =
          fun (x11 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.call (t_to_js Obj.magic x11) "isBlockDevice" [||])
        let (is_character_device : 'T t -> bool) =
          fun (x13 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.call (t_to_js Obj.magic x13) "isCharacterDevice" [||])
        let (is_symbolic_link : 'T t -> bool) =
          fun (x15 : 'T t) ->
            Ojs.bool_of_js
              (Ojs.call (t_to_js Obj.magic x15) "isSymbolicLink" [||])
        let (is_fifo : 'T t -> bool) =
          fun (x17 : 'T t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js Obj.magic x17) "isFIFO" [||])
        let (is_socket : 'T t -> bool) =
          fun (x19 : 'T t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js Obj.magic x19) "isSocket" [||])
        let (get_dev : 'T t -> 'T) =
          fun (x21 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x21) "dev")
        let (set_dev : 'T t -> 'T -> unit) =
          fun (x23 : 'T t) ->
            fun (x24 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x23) "dev"
                (Obj.magic x24)
        let (get_ino : 'T t -> 'T) =
          fun (x26 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x26) "ino")
        let (set_ino : 'T t -> 'T -> unit) =
          fun (x28 : 'T t) ->
            fun (x29 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x28) "ino"
                (Obj.magic x29)
        let (get_mode : 'T t -> 'T) =
          fun (x31 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x31) "mode")
        let (set_mode : 'T t -> 'T -> unit) =
          fun (x33 : 'T t) ->
            fun (x34 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x33) "mode"
                (Obj.magic x34)
        let (get_nlink : 'T t -> 'T) =
          fun (x36 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x36) "nlink")
        let (set_nlink : 'T t -> 'T -> unit) =
          fun (x38 : 'T t) ->
            fun (x39 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x38) "nlink"
                (Obj.magic x39)
        let (get_uid : 'T t -> 'T) =
          fun (x41 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x41) "uid")
        let (set_uid : 'T t -> 'T -> unit) =
          fun (x43 : 'T t) ->
            fun (x44 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x43) "uid"
                (Obj.magic x44)
        let (get_gid : 'T t -> 'T) =
          fun (x46 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x46) "gid")
        let (set_gid : 'T t -> 'T -> unit) =
          fun (x48 : 'T t) ->
            fun (x49 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x48) "gid"
                (Obj.magic x49)
        let (get_rdev : 'T t -> 'T) =
          fun (x51 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x51) "rdev")
        let (set_rdev : 'T t -> 'T -> unit) =
          fun (x53 : 'T t) ->
            fun (x54 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x53) "rdev"
                (Obj.magic x54)
        let (get_size : 'T t -> 'T) =
          fun (x56 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x56) "size")
        let (set_size : 'T t -> 'T -> unit) =
          fun (x58 : 'T t) ->
            fun (x59 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x58) "size"
                (Obj.magic x59)
        let (get_blksize : 'T t -> 'T) =
          fun (x61 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x61) "blksize")
        let (set_blksize : 'T t -> 'T -> unit) =
          fun (x63 : 'T t) ->
            fun (x64 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x63) "blksize"
                (Obj.magic x64)
        let (get_blocks : 'T t -> 'T) =
          fun (x66 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x66) "blocks")
        let (set_blocks : 'T t -> 'T -> unit) =
          fun (x68 : 'T t) ->
            fun (x69 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x68) "blocks"
                (Obj.magic x69)
        let (get_atime_ms : 'T t -> 'T) =
          fun (x71 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x71) "atimeMs")
        let (set_atime_ms : 'T t -> 'T -> unit) =
          fun (x73 : 'T t) ->
            fun (x74 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x73) "atimeMs"
                (Obj.magic x74)
        let (get_mtime_ms : 'T t -> 'T) =
          fun (x76 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x76) "mtimeMs")
        let (set_mtime_ms : 'T t -> 'T -> unit) =
          fun (x78 : 'T t) ->
            fun (x79 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x78) "mtimeMs"
                (Obj.magic x79)
        let (get_ctime_ms : 'T t -> 'T) =
          fun (x81 : 'T t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js Obj.magic x81) "ctimeMs")
        let (set_ctime_ms : 'T t -> 'T -> unit) =
          fun (x83 : 'T t) ->
            fun (x84 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x83) "ctimeMs"
                (Obj.magic x84)
        let (get_birthtime_ms : 'T t -> 'T) =
          fun (x86 : 'T t) ->
            Obj.magic
              (Ojs.get_prop_ascii (t_to_js Obj.magic x86) "birthtimeMs")
        let (set_birthtime_ms : 'T t -> 'T -> unit) =
          fun (x88 : 'T t) ->
            fun (x89 : 'T) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x88) "birthtimeMs"
                (Obj.magic x89)
        let (get_atime : 'T t -> Date.t) =
          fun (x91 : 'T t) ->
            Date.t_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x91) "atime")
        let (set_atime : 'T t -> Date.t -> unit) =
          fun (x93 : 'T t) ->
            fun (x94 : Date.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x93) "atime"
                (Date.t_to_js x94)
        let (get_mtime : 'T t -> Date.t) =
          fun (x96 : 'T t) ->
            Date.t_of_js (Ojs.get_prop_ascii (t_to_js Obj.magic x96) "mtime")
        let (set_mtime : 'T t -> Date.t -> unit) =
          fun (x98 : 'T t) ->
            fun (x99 : Date.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x98) "mtime"
                (Date.t_to_js x99)
        let (get_ctime : 'T t -> Date.t) =
          fun (x101 : 'T t) ->
            Date.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x101) "ctime")
        let (set_ctime : 'T t -> Date.t -> unit) =
          fun (x103 : 'T t) ->
            fun (x104 : Date.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x103) "ctime"
                (Date.t_to_js x104)
        let (get_birthtime : 'T t -> Date.t) =
          fun (x106 : 'T t) ->
            Date.t_of_js
              (Ojs.get_prop_ascii (t_to_js Obj.magic x106) "birthtime")
        let (set_birthtime : 'T t -> Date.t -> unit) =
          fun (x108 : 'T t) ->
            fun (x109 : Date.t) ->
              Ojs.set_prop_ascii (t_to_js Obj.magic x108) "birthtime"
                (Date.t_to_js x109)
      end
    module Stats =
      struct
        include struct include StatsBase end
        type t = int StatsBase.t
        let rec t_of_js : Ojs.t -> t =
          fun (x113 : Ojs.t) -> StatsBase.t_of_js Ojs.int_of_js x113
        and t_to_js : t -> Ojs.t =
          fun (x111 : int StatsBase.t) ->
            StatsBase.t_to_js Ojs.int_to_js x111
      end
    module AnonymousInterface0 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x116 : Ojs.t) -> x116
        and t_to_js : t -> Ojs.t = fun (x115 : Ojs.t) -> x115
        let (get_bigint : t -> [ `L_b_false ]) =
          fun (x117 : t) ->
            let x118 = Ojs.get_prop_ascii (t_to_js x117) "bigint" in
            match Ojs.bool_of_js x118 with
            | false -> `L_b_false
            | _ -> assert false
        let (set_bigint : t -> [ `L_b_false ] -> unit) =
          fun (x119 : t) ->
            fun (x120 : [ `L_b_false ]) ->
              Ojs.set_prop_ascii (t_to_js x119) "bigint"
                (match x120 with | `L_b_false -> Ojs.string_to_js "LBFalse")
      end
    module AnonymousInterface1 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x122 : Ojs.t) -> x122
        and t_to_js : t -> Ojs.t = fun (x121 : Ojs.t) -> x121
        let (get_bigint : t -> [ `L_b_true ]) =
          fun (x123 : t) ->
            let x124 = Ojs.get_prop_ascii (t_to_js x123) "bigint" in
            match Ojs.bool_of_js x124 with
            | true -> `L_b_true
            | _ -> assert false
        let (set_bigint : t -> [ `L_b_true ] -> unit) =
          fun (x125 : t) ->
            fun (x126 : [ `L_b_true ]) ->
              Ojs.set_prop_ascii (t_to_js x125) "bigint"
                (match x126 with | `L_b_true -> Ojs.string_to_js "LBTrue")
      end
    module AnonymousInterface2 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x128 : Ojs.t) -> x128
        and t_to_js : t -> Ojs.t = fun (x127 : Ojs.t) -> x127
        let (get_bytes_read : t -> int) =
          fun (x129 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x129) "bytesRead")
        let (set_bytes_read : t -> int -> unit) =
          fun (x130 : t) ->
            fun (x131 : int) ->
              Ojs.set_prop_ascii (t_to_js x130) "bytesRead"
                (Ojs.int_to_js x131)
        let (get_buffer : t -> 'TBuffer) =
          fun (x132 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x132) "buffer")
        let (set_buffer : t -> 'TBuffer -> unit) =
          fun (x133 : t) ->
            fun (x134 : 'TBuffer) ->
              Ojs.set_prop_ascii (t_to_js x133) "buffer" (Obj.magic x134)
      end
    module AnonymousInterface3 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x136 : Ojs.t) -> x136
        and t_to_js : t -> Ojs.t = fun (x135 : Ojs.t) -> x135
        let (get_bytes_written : t -> int) =
          fun (x137 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x137) "bytesWritten")
        let (set_bytes_written : t -> int -> unit) =
          fun (x138 : t) ->
            fun (x139 : int) ->
              Ojs.set_prop_ascii (t_to_js x138) "bytesWritten"
                (Ojs.int_to_js x139)
        let (get_buffer : t -> 'TBuffer) =
          fun (x140 : t) ->
            Obj.magic (Ojs.get_prop_ascii (t_to_js x140) "buffer")
        let (set_buffer : t -> 'TBuffer -> unit) =
          fun (x141 : t) ->
            fun (x142 : 'TBuffer) ->
              Ojs.set_prop_ascii (t_to_js x141) "buffer" (Obj.magic x142)
      end
    module AnonymousInterface4 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x144 : Ojs.t) -> x144
        and t_to_js : t -> Ojs.t = fun (x143 : Ojs.t) -> x143
        let (get_bytes_written : t -> int) =
          fun (x145 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x145) "bytesWritten")
        let (set_bytes_written : t -> int -> unit) =
          fun (x146 : t) ->
            fun (x147 : int) ->
              Ojs.set_prop_ascii (t_to_js x146) "bytesWritten"
                (Ojs.int_to_js x147)
        let (get_buffer : t -> string) =
          fun (x148 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x148) "buffer")
        let (set_buffer : t -> string -> unit) =
          fun (x149 : t) ->
            fun (x150 : string) ->
              Ojs.set_prop_ascii (t_to_js x149) "buffer"
                (Ojs.string_to_js x150)
      end
    module AnonymousInterface5 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x152 : Ojs.t) -> x152
        and t_to_js : t -> Ojs.t = fun (x151 : Ojs.t) -> x151
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x153 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x153) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x154 : t) ->
            fun (x155 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x154) "encoding"
                (BufferEncoding.t_to_js x155)
        let (get_flag : t -> string) =
          fun (x156 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x156) "flag")
        let (set_flag : t -> string -> unit) =
          fun (x157 : t) ->
            fun (x158 : string) ->
              Ojs.set_prop_ascii (t_to_js x157) "flag"
                (Ojs.string_to_js x158)
      end
    module AnonymousInterface6 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x160 : Ojs.t) -> x160
        and t_to_js : t -> Ojs.t = fun (x159 : Ojs.t) -> x159
        let (get_encoding : t -> never or_null) =
          fun (x161 : t) ->
            or_null_of_js never_of_js
              (Ojs.get_prop_ascii (t_to_js x161) "encoding")
        let (set_encoding : t -> never or_null -> unit) =
          fun (x163 : t) ->
            fun (x164 : never or_null) ->
              Ojs.set_prop_ascii (t_to_js x163) "encoding"
                (or_null_to_js never_to_js x164)
        let (get_flag : t -> string) =
          fun (x166 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x166) "flag")
        let (set_flag : t -> string -> unit) =
          fun (x167 : t) ->
            fun (x168 : string) ->
              Ojs.set_prop_ascii (t_to_js x167) "flag"
                (Ojs.string_to_js x168)
      end
    module AnonymousInterface7 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x170 : Ojs.t) -> x170
        and t_to_js : t -> Ojs.t = fun (x169 : Ojs.t) -> x169
        let (get_encoding : t -> [ `buffer ]) =
          fun (x171 : t) ->
            let x172 = Ojs.get_prop_ascii (t_to_js x171) "encoding" in
            match Ojs.string_of_js x172 with
            | "buffer" -> `buffer
            | _ -> assert false
        let (set_encoding : t -> [ `buffer ] -> unit) =
          fun (x173 : t) ->
            fun (x174 : [ `buffer ]) ->
              Ojs.set_prop_ascii (t_to_js x173) "encoding"
                (match x174 with | `buffer -> Ojs.string_to_js "buffer")
      end
    module AnonymousInterface8 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x176 : Ojs.t) -> x176
        and t_to_js : t -> Ojs.t = fun (x175 : Ojs.t) -> x175
        let (get_encoding : t -> [ `buffer ]) =
          fun (x177 : t) ->
            let x178 = Ojs.get_prop_ascii (t_to_js x177) "encoding" in
            match Ojs.string_of_js x178 with
            | "buffer" -> `buffer
            | _ -> assert false
        let (set_encoding : t -> [ `buffer ] -> unit) =
          fun (x179 : t) ->
            fun (x180 : [ `buffer ]) ->
              Ojs.set_prop_ascii (t_to_js x179) "encoding"
                (match x180 with | `buffer -> Ojs.string_to_js "buffer")
        let (get_persistent : t -> bool) =
          fun (x181 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x181) "persistent")
        let (set_persistent : t -> bool -> unit) =
          fun (x182 : t) ->
            fun (x183 : bool) ->
              Ojs.set_prop_ascii (t_to_js x182) "persistent"
                (Ojs.bool_to_js x183)
        let (get_recursive : t -> bool) =
          fun (x184 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x184) "recursive")
        let (set_recursive : t -> bool -> unit) =
          fun (x185 : t) ->
            fun (x186 : bool) ->
              Ojs.set_prop_ascii (t_to_js x185) "recursive"
                (Ojs.bool_to_js x186)
      end
    module AnonymousInterface9 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x188 : Ojs.t) -> x188
        and t_to_js : t -> Ojs.t = fun (x187 : Ojs.t) -> x187
        let (get_encoding : t -> [ `buffer ]) =
          fun (x189 : t) ->
            let x190 = Ojs.get_prop_ascii (t_to_js x189) "encoding" in
            match Ojs.string_of_js x190 with
            | "buffer" -> `buffer
            | _ -> assert false
        let (set_encoding : t -> [ `buffer ] -> unit) =
          fun (x191 : t) ->
            fun (x192 : [ `buffer ]) ->
              Ojs.set_prop_ascii (t_to_js x191) "encoding"
                (match x192 with | `buffer -> Ojs.string_to_js "buffer")
        let (get_with_file_types : t -> [ `L_b_false ]) =
          fun (x193 : t) ->
            let x194 = Ojs.get_prop_ascii (t_to_js x193) "withFileTypes" in
            match Ojs.bool_of_js x194 with
            | false -> `L_b_false
            | _ -> assert false
        let (set_with_file_types : t -> [ `L_b_false ] -> unit) =
          fun (x195 : t) ->
            fun (x196 : [ `L_b_false ]) ->
              Ojs.set_prop_ascii (t_to_js x195) "withFileTypes"
                (match x196 with | `L_b_false -> Ojs.string_to_js "LBFalse")
      end
    module AnonymousInterface10 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x198 : Ojs.t) -> x198
        and t_to_js : t -> Ojs.t = fun (x197 : Ojs.t) -> x197
        let (get_encoding : t -> BufferEncoding.t or_null) =
          fun (x199 : t) ->
            or_null_of_js BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x199) "encoding")
        let (set_encoding : t -> BufferEncoding.t or_null -> unit) =
          fun (x201 : t) ->
            fun (x202 : BufferEncoding.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x201) "encoding"
                (or_null_to_js BufferEncoding.t_to_js x202)
        let (get_persistent : t -> bool) =
          fun (x204 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x204) "persistent")
        let (set_persistent : t -> bool -> unit) =
          fun (x205 : t) ->
            fun (x206 : bool) ->
              Ojs.set_prop_ascii (t_to_js x205) "persistent"
                (Ojs.bool_to_js x206)
        let (get_recursive : t -> bool) =
          fun (x207 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x207) "recursive")
        let (set_recursive : t -> bool -> unit) =
          fun (x208 : t) ->
            fun (x209 : bool) ->
              Ojs.set_prop_ascii (t_to_js x208) "recursive"
                (Ojs.bool_to_js x209)
      end
    module AnonymousInterface11 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x211 : Ojs.t) -> x211
        and t_to_js : t -> Ojs.t = fun (x210 : Ojs.t) -> x210
        let (get_encoding : t -> BufferEncoding.t or_null) =
          fun (x212 : t) ->
            or_null_of_js BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x212) "encoding")
        let (set_encoding : t -> BufferEncoding.t or_null -> unit) =
          fun (x214 : t) ->
            fun (x215 : BufferEncoding.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x214) "encoding"
                (or_null_to_js BufferEncoding.t_to_js x215)
        let (get_with_file_types : t -> [ `L_b_false ]) =
          fun (x217 : t) ->
            let x218 = Ojs.get_prop_ascii (t_to_js x217) "withFileTypes" in
            match Ojs.bool_of_js x218 with
            | false -> `L_b_false
            | _ -> assert false
        let (set_with_file_types : t -> [ `L_b_false ] -> unit) =
          fun (x219 : t) ->
            fun (x220 : [ `L_b_false ]) ->
              Ojs.set_prop_ascii (t_to_js x219) "withFileTypes"
                (match x220 with | `L_b_false -> Ojs.string_to_js "LBFalse")
      end
    module AnonymousInterface12 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x222 : Ojs.t) -> x222
        and t_to_js : t -> Ojs.t = fun (x221 : Ojs.t) -> x221
        let (get_flag : t -> string) =
          fun (x223 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x223) "flag")
        let (set_flag : t -> string -> unit) =
          fun (x224 : t) ->
            fun (x225 : string) ->
              Ojs.set_prop_ascii (t_to_js x224) "flag"
                (Ojs.string_to_js x225)
      end
    module AnonymousInterface13 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x227 : Ojs.t) -> x227
        and t_to_js : t -> Ojs.t = fun (x226 : Ojs.t) -> x226
        let (get_flags : t -> string) =
          fun (x228 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x228) "flags")
        let (set_flags : t -> string -> unit) =
          fun (x229 : t) ->
            fun (x230 : string) ->
              Ojs.set_prop_ascii (t_to_js x229) "flags"
                (Ojs.string_to_js x230)
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x231 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x231) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x232 : t) ->
            fun (x233 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x232) "encoding"
                (BufferEncoding.t_to_js x233)
        let (get_fd : t -> int) =
          fun (x234 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x234) "fd")
        let (set_fd : t -> int -> unit) =
          fun (x235 : t) ->
            fun (x236 : int) ->
              Ojs.set_prop_ascii (t_to_js x235) "fd" (Ojs.int_to_js x236)
        let (get_mode : t -> int) =
          fun (x237 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x237) "mode")
        let (set_mode : t -> int -> unit) =
          fun (x238 : t) ->
            fun (x239 : int) ->
              Ojs.set_prop_ascii (t_to_js x238) "mode" (Ojs.int_to_js x239)
        let (get_auto_close : t -> bool) =
          fun (x240 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x240) "autoClose")
        let (set_auto_close : t -> bool -> unit) =
          fun (x241 : t) ->
            fun (x242 : bool) ->
              Ojs.set_prop_ascii (t_to_js x241) "autoClose"
                (Ojs.bool_to_js x242)
        let (get_emit_close : t -> bool) =
          fun (x243 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x243) "emitClose")
        let (set_emit_close : t -> bool -> unit) =
          fun (x244 : t) ->
            fun (x245 : bool) ->
              Ojs.set_prop_ascii (t_to_js x244) "emitClose"
                (Ojs.bool_to_js x245)
        let (get_start : t -> int) =
          fun (x246 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x246) "start")
        let (set_start : t -> int -> unit) =
          fun (x247 : t) ->
            fun (x248 : int) ->
              Ojs.set_prop_ascii (t_to_js x247) "start" (Ojs.int_to_js x248)
        let (get_end : t -> int) =
          fun (x249 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x249) "end")
        let (set_end : t -> int -> unit) =
          fun (x250 : t) ->
            fun (x251 : int) ->
              Ojs.set_prop_ascii (t_to_js x250) "end" (Ojs.int_to_js x251)
        let (get_high_water_mark : t -> int) =
          fun (x252 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x252) "highWaterMark")
        let (set_high_water_mark : t -> int -> unit) =
          fun (x253 : t) ->
            fun (x254 : int) ->
              Ojs.set_prop_ascii (t_to_js x253) "highWaterMark"
                (Ojs.int_to_js x254)
      end
    module AnonymousInterface14 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x256 : Ojs.t) -> x256
        and t_to_js : t -> Ojs.t = fun (x255 : Ojs.t) -> x255
        let (get_flags : t -> string) =
          fun (x257 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x257) "flags")
        let (set_flags : t -> string -> unit) =
          fun (x258 : t) ->
            fun (x259 : string) ->
              Ojs.set_prop_ascii (t_to_js x258) "flags"
                (Ojs.string_to_js x259)
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x260 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x260) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x261 : t) ->
            fun (x262 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x261) "encoding"
                (BufferEncoding.t_to_js x262)
        let (get_fd : t -> int) =
          fun (x263 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x263) "fd")
        let (set_fd : t -> int -> unit) =
          fun (x264 : t) ->
            fun (x265 : int) ->
              Ojs.set_prop_ascii (t_to_js x264) "fd" (Ojs.int_to_js x265)
        let (get_mode : t -> int) =
          fun (x266 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x266) "mode")
        let (set_mode : t -> int -> unit) =
          fun (x267 : t) ->
            fun (x268 : int) ->
              Ojs.set_prop_ascii (t_to_js x267) "mode" (Ojs.int_to_js x268)
        let (get_auto_close : t -> bool) =
          fun (x269 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x269) "autoClose")
        let (set_auto_close : t -> bool -> unit) =
          fun (x270 : t) ->
            fun (x271 : bool) ->
              Ojs.set_prop_ascii (t_to_js x270) "autoClose"
                (Ojs.bool_to_js x271)
        let (get_emit_close : t -> bool) =
          fun (x272 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x272) "emitClose")
        let (set_emit_close : t -> bool -> unit) =
          fun (x273 : t) ->
            fun (x274 : bool) ->
              Ojs.set_prop_ascii (t_to_js x273) "emitClose"
                (Ojs.bool_to_js x274)
        let (get_start : t -> int) =
          fun (x275 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x275) "start")
        let (set_start : t -> int -> unit) =
          fun (x276 : t) ->
            fun (x277 : int) ->
              Ojs.set_prop_ascii (t_to_js x276) "start" (Ojs.int_to_js x277)
        let (get_high_water_mark : t -> int) =
          fun (x278 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x278) "highWaterMark")
        let (set_high_water_mark : t -> int -> unit) =
          fun (x279 : t) ->
            fun (x280 : int) ->
              Ojs.set_prop_ascii (t_to_js x279) "highWaterMark"
                (Ojs.int_to_js x280)
      end
    module AnonymousInterface15 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x282 : Ojs.t) -> x282
        and t_to_js : t -> Ojs.t = fun (x281 : Ojs.t) -> x281
        let (get_mode : t -> Mode.t) =
          fun (x283 : t) ->
            Mode.t_of_js (Ojs.get_prop_ascii (t_to_js x283) "mode")
        let (set_mode : t -> Mode.t -> unit) =
          fun (x284 : t) ->
            fun (x285 : Mode.t) ->
              Ojs.set_prop_ascii (t_to_js x284) "mode" (Mode.t_to_js x285)
        let (get_flag : t -> string) =
          fun (x286 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x286) "flag")
        let (set_flag : t -> string -> unit) =
          fun (x287 : t) ->
            fun (x288 : string) ->
              Ojs.set_prop_ascii (t_to_js x287) "flag"
                (Ojs.string_to_js x288)
      end
    module AnonymousInterface16 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x290 : Ojs.t) -> x290
        and t_to_js : t -> Ojs.t = fun (x289 : Ojs.t) -> x289
        let (get_persistent : t -> bool) =
          fun (x291 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x291) "persistent")
        let (set_persistent : t -> bool -> unit) =
          fun (x292 : t) ->
            fun (x293 : bool) ->
              Ojs.set_prop_ascii (t_to_js x292) "persistent"
                (Ojs.bool_to_js x293)
        let (get_interval : t -> int) =
          fun (x294 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x294) "interval")
        let (set_interval : t -> int -> unit) =
          fun (x295 : t) ->
            fun (x296 : int) ->
              Ojs.set_prop_ascii (t_to_js x295) "interval"
                (Ojs.int_to_js x296)
      end
    module AnonymousInterface17 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x298 : Ojs.t) -> x298
        and t_to_js : t -> Ojs.t = fun (x297 : Ojs.t) -> x297
        let (get_recursive : t -> [ `L_b_false ]) =
          fun (x299 : t) ->
            let x300 = Ojs.get_prop_ascii (t_to_js x299) "recursive" in
            match Ojs.bool_of_js x300 with
            | false -> `L_b_false
            | _ -> assert false
        let (set_recursive : t -> [ `L_b_false ] -> unit) =
          fun (x301 : t) ->
            fun (x302 : [ `L_b_false ]) ->
              Ojs.set_prop_ascii (t_to_js x301) "recursive"
                (match x302 with | `L_b_false -> Ojs.string_to_js "LBFalse")
      end
    module AnonymousInterface18 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x304 : Ojs.t) -> x304
        and t_to_js : t -> Ojs.t = fun (x303 : Ojs.t) -> x303
        let (get_recursive : t -> [ `L_b_true ]) =
          fun (x305 : t) ->
            let x306 = Ojs.get_prop_ascii (t_to_js x305) "recursive" in
            match Ojs.bool_of_js x306 with
            | true -> `L_b_true
            | _ -> assert false
        let (set_recursive : t -> [ `L_b_true ] -> unit) =
          fun (x307 : t) ->
            fun (x308 : [ `L_b_true ]) ->
              Ojs.set_prop_ascii (t_to_js x307) "recursive"
                (match x308 with | `L_b_true -> Ojs.string_to_js "LBTrue")
      end
    module AnonymousInterface19 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x310 : Ojs.t) -> x310
        and t_to_js : t -> Ojs.t = fun (x309 : Ojs.t) -> x309
        let (get_with_file_types : t -> [ `L_b_false ]) =
          fun (x311 : t) ->
            let x312 = Ojs.get_prop_ascii (t_to_js x311) "withFileTypes" in
            match Ojs.bool_of_js x312 with
            | false -> `L_b_false
            | _ -> assert false
        let (set_with_file_types : t -> [ `L_b_false ] -> unit) =
          fun (x313 : t) ->
            fun (x314 : [ `L_b_false ]) ->
              Ojs.set_prop_ascii (t_to_js x313) "withFileTypes"
                (match x314 with | `L_b_false -> Ojs.string_to_js "LBFalse")
      end
    module AnonymousInterface20 =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x316 : Ojs.t) -> x316
        and t_to_js : t -> Ojs.t = fun (x315 : Ojs.t) -> x315
        let (get_with_file_types : t -> [ `L_b_true ]) =
          fun (x317 : t) ->
            let x318 = Ojs.get_prop_ascii (t_to_js x317) "withFileTypes" in
            match Ojs.bool_of_js x318 with
            | true -> `L_b_true
            | _ -> assert false
        let (set_with_file_types : t -> [ `L_b_true ] -> unit) =
          fun (x319 : t) ->
            fun (x320 : [ `L_b_true ]) ->
              Ojs.set_prop_ascii (t_to_js x319) "withFileTypes"
                (match x320 with | `L_b_true -> Ojs.string_to_js "LBTrue")
      end
    module PathLike =
      struct
        type t = string
        let rec t_of_js : Ojs.t -> t =
          fun (x322 : Ojs.t) -> Ojs.string_of_js x322
        and t_to_js : t -> Ojs.t =
          fun (x321 : string) -> Ojs.string_to_js x321
      end
    module NoParamCallback =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x324 : Ojs.t) -> x324
        and t_to_js : t -> Ojs.t = fun (x323 : Ojs.t) -> x323
        let (apply : t -> err:ErrnoException.t or_null -> unit) =
          fun (x327 : t) ->
            fun ~err:(x325 : ErrnoException.t or_null) ->
              ignore
                (Ojs.apply (t_to_js x327)
                   [|(or_null_to_js ErrnoException.t_to_js x325)|])
      end
    module BufferEncodingOption =
      struct
        type t = [ `buffer ]
        let rec t_of_js : Ojs.t -> t =
          fun (x329 : Ojs.t) ->
            let x330 = x329 in
            match Ojs.string_of_js x330 with
            | "buffer" -> `buffer
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x328 : [ `buffer ]) ->
            match x328 with | `buffer -> Ojs.string_to_js "buffer"
      end
    module BaseEncodingOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x332 : Ojs.t) -> x332
        and t_to_js : t -> Ojs.t = fun (x331 : Ojs.t) -> x331
        let (get_encoding : t -> BufferEncoding.t or_null) =
          fun (x333 : t) ->
            or_null_of_js BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x333) "encoding")
        let (set_encoding : t -> BufferEncoding.t or_null -> unit) =
          fun (x335 : t) ->
            fun (x336 : BufferEncoding.t or_null) ->
              Ojs.set_prop_ascii (t_to_js x335) "encoding"
                (or_null_to_js BufferEncoding.t_to_js x336)
      end
    module Dirent =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x339 : Ojs.t) -> x339
        and t_to_js : t -> Ojs.t = fun (x338 : Ojs.t) -> x338
        let (is_file : t -> bool) =
          fun (x340 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x340) "isFile" [||])
        let (is_directory : t -> bool) =
          fun (x341 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x341) "isDirectory" [||])
        let (is_block_device : t -> bool) =
          fun (x342 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x342) "isBlockDevice" [||])
        let (is_character_device : t -> bool) =
          fun (x343 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x343) "isCharacterDevice" [||])
        let (is_symbolic_link : t -> bool) =
          fun (x344 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x344) "isSymbolicLink" [||])
        let (is_fifo : t -> bool) =
          fun (x345 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x345) "isFIFO" [||])
        let (is_socket : t -> bool) =
          fun (x346 : t) ->
            Ojs.bool_of_js (Ojs.call (t_to_js x346) "isSocket" [||])
        let (get_name : t -> string) =
          fun (x347 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x347) "name")
        let (set_name : t -> string -> unit) =
          fun (x348 : t) ->
            fun (x349 : string) ->
              Ojs.set_prop_ascii (t_to_js x348) "name"
                (Ojs.string_to_js x349)
      end
    module Dir =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x351 : Ojs.t) -> x351
        and t_to_js : t -> Ojs.t = fun (x350 : Ojs.t) -> x350
        let (get_path : t -> string) =
          fun (x352 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x352) "path")
        let (close : t -> unit Promise.t) =
          fun (x353 : t) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call (t_to_js x353) "close" [||])
        let (close' : t -> cb:NoParamCallback.t -> unit) =
          fun (x356 : t) ->
            fun ~cb:(x355 : NoParamCallback.t) ->
              ignore
                (Ojs.call (t_to_js x356) "close"
                   [|(NoParamCallback.t_to_js x355)|])
        let (close_sync : t -> unit) =
          fun (x357 : t) -> ignore (Ojs.call (t_to_js x357) "closeSync" [||])
        let (read : t -> Dirent.t or_null Promise.t) =
          fun (x358 : t) ->
            Promise.t_of_js
              (fun (x359 : Ojs.t) -> or_null_of_js Dirent.t_of_js x359)
              (Ojs.call (t_to_js x358) "read" [||])
        let (read' :
          t ->
            cb:(err:ErrnoException.t or_null ->
                  dir_ent:Dirent.t or_null -> unit)
              -> unit)
          =
          fun (x366 : t) ->
            fun
              ~cb:(x361 :
                    err:ErrnoException.t or_null ->
                      dir_ent:Dirent.t or_null -> unit)
              ->
              ignore
                (Ojs.call (t_to_js x366) "read"
                   [|(Ojs.fun_to_js 2
                        (fun (x362 : Ojs.t) ->
                           fun (x364 : Ojs.t) ->
                             x361
                               ~err:(or_null_of_js ErrnoException.t_of_js
                                       x362)
                               ~dir_ent:(or_null_of_js Dirent.t_of_js x364)))|])
        let (read_sync : t -> Dirent.t or_null) =
          fun (x367 : t) ->
            or_null_of_js Dirent.t_of_js
              (Ojs.call (t_to_js x367) "readSync" [||])
      end
    module FSWatcher =
      struct
        include struct include Node_events.Events.EventEmitter end
        let (close : t -> unit) =
          fun (x369 : t) -> ignore (Ojs.call (t_to_js x369) "close" [||])
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x374 : t) ->
            fun ~event:(x370 : string) ->
              fun ~listener:(x371 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x374) "addListener"
                     [|(Ojs.string_to_js x370);(Ojs.fun_to_js_args
                                                  (fun (x372 : _) ->
                                                     x371
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x372 0)))|])
        let (add_listener' :
          t ->
            event:[ `change ] ->
              listener:(eventType:string ->
                          filename:Buffer.t or_string -> unit)
                -> t)
          =
          fun (x380 : t) ->
            fun ~event:(x375 : [ `change ]) ->
              fun
                ~listener:(x376 :
                            eventType:string ->
                              filename:Buffer.t or_string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x380) "addListener"
                     [|((match x375 with
                         | `change -> Ojs.string_to_js "change"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x377 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x378 :
                                                                    Ojs.t) ->
                                                                    x376
                                                                    ~eventType:(
                                                                    Ojs.string_of_js
                                                                    x377)
                                                                    ~filename:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x378)))|])
        let (add_listener'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x384 : t) ->
            fun ~event:(x381 : [ `error ]) ->
              fun ~listener:(x382 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x384) "addListener"
                     [|((match x381 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x383 : Ojs.t) ->
                            x382 ~error:(Error.t_of_js x383)))|])
        let (add_listener''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x387 : t) ->
            fun ~event:(x385 : [ `close ]) ->
              fun ~listener:(x386 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x387) "addListener"
                     [|((match x385 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x386 ()))|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x392 : t) ->
            fun ~event:(x388 : string) ->
              fun ~listener:(x389 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x392) "on"
                     [|(Ojs.string_to_js x388);(Ojs.fun_to_js_args
                                                  (fun (x390 : _) ->
                                                     x389
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x390 0)))|])
        let (on' :
          t ->
            event:[ `change ] ->
              listener:(eventType:string ->
                          filename:Buffer.t or_string -> unit)
                -> t)
          =
          fun (x398 : t) ->
            fun ~event:(x393 : [ `change ]) ->
              fun
                ~listener:(x394 :
                            eventType:string ->
                              filename:Buffer.t or_string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x398) "on"
                     [|((match x393 with
                         | `change -> Ojs.string_to_js "change"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x395 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x396 :
                                                                    Ojs.t) ->
                                                                    x394
                                                                    ~eventType:(
                                                                    Ojs.string_of_js
                                                                    x395)
                                                                    ~filename:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x396)))|])
        let (on'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x402 : t) ->
            fun ~event:(x399 : [ `error ]) ->
              fun ~listener:(x400 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x402) "on"
                     [|((match x399 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x401 : Ojs.t) ->
                            x400 ~error:(Error.t_of_js x401)))|])
        let (on''' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x405 : t) ->
            fun ~event:(x403 : [ `close ]) ->
              fun ~listener:(x404 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x405) "on"
                     [|((match x403 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x404 ()))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x410 : t) ->
            fun ~event:(x406 : string) ->
              fun ~listener:(x407 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x410) "once"
                     [|(Ojs.string_to_js x406);(Ojs.fun_to_js_args
                                                  (fun (x408 : _) ->
                                                     x407
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x408 0)))|])
        let (once' :
          t ->
            event:[ `change ] ->
              listener:(eventType:string ->
                          filename:Buffer.t or_string -> unit)
                -> t)
          =
          fun (x416 : t) ->
            fun ~event:(x411 : [ `change ]) ->
              fun
                ~listener:(x412 :
                            eventType:string ->
                              filename:Buffer.t or_string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x416) "once"
                     [|((match x411 with
                         | `change -> Ojs.string_to_js "change"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x413 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x414 :
                                                                    Ojs.t) ->
                                                                    x412
                                                                    ~eventType:(
                                                                    Ojs.string_of_js
                                                                    x413)
                                                                    ~filename:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x414)))|])
        let (once'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x420 : t) ->
            fun ~event:(x417 : [ `error ]) ->
              fun ~listener:(x418 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x420) "once"
                     [|((match x417 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x419 : Ojs.t) ->
                            x418 ~error:(Error.t_of_js x419)))|])
        let (once''' : t -> event:[ `close ] -> listener:(unit -> unit) -> t)
          =
          fun (x423 : t) ->
            fun ~event:(x421 : [ `close ]) ->
              fun ~listener:(x422 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x423) "once"
                     [|((match x421 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x422 ()))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x428 : t) ->
            fun ~event:(x424 : string) ->
              fun ~listener:(x425 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x428) "prependListener"
                     [|(Ojs.string_to_js x424);(Ojs.fun_to_js_args
                                                  (fun (x426 : _) ->
                                                     x425
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x426 0)))|])
        let (prepend_listener' :
          t ->
            event:[ `change ] ->
              listener:(eventType:string ->
                          filename:Buffer.t or_string -> unit)
                -> t)
          =
          fun (x434 : t) ->
            fun ~event:(x429 : [ `change ]) ->
              fun
                ~listener:(x430 :
                            eventType:string ->
                              filename:Buffer.t or_string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x434) "prependListener"
                     [|((match x429 with
                         | `change -> Ojs.string_to_js "change"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x431 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x432 :
                                                                    Ojs.t) ->
                                                                    x430
                                                                    ~eventType:(
                                                                    Ojs.string_of_js
                                                                    x431)
                                                                    ~filename:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x432)))|])
        let (prepend_listener'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x438 : t) ->
            fun ~event:(x435 : [ `error ]) ->
              fun ~listener:(x436 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x438) "prependListener"
                     [|((match x435 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x437 : Ojs.t) ->
                            x436 ~error:(Error.t_of_js x437)))|])
        let (prepend_listener''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x441 : t) ->
            fun ~event:(x439 : [ `close ]) ->
              fun ~listener:(x440 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x441) "prependListener"
                     [|((match x439 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x440 ()))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x446 : t) ->
            fun ~event:(x442 : string) ->
              fun ~listener:(x443 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x446) "prependOnceListener"
                     [|(Ojs.string_to_js x442);(Ojs.fun_to_js_args
                                                  (fun (x444 : _) ->
                                                     x443
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x444 0)))|])
        let (prepend_once_listener' :
          t ->
            event:[ `change ] ->
              listener:(eventType:string ->
                          filename:Buffer.t or_string -> unit)
                -> t)
          =
          fun (x452 : t) ->
            fun ~event:(x447 : [ `change ]) ->
              fun
                ~listener:(x448 :
                            eventType:string ->
                              filename:Buffer.t or_string -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x452) "prependOnceListener"
                     [|((match x447 with
                         | `change -> Ojs.string_to_js "change"));(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x449 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x450 :
                                                                    Ojs.t) ->
                                                                    x448
                                                                    ~eventType:(
                                                                    Ojs.string_of_js
                                                                    x449)
                                                                    ~filename:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x450)))|])
        let (prepend_once_listener'' :
          t -> event:[ `error ] -> listener:(error:Error.t -> unit) -> t) =
          fun (x456 : t) ->
            fun ~event:(x453 : [ `error ]) ->
              fun ~listener:(x454 : error:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x456) "prependOnceListener"
                     [|((match x453 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x455 : Ojs.t) ->
                            x454 ~error:(Error.t_of_js x455)))|])
        let (prepend_once_listener''' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x459 : t) ->
            fun ~event:(x457 : [ `close ]) ->
              fun ~listener:(x458 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x459) "prependOnceListener"
                     [|((match x457 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x458 ()))|])
      end
    module ReadStream =
      struct
        include struct include Stream.Readable end
        let (close : t -> unit) =
          fun (x460 : t) -> ignore (Ojs.call (t_to_js x460) "close" [||])
        let (get_bytes_read : t -> int) =
          fun (x461 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x461) "bytesRead")
        let (set_bytes_read : t -> int -> unit) =
          fun (x462 : t) ->
            fun (x463 : int) ->
              Ojs.set_prop_ascii (t_to_js x462) "bytesRead"
                (Ojs.int_to_js x463)
        let (get_path : t -> Buffer.t or_string) =
          fun (x464 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x464) "path")
        let (set_path : t -> Buffer.t or_string -> unit) =
          fun (x466 : t) ->
            fun (x467 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x466) "path"
                (or_string_to_js Buffer.t_to_js x467)
        let (get_pending : t -> bool) =
          fun (x469 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x469) "pending")
        let (set_pending : t -> bool -> unit) =
          fun (x470 : t) ->
            fun (x471 : bool) ->
              Ojs.set_prop_ascii (t_to_js x470) "pending"
                (Ojs.bool_to_js x471)
        let (add_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x474 : t) ->
            fun ~event:(x472 : [ `close ]) ->
              fun ~listener:(x473 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x474) "addListener"
                     [|((match x472 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x473 ()))|])
        let (add_listener' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x479 : t) ->
            fun ~event:(x475 : [ `data ]) ->
              fun ~listener:(x476 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x479) "addListener"
                     [|((match x475 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x477 : Ojs.t) ->
                            x476 ~chunk:(or_string_of_js Buffer.t_of_js x477)))|])
        let (add_listener'' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x482 : t) ->
            fun ~event:(x480 : [ `end_ ]) ->
              fun ~listener:(x481 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x482) "addListener"
                     [|((match x480 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x481 ()))|])
        let (add_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x486 : t) ->
            fun ~event:(x483 : [ `error ]) ->
              fun ~listener:(x484 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x486) "addListener"
                     [|((match x483 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x485 : Ojs.t) ->
                            x484 ~err:(Error.t_of_js x485)))|])
        let (add_listener'''' :
          t -> event:[ `open_ ] -> listener:(fd:int -> unit) -> t) =
          fun (x490 : t) ->
            fun ~event:(x487 : [ `open_ ]) ->
              fun ~listener:(x488 : fd:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x490) "addListener"
                     [|((match x487 with | `open_ -> Ojs.string_to_js "open"));(
                       Ojs.fun_to_js 1
                         (fun (x489 : Ojs.t) -> x488 ~fd:(Ojs.int_of_js x489)))|])
        let (add_listener''''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x493 : t) ->
            fun ~event:(x491 : [ `pause ]) ->
              fun ~listener:(x492 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x493) "addListener"
                     [|((match x491 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x492 ()))|])
        let (add_listener'''''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x496 : t) ->
            fun ~event:(x494 : [ `readable ]) ->
              fun ~listener:(x495 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x496) "addListener"
                     [|((match x494 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x495 ()))|])
        let (add_listener''''''' :
          t -> event:[ `ready ] -> listener:(unit -> unit) -> t) =
          fun (x499 : t) ->
            fun ~event:(x497 : [ `ready ]) ->
              fun ~listener:(x498 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x499) "addListener"
                     [|((match x497 with | `ready -> Ojs.string_to_js "ready"));(
                       Ojs.fun_to_js 1 (fun _ -> x498 ()))|])
        let (add_listener'''''''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x502 : t) ->
            fun ~event:(x500 : [ `resume ]) ->
              fun ~listener:(x501 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x502) "addListener"
                     [|((match x500 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x501 ()))|])
        let (add_listener''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x508 : t) ->
            fun ~event:(x503 : symbol or_string) ->
              fun ~listener:(x505 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x508) "addListener"
                     [|(or_string_to_js symbol_to_js x503);(Ojs.fun_to_js_args
                                                              (fun (x506 : _)
                                                                 ->
                                                                 x505
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x506 0)))|])
        let (on : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x511 : t) ->
            fun ~event:(x509 : [ `close ]) ->
              fun ~listener:(x510 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x511) "on"
                     [|((match x509 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x510 ()))|])
        let (on' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x516 : t) ->
            fun ~event:(x512 : [ `data ]) ->
              fun ~listener:(x513 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x516) "on"
                     [|((match x512 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x514 : Ojs.t) ->
                            x513 ~chunk:(or_string_of_js Buffer.t_of_js x514)))|])
        let (on'' : t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x519 : t) ->
            fun ~event:(x517 : [ `end_ ]) ->
              fun ~listener:(x518 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x519) "on"
                     [|((match x517 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x518 ()))|])
        let (on''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x523 : t) ->
            fun ~event:(x520 : [ `error ]) ->
              fun ~listener:(x521 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x523) "on"
                     [|((match x520 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x522 : Ojs.t) ->
                            x521 ~err:(Error.t_of_js x522)))|])
        let (on'''' :
          t -> event:[ `open_ ] -> listener:(fd:int -> unit) -> t) =
          fun (x527 : t) ->
            fun ~event:(x524 : [ `open_ ]) ->
              fun ~listener:(x525 : fd:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x527) "on"
                     [|((match x524 with | `open_ -> Ojs.string_to_js "open"));(
                       Ojs.fun_to_js 1
                         (fun (x526 : Ojs.t) -> x525 ~fd:(Ojs.int_of_js x526)))|])
        let (on''''' : t -> event:[ `pause ] -> listener:(unit -> unit) -> t)
          =
          fun (x530 : t) ->
            fun ~event:(x528 : [ `pause ]) ->
              fun ~listener:(x529 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x530) "on"
                     [|((match x528 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x529 ()))|])
        let (on'''''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x533 : t) ->
            fun ~event:(x531 : [ `readable ]) ->
              fun ~listener:(x532 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x533) "on"
                     [|((match x531 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x532 ()))|])
        let (on''''''' :
          t -> event:[ `ready ] -> listener:(unit -> unit) -> t) =
          fun (x536 : t) ->
            fun ~event:(x534 : [ `ready ]) ->
              fun ~listener:(x535 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x536) "on"
                     [|((match x534 with | `ready -> Ojs.string_to_js "ready"));(
                       Ojs.fun_to_js 1 (fun _ -> x535 ()))|])
        let (on'''''''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x539 : t) ->
            fun ~event:(x537 : [ `resume ]) ->
              fun ~listener:(x538 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x539) "on"
                     [|((match x537 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x538 ()))|])
        let (on''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x545 : t) ->
            fun ~event:(x540 : symbol or_string) ->
              fun ~listener:(x542 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x545) "on"
                     [|(or_string_to_js symbol_to_js x540);(Ojs.fun_to_js_args
                                                              (fun (x543 : _)
                                                                 ->
                                                                 x542
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x543 0)))|])
        let (once : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x548 : t) ->
            fun ~event:(x546 : [ `close ]) ->
              fun ~listener:(x547 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x548) "once"
                     [|((match x546 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x547 ()))|])
        let (once' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x553 : t) ->
            fun ~event:(x549 : [ `data ]) ->
              fun ~listener:(x550 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x553) "once"
                     [|((match x549 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x551 : Ojs.t) ->
                            x550 ~chunk:(or_string_of_js Buffer.t_of_js x551)))|])
        let (once'' : t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x556 : t) ->
            fun ~event:(x554 : [ `end_ ]) ->
              fun ~listener:(x555 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x556) "once"
                     [|((match x554 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x555 ()))|])
        let (once''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x560 : t) ->
            fun ~event:(x557 : [ `error ]) ->
              fun ~listener:(x558 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x560) "once"
                     [|((match x557 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x559 : Ojs.t) ->
                            x558 ~err:(Error.t_of_js x559)))|])
        let (once'''' :
          t -> event:[ `open_ ] -> listener:(fd:int -> unit) -> t) =
          fun (x564 : t) ->
            fun ~event:(x561 : [ `open_ ]) ->
              fun ~listener:(x562 : fd:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x564) "once"
                     [|((match x561 with | `open_ -> Ojs.string_to_js "open"));(
                       Ojs.fun_to_js 1
                         (fun (x563 : Ojs.t) -> x562 ~fd:(Ojs.int_of_js x563)))|])
        let (once''''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x567 : t) ->
            fun ~event:(x565 : [ `pause ]) ->
              fun ~listener:(x566 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x567) "once"
                     [|((match x565 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x566 ()))|])
        let (once'''''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x570 : t) ->
            fun ~event:(x568 : [ `readable ]) ->
              fun ~listener:(x569 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x570) "once"
                     [|((match x568 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x569 ()))|])
        let (once''''''' :
          t -> event:[ `ready ] -> listener:(unit -> unit) -> t) =
          fun (x573 : t) ->
            fun ~event:(x571 : [ `ready ]) ->
              fun ~listener:(x572 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x573) "once"
                     [|((match x571 with | `ready -> Ojs.string_to_js "ready"));(
                       Ojs.fun_to_js 1 (fun _ -> x572 ()))|])
        let (once'''''''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x576 : t) ->
            fun ~event:(x574 : [ `resume ]) ->
              fun ~listener:(x575 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x576) "once"
                     [|((match x574 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x575 ()))|])
        let (once''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x582 : t) ->
            fun ~event:(x577 : symbol or_string) ->
              fun ~listener:(x579 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x582) "once"
                     [|(or_string_to_js symbol_to_js x577);(Ojs.fun_to_js_args
                                                              (fun (x580 : _)
                                                                 ->
                                                                 x579
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x580 0)))|])
        let (prepend_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x585 : t) ->
            fun ~event:(x583 : [ `close ]) ->
              fun ~listener:(x584 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x585) "prependListener"
                     [|((match x583 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x584 ()))|])
        let (prepend_listener' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x590 : t) ->
            fun ~event:(x586 : [ `data ]) ->
              fun ~listener:(x587 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x590) "prependListener"
                     [|((match x586 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x588 : Ojs.t) ->
                            x587 ~chunk:(or_string_of_js Buffer.t_of_js x588)))|])
        let (prepend_listener'' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x593 : t) ->
            fun ~event:(x591 : [ `end_ ]) ->
              fun ~listener:(x592 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x593) "prependListener"
                     [|((match x591 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x592 ()))|])
        let (prepend_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x597 : t) ->
            fun ~event:(x594 : [ `error ]) ->
              fun ~listener:(x595 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x597) "prependListener"
                     [|((match x594 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x596 : Ojs.t) ->
                            x595 ~err:(Error.t_of_js x596)))|])
        let (prepend_listener'''' :
          t -> event:[ `open_ ] -> listener:(fd:int -> unit) -> t) =
          fun (x601 : t) ->
            fun ~event:(x598 : [ `open_ ]) ->
              fun ~listener:(x599 : fd:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x601) "prependListener"
                     [|((match x598 with | `open_ -> Ojs.string_to_js "open"));(
                       Ojs.fun_to_js 1
                         (fun (x600 : Ojs.t) -> x599 ~fd:(Ojs.int_of_js x600)))|])
        let (prepend_listener''''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x604 : t) ->
            fun ~event:(x602 : [ `pause ]) ->
              fun ~listener:(x603 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x604) "prependListener"
                     [|((match x602 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x603 ()))|])
        let (prepend_listener'''''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x607 : t) ->
            fun ~event:(x605 : [ `readable ]) ->
              fun ~listener:(x606 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x607) "prependListener"
                     [|((match x605 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x606 ()))|])
        let (prepend_listener''''''' :
          t -> event:[ `ready ] -> listener:(unit -> unit) -> t) =
          fun (x610 : t) ->
            fun ~event:(x608 : [ `ready ]) ->
              fun ~listener:(x609 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x610) "prependListener"
                     [|((match x608 with | `ready -> Ojs.string_to_js "ready"));(
                       Ojs.fun_to_js 1 (fun _ -> x609 ()))|])
        let (prepend_listener'''''''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x613 : t) ->
            fun ~event:(x611 : [ `resume ]) ->
              fun ~listener:(x612 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x613) "prependListener"
                     [|((match x611 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x612 ()))|])
        let (prepend_listener''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x619 : t) ->
            fun ~event:(x614 : symbol or_string) ->
              fun ~listener:(x616 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x619) "prependListener"
                     [|(or_string_to_js symbol_to_js x614);(Ojs.fun_to_js_args
                                                              (fun (x617 : _)
                                                                 ->
                                                                 x616
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x617 0)))|])
        let (prepend_once_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x622 : t) ->
            fun ~event:(x620 : [ `close ]) ->
              fun ~listener:(x621 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x622) "prependOnceListener"
                     [|((match x620 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x621 ()))|])
        let (prepend_once_listener' :
          t ->
            event:[ `data ] ->
              listener:(chunk:Buffer.t or_string -> unit) -> t)
          =
          fun (x627 : t) ->
            fun ~event:(x623 : [ `data ]) ->
              fun ~listener:(x624 : chunk:Buffer.t or_string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x627) "prependOnceListener"
                     [|((match x623 with | `data -> Ojs.string_to_js "data"));(
                       Ojs.fun_to_js 1
                         (fun (x625 : Ojs.t) ->
                            x624 ~chunk:(or_string_of_js Buffer.t_of_js x625)))|])
        let (prepend_once_listener'' :
          t -> event:[ `end_ ] -> listener:(unit -> unit) -> t) =
          fun (x630 : t) ->
            fun ~event:(x628 : [ `end_ ]) ->
              fun ~listener:(x629 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x630) "prependOnceListener"
                     [|((match x628 with | `end_ -> Ojs.string_to_js "end"));(
                       Ojs.fun_to_js 1 (fun _ -> x629 ()))|])
        let (prepend_once_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x634 : t) ->
            fun ~event:(x631 : [ `error ]) ->
              fun ~listener:(x632 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x634) "prependOnceListener"
                     [|((match x631 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x633 : Ojs.t) ->
                            x632 ~err:(Error.t_of_js x633)))|])
        let (prepend_once_listener'''' :
          t -> event:[ `open_ ] -> listener:(fd:int -> unit) -> t) =
          fun (x638 : t) ->
            fun ~event:(x635 : [ `open_ ]) ->
              fun ~listener:(x636 : fd:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x638) "prependOnceListener"
                     [|((match x635 with | `open_ -> Ojs.string_to_js "open"));(
                       Ojs.fun_to_js 1
                         (fun (x637 : Ojs.t) -> x636 ~fd:(Ojs.int_of_js x637)))|])
        let (prepend_once_listener''''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x641 : t) ->
            fun ~event:(x639 : [ `pause ]) ->
              fun ~listener:(x640 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x641) "prependOnceListener"
                     [|((match x639 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x640 ()))|])
        let (prepend_once_listener'''''' :
          t -> event:[ `readable ] -> listener:(unit -> unit) -> t) =
          fun (x644 : t) ->
            fun ~event:(x642 : [ `readable ]) ->
              fun ~listener:(x643 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x644) "prependOnceListener"
                     [|((match x642 with
                         | `readable -> Ojs.string_to_js "readable"));(
                       Ojs.fun_to_js 1 (fun _ -> x643 ()))|])
        let (prepend_once_listener''''''' :
          t -> event:[ `ready ] -> listener:(unit -> unit) -> t) =
          fun (x647 : t) ->
            fun ~event:(x645 : [ `ready ]) ->
              fun ~listener:(x646 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x647) "prependOnceListener"
                     [|((match x645 with | `ready -> Ojs.string_to_js "ready"));(
                       Ojs.fun_to_js 1 (fun _ -> x646 ()))|])
        let (prepend_once_listener'''''''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x650 : t) ->
            fun ~event:(x648 : [ `resume ]) ->
              fun ~listener:(x649 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x650) "prependOnceListener"
                     [|((match x648 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x649 ()))|])
        let (prepend_once_listener''''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x656 : t) ->
            fun ~event:(x651 : symbol or_string) ->
              fun ~listener:(x653 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x656) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x651);(Ojs.fun_to_js_args
                                                              (fun (x654 : _)
                                                                 ->
                                                                 x653
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x654 0)))|])
      end
    module WriteStream =
      struct
        include struct include Stream.Writable end
        let (close : t -> unit) =
          fun (x657 : t) -> ignore (Ojs.call (t_to_js x657) "close" [||])
        let (get_bytes_written : t -> int) =
          fun (x658 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x658) "bytesWritten")
        let (set_bytes_written : t -> int -> unit) =
          fun (x659 : t) ->
            fun (x660 : int) ->
              Ojs.set_prop_ascii (t_to_js x659) "bytesWritten"
                (Ojs.int_to_js x660)
        let (get_path : t -> Buffer.t or_string) =
          fun (x661 : t) ->
            or_string_of_js Buffer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x661) "path")
        let (set_path : t -> Buffer.t or_string -> unit) =
          fun (x663 : t) ->
            fun (x664 : Buffer.t or_string) ->
              Ojs.set_prop_ascii (t_to_js x663) "path"
                (or_string_to_js Buffer.t_to_js x664)
        let (get_pending : t -> bool) =
          fun (x666 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x666) "pending")
        let (set_pending : t -> bool -> unit) =
          fun (x667 : t) ->
            fun (x668 : bool) ->
              Ojs.set_prop_ascii (t_to_js x667) "pending"
                (Ojs.bool_to_js x668)
        let (add_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x671 : t) ->
            fun ~event:(x669 : [ `close ]) ->
              fun ~listener:(x670 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x671) "addListener"
                     [|((match x669 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x670 ()))|])
        let (add_listener' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x674 : t) ->
            fun ~event:(x672 : [ `drain ]) ->
              fun ~listener:(x673 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x674) "addListener"
                     [|((match x672 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x673 ()))|])
        let (add_listener'' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x678 : t) ->
            fun ~event:(x675 : [ `error ]) ->
              fun ~listener:(x676 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x678) "addListener"
                     [|((match x675 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x677 : Ojs.t) ->
                            x676 ~err:(Error.t_of_js x677)))|])
        let (add_listener''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x681 : t) ->
            fun ~event:(x679 : [ `finish ]) ->
              fun ~listener:(x680 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x681) "addListener"
                     [|((match x679 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x680 ()))|])
        let (add_listener'''' :
          t -> event:[ `open_ ] -> listener:(fd:int -> unit) -> t) =
          fun (x685 : t) ->
            fun ~event:(x682 : [ `open_ ]) ->
              fun ~listener:(x683 : fd:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x685) "addListener"
                     [|((match x682 with | `open_ -> Ojs.string_to_js "open"));(
                       Ojs.fun_to_js 1
                         (fun (x684 : Ojs.t) -> x683 ~fd:(Ojs.int_of_js x684)))|])
        let (add_listener''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x689 : t) ->
            fun ~event:(x686 : [ `pipe ]) ->
              fun ~listener:(x687 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x689) "addListener"
                     [|((match x686 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x688 : Ojs.t) ->
                            x687 ~src:(Stream.Readable.t_of_js x688)))|])
        let (add_listener'''''' :
          t -> event:[ `ready ] -> listener:(unit -> unit) -> t) =
          fun (x692 : t) ->
            fun ~event:(x690 : [ `ready ]) ->
              fun ~listener:(x691 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x692) "addListener"
                     [|((match x690 with | `ready -> Ojs.string_to_js "ready"));(
                       Ojs.fun_to_js 1 (fun _ -> x691 ()))|])
        let (add_listener''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x696 : t) ->
            fun ~event:(x693 : [ `unpipe ]) ->
              fun ~listener:(x694 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x696) "addListener"
                     [|((match x693 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x695 :
                                                                    Ojs.t) ->
                                                                    x694
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x695)))|])
        let (add_listener'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x702 : t) ->
            fun ~event:(x697 : symbol or_string) ->
              fun ~listener:(x699 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x702) "addListener"
                     [|(or_string_to_js symbol_to_js x697);(Ojs.fun_to_js_args
                                                              (fun (x700 : _)
                                                                 ->
                                                                 x699
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x700 0)))|])
        let (on : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x705 : t) ->
            fun ~event:(x703 : [ `close ]) ->
              fun ~listener:(x704 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x705) "on"
                     [|((match x703 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x704 ()))|])
        let (on' : t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x708 : t) ->
            fun ~event:(x706 : [ `drain ]) ->
              fun ~listener:(x707 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x708) "on"
                     [|((match x706 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x707 ()))|])
        let (on'' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x712 : t) ->
            fun ~event:(x709 : [ `error ]) ->
              fun ~listener:(x710 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x712) "on"
                     [|((match x709 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x711 : Ojs.t) ->
                            x710 ~err:(Error.t_of_js x711)))|])
        let (on''' : t -> event:[ `finish ] -> listener:(unit -> unit) -> t)
          =
          fun (x715 : t) ->
            fun ~event:(x713 : [ `finish ]) ->
              fun ~listener:(x714 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x715) "on"
                     [|((match x713 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x714 ()))|])
        let (on'''' :
          t -> event:[ `open_ ] -> listener:(fd:int -> unit) -> t) =
          fun (x719 : t) ->
            fun ~event:(x716 : [ `open_ ]) ->
              fun ~listener:(x717 : fd:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x719) "on"
                     [|((match x716 with | `open_ -> Ojs.string_to_js "open"));(
                       Ojs.fun_to_js 1
                         (fun (x718 : Ojs.t) -> x717 ~fd:(Ojs.int_of_js x718)))|])
        let (on''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x723 : t) ->
            fun ~event:(x720 : [ `pipe ]) ->
              fun ~listener:(x721 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x723) "on"
                     [|((match x720 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x722 : Ojs.t) ->
                            x721 ~src:(Stream.Readable.t_of_js x722)))|])
        let (on'''''' :
          t -> event:[ `ready ] -> listener:(unit -> unit) -> t) =
          fun (x726 : t) ->
            fun ~event:(x724 : [ `ready ]) ->
              fun ~listener:(x725 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x726) "on"
                     [|((match x724 with | `ready -> Ojs.string_to_js "ready"));(
                       Ojs.fun_to_js 1 (fun _ -> x725 ()))|])
        let (on''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x730 : t) ->
            fun ~event:(x727 : [ `unpipe ]) ->
              fun ~listener:(x728 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x730) "on"
                     [|((match x727 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x729 :
                                                                    Ojs.t) ->
                                                                    x728
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x729)))|])
        let (on'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x736 : t) ->
            fun ~event:(x731 : symbol or_string) ->
              fun ~listener:(x733 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x736) "on"
                     [|(or_string_to_js symbol_to_js x731);(Ojs.fun_to_js_args
                                                              (fun (x734 : _)
                                                                 ->
                                                                 x733
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x734 0)))|])
        let (once : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x739 : t) ->
            fun ~event:(x737 : [ `close ]) ->
              fun ~listener:(x738 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x739) "once"
                     [|((match x737 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x738 ()))|])
        let (once' : t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x742 : t) ->
            fun ~event:(x740 : [ `drain ]) ->
              fun ~listener:(x741 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x742) "once"
                     [|((match x740 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x741 ()))|])
        let (once'' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x746 : t) ->
            fun ~event:(x743 : [ `error ]) ->
              fun ~listener:(x744 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x746) "once"
                     [|((match x743 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x745 : Ojs.t) ->
                            x744 ~err:(Error.t_of_js x745)))|])
        let (once''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x749 : t) ->
            fun ~event:(x747 : [ `finish ]) ->
              fun ~listener:(x748 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x749) "once"
                     [|((match x747 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x748 ()))|])
        let (once'''' :
          t -> event:[ `open_ ] -> listener:(fd:int -> unit) -> t) =
          fun (x753 : t) ->
            fun ~event:(x750 : [ `open_ ]) ->
              fun ~listener:(x751 : fd:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x753) "once"
                     [|((match x750 with | `open_ -> Ojs.string_to_js "open"));(
                       Ojs.fun_to_js 1
                         (fun (x752 : Ojs.t) -> x751 ~fd:(Ojs.int_of_js x752)))|])
        let (once''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x757 : t) ->
            fun ~event:(x754 : [ `pipe ]) ->
              fun ~listener:(x755 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x757) "once"
                     [|((match x754 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x756 : Ojs.t) ->
                            x755 ~src:(Stream.Readable.t_of_js x756)))|])
        let (once'''''' :
          t -> event:[ `ready ] -> listener:(unit -> unit) -> t) =
          fun (x760 : t) ->
            fun ~event:(x758 : [ `ready ]) ->
              fun ~listener:(x759 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x760) "once"
                     [|((match x758 with | `ready -> Ojs.string_to_js "ready"));(
                       Ojs.fun_to_js 1 (fun _ -> x759 ()))|])
        let (once''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x764 : t) ->
            fun ~event:(x761 : [ `unpipe ]) ->
              fun ~listener:(x762 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x764) "once"
                     [|((match x761 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x763 :
                                                                    Ojs.t) ->
                                                                    x762
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x763)))|])
        let (once'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x770 : t) ->
            fun ~event:(x765 : symbol or_string) ->
              fun ~listener:(x767 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x770) "once"
                     [|(or_string_to_js symbol_to_js x765);(Ojs.fun_to_js_args
                                                              (fun (x768 : _)
                                                                 ->
                                                                 x767
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x768 0)))|])
        let (prepend_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x773 : t) ->
            fun ~event:(x771 : [ `close ]) ->
              fun ~listener:(x772 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x773) "prependListener"
                     [|((match x771 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x772 ()))|])
        let (prepend_listener' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x776 : t) ->
            fun ~event:(x774 : [ `drain ]) ->
              fun ~listener:(x775 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x776) "prependListener"
                     [|((match x774 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x775 ()))|])
        let (prepend_listener'' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x780 : t) ->
            fun ~event:(x777 : [ `error ]) ->
              fun ~listener:(x778 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x780) "prependListener"
                     [|((match x777 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x779 : Ojs.t) ->
                            x778 ~err:(Error.t_of_js x779)))|])
        let (prepend_listener''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x783 : t) ->
            fun ~event:(x781 : [ `finish ]) ->
              fun ~listener:(x782 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x783) "prependListener"
                     [|((match x781 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x782 ()))|])
        let (prepend_listener'''' :
          t -> event:[ `open_ ] -> listener:(fd:int -> unit) -> t) =
          fun (x787 : t) ->
            fun ~event:(x784 : [ `open_ ]) ->
              fun ~listener:(x785 : fd:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x787) "prependListener"
                     [|((match x784 with | `open_ -> Ojs.string_to_js "open"));(
                       Ojs.fun_to_js 1
                         (fun (x786 : Ojs.t) -> x785 ~fd:(Ojs.int_of_js x786)))|])
        let (prepend_listener''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x791 : t) ->
            fun ~event:(x788 : [ `pipe ]) ->
              fun ~listener:(x789 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x791) "prependListener"
                     [|((match x788 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x790 : Ojs.t) ->
                            x789 ~src:(Stream.Readable.t_of_js x790)))|])
        let (prepend_listener'''''' :
          t -> event:[ `ready ] -> listener:(unit -> unit) -> t) =
          fun (x794 : t) ->
            fun ~event:(x792 : [ `ready ]) ->
              fun ~listener:(x793 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x794) "prependListener"
                     [|((match x792 with | `ready -> Ojs.string_to_js "ready"));(
                       Ojs.fun_to_js 1 (fun _ -> x793 ()))|])
        let (prepend_listener''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x798 : t) ->
            fun ~event:(x795 : [ `unpipe ]) ->
              fun ~listener:(x796 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x798) "prependListener"
                     [|((match x795 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x797 :
                                                                    Ojs.t) ->
                                                                    x796
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x797)))|])
        let (prepend_listener'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x804 : t) ->
            fun ~event:(x799 : symbol or_string) ->
              fun ~listener:(x801 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x804) "prependListener"
                     [|(or_string_to_js symbol_to_js x799);(Ojs.fun_to_js_args
                                                              (fun (x802 : _)
                                                                 ->
                                                                 x801
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x802 0)))|])
        let (prepend_once_listener :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x807 : t) ->
            fun ~event:(x805 : [ `close ]) ->
              fun ~listener:(x806 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x807) "prependOnceListener"
                     [|((match x805 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x806 ()))|])
        let (prepend_once_listener' :
          t -> event:[ `drain ] -> listener:(unit -> unit) -> t) =
          fun (x810 : t) ->
            fun ~event:(x808 : [ `drain ]) ->
              fun ~listener:(x809 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x810) "prependOnceListener"
                     [|((match x808 with | `drain -> Ojs.string_to_js "drain"));(
                       Ojs.fun_to_js 1 (fun _ -> x809 ()))|])
        let (prepend_once_listener'' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x814 : t) ->
            fun ~event:(x811 : [ `error ]) ->
              fun ~listener:(x812 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x814) "prependOnceListener"
                     [|((match x811 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x813 : Ojs.t) ->
                            x812 ~err:(Error.t_of_js x813)))|])
        let (prepend_once_listener''' :
          t -> event:[ `finish ] -> listener:(unit -> unit) -> t) =
          fun (x817 : t) ->
            fun ~event:(x815 : [ `finish ]) ->
              fun ~listener:(x816 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x817) "prependOnceListener"
                     [|((match x815 with
                         | `finish -> Ojs.string_to_js "finish"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x816 ()))|])
        let (prepend_once_listener'''' :
          t -> event:[ `open_ ] -> listener:(fd:int -> unit) -> t) =
          fun (x821 : t) ->
            fun ~event:(x818 : [ `open_ ]) ->
              fun ~listener:(x819 : fd:int -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x821) "prependOnceListener"
                     [|((match x818 with | `open_ -> Ojs.string_to_js "open"));(
                       Ojs.fun_to_js 1
                         (fun (x820 : Ojs.t) -> x819 ~fd:(Ojs.int_of_js x820)))|])
        let (prepend_once_listener''''' :
          t ->
            event:[ `pipe ] -> listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x825 : t) ->
            fun ~event:(x822 : [ `pipe ]) ->
              fun ~listener:(x823 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x825) "prependOnceListener"
                     [|((match x822 with | `pipe -> Ojs.string_to_js "pipe"));(
                       Ojs.fun_to_js 1
                         (fun (x824 : Ojs.t) ->
                            x823 ~src:(Stream.Readable.t_of_js x824)))|])
        let (prepend_once_listener'''''' :
          t -> event:[ `ready ] -> listener:(unit -> unit) -> t) =
          fun (x828 : t) ->
            fun ~event:(x826 : [ `ready ]) ->
              fun ~listener:(x827 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x828) "prependOnceListener"
                     [|((match x826 with | `ready -> Ojs.string_to_js "ready"));(
                       Ojs.fun_to_js 1 (fun _ -> x827 ()))|])
        let (prepend_once_listener''''''' :
          t ->
            event:[ `unpipe ] ->
              listener:(src:Stream.Readable.t -> unit) -> t)
          =
          fun (x832 : t) ->
            fun ~event:(x829 : [ `unpipe ]) ->
              fun ~listener:(x830 : src:Stream.Readable.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x832) "prependOnceListener"
                     [|((match x829 with
                         | `unpipe -> Ojs.string_to_js "unpipe"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun
                                                                    (x831 :
                                                                    Ojs.t) ->
                                                                    x830
                                                                    ~src:(
                                                                    Stream.Readable.t_of_js
                                                                    x831)))|])
        let (prepend_once_listener'''''''' :
          t ->
            event:symbol or_string -> listener:(args:any list -> unit) -> t)
          =
          fun (x838 : t) ->
            fun ~event:(x833 : symbol or_string) ->
              fun ~listener:(x835 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x838) "prependOnceListener"
                     [|(or_string_to_js symbol_to_js x833);(Ojs.fun_to_js_args
                                                              (fun (x836 : _)
                                                                 ->
                                                                 x835
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x836 0)))|])
      end
    let (rename :
      PathLike.t -> PathLike.t -> callback:NoParamCallback.t -> unit) =
      fun (x839 : PathLike.t) ->
        fun (x840 : PathLike.t) ->
          fun ~callback:(x841 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "rename"
                 [|(PathLike.t_to_js x839);(PathLike.t_to_js x840);(NoParamCallback.t_to_js
                                                                    x841)|])
    module Rename =
      struct
        let (__promisify__ : PathLike.t -> PathLike.t -> unit Promise.t) =
          fun (x842 : PathLike.t) ->
            fun (x843 : PathLike.t) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "rename")
                   "__promisify__"
                   [|(PathLike.t_to_js x842);(PathLike.t_to_js x843)|])
      end
    let (rename_sync : PathLike.t -> PathLike.t -> unit) =
      fun (x845 : PathLike.t) ->
        fun (x846 : PathLike.t) ->
          ignore
            (Ojs.call Import.fs "renameSync"
               [|(PathLike.t_to_js x845);(PathLike.t_to_js x846)|])
    let (truncate :
      PathLike.t ->
        len:int or_null_or_undefined -> callback:NoParamCallback.t -> unit)
      =
      fun (x847 : PathLike.t) ->
        fun ~len:(x848 : int or_null_or_undefined) ->
          fun ~callback:(x850 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "truncate"
                 [|(PathLike.t_to_js x847);(or_null_or_undefined_to_js
                                              Ojs.int_to_js x848);(NoParamCallback.t_to_js
                                                                    x850)|])
    let (truncate : PathLike.t -> callback:NoParamCallback.t -> unit) =
      fun (x851 : PathLike.t) ->
        fun ~callback:(x852 : NoParamCallback.t) ->
          ignore
            (Ojs.call Import.fs "truncate"
               [|(PathLike.t_to_js x851);(NoParamCallback.t_to_js x852)|])
    module Truncate =
      struct
        let (__promisify__ :
          PathLike.t -> ?len:int or_null -> unit -> unit Promise.t) =
          fun (x853 : PathLike.t) ->
            fun ?len:(x854 : int or_null option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x858 = Ojs.get_prop_ascii Import.fs "truncate" in
                   Ojs.call (Ojs.get_prop_ascii x858 "__promisify__") "apply"
                     [|x858;((let x855 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x855 "push"
                                   [|(PathLike.t_to_js x853)|]);
                              (match x854 with
                               | Some x856 ->
                                   ignore
                                     (Ojs.call x855 "push"
                                        [|(or_null_to_js Ojs.int_to_js x856)|])
                               | None -> ());
                              x855))|])
      end
    let (truncate_sync : PathLike.t -> ?len:int or_null -> unit -> unit) =
      fun (x860 : PathLike.t) ->
        fun ?len:(x861 : int or_null option) ->
          fun () ->
            ignore
              (let x865 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x865 "truncateSync") "apply"
                 [|x865;((let x862 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x862 "push" [|(PathLike.t_to_js x860)|]);
                          (match x861 with
                           | Some x863 ->
                               ignore
                                 (Ojs.call x862 "push"
                                    [|(or_null_to_js Ojs.int_to_js x863)|])
                           | None -> ());
                          x862))|])
    let (ftruncate :
      int ->
        len:int or_null_or_undefined -> callback:NoParamCallback.t -> unit)
      =
      fun (x866 : int) ->
        fun ~len:(x867 : int or_null_or_undefined) ->
          fun ~callback:(x869 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "ftruncate"
                 [|(Ojs.int_to_js x866);(or_null_or_undefined_to_js
                                           Ojs.int_to_js x867);(NoParamCallback.t_to_js
                                                                  x869)|])
    let (ftruncate : int -> callback:NoParamCallback.t -> unit) =
      fun (x870 : int) ->
        fun ~callback:(x871 : NoParamCallback.t) ->
          ignore
            (Ojs.call Import.fs "ftruncate"
               [|(Ojs.int_to_js x870);(NoParamCallback.t_to_js x871)|])
    module Ftruncate =
      struct
        let (__promisify__ :
          int -> ?len:int or_null -> unit -> unit Promise.t) =
          fun (x872 : int) ->
            fun ?len:(x873 : int or_null option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x877 = Ojs.get_prop_ascii Import.fs "ftruncate" in
                   Ojs.call (Ojs.get_prop_ascii x877 "__promisify__") "apply"
                     [|x877;((let x874 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x874 "push"
                                   [|(Ojs.int_to_js x872)|]);
                              (match x873 with
                               | Some x875 ->
                                   ignore
                                     (Ojs.call x874 "push"
                                        [|(or_null_to_js Ojs.int_to_js x875)|])
                               | None -> ());
                              x874))|])
      end
    let (ftruncate_sync : int -> ?len:int or_null -> unit -> unit) =
      fun (x879 : int) ->
        fun ?len:(x880 : int or_null option) ->
          fun () ->
            ignore
              (let x884 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x884 "ftruncateSync") "apply"
                 [|x884;((let x881 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x881 "push" [|(Ojs.int_to_js x879)|]);
                          (match x880 with
                           | Some x882 ->
                               ignore
                                 (Ojs.call x881 "push"
                                    [|(or_null_to_js Ojs.int_to_js x882)|])
                           | None -> ());
                          x881))|])
    let (chown :
      PathLike.t -> uid:int -> gid:int -> callback:NoParamCallback.t -> unit)
      =
      fun (x885 : PathLike.t) ->
        fun ~uid:(x886 : int) ->
          fun ~gid:(x887 : int) ->
            fun ~callback:(x888 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "chown"
                   [|(PathLike.t_to_js x885);(Ojs.int_to_js x886);(Ojs.int_to_js
                                                                    x887);(
                     NoParamCallback.t_to_js x888)|])
    module Chown =
      struct
        let (__promisify__ :
          PathLike.t -> uid:int -> gid:int -> unit Promise.t) =
          fun (x889 : PathLike.t) ->
            fun ~uid:(x890 : int) ->
              fun ~gid:(x891 : int) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (Ojs.get_prop_ascii Import.fs "chown")
                     "__promisify__"
                     [|(PathLike.t_to_js x889);(Ojs.int_to_js x890);(
                       Ojs.int_to_js x891)|])
      end
    let (chown_sync : PathLike.t -> uid:int -> gid:int -> unit) =
      fun (x893 : PathLike.t) ->
        fun ~uid:(x894 : int) ->
          fun ~gid:(x895 : int) ->
            ignore
              (Ojs.call Import.fs "chownSync"
                 [|(PathLike.t_to_js x893);(Ojs.int_to_js x894);(Ojs.int_to_js
                                                                   x895)|])
    let (fchown :
      int -> uid:int -> gid:int -> callback:NoParamCallback.t -> unit) =
      fun (x896 : int) ->
        fun ~uid:(x897 : int) ->
          fun ~gid:(x898 : int) ->
            fun ~callback:(x899 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "fchown"
                   [|(Ojs.int_to_js x896);(Ojs.int_to_js x897);(Ojs.int_to_js
                                                                  x898);(
                     NoParamCallback.t_to_js x899)|])
    module Fchown =
      struct
        let (__promisify__ : int -> uid:int -> gid:int -> unit Promise.t) =
          fun (x900 : int) ->
            fun ~uid:(x901 : int) ->
              fun ~gid:(x902 : int) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (Ojs.get_prop_ascii Import.fs "fchown")
                     "__promisify__"
                     [|(Ojs.int_to_js x900);(Ojs.int_to_js x901);(Ojs.int_to_js
                                                                    x902)|])
      end
    let (fchown_sync : int -> uid:int -> gid:int -> unit) =
      fun (x904 : int) ->
        fun ~uid:(x905 : int) ->
          fun ~gid:(x906 : int) ->
            ignore
              (Ojs.call Import.fs "fchownSync"
                 [|(Ojs.int_to_js x904);(Ojs.int_to_js x905);(Ojs.int_to_js
                                                                x906)|])
    let (lchown :
      PathLike.t -> uid:int -> gid:int -> callback:NoParamCallback.t -> unit)
      =
      fun (x907 : PathLike.t) ->
        fun ~uid:(x908 : int) ->
          fun ~gid:(x909 : int) ->
            fun ~callback:(x910 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "lchown"
                   [|(PathLike.t_to_js x907);(Ojs.int_to_js x908);(Ojs.int_to_js
                                                                    x909);(
                     NoParamCallback.t_to_js x910)|])
    module Lchown =
      struct
        let (__promisify__ :
          PathLike.t -> uid:int -> gid:int -> unit Promise.t) =
          fun (x911 : PathLike.t) ->
            fun ~uid:(x912 : int) ->
              fun ~gid:(x913 : int) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (Ojs.get_prop_ascii Import.fs "lchown")
                     "__promisify__"
                     [|(PathLike.t_to_js x911);(Ojs.int_to_js x912);(
                       Ojs.int_to_js x913)|])
      end
    let (lchown_sync : PathLike.t -> uid:int -> gid:int -> unit) =
      fun (x915 : PathLike.t) ->
        fun ~uid:(x916 : int) ->
          fun ~gid:(x917 : int) ->
            ignore
              (Ojs.call Import.fs "lchownSync"
                 [|(PathLike.t_to_js x915);(Ojs.int_to_js x916);(Ojs.int_to_js
                                                                   x917)|])
    let (lutimes :
      PathLike.t ->
        atime:Date.t or_string or_number ->
          mtime:Date.t or_string or_number ->
            callback:NoParamCallback.t -> unit)
      =
      fun (x918 : PathLike.t) ->
        fun ~atime:(x919 : Date.t or_string or_number) ->
          fun ~mtime:(x922 : Date.t or_string or_number) ->
            fun ~callback:(x925 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "lutimes"
                   [|(PathLike.t_to_js x918);(or_number_to_js
                                                (fun
                                                   (x920 : Date.t or_string)
                                                   ->
                                                   or_string_to_js
                                                     Date.t_to_js x920) x919);(
                     or_number_to_js
                       (fun (x923 : Date.t or_string) ->
                          or_string_to_js Date.t_to_js x923) x922);(NoParamCallback.t_to_js
                                                                    x925)|])
    module Lutimes =
      struct
        let (__promisify__ :
          PathLike.t ->
            atime:Date.t or_string or_number ->
              mtime:Date.t or_string or_number -> unit Promise.t)
          =
          fun (x926 : PathLike.t) ->
            fun ~atime:(x927 : Date.t or_string or_number) ->
              fun ~mtime:(x930 : Date.t or_string or_number) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (Ojs.get_prop_ascii Import.fs "lutimes")
                     "__promisify__"
                     [|(PathLike.t_to_js x926);(or_number_to_js
                                                  (fun
                                                     (x928 :
                                                       Date.t or_string)
                                                     ->
                                                     or_string_to_js
                                                       Date.t_to_js x928)
                                                  x927);(or_number_to_js
                                                           (fun
                                                              (x931 :
                                                                Date.t
                                                                  or_string)
                                                              ->
                                                              or_string_to_js
                                                                Date.t_to_js
                                                                x931) x930)|])
      end
    let (lutimes_sync :
      PathLike.t ->
        atime:Date.t or_string or_number ->
          mtime:Date.t or_string or_number -> unit)
      =
      fun (x934 : PathLike.t) ->
        fun ~atime:(x935 : Date.t or_string or_number) ->
          fun ~mtime:(x938 : Date.t or_string or_number) ->
            ignore
              (Ojs.call Import.fs "lutimesSync"
                 [|(PathLike.t_to_js x934);(or_number_to_js
                                              (fun (x936 : Date.t or_string)
                                                 ->
                                                 or_string_to_js Date.t_to_js
                                                   x936) x935);(or_number_to_js
                                                                  (fun
                                                                    (x939 :
                                                                    Date.t
                                                                    or_string)
                                                                    ->
                                                                    or_string_to_js
                                                                    Date.t_to_js
                                                                    x939)
                                                                  x938)|])
    let (chmod :
      PathLike.t -> mode:Mode.t -> callback:NoParamCallback.t -> unit) =
      fun (x941 : PathLike.t) ->
        fun ~mode:(x942 : Mode.t) ->
          fun ~callback:(x943 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "chmod"
                 [|(PathLike.t_to_js x941);(Mode.t_to_js x942);(NoParamCallback.t_to_js
                                                                  x943)|])
    module Chmod =
      struct
        let (__promisify__ : PathLike.t -> mode:Mode.t -> unit Promise.t) =
          fun (x944 : PathLike.t) ->
            fun ~mode:(x945 : Mode.t) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "chmod")
                   "__promisify__"
                   [|(PathLike.t_to_js x944);(Mode.t_to_js x945)|])
      end
    let (chmod_sync : PathLike.t -> mode:Mode.t -> unit) =
      fun (x947 : PathLike.t) ->
        fun ~mode:(x948 : Mode.t) ->
          ignore
            (Ojs.call Import.fs "chmodSync"
               [|(PathLike.t_to_js x947);(Mode.t_to_js x948)|])
    let (fchmod : int -> mode:Mode.t -> callback:NoParamCallback.t -> unit) =
      fun (x949 : int) ->
        fun ~mode:(x950 : Mode.t) ->
          fun ~callback:(x951 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "fchmod"
                 [|(Ojs.int_to_js x949);(Mode.t_to_js x950);(NoParamCallback.t_to_js
                                                               x951)|])
    module Fchmod =
      struct
        let (__promisify__ : int -> mode:Mode.t -> unit Promise.t) =
          fun (x952 : int) ->
            fun ~mode:(x953 : Mode.t) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "fchmod")
                   "__promisify__"
                   [|(Ojs.int_to_js x952);(Mode.t_to_js x953)|])
      end
    let (fchmod_sync : int -> mode:Mode.t -> unit) =
      fun (x955 : int) ->
        fun ~mode:(x956 : Mode.t) ->
          ignore
            (Ojs.call Import.fs "fchmodSync"
               [|(Ojs.int_to_js x955);(Mode.t_to_js x956)|])
    let (lchmod :
      PathLike.t -> mode:Mode.t -> callback:NoParamCallback.t -> unit) =
      fun (x957 : PathLike.t) ->
        fun ~mode:(x958 : Mode.t) ->
          fun ~callback:(x959 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "lchmod"
                 [|(PathLike.t_to_js x957);(Mode.t_to_js x958);(NoParamCallback.t_to_js
                                                                  x959)|])
    module Lchmod =
      struct
        let (__promisify__ : PathLike.t -> mode:Mode.t -> unit Promise.t) =
          fun (x960 : PathLike.t) ->
            fun ~mode:(x961 : Mode.t) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "lchmod")
                   "__promisify__"
                   [|(PathLike.t_to_js x960);(Mode.t_to_js x961)|])
      end
    let (lchmod_sync : PathLike.t -> mode:Mode.t -> unit) =
      fun (x963 : PathLike.t) ->
        fun ~mode:(x964 : Mode.t) ->
          ignore
            (Ojs.call Import.fs "lchmodSync"
               [|(PathLike.t_to_js x963);(Mode.t_to_js x964)|])
    let (stat :
      PathLike.t ->
        callback:(err:ErrnoException.t or_null -> stats:Stats.t -> unit) ->
          unit)
      =
      fun (x965 : PathLike.t) ->
        fun
          ~callback:(x966 :
                      err:ErrnoException.t or_null -> stats:Stats.t -> unit)
          ->
          ignore
            (Ojs.call Import.fs "stat"
               [|(PathLike.t_to_js x965);(Ojs.fun_to_js 2
                                            (fun (x967 : Ojs.t) ->
                                               fun (x969 : Ojs.t) ->
                                                 x966
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x967)
                                                   ~stats:(Stats.t_of_js x969)))|])
    module StatOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x971 : Ojs.t) -> x971
        and t_to_js : t -> Ojs.t = fun (x970 : Ojs.t) -> x970
        let (get_bigint : t -> bool) =
          fun (x972 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x972) "bigint")
        let (set_bigint : t -> bool -> unit) =
          fun (x973 : t) ->
            fun (x974 : bool) ->
              Ojs.set_prop_ascii (t_to_js x973) "bigint"
                (Ojs.bool_to_js x974)
      end
    let (stat :
      PathLike.t ->
        options:(StatOptions.t, AnonymousInterface0.t) intersection2
          or_undefined ->
          callback:(err:ErrnoException.t or_null -> stats:Stats.t -> unit) ->
            unit)
      =
      fun (x975 : PathLike.t) ->
        fun
          ~options:(x976 :
                     (StatOptions.t, AnonymousInterface0.t) intersection2
                       or_undefined)
          ->
          fun
            ~callback:(x980 :
                        err:ErrnoException.t or_null -> stats:Stats.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "stat"
                 [|(PathLike.t_to_js x975);(or_undefined_to_js
                                              (fun
                                                 (x977 :
                                                   (StatOptions.t,
                                                     AnonymousInterface0.t)
                                                     intersection2)
                                                 ->
                                                 intersection2_to_js
                                                   StatOptions.t_to_js
                                                   AnonymousInterface0.t_to_js
                                                   x977) x976);(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x981 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x983 :
                                                                    Ojs.t) ->
                                                                    x980
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x981)
                                                                    ~stats:(
                                                                    Stats.t_of_js
                                                                    x983)))|])
    module BigIntStats =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x985 : Ojs.t) -> x985
        and t_to_js : t -> Ojs.t = fun (x984 : Ojs.t) -> x984
        let (get_atime_ns : t -> bigint) =
          fun (x986 : t) ->
            bigint_of_js (Ojs.get_prop_ascii (t_to_js x986) "atimeNs")
        let (set_atime_ns : t -> bigint -> unit) =
          fun (x987 : t) ->
            fun (x988 : bigint) ->
              Ojs.set_prop_ascii (t_to_js x987) "atimeNs" (bigint_to_js x988)
        let (get_mtime_ns : t -> bigint) =
          fun (x989 : t) ->
            bigint_of_js (Ojs.get_prop_ascii (t_to_js x989) "mtimeNs")
        let (set_mtime_ns : t -> bigint -> unit) =
          fun (x990 : t) ->
            fun (x991 : bigint) ->
              Ojs.set_prop_ascii (t_to_js x990) "mtimeNs" (bigint_to_js x991)
        let (get_ctime_ns : t -> bigint) =
          fun (x992 : t) ->
            bigint_of_js (Ojs.get_prop_ascii (t_to_js x992) "ctimeNs")
        let (set_ctime_ns : t -> bigint -> unit) =
          fun (x993 : t) ->
            fun (x994 : bigint) ->
              Ojs.set_prop_ascii (t_to_js x993) "ctimeNs" (bigint_to_js x994)
        let (get_birthtime_ns : t -> bigint) =
          fun (x995 : t) ->
            bigint_of_js (Ojs.get_prop_ascii (t_to_js x995) "birthtimeNs")
        let (set_birthtime_ns : t -> bigint -> unit) =
          fun (x996 : t) ->
            fun (x997 : bigint) ->
              Ojs.set_prop_ascii (t_to_js x996) "birthtimeNs"
                (bigint_to_js x997)
        let (cast : t -> bigint StatsBase.t) =
          fun (x998 : t) -> StatsBase.t_of_js bigint_of_js (t_to_js x998)
      end
    let (stat :
      PathLike.t ->
        options:(StatOptions.t, AnonymousInterface1.t) intersection2 ->
          callback:(err:ErrnoException.t or_null ->
                      stats:BigIntStats.t -> unit)
            -> unit)
      =
      fun (x1000 : PathLike.t) ->
        fun
          ~options:(x1001 :
                     (StatOptions.t, AnonymousInterface1.t) intersection2)
          ->
          fun
            ~callback:(x1004 :
                        err:ErrnoException.t or_null ->
                          stats:BigIntStats.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "stat"
                 [|(PathLike.t_to_js x1000);(intersection2_to_js
                                               StatOptions.t_to_js
                                               AnonymousInterface1.t_to_js
                                               x1001);(Ojs.fun_to_js 2
                                                         (fun (x1005 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x1007 : Ojs.t)
                                                              ->
                                                              x1004
                                                                ~err:(
                                                                or_null_of_js
                                                                  ErrnoException.t_of_js
                                                                  x1005)
                                                                ~stats:(
                                                                BigIntStats.t_of_js
                                                                  x1007)))|])
    let (stat :
      PathLike.t ->
        options:StatOptions.t or_undefined ->
          callback:(err:ErrnoException.t or_null ->
                      stats:(BigIntStats.t, Stats.t) union2 -> unit)
            -> unit)
      =
      fun (x1008 : PathLike.t) ->
        fun ~options:(x1009 : StatOptions.t or_undefined) ->
          fun
            ~callback:(x1011 :
                        err:ErrnoException.t or_null ->
                          stats:(BigIntStats.t, Stats.t) union2 -> unit)
            ->
            ignore
              (Ojs.call Import.fs "stat"
                 [|(PathLike.t_to_js x1008);(or_undefined_to_js
                                               StatOptions.t_to_js x1009);(
                   Ojs.fun_to_js 2
                     (fun (x1012 : Ojs.t) ->
                        fun (x1014 : Ojs.t) ->
                          x1011
                            ~err:(or_null_of_js ErrnoException.t_of_js x1012)
                            ~stats:(union2_of_js BigIntStats.t_of_js
                                      Stats.t_of_js x1014)))|])
    module Stat =
      struct
        let (__promisify__ :
          PathLike.t ->
            ?options:(StatOptions.t, AnonymousInterface0.t) intersection2 ->
              unit -> Stats.t Promise.t)
          =
          fun (x1017 : PathLike.t) ->
            fun
              ?options:(x1018 :
                         (StatOptions.t, AnonymousInterface0.t) intersection2
                           option)
              ->
              fun () ->
                Promise.t_of_js Stats.t_of_js
                  (let x1023 = Ojs.get_prop_ascii Import.fs "stat" in
                   Ojs.call (Ojs.get_prop_ascii x1023 "__promisify__")
                     "apply"
                     [|x1023;((let x1019 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1019 "push"
                                    [|(PathLike.t_to_js x1017)|]);
                               (match x1018 with
                                | Some x1020 ->
                                    ignore
                                      (Ojs.call x1019 "push"
                                         [|(intersection2_to_js
                                              StatOptions.t_to_js
                                              AnonymousInterface0.t_to_js
                                              x1020)|])
                                | None -> ());
                               x1019))|])
        let (__promisify__ :
          PathLike.t ->
            options:(StatOptions.t, AnonymousInterface1.t) intersection2 ->
              BigIntStats.t Promise.t)
          =
          fun (x1025 : PathLike.t) ->
            fun
              ~options:(x1026 :
                         (StatOptions.t, AnonymousInterface1.t) intersection2)
              ->
              Promise.t_of_js BigIntStats.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "stat")
                   "__promisify__"
                   [|(PathLike.t_to_js x1025);(intersection2_to_js
                                                 StatOptions.t_to_js
                                                 AnonymousInterface1.t_to_js
                                                 x1026)|])
        let (__promisify__ :
          PathLike.t ->
            ?options:StatOptions.t ->
              unit -> (BigIntStats.t, Stats.t) union2 Promise.t)
          =
          fun (x1030 : PathLike.t) ->
            fun ?options:(x1031 : StatOptions.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x1035 : Ojs.t) ->
                     union2_of_js BigIntStats.t_of_js Stats.t_of_js x1035)
                  (let x1034 = Ojs.get_prop_ascii Import.fs "stat" in
                   Ojs.call (Ojs.get_prop_ascii x1034 "__promisify__")
                     "apply"
                     [|x1034;((let x1032 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1032 "push"
                                    [|(PathLike.t_to_js x1030)|]);
                               (match x1031 with
                                | Some x1033 ->
                                    ignore
                                      (Ojs.call x1032 "push"
                                         [|(StatOptions.t_to_js x1033)|])
                                | None -> ());
                               x1032))|])
      end
    let (stat_sync :
      PathLike.t ->
        ?options:(StatOptions.t, AnonymousInterface0.t) intersection2 ->
          unit -> Stats.t)
      =
      fun (x1038 : PathLike.t) ->
        fun
          ?options:(x1039 :
                     (StatOptions.t, AnonymousInterface0.t) intersection2
                       option)
          ->
          fun () ->
            Stats.t_of_js
              (let x1044 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1044 "statSync") "apply"
                 [|x1044;((let x1040 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1040 "push"
                                [|(PathLike.t_to_js x1038)|]);
                           (match x1039 with
                            | Some x1041 ->
                                ignore
                                  (Ojs.call x1040 "push"
                                     [|(intersection2_to_js
                                          StatOptions.t_to_js
                                          AnonymousInterface0.t_to_js x1041)|])
                            | None -> ());
                           x1040))|])
    let (stat_sync :
      PathLike.t ->
        options:(StatOptions.t, AnonymousInterface1.t) intersection2 ->
          BigIntStats.t)
      =
      fun (x1045 : PathLike.t) ->
        fun
          ~options:(x1046 :
                     (StatOptions.t, AnonymousInterface1.t) intersection2)
          ->
          BigIntStats.t_of_js
            (Ojs.call Import.fs "statSync"
               [|(PathLike.t_to_js x1045);(intersection2_to_js
                                             StatOptions.t_to_js
                                             AnonymousInterface1.t_to_js
                                             x1046)|])
    let (stat_sync :
      PathLike.t ->
        ?options:StatOptions.t -> unit -> (BigIntStats.t, Stats.t) union2)
      =
      fun (x1049 : PathLike.t) ->
        fun ?options:(x1050 : StatOptions.t option) ->
          fun () ->
            union2_of_js BigIntStats.t_of_js Stats.t_of_js
              (let x1053 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1053 "statSync") "apply"
                 [|x1053;((let x1051 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1051 "push"
                                [|(PathLike.t_to_js x1049)|]);
                           (match x1050 with
                            | Some x1052 ->
                                ignore
                                  (Ojs.call x1051 "push"
                                     [|(StatOptions.t_to_js x1052)|])
                            | None -> ());
                           x1051))|])
    let (fstat :
      int ->
        callback:(err:ErrnoException.t or_null -> stats:Stats.t -> unit) ->
          unit)
      =
      fun (x1056 : int) ->
        fun
          ~callback:(x1057 :
                      err:ErrnoException.t or_null -> stats:Stats.t -> unit)
          ->
          ignore
            (Ojs.call Import.fs "fstat"
               [|(Ojs.int_to_js x1056);(Ojs.fun_to_js 2
                                          (fun (x1058 : Ojs.t) ->
                                             fun (x1060 : Ojs.t) ->
                                               x1057
                                                 ~err:(or_null_of_js
                                                         ErrnoException.t_of_js
                                                         x1058)
                                                 ~stats:(Stats.t_of_js x1060)))|])
    let (fstat :
      int ->
        options:(StatOptions.t, AnonymousInterface0.t) intersection2
          or_undefined ->
          callback:(err:ErrnoException.t or_null -> stats:Stats.t -> unit) ->
            unit)
      =
      fun (x1061 : int) ->
        fun
          ~options:(x1062 :
                     (StatOptions.t, AnonymousInterface0.t) intersection2
                       or_undefined)
          ->
          fun
            ~callback:(x1066 :
                        err:ErrnoException.t or_null -> stats:Stats.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "fstat"
                 [|(Ojs.int_to_js x1061);(or_undefined_to_js
                                            (fun
                                               (x1063 :
                                                 (StatOptions.t,
                                                   AnonymousInterface0.t)
                                                   intersection2)
                                               ->
                                               intersection2_to_js
                                                 StatOptions.t_to_js
                                                 AnonymousInterface0.t_to_js
                                                 x1063) x1062);(Ojs.fun_to_js
                                                                  2
                                                                  (fun
                                                                    (x1067 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1069 :
                                                                    Ojs.t) ->
                                                                    x1066
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1067)
                                                                    ~stats:(
                                                                    Stats.t_of_js
                                                                    x1069)))|])
    let (fstat :
      int ->
        options:(StatOptions.t, AnonymousInterface1.t) intersection2 ->
          callback:(err:ErrnoException.t or_null ->
                      stats:BigIntStats.t -> unit)
            -> unit)
      =
      fun (x1070 : int) ->
        fun
          ~options:(x1071 :
                     (StatOptions.t, AnonymousInterface1.t) intersection2)
          ->
          fun
            ~callback:(x1074 :
                        err:ErrnoException.t or_null ->
                          stats:BigIntStats.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "fstat"
                 [|(Ojs.int_to_js x1070);(intersection2_to_js
                                            StatOptions.t_to_js
                                            AnonymousInterface1.t_to_js x1071);(
                   Ojs.fun_to_js 2
                     (fun (x1075 : Ojs.t) ->
                        fun (x1077 : Ojs.t) ->
                          x1074
                            ~err:(or_null_of_js ErrnoException.t_of_js x1075)
                            ~stats:(BigIntStats.t_of_js x1077)))|])
    let (fstat :
      int ->
        options:StatOptions.t or_undefined ->
          callback:(err:ErrnoException.t or_null ->
                      stats:(BigIntStats.t, Stats.t) union2 -> unit)
            -> unit)
      =
      fun (x1078 : int) ->
        fun ~options:(x1079 : StatOptions.t or_undefined) ->
          fun
            ~callback:(x1081 :
                        err:ErrnoException.t or_null ->
                          stats:(BigIntStats.t, Stats.t) union2 -> unit)
            ->
            ignore
              (Ojs.call Import.fs "fstat"
                 [|(Ojs.int_to_js x1078);(or_undefined_to_js
                                            StatOptions.t_to_js x1079);(
                   Ojs.fun_to_js 2
                     (fun (x1082 : Ojs.t) ->
                        fun (x1084 : Ojs.t) ->
                          x1081
                            ~err:(or_null_of_js ErrnoException.t_of_js x1082)
                            ~stats:(union2_of_js BigIntStats.t_of_js
                                      Stats.t_of_js x1084)))|])
    module Fstat =
      struct
        let (__promisify__ :
          int ->
            ?options:(StatOptions.t, AnonymousInterface0.t) intersection2 ->
              unit -> Stats.t Promise.t)
          =
          fun (x1087 : int) ->
            fun
              ?options:(x1088 :
                         (StatOptions.t, AnonymousInterface0.t) intersection2
                           option)
              ->
              fun () ->
                Promise.t_of_js Stats.t_of_js
                  (let x1093 = Ojs.get_prop_ascii Import.fs "fstat" in
                   Ojs.call (Ojs.get_prop_ascii x1093 "__promisify__")
                     "apply"
                     [|x1093;((let x1089 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1089 "push"
                                    [|(Ojs.int_to_js x1087)|]);
                               (match x1088 with
                                | Some x1090 ->
                                    ignore
                                      (Ojs.call x1089 "push"
                                         [|(intersection2_to_js
                                              StatOptions.t_to_js
                                              AnonymousInterface0.t_to_js
                                              x1090)|])
                                | None -> ());
                               x1089))|])
        let (__promisify__ :
          int ->
            options:(StatOptions.t, AnonymousInterface1.t) intersection2 ->
              BigIntStats.t Promise.t)
          =
          fun (x1095 : int) ->
            fun
              ~options:(x1096 :
                         (StatOptions.t, AnonymousInterface1.t) intersection2)
              ->
              Promise.t_of_js BigIntStats.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "fstat")
                   "__promisify__"
                   [|(Ojs.int_to_js x1095);(intersection2_to_js
                                              StatOptions.t_to_js
                                              AnonymousInterface1.t_to_js
                                              x1096)|])
        let (__promisify__ :
          int ->
            ?options:StatOptions.t ->
              unit -> (BigIntStats.t, Stats.t) union2 Promise.t)
          =
          fun (x1100 : int) ->
            fun ?options:(x1101 : StatOptions.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x1105 : Ojs.t) ->
                     union2_of_js BigIntStats.t_of_js Stats.t_of_js x1105)
                  (let x1104 = Ojs.get_prop_ascii Import.fs "fstat" in
                   Ojs.call (Ojs.get_prop_ascii x1104 "__promisify__")
                     "apply"
                     [|x1104;((let x1102 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1102 "push"
                                    [|(Ojs.int_to_js x1100)|]);
                               (match x1101 with
                                | Some x1103 ->
                                    ignore
                                      (Ojs.call x1102 "push"
                                         [|(StatOptions.t_to_js x1103)|])
                                | None -> ());
                               x1102))|])
      end
    let (fstat_sync :
      int ->
        ?options:(StatOptions.t, AnonymousInterface0.t) intersection2 ->
          unit -> Stats.t)
      =
      fun (x1108 : int) ->
        fun
          ?options:(x1109 :
                     (StatOptions.t, AnonymousInterface0.t) intersection2
                       option)
          ->
          fun () ->
            Stats.t_of_js
              (let x1114 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1114 "fstatSync") "apply"
                 [|x1114;((let x1110 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1110 "push" [|(Ojs.int_to_js x1108)|]);
                           (match x1109 with
                            | Some x1111 ->
                                ignore
                                  (Ojs.call x1110 "push"
                                     [|(intersection2_to_js
                                          StatOptions.t_to_js
                                          AnonymousInterface0.t_to_js x1111)|])
                            | None -> ());
                           x1110))|])
    let (fstat_sync :
      int ->
        options:(StatOptions.t, AnonymousInterface1.t) intersection2 ->
          BigIntStats.t)
      =
      fun (x1115 : int) ->
        fun
          ~options:(x1116 :
                     (StatOptions.t, AnonymousInterface1.t) intersection2)
          ->
          BigIntStats.t_of_js
            (Ojs.call Import.fs "fstatSync"
               [|(Ojs.int_to_js x1115);(intersection2_to_js
                                          StatOptions.t_to_js
                                          AnonymousInterface1.t_to_js x1116)|])
    let (fstat_sync :
      int ->
        ?options:StatOptions.t -> unit -> (BigIntStats.t, Stats.t) union2)
      =
      fun (x1119 : int) ->
        fun ?options:(x1120 : StatOptions.t option) ->
          fun () ->
            union2_of_js BigIntStats.t_of_js Stats.t_of_js
              (let x1123 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1123 "fstatSync") "apply"
                 [|x1123;((let x1121 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1121 "push" [|(Ojs.int_to_js x1119)|]);
                           (match x1120 with
                            | Some x1122 ->
                                ignore
                                  (Ojs.call x1121 "push"
                                     [|(StatOptions.t_to_js x1122)|])
                            | None -> ());
                           x1121))|])
    let (lstat :
      PathLike.t ->
        callback:(err:ErrnoException.t or_null -> stats:Stats.t -> unit) ->
          unit)
      =
      fun (x1126 : PathLike.t) ->
        fun
          ~callback:(x1127 :
                      err:ErrnoException.t or_null -> stats:Stats.t -> unit)
          ->
          ignore
            (Ojs.call Import.fs "lstat"
               [|(PathLike.t_to_js x1126);(Ojs.fun_to_js 2
                                             (fun (x1128 : Ojs.t) ->
                                                fun (x1130 : Ojs.t) ->
                                                  x1127
                                                    ~err:(or_null_of_js
                                                            ErrnoException.t_of_js
                                                            x1128)
                                                    ~stats:(Stats.t_of_js
                                                              x1130)))|])
    let (lstat :
      PathLike.t ->
        options:(StatOptions.t, AnonymousInterface0.t) intersection2
          or_undefined ->
          callback:(err:ErrnoException.t or_null -> stats:Stats.t -> unit) ->
            unit)
      =
      fun (x1131 : PathLike.t) ->
        fun
          ~options:(x1132 :
                     (StatOptions.t, AnonymousInterface0.t) intersection2
                       or_undefined)
          ->
          fun
            ~callback:(x1136 :
                        err:ErrnoException.t or_null -> stats:Stats.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "lstat"
                 [|(PathLike.t_to_js x1131);(or_undefined_to_js
                                               (fun
                                                  (x1133 :
                                                    (StatOptions.t,
                                                      AnonymousInterface0.t)
                                                      intersection2)
                                                  ->
                                                  intersection2_to_js
                                                    StatOptions.t_to_js
                                                    AnonymousInterface0.t_to_js
                                                    x1133) x1132);(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1137 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1139 :
                                                                    Ojs.t) ->
                                                                    x1136
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1137)
                                                                    ~stats:(
                                                                    Stats.t_of_js
                                                                    x1139)))|])
    let (lstat :
      PathLike.t ->
        options:(StatOptions.t, AnonymousInterface1.t) intersection2 ->
          callback:(err:ErrnoException.t or_null ->
                      stats:BigIntStats.t -> unit)
            -> unit)
      =
      fun (x1140 : PathLike.t) ->
        fun
          ~options:(x1141 :
                     (StatOptions.t, AnonymousInterface1.t) intersection2)
          ->
          fun
            ~callback:(x1144 :
                        err:ErrnoException.t or_null ->
                          stats:BigIntStats.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "lstat"
                 [|(PathLike.t_to_js x1140);(intersection2_to_js
                                               StatOptions.t_to_js
                                               AnonymousInterface1.t_to_js
                                               x1141);(Ojs.fun_to_js 2
                                                         (fun (x1145 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x1147 : Ojs.t)
                                                              ->
                                                              x1144
                                                                ~err:(
                                                                or_null_of_js
                                                                  ErrnoException.t_of_js
                                                                  x1145)
                                                                ~stats:(
                                                                BigIntStats.t_of_js
                                                                  x1147)))|])
    let (lstat :
      PathLike.t ->
        options:StatOptions.t or_undefined ->
          callback:(err:ErrnoException.t or_null ->
                      stats:(BigIntStats.t, Stats.t) union2 -> unit)
            -> unit)
      =
      fun (x1148 : PathLike.t) ->
        fun ~options:(x1149 : StatOptions.t or_undefined) ->
          fun
            ~callback:(x1151 :
                        err:ErrnoException.t or_null ->
                          stats:(BigIntStats.t, Stats.t) union2 -> unit)
            ->
            ignore
              (Ojs.call Import.fs "lstat"
                 [|(PathLike.t_to_js x1148);(or_undefined_to_js
                                               StatOptions.t_to_js x1149);(
                   Ojs.fun_to_js 2
                     (fun (x1152 : Ojs.t) ->
                        fun (x1154 : Ojs.t) ->
                          x1151
                            ~err:(or_null_of_js ErrnoException.t_of_js x1152)
                            ~stats:(union2_of_js BigIntStats.t_of_js
                                      Stats.t_of_js x1154)))|])
    module Lstat =
      struct
        let (__promisify__ :
          PathLike.t ->
            ?options:(StatOptions.t, AnonymousInterface0.t) intersection2 ->
              unit -> Stats.t Promise.t)
          =
          fun (x1157 : PathLike.t) ->
            fun
              ?options:(x1158 :
                         (StatOptions.t, AnonymousInterface0.t) intersection2
                           option)
              ->
              fun () ->
                Promise.t_of_js Stats.t_of_js
                  (let x1163 = Ojs.get_prop_ascii Import.fs "lstat" in
                   Ojs.call (Ojs.get_prop_ascii x1163 "__promisify__")
                     "apply"
                     [|x1163;((let x1159 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1159 "push"
                                    [|(PathLike.t_to_js x1157)|]);
                               (match x1158 with
                                | Some x1160 ->
                                    ignore
                                      (Ojs.call x1159 "push"
                                         [|(intersection2_to_js
                                              StatOptions.t_to_js
                                              AnonymousInterface0.t_to_js
                                              x1160)|])
                                | None -> ());
                               x1159))|])
        let (__promisify__ :
          PathLike.t ->
            options:(StatOptions.t, AnonymousInterface1.t) intersection2 ->
              BigIntStats.t Promise.t)
          =
          fun (x1165 : PathLike.t) ->
            fun
              ~options:(x1166 :
                         (StatOptions.t, AnonymousInterface1.t) intersection2)
              ->
              Promise.t_of_js BigIntStats.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "lstat")
                   "__promisify__"
                   [|(PathLike.t_to_js x1165);(intersection2_to_js
                                                 StatOptions.t_to_js
                                                 AnonymousInterface1.t_to_js
                                                 x1166)|])
        let (__promisify__ :
          PathLike.t ->
            ?options:StatOptions.t ->
              unit -> (BigIntStats.t, Stats.t) union2 Promise.t)
          =
          fun (x1170 : PathLike.t) ->
            fun ?options:(x1171 : StatOptions.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x1175 : Ojs.t) ->
                     union2_of_js BigIntStats.t_of_js Stats.t_of_js x1175)
                  (let x1174 = Ojs.get_prop_ascii Import.fs "lstat" in
                   Ojs.call (Ojs.get_prop_ascii x1174 "__promisify__")
                     "apply"
                     [|x1174;((let x1172 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1172 "push"
                                    [|(PathLike.t_to_js x1170)|]);
                               (match x1171 with
                                | Some x1173 ->
                                    ignore
                                      (Ojs.call x1172 "push"
                                         [|(StatOptions.t_to_js x1173)|])
                                | None -> ());
                               x1172))|])
      end
    let (lstat_sync :
      PathLike.t ->
        ?options:(StatOptions.t, AnonymousInterface0.t) intersection2 ->
          unit -> Stats.t)
      =
      fun (x1178 : PathLike.t) ->
        fun
          ?options:(x1179 :
                     (StatOptions.t, AnonymousInterface0.t) intersection2
                       option)
          ->
          fun () ->
            Stats.t_of_js
              (let x1184 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1184 "lstatSync") "apply"
                 [|x1184;((let x1180 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1180 "push"
                                [|(PathLike.t_to_js x1178)|]);
                           (match x1179 with
                            | Some x1181 ->
                                ignore
                                  (Ojs.call x1180 "push"
                                     [|(intersection2_to_js
                                          StatOptions.t_to_js
                                          AnonymousInterface0.t_to_js x1181)|])
                            | None -> ());
                           x1180))|])
    let (lstat_sync :
      PathLike.t ->
        options:(StatOptions.t, AnonymousInterface1.t) intersection2 ->
          BigIntStats.t)
      =
      fun (x1185 : PathLike.t) ->
        fun
          ~options:(x1186 :
                     (StatOptions.t, AnonymousInterface1.t) intersection2)
          ->
          BigIntStats.t_of_js
            (Ojs.call Import.fs "lstatSync"
               [|(PathLike.t_to_js x1185);(intersection2_to_js
                                             StatOptions.t_to_js
                                             AnonymousInterface1.t_to_js
                                             x1186)|])
    let (lstat_sync :
      PathLike.t ->
        ?options:StatOptions.t -> unit -> (BigIntStats.t, Stats.t) union2)
      =
      fun (x1189 : PathLike.t) ->
        fun ?options:(x1190 : StatOptions.t option) ->
          fun () ->
            union2_of_js BigIntStats.t_of_js Stats.t_of_js
              (let x1193 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1193 "lstatSync") "apply"
                 [|x1193;((let x1191 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1191 "push"
                                [|(PathLike.t_to_js x1189)|]);
                           (match x1190 with
                            | Some x1192 ->
                                ignore
                                  (Ojs.call x1191 "push"
                                     [|(StatOptions.t_to_js x1192)|])
                            | None -> ());
                           x1191))|])
    let (link :
      PathLike.t -> PathLike.t -> callback:NoParamCallback.t -> unit) =
      fun (x1196 : PathLike.t) ->
        fun (x1197 : PathLike.t) ->
          fun ~callback:(x1198 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "link"
                 [|(PathLike.t_to_js x1196);(PathLike.t_to_js x1197);(
                   NoParamCallback.t_to_js x1198)|])
    module Link =
      struct
        let (__promisify__ : PathLike.t -> PathLike.t -> unit Promise.t) =
          fun (x1199 : PathLike.t) ->
            fun (x1200 : PathLike.t) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "link")
                   "__promisify__"
                   [|(PathLike.t_to_js x1199);(PathLike.t_to_js x1200)|])
      end
    let (link_sync : PathLike.t -> PathLike.t -> unit) =
      fun (x1202 : PathLike.t) ->
        fun (x1203 : PathLike.t) ->
          ignore
            (Ojs.call Import.fs "linkSync"
               [|(PathLike.t_to_js x1202);(PathLike.t_to_js x1203)|])
    let (symlink :
      target:string ->
        PathLike.t ->
          type_:[ `dir  | `file  | `junction ] or_null_or_undefined ->
            callback:NoParamCallback.t -> unit)
      =
      fun ~target:(x1204 : string) ->
        fun (x1205 : PathLike.t) ->
          fun
            ~type_:(x1206 :
                     [ `dir  | `file  | `junction ] or_null_or_undefined)
            ->
            fun ~callback:(x1208 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "symlink"
                   [|(Ojs.string_to_js x1204);(PathLike.t_to_js x1205);(
                     or_null_or_undefined_to_js
                       (fun (x1207 : [ `dir  | `file  | `junction ]) ->
                          match x1207 with
                          | `dir -> Ojs.string_to_js "dir"
                          | `file -> Ojs.string_to_js "file"
                          | `junction -> Ojs.string_to_js "junction") x1206);(
                     NoParamCallback.t_to_js x1208)|])
    let (symlink :
      target:string -> PathLike.t -> callback:NoParamCallback.t -> unit) =
      fun ~target:(x1209 : string) ->
        fun (x1210 : PathLike.t) ->
          fun ~callback:(x1211 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "symlink"
                 [|(Ojs.string_to_js x1209);(PathLike.t_to_js x1210);(
                   NoParamCallback.t_to_js x1211)|])
    module Symlink =
      struct
        let (__promisify__ :
          target:string ->
            PathLike.t -> ?type_:string or_null -> unit -> unit Promise.t)
          =
          fun ~target:(x1212 : string) ->
            fun (x1213 : PathLike.t) ->
              fun ?type_:(x1214 : string or_null option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x1218 = Ojs.get_prop_ascii Import.fs "symlink" in
                     Ojs.call (Ojs.get_prop_ascii x1218 "__promisify__")
                       "apply"
                       [|x1218;((let x1215 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1215 "push"
                                      [|(Ojs.string_to_js x1212)|]);
                                 ignore
                                   (Ojs.call x1215 "push"
                                      [|(PathLike.t_to_js x1213)|]);
                                 (match x1214 with
                                  | Some x1216 ->
                                      ignore
                                        (Ojs.call x1215 "push"
                                           [|(or_null_to_js Ojs.string_to_js
                                                x1216)|])
                                  | None -> ());
                                 x1215))|])
        module Type =
          struct
            type t = [ `dir  | `file  | `junction ]
            let rec t_of_js : Ojs.t -> t =
              fun (x1221 : Ojs.t) ->
                let x1222 = x1221 in
                match Ojs.string_of_js x1222 with
                | "dir" -> `dir
                | "file" -> `file
                | "junction" -> `junction
                | _ -> assert false
            and t_to_js : t -> Ojs.t =
              fun (x1220 : [ `dir  | `file  | `junction ]) ->
                match x1220 with
                | `dir -> Ojs.string_to_js "dir"
                | `file -> Ojs.string_to_js "file"
                | `junction -> Ojs.string_to_js "junction"
          end
      end
    let (symlink_sync :
      target:string ->
        PathLike.t ->
          ?type_:[ `dir  | `file  | `junction ] or_null -> unit -> unit)
      =
      fun ~target:(x1223 : string) ->
        fun (x1224 : PathLike.t) ->
          fun ?type_:(x1225 : [ `dir  | `file  | `junction ] or_null option)
            ->
            fun () ->
              ignore
                (let x1229 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x1229 "symlinkSync") "apply"
                   [|x1229;((let x1226 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1226 "push"
                                  [|(Ojs.string_to_js x1223)|]);
                             ignore
                               (Ojs.call x1226 "push"
                                  [|(PathLike.t_to_js x1224)|]);
                             (match x1225 with
                              | Some x1227 ->
                                  ignore
                                    (Ojs.call x1226 "push"
                                       [|(or_null_to_js
                                            (fun
                                               (x1228 :
                                                 [ `dir  | `file 
                                                 | `junction ])
                                               ->
                                               match x1228 with
                                               | `dir ->
                                                   Ojs.string_to_js "dir"
                                               | `file ->
                                                   Ojs.string_to_js "file"
                                               | `junction ->
                                                   Ojs.string_to_js
                                                     "junction") x1227)|])
                              | None -> ());
                             x1226))|])
    let (readlink :
      PathLike.t ->
        options:(BaseEncodingOptions.t, BufferEncoding.t) union2
          or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null ->
                      link_string:string -> unit)
            -> unit)
      =
      fun (x1230 : PathLike.t) ->
        fun
          ~options:(x1231 :
                     (BaseEncodingOptions.t, BufferEncoding.t) union2
                       or_null_or_undefined)
          ->
          fun
            ~callback:(x1235 :
                        err:ErrnoException.t or_null ->
                          link_string:string -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readlink"
                 [|(PathLike.t_to_js x1230);(or_null_or_undefined_to_js
                                               (fun
                                                  (x1232 :
                                                    (BaseEncodingOptions.t,
                                                      BufferEncoding.t)
                                                      union2)
                                                  ->
                                                  union2_to_js
                                                    BaseEncodingOptions.t_to_js
                                                    BufferEncoding.t_to_js
                                                    x1232) x1231);(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1236 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1238 :
                                                                    Ojs.t) ->
                                                                    x1235
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1236)
                                                                    ~link_string:(
                                                                    Ojs.string_of_js
                                                                    x1238)))|])
    let (readlink :
      PathLike.t ->
        options:BufferEncodingOption.t ->
          callback:(err:ErrnoException.t or_null ->
                      link_string:Buffer.t -> unit)
            -> unit)
      =
      fun (x1239 : PathLike.t) ->
        fun ~options:(x1240 : BufferEncodingOption.t) ->
          fun
            ~callback:(x1241 :
                        err:ErrnoException.t or_null ->
                          link_string:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readlink"
                 [|(PathLike.t_to_js x1239);(BufferEncodingOption.t_to_js
                                               x1240);(Ojs.fun_to_js 2
                                                         (fun (x1242 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x1244 : Ojs.t)
                                                              ->
                                                              x1241
                                                                ~err:(
                                                                or_null_of_js
                                                                  ErrnoException.t_of_js
                                                                  x1242)
                                                                ~link_string:(
                                                                Buffer.t_of_js
                                                                  x1244)))|])
    let (readlink :
      PathLike.t ->
        options:BaseEncodingOptions.t or_string or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null ->
                      link_string:Buffer.t or_string -> unit)
            -> unit)
      =
      fun (x1245 : PathLike.t) ->
        fun
          ~options:(x1246 :
                     BaseEncodingOptions.t or_string or_null_or_undefined)
          ->
          fun
            ~callback:(x1249 :
                        err:ErrnoException.t or_null ->
                          link_string:Buffer.t or_string -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readlink"
                 [|(PathLike.t_to_js x1245);(or_null_or_undefined_to_js
                                               (fun
                                                  (x1247 :
                                                    BaseEncodingOptions.t
                                                      or_string)
                                                  ->
                                                  or_string_to_js
                                                    BaseEncodingOptions.t_to_js
                                                    x1247) x1246);(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1250 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1252 :
                                                                    Ojs.t) ->
                                                                    x1249
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1250)
                                                                    ~link_string:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1252)))|])
    let (readlink :
      PathLike.t ->
        callback:(err:ErrnoException.t or_null -> link_string:string -> unit)
          -> unit)
      =
      fun (x1254 : PathLike.t) ->
        fun
          ~callback:(x1255 :
                      err:ErrnoException.t or_null ->
                        link_string:string -> unit)
          ->
          ignore
            (Ojs.call Import.fs "readlink"
               [|(PathLike.t_to_js x1254);(Ojs.fun_to_js 2
                                             (fun (x1256 : Ojs.t) ->
                                                fun (x1258 : Ojs.t) ->
                                                  x1255
                                                    ~err:(or_null_of_js
                                                            ErrnoException.t_of_js
                                                            x1256)
                                                    ~link_string:(Ojs.string_of_js
                                                                    x1258)))|])
    module Readlink =
      struct
        let (__promisify__ :
          PathLike.t ->
            ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
              -> unit -> string Promise.t)
          =
          fun (x1259 : PathLike.t) ->
            fun
              ?options:(x1260 :
                         (BaseEncodingOptions.t, BufferEncoding.t) union2
                           or_null option)
              ->
              fun () ->
                Promise.t_of_js Ojs.string_of_js
                  (let x1266 = Ojs.get_prop_ascii Import.fs "readlink" in
                   Ojs.call (Ojs.get_prop_ascii x1266 "__promisify__")
                     "apply"
                     [|x1266;((let x1261 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1261 "push"
                                    [|(PathLike.t_to_js x1259)|]);
                               (match x1260 with
                                | Some x1262 ->
                                    ignore
                                      (Ojs.call x1261 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1263 :
                                                   (BaseEncodingOptions.t,
                                                     BufferEncoding.t) union2)
                                                 ->
                                                 union2_to_js
                                                   BaseEncodingOptions.t_to_js
                                                   BufferEncoding.t_to_js
                                                   x1263) x1262)|])
                                | None -> ());
                               x1261))|])
        let (__promisify__ :
          PathLike.t -> options:BufferEncodingOption.t -> Buffer.t Promise.t)
          =
          fun (x1268 : PathLike.t) ->
            fun ~options:(x1269 : BufferEncodingOption.t) ->
              Promise.t_of_js Buffer.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "readlink")
                   "__promisify__"
                   [|(PathLike.t_to_js x1268);(BufferEncodingOption.t_to_js
                                                 x1269)|])
        let (__promisify__ :
          PathLike.t ->
            ?options:BaseEncodingOptions.t or_string or_null ->
              unit -> Buffer.t or_string Promise.t)
          =
          fun (x1271 : PathLike.t) ->
            fun
              ?options:(x1272 :
                         BaseEncodingOptions.t or_string or_null option)
              ->
              fun () ->
                Promise.t_of_js
                  (fun (x1278 : Ojs.t) ->
                     or_string_of_js Buffer.t_of_js x1278)
                  (let x1277 = Ojs.get_prop_ascii Import.fs "readlink" in
                   Ojs.call (Ojs.get_prop_ascii x1277 "__promisify__")
                     "apply"
                     [|x1277;((let x1273 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1273 "push"
                                    [|(PathLike.t_to_js x1271)|]);
                               (match x1272 with
                                | Some x1274 ->
                                    ignore
                                      (Ojs.call x1273 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1275 :
                                                   BaseEncodingOptions.t
                                                     or_string)
                                                 ->
                                                 or_string_to_js
                                                   BaseEncodingOptions.t_to_js
                                                   x1275) x1274)|])
                                | None -> ());
                               x1273))|])
      end
    let (readlink_sync :
      PathLike.t ->
        ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null ->
          unit -> string)
      =
      fun (x1280 : PathLike.t) ->
        fun
          ?options:(x1281 :
                     (BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
                       option)
          ->
          fun () ->
            Ojs.string_of_js
              (let x1287 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1287 "readlinkSync") "apply"
                 [|x1287;((let x1282 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1282 "push"
                                [|(PathLike.t_to_js x1280)|]);
                           (match x1281 with
                            | Some x1283 ->
                                ignore
                                  (Ojs.call x1282 "push"
                                     [|(or_null_to_js
                                          (fun
                                             (x1284 :
                                               (BaseEncodingOptions.t,
                                                 BufferEncoding.t) union2)
                                             ->
                                             union2_to_js
                                               BaseEncodingOptions.t_to_js
                                               BufferEncoding.t_to_js x1284)
                                          x1283)|])
                            | None -> ());
                           x1282))|])
    let (readlink_sync :
      PathLike.t -> options:BufferEncodingOption.t -> Buffer.t) =
      fun (x1288 : PathLike.t) ->
        fun ~options:(x1289 : BufferEncodingOption.t) ->
          Buffer.t_of_js
            (Ojs.call Import.fs "readlinkSync"
               [|(PathLike.t_to_js x1288);(BufferEncodingOption.t_to_js x1289)|])
    let (readlink_sync :
      PathLike.t ->
        ?options:BaseEncodingOptions.t or_string or_null ->
          unit -> Buffer.t or_string)
      =
      fun (x1290 : PathLike.t) ->
        fun ?options:(x1291 : BaseEncodingOptions.t or_string or_null option)
          ->
          fun () ->
            or_string_of_js Buffer.t_of_js
              (let x1296 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1296 "readlinkSync") "apply"
                 [|x1296;((let x1292 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1292 "push"
                                [|(PathLike.t_to_js x1290)|]);
                           (match x1291 with
                            | Some x1293 ->
                                ignore
                                  (Ojs.call x1292 "push"
                                     [|(or_null_to_js
                                          (fun
                                             (x1294 :
                                               BaseEncodingOptions.t
                                                 or_string)
                                             ->
                                             or_string_to_js
                                               BaseEncodingOptions.t_to_js
                                               x1294) x1293)|])
                            | None -> ());
                           x1292))|])
    let (realpath :
      PathLike.t ->
        options:(BaseEncodingOptions.t, BufferEncoding.t) union2
          or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null -> PathLike.t -> unit) ->
            unit)
      =
      fun (x1298 : PathLike.t) ->
        fun
          ~options:(x1299 :
                     (BaseEncodingOptions.t, BufferEncoding.t) union2
                       or_null_or_undefined)
          ->
          fun
            ~callback:(x1303 :
                        err:ErrnoException.t or_null -> PathLike.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "realpath"
                 [|(PathLike.t_to_js x1298);(or_null_or_undefined_to_js
                                               (fun
                                                  (x1300 :
                                                    (BaseEncodingOptions.t,
                                                      BufferEncoding.t)
                                                      union2)
                                                  ->
                                                  union2_to_js
                                                    BaseEncodingOptions.t_to_js
                                                    BufferEncoding.t_to_js
                                                    x1300) x1299);(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1304 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1306 :
                                                                    Ojs.t) ->
                                                                    x1303
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1304)
                                                                    (PathLike.t_of_js
                                                                    x1306)))|])
    let (realpath :
      PathLike.t ->
        options:BufferEncodingOption.t ->
          callback:(err:ErrnoException.t or_null -> Buffer.t -> unit) -> unit)
      =
      fun (x1307 : PathLike.t) ->
        fun ~options:(x1308 : BufferEncodingOption.t) ->
          fun
            ~callback:(x1309 :
                        err:ErrnoException.t or_null -> Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "realpath"
                 [|(PathLike.t_to_js x1307);(BufferEncodingOption.t_to_js
                                               x1308);(Ojs.fun_to_js 2
                                                         (fun (x1310 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x1312 : Ojs.t)
                                                              ->
                                                              x1309
                                                                ~err:(
                                                                or_null_of_js
                                                                  ErrnoException.t_of_js
                                                                  x1310)
                                                                (Buffer.t_of_js
                                                                   x1312)))|])
    let (realpath :
      PathLike.t ->
        options:BaseEncodingOptions.t or_string or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null ->
                      Buffer.t or_string -> unit)
            -> unit)
      =
      fun (x1313 : PathLike.t) ->
        fun
          ~options:(x1314 :
                     BaseEncodingOptions.t or_string or_null_or_undefined)
          ->
          fun
            ~callback:(x1317 :
                        err:ErrnoException.t or_null ->
                          Buffer.t or_string -> unit)
            ->
            ignore
              (Ojs.call Import.fs "realpath"
                 [|(PathLike.t_to_js x1313);(or_null_or_undefined_to_js
                                               (fun
                                                  (x1315 :
                                                    BaseEncodingOptions.t
                                                      or_string)
                                                  ->
                                                  or_string_to_js
                                                    BaseEncodingOptions.t_to_js
                                                    x1315) x1314);(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1318 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1320 :
                                                                    Ojs.t) ->
                                                                    x1317
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1318)
                                                                    (or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1320)))|])
    let (realpath :
      PathLike.t ->
        callback:(err:ErrnoException.t or_null -> PathLike.t -> unit) -> unit)
      =
      fun (x1322 : PathLike.t) ->
        fun
          ~callback:(x1323 :
                      err:ErrnoException.t or_null -> PathLike.t -> unit)
          ->
          ignore
            (Ojs.call Import.fs "realpath"
               [|(PathLike.t_to_js x1322);(Ojs.fun_to_js 2
                                             (fun (x1324 : Ojs.t) ->
                                                fun (x1326 : Ojs.t) ->
                                                  x1323
                                                    ~err:(or_null_of_js
                                                            ErrnoException.t_of_js
                                                            x1324)
                                                    (PathLike.t_of_js x1326)))|])
    module Realpath =
      struct
        let (__promisify__ :
          PathLike.t ->
            ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
              -> unit -> string Promise.t)
          =
          fun (x1327 : PathLike.t) ->
            fun
              ?options:(x1328 :
                         (BaseEncodingOptions.t, BufferEncoding.t) union2
                           or_null option)
              ->
              fun () ->
                Promise.t_of_js Ojs.string_of_js
                  (let x1334 = Ojs.get_prop_ascii Import.fs "realpath" in
                   Ojs.call (Ojs.get_prop_ascii x1334 "__promisify__")
                     "apply"
                     [|x1334;((let x1329 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1329 "push"
                                    [|(PathLike.t_to_js x1327)|]);
                               (match x1328 with
                                | Some x1330 ->
                                    ignore
                                      (Ojs.call x1329 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1331 :
                                                   (BaseEncodingOptions.t,
                                                     BufferEncoding.t) union2)
                                                 ->
                                                 union2_to_js
                                                   BaseEncodingOptions.t_to_js
                                                   BufferEncoding.t_to_js
                                                   x1331) x1330)|])
                                | None -> ());
                               x1329))|])
        let (__promisify__ :
          PathLike.t -> options:BufferEncodingOption.t -> Buffer.t Promise.t)
          =
          fun (x1336 : PathLike.t) ->
            fun ~options:(x1337 : BufferEncodingOption.t) ->
              Promise.t_of_js Buffer.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "realpath")
                   "__promisify__"
                   [|(PathLike.t_to_js x1336);(BufferEncodingOption.t_to_js
                                                 x1337)|])
        let (__promisify__ :
          PathLike.t ->
            ?options:BaseEncodingOptions.t or_string or_null ->
              unit -> Buffer.t or_string Promise.t)
          =
          fun (x1339 : PathLike.t) ->
            fun
              ?options:(x1340 :
                         BaseEncodingOptions.t or_string or_null option)
              ->
              fun () ->
                Promise.t_of_js
                  (fun (x1346 : Ojs.t) ->
                     or_string_of_js Buffer.t_of_js x1346)
                  (let x1345 = Ojs.get_prop_ascii Import.fs "realpath" in
                   Ojs.call (Ojs.get_prop_ascii x1345 "__promisify__")
                     "apply"
                     [|x1345;((let x1341 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1341 "push"
                                    [|(PathLike.t_to_js x1339)|]);
                               (match x1340 with
                                | Some x1342 ->
                                    ignore
                                      (Ojs.call x1341 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1343 :
                                                   BaseEncodingOptions.t
                                                     or_string)
                                                 ->
                                                 or_string_to_js
                                                   BaseEncodingOptions.t_to_js
                                                   x1343) x1342)|])
                                | None -> ());
                               x1341))|])
        let (native :
          PathLike.t ->
            options:(BaseEncodingOptions.t, BufferEncoding.t) union2
              or_null_or_undefined ->
              callback:(err:ErrnoException.t or_null -> PathLike.t -> unit)
                -> unit)
          =
          fun (x1348 : PathLike.t) ->
            fun
              ~options:(x1349 :
                         (BaseEncodingOptions.t, BufferEncoding.t) union2
                           or_null_or_undefined)
              ->
              fun
                ~callback:(x1353 :
                            err:ErrnoException.t or_null ->
                              PathLike.t -> unit)
                ->
                ignore
                  (Ojs.call (Ojs.get_prop_ascii Import.fs "realpath")
                     "native"
                     [|(PathLike.t_to_js x1348);(or_null_or_undefined_to_js
                                                   (fun
                                                      (x1350 :
                                                        (BaseEncodingOptions.t,
                                                          BufferEncoding.t)
                                                          union2)
                                                      ->
                                                      union2_to_js
                                                        BaseEncodingOptions.t_to_js
                                                        BufferEncoding.t_to_js
                                                        x1350) x1349);(
                       Ojs.fun_to_js 2
                         (fun (x1354 : Ojs.t) ->
                            fun (x1356 : Ojs.t) ->
                              x1353
                                ~err:(or_null_of_js ErrnoException.t_of_js
                                        x1354) (PathLike.t_of_js x1356)))|])
        let (native :
          PathLike.t ->
            options:BufferEncodingOption.t ->
              callback:(err:ErrnoException.t or_null -> Buffer.t -> unit) ->
                unit)
          =
          fun (x1357 : PathLike.t) ->
            fun ~options:(x1358 : BufferEncodingOption.t) ->
              fun
                ~callback:(x1359 :
                            err:ErrnoException.t or_null -> Buffer.t -> unit)
                ->
                ignore
                  (Ojs.call (Ojs.get_prop_ascii Import.fs "realpath")
                     "native"
                     [|(PathLike.t_to_js x1357);(BufferEncodingOption.t_to_js
                                                   x1358);(Ojs.fun_to_js 2
                                                             (fun
                                                                (x1360 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x1362 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x1359
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1360)
                                                                    (
                                                                    Buffer.t_of_js
                                                                    x1362)))|])
        let (native :
          PathLike.t ->
            options:BaseEncodingOptions.t or_string or_null_or_undefined ->
              callback:(err:ErrnoException.t or_null ->
                          Buffer.t or_string -> unit)
                -> unit)
          =
          fun (x1363 : PathLike.t) ->
            fun
              ~options:(x1364 :
                         BaseEncodingOptions.t or_string or_null_or_undefined)
              ->
              fun
                ~callback:(x1367 :
                            err:ErrnoException.t or_null ->
                              Buffer.t or_string -> unit)
                ->
                ignore
                  (Ojs.call (Ojs.get_prop_ascii Import.fs "realpath")
                     "native"
                     [|(PathLike.t_to_js x1363);(or_null_or_undefined_to_js
                                                   (fun
                                                      (x1365 :
                                                        BaseEncodingOptions.t
                                                          or_string)
                                                      ->
                                                      or_string_to_js
                                                        BaseEncodingOptions.t_to_js
                                                        x1365) x1364);(
                       Ojs.fun_to_js 2
                         (fun (x1368 : Ojs.t) ->
                            fun (x1370 : Ojs.t) ->
                              x1367
                                ~err:(or_null_of_js ErrnoException.t_of_js
                                        x1368)
                                (or_string_of_js Buffer.t_of_js x1370)))|])
        let (native :
          PathLike.t ->
            callback:(err:ErrnoException.t or_null -> PathLike.t -> unit) ->
              unit)
          =
          fun (x1372 : PathLike.t) ->
            fun
              ~callback:(x1373 :
                          err:ErrnoException.t or_null -> PathLike.t -> unit)
              ->
              ignore
                (Ojs.call (Ojs.get_prop_ascii Import.fs "realpath") "native"
                   [|(PathLike.t_to_js x1372);(Ojs.fun_to_js 2
                                                 (fun (x1374 : Ojs.t) ->
                                                    fun (x1376 : Ojs.t) ->
                                                      x1373
                                                        ~err:(or_null_of_js
                                                                ErrnoException.t_of_js
                                                                x1374)
                                                        (PathLike.t_of_js
                                                           x1376)))|])
      end
    let (realpath_sync :
      PathLike.t ->
        ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null ->
          unit -> string)
      =
      fun (x1377 : PathLike.t) ->
        fun
          ?options:(x1378 :
                     (BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
                       option)
          ->
          fun () ->
            Ojs.string_of_js
              (let x1384 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1384 "realpathSync") "apply"
                 [|x1384;((let x1379 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1379 "push"
                                [|(PathLike.t_to_js x1377)|]);
                           (match x1378 with
                            | Some x1380 ->
                                ignore
                                  (Ojs.call x1379 "push"
                                     [|(or_null_to_js
                                          (fun
                                             (x1381 :
                                               (BaseEncodingOptions.t,
                                                 BufferEncoding.t) union2)
                                             ->
                                             union2_to_js
                                               BaseEncodingOptions.t_to_js
                                               BufferEncoding.t_to_js x1381)
                                          x1380)|])
                            | None -> ());
                           x1379))|])
    let (realpath_sync :
      PathLike.t -> options:BufferEncodingOption.t -> Buffer.t) =
      fun (x1385 : PathLike.t) ->
        fun ~options:(x1386 : BufferEncodingOption.t) ->
          Buffer.t_of_js
            (Ojs.call Import.fs "realpathSync"
               [|(PathLike.t_to_js x1385);(BufferEncodingOption.t_to_js x1386)|])
    let (realpath_sync :
      PathLike.t ->
        ?options:BaseEncodingOptions.t or_string or_null ->
          unit -> Buffer.t or_string)
      =
      fun (x1387 : PathLike.t) ->
        fun ?options:(x1388 : BaseEncodingOptions.t or_string or_null option)
          ->
          fun () ->
            or_string_of_js Buffer.t_of_js
              (let x1393 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1393 "realpathSync") "apply"
                 [|x1393;((let x1389 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1389 "push"
                                [|(PathLike.t_to_js x1387)|]);
                           (match x1388 with
                            | Some x1390 ->
                                ignore
                                  (Ojs.call x1389 "push"
                                     [|(or_null_to_js
                                          (fun
                                             (x1391 :
                                               BaseEncodingOptions.t
                                                 or_string)
                                             ->
                                             or_string_to_js
                                               BaseEncodingOptions.t_to_js
                                               x1391) x1390)|])
                            | None -> ());
                           x1389))|])
    module RealpathSync =
      struct
        let (native :
          PathLike.t ->
            ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
              -> unit -> string)
          =
          fun (x1395 : PathLike.t) ->
            fun
              ?options:(x1396 :
                         (BaseEncodingOptions.t, BufferEncoding.t) union2
                           or_null option)
              ->
              fun () ->
                Ojs.string_of_js
                  (let x1402 = Ojs.get_prop_ascii Import.fs "realpathSync" in
                   Ojs.call (Ojs.get_prop_ascii x1402 "native") "apply"
                     [|x1402;((let x1397 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1397 "push"
                                    [|(PathLike.t_to_js x1395)|]);
                               (match x1396 with
                                | Some x1398 ->
                                    ignore
                                      (Ojs.call x1397 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1399 :
                                                   (BaseEncodingOptions.t,
                                                     BufferEncoding.t) union2)
                                                 ->
                                                 union2_to_js
                                                   BaseEncodingOptions.t_to_js
                                                   BufferEncoding.t_to_js
                                                   x1399) x1398)|])
                                | None -> ());
                               x1397))|])
        let (native :
          PathLike.t -> options:BufferEncodingOption.t -> Buffer.t) =
          fun (x1403 : PathLike.t) ->
            fun ~options:(x1404 : BufferEncodingOption.t) ->
              Buffer.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "realpathSync")
                   "native"
                   [|(PathLike.t_to_js x1403);(BufferEncodingOption.t_to_js
                                                 x1404)|])
        let (native :
          PathLike.t ->
            ?options:BaseEncodingOptions.t or_string or_null ->
              unit -> Buffer.t or_string)
          =
          fun (x1405 : PathLike.t) ->
            fun
              ?options:(x1406 :
                         BaseEncodingOptions.t or_string or_null option)
              ->
              fun () ->
                or_string_of_js Buffer.t_of_js
                  (let x1411 = Ojs.get_prop_ascii Import.fs "realpathSync" in
                   Ojs.call (Ojs.get_prop_ascii x1411 "native") "apply"
                     [|x1411;((let x1407 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1407 "push"
                                    [|(PathLike.t_to_js x1405)|]);
                               (match x1406 with
                                | Some x1408 ->
                                    ignore
                                      (Ojs.call x1407 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1409 :
                                                   BaseEncodingOptions.t
                                                     or_string)
                                                 ->
                                                 or_string_to_js
                                                   BaseEncodingOptions.t_to_js
                                                   x1409) x1408)|])
                                | None -> ());
                               x1407))|])
      end
    let (unlink : PathLike.t -> callback:NoParamCallback.t -> unit) =
      fun (x1413 : PathLike.t) ->
        fun ~callback:(x1414 : NoParamCallback.t) ->
          ignore
            (Ojs.call Import.fs "unlink"
               [|(PathLike.t_to_js x1413);(NoParamCallback.t_to_js x1414)|])
    module Unlink =
      struct
        let (__promisify__ : PathLike.t -> unit Promise.t) =
          fun (x1415 : PathLike.t) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.fs "unlink")
                 "__promisify__" [|(PathLike.t_to_js x1415)|])
      end
    let (unlink_sync : PathLike.t -> unit) =
      fun (x1417 : PathLike.t) ->
        ignore (Ojs.call Import.fs "unlinkSync" [|(PathLike.t_to_js x1417)|])
    module RmDirOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1419 : Ojs.t) -> x1419
        and t_to_js : t -> Ojs.t = fun (x1418 : Ojs.t) -> x1418
        let (get_max_retries : t -> int) =
          fun (x1420 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1420) "maxRetries")
        let (set_max_retries : t -> int -> unit) =
          fun (x1421 : t) ->
            fun (x1422 : int) ->
              Ojs.set_prop_ascii (t_to_js x1421) "maxRetries"
                (Ojs.int_to_js x1422)
        let (get_recursive : t -> bool) =
          fun (x1423 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1423) "recursive")
        let (set_recursive : t -> bool -> unit) =
          fun (x1424 : t) ->
            fun (x1425 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1424) "recursive"
                (Ojs.bool_to_js x1425)
        let (get_retry_delay : t -> int) =
          fun (x1426 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1426) "retryDelay")
        let (set_retry_delay : t -> int -> unit) =
          fun (x1427 : t) ->
            fun (x1428 : int) ->
              Ojs.set_prop_ascii (t_to_js x1427) "retryDelay"
                (Ojs.int_to_js x1428)
      end
    let (rmdir : PathLike.t -> callback:NoParamCallback.t -> unit) =
      fun (x1429 : PathLike.t) ->
        fun ~callback:(x1430 : NoParamCallback.t) ->
          ignore
            (Ojs.call Import.fs "rmdir"
               [|(PathLike.t_to_js x1429);(NoParamCallback.t_to_js x1430)|])
    let (rmdir :
      PathLike.t ->
        options:RmDirOptions.t -> callback:NoParamCallback.t -> unit)
      =
      fun (x1431 : PathLike.t) ->
        fun ~options:(x1432 : RmDirOptions.t) ->
          fun ~callback:(x1433 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "rmdir"
                 [|(PathLike.t_to_js x1431);(RmDirOptions.t_to_js x1432);(
                   NoParamCallback.t_to_js x1433)|])
    module Rmdir =
      struct
        let (__promisify__ :
          PathLike.t -> ?options:RmDirOptions.t -> unit -> unit Promise.t) =
          fun (x1434 : PathLike.t) ->
            fun ?options:(x1435 : RmDirOptions.t option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x1438 = Ojs.get_prop_ascii Import.fs "rmdir" in
                   Ojs.call (Ojs.get_prop_ascii x1438 "__promisify__")
                     "apply"
                     [|x1438;((let x1436 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1436 "push"
                                    [|(PathLike.t_to_js x1434)|]);
                               (match x1435 with
                                | Some x1437 ->
                                    ignore
                                      (Ojs.call x1436 "push"
                                         [|(RmDirOptions.t_to_js x1437)|])
                                | None -> ());
                               x1436))|])
      end
    let (rmdir_sync : PathLike.t -> ?options:RmDirOptions.t -> unit -> unit)
      =
      fun (x1440 : PathLike.t) ->
        fun ?options:(x1441 : RmDirOptions.t option) ->
          fun () ->
            ignore
              (let x1444 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1444 "rmdirSync") "apply"
                 [|x1444;((let x1442 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1442 "push"
                                [|(PathLike.t_to_js x1440)|]);
                           (match x1441 with
                            | Some x1443 ->
                                ignore
                                  (Ojs.call x1442 "push"
                                     [|(RmDirOptions.t_to_js x1443)|])
                            | None -> ());
                           x1442))|])
    module RmOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1446 : Ojs.t) -> x1446
        and t_to_js : t -> Ojs.t = fun (x1445 : Ojs.t) -> x1445
        let (get_force : t -> bool) =
          fun (x1447 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1447) "force")
        let (set_force : t -> bool -> unit) =
          fun (x1448 : t) ->
            fun (x1449 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1448) "force"
                (Ojs.bool_to_js x1449)
        let (get_max_retries : t -> int) =
          fun (x1450 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1450) "maxRetries")
        let (set_max_retries : t -> int -> unit) =
          fun (x1451 : t) ->
            fun (x1452 : int) ->
              Ojs.set_prop_ascii (t_to_js x1451) "maxRetries"
                (Ojs.int_to_js x1452)
        let (get_recursive : t -> bool) =
          fun (x1453 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1453) "recursive")
        let (set_recursive : t -> bool -> unit) =
          fun (x1454 : t) ->
            fun (x1455 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1454) "recursive"
                (Ojs.bool_to_js x1455)
        let (get_retry_delay : t -> int) =
          fun (x1456 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1456) "retryDelay")
        let (set_retry_delay : t -> int -> unit) =
          fun (x1457 : t) ->
            fun (x1458 : int) ->
              Ojs.set_prop_ascii (t_to_js x1457) "retryDelay"
                (Ojs.int_to_js x1458)
      end
    let (rm :
      PathLike.t -> ?options:RmOptions.t -> NoParamCallback.t -> unit) =
      fun (x1459 : PathLike.t) ->
        fun ?options:(x1460 : RmOptions.t option) ->
          fun (x1461 : NoParamCallback.t) ->
            ignore
              (let x1464 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1464 "rm") "apply"
                 [|x1464;((let x1462 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1462 "push"
                                [|(PathLike.t_to_js x1459)|]);
                           (match x1460 with
                            | Some x1463 ->
                                ignore
                                  (Ojs.call x1462 "push"
                                     [|(RmOptions.t_to_js x1463)|])
                            | None -> ());
                           ignore
                             (Ojs.call x1462 "push"
                                [|(NoParamCallback.t_to_js x1461)|]);
                           x1462))|])
    module Rm =
      struct
        let (__promisify__ :
          PathLike.t -> ?options:RmOptions.t -> unit -> unit Promise.t) =
          fun (x1465 : PathLike.t) ->
            fun ?options:(x1466 : RmOptions.t option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x1469 = Ojs.get_prop_ascii Import.fs "rm" in
                   Ojs.call (Ojs.get_prop_ascii x1469 "__promisify__")
                     "apply"
                     [|x1469;((let x1467 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1467 "push"
                                    [|(PathLike.t_to_js x1465)|]);
                               (match x1466 with
                                | Some x1468 ->
                                    ignore
                                      (Ojs.call x1467 "push"
                                         [|(RmOptions.t_to_js x1468)|])
                                | None -> ());
                               x1467))|])
      end
    let (rm_sync : PathLike.t -> ?options:RmOptions.t -> unit -> unit) =
      fun (x1471 : PathLike.t) ->
        fun ?options:(x1472 : RmOptions.t option) ->
          fun () ->
            ignore
              (let x1475 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1475 "rmSync") "apply"
                 [|x1475;((let x1473 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1473 "push"
                                [|(PathLike.t_to_js x1471)|]);
                           (match x1472 with
                            | Some x1474 ->
                                ignore
                                  (Ojs.call x1473 "push"
                                     [|(RmOptions.t_to_js x1474)|])
                            | None -> ());
                           x1473))|])
    module MakeDirectoryOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1477 : Ojs.t) -> x1477
        and t_to_js : t -> Ojs.t = fun (x1476 : Ojs.t) -> x1476
        let (get_recursive : t -> bool) =
          fun (x1478 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x1478) "recursive")
        let (set_recursive : t -> bool -> unit) =
          fun (x1479 : t) ->
            fun (x1480 : bool) ->
              Ojs.set_prop_ascii (t_to_js x1479) "recursive"
                (Ojs.bool_to_js x1480)
        let (get_mode : t -> Mode.t) =
          fun (x1481 : t) ->
            Mode.t_of_js (Ojs.get_prop_ascii (t_to_js x1481) "mode")
        let (set_mode : t -> Mode.t -> unit) =
          fun (x1482 : t) ->
            fun (x1483 : Mode.t) ->
              Ojs.set_prop_ascii (t_to_js x1482) "mode" (Mode.t_to_js x1483)
      end
    let (mkdir :
      PathLike.t ->
        options:(MakeDirectoryOptions.t, AnonymousInterface18.t)
          intersection2 ->
          callback:(err:ErrnoException.t or_null ->
                      ?path:PathLike.t -> unit -> unit)
            -> unit)
      =
      fun (x1484 : PathLike.t) ->
        fun
          ~options:(x1485 :
                     (MakeDirectoryOptions.t, AnonymousInterface18.t)
                       intersection2)
          ->
          fun
            ~callback:(x1488 :
                        err:ErrnoException.t or_null ->
                          ?path:PathLike.t -> unit -> unit)
            ->
            ignore
              (Ojs.call Import.fs "mkdir"
                 [|(PathLike.t_to_js x1484);(intersection2_to_js
                                               MakeDirectoryOptions.t_to_js
                                               AnonymousInterface18.t_to_js
                                               x1485);(Ojs.fun_to_js 2
                                                         (fun (x1489 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x1491 : Ojs.t)
                                                              ->
                                                              x1488
                                                                ~err:(
                                                                or_null_of_js
                                                                  ErrnoException.t_of_js
                                                                  x1489)
                                                                ?path:(
                                                                Ojs.option_of_js
                                                                  PathLike.t_of_js
                                                                  x1491) ()))|])
    let (mkdir :
      PathLike.t ->
        options:Mode.t or_null_or_undefined ->
          callback:NoParamCallback.t -> unit)
      =
      fun (x1493 : PathLike.t) ->
        fun ~options:(x1494 : Mode.t or_null_or_undefined) ->
          fun ~callback:(x1496 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "mkdir"
                 [|(PathLike.t_to_js x1493);(or_null_or_undefined_to_js
                                               Mode.t_to_js x1494);(NoParamCallback.t_to_js
                                                                    x1496)|])
    let (mkdir :
      PathLike.t ->
        options:(MakeDirectoryOptions.t, Mode.t) union2 or_null_or_undefined
          ->
          callback:(err:ErrnoException.t or_null ->
                      ?path:PathLike.t -> unit -> unit)
            -> unit)
      =
      fun (x1497 : PathLike.t) ->
        fun
          ~options:(x1498 :
                     (MakeDirectoryOptions.t, Mode.t) union2
                       or_null_or_undefined)
          ->
          fun
            ~callback:(x1502 :
                        err:ErrnoException.t or_null ->
                          ?path:PathLike.t -> unit -> unit)
            ->
            ignore
              (Ojs.call Import.fs "mkdir"
                 [|(PathLike.t_to_js x1497);(or_null_or_undefined_to_js
                                               (fun
                                                  (x1499 :
                                                    (MakeDirectoryOptions.t,
                                                      Mode.t) union2)
                                                  ->
                                                  union2_to_js
                                                    MakeDirectoryOptions.t_to_js
                                                    Mode.t_to_js x1499) x1498);(
                   Ojs.fun_to_js 2
                     (fun (x1503 : Ojs.t) ->
                        fun (x1505 : Ojs.t) ->
                          x1502
                            ~err:(or_null_of_js ErrnoException.t_of_js x1503)
                            ?path:(Ojs.option_of_js PathLike.t_of_js x1505)
                            ()))|])
    let (mkdir : PathLike.t -> callback:NoParamCallback.t -> unit) =
      fun (x1507 : PathLike.t) ->
        fun ~callback:(x1508 : NoParamCallback.t) ->
          ignore
            (Ojs.call Import.fs "mkdir"
               [|(PathLike.t_to_js x1507);(NoParamCallback.t_to_js x1508)|])
    module Mkdir =
      struct
        let (__promisify__ :
          PathLike.t ->
            options:(MakeDirectoryOptions.t, AnonymousInterface18.t)
              intersection2 -> string or_undefined Promise.t)
          =
          fun (x1509 : PathLike.t) ->
            fun
              ~options:(x1510 :
                         (MakeDirectoryOptions.t, AnonymousInterface18.t)
                           intersection2)
              ->
              Promise.t_of_js
                (fun (x1513 : Ojs.t) ->
                   or_undefined_of_js Ojs.string_of_js x1513)
                (Ojs.call (Ojs.get_prop_ascii Import.fs "mkdir")
                   "__promisify__"
                   [|(PathLike.t_to_js x1509);(intersection2_to_js
                                                 MakeDirectoryOptions.t_to_js
                                                 AnonymousInterface18.t_to_js
                                                 x1510)|])
        let (__promisify__ :
          PathLike.t -> ?options:Mode.t or_null -> unit -> unit Promise.t) =
          fun (x1515 : PathLike.t) ->
            fun ?options:(x1516 : Mode.t or_null option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x1520 = Ojs.get_prop_ascii Import.fs "mkdir" in
                   Ojs.call (Ojs.get_prop_ascii x1520 "__promisify__")
                     "apply"
                     [|x1520;((let x1517 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1517 "push"
                                    [|(PathLike.t_to_js x1515)|]);
                               (match x1516 with
                                | Some x1518 ->
                                    ignore
                                      (Ojs.call x1517 "push"
                                         [|(or_null_to_js Mode.t_to_js x1518)|])
                                | None -> ());
                               x1517))|])
        let (__promisify__ :
          PathLike.t ->
            ?options:(MakeDirectoryOptions.t, Mode.t) union2 or_null ->
              unit -> string or_undefined Promise.t)
          =
          fun (x1522 : PathLike.t) ->
            fun
              ?options:(x1523 :
                         (MakeDirectoryOptions.t, Mode.t) union2 or_null
                           option)
              ->
              fun () ->
                Promise.t_of_js
                  (fun (x1530 : Ojs.t) ->
                     or_undefined_of_js Ojs.string_of_js x1530)
                  (let x1529 = Ojs.get_prop_ascii Import.fs "mkdir" in
                   Ojs.call (Ojs.get_prop_ascii x1529 "__promisify__")
                     "apply"
                     [|x1529;((let x1524 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1524 "push"
                                    [|(PathLike.t_to_js x1522)|]);
                               (match x1523 with
                                | Some x1525 ->
                                    ignore
                                      (Ojs.call x1524 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1526 :
                                                   (MakeDirectoryOptions.t,
                                                     Mode.t) union2)
                                                 ->
                                                 union2_to_js
                                                   MakeDirectoryOptions.t_to_js
                                                   Mode.t_to_js x1526) x1525)|])
                                | None -> ());
                               x1524))|])
      end
    let (mkdir_sync :
      PathLike.t ->
        options:(MakeDirectoryOptions.t, AnonymousInterface18.t)
          intersection2 -> string or_undefined)
      =
      fun (x1532 : PathLike.t) ->
        fun
          ~options:(x1533 :
                     (MakeDirectoryOptions.t, AnonymousInterface18.t)
                       intersection2)
          ->
          or_undefined_of_js Ojs.string_of_js
            (Ojs.call Import.fs "mkdirSync"
               [|(PathLike.t_to_js x1532);(intersection2_to_js
                                             MakeDirectoryOptions.t_to_js
                                             AnonymousInterface18.t_to_js
                                             x1533)|])
    let (mkdir_sync : PathLike.t -> ?options:Mode.t or_null -> unit -> unit)
      =
      fun (x1537 : PathLike.t) ->
        fun ?options:(x1538 : Mode.t or_null option) ->
          fun () ->
            ignore
              (let x1542 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1542 "mkdirSync") "apply"
                 [|x1542;((let x1539 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1539 "push"
                                [|(PathLike.t_to_js x1537)|]);
                           (match x1538 with
                            | Some x1540 ->
                                ignore
                                  (Ojs.call x1539 "push"
                                     [|(or_null_to_js Mode.t_to_js x1540)|])
                            | None -> ());
                           x1539))|])
    let (mkdir_sync :
      PathLike.t ->
        ?options:(MakeDirectoryOptions.t, Mode.t) union2 or_null ->
          unit -> string or_undefined)
      =
      fun (x1543 : PathLike.t) ->
        fun
          ?options:(x1544 :
                     (MakeDirectoryOptions.t, Mode.t) union2 or_null option)
          ->
          fun () ->
            or_undefined_of_js Ojs.string_of_js
              (let x1550 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1550 "mkdirSync") "apply"
                 [|x1550;((let x1545 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1545 "push"
                                [|(PathLike.t_to_js x1543)|]);
                           (match x1544 with
                            | Some x1546 ->
                                ignore
                                  (Ojs.call x1545 "push"
                                     [|(or_null_to_js
                                          (fun
                                             (x1547 :
                                               (MakeDirectoryOptions.t,
                                                 Mode.t) union2)
                                             ->
                                             union2_to_js
                                               MakeDirectoryOptions.t_to_js
                                               Mode.t_to_js x1547) x1546)|])
                            | None -> ());
                           x1545))|])
    let (mkdtemp :
      prefix:string ->
        options:(BaseEncodingOptions.t, BufferEncoding.t) union2
          or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null -> folder:string -> unit) ->
            unit)
      =
      fun ~prefix:(x1552 : string) ->
        fun
          ~options:(x1553 :
                     (BaseEncodingOptions.t, BufferEncoding.t) union2
                       or_null_or_undefined)
          ->
          fun
            ~callback:(x1557 :
                        err:ErrnoException.t or_null -> folder:string -> unit)
            ->
            ignore
              (Ojs.call Import.fs "mkdtemp"
                 [|(Ojs.string_to_js x1552);(or_null_or_undefined_to_js
                                               (fun
                                                  (x1554 :
                                                    (BaseEncodingOptions.t,
                                                      BufferEncoding.t)
                                                      union2)
                                                  ->
                                                  union2_to_js
                                                    BaseEncodingOptions.t_to_js
                                                    BufferEncoding.t_to_js
                                                    x1554) x1553);(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1558 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1560 :
                                                                    Ojs.t) ->
                                                                    x1557
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1558)
                                                                    ~folder:(
                                                                    Ojs.string_of_js
                                                                    x1560)))|])
    let (mkdtemp :
      prefix:string ->
        options:(AnonymousInterface7.t, [ `buffer ]) or_enum ->
          callback:(err:ErrnoException.t or_null -> folder:Buffer.t -> unit)
            -> unit)
      =
      fun ~prefix:(x1561 : string) ->
        fun ~options:(x1562 : (AnonymousInterface7.t, [ `buffer ]) or_enum)
          ->
          fun
            ~callback:(x1565 :
                        err:ErrnoException.t or_null ->
                          folder:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "mkdtemp"
                 [|(Ojs.string_to_js x1561);(or_enum_to_js
                                               AnonymousInterface7.t_to_js
                                               (fun (x1564 : [ `buffer ]) ->
                                                  match x1564 with
                                                  | `buffer ->
                                                      Ojs.string_to_js
                                                        "buffer") x1562);(
                   Ojs.fun_to_js 2
                     (fun (x1566 : Ojs.t) ->
                        fun (x1568 : Ojs.t) ->
                          x1565
                            ~err:(or_null_of_js ErrnoException.t_of_js x1566)
                            ~folder:(Buffer.t_of_js x1568)))|])
    let (mkdtemp :
      prefix:string ->
        options:BaseEncodingOptions.t or_string or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null ->
                      folder:Buffer.t or_string -> unit)
            -> unit)
      =
      fun ~prefix:(x1569 : string) ->
        fun
          ~options:(x1570 :
                     BaseEncodingOptions.t or_string or_null_or_undefined)
          ->
          fun
            ~callback:(x1573 :
                        err:ErrnoException.t or_null ->
                          folder:Buffer.t or_string -> unit)
            ->
            ignore
              (Ojs.call Import.fs "mkdtemp"
                 [|(Ojs.string_to_js x1569);(or_null_or_undefined_to_js
                                               (fun
                                                  (x1571 :
                                                    BaseEncodingOptions.t
                                                      or_string)
                                                  ->
                                                  or_string_to_js
                                                    BaseEncodingOptions.t_to_js
                                                    x1571) x1570);(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1574 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1576 :
                                                                    Ojs.t) ->
                                                                    x1573
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1574)
                                                                    ~folder:(
                                                                    or_string_of_js
                                                                    Buffer.t_of_js
                                                                    x1576)))|])
    let (mkdtemp :
      prefix:string ->
        callback:(err:ErrnoException.t or_null -> folder:string -> unit) ->
          unit)
      =
      fun ~prefix:(x1578 : string) ->
        fun
          ~callback:(x1579 :
                      err:ErrnoException.t or_null -> folder:string -> unit)
          ->
          ignore
            (Ojs.call Import.fs "mkdtemp"
               [|(Ojs.string_to_js x1578);(Ojs.fun_to_js 2
                                             (fun (x1580 : Ojs.t) ->
                                                fun (x1582 : Ojs.t) ->
                                                  x1579
                                                    ~err:(or_null_of_js
                                                            ErrnoException.t_of_js
                                                            x1580)
                                                    ~folder:(Ojs.string_of_js
                                                               x1582)))|])
    module Mkdtemp =
      struct
        let (__promisify__ :
          prefix:string ->
            ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
              -> unit -> string Promise.t)
          =
          fun ~prefix:(x1583 : string) ->
            fun
              ?options:(x1584 :
                         (BaseEncodingOptions.t, BufferEncoding.t) union2
                           or_null option)
              ->
              fun () ->
                Promise.t_of_js Ojs.string_of_js
                  (let x1590 = Ojs.get_prop_ascii Import.fs "mkdtemp" in
                   Ojs.call (Ojs.get_prop_ascii x1590 "__promisify__")
                     "apply"
                     [|x1590;((let x1585 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1585 "push"
                                    [|(Ojs.string_to_js x1583)|]);
                               (match x1584 with
                                | Some x1586 ->
                                    ignore
                                      (Ojs.call x1585 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1587 :
                                                   (BaseEncodingOptions.t,
                                                     BufferEncoding.t) union2)
                                                 ->
                                                 union2_to_js
                                                   BaseEncodingOptions.t_to_js
                                                   BufferEncoding.t_to_js
                                                   x1587) x1586)|])
                                | None -> ());
                               x1585))|])
        let (__promisify__ :
          prefix:string ->
            options:BufferEncodingOption.t -> Buffer.t Promise.t)
          =
          fun ~prefix:(x1592 : string) ->
            fun ~options:(x1593 : BufferEncodingOption.t) ->
              Promise.t_of_js Buffer.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "mkdtemp")
                   "__promisify__"
                   [|(Ojs.string_to_js x1592);(BufferEncodingOption.t_to_js
                                                 x1593)|])
        let (__promisify__ :
          prefix:string ->
            ?options:BaseEncodingOptions.t or_string or_null ->
              unit -> Buffer.t or_string Promise.t)
          =
          fun ~prefix:(x1595 : string) ->
            fun
              ?options:(x1596 :
                         BaseEncodingOptions.t or_string or_null option)
              ->
              fun () ->
                Promise.t_of_js
                  (fun (x1602 : Ojs.t) ->
                     or_string_of_js Buffer.t_of_js x1602)
                  (let x1601 = Ojs.get_prop_ascii Import.fs "mkdtemp" in
                   Ojs.call (Ojs.get_prop_ascii x1601 "__promisify__")
                     "apply"
                     [|x1601;((let x1597 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1597 "push"
                                    [|(Ojs.string_to_js x1595)|]);
                               (match x1596 with
                                | Some x1598 ->
                                    ignore
                                      (Ojs.call x1597 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1599 :
                                                   BaseEncodingOptions.t
                                                     or_string)
                                                 ->
                                                 or_string_to_js
                                                   BaseEncodingOptions.t_to_js
                                                   x1599) x1598)|])
                                | None -> ());
                               x1597))|])
      end
    let (mkdtemp_sync :
      prefix:string ->
        ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null ->
          unit -> string)
      =
      fun ~prefix:(x1604 : string) ->
        fun
          ?options:(x1605 :
                     (BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
                       option)
          ->
          fun () ->
            Ojs.string_of_js
              (let x1611 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1611 "mkdtempSync") "apply"
                 [|x1611;((let x1606 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1606 "push"
                                [|(Ojs.string_to_js x1604)|]);
                           (match x1605 with
                            | Some x1607 ->
                                ignore
                                  (Ojs.call x1606 "push"
                                     [|(or_null_to_js
                                          (fun
                                             (x1608 :
                                               (BaseEncodingOptions.t,
                                                 BufferEncoding.t) union2)
                                             ->
                                             union2_to_js
                                               BaseEncodingOptions.t_to_js
                                               BufferEncoding.t_to_js x1608)
                                          x1607)|])
                            | None -> ());
                           x1606))|])
    let (mkdtemp_sync :
      prefix:string -> options:BufferEncodingOption.t -> Buffer.t) =
      fun ~prefix:(x1612 : string) ->
        fun ~options:(x1613 : BufferEncodingOption.t) ->
          Buffer.t_of_js
            (Ojs.call Import.fs "mkdtempSync"
               [|(Ojs.string_to_js x1612);(BufferEncodingOption.t_to_js x1613)|])
    let (mkdtemp_sync :
      prefix:string ->
        ?options:BaseEncodingOptions.t or_string or_null ->
          unit -> Buffer.t or_string)
      =
      fun ~prefix:(x1614 : string) ->
        fun ?options:(x1615 : BaseEncodingOptions.t or_string or_null option)
          ->
          fun () ->
            or_string_of_js Buffer.t_of_js
              (let x1620 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1620 "mkdtempSync") "apply"
                 [|x1620;((let x1616 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1616 "push"
                                [|(Ojs.string_to_js x1614)|]);
                           (match x1615 with
                            | Some x1617 ->
                                ignore
                                  (Ojs.call x1616 "push"
                                     [|(or_null_to_js
                                          (fun
                                             (x1618 :
                                               BaseEncodingOptions.t
                                                 or_string)
                                             ->
                                             or_string_to_js
                                               BaseEncodingOptions.t_to_js
                                               x1618) x1617)|])
                            | None -> ());
                           x1616))|])
    let (readdir :
      PathLike.t ->
        options:(BufferEncoding.t, AnonymousInterface11.t) union2
          or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null -> files:string list -> unit)
            -> unit)
      =
      fun (x1622 : PathLike.t) ->
        fun
          ~options:(x1623 :
                     (BufferEncoding.t, AnonymousInterface11.t) union2
                       or_null_or_undefined)
          ->
          fun
            ~callback:(x1627 :
                        err:ErrnoException.t or_null ->
                          files:string list -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readdir"
                 [|(PathLike.t_to_js x1622);(or_null_or_undefined_to_js
                                               (fun
                                                  (x1624 :
                                                    (BufferEncoding.t,
                                                      AnonymousInterface11.t)
                                                      union2)
                                                  ->
                                                  union2_to_js
                                                    BufferEncoding.t_to_js
                                                    AnonymousInterface11.t_to_js
                                                    x1624) x1623);(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x1628 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1630 :
                                                                    Ojs.t) ->
                                                                    x1627
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1628)
                                                                    ~files:(
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x1630)))|])
    let (readdir :
      PathLike.t ->
        options:(AnonymousInterface9.t, [ `buffer ]) or_enum ->
          callback:(err:ErrnoException.t or_null ->
                      files:Buffer.t list -> unit)
            -> unit)
      =
      fun (x1632 : PathLike.t) ->
        fun ~options:(x1633 : (AnonymousInterface9.t, [ `buffer ]) or_enum)
          ->
          fun
            ~callback:(x1636 :
                        err:ErrnoException.t or_null ->
                          files:Buffer.t list -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readdir"
                 [|(PathLike.t_to_js x1632);(or_enum_to_js
                                               AnonymousInterface9.t_to_js
                                               (fun (x1635 : [ `buffer ]) ->
                                                  match x1635 with
                                                  | `buffer ->
                                                      Ojs.string_to_js
                                                        "buffer") x1633);(
                   Ojs.fun_to_js 2
                     (fun (x1637 : Ojs.t) ->
                        fun (x1639 : Ojs.t) ->
                          x1636
                            ~err:(or_null_of_js ErrnoException.t_of_js x1637)
                            ~files:(Ojs.list_of_js Buffer.t_of_js x1639)))|])
    let (readdir :
      PathLike.t ->
        options:BufferEncoding.t or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null ->
                      files:Buffer.t or_string list -> unit)
            -> unit)
      =
      fun (x1641 : PathLike.t) ->
        fun ~options:(x1642 : BufferEncoding.t or_null_or_undefined) ->
          fun
            ~callback:(x1644 :
                        err:ErrnoException.t or_null ->
                          files:Buffer.t or_string list -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readdir"
                 [|(PathLike.t_to_js x1641);(or_null_or_undefined_to_js
                                               BufferEncoding.t_to_js x1642);(
                   Ojs.fun_to_js 2
                     (fun (x1645 : Ojs.t) ->
                        fun (x1647 : Ojs.t) ->
                          x1644
                            ~err:(or_null_of_js ErrnoException.t_of_js x1645)
                            ~files:(Ojs.list_of_js
                                      (fun (x1648 : Ojs.t) ->
                                         or_string_of_js Buffer.t_of_js x1648)
                                      x1647)))|])
    let (readdir :
      PathLike.t ->
        callback:(err:ErrnoException.t or_null -> files:string list -> unit)
          -> unit)
      =
      fun (x1650 : PathLike.t) ->
        fun
          ~callback:(x1651 :
                      err:ErrnoException.t or_null ->
                        files:string list -> unit)
          ->
          ignore
            (Ojs.call Import.fs "readdir"
               [|(PathLike.t_to_js x1650);(Ojs.fun_to_js 2
                                             (fun (x1652 : Ojs.t) ->
                                                fun (x1654 : Ojs.t) ->
                                                  x1651
                                                    ~err:(or_null_of_js
                                                            ErrnoException.t_of_js
                                                            x1652)
                                                    ~files:(Ojs.list_of_js
                                                              Ojs.string_of_js
                                                              x1654)))|])
    let (readdir :
      PathLike.t ->
        options:(BaseEncodingOptions.t, AnonymousInterface20.t) intersection2
          ->
          callback:(err:ErrnoException.t or_null ->
                      files:Dirent.t list -> unit)
            -> unit)
      =
      fun (x1656 : PathLike.t) ->
        fun
          ~options:(x1657 :
                     (BaseEncodingOptions.t, AnonymousInterface20.t)
                       intersection2)
          ->
          fun
            ~callback:(x1660 :
                        err:ErrnoException.t or_null ->
                          files:Dirent.t list -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readdir"
                 [|(PathLike.t_to_js x1656);(intersection2_to_js
                                               BaseEncodingOptions.t_to_js
                                               AnonymousInterface20.t_to_js
                                               x1657);(Ojs.fun_to_js 2
                                                         (fun (x1661 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x1663 : Ojs.t)
                                                              ->
                                                              x1660
                                                                ~err:(
                                                                or_null_of_js
                                                                  ErrnoException.t_of_js
                                                                  x1661)
                                                                ~files:(
                                                                Ojs.list_of_js
                                                                  Dirent.t_of_js
                                                                  x1663)))|])
    module Readdir =
      struct
        let (__promisify__ :
          PathLike.t ->
            ?options:(BufferEncoding.t, AnonymousInterface11.t) union2
              or_null -> unit -> string list Promise.t)
          =
          fun (x1665 : PathLike.t) ->
            fun
              ?options:(x1666 :
                         (BufferEncoding.t, AnonymousInterface11.t) union2
                           or_null option)
              ->
              fun () ->
                Promise.t_of_js
                  (fun (x1673 : Ojs.t) ->
                     Ojs.list_of_js Ojs.string_of_js x1673)
                  (let x1672 = Ojs.get_prop_ascii Import.fs "readdir" in
                   Ojs.call (Ojs.get_prop_ascii x1672 "__promisify__")
                     "apply"
                     [|x1672;((let x1667 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1667 "push"
                                    [|(PathLike.t_to_js x1665)|]);
                               (match x1666 with
                                | Some x1668 ->
                                    ignore
                                      (Ojs.call x1667 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x1669 :
                                                   (BufferEncoding.t,
                                                     AnonymousInterface11.t)
                                                     union2)
                                                 ->
                                                 union2_to_js
                                                   BufferEncoding.t_to_js
                                                   AnonymousInterface11.t_to_js
                                                   x1669) x1668)|])
                                | None -> ());
                               x1667))|])
        let (__promisify__ :
          PathLike.t ->
            options:(AnonymousInterface9.t, [ `buffer ]) or_enum ->
              Buffer.t list Promise.t)
          =
          fun (x1675 : PathLike.t) ->
            fun
              ~options:(x1676 : (AnonymousInterface9.t, [ `buffer ]) or_enum)
              ->
              Promise.t_of_js
                (fun (x1679 : Ojs.t) -> Ojs.list_of_js Buffer.t_of_js x1679)
                (Ojs.call (Ojs.get_prop_ascii Import.fs "readdir")
                   "__promisify__"
                   [|(PathLike.t_to_js x1675);(or_enum_to_js
                                                 AnonymousInterface9.t_to_js
                                                 (fun (x1678 : [ `buffer ])
                                                    ->
                                                    match x1678 with
                                                    | `buffer ->
                                                        Ojs.string_to_js
                                                          "buffer") x1676)|])
        let (__promisify__ :
          PathLike.t ->
            ?options:BufferEncoding.t or_null ->
              unit -> Buffer.t or_string list Promise.t)
          =
          fun (x1681 : PathLike.t) ->
            fun ?options:(x1682 : BufferEncoding.t or_null option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x1687 : Ojs.t) ->
                     Ojs.list_of_js
                       (fun (x1688 : Ojs.t) ->
                          or_string_of_js Buffer.t_of_js x1688) x1687)
                  (let x1686 = Ojs.get_prop_ascii Import.fs "readdir" in
                   Ojs.call (Ojs.get_prop_ascii x1686 "__promisify__")
                     "apply"
                     [|x1686;((let x1683 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1683 "push"
                                    [|(PathLike.t_to_js x1681)|]);
                               (match x1682 with
                                | Some x1684 ->
                                    ignore
                                      (Ojs.call x1683 "push"
                                         [|(or_null_to_js
                                              BufferEncoding.t_to_js x1684)|])
                                | None -> ());
                               x1683))|])
        let (__promisify__ :
          PathLike.t ->
            options:(BaseEncodingOptions.t, AnonymousInterface20.t)
              intersection2 -> Dirent.t list Promise.t)
          =
          fun (x1690 : PathLike.t) ->
            fun
              ~options:(x1691 :
                         (BaseEncodingOptions.t, AnonymousInterface20.t)
                           intersection2)
              ->
              Promise.t_of_js
                (fun (x1694 : Ojs.t) -> Ojs.list_of_js Dirent.t_of_js x1694)
                (Ojs.call (Ojs.get_prop_ascii Import.fs "readdir")
                   "__promisify__"
                   [|(PathLike.t_to_js x1690);(intersection2_to_js
                                                 BaseEncodingOptions.t_to_js
                                                 AnonymousInterface20.t_to_js
                                                 x1691)|])
      end
    let (readdir_sync :
      PathLike.t ->
        ?options:(BufferEncoding.t, AnonymousInterface11.t) union2 or_null ->
          unit -> string list)
      =
      fun (x1696 : PathLike.t) ->
        fun
          ?options:(x1697 :
                     (BufferEncoding.t, AnonymousInterface11.t) union2
                       or_null option)
          ->
          fun () ->
            Ojs.list_of_js Ojs.string_of_js
              (let x1703 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1703 "readdirSync") "apply"
                 [|x1703;((let x1698 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1698 "push"
                                [|(PathLike.t_to_js x1696)|]);
                           (match x1697 with
                            | Some x1699 ->
                                ignore
                                  (Ojs.call x1698 "push"
                                     [|(or_null_to_js
                                          (fun
                                             (x1700 :
                                               (BufferEncoding.t,
                                                 AnonymousInterface11.t)
                                                 union2)
                                             ->
                                             union2_to_js
                                               BufferEncoding.t_to_js
                                               AnonymousInterface11.t_to_js
                                               x1700) x1699)|])
                            | None -> ());
                           x1698))|])
    let (readdir_sync :
      PathLike.t ->
        options:(AnonymousInterface9.t, [ `buffer ]) or_enum -> Buffer.t list)
      =
      fun (x1705 : PathLike.t) ->
        fun ~options:(x1706 : (AnonymousInterface9.t, [ `buffer ]) or_enum)
          ->
          Ojs.list_of_js Buffer.t_of_js
            (Ojs.call Import.fs "readdirSync"
               [|(PathLike.t_to_js x1705);(or_enum_to_js
                                             AnonymousInterface9.t_to_js
                                             (fun (x1708 : [ `buffer ]) ->
                                                match x1708 with
                                                | `buffer ->
                                                    Ojs.string_to_js "buffer")
                                             x1706)|])
    let (readdir_sync :
      PathLike.t ->
        ?options:BufferEncoding.t or_null -> unit -> Buffer.t or_string list)
      =
      fun (x1710 : PathLike.t) ->
        fun ?options:(x1711 : BufferEncoding.t or_null option) ->
          fun () ->
            Ojs.list_of_js
              (fun (x1716 : Ojs.t) -> or_string_of_js Buffer.t_of_js x1716)
              (let x1715 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x1715 "readdirSync") "apply"
                 [|x1715;((let x1712 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x1712 "push"
                                [|(PathLike.t_to_js x1710)|]);
                           (match x1711 with
                            | Some x1713 ->
                                ignore
                                  (Ojs.call x1712 "push"
                                     [|(or_null_to_js BufferEncoding.t_to_js
                                          x1713)|])
                            | None -> ());
                           x1712))|])
    let (readdir_sync :
      PathLike.t ->
        options:(BaseEncodingOptions.t, AnonymousInterface20.t) intersection2
          -> Dirent.t list)
      =
      fun (x1718 : PathLike.t) ->
        fun
          ~options:(x1719 :
                     (BaseEncodingOptions.t, AnonymousInterface20.t)
                       intersection2)
          ->
          Ojs.list_of_js Dirent.t_of_js
            (Ojs.call Import.fs "readdirSync"
               [|(PathLike.t_to_js x1718);(intersection2_to_js
                                             BaseEncodingOptions.t_to_js
                                             AnonymousInterface20.t_to_js
                                             x1719)|])
    let (close : int -> callback:NoParamCallback.t -> unit) =
      fun (x1723 : int) ->
        fun ~callback:(x1724 : NoParamCallback.t) ->
          ignore
            (Ojs.call Import.fs "close"
               [|(Ojs.int_to_js x1723);(NoParamCallback.t_to_js x1724)|])
    module Close =
      struct
        let (__promisify__ : int -> unit Promise.t) =
          fun (x1725 : int) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.fs "close")
                 "__promisify__" [|(Ojs.int_to_js x1725)|])
      end
    let (close_sync : int -> unit) =
      fun (x1727 : int) ->
        ignore (Ojs.call Import.fs "closeSync" [|(Ojs.int_to_js x1727)|])
    let (open_ :
      PathLike.t ->
        flags:OpenMode.t ->
          mode:Mode.t or_null_or_undefined ->
            callback:(err:ErrnoException.t or_null -> fd:int -> unit) -> unit)
      =
      fun (x1728 : PathLike.t) ->
        fun ~flags:(x1729 : OpenMode.t) ->
          fun ~mode:(x1730 : Mode.t or_null_or_undefined) ->
            fun
              ~callback:(x1732 :
                          err:ErrnoException.t or_null -> fd:int -> unit)
              ->
              ignore
                (Ojs.call Import.fs "open"
                   [|(PathLike.t_to_js x1728);(OpenMode.t_to_js x1729);(
                     or_null_or_undefined_to_js Mode.t_to_js x1730);(
                     Ojs.fun_to_js 2
                       (fun (x1733 : Ojs.t) ->
                          fun (x1735 : Ojs.t) ->
                            x1732
                              ~err:(or_null_of_js ErrnoException.t_of_js
                                      x1733) ~fd:(Ojs.int_of_js x1735)))|])
    let (open_ :
      PathLike.t ->
        flags:OpenMode.t ->
          callback:(err:ErrnoException.t or_null -> fd:int -> unit) -> unit)
      =
      fun (x1736 : PathLike.t) ->
        fun ~flags:(x1737 : OpenMode.t) ->
          fun
            ~callback:(x1738 :
                        err:ErrnoException.t or_null -> fd:int -> unit)
            ->
            ignore
              (Ojs.call Import.fs "open"
                 [|(PathLike.t_to_js x1736);(OpenMode.t_to_js x1737);(
                   Ojs.fun_to_js 2
                     (fun (x1739 : Ojs.t) ->
                        fun (x1741 : Ojs.t) ->
                          x1738
                            ~err:(or_null_of_js ErrnoException.t_of_js x1739)
                            ~fd:(Ojs.int_of_js x1741)))|])
    module Open =
      struct
        let (__promisify__ :
          PathLike.t ->
            flags:OpenMode.t -> ?mode:Mode.t or_null -> unit -> int Promise.t)
          =
          fun (x1742 : PathLike.t) ->
            fun ~flags:(x1743 : OpenMode.t) ->
              fun ?mode:(x1744 : Mode.t or_null option) ->
                fun () ->
                  Promise.t_of_js Ojs.int_of_js
                    (let x1748 = Ojs.get_prop_ascii Import.fs "open" in
                     Ojs.call (Ojs.get_prop_ascii x1748 "__promisify__")
                       "apply"
                       [|x1748;((let x1745 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1745 "push"
                                      [|(PathLike.t_to_js x1742)|]);
                                 ignore
                                   (Ojs.call x1745 "push"
                                      [|(OpenMode.t_to_js x1743)|]);
                                 (match x1744 with
                                  | Some x1746 ->
                                      ignore
                                        (Ojs.call x1745 "push"
                                           [|(or_null_to_js Mode.t_to_js
                                                x1746)|])
                                  | None -> ());
                                 x1745))|])
      end
    let (open_sync :
      PathLike.t -> flags:OpenMode.t -> ?mode:Mode.t or_null -> unit -> int)
      =
      fun (x1750 : PathLike.t) ->
        fun ~flags:(x1751 : OpenMode.t) ->
          fun ?mode:(x1752 : Mode.t or_null option) ->
            fun () ->
              Ojs.int_of_js
                (let x1756 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x1756 "openSync") "apply"
                   [|x1756;((let x1753 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1753 "push"
                                  [|(PathLike.t_to_js x1750)|]);
                             ignore
                               (Ojs.call x1753 "push"
                                  [|(OpenMode.t_to_js x1751)|]);
                             (match x1752 with
                              | Some x1754 ->
                                  ignore
                                    (Ojs.call x1753 "push"
                                       [|(or_null_to_js Mode.t_to_js x1754)|])
                              | None -> ());
                             x1753))|])
    let (utimes :
      PathLike.t ->
        atime:Date.t or_string or_number ->
          mtime:Date.t or_string or_number ->
            callback:NoParamCallback.t -> unit)
      =
      fun (x1757 : PathLike.t) ->
        fun ~atime:(x1758 : Date.t or_string or_number) ->
          fun ~mtime:(x1761 : Date.t or_string or_number) ->
            fun ~callback:(x1764 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "utimes"
                   [|(PathLike.t_to_js x1757);(or_number_to_js
                                                 (fun
                                                    (x1759 :
                                                      Date.t or_string)
                                                    ->
                                                    or_string_to_js
                                                      Date.t_to_js x1759)
                                                 x1758);(or_number_to_js
                                                           (fun
                                                              (x1762 :
                                                                Date.t
                                                                  or_string)
                                                              ->
                                                              or_string_to_js
                                                                Date.t_to_js
                                                                x1762) x1761);(
                     NoParamCallback.t_to_js x1764)|])
    module Utimes =
      struct
        let (__promisify__ :
          PathLike.t ->
            atime:Date.t or_string or_number ->
              mtime:Date.t or_string or_number -> unit Promise.t)
          =
          fun (x1765 : PathLike.t) ->
            fun ~atime:(x1766 : Date.t or_string or_number) ->
              fun ~mtime:(x1769 : Date.t or_string or_number) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (Ojs.get_prop_ascii Import.fs "utimes")
                     "__promisify__"
                     [|(PathLike.t_to_js x1765);(or_number_to_js
                                                   (fun
                                                      (x1767 :
                                                        Date.t or_string)
                                                      ->
                                                      or_string_to_js
                                                        Date.t_to_js x1767)
                                                   x1766);(or_number_to_js
                                                             (fun
                                                                (x1770 :
                                                                  Date.t
                                                                    or_string)
                                                                ->
                                                                or_string_to_js
                                                                  Date.t_to_js
                                                                  x1770)
                                                             x1769)|])
      end
    let (utimes_sync :
      PathLike.t ->
        atime:Date.t or_string or_number ->
          mtime:Date.t or_string or_number -> unit)
      =
      fun (x1773 : PathLike.t) ->
        fun ~atime:(x1774 : Date.t or_string or_number) ->
          fun ~mtime:(x1777 : Date.t or_string or_number) ->
            ignore
              (Ojs.call Import.fs "utimesSync"
                 [|(PathLike.t_to_js x1773);(or_number_to_js
                                               (fun
                                                  (x1775 : Date.t or_string)
                                                  ->
                                                  or_string_to_js
                                                    Date.t_to_js x1775) x1774);(
                   or_number_to_js
                     (fun (x1778 : Date.t or_string) ->
                        or_string_to_js Date.t_to_js x1778) x1777)|])
    let (futimes :
      int ->
        atime:Date.t or_string or_number ->
          mtime:Date.t or_string or_number ->
            callback:NoParamCallback.t -> unit)
      =
      fun (x1780 : int) ->
        fun ~atime:(x1781 : Date.t or_string or_number) ->
          fun ~mtime:(x1784 : Date.t or_string or_number) ->
            fun ~callback:(x1787 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "futimes"
                   [|(Ojs.int_to_js x1780);(or_number_to_js
                                              (fun (x1782 : Date.t or_string)
                                                 ->
                                                 or_string_to_js Date.t_to_js
                                                   x1782) x1781);(or_number_to_js
                                                                    (
                                                                    fun
                                                                    (x1785 :
                                                                    Date.t
                                                                    or_string)
                                                                    ->
                                                                    or_string_to_js
                                                                    Date.t_to_js
                                                                    x1785)
                                                                    x1784);(
                     NoParamCallback.t_to_js x1787)|])
    module Futimes =
      struct
        let (__promisify__ :
          int ->
            atime:Date.t or_string or_number ->
              mtime:Date.t or_string or_number -> unit Promise.t)
          =
          fun (x1788 : int) ->
            fun ~atime:(x1789 : Date.t or_string or_number) ->
              fun ~mtime:(x1792 : Date.t or_string or_number) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (Ojs.get_prop_ascii Import.fs "futimes")
                     "__promisify__"
                     [|(Ojs.int_to_js x1788);(or_number_to_js
                                                (fun
                                                   (x1790 : Date.t or_string)
                                                   ->
                                                   or_string_to_js
                                                     Date.t_to_js x1790)
                                                x1789);(or_number_to_js
                                                          (fun
                                                             (x1793 :
                                                               Date.t
                                                                 or_string)
                                                             ->
                                                             or_string_to_js
                                                               Date.t_to_js
                                                               x1793) x1792)|])
      end
    let (futimes_sync :
      int ->
        atime:Date.t or_string or_number ->
          mtime:Date.t or_string or_number -> unit)
      =
      fun (x1796 : int) ->
        fun ~atime:(x1797 : Date.t or_string or_number) ->
          fun ~mtime:(x1800 : Date.t or_string or_number) ->
            ignore
              (Ojs.call Import.fs "futimesSync"
                 [|(Ojs.int_to_js x1796);(or_number_to_js
                                            (fun (x1798 : Date.t or_string)
                                               ->
                                               or_string_to_js Date.t_to_js
                                                 x1798) x1797);(or_number_to_js
                                                                  (fun
                                                                    (x1801 :
                                                                    Date.t
                                                                    or_string)
                                                                    ->
                                                                    or_string_to_js
                                                                    Date.t_to_js
                                                                    x1801)
                                                                  x1800)|])
    let (fsync : int -> callback:NoParamCallback.t -> unit) =
      fun (x1803 : int) ->
        fun ~callback:(x1804 : NoParamCallback.t) ->
          ignore
            (Ojs.call Import.fs "fsync"
               [|(Ojs.int_to_js x1803);(NoParamCallback.t_to_js x1804)|])
    module Fsync =
      struct
        let (__promisify__ : int -> unit Promise.t) =
          fun (x1805 : int) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.fs "fsync")
                 "__promisify__" [|(Ojs.int_to_js x1805)|])
      end
    let (fsync_sync : int -> unit) =
      fun (x1807 : int) ->
        ignore (Ojs.call Import.fs "fsyncSync" [|(Ojs.int_to_js x1807)|])
    let (write :
      int ->
        buffer:'TBuffer ->
          offset:int or_null_or_undefined ->
            length:int or_null_or_undefined ->
              position:int or_null_or_undefined ->
                callback:(err:ErrnoException.t or_null ->
                            written:int -> buffer:'TBuffer -> unit)
                  -> unit)
      =
      fun (x1808 : int) ->
        fun ~buffer:(x1809 : 'TBuffer) ->
          fun ~offset:(x1810 : int or_null_or_undefined) ->
            fun ~length:(x1812 : int or_null_or_undefined) ->
              fun ~position:(x1814 : int or_null_or_undefined) ->
                fun
                  ~callback:(x1816 :
                              err:ErrnoException.t or_null ->
                                written:int -> buffer:'TBuffer -> unit)
                  ->
                  ignore
                    (Ojs.call Import.fs "write"
                       [|(Ojs.int_to_js x1808);(Obj.magic x1809);(or_null_or_undefined_to_js
                                                                    Ojs.int_to_js
                                                                    x1810);(
                         or_null_or_undefined_to_js Ojs.int_to_js x1812);(
                         or_null_or_undefined_to_js Ojs.int_to_js x1814);(
                         Ojs.fun_to_js 3
                           (fun (x1817 : Ojs.t) ->
                              fun (x1819 : Ojs.t) ->
                                fun (x1820 : Ojs.t) ->
                                  x1816
                                    ~err:(or_null_of_js
                                            ErrnoException.t_of_js x1817)
                                    ~written:(Ojs.int_of_js x1819)
                                    ~buffer:(Obj.magic x1820)))|])
    let (write :
      int ->
        buffer:'TBuffer ->
          offset:int or_null_or_undefined ->
            length:int or_null_or_undefined ->
              callback:(err:ErrnoException.t or_null ->
                          written:int -> buffer:'TBuffer -> unit)
                -> unit)
      =
      fun (x1821 : int) ->
        fun ~buffer:(x1822 : 'TBuffer) ->
          fun ~offset:(x1823 : int or_null_or_undefined) ->
            fun ~length:(x1825 : int or_null_or_undefined) ->
              fun
                ~callback:(x1827 :
                            err:ErrnoException.t or_null ->
                              written:int -> buffer:'TBuffer -> unit)
                ->
                ignore
                  (Ojs.call Import.fs "write"
                     [|(Ojs.int_to_js x1821);(Obj.magic x1822);(or_null_or_undefined_to_js
                                                                  Ojs.int_to_js
                                                                  x1823);(
                       or_null_or_undefined_to_js Ojs.int_to_js x1825);(
                       Ojs.fun_to_js 3
                         (fun (x1828 : Ojs.t) ->
                            fun (x1830 : Ojs.t) ->
                              fun (x1831 : Ojs.t) ->
                                x1827
                                  ~err:(or_null_of_js ErrnoException.t_of_js
                                          x1828)
                                  ~written:(Ojs.int_of_js x1830)
                                  ~buffer:(Obj.magic x1831)))|])
    let (write :
      int ->
        buffer:'TBuffer ->
          offset:int or_null_or_undefined ->
            callback:(err:ErrnoException.t or_null ->
                        written:int -> buffer:'TBuffer -> unit)
              -> unit)
      =
      fun (x1832 : int) ->
        fun ~buffer:(x1833 : 'TBuffer) ->
          fun ~offset:(x1834 : int or_null_or_undefined) ->
            fun
              ~callback:(x1836 :
                          err:ErrnoException.t or_null ->
                            written:int -> buffer:'TBuffer -> unit)
              ->
              ignore
                (Ojs.call Import.fs "write"
                   [|(Ojs.int_to_js x1832);(Obj.magic x1833);(or_null_or_undefined_to_js
                                                                Ojs.int_to_js
                                                                x1834);(
                     Ojs.fun_to_js 3
                       (fun (x1837 : Ojs.t) ->
                          fun (x1839 : Ojs.t) ->
                            fun (x1840 : Ojs.t) ->
                              x1836
                                ~err:(or_null_of_js ErrnoException.t_of_js
                                        x1837) ~written:(Ojs.int_of_js x1839)
                                ~buffer:(Obj.magic x1840)))|])
    let (write :
      int ->
        buffer:'TBuffer ->
          callback:(err:ErrnoException.t or_null ->
                      written:int -> buffer:'TBuffer -> unit)
            -> unit)
      =
      fun (x1841 : int) ->
        fun ~buffer:(x1842 : 'TBuffer) ->
          fun
            ~callback:(x1843 :
                        err:ErrnoException.t or_null ->
                          written:int -> buffer:'TBuffer -> unit)
            ->
            ignore
              (Ojs.call Import.fs "write"
                 [|(Ojs.int_to_js x1841);(Obj.magic x1842);(Ojs.fun_to_js 3
                                                              (fun
                                                                 (x1844 :
                                                                   Ojs.t)
                                                                 ->
                                                                 fun
                                                                   (x1846 :
                                                                    Ojs.t)
                                                                   ->
                                                                   fun
                                                                    (x1847 :
                                                                    Ojs.t) ->
                                                                    x1843
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1844)
                                                                    ~written:(
                                                                    Ojs.int_of_js
                                                                    x1846)
                                                                    ~buffer:(
                                                                    Obj.magic
                                                                    x1847)))|])
    let (write :
      int ->
        string:string ->
          position:int or_null_or_undefined ->
            encoding:BufferEncoding.t or_null_or_undefined ->
              callback:(err:ErrnoException.t or_null ->
                          written:int -> str:string -> unit)
                -> unit)
      =
      fun (x1848 : int) ->
        fun ~string:(x1849 : string) ->
          fun ~position:(x1850 : int or_null_or_undefined) ->
            fun ~encoding:(x1852 : BufferEncoding.t or_null_or_undefined) ->
              fun
                ~callback:(x1854 :
                            err:ErrnoException.t or_null ->
                              written:int -> str:string -> unit)
                ->
                ignore
                  (Ojs.call Import.fs "write"
                     [|(Ojs.int_to_js x1848);(Ojs.string_to_js x1849);(
                       or_null_or_undefined_to_js Ojs.int_to_js x1850);(
                       or_null_or_undefined_to_js BufferEncoding.t_to_js
                         x1852);(Ojs.fun_to_js 3
                                   (fun (x1855 : Ojs.t) ->
                                      fun (x1857 : Ojs.t) ->
                                        fun (x1858 : Ojs.t) ->
                                          x1854
                                            ~err:(or_null_of_js
                                                    ErrnoException.t_of_js
                                                    x1855)
                                            ~written:(Ojs.int_of_js x1857)
                                            ~str:(Ojs.string_of_js x1858)))|])
    let (write :
      int ->
        string:string ->
          position:int or_null_or_undefined ->
            callback:(err:ErrnoException.t or_null ->
                        written:int -> str:string -> unit)
              -> unit)
      =
      fun (x1859 : int) ->
        fun ~string:(x1860 : string) ->
          fun ~position:(x1861 : int or_null_or_undefined) ->
            fun
              ~callback:(x1863 :
                          err:ErrnoException.t or_null ->
                            written:int -> str:string -> unit)
              ->
              ignore
                (Ojs.call Import.fs "write"
                   [|(Ojs.int_to_js x1859);(Ojs.string_to_js x1860);(
                     or_null_or_undefined_to_js Ojs.int_to_js x1861);(
                     Ojs.fun_to_js 3
                       (fun (x1864 : Ojs.t) ->
                          fun (x1866 : Ojs.t) ->
                            fun (x1867 : Ojs.t) ->
                              x1863
                                ~err:(or_null_of_js ErrnoException.t_of_js
                                        x1864) ~written:(Ojs.int_of_js x1866)
                                ~str:(Ojs.string_of_js x1867)))|])
    let (write :
      int ->
        string:string ->
          callback:(err:ErrnoException.t or_null ->
                      written:int -> str:string -> unit)
            -> unit)
      =
      fun (x1868 : int) ->
        fun ~string:(x1869 : string) ->
          fun
            ~callback:(x1870 :
                        err:ErrnoException.t or_null ->
                          written:int -> str:string -> unit)
            ->
            ignore
              (Ojs.call Import.fs "write"
                 [|(Ojs.int_to_js x1868);(Ojs.string_to_js x1869);(Ojs.fun_to_js
                                                                    3
                                                                    (fun
                                                                    (x1871 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1873 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x1874 :
                                                                    Ojs.t) ->
                                                                    x1870
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1871)
                                                                    ~written:(
                                                                    Ojs.int_of_js
                                                                    x1873)
                                                                    ~str:(
                                                                    Ojs.string_of_js
                                                                    x1874)))|])
    module Write =
      struct
        let (__promisify__ :
          int ->
            ?buffer:'TBuffer ->
              ?offset:int ->
                ?length:int ->
                  ?position:int or_null ->
                    unit -> AnonymousInterface3.t Promise.t)
          =
          fun (x1875 : int) ->
            fun ?buffer:(x1876 : 'TBuffer option) ->
              fun ?offset:(x1877 : int option) ->
                fun ?length:(x1878 : int option) ->
                  fun ?position:(x1879 : int or_null option) ->
                    fun () ->
                      Promise.t_of_js AnonymousInterface3.t_of_js
                        (let x1886 = Ojs.get_prop_ascii Import.fs "write" in
                         Ojs.call (Ojs.get_prop_ascii x1886 "__promisify__")
                           "apply"
                           [|x1886;((let x1880 =
                                       Ojs.new_obj
                                         (Ojs.get_prop_ascii Ojs.global
                                            "Array") [||] in
                                     ignore
                                       (Ojs.call x1880 "push"
                                          [|(Ojs.int_to_js x1875)|]);
                                     (match x1876 with
                                      | Some x1885 ->
                                          ignore
                                            (Ojs.call x1880 "push"
                                               [|(Obj.magic x1885)|])
                                      | None -> ());
                                     (match x1877 with
                                      | Some x1884 ->
                                          ignore
                                            (Ojs.call x1880 "push"
                                               [|(Ojs.int_to_js x1884)|])
                                      | None -> ());
                                     (match x1878 with
                                      | Some x1883 ->
                                          ignore
                                            (Ojs.call x1880 "push"
                                               [|(Ojs.int_to_js x1883)|])
                                      | None -> ());
                                     (match x1879 with
                                      | Some x1881 ->
                                          ignore
                                            (Ojs.call x1880 "push"
                                               [|(or_null_to_js Ojs.int_to_js
                                                    x1881)|])
                                      | None -> ());
                                     x1880))|])
        let (__promisify__ :
          int ->
            string:string ->
              ?position:int or_null ->
                ?encoding:BufferEncoding.t or_null ->
                  unit -> AnonymousInterface4.t Promise.t)
          =
          fun (x1888 : int) ->
            fun ~string:(x1889 : string) ->
              fun ?position:(x1890 : int or_null option) ->
                fun ?encoding:(x1891 : BufferEncoding.t or_null option) ->
                  fun () ->
                    Promise.t_of_js AnonymousInterface4.t_of_js
                      (let x1897 = Ojs.get_prop_ascii Import.fs "write" in
                       Ojs.call (Ojs.get_prop_ascii x1897 "__promisify__")
                         "apply"
                         [|x1897;((let x1892 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   ignore
                                     (Ojs.call x1892 "push"
                                        [|(Ojs.int_to_js x1888)|]);
                                   ignore
                                     (Ojs.call x1892 "push"
                                        [|(Ojs.string_to_js x1889)|]);
                                   (match x1890 with
                                    | Some x1895 ->
                                        ignore
                                          (Ojs.call x1892 "push"
                                             [|(or_null_to_js Ojs.int_to_js
                                                  x1895)|])
                                    | None -> ());
                                   (match x1891 with
                                    | Some x1893 ->
                                        ignore
                                          (Ojs.call x1892 "push"
                                             [|(or_null_to_js
                                                  BufferEncoding.t_to_js
                                                  x1893)|])
                                    | None -> ());
                                   x1892))|])
      end
    let (write_sync :
      int ->
        buffer:ArrayBufferView.t ->
          ?offset:int or_null ->
            ?length:int or_null -> ?position:int or_null -> unit -> int)
      =
      fun (x1899 : int) ->
        fun ~buffer:(x1900 : ArrayBufferView.t) ->
          fun ?offset:(x1901 : int or_null option) ->
            fun ?length:(x1902 : int or_null option) ->
              fun ?position:(x1903 : int or_null option) ->
                fun () ->
                  Ojs.int_of_js
                    (let x1911 = Import.fs in
                     Ojs.call (Ojs.get_prop_ascii x1911 "writeSync") "apply"
                       [|x1911;((let x1904 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x1904 "push"
                                      [|(Ojs.int_to_js x1899)|]);
                                 ignore
                                   (Ojs.call x1904 "push"
                                      [|(ArrayBufferView.t_to_js x1900)|]);
                                 (match x1901 with
                                  | Some x1909 ->
                                      ignore
                                        (Ojs.call x1904 "push"
                                           [|(or_null_to_js Ojs.int_to_js
                                                x1909)|])
                                  | None -> ());
                                 (match x1902 with
                                  | Some x1907 ->
                                      ignore
                                        (Ojs.call x1904 "push"
                                           [|(or_null_to_js Ojs.int_to_js
                                                x1907)|])
                                  | None -> ());
                                 (match x1903 with
                                  | Some x1905 ->
                                      ignore
                                        (Ojs.call x1904 "push"
                                           [|(or_null_to_js Ojs.int_to_js
                                                x1905)|])
                                  | None -> ());
                                 x1904))|])
    let (write_sync :
      int ->
        string:string ->
          ?position:int or_null ->
            ?encoding:BufferEncoding.t or_null -> unit -> int)
      =
      fun (x1912 : int) ->
        fun ~string:(x1913 : string) ->
          fun ?position:(x1914 : int or_null option) ->
            fun ?encoding:(x1915 : BufferEncoding.t or_null option) ->
              fun () ->
                Ojs.int_of_js
                  (let x1921 = Import.fs in
                   Ojs.call (Ojs.get_prop_ascii x1921 "writeSync") "apply"
                     [|x1921;((let x1916 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x1916 "push"
                                    [|(Ojs.int_to_js x1912)|]);
                               ignore
                                 (Ojs.call x1916 "push"
                                    [|(Ojs.string_to_js x1913)|]);
                               (match x1914 with
                                | Some x1919 ->
                                    ignore
                                      (Ojs.call x1916 "push"
                                         [|(or_null_to_js Ojs.int_to_js x1919)|])
                                | None -> ());
                               (match x1915 with
                                | Some x1917 ->
                                    ignore
                                      (Ojs.call x1916 "push"
                                         [|(or_null_to_js
                                              BufferEncoding.t_to_js x1917)|])
                                | None -> ());
                               x1916))|])
    let (read :
      int ->
        buffer:'TBuffer ->
          offset:int ->
            length:int ->
              position:int or_null ->
                callback:(err:ErrnoException.t or_null ->
                            bytes_read:int -> buffer:'TBuffer -> unit)
                  -> unit)
      =
      fun (x1922 : int) ->
        fun ~buffer:(x1923 : 'TBuffer) ->
          fun ~offset:(x1924 : int) ->
            fun ~length:(x1925 : int) ->
              fun ~position:(x1926 : int or_null) ->
                fun
                  ~callback:(x1928 :
                              err:ErrnoException.t or_null ->
                                bytes_read:int -> buffer:'TBuffer -> unit)
                  ->
                  ignore
                    (Ojs.call Import.fs "read"
                       [|(Ojs.int_to_js x1922);(Obj.magic x1923);(Ojs.int_to_js
                                                                    x1924);(
                         Ojs.int_to_js x1925);(or_null_to_js Ojs.int_to_js
                                                 x1926);(Ojs.fun_to_js 3
                                                           (fun
                                                              (x1929 : Ojs.t)
                                                              ->
                                                              fun
                                                                (x1931 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x1932 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x1928
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1929)
                                                                    ~bytes_read:(
                                                                    Ojs.int_of_js
                                                                    x1931)
                                                                    ~buffer:(
                                                                    Obj.magic
                                                                    x1932)))|])
    module Read =
      struct
        let (__promisify__ :
          int ->
            buffer:'TBuffer ->
              offset:int ->
                length:int ->
                  position:int or_null -> AnonymousInterface2.t Promise.t)
          =
          fun (x1933 : int) ->
            fun ~buffer:(x1934 : 'TBuffer) ->
              fun ~offset:(x1935 : int) ->
                fun ~length:(x1936 : int) ->
                  fun ~position:(x1937 : int or_null) ->
                    Promise.t_of_js AnonymousInterface2.t_of_js
                      (Ojs.call (Ojs.get_prop_ascii Import.fs "read")
                         "__promisify__"
                         [|(Ojs.int_to_js x1933);(Obj.magic x1934);(Ojs.int_to_js
                                                                    x1935);(
                           Ojs.int_to_js x1936);(or_null_to_js Ojs.int_to_js
                                                   x1937)|])
      end
    module ReadSyncOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x1941 : Ojs.t) -> x1941
        and t_to_js : t -> Ojs.t = fun (x1940 : Ojs.t) -> x1940
        let (get_offset : t -> int) =
          fun (x1942 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1942) "offset")
        let (set_offset : t -> int -> unit) =
          fun (x1943 : t) ->
            fun (x1944 : int) ->
              Ojs.set_prop_ascii (t_to_js x1943) "offset"
                (Ojs.int_to_js x1944)
        let (get_length : t -> int) =
          fun (x1945 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x1945) "length")
        let (set_length : t -> int -> unit) =
          fun (x1946 : t) ->
            fun (x1947 : int) ->
              Ojs.set_prop_ascii (t_to_js x1946) "length"
                (Ojs.int_to_js x1947)
        let (get_position : t -> int or_null) =
          fun (x1948 : t) ->
            or_null_of_js Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x1948) "position")
        let (set_position : t -> int or_null -> unit) =
          fun (x1950 : t) ->
            fun (x1951 : int or_null) ->
              Ojs.set_prop_ascii (t_to_js x1950) "position"
                (or_null_to_js Ojs.int_to_js x1951)
      end
    let (read_sync :
      int ->
        buffer:ArrayBufferView.t ->
          offset:int -> length:int -> position:int or_null -> int)
      =
      fun (x1953 : int) ->
        fun ~buffer:(x1954 : ArrayBufferView.t) ->
          fun ~offset:(x1955 : int) ->
            fun ~length:(x1956 : int) ->
              fun ~position:(x1957 : int or_null) ->
                Ojs.int_of_js
                  (Ojs.call Import.fs "readSync"
                     [|(Ojs.int_to_js x1953);(ArrayBufferView.t_to_js x1954);(
                       Ojs.int_to_js x1955);(Ojs.int_to_js x1956);(or_null_to_js
                                                                    Ojs.int_to_js
                                                                    x1957)|])
    let (read_sync :
      int ->
        buffer:ArrayBufferView.t -> ?opts:ReadSyncOptions.t -> unit -> int)
      =
      fun (x1959 : int) ->
        fun ~buffer:(x1960 : ArrayBufferView.t) ->
          fun ?opts:(x1961 : ReadSyncOptions.t option) ->
            fun () ->
              Ojs.int_of_js
                (let x1964 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x1964 "readSync") "apply"
                   [|x1964;((let x1962 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x1962 "push"
                                  [|(Ojs.int_to_js x1959)|]);
                             ignore
                               (Ojs.call x1962 "push"
                                  [|(ArrayBufferView.t_to_js x1960)|]);
                             (match x1961 with
                              | Some x1963 ->
                                  ignore
                                    (Ojs.call x1962 "push"
                                       [|(ReadSyncOptions.t_to_js x1963)|])
                              | None -> ());
                             x1962))|])
    let (read_file :
      PathLike.t or_number ->
        options:AnonymousInterface6.t or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null -> data:Buffer.t -> unit) ->
            unit)
      =
      fun (x1965 : PathLike.t or_number) ->
        fun ~options:(x1967 : AnonymousInterface6.t or_null_or_undefined) ->
          fun
            ~callback:(x1969 :
                        err:ErrnoException.t or_null -> data:Buffer.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readFile"
                 [|(or_number_to_js PathLike.t_to_js x1965);(or_null_or_undefined_to_js
                                                               AnonymousInterface6.t_to_js
                                                               x1967);(
                   Ojs.fun_to_js 2
                     (fun (x1970 : Ojs.t) ->
                        fun (x1972 : Ojs.t) ->
                          x1969
                            ~err:(or_null_of_js ErrnoException.t_of_js x1970)
                            ~data:(Buffer.t_of_js x1972)))|])
    let (read_file :
      PathLike.t or_number ->
        options:AnonymousInterface5.t or_string ->
          callback:(err:ErrnoException.t or_null -> data:string -> unit) ->
            unit)
      =
      fun (x1973 : PathLike.t or_number) ->
        fun ~options:(x1975 : AnonymousInterface5.t or_string) ->
          fun
            ~callback:(x1977 :
                        err:ErrnoException.t or_null -> data:string -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readFile"
                 [|(or_number_to_js PathLike.t_to_js x1973);(or_string_to_js
                                                               AnonymousInterface5.t_to_js
                                                               x1975);(
                   Ojs.fun_to_js 2
                     (fun (x1978 : Ojs.t) ->
                        fun (x1980 : Ojs.t) ->
                          x1977
                            ~err:(or_null_of_js ErrnoException.t_of_js x1978)
                            ~data:(Ojs.string_of_js x1980)))|])
    let (read_file :
      PathLike.t or_number ->
        options:(BaseEncodingOptions.t, AnonymousInterface12.t) intersection2
          or_string or_null_or_undefined ->
          callback:(err:ErrnoException.t or_null ->
                      data:Buffer.t or_string -> unit)
            -> unit)
      =
      fun (x1981 : PathLike.t or_number) ->
        fun
          ~options:(x1983 :
                     (BaseEncodingOptions.t, AnonymousInterface12.t)
                       intersection2 or_string or_null_or_undefined)
          ->
          fun
            ~callback:(x1988 :
                        err:ErrnoException.t or_null ->
                          data:Buffer.t or_string -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readFile"
                 [|(or_number_to_js PathLike.t_to_js x1981);(or_null_or_undefined_to_js
                                                               (fun
                                                                  (x1984 :
                                                                    (BaseEncodingOptions.t,
                                                                    AnonymousInterface12.t)
                                                                    intersection2
                                                                    or_string)
                                                                  ->
                                                                  or_string_to_js
                                                                    (
                                                                    fun
                                                                    (x1985 :
                                                                    (BaseEncodingOptions.t,
                                                                    AnonymousInterface12.t)
                                                                    intersection2)
                                                                    ->
                                                                    intersection2_to_js
                                                                    BaseEncodingOptions.t_to_js
                                                                    AnonymousInterface12.t_to_js
                                                                    x1985)
                                                                    x1984)
                                                               x1983);(
                   Ojs.fun_to_js 2
                     (fun (x1989 : Ojs.t) ->
                        fun (x1991 : Ojs.t) ->
                          x1988
                            ~err:(or_null_of_js ErrnoException.t_of_js x1989)
                            ~data:(or_string_of_js Buffer.t_of_js x1991)))|])
    let (read_file :
      PathLike.t or_number ->
        callback:(err:ErrnoException.t or_null -> data:Buffer.t -> unit) ->
          unit)
      =
      fun (x1993 : PathLike.t or_number) ->
        fun
          ~callback:(x1995 :
                      err:ErrnoException.t or_null -> data:Buffer.t -> unit)
          ->
          ignore
            (Ojs.call Import.fs "readFile"
               [|(or_number_to_js PathLike.t_to_js x1993);(Ojs.fun_to_js 2
                                                             (fun
                                                                (x1996 :
                                                                  Ojs.t)
                                                                ->
                                                                fun
                                                                  (x1998 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x1995
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x1996)
                                                                    ~data:(
                                                                    Buffer.t_of_js
                                                                    x1998)))|])
    module ReadFile =
      struct
        let (__promisify__ :
          PathLike.t or_number ->
            ?options:AnonymousInterface6.t or_null ->
              unit -> Buffer.t Promise.t)
          =
          fun (x1999 : PathLike.t or_number) ->
            fun ?options:(x2000 : AnonymousInterface6.t or_null option) ->
              fun () ->
                Promise.t_of_js Buffer.t_of_js
                  (let x2005 = Ojs.get_prop_ascii Import.fs "readFile" in
                   Ojs.call (Ojs.get_prop_ascii x2005 "__promisify__")
                     "apply"
                     [|x2005;((let x2001 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2001 "push"
                                    [|(or_number_to_js PathLike.t_to_js x1999)|]);
                               (match x2000 with
                                | Some x2002 ->
                                    ignore
                                      (Ojs.call x2001 "push"
                                         [|(or_null_to_js
                                              AnonymousInterface6.t_to_js
                                              x2002)|])
                                | None -> ());
                               x2001))|])
        let (__promisify__ :
          PathLike.t or_number ->
            options:AnonymousInterface5.t or_string -> string Promise.t)
          =
          fun (x2007 : PathLike.t or_number) ->
            fun ~options:(x2009 : AnonymousInterface5.t or_string) ->
              Promise.t_of_js Ojs.string_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.fs "readFile")
                   "__promisify__"
                   [|(or_number_to_js PathLike.t_to_js x2007);(or_string_to_js
                                                                 AnonymousInterface5.t_to_js
                                                                 x2009)|])
        let (__promisify__ :
          PathLike.t or_number ->
            ?options:(BaseEncodingOptions.t, AnonymousInterface12.t)
              intersection2 or_string or_null ->
              unit -> Buffer.t or_string Promise.t)
          =
          fun (x2012 : PathLike.t or_number) ->
            fun
              ?options:(x2013 :
                         (BaseEncodingOptions.t, AnonymousInterface12.t)
                           intersection2 or_string or_null option)
              ->
              fun () ->
                Promise.t_of_js
                  (fun (x2022 : Ojs.t) ->
                     or_string_of_js Buffer.t_of_js x2022)
                  (let x2021 = Ojs.get_prop_ascii Import.fs "readFile" in
                   Ojs.call (Ojs.get_prop_ascii x2021 "__promisify__")
                     "apply"
                     [|x2021;((let x2014 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2014 "push"
                                    [|(or_number_to_js PathLike.t_to_js x2012)|]);
                               (match x2013 with
                                | Some x2015 ->
                                    ignore
                                      (Ojs.call x2014 "push"
                                         [|(or_null_to_js
                                              (fun
                                                 (x2016 :
                                                   (BaseEncodingOptions.t,
                                                     AnonymousInterface12.t)
                                                     intersection2 or_string)
                                                 ->
                                                 or_string_to_js
                                                   (fun
                                                      (x2017 :
                                                        (BaseEncodingOptions.t,
                                                          AnonymousInterface12.t)
                                                          intersection2)
                                                      ->
                                                      intersection2_to_js
                                                        BaseEncodingOptions.t_to_js
                                                        AnonymousInterface12.t_to_js
                                                        x2017) x2016) x2015)|])
                                | None -> ());
                               x2014))|])
      end
    let (read_file_sync :
      PathLike.t or_number ->
        ?options:AnonymousInterface6.t -> unit -> Buffer.t)
      =
      fun (x2024 : PathLike.t or_number) ->
        fun ?options:(x2025 : AnonymousInterface6.t option) ->
          fun () ->
            Buffer.t_of_js
              (let x2029 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x2029 "readFileSync") "apply"
                 [|x2029;((let x2026 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2026 "push"
                                [|(or_number_to_js PathLike.t_to_js x2024)|]);
                           (match x2025 with
                            | Some x2027 ->
                                ignore
                                  (Ojs.call x2026 "push"
                                     [|(AnonymousInterface6.t_to_js x2027)|])
                            | None -> ());
                           x2026))|])
    let (read_file_sync :
      PathLike.t or_number ->
        options:(BufferEncoding.t, AnonymousInterface5.t) union2 -> string)
      =
      fun (x2030 : PathLike.t or_number) ->
        fun
          ~options:(x2032 : (BufferEncoding.t, AnonymousInterface5.t) union2)
          ->
          Ojs.string_of_js
            (Ojs.call Import.fs "readFileSync"
               [|(or_number_to_js PathLike.t_to_js x2030);(union2_to_js
                                                             BufferEncoding.t_to_js
                                                             AnonymousInterface5.t_to_js
                                                             x2032)|])
    let (read_file_sync :
      PathLike.t or_number ->
        ?options:BufferEncoding.t -> unit -> Buffer.t or_string)
      =
      fun (x2035 : PathLike.t or_number) ->
        fun ?options:(x2036 : BufferEncoding.t option) ->
          fun () ->
            or_string_of_js Buffer.t_of_js
              (let x2040 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x2040 "readFileSync") "apply"
                 [|x2040;((let x2037 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2037 "push"
                                [|(or_number_to_js PathLike.t_to_js x2035)|]);
                           (match x2036 with
                            | Some x2038 ->
                                ignore
                                  (Ojs.call x2037 "push"
                                     [|(BufferEncoding.t_to_js x2038)|])
                            | None -> ());
                           x2037))|])
    let (read_file_sync :
      PathLike.t -> ?options:BufferEncoding.t -> unit -> string) =
      fun (x2042 : PathLike.t) ->
        fun ?options:(x2043 : BufferEncoding.t option) ->
          fun () ->
            Ojs.string_of_js
              (let x2046 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x2046 "readFileSync") "apply"
                 [|x2046;((let x2044 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2044 "push"
                                [|(PathLike.t_to_js x2042)|]);
                           (match x2043 with
                            | Some x2045 ->
                                ignore
                                  (Ojs.call x2044 "push"
                                     [|(BufferEncoding.t_to_js x2045)|])
                            | None -> ());
                           x2044))|])
    module WriteFileOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2048 : Ojs.t) -> x2048
        and t_to_js : t -> Ojs.t = fun (x2047 : Ojs.t) -> x2047
      end
    let (write_file :
      PathLike.t or_number ->
        data:ArrayBufferView.t or_string ->
          options:WriteFileOptions.t -> callback:NoParamCallback.t -> unit)
      =
      fun (x2049 : PathLike.t or_number) ->
        fun ~data:(x2051 : ArrayBufferView.t or_string) ->
          fun ~options:(x2053 : WriteFileOptions.t) ->
            fun ~callback:(x2054 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "writeFile"
                   [|(or_number_to_js PathLike.t_to_js x2049);(or_string_to_js
                                                                 ArrayBufferView.t_to_js
                                                                 x2051);(
                     WriteFileOptions.t_to_js x2053);(NoParamCallback.t_to_js
                                                        x2054)|])
    let (write_file :
      PathLike.t or_number ->
        data:ArrayBufferView.t or_string ->
          callback:NoParamCallback.t -> unit)
      =
      fun (x2055 : PathLike.t or_number) ->
        fun ~data:(x2057 : ArrayBufferView.t or_string) ->
          fun ~callback:(x2059 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "writeFile"
                 [|(or_number_to_js PathLike.t_to_js x2055);(or_string_to_js
                                                               ArrayBufferView.t_to_js
                                                               x2057);(
                   NoParamCallback.t_to_js x2059)|])
    module WriteFile =
      struct
        let (__promisify__ :
          PathLike.t or_number ->
            data:ArrayBufferView.t or_string ->
              ?options:WriteFileOptions.t -> unit -> unit Promise.t)
          =
          fun (x2060 : PathLike.t or_number) ->
            fun ~data:(x2061 : ArrayBufferView.t or_string) ->
              fun ?options:(x2062 : WriteFileOptions.t option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x2067 = Ojs.get_prop_ascii Import.fs "writeFile" in
                     Ojs.call (Ojs.get_prop_ascii x2067 "__promisify__")
                       "apply"
                       [|x2067;((let x2063 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2063 "push"
                                      [|(or_number_to_js PathLike.t_to_js
                                           x2060)|]);
                                 ignore
                                   (Ojs.call x2063 "push"
                                      [|(or_string_to_js
                                           ArrayBufferView.t_to_js x2061)|]);
                                 (match x2062 with
                                  | Some x2064 ->
                                      ignore
                                        (Ojs.call x2063 "push"
                                           [|(WriteFileOptions.t_to_js x2064)|])
                                  | None -> ());
                                 x2063))|])
      end
    let (write_file_sync :
      PathLike.t or_number ->
        data:ArrayBufferView.t or_string ->
          ?options:WriteFileOptions.t -> unit -> unit)
      =
      fun (x2069 : PathLike.t or_number) ->
        fun ~data:(x2070 : ArrayBufferView.t or_string) ->
          fun ?options:(x2071 : WriteFileOptions.t option) ->
            fun () ->
              ignore
                (let x2076 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x2076 "writeFileSync") "apply"
                   [|x2076;((let x2072 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2072 "push"
                                  [|(or_number_to_js PathLike.t_to_js x2069)|]);
                             ignore
                               (Ojs.call x2072 "push"
                                  [|(or_string_to_js ArrayBufferView.t_to_js
                                       x2070)|]);
                             (match x2071 with
                              | Some x2073 ->
                                  ignore
                                    (Ojs.call x2072 "push"
                                       [|(WriteFileOptions.t_to_js x2073)|])
                              | None -> ());
                             x2072))|])
    let (append_file :
      file:string or_number ->
        data:Uint8Array.t or_string ->
          options:WriteFileOptions.t -> callback:NoParamCallback.t -> unit)
      =
      fun ~file:(x2077 : string or_number) ->
        fun ~data:(x2079 : Uint8Array.t or_string) ->
          fun ~options:(x2081 : WriteFileOptions.t) ->
            fun ~callback:(x2082 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "appendFile"
                   [|(or_number_to_js Ojs.string_to_js x2077);(or_string_to_js
                                                                 Uint8Array.t_to_js
                                                                 x2079);(
                     WriteFileOptions.t_to_js x2081);(NoParamCallback.t_to_js
                                                        x2082)|])
    let (append_file :
      file:string or_number ->
        data:Uint8Array.t or_string -> callback:NoParamCallback.t -> unit)
      =
      fun ~file:(x2083 : string or_number) ->
        fun ~data:(x2085 : Uint8Array.t or_string) ->
          fun ~callback:(x2087 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "appendFile"
                 [|(or_number_to_js Ojs.string_to_js x2083);(or_string_to_js
                                                               Uint8Array.t_to_js
                                                               x2085);(
                   NoParamCallback.t_to_js x2087)|])
    module AppendFile =
      struct
        let (__promisify__ :
          file:string or_number ->
            data:Uint8Array.t or_string ->
              ?options:WriteFileOptions.t -> unit -> unit Promise.t)
          =
          fun ~file:(x2088 : string or_number) ->
            fun ~data:(x2089 : Uint8Array.t or_string) ->
              fun ?options:(x2090 : WriteFileOptions.t option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x2095 = Ojs.get_prop_ascii Import.fs "appendFile" in
                     Ojs.call (Ojs.get_prop_ascii x2095 "__promisify__")
                       "apply"
                       [|x2095;((let x2091 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2091 "push"
                                      [|(or_number_to_js Ojs.string_to_js
                                           x2088)|]);
                                 ignore
                                   (Ojs.call x2091 "push"
                                      [|(or_string_to_js Uint8Array.t_to_js
                                           x2089)|]);
                                 (match x2090 with
                                  | Some x2092 ->
                                      ignore
                                        (Ojs.call x2091 "push"
                                           [|(WriteFileOptions.t_to_js x2092)|])
                                  | None -> ());
                                 x2091))|])
      end
    let (append_file_sync :
      file:string or_number ->
        data:Uint8Array.t or_string ->
          ?options:WriteFileOptions.t -> unit -> unit)
      =
      fun ~file:(x2097 : string or_number) ->
        fun ~data:(x2098 : Uint8Array.t or_string) ->
          fun ?options:(x2099 : WriteFileOptions.t option) ->
            fun () ->
              ignore
                (let x2104 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x2104 "appendFileSync") "apply"
                   [|x2104;((let x2100 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2100 "push"
                                  [|(or_number_to_js Ojs.string_to_js x2097)|]);
                             ignore
                               (Ojs.call x2100 "push"
                                  [|(or_string_to_js Uint8Array.t_to_js x2098)|]);
                             (match x2099 with
                              | Some x2101 ->
                                  ignore
                                    (Ojs.call x2100 "push"
                                       [|(WriteFileOptions.t_to_js x2101)|])
                              | None -> ());
                             x2100))|])
    let (watch_file :
      filename:string ->
        options:AnonymousInterface16.t or_undefined ->
          listener:(curr:Stats.t -> prev:Stats.t -> unit) -> unit)
      =
      fun ~filename:(x2105 : string) ->
        fun ~options:(x2106 : AnonymousInterface16.t or_undefined) ->
          fun ~listener:(x2108 : curr:Stats.t -> prev:Stats.t -> unit) ->
            ignore
              (Ojs.call Import.fs "watchFile"
                 [|(Ojs.string_to_js x2105);(or_undefined_to_js
                                               AnonymousInterface16.t_to_js
                                               x2106);(Ojs.fun_to_js 2
                                                         (fun (x2109 : Ojs.t)
                                                            ->
                                                            fun
                                                              (x2110 : Ojs.t)
                                                              ->
                                                              x2108
                                                                ~curr:(
                                                                Stats.t_of_js
                                                                  x2109)
                                                                ~prev:(
                                                                Stats.t_of_js
                                                                  x2110)))|])
    let (watch_file :
      filename:string ->
        listener:(curr:Stats.t -> prev:Stats.t -> unit) -> unit)
      =
      fun ~filename:(x2111 : string) ->
        fun ~listener:(x2112 : curr:Stats.t -> prev:Stats.t -> unit) ->
          ignore
            (Ojs.call Import.fs "watchFile"
               [|(Ojs.string_to_js x2111);(Ojs.fun_to_js 2
                                             (fun (x2113 : Ojs.t) ->
                                                fun (x2114 : Ojs.t) ->
                                                  x2112
                                                    ~curr:(Stats.t_of_js
                                                             x2113)
                                                    ~prev:(Stats.t_of_js
                                                             x2114)))|])
    let (unwatch_file :
      filename:string ->
        ?listener:(curr:Stats.t -> prev:Stats.t -> unit) -> unit -> unit)
      =
      fun ~filename:(x2115 : string) ->
        fun ?listener:(x2116 : (curr:Stats.t -> prev:Stats.t -> unit) option)
          ->
          fun () ->
            ignore
              (let x2121 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x2121 "unwatchFile") "apply"
                 [|x2121;((let x2117 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2117 "push"
                                [|(Ojs.string_to_js x2115)|]);
                           (match x2116 with
                            | Some x2118 ->
                                ignore
                                  (Ojs.call x2117 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x2119 : Ojs.t) ->
                                             fun (x2120 : Ojs.t) ->
                                               x2118
                                                 ~curr:(Stats.t_of_js x2119)
                                                 ~prev:(Stats.t_of_js x2120)))|])
                            | None -> ());
                           x2117))|])
    let (watch :
      filename:string ->
        options:(BufferEncoding.t, AnonymousInterface10.t) union2
          or_null_or_undefined ->
          ?listener:(event:[ `change  | `rename ] -> filename:string -> unit)
            -> unit -> FSWatcher.t)
      =
      fun ~filename:(x2122 : string) ->
        fun
          ~options:(x2123 :
                     (BufferEncoding.t, AnonymousInterface10.t) union2
                       or_null_or_undefined)
          ->
          fun
            ?listener:(x2124 :
                        (event:[ `change  | `rename ] ->
                           filename:string -> unit)
                          option)
            ->
            fun () ->
              FSWatcher.t_of_js
                (let x2133 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x2133 "watch") "apply"
                   [|x2133;((let x2125 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2125 "push"
                                  [|(Ojs.string_to_js x2122)|]);
                             ignore
                               (Ojs.call x2125 "push"
                                  [|(or_null_or_undefined_to_js
                                       (fun
                                          (x2130 :
                                            (BufferEncoding.t,
                                              AnonymousInterface10.t) union2)
                                          ->
                                          union2_to_js BufferEncoding.t_to_js
                                            AnonymousInterface10.t_to_js
                                            x2130) x2123)|]);
                             (match x2124 with
                              | Some x2126 ->
                                  ignore
                                    (Ojs.call x2125 "push"
                                       [|(Ojs.fun_to_js 2
                                            (fun (x2127 : Ojs.t) ->
                                               fun (x2129 : Ojs.t) ->
                                                 x2126
                                                   ~event:(let x2128 = x2127 in
                                                           match Ojs.string_of_js
                                                                   x2128
                                                           with
                                                           | "change" ->
                                                               `change
                                                           | "rename" ->
                                                               `rename
                                                           | _ ->
                                                               assert false)
                                                   ~filename:(Ojs.string_of_js
                                                                x2129)))|])
                              | None -> ());
                             x2125))|])
    let (watch :
      filename:string ->
        options:(AnonymousInterface8.t, [ `buffer ]) or_enum ->
          ?listener:(event:[ `change  | `rename ] ->
                       filename:Buffer.t -> unit)
            -> unit -> FSWatcher.t)
      =
      fun ~filename:(x2134 : string) ->
        fun ~options:(x2135 : (AnonymousInterface8.t, [ `buffer ]) or_enum)
          ->
          fun
            ?listener:(x2136 :
                        (event:[ `change  | `rename ] ->
                           filename:Buffer.t -> unit)
                          option)
            ->
            fun () ->
              FSWatcher.t_of_js
                (let x2144 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x2144 "watch") "apply"
                   [|x2144;((let x2137 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2137 "push"
                                  [|(Ojs.string_to_js x2134)|]);
                             ignore
                               (Ojs.call x2137 "push"
                                  [|(or_enum_to_js
                                       AnonymousInterface8.t_to_js
                                       (fun (x2143 : [ `buffer ]) ->
                                          match x2143 with
                                          | `buffer ->
                                              Ojs.string_to_js "buffer")
                                       x2135)|]);
                             (match x2136 with
                              | Some x2138 ->
                                  ignore
                                    (Ojs.call x2137 "push"
                                       [|(Ojs.fun_to_js 2
                                            (fun (x2139 : Ojs.t) ->
                                               fun (x2141 : Ojs.t) ->
                                                 x2138
                                                   ~event:(let x2140 = x2139 in
                                                           match Ojs.string_of_js
                                                                   x2140
                                                           with
                                                           | "change" ->
                                                               `change
                                                           | "rename" ->
                                                               `rename
                                                           | _ ->
                                                               assert false)
                                                   ~filename:(Buffer.t_of_js
                                                                x2141)))|])
                              | None -> ());
                             x2137))|])
    let (watch :
      filename:string ->
        options:AnonymousInterface10.t or_string or_null ->
          ?listener:(event:[ `change  | `rename ] ->
                       filename:Buffer.t or_string -> unit)
            -> unit -> FSWatcher.t)
      =
      fun ~filename:(x2145 : string) ->
        fun ~options:(x2146 : AnonymousInterface10.t or_string or_null) ->
          fun
            ?listener:(x2147 :
                        (event:[ `change  | `rename ] ->
                           filename:Buffer.t or_string -> unit)
                          option)
            ->
            fun () ->
              FSWatcher.t_of_js
                (let x2156 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x2156 "watch") "apply"
                   [|x2156;((let x2148 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2148 "push"
                                  [|(Ojs.string_to_js x2145)|]);
                             ignore
                               (Ojs.call x2148 "push"
                                  [|(or_null_to_js
                                       (fun
                                          (x2154 :
                                            AnonymousInterface10.t or_string)
                                          ->
                                          or_string_to_js
                                            AnonymousInterface10.t_to_js
                                            x2154) x2146)|]);
                             (match x2147 with
                              | Some x2149 ->
                                  ignore
                                    (Ojs.call x2148 "push"
                                       [|(Ojs.fun_to_js 2
                                            (fun (x2150 : Ojs.t) ->
                                               fun (x2152 : Ojs.t) ->
                                                 x2149
                                                   ~event:(let x2151 = x2150 in
                                                           match Ojs.string_of_js
                                                                   x2151
                                                           with
                                                           | "change" ->
                                                               `change
                                                           | "rename" ->
                                                               `rename
                                                           | _ ->
                                                               assert false)
                                                   ~filename:(or_string_of_js
                                                                Buffer.t_of_js
                                                                x2152)))|])
                              | None -> ());
                             x2148))|])
    let (watch :
      filename:string ->
        ?listener:(event:[ `change  | `rename ] -> filename:string -> any) ->
          unit -> FSWatcher.t)
      =
      fun ~filename:(x2157 : string) ->
        fun
          ?listener:(x2158 :
                      (event:[ `change  | `rename ] -> filename:string -> any)
                        option)
          ->
          fun () ->
            FSWatcher.t_of_js
              (let x2164 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x2164 "watch") "apply"
                 [|x2164;((let x2159 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2159 "push"
                                [|(Ojs.string_to_js x2157)|]);
                           (match x2158 with
                            | Some x2160 ->
                                ignore
                                  (Ojs.call x2159 "push"
                                     [|(Ojs.fun_to_js 2
                                          (fun (x2161 : Ojs.t) ->
                                             fun (x2163 : Ojs.t) ->
                                               any_to_js
                                                 (x2160
                                                    ~event:(let x2162 = x2161 in
                                                            match Ojs.string_of_js
                                                                    x2162
                                                            with
                                                            | "change" ->
                                                                `change
                                                            | "rename" ->
                                                                `rename
                                                            | _ ->
                                                                assert false)
                                                    ~filename:(Ojs.string_of_js
                                                                 x2163))))|])
                            | None -> ());
                           x2159))|])
    let (exists : PathLike.t -> callback:(exists:bool -> unit) -> unit) =
      fun (x2165 : PathLike.t) ->
        fun ~callback:(x2166 : exists:bool -> unit) ->
          ignore
            (Ojs.call Import.fs "exists"
               [|(PathLike.t_to_js x2165);(Ojs.fun_to_js 1
                                             (fun (x2167 : Ojs.t) ->
                                                x2166
                                                  ~exists:(Ojs.bool_of_js
                                                             x2167)))|])
    module Exists =
      struct
        let (__promisify__ : PathLike.t -> bool Promise.t) =
          fun (x2168 : PathLike.t) ->
            Promise.t_of_js Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.fs "exists")
                 "__promisify__" [|(PathLike.t_to_js x2168)|])
      end
    let (exists_sync : PathLike.t -> bool) =
      fun (x2170 : PathLike.t) ->
        Ojs.bool_of_js
          (Ojs.call Import.fs "existsSync" [|(PathLike.t_to_js x2170)|])
    module Constants =
      struct
        let (f_ok : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "F_OK")
        let (r_ok : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "R_OK")
        let (w_ok : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "W_OK")
        let (x_ok : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "X_OK")
        let (c_opyfile_excl : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "COPYFILE_EXCL")
        let (c_opyfile_ficlone : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "COPYFILE_FICLONE")
        let (c_opyfile_ficlone_force : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "COPYFILE_FICLONE_FORCE")
        let (o_rdonly : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_RDONLY")
        let (o_wronly : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_WRONLY")
        let (o_rdwr : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_RDWR")
        let (o_creat : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_CREAT")
        let (o_excl : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_EXCL")
        let (o_noctty : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_NOCTTY")
        let (o_trunc : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_TRUNC")
        let (o_append : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_APPEND")
        let (o_directory : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_DIRECTORY")
        let (o_noatime : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_NOATIME")
        let (o_nofollow : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_NOFOLLOW")
        let (o_sync : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_SYNC")
        let (o_dsync : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_DSYNC")
        let (o_symlink : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_SYMLINK")
        let (o_direct : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_DIRECT")
        let (o_nonblock : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "O_NONBLOCK")
        let (s_ifmt : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IFMT")
        let (s_ifreg : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IFREG")
        let (s_ifdir : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IFDIR")
        let (s_ifchr : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IFCHR")
        let (s_ifblk : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IFBLK")
        let (s_ififo : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IFIFO")
        let (s_iflnk : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IFLNK")
        let (s_ifsock : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IFSOCK")
        let (s_irwxu : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IRWXU")
        let (s_irusr : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IRUSR")
        let (s_iwusr : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IWUSR")
        let (s_ixusr : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IXUSR")
        let (s_irwxg : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IRWXG")
        let (s_irgrp : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IRGRP")
        let (s_iwgrp : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IWGRP")
        let (s_ixgrp : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IXGRP")
        let (s_irwxo : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IRWXO")
        let (s_iroth : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IROTH")
        let (s_iwoth : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IWOTH")
        let (s_ixoth : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "S_IXOTH")
        let (u_v_o_filemap_fs : int) =
          Ojs.int_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.fs "constants")
               "UV_O_FILEMAP_FS")
      end
    let (access :
      PathLike.t ->
        mode:int or_undefined -> callback:NoParamCallback.t -> unit)
      =
      fun (x2171 : PathLike.t) ->
        fun ~mode:(x2172 : int or_undefined) ->
          fun ~callback:(x2174 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "access"
                 [|(PathLike.t_to_js x2171);(or_undefined_to_js Ojs.int_to_js
                                               x2172);(NoParamCallback.t_to_js
                                                         x2174)|])
    let (access : PathLike.t -> NoParamCallback.t -> unit) =
      fun (x2175 : PathLike.t) ->
        fun (x2176 : NoParamCallback.t) ->
          ignore
            (Ojs.call Import.fs "access"
               [|(PathLike.t_to_js x2175);(NoParamCallback.t_to_js x2176)|])
    module Access =
      struct
        let (__promisify__ :
          PathLike.t -> ?mode:int -> unit -> unit Promise.t) =
          fun (x2177 : PathLike.t) ->
            fun ?mode:(x2178 : int option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x2181 = Ojs.get_prop_ascii Import.fs "access" in
                   Ojs.call (Ojs.get_prop_ascii x2181 "__promisify__")
                     "apply"
                     [|x2181;((let x2179 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2179 "push"
                                    [|(PathLike.t_to_js x2177)|]);
                               (match x2178 with
                                | Some x2180 ->
                                    ignore
                                      (Ojs.call x2179 "push"
                                         [|(Ojs.int_to_js x2180)|])
                                | None -> ());
                               x2179))|])
      end
    let (access_sync : PathLike.t -> ?mode:int -> unit -> unit) =
      fun (x2183 : PathLike.t) ->
        fun ?mode:(x2184 : int option) ->
          fun () ->
            ignore
              (let x2187 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x2187 "accessSync") "apply"
                 [|x2187;((let x2185 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2185 "push"
                                [|(PathLike.t_to_js x2183)|]);
                           (match x2184 with
                            | Some x2186 ->
                                ignore
                                  (Ojs.call x2185 "push"
                                     [|(Ojs.int_to_js x2186)|])
                            | None -> ());
                           x2185))|])
    let (create_read_stream :
      PathLike.t ->
        ?options:AnonymousInterface13.t or_string -> unit -> ReadStream.t)
      =
      fun (x2188 : PathLike.t) ->
        fun ?options:(x2189 : AnonymousInterface13.t or_string option) ->
          fun () ->
            ReadStream.t_of_js
              (let x2193 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x2193 "createReadStream") "apply"
                 [|x2193;((let x2190 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2190 "push"
                                [|(PathLike.t_to_js x2188)|]);
                           (match x2189 with
                            | Some x2191 ->
                                ignore
                                  (Ojs.call x2190 "push"
                                     [|(or_string_to_js
                                          AnonymousInterface13.t_to_js x2191)|])
                            | None -> ());
                           x2190))|])
    let (create_write_stream :
      PathLike.t ->
        ?options:AnonymousInterface14.t or_string -> unit -> WriteStream.t)
      =
      fun (x2194 : PathLike.t) ->
        fun ?options:(x2195 : AnonymousInterface14.t or_string option) ->
          fun () ->
            WriteStream.t_of_js
              (let x2199 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x2199 "createWriteStream")
                 "apply"
                 [|x2199;((let x2196 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2196 "push"
                                [|(PathLike.t_to_js x2194)|]);
                           (match x2195 with
                            | Some x2197 ->
                                ignore
                                  (Ojs.call x2196 "push"
                                     [|(or_string_to_js
                                          AnonymousInterface14.t_to_js x2197)|])
                            | None -> ());
                           x2196))|])
    let (fdatasync : int -> NoParamCallback.t -> unit) =
      fun (x2200 : int) ->
        fun (x2201 : NoParamCallback.t) ->
          ignore
            (Ojs.call Import.fs "fdatasync"
               [|(Ojs.int_to_js x2200);(NoParamCallback.t_to_js x2201)|])
    module Fdatasync =
      struct
        let (__promisify__ : int -> unit Promise.t) =
          fun (x2202 : int) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.fs "fdatasync")
                 "__promisify__" [|(Ojs.int_to_js x2202)|])
      end
    let (fdatasync_sync : int -> unit) =
      fun (x2204 : int) ->
        ignore (Ojs.call Import.fs "fdatasyncSync" [|(Ojs.int_to_js x2204)|])
    let (copy_file :
      src:string -> dest:string -> callback:NoParamCallback.t -> unit) =
      fun ~src:(x2205 : string) ->
        fun ~dest:(x2206 : string) ->
          fun ~callback:(x2207 : NoParamCallback.t) ->
            ignore
              (Ojs.call Import.fs "copyFile"
                 [|(Ojs.string_to_js x2205);(Ojs.string_to_js x2206);(
                   NoParamCallback.t_to_js x2207)|])
    let (copy_file :
      src:string ->
        dest:string -> flags:int -> callback:NoParamCallback.t -> unit)
      =
      fun ~src:(x2208 : string) ->
        fun ~dest:(x2209 : string) ->
          fun ~flags:(x2210 : int) ->
            fun ~callback:(x2211 : NoParamCallback.t) ->
              ignore
                (Ojs.call Import.fs "copyFile"
                   [|(Ojs.string_to_js x2208);(Ojs.string_to_js x2209);(
                     Ojs.int_to_js x2210);(NoParamCallback.t_to_js x2211)|])
    module CopyFile =
      struct
        let (__promisify__ :
          src:string -> dst:string -> ?flags:int -> unit -> unit Promise.t) =
          fun ~src:(x2212 : string) ->
            fun ~dst:(x2213 : string) ->
              fun ?flags:(x2214 : int option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x2217 = Ojs.get_prop_ascii Import.fs "copyFile" in
                     Ojs.call (Ojs.get_prop_ascii x2217 "__promisify__")
                       "apply"
                       [|x2217;((let x2215 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2215 "push"
                                      [|(Ojs.string_to_js x2212)|]);
                                 ignore
                                   (Ojs.call x2215 "push"
                                      [|(Ojs.string_to_js x2213)|]);
                                 (match x2214 with
                                  | Some x2216 ->
                                      ignore
                                        (Ojs.call x2215 "push"
                                           [|(Ojs.int_to_js x2216)|])
                                  | None -> ());
                                 x2215))|])
      end
    let (copy_file_sync :
      src:string -> dest:string -> ?flags:int -> unit -> unit) =
      fun ~src:(x2219 : string) ->
        fun ~dest:(x2220 : string) ->
          fun ?flags:(x2221 : int option) ->
            fun () ->
              ignore
                (let x2224 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x2224 "copyFileSync") "apply"
                   [|x2224;((let x2222 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2222 "push"
                                  [|(Ojs.string_to_js x2219)|]);
                             ignore
                               (Ojs.call x2222 "push"
                                  [|(Ojs.string_to_js x2220)|]);
                             (match x2221 with
                              | Some x2223 ->
                                  ignore
                                    (Ojs.call x2222 "push"
                                       [|(Ojs.int_to_js x2223)|])
                              | None -> ());
                             x2222))|])
    let (writev :
      int ->
        buffers:ArrayBufferView.t list ->
          cb:(err:ErrnoException.t or_null ->
                bytes_written:int -> buffers:ArrayBufferView.t list -> unit)
            -> unit)
      =
      fun (x2225 : int) ->
        fun ~buffers:(x2226 : ArrayBufferView.t list) ->
          fun
            ~cb:(x2228 :
                  err:ErrnoException.t or_null ->
                    bytes_written:int ->
                      buffers:ArrayBufferView.t list -> unit)
            ->
            ignore
              (Ojs.call Import.fs "writev"
                 [|(Ojs.int_to_js x2225);(Ojs.list_to_js
                                            ArrayBufferView.t_to_js x2226);(
                   Ojs.fun_to_js 3
                     (fun (x2229 : Ojs.t) ->
                        fun (x2231 : Ojs.t) ->
                          fun (x2232 : Ojs.t) ->
                            x2228
                              ~err:(or_null_of_js ErrnoException.t_of_js
                                      x2229)
                              ~bytes_written:(Ojs.int_of_js x2231)
                              ~buffers:(Ojs.list_of_js
                                          ArrayBufferView.t_of_js x2232)))|])
    let (writev :
      int ->
        buffers:ArrayBufferView.t list ->
          position:int ->
            cb:(err:ErrnoException.t or_null ->
                  bytes_written:int -> buffers:ArrayBufferView.t list -> unit)
              -> unit)
      =
      fun (x2234 : int) ->
        fun ~buffers:(x2235 : ArrayBufferView.t list) ->
          fun ~position:(x2237 : int) ->
            fun
              ~cb:(x2238 :
                    err:ErrnoException.t or_null ->
                      bytes_written:int ->
                        buffers:ArrayBufferView.t list -> unit)
              ->
              ignore
                (Ojs.call Import.fs "writev"
                   [|(Ojs.int_to_js x2234);(Ojs.list_to_js
                                              ArrayBufferView.t_to_js x2235);(
                     Ojs.int_to_js x2237);(Ojs.fun_to_js 3
                                             (fun (x2239 : Ojs.t) ->
                                                fun (x2241 : Ojs.t) ->
                                                  fun (x2242 : Ojs.t) ->
                                                    x2238
                                                      ~err:(or_null_of_js
                                                              ErrnoException.t_of_js
                                                              x2239)
                                                      ~bytes_written:(
                                                      Ojs.int_of_js x2241)
                                                      ~buffers:(Ojs.list_of_js
                                                                  ArrayBufferView.t_of_js
                                                                  x2242)))|])
    module WriteVResult =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2245 : Ojs.t) -> x2245
        and t_to_js : t -> Ojs.t = fun (x2244 : Ojs.t) -> x2244
        let (get_bytes_written : t -> int) =
          fun (x2246 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2246) "bytesWritten")
        let (set_bytes_written : t -> int -> unit) =
          fun (x2247 : t) ->
            fun (x2248 : int) ->
              Ojs.set_prop_ascii (t_to_js x2247) "bytesWritten"
                (Ojs.int_to_js x2248)
        let (get_buffers : t -> ArrayBufferView.t list) =
          fun (x2249 : t) ->
            Ojs.list_of_js ArrayBufferView.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2249) "buffers")
        let (set_buffers : t -> ArrayBufferView.t list -> unit) =
          fun (x2251 : t) ->
            fun (x2252 : ArrayBufferView.t list) ->
              Ojs.set_prop_ascii (t_to_js x2251) "buffers"
                (Ojs.list_to_js ArrayBufferView.t_to_js x2252)
      end
    module Writev =
      struct
        let (__promisify__ :
          int ->
            buffers:ArrayBufferView.t list ->
              ?position:int -> unit -> WriteVResult.t Promise.t)
          =
          fun (x2254 : int) ->
            fun ~buffers:(x2255 : ArrayBufferView.t list) ->
              fun ?position:(x2256 : int option) ->
                fun () ->
                  Promise.t_of_js WriteVResult.t_of_js
                    (let x2260 = Ojs.get_prop_ascii Import.fs "writev" in
                     Ojs.call (Ojs.get_prop_ascii x2260 "__promisify__")
                       "apply"
                       [|x2260;((let x2257 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2257 "push"
                                      [|(Ojs.int_to_js x2254)|]);
                                 ignore
                                   (Ojs.call x2257 "push"
                                      [|(Ojs.list_to_js
                                           ArrayBufferView.t_to_js x2255)|]);
                                 (match x2256 with
                                  | Some x2258 ->
                                      ignore
                                        (Ojs.call x2257 "push"
                                           [|(Ojs.int_to_js x2258)|])
                                  | None -> ());
                                 x2257))|])
      end
    let (writev_sync :
      int -> buffers:ArrayBufferView.t list -> ?position:int -> unit -> int)
      =
      fun (x2262 : int) ->
        fun ~buffers:(x2263 : ArrayBufferView.t list) ->
          fun ?position:(x2264 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x2268 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x2268 "writevSync") "apply"
                   [|x2268;((let x2265 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2265 "push"
                                  [|(Ojs.int_to_js x2262)|]);
                             ignore
                               (Ojs.call x2265 "push"
                                  [|(Ojs.list_to_js ArrayBufferView.t_to_js
                                       x2263)|]);
                             (match x2264 with
                              | Some x2266 ->
                                  ignore
                                    (Ojs.call x2265 "push"
                                       [|(Ojs.int_to_js x2266)|])
                              | None -> ());
                             x2265))|])
    let (readv :
      int ->
        buffers:ArrayBufferView.t list ->
          cb:(err:ErrnoException.t or_null ->
                bytes_read:int -> buffers:ArrayBufferView.t list -> unit)
            -> unit)
      =
      fun (x2269 : int) ->
        fun ~buffers:(x2270 : ArrayBufferView.t list) ->
          fun
            ~cb:(x2272 :
                  err:ErrnoException.t or_null ->
                    bytes_read:int -> buffers:ArrayBufferView.t list -> unit)
            ->
            ignore
              (Ojs.call Import.fs "readv"
                 [|(Ojs.int_to_js x2269);(Ojs.list_to_js
                                            ArrayBufferView.t_to_js x2270);(
                   Ojs.fun_to_js 3
                     (fun (x2273 : Ojs.t) ->
                        fun (x2275 : Ojs.t) ->
                          fun (x2276 : Ojs.t) ->
                            x2272
                              ~err:(or_null_of_js ErrnoException.t_of_js
                                      x2273)
                              ~bytes_read:(Ojs.int_of_js x2275)
                              ~buffers:(Ojs.list_of_js
                                          ArrayBufferView.t_of_js x2276)))|])
    let (readv :
      int ->
        buffers:ArrayBufferView.t list ->
          position:int ->
            cb:(err:ErrnoException.t or_null ->
                  bytes_read:int -> buffers:ArrayBufferView.t list -> unit)
              -> unit)
      =
      fun (x2278 : int) ->
        fun ~buffers:(x2279 : ArrayBufferView.t list) ->
          fun ~position:(x2281 : int) ->
            fun
              ~cb:(x2282 :
                    err:ErrnoException.t or_null ->
                      bytes_read:int ->
                        buffers:ArrayBufferView.t list -> unit)
              ->
              ignore
                (Ojs.call Import.fs "readv"
                   [|(Ojs.int_to_js x2278);(Ojs.list_to_js
                                              ArrayBufferView.t_to_js x2279);(
                     Ojs.int_to_js x2281);(Ojs.fun_to_js 3
                                             (fun (x2283 : Ojs.t) ->
                                                fun (x2285 : Ojs.t) ->
                                                  fun (x2286 : Ojs.t) ->
                                                    x2282
                                                      ~err:(or_null_of_js
                                                              ErrnoException.t_of_js
                                                              x2283)
                                                      ~bytes_read:(Ojs.int_of_js
                                                                    x2285)
                                                      ~buffers:(Ojs.list_of_js
                                                                  ArrayBufferView.t_of_js
                                                                  x2286)))|])
    module ReadVResult =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2289 : Ojs.t) -> x2289
        and t_to_js : t -> Ojs.t = fun (x2288 : Ojs.t) -> x2288
        let (get_bytes_read : t -> int) =
          fun (x2290 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2290) "bytesRead")
        let (set_bytes_read : t -> int -> unit) =
          fun (x2291 : t) ->
            fun (x2292 : int) ->
              Ojs.set_prop_ascii (t_to_js x2291) "bytesRead"
                (Ojs.int_to_js x2292)
        let (get_buffers : t -> ArrayBufferView.t list) =
          fun (x2293 : t) ->
            Ojs.list_of_js ArrayBufferView.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2293) "buffers")
        let (set_buffers : t -> ArrayBufferView.t list -> unit) =
          fun (x2295 : t) ->
            fun (x2296 : ArrayBufferView.t list) ->
              Ojs.set_prop_ascii (t_to_js x2295) "buffers"
                (Ojs.list_to_js ArrayBufferView.t_to_js x2296)
      end
    module Readv =
      struct
        let (__promisify__ :
          int ->
            buffers:ArrayBufferView.t list ->
              ?position:int -> unit -> ReadVResult.t Promise.t)
          =
          fun (x2298 : int) ->
            fun ~buffers:(x2299 : ArrayBufferView.t list) ->
              fun ?position:(x2300 : int option) ->
                fun () ->
                  Promise.t_of_js ReadVResult.t_of_js
                    (let x2304 = Ojs.get_prop_ascii Import.fs "readv" in
                     Ojs.call (Ojs.get_prop_ascii x2304 "__promisify__")
                       "apply"
                       [|x2304;((let x2301 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 ignore
                                   (Ojs.call x2301 "push"
                                      [|(Ojs.int_to_js x2298)|]);
                                 ignore
                                   (Ojs.call x2301 "push"
                                      [|(Ojs.list_to_js
                                           ArrayBufferView.t_to_js x2299)|]);
                                 (match x2300 with
                                  | Some x2302 ->
                                      ignore
                                        (Ojs.call x2301 "push"
                                           [|(Ojs.int_to_js x2302)|])
                                  | None -> ());
                                 x2301))|])
      end
    let (readv_sync :
      int -> buffers:ArrayBufferView.t list -> ?position:int -> unit -> int)
      =
      fun (x2306 : int) ->
        fun ~buffers:(x2307 : ArrayBufferView.t list) ->
          fun ?position:(x2308 : int option) ->
            fun () ->
              Ojs.int_of_js
                (let x2312 = Import.fs in
                 Ojs.call (Ojs.get_prop_ascii x2312 "readvSync") "apply"
                   [|x2312;((let x2309 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x2309 "push"
                                  [|(Ojs.int_to_js x2306)|]);
                             ignore
                               (Ojs.call x2309 "push"
                                  [|(Ojs.list_to_js ArrayBufferView.t_to_js
                                       x2307)|]);
                             (match x2308 with
                              | Some x2310 ->
                                  ignore
                                    (Ojs.call x2309 "push"
                                       [|(Ojs.int_to_js x2310)|])
                              | None -> ());
                             x2309))|])
    module OpenDirOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2314 : Ojs.t) -> x2314
        and t_to_js : t -> Ojs.t = fun (x2313 : Ojs.t) -> x2313
        let (get_encoding : t -> BufferEncoding.t) =
          fun (x2315 : t) ->
            BufferEncoding.t_of_js
              (Ojs.get_prop_ascii (t_to_js x2315) "encoding")
        let (set_encoding : t -> BufferEncoding.t -> unit) =
          fun (x2316 : t) ->
            fun (x2317 : BufferEncoding.t) ->
              Ojs.set_prop_ascii (t_to_js x2316) "encoding"
                (BufferEncoding.t_to_js x2317)
        let (get_buffer_size : t -> int) =
          fun (x2318 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x2318) "bufferSize")
        let (set_buffer_size : t -> int -> unit) =
          fun (x2319 : t) ->
            fun (x2320 : int) ->
              Ojs.set_prop_ascii (t_to_js x2319) "bufferSize"
                (Ojs.int_to_js x2320)
      end
    let (opendir_sync :
      PathLike.t -> ?options:OpenDirOptions.t -> unit -> Dir.t) =
      fun (x2321 : PathLike.t) ->
        fun ?options:(x2322 : OpenDirOptions.t option) ->
          fun () ->
            Dir.t_of_js
              (let x2325 = Import.fs in
               Ojs.call (Ojs.get_prop_ascii x2325 "opendirSync") "apply"
                 [|x2325;((let x2323 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore
                             (Ojs.call x2323 "push"
                                [|(PathLike.t_to_js x2321)|]);
                           (match x2322 with
                            | Some x2324 ->
                                ignore
                                  (Ojs.call x2323 "push"
                                     [|(OpenDirOptions.t_to_js x2324)|])
                            | None -> ());
                           x2323))|])
    let (opendir :
      PathLike.t ->
        cb:(err:ErrnoException.t or_null -> dir:Dir.t -> unit) -> unit)
      =
      fun (x2326 : PathLike.t) ->
        fun ~cb:(x2327 : err:ErrnoException.t or_null -> dir:Dir.t -> unit)
          ->
          ignore
            (Ojs.call Import.fs "opendir"
               [|(PathLike.t_to_js x2326);(Ojs.fun_to_js 2
                                             (fun (x2328 : Ojs.t) ->
                                                fun (x2330 : Ojs.t) ->
                                                  x2327
                                                    ~err:(or_null_of_js
                                                            ErrnoException.t_of_js
                                                            x2328)
                                                    ~dir:(Dir.t_of_js x2330)))|])
    let (opendir :
      PathLike.t ->
        options:OpenDirOptions.t ->
          cb:(err:ErrnoException.t or_null -> dir:Dir.t -> unit) -> unit)
      =
      fun (x2331 : PathLike.t) ->
        fun ~options:(x2332 : OpenDirOptions.t) ->
          fun ~cb:(x2333 : err:ErrnoException.t or_null -> dir:Dir.t -> unit)
            ->
            ignore
              (Ojs.call Import.fs "opendir"
                 [|(PathLike.t_to_js x2331);(OpenDirOptions.t_to_js x2332);(
                   Ojs.fun_to_js 2
                     (fun (x2334 : Ojs.t) ->
                        fun (x2336 : Ojs.t) ->
                          x2333
                            ~err:(or_null_of_js ErrnoException.t_of_js x2334)
                            ~dir:(Dir.t_of_js x2336)))|])
    module Opendir =
      struct
        let (__promisify__ :
          PathLike.t -> ?options:OpenDirOptions.t -> unit -> Dir.t Promise.t)
          =
          fun (x2337 : PathLike.t) ->
            fun ?options:(x2338 : OpenDirOptions.t option) ->
              fun () ->
                Promise.t_of_js Dir.t_of_js
                  (let x2341 = Ojs.get_prop_ascii Import.fs "opendir" in
                   Ojs.call (Ojs.get_prop_ascii x2341 "__promisify__")
                     "apply"
                     [|x2341;((let x2339 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x2339 "push"
                                    [|(PathLike.t_to_js x2337)|]);
                               (match x2338 with
                                | Some x2340 ->
                                    ignore
                                      (Ojs.call x2339 "push"
                                         [|(OpenDirOptions.t_to_js x2340)|])
                                | None -> ());
                               x2339))|])
      end
    module BigIntOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2344 : Ojs.t) -> x2344
        and t_to_js : t -> Ojs.t = fun (x2343 : Ojs.t) -> x2343
        let (get_bigint : t -> [ `L_b_true ]) =
          fun (x2345 : t) ->
            let x2346 = Ojs.get_prop_ascii (t_to_js x2345) "bigint" in
            match Ojs.bool_of_js x2346 with
            | true -> `L_b_true
            | _ -> assert false
        let (set_bigint : t -> [ `L_b_true ] -> unit) =
          fun (x2347 : t) ->
            fun (x2348 : [ `L_b_true ]) ->
              Ojs.set_prop_ascii (t_to_js x2347) "bigint"
                (match x2348 with | `L_b_true -> Ojs.string_to_js "LBTrue")
      end
  end
