[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type dns_AnyARecord = [ `Dns_AnyARecord  | `Dns_RecordWithTtl ] intf
        and dns_AnyAaaaRecord =
          [ `Dns_AnyAaaaRecord  | `Dns_RecordWithTtl ] intf
        and dns_AnyCnameRecord = [ `Dns_AnyCnameRecord ] intf
        and dns_AnyMxRecord = [ `Dns_AnyMxRecord  | `Dns_MxRecord ] intf
        and dns_AnyNaptrRecord =
          [ `Dns_AnyNaptrRecord  | `Dns_NaptrRecord ] intf
        and dns_AnyNsRecord = [ `Dns_AnyNsRecord ] intf
        and dns_AnyPtrRecord = [ `Dns_AnyPtrRecord ] intf
        and dns_AnyRecord =
          [ `U_s0_A of dns_AnyARecord  | `U_s1_AAAA of dns_AnyAaaaRecord 
          | `U_s3_CNAME of dns_AnyCnameRecord  | `U_s4_MX of dns_AnyMxRecord 
          | `U_s5_NAPTR of dns_AnyNaptrRecord  | `U_s6_NS of dns_AnyNsRecord 
          | `U_s7_PTR of dns_AnyPtrRecord  | `U_s8_SOA of dns_AnySoaRecord 
          | `U_s9_SRV of dns_AnySrvRecord  | `U_s10_TXT of dns_AnyTxtRecord ]
        and dns_AnyRecordWithTtl =
          [ `U_s0_A of dns_AnyARecord  | `U_s1_AAAA of dns_AnyAaaaRecord ]
        and dns_AnySoaRecord = [ `Dns_AnySoaRecord  | `Dns_SoaRecord ] intf
        and dns_AnySrvRecord = [ `Dns_AnySrvRecord  | `Dns_SrvRecord ] intf
        and dns_AnyTxtRecord = [ `Dns_AnyTxtRecord ] intf
        and dns_LookupAddress = [ `Dns_LookupAddress ] intf
        and dns_LookupAllOptions =
          [ `Dns_LookupAllOptions  | `Dns_LookupOptions ] intf
        and dns_LookupOneOptions =
          [ `Dns_LookupOneOptions  | `Dns_LookupOptions ] intf
        and dns_LookupOptions = [ `Dns_LookupOptions ] intf
        and dns_MxRecord = [ `Dns_MxRecord ] intf
        and dns_NaptrRecord = [ `Dns_NaptrRecord ] intf
        and dns_RecordWithTtl = [ `Dns_RecordWithTtl ] intf
        and dns_ResolveOptions = [ `Dns_ResolveOptions ] intf
        and dns_ResolveWithTtlOptions =
          [ `Dns_ResolveWithTtlOptions  | `Dns_ResolveOptions ] intf
        and dns_Resolver = [ `Dns_Resolver ] intf
        and dns_ResolverOptions = [ `Dns_ResolverOptions ] intf
        and dns_SoaRecord = [ `Dns_SoaRecord ] intf
        and dns_SrvRecord = [ `Dns_SrvRecord ] intf
        and dns_promises_Resolver = [ `Dns_promises_Resolver ] intf
        let rec dns_AnyARecord_of_js : Ojs.t -> dns_AnyARecord = Obj.magic
        and dns_AnyARecord_to_js : dns_AnyARecord -> Ojs.t = Obj.magic
        and dns_AnyAaaaRecord_of_js : Ojs.t -> dns_AnyAaaaRecord = Obj.magic
        and dns_AnyAaaaRecord_to_js : dns_AnyAaaaRecord -> Ojs.t = Obj.magic
        and dns_AnyCnameRecord_of_js : Ojs.t -> dns_AnyCnameRecord =
          Obj.magic
        and dns_AnyCnameRecord_to_js : dns_AnyCnameRecord -> Ojs.t =
          Obj.magic
        and dns_AnyMxRecord_of_js : Ojs.t -> dns_AnyMxRecord = Obj.magic
        and dns_AnyMxRecord_to_js : dns_AnyMxRecord -> Ojs.t = Obj.magic
        and dns_AnyNaptrRecord_of_js : Ojs.t -> dns_AnyNaptrRecord =
          Obj.magic
        and dns_AnyNaptrRecord_to_js : dns_AnyNaptrRecord -> Ojs.t =
          Obj.magic
        and dns_AnyNsRecord_of_js : Ojs.t -> dns_AnyNsRecord = Obj.magic
        and dns_AnyNsRecord_to_js : dns_AnyNsRecord -> Ojs.t = Obj.magic
        and dns_AnyPtrRecord_of_js : Ojs.t -> dns_AnyPtrRecord = Obj.magic
        and dns_AnyPtrRecord_to_js : dns_AnyPtrRecord -> Ojs.t = Obj.magic
        and dns_AnyRecord_of_js : Ojs.t -> dns_AnyRecord =
          fun (x12 : Ojs.t) ->
            let x13 = x12 in
            match Ojs.string_of_js (Ojs.get_prop_ascii x13 "type") with
            | "A" -> `U_s0_A (dns_AnyARecord_of_js x13)
            | "AAAA" -> `U_s1_AAAA (dns_AnyAaaaRecord_of_js x13)
            | "CNAME" -> `U_s3_CNAME (dns_AnyCnameRecord_of_js x13)
            | "MX" -> `U_s4_MX (dns_AnyMxRecord_of_js x13)
            | "NAPTR" -> `U_s5_NAPTR (dns_AnyNaptrRecord_of_js x13)
            | "NS" -> `U_s6_NS (dns_AnyNsRecord_of_js x13)
            | "PTR" -> `U_s7_PTR (dns_AnyPtrRecord_of_js x13)
            | "SOA" -> `U_s8_SOA (dns_AnySoaRecord_of_js x13)
            | "SRV" -> `U_s9_SRV (dns_AnySrvRecord_of_js x13)
            | "TXT" -> `U_s10_TXT (dns_AnyTxtRecord_of_js x13)
            | _ -> assert false
        and dns_AnyRecord_to_js : dns_AnyRecord -> Ojs.t =
          fun
            (x1 :
              [ `U_s0_A of dns_AnyARecord  | `U_s1_AAAA of dns_AnyAaaaRecord 
              | `U_s3_CNAME of dns_AnyCnameRecord 
              | `U_s4_MX of dns_AnyMxRecord 
              | `U_s5_NAPTR of dns_AnyNaptrRecord 
              | `U_s6_NS of dns_AnyNsRecord  | `U_s7_PTR of dns_AnyPtrRecord 
              | `U_s8_SOA of dns_AnySoaRecord 
              | `U_s9_SRV of dns_AnySrvRecord 
              | `U_s10_TXT of dns_AnyTxtRecord ])
            ->
            match x1 with
            | `U_s0_A x2 -> dns_AnyARecord_to_js x2
            | `U_s1_AAAA x3 -> dns_AnyAaaaRecord_to_js x3
            | `U_s3_CNAME x4 -> dns_AnyCnameRecord_to_js x4
            | `U_s4_MX x5 -> dns_AnyMxRecord_to_js x5
            | `U_s5_NAPTR x6 -> dns_AnyNaptrRecord_to_js x6
            | `U_s6_NS x7 -> dns_AnyNsRecord_to_js x7
            | `U_s7_PTR x8 -> dns_AnyPtrRecord_to_js x8
            | `U_s8_SOA x9 -> dns_AnySoaRecord_to_js x9
            | `U_s9_SRV x10 -> dns_AnySrvRecord_to_js x10
            | `U_s10_TXT x11 -> dns_AnyTxtRecord_to_js x11
        and dns_AnyRecordWithTtl_of_js : Ojs.t -> dns_AnyRecordWithTtl =
          fun (x17 : Ojs.t) ->
            let x18 = x17 in
            match Ojs.string_of_js (Ojs.get_prop_ascii x18 "type") with
            | "A" -> `U_s0_A (dns_AnyARecord_of_js x18)
            | "AAAA" -> `U_s1_AAAA (dns_AnyAaaaRecord_of_js x18)
            | _ -> assert false
        and dns_AnyRecordWithTtl_to_js : dns_AnyRecordWithTtl -> Ojs.t =
          fun
            (x14 :
              [ `U_s0_A of dns_AnyARecord 
              | `U_s1_AAAA of dns_AnyAaaaRecord ])
            ->
            match x14 with
            | `U_s0_A x15 -> dns_AnyARecord_to_js x15
            | `U_s1_AAAA x16 -> dns_AnyAaaaRecord_to_js x16
        and dns_AnySoaRecord_of_js : Ojs.t -> dns_AnySoaRecord = Obj.magic
        and dns_AnySoaRecord_to_js : dns_AnySoaRecord -> Ojs.t = Obj.magic
        and dns_AnySrvRecord_of_js : Ojs.t -> dns_AnySrvRecord = Obj.magic
        and dns_AnySrvRecord_to_js : dns_AnySrvRecord -> Ojs.t = Obj.magic
        and dns_AnyTxtRecord_of_js : Ojs.t -> dns_AnyTxtRecord = Obj.magic
        and dns_AnyTxtRecord_to_js : dns_AnyTxtRecord -> Ojs.t = Obj.magic
        and dns_LookupAddress_of_js : Ojs.t -> dns_LookupAddress = Obj.magic
        and dns_LookupAddress_to_js : dns_LookupAddress -> Ojs.t = Obj.magic
        and dns_LookupAllOptions_of_js : Ojs.t -> dns_LookupAllOptions =
          Obj.magic
        and dns_LookupAllOptions_to_js : dns_LookupAllOptions -> Ojs.t =
          Obj.magic
        and dns_LookupOneOptions_of_js : Ojs.t -> dns_LookupOneOptions =
          Obj.magic
        and dns_LookupOneOptions_to_js : dns_LookupOneOptions -> Ojs.t =
          Obj.magic
        and dns_LookupOptions_of_js : Ojs.t -> dns_LookupOptions = Obj.magic
        and dns_LookupOptions_to_js : dns_LookupOptions -> Ojs.t = Obj.magic
        and dns_MxRecord_of_js : Ojs.t -> dns_MxRecord = Obj.magic
        and dns_MxRecord_to_js : dns_MxRecord -> Ojs.t = Obj.magic
        and dns_NaptrRecord_of_js : Ojs.t -> dns_NaptrRecord = Obj.magic
        and dns_NaptrRecord_to_js : dns_NaptrRecord -> Ojs.t = Obj.magic
        and dns_RecordWithTtl_of_js : Ojs.t -> dns_RecordWithTtl = Obj.magic
        and dns_RecordWithTtl_to_js : dns_RecordWithTtl -> Ojs.t = Obj.magic
        and dns_ResolveOptions_of_js : Ojs.t -> dns_ResolveOptions =
          Obj.magic
        and dns_ResolveOptions_to_js : dns_ResolveOptions -> Ojs.t =
          Obj.magic
        and dns_ResolveWithTtlOptions_of_js :
          Ojs.t -> dns_ResolveWithTtlOptions = Obj.magic
        and dns_ResolveWithTtlOptions_to_js :
          dns_ResolveWithTtlOptions -> Ojs.t = Obj.magic
        and dns_Resolver_of_js : Ojs.t -> dns_Resolver = Obj.magic
        and dns_Resolver_to_js : dns_Resolver -> Ojs.t = Obj.magic
        and dns_ResolverOptions_of_js : Ojs.t -> dns_ResolverOptions =
          Obj.magic
        and dns_ResolverOptions_to_js : dns_ResolverOptions -> Ojs.t =
          Obj.magic
        and dns_SoaRecord_of_js : Ojs.t -> dns_SoaRecord = Obj.magic
        and dns_SoaRecord_to_js : dns_SoaRecord -> Ojs.t = Obj.magic
        and dns_SrvRecord_of_js : Ojs.t -> dns_SrvRecord = Obj.magic
        and dns_SrvRecord_to_js : dns_SrvRecord -> Ojs.t = Obj.magic
        and dns_promises_Resolver_of_js : Ojs.t -> dns_promises_Resolver =
          Obj.magic
        and dns_promises_Resolver_to_js : dns_promises_Resolver -> Ojs.t =
          Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x20 : Ojs.t) -> anonymous_interface_0_of_js x20
    and t_to_js : t -> Ojs.t =
      fun (x19 : anonymous_interface_0) -> anonymous_interface_0_to_js x19
    let (get_hostname : t -> string) =
      fun (x21 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x21) "hostname")
    let (set_hostname : t -> string -> unit) =
      fun (x22 : t) ->
        fun (x23 : string) ->
          Ojs.set_prop_ascii (t_to_js x22) "hostname" (Ojs.string_to_js x23)
    let (get_service : t -> string) =
      fun (x24 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x24) "service")
    let (set_service : t -> string -> unit) =
      fun (x25 : t) ->
        fun (x26 : string) ->
          Ojs.set_prop_ascii (t_to_js x25) "service" (Ojs.string_to_js x26)
  end
module Dns =
  struct
    let (aDDRCONFIG : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.dns "ADDRCONFIG")
    let (v4MAPPED : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.dns "V4MAPPED")
    let (aLL : int) = Ojs.int_of_js (Ojs.get_prop_ascii Import.dns "ALL")
    module LookupOptions =
      struct
        type t = dns_LookupOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x28 : Ojs.t) -> dns_LookupOptions_of_js x28
        and t_to_js : t -> Ojs.t =
          fun (x27 : dns_LookupOptions) -> dns_LookupOptions_to_js x27
        let (get_family : t -> int) =
          fun (x29 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x29) "family")
        let (set_family : t -> int -> unit) =
          fun (x30 : t) ->
            fun (x31 : int) ->
              Ojs.set_prop_ascii (t_to_js x30) "family" (Ojs.int_to_js x31)
        let (get_hints : t -> int) =
          fun (x32 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x32) "hints")
        let (set_hints : t -> int -> unit) =
          fun (x33 : t) ->
            fun (x34 : int) ->
              Ojs.set_prop_ascii (t_to_js x33) "hints" (Ojs.int_to_js x34)
        let (get_all : t -> bool) =
          fun (x35 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x35) "all")
        let (set_all : t -> bool -> unit) =
          fun (x36 : t) ->
            fun (x37 : bool) ->
              Ojs.set_prop_ascii (t_to_js x36) "all" (Ojs.bool_to_js x37)
        let (get_verbatim : t -> bool) =
          fun (x38 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x38) "verbatim")
        let (set_verbatim : t -> bool -> unit) =
          fun (x39 : t) ->
            fun (x40 : bool) ->
              Ojs.set_prop_ascii (t_to_js x39) "verbatim"
                (Ojs.bool_to_js x40)
      end
    module LookupOneOptions =
      struct
        type t = dns_LookupOneOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x42 : Ojs.t) -> dns_LookupOneOptions_of_js x42
        and t_to_js : t -> Ojs.t =
          fun (x41 : dns_LookupOneOptions) -> dns_LookupOneOptions_to_js x41
        let (get_all : t -> [ `L_b_false ]) =
          fun (x43 : t) ->
            let x44 = Ojs.get_prop_ascii (t_to_js x43) "all" in
            match Ojs.bool_of_js x44 with
            | false -> `L_b_false
            | _ -> assert false
        let (set_all : t -> [ `L_b_false ] -> unit) =
          fun (x45 : t) ->
            fun (x46 : [ `L_b_false ]) ->
              Ojs.set_prop_ascii (t_to_js x45) "all"
                (match x46 with | `L_b_false -> Ojs.string_to_js "LBFalse")
        let (cast : t -> dns_LookupOptions) =
          fun (x47 : t) -> dns_LookupOptions_of_js (t_to_js x47)
      end
    module LookupAllOptions =
      struct
        type t = dns_LookupAllOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x49 : Ojs.t) -> dns_LookupAllOptions_of_js x49
        and t_to_js : t -> Ojs.t =
          fun (x48 : dns_LookupAllOptions) -> dns_LookupAllOptions_to_js x48
        let (get_all : t -> [ `L_b_true ]) =
          fun (x50 : t) ->
            let x51 = Ojs.get_prop_ascii (t_to_js x50) "all" in
            match Ojs.bool_of_js x51 with
            | true -> `L_b_true
            | _ -> assert false
        let (set_all : t -> [ `L_b_true ] -> unit) =
          fun (x52 : t) ->
            fun (x53 : [ `L_b_true ]) ->
              Ojs.set_prop_ascii (t_to_js x52) "all"
                (match x53 with | `L_b_true -> Ojs.string_to_js "LBTrue")
        let (cast : t -> dns_LookupOptions) =
          fun (x54 : t) -> dns_LookupOptions_of_js (t_to_js x54)
      end
    module LookupAddress =
      struct
        type t = dns_LookupAddress
        let rec t_of_js : Ojs.t -> t =
          fun (x56 : Ojs.t) -> dns_LookupAddress_of_js x56
        and t_to_js : t -> Ojs.t =
          fun (x55 : dns_LookupAddress) -> dns_LookupAddress_to_js x55
        let (get_address : t -> string) =
          fun (x57 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x57) "address")
        let (set_address : t -> string -> unit) =
          fun (x58 : t) ->
            fun (x59 : string) ->
              Ojs.set_prop_ascii (t_to_js x58) "address"
                (Ojs.string_to_js x59)
        let (get_family : t -> int) =
          fun (x60 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x60) "family")
        let (set_family : t -> int -> unit) =
          fun (x61 : t) ->
            fun (x62 : int) ->
              Ojs.set_prop_ascii (t_to_js x61) "family" (Ojs.int_to_js x62)
      end
    let (lookup :
      hostname:string ->
        family:int ->
          callback:(err:ErrnoException.t or_null ->
                      address:string -> family:int -> unit)
            -> unit)
      =
      fun ~hostname:(x63 : string) ->
        fun ~family:(x64 : int) ->
          fun
            ~callback:(x65 :
                        err:ErrnoException.t or_null ->
                          address:string -> family:int -> unit)
            ->
            ignore
              (Ojs.call Import.dns "lookup"
                 [|(Ojs.string_to_js x63);(Ojs.int_to_js x64);(Ojs.fun_to_js
                                                                 3
                                                                 (fun
                                                                    (x66 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x68 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x69 :
                                                                    Ojs.t) ->
                                                                    x65
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x66)
                                                                    ~address:(
                                                                    Ojs.string_of_js
                                                                    x68)
                                                                    ~family:(
                                                                    Ojs.int_of_js
                                                                    x69)))|])
    let (lookup :
      hostname:string ->
        options:dns_LookupOneOptions ->
          callback:(err:ErrnoException.t or_null ->
                      address:string -> family:int -> unit)
            -> unit)
      =
      fun ~hostname:(x70 : string) ->
        fun ~options:(x71 : dns_LookupOneOptions) ->
          fun
            ~callback:(x72 :
                        err:ErrnoException.t or_null ->
                          address:string -> family:int -> unit)
            ->
            ignore
              (Ojs.call Import.dns "lookup"
                 [|(Ojs.string_to_js x70);(dns_LookupOneOptions_to_js x71);(
                   Ojs.fun_to_js 3
                     (fun (x73 : Ojs.t) ->
                        fun (x75 : Ojs.t) ->
                          fun (x76 : Ojs.t) ->
                            x72
                              ~err:(or_null_of_js ErrnoException.t_of_js x73)
                              ~address:(Ojs.string_of_js x75)
                              ~family:(Ojs.int_of_js x76)))|])
    let (lookup :
      hostname:string ->
        options:dns_LookupAllOptions ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:dns_LookupAddress list -> unit)
            -> unit)
      =
      fun ~hostname:(x77 : string) ->
        fun ~options:(x78 : dns_LookupAllOptions) ->
          fun
            ~callback:(x79 :
                        err:ErrnoException.t or_null ->
                          addresses:dns_LookupAddress list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "lookup"
                 [|(Ojs.string_to_js x77);(dns_LookupAllOptions_to_js x78);(
                   Ojs.fun_to_js 2
                     (fun (x80 : Ojs.t) ->
                        fun (x82 : Ojs.t) ->
                          x79 ~err:(or_null_of_js ErrnoException.t_of_js x80)
                            ~addresses:(Ojs.list_of_js
                                          dns_LookupAddress_of_js x82)))|])
    let (lookup :
      hostname:string ->
        options:dns_LookupOptions ->
          callback:(err:ErrnoException.t or_null ->
                      address:dns_LookupAddress list or_string ->
                        family:int -> unit)
            -> unit)
      =
      fun ~hostname:(x84 : string) ->
        fun ~options:(x85 : dns_LookupOptions) ->
          fun
            ~callback:(x86 :
                        err:ErrnoException.t or_null ->
                          address:dns_LookupAddress list or_string ->
                            family:int -> unit)
            ->
            ignore
              (Ojs.call Import.dns "lookup"
                 [|(Ojs.string_to_js x84);(dns_LookupOptions_to_js x85);(
                   Ojs.fun_to_js 3
                     (fun (x87 : Ojs.t) ->
                        fun (x89 : Ojs.t) ->
                          fun (x92 : Ojs.t) ->
                            x86
                              ~err:(or_null_of_js ErrnoException.t_of_js x87)
                              ~address:(or_string_of_js
                                          (fun (x90 : Ojs.t) ->
                                             Ojs.list_of_js
                                               dns_LookupAddress_of_js x90)
                                          x89) ~family:(Ojs.int_of_js x92)))|])
    let (lookup :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    address:string -> family:int -> unit)
          -> unit)
      =
      fun ~hostname:(x93 : string) ->
        fun
          ~callback:(x94 :
                      err:ErrnoException.t or_null ->
                        address:string -> family:int -> unit)
          ->
          ignore
            (Ojs.call Import.dns "lookup"
               [|(Ojs.string_to_js x93);(Ojs.fun_to_js 3
                                           (fun (x95 : Ojs.t) ->
                                              fun (x97 : Ojs.t) ->
                                                fun (x98 : Ojs.t) ->
                                                  x94
                                                    ~err:(or_null_of_js
                                                            ErrnoException.t_of_js
                                                            x95)
                                                    ~address:(Ojs.string_of_js
                                                                x97)
                                                    ~family:(Ojs.int_of_js
                                                               x98)))|])
    module Lookup =
      struct
        let (__promisify__ :
          hostname:string ->
            options:dns_LookupAllOptions -> dns_LookupAddress list Promise.t)
          =
          fun ~hostname:(x99 : string) ->
            fun ~options:(x100 : dns_LookupAllOptions) ->
              Promise.t_of_js
                (fun (x101 : Ojs.t) ->
                   Ojs.list_of_js dns_LookupAddress_of_js x101)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "lookup")
                   "__promisify__"
                   [|(Ojs.string_to_js x99);(dns_LookupAllOptions_to_js x100)|])
        let (__promisify__ :
          hostname:string ->
            ?options:dns_LookupOneOptions or_number ->
              unit -> dns_LookupAddress Promise.t)
          =
          fun ~hostname:(x103 : string) ->
            fun ?options:(x104 : dns_LookupOneOptions or_number option) ->
              fun () ->
                Promise.t_of_js dns_LookupAddress_of_js
                  (let x108 = Ojs.get_prop_ascii Import.dns "lookup" in
                   Ojs.call (Ojs.get_prop_ascii x108 "__promisify__") "apply"
                     [|x108;((let x105 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x105 "push"
                                   [|(Ojs.string_to_js x103)|]);
                              (match x104 with
                               | Some x106 ->
                                   ignore
                                     (Ojs.call x105 "push"
                                        [|(or_number_to_js
                                             dns_LookupOneOptions_to_js x106)|])
                               | None -> ());
                              x105))|])
        let (__promisify__ :
          hostname:string ->
            options:dns_LookupOptions ->
              (dns_LookupAddress, dns_LookupAddress) or_array Promise.t)
          =
          fun ~hostname:(x110 : string) ->
            fun ~options:(x111 : dns_LookupOptions) ->
              Promise.t_of_js
                (fun (x112 : Ojs.t) ->
                   or_array_of_js dns_LookupAddress_of_js
                     dns_LookupAddress_of_js x112)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "lookup")
                   "__promisify__"
                   [|(Ojs.string_to_js x110);(dns_LookupOptions_to_js x111)|])
      end
    let (lookupService :
      address:string ->
        port:int ->
          callback:(err:ErrnoException.t or_null ->
                      hostname:string -> service:string -> unit)
            -> unit)
      =
      fun ~address:(x115 : string) ->
        fun ~port:(x116 : int) ->
          fun
            ~callback:(x117 :
                        err:ErrnoException.t or_null ->
                          hostname:string -> service:string -> unit)
            ->
            ignore
              (Ojs.call Import.dns "lookupService"
                 [|(Ojs.string_to_js x115);(Ojs.int_to_js x116);(Ojs.fun_to_js
                                                                   3
                                                                   (fun
                                                                    (x118 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x120 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x121 :
                                                                    Ojs.t) ->
                                                                    x117
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x118)
                                                                    ~hostname:(
                                                                    Ojs.string_of_js
                                                                    x120)
                                                                    ~service:(
                                                                    Ojs.string_of_js
                                                                    x121)))|])
    module LookupService =
      struct
        let (__promisify__ :
          address:string -> port:int -> anonymous_interface_0 Promise.t) =
          fun ~address:(x122 : string) ->
            fun ~port:(x123 : int) ->
              Promise.t_of_js anonymous_interface_0_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.dns "lookupService")
                   "__promisify__"
                   [|(Ojs.string_to_js x122);(Ojs.int_to_js x123)|])
      end
    module ResolveOptions =
      struct
        type t = dns_ResolveOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x126 : Ojs.t) -> dns_ResolveOptions_of_js x126
        and t_to_js : t -> Ojs.t =
          fun (x125 : dns_ResolveOptions) -> dns_ResolveOptions_to_js x125
        let (get_ttl : t -> bool) =
          fun (x127 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x127) "ttl")
        let (set_ttl : t -> bool -> unit) =
          fun (x128 : t) ->
            fun (x129 : bool) ->
              Ojs.set_prop_ascii (t_to_js x128) "ttl" (Ojs.bool_to_js x129)
      end
    module ResolveWithTtlOptions =
      struct
        type t = dns_ResolveWithTtlOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x131 : Ojs.t) -> dns_ResolveWithTtlOptions_of_js x131
        and t_to_js : t -> Ojs.t =
          fun (x130 : dns_ResolveWithTtlOptions) ->
            dns_ResolveWithTtlOptions_to_js x130
        let (get_ttl : t -> [ `L_b_true ]) =
          fun (x132 : t) ->
            let x133 = Ojs.get_prop_ascii (t_to_js x132) "ttl" in
            match Ojs.bool_of_js x133 with
            | true -> `L_b_true
            | _ -> assert false
        let (set_ttl : t -> [ `L_b_true ] -> unit) =
          fun (x134 : t) ->
            fun (x135 : [ `L_b_true ]) ->
              Ojs.set_prop_ascii (t_to_js x134) "ttl"
                (match x135 with | `L_b_true -> Ojs.string_to_js "LBTrue")
        let (cast : t -> dns_ResolveOptions) =
          fun (x136 : t) -> dns_ResolveOptions_of_js (t_to_js x136)
      end
    module RecordWithTtl =
      struct
        type t = dns_RecordWithTtl
        let rec t_of_js : Ojs.t -> t =
          fun (x138 : Ojs.t) -> dns_RecordWithTtl_of_js x138
        and t_to_js : t -> Ojs.t =
          fun (x137 : dns_RecordWithTtl) -> dns_RecordWithTtl_to_js x137
        let (get_address : t -> string) =
          fun (x139 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x139) "address")
        let (set_address : t -> string -> unit) =
          fun (x140 : t) ->
            fun (x141 : string) ->
              Ojs.set_prop_ascii (t_to_js x140) "address"
                (Ojs.string_to_js x141)
        let (get_ttl : t -> int) =
          fun (x142 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x142) "ttl")
        let (set_ttl : t -> int -> unit) =
          fun (x143 : t) ->
            fun (x144 : int) ->
              Ojs.set_prop_ascii (t_to_js x143) "ttl" (Ojs.int_to_js x144)
      end
    module AnyRecordWithTtl =
      struct
        type t = dns_AnyRecordWithTtl
        let rec t_of_js : Ojs.t -> t =
          fun (x146 : Ojs.t) -> dns_AnyRecordWithTtl_of_js x146
        and t_to_js : t -> Ojs.t =
          fun (x145 : dns_AnyRecordWithTtl) ->
            dns_AnyRecordWithTtl_to_js x145
      end
    module AnyARecord =
      struct
        type t = dns_AnyARecord
        let rec t_of_js : Ojs.t -> t =
          fun (x148 : Ojs.t) -> dns_AnyARecord_of_js x148
        and t_to_js : t -> Ojs.t =
          fun (x147 : dns_AnyARecord) -> dns_AnyARecord_to_js x147
        let (get_type : t -> [ `A ]) =
          fun (x149 : t) ->
            let x150 = Ojs.get_prop_ascii (t_to_js x149) "type" in
            match Ojs.string_of_js x150 with | "A" -> `A | _ -> assert false
        let (set_type : t -> [ `A ] -> unit) =
          fun (x151 : t) ->
            fun (x152 : [ `A ]) ->
              Ojs.set_prop_ascii (t_to_js x151) "type"
                (match x152 with | `A -> Ojs.string_to_js "A")
        let (cast : t -> dns_RecordWithTtl) =
          fun (x153 : t) -> dns_RecordWithTtl_of_js (t_to_js x153)
      end
    module AnyAaaaRecord =
      struct
        type t = dns_AnyAaaaRecord
        let rec t_of_js : Ojs.t -> t =
          fun (x155 : Ojs.t) -> dns_AnyAaaaRecord_of_js x155
        and t_to_js : t -> Ojs.t =
          fun (x154 : dns_AnyAaaaRecord) -> dns_AnyAaaaRecord_to_js x154
        let (get_type : t -> [ `AAAA ]) =
          fun (x156 : t) ->
            let x157 = Ojs.get_prop_ascii (t_to_js x156) "type" in
            match Ojs.string_of_js x157 with
            | "AAAA" -> `AAAA
            | _ -> assert false
        let (set_type : t -> [ `AAAA ] -> unit) =
          fun (x158 : t) ->
            fun (x159 : [ `AAAA ]) ->
              Ojs.set_prop_ascii (t_to_js x158) "type"
                (match x159 with | `AAAA -> Ojs.string_to_js "AAAA")
        let (cast : t -> dns_RecordWithTtl) =
          fun (x160 : t) -> dns_RecordWithTtl_of_js (t_to_js x160)
      end
    module MxRecord =
      struct
        type t = dns_MxRecord
        let rec t_of_js : Ojs.t -> t =
          fun (x162 : Ojs.t) -> dns_MxRecord_of_js x162
        and t_to_js : t -> Ojs.t =
          fun (x161 : dns_MxRecord) -> dns_MxRecord_to_js x161
        let (get_priority : t -> int) =
          fun (x163 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x163) "priority")
        let (set_priority : t -> int -> unit) =
          fun (x164 : t) ->
            fun (x165 : int) ->
              Ojs.set_prop_ascii (t_to_js x164) "priority"
                (Ojs.int_to_js x165)
        let (get_exchange : t -> string) =
          fun (x166 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x166) "exchange")
        let (set_exchange : t -> string -> unit) =
          fun (x167 : t) ->
            fun (x168 : string) ->
              Ojs.set_prop_ascii (t_to_js x167) "exchange"
                (Ojs.string_to_js x168)
      end
    module AnyMxRecord =
      struct
        type t = dns_AnyMxRecord
        let rec t_of_js : Ojs.t -> t =
          fun (x170 : Ojs.t) -> dns_AnyMxRecord_of_js x170
        and t_to_js : t -> Ojs.t =
          fun (x169 : dns_AnyMxRecord) -> dns_AnyMxRecord_to_js x169
        let (get_type : t -> [ `MX ]) =
          fun (x171 : t) ->
            let x172 = Ojs.get_prop_ascii (t_to_js x171) "type" in
            match Ojs.string_of_js x172 with
            | "MX" -> `MX
            | _ -> assert false
        let (set_type : t -> [ `MX ] -> unit) =
          fun (x173 : t) ->
            fun (x174 : [ `MX ]) ->
              Ojs.set_prop_ascii (t_to_js x173) "type"
                (match x174 with | `MX -> Ojs.string_to_js "MX")
        let (cast : t -> dns_MxRecord) =
          fun (x175 : t) -> dns_MxRecord_of_js (t_to_js x175)
      end
    module NaptrRecord =
      struct
        type t = dns_NaptrRecord
        let rec t_of_js : Ojs.t -> t =
          fun (x177 : Ojs.t) -> dns_NaptrRecord_of_js x177
        and t_to_js : t -> Ojs.t =
          fun (x176 : dns_NaptrRecord) -> dns_NaptrRecord_to_js x176
        let (get_flags : t -> string) =
          fun (x178 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x178) "flags")
        let (set_flags : t -> string -> unit) =
          fun (x179 : t) ->
            fun (x180 : string) ->
              Ojs.set_prop_ascii (t_to_js x179) "flags"
                (Ojs.string_to_js x180)
        let (get_service : t -> string) =
          fun (x181 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x181) "service")
        let (set_service : t -> string -> unit) =
          fun (x182 : t) ->
            fun (x183 : string) ->
              Ojs.set_prop_ascii (t_to_js x182) "service"
                (Ojs.string_to_js x183)
        let (get_regexp : t -> string) =
          fun (x184 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x184) "regexp")
        let (set_regexp : t -> string -> unit) =
          fun (x185 : t) ->
            fun (x186 : string) ->
              Ojs.set_prop_ascii (t_to_js x185) "regexp"
                (Ojs.string_to_js x186)
        let (get_replacement : t -> string) =
          fun (x187 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x187) "replacement")
        let (set_replacement : t -> string -> unit) =
          fun (x188 : t) ->
            fun (x189 : string) ->
              Ojs.set_prop_ascii (t_to_js x188) "replacement"
                (Ojs.string_to_js x189)
        let (get_order : t -> int) =
          fun (x190 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x190) "order")
        let (set_order : t -> int -> unit) =
          fun (x191 : t) ->
            fun (x192 : int) ->
              Ojs.set_prop_ascii (t_to_js x191) "order" (Ojs.int_to_js x192)
        let (get_preference : t -> int) =
          fun (x193 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x193) "preference")
        let (set_preference : t -> int -> unit) =
          fun (x194 : t) ->
            fun (x195 : int) ->
              Ojs.set_prop_ascii (t_to_js x194) "preference"
                (Ojs.int_to_js x195)
      end
    module AnyNaptrRecord =
      struct
        type t = dns_AnyNaptrRecord
        let rec t_of_js : Ojs.t -> t =
          fun (x197 : Ojs.t) -> dns_AnyNaptrRecord_of_js x197
        and t_to_js : t -> Ojs.t =
          fun (x196 : dns_AnyNaptrRecord) -> dns_AnyNaptrRecord_to_js x196
        let (get_type : t -> [ `NAPTR ]) =
          fun (x198 : t) ->
            let x199 = Ojs.get_prop_ascii (t_to_js x198) "type" in
            match Ojs.string_of_js x199 with
            | "NAPTR" -> `NAPTR
            | _ -> assert false
        let (set_type : t -> [ `NAPTR ] -> unit) =
          fun (x200 : t) ->
            fun (x201 : [ `NAPTR ]) ->
              Ojs.set_prop_ascii (t_to_js x200) "type"
                (match x201 with | `NAPTR -> Ojs.string_to_js "NAPTR")
        let (cast : t -> dns_NaptrRecord) =
          fun (x202 : t) -> dns_NaptrRecord_of_js (t_to_js x202)
      end
    module SoaRecord =
      struct
        type t = dns_SoaRecord
        let rec t_of_js : Ojs.t -> t =
          fun (x204 : Ojs.t) -> dns_SoaRecord_of_js x204
        and t_to_js : t -> Ojs.t =
          fun (x203 : dns_SoaRecord) -> dns_SoaRecord_to_js x203
        let (get_nsname : t -> string) =
          fun (x205 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x205) "nsname")
        let (set_nsname : t -> string -> unit) =
          fun (x206 : t) ->
            fun (x207 : string) ->
              Ojs.set_prop_ascii (t_to_js x206) "nsname"
                (Ojs.string_to_js x207)
        let (get_hostmaster : t -> string) =
          fun (x208 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x208) "hostmaster")
        let (set_hostmaster : t -> string -> unit) =
          fun (x209 : t) ->
            fun (x210 : string) ->
              Ojs.set_prop_ascii (t_to_js x209) "hostmaster"
                (Ojs.string_to_js x210)
        let (get_serial : t -> int) =
          fun (x211 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x211) "serial")
        let (set_serial : t -> int -> unit) =
          fun (x212 : t) ->
            fun (x213 : int) ->
              Ojs.set_prop_ascii (t_to_js x212) "serial" (Ojs.int_to_js x213)
        let (get_refresh : t -> int) =
          fun (x214 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x214) "refresh")
        let (set_refresh : t -> int -> unit) =
          fun (x215 : t) ->
            fun (x216 : int) ->
              Ojs.set_prop_ascii (t_to_js x215) "refresh"
                (Ojs.int_to_js x216)
        let (get_retry : t -> int) =
          fun (x217 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x217) "retry")
        let (set_retry : t -> int -> unit) =
          fun (x218 : t) ->
            fun (x219 : int) ->
              Ojs.set_prop_ascii (t_to_js x218) "retry" (Ojs.int_to_js x219)
        let (get_expire : t -> int) =
          fun (x220 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x220) "expire")
        let (set_expire : t -> int -> unit) =
          fun (x221 : t) ->
            fun (x222 : int) ->
              Ojs.set_prop_ascii (t_to_js x221) "expire" (Ojs.int_to_js x222)
        let (get_minttl : t -> int) =
          fun (x223 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x223) "minttl")
        let (set_minttl : t -> int -> unit) =
          fun (x224 : t) ->
            fun (x225 : int) ->
              Ojs.set_prop_ascii (t_to_js x224) "minttl" (Ojs.int_to_js x225)
      end
    module AnySoaRecord =
      struct
        type t = dns_AnySoaRecord
        let rec t_of_js : Ojs.t -> t =
          fun (x227 : Ojs.t) -> dns_AnySoaRecord_of_js x227
        and t_to_js : t -> Ojs.t =
          fun (x226 : dns_AnySoaRecord) -> dns_AnySoaRecord_to_js x226
        let (get_type : t -> [ `SOA ]) =
          fun (x228 : t) ->
            let x229 = Ojs.get_prop_ascii (t_to_js x228) "type" in
            match Ojs.string_of_js x229 with
            | "SOA" -> `SOA
            | _ -> assert false
        let (set_type : t -> [ `SOA ] -> unit) =
          fun (x230 : t) ->
            fun (x231 : [ `SOA ]) ->
              Ojs.set_prop_ascii (t_to_js x230) "type"
                (match x231 with | `SOA -> Ojs.string_to_js "SOA")
        let (cast : t -> dns_SoaRecord) =
          fun (x232 : t) -> dns_SoaRecord_of_js (t_to_js x232)
      end
    module SrvRecord =
      struct
        type t = dns_SrvRecord
        let rec t_of_js : Ojs.t -> t =
          fun (x234 : Ojs.t) -> dns_SrvRecord_of_js x234
        and t_to_js : t -> Ojs.t =
          fun (x233 : dns_SrvRecord) -> dns_SrvRecord_to_js x233
        let (get_priority : t -> int) =
          fun (x235 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x235) "priority")
        let (set_priority : t -> int -> unit) =
          fun (x236 : t) ->
            fun (x237 : int) ->
              Ojs.set_prop_ascii (t_to_js x236) "priority"
                (Ojs.int_to_js x237)
        let (get_weight : t -> int) =
          fun (x238 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x238) "weight")
        let (set_weight : t -> int -> unit) =
          fun (x239 : t) ->
            fun (x240 : int) ->
              Ojs.set_prop_ascii (t_to_js x239) "weight" (Ojs.int_to_js x240)
        let (get_port : t -> int) =
          fun (x241 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x241) "port")
        let (set_port : t -> int -> unit) =
          fun (x242 : t) ->
            fun (x243 : int) ->
              Ojs.set_prop_ascii (t_to_js x242) "port" (Ojs.int_to_js x243)
        let (get_name : t -> string) =
          fun (x244 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x244) "name")
        let (set_name : t -> string -> unit) =
          fun (x245 : t) ->
            fun (x246 : string) ->
              Ojs.set_prop_ascii (t_to_js x245) "name"
                (Ojs.string_to_js x246)
      end
    module AnySrvRecord =
      struct
        type t = dns_AnySrvRecord
        let rec t_of_js : Ojs.t -> t =
          fun (x248 : Ojs.t) -> dns_AnySrvRecord_of_js x248
        and t_to_js : t -> Ojs.t =
          fun (x247 : dns_AnySrvRecord) -> dns_AnySrvRecord_to_js x247
        let (get_type : t -> [ `SRV ]) =
          fun (x249 : t) ->
            let x250 = Ojs.get_prop_ascii (t_to_js x249) "type" in
            match Ojs.string_of_js x250 with
            | "SRV" -> `SRV
            | _ -> assert false
        let (set_type : t -> [ `SRV ] -> unit) =
          fun (x251 : t) ->
            fun (x252 : [ `SRV ]) ->
              Ojs.set_prop_ascii (t_to_js x251) "type"
                (match x252 with | `SRV -> Ojs.string_to_js "SRV")
        let (cast : t -> dns_SrvRecord) =
          fun (x253 : t) -> dns_SrvRecord_of_js (t_to_js x253)
      end
    module AnyTxtRecord =
      struct
        type t = dns_AnyTxtRecord
        let rec t_of_js : Ojs.t -> t =
          fun (x255 : Ojs.t) -> dns_AnyTxtRecord_of_js x255
        and t_to_js : t -> Ojs.t =
          fun (x254 : dns_AnyTxtRecord) -> dns_AnyTxtRecord_to_js x254
        let (get_type : t -> [ `TXT ]) =
          fun (x256 : t) ->
            let x257 = Ojs.get_prop_ascii (t_to_js x256) "type" in
            match Ojs.string_of_js x257 with
            | "TXT" -> `TXT
            | _ -> assert false
        let (set_type : t -> [ `TXT ] -> unit) =
          fun (x258 : t) ->
            fun (x259 : [ `TXT ]) ->
              Ojs.set_prop_ascii (t_to_js x258) "type"
                (match x259 with | `TXT -> Ojs.string_to_js "TXT")
        let (get_entries : t -> string list) =
          fun (x260 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x260) "entries")
        let (set_entries : t -> string list -> unit) =
          fun (x262 : t) ->
            fun (x263 : string list) ->
              Ojs.set_prop_ascii (t_to_js x262) "entries"
                (Ojs.list_to_js Ojs.string_to_js x263)
      end
    module AnyNsRecord =
      struct
        type t = dns_AnyNsRecord
        let rec t_of_js : Ojs.t -> t =
          fun (x266 : Ojs.t) -> dns_AnyNsRecord_of_js x266
        and t_to_js : t -> Ojs.t =
          fun (x265 : dns_AnyNsRecord) -> dns_AnyNsRecord_to_js x265
        let (get_type : t -> [ `NS ]) =
          fun (x267 : t) ->
            let x268 = Ojs.get_prop_ascii (t_to_js x267) "type" in
            match Ojs.string_of_js x268 with
            | "NS" -> `NS
            | _ -> assert false
        let (set_type : t -> [ `NS ] -> unit) =
          fun (x269 : t) ->
            fun (x270 : [ `NS ]) ->
              Ojs.set_prop_ascii (t_to_js x269) "type"
                (match x270 with | `NS -> Ojs.string_to_js "NS")
        let (get_value : t -> string) =
          fun (x271 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x271) "value")
        let (set_value : t -> string -> unit) =
          fun (x272 : t) ->
            fun (x273 : string) ->
              Ojs.set_prop_ascii (t_to_js x272) "value"
                (Ojs.string_to_js x273)
      end
    module AnyPtrRecord =
      struct
        type t = dns_AnyPtrRecord
        let rec t_of_js : Ojs.t -> t =
          fun (x275 : Ojs.t) -> dns_AnyPtrRecord_of_js x275
        and t_to_js : t -> Ojs.t =
          fun (x274 : dns_AnyPtrRecord) -> dns_AnyPtrRecord_to_js x274
        let (get_type : t -> [ `PTR ]) =
          fun (x276 : t) ->
            let x277 = Ojs.get_prop_ascii (t_to_js x276) "type" in
            match Ojs.string_of_js x277 with
            | "PTR" -> `PTR
            | _ -> assert false
        let (set_type : t -> [ `PTR ] -> unit) =
          fun (x278 : t) ->
            fun (x279 : [ `PTR ]) ->
              Ojs.set_prop_ascii (t_to_js x278) "type"
                (match x279 with | `PTR -> Ojs.string_to_js "PTR")
        let (get_value : t -> string) =
          fun (x280 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x280) "value")
        let (set_value : t -> string -> unit) =
          fun (x281 : t) ->
            fun (x282 : string) ->
              Ojs.set_prop_ascii (t_to_js x281) "value"
                (Ojs.string_to_js x282)
      end
    module AnyCnameRecord =
      struct
        type t = dns_AnyCnameRecord
        let rec t_of_js : Ojs.t -> t =
          fun (x284 : Ojs.t) -> dns_AnyCnameRecord_of_js x284
        and t_to_js : t -> Ojs.t =
          fun (x283 : dns_AnyCnameRecord) -> dns_AnyCnameRecord_to_js x283
        let (get_type : t -> [ `CNAME ]) =
          fun (x285 : t) ->
            let x286 = Ojs.get_prop_ascii (t_to_js x285) "type" in
            match Ojs.string_of_js x286 with
            | "CNAME" -> `CNAME
            | _ -> assert false
        let (set_type : t -> [ `CNAME ] -> unit) =
          fun (x287 : t) ->
            fun (x288 : [ `CNAME ]) ->
              Ojs.set_prop_ascii (t_to_js x287) "type"
                (match x288 with | `CNAME -> Ojs.string_to_js "CNAME")
        let (get_value : t -> string) =
          fun (x289 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x289) "value")
        let (set_value : t -> string -> unit) =
          fun (x290 : t) ->
            fun (x291 : string) ->
              Ojs.set_prop_ascii (t_to_js x290) "value"
                (Ojs.string_to_js x291)
      end
    module AnyRecord =
      struct
        type t = dns_AnyRecord
        let rec t_of_js : Ojs.t -> t =
          fun (x293 : Ojs.t) -> dns_AnyRecord_of_js x293
        and t_to_js : t -> Ojs.t =
          fun (x292 : dns_AnyRecord) -> dns_AnyRecord_to_js x292
      end
    let (resolve :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list -> unit)
          -> unit)
      =
      fun ~hostname:(x294 : string) ->
        fun
          ~callback:(x295 :
                      err:ErrnoException.t or_null ->
                        addresses:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolve"
               [|(Ojs.string_to_js x294);(Ojs.fun_to_js 2
                                            (fun (x296 : Ojs.t) ->
                                               fun (x298 : Ojs.t) ->
                                                 x295
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x296)
                                                   ~addresses:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x298)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `A ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:string list -> unit)
            -> unit)
      =
      fun ~hostname:(x300 : string) ->
        fun ~rrtype:(x301 : [ `A ]) ->
          fun
            ~callback:(x302 :
                        err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x300);((match x301 with
                                             | `A -> Ojs.string_to_js "A"));(
                   Ojs.fun_to_js 2
                     (fun (x303 : Ojs.t) ->
                        fun (x305 : Ojs.t) ->
                          x302
                            ~err:(or_null_of_js ErrnoException.t_of_js x303)
                            ~addresses:(Ojs.list_of_js Ojs.string_of_js x305)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `AAAA ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:string list -> unit)
            -> unit)
      =
      fun ~hostname:(x307 : string) ->
        fun ~rrtype:(x308 : [ `AAAA ]) ->
          fun
            ~callback:(x309 :
                        err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x307);((match x308 with
                                             | `AAAA ->
                                                 Ojs.string_to_js "AAAA"));(
                   Ojs.fun_to_js 2
                     (fun (x310 : Ojs.t) ->
                        fun (x312 : Ojs.t) ->
                          x309
                            ~err:(or_null_of_js ErrnoException.t_of_js x310)
                            ~addresses:(Ojs.list_of_js Ojs.string_of_js x312)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `ANY ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:dns_AnyRecord list -> unit)
            -> unit)
      =
      fun ~hostname:(x314 : string) ->
        fun ~rrtype:(x315 : [ `ANY ]) ->
          fun
            ~callback:(x316 :
                        err:ErrnoException.t or_null ->
                          addresses:dns_AnyRecord list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x314);((match x315 with
                                             | `ANY -> Ojs.string_to_js "ANY"));(
                   Ojs.fun_to_js 2
                     (fun (x317 : Ojs.t) ->
                        fun (x319 : Ojs.t) ->
                          x316
                            ~err:(or_null_of_js ErrnoException.t_of_js x317)
                            ~addresses:(Ojs.list_of_js dns_AnyRecord_of_js
                                          x319)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `CNAME ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:string list -> unit)
            -> unit)
      =
      fun ~hostname:(x321 : string) ->
        fun ~rrtype:(x322 : [ `CNAME ]) ->
          fun
            ~callback:(x323 :
                        err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x321);((match x322 with
                                             | `CNAME ->
                                                 Ojs.string_to_js "CNAME"));(
                   Ojs.fun_to_js 2
                     (fun (x324 : Ojs.t) ->
                        fun (x326 : Ojs.t) ->
                          x323
                            ~err:(or_null_of_js ErrnoException.t_of_js x324)
                            ~addresses:(Ojs.list_of_js Ojs.string_of_js x326)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `MX ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:dns_MxRecord list -> unit)
            -> unit)
      =
      fun ~hostname:(x328 : string) ->
        fun ~rrtype:(x329 : [ `MX ]) ->
          fun
            ~callback:(x330 :
                        err:ErrnoException.t or_null ->
                          addresses:dns_MxRecord list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x328);((match x329 with
                                             | `MX -> Ojs.string_to_js "MX"));(
                   Ojs.fun_to_js 2
                     (fun (x331 : Ojs.t) ->
                        fun (x333 : Ojs.t) ->
                          x330
                            ~err:(or_null_of_js ErrnoException.t_of_js x331)
                            ~addresses:(Ojs.list_of_js dns_MxRecord_of_js
                                          x333)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `NAPTR ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:dns_NaptrRecord list -> unit)
            -> unit)
      =
      fun ~hostname:(x335 : string) ->
        fun ~rrtype:(x336 : [ `NAPTR ]) ->
          fun
            ~callback:(x337 :
                        err:ErrnoException.t or_null ->
                          addresses:dns_NaptrRecord list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x335);((match x336 with
                                             | `NAPTR ->
                                                 Ojs.string_to_js "NAPTR"));(
                   Ojs.fun_to_js 2
                     (fun (x338 : Ojs.t) ->
                        fun (x340 : Ojs.t) ->
                          x337
                            ~err:(or_null_of_js ErrnoException.t_of_js x338)
                            ~addresses:(Ojs.list_of_js dns_NaptrRecord_of_js
                                          x340)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `NS ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:string list -> unit)
            -> unit)
      =
      fun ~hostname:(x342 : string) ->
        fun ~rrtype:(x343 : [ `NS ]) ->
          fun
            ~callback:(x344 :
                        err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x342);((match x343 with
                                             | `NS -> Ojs.string_to_js "NS"));(
                   Ojs.fun_to_js 2
                     (fun (x345 : Ojs.t) ->
                        fun (x347 : Ojs.t) ->
                          x344
                            ~err:(or_null_of_js ErrnoException.t_of_js x345)
                            ~addresses:(Ojs.list_of_js Ojs.string_of_js x347)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `PTR ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:string list -> unit)
            -> unit)
      =
      fun ~hostname:(x349 : string) ->
        fun ~rrtype:(x350 : [ `PTR ]) ->
          fun
            ~callback:(x351 :
                        err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x349);((match x350 with
                                             | `PTR -> Ojs.string_to_js "PTR"));(
                   Ojs.fun_to_js 2
                     (fun (x352 : Ojs.t) ->
                        fun (x354 : Ojs.t) ->
                          x351
                            ~err:(or_null_of_js ErrnoException.t_of_js x352)
                            ~addresses:(Ojs.list_of_js Ojs.string_of_js x354)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `SOA ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:dns_SoaRecord -> unit)
            -> unit)
      =
      fun ~hostname:(x356 : string) ->
        fun ~rrtype:(x357 : [ `SOA ]) ->
          fun
            ~callback:(x358 :
                        err:ErrnoException.t or_null ->
                          addresses:dns_SoaRecord -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x356);((match x357 with
                                             | `SOA -> Ojs.string_to_js "SOA"));(
                   Ojs.fun_to_js 2
                     (fun (x359 : Ojs.t) ->
                        fun (x361 : Ojs.t) ->
                          x358
                            ~err:(or_null_of_js ErrnoException.t_of_js x359)
                            ~addresses:(dns_SoaRecord_of_js x361)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `SRV ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:dns_SrvRecord list -> unit)
            -> unit)
      =
      fun ~hostname:(x362 : string) ->
        fun ~rrtype:(x363 : [ `SRV ]) ->
          fun
            ~callback:(x364 :
                        err:ErrnoException.t or_null ->
                          addresses:dns_SrvRecord list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x362);((match x363 with
                                             | `SRV -> Ojs.string_to_js "SRV"));(
                   Ojs.fun_to_js 2
                     (fun (x365 : Ojs.t) ->
                        fun (x367 : Ojs.t) ->
                          x364
                            ~err:(or_null_of_js ErrnoException.t_of_js x365)
                            ~addresses:(Ojs.list_of_js dns_SrvRecord_of_js
                                          x367)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `TXT ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:string list list -> unit)
            -> unit)
      =
      fun ~hostname:(x369 : string) ->
        fun ~rrtype:(x370 : [ `TXT ]) ->
          fun
            ~callback:(x371 :
                        err:ErrnoException.t or_null ->
                          addresses:string list list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x369);((match x370 with
                                             | `TXT -> Ojs.string_to_js "TXT"));(
                   Ojs.fun_to_js 2
                     (fun (x372 : Ojs.t) ->
                        fun (x374 : Ojs.t) ->
                          x371
                            ~err:(or_null_of_js ErrnoException.t_of_js x372)
                            ~addresses:(Ojs.list_of_js
                                          (fun (x375 : Ojs.t) ->
                                             Ojs.list_of_js Ojs.string_of_js
                                               x375) x374)))|])
    let (resolve :
      hostname:string ->
        rrtype:string ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:(dns_SoaRecord,
                        ((dns_AnyRecord, dns_MxRecord, dns_NaptrRecord,
                           dns_SrvRecord) union4,
                          string) or_array or_string)
                        or_array -> unit)
            -> unit)
      =
      fun ~hostname:(x377 : string) ->
        fun ~rrtype:(x378 : string) ->
          fun
            ~callback:(x379 :
                        err:ErrnoException.t or_null ->
                          addresses:(dns_SoaRecord,
                            ((dns_AnyRecord, dns_MxRecord, dns_NaptrRecord,
                               dns_SrvRecord) union4,
                              string) or_array or_string)
                            or_array -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x377);(Ojs.string_to_js x378);(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x380 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x382 :
                                                                    Ojs.t) ->
                                                                    x379
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x380)
                                                                    ~addresses:(
                                                                    or_array_of_js
                                                                    dns_SoaRecord_of_js
                                                                    (fun
                                                                    (x384 :
                                                                    Ojs.t) ->
                                                                    or_string_of_js
                                                                    (fun
                                                                    (x385 :
                                                                    Ojs.t) ->
                                                                    or_array_of_js
                                                                    (fun
                                                                    (x386 :
                                                                    Ojs.t) ->
                                                                    union4_of_js
                                                                    dns_AnyRecord_of_js
                                                                    dns_MxRecord_of_js
                                                                    dns_NaptrRecord_of_js
                                                                    dns_SrvRecord_of_js
                                                                    x386)
                                                                    Ojs.string_of_js
                                                                    x385)
                                                                    x384)
                                                                    x382)))|])
    module Resolve =
      struct
        let (__promisify__ :
          hostname:string ->
            ?rrtype:[ `A  | `AAAA  | `CNAME  | `NS  | `PTR ] ->
              unit -> string list Promise.t)
          =
          fun ~hostname:(x392 : string) ->
            fun
              ?rrtype:(x393 :
                        [ `A  | `AAAA  | `CNAME  | `NS  | `PTR ] option)
              ->
              fun () ->
                Promise.t_of_js
                  (fun (x397 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x397)
                  (let x396 = Ojs.get_prop_ascii Import.dns "resolve" in
                   Ojs.call (Ojs.get_prop_ascii x396 "__promisify__") "apply"
                     [|x396;((let x394 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x394 "push"
                                   [|(Ojs.string_to_js x392)|]);
                              (match x393 with
                               | Some x395 ->
                                   ignore
                                     (Ojs.call x394 "push"
                                        [|((match x395 with
                                            | `A -> Ojs.string_to_js "A"
                                            | `AAAA ->
                                                Ojs.string_to_js "AAAA"
                                            | `CNAME ->
                                                Ojs.string_to_js "CNAME"
                                            | `NS -> Ojs.string_to_js "NS"
                                            | `PTR -> Ojs.string_to_js "PTR"))|])
                               | None -> ());
                              x394))|])
        let (__promisify__ :
          hostname:string -> rrtype:[ `ANY ] -> dns_AnyRecord list Promise.t)
          =
          fun ~hostname:(x399 : string) ->
            fun ~rrtype:(x400 : [ `ANY ]) ->
              Promise.t_of_js
                (fun (x401 : Ojs.t) ->
                   Ojs.list_of_js dns_AnyRecord_of_js x401)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x399);((match x400 with
                                               | `ANY ->
                                                   Ojs.string_to_js "ANY"))|])
        let (__promisify__ :
          hostname:string -> rrtype:[ `MX ] -> dns_MxRecord list Promise.t) =
          fun ~hostname:(x403 : string) ->
            fun ~rrtype:(x404 : [ `MX ]) ->
              Promise.t_of_js
                (fun (x405 : Ojs.t) -> Ojs.list_of_js dns_MxRecord_of_js x405)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x403);((match x404 with
                                               | `MX -> Ojs.string_to_js "MX"))|])
        let (__promisify__ :
          hostname:string ->
            rrtype:[ `NAPTR ] -> dns_NaptrRecord list Promise.t)
          =
          fun ~hostname:(x407 : string) ->
            fun ~rrtype:(x408 : [ `NAPTR ]) ->
              Promise.t_of_js
                (fun (x409 : Ojs.t) ->
                   Ojs.list_of_js dns_NaptrRecord_of_js x409)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x407);((match x408 with
                                               | `NAPTR ->
                                                   Ojs.string_to_js "NAPTR"))|])
        let (__promisify__ :
          hostname:string -> rrtype:[ `SOA ] -> dns_SoaRecord Promise.t) =
          fun ~hostname:(x411 : string) ->
            fun ~rrtype:(x412 : [ `SOA ]) ->
              Promise.t_of_js dns_SoaRecord_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x411);((match x412 with
                                               | `SOA ->
                                                   Ojs.string_to_js "SOA"))|])
        let (__promisify__ :
          hostname:string -> rrtype:[ `SRV ] -> dns_SrvRecord list Promise.t)
          =
          fun ~hostname:(x414 : string) ->
            fun ~rrtype:(x415 : [ `SRV ]) ->
              Promise.t_of_js
                (fun (x416 : Ojs.t) ->
                   Ojs.list_of_js dns_SrvRecord_of_js x416)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x414);((match x415 with
                                               | `SRV ->
                                                   Ojs.string_to_js "SRV"))|])
        let (__promisify__ :
          hostname:string -> rrtype:[ `TXT ] -> string list list Promise.t) =
          fun ~hostname:(x418 : string) ->
            fun ~rrtype:(x419 : [ `TXT ]) ->
              Promise.t_of_js
                (fun (x420 : Ojs.t) ->
                   Ojs.list_of_js
                     (fun (x421 : Ojs.t) ->
                        Ojs.list_of_js Ojs.string_of_js x421) x420)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x418);((match x419 with
                                               | `TXT ->
                                                   Ojs.string_to_js "TXT"))|])
        let (__promisify__ :
          hostname:string ->
            rrtype:string ->
              (dns_SoaRecord,
                ((dns_AnyRecord, dns_MxRecord, dns_NaptrRecord,
                   dns_SrvRecord) union4,
                  string) or_array or_string)
                or_array Promise.t)
          =
          fun ~hostname:(x423 : string) ->
            fun ~rrtype:(x424 : string) ->
              Promise.t_of_js
                (fun (x425 : Ojs.t) ->
                   or_array_of_js dns_SoaRecord_of_js
                     (fun (x427 : Ojs.t) ->
                        or_string_of_js
                          (fun (x428 : Ojs.t) ->
                             or_array_of_js
                               (fun (x429 : Ojs.t) ->
                                  union4_of_js dns_AnyRecord_of_js
                                    dns_MxRecord_of_js dns_NaptrRecord_of_js
                                    dns_SrvRecord_of_js x429)
                               Ojs.string_of_js x428) x427) x425)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x423);(Ojs.string_to_js x424)|])
      end
    let (resolve4 :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list -> unit)
          -> unit)
      =
      fun ~hostname:(x435 : string) ->
        fun
          ~callback:(x436 :
                      err:ErrnoException.t or_null ->
                        addresses:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolve4"
               [|(Ojs.string_to_js x435);(Ojs.fun_to_js 2
                                            (fun (x437 : Ojs.t) ->
                                               fun (x439 : Ojs.t) ->
                                                 x436
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x437)
                                                   ~addresses:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x439)))|])
    let (resolve4 :
      hostname:string ->
        options:dns_ResolveWithTtlOptions ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:dns_RecordWithTtl list -> unit)
            -> unit)
      =
      fun ~hostname:(x441 : string) ->
        fun ~options:(x442 : dns_ResolveWithTtlOptions) ->
          fun
            ~callback:(x443 :
                        err:ErrnoException.t or_null ->
                          addresses:dns_RecordWithTtl list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve4"
                 [|(Ojs.string_to_js x441);(dns_ResolveWithTtlOptions_to_js
                                              x442);(Ojs.fun_to_js 2
                                                       (fun (x444 : Ojs.t) ->
                                                          fun (x446 : Ojs.t)
                                                            ->
                                                            x443
                                                              ~err:(or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x444)
                                                              ~addresses:(
                                                              Ojs.list_of_js
                                                                dns_RecordWithTtl_of_js
                                                                x446)))|])
    let (resolve4 :
      hostname:string ->
        options:dns_ResolveOptions ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:dns_RecordWithTtl or_string list -> unit)
            -> unit)
      =
      fun ~hostname:(x448 : string) ->
        fun ~options:(x449 : dns_ResolveOptions) ->
          fun
            ~callback:(x450 :
                        err:ErrnoException.t or_null ->
                          addresses:dns_RecordWithTtl or_string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve4"
                 [|(Ojs.string_to_js x448);(dns_ResolveOptions_to_js x449);(
                   Ojs.fun_to_js 2
                     (fun (x451 : Ojs.t) ->
                        fun (x453 : Ojs.t) ->
                          x450
                            ~err:(or_null_of_js ErrnoException.t_of_js x451)
                            ~addresses:(Ojs.list_of_js
                                          (fun (x454 : Ojs.t) ->
                                             or_string_of_js
                                               dns_RecordWithTtl_of_js x454)
                                          x453)))|])
    module Resolve4 =
      struct
        let (__promisify__ : hostname:string -> string list Promise.t) =
          fun ~hostname:(x456 : string) ->
            Promise.t_of_js
              (fun (x457 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x457)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve4")
                 "__promisify__" [|(Ojs.string_to_js x456)|])
        let (__promisify__ :
          hostname:string ->
            options:dns_ResolveWithTtlOptions ->
              dns_RecordWithTtl list Promise.t)
          =
          fun ~hostname:(x459 : string) ->
            fun ~options:(x460 : dns_ResolveWithTtlOptions) ->
              Promise.t_of_js
                (fun (x461 : Ojs.t) ->
                   Ojs.list_of_js dns_RecordWithTtl_of_js x461)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve4")
                   "__promisify__"
                   [|(Ojs.string_to_js x459);(dns_ResolveWithTtlOptions_to_js
                                                x460)|])
        let (__promisify__ :
          hostname:string ->
            ?options:dns_ResolveOptions ->
              unit -> dns_RecordWithTtl or_string list Promise.t)
          =
          fun ~hostname:(x463 : string) ->
            fun ?options:(x464 : dns_ResolveOptions option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x468 : Ojs.t) ->
                     Ojs.list_of_js
                       (fun (x469 : Ojs.t) ->
                          or_string_of_js dns_RecordWithTtl_of_js x469) x468)
                  (let x467 = Ojs.get_prop_ascii Import.dns "resolve4" in
                   Ojs.call (Ojs.get_prop_ascii x467 "__promisify__") "apply"
                     [|x467;((let x465 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x465 "push"
                                   [|(Ojs.string_to_js x463)|]);
                              (match x464 with
                               | Some x466 ->
                                   ignore
                                     (Ojs.call x465 "push"
                                        [|(dns_ResolveOptions_to_js x466)|])
                               | None -> ());
                              x465))|])
      end
    let (resolve6 :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list -> unit)
          -> unit)
      =
      fun ~hostname:(x471 : string) ->
        fun
          ~callback:(x472 :
                      err:ErrnoException.t or_null ->
                        addresses:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolve6"
               [|(Ojs.string_to_js x471);(Ojs.fun_to_js 2
                                            (fun (x473 : Ojs.t) ->
                                               fun (x475 : Ojs.t) ->
                                                 x472
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x473)
                                                   ~addresses:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x475)))|])
    let (resolve6 :
      hostname:string ->
        options:dns_ResolveWithTtlOptions ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:dns_RecordWithTtl list -> unit)
            -> unit)
      =
      fun ~hostname:(x477 : string) ->
        fun ~options:(x478 : dns_ResolveWithTtlOptions) ->
          fun
            ~callback:(x479 :
                        err:ErrnoException.t or_null ->
                          addresses:dns_RecordWithTtl list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve6"
                 [|(Ojs.string_to_js x477);(dns_ResolveWithTtlOptions_to_js
                                              x478);(Ojs.fun_to_js 2
                                                       (fun (x480 : Ojs.t) ->
                                                          fun (x482 : Ojs.t)
                                                            ->
                                                            x479
                                                              ~err:(or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x480)
                                                              ~addresses:(
                                                              Ojs.list_of_js
                                                                dns_RecordWithTtl_of_js
                                                                x482)))|])
    let (resolve6 :
      hostname:string ->
        options:dns_ResolveOptions ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:dns_RecordWithTtl or_string list -> unit)
            -> unit)
      =
      fun ~hostname:(x484 : string) ->
        fun ~options:(x485 : dns_ResolveOptions) ->
          fun
            ~callback:(x486 :
                        err:ErrnoException.t or_null ->
                          addresses:dns_RecordWithTtl or_string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve6"
                 [|(Ojs.string_to_js x484);(dns_ResolveOptions_to_js x485);(
                   Ojs.fun_to_js 2
                     (fun (x487 : Ojs.t) ->
                        fun (x489 : Ojs.t) ->
                          x486
                            ~err:(or_null_of_js ErrnoException.t_of_js x487)
                            ~addresses:(Ojs.list_of_js
                                          (fun (x490 : Ojs.t) ->
                                             or_string_of_js
                                               dns_RecordWithTtl_of_js x490)
                                          x489)))|])
    module Resolve6 =
      struct
        let (__promisify__ : hostname:string -> string list Promise.t) =
          fun ~hostname:(x492 : string) ->
            Promise.t_of_js
              (fun (x493 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x493)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve6")
                 "__promisify__" [|(Ojs.string_to_js x492)|])
        let (__promisify__ :
          hostname:string ->
            options:dns_ResolveWithTtlOptions ->
              dns_RecordWithTtl list Promise.t)
          =
          fun ~hostname:(x495 : string) ->
            fun ~options:(x496 : dns_ResolveWithTtlOptions) ->
              Promise.t_of_js
                (fun (x497 : Ojs.t) ->
                   Ojs.list_of_js dns_RecordWithTtl_of_js x497)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve6")
                   "__promisify__"
                   [|(Ojs.string_to_js x495);(dns_ResolveWithTtlOptions_to_js
                                                x496)|])
        let (__promisify__ :
          hostname:string ->
            ?options:dns_ResolveOptions ->
              unit -> dns_RecordWithTtl or_string list Promise.t)
          =
          fun ~hostname:(x499 : string) ->
            fun ?options:(x500 : dns_ResolveOptions option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x504 : Ojs.t) ->
                     Ojs.list_of_js
                       (fun (x505 : Ojs.t) ->
                          or_string_of_js dns_RecordWithTtl_of_js x505) x504)
                  (let x503 = Ojs.get_prop_ascii Import.dns "resolve6" in
                   Ojs.call (Ojs.get_prop_ascii x503 "__promisify__") "apply"
                     [|x503;((let x501 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x501 "push"
                                   [|(Ojs.string_to_js x499)|]);
                              (match x500 with
                               | Some x502 ->
                                   ignore
                                     (Ojs.call x501 "push"
                                        [|(dns_ResolveOptions_to_js x502)|])
                               | None -> ());
                              x501))|])
      end
    let (resolveCname :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list -> unit)
          -> unit)
      =
      fun ~hostname:(x507 : string) ->
        fun
          ~callback:(x508 :
                      err:ErrnoException.t or_null ->
                        addresses:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveCname"
               [|(Ojs.string_to_js x507);(Ojs.fun_to_js 2
                                            (fun (x509 : Ojs.t) ->
                                               fun (x511 : Ojs.t) ->
                                                 x508
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x509)
                                                   ~addresses:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x511)))|])
    module ResolveCname =
      struct
        let (__promisify__ : hostname:string -> string list Promise.t) =
          fun ~hostname:(x513 : string) ->
            Promise.t_of_js
              (fun (x514 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x514)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveCname")
                 "__promisify__" [|(Ojs.string_to_js x513)|])
      end
    let (resolveMx :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:dns_MxRecord list -> unit)
          -> unit)
      =
      fun ~hostname:(x516 : string) ->
        fun
          ~callback:(x517 :
                      err:ErrnoException.t or_null ->
                        addresses:dns_MxRecord list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveMx"
               [|(Ojs.string_to_js x516);(Ojs.fun_to_js 2
                                            (fun (x518 : Ojs.t) ->
                                               fun (x520 : Ojs.t) ->
                                                 x517
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x518)
                                                   ~addresses:(Ojs.list_of_js
                                                                 dns_MxRecord_of_js
                                                                 x520)))|])
    module ResolveMx =
      struct
        let (__promisify__ : hostname:string -> dns_MxRecord list Promise.t)
          =
          fun ~hostname:(x522 : string) ->
            Promise.t_of_js
              (fun (x523 : Ojs.t) -> Ojs.list_of_js dns_MxRecord_of_js x523)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveMx")
                 "__promisify__" [|(Ojs.string_to_js x522)|])
      end
    let (resolveNaptr :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:dns_NaptrRecord list -> unit)
          -> unit)
      =
      fun ~hostname:(x525 : string) ->
        fun
          ~callback:(x526 :
                      err:ErrnoException.t or_null ->
                        addresses:dns_NaptrRecord list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveNaptr"
               [|(Ojs.string_to_js x525);(Ojs.fun_to_js 2
                                            (fun (x527 : Ojs.t) ->
                                               fun (x529 : Ojs.t) ->
                                                 x526
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x527)
                                                   ~addresses:(Ojs.list_of_js
                                                                 dns_NaptrRecord_of_js
                                                                 x529)))|])
    module ResolveNaptr =
      struct
        let (__promisify__ :
          hostname:string -> dns_NaptrRecord list Promise.t) =
          fun ~hostname:(x531 : string) ->
            Promise.t_of_js
              (fun (x532 : Ojs.t) ->
                 Ojs.list_of_js dns_NaptrRecord_of_js x532)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveNaptr")
                 "__promisify__" [|(Ojs.string_to_js x531)|])
      end
    let (resolveNs :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list -> unit)
          -> unit)
      =
      fun ~hostname:(x534 : string) ->
        fun
          ~callback:(x535 :
                      err:ErrnoException.t or_null ->
                        addresses:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveNs"
               [|(Ojs.string_to_js x534);(Ojs.fun_to_js 2
                                            (fun (x536 : Ojs.t) ->
                                               fun (x538 : Ojs.t) ->
                                                 x535
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x536)
                                                   ~addresses:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x538)))|])
    module ResolveNs =
      struct
        let (__promisify__ : hostname:string -> string list Promise.t) =
          fun ~hostname:(x540 : string) ->
            Promise.t_of_js
              (fun (x541 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x541)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveNs")
                 "__promisify__" [|(Ojs.string_to_js x540)|])
      end
    let (resolvePtr :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list -> unit)
          -> unit)
      =
      fun ~hostname:(x543 : string) ->
        fun
          ~callback:(x544 :
                      err:ErrnoException.t or_null ->
                        addresses:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolvePtr"
               [|(Ojs.string_to_js x543);(Ojs.fun_to_js 2
                                            (fun (x545 : Ojs.t) ->
                                               fun (x547 : Ojs.t) ->
                                                 x544
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x545)
                                                   ~addresses:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x547)))|])
    module ResolvePtr =
      struct
        let (__promisify__ : hostname:string -> string list Promise.t) =
          fun ~hostname:(x549 : string) ->
            Promise.t_of_js
              (fun (x550 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x550)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolvePtr")
                 "__promisify__" [|(Ojs.string_to_js x549)|])
      end
    let (resolveSoa :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    address:dns_SoaRecord -> unit)
          -> unit)
      =
      fun ~hostname:(x552 : string) ->
        fun
          ~callback:(x553 :
                      err:ErrnoException.t or_null ->
                        address:dns_SoaRecord -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveSoa"
               [|(Ojs.string_to_js x552);(Ojs.fun_to_js 2
                                            (fun (x554 : Ojs.t) ->
                                               fun (x556 : Ojs.t) ->
                                                 x553
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x554)
                                                   ~address:(dns_SoaRecord_of_js
                                                               x556)))|])
    module ResolveSoa =
      struct
        let (__promisify__ : hostname:string -> dns_SoaRecord Promise.t) =
          fun ~hostname:(x557 : string) ->
            Promise.t_of_js dns_SoaRecord_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveSoa")
                 "__promisify__" [|(Ojs.string_to_js x557)|])
      end
    let (resolveSrv :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:dns_SrvRecord list -> unit)
          -> unit)
      =
      fun ~hostname:(x559 : string) ->
        fun
          ~callback:(x560 :
                      err:ErrnoException.t or_null ->
                        addresses:dns_SrvRecord list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveSrv"
               [|(Ojs.string_to_js x559);(Ojs.fun_to_js 2
                                            (fun (x561 : Ojs.t) ->
                                               fun (x563 : Ojs.t) ->
                                                 x560
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x561)
                                                   ~addresses:(Ojs.list_of_js
                                                                 dns_SrvRecord_of_js
                                                                 x563)))|])
    module ResolveSrv =
      struct
        let (__promisify__ : hostname:string -> dns_SrvRecord list Promise.t)
          =
          fun ~hostname:(x565 : string) ->
            Promise.t_of_js
              (fun (x566 : Ojs.t) -> Ojs.list_of_js dns_SrvRecord_of_js x566)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveSrv")
                 "__promisify__" [|(Ojs.string_to_js x565)|])
      end
    let (resolveTxt :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list list -> unit)
          -> unit)
      =
      fun ~hostname:(x568 : string) ->
        fun
          ~callback:(x569 :
                      err:ErrnoException.t or_null ->
                        addresses:string list list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveTxt"
               [|(Ojs.string_to_js x568);(Ojs.fun_to_js 2
                                            (fun (x570 : Ojs.t) ->
                                               fun (x572 : Ojs.t) ->
                                                 x569
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x570)
                                                   ~addresses:(Ojs.list_of_js
                                                                 (fun
                                                                    (x573 :
                                                                    Ojs.t) ->
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x573)
                                                                 x572)))|])
    module ResolveTxt =
      struct
        let (__promisify__ : hostname:string -> string list list Promise.t) =
          fun ~hostname:(x575 : string) ->
            Promise.t_of_js
              (fun (x576 : Ojs.t) ->
                 Ojs.list_of_js
                   (fun (x577 : Ojs.t) ->
                      Ojs.list_of_js Ojs.string_of_js x577) x576)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveTxt")
                 "__promisify__" [|(Ojs.string_to_js x575)|])
      end
    let (resolveAny :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:dns_AnyRecord list -> unit)
          -> unit)
      =
      fun ~hostname:(x579 : string) ->
        fun
          ~callback:(x580 :
                      err:ErrnoException.t or_null ->
                        addresses:dns_AnyRecord list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveAny"
               [|(Ojs.string_to_js x579);(Ojs.fun_to_js 2
                                            (fun (x581 : Ojs.t) ->
                                               fun (x583 : Ojs.t) ->
                                                 x580
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x581)
                                                   ~addresses:(Ojs.list_of_js
                                                                 dns_AnyRecord_of_js
                                                                 x583)))|])
    module ResolveAny =
      struct
        let (__promisify__ : hostname:string -> dns_AnyRecord list Promise.t)
          =
          fun ~hostname:(x585 : string) ->
            Promise.t_of_js
              (fun (x586 : Ojs.t) -> Ojs.list_of_js dns_AnyRecord_of_js x586)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveAny")
                 "__promisify__" [|(Ojs.string_to_js x585)|])
      end
    let (reverse :
      ip:string ->
        callback:(err:ErrnoException.t or_null ->
                    hostnames:string list -> unit)
          -> unit)
      =
      fun ~ip:(x588 : string) ->
        fun
          ~callback:(x589 :
                      err:ErrnoException.t or_null ->
                        hostnames:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "reverse"
               [|(Ojs.string_to_js x588);(Ojs.fun_to_js 2
                                            (fun (x590 : Ojs.t) ->
                                               fun (x592 : Ojs.t) ->
                                                 x589
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x590)
                                                   ~hostnames:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x592)))|])
    let (setServers : servers:string list -> unit) =
      fun ~servers:(x594 : string list) ->
        ignore
          (Ojs.call Import.dns "setServers"
             [|(Ojs.list_to_js Ojs.string_to_js x594)|])
    let (getServers : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.dns "getServers" [||])
    let (nODATA : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "NODATA")
    let (fORMERR : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "FORMERR")
    let (sERVFAIL : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "SERVFAIL")
    let (nOTFOUND : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "NOTFOUND")
    let (nOTIMP : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "NOTIMP")
    let (rEFUSED : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "REFUSED")
    let (bADQUERY : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADQUERY")
    let (bADNAME : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADNAME")
    let (bADFAMILY : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADFAMILY")
    let (bADRESP : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADRESP")
    let (cONNREFUSED : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "CONNREFUSED")
    let (tIMEOUT : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "TIMEOUT")
    let (eOF : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "EOF")
    let (fILE : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "FILE")
    let (nOMEM : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "NOMEM")
    let (dESTRUCTION : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "DESTRUCTION")
    let (bADSTR : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADSTR")
    let (bADFLAGS : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADFLAGS")
    let (nONAME : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "NONAME")
    let (bADHINTS : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADHINTS")
    let (nOTINITIALIZED : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "NOTINITIALIZED")
    let (lOADIPHLPAPI : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "LOADIPHLPAPI")
    let (aDDRGETNETWORKPARAMS : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "ADDRGETNETWORKPARAMS")
    let (cANCELLED : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "CANCELLED")
    module ResolverOptions =
      struct
        type t = dns_ResolverOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x598 : Ojs.t) -> dns_ResolverOptions_of_js x598
        and t_to_js : t -> Ojs.t =
          fun (x597 : dns_ResolverOptions) -> dns_ResolverOptions_to_js x597
        let (get_timeout : t -> int) =
          fun (x599 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x599) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x600 : t) ->
            fun (x601 : int) ->
              Ojs.set_prop_ascii (t_to_js x600) "timeout"
                (Ojs.int_to_js x601)
      end
    module Resolver =
      struct
        type t = dns_Resolver
        let rec t_of_js : Ojs.t -> t =
          fun (x603 : Ojs.t) -> dns_Resolver_of_js x603
        and t_to_js : t -> Ojs.t =
          fun (x602 : dns_Resolver) -> dns_Resolver_to_js x602
        let (create : ?options:dns_ResolverOptions -> unit -> t) =
          fun ?options:(x604 : dns_ResolverOptions option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.dns "Resolver")
                   (let x605 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x604 with
                     | Some x606 ->
                         ignore
                           (Ojs.call x605 "push"
                              [|(dns_ResolverOptions_to_js x606)|])
                     | None -> ());
                    x605))
        let (cancel : t -> unit) =
          fun (x607 : t) -> ignore (Ojs.call (t_to_js x607) "cancel" [||])
        let (getServers : t -> string list) =
          fun (x608 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x608) "getServers" [||])
        let (resolve :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
                -> unit)
          =
          fun (x616 : t) ->
            fun ~hostname:(x610 : string) ->
              fun
                ~callback:(x611 :
                            err:ErrnoException.t or_null ->
                              addresses:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x616) "resolve"
                     [|(Ojs.string_to_js x610);(Ojs.fun_to_js 2
                                                  (fun (x612 : Ojs.t) ->
                                                     fun (x614 : Ojs.t) ->
                                                       x611
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x612)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x614)))|])
        let (resolve4 :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
                -> unit)
          =
          fun (x623 : t) ->
            fun ~hostname:(x617 : string) ->
              fun
                ~callback:(x618 :
                            err:ErrnoException.t or_null ->
                              addresses:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x623) "resolve4"
                     [|(Ojs.string_to_js x617);(Ojs.fun_to_js 2
                                                  (fun (x619 : Ojs.t) ->
                                                     fun (x621 : Ojs.t) ->
                                                       x618
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x619)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x621)))|])
        let (resolve6 :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
                -> unit)
          =
          fun (x630 : t) ->
            fun ~hostname:(x624 : string) ->
              fun
                ~callback:(x625 :
                            err:ErrnoException.t or_null ->
                              addresses:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x630) "resolve6"
                     [|(Ojs.string_to_js x624);(Ojs.fun_to_js 2
                                                  (fun (x626 : Ojs.t) ->
                                                     fun (x628 : Ojs.t) ->
                                                       x625
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x626)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x628)))|])
        let (resolveAny :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:dns_AnyRecord list -> unit)
                -> unit)
          =
          fun (x637 : t) ->
            fun ~hostname:(x631 : string) ->
              fun
                ~callback:(x632 :
                            err:ErrnoException.t or_null ->
                              addresses:dns_AnyRecord list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x637) "resolveAny"
                     [|(Ojs.string_to_js x631);(Ojs.fun_to_js 2
                                                  (fun (x633 : Ojs.t) ->
                                                     fun (x635 : Ojs.t) ->
                                                       x632
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x633)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           dns_AnyRecord_of_js
                                                           x635)))|])
        let (resolveCname :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
                -> unit)
          =
          fun (x644 : t) ->
            fun ~hostname:(x638 : string) ->
              fun
                ~callback:(x639 :
                            err:ErrnoException.t or_null ->
                              addresses:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x644) "resolveCname"
                     [|(Ojs.string_to_js x638);(Ojs.fun_to_js 2
                                                  (fun (x640 : Ojs.t) ->
                                                     fun (x642 : Ojs.t) ->
                                                       x639
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x640)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x642)))|])
        let (resolveMx :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:dns_MxRecord list -> unit)
                -> unit)
          =
          fun (x651 : t) ->
            fun ~hostname:(x645 : string) ->
              fun
                ~callback:(x646 :
                            err:ErrnoException.t or_null ->
                              addresses:dns_MxRecord list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x651) "resolveMx"
                     [|(Ojs.string_to_js x645);(Ojs.fun_to_js 2
                                                  (fun (x647 : Ojs.t) ->
                                                     fun (x649 : Ojs.t) ->
                                                       x646
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x647)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           dns_MxRecord_of_js
                                                           x649)))|])
        let (resolveNaptr :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:dns_NaptrRecord list -> unit)
                -> unit)
          =
          fun (x658 : t) ->
            fun ~hostname:(x652 : string) ->
              fun
                ~callback:(x653 :
                            err:ErrnoException.t or_null ->
                              addresses:dns_NaptrRecord list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x658) "resolveNaptr"
                     [|(Ojs.string_to_js x652);(Ojs.fun_to_js 2
                                                  (fun (x654 : Ojs.t) ->
                                                     fun (x656 : Ojs.t) ->
                                                       x653
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x654)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           dns_NaptrRecord_of_js
                                                           x656)))|])
        let (resolveNs :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
                -> unit)
          =
          fun (x665 : t) ->
            fun ~hostname:(x659 : string) ->
              fun
                ~callback:(x660 :
                            err:ErrnoException.t or_null ->
                              addresses:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x665) "resolveNs"
                     [|(Ojs.string_to_js x659);(Ojs.fun_to_js 2
                                                  (fun (x661 : Ojs.t) ->
                                                     fun (x663 : Ojs.t) ->
                                                       x660
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x661)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x663)))|])
        let (resolvePtr :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
                -> unit)
          =
          fun (x672 : t) ->
            fun ~hostname:(x666 : string) ->
              fun
                ~callback:(x667 :
                            err:ErrnoException.t or_null ->
                              addresses:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x672) "resolvePtr"
                     [|(Ojs.string_to_js x666);(Ojs.fun_to_js 2
                                                  (fun (x668 : Ojs.t) ->
                                                     fun (x670 : Ojs.t) ->
                                                       x667
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x668)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x670)))|])
        let (resolveSoa :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          address:dns_SoaRecord -> unit)
                -> unit)
          =
          fun (x678 : t) ->
            fun ~hostname:(x673 : string) ->
              fun
                ~callback:(x674 :
                            err:ErrnoException.t or_null ->
                              address:dns_SoaRecord -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x678) "resolveSoa"
                     [|(Ojs.string_to_js x673);(Ojs.fun_to_js 2
                                                  (fun (x675 : Ojs.t) ->
                                                     fun (x677 : Ojs.t) ->
                                                       x674
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x675)
                                                         ~address:(dns_SoaRecord_of_js
                                                                    x677)))|])
        let (resolveSrv :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:dns_SrvRecord list -> unit)
                -> unit)
          =
          fun (x685 : t) ->
            fun ~hostname:(x679 : string) ->
              fun
                ~callback:(x680 :
                            err:ErrnoException.t or_null ->
                              addresses:dns_SrvRecord list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x685) "resolveSrv"
                     [|(Ojs.string_to_js x679);(Ojs.fun_to_js 2
                                                  (fun (x681 : Ojs.t) ->
                                                     fun (x683 : Ojs.t) ->
                                                       x680
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x681)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           dns_SrvRecord_of_js
                                                           x683)))|])
        let (resolveTxt :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list list -> unit)
                -> unit)
          =
          fun (x693 : t) ->
            fun ~hostname:(x686 : string) ->
              fun
                ~callback:(x687 :
                            err:ErrnoException.t or_null ->
                              addresses:string list list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x693) "resolveTxt"
                     [|(Ojs.string_to_js x686);(Ojs.fun_to_js 2
                                                  (fun (x688 : Ojs.t) ->
                                                     fun (x690 : Ojs.t) ->
                                                       x687
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x688)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           (fun
                                                              (x691 : Ojs.t)
                                                              ->
                                                              Ojs.list_of_js
                                                                Ojs.string_of_js
                                                                x691) x690)))|])
        let (reverse :
          t ->
            ip:string ->
              callback:(err:ErrnoException.t or_null ->
                          hostnames:string list -> unit)
                -> unit)
          =
          fun (x700 : t) ->
            fun ~ip:(x694 : string) ->
              fun
                ~callback:(x695 :
                            err:ErrnoException.t or_null ->
                              hostnames:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x700) "reverse"
                     [|(Ojs.string_to_js x694);(Ojs.fun_to_js 2
                                                  (fun (x696 : Ojs.t) ->
                                                     fun (x698 : Ojs.t) ->
                                                       x695
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x696)
                                                         ~hostnames:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x698)))|])
        let (setLocalAddress :
          t -> ?ipv4:string -> ?ipv6:string -> unit -> unit) =
          fun (x706 : t) ->
            fun ?ipv4:(x701 : string option) ->
              fun ?ipv6:(x702 : string option) ->
                fun () ->
                  ignore
                    (let x707 = t_to_js x706 in
                     Ojs.call (Ojs.get_prop_ascii x707 "setLocalAddress")
                       "apply"
                       [|x707;((let x703 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x701 with
                                 | Some x705 ->
                                     ignore
                                       (Ojs.call x703 "push"
                                          [|(Ojs.string_to_js x705)|])
                                 | None -> ());
                                (match x702 with
                                 | Some x704 ->
                                     ignore
                                       (Ojs.call x703 "push"
                                          [|(Ojs.string_to_js x704)|])
                                 | None -> ());
                                x703))|])
        let (setServers : t -> servers:string list -> unit) =
          fun (x710 : t) ->
            fun ~servers:(x708 : string list) ->
              ignore
                (Ojs.call (t_to_js x710) "setServers"
                   [|(Ojs.list_to_js Ojs.string_to_js x708)|])
      end
    module Promises =
      struct
        let (getServers : unit -> string list) =
          fun () ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "getServers" [||])
        let (lookup :
          hostname:string -> family:int -> dns_LookupAddress Promise.t) =
          fun ~hostname:(x712 : string) ->
            fun ~family:(x713 : int) ->
              Promise.t_of_js dns_LookupAddress_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "lookup"
                   [|(Ojs.string_to_js x712);(Ojs.int_to_js x713)|])
        let (lookup :
          hostname:string ->
            options:dns_LookupOneOptions -> dns_LookupAddress Promise.t)
          =
          fun ~hostname:(x715 : string) ->
            fun ~options:(x716 : dns_LookupOneOptions) ->
              Promise.t_of_js dns_LookupAddress_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "lookup"
                   [|(Ojs.string_to_js x715);(dns_LookupOneOptions_to_js x716)|])
        let (lookup :
          hostname:string ->
            options:dns_LookupAllOptions -> dns_LookupAddress list Promise.t)
          =
          fun ~hostname:(x718 : string) ->
            fun ~options:(x719 : dns_LookupAllOptions) ->
              Promise.t_of_js
                (fun (x720 : Ojs.t) ->
                   Ojs.list_of_js dns_LookupAddress_of_js x720)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "lookup"
                   [|(Ojs.string_to_js x718);(dns_LookupAllOptions_to_js x719)|])
        let (lookup :
          hostname:string ->
            options:dns_LookupOptions ->
              (dns_LookupAddress, dns_LookupAddress) or_array Promise.t)
          =
          fun ~hostname:(x722 : string) ->
            fun ~options:(x723 : dns_LookupOptions) ->
              Promise.t_of_js
                (fun (x724 : Ojs.t) ->
                   or_array_of_js dns_LookupAddress_of_js
                     dns_LookupAddress_of_js x724)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "lookup"
                   [|(Ojs.string_to_js x722);(dns_LookupOptions_to_js x723)|])
        let (lookup : hostname:string -> dns_LookupAddress Promise.t) =
          fun ~hostname:(x727 : string) ->
            Promise.t_of_js dns_LookupAddress_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "lookup"
                 [|(Ojs.string_to_js x727)|])
        let (lookupService :
          address:string -> port:int -> anonymous_interface_0 Promise.t) =
          fun ~address:(x729 : string) ->
            fun ~port:(x730 : int) ->
              Promise.t_of_js anonymous_interface_0_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "lookupService"
                   [|(Ojs.string_to_js x729);(Ojs.int_to_js x730)|])
        let (resolve : hostname:string -> string list Promise.t) =
          fun ~hostname:(x732 : string) ->
            Promise.t_of_js
              (fun (x733 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x733)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "resolve"
                 [|(Ojs.string_to_js x732)|])
        let (resolve :
          hostname:string -> rrtype:[ `A ] -> string list Promise.t) =
          fun ~hostname:(x735 : string) ->
            fun ~rrtype:(x736 : [ `A ]) ->
              Promise.t_of_js
                (fun (x737 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x737)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x735);((match x736 with
                                               | `A -> Ojs.string_to_js "A"))|])
        let (resolve :
          hostname:string -> rrtype:[ `AAAA ] -> string list Promise.t) =
          fun ~hostname:(x739 : string) ->
            fun ~rrtype:(x740 : [ `AAAA ]) ->
              Promise.t_of_js
                (fun (x741 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x741)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x739);((match x740 with
                                               | `AAAA ->
                                                   Ojs.string_to_js "AAAA"))|])
        let (resolve :
          hostname:string -> rrtype:[ `ANY ] -> dns_AnyRecord list Promise.t)
          =
          fun ~hostname:(x743 : string) ->
            fun ~rrtype:(x744 : [ `ANY ]) ->
              Promise.t_of_js
                (fun (x745 : Ojs.t) ->
                   Ojs.list_of_js dns_AnyRecord_of_js x745)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x743);((match x744 with
                                               | `ANY ->
                                                   Ojs.string_to_js "ANY"))|])
        let (resolve :
          hostname:string -> rrtype:[ `CNAME ] -> string list Promise.t) =
          fun ~hostname:(x747 : string) ->
            fun ~rrtype:(x748 : [ `CNAME ]) ->
              Promise.t_of_js
                (fun (x749 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x749)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x747);((match x748 with
                                               | `CNAME ->
                                                   Ojs.string_to_js "CNAME"))|])
        let (resolve :
          hostname:string -> rrtype:[ `MX ] -> dns_MxRecord list Promise.t) =
          fun ~hostname:(x751 : string) ->
            fun ~rrtype:(x752 : [ `MX ]) ->
              Promise.t_of_js
                (fun (x753 : Ojs.t) -> Ojs.list_of_js dns_MxRecord_of_js x753)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x751);((match x752 with
                                               | `MX -> Ojs.string_to_js "MX"))|])
        let (resolve :
          hostname:string ->
            rrtype:[ `NAPTR ] -> dns_NaptrRecord list Promise.t)
          =
          fun ~hostname:(x755 : string) ->
            fun ~rrtype:(x756 : [ `NAPTR ]) ->
              Promise.t_of_js
                (fun (x757 : Ojs.t) ->
                   Ojs.list_of_js dns_NaptrRecord_of_js x757)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x755);((match x756 with
                                               | `NAPTR ->
                                                   Ojs.string_to_js "NAPTR"))|])
        let (resolve :
          hostname:string -> rrtype:[ `NS ] -> string list Promise.t) =
          fun ~hostname:(x759 : string) ->
            fun ~rrtype:(x760 : [ `NS ]) ->
              Promise.t_of_js
                (fun (x761 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x761)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x759);((match x760 with
                                               | `NS -> Ojs.string_to_js "NS"))|])
        let (resolve :
          hostname:string -> rrtype:[ `PTR ] -> string list Promise.t) =
          fun ~hostname:(x763 : string) ->
            fun ~rrtype:(x764 : [ `PTR ]) ->
              Promise.t_of_js
                (fun (x765 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x765)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x763);((match x764 with
                                               | `PTR ->
                                                   Ojs.string_to_js "PTR"))|])
        let (resolve :
          hostname:string -> rrtype:[ `SOA ] -> dns_SoaRecord Promise.t) =
          fun ~hostname:(x767 : string) ->
            fun ~rrtype:(x768 : [ `SOA ]) ->
              Promise.t_of_js dns_SoaRecord_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x767);((match x768 with
                                               | `SOA ->
                                                   Ojs.string_to_js "SOA"))|])
        let (resolve :
          hostname:string -> rrtype:[ `SRV ] -> dns_SrvRecord list Promise.t)
          =
          fun ~hostname:(x770 : string) ->
            fun ~rrtype:(x771 : [ `SRV ]) ->
              Promise.t_of_js
                (fun (x772 : Ojs.t) ->
                   Ojs.list_of_js dns_SrvRecord_of_js x772)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x770);((match x771 with
                                               | `SRV ->
                                                   Ojs.string_to_js "SRV"))|])
        let (resolve :
          hostname:string -> rrtype:[ `TXT ] -> string list list Promise.t) =
          fun ~hostname:(x774 : string) ->
            fun ~rrtype:(x775 : [ `TXT ]) ->
              Promise.t_of_js
                (fun (x776 : Ojs.t) ->
                   Ojs.list_of_js
                     (fun (x777 : Ojs.t) ->
                        Ojs.list_of_js Ojs.string_of_js x777) x776)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x774);((match x775 with
                                               | `TXT ->
                                                   Ojs.string_to_js "TXT"))|])
        let (resolve :
          hostname:string ->
            rrtype:string ->
              (dns_SoaRecord,
                ((dns_AnyRecord, dns_MxRecord, dns_NaptrRecord,
                   dns_SrvRecord) union4,
                  string) or_array or_string)
                or_array Promise.t)
          =
          fun ~hostname:(x779 : string) ->
            fun ~rrtype:(x780 : string) ->
              Promise.t_of_js
                (fun (x781 : Ojs.t) ->
                   or_array_of_js dns_SoaRecord_of_js
                     (fun (x783 : Ojs.t) ->
                        or_string_of_js
                          (fun (x784 : Ojs.t) ->
                             or_array_of_js
                               (fun (x785 : Ojs.t) ->
                                  union4_of_js dns_AnyRecord_of_js
                                    dns_MxRecord_of_js dns_NaptrRecord_of_js
                                    dns_SrvRecord_of_js x785)
                               Ojs.string_of_js x784) x783) x781)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x779);(Ojs.string_to_js x780)|])
        let (resolve4 : hostname:string -> string list Promise.t) =
          fun ~hostname:(x791 : string) ->
            Promise.t_of_js
              (fun (x792 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x792)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "resolve4"
                 [|(Ojs.string_to_js x791)|])
        let (resolve4 :
          hostname:string ->
            options:dns_ResolveWithTtlOptions ->
              dns_RecordWithTtl list Promise.t)
          =
          fun ~hostname:(x794 : string) ->
            fun ~options:(x795 : dns_ResolveWithTtlOptions) ->
              Promise.t_of_js
                (fun (x796 : Ojs.t) ->
                   Ojs.list_of_js dns_RecordWithTtl_of_js x796)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve4"
                   [|(Ojs.string_to_js x794);(dns_ResolveWithTtlOptions_to_js
                                                x795)|])
        let (resolve4 :
          hostname:string ->
            options:dns_ResolveOptions ->
              dns_RecordWithTtl or_string list Promise.t)
          =
          fun ~hostname:(x798 : string) ->
            fun ~options:(x799 : dns_ResolveOptions) ->
              Promise.t_of_js
                (fun (x800 : Ojs.t) ->
                   Ojs.list_of_js
                     (fun (x801 : Ojs.t) ->
                        or_string_of_js dns_RecordWithTtl_of_js x801) x800)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve4"
                   [|(Ojs.string_to_js x798);(dns_ResolveOptions_to_js x799)|])
        let (resolve6 : hostname:string -> string list Promise.t) =
          fun ~hostname:(x803 : string) ->
            Promise.t_of_js
              (fun (x804 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x804)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "resolve6"
                 [|(Ojs.string_to_js x803)|])
        let (resolve6 :
          hostname:string ->
            options:dns_ResolveWithTtlOptions ->
              dns_RecordWithTtl list Promise.t)
          =
          fun ~hostname:(x806 : string) ->
            fun ~options:(x807 : dns_ResolveWithTtlOptions) ->
              Promise.t_of_js
                (fun (x808 : Ojs.t) ->
                   Ojs.list_of_js dns_RecordWithTtl_of_js x808)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve6"
                   [|(Ojs.string_to_js x806);(dns_ResolveWithTtlOptions_to_js
                                                x807)|])
        let (resolve6 :
          hostname:string ->
            options:dns_ResolveOptions ->
              dns_RecordWithTtl or_string list Promise.t)
          =
          fun ~hostname:(x810 : string) ->
            fun ~options:(x811 : dns_ResolveOptions) ->
              Promise.t_of_js
                (fun (x812 : Ojs.t) ->
                   Ojs.list_of_js
                     (fun (x813 : Ojs.t) ->
                        or_string_of_js dns_RecordWithTtl_of_js x813) x812)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve6"
                   [|(Ojs.string_to_js x810);(dns_ResolveOptions_to_js x811)|])
        let (resolveAny : hostname:string -> dns_AnyRecord list Promise.t) =
          fun ~hostname:(x815 : string) ->
            Promise.t_of_js
              (fun (x816 : Ojs.t) -> Ojs.list_of_js dns_AnyRecord_of_js x816)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveAny" [|(Ojs.string_to_js x815)|])
        let (resolveCname : hostname:string -> string list Promise.t) =
          fun ~hostname:(x818 : string) ->
            Promise.t_of_js
              (fun (x819 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x819)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveCname" [|(Ojs.string_to_js x818)|])
        let (resolveMx : hostname:string -> dns_MxRecord list Promise.t) =
          fun ~hostname:(x821 : string) ->
            Promise.t_of_js
              (fun (x822 : Ojs.t) -> Ojs.list_of_js dns_MxRecord_of_js x822)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveMx" [|(Ojs.string_to_js x821)|])
        let (resolveNaptr :
          hostname:string -> dns_NaptrRecord list Promise.t) =
          fun ~hostname:(x824 : string) ->
            Promise.t_of_js
              (fun (x825 : Ojs.t) ->
                 Ojs.list_of_js dns_NaptrRecord_of_js x825)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveNaptr" [|(Ojs.string_to_js x824)|])
        let (resolveNs : hostname:string -> string list Promise.t) =
          fun ~hostname:(x827 : string) ->
            Promise.t_of_js
              (fun (x828 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x828)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveNs" [|(Ojs.string_to_js x827)|])
        let (resolvePtr : hostname:string -> string list Promise.t) =
          fun ~hostname:(x830 : string) ->
            Promise.t_of_js
              (fun (x831 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x831)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolvePtr" [|(Ojs.string_to_js x830)|])
        let (resolveSoa : hostname:string -> dns_SoaRecord Promise.t) =
          fun ~hostname:(x833 : string) ->
            Promise.t_of_js dns_SoaRecord_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveSoa" [|(Ojs.string_to_js x833)|])
        let (resolveSrv : hostname:string -> dns_SrvRecord list Promise.t) =
          fun ~hostname:(x835 : string) ->
            Promise.t_of_js
              (fun (x836 : Ojs.t) -> Ojs.list_of_js dns_SrvRecord_of_js x836)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveSrv" [|(Ojs.string_to_js x835)|])
        let (resolveTxt : hostname:string -> string list list Promise.t) =
          fun ~hostname:(x838 : string) ->
            Promise.t_of_js
              (fun (x839 : Ojs.t) ->
                 Ojs.list_of_js
                   (fun (x840 : Ojs.t) ->
                      Ojs.list_of_js Ojs.string_of_js x840) x839)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveTxt" [|(Ojs.string_to_js x838)|])
        let (reverse : ip:string -> string list Promise.t) =
          fun ~ip:(x842 : string) ->
            Promise.t_of_js
              (fun (x843 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x843)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "reverse"
                 [|(Ojs.string_to_js x842)|])
        let (setServers : servers:string list -> unit) =
          fun ~servers:(x845 : string list) ->
            ignore
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "setServers" [|(Ojs.list_to_js Ojs.string_to_js x845)|])
        module Resolver =
          struct
            type t = dns_promises_Resolver
            let rec t_of_js : Ojs.t -> t =
              fun (x848 : Ojs.t) -> dns_promises_Resolver_of_js x848
            and t_to_js : t -> Ojs.t =
              fun (x847 : dns_promises_Resolver) ->
                dns_promises_Resolver_to_js x847
            let (create : ?options:dns_ResolverOptions -> unit -> t) =
              fun ?options:(x849 : dns_ResolverOptions option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.dns "promises")
                          "Resolver")
                       (let x850 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x849 with
                         | Some x851 ->
                             ignore
                               (Ojs.call x850 "push"
                                  [|(dns_ResolverOptions_to_js x851)|])
                         | None -> ());
                        x850))
            let (cancel : t -> unit) =
              fun (x852 : t) ->
                ignore (Ojs.call (t_to_js x852) "cancel" [||])
            let (getServers : t -> string list) =
              fun (x853 : t) ->
                Ojs.list_of_js Ojs.string_of_js
                  (Ojs.call (t_to_js x853) "getServers" [||])
            let (resolve : t -> hostname:string -> string list Promise.t) =
              fun (x856 : t) ->
                fun ~hostname:(x855 : string) ->
                  Promise.t_of_js
                    (fun (x857 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x857)
                    (Ojs.call (t_to_js x856) "resolve"
                       [|(Ojs.string_to_js x855)|])
            let (resolve4 : t -> hostname:string -> string list Promise.t) =
              fun (x860 : t) ->
                fun ~hostname:(x859 : string) ->
                  Promise.t_of_js
                    (fun (x861 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x861)
                    (Ojs.call (t_to_js x860) "resolve4"
                       [|(Ojs.string_to_js x859)|])
            let (resolve6 : t -> hostname:string -> string list Promise.t) =
              fun (x864 : t) ->
                fun ~hostname:(x863 : string) ->
                  Promise.t_of_js
                    (fun (x865 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x865)
                    (Ojs.call (t_to_js x864) "resolve6"
                       [|(Ojs.string_to_js x863)|])
            let (resolveAny :
              t -> hostname:string -> dns_AnyRecord list Promise.t) =
              fun (x868 : t) ->
                fun ~hostname:(x867 : string) ->
                  Promise.t_of_js
                    (fun (x869 : Ojs.t) ->
                       Ojs.list_of_js dns_AnyRecord_of_js x869)
                    (Ojs.call (t_to_js x868) "resolveAny"
                       [|(Ojs.string_to_js x867)|])
            let (resolveCname :
              t -> hostname:string -> string list Promise.t) =
              fun (x872 : t) ->
                fun ~hostname:(x871 : string) ->
                  Promise.t_of_js
                    (fun (x873 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x873)
                    (Ojs.call (t_to_js x872) "resolveCname"
                       [|(Ojs.string_to_js x871)|])
            let (resolveMx :
              t -> hostname:string -> dns_MxRecord list Promise.t) =
              fun (x876 : t) ->
                fun ~hostname:(x875 : string) ->
                  Promise.t_of_js
                    (fun (x877 : Ojs.t) ->
                       Ojs.list_of_js dns_MxRecord_of_js x877)
                    (Ojs.call (t_to_js x876) "resolveMx"
                       [|(Ojs.string_to_js x875)|])
            let (resolveNaptr :
              t -> hostname:string -> dns_NaptrRecord list Promise.t) =
              fun (x880 : t) ->
                fun ~hostname:(x879 : string) ->
                  Promise.t_of_js
                    (fun (x881 : Ojs.t) ->
                       Ojs.list_of_js dns_NaptrRecord_of_js x881)
                    (Ojs.call (t_to_js x880) "resolveNaptr"
                       [|(Ojs.string_to_js x879)|])
            let (resolveNs : t -> hostname:string -> string list Promise.t) =
              fun (x884 : t) ->
                fun ~hostname:(x883 : string) ->
                  Promise.t_of_js
                    (fun (x885 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x885)
                    (Ojs.call (t_to_js x884) "resolveNs"
                       [|(Ojs.string_to_js x883)|])
            let (resolvePtr : t -> hostname:string -> string list Promise.t)
              =
              fun (x888 : t) ->
                fun ~hostname:(x887 : string) ->
                  Promise.t_of_js
                    (fun (x889 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x889)
                    (Ojs.call (t_to_js x888) "resolvePtr"
                       [|(Ojs.string_to_js x887)|])
            let (resolveSoa :
              t -> hostname:string -> dns_SoaRecord Promise.t) =
              fun (x892 : t) ->
                fun ~hostname:(x891 : string) ->
                  Promise.t_of_js dns_SoaRecord_of_js
                    (Ojs.call (t_to_js x892) "resolveSoa"
                       [|(Ojs.string_to_js x891)|])
            let (resolveSrv :
              t -> hostname:string -> dns_SrvRecord list Promise.t) =
              fun (x895 : t) ->
                fun ~hostname:(x894 : string) ->
                  Promise.t_of_js
                    (fun (x896 : Ojs.t) ->
                       Ojs.list_of_js dns_SrvRecord_of_js x896)
                    (Ojs.call (t_to_js x895) "resolveSrv"
                       [|(Ojs.string_to_js x894)|])
            let (resolveTxt :
              t -> hostname:string -> string list list Promise.t) =
              fun (x899 : t) ->
                fun ~hostname:(x898 : string) ->
                  Promise.t_of_js
                    (fun (x900 : Ojs.t) ->
                       Ojs.list_of_js
                         (fun (x901 : Ojs.t) ->
                            Ojs.list_of_js Ojs.string_of_js x901) x900)
                    (Ojs.call (t_to_js x899) "resolveTxt"
                       [|(Ojs.string_to_js x898)|])
            let (reverse : t -> ip:string -> string list Promise.t) =
              fun (x904 : t) ->
                fun ~ip:(x903 : string) ->
                  Promise.t_of_js
                    (fun (x905 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x905)
                    (Ojs.call (t_to_js x904) "reverse"
                       [|(Ojs.string_to_js x903)|])
            let (setLocalAddress :
              t -> ?ipv4:string -> ?ipv6:string -> unit -> unit) =
              fun (x912 : t) ->
                fun ?ipv4:(x907 : string option) ->
                  fun ?ipv6:(x908 : string option) ->
                    fun () ->
                      ignore
                        (let x913 = t_to_js x912 in
                         Ojs.call (Ojs.get_prop_ascii x913 "setLocalAddress")
                           "apply"
                           [|x913;((let x909 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    (match x907 with
                                     | Some x911 ->
                                         ignore
                                           (Ojs.call x909 "push"
                                              [|(Ojs.string_to_js x911)|])
                                     | None -> ());
                                    (match x908 with
                                     | Some x910 ->
                                         ignore
                                           (Ojs.call x909 "push"
                                              [|(Ojs.string_to_js x910)|])
                                     | None -> ());
                                    x909))|])
            let (setServers : t -> servers:string list -> unit) =
              fun (x916 : t) ->
                fun ~servers:(x914 : string list) ->
                  ignore
                    (Ojs.call (t_to_js x916) "setServers"
                       [|(Ojs.list_to_js Ojs.string_to_js x914)|])
          end
      end
  end
