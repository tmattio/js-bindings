[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_hostname : t -> string) =
      fun (x3 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3) "hostname")
    let (set_hostname : t -> string -> unit) =
      fun (x4 : t) ->
        fun (x5 : string) ->
          Ojs.set_prop_ascii (t_to_js x4) "hostname" (Ojs.string_to_js x5)
    let (get_service : t -> string) =
      fun (x6 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x6) "service")
    let (set_service : t -> string -> unit) =
      fun (x7 : t) ->
        fun (x8 : string) ->
          Ojs.set_prop_ascii (t_to_js x7) "service" (Ojs.string_to_js x8)
  end
module Dns =
  struct
    let (addrconfig : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.dns "ADDRCONFIG")
    let (v4MAPPED : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.dns "V4MAPPED")
    let (all : int) = Ojs.int_of_js (Ojs.get_prop_ascii Import.dns "ALL")
    module LookupOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x10 : Ojs.t) -> x10
        and t_to_js : t -> Ojs.t = fun (x9 : Ojs.t) -> x9
        let (get_family : t -> int) =
          fun (x11 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x11) "family")
        let (set_family : t -> int -> unit) =
          fun (x12 : t) ->
            fun (x13 : int) ->
              Ojs.set_prop_ascii (t_to_js x12) "family" (Ojs.int_to_js x13)
        let (get_hints : t -> int) =
          fun (x14 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x14) "hints")
        let (set_hints : t -> int -> unit) =
          fun (x15 : t) ->
            fun (x16 : int) ->
              Ojs.set_prop_ascii (t_to_js x15) "hints" (Ojs.int_to_js x16)
        let (get_all : t -> bool) =
          fun (x17 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x17) "all")
        let (set_all : t -> bool -> unit) =
          fun (x18 : t) ->
            fun (x19 : bool) ->
              Ojs.set_prop_ascii (t_to_js x18) "all" (Ojs.bool_to_js x19)
        let (get_verbatim : t -> bool) =
          fun (x20 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x20) "verbatim")
        let (set_verbatim : t -> bool -> unit) =
          fun (x21 : t) ->
            fun (x22 : bool) ->
              Ojs.set_prop_ascii (t_to_js x21) "verbatim"
                (Ojs.bool_to_js x22)
      end
    module LookupOneOptions =
      struct
        include struct include LookupOptions end
        let (get_all : t -> [ `L_b_false ]) =
          fun (x23 : t) ->
            let x24 = Ojs.get_prop_ascii (t_to_js x23) "all" in
            match Ojs.bool_of_js x24 with
            | false -> `L_b_false
            | _ -> assert false
        let (set_all : t -> [ `L_b_false ] -> unit) =
          fun (x25 : t) ->
            fun (x26 : [ `L_b_false ]) ->
              Ojs.set_prop_ascii (t_to_js x25) "all"
                (match x26 with | `L_b_false -> Ojs.string_to_js "LBFalse")
      end
    module LookupAllOptions =
      struct
        include struct include LookupOptions end
        let (get_all : t -> [ `L_b_true ]) =
          fun (x27 : t) ->
            let x28 = Ojs.get_prop_ascii (t_to_js x27) "all" in
            match Ojs.bool_of_js x28 with
            | true -> `L_b_true
            | _ -> assert false
        let (set_all : t -> [ `L_b_true ] -> unit) =
          fun (x29 : t) ->
            fun (x30 : [ `L_b_true ]) ->
              Ojs.set_prop_ascii (t_to_js x29) "all"
                (match x30 with | `L_b_true -> Ojs.string_to_js "LBTrue")
      end
    module LookupAddress =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x32 : Ojs.t) -> x32
        and t_to_js : t -> Ojs.t = fun (x31 : Ojs.t) -> x31
        let (get_address : t -> string) =
          fun (x33 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x33) "address")
        let (set_address : t -> string -> unit) =
          fun (x34 : t) ->
            fun (x35 : string) ->
              Ojs.set_prop_ascii (t_to_js x34) "address"
                (Ojs.string_to_js x35)
        let (get_family : t -> int) =
          fun (x36 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x36) "family")
        let (set_family : t -> int -> unit) =
          fun (x37 : t) ->
            fun (x38 : int) ->
              Ojs.set_prop_ascii (t_to_js x37) "family" (Ojs.int_to_js x38)
      end
    let (lookup :
      hostname:string ->
        family:int ->
          callback:(err:ErrnoException.t or_null ->
                      address:string -> family:int -> unit)
            -> unit)
      =
      fun ~hostname:(x39 : string) ->
        fun ~family:(x40 : int) ->
          fun
            ~callback:(x41 :
                        err:ErrnoException.t or_null ->
                          address:string -> family:int -> unit)
            ->
            ignore
              (Ojs.call Import.dns "lookup"
                 [|(Ojs.string_to_js x39);(Ojs.int_to_js x40);(Ojs.fun_to_js
                                                                 3
                                                                 (fun
                                                                    (x42 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x44 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x45 :
                                                                    Ojs.t) ->
                                                                    x41
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x42)
                                                                    ~address:(
                                                                    Ojs.string_of_js
                                                                    x44)
                                                                    ~family:(
                                                                    Ojs.int_of_js
                                                                    x45)))|])
    let (lookup :
      hostname:string ->
        options:LookupOneOptions.t ->
          callback:(err:ErrnoException.t or_null ->
                      address:string -> family:int -> unit)
            -> unit)
      =
      fun ~hostname:(x46 : string) ->
        fun ~options:(x47 : LookupOneOptions.t) ->
          fun
            ~callback:(x48 :
                        err:ErrnoException.t or_null ->
                          address:string -> family:int -> unit)
            ->
            ignore
              (Ojs.call Import.dns "lookup"
                 [|(Ojs.string_to_js x46);(LookupOneOptions.t_to_js x47);(
                   Ojs.fun_to_js 3
                     (fun (x49 : Ojs.t) ->
                        fun (x51 : Ojs.t) ->
                          fun (x52 : Ojs.t) ->
                            x48
                              ~err:(or_null_of_js ErrnoException.t_of_js x49)
                              ~address:(Ojs.string_of_js x51)
                              ~family:(Ojs.int_of_js x52)))|])
    let (lookup :
      hostname:string ->
        options:LookupAllOptions.t ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:LookupAddress.t list -> unit)
            -> unit)
      =
      fun ~hostname:(x53 : string) ->
        fun ~options:(x54 : LookupAllOptions.t) ->
          fun
            ~callback:(x55 :
                        err:ErrnoException.t or_null ->
                          addresses:LookupAddress.t list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "lookup"
                 [|(Ojs.string_to_js x53);(LookupAllOptions.t_to_js x54);(
                   Ojs.fun_to_js 2
                     (fun (x56 : Ojs.t) ->
                        fun (x58 : Ojs.t) ->
                          x55 ~err:(or_null_of_js ErrnoException.t_of_js x56)
                            ~addresses:(Ojs.list_of_js LookupAddress.t_of_js
                                          x58)))|])
    let (lookup :
      hostname:string ->
        options:LookupOptions.t ->
          callback:(err:ErrnoException.t or_null ->
                      address:LookupAddress.t list or_string ->
                        family:int -> unit)
            -> unit)
      =
      fun ~hostname:(x60 : string) ->
        fun ~options:(x61 : LookupOptions.t) ->
          fun
            ~callback:(x62 :
                        err:ErrnoException.t or_null ->
                          address:LookupAddress.t list or_string ->
                            family:int -> unit)
            ->
            ignore
              (Ojs.call Import.dns "lookup"
                 [|(Ojs.string_to_js x60);(LookupOptions.t_to_js x61);(
                   Ojs.fun_to_js 3
                     (fun (x63 : Ojs.t) ->
                        fun (x65 : Ojs.t) ->
                          fun (x68 : Ojs.t) ->
                            x62
                              ~err:(or_null_of_js ErrnoException.t_of_js x63)
                              ~address:(or_string_of_js
                                          (fun (x66 : Ojs.t) ->
                                             Ojs.list_of_js
                                               LookupAddress.t_of_js x66) x65)
                              ~family:(Ojs.int_of_js x68)))|])
    let (lookup :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    address:string -> family:int -> unit)
          -> unit)
      =
      fun ~hostname:(x69 : string) ->
        fun
          ~callback:(x70 :
                      err:ErrnoException.t or_null ->
                        address:string -> family:int -> unit)
          ->
          ignore
            (Ojs.call Import.dns "lookup"
               [|(Ojs.string_to_js x69);(Ojs.fun_to_js 3
                                           (fun (x71 : Ojs.t) ->
                                              fun (x73 : Ojs.t) ->
                                                fun (x74 : Ojs.t) ->
                                                  x70
                                                    ~err:(or_null_of_js
                                                            ErrnoException.t_of_js
                                                            x71)
                                                    ~address:(Ojs.string_of_js
                                                                x73)
                                                    ~family:(Ojs.int_of_js
                                                               x74)))|])
    module Lookup =
      struct
        let (__promisify__ :
          hostname:string ->
            options:LookupAllOptions.t -> LookupAddress.t list Promise.t)
          =
          fun ~hostname:(x75 : string) ->
            fun ~options:(x76 : LookupAllOptions.t) ->
              Promise.t_of_js
                (fun (x77 : Ojs.t) ->
                   Ojs.list_of_js LookupAddress.t_of_js x77)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "lookup")
                   "__promisify__"
                   [|(Ojs.string_to_js x75);(LookupAllOptions.t_to_js x76)|])
        let (__promisify__ :
          hostname:string ->
            ?options:LookupOneOptions.t or_number ->
              unit -> LookupAddress.t Promise.t)
          =
          fun ~hostname:(x79 : string) ->
            fun ?options:(x80 : LookupOneOptions.t or_number option) ->
              fun () ->
                Promise.t_of_js LookupAddress.t_of_js
                  (let x84 = Ojs.get_prop_ascii Import.dns "lookup" in
                   Ojs.call (Ojs.get_prop_ascii x84 "__promisify__") "apply"
                     [|x84;((let x81 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x81 "push"
                                  [|(Ojs.string_to_js x79)|]);
                             (match x80 with
                              | Some x82 ->
                                  ignore
                                    (Ojs.call x81 "push"
                                       [|(or_number_to_js
                                            LookupOneOptions.t_to_js x82)|])
                              | None -> ());
                             x81))|])
        let (__promisify__ :
          hostname:string ->
            options:LookupOptions.t ->
              (LookupAddress.t, LookupAddress.t) or_array Promise.t)
          =
          fun ~hostname:(x86 : string) ->
            fun ~options:(x87 : LookupOptions.t) ->
              Promise.t_of_js
                (fun (x88 : Ojs.t) ->
                   or_array_of_js LookupAddress.t_of_js LookupAddress.t_of_js
                     x88)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "lookup")
                   "__promisify__"
                   [|(Ojs.string_to_js x86);(LookupOptions.t_to_js x87)|])
      end
    let (lookup_service :
      address:string ->
        port:int ->
          callback:(err:ErrnoException.t or_null ->
                      hostname:string -> service:string -> unit)
            -> unit)
      =
      fun ~address:(x91 : string) ->
        fun ~port:(x92 : int) ->
          fun
            ~callback:(x93 :
                        err:ErrnoException.t or_null ->
                          hostname:string -> service:string -> unit)
            ->
            ignore
              (Ojs.call Import.dns "lookupService"
                 [|(Ojs.string_to_js x91);(Ojs.int_to_js x92);(Ojs.fun_to_js
                                                                 3
                                                                 (fun
                                                                    (x94 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x96 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x97 :
                                                                    Ojs.t) ->
                                                                    x93
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x94)
                                                                    ~hostname:(
                                                                    Ojs.string_of_js
                                                                    x96)
                                                                    ~service:(
                                                                    Ojs.string_of_js
                                                                    x97)))|])
    module LookupService =
      struct
        let (__promisify__ :
          address:string -> port:int -> AnonymousInterface0.t Promise.t) =
          fun ~address:(x98 : string) ->
            fun ~port:(x99 : int) ->
              Promise.t_of_js AnonymousInterface0.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.dns "lookupService")
                   "__promisify__"
                   [|(Ojs.string_to_js x98);(Ojs.int_to_js x99)|])
      end
    module ResolveOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x102 : Ojs.t) -> x102
        and t_to_js : t -> Ojs.t = fun (x101 : Ojs.t) -> x101
        let (get_ttl : t -> bool) =
          fun (x103 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x103) "ttl")
        let (set_ttl : t -> bool -> unit) =
          fun (x104 : t) ->
            fun (x105 : bool) ->
              Ojs.set_prop_ascii (t_to_js x104) "ttl" (Ojs.bool_to_js x105)
      end
    module ResolveWithTtlOptions =
      struct
        include struct include ResolveOptions end
        let (get_ttl : t -> [ `L_b_true ]) =
          fun (x106 : t) ->
            let x107 = Ojs.get_prop_ascii (t_to_js x106) "ttl" in
            match Ojs.bool_of_js x107 with
            | true -> `L_b_true
            | _ -> assert false
        let (set_ttl : t -> [ `L_b_true ] -> unit) =
          fun (x108 : t) ->
            fun (x109 : [ `L_b_true ]) ->
              Ojs.set_prop_ascii (t_to_js x108) "ttl"
                (match x109 with | `L_b_true -> Ojs.string_to_js "LBTrue")
      end
    module RecordWithTtl =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x111 : Ojs.t) -> x111
        and t_to_js : t -> Ojs.t = fun (x110 : Ojs.t) -> x110
        let (get_address : t -> string) =
          fun (x112 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x112) "address")
        let (set_address : t -> string -> unit) =
          fun (x113 : t) ->
            fun (x114 : string) ->
              Ojs.set_prop_ascii (t_to_js x113) "address"
                (Ojs.string_to_js x114)
        let (get_ttl : t -> int) =
          fun (x115 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x115) "ttl")
        let (set_ttl : t -> int -> unit) =
          fun (x116 : t) ->
            fun (x117 : int) ->
              Ojs.set_prop_ascii (t_to_js x116) "ttl" (Ojs.int_to_js x117)
      end
    module AnyARecord =
      struct
        include struct include RecordWithTtl end
        let (get_type : t -> [ `A ]) =
          fun (x118 : t) ->
            let x119 = Ojs.get_prop_ascii (t_to_js x118) "type" in
            match Ojs.string_of_js x119 with | "A" -> `A | _ -> assert false
        let (set_type : t -> [ `A ] -> unit) =
          fun (x120 : t) ->
            fun (x121 : [ `A ]) ->
              Ojs.set_prop_ascii (t_to_js x120) "type"
                (match x121 with | `A -> Ojs.string_to_js "A")
      end
    module AnyAaaaRecord =
      struct
        include struct include RecordWithTtl end
        let (get_type : t -> [ `AAAA ]) =
          fun (x122 : t) ->
            let x123 = Ojs.get_prop_ascii (t_to_js x122) "type" in
            match Ojs.string_of_js x123 with
            | "AAAA" -> `AAAA
            | _ -> assert false
        let (set_type : t -> [ `AAAA ] -> unit) =
          fun (x124 : t) ->
            fun (x125 : [ `AAAA ]) ->
              Ojs.set_prop_ascii (t_to_js x124) "type"
                (match x125 with | `AAAA -> Ojs.string_to_js "AAAA")
      end
    module AnyRecordWithTtl =
      struct
        type t = [ `U_s0_A of AnyARecord.t  | `U_s1_AAAA of AnyAaaaRecord.t ]
        let rec t_of_js : Ojs.t -> t =
          fun (x129 : Ojs.t) ->
            let x130 = x129 in
            match Ojs.string_of_js (Ojs.get_prop_ascii x130 "type") with
            | "A" -> `U_s0_A (AnyARecord.t_of_js x130)
            | "AAAA" -> `U_s1_AAAA (AnyAaaaRecord.t_of_js x130)
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x126 :
              [ `U_s0_A of AnyARecord.t  | `U_s1_AAAA of AnyAaaaRecord.t ])
            ->
            match x126 with
            | `U_s0_A x127 -> AnyARecord.t_to_js x127
            | `U_s1_AAAA x128 -> AnyAaaaRecord.t_to_js x128
      end
    module MxRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x132 : Ojs.t) -> x132
        and t_to_js : t -> Ojs.t = fun (x131 : Ojs.t) -> x131
        let (get_priority : t -> int) =
          fun (x133 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x133) "priority")
        let (set_priority : t -> int -> unit) =
          fun (x134 : t) ->
            fun (x135 : int) ->
              Ojs.set_prop_ascii (t_to_js x134) "priority"
                (Ojs.int_to_js x135)
        let (get_exchange : t -> string) =
          fun (x136 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x136) "exchange")
        let (set_exchange : t -> string -> unit) =
          fun (x137 : t) ->
            fun (x138 : string) ->
              Ojs.set_prop_ascii (t_to_js x137) "exchange"
                (Ojs.string_to_js x138)
      end
    module AnyMxRecord =
      struct
        include struct include MxRecord end
        let (get_type : t -> [ `MX ]) =
          fun (x139 : t) ->
            let x140 = Ojs.get_prop_ascii (t_to_js x139) "type" in
            match Ojs.string_of_js x140 with
            | "MX" -> `MX
            | _ -> assert false
        let (set_type : t -> [ `MX ] -> unit) =
          fun (x141 : t) ->
            fun (x142 : [ `MX ]) ->
              Ojs.set_prop_ascii (t_to_js x141) "type"
                (match x142 with | `MX -> Ojs.string_to_js "MX")
      end
    module NaptrRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x144 : Ojs.t) -> x144
        and t_to_js : t -> Ojs.t = fun (x143 : Ojs.t) -> x143
        let (get_flags : t -> string) =
          fun (x145 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x145) "flags")
        let (set_flags : t -> string -> unit) =
          fun (x146 : t) ->
            fun (x147 : string) ->
              Ojs.set_prop_ascii (t_to_js x146) "flags"
                (Ojs.string_to_js x147)
        let (get_service : t -> string) =
          fun (x148 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x148) "service")
        let (set_service : t -> string -> unit) =
          fun (x149 : t) ->
            fun (x150 : string) ->
              Ojs.set_prop_ascii (t_to_js x149) "service"
                (Ojs.string_to_js x150)
        let (get_regexp : t -> string) =
          fun (x151 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x151) "regexp")
        let (set_regexp : t -> string -> unit) =
          fun (x152 : t) ->
            fun (x153 : string) ->
              Ojs.set_prop_ascii (t_to_js x152) "regexp"
                (Ojs.string_to_js x153)
        let (get_replacement : t -> string) =
          fun (x154 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x154) "replacement")
        let (set_replacement : t -> string -> unit) =
          fun (x155 : t) ->
            fun (x156 : string) ->
              Ojs.set_prop_ascii (t_to_js x155) "replacement"
                (Ojs.string_to_js x156)
        let (get_order : t -> int) =
          fun (x157 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x157) "order")
        let (set_order : t -> int -> unit) =
          fun (x158 : t) ->
            fun (x159 : int) ->
              Ojs.set_prop_ascii (t_to_js x158) "order" (Ojs.int_to_js x159)
        let (get_preference : t -> int) =
          fun (x160 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x160) "preference")
        let (set_preference : t -> int -> unit) =
          fun (x161 : t) ->
            fun (x162 : int) ->
              Ojs.set_prop_ascii (t_to_js x161) "preference"
                (Ojs.int_to_js x162)
      end
    module AnyNaptrRecord =
      struct
        include struct include NaptrRecord end
        let (get_type : t -> [ `NAPTR ]) =
          fun (x163 : t) ->
            let x164 = Ojs.get_prop_ascii (t_to_js x163) "type" in
            match Ojs.string_of_js x164 with
            | "NAPTR" -> `NAPTR
            | _ -> assert false
        let (set_type : t -> [ `NAPTR ] -> unit) =
          fun (x165 : t) ->
            fun (x166 : [ `NAPTR ]) ->
              Ojs.set_prop_ascii (t_to_js x165) "type"
                (match x166 with | `NAPTR -> Ojs.string_to_js "NAPTR")
      end
    module SoaRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x168 : Ojs.t) -> x168
        and t_to_js : t -> Ojs.t = fun (x167 : Ojs.t) -> x167
        let (get_nsname : t -> string) =
          fun (x169 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x169) "nsname")
        let (set_nsname : t -> string -> unit) =
          fun (x170 : t) ->
            fun (x171 : string) ->
              Ojs.set_prop_ascii (t_to_js x170) "nsname"
                (Ojs.string_to_js x171)
        let (get_hostmaster : t -> string) =
          fun (x172 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x172) "hostmaster")
        let (set_hostmaster : t -> string -> unit) =
          fun (x173 : t) ->
            fun (x174 : string) ->
              Ojs.set_prop_ascii (t_to_js x173) "hostmaster"
                (Ojs.string_to_js x174)
        let (get_serial : t -> int) =
          fun (x175 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x175) "serial")
        let (set_serial : t -> int -> unit) =
          fun (x176 : t) ->
            fun (x177 : int) ->
              Ojs.set_prop_ascii (t_to_js x176) "serial" (Ojs.int_to_js x177)
        let (get_refresh : t -> int) =
          fun (x178 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x178) "refresh")
        let (set_refresh : t -> int -> unit) =
          fun (x179 : t) ->
            fun (x180 : int) ->
              Ojs.set_prop_ascii (t_to_js x179) "refresh"
                (Ojs.int_to_js x180)
        let (get_retry : t -> int) =
          fun (x181 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x181) "retry")
        let (set_retry : t -> int -> unit) =
          fun (x182 : t) ->
            fun (x183 : int) ->
              Ojs.set_prop_ascii (t_to_js x182) "retry" (Ojs.int_to_js x183)
        let (get_expire : t -> int) =
          fun (x184 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x184) "expire")
        let (set_expire : t -> int -> unit) =
          fun (x185 : t) ->
            fun (x186 : int) ->
              Ojs.set_prop_ascii (t_to_js x185) "expire" (Ojs.int_to_js x186)
        let (get_minttl : t -> int) =
          fun (x187 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x187) "minttl")
        let (set_minttl : t -> int -> unit) =
          fun (x188 : t) ->
            fun (x189 : int) ->
              Ojs.set_prop_ascii (t_to_js x188) "minttl" (Ojs.int_to_js x189)
      end
    module AnySoaRecord =
      struct
        include struct include SoaRecord end
        let (get_type : t -> [ `SOA ]) =
          fun (x190 : t) ->
            let x191 = Ojs.get_prop_ascii (t_to_js x190) "type" in
            match Ojs.string_of_js x191 with
            | "SOA" -> `SOA
            | _ -> assert false
        let (set_type : t -> [ `SOA ] -> unit) =
          fun (x192 : t) ->
            fun (x193 : [ `SOA ]) ->
              Ojs.set_prop_ascii (t_to_js x192) "type"
                (match x193 with | `SOA -> Ojs.string_to_js "SOA")
      end
    module SrvRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x195 : Ojs.t) -> x195
        and t_to_js : t -> Ojs.t = fun (x194 : Ojs.t) -> x194
        let (get_priority : t -> int) =
          fun (x196 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x196) "priority")
        let (set_priority : t -> int -> unit) =
          fun (x197 : t) ->
            fun (x198 : int) ->
              Ojs.set_prop_ascii (t_to_js x197) "priority"
                (Ojs.int_to_js x198)
        let (get_weight : t -> int) =
          fun (x199 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x199) "weight")
        let (set_weight : t -> int -> unit) =
          fun (x200 : t) ->
            fun (x201 : int) ->
              Ojs.set_prop_ascii (t_to_js x200) "weight" (Ojs.int_to_js x201)
        let (get_port : t -> int) =
          fun (x202 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x202) "port")
        let (set_port : t -> int -> unit) =
          fun (x203 : t) ->
            fun (x204 : int) ->
              Ojs.set_prop_ascii (t_to_js x203) "port" (Ojs.int_to_js x204)
        let (get_name : t -> string) =
          fun (x205 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x205) "name")
        let (set_name : t -> string -> unit) =
          fun (x206 : t) ->
            fun (x207 : string) ->
              Ojs.set_prop_ascii (t_to_js x206) "name"
                (Ojs.string_to_js x207)
      end
    module AnySrvRecord =
      struct
        include struct include SrvRecord end
        let (get_type : t -> [ `SRV ]) =
          fun (x208 : t) ->
            let x209 = Ojs.get_prop_ascii (t_to_js x208) "type" in
            match Ojs.string_of_js x209 with
            | "SRV" -> `SRV
            | _ -> assert false
        let (set_type : t -> [ `SRV ] -> unit) =
          fun (x210 : t) ->
            fun (x211 : [ `SRV ]) ->
              Ojs.set_prop_ascii (t_to_js x210) "type"
                (match x211 with | `SRV -> Ojs.string_to_js "SRV")
      end
    module AnyTxtRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x213 : Ojs.t) -> x213
        and t_to_js : t -> Ojs.t = fun (x212 : Ojs.t) -> x212
        let (get_type : t -> [ `TXT ]) =
          fun (x214 : t) ->
            let x215 = Ojs.get_prop_ascii (t_to_js x214) "type" in
            match Ojs.string_of_js x215 with
            | "TXT" -> `TXT
            | _ -> assert false
        let (set_type : t -> [ `TXT ] -> unit) =
          fun (x216 : t) ->
            fun (x217 : [ `TXT ]) ->
              Ojs.set_prop_ascii (t_to_js x216) "type"
                (match x217 with | `TXT -> Ojs.string_to_js "TXT")
        let (get_entries : t -> string list) =
          fun (x218 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x218) "entries")
        let (set_entries : t -> string list -> unit) =
          fun (x220 : t) ->
            fun (x221 : string list) ->
              Ojs.set_prop_ascii (t_to_js x220) "entries"
                (Ojs.list_to_js Ojs.string_to_js x221)
      end
    module AnyNsRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x224 : Ojs.t) -> x224
        and t_to_js : t -> Ojs.t = fun (x223 : Ojs.t) -> x223
        let (get_type : t -> [ `NS ]) =
          fun (x225 : t) ->
            let x226 = Ojs.get_prop_ascii (t_to_js x225) "type" in
            match Ojs.string_of_js x226 with
            | "NS" -> `NS
            | _ -> assert false
        let (set_type : t -> [ `NS ] -> unit) =
          fun (x227 : t) ->
            fun (x228 : [ `NS ]) ->
              Ojs.set_prop_ascii (t_to_js x227) "type"
                (match x228 with | `NS -> Ojs.string_to_js "NS")
        let (get_value : t -> string) =
          fun (x229 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x229) "value")
        let (set_value : t -> string -> unit) =
          fun (x230 : t) ->
            fun (x231 : string) ->
              Ojs.set_prop_ascii (t_to_js x230) "value"
                (Ojs.string_to_js x231)
      end
    module AnyPtrRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x233 : Ojs.t) -> x233
        and t_to_js : t -> Ojs.t = fun (x232 : Ojs.t) -> x232
        let (get_type : t -> [ `PTR ]) =
          fun (x234 : t) ->
            let x235 = Ojs.get_prop_ascii (t_to_js x234) "type" in
            match Ojs.string_of_js x235 with
            | "PTR" -> `PTR
            | _ -> assert false
        let (set_type : t -> [ `PTR ] -> unit) =
          fun (x236 : t) ->
            fun (x237 : [ `PTR ]) ->
              Ojs.set_prop_ascii (t_to_js x236) "type"
                (match x237 with | `PTR -> Ojs.string_to_js "PTR")
        let (get_value : t -> string) =
          fun (x238 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x238) "value")
        let (set_value : t -> string -> unit) =
          fun (x239 : t) ->
            fun (x240 : string) ->
              Ojs.set_prop_ascii (t_to_js x239) "value"
                (Ojs.string_to_js x240)
      end
    module AnyCnameRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x242 : Ojs.t) -> x242
        and t_to_js : t -> Ojs.t = fun (x241 : Ojs.t) -> x241
        let (get_type : t -> [ `CNAME ]) =
          fun (x243 : t) ->
            let x244 = Ojs.get_prop_ascii (t_to_js x243) "type" in
            match Ojs.string_of_js x244 with
            | "CNAME" -> `CNAME
            | _ -> assert false
        let (set_type : t -> [ `CNAME ] -> unit) =
          fun (x245 : t) ->
            fun (x246 : [ `CNAME ]) ->
              Ojs.set_prop_ascii (t_to_js x245) "type"
                (match x246 with | `CNAME -> Ojs.string_to_js "CNAME")
        let (get_value : t -> string) =
          fun (x247 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x247) "value")
        let (set_value : t -> string -> unit) =
          fun (x248 : t) ->
            fun (x249 : string) ->
              Ojs.set_prop_ascii (t_to_js x248) "value"
                (Ojs.string_to_js x249)
      end
    module AnyRecord =
      struct
        type t =
          [ `U_s0_A of AnyARecord.t  | `U_s1_AAAA of AnyAaaaRecord.t 
          | `U_s3_CNAME of AnyCnameRecord.t  | `U_s4_MX of AnyMxRecord.t 
          | `U_s5_NAPTR of AnyNaptrRecord.t  | `U_s6_NS of AnyNsRecord.t 
          | `U_s7_PTR of AnyPtrRecord.t  | `U_s8_SOA of AnySoaRecord.t 
          | `U_s9_SRV of AnySrvRecord.t  | `U_s10_TXT of AnyTxtRecord.t ]
        let rec t_of_js : Ojs.t -> t =
          fun (x261 : Ojs.t) ->
            let x262 = x261 in
            match Ojs.string_of_js (Ojs.get_prop_ascii x262 "type") with
            | "A" -> `U_s0_A (AnyARecord.t_of_js x262)
            | "AAAA" -> `U_s1_AAAA (AnyAaaaRecord.t_of_js x262)
            | "CNAME" -> `U_s3_CNAME (AnyCnameRecord.t_of_js x262)
            | "MX" -> `U_s4_MX (AnyMxRecord.t_of_js x262)
            | "NAPTR" -> `U_s5_NAPTR (AnyNaptrRecord.t_of_js x262)
            | "NS" -> `U_s6_NS (AnyNsRecord.t_of_js x262)
            | "PTR" -> `U_s7_PTR (AnyPtrRecord.t_of_js x262)
            | "SOA" -> `U_s8_SOA (AnySoaRecord.t_of_js x262)
            | "SRV" -> `U_s9_SRV (AnySrvRecord.t_of_js x262)
            | "TXT" -> `U_s10_TXT (AnyTxtRecord.t_of_js x262)
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x250 :
              [ `U_s0_A of AnyARecord.t  | `U_s1_AAAA of AnyAaaaRecord.t 
              | `U_s3_CNAME of AnyCnameRecord.t  | `U_s4_MX of AnyMxRecord.t 
              | `U_s5_NAPTR of AnyNaptrRecord.t  | `U_s6_NS of AnyNsRecord.t 
              | `U_s7_PTR of AnyPtrRecord.t  | `U_s8_SOA of AnySoaRecord.t 
              | `U_s9_SRV of AnySrvRecord.t  | `U_s10_TXT of AnyTxtRecord.t ])
            ->
            match x250 with
            | `U_s0_A x251 -> AnyARecord.t_to_js x251
            | `U_s1_AAAA x252 -> AnyAaaaRecord.t_to_js x252
            | `U_s3_CNAME x253 -> AnyCnameRecord.t_to_js x253
            | `U_s4_MX x254 -> AnyMxRecord.t_to_js x254
            | `U_s5_NAPTR x255 -> AnyNaptrRecord.t_to_js x255
            | `U_s6_NS x256 -> AnyNsRecord.t_to_js x256
            | `U_s7_PTR x257 -> AnyPtrRecord.t_to_js x257
            | `U_s8_SOA x258 -> AnySoaRecord.t_to_js x258
            | `U_s9_SRV x259 -> AnySrvRecord.t_to_js x259
            | `U_s10_TXT x260 -> AnyTxtRecord.t_to_js x260
      end
    let (resolve :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list -> unit)
          -> unit)
      =
      fun ~hostname:(x263 : string) ->
        fun
          ~callback:(x264 :
                      err:ErrnoException.t or_null ->
                        addresses:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolve"
               [|(Ojs.string_to_js x263);(Ojs.fun_to_js 2
                                            (fun (x265 : Ojs.t) ->
                                               fun (x267 : Ojs.t) ->
                                                 x264
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x265)
                                                   ~addresses:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x267)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `A ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:string list -> unit)
            -> unit)
      =
      fun ~hostname:(x269 : string) ->
        fun ~rrtype:(x270 : [ `A ]) ->
          fun
            ~callback:(x271 :
                        err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x269);((match x270 with
                                             | `A -> Ojs.string_to_js "A"));(
                   Ojs.fun_to_js 2
                     (fun (x272 : Ojs.t) ->
                        fun (x274 : Ojs.t) ->
                          x271
                            ~err:(or_null_of_js ErrnoException.t_of_js x272)
                            ~addresses:(Ojs.list_of_js Ojs.string_of_js x274)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `AAAA ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:string list -> unit)
            -> unit)
      =
      fun ~hostname:(x276 : string) ->
        fun ~rrtype:(x277 : [ `AAAA ]) ->
          fun
            ~callback:(x278 :
                        err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x276);((match x277 with
                                             | `AAAA ->
                                                 Ojs.string_to_js "AAAA"));(
                   Ojs.fun_to_js 2
                     (fun (x279 : Ojs.t) ->
                        fun (x281 : Ojs.t) ->
                          x278
                            ~err:(or_null_of_js ErrnoException.t_of_js x279)
                            ~addresses:(Ojs.list_of_js Ojs.string_of_js x281)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `ANY ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:AnyRecord.t list -> unit)
            -> unit)
      =
      fun ~hostname:(x283 : string) ->
        fun ~rrtype:(x284 : [ `ANY ]) ->
          fun
            ~callback:(x285 :
                        err:ErrnoException.t or_null ->
                          addresses:AnyRecord.t list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x283);((match x284 with
                                             | `ANY -> Ojs.string_to_js "ANY"));(
                   Ojs.fun_to_js 2
                     (fun (x286 : Ojs.t) ->
                        fun (x288 : Ojs.t) ->
                          x285
                            ~err:(or_null_of_js ErrnoException.t_of_js x286)
                            ~addresses:(Ojs.list_of_js AnyRecord.t_of_js x288)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `CNAME ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:string list -> unit)
            -> unit)
      =
      fun ~hostname:(x290 : string) ->
        fun ~rrtype:(x291 : [ `CNAME ]) ->
          fun
            ~callback:(x292 :
                        err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x290);((match x291 with
                                             | `CNAME ->
                                                 Ojs.string_to_js "CNAME"));(
                   Ojs.fun_to_js 2
                     (fun (x293 : Ojs.t) ->
                        fun (x295 : Ojs.t) ->
                          x292
                            ~err:(or_null_of_js ErrnoException.t_of_js x293)
                            ~addresses:(Ojs.list_of_js Ojs.string_of_js x295)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `MX ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:MxRecord.t list -> unit)
            -> unit)
      =
      fun ~hostname:(x297 : string) ->
        fun ~rrtype:(x298 : [ `MX ]) ->
          fun
            ~callback:(x299 :
                        err:ErrnoException.t or_null ->
                          addresses:MxRecord.t list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x297);((match x298 with
                                             | `MX -> Ojs.string_to_js "MX"));(
                   Ojs.fun_to_js 2
                     (fun (x300 : Ojs.t) ->
                        fun (x302 : Ojs.t) ->
                          x299
                            ~err:(or_null_of_js ErrnoException.t_of_js x300)
                            ~addresses:(Ojs.list_of_js MxRecord.t_of_js x302)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `NAPTR ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:NaptrRecord.t list -> unit)
            -> unit)
      =
      fun ~hostname:(x304 : string) ->
        fun ~rrtype:(x305 : [ `NAPTR ]) ->
          fun
            ~callback:(x306 :
                        err:ErrnoException.t or_null ->
                          addresses:NaptrRecord.t list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x304);((match x305 with
                                             | `NAPTR ->
                                                 Ojs.string_to_js "NAPTR"));(
                   Ojs.fun_to_js 2
                     (fun (x307 : Ojs.t) ->
                        fun (x309 : Ojs.t) ->
                          x306
                            ~err:(or_null_of_js ErrnoException.t_of_js x307)
                            ~addresses:(Ojs.list_of_js NaptrRecord.t_of_js
                                          x309)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `NS ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:string list -> unit)
            -> unit)
      =
      fun ~hostname:(x311 : string) ->
        fun ~rrtype:(x312 : [ `NS ]) ->
          fun
            ~callback:(x313 :
                        err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x311);((match x312 with
                                             | `NS -> Ojs.string_to_js "NS"));(
                   Ojs.fun_to_js 2
                     (fun (x314 : Ojs.t) ->
                        fun (x316 : Ojs.t) ->
                          x313
                            ~err:(or_null_of_js ErrnoException.t_of_js x314)
                            ~addresses:(Ojs.list_of_js Ojs.string_of_js x316)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `PTR ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:string list -> unit)
            -> unit)
      =
      fun ~hostname:(x318 : string) ->
        fun ~rrtype:(x319 : [ `PTR ]) ->
          fun
            ~callback:(x320 :
                        err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x318);((match x319 with
                                             | `PTR -> Ojs.string_to_js "PTR"));(
                   Ojs.fun_to_js 2
                     (fun (x321 : Ojs.t) ->
                        fun (x323 : Ojs.t) ->
                          x320
                            ~err:(or_null_of_js ErrnoException.t_of_js x321)
                            ~addresses:(Ojs.list_of_js Ojs.string_of_js x323)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `SOA ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:SoaRecord.t -> unit)
            -> unit)
      =
      fun ~hostname:(x325 : string) ->
        fun ~rrtype:(x326 : [ `SOA ]) ->
          fun
            ~callback:(x327 :
                        err:ErrnoException.t or_null ->
                          addresses:SoaRecord.t -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x325);((match x326 with
                                             | `SOA -> Ojs.string_to_js "SOA"));(
                   Ojs.fun_to_js 2
                     (fun (x328 : Ojs.t) ->
                        fun (x330 : Ojs.t) ->
                          x327
                            ~err:(or_null_of_js ErrnoException.t_of_js x328)
                            ~addresses:(SoaRecord.t_of_js x330)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `SRV ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:SrvRecord.t list -> unit)
            -> unit)
      =
      fun ~hostname:(x331 : string) ->
        fun ~rrtype:(x332 : [ `SRV ]) ->
          fun
            ~callback:(x333 :
                        err:ErrnoException.t or_null ->
                          addresses:SrvRecord.t list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x331);((match x332 with
                                             | `SRV -> Ojs.string_to_js "SRV"));(
                   Ojs.fun_to_js 2
                     (fun (x334 : Ojs.t) ->
                        fun (x336 : Ojs.t) ->
                          x333
                            ~err:(or_null_of_js ErrnoException.t_of_js x334)
                            ~addresses:(Ojs.list_of_js SrvRecord.t_of_js x336)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `TXT ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:string list list -> unit)
            -> unit)
      =
      fun ~hostname:(x338 : string) ->
        fun ~rrtype:(x339 : [ `TXT ]) ->
          fun
            ~callback:(x340 :
                        err:ErrnoException.t or_null ->
                          addresses:string list list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x338);((match x339 with
                                             | `TXT -> Ojs.string_to_js "TXT"));(
                   Ojs.fun_to_js 2
                     (fun (x341 : Ojs.t) ->
                        fun (x343 : Ojs.t) ->
                          x340
                            ~err:(or_null_of_js ErrnoException.t_of_js x341)
                            ~addresses:(Ojs.list_of_js
                                          (fun (x344 : Ojs.t) ->
                                             Ojs.list_of_js Ojs.string_of_js
                                               x344) x343)))|])
    let (resolve :
      hostname:string ->
        rrtype:string ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:(SoaRecord.t,
                        ((AnyRecord.t, MxRecord.t, NaptrRecord.t,
                           SrvRecord.t) union4,
                          string) or_array or_string)
                        or_array -> unit)
            -> unit)
      =
      fun ~hostname:(x346 : string) ->
        fun ~rrtype:(x347 : string) ->
          fun
            ~callback:(x348 :
                        err:ErrnoException.t or_null ->
                          addresses:(SoaRecord.t,
                            ((AnyRecord.t, MxRecord.t, NaptrRecord.t,
                               SrvRecord.t) union4,
                              string) or_array or_string)
                            or_array -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x346);(Ojs.string_to_js x347);(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x349 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x351 :
                                                                    Ojs.t) ->
                                                                    x348
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x349)
                                                                    ~addresses:(
                                                                    or_array_of_js
                                                                    SoaRecord.t_of_js
                                                                    (fun
                                                                    (x353 :
                                                                    Ojs.t) ->
                                                                    or_string_of_js
                                                                    (fun
                                                                    (x354 :
                                                                    Ojs.t) ->
                                                                    or_array_of_js
                                                                    (fun
                                                                    (x355 :
                                                                    Ojs.t) ->
                                                                    union4_of_js
                                                                    AnyRecord.t_of_js
                                                                    MxRecord.t_of_js
                                                                    NaptrRecord.t_of_js
                                                                    SrvRecord.t_of_js
                                                                    x355)
                                                                    Ojs.string_of_js
                                                                    x354)
                                                                    x353)
                                                                    x351)))|])
    module Resolve =
      struct
        let (__promisify__ :
          hostname:string ->
            ?rrtype:[ `A  | `AAAA  | `CNAME  | `NS  | `PTR ] ->
              unit -> string list Promise.t)
          =
          fun ~hostname:(x361 : string) ->
            fun
              ?rrtype:(x362 :
                        [ `A  | `AAAA  | `CNAME  | `NS  | `PTR ] option)
              ->
              fun () ->
                Promise.t_of_js
                  (fun (x366 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x366)
                  (let x365 = Ojs.get_prop_ascii Import.dns "resolve" in
                   Ojs.call (Ojs.get_prop_ascii x365 "__promisify__") "apply"
                     [|x365;((let x363 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x363 "push"
                                   [|(Ojs.string_to_js x361)|]);
                              (match x362 with
                               | Some x364 ->
                                   ignore
                                     (Ojs.call x363 "push"
                                        [|((match x364 with
                                            | `A -> Ojs.string_to_js "A"
                                            | `AAAA ->
                                                Ojs.string_to_js "AAAA"
                                            | `CNAME ->
                                                Ojs.string_to_js "CNAME"
                                            | `NS -> Ojs.string_to_js "NS"
                                            | `PTR -> Ojs.string_to_js "PTR"))|])
                               | None -> ());
                              x363))|])
        let (__promisify__ :
          hostname:string -> rrtype:[ `ANY ] -> AnyRecord.t list Promise.t) =
          fun ~hostname:(x368 : string) ->
            fun ~rrtype:(x369 : [ `ANY ]) ->
              Promise.t_of_js
                (fun (x370 : Ojs.t) -> Ojs.list_of_js AnyRecord.t_of_js x370)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x368);((match x369 with
                                               | `ANY ->
                                                   Ojs.string_to_js "ANY"))|])
        let (__promisify__ :
          hostname:string -> rrtype:[ `MX ] -> MxRecord.t list Promise.t) =
          fun ~hostname:(x372 : string) ->
            fun ~rrtype:(x373 : [ `MX ]) ->
              Promise.t_of_js
                (fun (x374 : Ojs.t) -> Ojs.list_of_js MxRecord.t_of_js x374)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x372);((match x373 with
                                               | `MX -> Ojs.string_to_js "MX"))|])
        let (__promisify__ :
          hostname:string ->
            rrtype:[ `NAPTR ] -> NaptrRecord.t list Promise.t)
          =
          fun ~hostname:(x376 : string) ->
            fun ~rrtype:(x377 : [ `NAPTR ]) ->
              Promise.t_of_js
                (fun (x378 : Ojs.t) ->
                   Ojs.list_of_js NaptrRecord.t_of_js x378)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x376);((match x377 with
                                               | `NAPTR ->
                                                   Ojs.string_to_js "NAPTR"))|])
        let (__promisify__ :
          hostname:string -> rrtype:[ `SOA ] -> SoaRecord.t Promise.t) =
          fun ~hostname:(x380 : string) ->
            fun ~rrtype:(x381 : [ `SOA ]) ->
              Promise.t_of_js SoaRecord.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x380);((match x381 with
                                               | `SOA ->
                                                   Ojs.string_to_js "SOA"))|])
        let (__promisify__ :
          hostname:string -> rrtype:[ `SRV ] -> SrvRecord.t list Promise.t) =
          fun ~hostname:(x383 : string) ->
            fun ~rrtype:(x384 : [ `SRV ]) ->
              Promise.t_of_js
                (fun (x385 : Ojs.t) -> Ojs.list_of_js SrvRecord.t_of_js x385)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x383);((match x384 with
                                               | `SRV ->
                                                   Ojs.string_to_js "SRV"))|])
        let (__promisify__ :
          hostname:string -> rrtype:[ `TXT ] -> string list list Promise.t) =
          fun ~hostname:(x387 : string) ->
            fun ~rrtype:(x388 : [ `TXT ]) ->
              Promise.t_of_js
                (fun (x389 : Ojs.t) ->
                   Ojs.list_of_js
                     (fun (x390 : Ojs.t) ->
                        Ojs.list_of_js Ojs.string_of_js x390) x389)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x387);((match x388 with
                                               | `TXT ->
                                                   Ojs.string_to_js "TXT"))|])
        let (__promisify__ :
          hostname:string ->
            rrtype:string ->
              (SoaRecord.t,
                ((AnyRecord.t, MxRecord.t, NaptrRecord.t, SrvRecord.t) union4,
                  string) or_array or_string)
                or_array Promise.t)
          =
          fun ~hostname:(x392 : string) ->
            fun ~rrtype:(x393 : string) ->
              Promise.t_of_js
                (fun (x394 : Ojs.t) ->
                   or_array_of_js SoaRecord.t_of_js
                     (fun (x396 : Ojs.t) ->
                        or_string_of_js
                          (fun (x397 : Ojs.t) ->
                             or_array_of_js
                               (fun (x398 : Ojs.t) ->
                                  union4_of_js AnyRecord.t_of_js
                                    MxRecord.t_of_js NaptrRecord.t_of_js
                                    SrvRecord.t_of_js x398) Ojs.string_of_js
                               x397) x396) x394)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x392);(Ojs.string_to_js x393)|])
      end
    let (resolve4 :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list -> unit)
          -> unit)
      =
      fun ~hostname:(x404 : string) ->
        fun
          ~callback:(x405 :
                      err:ErrnoException.t or_null ->
                        addresses:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolve4"
               [|(Ojs.string_to_js x404);(Ojs.fun_to_js 2
                                            (fun (x406 : Ojs.t) ->
                                               fun (x408 : Ojs.t) ->
                                                 x405
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x406)
                                                   ~addresses:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x408)))|])
    let (resolve4 :
      hostname:string ->
        options:ResolveWithTtlOptions.t ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:RecordWithTtl.t list -> unit)
            -> unit)
      =
      fun ~hostname:(x410 : string) ->
        fun ~options:(x411 : ResolveWithTtlOptions.t) ->
          fun
            ~callback:(x412 :
                        err:ErrnoException.t or_null ->
                          addresses:RecordWithTtl.t list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve4"
                 [|(Ojs.string_to_js x410);(ResolveWithTtlOptions.t_to_js
                                              x411);(Ojs.fun_to_js 2
                                                       (fun (x413 : Ojs.t) ->
                                                          fun (x415 : Ojs.t)
                                                            ->
                                                            x412
                                                              ~err:(or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x413)
                                                              ~addresses:(
                                                              Ojs.list_of_js
                                                                RecordWithTtl.t_of_js
                                                                x415)))|])
    let (resolve4 :
      hostname:string ->
        options:ResolveOptions.t ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:RecordWithTtl.t or_string list -> unit)
            -> unit)
      =
      fun ~hostname:(x417 : string) ->
        fun ~options:(x418 : ResolveOptions.t) ->
          fun
            ~callback:(x419 :
                        err:ErrnoException.t or_null ->
                          addresses:RecordWithTtl.t or_string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve4"
                 [|(Ojs.string_to_js x417);(ResolveOptions.t_to_js x418);(
                   Ojs.fun_to_js 2
                     (fun (x420 : Ojs.t) ->
                        fun (x422 : Ojs.t) ->
                          x419
                            ~err:(or_null_of_js ErrnoException.t_of_js x420)
                            ~addresses:(Ojs.list_of_js
                                          (fun (x423 : Ojs.t) ->
                                             or_string_of_js
                                               RecordWithTtl.t_of_js x423)
                                          x422)))|])
    module Resolve4 =
      struct
        let (__promisify__ : hostname:string -> string list Promise.t) =
          fun ~hostname:(x425 : string) ->
            Promise.t_of_js
              (fun (x426 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x426)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve4")
                 "__promisify__" [|(Ojs.string_to_js x425)|])
        let (__promisify__ :
          hostname:string ->
            options:ResolveWithTtlOptions.t -> RecordWithTtl.t list Promise.t)
          =
          fun ~hostname:(x428 : string) ->
            fun ~options:(x429 : ResolveWithTtlOptions.t) ->
              Promise.t_of_js
                (fun (x430 : Ojs.t) ->
                   Ojs.list_of_js RecordWithTtl.t_of_js x430)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve4")
                   "__promisify__"
                   [|(Ojs.string_to_js x428);(ResolveWithTtlOptions.t_to_js
                                                x429)|])
        let (__promisify__ :
          hostname:string ->
            ?options:ResolveOptions.t ->
              unit -> RecordWithTtl.t or_string list Promise.t)
          =
          fun ~hostname:(x432 : string) ->
            fun ?options:(x433 : ResolveOptions.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x437 : Ojs.t) ->
                     Ojs.list_of_js
                       (fun (x438 : Ojs.t) ->
                          or_string_of_js RecordWithTtl.t_of_js x438) x437)
                  (let x436 = Ojs.get_prop_ascii Import.dns "resolve4" in
                   Ojs.call (Ojs.get_prop_ascii x436 "__promisify__") "apply"
                     [|x436;((let x434 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x434 "push"
                                   [|(Ojs.string_to_js x432)|]);
                              (match x433 with
                               | Some x435 ->
                                   ignore
                                     (Ojs.call x434 "push"
                                        [|(ResolveOptions.t_to_js x435)|])
                               | None -> ());
                              x434))|])
      end
    let (resolve6 :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list -> unit)
          -> unit)
      =
      fun ~hostname:(x440 : string) ->
        fun
          ~callback:(x441 :
                      err:ErrnoException.t or_null ->
                        addresses:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolve6"
               [|(Ojs.string_to_js x440);(Ojs.fun_to_js 2
                                            (fun (x442 : Ojs.t) ->
                                               fun (x444 : Ojs.t) ->
                                                 x441
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x442)
                                                   ~addresses:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x444)))|])
    let (resolve6 :
      hostname:string ->
        options:ResolveWithTtlOptions.t ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:RecordWithTtl.t list -> unit)
            -> unit)
      =
      fun ~hostname:(x446 : string) ->
        fun ~options:(x447 : ResolveWithTtlOptions.t) ->
          fun
            ~callback:(x448 :
                        err:ErrnoException.t or_null ->
                          addresses:RecordWithTtl.t list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve6"
                 [|(Ojs.string_to_js x446);(ResolveWithTtlOptions.t_to_js
                                              x447);(Ojs.fun_to_js 2
                                                       (fun (x449 : Ojs.t) ->
                                                          fun (x451 : Ojs.t)
                                                            ->
                                                            x448
                                                              ~err:(or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x449)
                                                              ~addresses:(
                                                              Ojs.list_of_js
                                                                RecordWithTtl.t_of_js
                                                                x451)))|])
    let (resolve6 :
      hostname:string ->
        options:ResolveOptions.t ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:RecordWithTtl.t or_string list -> unit)
            -> unit)
      =
      fun ~hostname:(x453 : string) ->
        fun ~options:(x454 : ResolveOptions.t) ->
          fun
            ~callback:(x455 :
                        err:ErrnoException.t or_null ->
                          addresses:RecordWithTtl.t or_string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve6"
                 [|(Ojs.string_to_js x453);(ResolveOptions.t_to_js x454);(
                   Ojs.fun_to_js 2
                     (fun (x456 : Ojs.t) ->
                        fun (x458 : Ojs.t) ->
                          x455
                            ~err:(or_null_of_js ErrnoException.t_of_js x456)
                            ~addresses:(Ojs.list_of_js
                                          (fun (x459 : Ojs.t) ->
                                             or_string_of_js
                                               RecordWithTtl.t_of_js x459)
                                          x458)))|])
    module Resolve6 =
      struct
        let (__promisify__ : hostname:string -> string list Promise.t) =
          fun ~hostname:(x461 : string) ->
            Promise.t_of_js
              (fun (x462 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x462)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve6")
                 "__promisify__" [|(Ojs.string_to_js x461)|])
        let (__promisify__ :
          hostname:string ->
            options:ResolveWithTtlOptions.t -> RecordWithTtl.t list Promise.t)
          =
          fun ~hostname:(x464 : string) ->
            fun ~options:(x465 : ResolveWithTtlOptions.t) ->
              Promise.t_of_js
                (fun (x466 : Ojs.t) ->
                   Ojs.list_of_js RecordWithTtl.t_of_js x466)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve6")
                   "__promisify__"
                   [|(Ojs.string_to_js x464);(ResolveWithTtlOptions.t_to_js
                                                x465)|])
        let (__promisify__ :
          hostname:string ->
            ?options:ResolveOptions.t ->
              unit -> RecordWithTtl.t or_string list Promise.t)
          =
          fun ~hostname:(x468 : string) ->
            fun ?options:(x469 : ResolveOptions.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x473 : Ojs.t) ->
                     Ojs.list_of_js
                       (fun (x474 : Ojs.t) ->
                          or_string_of_js RecordWithTtl.t_of_js x474) x473)
                  (let x472 = Ojs.get_prop_ascii Import.dns "resolve6" in
                   Ojs.call (Ojs.get_prop_ascii x472 "__promisify__") "apply"
                     [|x472;((let x470 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x470 "push"
                                   [|(Ojs.string_to_js x468)|]);
                              (match x469 with
                               | Some x471 ->
                                   ignore
                                     (Ojs.call x470 "push"
                                        [|(ResolveOptions.t_to_js x471)|])
                               | None -> ());
                              x470))|])
      end
    let (resolve_cname :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list -> unit)
          -> unit)
      =
      fun ~hostname:(x476 : string) ->
        fun
          ~callback:(x477 :
                      err:ErrnoException.t or_null ->
                        addresses:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveCname"
               [|(Ojs.string_to_js x476);(Ojs.fun_to_js 2
                                            (fun (x478 : Ojs.t) ->
                                               fun (x480 : Ojs.t) ->
                                                 x477
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x478)
                                                   ~addresses:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x480)))|])
    module ResolveCname =
      struct
        let (__promisify__ : hostname:string -> string list Promise.t) =
          fun ~hostname:(x482 : string) ->
            Promise.t_of_js
              (fun (x483 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x483)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveCname")
                 "__promisify__" [|(Ojs.string_to_js x482)|])
      end
    let (resolve_mx :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:MxRecord.t list -> unit)
          -> unit)
      =
      fun ~hostname:(x485 : string) ->
        fun
          ~callback:(x486 :
                      err:ErrnoException.t or_null ->
                        addresses:MxRecord.t list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveMx"
               [|(Ojs.string_to_js x485);(Ojs.fun_to_js 2
                                            (fun (x487 : Ojs.t) ->
                                               fun (x489 : Ojs.t) ->
                                                 x486
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x487)
                                                   ~addresses:(Ojs.list_of_js
                                                                 MxRecord.t_of_js
                                                                 x489)))|])
    module ResolveMx =
      struct
        let (__promisify__ : hostname:string -> MxRecord.t list Promise.t) =
          fun ~hostname:(x491 : string) ->
            Promise.t_of_js
              (fun (x492 : Ojs.t) -> Ojs.list_of_js MxRecord.t_of_js x492)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveMx")
                 "__promisify__" [|(Ojs.string_to_js x491)|])
      end
    let (resolve_naptr :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:NaptrRecord.t list -> unit)
          -> unit)
      =
      fun ~hostname:(x494 : string) ->
        fun
          ~callback:(x495 :
                      err:ErrnoException.t or_null ->
                        addresses:NaptrRecord.t list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveNaptr"
               [|(Ojs.string_to_js x494);(Ojs.fun_to_js 2
                                            (fun (x496 : Ojs.t) ->
                                               fun (x498 : Ojs.t) ->
                                                 x495
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x496)
                                                   ~addresses:(Ojs.list_of_js
                                                                 NaptrRecord.t_of_js
                                                                 x498)))|])
    module ResolveNaptr =
      struct
        let (__promisify__ : hostname:string -> NaptrRecord.t list Promise.t)
          =
          fun ~hostname:(x500 : string) ->
            Promise.t_of_js
              (fun (x501 : Ojs.t) -> Ojs.list_of_js NaptrRecord.t_of_js x501)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveNaptr")
                 "__promisify__" [|(Ojs.string_to_js x500)|])
      end
    let (resolve_ns :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list -> unit)
          -> unit)
      =
      fun ~hostname:(x503 : string) ->
        fun
          ~callback:(x504 :
                      err:ErrnoException.t or_null ->
                        addresses:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveNs"
               [|(Ojs.string_to_js x503);(Ojs.fun_to_js 2
                                            (fun (x505 : Ojs.t) ->
                                               fun (x507 : Ojs.t) ->
                                                 x504
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x505)
                                                   ~addresses:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x507)))|])
    module ResolveNs =
      struct
        let (__promisify__ : hostname:string -> string list Promise.t) =
          fun ~hostname:(x509 : string) ->
            Promise.t_of_js
              (fun (x510 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x510)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveNs")
                 "__promisify__" [|(Ojs.string_to_js x509)|])
      end
    let (resolve_ptr :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list -> unit)
          -> unit)
      =
      fun ~hostname:(x512 : string) ->
        fun
          ~callback:(x513 :
                      err:ErrnoException.t or_null ->
                        addresses:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolvePtr"
               [|(Ojs.string_to_js x512);(Ojs.fun_to_js 2
                                            (fun (x514 : Ojs.t) ->
                                               fun (x516 : Ojs.t) ->
                                                 x513
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x514)
                                                   ~addresses:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x516)))|])
    module ResolvePtr =
      struct
        let (__promisify__ : hostname:string -> string list Promise.t) =
          fun ~hostname:(x518 : string) ->
            Promise.t_of_js
              (fun (x519 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x519)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolvePtr")
                 "__promisify__" [|(Ojs.string_to_js x518)|])
      end
    let (resolve_soa :
      hostname:string ->
        callback:(err:ErrnoException.t or_null -> address:SoaRecord.t -> unit)
          -> unit)
      =
      fun ~hostname:(x521 : string) ->
        fun
          ~callback:(x522 :
                      err:ErrnoException.t or_null ->
                        address:SoaRecord.t -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveSoa"
               [|(Ojs.string_to_js x521);(Ojs.fun_to_js 2
                                            (fun (x523 : Ojs.t) ->
                                               fun (x525 : Ojs.t) ->
                                                 x522
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x523)
                                                   ~address:(SoaRecord.t_of_js
                                                               x525)))|])
    module ResolveSoa =
      struct
        let (__promisify__ : hostname:string -> SoaRecord.t Promise.t) =
          fun ~hostname:(x526 : string) ->
            Promise.t_of_js SoaRecord.t_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveSoa")
                 "__promisify__" [|(Ojs.string_to_js x526)|])
      end
    let (resolve_srv :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:SrvRecord.t list -> unit)
          -> unit)
      =
      fun ~hostname:(x528 : string) ->
        fun
          ~callback:(x529 :
                      err:ErrnoException.t or_null ->
                        addresses:SrvRecord.t list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveSrv"
               [|(Ojs.string_to_js x528);(Ojs.fun_to_js 2
                                            (fun (x530 : Ojs.t) ->
                                               fun (x532 : Ojs.t) ->
                                                 x529
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x530)
                                                   ~addresses:(Ojs.list_of_js
                                                                 SrvRecord.t_of_js
                                                                 x532)))|])
    module ResolveSrv =
      struct
        let (__promisify__ : hostname:string -> SrvRecord.t list Promise.t) =
          fun ~hostname:(x534 : string) ->
            Promise.t_of_js
              (fun (x535 : Ojs.t) -> Ojs.list_of_js SrvRecord.t_of_js x535)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveSrv")
                 "__promisify__" [|(Ojs.string_to_js x534)|])
      end
    let (resolve_txt :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list list -> unit)
          -> unit)
      =
      fun ~hostname:(x537 : string) ->
        fun
          ~callback:(x538 :
                      err:ErrnoException.t or_null ->
                        addresses:string list list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveTxt"
               [|(Ojs.string_to_js x537);(Ojs.fun_to_js 2
                                            (fun (x539 : Ojs.t) ->
                                               fun (x541 : Ojs.t) ->
                                                 x538
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x539)
                                                   ~addresses:(Ojs.list_of_js
                                                                 (fun
                                                                    (x542 :
                                                                    Ojs.t) ->
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x542)
                                                                 x541)))|])
    module ResolveTxt =
      struct
        let (__promisify__ : hostname:string -> string list list Promise.t) =
          fun ~hostname:(x544 : string) ->
            Promise.t_of_js
              (fun (x545 : Ojs.t) ->
                 Ojs.list_of_js
                   (fun (x546 : Ojs.t) ->
                      Ojs.list_of_js Ojs.string_of_js x546) x545)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveTxt")
                 "__promisify__" [|(Ojs.string_to_js x544)|])
      end
    let (resolve_any :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:AnyRecord.t list -> unit)
          -> unit)
      =
      fun ~hostname:(x548 : string) ->
        fun
          ~callback:(x549 :
                      err:ErrnoException.t or_null ->
                        addresses:AnyRecord.t list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveAny"
               [|(Ojs.string_to_js x548);(Ojs.fun_to_js 2
                                            (fun (x550 : Ojs.t) ->
                                               fun (x552 : Ojs.t) ->
                                                 x549
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x550)
                                                   ~addresses:(Ojs.list_of_js
                                                                 AnyRecord.t_of_js
                                                                 x552)))|])
    module ResolveAny =
      struct
        let (__promisify__ : hostname:string -> AnyRecord.t list Promise.t) =
          fun ~hostname:(x554 : string) ->
            Promise.t_of_js
              (fun (x555 : Ojs.t) -> Ojs.list_of_js AnyRecord.t_of_js x555)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveAny")
                 "__promisify__" [|(Ojs.string_to_js x554)|])
      end
    let (reverse :
      ip:string ->
        callback:(err:ErrnoException.t or_null ->
                    hostnames:string list -> unit)
          -> unit)
      =
      fun ~ip:(x557 : string) ->
        fun
          ~callback:(x558 :
                      err:ErrnoException.t or_null ->
                        hostnames:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "reverse"
               [|(Ojs.string_to_js x557);(Ojs.fun_to_js 2
                                            (fun (x559 : Ojs.t) ->
                                               fun (x561 : Ojs.t) ->
                                                 x558
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x559)
                                                   ~hostnames:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x561)))|])
    let (set_servers : servers:string list -> unit) =
      fun ~servers:(x563 : string list) ->
        ignore
          (Ojs.call Import.dns "setServers"
             [|(Ojs.list_to_js Ojs.string_to_js x563)|])
    let (get_servers : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.dns "getServers" [||])
    let (n_odata : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "NODATA")
    let (f_ormerr : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "FORMERR")
    let (s_ervfail : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "SERVFAIL")
    let (n_otfound : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "NOTFOUND")
    let (n_otimp : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "NOTIMP")
    let (r_efused : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "REFUSED")
    let (b_adquery : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADQUERY")
    let (b_adname : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADNAME")
    let (b_adfamily : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADFAMILY")
    let (b_adresp : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADRESP")
    let (c_onnrefused : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "CONNREFUSED")
    let (t_imeout : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "TIMEOUT")
    let (e_of : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "EOF")
    let (f_ile : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "FILE")
    let (n_omem : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "NOMEM")
    let (d_estruction : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "DESTRUCTION")
    let (b_adstr : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADSTR")
    let (b_adflags : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADFLAGS")
    let (n_oname : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "NONAME")
    let (b_adhints : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADHINTS")
    let (n_otinitialized : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "NOTINITIALIZED")
    let (l_oadiphlpapi : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "LOADIPHLPAPI")
    let (a_ddrgetnetworkparams : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "ADDRGETNETWORKPARAMS")
    let (c_ancelled : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "CANCELLED")
    module ResolverOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x567 : Ojs.t) -> x567
        and t_to_js : t -> Ojs.t = fun (x566 : Ojs.t) -> x566
        let (get_timeout : t -> int) =
          fun (x568 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x568) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x569 : t) ->
            fun (x570 : int) ->
              Ojs.set_prop_ascii (t_to_js x569) "timeout"
                (Ojs.int_to_js x570)
      end
    module Resolver =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x572 : Ojs.t) -> x572
        and t_to_js : t -> Ojs.t = fun (x571 : Ojs.t) -> x571
        let (create : ?options:ResolverOptions.t -> unit -> t) =
          fun ?options:(x573 : ResolverOptions.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.dns "Resolver")
                   (let x574 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x573 with
                     | Some x575 ->
                         ignore
                           (Ojs.call x574 "push"
                              [|(ResolverOptions.t_to_js x575)|])
                     | None -> ());
                    x574))
        let (cancel : t -> unit) =
          fun (x576 : t) -> ignore (Ojs.call (t_to_js x576) "cancel" [||])
        let (get_servers : t -> string list) =
          fun (x577 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x577) "getServers" [||])
        let (resolve :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
                -> unit)
          =
          fun (x585 : t) ->
            fun ~hostname:(x579 : string) ->
              fun
                ~callback:(x580 :
                            err:ErrnoException.t or_null ->
                              addresses:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x585) "resolve"
                     [|(Ojs.string_to_js x579);(Ojs.fun_to_js 2
                                                  (fun (x581 : Ojs.t) ->
                                                     fun (x583 : Ojs.t) ->
                                                       x580
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x581)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x583)))|])
        let (resolve4 :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
                -> unit)
          =
          fun (x592 : t) ->
            fun ~hostname:(x586 : string) ->
              fun
                ~callback:(x587 :
                            err:ErrnoException.t or_null ->
                              addresses:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x592) "resolve4"
                     [|(Ojs.string_to_js x586);(Ojs.fun_to_js 2
                                                  (fun (x588 : Ojs.t) ->
                                                     fun (x590 : Ojs.t) ->
                                                       x587
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x588)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x590)))|])
        let (resolve6 :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
                -> unit)
          =
          fun (x599 : t) ->
            fun ~hostname:(x593 : string) ->
              fun
                ~callback:(x594 :
                            err:ErrnoException.t or_null ->
                              addresses:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x599) "resolve6"
                     [|(Ojs.string_to_js x593);(Ojs.fun_to_js 2
                                                  (fun (x595 : Ojs.t) ->
                                                     fun (x597 : Ojs.t) ->
                                                       x594
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x595)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x597)))|])
        let (resolve_any :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:AnyRecord.t list -> unit)
                -> unit)
          =
          fun (x606 : t) ->
            fun ~hostname:(x600 : string) ->
              fun
                ~callback:(x601 :
                            err:ErrnoException.t or_null ->
                              addresses:AnyRecord.t list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x606) "resolveAny"
                     [|(Ojs.string_to_js x600);(Ojs.fun_to_js 2
                                                  (fun (x602 : Ojs.t) ->
                                                     fun (x604 : Ojs.t) ->
                                                       x601
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x602)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           AnyRecord.t_of_js
                                                           x604)))|])
        let (resolve_cname :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
                -> unit)
          =
          fun (x613 : t) ->
            fun ~hostname:(x607 : string) ->
              fun
                ~callback:(x608 :
                            err:ErrnoException.t or_null ->
                              addresses:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x613) "resolveCname"
                     [|(Ojs.string_to_js x607);(Ojs.fun_to_js 2
                                                  (fun (x609 : Ojs.t) ->
                                                     fun (x611 : Ojs.t) ->
                                                       x608
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x609)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x611)))|])
        let (resolve_mx :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:MxRecord.t list -> unit)
                -> unit)
          =
          fun (x620 : t) ->
            fun ~hostname:(x614 : string) ->
              fun
                ~callback:(x615 :
                            err:ErrnoException.t or_null ->
                              addresses:MxRecord.t list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x620) "resolveMx"
                     [|(Ojs.string_to_js x614);(Ojs.fun_to_js 2
                                                  (fun (x616 : Ojs.t) ->
                                                     fun (x618 : Ojs.t) ->
                                                       x615
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x616)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           MxRecord.t_of_js
                                                           x618)))|])
        let (resolve_naptr :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:NaptrRecord.t list -> unit)
                -> unit)
          =
          fun (x627 : t) ->
            fun ~hostname:(x621 : string) ->
              fun
                ~callback:(x622 :
                            err:ErrnoException.t or_null ->
                              addresses:NaptrRecord.t list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x627) "resolveNaptr"
                     [|(Ojs.string_to_js x621);(Ojs.fun_to_js 2
                                                  (fun (x623 : Ojs.t) ->
                                                     fun (x625 : Ojs.t) ->
                                                       x622
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x623)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           NaptrRecord.t_of_js
                                                           x625)))|])
        let (resolve_ns :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
                -> unit)
          =
          fun (x634 : t) ->
            fun ~hostname:(x628 : string) ->
              fun
                ~callback:(x629 :
                            err:ErrnoException.t or_null ->
                              addresses:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x634) "resolveNs"
                     [|(Ojs.string_to_js x628);(Ojs.fun_to_js 2
                                                  (fun (x630 : Ojs.t) ->
                                                     fun (x632 : Ojs.t) ->
                                                       x629
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x630)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x632)))|])
        let (resolve_ptr :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
                -> unit)
          =
          fun (x641 : t) ->
            fun ~hostname:(x635 : string) ->
              fun
                ~callback:(x636 :
                            err:ErrnoException.t or_null ->
                              addresses:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x641) "resolvePtr"
                     [|(Ojs.string_to_js x635);(Ojs.fun_to_js 2
                                                  (fun (x637 : Ojs.t) ->
                                                     fun (x639 : Ojs.t) ->
                                                       x636
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x637)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x639)))|])
        let (resolve_soa :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          address:SoaRecord.t -> unit)
                -> unit)
          =
          fun (x647 : t) ->
            fun ~hostname:(x642 : string) ->
              fun
                ~callback:(x643 :
                            err:ErrnoException.t or_null ->
                              address:SoaRecord.t -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x647) "resolveSoa"
                     [|(Ojs.string_to_js x642);(Ojs.fun_to_js 2
                                                  (fun (x644 : Ojs.t) ->
                                                     fun (x646 : Ojs.t) ->
                                                       x643
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x644)
                                                         ~address:(SoaRecord.t_of_js
                                                                    x646)))|])
        let (resolve_srv :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:SrvRecord.t list -> unit)
                -> unit)
          =
          fun (x654 : t) ->
            fun ~hostname:(x648 : string) ->
              fun
                ~callback:(x649 :
                            err:ErrnoException.t or_null ->
                              addresses:SrvRecord.t list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x654) "resolveSrv"
                     [|(Ojs.string_to_js x648);(Ojs.fun_to_js 2
                                                  (fun (x650 : Ojs.t) ->
                                                     fun (x652 : Ojs.t) ->
                                                       x649
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x650)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           SrvRecord.t_of_js
                                                           x652)))|])
        let (resolve_txt :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list list -> unit)
                -> unit)
          =
          fun (x662 : t) ->
            fun ~hostname:(x655 : string) ->
              fun
                ~callback:(x656 :
                            err:ErrnoException.t or_null ->
                              addresses:string list list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x662) "resolveTxt"
                     [|(Ojs.string_to_js x655);(Ojs.fun_to_js 2
                                                  (fun (x657 : Ojs.t) ->
                                                     fun (x659 : Ojs.t) ->
                                                       x656
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x657)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           (fun
                                                              (x660 : Ojs.t)
                                                              ->
                                                              Ojs.list_of_js
                                                                Ojs.string_of_js
                                                                x660) x659)))|])
        let (reverse :
          t ->
            ip:string ->
              callback:(err:ErrnoException.t or_null ->
                          hostnames:string list -> unit)
                -> unit)
          =
          fun (x669 : t) ->
            fun ~ip:(x663 : string) ->
              fun
                ~callback:(x664 :
                            err:ErrnoException.t or_null ->
                              hostnames:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x669) "reverse"
                     [|(Ojs.string_to_js x663);(Ojs.fun_to_js 2
                                                  (fun (x665 : Ojs.t) ->
                                                     fun (x667 : Ojs.t) ->
                                                       x664
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x665)
                                                         ~hostnames:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x667)))|])
        let (set_local_address :
          t -> ?ipv4:string -> ?ipv6:string -> unit -> unit) =
          fun (x675 : t) ->
            fun ?ipv4:(x670 : string option) ->
              fun ?ipv6:(x671 : string option) ->
                fun () ->
                  ignore
                    (let x676 = t_to_js x675 in
                     Ojs.call (Ojs.get_prop_ascii x676 "setLocalAddress")
                       "apply"
                       [|x676;((let x672 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x670 with
                                 | Some x674 ->
                                     ignore
                                       (Ojs.call x672 "push"
                                          [|(Ojs.string_to_js x674)|])
                                 | None -> ());
                                (match x671 with
                                 | Some x673 ->
                                     ignore
                                       (Ojs.call x672 "push"
                                          [|(Ojs.string_to_js x673)|])
                                 | None -> ());
                                x672))|])
        let (set_servers : t -> servers:string list -> unit) =
          fun (x679 : t) ->
            fun ~servers:(x677 : string list) ->
              ignore
                (Ojs.call (t_to_js x679) "setServers"
                   [|(Ojs.list_to_js Ojs.string_to_js x677)|])
      end
    module Promises =
      struct
        let (get_servers : unit -> string list) =
          fun () ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "getServers" [||])
        let (lookup :
          hostname:string -> family:int -> LookupAddress.t Promise.t) =
          fun ~hostname:(x681 : string) ->
            fun ~family:(x682 : int) ->
              Promise.t_of_js LookupAddress.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "lookup"
                   [|(Ojs.string_to_js x681);(Ojs.int_to_js x682)|])
        let (lookup :
          hostname:string ->
            options:LookupOneOptions.t -> LookupAddress.t Promise.t)
          =
          fun ~hostname:(x684 : string) ->
            fun ~options:(x685 : LookupOneOptions.t) ->
              Promise.t_of_js LookupAddress.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "lookup"
                   [|(Ojs.string_to_js x684);(LookupOneOptions.t_to_js x685)|])
        let (lookup :
          hostname:string ->
            options:LookupAllOptions.t -> LookupAddress.t list Promise.t)
          =
          fun ~hostname:(x687 : string) ->
            fun ~options:(x688 : LookupAllOptions.t) ->
              Promise.t_of_js
                (fun (x689 : Ojs.t) ->
                   Ojs.list_of_js LookupAddress.t_of_js x689)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "lookup"
                   [|(Ojs.string_to_js x687);(LookupAllOptions.t_to_js x688)|])
        let (lookup :
          hostname:string ->
            options:LookupOptions.t ->
              (LookupAddress.t, LookupAddress.t) or_array Promise.t)
          =
          fun ~hostname:(x691 : string) ->
            fun ~options:(x692 : LookupOptions.t) ->
              Promise.t_of_js
                (fun (x693 : Ojs.t) ->
                   or_array_of_js LookupAddress.t_of_js LookupAddress.t_of_js
                     x693)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "lookup"
                   [|(Ojs.string_to_js x691);(LookupOptions.t_to_js x692)|])
        let (lookup : hostname:string -> LookupAddress.t Promise.t) =
          fun ~hostname:(x696 : string) ->
            Promise.t_of_js LookupAddress.t_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "lookup"
                 [|(Ojs.string_to_js x696)|])
        let (lookup_service :
          address:string -> port:int -> AnonymousInterface0.t Promise.t) =
          fun ~address:(x698 : string) ->
            fun ~port:(x699 : int) ->
              Promise.t_of_js AnonymousInterface0.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "lookupService"
                   [|(Ojs.string_to_js x698);(Ojs.int_to_js x699)|])
        let (resolve : hostname:string -> string list Promise.t) =
          fun ~hostname:(x701 : string) ->
            Promise.t_of_js
              (fun (x702 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x702)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "resolve"
                 [|(Ojs.string_to_js x701)|])
        let (resolve :
          hostname:string -> rrtype:[ `A ] -> string list Promise.t) =
          fun ~hostname:(x704 : string) ->
            fun ~rrtype:(x705 : [ `A ]) ->
              Promise.t_of_js
                (fun (x706 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x706)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x704);((match x705 with
                                               | `A -> Ojs.string_to_js "A"))|])
        let (resolve :
          hostname:string -> rrtype:[ `AAAA ] -> string list Promise.t) =
          fun ~hostname:(x708 : string) ->
            fun ~rrtype:(x709 : [ `AAAA ]) ->
              Promise.t_of_js
                (fun (x710 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x710)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x708);((match x709 with
                                               | `AAAA ->
                                                   Ojs.string_to_js "AAAA"))|])
        let (resolve :
          hostname:string -> rrtype:[ `ANY ] -> AnyRecord.t list Promise.t) =
          fun ~hostname:(x712 : string) ->
            fun ~rrtype:(x713 : [ `ANY ]) ->
              Promise.t_of_js
                (fun (x714 : Ojs.t) -> Ojs.list_of_js AnyRecord.t_of_js x714)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x712);((match x713 with
                                               | `ANY ->
                                                   Ojs.string_to_js "ANY"))|])
        let (resolve :
          hostname:string -> rrtype:[ `CNAME ] -> string list Promise.t) =
          fun ~hostname:(x716 : string) ->
            fun ~rrtype:(x717 : [ `CNAME ]) ->
              Promise.t_of_js
                (fun (x718 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x718)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x716);((match x717 with
                                               | `CNAME ->
                                                   Ojs.string_to_js "CNAME"))|])
        let (resolve :
          hostname:string -> rrtype:[ `MX ] -> MxRecord.t list Promise.t) =
          fun ~hostname:(x720 : string) ->
            fun ~rrtype:(x721 : [ `MX ]) ->
              Promise.t_of_js
                (fun (x722 : Ojs.t) -> Ojs.list_of_js MxRecord.t_of_js x722)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x720);((match x721 with
                                               | `MX -> Ojs.string_to_js "MX"))|])
        let (resolve :
          hostname:string ->
            rrtype:[ `NAPTR ] -> NaptrRecord.t list Promise.t)
          =
          fun ~hostname:(x724 : string) ->
            fun ~rrtype:(x725 : [ `NAPTR ]) ->
              Promise.t_of_js
                (fun (x726 : Ojs.t) ->
                   Ojs.list_of_js NaptrRecord.t_of_js x726)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x724);((match x725 with
                                               | `NAPTR ->
                                                   Ojs.string_to_js "NAPTR"))|])
        let (resolve :
          hostname:string -> rrtype:[ `NS ] -> string list Promise.t) =
          fun ~hostname:(x728 : string) ->
            fun ~rrtype:(x729 : [ `NS ]) ->
              Promise.t_of_js
                (fun (x730 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x730)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x728);((match x729 with
                                               | `NS -> Ojs.string_to_js "NS"))|])
        let (resolve :
          hostname:string -> rrtype:[ `PTR ] -> string list Promise.t) =
          fun ~hostname:(x732 : string) ->
            fun ~rrtype:(x733 : [ `PTR ]) ->
              Promise.t_of_js
                (fun (x734 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x734)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x732);((match x733 with
                                               | `PTR ->
                                                   Ojs.string_to_js "PTR"))|])
        let (resolve :
          hostname:string -> rrtype:[ `SOA ] -> SoaRecord.t Promise.t) =
          fun ~hostname:(x736 : string) ->
            fun ~rrtype:(x737 : [ `SOA ]) ->
              Promise.t_of_js SoaRecord.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x736);((match x737 with
                                               | `SOA ->
                                                   Ojs.string_to_js "SOA"))|])
        let (resolve :
          hostname:string -> rrtype:[ `SRV ] -> SrvRecord.t list Promise.t) =
          fun ~hostname:(x739 : string) ->
            fun ~rrtype:(x740 : [ `SRV ]) ->
              Promise.t_of_js
                (fun (x741 : Ojs.t) -> Ojs.list_of_js SrvRecord.t_of_js x741)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x739);((match x740 with
                                               | `SRV ->
                                                   Ojs.string_to_js "SRV"))|])
        let (resolve :
          hostname:string -> rrtype:[ `TXT ] -> string list list Promise.t) =
          fun ~hostname:(x743 : string) ->
            fun ~rrtype:(x744 : [ `TXT ]) ->
              Promise.t_of_js
                (fun (x745 : Ojs.t) ->
                   Ojs.list_of_js
                     (fun (x746 : Ojs.t) ->
                        Ojs.list_of_js Ojs.string_of_js x746) x745)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x743);((match x744 with
                                               | `TXT ->
                                                   Ojs.string_to_js "TXT"))|])
        let (resolve :
          hostname:string ->
            rrtype:string ->
              (SoaRecord.t,
                ((AnyRecord.t, MxRecord.t, NaptrRecord.t, SrvRecord.t) union4,
                  string) or_array or_string)
                or_array Promise.t)
          =
          fun ~hostname:(x748 : string) ->
            fun ~rrtype:(x749 : string) ->
              Promise.t_of_js
                (fun (x750 : Ojs.t) ->
                   or_array_of_js SoaRecord.t_of_js
                     (fun (x752 : Ojs.t) ->
                        or_string_of_js
                          (fun (x753 : Ojs.t) ->
                             or_array_of_js
                               (fun (x754 : Ojs.t) ->
                                  union4_of_js AnyRecord.t_of_js
                                    MxRecord.t_of_js NaptrRecord.t_of_js
                                    SrvRecord.t_of_js x754) Ojs.string_of_js
                               x753) x752) x750)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x748);(Ojs.string_to_js x749)|])
        let (resolve4 : hostname:string -> string list Promise.t) =
          fun ~hostname:(x760 : string) ->
            Promise.t_of_js
              (fun (x761 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x761)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "resolve4"
                 [|(Ojs.string_to_js x760)|])
        let (resolve4 :
          hostname:string ->
            options:ResolveWithTtlOptions.t -> RecordWithTtl.t list Promise.t)
          =
          fun ~hostname:(x763 : string) ->
            fun ~options:(x764 : ResolveWithTtlOptions.t) ->
              Promise.t_of_js
                (fun (x765 : Ojs.t) ->
                   Ojs.list_of_js RecordWithTtl.t_of_js x765)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve4"
                   [|(Ojs.string_to_js x763);(ResolveWithTtlOptions.t_to_js
                                                x764)|])
        let (resolve4 :
          hostname:string ->
            options:ResolveOptions.t ->
              RecordWithTtl.t or_string list Promise.t)
          =
          fun ~hostname:(x767 : string) ->
            fun ~options:(x768 : ResolveOptions.t) ->
              Promise.t_of_js
                (fun (x769 : Ojs.t) ->
                   Ojs.list_of_js
                     (fun (x770 : Ojs.t) ->
                        or_string_of_js RecordWithTtl.t_of_js x770) x769)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve4"
                   [|(Ojs.string_to_js x767);(ResolveOptions.t_to_js x768)|])
        let (resolve6 : hostname:string -> string list Promise.t) =
          fun ~hostname:(x772 : string) ->
            Promise.t_of_js
              (fun (x773 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x773)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "resolve6"
                 [|(Ojs.string_to_js x772)|])
        let (resolve6 :
          hostname:string ->
            options:ResolveWithTtlOptions.t -> RecordWithTtl.t list Promise.t)
          =
          fun ~hostname:(x775 : string) ->
            fun ~options:(x776 : ResolveWithTtlOptions.t) ->
              Promise.t_of_js
                (fun (x777 : Ojs.t) ->
                   Ojs.list_of_js RecordWithTtl.t_of_js x777)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve6"
                   [|(Ojs.string_to_js x775);(ResolveWithTtlOptions.t_to_js
                                                x776)|])
        let (resolve6 :
          hostname:string ->
            options:ResolveOptions.t ->
              RecordWithTtl.t or_string list Promise.t)
          =
          fun ~hostname:(x779 : string) ->
            fun ~options:(x780 : ResolveOptions.t) ->
              Promise.t_of_js
                (fun (x781 : Ojs.t) ->
                   Ojs.list_of_js
                     (fun (x782 : Ojs.t) ->
                        or_string_of_js RecordWithTtl.t_of_js x782) x781)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve6"
                   [|(Ojs.string_to_js x779);(ResolveOptions.t_to_js x780)|])
        let (resolve_any : hostname:string -> AnyRecord.t list Promise.t) =
          fun ~hostname:(x784 : string) ->
            Promise.t_of_js
              (fun (x785 : Ojs.t) -> Ojs.list_of_js AnyRecord.t_of_js x785)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveAny" [|(Ojs.string_to_js x784)|])
        let (resolve_cname : hostname:string -> string list Promise.t) =
          fun ~hostname:(x787 : string) ->
            Promise.t_of_js
              (fun (x788 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x788)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveCname" [|(Ojs.string_to_js x787)|])
        let (resolve_mx : hostname:string -> MxRecord.t list Promise.t) =
          fun ~hostname:(x790 : string) ->
            Promise.t_of_js
              (fun (x791 : Ojs.t) -> Ojs.list_of_js MxRecord.t_of_js x791)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveMx" [|(Ojs.string_to_js x790)|])
        let (resolve_naptr : hostname:string -> NaptrRecord.t list Promise.t)
          =
          fun ~hostname:(x793 : string) ->
            Promise.t_of_js
              (fun (x794 : Ojs.t) -> Ojs.list_of_js NaptrRecord.t_of_js x794)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveNaptr" [|(Ojs.string_to_js x793)|])
        let (resolve_ns : hostname:string -> string list Promise.t) =
          fun ~hostname:(x796 : string) ->
            Promise.t_of_js
              (fun (x797 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x797)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveNs" [|(Ojs.string_to_js x796)|])
        let (resolve_ptr : hostname:string -> string list Promise.t) =
          fun ~hostname:(x799 : string) ->
            Promise.t_of_js
              (fun (x800 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x800)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolvePtr" [|(Ojs.string_to_js x799)|])
        let (resolve_soa : hostname:string -> SoaRecord.t Promise.t) =
          fun ~hostname:(x802 : string) ->
            Promise.t_of_js SoaRecord.t_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveSoa" [|(Ojs.string_to_js x802)|])
        let (resolve_srv : hostname:string -> SrvRecord.t list Promise.t) =
          fun ~hostname:(x804 : string) ->
            Promise.t_of_js
              (fun (x805 : Ojs.t) -> Ojs.list_of_js SrvRecord.t_of_js x805)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveSrv" [|(Ojs.string_to_js x804)|])
        let (resolve_txt : hostname:string -> string list list Promise.t) =
          fun ~hostname:(x807 : string) ->
            Promise.t_of_js
              (fun (x808 : Ojs.t) ->
                 Ojs.list_of_js
                   (fun (x809 : Ojs.t) ->
                      Ojs.list_of_js Ojs.string_of_js x809) x808)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveTxt" [|(Ojs.string_to_js x807)|])
        let (reverse : ip:string -> string list Promise.t) =
          fun ~ip:(x811 : string) ->
            Promise.t_of_js
              (fun (x812 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x812)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "reverse"
                 [|(Ojs.string_to_js x811)|])
        let (set_servers : servers:string list -> unit) =
          fun ~servers:(x814 : string list) ->
            ignore
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "setServers" [|(Ojs.list_to_js Ojs.string_to_js x814)|])
        module Resolver =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x817 : Ojs.t) -> x817
            and t_to_js : t -> Ojs.t = fun (x816 : Ojs.t) -> x816
            let (create : ?options:ResolverOptions.t -> unit -> t) =
              fun ?options:(x818 : ResolverOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.dns "promises")
                          "Resolver")
                       (let x819 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x818 with
                         | Some x820 ->
                             ignore
                               (Ojs.call x819 "push"
                                  [|(ResolverOptions.t_to_js x820)|])
                         | None -> ());
                        x819))
            let (cancel : t -> unit) =
              fun (x821 : t) ->
                ignore (Ojs.call (t_to_js x821) "cancel" [||])
            let (get_servers : t -> string list) =
              fun (x822 : t) ->
                Ojs.list_of_js Ojs.string_of_js
                  (Ojs.call (t_to_js x822) "getServers" [||])
            let (resolve : t -> hostname:string -> string list Promise.t) =
              fun (x825 : t) ->
                fun ~hostname:(x824 : string) ->
                  Promise.t_of_js
                    (fun (x826 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x826)
                    (Ojs.call (t_to_js x825) "resolve"
                       [|(Ojs.string_to_js x824)|])
            let (resolve4 : t -> hostname:string -> string list Promise.t) =
              fun (x829 : t) ->
                fun ~hostname:(x828 : string) ->
                  Promise.t_of_js
                    (fun (x830 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x830)
                    (Ojs.call (t_to_js x829) "resolve4"
                       [|(Ojs.string_to_js x828)|])
            let (resolve6 : t -> hostname:string -> string list Promise.t) =
              fun (x833 : t) ->
                fun ~hostname:(x832 : string) ->
                  Promise.t_of_js
                    (fun (x834 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x834)
                    (Ojs.call (t_to_js x833) "resolve6"
                       [|(Ojs.string_to_js x832)|])
            let (resolve_any :
              t -> hostname:string -> AnyRecord.t list Promise.t) =
              fun (x837 : t) ->
                fun ~hostname:(x836 : string) ->
                  Promise.t_of_js
                    (fun (x838 : Ojs.t) ->
                       Ojs.list_of_js AnyRecord.t_of_js x838)
                    (Ojs.call (t_to_js x837) "resolveAny"
                       [|(Ojs.string_to_js x836)|])
            let (resolve_cname :
              t -> hostname:string -> string list Promise.t) =
              fun (x841 : t) ->
                fun ~hostname:(x840 : string) ->
                  Promise.t_of_js
                    (fun (x842 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x842)
                    (Ojs.call (t_to_js x841) "resolveCname"
                       [|(Ojs.string_to_js x840)|])
            let (resolve_mx :
              t -> hostname:string -> MxRecord.t list Promise.t) =
              fun (x845 : t) ->
                fun ~hostname:(x844 : string) ->
                  Promise.t_of_js
                    (fun (x846 : Ojs.t) ->
                       Ojs.list_of_js MxRecord.t_of_js x846)
                    (Ojs.call (t_to_js x845) "resolveMx"
                       [|(Ojs.string_to_js x844)|])
            let (resolve_naptr :
              t -> hostname:string -> NaptrRecord.t list Promise.t) =
              fun (x849 : t) ->
                fun ~hostname:(x848 : string) ->
                  Promise.t_of_js
                    (fun (x850 : Ojs.t) ->
                       Ojs.list_of_js NaptrRecord.t_of_js x850)
                    (Ojs.call (t_to_js x849) "resolveNaptr"
                       [|(Ojs.string_to_js x848)|])
            let (resolve_ns : t -> hostname:string -> string list Promise.t)
              =
              fun (x853 : t) ->
                fun ~hostname:(x852 : string) ->
                  Promise.t_of_js
                    (fun (x854 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x854)
                    (Ojs.call (t_to_js x853) "resolveNs"
                       [|(Ojs.string_to_js x852)|])
            let (resolve_ptr : t -> hostname:string -> string list Promise.t)
              =
              fun (x857 : t) ->
                fun ~hostname:(x856 : string) ->
                  Promise.t_of_js
                    (fun (x858 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x858)
                    (Ojs.call (t_to_js x857) "resolvePtr"
                       [|(Ojs.string_to_js x856)|])
            let (resolve_soa : t -> hostname:string -> SoaRecord.t Promise.t)
              =
              fun (x861 : t) ->
                fun ~hostname:(x860 : string) ->
                  Promise.t_of_js SoaRecord.t_of_js
                    (Ojs.call (t_to_js x861) "resolveSoa"
                       [|(Ojs.string_to_js x860)|])
            let (resolve_srv :
              t -> hostname:string -> SrvRecord.t list Promise.t) =
              fun (x864 : t) ->
                fun ~hostname:(x863 : string) ->
                  Promise.t_of_js
                    (fun (x865 : Ojs.t) ->
                       Ojs.list_of_js SrvRecord.t_of_js x865)
                    (Ojs.call (t_to_js x864) "resolveSrv"
                       [|(Ojs.string_to_js x863)|])
            let (resolve_txt :
              t -> hostname:string -> string list list Promise.t) =
              fun (x868 : t) ->
                fun ~hostname:(x867 : string) ->
                  Promise.t_of_js
                    (fun (x869 : Ojs.t) ->
                       Ojs.list_of_js
                         (fun (x870 : Ojs.t) ->
                            Ojs.list_of_js Ojs.string_of_js x870) x869)
                    (Ojs.call (t_to_js x868) "resolveTxt"
                       [|(Ojs.string_to_js x867)|])
            let (reverse : t -> ip:string -> string list Promise.t) =
              fun (x873 : t) ->
                fun ~ip:(x872 : string) ->
                  Promise.t_of_js
                    (fun (x874 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x874)
                    (Ojs.call (t_to_js x873) "reverse"
                       [|(Ojs.string_to_js x872)|])
            let (set_local_address :
              t -> ?ipv4:string -> ?ipv6:string -> unit -> unit) =
              fun (x881 : t) ->
                fun ?ipv4:(x876 : string option) ->
                  fun ?ipv6:(x877 : string option) ->
                    fun () ->
                      ignore
                        (let x882 = t_to_js x881 in
                         Ojs.call (Ojs.get_prop_ascii x882 "setLocalAddress")
                           "apply"
                           [|x882;((let x878 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    (match x876 with
                                     | Some x880 ->
                                         ignore
                                           (Ojs.call x878 "push"
                                              [|(Ojs.string_to_js x880)|])
                                     | None -> ());
                                    (match x877 with
                                     | Some x879 ->
                                         ignore
                                           (Ojs.call x878 "push"
                                              [|(Ojs.string_to_js x879)|])
                                     | None -> ());
                                    x878))|])
            let (set_servers : t -> servers:string list -> unit) =
              fun (x885 : t) ->
                fun ~servers:(x883 : string list) ->
                  ignore
                    (Ojs.call (t_to_js x885) "setServers"
                       [|(Ojs.list_to_js Ojs.string_to_js x883)|])
          end
      end
  end
