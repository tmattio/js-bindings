[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_hostname : t -> string) =
      fun (x3 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3) "hostname")
    let (set_hostname : t -> string -> unit) =
      fun (x4 : t) ->
        fun (x5 : string) ->
          Ojs.set_prop_ascii (t_to_js x4) "hostname" (Ojs.string_to_js x5)
    let (get_service : t -> string) =
      fun (x6 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x6) "service")
    let (set_service : t -> string -> unit) =
      fun (x7 : t) ->
        fun (x8 : string) ->
          Ojs.set_prop_ascii (t_to_js x7) "service" (Ojs.string_to_js x8)
  end
module Dns =
  struct
    let (addrconfig : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.dns "ADDRCONFIG")
    let (v4MAPPED : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.dns "V4MAPPED")
    let (all : int) = Ojs.int_of_js (Ojs.get_prop_ascii Import.dns "ALL")
    module LookupOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x10 : Ojs.t) -> x10
        and t_to_js : t -> Ojs.t = fun (x9 : Ojs.t) -> x9
        let (get_family : t -> int) =
          fun (x11 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x11) "family")
        let (set_family : t -> int -> unit) =
          fun (x12 : t) ->
            fun (x13 : int) ->
              Ojs.set_prop_ascii (t_to_js x12) "family" (Ojs.int_to_js x13)
        let (get_hints : t -> int) =
          fun (x14 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x14) "hints")
        let (set_hints : t -> int -> unit) =
          fun (x15 : t) ->
            fun (x16 : int) ->
              Ojs.set_prop_ascii (t_to_js x15) "hints" (Ojs.int_to_js x16)
        let (get_all : t -> bool) =
          fun (x17 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x17) "all")
        let (set_all : t -> bool -> unit) =
          fun (x18 : t) ->
            fun (x19 : bool) ->
              Ojs.set_prop_ascii (t_to_js x18) "all" (Ojs.bool_to_js x19)
        let (get_verbatim : t -> bool) =
          fun (x20 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x20) "verbatim")
        let (set_verbatim : t -> bool -> unit) =
          fun (x21 : t) ->
            fun (x22 : bool) ->
              Ojs.set_prop_ascii (t_to_js x21) "verbatim"
                (Ojs.bool_to_js x22)
      end
    module LookupOneOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x24 : Ojs.t) -> x24
        and t_to_js : t -> Ojs.t = fun (x23 : Ojs.t) -> x23
        let (get_all : t -> [ `L_b_false ]) =
          fun (x25 : t) ->
            let x26 = Ojs.get_prop_ascii (t_to_js x25) "all" in
            match Ojs.bool_of_js x26 with
            | false -> `L_b_false
            | _ -> assert false
        let (set_all : t -> [ `L_b_false ] -> unit) =
          fun (x27 : t) ->
            fun (x28 : [ `L_b_false ]) ->
              Ojs.set_prop_ascii (t_to_js x27) "all"
                (match x28 with | `L_b_false -> Ojs.string_to_js "LBFalse")
        let (cast : t -> LookupOptions.t) =
          fun (x29 : t) -> LookupOptions.t_of_js (t_to_js x29)
      end
    module LookupAllOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x31 : Ojs.t) -> x31
        and t_to_js : t -> Ojs.t = fun (x30 : Ojs.t) -> x30
        let (get_all : t -> [ `L_b_true ]) =
          fun (x32 : t) ->
            let x33 = Ojs.get_prop_ascii (t_to_js x32) "all" in
            match Ojs.bool_of_js x33 with
            | true -> `L_b_true
            | _ -> assert false
        let (set_all : t -> [ `L_b_true ] -> unit) =
          fun (x34 : t) ->
            fun (x35 : [ `L_b_true ]) ->
              Ojs.set_prop_ascii (t_to_js x34) "all"
                (match x35 with | `L_b_true -> Ojs.string_to_js "LBTrue")
        let (cast : t -> LookupOptions.t) =
          fun (x36 : t) -> LookupOptions.t_of_js (t_to_js x36)
      end
    module LookupAddress =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x38 : Ojs.t) -> x38
        and t_to_js : t -> Ojs.t = fun (x37 : Ojs.t) -> x37
        let (get_address : t -> string) =
          fun (x39 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x39) "address")
        let (set_address : t -> string -> unit) =
          fun (x40 : t) ->
            fun (x41 : string) ->
              Ojs.set_prop_ascii (t_to_js x40) "address"
                (Ojs.string_to_js x41)
        let (get_family : t -> int) =
          fun (x42 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x42) "family")
        let (set_family : t -> int -> unit) =
          fun (x43 : t) ->
            fun (x44 : int) ->
              Ojs.set_prop_ascii (t_to_js x43) "family" (Ojs.int_to_js x44)
      end
    let (lookup :
      hostname:string ->
        family:int ->
          callback:(err:ErrnoException.t or_null ->
                      address:string -> family:int -> unit)
            -> unit)
      =
      fun ~hostname:(x45 : string) ->
        fun ~family:(x46 : int) ->
          fun
            ~callback:(x47 :
                        err:ErrnoException.t or_null ->
                          address:string -> family:int -> unit)
            ->
            ignore
              (Ojs.call Import.dns "lookup"
                 [|(Ojs.string_to_js x45);(Ojs.int_to_js x46);(Ojs.fun_to_js
                                                                 3
                                                                 (fun
                                                                    (x48 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x50 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x51 :
                                                                    Ojs.t) ->
                                                                    x47
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x48)
                                                                    ~address:(
                                                                    Ojs.string_of_js
                                                                    x50)
                                                                    ~family:(
                                                                    Ojs.int_of_js
                                                                    x51)))|])
    let (lookup :
      hostname:string ->
        options:LookupOneOptions.t ->
          callback:(err:ErrnoException.t or_null ->
                      address:string -> family:int -> unit)
            -> unit)
      =
      fun ~hostname:(x52 : string) ->
        fun ~options:(x53 : LookupOneOptions.t) ->
          fun
            ~callback:(x54 :
                        err:ErrnoException.t or_null ->
                          address:string -> family:int -> unit)
            ->
            ignore
              (Ojs.call Import.dns "lookup"
                 [|(Ojs.string_to_js x52);(LookupOneOptions.t_to_js x53);(
                   Ojs.fun_to_js 3
                     (fun (x55 : Ojs.t) ->
                        fun (x57 : Ojs.t) ->
                          fun (x58 : Ojs.t) ->
                            x54
                              ~err:(or_null_of_js ErrnoException.t_of_js x55)
                              ~address:(Ojs.string_of_js x57)
                              ~family:(Ojs.int_of_js x58)))|])
    let (lookup :
      hostname:string ->
        options:LookupAllOptions.t ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:LookupAddress.t list -> unit)
            -> unit)
      =
      fun ~hostname:(x59 : string) ->
        fun ~options:(x60 : LookupAllOptions.t) ->
          fun
            ~callback:(x61 :
                        err:ErrnoException.t or_null ->
                          addresses:LookupAddress.t list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "lookup"
                 [|(Ojs.string_to_js x59);(LookupAllOptions.t_to_js x60);(
                   Ojs.fun_to_js 2
                     (fun (x62 : Ojs.t) ->
                        fun (x64 : Ojs.t) ->
                          x61 ~err:(or_null_of_js ErrnoException.t_of_js x62)
                            ~addresses:(Ojs.list_of_js LookupAddress.t_of_js
                                          x64)))|])
    let (lookup :
      hostname:string ->
        options:LookupOptions.t ->
          callback:(err:ErrnoException.t or_null ->
                      address:LookupAddress.t list or_string ->
                        family:int -> unit)
            -> unit)
      =
      fun ~hostname:(x66 : string) ->
        fun ~options:(x67 : LookupOptions.t) ->
          fun
            ~callback:(x68 :
                        err:ErrnoException.t or_null ->
                          address:LookupAddress.t list or_string ->
                            family:int -> unit)
            ->
            ignore
              (Ojs.call Import.dns "lookup"
                 [|(Ojs.string_to_js x66);(LookupOptions.t_to_js x67);(
                   Ojs.fun_to_js 3
                     (fun (x69 : Ojs.t) ->
                        fun (x71 : Ojs.t) ->
                          fun (x74 : Ojs.t) ->
                            x68
                              ~err:(or_null_of_js ErrnoException.t_of_js x69)
                              ~address:(or_string_of_js
                                          (fun (x72 : Ojs.t) ->
                                             Ojs.list_of_js
                                               LookupAddress.t_of_js x72) x71)
                              ~family:(Ojs.int_of_js x74)))|])
    let (lookup :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    address:string -> family:int -> unit)
          -> unit)
      =
      fun ~hostname:(x75 : string) ->
        fun
          ~callback:(x76 :
                      err:ErrnoException.t or_null ->
                        address:string -> family:int -> unit)
          ->
          ignore
            (Ojs.call Import.dns "lookup"
               [|(Ojs.string_to_js x75);(Ojs.fun_to_js 3
                                           (fun (x77 : Ojs.t) ->
                                              fun (x79 : Ojs.t) ->
                                                fun (x80 : Ojs.t) ->
                                                  x76
                                                    ~err:(or_null_of_js
                                                            ErrnoException.t_of_js
                                                            x77)
                                                    ~address:(Ojs.string_of_js
                                                                x79)
                                                    ~family:(Ojs.int_of_js
                                                               x80)))|])
    module Lookup =
      struct
        let (__promisify__ :
          hostname:string ->
            options:LookupAllOptions.t -> LookupAddress.t list Promise.t)
          =
          fun ~hostname:(x81 : string) ->
            fun ~options:(x82 : LookupAllOptions.t) ->
              Promise.t_of_js
                (fun (x83 : Ojs.t) ->
                   Ojs.list_of_js LookupAddress.t_of_js x83)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "lookup")
                   "__promisify__"
                   [|(Ojs.string_to_js x81);(LookupAllOptions.t_to_js x82)|])
        let (__promisify__ :
          hostname:string ->
            ?options:LookupOneOptions.t or_number ->
              unit -> LookupAddress.t Promise.t)
          =
          fun ~hostname:(x85 : string) ->
            fun ?options:(x86 : LookupOneOptions.t or_number option) ->
              fun () ->
                Promise.t_of_js LookupAddress.t_of_js
                  (let x90 = Ojs.get_prop_ascii Import.dns "lookup" in
                   Ojs.call (Ojs.get_prop_ascii x90 "__promisify__") "apply"
                     [|x90;((let x87 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x87 "push"
                                  [|(Ojs.string_to_js x85)|]);
                             (match x86 with
                              | Some x88 ->
                                  ignore
                                    (Ojs.call x87 "push"
                                       [|(or_number_to_js
                                            LookupOneOptions.t_to_js x88)|])
                              | None -> ());
                             x87))|])
        let (__promisify__ :
          hostname:string ->
            options:LookupOptions.t ->
              (LookupAddress.t, LookupAddress.t) or_array Promise.t)
          =
          fun ~hostname:(x92 : string) ->
            fun ~options:(x93 : LookupOptions.t) ->
              Promise.t_of_js
                (fun (x94 : Ojs.t) ->
                   or_array_of_js LookupAddress.t_of_js LookupAddress.t_of_js
                     x94)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "lookup")
                   "__promisify__"
                   [|(Ojs.string_to_js x92);(LookupOptions.t_to_js x93)|])
      end
    let (lookup_service :
      address:string ->
        port:int ->
          callback:(err:ErrnoException.t or_null ->
                      hostname:string -> service:string -> unit)
            -> unit)
      =
      fun ~address:(x97 : string) ->
        fun ~port:(x98 : int) ->
          fun
            ~callback:(x99 :
                        err:ErrnoException.t or_null ->
                          hostname:string -> service:string -> unit)
            ->
            ignore
              (Ojs.call Import.dns "lookupService"
                 [|(Ojs.string_to_js x97);(Ojs.int_to_js x98);(Ojs.fun_to_js
                                                                 3
                                                                 (fun
                                                                    (x100 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x102 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x103 :
                                                                    Ojs.t) ->
                                                                    x99
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x100)
                                                                    ~hostname:(
                                                                    Ojs.string_of_js
                                                                    x102)
                                                                    ~service:(
                                                                    Ojs.string_of_js
                                                                    x103)))|])
    module LookupService =
      struct
        let (__promisify__ :
          address:string -> port:int -> AnonymousInterface0.t Promise.t) =
          fun ~address:(x104 : string) ->
            fun ~port:(x105 : int) ->
              Promise.t_of_js AnonymousInterface0.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.dns "lookupService")
                   "__promisify__"
                   [|(Ojs.string_to_js x104);(Ojs.int_to_js x105)|])
      end
    module ResolveOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x108 : Ojs.t) -> x108
        and t_to_js : t -> Ojs.t = fun (x107 : Ojs.t) -> x107
        let (get_ttl : t -> bool) =
          fun (x109 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x109) "ttl")
        let (set_ttl : t -> bool -> unit) =
          fun (x110 : t) ->
            fun (x111 : bool) ->
              Ojs.set_prop_ascii (t_to_js x110) "ttl" (Ojs.bool_to_js x111)
      end
    module ResolveWithTtlOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x113 : Ojs.t) -> x113
        and t_to_js : t -> Ojs.t = fun (x112 : Ojs.t) -> x112
        let (get_ttl : t -> [ `L_b_true ]) =
          fun (x114 : t) ->
            let x115 = Ojs.get_prop_ascii (t_to_js x114) "ttl" in
            match Ojs.bool_of_js x115 with
            | true -> `L_b_true
            | _ -> assert false
        let (set_ttl : t -> [ `L_b_true ] -> unit) =
          fun (x116 : t) ->
            fun (x117 : [ `L_b_true ]) ->
              Ojs.set_prop_ascii (t_to_js x116) "ttl"
                (match x117 with | `L_b_true -> Ojs.string_to_js "LBTrue")
        let (cast : t -> ResolveOptions.t) =
          fun (x118 : t) -> ResolveOptions.t_of_js (t_to_js x118)
      end
    module RecordWithTtl =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x120 : Ojs.t) -> x120
        and t_to_js : t -> Ojs.t = fun (x119 : Ojs.t) -> x119
        let (get_address : t -> string) =
          fun (x121 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x121) "address")
        let (set_address : t -> string -> unit) =
          fun (x122 : t) ->
            fun (x123 : string) ->
              Ojs.set_prop_ascii (t_to_js x122) "address"
                (Ojs.string_to_js x123)
        let (get_ttl : t -> int) =
          fun (x124 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x124) "ttl")
        let (set_ttl : t -> int -> unit) =
          fun (x125 : t) ->
            fun (x126 : int) ->
              Ojs.set_prop_ascii (t_to_js x125) "ttl" (Ojs.int_to_js x126)
      end
    module AnyRecordWithTtl =
      struct
        type t = [ `U_s0_A of AnyARecord.t  | `U_s1_AAAA of AnyAaaaRecord.t ]
        let rec t_of_js : Ojs.t -> t =
          fun (x130 : Ojs.t) ->
            let x131 = x130 in
            match Ojs.string_of_js (Ojs.get_prop_ascii x131 "type") with
            | "A" -> `U_s0_A (AnyARecord.t_of_js x131)
            | "AAAA" -> `U_s1_AAAA (AnyAaaaRecord.t_of_js x131)
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x127 :
              [ `U_s0_A of AnyARecord.t  | `U_s1_AAAA of AnyAaaaRecord.t ])
            ->
            match x127 with
            | `U_s0_A x128 -> AnyARecord.t_to_js x128
            | `U_s1_AAAA x129 -> AnyAaaaRecord.t_to_js x129
      end
    module AnyARecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x133 : Ojs.t) -> x133
        and t_to_js : t -> Ojs.t = fun (x132 : Ojs.t) -> x132
        let (get_type : t -> [ `A ]) =
          fun (x134 : t) ->
            let x135 = Ojs.get_prop_ascii (t_to_js x134) "type" in
            match Ojs.string_of_js x135 with | "A" -> `A | _ -> assert false
        let (set_type : t -> [ `A ] -> unit) =
          fun (x136 : t) ->
            fun (x137 : [ `A ]) ->
              Ojs.set_prop_ascii (t_to_js x136) "type"
                (match x137 with | `A -> Ojs.string_to_js "A")
        let (cast : t -> RecordWithTtl.t) =
          fun (x138 : t) -> RecordWithTtl.t_of_js (t_to_js x138)
      end
    module AnyAaaaRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x140 : Ojs.t) -> x140
        and t_to_js : t -> Ojs.t = fun (x139 : Ojs.t) -> x139
        let (get_type : t -> [ `AAAA ]) =
          fun (x141 : t) ->
            let x142 = Ojs.get_prop_ascii (t_to_js x141) "type" in
            match Ojs.string_of_js x142 with
            | "AAAA" -> `AAAA
            | _ -> assert false
        let (set_type : t -> [ `AAAA ] -> unit) =
          fun (x143 : t) ->
            fun (x144 : [ `AAAA ]) ->
              Ojs.set_prop_ascii (t_to_js x143) "type"
                (match x144 with | `AAAA -> Ojs.string_to_js "AAAA")
        let (cast : t -> RecordWithTtl.t) =
          fun (x145 : t) -> RecordWithTtl.t_of_js (t_to_js x145)
      end
    module MxRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x147 : Ojs.t) -> x147
        and t_to_js : t -> Ojs.t = fun (x146 : Ojs.t) -> x146
        let (get_priority : t -> int) =
          fun (x148 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x148) "priority")
        let (set_priority : t -> int -> unit) =
          fun (x149 : t) ->
            fun (x150 : int) ->
              Ojs.set_prop_ascii (t_to_js x149) "priority"
                (Ojs.int_to_js x150)
        let (get_exchange : t -> string) =
          fun (x151 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x151) "exchange")
        let (set_exchange : t -> string -> unit) =
          fun (x152 : t) ->
            fun (x153 : string) ->
              Ojs.set_prop_ascii (t_to_js x152) "exchange"
                (Ojs.string_to_js x153)
      end
    module AnyMxRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x155 : Ojs.t) -> x155
        and t_to_js : t -> Ojs.t = fun (x154 : Ojs.t) -> x154
        let (get_type : t -> [ `MX ]) =
          fun (x156 : t) ->
            let x157 = Ojs.get_prop_ascii (t_to_js x156) "type" in
            match Ojs.string_of_js x157 with
            | "MX" -> `MX
            | _ -> assert false
        let (set_type : t -> [ `MX ] -> unit) =
          fun (x158 : t) ->
            fun (x159 : [ `MX ]) ->
              Ojs.set_prop_ascii (t_to_js x158) "type"
                (match x159 with | `MX -> Ojs.string_to_js "MX")
        let (cast : t -> MxRecord.t) =
          fun (x160 : t) -> MxRecord.t_of_js (t_to_js x160)
      end
    module NaptrRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x162 : Ojs.t) -> x162
        and t_to_js : t -> Ojs.t = fun (x161 : Ojs.t) -> x161
        let (get_flags : t -> string) =
          fun (x163 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x163) "flags")
        let (set_flags : t -> string -> unit) =
          fun (x164 : t) ->
            fun (x165 : string) ->
              Ojs.set_prop_ascii (t_to_js x164) "flags"
                (Ojs.string_to_js x165)
        let (get_service : t -> string) =
          fun (x166 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x166) "service")
        let (set_service : t -> string -> unit) =
          fun (x167 : t) ->
            fun (x168 : string) ->
              Ojs.set_prop_ascii (t_to_js x167) "service"
                (Ojs.string_to_js x168)
        let (get_regexp : t -> string) =
          fun (x169 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x169) "regexp")
        let (set_regexp : t -> string -> unit) =
          fun (x170 : t) ->
            fun (x171 : string) ->
              Ojs.set_prop_ascii (t_to_js x170) "regexp"
                (Ojs.string_to_js x171)
        let (get_replacement : t -> string) =
          fun (x172 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x172) "replacement")
        let (set_replacement : t -> string -> unit) =
          fun (x173 : t) ->
            fun (x174 : string) ->
              Ojs.set_prop_ascii (t_to_js x173) "replacement"
                (Ojs.string_to_js x174)
        let (get_order : t -> int) =
          fun (x175 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x175) "order")
        let (set_order : t -> int -> unit) =
          fun (x176 : t) ->
            fun (x177 : int) ->
              Ojs.set_prop_ascii (t_to_js x176) "order" (Ojs.int_to_js x177)
        let (get_preference : t -> int) =
          fun (x178 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x178) "preference")
        let (set_preference : t -> int -> unit) =
          fun (x179 : t) ->
            fun (x180 : int) ->
              Ojs.set_prop_ascii (t_to_js x179) "preference"
                (Ojs.int_to_js x180)
      end
    module AnyNaptrRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x182 : Ojs.t) -> x182
        and t_to_js : t -> Ojs.t = fun (x181 : Ojs.t) -> x181
        let (get_type : t -> [ `NAPTR ]) =
          fun (x183 : t) ->
            let x184 = Ojs.get_prop_ascii (t_to_js x183) "type" in
            match Ojs.string_of_js x184 with
            | "NAPTR" -> `NAPTR
            | _ -> assert false
        let (set_type : t -> [ `NAPTR ] -> unit) =
          fun (x185 : t) ->
            fun (x186 : [ `NAPTR ]) ->
              Ojs.set_prop_ascii (t_to_js x185) "type"
                (match x186 with | `NAPTR -> Ojs.string_to_js "NAPTR")
        let (cast : t -> NaptrRecord.t) =
          fun (x187 : t) -> NaptrRecord.t_of_js (t_to_js x187)
      end
    module SoaRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x189 : Ojs.t) -> x189
        and t_to_js : t -> Ojs.t = fun (x188 : Ojs.t) -> x188
        let (get_nsname : t -> string) =
          fun (x190 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x190) "nsname")
        let (set_nsname : t -> string -> unit) =
          fun (x191 : t) ->
            fun (x192 : string) ->
              Ojs.set_prop_ascii (t_to_js x191) "nsname"
                (Ojs.string_to_js x192)
        let (get_hostmaster : t -> string) =
          fun (x193 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x193) "hostmaster")
        let (set_hostmaster : t -> string -> unit) =
          fun (x194 : t) ->
            fun (x195 : string) ->
              Ojs.set_prop_ascii (t_to_js x194) "hostmaster"
                (Ojs.string_to_js x195)
        let (get_serial : t -> int) =
          fun (x196 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x196) "serial")
        let (set_serial : t -> int -> unit) =
          fun (x197 : t) ->
            fun (x198 : int) ->
              Ojs.set_prop_ascii (t_to_js x197) "serial" (Ojs.int_to_js x198)
        let (get_refresh : t -> int) =
          fun (x199 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x199) "refresh")
        let (set_refresh : t -> int -> unit) =
          fun (x200 : t) ->
            fun (x201 : int) ->
              Ojs.set_prop_ascii (t_to_js x200) "refresh"
                (Ojs.int_to_js x201)
        let (get_retry : t -> int) =
          fun (x202 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x202) "retry")
        let (set_retry : t -> int -> unit) =
          fun (x203 : t) ->
            fun (x204 : int) ->
              Ojs.set_prop_ascii (t_to_js x203) "retry" (Ojs.int_to_js x204)
        let (get_expire : t -> int) =
          fun (x205 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x205) "expire")
        let (set_expire : t -> int -> unit) =
          fun (x206 : t) ->
            fun (x207 : int) ->
              Ojs.set_prop_ascii (t_to_js x206) "expire" (Ojs.int_to_js x207)
        let (get_minttl : t -> int) =
          fun (x208 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x208) "minttl")
        let (set_minttl : t -> int -> unit) =
          fun (x209 : t) ->
            fun (x210 : int) ->
              Ojs.set_prop_ascii (t_to_js x209) "minttl" (Ojs.int_to_js x210)
      end
    module AnySoaRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x212 : Ojs.t) -> x212
        and t_to_js : t -> Ojs.t = fun (x211 : Ojs.t) -> x211
        let (get_type : t -> [ `SOA ]) =
          fun (x213 : t) ->
            let x214 = Ojs.get_prop_ascii (t_to_js x213) "type" in
            match Ojs.string_of_js x214 with
            | "SOA" -> `SOA
            | _ -> assert false
        let (set_type : t -> [ `SOA ] -> unit) =
          fun (x215 : t) ->
            fun (x216 : [ `SOA ]) ->
              Ojs.set_prop_ascii (t_to_js x215) "type"
                (match x216 with | `SOA -> Ojs.string_to_js "SOA")
        let (cast : t -> SoaRecord.t) =
          fun (x217 : t) -> SoaRecord.t_of_js (t_to_js x217)
      end
    module SrvRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x219 : Ojs.t) -> x219
        and t_to_js : t -> Ojs.t = fun (x218 : Ojs.t) -> x218
        let (get_priority : t -> int) =
          fun (x220 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x220) "priority")
        let (set_priority : t -> int -> unit) =
          fun (x221 : t) ->
            fun (x222 : int) ->
              Ojs.set_prop_ascii (t_to_js x221) "priority"
                (Ojs.int_to_js x222)
        let (get_weight : t -> int) =
          fun (x223 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x223) "weight")
        let (set_weight : t -> int -> unit) =
          fun (x224 : t) ->
            fun (x225 : int) ->
              Ojs.set_prop_ascii (t_to_js x224) "weight" (Ojs.int_to_js x225)
        let (get_port : t -> int) =
          fun (x226 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x226) "port")
        let (set_port : t -> int -> unit) =
          fun (x227 : t) ->
            fun (x228 : int) ->
              Ojs.set_prop_ascii (t_to_js x227) "port" (Ojs.int_to_js x228)
        let (get_name : t -> string) =
          fun (x229 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x229) "name")
        let (set_name : t -> string -> unit) =
          fun (x230 : t) ->
            fun (x231 : string) ->
              Ojs.set_prop_ascii (t_to_js x230) "name"
                (Ojs.string_to_js x231)
      end
    module AnySrvRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x233 : Ojs.t) -> x233
        and t_to_js : t -> Ojs.t = fun (x232 : Ojs.t) -> x232
        let (get_type : t -> [ `SRV ]) =
          fun (x234 : t) ->
            let x235 = Ojs.get_prop_ascii (t_to_js x234) "type" in
            match Ojs.string_of_js x235 with
            | "SRV" -> `SRV
            | _ -> assert false
        let (set_type : t -> [ `SRV ] -> unit) =
          fun (x236 : t) ->
            fun (x237 : [ `SRV ]) ->
              Ojs.set_prop_ascii (t_to_js x236) "type"
                (match x237 with | `SRV -> Ojs.string_to_js "SRV")
        let (cast : t -> SrvRecord.t) =
          fun (x238 : t) -> SrvRecord.t_of_js (t_to_js x238)
      end
    module AnyTxtRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x240 : Ojs.t) -> x240
        and t_to_js : t -> Ojs.t = fun (x239 : Ojs.t) -> x239
        let (get_type : t -> [ `TXT ]) =
          fun (x241 : t) ->
            let x242 = Ojs.get_prop_ascii (t_to_js x241) "type" in
            match Ojs.string_of_js x242 with
            | "TXT" -> `TXT
            | _ -> assert false
        let (set_type : t -> [ `TXT ] -> unit) =
          fun (x243 : t) ->
            fun (x244 : [ `TXT ]) ->
              Ojs.set_prop_ascii (t_to_js x243) "type"
                (match x244 with | `TXT -> Ojs.string_to_js "TXT")
        let (get_entries : t -> string list) =
          fun (x245 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x245) "entries")
        let (set_entries : t -> string list -> unit) =
          fun (x247 : t) ->
            fun (x248 : string list) ->
              Ojs.set_prop_ascii (t_to_js x247) "entries"
                (Ojs.list_to_js Ojs.string_to_js x248)
      end
    module AnyNsRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x251 : Ojs.t) -> x251
        and t_to_js : t -> Ojs.t = fun (x250 : Ojs.t) -> x250
        let (get_type : t -> [ `NS ]) =
          fun (x252 : t) ->
            let x253 = Ojs.get_prop_ascii (t_to_js x252) "type" in
            match Ojs.string_of_js x253 with
            | "NS" -> `NS
            | _ -> assert false
        let (set_type : t -> [ `NS ] -> unit) =
          fun (x254 : t) ->
            fun (x255 : [ `NS ]) ->
              Ojs.set_prop_ascii (t_to_js x254) "type"
                (match x255 with | `NS -> Ojs.string_to_js "NS")
        let (get_value : t -> string) =
          fun (x256 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x256) "value")
        let (set_value : t -> string -> unit) =
          fun (x257 : t) ->
            fun (x258 : string) ->
              Ojs.set_prop_ascii (t_to_js x257) "value"
                (Ojs.string_to_js x258)
      end
    module AnyPtrRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x260 : Ojs.t) -> x260
        and t_to_js : t -> Ojs.t = fun (x259 : Ojs.t) -> x259
        let (get_type : t -> [ `PTR ]) =
          fun (x261 : t) ->
            let x262 = Ojs.get_prop_ascii (t_to_js x261) "type" in
            match Ojs.string_of_js x262 with
            | "PTR" -> `PTR
            | _ -> assert false
        let (set_type : t -> [ `PTR ] -> unit) =
          fun (x263 : t) ->
            fun (x264 : [ `PTR ]) ->
              Ojs.set_prop_ascii (t_to_js x263) "type"
                (match x264 with | `PTR -> Ojs.string_to_js "PTR")
        let (get_value : t -> string) =
          fun (x265 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x265) "value")
        let (set_value : t -> string -> unit) =
          fun (x266 : t) ->
            fun (x267 : string) ->
              Ojs.set_prop_ascii (t_to_js x266) "value"
                (Ojs.string_to_js x267)
      end
    module AnyCnameRecord =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x269 : Ojs.t) -> x269
        and t_to_js : t -> Ojs.t = fun (x268 : Ojs.t) -> x268
        let (get_type : t -> [ `CNAME ]) =
          fun (x270 : t) ->
            let x271 = Ojs.get_prop_ascii (t_to_js x270) "type" in
            match Ojs.string_of_js x271 with
            | "CNAME" -> `CNAME
            | _ -> assert false
        let (set_type : t -> [ `CNAME ] -> unit) =
          fun (x272 : t) ->
            fun (x273 : [ `CNAME ]) ->
              Ojs.set_prop_ascii (t_to_js x272) "type"
                (match x273 with | `CNAME -> Ojs.string_to_js "CNAME")
        let (get_value : t -> string) =
          fun (x274 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x274) "value")
        let (set_value : t -> string -> unit) =
          fun (x275 : t) ->
            fun (x276 : string) ->
              Ojs.set_prop_ascii (t_to_js x275) "value"
                (Ojs.string_to_js x276)
      end
    module AnyRecord =
      struct
        type t =
          [ `U_s0_A of AnyARecord.t  | `U_s1_AAAA of AnyAaaaRecord.t 
          | `U_s3_CNAME of AnyCnameRecord.t  | `U_s4_MX of AnyMxRecord.t 
          | `U_s5_NAPTR of AnyNaptrRecord.t  | `U_s6_NS of AnyNsRecord.t 
          | `U_s7_PTR of AnyPtrRecord.t  | `U_s8_SOA of AnySoaRecord.t 
          | `U_s9_SRV of AnySrvRecord.t  | `U_s10_TXT of AnyTxtRecord.t ]
        let rec t_of_js : Ojs.t -> t =
          fun (x288 : Ojs.t) ->
            let x289 = x288 in
            match Ojs.string_of_js (Ojs.get_prop_ascii x289 "type") with
            | "A" -> `U_s0_A (AnyARecord.t_of_js x289)
            | "AAAA" -> `U_s1_AAAA (AnyAaaaRecord.t_of_js x289)
            | "CNAME" -> `U_s3_CNAME (AnyCnameRecord.t_of_js x289)
            | "MX" -> `U_s4_MX (AnyMxRecord.t_of_js x289)
            | "NAPTR" -> `U_s5_NAPTR (AnyNaptrRecord.t_of_js x289)
            | "NS" -> `U_s6_NS (AnyNsRecord.t_of_js x289)
            | "PTR" -> `U_s7_PTR (AnyPtrRecord.t_of_js x289)
            | "SOA" -> `U_s8_SOA (AnySoaRecord.t_of_js x289)
            | "SRV" -> `U_s9_SRV (AnySrvRecord.t_of_js x289)
            | "TXT" -> `U_s10_TXT (AnyTxtRecord.t_of_js x289)
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x277 :
              [ `U_s0_A of AnyARecord.t  | `U_s1_AAAA of AnyAaaaRecord.t 
              | `U_s3_CNAME of AnyCnameRecord.t  | `U_s4_MX of AnyMxRecord.t 
              | `U_s5_NAPTR of AnyNaptrRecord.t  | `U_s6_NS of AnyNsRecord.t 
              | `U_s7_PTR of AnyPtrRecord.t  | `U_s8_SOA of AnySoaRecord.t 
              | `U_s9_SRV of AnySrvRecord.t  | `U_s10_TXT of AnyTxtRecord.t ])
            ->
            match x277 with
            | `U_s0_A x278 -> AnyARecord.t_to_js x278
            | `U_s1_AAAA x279 -> AnyAaaaRecord.t_to_js x279
            | `U_s3_CNAME x280 -> AnyCnameRecord.t_to_js x280
            | `U_s4_MX x281 -> AnyMxRecord.t_to_js x281
            | `U_s5_NAPTR x282 -> AnyNaptrRecord.t_to_js x282
            | `U_s6_NS x283 -> AnyNsRecord.t_to_js x283
            | `U_s7_PTR x284 -> AnyPtrRecord.t_to_js x284
            | `U_s8_SOA x285 -> AnySoaRecord.t_to_js x285
            | `U_s9_SRV x286 -> AnySrvRecord.t_to_js x286
            | `U_s10_TXT x287 -> AnyTxtRecord.t_to_js x287
      end
    let (resolve :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list -> unit)
          -> unit)
      =
      fun ~hostname:(x290 : string) ->
        fun
          ~callback:(x291 :
                      err:ErrnoException.t or_null ->
                        addresses:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolve"
               [|(Ojs.string_to_js x290);(Ojs.fun_to_js 2
                                            (fun (x292 : Ojs.t) ->
                                               fun (x294 : Ojs.t) ->
                                                 x291
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x292)
                                                   ~addresses:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x294)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `A ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:string list -> unit)
            -> unit)
      =
      fun ~hostname:(x296 : string) ->
        fun ~rrtype:(x297 : [ `A ]) ->
          fun
            ~callback:(x298 :
                        err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x296);((match x297 with
                                             | `A -> Ojs.string_to_js "A"));(
                   Ojs.fun_to_js 2
                     (fun (x299 : Ojs.t) ->
                        fun (x301 : Ojs.t) ->
                          x298
                            ~err:(or_null_of_js ErrnoException.t_of_js x299)
                            ~addresses:(Ojs.list_of_js Ojs.string_of_js x301)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `AAAA ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:string list -> unit)
            -> unit)
      =
      fun ~hostname:(x303 : string) ->
        fun ~rrtype:(x304 : [ `AAAA ]) ->
          fun
            ~callback:(x305 :
                        err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x303);((match x304 with
                                             | `AAAA ->
                                                 Ojs.string_to_js "AAAA"));(
                   Ojs.fun_to_js 2
                     (fun (x306 : Ojs.t) ->
                        fun (x308 : Ojs.t) ->
                          x305
                            ~err:(or_null_of_js ErrnoException.t_of_js x306)
                            ~addresses:(Ojs.list_of_js Ojs.string_of_js x308)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `ANY ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:AnyRecord.t list -> unit)
            -> unit)
      =
      fun ~hostname:(x310 : string) ->
        fun ~rrtype:(x311 : [ `ANY ]) ->
          fun
            ~callback:(x312 :
                        err:ErrnoException.t or_null ->
                          addresses:AnyRecord.t list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x310);((match x311 with
                                             | `ANY -> Ojs.string_to_js "ANY"));(
                   Ojs.fun_to_js 2
                     (fun (x313 : Ojs.t) ->
                        fun (x315 : Ojs.t) ->
                          x312
                            ~err:(or_null_of_js ErrnoException.t_of_js x313)
                            ~addresses:(Ojs.list_of_js AnyRecord.t_of_js x315)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `CNAME ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:string list -> unit)
            -> unit)
      =
      fun ~hostname:(x317 : string) ->
        fun ~rrtype:(x318 : [ `CNAME ]) ->
          fun
            ~callback:(x319 :
                        err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x317);((match x318 with
                                             | `CNAME ->
                                                 Ojs.string_to_js "CNAME"));(
                   Ojs.fun_to_js 2
                     (fun (x320 : Ojs.t) ->
                        fun (x322 : Ojs.t) ->
                          x319
                            ~err:(or_null_of_js ErrnoException.t_of_js x320)
                            ~addresses:(Ojs.list_of_js Ojs.string_of_js x322)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `MX ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:MxRecord.t list -> unit)
            -> unit)
      =
      fun ~hostname:(x324 : string) ->
        fun ~rrtype:(x325 : [ `MX ]) ->
          fun
            ~callback:(x326 :
                        err:ErrnoException.t or_null ->
                          addresses:MxRecord.t list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x324);((match x325 with
                                             | `MX -> Ojs.string_to_js "MX"));(
                   Ojs.fun_to_js 2
                     (fun (x327 : Ojs.t) ->
                        fun (x329 : Ojs.t) ->
                          x326
                            ~err:(or_null_of_js ErrnoException.t_of_js x327)
                            ~addresses:(Ojs.list_of_js MxRecord.t_of_js x329)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `NAPTR ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:NaptrRecord.t list -> unit)
            -> unit)
      =
      fun ~hostname:(x331 : string) ->
        fun ~rrtype:(x332 : [ `NAPTR ]) ->
          fun
            ~callback:(x333 :
                        err:ErrnoException.t or_null ->
                          addresses:NaptrRecord.t list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x331);((match x332 with
                                             | `NAPTR ->
                                                 Ojs.string_to_js "NAPTR"));(
                   Ojs.fun_to_js 2
                     (fun (x334 : Ojs.t) ->
                        fun (x336 : Ojs.t) ->
                          x333
                            ~err:(or_null_of_js ErrnoException.t_of_js x334)
                            ~addresses:(Ojs.list_of_js NaptrRecord.t_of_js
                                          x336)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `NS ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:string list -> unit)
            -> unit)
      =
      fun ~hostname:(x338 : string) ->
        fun ~rrtype:(x339 : [ `NS ]) ->
          fun
            ~callback:(x340 :
                        err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x338);((match x339 with
                                             | `NS -> Ojs.string_to_js "NS"));(
                   Ojs.fun_to_js 2
                     (fun (x341 : Ojs.t) ->
                        fun (x343 : Ojs.t) ->
                          x340
                            ~err:(or_null_of_js ErrnoException.t_of_js x341)
                            ~addresses:(Ojs.list_of_js Ojs.string_of_js x343)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `PTR ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:string list -> unit)
            -> unit)
      =
      fun ~hostname:(x345 : string) ->
        fun ~rrtype:(x346 : [ `PTR ]) ->
          fun
            ~callback:(x347 :
                        err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x345);((match x346 with
                                             | `PTR -> Ojs.string_to_js "PTR"));(
                   Ojs.fun_to_js 2
                     (fun (x348 : Ojs.t) ->
                        fun (x350 : Ojs.t) ->
                          x347
                            ~err:(or_null_of_js ErrnoException.t_of_js x348)
                            ~addresses:(Ojs.list_of_js Ojs.string_of_js x350)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `SOA ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:SoaRecord.t -> unit)
            -> unit)
      =
      fun ~hostname:(x352 : string) ->
        fun ~rrtype:(x353 : [ `SOA ]) ->
          fun
            ~callback:(x354 :
                        err:ErrnoException.t or_null ->
                          addresses:SoaRecord.t -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x352);((match x353 with
                                             | `SOA -> Ojs.string_to_js "SOA"));(
                   Ojs.fun_to_js 2
                     (fun (x355 : Ojs.t) ->
                        fun (x357 : Ojs.t) ->
                          x354
                            ~err:(or_null_of_js ErrnoException.t_of_js x355)
                            ~addresses:(SoaRecord.t_of_js x357)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `SRV ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:SrvRecord.t list -> unit)
            -> unit)
      =
      fun ~hostname:(x358 : string) ->
        fun ~rrtype:(x359 : [ `SRV ]) ->
          fun
            ~callback:(x360 :
                        err:ErrnoException.t or_null ->
                          addresses:SrvRecord.t list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x358);((match x359 with
                                             | `SRV -> Ojs.string_to_js "SRV"));(
                   Ojs.fun_to_js 2
                     (fun (x361 : Ojs.t) ->
                        fun (x363 : Ojs.t) ->
                          x360
                            ~err:(or_null_of_js ErrnoException.t_of_js x361)
                            ~addresses:(Ojs.list_of_js SrvRecord.t_of_js x363)))|])
    let (resolve :
      hostname:string ->
        rrtype:[ `TXT ] ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:string list list -> unit)
            -> unit)
      =
      fun ~hostname:(x365 : string) ->
        fun ~rrtype:(x366 : [ `TXT ]) ->
          fun
            ~callback:(x367 :
                        err:ErrnoException.t or_null ->
                          addresses:string list list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x365);((match x366 with
                                             | `TXT -> Ojs.string_to_js "TXT"));(
                   Ojs.fun_to_js 2
                     (fun (x368 : Ojs.t) ->
                        fun (x370 : Ojs.t) ->
                          x367
                            ~err:(or_null_of_js ErrnoException.t_of_js x368)
                            ~addresses:(Ojs.list_of_js
                                          (fun (x371 : Ojs.t) ->
                                             Ojs.list_of_js Ojs.string_of_js
                                               x371) x370)))|])
    let (resolve :
      hostname:string ->
        rrtype:string ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:(dns_SoaRecord,
                        ((dns_AnyRecord, MxRecord.t, NaptrRecord.t,
                           SrvRecord.t) union4,
                          string) or_array or_string)
                        or_array -> unit)
            -> unit)
      =
      fun ~hostname:(x373 : string) ->
        fun ~rrtype:(x374 : string) ->
          fun
            ~callback:(x375 :
                        err:ErrnoException.t or_null ->
                          addresses:(dns_SoaRecord,
                            ((dns_AnyRecord, MxRecord.t, NaptrRecord.t,
                               SrvRecord.t) union4,
                              string) or_array or_string)
                            or_array -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve"
                 [|(Ojs.string_to_js x373);(Ojs.string_to_js x374);(Ojs.fun_to_js
                                                                    2
                                                                    (fun
                                                                    (x376 :
                                                                    Ojs.t) ->
                                                                    fun
                                                                    (x378 :
                                                                    Ojs.t) ->
                                                                    x375
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x376)
                                                                    ~addresses:(
                                                                    or_array_of_js
                                                                    dns_SoaRecord_of_js
                                                                    (fun
                                                                    (x380 :
                                                                    Ojs.t) ->
                                                                    or_string_of_js
                                                                    (fun
                                                                    (x381 :
                                                                    Ojs.t) ->
                                                                    or_array_of_js
                                                                    (fun
                                                                    (x382 :
                                                                    Ojs.t) ->
                                                                    union4_of_js
                                                                    dns_AnyRecord_of_js
                                                                    MxRecord.t_of_js
                                                                    NaptrRecord.t_of_js
                                                                    SrvRecord.t_of_js
                                                                    x382)
                                                                    Ojs.string_of_js
                                                                    x381)
                                                                    x380)
                                                                    x378)))|])
    module Resolve =
      struct
        let (__promisify__ :
          hostname:string ->
            ?rrtype:[ `A  | `AAAA  | `CNAME  | `NS  | `PTR ] ->
              unit -> string list Promise.t)
          =
          fun ~hostname:(x388 : string) ->
            fun
              ?rrtype:(x389 :
                        [ `A  | `AAAA  | `CNAME  | `NS  | `PTR ] option)
              ->
              fun () ->
                Promise.t_of_js
                  (fun (x393 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x393)
                  (let x392 = Ojs.get_prop_ascii Import.dns "resolve" in
                   Ojs.call (Ojs.get_prop_ascii x392 "__promisify__") "apply"
                     [|x392;((let x390 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x390 "push"
                                   [|(Ojs.string_to_js x388)|]);
                              (match x389 with
                               | Some x391 ->
                                   ignore
                                     (Ojs.call x390 "push"
                                        [|((match x391 with
                                            | `A -> Ojs.string_to_js "A"
                                            | `AAAA ->
                                                Ojs.string_to_js "AAAA"
                                            | `CNAME ->
                                                Ojs.string_to_js "CNAME"
                                            | `NS -> Ojs.string_to_js "NS"
                                            | `PTR -> Ojs.string_to_js "PTR"))|])
                               | None -> ());
                              x390))|])
        let (__promisify__ :
          hostname:string -> rrtype:[ `ANY ] -> AnyRecord.t list Promise.t) =
          fun ~hostname:(x395 : string) ->
            fun ~rrtype:(x396 : [ `ANY ]) ->
              Promise.t_of_js
                (fun (x397 : Ojs.t) -> Ojs.list_of_js AnyRecord.t_of_js x397)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x395);((match x396 with
                                               | `ANY ->
                                                   Ojs.string_to_js "ANY"))|])
        let (__promisify__ :
          hostname:string -> rrtype:[ `MX ] -> MxRecord.t list Promise.t) =
          fun ~hostname:(x399 : string) ->
            fun ~rrtype:(x400 : [ `MX ]) ->
              Promise.t_of_js
                (fun (x401 : Ojs.t) -> Ojs.list_of_js MxRecord.t_of_js x401)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x399);((match x400 with
                                               | `MX -> Ojs.string_to_js "MX"))|])
        let (__promisify__ :
          hostname:string ->
            rrtype:[ `NAPTR ] -> NaptrRecord.t list Promise.t)
          =
          fun ~hostname:(x403 : string) ->
            fun ~rrtype:(x404 : [ `NAPTR ]) ->
              Promise.t_of_js
                (fun (x405 : Ojs.t) ->
                   Ojs.list_of_js NaptrRecord.t_of_js x405)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x403);((match x404 with
                                               | `NAPTR ->
                                                   Ojs.string_to_js "NAPTR"))|])
        let (__promisify__ :
          hostname:string -> rrtype:[ `SOA ] -> SoaRecord.t Promise.t) =
          fun ~hostname:(x407 : string) ->
            fun ~rrtype:(x408 : [ `SOA ]) ->
              Promise.t_of_js SoaRecord.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x407);((match x408 with
                                               | `SOA ->
                                                   Ojs.string_to_js "SOA"))|])
        let (__promisify__ :
          hostname:string -> rrtype:[ `SRV ] -> SrvRecord.t list Promise.t) =
          fun ~hostname:(x410 : string) ->
            fun ~rrtype:(x411 : [ `SRV ]) ->
              Promise.t_of_js
                (fun (x412 : Ojs.t) -> Ojs.list_of_js SrvRecord.t_of_js x412)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x410);((match x411 with
                                               | `SRV ->
                                                   Ojs.string_to_js "SRV"))|])
        let (__promisify__ :
          hostname:string -> rrtype:[ `TXT ] -> string list list Promise.t) =
          fun ~hostname:(x414 : string) ->
            fun ~rrtype:(x415 : [ `TXT ]) ->
              Promise.t_of_js
                (fun (x416 : Ojs.t) ->
                   Ojs.list_of_js
                     (fun (x417 : Ojs.t) ->
                        Ojs.list_of_js Ojs.string_of_js x417) x416)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x414);((match x415 with
                                               | `TXT ->
                                                   Ojs.string_to_js "TXT"))|])
        let (__promisify__ :
          hostname:string ->
            rrtype:string ->
              (dns_SoaRecord,
                ((AnyRecord.t, MxRecord.t, NaptrRecord.t, SrvRecord.t) union4,
                  string) or_array or_string)
                or_array Promise.t)
          =
          fun ~hostname:(x419 : string) ->
            fun ~rrtype:(x420 : string) ->
              Promise.t_of_js
                (fun (x421 : Ojs.t) ->
                   or_array_of_js dns_SoaRecord_of_js
                     (fun (x423 : Ojs.t) ->
                        or_string_of_js
                          (fun (x424 : Ojs.t) ->
                             or_array_of_js
                               (fun (x425 : Ojs.t) ->
                                  union4_of_js AnyRecord.t_of_js
                                    MxRecord.t_of_js NaptrRecord.t_of_js
                                    SrvRecord.t_of_js x425) Ojs.string_of_js
                               x424) x423) x421)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve")
                   "__promisify__"
                   [|(Ojs.string_to_js x419);(Ojs.string_to_js x420)|])
      end
    let (resolve4 :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list -> unit)
          -> unit)
      =
      fun ~hostname:(x431 : string) ->
        fun
          ~callback:(x432 :
                      err:ErrnoException.t or_null ->
                        addresses:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolve4"
               [|(Ojs.string_to_js x431);(Ojs.fun_to_js 2
                                            (fun (x433 : Ojs.t) ->
                                               fun (x435 : Ojs.t) ->
                                                 x432
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x433)
                                                   ~addresses:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x435)))|])
    let (resolve4 :
      hostname:string ->
        options:ResolveWithTtlOptions.t ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:RecordWithTtl.t list -> unit)
            -> unit)
      =
      fun ~hostname:(x437 : string) ->
        fun ~options:(x438 : ResolveWithTtlOptions.t) ->
          fun
            ~callback:(x439 :
                        err:ErrnoException.t or_null ->
                          addresses:RecordWithTtl.t list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve4"
                 [|(Ojs.string_to_js x437);(ResolveWithTtlOptions.t_to_js
                                              x438);(Ojs.fun_to_js 2
                                                       (fun (x440 : Ojs.t) ->
                                                          fun (x442 : Ojs.t)
                                                            ->
                                                            x439
                                                              ~err:(or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x440)
                                                              ~addresses:(
                                                              Ojs.list_of_js
                                                                RecordWithTtl.t_of_js
                                                                x442)))|])
    let (resolve4 :
      hostname:string ->
        options:ResolveOptions.t ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:RecordWithTtl.t or_string list -> unit)
            -> unit)
      =
      fun ~hostname:(x444 : string) ->
        fun ~options:(x445 : ResolveOptions.t) ->
          fun
            ~callback:(x446 :
                        err:ErrnoException.t or_null ->
                          addresses:RecordWithTtl.t or_string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve4"
                 [|(Ojs.string_to_js x444);(ResolveOptions.t_to_js x445);(
                   Ojs.fun_to_js 2
                     (fun (x447 : Ojs.t) ->
                        fun (x449 : Ojs.t) ->
                          x446
                            ~err:(or_null_of_js ErrnoException.t_of_js x447)
                            ~addresses:(Ojs.list_of_js
                                          (fun (x450 : Ojs.t) ->
                                             or_string_of_js
                                               RecordWithTtl.t_of_js x450)
                                          x449)))|])
    module Resolve4 =
      struct
        let (__promisify__ : hostname:string -> string list Promise.t) =
          fun ~hostname:(x452 : string) ->
            Promise.t_of_js
              (fun (x453 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x453)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve4")
                 "__promisify__" [|(Ojs.string_to_js x452)|])
        let (__promisify__ :
          hostname:string ->
            options:ResolveWithTtlOptions.t -> RecordWithTtl.t list Promise.t)
          =
          fun ~hostname:(x455 : string) ->
            fun ~options:(x456 : ResolveWithTtlOptions.t) ->
              Promise.t_of_js
                (fun (x457 : Ojs.t) ->
                   Ojs.list_of_js RecordWithTtl.t_of_js x457)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve4")
                   "__promisify__"
                   [|(Ojs.string_to_js x455);(ResolveWithTtlOptions.t_to_js
                                                x456)|])
        let (__promisify__ :
          hostname:string ->
            ?options:ResolveOptions.t ->
              unit -> RecordWithTtl.t or_string list Promise.t)
          =
          fun ~hostname:(x459 : string) ->
            fun ?options:(x460 : ResolveOptions.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x464 : Ojs.t) ->
                     Ojs.list_of_js
                       (fun (x465 : Ojs.t) ->
                          or_string_of_js RecordWithTtl.t_of_js x465) x464)
                  (let x463 = Ojs.get_prop_ascii Import.dns "resolve4" in
                   Ojs.call (Ojs.get_prop_ascii x463 "__promisify__") "apply"
                     [|x463;((let x461 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x461 "push"
                                   [|(Ojs.string_to_js x459)|]);
                              (match x460 with
                               | Some x462 ->
                                   ignore
                                     (Ojs.call x461 "push"
                                        [|(ResolveOptions.t_to_js x462)|])
                               | None -> ());
                              x461))|])
      end
    let (resolve6 :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list -> unit)
          -> unit)
      =
      fun ~hostname:(x467 : string) ->
        fun
          ~callback:(x468 :
                      err:ErrnoException.t or_null ->
                        addresses:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolve6"
               [|(Ojs.string_to_js x467);(Ojs.fun_to_js 2
                                            (fun (x469 : Ojs.t) ->
                                               fun (x471 : Ojs.t) ->
                                                 x468
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x469)
                                                   ~addresses:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x471)))|])
    let (resolve6 :
      hostname:string ->
        options:ResolveWithTtlOptions.t ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:RecordWithTtl.t list -> unit)
            -> unit)
      =
      fun ~hostname:(x473 : string) ->
        fun ~options:(x474 : ResolveWithTtlOptions.t) ->
          fun
            ~callback:(x475 :
                        err:ErrnoException.t or_null ->
                          addresses:RecordWithTtl.t list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve6"
                 [|(Ojs.string_to_js x473);(ResolveWithTtlOptions.t_to_js
                                              x474);(Ojs.fun_to_js 2
                                                       (fun (x476 : Ojs.t) ->
                                                          fun (x478 : Ojs.t)
                                                            ->
                                                            x475
                                                              ~err:(or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x476)
                                                              ~addresses:(
                                                              Ojs.list_of_js
                                                                RecordWithTtl.t_of_js
                                                                x478)))|])
    let (resolve6 :
      hostname:string ->
        options:ResolveOptions.t ->
          callback:(err:ErrnoException.t or_null ->
                      addresses:RecordWithTtl.t or_string list -> unit)
            -> unit)
      =
      fun ~hostname:(x480 : string) ->
        fun ~options:(x481 : ResolveOptions.t) ->
          fun
            ~callback:(x482 :
                        err:ErrnoException.t or_null ->
                          addresses:RecordWithTtl.t or_string list -> unit)
            ->
            ignore
              (Ojs.call Import.dns "resolve6"
                 [|(Ojs.string_to_js x480);(ResolveOptions.t_to_js x481);(
                   Ojs.fun_to_js 2
                     (fun (x483 : Ojs.t) ->
                        fun (x485 : Ojs.t) ->
                          x482
                            ~err:(or_null_of_js ErrnoException.t_of_js x483)
                            ~addresses:(Ojs.list_of_js
                                          (fun (x486 : Ojs.t) ->
                                             or_string_of_js
                                               RecordWithTtl.t_of_js x486)
                                          x485)))|])
    module Resolve6 =
      struct
        let (__promisify__ : hostname:string -> string list Promise.t) =
          fun ~hostname:(x488 : string) ->
            Promise.t_of_js
              (fun (x489 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x489)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve6")
                 "__promisify__" [|(Ojs.string_to_js x488)|])
        let (__promisify__ :
          hostname:string ->
            options:ResolveWithTtlOptions.t -> RecordWithTtl.t list Promise.t)
          =
          fun ~hostname:(x491 : string) ->
            fun ~options:(x492 : ResolveWithTtlOptions.t) ->
              Promise.t_of_js
                (fun (x493 : Ojs.t) ->
                   Ojs.list_of_js RecordWithTtl.t_of_js x493)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "resolve6")
                   "__promisify__"
                   [|(Ojs.string_to_js x491);(ResolveWithTtlOptions.t_to_js
                                                x492)|])
        let (__promisify__ :
          hostname:string ->
            ?options:ResolveOptions.t ->
              unit -> RecordWithTtl.t or_string list Promise.t)
          =
          fun ~hostname:(x495 : string) ->
            fun ?options:(x496 : ResolveOptions.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x500 : Ojs.t) ->
                     Ojs.list_of_js
                       (fun (x501 : Ojs.t) ->
                          or_string_of_js RecordWithTtl.t_of_js x501) x500)
                  (let x499 = Ojs.get_prop_ascii Import.dns "resolve6" in
                   Ojs.call (Ojs.get_prop_ascii x499 "__promisify__") "apply"
                     [|x499;((let x497 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x497 "push"
                                   [|(Ojs.string_to_js x495)|]);
                              (match x496 with
                               | Some x498 ->
                                   ignore
                                     (Ojs.call x497 "push"
                                        [|(ResolveOptions.t_to_js x498)|])
                               | None -> ());
                              x497))|])
      end
    let (resolve_cname :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list -> unit)
          -> unit)
      =
      fun ~hostname:(x503 : string) ->
        fun
          ~callback:(x504 :
                      err:ErrnoException.t or_null ->
                        addresses:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveCname"
               [|(Ojs.string_to_js x503);(Ojs.fun_to_js 2
                                            (fun (x505 : Ojs.t) ->
                                               fun (x507 : Ojs.t) ->
                                                 x504
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x505)
                                                   ~addresses:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x507)))|])
    module ResolveCname =
      struct
        let (__promisify__ : hostname:string -> string list Promise.t) =
          fun ~hostname:(x509 : string) ->
            Promise.t_of_js
              (fun (x510 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x510)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveCname")
                 "__promisify__" [|(Ojs.string_to_js x509)|])
      end
    let (resolve_mx :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:MxRecord.t list -> unit)
          -> unit)
      =
      fun ~hostname:(x512 : string) ->
        fun
          ~callback:(x513 :
                      err:ErrnoException.t or_null ->
                        addresses:MxRecord.t list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveMx"
               [|(Ojs.string_to_js x512);(Ojs.fun_to_js 2
                                            (fun (x514 : Ojs.t) ->
                                               fun (x516 : Ojs.t) ->
                                                 x513
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x514)
                                                   ~addresses:(Ojs.list_of_js
                                                                 MxRecord.t_of_js
                                                                 x516)))|])
    module ResolveMx =
      struct
        let (__promisify__ : hostname:string -> MxRecord.t list Promise.t) =
          fun ~hostname:(x518 : string) ->
            Promise.t_of_js
              (fun (x519 : Ojs.t) -> Ojs.list_of_js MxRecord.t_of_js x519)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveMx")
                 "__promisify__" [|(Ojs.string_to_js x518)|])
      end
    let (resolve_naptr :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:NaptrRecord.t list -> unit)
          -> unit)
      =
      fun ~hostname:(x521 : string) ->
        fun
          ~callback:(x522 :
                      err:ErrnoException.t or_null ->
                        addresses:NaptrRecord.t list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveNaptr"
               [|(Ojs.string_to_js x521);(Ojs.fun_to_js 2
                                            (fun (x523 : Ojs.t) ->
                                               fun (x525 : Ojs.t) ->
                                                 x522
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x523)
                                                   ~addresses:(Ojs.list_of_js
                                                                 NaptrRecord.t_of_js
                                                                 x525)))|])
    module ResolveNaptr =
      struct
        let (__promisify__ : hostname:string -> NaptrRecord.t list Promise.t)
          =
          fun ~hostname:(x527 : string) ->
            Promise.t_of_js
              (fun (x528 : Ojs.t) -> Ojs.list_of_js NaptrRecord.t_of_js x528)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveNaptr")
                 "__promisify__" [|(Ojs.string_to_js x527)|])
      end
    let (resolve_ns :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list -> unit)
          -> unit)
      =
      fun ~hostname:(x530 : string) ->
        fun
          ~callback:(x531 :
                      err:ErrnoException.t or_null ->
                        addresses:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveNs"
               [|(Ojs.string_to_js x530);(Ojs.fun_to_js 2
                                            (fun (x532 : Ojs.t) ->
                                               fun (x534 : Ojs.t) ->
                                                 x531
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x532)
                                                   ~addresses:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x534)))|])
    module ResolveNs =
      struct
        let (__promisify__ : hostname:string -> string list Promise.t) =
          fun ~hostname:(x536 : string) ->
            Promise.t_of_js
              (fun (x537 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x537)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveNs")
                 "__promisify__" [|(Ojs.string_to_js x536)|])
      end
    let (resolve_ptr :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list -> unit)
          -> unit)
      =
      fun ~hostname:(x539 : string) ->
        fun
          ~callback:(x540 :
                      err:ErrnoException.t or_null ->
                        addresses:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolvePtr"
               [|(Ojs.string_to_js x539);(Ojs.fun_to_js 2
                                            (fun (x541 : Ojs.t) ->
                                               fun (x543 : Ojs.t) ->
                                                 x540
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x541)
                                                   ~addresses:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x543)))|])
    module ResolvePtr =
      struct
        let (__promisify__ : hostname:string -> string list Promise.t) =
          fun ~hostname:(x545 : string) ->
            Promise.t_of_js
              (fun (x546 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x546)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolvePtr")
                 "__promisify__" [|(Ojs.string_to_js x545)|])
      end
    let (resolve_soa :
      hostname:string ->
        callback:(err:ErrnoException.t or_null -> address:SoaRecord.t -> unit)
          -> unit)
      =
      fun ~hostname:(x548 : string) ->
        fun
          ~callback:(x549 :
                      err:ErrnoException.t or_null ->
                        address:SoaRecord.t -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveSoa"
               [|(Ojs.string_to_js x548);(Ojs.fun_to_js 2
                                            (fun (x550 : Ojs.t) ->
                                               fun (x552 : Ojs.t) ->
                                                 x549
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x550)
                                                   ~address:(SoaRecord.t_of_js
                                                               x552)))|])
    module ResolveSoa =
      struct
        let (__promisify__ : hostname:string -> SoaRecord.t Promise.t) =
          fun ~hostname:(x553 : string) ->
            Promise.t_of_js SoaRecord.t_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveSoa")
                 "__promisify__" [|(Ojs.string_to_js x553)|])
      end
    let (resolve_srv :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:SrvRecord.t list -> unit)
          -> unit)
      =
      fun ~hostname:(x555 : string) ->
        fun
          ~callback:(x556 :
                      err:ErrnoException.t or_null ->
                        addresses:SrvRecord.t list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveSrv"
               [|(Ojs.string_to_js x555);(Ojs.fun_to_js 2
                                            (fun (x557 : Ojs.t) ->
                                               fun (x559 : Ojs.t) ->
                                                 x556
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x557)
                                                   ~addresses:(Ojs.list_of_js
                                                                 SrvRecord.t_of_js
                                                                 x559)))|])
    module ResolveSrv =
      struct
        let (__promisify__ : hostname:string -> SrvRecord.t list Promise.t) =
          fun ~hostname:(x561 : string) ->
            Promise.t_of_js
              (fun (x562 : Ojs.t) -> Ojs.list_of_js SrvRecord.t_of_js x562)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveSrv")
                 "__promisify__" [|(Ojs.string_to_js x561)|])
      end
    let (resolve_txt :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:string list list -> unit)
          -> unit)
      =
      fun ~hostname:(x564 : string) ->
        fun
          ~callback:(x565 :
                      err:ErrnoException.t or_null ->
                        addresses:string list list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveTxt"
               [|(Ojs.string_to_js x564);(Ojs.fun_to_js 2
                                            (fun (x566 : Ojs.t) ->
                                               fun (x568 : Ojs.t) ->
                                                 x565
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x566)
                                                   ~addresses:(Ojs.list_of_js
                                                                 (fun
                                                                    (x569 :
                                                                    Ojs.t) ->
                                                                    Ojs.list_of_js
                                                                    Ojs.string_of_js
                                                                    x569)
                                                                 x568)))|])
    module ResolveTxt =
      struct
        let (__promisify__ : hostname:string -> string list list Promise.t) =
          fun ~hostname:(x571 : string) ->
            Promise.t_of_js
              (fun (x572 : Ojs.t) ->
                 Ojs.list_of_js
                   (fun (x573 : Ojs.t) ->
                      Ojs.list_of_js Ojs.string_of_js x573) x572)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveTxt")
                 "__promisify__" [|(Ojs.string_to_js x571)|])
      end
    let (resolve_any :
      hostname:string ->
        callback:(err:ErrnoException.t or_null ->
                    addresses:AnyRecord.t list -> unit)
          -> unit)
      =
      fun ~hostname:(x575 : string) ->
        fun
          ~callback:(x576 :
                      err:ErrnoException.t or_null ->
                        addresses:AnyRecord.t list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "resolveAny"
               [|(Ojs.string_to_js x575);(Ojs.fun_to_js 2
                                            (fun (x577 : Ojs.t) ->
                                               fun (x579 : Ojs.t) ->
                                                 x576
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x577)
                                                   ~addresses:(Ojs.list_of_js
                                                                 AnyRecord.t_of_js
                                                                 x579)))|])
    module ResolveAny =
      struct
        let (__promisify__ : hostname:string -> AnyRecord.t list Promise.t) =
          fun ~hostname:(x581 : string) ->
            Promise.t_of_js
              (fun (x582 : Ojs.t) -> Ojs.list_of_js AnyRecord.t_of_js x582)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "resolveAny")
                 "__promisify__" [|(Ojs.string_to_js x581)|])
      end
    let (reverse :
      ip:string ->
        callback:(err:ErrnoException.t or_null ->
                    hostnames:string list -> unit)
          -> unit)
      =
      fun ~ip:(x584 : string) ->
        fun
          ~callback:(x585 :
                      err:ErrnoException.t or_null ->
                        hostnames:string list -> unit)
          ->
          ignore
            (Ojs.call Import.dns "reverse"
               [|(Ojs.string_to_js x584);(Ojs.fun_to_js 2
                                            (fun (x586 : Ojs.t) ->
                                               fun (x588 : Ojs.t) ->
                                                 x585
                                                   ~err:(or_null_of_js
                                                           ErrnoException.t_of_js
                                                           x586)
                                                   ~hostnames:(Ojs.list_of_js
                                                                 Ojs.string_of_js
                                                                 x588)))|])
    let (set_servers : servers:string list -> unit) =
      fun ~servers:(x590 : string list) ->
        ignore
          (Ojs.call Import.dns "setServers"
             [|(Ojs.list_to_js Ojs.string_to_js x590)|])
    let (get_servers : unit -> string list) =
      fun () ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.call Import.dns "getServers" [||])
    let (n_odata : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "NODATA")
    let (f_ormerr : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "FORMERR")
    let (s_ervfail : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "SERVFAIL")
    let (n_otfound : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "NOTFOUND")
    let (n_otimp : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "NOTIMP")
    let (r_efused : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "REFUSED")
    let (b_adquery : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADQUERY")
    let (b_adname : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADNAME")
    let (b_adfamily : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADFAMILY")
    let (b_adresp : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADRESP")
    let (c_onnrefused : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "CONNREFUSED")
    let (t_imeout : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "TIMEOUT")
    let (e_of : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "EOF")
    let (f_ile : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "FILE")
    let (n_omem : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "NOMEM")
    let (d_estruction : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "DESTRUCTION")
    let (b_adstr : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADSTR")
    let (b_adflags : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADFLAGS")
    let (n_oname : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "NONAME")
    let (b_adhints : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "BADHINTS")
    let (n_otinitialized : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "NOTINITIALIZED")
    let (l_oadiphlpapi : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "LOADIPHLPAPI")
    let (a_ddrgetnetworkparams : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "ADDRGETNETWORKPARAMS")
    let (c_ancelled : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.dns "CANCELLED")
    module ResolverOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x594 : Ojs.t) -> x594
        and t_to_js : t -> Ojs.t = fun (x593 : Ojs.t) -> x593
        let (get_timeout : t -> int) =
          fun (x595 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x595) "timeout")
        let (set_timeout : t -> int -> unit) =
          fun (x596 : t) ->
            fun (x597 : int) ->
              Ojs.set_prop_ascii (t_to_js x596) "timeout"
                (Ojs.int_to_js x597)
      end
    module Resolver =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x599 : Ojs.t) -> x599
        and t_to_js : t -> Ojs.t = fun (x598 : Ojs.t) -> x598
        let (create : ?options:ResolverOptions.t -> unit -> t) =
          fun ?options:(x600 : ResolverOptions.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr (Ojs.get_prop_ascii Import.dns "Resolver")
                   (let x601 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x600 with
                     | Some x602 ->
                         ignore
                           (Ojs.call x601 "push"
                              [|(ResolverOptions.t_to_js x602)|])
                     | None -> ());
                    x601))
        let (cancel : t -> unit) =
          fun (x603 : t) -> ignore (Ojs.call (t_to_js x603) "cancel" [||])
        let (get_servers : t -> string list) =
          fun (x604 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.call (t_to_js x604) "getServers" [||])
        let (resolve :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
                -> unit)
          =
          fun (x612 : t) ->
            fun ~hostname:(x606 : string) ->
              fun
                ~callback:(x607 :
                            err:ErrnoException.t or_null ->
                              addresses:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x612) "resolve"
                     [|(Ojs.string_to_js x606);(Ojs.fun_to_js 2
                                                  (fun (x608 : Ojs.t) ->
                                                     fun (x610 : Ojs.t) ->
                                                       x607
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x608)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x610)))|])
        let (resolve4 :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
                -> unit)
          =
          fun (x619 : t) ->
            fun ~hostname:(x613 : string) ->
              fun
                ~callback:(x614 :
                            err:ErrnoException.t or_null ->
                              addresses:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x619) "resolve4"
                     [|(Ojs.string_to_js x613);(Ojs.fun_to_js 2
                                                  (fun (x615 : Ojs.t) ->
                                                     fun (x617 : Ojs.t) ->
                                                       x614
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x615)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x617)))|])
        let (resolve6 :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
                -> unit)
          =
          fun (x626 : t) ->
            fun ~hostname:(x620 : string) ->
              fun
                ~callback:(x621 :
                            err:ErrnoException.t or_null ->
                              addresses:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x626) "resolve6"
                     [|(Ojs.string_to_js x620);(Ojs.fun_to_js 2
                                                  (fun (x622 : Ojs.t) ->
                                                     fun (x624 : Ojs.t) ->
                                                       x621
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x622)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x624)))|])
        let (resolve_any :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:AnyRecord.t list -> unit)
                -> unit)
          =
          fun (x633 : t) ->
            fun ~hostname:(x627 : string) ->
              fun
                ~callback:(x628 :
                            err:ErrnoException.t or_null ->
                              addresses:AnyRecord.t list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x633) "resolveAny"
                     [|(Ojs.string_to_js x627);(Ojs.fun_to_js 2
                                                  (fun (x629 : Ojs.t) ->
                                                     fun (x631 : Ojs.t) ->
                                                       x628
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x629)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           AnyRecord.t_of_js
                                                           x631)))|])
        let (resolve_cname :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
                -> unit)
          =
          fun (x640 : t) ->
            fun ~hostname:(x634 : string) ->
              fun
                ~callback:(x635 :
                            err:ErrnoException.t or_null ->
                              addresses:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x640) "resolveCname"
                     [|(Ojs.string_to_js x634);(Ojs.fun_to_js 2
                                                  (fun (x636 : Ojs.t) ->
                                                     fun (x638 : Ojs.t) ->
                                                       x635
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x636)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x638)))|])
        let (resolve_mx :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:MxRecord.t list -> unit)
                -> unit)
          =
          fun (x647 : t) ->
            fun ~hostname:(x641 : string) ->
              fun
                ~callback:(x642 :
                            err:ErrnoException.t or_null ->
                              addresses:MxRecord.t list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x647) "resolveMx"
                     [|(Ojs.string_to_js x641);(Ojs.fun_to_js 2
                                                  (fun (x643 : Ojs.t) ->
                                                     fun (x645 : Ojs.t) ->
                                                       x642
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x643)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           MxRecord.t_of_js
                                                           x645)))|])
        let (resolve_naptr :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:NaptrRecord.t list -> unit)
                -> unit)
          =
          fun (x654 : t) ->
            fun ~hostname:(x648 : string) ->
              fun
                ~callback:(x649 :
                            err:ErrnoException.t or_null ->
                              addresses:NaptrRecord.t list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x654) "resolveNaptr"
                     [|(Ojs.string_to_js x648);(Ojs.fun_to_js 2
                                                  (fun (x650 : Ojs.t) ->
                                                     fun (x652 : Ojs.t) ->
                                                       x649
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x650)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           NaptrRecord.t_of_js
                                                           x652)))|])
        let (resolve_ns :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
                -> unit)
          =
          fun (x661 : t) ->
            fun ~hostname:(x655 : string) ->
              fun
                ~callback:(x656 :
                            err:ErrnoException.t or_null ->
                              addresses:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x661) "resolveNs"
                     [|(Ojs.string_to_js x655);(Ojs.fun_to_js 2
                                                  (fun (x657 : Ojs.t) ->
                                                     fun (x659 : Ojs.t) ->
                                                       x656
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x657)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x659)))|])
        let (resolve_ptr :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list -> unit)
                -> unit)
          =
          fun (x668 : t) ->
            fun ~hostname:(x662 : string) ->
              fun
                ~callback:(x663 :
                            err:ErrnoException.t or_null ->
                              addresses:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x668) "resolvePtr"
                     [|(Ojs.string_to_js x662);(Ojs.fun_to_js 2
                                                  (fun (x664 : Ojs.t) ->
                                                     fun (x666 : Ojs.t) ->
                                                       x663
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x664)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x666)))|])
        let (resolve_soa :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          address:SoaRecord.t -> unit)
                -> unit)
          =
          fun (x674 : t) ->
            fun ~hostname:(x669 : string) ->
              fun
                ~callback:(x670 :
                            err:ErrnoException.t or_null ->
                              address:SoaRecord.t -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x674) "resolveSoa"
                     [|(Ojs.string_to_js x669);(Ojs.fun_to_js 2
                                                  (fun (x671 : Ojs.t) ->
                                                     fun (x673 : Ojs.t) ->
                                                       x670
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x671)
                                                         ~address:(SoaRecord.t_of_js
                                                                    x673)))|])
        let (resolve_srv :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:SrvRecord.t list -> unit)
                -> unit)
          =
          fun (x681 : t) ->
            fun ~hostname:(x675 : string) ->
              fun
                ~callback:(x676 :
                            err:ErrnoException.t or_null ->
                              addresses:SrvRecord.t list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x681) "resolveSrv"
                     [|(Ojs.string_to_js x675);(Ojs.fun_to_js 2
                                                  (fun (x677 : Ojs.t) ->
                                                     fun (x679 : Ojs.t) ->
                                                       x676
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x677)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           SrvRecord.t_of_js
                                                           x679)))|])
        let (resolve_txt :
          t ->
            hostname:string ->
              callback:(err:ErrnoException.t or_null ->
                          addresses:string list list -> unit)
                -> unit)
          =
          fun (x689 : t) ->
            fun ~hostname:(x682 : string) ->
              fun
                ~callback:(x683 :
                            err:ErrnoException.t or_null ->
                              addresses:string list list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x689) "resolveTxt"
                     [|(Ojs.string_to_js x682);(Ojs.fun_to_js 2
                                                  (fun (x684 : Ojs.t) ->
                                                     fun (x686 : Ojs.t) ->
                                                       x683
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x684)
                                                         ~addresses:(
                                                         Ojs.list_of_js
                                                           (fun
                                                              (x687 : Ojs.t)
                                                              ->
                                                              Ojs.list_of_js
                                                                Ojs.string_of_js
                                                                x687) x686)))|])
        let (reverse :
          t ->
            ip:string ->
              callback:(err:ErrnoException.t or_null ->
                          hostnames:string list -> unit)
                -> unit)
          =
          fun (x696 : t) ->
            fun ~ip:(x690 : string) ->
              fun
                ~callback:(x691 :
                            err:ErrnoException.t or_null ->
                              hostnames:string list -> unit)
                ->
                ignore
                  (Ojs.call (t_to_js x696) "reverse"
                     [|(Ojs.string_to_js x690);(Ojs.fun_to_js 2
                                                  (fun (x692 : Ojs.t) ->
                                                     fun (x694 : Ojs.t) ->
                                                       x691
                                                         ~err:(or_null_of_js
                                                                 ErrnoException.t_of_js
                                                                 x692)
                                                         ~hostnames:(
                                                         Ojs.list_of_js
                                                           Ojs.string_of_js
                                                           x694)))|])
        let (set_local_address :
          t -> ?ipv4:string -> ?ipv6:string -> unit -> unit) =
          fun (x702 : t) ->
            fun ?ipv4:(x697 : string option) ->
              fun ?ipv6:(x698 : string option) ->
                fun () ->
                  ignore
                    (let x703 = t_to_js x702 in
                     Ojs.call (Ojs.get_prop_ascii x703 "setLocalAddress")
                       "apply"
                       [|x703;((let x699 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x697 with
                                 | Some x701 ->
                                     ignore
                                       (Ojs.call x699 "push"
                                          [|(Ojs.string_to_js x701)|])
                                 | None -> ());
                                (match x698 with
                                 | Some x700 ->
                                     ignore
                                       (Ojs.call x699 "push"
                                          [|(Ojs.string_to_js x700)|])
                                 | None -> ());
                                x699))|])
        let (set_servers : t -> servers:string list -> unit) =
          fun (x706 : t) ->
            fun ~servers:(x704 : string list) ->
              ignore
                (Ojs.call (t_to_js x706) "setServers"
                   [|(Ojs.list_to_js Ojs.string_to_js x704)|])
      end
    module Promises =
      struct
        let (get_servers : unit -> string list) =
          fun () ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "getServers" [||])
        let (lookup :
          hostname:string -> family:int -> LookupAddress.t Promise.t) =
          fun ~hostname:(x708 : string) ->
            fun ~family:(x709 : int) ->
              Promise.t_of_js LookupAddress.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "lookup"
                   [|(Ojs.string_to_js x708);(Ojs.int_to_js x709)|])
        let (lookup :
          hostname:string ->
            options:LookupOneOptions.t -> LookupAddress.t Promise.t)
          =
          fun ~hostname:(x711 : string) ->
            fun ~options:(x712 : LookupOneOptions.t) ->
              Promise.t_of_js LookupAddress.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "lookup"
                   [|(Ojs.string_to_js x711);(LookupOneOptions.t_to_js x712)|])
        let (lookup :
          hostname:string ->
            options:LookupAllOptions.t -> LookupAddress.t list Promise.t)
          =
          fun ~hostname:(x714 : string) ->
            fun ~options:(x715 : LookupAllOptions.t) ->
              Promise.t_of_js
                (fun (x716 : Ojs.t) ->
                   Ojs.list_of_js LookupAddress.t_of_js x716)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "lookup"
                   [|(Ojs.string_to_js x714);(LookupAllOptions.t_to_js x715)|])
        let (lookup :
          hostname:string ->
            options:LookupOptions.t ->
              (LookupAddress.t, LookupAddress.t) or_array Promise.t)
          =
          fun ~hostname:(x718 : string) ->
            fun ~options:(x719 : LookupOptions.t) ->
              Promise.t_of_js
                (fun (x720 : Ojs.t) ->
                   or_array_of_js LookupAddress.t_of_js LookupAddress.t_of_js
                     x720)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "lookup"
                   [|(Ojs.string_to_js x718);(LookupOptions.t_to_js x719)|])
        let (lookup : hostname:string -> LookupAddress.t Promise.t) =
          fun ~hostname:(x723 : string) ->
            Promise.t_of_js LookupAddress.t_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "lookup"
                 [|(Ojs.string_to_js x723)|])
        let (lookup_service :
          address:string -> port:int -> AnonymousInterface0.t Promise.t) =
          fun ~address:(x725 : string) ->
            fun ~port:(x726 : int) ->
              Promise.t_of_js AnonymousInterface0.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "lookupService"
                   [|(Ojs.string_to_js x725);(Ojs.int_to_js x726)|])
        let (resolve : hostname:string -> string list Promise.t) =
          fun ~hostname:(x728 : string) ->
            Promise.t_of_js
              (fun (x729 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x729)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "resolve"
                 [|(Ojs.string_to_js x728)|])
        let (resolve :
          hostname:string -> rrtype:[ `A ] -> string list Promise.t) =
          fun ~hostname:(x731 : string) ->
            fun ~rrtype:(x732 : [ `A ]) ->
              Promise.t_of_js
                (fun (x733 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x733)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x731);((match x732 with
                                               | `A -> Ojs.string_to_js "A"))|])
        let (resolve :
          hostname:string -> rrtype:[ `AAAA ] -> string list Promise.t) =
          fun ~hostname:(x735 : string) ->
            fun ~rrtype:(x736 : [ `AAAA ]) ->
              Promise.t_of_js
                (fun (x737 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x737)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x735);((match x736 with
                                               | `AAAA ->
                                                   Ojs.string_to_js "AAAA"))|])
        let (resolve :
          hostname:string -> rrtype:[ `ANY ] -> AnyRecord.t list Promise.t) =
          fun ~hostname:(x739 : string) ->
            fun ~rrtype:(x740 : [ `ANY ]) ->
              Promise.t_of_js
                (fun (x741 : Ojs.t) -> Ojs.list_of_js AnyRecord.t_of_js x741)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x739);((match x740 with
                                               | `ANY ->
                                                   Ojs.string_to_js "ANY"))|])
        let (resolve :
          hostname:string -> rrtype:[ `CNAME ] -> string list Promise.t) =
          fun ~hostname:(x743 : string) ->
            fun ~rrtype:(x744 : [ `CNAME ]) ->
              Promise.t_of_js
                (fun (x745 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x745)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x743);((match x744 with
                                               | `CNAME ->
                                                   Ojs.string_to_js "CNAME"))|])
        let (resolve :
          hostname:string -> rrtype:[ `MX ] -> MxRecord.t list Promise.t) =
          fun ~hostname:(x747 : string) ->
            fun ~rrtype:(x748 : [ `MX ]) ->
              Promise.t_of_js
                (fun (x749 : Ojs.t) -> Ojs.list_of_js MxRecord.t_of_js x749)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x747);((match x748 with
                                               | `MX -> Ojs.string_to_js "MX"))|])
        let (resolve :
          hostname:string ->
            rrtype:[ `NAPTR ] -> NaptrRecord.t list Promise.t)
          =
          fun ~hostname:(x751 : string) ->
            fun ~rrtype:(x752 : [ `NAPTR ]) ->
              Promise.t_of_js
                (fun (x753 : Ojs.t) ->
                   Ojs.list_of_js NaptrRecord.t_of_js x753)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x751);((match x752 with
                                               | `NAPTR ->
                                                   Ojs.string_to_js "NAPTR"))|])
        let (resolve :
          hostname:string -> rrtype:[ `NS ] -> string list Promise.t) =
          fun ~hostname:(x755 : string) ->
            fun ~rrtype:(x756 : [ `NS ]) ->
              Promise.t_of_js
                (fun (x757 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x757)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x755);((match x756 with
                                               | `NS -> Ojs.string_to_js "NS"))|])
        let (resolve :
          hostname:string -> rrtype:[ `PTR ] -> string list Promise.t) =
          fun ~hostname:(x759 : string) ->
            fun ~rrtype:(x760 : [ `PTR ]) ->
              Promise.t_of_js
                (fun (x761 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x761)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x759);((match x760 with
                                               | `PTR ->
                                                   Ojs.string_to_js "PTR"))|])
        let (resolve :
          hostname:string -> rrtype:[ `SOA ] -> SoaRecord.t Promise.t) =
          fun ~hostname:(x763 : string) ->
            fun ~rrtype:(x764 : [ `SOA ]) ->
              Promise.t_of_js SoaRecord.t_of_js
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x763);((match x764 with
                                               | `SOA ->
                                                   Ojs.string_to_js "SOA"))|])
        let (resolve :
          hostname:string -> rrtype:[ `SRV ] -> SrvRecord.t list Promise.t) =
          fun ~hostname:(x766 : string) ->
            fun ~rrtype:(x767 : [ `SRV ]) ->
              Promise.t_of_js
                (fun (x768 : Ojs.t) -> Ojs.list_of_js SrvRecord.t_of_js x768)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x766);((match x767 with
                                               | `SRV ->
                                                   Ojs.string_to_js "SRV"))|])
        let (resolve :
          hostname:string -> rrtype:[ `TXT ] -> string list list Promise.t) =
          fun ~hostname:(x770 : string) ->
            fun ~rrtype:(x771 : [ `TXT ]) ->
              Promise.t_of_js
                (fun (x772 : Ojs.t) ->
                   Ojs.list_of_js
                     (fun (x773 : Ojs.t) ->
                        Ojs.list_of_js Ojs.string_of_js x773) x772)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x770);((match x771 with
                                               | `TXT ->
                                                   Ojs.string_to_js "TXT"))|])
        let (resolve :
          hostname:string ->
            rrtype:string ->
              (dns_SoaRecord,
                ((AnyRecord.t, MxRecord.t, NaptrRecord.t, SrvRecord.t) union4,
                  string) or_array or_string)
                or_array Promise.t)
          =
          fun ~hostname:(x775 : string) ->
            fun ~rrtype:(x776 : string) ->
              Promise.t_of_js
                (fun (x777 : Ojs.t) ->
                   or_array_of_js dns_SoaRecord_of_js
                     (fun (x779 : Ojs.t) ->
                        or_string_of_js
                          (fun (x780 : Ojs.t) ->
                             or_array_of_js
                               (fun (x781 : Ojs.t) ->
                                  union4_of_js AnyRecord.t_of_js
                                    MxRecord.t_of_js NaptrRecord.t_of_js
                                    SrvRecord.t_of_js x781) Ojs.string_of_js
                               x780) x779) x777)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve"
                   [|(Ojs.string_to_js x775);(Ojs.string_to_js x776)|])
        let (resolve4 : hostname:string -> string list Promise.t) =
          fun ~hostname:(x787 : string) ->
            Promise.t_of_js
              (fun (x788 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x788)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "resolve4"
                 [|(Ojs.string_to_js x787)|])
        let (resolve4 :
          hostname:string ->
            options:ResolveWithTtlOptions.t -> RecordWithTtl.t list Promise.t)
          =
          fun ~hostname:(x790 : string) ->
            fun ~options:(x791 : ResolveWithTtlOptions.t) ->
              Promise.t_of_js
                (fun (x792 : Ojs.t) ->
                   Ojs.list_of_js RecordWithTtl.t_of_js x792)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve4"
                   [|(Ojs.string_to_js x790);(ResolveWithTtlOptions.t_to_js
                                                x791)|])
        let (resolve4 :
          hostname:string ->
            options:ResolveOptions.t ->
              RecordWithTtl.t or_string list Promise.t)
          =
          fun ~hostname:(x794 : string) ->
            fun ~options:(x795 : ResolveOptions.t) ->
              Promise.t_of_js
                (fun (x796 : Ojs.t) ->
                   Ojs.list_of_js
                     (fun (x797 : Ojs.t) ->
                        or_string_of_js RecordWithTtl.t_of_js x797) x796)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve4"
                   [|(Ojs.string_to_js x794);(ResolveOptions.t_to_js x795)|])
        let (resolve6 : hostname:string -> string list Promise.t) =
          fun ~hostname:(x799 : string) ->
            Promise.t_of_js
              (fun (x800 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x800)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "resolve6"
                 [|(Ojs.string_to_js x799)|])
        let (resolve6 :
          hostname:string ->
            options:ResolveWithTtlOptions.t -> RecordWithTtl.t list Promise.t)
          =
          fun ~hostname:(x802 : string) ->
            fun ~options:(x803 : ResolveWithTtlOptions.t) ->
              Promise.t_of_js
                (fun (x804 : Ojs.t) ->
                   Ojs.list_of_js RecordWithTtl.t_of_js x804)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve6"
                   [|(Ojs.string_to_js x802);(ResolveWithTtlOptions.t_to_js
                                                x803)|])
        let (resolve6 :
          hostname:string ->
            options:ResolveOptions.t ->
              RecordWithTtl.t or_string list Promise.t)
          =
          fun ~hostname:(x806 : string) ->
            fun ~options:(x807 : ResolveOptions.t) ->
              Promise.t_of_js
                (fun (x808 : Ojs.t) ->
                   Ojs.list_of_js
                     (fun (x809 : Ojs.t) ->
                        or_string_of_js RecordWithTtl.t_of_js x809) x808)
                (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                   "resolve6"
                   [|(Ojs.string_to_js x806);(ResolveOptions.t_to_js x807)|])
        let (resolve_any : hostname:string -> AnyRecord.t list Promise.t) =
          fun ~hostname:(x811 : string) ->
            Promise.t_of_js
              (fun (x812 : Ojs.t) -> Ojs.list_of_js AnyRecord.t_of_js x812)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveAny" [|(Ojs.string_to_js x811)|])
        let (resolve_cname : hostname:string -> string list Promise.t) =
          fun ~hostname:(x814 : string) ->
            Promise.t_of_js
              (fun (x815 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x815)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveCname" [|(Ojs.string_to_js x814)|])
        let (resolve_mx : hostname:string -> MxRecord.t list Promise.t) =
          fun ~hostname:(x817 : string) ->
            Promise.t_of_js
              (fun (x818 : Ojs.t) -> Ojs.list_of_js MxRecord.t_of_js x818)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveMx" [|(Ojs.string_to_js x817)|])
        let (resolve_naptr : hostname:string -> NaptrRecord.t list Promise.t)
          =
          fun ~hostname:(x820 : string) ->
            Promise.t_of_js
              (fun (x821 : Ojs.t) -> Ojs.list_of_js NaptrRecord.t_of_js x821)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveNaptr" [|(Ojs.string_to_js x820)|])
        let (resolve_ns : hostname:string -> string list Promise.t) =
          fun ~hostname:(x823 : string) ->
            Promise.t_of_js
              (fun (x824 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x824)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveNs" [|(Ojs.string_to_js x823)|])
        let (resolve_ptr : hostname:string -> string list Promise.t) =
          fun ~hostname:(x826 : string) ->
            Promise.t_of_js
              (fun (x827 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x827)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolvePtr" [|(Ojs.string_to_js x826)|])
        let (resolve_soa : hostname:string -> SoaRecord.t Promise.t) =
          fun ~hostname:(x829 : string) ->
            Promise.t_of_js SoaRecord.t_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveSoa" [|(Ojs.string_to_js x829)|])
        let (resolve_srv : hostname:string -> SrvRecord.t list Promise.t) =
          fun ~hostname:(x831 : string) ->
            Promise.t_of_js
              (fun (x832 : Ojs.t) -> Ojs.list_of_js SrvRecord.t_of_js x832)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveSrv" [|(Ojs.string_to_js x831)|])
        let (resolve_txt : hostname:string -> string list list Promise.t) =
          fun ~hostname:(x834 : string) ->
            Promise.t_of_js
              (fun (x835 : Ojs.t) ->
                 Ojs.list_of_js
                   (fun (x836 : Ojs.t) ->
                      Ojs.list_of_js Ojs.string_of_js x836) x835)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "resolveTxt" [|(Ojs.string_to_js x834)|])
        let (reverse : ip:string -> string list Promise.t) =
          fun ~ip:(x838 : string) ->
            Promise.t_of_js
              (fun (x839 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x839)
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises") "reverse"
                 [|(Ojs.string_to_js x838)|])
        let (set_servers : servers:string list -> unit) =
          fun ~servers:(x841 : string list) ->
            ignore
              (Ojs.call (Ojs.get_prop_ascii Import.dns "promises")
                 "setServers" [|(Ojs.list_to_js Ojs.string_to_js x841)|])
        module Resolver =
          struct
            type t = dns_promises_Resolver
            let rec t_of_js : Ojs.t -> t =
              fun (x844 : Ojs.t) -> dns_promises_Resolver_of_js x844
            and t_to_js : t -> Ojs.t =
              fun (x843 : dns_promises_Resolver) ->
                dns_promises_Resolver_to_js x843
            let (create : ?options:ResolverOptions.t -> unit -> t) =
              fun ?options:(x845 : ResolverOptions.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.dns "promises")
                          "Resolver")
                       (let x846 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x845 with
                         | Some x847 ->
                             ignore
                               (Ojs.call x846 "push"
                                  [|(ResolverOptions.t_to_js x847)|])
                         | None -> ());
                        x846))
            let (cancel : t -> unit) =
              fun (x848 : t) ->
                ignore (Ojs.call (t_to_js x848) "cancel" [||])
            let (get_servers : t -> string list) =
              fun (x849 : t) ->
                Ojs.list_of_js Ojs.string_of_js
                  (Ojs.call (t_to_js x849) "getServers" [||])
            let (resolve : t -> hostname:string -> string list Promise.t) =
              fun (x852 : t) ->
                fun ~hostname:(x851 : string) ->
                  Promise.t_of_js
                    (fun (x853 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x853)
                    (Ojs.call (t_to_js x852) "resolve"
                       [|(Ojs.string_to_js x851)|])
            let (resolve4 : t -> hostname:string -> string list Promise.t) =
              fun (x856 : t) ->
                fun ~hostname:(x855 : string) ->
                  Promise.t_of_js
                    (fun (x857 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x857)
                    (Ojs.call (t_to_js x856) "resolve4"
                       [|(Ojs.string_to_js x855)|])
            let (resolve6 : t -> hostname:string -> string list Promise.t) =
              fun (x860 : t) ->
                fun ~hostname:(x859 : string) ->
                  Promise.t_of_js
                    (fun (x861 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x861)
                    (Ojs.call (t_to_js x860) "resolve6"
                       [|(Ojs.string_to_js x859)|])
            let (resolve_any :
              t -> hostname:string -> AnyRecord.t list Promise.t) =
              fun (x864 : t) ->
                fun ~hostname:(x863 : string) ->
                  Promise.t_of_js
                    (fun (x865 : Ojs.t) ->
                       Ojs.list_of_js AnyRecord.t_of_js x865)
                    (Ojs.call (t_to_js x864) "resolveAny"
                       [|(Ojs.string_to_js x863)|])
            let (resolve_cname :
              t -> hostname:string -> string list Promise.t) =
              fun (x868 : t) ->
                fun ~hostname:(x867 : string) ->
                  Promise.t_of_js
                    (fun (x869 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x869)
                    (Ojs.call (t_to_js x868) "resolveCname"
                       [|(Ojs.string_to_js x867)|])
            let (resolve_mx :
              t -> hostname:string -> MxRecord.t list Promise.t) =
              fun (x872 : t) ->
                fun ~hostname:(x871 : string) ->
                  Promise.t_of_js
                    (fun (x873 : Ojs.t) ->
                       Ojs.list_of_js MxRecord.t_of_js x873)
                    (Ojs.call (t_to_js x872) "resolveMx"
                       [|(Ojs.string_to_js x871)|])
            let (resolve_naptr :
              t -> hostname:string -> NaptrRecord.t list Promise.t) =
              fun (x876 : t) ->
                fun ~hostname:(x875 : string) ->
                  Promise.t_of_js
                    (fun (x877 : Ojs.t) ->
                       Ojs.list_of_js NaptrRecord.t_of_js x877)
                    (Ojs.call (t_to_js x876) "resolveNaptr"
                       [|(Ojs.string_to_js x875)|])
            let (resolve_ns : t -> hostname:string -> string list Promise.t)
              =
              fun (x880 : t) ->
                fun ~hostname:(x879 : string) ->
                  Promise.t_of_js
                    (fun (x881 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x881)
                    (Ojs.call (t_to_js x880) "resolveNs"
                       [|(Ojs.string_to_js x879)|])
            let (resolve_ptr : t -> hostname:string -> string list Promise.t)
              =
              fun (x884 : t) ->
                fun ~hostname:(x883 : string) ->
                  Promise.t_of_js
                    (fun (x885 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x885)
                    (Ojs.call (t_to_js x884) "resolvePtr"
                       [|(Ojs.string_to_js x883)|])
            let (resolve_soa : t -> hostname:string -> SoaRecord.t Promise.t)
              =
              fun (x888 : t) ->
                fun ~hostname:(x887 : string) ->
                  Promise.t_of_js SoaRecord.t_of_js
                    (Ojs.call (t_to_js x888) "resolveSoa"
                       [|(Ojs.string_to_js x887)|])
            let (resolve_srv :
              t -> hostname:string -> SrvRecord.t list Promise.t) =
              fun (x891 : t) ->
                fun ~hostname:(x890 : string) ->
                  Promise.t_of_js
                    (fun (x892 : Ojs.t) ->
                       Ojs.list_of_js SrvRecord.t_of_js x892)
                    (Ojs.call (t_to_js x891) "resolveSrv"
                       [|(Ojs.string_to_js x890)|])
            let (resolve_txt :
              t -> hostname:string -> string list list Promise.t) =
              fun (x895 : t) ->
                fun ~hostname:(x894 : string) ->
                  Promise.t_of_js
                    (fun (x896 : Ojs.t) ->
                       Ojs.list_of_js
                         (fun (x897 : Ojs.t) ->
                            Ojs.list_of_js Ojs.string_of_js x897) x896)
                    (Ojs.call (t_to_js x895) "resolveTxt"
                       [|(Ojs.string_to_js x894)|])
            let (reverse : t -> ip:string -> string list Promise.t) =
              fun (x900 : t) ->
                fun ~ip:(x899 : string) ->
                  Promise.t_of_js
                    (fun (x901 : Ojs.t) ->
                       Ojs.list_of_js Ojs.string_of_js x901)
                    (Ojs.call (t_to_js x900) "reverse"
                       [|(Ojs.string_to_js x899)|])
            let (set_local_address :
              t -> ?ipv4:string -> ?ipv6:string -> unit -> unit) =
              fun (x908 : t) ->
                fun ?ipv4:(x903 : string option) ->
                  fun ?ipv6:(x904 : string option) ->
                    fun () ->
                      ignore
                        (let x909 = t_to_js x908 in
                         Ojs.call (Ojs.get_prop_ascii x909 "setLocalAddress")
                           "apply"
                           [|x909;((let x905 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    (match x903 with
                                     | Some x907 ->
                                         ignore
                                           (Ojs.call x905 "push"
                                              [|(Ojs.string_to_js x907)|])
                                     | None -> ());
                                    (match x904 with
                                     | Some x906 ->
                                         ignore
                                           (Ojs.call x905 "push"
                                              [|(Ojs.string_to_js x906)|])
                                     | None -> ());
                                    x905))|])
            let (set_servers : t -> servers:string list -> unit) =
              fun (x912 : t) ->
                fun ~servers:(x910 : string list) ->
                  ignore
                    (Ojs.call (t_to_js x912) "setServers"
                       [|(Ojs.list_to_js Ojs.string_to_js x910)|])
          end
      end
  end
