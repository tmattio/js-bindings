[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces = struct  end
    module Types = struct open AnonymousInterfaces end
  end
open Internal
open AnonymousInterfaces
open Types
module Timers =
  struct
    let (setTimeout :
      callback:(args:any list -> unit) ->
        ?ms:float -> args:any list -> Timeout.t)
      =
      fun ~callback:(x1 : args:any list -> unit) ->
        fun ?ms:(x2 : float option) ->
          fun ~args:(x3 : any list) ->
            Timeout.t_of_js
              (let x9 = Import.timers in
               Ojs.call (Ojs.get_prop_ascii x9 "setTimeout") "apply"
                 [|x9;((let x4 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x4 "push"
                             [|(Ojs.fun_to_js_args
                                  (fun (x7 : _) ->
                                     x1
                                       ~args:(Ojs.list_of_js_from any_of_js
                                                x7 0)))|]);
                        (match x2 with
                         | Some x6 ->
                             ignore
                               (Ojs.call x4 "push" [|(Ojs.float_to_js x6)|])
                         | None -> ());
                        List.iter
                          (fun (x5 : any) ->
                             ignore (Ojs.call x4 "push" [|(any_to_js x5)|]))
                          x3;
                        x4))|])
    module SetTimeout =
      struct
        let (__promisify__ : ms:float -> unit Promise.t) =
          fun ~ms:(x10 : float) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.timers "setTimeout")
                 "__promisify__" [|(Ojs.float_to_js x10)|])
        let (__promisify__ : ms:float -> value:'T -> 'T Promise.t) =
          fun ~ms:(x12 : float) ->
            fun ~value:(x13 : 'T) ->
              Promise.t_of_js Obj.magic
                (Ojs.call (Ojs.get_prop_ascii Import.timers "setTimeout")
                   "__promisify__" [|(Ojs.float_to_js x12);(Obj.magic x13)|])
      end
    let (clearTimeout : timeoutId:Timeout.t -> unit) =
      fun ~timeoutId:(x15 : Timeout.t) ->
        ignore
          (Ojs.call Import.timers "clearTimeout" [|(Timeout.t_to_js x15)|])
    let (setInterval :
      callback:(args:any list -> unit) ->
        ?ms:float -> args:any list -> Timeout.t)
      =
      fun ~callback:(x16 : args:any list -> unit) ->
        fun ?ms:(x17 : float option) ->
          fun ~args:(x18 : any list) ->
            Timeout.t_of_js
              (let x24 = Import.timers in
               Ojs.call (Ojs.get_prop_ascii x24 "setInterval") "apply"
                 [|x24;((let x19 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         ignore
                           (Ojs.call x19 "push"
                              [|(Ojs.fun_to_js_args
                                   (fun (x22 : _) ->
                                      x16
                                        ~args:(Ojs.list_of_js_from any_of_js
                                                 x22 0)))|]);
                         (match x17 with
                          | Some x21 ->
                              ignore
                                (Ojs.call x19 "push"
                                   [|(Ojs.float_to_js x21)|])
                          | None -> ());
                         List.iter
                           (fun (x20 : any) ->
                              ignore
                                (Ojs.call x19 "push" [|(any_to_js x20)|]))
                           x18;
                         x19))|])
    let (clearInterval : intervalId:Timeout.t -> unit) =
      fun ~intervalId:(x25 : Timeout.t) ->
        ignore
          (Ojs.call Import.timers "clearInterval" [|(Timeout.t_to_js x25)|])
    let (setImmediate :
      callback:(args:any list -> unit) -> args:any list -> Immediate.t) =
      fun ~callback:(x26 : args:any list -> unit) ->
        fun ~args:(x27 : any list) ->
          Immediate.t_of_js
            (let x32 = Import.timers in
             Ojs.call (Ojs.get_prop_ascii x32 "setImmediate") "apply"
               [|x32;((let x28 =
                         Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                           [||] in
                       ignore
                         (Ojs.call x28 "push"
                            [|(Ojs.fun_to_js_args
                                 (fun (x30 : _) ->
                                    x26
                                      ~args:(Ojs.list_of_js_from any_of_js
                                               x30 0)))|]);
                       List.iter
                         (fun (x29 : any) ->
                            ignore (Ojs.call x28 "push" [|(any_to_js x29)|]))
                         x27;
                       x28))|])
    module SetImmediate =
      struct
        let (__promisify__ : unit -> unit Promise.t) =
          fun () ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.timers "setImmediate")
                 "__promisify__" [||])
        let (__promisify__ : value:'T -> 'T Promise.t) =
          fun ~value:(x34 : 'T) ->
            Promise.t_of_js Obj.magic
              (Ojs.call (Ojs.get_prop_ascii Import.timers "setImmediate")
                 "__promisify__" [|(Obj.magic x34)|])
      end
    let (clearImmediate : immediateId:Immediate.t -> unit) =
      fun ~immediateId:(x36 : Immediate.t) ->
        ignore
          (Ojs.call Import.timers "clearImmediate"
             [|(Immediate.t_to_js x36)|])
  end
