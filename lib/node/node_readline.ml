[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces = struct  end
    module Types =
      struct
        open AnonymousInterfaces
        type readline_AsyncCompleter = [ `Readline_AsyncCompleter ] intf
        and readline_Completer = [ `Readline_Completer ] intf
        and readline_CompleterResult = (string list * string)
        and readline_CursorPos = [ `Readline_CursorPos ] intf
        and readline_Direction = [ `L_n_minus1  | `L_n_0  | `L_n_1 ]
        and readline_Interface = [ `Readline_Interface ] intf
        and readline_Key = [ `Readline_Key ] intf
        and readline_ReadLine = readline_Interface
        and readline_ReadLineOptions = [ `Readline_ReadLineOptions ] intf
        let rec readline_AsyncCompleter_of_js :
          Ojs.t -> readline_AsyncCompleter = Obj.magic
        and readline_AsyncCompleter_to_js : readline_AsyncCompleter -> Ojs.t
          = Obj.magic
        and readline_Completer_of_js : Ojs.t -> readline_Completer =
          Obj.magic
        and readline_Completer_to_js : readline_Completer -> Ojs.t =
          Obj.magic
        and readline_CompleterResult_of_js :
          Ojs.t -> readline_CompleterResult =
          fun (x6 : Ojs.t) ->
            let x7 = x6 in
            ((Ojs.list_of_js Ojs.string_of_js (Ojs.array_get x7 0)),
              (Ojs.string_of_js (Ojs.array_get x7 1)))
        and readline_CompleterResult_to_js :
          readline_CompleterResult -> Ojs.t =
          fun (x1 : (string list * string)) ->
            let (x2, x3) = x1 in
            let x4 = Ojs.array_make 2 in
            Ojs.array_set x4 0 (Ojs.list_to_js Ojs.string_to_js x2);
            Ojs.array_set x4 1 (Ojs.string_to_js x3);
            x4
        and readline_CursorPos_of_js : Ojs.t -> readline_CursorPos =
          Obj.magic
        and readline_CursorPos_to_js : readline_CursorPos -> Ojs.t =
          Obj.magic
        and readline_Direction_of_js : Ojs.t -> readline_Direction =
          fun (x10 : Ojs.t) ->
            let x11 = x10 in
            match Ojs.int_of_js x11 with
            | (-1) -> `L_n_minus1
            | 0 -> `L_n_0
            | 1 -> `L_n_1
            | _ -> assert false
        and readline_Direction_to_js : readline_Direction -> Ojs.t =
          fun (x9 : [ `L_n_minus1  | `L_n_0  | `L_n_1 ]) ->
            match x9 with
            | `L_n_minus1 -> Ojs.int_to_js (-1)
            | `L_n_0 -> Ojs.int_to_js 0
            | `L_n_1 -> Ojs.int_to_js 1
        and readline_Interface_of_js : Ojs.t -> readline_Interface =
          Obj.magic
        and readline_Interface_to_js : readline_Interface -> Ojs.t =
          Obj.magic
        and readline_Key_of_js : Ojs.t -> readline_Key = Obj.magic
        and readline_Key_to_js : readline_Key -> Ojs.t = Obj.magic
        and readline_ReadLine_of_js : Ojs.t -> readline_ReadLine =
          fun (x13 : Ojs.t) -> readline_Interface_of_js x13
        and readline_ReadLine_to_js : readline_ReadLine -> Ojs.t =
          fun (x12 : readline_Interface) -> readline_Interface_to_js x12
        and readline_ReadLineOptions_of_js :
          Ojs.t -> readline_ReadLineOptions = Obj.magic
        and readline_ReadLineOptions_to_js :
          readline_ReadLineOptions -> Ojs.t = Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module Readline =
  struct
    module Key =
      struct
        type t = readline_Key
        let rec t_of_js : Ojs.t -> t =
          fun (x15 : Ojs.t) -> readline_Key_of_js x15
        and t_to_js : t -> Ojs.t =
          fun (x14 : readline_Key) -> readline_Key_to_js x14
        let (get_sequence : t -> string) =
          fun (x16 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x16) "sequence")
        let (set_sequence : t -> string -> unit) =
          fun (x17 : t) ->
            fun (x18 : string) ->
              Ojs.set_prop_ascii (t_to_js x17) "sequence"
                (Ojs.string_to_js x18)
        let (get_name : t -> string) =
          fun (x19 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x19) "name")
        let (set_name : t -> string -> unit) =
          fun (x20 : t) ->
            fun (x21 : string) ->
              Ojs.set_prop_ascii (t_to_js x20) "name" (Ojs.string_to_js x21)
        let (get_ctrl : t -> bool) =
          fun (x22 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x22) "ctrl")
        let (set_ctrl : t -> bool -> unit) =
          fun (x23 : t) ->
            fun (x24 : bool) ->
              Ojs.set_prop_ascii (t_to_js x23) "ctrl" (Ojs.bool_to_js x24)
        let (get_meta : t -> bool) =
          fun (x25 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x25) "meta")
        let (set_meta : t -> bool -> unit) =
          fun (x26 : t) ->
            fun (x27 : bool) ->
              Ojs.set_prop_ascii (t_to_js x26) "meta" (Ojs.bool_to_js x27)
        let (get_shift : t -> bool) =
          fun (x28 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x28) "shift")
        let (set_shift : t -> bool -> unit) =
          fun (x29 : t) ->
            fun (x30 : bool) ->
              Ojs.set_prop_ascii (t_to_js x29) "shift" (Ojs.bool_to_js x30)
      end
    module Interface =
      struct
        type t = readline_Interface
        let rec t_of_js : Ojs.t -> t =
          fun (x32 : Ojs.t) -> readline_Interface_of_js x32
        and t_to_js : t -> Ojs.t =
          fun (x31 : readline_Interface) -> readline_Interface_to_js x31
        let (get_terminal : t -> bool) =
          fun (x33 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x33) "terminal")
        let (get_line : t -> string) =
          fun (x34 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x34) "line")
        let (get_cursor : t -> float) =
          fun (x35 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x35) "cursor")
        let (create :
          input:ReadableStream.t ->
            ?output:WritableStream.t ->
              ?completer:(readline_AsyncCompleter, readline_Completer) union2
                -> ?terminal:bool -> unit -> t)
          =
          fun ~input:(x36 : ReadableStream.t) ->
            fun ?output:(x37 : WritableStream.t option) ->
              fun
                ?completer:(x38 :
                             (readline_AsyncCompleter, readline_Completer)
                               union2 option)
                ->
                fun ?terminal:(x39 : bool option) ->
                  fun () ->
                    t_of_js
                      (Ojs.new_obj_arr
                         (Ojs.get_prop_ascii Import.readline "Interface")
                         (let x40 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x40 "push"
                               [|(ReadableStream.t_to_js x36)|]);
                          (match x37 with
                           | Some x45 ->
                               ignore
                                 (Ojs.call x40 "push"
                                    [|(WritableStream.t_to_js x45)|])
                           | None -> ());
                          (match x38 with
                           | Some x42 ->
                               ignore
                                 (Ojs.call x40 "push"
                                    [|(union2_to_js
                                         readline_AsyncCompleter_to_js
                                         readline_Completer_to_js x42)|])
                           | None -> ());
                          (match x39 with
                           | Some x41 ->
                               ignore
                                 (Ojs.call x40 "push"
                                    [|(Ojs.bool_to_js x41)|])
                           | None -> ());
                          x40))
        let (create' : options:readline_ReadLineOptions -> t) =
          fun ~options:(x46 : readline_ReadLineOptions) ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.readline "Interface")
                 [|(readline_ReadLineOptions_to_js x46)|])
        let (setPrompt : t -> prompt:string -> unit) =
          fun (x48 : t) ->
            fun ~prompt:(x47 : string) ->
              ignore
                (Ojs.call (t_to_js x48) "setPrompt"
                   [|(Ojs.string_to_js x47)|])
        let (prompt : t -> ?preserveCursor:bool -> unit -> unit) =
          fun (x52 : t) ->
            fun ?preserveCursor:(x49 : bool option) ->
              fun () ->
                ignore
                  (let x53 = t_to_js x52 in
                   Ojs.call (Ojs.get_prop_ascii x53 "prompt") "apply"
                     [|x53;((let x50 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x49 with
                              | Some x51 ->
                                  ignore
                                    (Ojs.call x50 "push"
                                       [|(Ojs.bool_to_js x51)|])
                              | None -> ());
                             x50))|])
        let (question :
          t -> query:string -> callback:(answer:string -> unit) -> unit) =
          fun (x57 : t) ->
            fun ~query:(x54 : string) ->
              fun ~callback:(x55 : answer:string -> unit) ->
                ignore
                  (Ojs.call (t_to_js x57) "question"
                     [|(Ojs.string_to_js x54);(Ojs.fun_to_js 1
                                                 (fun (x56 : Ojs.t) ->
                                                    x55
                                                      ~answer:(Ojs.string_of_js
                                                                 x56)))|])
        let (pause : t -> t) =
          fun (x58 : t) -> t_of_js (Ojs.call (t_to_js x58) "pause" [||])
        let (resume : t -> t) =
          fun (x59 : t) -> t_of_js (Ojs.call (t_to_js x59) "resume" [||])
        let (close : t -> unit) =
          fun (x60 : t) -> ignore (Ojs.call (t_to_js x60) "close" [||])
        let (write :
          t -> data:Buffer.t or_string -> ?key:readline_Key -> unit -> unit)
          =
          fun (x66 : t) ->
            fun ~data:(x61 : Buffer.t or_string) ->
              fun ?key:(x62 : readline_Key option) ->
                fun () ->
                  ignore
                    (let x67 = t_to_js x66 in
                     Ojs.call (Ojs.get_prop_ascii x67 "write") "apply"
                       [|x67;((let x63 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x63 "push"
                                    [|(or_string_to_js Buffer.t_to_js x61)|]);
                               (match x62 with
                                | Some x64 ->
                                    ignore
                                      (Ojs.call x63 "push"
                                         [|(readline_Key_to_js x64)|])
                                | None -> ());
                               x63))|])
        let (getCursorPos : t -> readline_CursorPos) =
          fun (x68 : t) ->
            readline_CursorPos_of_js
              (Ojs.call (t_to_js x68) "getCursorPos" [||])
        let (addListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x73 : t) ->
            fun ~event:(x69 : string) ->
              fun ~listener:(x70 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x73) "addListener"
                     [|(Ojs.string_to_js x69);(Ojs.fun_to_js_args
                                                 (fun (x71 : _) ->
                                                    x70
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js x71
                                                               0)))|])
        let (addListener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x76 : t) ->
            fun ~event:(x74 : [ `close ]) ->
              fun ~listener:(x75 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x76) "addListener"
                     [|((match x74 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x75 ()))|])
        let (addListener'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x80 : t) ->
            fun ~event:(x77 : [ `line ]) ->
              fun ~listener:(x78 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x80) "addListener"
                     [|((match x77 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x79 : Ojs.t) ->
                            x78 ~input:(Ojs.string_of_js x79)))|])
        let (addListener''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x83 : t) ->
            fun ~event:(x81 : [ `pause ]) ->
              fun ~listener:(x82 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x83) "addListener"
                     [|((match x81 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x82 ()))|])
        let (addListener'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x86 : t) ->
            fun ~event:(x84 : [ `resume ]) ->
              fun ~listener:(x85 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x86) "addListener"
                     [|((match x84 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x85 ()))|])
        let (addListener''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x89 : t) ->
            fun ~event:(x87 : [ `SIGCONT ]) ->
              fun ~listener:(x88 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x89) "addListener"
                     [|((match x87 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x88 ()))|])
        let (addListener'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x92 : t) ->
            fun ~event:(x90 : [ `SIGINT ]) ->
              fun ~listener:(x91 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x92) "addListener"
                     [|((match x90 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x91 ()))|])
        let (addListener''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x95 : t) ->
            fun ~event:(x93 : [ `SIGTSTP ]) ->
              fun ~listener:(x94 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x95) "addListener"
                     [|((match x93 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x94 ()))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x101 : t) ->
            fun ~event:(x96 : symbol or_string) ->
              fun ~args:(x97 : any list) ->
                Ojs.bool_of_js
                  (let x102 = t_to_js x101 in
                   Ojs.call (Ojs.get_prop_ascii x102 "emit") "apply"
                     [|x102;((let x98 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x98 "push"
                                   [|(or_string_to_js symbol_to_js x96)|]);
                              List.iter
                                (fun (x99 : any) ->
                                   ignore
                                     (Ojs.call x98 "push" [|(any_to_js x99)|]))
                                x97;
                              x98))|])
        let (emit' : t -> event:[ `close ] -> bool) =
          fun (x104 : t) ->
            fun ~event:(x103 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x104) "emit"
                   [|((match x103 with | `close -> Ojs.string_to_js "close"))|])
        let (emit'' : t -> event:[ `line ] -> input:string -> bool) =
          fun (x107 : t) ->
            fun ~event:(x105 : [ `line ]) ->
              fun ~input:(x106 : string) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x107) "emit"
                     [|((match x105 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.string_to_js x106)|])
        let (emit''' : t -> event:[ `pause ] -> bool) =
          fun (x109 : t) ->
            fun ~event:(x108 : [ `pause ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x109) "emit"
                   [|((match x108 with | `pause -> Ojs.string_to_js "pause"))|])
        let (emit'''' : t -> event:[ `resume ] -> bool) =
          fun (x111 : t) ->
            fun ~event:(x110 : [ `resume ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x111) "emit"
                   [|((match x110 with | `resume -> Ojs.string_to_js "resume"))|])
        let (emit''''' : t -> event:[ `SIGCONT ] -> bool) =
          fun (x113 : t) ->
            fun ~event:(x112 : [ `SIGCONT ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x113) "emit"
                   [|((match x112 with
                       | `SIGCONT -> Ojs.string_to_js "SIGCONT"))|])
        let (emit'''''' : t -> event:[ `SIGINT ] -> bool) =
          fun (x115 : t) ->
            fun ~event:(x114 : [ `SIGINT ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x115) "emit"
                   [|((match x114 with | `SIGINT -> Ojs.string_to_js "SIGINT"))|])
        let (emit''''''' : t -> event:[ `SIGTSTP ] -> bool) =
          fun (x117 : t) ->
            fun ~event:(x116 : [ `SIGTSTP ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x117) "emit"
                   [|((match x116 with
                       | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"))|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x122 : t) ->
            fun ~event:(x118 : string) ->
              fun ~listener:(x119 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x122) "on"
                     [|(Ojs.string_to_js x118);(Ojs.fun_to_js_args
                                                  (fun (x120 : _) ->
                                                     x119
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x120 0)))|])
        let (on' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x125 : t) ->
            fun ~event:(x123 : [ `close ]) ->
              fun ~listener:(x124 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x125) "on"
                     [|((match x123 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x124 ()))|])
        let (on'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x129 : t) ->
            fun ~event:(x126 : [ `line ]) ->
              fun ~listener:(x127 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x129) "on"
                     [|((match x126 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x128 : Ojs.t) ->
                            x127 ~input:(Ojs.string_of_js x128)))|])
        let (on''' : t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x132 : t) ->
            fun ~event:(x130 : [ `pause ]) ->
              fun ~listener:(x131 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x132) "on"
                     [|((match x130 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x131 ()))|])
        let (on'''' : t -> event:[ `resume ] -> listener:(unit -> unit) -> t)
          =
          fun (x135 : t) ->
            fun ~event:(x133 : [ `resume ]) ->
              fun ~listener:(x134 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x135) "on"
                     [|((match x133 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x134 ()))|])
        let (on''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x138 : t) ->
            fun ~event:(x136 : [ `SIGCONT ]) ->
              fun ~listener:(x137 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x138) "on"
                     [|((match x136 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x137 ()))|])
        let (on'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x141 : t) ->
            fun ~event:(x139 : [ `SIGINT ]) ->
              fun ~listener:(x140 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x141) "on"
                     [|((match x139 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x140 ()))|])
        let (on''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x144 : t) ->
            fun ~event:(x142 : [ `SIGTSTP ]) ->
              fun ~listener:(x143 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x144) "on"
                     [|((match x142 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x143 ()))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x149 : t) ->
            fun ~event:(x145 : string) ->
              fun ~listener:(x146 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x149) "once"
                     [|(Ojs.string_to_js x145);(Ojs.fun_to_js_args
                                                  (fun (x147 : _) ->
                                                     x146
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x147 0)))|])
        let (once' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x152 : t) ->
            fun ~event:(x150 : [ `close ]) ->
              fun ~listener:(x151 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x152) "once"
                     [|((match x150 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x151 ()))|])
        let (once'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x156 : t) ->
            fun ~event:(x153 : [ `line ]) ->
              fun ~listener:(x154 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x156) "once"
                     [|((match x153 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x155 : Ojs.t) ->
                            x154 ~input:(Ojs.string_of_js x155)))|])
        let (once''' : t -> event:[ `pause ] -> listener:(unit -> unit) -> t)
          =
          fun (x159 : t) ->
            fun ~event:(x157 : [ `pause ]) ->
              fun ~listener:(x158 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x159) "once"
                     [|((match x157 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x158 ()))|])
        let (once'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x162 : t) ->
            fun ~event:(x160 : [ `resume ]) ->
              fun ~listener:(x161 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x162) "once"
                     [|((match x160 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x161 ()))|])
        let (once''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x165 : t) ->
            fun ~event:(x163 : [ `SIGCONT ]) ->
              fun ~listener:(x164 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x165) "once"
                     [|((match x163 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x164 ()))|])
        let (once'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x168 : t) ->
            fun ~event:(x166 : [ `SIGINT ]) ->
              fun ~listener:(x167 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x168) "once"
                     [|((match x166 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x167 ()))|])
        let (once''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x171 : t) ->
            fun ~event:(x169 : [ `SIGTSTP ]) ->
              fun ~listener:(x170 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x171) "once"
                     [|((match x169 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x170 ()))|])
        let (prependListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x176 : t) ->
            fun ~event:(x172 : string) ->
              fun ~listener:(x173 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x176) "prependListener"
                     [|(Ojs.string_to_js x172);(Ojs.fun_to_js_args
                                                  (fun (x174 : _) ->
                                                     x173
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x174 0)))|])
        let (prependListener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x179 : t) ->
            fun ~event:(x177 : [ `close ]) ->
              fun ~listener:(x178 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x179) "prependListener"
                     [|((match x177 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x178 ()))|])
        let (prependListener'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x183 : t) ->
            fun ~event:(x180 : [ `line ]) ->
              fun ~listener:(x181 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x183) "prependListener"
                     [|((match x180 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x182 : Ojs.t) ->
                            x181 ~input:(Ojs.string_of_js x182)))|])
        let (prependListener''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x186 : t) ->
            fun ~event:(x184 : [ `pause ]) ->
              fun ~listener:(x185 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x186) "prependListener"
                     [|((match x184 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x185 ()))|])
        let (prependListener'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x189 : t) ->
            fun ~event:(x187 : [ `resume ]) ->
              fun ~listener:(x188 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x189) "prependListener"
                     [|((match x187 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x188 ()))|])
        let (prependListener''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x192 : t) ->
            fun ~event:(x190 : [ `SIGCONT ]) ->
              fun ~listener:(x191 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x192) "prependListener"
                     [|((match x190 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x191 ()))|])
        let (prependListener'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x195 : t) ->
            fun ~event:(x193 : [ `SIGINT ]) ->
              fun ~listener:(x194 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x195) "prependListener"
                     [|((match x193 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x194 ()))|])
        let (prependListener''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x198 : t) ->
            fun ~event:(x196 : [ `SIGTSTP ]) ->
              fun ~listener:(x197 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x198) "prependListener"
                     [|((match x196 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x197 ()))|])
        let (prependOnceListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x203 : t) ->
            fun ~event:(x199 : string) ->
              fun ~listener:(x200 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x203) "prependOnceListener"
                     [|(Ojs.string_to_js x199);(Ojs.fun_to_js_args
                                                  (fun (x201 : _) ->
                                                     x200
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x201 0)))|])
        let (prependOnceListener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x206 : t) ->
            fun ~event:(x204 : [ `close ]) ->
              fun ~listener:(x205 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x206) "prependOnceListener"
                     [|((match x204 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x205 ()))|])
        let (prependOnceListener'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x210 : t) ->
            fun ~event:(x207 : [ `line ]) ->
              fun ~listener:(x208 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x210) "prependOnceListener"
                     [|((match x207 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x209 : Ojs.t) ->
                            x208 ~input:(Ojs.string_of_js x209)))|])
        let (prependOnceListener''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x213 : t) ->
            fun ~event:(x211 : [ `pause ]) ->
              fun ~listener:(x212 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x213) "prependOnceListener"
                     [|((match x211 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x212 ()))|])
        let (prependOnceListener'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x216 : t) ->
            fun ~event:(x214 : [ `resume ]) ->
              fun ~listener:(x215 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x216) "prependOnceListener"
                     [|((match x214 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x215 ()))|])
        let (prependOnceListener''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x219 : t) ->
            fun ~event:(x217 : [ `SIGCONT ]) ->
              fun ~listener:(x218 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x219) "prependOnceListener"
                     [|((match x217 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x218 ()))|])
        let (prependOnceListener'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x222 : t) ->
            fun ~event:(x220 : [ `SIGINT ]) ->
              fun ~listener:(x221 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x222) "prependOnceListener"
                     [|((match x220 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x221 ()))|])
        let (prependOnceListener''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x225 : t) ->
            fun ~event:(x223 : [ `SIGTSTP ]) ->
              fun ~listener:(x224 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x225) "prependOnceListener"
                     [|((match x223 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x224 ()))|])
        let (cast : t -> Node_events.Events.EventEmitter.t) =
          fun (x226 : t) ->
            Node_events.Events.EventEmitter.t_of_js (t_to_js x226)
      end
    module ReadLine =
      struct
        type t = readline_ReadLine
        let rec t_of_js : Ojs.t -> t =
          fun (x228 : Ojs.t) -> readline_ReadLine_of_js x228
        and t_to_js : t -> Ojs.t =
          fun (x227 : readline_ReadLine) -> readline_ReadLine_to_js x227
      end
    module Completer =
      struct
        type t = readline_Completer
        let rec t_of_js : Ojs.t -> t =
          fun (x230 : Ojs.t) -> readline_Completer_of_js x230
        and t_to_js : t -> Ojs.t =
          fun (x229 : readline_Completer) -> readline_Completer_to_js x229
        let (apply : t -> line:string -> readline_CompleterResult) =
          fun (x232 : t) ->
            fun ~line:(x231 : string) ->
              readline_CompleterResult_of_js
                (Ojs.apply (t_to_js x232) [|(Ojs.string_to_js x231)|])
      end
    module AsyncCompleter =
      struct
        type t = readline_AsyncCompleter
        let rec t_of_js : Ojs.t -> t =
          fun (x234 : Ojs.t) -> readline_AsyncCompleter_of_js x234
        and t_to_js : t -> Ojs.t =
          fun (x233 : readline_AsyncCompleter) ->
            readline_AsyncCompleter_to_js x233
        let (apply :
          t ->
            line:string ->
              callback:(?err:Error.t or_null ->
                          ?result:readline_CompleterResult -> unit -> unit)
                -> any)
          =
          fun (x242 : t) ->
            fun ~line:(x235 : string) ->
              fun
                ~callback:(x236 :
                            ?err:Error.t or_null ->
                              ?result:readline_CompleterResult ->
                                unit -> unit)
                ->
                any_of_js
                  (Ojs.apply (t_to_js x242)
                     [|(Ojs.string_to_js x235);(Ojs.fun_to_js 2
                                                  (fun (x237 : Ojs.t) ->
                                                     fun (x240 : Ojs.t) ->
                                                       x236
                                                         ?err:(Ojs.option_of_js
                                                                 (fun
                                                                    (x238 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x238)
                                                                 x237)
                                                         ?result:(Ojs.option_of_js
                                                                    readline_CompleterResult_of_js
                                                                    x240) ()))|])
      end
    module CompleterResult =
      struct
        type t = readline_CompleterResult
        let rec t_of_js : Ojs.t -> t =
          fun (x244 : Ojs.t) -> readline_CompleterResult_of_js x244
        and t_to_js : t -> Ojs.t =
          fun (x243 : readline_CompleterResult) ->
            readline_CompleterResult_to_js x243
      end
    module ReadLineOptions =
      struct
        type t = readline_ReadLineOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x246 : Ojs.t) -> readline_ReadLineOptions_of_js x246
        and t_to_js : t -> Ojs.t =
          fun (x245 : readline_ReadLineOptions) ->
            readline_ReadLineOptions_to_js x245
        let (get_input : t -> ReadableStream.t) =
          fun (x247 : t) ->
            ReadableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x247) "input")
        let (set_input : t -> ReadableStream.t -> unit) =
          fun (x248 : t) ->
            fun (x249 : ReadableStream.t) ->
              Ojs.set_prop_ascii (t_to_js x248) "input"
                (ReadableStream.t_to_js x249)
        let (get_output : t -> WritableStream.t) =
          fun (x250 : t) ->
            WritableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x250) "output")
        let (set_output : t -> WritableStream.t -> unit) =
          fun (x251 : t) ->
            fun (x252 : WritableStream.t) ->
              Ojs.set_prop_ascii (t_to_js x251) "output"
                (WritableStream.t_to_js x252)
        let (get_completer :
          t -> (readline_AsyncCompleter, readline_Completer) union2) =
          fun (x253 : t) ->
            union2_of_js readline_AsyncCompleter_of_js
              readline_Completer_of_js
              (Ojs.get_prop_ascii (t_to_js x253) "completer")
        let (set_completer :
          t -> (readline_AsyncCompleter, readline_Completer) union2 -> unit)
          =
          fun (x256 : t) ->
            fun (x257 : (readline_AsyncCompleter, readline_Completer) union2)
              ->
              Ojs.set_prop_ascii (t_to_js x256) "completer"
                (union2_to_js readline_AsyncCompleter_to_js
                   readline_Completer_to_js x257)
        let (get_terminal : t -> bool) =
          fun (x260 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x260) "terminal")
        let (set_terminal : t -> bool -> unit) =
          fun (x261 : t) ->
            fun (x262 : bool) ->
              Ojs.set_prop_ascii (t_to_js x261) "terminal"
                (Ojs.bool_to_js x262)
        let (get_historySize : t -> float) =
          fun (x263 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x263) "historySize")
        let (set_historySize : t -> float -> unit) =
          fun (x264 : t) ->
            fun (x265 : float) ->
              Ojs.set_prop_ascii (t_to_js x264) "historySize"
                (Ojs.float_to_js x265)
        let (get_prompt : t -> string) =
          fun (x266 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x266) "prompt")
        let (set_prompt : t -> string -> unit) =
          fun (x267 : t) ->
            fun (x268 : string) ->
              Ojs.set_prop_ascii (t_to_js x267) "prompt"
                (Ojs.string_to_js x268)
        let (get_crlfDelay : t -> float) =
          fun (x269 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x269) "crlfDelay")
        let (set_crlfDelay : t -> float -> unit) =
          fun (x270 : t) ->
            fun (x271 : float) ->
              Ojs.set_prop_ascii (t_to_js x270) "crlfDelay"
                (Ojs.float_to_js x271)
        let (get_removeHistoryDuplicates : t -> bool) =
          fun (x272 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x272) "removeHistoryDuplicates")
        let (set_removeHistoryDuplicates : t -> bool -> unit) =
          fun (x273 : t) ->
            fun (x274 : bool) ->
              Ojs.set_prop_ascii (t_to_js x273) "removeHistoryDuplicates"
                (Ojs.bool_to_js x274)
        let (get_escapeCodeTimeout : t -> float) =
          fun (x275 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x275) "escapeCodeTimeout")
        let (set_escapeCodeTimeout : t -> float -> unit) =
          fun (x276 : t) ->
            fun (x277 : float) ->
              Ojs.set_prop_ascii (t_to_js x276) "escapeCodeTimeout"
                (Ojs.float_to_js x277)
        let (get_tabSize : t -> float) =
          fun (x278 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x278) "tabSize")
        let (set_tabSize : t -> float -> unit) =
          fun (x279 : t) ->
            fun (x280 : float) ->
              Ojs.set_prop_ascii (t_to_js x279) "tabSize"
                (Ojs.float_to_js x280)
      end
    let (createInterface :
      input:ReadableStream.t ->
        ?output:WritableStream.t ->
          ?completer:(readline_AsyncCompleter, readline_Completer) union2 ->
            ?terminal:bool -> unit -> readline_Interface)
      =
      fun ~input:(x281 : ReadableStream.t) ->
        fun ?output:(x282 : WritableStream.t option) ->
          fun
            ?completer:(x283 :
                         (readline_AsyncCompleter, readline_Completer) union2
                           option)
            ->
            fun ?terminal:(x284 : bool option) ->
              fun () ->
                readline_Interface_of_js
                  (let x291 = Import.readline in
                   Ojs.call (Ojs.get_prop_ascii x291 "createInterface")
                     "apply"
                     [|x291;((let x285 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x285 "push"
                                   [|(ReadableStream.t_to_js x281)|]);
                              (match x282 with
                               | Some x290 ->
                                   ignore
                                     (Ojs.call x285 "push"
                                        [|(WritableStream.t_to_js x290)|])
                               | None -> ());
                              (match x283 with
                               | Some x287 ->
                                   ignore
                                     (Ojs.call x285 "push"
                                        [|(union2_to_js
                                             readline_AsyncCompleter_to_js
                                             readline_Completer_to_js x287)|])
                               | None -> ());
                              (match x284 with
                               | Some x286 ->
                                   ignore
                                     (Ojs.call x285 "push"
                                        [|(Ojs.bool_to_js x286)|])
                               | None -> ());
                              x285))|])
    let (createInterface :
      options:readline_ReadLineOptions -> readline_Interface) =
      fun ~options:(x292 : readline_ReadLineOptions) ->
        readline_Interface_of_js
          (Ojs.call Import.readline "createInterface"
             [|(readline_ReadLineOptions_to_js x292)|])
    let (emitKeypressEvents :
      stream:ReadableStream.t ->
        ?readlineInterface:readline_Interface -> unit -> unit)
      =
      fun ~stream:(x293 : ReadableStream.t) ->
        fun ?readlineInterface:(x294 : readline_Interface option) ->
          fun () ->
            ignore
              (let x297 = Import.readline in
               Ojs.call (Ojs.get_prop_ascii x297 "emitKeypressEvents")
                 "apply"
                 [|x297;((let x295 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x295 "push"
                               [|(ReadableStream.t_to_js x293)|]);
                          (match x294 with
                           | Some x296 ->
                               ignore
                                 (Ojs.call x295 "push"
                                    [|(readline_Interface_to_js x296)|])
                           | None -> ());
                          x295))|])
    module Direction =
      struct
        type t = readline_Direction
        let rec t_of_js : Ojs.t -> t =
          fun (x299 : Ojs.t) -> readline_Direction_of_js x299
        and t_to_js : t -> Ojs.t =
          fun (x298 : readline_Direction) -> readline_Direction_to_js x298
      end
    module CursorPos =
      struct
        type t = readline_CursorPos
        let rec t_of_js : Ojs.t -> t =
          fun (x301 : Ojs.t) -> readline_CursorPos_of_js x301
        and t_to_js : t -> Ojs.t =
          fun (x300 : readline_CursorPos) -> readline_CursorPos_to_js x300
        let (get_rows : t -> float) =
          fun (x302 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x302) "rows")
        let (set_rows : t -> float -> unit) =
          fun (x303 : t) ->
            fun (x304 : float) ->
              Ojs.set_prop_ascii (t_to_js x303) "rows" (Ojs.float_to_js x304)
        let (get_cols : t -> float) =
          fun (x305 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x305) "cols")
        let (set_cols : t -> float -> unit) =
          fun (x306 : t) ->
            fun (x307 : float) ->
              Ojs.set_prop_ascii (t_to_js x306) "cols" (Ojs.float_to_js x307)
      end
    let (clearLine :
      stream:WritableStream.t ->
        dir:readline_Direction -> ?callback:(unit -> unit) -> unit -> bool)
      =
      fun ~stream:(x308 : WritableStream.t) ->
        fun ~dir:(x309 : readline_Direction) ->
          fun ?callback:(x310 : (unit -> unit) option) ->
            fun () ->
              Ojs.bool_of_js
                (let x313 = Import.readline in
                 Ojs.call (Ojs.get_prop_ascii x313 "clearLine") "apply"
                   [|x313;((let x311 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x311 "push"
                                 [|(WritableStream.t_to_js x308)|]);
                            ignore
                              (Ojs.call x311 "push"
                                 [|(readline_Direction_to_js x309)|]);
                            (match x310 with
                             | Some x312 ->
                                 ignore
                                   (Ojs.call x311 "push"
                                      [|(Ojs.fun_to_js 1 (fun _ -> x312 ()))|])
                             | None -> ());
                            x311))|])
    let (clearScreenDown :
      stream:WritableStream.t -> ?callback:(unit -> unit) -> unit -> bool) =
      fun ~stream:(x314 : WritableStream.t) ->
        fun ?callback:(x315 : (unit -> unit) option) ->
          fun () ->
            Ojs.bool_of_js
              (let x318 = Import.readline in
               Ojs.call (Ojs.get_prop_ascii x318 "clearScreenDown") "apply"
                 [|x318;((let x316 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x316 "push"
                               [|(WritableStream.t_to_js x314)|]);
                          (match x315 with
                           | Some x317 ->
                               ignore
                                 (Ojs.call x316 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x317 ()))|])
                           | None -> ());
                          x316))|])
    let (cursorTo :
      stream:WritableStream.t ->
        x:float -> ?y:float -> ?callback:(unit -> unit) -> unit -> bool)
      =
      fun ~stream:(x319 : WritableStream.t) ->
        fun ~x:(x320 : float) ->
          fun ?y:(x321 : float option) ->
            fun ?callback:(x322 : (unit -> unit) option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x326 = Import.readline in
                   Ojs.call (Ojs.get_prop_ascii x326 "cursorTo") "apply"
                     [|x326;((let x323 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x323 "push"
                                   [|(WritableStream.t_to_js x319)|]);
                              ignore
                                (Ojs.call x323 "push"
                                   [|(Ojs.float_to_js x320)|]);
                              (match x321 with
                               | Some x325 ->
                                   ignore
                                     (Ojs.call x323 "push"
                                        [|(Ojs.float_to_js x325)|])
                               | None -> ());
                              (match x322 with
                               | Some x324 ->
                                   ignore
                                     (Ojs.call x323 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x324 ()))|])
                               | None -> ());
                              x323))|])
    let (moveCursor :
      stream:WritableStream.t ->
        dx:float -> dy:float -> ?callback:(unit -> unit) -> unit -> bool)
      =
      fun ~stream:(x327 : WritableStream.t) ->
        fun ~dx:(x328 : float) ->
          fun ~dy:(x329 : float) ->
            fun ?callback:(x330 : (unit -> unit) option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x333 = Import.readline in
                   Ojs.call (Ojs.get_prop_ascii x333 "moveCursor") "apply"
                     [|x333;((let x331 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x331 "push"
                                   [|(WritableStream.t_to_js x327)|]);
                              ignore
                                (Ojs.call x331 "push"
                                   [|(Ojs.float_to_js x328)|]);
                              ignore
                                (Ojs.call x331 "push"
                                   [|(Ojs.float_to_js x329)|]);
                              (match x330 with
                               | Some x332 ->
                                   ignore
                                     (Ojs.call x331 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x332 ()))|])
                               | None -> ());
                              x331))|])
  end
