[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Readline =
  struct
    module Key =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
        and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
        let (get_sequence : t -> string) =
          fun (x3 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3) "sequence")
        let (set_sequence : t -> string -> unit) =
          fun (x4 : t) ->
            fun (x5 : string) ->
              Ojs.set_prop_ascii (t_to_js x4) "sequence"
                (Ojs.string_to_js x5)
        let (get_name : t -> string) =
          fun (x6 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x6) "name")
        let (set_name : t -> string -> unit) =
          fun (x7 : t) ->
            fun (x8 : string) ->
              Ojs.set_prop_ascii (t_to_js x7) "name" (Ojs.string_to_js x8)
        let (get_ctrl : t -> bool) =
          fun (x9 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x9) "ctrl")
        let (set_ctrl : t -> bool -> unit) =
          fun (x10 : t) ->
            fun (x11 : bool) ->
              Ojs.set_prop_ascii (t_to_js x10) "ctrl" (Ojs.bool_to_js x11)
        let (get_meta : t -> bool) =
          fun (x12 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x12) "meta")
        let (set_meta : t -> bool -> unit) =
          fun (x13 : t) ->
            fun (x14 : bool) ->
              Ojs.set_prop_ascii (t_to_js x13) "meta" (Ojs.bool_to_js x14)
        let (get_shift : t -> bool) =
          fun (x15 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x15) "shift")
        let (set_shift : t -> bool -> unit) =
          fun (x16 : t) ->
            fun (x17 : bool) ->
              Ojs.set_prop_ascii (t_to_js x16) "shift" (Ojs.bool_to_js x17)
      end
    module Interface =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x19 : Ojs.t) -> x19
        and t_to_js : t -> Ojs.t = fun (x18 : Ojs.t) -> x18
        let (get_terminal : t -> bool) =
          fun (x20 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x20) "terminal")
        let (get_line : t -> string) =
          fun (x21 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x21) "line")
        let (get_cursor : t -> int) =
          fun (x22 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x22) "cursor")
        let (create :
          input:ReadableStream.t ->
            ?output:WritableStream.t ->
              ?completer:(AsyncCompleter.t, Completer.t) union2 ->
                ?terminal:bool -> unit -> t)
          =
          fun ~input:(x23 : ReadableStream.t) ->
            fun ?output:(x24 : WritableStream.t option) ->
              fun
                ?completer:(x25 :
                             (AsyncCompleter.t, Completer.t) union2 option)
                ->
                fun ?terminal:(x26 : bool option) ->
                  fun () ->
                    t_of_js
                      (Ojs.new_obj_arr
                         (Ojs.get_prop_ascii Import.readline "Interface")
                         (let x27 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x27 "push"
                               [|(ReadableStream.t_to_js x23)|]);
                          (match x24 with
                           | Some x32 ->
                               ignore
                                 (Ojs.call x27 "push"
                                    [|(WritableStream.t_to_js x32)|])
                           | None -> ());
                          (match x25 with
                           | Some x29 ->
                               ignore
                                 (Ojs.call x27 "push"
                                    [|(union2_to_js AsyncCompleter.t_to_js
                                         Completer.t_to_js x29)|])
                           | None -> ());
                          (match x26 with
                           | Some x28 ->
                               ignore
                                 (Ojs.call x27 "push"
                                    [|(Ojs.bool_to_js x28)|])
                           | None -> ());
                          x27))
        let (create' : options:ReadLineOptions.t -> t) =
          fun ~options:(x33 : ReadLineOptions.t) ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.readline "Interface")
                 [|(ReadLineOptions.t_to_js x33)|])
        let (set_prompt : t -> prompt:string -> unit) =
          fun (x35 : t) ->
            fun ~prompt:(x34 : string) ->
              ignore
                (Ojs.call (t_to_js x35) "setPrompt"
                   [|(Ojs.string_to_js x34)|])
        let (prompt : t -> ?preserve_cursor:bool -> unit -> unit) =
          fun (x39 : t) ->
            fun ?preserve_cursor:(x36 : bool option) ->
              fun () ->
                ignore
                  (let x40 = t_to_js x39 in
                   Ojs.call (Ojs.get_prop_ascii x40 "prompt") "apply"
                     [|x40;((let x37 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x36 with
                              | Some x38 ->
                                  ignore
                                    (Ojs.call x37 "push"
                                       [|(Ojs.bool_to_js x38)|])
                              | None -> ());
                             x37))|])
        let (question :
          t -> query:string -> callback:(answer:string -> unit) -> unit) =
          fun (x44 : t) ->
            fun ~query:(x41 : string) ->
              fun ~callback:(x42 : answer:string -> unit) ->
                ignore
                  (Ojs.call (t_to_js x44) "question"
                     [|(Ojs.string_to_js x41);(Ojs.fun_to_js 1
                                                 (fun (x43 : Ojs.t) ->
                                                    x42
                                                      ~answer:(Ojs.string_of_js
                                                                 x43)))|])
        let (pause : t -> t) =
          fun (x45 : t) -> t_of_js (Ojs.call (t_to_js x45) "pause" [||])
        let (resume : t -> t) =
          fun (x46 : t) -> t_of_js (Ojs.call (t_to_js x46) "resume" [||])
        let (close : t -> unit) =
          fun (x47 : t) -> ignore (Ojs.call (t_to_js x47) "close" [||])
        let (write :
          t -> data:Buffer.t or_string -> ?key:Key.t -> unit -> unit) =
          fun (x53 : t) ->
            fun ~data:(x48 : Buffer.t or_string) ->
              fun ?key:(x49 : Key.t option) ->
                fun () ->
                  ignore
                    (let x54 = t_to_js x53 in
                     Ojs.call (Ojs.get_prop_ascii x54 "write") "apply"
                       [|x54;((let x50 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x50 "push"
                                    [|(or_string_to_js Buffer.t_to_js x48)|]);
                               (match x49 with
                                | Some x51 ->
                                    ignore
                                      (Ojs.call x50 "push"
                                         [|(Key.t_to_js x51)|])
                                | None -> ());
                               x50))|])
        let (get_cursor_pos : t -> CursorPos.t) =
          fun (x55 : t) ->
            CursorPos.t_of_js (Ojs.call (t_to_js x55) "getCursorPos" [||])
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x60 : t) ->
            fun ~event:(x56 : string) ->
              fun ~listener:(x57 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x60) "addListener"
                     [|(Ojs.string_to_js x56);(Ojs.fun_to_js_args
                                                 (fun (x58 : _) ->
                                                    x57
                                                      ~args:(Ojs.list_of_js_from
                                                               any_of_js x58
                                                               0)))|])
        let (add_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x63 : t) ->
            fun ~event:(x61 : [ `close ]) ->
              fun ~listener:(x62 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x63) "addListener"
                     [|((match x61 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x62 ()))|])
        let (add_listener'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x67 : t) ->
            fun ~event:(x64 : [ `line ]) ->
              fun ~listener:(x65 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x67) "addListener"
                     [|((match x64 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x66 : Ojs.t) ->
                            x65 ~input:(Ojs.string_of_js x66)))|])
        let (add_listener''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x70 : t) ->
            fun ~event:(x68 : [ `pause ]) ->
              fun ~listener:(x69 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x70) "addListener"
                     [|((match x68 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x69 ()))|])
        let (add_listener'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x73 : t) ->
            fun ~event:(x71 : [ `resume ]) ->
              fun ~listener:(x72 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x73) "addListener"
                     [|((match x71 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x72 ()))|])
        let (add_listener''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x76 : t) ->
            fun ~event:(x74 : [ `SIGCONT ]) ->
              fun ~listener:(x75 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x76) "addListener"
                     [|((match x74 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x75 ()))|])
        let (add_listener'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x79 : t) ->
            fun ~event:(x77 : [ `SIGINT ]) ->
              fun ~listener:(x78 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x79) "addListener"
                     [|((match x77 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x78 ()))|])
        let (add_listener''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x82 : t) ->
            fun ~event:(x80 : [ `SIGTSTP ]) ->
              fun ~listener:(x81 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x82) "addListener"
                     [|((match x80 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x81 ()))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x88 : t) ->
            fun ~event:(x83 : symbol or_string) ->
              fun ~args:(x84 : any list) ->
                Ojs.bool_of_js
                  (let x89 = t_to_js x88 in
                   Ojs.call (Ojs.get_prop_ascii x89 "emit") "apply"
                     [|x89;((let x85 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore
                               (Ojs.call x85 "push"
                                  [|(or_string_to_js symbol_to_js x83)|]);
                             List.iter
                               (fun (x86 : any) ->
                                  ignore
                                    (Ojs.call x85 "push" [|(any_to_js x86)|]))
                               x84;
                             x85))|])
        let (emit' : t -> event:[ `close ] -> bool) =
          fun (x91 : t) ->
            fun ~event:(x90 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x91) "emit"
                   [|((match x90 with | `close -> Ojs.string_to_js "close"))|])
        let (emit'' : t -> event:[ `line ] -> input:string -> bool) =
          fun (x94 : t) ->
            fun ~event:(x92 : [ `line ]) ->
              fun ~input:(x93 : string) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x94) "emit"
                     [|((match x92 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.string_to_js x93)|])
        let (emit''' : t -> event:[ `pause ] -> bool) =
          fun (x96 : t) ->
            fun ~event:(x95 : [ `pause ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x96) "emit"
                   [|((match x95 with | `pause -> Ojs.string_to_js "pause"))|])
        let (emit'''' : t -> event:[ `resume ] -> bool) =
          fun (x98 : t) ->
            fun ~event:(x97 : [ `resume ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x98) "emit"
                   [|((match x97 with | `resume -> Ojs.string_to_js "resume"))|])
        let (emit''''' : t -> event:[ `SIGCONT ] -> bool) =
          fun (x100 : t) ->
            fun ~event:(x99 : [ `SIGCONT ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x100) "emit"
                   [|((match x99 with
                       | `SIGCONT -> Ojs.string_to_js "SIGCONT"))|])
        let (emit'''''' : t -> event:[ `SIGINT ] -> bool) =
          fun (x102 : t) ->
            fun ~event:(x101 : [ `SIGINT ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x102) "emit"
                   [|((match x101 with | `SIGINT -> Ojs.string_to_js "SIGINT"))|])
        let (emit''''''' : t -> event:[ `SIGTSTP ] -> bool) =
          fun (x104 : t) ->
            fun ~event:(x103 : [ `SIGTSTP ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x104) "emit"
                   [|((match x103 with
                       | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"))|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x109 : t) ->
            fun ~event:(x105 : string) ->
              fun ~listener:(x106 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x109) "on"
                     [|(Ojs.string_to_js x105);(Ojs.fun_to_js_args
                                                  (fun (x107 : _) ->
                                                     x106
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x107 0)))|])
        let (on' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x112 : t) ->
            fun ~event:(x110 : [ `close ]) ->
              fun ~listener:(x111 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x112) "on"
                     [|((match x110 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x111 ()))|])
        let (on'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x116 : t) ->
            fun ~event:(x113 : [ `line ]) ->
              fun ~listener:(x114 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x116) "on"
                     [|((match x113 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x115 : Ojs.t) ->
                            x114 ~input:(Ojs.string_of_js x115)))|])
        let (on''' : t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x119 : t) ->
            fun ~event:(x117 : [ `pause ]) ->
              fun ~listener:(x118 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x119) "on"
                     [|((match x117 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x118 ()))|])
        let (on'''' : t -> event:[ `resume ] -> listener:(unit -> unit) -> t)
          =
          fun (x122 : t) ->
            fun ~event:(x120 : [ `resume ]) ->
              fun ~listener:(x121 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x122) "on"
                     [|((match x120 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x121 ()))|])
        let (on''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x125 : t) ->
            fun ~event:(x123 : [ `SIGCONT ]) ->
              fun ~listener:(x124 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x125) "on"
                     [|((match x123 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x124 ()))|])
        let (on'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x128 : t) ->
            fun ~event:(x126 : [ `SIGINT ]) ->
              fun ~listener:(x127 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x128) "on"
                     [|((match x126 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x127 ()))|])
        let (on''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x131 : t) ->
            fun ~event:(x129 : [ `SIGTSTP ]) ->
              fun ~listener:(x130 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x131) "on"
                     [|((match x129 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x130 ()))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x136 : t) ->
            fun ~event:(x132 : string) ->
              fun ~listener:(x133 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x136) "once"
                     [|(Ojs.string_to_js x132);(Ojs.fun_to_js_args
                                                  (fun (x134 : _) ->
                                                     x133
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x134 0)))|])
        let (once' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x139 : t) ->
            fun ~event:(x137 : [ `close ]) ->
              fun ~listener:(x138 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x139) "once"
                     [|((match x137 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x138 ()))|])
        let (once'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x143 : t) ->
            fun ~event:(x140 : [ `line ]) ->
              fun ~listener:(x141 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x143) "once"
                     [|((match x140 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x142 : Ojs.t) ->
                            x141 ~input:(Ojs.string_of_js x142)))|])
        let (once''' : t -> event:[ `pause ] -> listener:(unit -> unit) -> t)
          =
          fun (x146 : t) ->
            fun ~event:(x144 : [ `pause ]) ->
              fun ~listener:(x145 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x146) "once"
                     [|((match x144 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x145 ()))|])
        let (once'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x149 : t) ->
            fun ~event:(x147 : [ `resume ]) ->
              fun ~listener:(x148 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x149) "once"
                     [|((match x147 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x148 ()))|])
        let (once''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x152 : t) ->
            fun ~event:(x150 : [ `SIGCONT ]) ->
              fun ~listener:(x151 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x152) "once"
                     [|((match x150 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x151 ()))|])
        let (once'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x155 : t) ->
            fun ~event:(x153 : [ `SIGINT ]) ->
              fun ~listener:(x154 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x155) "once"
                     [|((match x153 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x154 ()))|])
        let (once''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x158 : t) ->
            fun ~event:(x156 : [ `SIGTSTP ]) ->
              fun ~listener:(x157 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x158) "once"
                     [|((match x156 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x157 ()))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x163 : t) ->
            fun ~event:(x159 : string) ->
              fun ~listener:(x160 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x163) "prependListener"
                     [|(Ojs.string_to_js x159);(Ojs.fun_to_js_args
                                                  (fun (x161 : _) ->
                                                     x160
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x161 0)))|])
        let (prepend_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x166 : t) ->
            fun ~event:(x164 : [ `close ]) ->
              fun ~listener:(x165 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x166) "prependListener"
                     [|((match x164 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x165 ()))|])
        let (prepend_listener'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x170 : t) ->
            fun ~event:(x167 : [ `line ]) ->
              fun ~listener:(x168 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x170) "prependListener"
                     [|((match x167 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x169 : Ojs.t) ->
                            x168 ~input:(Ojs.string_of_js x169)))|])
        let (prepend_listener''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x173 : t) ->
            fun ~event:(x171 : [ `pause ]) ->
              fun ~listener:(x172 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x173) "prependListener"
                     [|((match x171 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x172 ()))|])
        let (prepend_listener'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x176 : t) ->
            fun ~event:(x174 : [ `resume ]) ->
              fun ~listener:(x175 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x176) "prependListener"
                     [|((match x174 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x175 ()))|])
        let (prepend_listener''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x179 : t) ->
            fun ~event:(x177 : [ `SIGCONT ]) ->
              fun ~listener:(x178 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x179) "prependListener"
                     [|((match x177 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x178 ()))|])
        let (prepend_listener'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x182 : t) ->
            fun ~event:(x180 : [ `SIGINT ]) ->
              fun ~listener:(x181 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x182) "prependListener"
                     [|((match x180 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x181 ()))|])
        let (prepend_listener''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x185 : t) ->
            fun ~event:(x183 : [ `SIGTSTP ]) ->
              fun ~listener:(x184 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x185) "prependListener"
                     [|((match x183 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x184 ()))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x190 : t) ->
            fun ~event:(x186 : string) ->
              fun ~listener:(x187 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x190) "prependOnceListener"
                     [|(Ojs.string_to_js x186);(Ojs.fun_to_js_args
                                                  (fun (x188 : _) ->
                                                     x187
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x188 0)))|])
        let (prepend_once_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x193 : t) ->
            fun ~event:(x191 : [ `close ]) ->
              fun ~listener:(x192 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x193) "prependOnceListener"
                     [|((match x191 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x192 ()))|])
        let (prepend_once_listener'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x197 : t) ->
            fun ~event:(x194 : [ `line ]) ->
              fun ~listener:(x195 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x197) "prependOnceListener"
                     [|((match x194 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x196 : Ojs.t) ->
                            x195 ~input:(Ojs.string_of_js x196)))|])
        let (prepend_once_listener''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x200 : t) ->
            fun ~event:(x198 : [ `pause ]) ->
              fun ~listener:(x199 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x200) "prependOnceListener"
                     [|((match x198 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x199 ()))|])
        let (prepend_once_listener'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x203 : t) ->
            fun ~event:(x201 : [ `resume ]) ->
              fun ~listener:(x202 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x203) "prependOnceListener"
                     [|((match x201 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x202 ()))|])
        let (prepend_once_listener''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x206 : t) ->
            fun ~event:(x204 : [ `SIGCONT ]) ->
              fun ~listener:(x205 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x206) "prependOnceListener"
                     [|((match x204 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x205 ()))|])
        let (prepend_once_listener'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x209 : t) ->
            fun ~event:(x207 : [ `SIGINT ]) ->
              fun ~listener:(x208 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x209) "prependOnceListener"
                     [|((match x207 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x208 ()))|])
        let (prepend_once_listener''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x212 : t) ->
            fun ~event:(x210 : [ `SIGTSTP ]) ->
              fun ~listener:(x211 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x212) "prependOnceListener"
                     [|((match x210 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x211 ()))|])
        let (cast : t -> Node_events.Events.EventEmitter.t) =
          fun (x213 : t) ->
            Node_events.Events.EventEmitter.t_of_js (t_to_js x213)
      end
    module ReadLine =
      struct
        type t = Interface.t
        let rec t_of_js : Ojs.t -> t =
          fun (x215 : Ojs.t) -> Interface.t_of_js x215
        and t_to_js : t -> Ojs.t =
          fun (x214 : Interface.t) -> Interface.t_to_js x214
      end
    module Completer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x217 : Ojs.t) -> x217
        and t_to_js : t -> Ojs.t = fun (x216 : Ojs.t) -> x216
        let (apply : t -> line:string -> CompleterResult.t) =
          fun (x219 : t) ->
            fun ~line:(x218 : string) ->
              CompleterResult.t_of_js
                (Ojs.apply (t_to_js x219) [|(Ojs.string_to_js x218)|])
      end
    module AsyncCompleter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x221 : Ojs.t) -> x221
        and t_to_js : t -> Ojs.t = fun (x220 : Ojs.t) -> x220
        let (apply :
          t ->
            line:string ->
              callback:(?err:Error.t or_null ->
                          ?result:CompleterResult.t -> unit -> unit)
                -> any)
          =
          fun (x229 : t) ->
            fun ~line:(x222 : string) ->
              fun
                ~callback:(x223 :
                            ?err:Error.t or_null ->
                              ?result:CompleterResult.t -> unit -> unit)
                ->
                any_of_js
                  (Ojs.apply (t_to_js x229)
                     [|(Ojs.string_to_js x222);(Ojs.fun_to_js 2
                                                  (fun (x224 : Ojs.t) ->
                                                     fun (x227 : Ojs.t) ->
                                                       x223
                                                         ?err:(Ojs.option_of_js
                                                                 (fun
                                                                    (x225 :
                                                                    Ojs.t) ->
                                                                    or_null_of_js
                                                                    Error.t_of_js
                                                                    x225)
                                                                 x224)
                                                         ?result:(Ojs.option_of_js
                                                                    CompleterResult.t_of_js
                                                                    x227) ()))|])
      end
    module CompleterResult =
      struct
        type t = (string list * string)
        let rec t_of_js : Ojs.t -> t =
          fun (x235 : Ojs.t) ->
            let x236 = x235 in
            ((Ojs.list_of_js Ojs.string_of_js (Ojs.array_get x236 0)),
              (Ojs.string_of_js (Ojs.array_get x236 1)))
        and t_to_js : t -> Ojs.t =
          fun (x230 : (string list * string)) ->
            let (x231, x232) = x230 in
            let x233 = Ojs.array_make 2 in
            Ojs.array_set x233 0 (Ojs.list_to_js Ojs.string_to_js x231);
            Ojs.array_set x233 1 (Ojs.string_to_js x232);
            x233
      end
    module ReadLineOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x239 : Ojs.t) -> x239
        and t_to_js : t -> Ojs.t = fun (x238 : Ojs.t) -> x238
        let (get_input : t -> ReadableStream.t) =
          fun (x240 : t) ->
            ReadableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x240) "input")
        let (set_input : t -> ReadableStream.t -> unit) =
          fun (x241 : t) ->
            fun (x242 : ReadableStream.t) ->
              Ojs.set_prop_ascii (t_to_js x241) "input"
                (ReadableStream.t_to_js x242)
        let (get_output : t -> WritableStream.t) =
          fun (x243 : t) ->
            WritableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x243) "output")
        let (set_output : t -> WritableStream.t -> unit) =
          fun (x244 : t) ->
            fun (x245 : WritableStream.t) ->
              Ojs.set_prop_ascii (t_to_js x244) "output"
                (WritableStream.t_to_js x245)
        let (get_completer : t -> (AsyncCompleter.t, Completer.t) union2) =
          fun (x246 : t) ->
            union2_of_js AsyncCompleter.t_of_js Completer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x246) "completer")
        let (set_completer :
          t -> (AsyncCompleter.t, Completer.t) union2 -> unit) =
          fun (x249 : t) ->
            fun (x250 : (AsyncCompleter.t, Completer.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x249) "completer"
                (union2_to_js AsyncCompleter.t_to_js Completer.t_to_js x250)
        let (get_terminal : t -> bool) =
          fun (x253 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x253) "terminal")
        let (set_terminal : t -> bool -> unit) =
          fun (x254 : t) ->
            fun (x255 : bool) ->
              Ojs.set_prop_ascii (t_to_js x254) "terminal"
                (Ojs.bool_to_js x255)
        let (get_history_size : t -> int) =
          fun (x256 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x256) "historySize")
        let (set_history_size : t -> int -> unit) =
          fun (x257 : t) ->
            fun (x258 : int) ->
              Ojs.set_prop_ascii (t_to_js x257) "historySize"
                (Ojs.int_to_js x258)
        let (get_prompt : t -> string) =
          fun (x259 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x259) "prompt")
        let (set_prompt : t -> string -> unit) =
          fun (x260 : t) ->
            fun (x261 : string) ->
              Ojs.set_prop_ascii (t_to_js x260) "prompt"
                (Ojs.string_to_js x261)
        let (get_crlf_delay : t -> int) =
          fun (x262 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x262) "crlfDelay")
        let (set_crlf_delay : t -> int -> unit) =
          fun (x263 : t) ->
            fun (x264 : int) ->
              Ojs.set_prop_ascii (t_to_js x263) "crlfDelay"
                (Ojs.int_to_js x264)
        let (get_remove_history_duplicates : t -> bool) =
          fun (x265 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x265) "removeHistoryDuplicates")
        let (set_remove_history_duplicates : t -> bool -> unit) =
          fun (x266 : t) ->
            fun (x267 : bool) ->
              Ojs.set_prop_ascii (t_to_js x266) "removeHistoryDuplicates"
                (Ojs.bool_to_js x267)
        let (get_escape_code_timeout : t -> int) =
          fun (x268 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x268) "escapeCodeTimeout")
        let (set_escape_code_timeout : t -> int -> unit) =
          fun (x269 : t) ->
            fun (x270 : int) ->
              Ojs.set_prop_ascii (t_to_js x269) "escapeCodeTimeout"
                (Ojs.int_to_js x270)
        let (get_tab_size : t -> int) =
          fun (x271 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x271) "tabSize")
        let (set_tab_size : t -> int -> unit) =
          fun (x272 : t) ->
            fun (x273 : int) ->
              Ojs.set_prop_ascii (t_to_js x272) "tabSize"
                (Ojs.int_to_js x273)
      end
    let (create_interface :
      input:ReadableStream.t ->
        ?output:WritableStream.t ->
          ?completer:(AsyncCompleter.t, Completer.t) union2 ->
            ?terminal:bool -> unit -> Interface.t)
      =
      fun ~input:(x274 : ReadableStream.t) ->
        fun ?output:(x275 : WritableStream.t option) ->
          fun
            ?completer:(x276 : (AsyncCompleter.t, Completer.t) union2 option)
            ->
            fun ?terminal:(x277 : bool option) ->
              fun () ->
                Interface.t_of_js
                  (let x284 = Import.readline in
                   Ojs.call (Ojs.get_prop_ascii x284 "createInterface")
                     "apply"
                     [|x284;((let x278 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x278 "push"
                                   [|(ReadableStream.t_to_js x274)|]);
                              (match x275 with
                               | Some x283 ->
                                   ignore
                                     (Ojs.call x278 "push"
                                        [|(WritableStream.t_to_js x283)|])
                               | None -> ());
                              (match x276 with
                               | Some x280 ->
                                   ignore
                                     (Ojs.call x278 "push"
                                        [|(union2_to_js
                                             AsyncCompleter.t_to_js
                                             Completer.t_to_js x280)|])
                               | None -> ());
                              (match x277 with
                               | Some x279 ->
                                   ignore
                                     (Ojs.call x278 "push"
                                        [|(Ojs.bool_to_js x279)|])
                               | None -> ());
                              x278))|])
    let (create_interface : options:ReadLineOptions.t -> Interface.t) =
      fun ~options:(x285 : ReadLineOptions.t) ->
        Interface.t_of_js
          (Ojs.call Import.readline "createInterface"
             [|(ReadLineOptions.t_to_js x285)|])
    let (emit_keypress_events :
      stream:ReadableStream.t ->
        ?readline_interface:Interface.t -> unit -> unit)
      =
      fun ~stream:(x286 : ReadableStream.t) ->
        fun ?readline_interface:(x287 : Interface.t option) ->
          fun () ->
            ignore
              (let x290 = Import.readline in
               Ojs.call (Ojs.get_prop_ascii x290 "emitKeypressEvents")
                 "apply"
                 [|x290;((let x288 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x288 "push"
                               [|(ReadableStream.t_to_js x286)|]);
                          (match x287 with
                           | Some x289 ->
                               ignore
                                 (Ojs.call x288 "push"
                                    [|(Interface.t_to_js x289)|])
                           | None -> ());
                          x288))|])
    module Direction =
      struct
        type t = [ `L_n_minus1  | `L_n_0  | `L_n_1 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x292 : Ojs.t) ->
            let x293 = x292 in
            match Ojs.int_of_js x293 with
            | (-1) -> `L_n_minus1
            | 0 -> `L_n_0
            | 1 -> `L_n_1
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x291 : [ `L_n_minus1  | `L_n_0  | `L_n_1 ]) ->
            match x291 with
            | `L_n_minus1 -> Ojs.int_to_js (-1)
            | `L_n_0 -> Ojs.int_to_js 0
            | `L_n_1 -> Ojs.int_to_js 1
      end
    module CursorPos =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x295 : Ojs.t) -> x295
        and t_to_js : t -> Ojs.t = fun (x294 : Ojs.t) -> x294
        let (get_rows : t -> int) =
          fun (x296 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x296) "rows")
        let (set_rows : t -> int -> unit) =
          fun (x297 : t) ->
            fun (x298 : int) ->
              Ojs.set_prop_ascii (t_to_js x297) "rows" (Ojs.int_to_js x298)
        let (get_cols : t -> int) =
          fun (x299 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x299) "cols")
        let (set_cols : t -> int -> unit) =
          fun (x300 : t) ->
            fun (x301 : int) ->
              Ojs.set_prop_ascii (t_to_js x300) "cols" (Ojs.int_to_js x301)
      end
    let (clear_line :
      stream:WritableStream.t ->
        dir:Direction.t -> ?callback:(unit -> unit) -> unit -> bool)
      =
      fun ~stream:(x302 : WritableStream.t) ->
        fun ~dir:(x303 : Direction.t) ->
          fun ?callback:(x304 : (unit -> unit) option) ->
            fun () ->
              Ojs.bool_of_js
                (let x307 = Import.readline in
                 Ojs.call (Ojs.get_prop_ascii x307 "clearLine") "apply"
                   [|x307;((let x305 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x305 "push"
                                 [|(WritableStream.t_to_js x302)|]);
                            ignore
                              (Ojs.call x305 "push"
                                 [|(Direction.t_to_js x303)|]);
                            (match x304 with
                             | Some x306 ->
                                 ignore
                                   (Ojs.call x305 "push"
                                      [|(Ojs.fun_to_js 1 (fun _ -> x306 ()))|])
                             | None -> ());
                            x305))|])
    let (clear_screen_down :
      stream:WritableStream.t -> ?callback:(unit -> unit) -> unit -> bool) =
      fun ~stream:(x308 : WritableStream.t) ->
        fun ?callback:(x309 : (unit -> unit) option) ->
          fun () ->
            Ojs.bool_of_js
              (let x312 = Import.readline in
               Ojs.call (Ojs.get_prop_ascii x312 "clearScreenDown") "apply"
                 [|x312;((let x310 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x310 "push"
                               [|(WritableStream.t_to_js x308)|]);
                          (match x309 with
                           | Some x311 ->
                               ignore
                                 (Ojs.call x310 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x311 ()))|])
                           | None -> ());
                          x310))|])
    let (cursor_to :
      stream:WritableStream.t ->
        x:int -> ?y:int -> ?callback:(unit -> unit) -> unit -> bool)
      =
      fun ~stream:(x313 : WritableStream.t) ->
        fun ~x:(x314 : int) ->
          fun ?y:(x315 : int option) ->
            fun ?callback:(x316 : (unit -> unit) option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x320 = Import.readline in
                   Ojs.call (Ojs.get_prop_ascii x320 "cursorTo") "apply"
                     [|x320;((let x317 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x317 "push"
                                   [|(WritableStream.t_to_js x313)|]);
                              ignore
                                (Ojs.call x317 "push"
                                   [|(Ojs.int_to_js x314)|]);
                              (match x315 with
                               | Some x319 ->
                                   ignore
                                     (Ojs.call x317 "push"
                                        [|(Ojs.int_to_js x319)|])
                               | None -> ());
                              (match x316 with
                               | Some x318 ->
                                   ignore
                                     (Ojs.call x317 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x318 ()))|])
                               | None -> ());
                              x317))|])
    let (move_cursor :
      stream:WritableStream.t ->
        dx:int -> dy:int -> ?callback:(unit -> unit) -> unit -> bool)
      =
      fun ~stream:(x321 : WritableStream.t) ->
        fun ~dx:(x322 : int) ->
          fun ~dy:(x323 : int) ->
            fun ?callback:(x324 : (unit -> unit) option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x327 = Import.readline in
                   Ojs.call (Ojs.get_prop_ascii x327 "moveCursor") "apply"
                     [|x327;((let x325 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x325 "push"
                                   [|(WritableStream.t_to_js x321)|]);
                              ignore
                                (Ojs.call x325 "push"
                                   [|(Ojs.int_to_js x322)|]);
                              ignore
                                (Ojs.call x325 "push"
                                   [|(Ojs.int_to_js x323)|]);
                              (match x324 with
                               | Some x326 ->
                                   ignore
                                     (Ojs.call x325 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x326 ()))|])
                               | None -> ());
                              x325))|])
  end
