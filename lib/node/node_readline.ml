[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Readline =
  struct
    module Key =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
        and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
        let (get_sequence : t -> string) =
          fun (x3 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3) "sequence")
        let (set_sequence : t -> string -> unit) =
          fun (x4 : t) ->
            fun (x5 : string) ->
              Ojs.set_prop_ascii (t_to_js x4) "sequence"
                (Ojs.string_to_js x5)
        let (get_name : t -> string) =
          fun (x6 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x6) "name")
        let (set_name : t -> string -> unit) =
          fun (x7 : t) ->
            fun (x8 : string) ->
              Ojs.set_prop_ascii (t_to_js x7) "name" (Ojs.string_to_js x8)
        let (get_ctrl : t -> bool) =
          fun (x9 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x9) "ctrl")
        let (set_ctrl : t -> bool -> unit) =
          fun (x10 : t) ->
            fun (x11 : bool) ->
              Ojs.set_prop_ascii (t_to_js x10) "ctrl" (Ojs.bool_to_js x11)
        let (get_meta : t -> bool) =
          fun (x12 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x12) "meta")
        let (set_meta : t -> bool -> unit) =
          fun (x13 : t) ->
            fun (x14 : bool) ->
              Ojs.set_prop_ascii (t_to_js x13) "meta" (Ojs.bool_to_js x14)
        let (get_shift : t -> bool) =
          fun (x15 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x15) "shift")
        let (set_shift : t -> bool -> unit) =
          fun (x16 : t) ->
            fun (x17 : bool) ->
              Ojs.set_prop_ascii (t_to_js x16) "shift" (Ojs.bool_to_js x17)
      end
    module CompleterResult =
      struct
        type t = (string list * string)
        let rec t_of_js : Ojs.t -> t =
          fun (x23 : Ojs.t) ->
            let x24 = x23 in
            ((Ojs.list_of_js Ojs.string_of_js (Ojs.array_get x24 0)),
              (Ojs.string_of_js (Ojs.array_get x24 1)))
        and t_to_js : t -> Ojs.t =
          fun (x18 : (string list * string)) ->
            let (x19, x20) = x18 in
            let x21 = Ojs.array_make 2 in
            Ojs.array_set x21 0 (Ojs.list_to_js Ojs.string_to_js x19);
            Ojs.array_set x21 1 (Ojs.string_to_js x20);
            x21
      end
    module AsyncCompleter =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x27 : Ojs.t) -> x27
        and t_to_js : t -> Ojs.t = fun (x26 : Ojs.t) -> x26
        let (apply :
          t ->
            line:string ->
              callback:(?err:Error.t or_null ->
                          ?result:CompleterResult.t -> unit -> unit)
                -> any)
          =
          fun (x35 : t) ->
            fun ~line:(x28 : string) ->
              fun
                ~callback:(x29 :
                            ?err:Error.t or_null ->
                              ?result:CompleterResult.t -> unit -> unit)
                ->
                any_of_js
                  (Ojs.apply (t_to_js x35)
                     [|(Ojs.string_to_js x28);(Ojs.fun_to_js 2
                                                 (fun (x30 : Ojs.t) ->
                                                    fun (x33 : Ojs.t) ->
                                                      x29
                                                        ?err:(Ojs.option_of_js
                                                                (fun
                                                                   (x31 :
                                                                    Ojs.t)
                                                                   ->
                                                                   or_null_of_js
                                                                    Error.t_of_js
                                                                    x31) x30)
                                                        ?result:(Ojs.option_of_js
                                                                   CompleterResult.t_of_js
                                                                   x33) ()))|])
      end
    module Completer =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x37 : Ojs.t) -> x37
        and t_to_js : t -> Ojs.t = fun (x36 : Ojs.t) -> x36
        let (apply : t -> line:string -> CompleterResult.t) =
          fun (x39 : t) ->
            fun ~line:(x38 : string) ->
              CompleterResult.t_of_js
                (Ojs.apply (t_to_js x39) [|(Ojs.string_to_js x38)|])
      end
    module ReadLineOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x41 : Ojs.t) -> x41
        and t_to_js : t -> Ojs.t = fun (x40 : Ojs.t) -> x40
        let (get_input : t -> ReadableStream.t) =
          fun (x42 : t) ->
            ReadableStream.t_of_js (Ojs.get_prop_ascii (t_to_js x42) "input")
        let (set_input : t -> ReadableStream.t -> unit) =
          fun (x43 : t) ->
            fun (x44 : ReadableStream.t) ->
              Ojs.set_prop_ascii (t_to_js x43) "input"
                (ReadableStream.t_to_js x44)
        let (get_output : t -> WritableStream.t) =
          fun (x45 : t) ->
            WritableStream.t_of_js
              (Ojs.get_prop_ascii (t_to_js x45) "output")
        let (set_output : t -> WritableStream.t -> unit) =
          fun (x46 : t) ->
            fun (x47 : WritableStream.t) ->
              Ojs.set_prop_ascii (t_to_js x46) "output"
                (WritableStream.t_to_js x47)
        let (get_completer : t -> (AsyncCompleter.t, Completer.t) union2) =
          fun (x48 : t) ->
            union2_of_js AsyncCompleter.t_of_js Completer.t_of_js
              (Ojs.get_prop_ascii (t_to_js x48) "completer")
        let (set_completer :
          t -> (AsyncCompleter.t, Completer.t) union2 -> unit) =
          fun (x51 : t) ->
            fun (x52 : (AsyncCompleter.t, Completer.t) union2) ->
              Ojs.set_prop_ascii (t_to_js x51) "completer"
                (union2_to_js AsyncCompleter.t_to_js Completer.t_to_js x52)
        let (get_terminal : t -> bool) =
          fun (x55 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x55) "terminal")
        let (set_terminal : t -> bool -> unit) =
          fun (x56 : t) ->
            fun (x57 : bool) ->
              Ojs.set_prop_ascii (t_to_js x56) "terminal"
                (Ojs.bool_to_js x57)
        let (get_history_size : t -> int) =
          fun (x58 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x58) "historySize")
        let (set_history_size : t -> int -> unit) =
          fun (x59 : t) ->
            fun (x60 : int) ->
              Ojs.set_prop_ascii (t_to_js x59) "historySize"
                (Ojs.int_to_js x60)
        let (get_prompt : t -> string) =
          fun (x61 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x61) "prompt")
        let (set_prompt : t -> string -> unit) =
          fun (x62 : t) ->
            fun (x63 : string) ->
              Ojs.set_prop_ascii (t_to_js x62) "prompt"
                (Ojs.string_to_js x63)
        let (get_crlf_delay : t -> int) =
          fun (x64 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x64) "crlfDelay")
        let (set_crlf_delay : t -> int -> unit) =
          fun (x65 : t) ->
            fun (x66 : int) ->
              Ojs.set_prop_ascii (t_to_js x65) "crlfDelay"
                (Ojs.int_to_js x66)
        let (get_remove_history_duplicates : t -> bool) =
          fun (x67 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x67) "removeHistoryDuplicates")
        let (set_remove_history_duplicates : t -> bool -> unit) =
          fun (x68 : t) ->
            fun (x69 : bool) ->
              Ojs.set_prop_ascii (t_to_js x68) "removeHistoryDuplicates"
                (Ojs.bool_to_js x69)
        let (get_escape_code_timeout : t -> int) =
          fun (x70 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x70) "escapeCodeTimeout")
        let (set_escape_code_timeout : t -> int -> unit) =
          fun (x71 : t) ->
            fun (x72 : int) ->
              Ojs.set_prop_ascii (t_to_js x71) "escapeCodeTimeout"
                (Ojs.int_to_js x72)
        let (get_tab_size : t -> int) =
          fun (x73 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x73) "tabSize")
        let (set_tab_size : t -> int -> unit) =
          fun (x74 : t) ->
            fun (x75 : int) ->
              Ojs.set_prop_ascii (t_to_js x74) "tabSize" (Ojs.int_to_js x75)
      end
    module Direction =
      struct
        type t = [ `L_n_minus1  | `L_n_0  | `L_n_1 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x77 : Ojs.t) ->
            let x78 = x77 in
            match Ojs.int_of_js x78 with
            | (-1) -> `L_n_minus1
            | 0 -> `L_n_0
            | 1 -> `L_n_1
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x76 : [ `L_n_minus1  | `L_n_0  | `L_n_1 ]) ->
            match x76 with
            | `L_n_minus1 -> Ojs.int_to_js (-1)
            | `L_n_0 -> Ojs.int_to_js 0
            | `L_n_1 -> Ojs.int_to_js 1
      end
    module CursorPos =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x80 : Ojs.t) -> x80
        and t_to_js : t -> Ojs.t = fun (x79 : Ojs.t) -> x79
        let (get_rows : t -> int) =
          fun (x81 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x81) "rows")
        let (set_rows : t -> int -> unit) =
          fun (x82 : t) ->
            fun (x83 : int) ->
              Ojs.set_prop_ascii (t_to_js x82) "rows" (Ojs.int_to_js x83)
        let (get_cols : t -> int) =
          fun (x84 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x84) "cols")
        let (set_cols : t -> int -> unit) =
          fun (x85 : t) ->
            fun (x86 : int) ->
              Ojs.set_prop_ascii (t_to_js x85) "cols" (Ojs.int_to_js x86)
      end
    module Interface =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x88 : Ojs.t) -> x88
        and t_to_js : t -> Ojs.t = fun (x87 : Ojs.t) -> x87
        let (get_terminal : t -> bool) =
          fun (x89 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x89) "terminal")
        let (get_line : t -> string) =
          fun (x90 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x90) "line")
        let (get_cursor : t -> int) =
          fun (x91 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x91) "cursor")
        let (create :
          input:ReadableStream.t ->
            ?output:WritableStream.t ->
              ?completer:(AsyncCompleter.t, Completer.t) union2 ->
                ?terminal:bool -> unit -> t)
          =
          fun ~input:(x92 : ReadableStream.t) ->
            fun ?output:(x93 : WritableStream.t option) ->
              fun
                ?completer:(x94 :
                             (AsyncCompleter.t, Completer.t) union2 option)
                ->
                fun ?terminal:(x95 : bool option) ->
                  fun () ->
                    t_of_js
                      (Ojs.new_obj_arr
                         (Ojs.get_prop_ascii Import.readline "Interface")
                         (let x96 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x96 "push"
                               [|(ReadableStream.t_to_js x92)|]);
                          (match x93 with
                           | Some x101 ->
                               ignore
                                 (Ojs.call x96 "push"
                                    [|(WritableStream.t_to_js x101)|])
                           | None -> ());
                          (match x94 with
                           | Some x98 ->
                               ignore
                                 (Ojs.call x96 "push"
                                    [|(union2_to_js AsyncCompleter.t_to_js
                                         Completer.t_to_js x98)|])
                           | None -> ());
                          (match x95 with
                           | Some x97 ->
                               ignore
                                 (Ojs.call x96 "push"
                                    [|(Ojs.bool_to_js x97)|])
                           | None -> ());
                          x96))
        let (create' : options:ReadLineOptions.t -> t) =
          fun ~options:(x102 : ReadLineOptions.t) ->
            t_of_js
              (Ojs.new_obj (Ojs.get_prop_ascii Import.readline "Interface")
                 [|(ReadLineOptions.t_to_js x102)|])
        let (set_prompt : t -> prompt:string -> unit) =
          fun (x104 : t) ->
            fun ~prompt:(x103 : string) ->
              ignore
                (Ojs.call (t_to_js x104) "setPrompt"
                   [|(Ojs.string_to_js x103)|])
        let (prompt : t -> ?preserve_cursor:bool -> unit -> unit) =
          fun (x108 : t) ->
            fun ?preserve_cursor:(x105 : bool option) ->
              fun () ->
                ignore
                  (let x109 = t_to_js x108 in
                   Ojs.call (Ojs.get_prop_ascii x109 "prompt") "apply"
                     [|x109;((let x106 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x105 with
                               | Some x107 ->
                                   ignore
                                     (Ojs.call x106 "push"
                                        [|(Ojs.bool_to_js x107)|])
                               | None -> ());
                              x106))|])
        let (question :
          t -> query:string -> callback:(answer:string -> unit) -> unit) =
          fun (x113 : t) ->
            fun ~query:(x110 : string) ->
              fun ~callback:(x111 : answer:string -> unit) ->
                ignore
                  (Ojs.call (t_to_js x113) "question"
                     [|(Ojs.string_to_js x110);(Ojs.fun_to_js 1
                                                  (fun (x112 : Ojs.t) ->
                                                     x111
                                                       ~answer:(Ojs.string_of_js
                                                                  x112)))|])
        let (pause : t -> t) =
          fun (x114 : t) -> t_of_js (Ojs.call (t_to_js x114) "pause" [||])
        let (resume : t -> t) =
          fun (x115 : t) -> t_of_js (Ojs.call (t_to_js x115) "resume" [||])
        let (close : t -> unit) =
          fun (x116 : t) -> ignore (Ojs.call (t_to_js x116) "close" [||])
        let (write :
          t -> data:Buffer.t or_string -> ?key:Key.t -> unit -> unit) =
          fun (x122 : t) ->
            fun ~data:(x117 : Buffer.t or_string) ->
              fun ?key:(x118 : Key.t option) ->
                fun () ->
                  ignore
                    (let x123 = t_to_js x122 in
                     Ojs.call (Ojs.get_prop_ascii x123 "write") "apply"
                       [|x123;((let x119 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x119 "push"
                                     [|(or_string_to_js Buffer.t_to_js x117)|]);
                                (match x118 with
                                 | Some x120 ->
                                     ignore
                                       (Ojs.call x119 "push"
                                          [|(Key.t_to_js x120)|])
                                 | None -> ());
                                x119))|])
        let (get_cursor_pos : t -> CursorPos.t) =
          fun (x124 : t) ->
            CursorPos.t_of_js (Ojs.call (t_to_js x124) "getCursorPos" [||])
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x129 : t) ->
            fun ~event:(x125 : string) ->
              fun ~listener:(x126 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x129) "addListener"
                     [|(Ojs.string_to_js x125);(Ojs.fun_to_js_args
                                                  (fun (x127 : _) ->
                                                     x126
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x127 0)))|])
        let (add_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x132 : t) ->
            fun ~event:(x130 : [ `close ]) ->
              fun ~listener:(x131 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x132) "addListener"
                     [|((match x130 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x131 ()))|])
        let (add_listener'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x136 : t) ->
            fun ~event:(x133 : [ `line ]) ->
              fun ~listener:(x134 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x136) "addListener"
                     [|((match x133 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x135 : Ojs.t) ->
                            x134 ~input:(Ojs.string_of_js x135)))|])
        let (add_listener''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x139 : t) ->
            fun ~event:(x137 : [ `pause ]) ->
              fun ~listener:(x138 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x139) "addListener"
                     [|((match x137 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x138 ()))|])
        let (add_listener'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x142 : t) ->
            fun ~event:(x140 : [ `resume ]) ->
              fun ~listener:(x141 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x142) "addListener"
                     [|((match x140 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x141 ()))|])
        let (add_listener''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x145 : t) ->
            fun ~event:(x143 : [ `SIGCONT ]) ->
              fun ~listener:(x144 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x145) "addListener"
                     [|((match x143 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x144 ()))|])
        let (add_listener'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x148 : t) ->
            fun ~event:(x146 : [ `SIGINT ]) ->
              fun ~listener:(x147 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x148) "addListener"
                     [|((match x146 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x147 ()))|])
        let (add_listener''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x151 : t) ->
            fun ~event:(x149 : [ `SIGTSTP ]) ->
              fun ~listener:(x150 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x151) "addListener"
                     [|((match x149 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x150 ()))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x157 : t) ->
            fun ~event:(x152 : symbol or_string) ->
              fun ~args:(x153 : any list) ->
                Ojs.bool_of_js
                  (let x158 = t_to_js x157 in
                   Ojs.call (Ojs.get_prop_ascii x158 "emit") "apply"
                     [|x158;((let x154 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x154 "push"
                                   [|(or_string_to_js symbol_to_js x152)|]);
                              List.iter
                                (fun (x155 : any) ->
                                   ignore
                                     (Ojs.call x154 "push"
                                        [|(any_to_js x155)|])) x153;
                              x154))|])
        let (emit' : t -> event:[ `close ] -> bool) =
          fun (x160 : t) ->
            fun ~event:(x159 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x160) "emit"
                   [|((match x159 with | `close -> Ojs.string_to_js "close"))|])
        let (emit'' : t -> event:[ `line ] -> input:string -> bool) =
          fun (x163 : t) ->
            fun ~event:(x161 : [ `line ]) ->
              fun ~input:(x162 : string) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x163) "emit"
                     [|((match x161 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.string_to_js x162)|])
        let (emit''' : t -> event:[ `pause ] -> bool) =
          fun (x165 : t) ->
            fun ~event:(x164 : [ `pause ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x165) "emit"
                   [|((match x164 with | `pause -> Ojs.string_to_js "pause"))|])
        let (emit'''' : t -> event:[ `resume ] -> bool) =
          fun (x167 : t) ->
            fun ~event:(x166 : [ `resume ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x167) "emit"
                   [|((match x166 with | `resume -> Ojs.string_to_js "resume"))|])
        let (emit''''' : t -> event:[ `SIGCONT ] -> bool) =
          fun (x169 : t) ->
            fun ~event:(x168 : [ `SIGCONT ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x169) "emit"
                   [|((match x168 with
                       | `SIGCONT -> Ojs.string_to_js "SIGCONT"))|])
        let (emit'''''' : t -> event:[ `SIGINT ] -> bool) =
          fun (x171 : t) ->
            fun ~event:(x170 : [ `SIGINT ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x171) "emit"
                   [|((match x170 with | `SIGINT -> Ojs.string_to_js "SIGINT"))|])
        let (emit''''''' : t -> event:[ `SIGTSTP ] -> bool) =
          fun (x173 : t) ->
            fun ~event:(x172 : [ `SIGTSTP ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x173) "emit"
                   [|((match x172 with
                       | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"))|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x178 : t) ->
            fun ~event:(x174 : string) ->
              fun ~listener:(x175 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x178) "on"
                     [|(Ojs.string_to_js x174);(Ojs.fun_to_js_args
                                                  (fun (x176 : _) ->
                                                     x175
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x176 0)))|])
        let (on' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x181 : t) ->
            fun ~event:(x179 : [ `close ]) ->
              fun ~listener:(x180 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x181) "on"
                     [|((match x179 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x180 ()))|])
        let (on'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x185 : t) ->
            fun ~event:(x182 : [ `line ]) ->
              fun ~listener:(x183 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x185) "on"
                     [|((match x182 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x184 : Ojs.t) ->
                            x183 ~input:(Ojs.string_of_js x184)))|])
        let (on''' : t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x188 : t) ->
            fun ~event:(x186 : [ `pause ]) ->
              fun ~listener:(x187 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x188) "on"
                     [|((match x186 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x187 ()))|])
        let (on'''' : t -> event:[ `resume ] -> listener:(unit -> unit) -> t)
          =
          fun (x191 : t) ->
            fun ~event:(x189 : [ `resume ]) ->
              fun ~listener:(x190 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x191) "on"
                     [|((match x189 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x190 ()))|])
        let (on''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x194 : t) ->
            fun ~event:(x192 : [ `SIGCONT ]) ->
              fun ~listener:(x193 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x194) "on"
                     [|((match x192 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x193 ()))|])
        let (on'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x197 : t) ->
            fun ~event:(x195 : [ `SIGINT ]) ->
              fun ~listener:(x196 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x197) "on"
                     [|((match x195 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x196 ()))|])
        let (on''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x200 : t) ->
            fun ~event:(x198 : [ `SIGTSTP ]) ->
              fun ~listener:(x199 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x200) "on"
                     [|((match x198 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x199 ()))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x205 : t) ->
            fun ~event:(x201 : string) ->
              fun ~listener:(x202 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x205) "once"
                     [|(Ojs.string_to_js x201);(Ojs.fun_to_js_args
                                                  (fun (x203 : _) ->
                                                     x202
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x203 0)))|])
        let (once' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x208 : t) ->
            fun ~event:(x206 : [ `close ]) ->
              fun ~listener:(x207 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x208) "once"
                     [|((match x206 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x207 ()))|])
        let (once'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x212 : t) ->
            fun ~event:(x209 : [ `line ]) ->
              fun ~listener:(x210 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x212) "once"
                     [|((match x209 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x211 : Ojs.t) ->
                            x210 ~input:(Ojs.string_of_js x211)))|])
        let (once''' : t -> event:[ `pause ] -> listener:(unit -> unit) -> t)
          =
          fun (x215 : t) ->
            fun ~event:(x213 : [ `pause ]) ->
              fun ~listener:(x214 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x215) "once"
                     [|((match x213 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x214 ()))|])
        let (once'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x218 : t) ->
            fun ~event:(x216 : [ `resume ]) ->
              fun ~listener:(x217 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x218) "once"
                     [|((match x216 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x217 ()))|])
        let (once''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x221 : t) ->
            fun ~event:(x219 : [ `SIGCONT ]) ->
              fun ~listener:(x220 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x221) "once"
                     [|((match x219 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x220 ()))|])
        let (once'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x224 : t) ->
            fun ~event:(x222 : [ `SIGINT ]) ->
              fun ~listener:(x223 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x224) "once"
                     [|((match x222 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x223 ()))|])
        let (once''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x227 : t) ->
            fun ~event:(x225 : [ `SIGTSTP ]) ->
              fun ~listener:(x226 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x227) "once"
                     [|((match x225 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x226 ()))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x232 : t) ->
            fun ~event:(x228 : string) ->
              fun ~listener:(x229 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x232) "prependListener"
                     [|(Ojs.string_to_js x228);(Ojs.fun_to_js_args
                                                  (fun (x230 : _) ->
                                                     x229
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x230 0)))|])
        let (prepend_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x235 : t) ->
            fun ~event:(x233 : [ `close ]) ->
              fun ~listener:(x234 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x235) "prependListener"
                     [|((match x233 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x234 ()))|])
        let (prepend_listener'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x239 : t) ->
            fun ~event:(x236 : [ `line ]) ->
              fun ~listener:(x237 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x239) "prependListener"
                     [|((match x236 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x238 : Ojs.t) ->
                            x237 ~input:(Ojs.string_of_js x238)))|])
        let (prepend_listener''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x242 : t) ->
            fun ~event:(x240 : [ `pause ]) ->
              fun ~listener:(x241 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x242) "prependListener"
                     [|((match x240 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x241 ()))|])
        let (prepend_listener'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x245 : t) ->
            fun ~event:(x243 : [ `resume ]) ->
              fun ~listener:(x244 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x245) "prependListener"
                     [|((match x243 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x244 ()))|])
        let (prepend_listener''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x248 : t) ->
            fun ~event:(x246 : [ `SIGCONT ]) ->
              fun ~listener:(x247 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x248) "prependListener"
                     [|((match x246 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x247 ()))|])
        let (prepend_listener'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x251 : t) ->
            fun ~event:(x249 : [ `SIGINT ]) ->
              fun ~listener:(x250 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x251) "prependListener"
                     [|((match x249 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x250 ()))|])
        let (prepend_listener''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x254 : t) ->
            fun ~event:(x252 : [ `SIGTSTP ]) ->
              fun ~listener:(x253 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x254) "prependListener"
                     [|((match x252 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x253 ()))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x259 : t) ->
            fun ~event:(x255 : string) ->
              fun ~listener:(x256 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x259) "prependOnceListener"
                     [|(Ojs.string_to_js x255);(Ojs.fun_to_js_args
                                                  (fun (x257 : _) ->
                                                     x256
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x257 0)))|])
        let (prepend_once_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x262 : t) ->
            fun ~event:(x260 : [ `close ]) ->
              fun ~listener:(x261 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x262) "prependOnceListener"
                     [|((match x260 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x261 ()))|])
        let (prepend_once_listener'' :
          t -> event:[ `line ] -> listener:(input:string -> unit) -> t) =
          fun (x266 : t) ->
            fun ~event:(x263 : [ `line ]) ->
              fun ~listener:(x264 : input:string -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x266) "prependOnceListener"
                     [|((match x263 with | `line -> Ojs.string_to_js "line"));(
                       Ojs.fun_to_js 1
                         (fun (x265 : Ojs.t) ->
                            x264 ~input:(Ojs.string_of_js x265)))|])
        let (prepend_once_listener''' :
          t -> event:[ `pause ] -> listener:(unit -> unit) -> t) =
          fun (x269 : t) ->
            fun ~event:(x267 : [ `pause ]) ->
              fun ~listener:(x268 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x269) "prependOnceListener"
                     [|((match x267 with | `pause -> Ojs.string_to_js "pause"));(
                       Ojs.fun_to_js 1 (fun _ -> x268 ()))|])
        let (prepend_once_listener'''' :
          t -> event:[ `resume ] -> listener:(unit -> unit) -> t) =
          fun (x272 : t) ->
            fun ~event:(x270 : [ `resume ]) ->
              fun ~listener:(x271 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x272) "prependOnceListener"
                     [|((match x270 with
                         | `resume -> Ojs.string_to_js "resume"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x271 ()))|])
        let (prepend_once_listener''''' :
          t -> event:[ `SIGCONT ] -> listener:(unit -> unit) -> t) =
          fun (x275 : t) ->
            fun ~event:(x273 : [ `SIGCONT ]) ->
              fun ~listener:(x274 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x275) "prependOnceListener"
                     [|((match x273 with
                         | `SIGCONT -> Ojs.string_to_js "SIGCONT"));(
                       Ojs.fun_to_js 1 (fun _ -> x274 ()))|])
        let (prepend_once_listener'''''' :
          t -> event:[ `SIGINT ] -> listener:(unit -> unit) -> t) =
          fun (x278 : t) ->
            fun ~event:(x276 : [ `SIGINT ]) ->
              fun ~listener:(x277 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x278) "prependOnceListener"
                     [|((match x276 with
                         | `SIGINT -> Ojs.string_to_js "SIGINT"));(Ojs.fun_to_js
                                                                    1
                                                                    (fun _ ->
                                                                    x277 ()))|])
        let (prepend_once_listener''''''' :
          t -> event:[ `SIGTSTP ] -> listener:(unit -> unit) -> t) =
          fun (x281 : t) ->
            fun ~event:(x279 : [ `SIGTSTP ]) ->
              fun ~listener:(x280 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x281) "prependOnceListener"
                     [|((match x279 with
                         | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"));(
                       Ojs.fun_to_js 1 (fun _ -> x280 ()))|])
      end
    module ReadLine =
      struct
        type t = Interface.t
        let rec t_of_js : Ojs.t -> t =
          fun (x283 : Ojs.t) -> Interface.t_of_js x283
        and t_to_js : t -> Ojs.t =
          fun (x282 : Interface.t) -> Interface.t_to_js x282
      end
    let (create_interface :
      input:ReadableStream.t ->
        ?output:WritableStream.t ->
          ?completer:(AsyncCompleter.t, Completer.t) union2 ->
            ?terminal:bool -> unit -> Interface.t)
      =
      fun ~input:(x284 : ReadableStream.t) ->
        fun ?output:(x285 : WritableStream.t option) ->
          fun
            ?completer:(x286 : (AsyncCompleter.t, Completer.t) union2 option)
            ->
            fun ?terminal:(x287 : bool option) ->
              fun () ->
                Interface.t_of_js
                  (let x294 = Import.readline in
                   Ojs.call (Ojs.get_prop_ascii x294 "createInterface")
                     "apply"
                     [|x294;((let x288 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x288 "push"
                                   [|(ReadableStream.t_to_js x284)|]);
                              (match x285 with
                               | Some x293 ->
                                   ignore
                                     (Ojs.call x288 "push"
                                        [|(WritableStream.t_to_js x293)|])
                               | None -> ());
                              (match x286 with
                               | Some x290 ->
                                   ignore
                                     (Ojs.call x288 "push"
                                        [|(union2_to_js
                                             AsyncCompleter.t_to_js
                                             Completer.t_to_js x290)|])
                               | None -> ());
                              (match x287 with
                               | Some x289 ->
                                   ignore
                                     (Ojs.call x288 "push"
                                        [|(Ojs.bool_to_js x289)|])
                               | None -> ());
                              x288))|])
    let (create_interface : options:ReadLineOptions.t -> Interface.t) =
      fun ~options:(x295 : ReadLineOptions.t) ->
        Interface.t_of_js
          (Ojs.call Import.readline "createInterface"
             [|(ReadLineOptions.t_to_js x295)|])
    let (emit_keypress_events :
      stream:ReadableStream.t ->
        ?readline_interface:Interface.t -> unit -> unit)
      =
      fun ~stream:(x296 : ReadableStream.t) ->
        fun ?readline_interface:(x297 : Interface.t option) ->
          fun () ->
            ignore
              (let x300 = Import.readline in
               Ojs.call (Ojs.get_prop_ascii x300 "emitKeypressEvents")
                 "apply"
                 [|x300;((let x298 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x298 "push"
                               [|(ReadableStream.t_to_js x296)|]);
                          (match x297 with
                           | Some x299 ->
                               ignore
                                 (Ojs.call x298 "push"
                                    [|(Interface.t_to_js x299)|])
                           | None -> ());
                          x298))|])
    let (clear_line :
      stream:WritableStream.t ->
        dir:Direction.t -> ?callback:(unit -> unit) -> unit -> bool)
      =
      fun ~stream:(x301 : WritableStream.t) ->
        fun ~dir:(x302 : Direction.t) ->
          fun ?callback:(x303 : (unit -> unit) option) ->
            fun () ->
              Ojs.bool_of_js
                (let x306 = Import.readline in
                 Ojs.call (Ojs.get_prop_ascii x306 "clearLine") "apply"
                   [|x306;((let x304 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x304 "push"
                                 [|(WritableStream.t_to_js x301)|]);
                            ignore
                              (Ojs.call x304 "push"
                                 [|(Direction.t_to_js x302)|]);
                            (match x303 with
                             | Some x305 ->
                                 ignore
                                   (Ojs.call x304 "push"
                                      [|(Ojs.fun_to_js 1 (fun _ -> x305 ()))|])
                             | None -> ());
                            x304))|])
    let (clear_screen_down :
      stream:WritableStream.t -> ?callback:(unit -> unit) -> unit -> bool) =
      fun ~stream:(x307 : WritableStream.t) ->
        fun ?callback:(x308 : (unit -> unit) option) ->
          fun () ->
            Ojs.bool_of_js
              (let x311 = Import.readline in
               Ojs.call (Ojs.get_prop_ascii x311 "clearScreenDown") "apply"
                 [|x311;((let x309 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x309 "push"
                               [|(WritableStream.t_to_js x307)|]);
                          (match x308 with
                           | Some x310 ->
                               ignore
                                 (Ojs.call x309 "push"
                                    [|(Ojs.fun_to_js 1 (fun _ -> x310 ()))|])
                           | None -> ());
                          x309))|])
    let (cursor_to :
      stream:WritableStream.t ->
        x:int -> ?y:int -> ?callback:(unit -> unit) -> unit -> bool)
      =
      fun ~stream:(x312 : WritableStream.t) ->
        fun ~x:(x313 : int) ->
          fun ?y:(x314 : int option) ->
            fun ?callback:(x315 : (unit -> unit) option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x319 = Import.readline in
                   Ojs.call (Ojs.get_prop_ascii x319 "cursorTo") "apply"
                     [|x319;((let x316 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x316 "push"
                                   [|(WritableStream.t_to_js x312)|]);
                              ignore
                                (Ojs.call x316 "push"
                                   [|(Ojs.int_to_js x313)|]);
                              (match x314 with
                               | Some x318 ->
                                   ignore
                                     (Ojs.call x316 "push"
                                        [|(Ojs.int_to_js x318)|])
                               | None -> ());
                              (match x315 with
                               | Some x317 ->
                                   ignore
                                     (Ojs.call x316 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x317 ()))|])
                               | None -> ());
                              x316))|])
    let (move_cursor :
      stream:WritableStream.t ->
        dx:int -> dy:int -> ?callback:(unit -> unit) -> unit -> bool)
      =
      fun ~stream:(x320 : WritableStream.t) ->
        fun ~dx:(x321 : int) ->
          fun ~dy:(x322 : int) ->
            fun ?callback:(x323 : (unit -> unit) option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x326 = Import.readline in
                   Ojs.call (Ojs.get_prop_ascii x326 "moveCursor") "apply"
                     [|x326;((let x324 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x324 "push"
                                   [|(WritableStream.t_to_js x320)|]);
                              ignore
                                (Ojs.call x324 "push"
                                   [|(Ojs.int_to_js x321)|]);
                              ignore
                                (Ojs.call x324 "push"
                                   [|(Ojs.int_to_js x322)|]);
                              (match x323 with
                               | Some x325 ->
                                   ignore
                                     (Ojs.call x324 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x325 ()))|])
                               | None -> ());
                              x324))|])
  end
