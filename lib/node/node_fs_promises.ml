[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
open Node_fs.Fs
module Internal =
  struct
    module AnonymousInterfaces =
      struct
        type anonymous_interface_0 = [ `anonymous_interface_0 ] intf
        let rec anonymous_interface_0_of_js : Ojs.t -> anonymous_interface_0
          = Obj.magic
        and anonymous_interface_0_to_js : anonymous_interface_0 -> Ojs.t =
          Obj.magic
        type anonymous_interface_1 = [ `anonymous_interface_1 ] intf
        let rec anonymous_interface_1_of_js : Ojs.t -> anonymous_interface_1
          = Obj.magic
        and anonymous_interface_1_to_js : anonymous_interface_1 -> Ojs.t =
          Obj.magic
        type anonymous_interface_2 = [ `anonymous_interface_2 ] intf
        let rec anonymous_interface_2_of_js : Ojs.t -> anonymous_interface_2
          = Obj.magic
        and anonymous_interface_2_to_js : anonymous_interface_2 -> Ojs.t =
          Obj.magic
        type anonymous_interface_3 = [ `anonymous_interface_3 ] intf
        let rec anonymous_interface_3_of_js : Ojs.t -> anonymous_interface_3
          = Obj.magic
        and anonymous_interface_3_to_js : anonymous_interface_3 -> Ojs.t =
          Obj.magic
        type anonymous_interface_4 = [ `anonymous_interface_4 ] intf
        let rec anonymous_interface_4_of_js : Ojs.t -> anonymous_interface_4
          = Obj.magic
        and anonymous_interface_4_to_js : anonymous_interface_4 -> Ojs.t =
          Obj.magic
        type anonymous_interface_5 = [ `anonymous_interface_5 ] intf
        let rec anonymous_interface_5_of_js : Ojs.t -> anonymous_interface_5
          = Obj.magic
        and anonymous_interface_5_to_js : anonymous_interface_5 -> Ojs.t =
          Obj.magic
        type anonymous_interface_6 = [ `anonymous_interface_6 ] intf
        let rec anonymous_interface_6_of_js : Ojs.t -> anonymous_interface_6
          = Obj.magic
        and anonymous_interface_6_to_js : anonymous_interface_6 -> Ojs.t =
          Obj.magic
        type anonymous_interface_7 = [ `anonymous_interface_7 ] intf
        let rec anonymous_interface_7_of_js : Ojs.t -> anonymous_interface_7
          = Obj.magic
        and anonymous_interface_7_to_js : anonymous_interface_7 -> Ojs.t =
          Obj.magic
        type anonymous_interface_8 = [ `anonymous_interface_8 ] intf
        let rec anonymous_interface_8_of_js : Ojs.t -> anonymous_interface_8
          = Obj.magic
        and anonymous_interface_8_to_js : anonymous_interface_8 -> Ojs.t =
          Obj.magic
        type anonymous_interface_9 = [ `anonymous_interface_9 ] intf
        let rec anonymous_interface_9_of_js : Ojs.t -> anonymous_interface_9
          = Obj.magic
        and anonymous_interface_9_to_js : anonymous_interface_9 -> Ojs.t =
          Obj.magic
        type anonymous_interface_10 = [ `anonymous_interface_10 ] intf
        let rec anonymous_interface_10_of_js :
          Ojs.t -> anonymous_interface_10 = Obj.magic
        and anonymous_interface_10_to_js : anonymous_interface_10 -> Ojs.t =
          Obj.magic
        type anonymous_interface_11 = [ `anonymous_interface_11 ] intf
        let rec anonymous_interface_11_of_js :
          Ojs.t -> anonymous_interface_11 = Obj.magic
        and anonymous_interface_11_to_js : anonymous_interface_11 -> Ojs.t =
          Obj.magic
        type anonymous_interface_12 = [ `anonymous_interface_12 ] intf
        let rec anonymous_interface_12_of_js :
          Ojs.t -> anonymous_interface_12 = Obj.magic
        and anonymous_interface_12_to_js : anonymous_interface_12 -> Ojs.t =
          Obj.magic
        type anonymous_interface_13 = [ `anonymous_interface_13 ] intf
        let rec anonymous_interface_13_of_js :
          Ojs.t -> anonymous_interface_13 = Obj.magic
        and anonymous_interface_13_to_js : anonymous_interface_13 -> Ojs.t =
          Obj.magic
      end
    module Types =
      struct
        open AnonymousInterfaces
        type node_fs_promises_FileHandle =
          [ `Node_fs_promises_FileHandle ] intf
        let rec node_fs_promises_FileHandle_of_js :
          Ojs.t -> node_fs_promises_FileHandle = Obj.magic
        and node_fs_promises_FileHandle_to_js :
          node_fs_promises_FileHandle -> Ojs.t = Obj.magic
      end
  end
open Internal
open AnonymousInterfaces
open Types
module AnonymousInterface0 =
  struct
    type t = anonymous_interface_0
    let rec t_of_js : Ojs.t -> t =
      fun (x2 : Ojs.t) -> anonymous_interface_0_of_js x2
    and t_to_js : t -> Ojs.t =
      fun (x1 : anonymous_interface_0) -> anonymous_interface_0_to_js x1
    let (get_bigint : t -> [ `L_b_false ]) =
      fun (x3 : t) ->
        let x4 = Ojs.get_prop_ascii (t_to_js x3) "bigint" in
        match Ojs.bool_of_js x4 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_bigint : t -> [ `L_b_false ] -> unit) =
      fun (x5 : t) ->
        fun (x6 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (t_to_js x5) "bigint"
            (match x6 with | `L_b_false -> Ojs.string_to_js "LBFalse")
  end
module AnonymousInterface1 =
  struct
    type t = anonymous_interface_1
    let rec t_of_js : Ojs.t -> t =
      fun (x8 : Ojs.t) -> anonymous_interface_1_of_js x8
    and t_to_js : t -> Ojs.t =
      fun (x7 : anonymous_interface_1) -> anonymous_interface_1_to_js x7
    let (get_bigint : t -> [ `L_b_true ]) =
      fun (x9 : t) ->
        let x10 = Ojs.get_prop_ascii (t_to_js x9) "bigint" in
        match Ojs.bool_of_js x10 with | true -> `L_b_true | _ -> assert false
    let (set_bigint : t -> [ `L_b_true ] -> unit) =
      fun (x11 : t) ->
        fun (x12 : [ `L_b_true ]) ->
          Ojs.set_prop_ascii (t_to_js x11) "bigint"
            (match x12 with | `L_b_true -> Ojs.string_to_js "LBTrue")
  end
module AnonymousInterface2 =
  struct
    type t = anonymous_interface_2
    let rec t_of_js : Ojs.t -> t =
      fun (x14 : Ojs.t) -> anonymous_interface_2_of_js x14
    and t_to_js : t -> Ojs.t =
      fun (x13 : anonymous_interface_2) -> anonymous_interface_2_to_js x13
    let (get_bytesRead : t -> float) =
      fun (x15 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x15) "bytesRead")
    let (set_bytesRead : t -> float -> unit) =
      fun (x16 : t) ->
        fun (x17 : float) ->
          Ojs.set_prop_ascii (t_to_js x16) "bytesRead" (Ojs.float_to_js x17)
    let (get_buffer : t -> 'TBuffer) =
      fun (x18 : t) -> Obj.magic (Ojs.get_prop_ascii (t_to_js x18) "buffer")
    let (set_buffer : t -> 'TBuffer -> unit) =
      fun (x19 : t) ->
        fun (x20 : 'TBuffer) ->
          Ojs.set_prop_ascii (t_to_js x19) "buffer" (Obj.magic x20)
  end
module AnonymousInterface3 =
  struct
    type t = anonymous_interface_3
    let rec t_of_js : Ojs.t -> t =
      fun (x22 : Ojs.t) -> anonymous_interface_3_of_js x22
    and t_to_js : t -> Ojs.t =
      fun (x21 : anonymous_interface_3) -> anonymous_interface_3_to_js x21
    let (get_bytesWritten : t -> float) =
      fun (x23 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x23) "bytesWritten")
    let (set_bytesWritten : t -> float -> unit) =
      fun (x24 : t) ->
        fun (x25 : float) ->
          Ojs.set_prop_ascii (t_to_js x24) "bytesWritten"
            (Ojs.float_to_js x25)
    let (get_buffer : t -> 'TBuffer) =
      fun (x26 : t) -> Obj.magic (Ojs.get_prop_ascii (t_to_js x26) "buffer")
    let (set_buffer : t -> 'TBuffer -> unit) =
      fun (x27 : t) ->
        fun (x28 : 'TBuffer) ->
          Ojs.set_prop_ascii (t_to_js x27) "buffer" (Obj.magic x28)
  end
module AnonymousInterface4 =
  struct
    type t = anonymous_interface_4
    let rec t_of_js : Ojs.t -> t =
      fun (x30 : Ojs.t) -> anonymous_interface_4_of_js x30
    and t_to_js : t -> Ojs.t =
      fun (x29 : anonymous_interface_4) -> anonymous_interface_4_to_js x29
    let (get_bytesWritten : t -> float) =
      fun (x31 : t) ->
        Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x31) "bytesWritten")
    let (set_bytesWritten : t -> float -> unit) =
      fun (x32 : t) ->
        fun (x33 : float) ->
          Ojs.set_prop_ascii (t_to_js x32) "bytesWritten"
            (Ojs.float_to_js x33)
    let (get_buffer : t -> string) =
      fun (x34 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x34) "buffer")
    let (set_buffer : t -> string -> unit) =
      fun (x35 : t) ->
        fun (x36 : string) ->
          Ojs.set_prop_ascii (t_to_js x35) "buffer" (Ojs.string_to_js x36)
  end
module AnonymousInterface5 =
  struct
    type t = anonymous_interface_5
    let rec t_of_js : Ojs.t -> t =
      fun (x38 : Ojs.t) -> anonymous_interface_5_of_js x38
    and t_to_js : t -> Ojs.t =
      fun (x37 : anonymous_interface_5) -> anonymous_interface_5_to_js x37
    let (get_encoding : t -> BufferEncoding.t) =
      fun (x39 : t) ->
        BufferEncoding.t_of_js (Ojs.get_prop_ascii (t_to_js x39) "encoding")
    let (set_encoding : t -> BufferEncoding.t -> unit) =
      fun (x40 : t) ->
        fun (x41 : BufferEncoding.t) ->
          Ojs.set_prop_ascii (t_to_js x40) "encoding"
            (BufferEncoding.t_to_js x41)
    let (get_flag : t -> OpenMode.t) =
      fun (x42 : t) ->
        OpenMode.t_of_js (Ojs.get_prop_ascii (t_to_js x42) "flag")
    let (set_flag : t -> OpenMode.t -> unit) =
      fun (x43 : t) ->
        fun (x44 : OpenMode.t) ->
          Ojs.set_prop_ascii (t_to_js x43) "flag" (OpenMode.t_to_js x44)
  end
module AnonymousInterface6 =
  struct
    type t = anonymous_interface_6
    let rec t_of_js : Ojs.t -> t =
      fun (x46 : Ojs.t) -> anonymous_interface_6_of_js x46
    and t_to_js : t -> Ojs.t =
      fun (x45 : anonymous_interface_6) -> anonymous_interface_6_to_js x45
    let (get_encoding : t -> never or_null) =
      fun (x47 : t) ->
        or_null_of_js never_of_js
          (Ojs.get_prop_ascii (t_to_js x47) "encoding")
    let (set_encoding : t -> never or_null -> unit) =
      fun (x49 : t) ->
        fun (x50 : never or_null) ->
          Ojs.set_prop_ascii (t_to_js x49) "encoding"
            (or_null_to_js never_to_js x50)
    let (get_flag : t -> OpenMode.t) =
      fun (x52 : t) ->
        OpenMode.t_of_js (Ojs.get_prop_ascii (t_to_js x52) "flag")
    let (set_flag : t -> OpenMode.t -> unit) =
      fun (x53 : t) ->
        fun (x54 : OpenMode.t) ->
          Ojs.set_prop_ascii (t_to_js x53) "flag" (OpenMode.t_to_js x54)
  end
module AnonymousInterface7 =
  struct
    type t = anonymous_interface_7
    let rec t_of_js : Ojs.t -> t =
      fun (x56 : Ojs.t) -> anonymous_interface_7_of_js x56
    and t_to_js : t -> Ojs.t =
      fun (x55 : anonymous_interface_7) -> anonymous_interface_7_to_js x55
    let (get_encoding : t -> [ `buffer ]) =
      fun (x57 : t) ->
        let x58 = Ojs.get_prop_ascii (t_to_js x57) "encoding" in
        match Ojs.string_of_js x58 with
        | "buffer" -> `buffer
        | _ -> assert false
    let (set_encoding : t -> [ `buffer ] -> unit) =
      fun (x59 : t) ->
        fun (x60 : [ `buffer ]) ->
          Ojs.set_prop_ascii (t_to_js x59) "encoding"
            (match x60 with | `buffer -> Ojs.string_to_js "buffer")
    let (get_withFileTypes : t -> [ `L_b_false ]) =
      fun (x61 : t) ->
        let x62 = Ojs.get_prop_ascii (t_to_js x61) "withFileTypes" in
        match Ojs.bool_of_js x62 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_withFileTypes : t -> [ `L_b_false ] -> unit) =
      fun (x63 : t) ->
        fun (x64 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (t_to_js x63) "withFileTypes"
            (match x64 with | `L_b_false -> Ojs.string_to_js "LBFalse")
  end
module AnonymousInterface8 =
  struct
    type t = anonymous_interface_8
    let rec t_of_js : Ojs.t -> t =
      fun (x66 : Ojs.t) -> anonymous_interface_8_of_js x66
    and t_to_js : t -> Ojs.t =
      fun (x65 : anonymous_interface_8) -> anonymous_interface_8_to_js x65
    let (get_flag : t -> OpenMode.t) =
      fun (x67 : t) ->
        OpenMode.t_of_js (Ojs.get_prop_ascii (t_to_js x67) "flag")
    let (set_flag : t -> OpenMode.t -> unit) =
      fun (x68 : t) ->
        fun (x69 : OpenMode.t) ->
          Ojs.set_prop_ascii (t_to_js x68) "flag" (OpenMode.t_to_js x69)
  end
module AnonymousInterface9 =
  struct
    type t = anonymous_interface_9
    let rec t_of_js : Ojs.t -> t =
      fun (x71 : Ojs.t) -> anonymous_interface_9_of_js x71
    and t_to_js : t -> Ojs.t =
      fun (x70 : anonymous_interface_9) -> anonymous_interface_9_to_js x70
    let (get_mode : t -> Mode.t) =
      fun (x72 : t) -> Mode.t_of_js (Ojs.get_prop_ascii (t_to_js x72) "mode")
    let (set_mode : t -> Mode.t -> unit) =
      fun (x73 : t) ->
        fun (x74 : Mode.t) ->
          Ojs.set_prop_ascii (t_to_js x73) "mode" (Mode.t_to_js x74)
    let (get_flag : t -> OpenMode.t) =
      fun (x75 : t) ->
        OpenMode.t_of_js (Ojs.get_prop_ascii (t_to_js x75) "flag")
    let (set_flag : t -> OpenMode.t -> unit) =
      fun (x76 : t) ->
        fun (x77 : OpenMode.t) ->
          Ojs.set_prop_ascii (t_to_js x76) "flag" (OpenMode.t_to_js x77)
  end
module AnonymousInterface10 =
  struct
    type t = anonymous_interface_10
    let rec t_of_js : Ojs.t -> t =
      fun (x79 : Ojs.t) -> anonymous_interface_10_of_js x79
    and t_to_js : t -> Ojs.t =
      fun (x78 : anonymous_interface_10) -> anonymous_interface_10_to_js x78
    let (get_recursive : t -> [ `L_b_false ]) =
      fun (x80 : t) ->
        let x81 = Ojs.get_prop_ascii (t_to_js x80) "recursive" in
        match Ojs.bool_of_js x81 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_recursive : t -> [ `L_b_false ] -> unit) =
      fun (x82 : t) ->
        fun (x83 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (t_to_js x82) "recursive"
            (match x83 with | `L_b_false -> Ojs.string_to_js "LBFalse")
  end
module AnonymousInterface11 =
  struct
    type t = anonymous_interface_11
    let rec t_of_js : Ojs.t -> t =
      fun (x85 : Ojs.t) -> anonymous_interface_11_of_js x85
    and t_to_js : t -> Ojs.t =
      fun (x84 : anonymous_interface_11) -> anonymous_interface_11_to_js x84
    let (get_recursive : t -> [ `L_b_true ]) =
      fun (x86 : t) ->
        let x87 = Ojs.get_prop_ascii (t_to_js x86) "recursive" in
        match Ojs.bool_of_js x87 with | true -> `L_b_true | _ -> assert false
    let (set_recursive : t -> [ `L_b_true ] -> unit) =
      fun (x88 : t) ->
        fun (x89 : [ `L_b_true ]) ->
          Ojs.set_prop_ascii (t_to_js x88) "recursive"
            (match x89 with | `L_b_true -> Ojs.string_to_js "LBTrue")
  end
module AnonymousInterface12 =
  struct
    type t = anonymous_interface_12
    let rec t_of_js : Ojs.t -> t =
      fun (x91 : Ojs.t) -> anonymous_interface_12_of_js x91
    and t_to_js : t -> Ojs.t =
      fun (x90 : anonymous_interface_12) -> anonymous_interface_12_to_js x90
    let (get_withFileTypes : t -> [ `L_b_false ]) =
      fun (x92 : t) ->
        let x93 = Ojs.get_prop_ascii (t_to_js x92) "withFileTypes" in
        match Ojs.bool_of_js x93 with
        | false -> `L_b_false
        | _ -> assert false
    let (set_withFileTypes : t -> [ `L_b_false ] -> unit) =
      fun (x94 : t) ->
        fun (x95 : [ `L_b_false ]) ->
          Ojs.set_prop_ascii (t_to_js x94) "withFileTypes"
            (match x95 with | `L_b_false -> Ojs.string_to_js "LBFalse")
  end
module AnonymousInterface13 =
  struct
    type t = anonymous_interface_13
    let rec t_of_js : Ojs.t -> t =
      fun (x97 : Ojs.t) -> anonymous_interface_13_of_js x97
    and t_to_js : t -> Ojs.t =
      fun (x96 : anonymous_interface_13) -> anonymous_interface_13_to_js x96
    let (get_withFileTypes : t -> [ `L_b_true ]) =
      fun (x98 : t) ->
        let x99 = Ojs.get_prop_ascii (t_to_js x98) "withFileTypes" in
        match Ojs.bool_of_js x99 with | true -> `L_b_true | _ -> assert false
    let (set_withFileTypes : t -> [ `L_b_true ] -> unit) =
      fun (x100 : t) ->
        fun (x101 : [ `L_b_true ]) ->
          Ojs.set_prop_ascii (t_to_js x100) "withFileTypes"
            (match x101 with | `L_b_true -> Ojs.string_to_js "LBTrue")
  end
module Fs_promises =
  struct
    module FileHandle =
      struct
        type t = node_fs_promises_FileHandle
        let rec t_of_js : Ojs.t -> t =
          fun (x103 : Ojs.t) -> node_fs_promises_FileHandle_of_js x103
        and t_to_js : t -> Ojs.t =
          fun (x102 : node_fs_promises_FileHandle) ->
            node_fs_promises_FileHandle_to_js x102
        let (get_fd : t -> float) =
          fun (x104 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x104) "fd")
        let (appendFile :
          t ->
            data:Uint8Array.t or_string ->
              ?options:BufferEncoding.t or_null -> unit -> unit Promise.t)
          =
          fun (x111 : t) ->
            fun ~data:(x105 : Uint8Array.t or_string) ->
              fun ?options:(x106 : BufferEncoding.t or_null option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x112 = t_to_js x111 in
                     Ojs.call (Ojs.get_prop_ascii x112 "appendFile") "apply"
                       [|x112;((let x107 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x107 "push"
                                     [|(or_string_to_js Uint8Array.t_to_js
                                          x105)|]);
                                (match x106 with
                                 | Some x108 ->
                                     ignore
                                       (Ojs.call x107 "push"
                                          [|(or_null_to_js
                                               BufferEncoding.t_to_js x108)|])
                                 | None -> ());
                                x107))|])
        let (chown : t -> uid:float -> gid:float -> unit Promise.t) =
          fun (x116 : t) ->
            fun ~uid:(x114 : float) ->
              fun ~gid:(x115 : float) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x116) "chown"
                     [|(Ojs.float_to_js x114);(Ojs.float_to_js x115)|])
        let (chmod : t -> mode:Mode.t -> unit Promise.t) =
          fun (x119 : t) ->
            fun ~mode:(x118 : Mode.t) ->
              Promise.t_of_js Ojs.unit_of_js
                (Ojs.call (t_to_js x119) "chmod" [|(Mode.t_to_js x118)|])
        let (datasync : t -> unit Promise.t) =
          fun (x121 : t) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call (t_to_js x121) "datasync" [||])
        let (sync : t -> unit Promise.t) =
          fun (x123 : t) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call (t_to_js x123) "sync" [||])
        let (read :
          t ->
            buffer:'TBuffer ->
              ?offset:float or_null ->
                ?length:float or_null ->
                  ?position:float or_null ->
                    unit -> anonymous_interface_2 Promise.t)
          =
          fun (x136 : t) ->
            fun ~buffer:(x125 : 'TBuffer) ->
              fun ?offset:(x126 : float or_null option) ->
                fun ?length:(x127 : float or_null option) ->
                  fun ?position:(x128 : float or_null option) ->
                    fun () ->
                      Promise.t_of_js anonymous_interface_2_of_js
                        (let x137 = t_to_js x136 in
                         Ojs.call (Ojs.get_prop_ascii x137 "read") "apply"
                           [|x137;((let x129 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x129 "push"
                                         [|(Obj.magic x125)|]);
                                    (match x126 with
                                     | Some x134 ->
                                         ignore
                                           (Ojs.call x129 "push"
                                              [|(or_null_to_js
                                                   Ojs.float_to_js x134)|])
                                     | None -> ());
                                    (match x127 with
                                     | Some x132 ->
                                         ignore
                                           (Ojs.call x129 "push"
                                              [|(or_null_to_js
                                                   Ojs.float_to_js x132)|])
                                     | None -> ());
                                    (match x128 with
                                     | Some x130 ->
                                         ignore
                                           (Ojs.call x129 "push"
                                              [|(or_null_to_js
                                                   Ojs.float_to_js x130)|])
                                     | None -> ());
                                    x129))|])
        let (readFile :
          t ->
            ?options:anonymous_interface_6 or_null ->
              unit -> Buffer.t Promise.t)
          =
          fun (x143 : t) ->
            fun ?options:(x139 : anonymous_interface_6 or_null option) ->
              fun () ->
                Promise.t_of_js Buffer.t_of_js
                  (let x144 = t_to_js x143 in
                   Ojs.call (Ojs.get_prop_ascii x144 "readFile") "apply"
                     [|x144;((let x140 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x139 with
                               | Some x141 ->
                                   ignore
                                     (Ojs.call x140 "push"
                                        [|(or_null_to_js
                                             anonymous_interface_6_to_js x141)|])
                               | None -> ());
                              x140))|])
        let (readFile' :
          t ->
            options:(BufferEncoding.t, anonymous_interface_5) union2 ->
              string Promise.t)
          =
          fun (x149 : t) ->
            fun
              ~options:(x146 :
                         (BufferEncoding.t, anonymous_interface_5) union2)
              ->
              Promise.t_of_js Ojs.string_of_js
                (Ojs.call (t_to_js x149) "readFile"
                   [|(union2_to_js BufferEncoding.t_to_js
                        anonymous_interface_5_to_js x146)|])
        let (readFile'' :
          t ->
            ?options:BufferEncoding.t or_null ->
              unit -> Buffer.t or_string Promise.t)
          =
          fun (x155 : t) ->
            fun ?options:(x151 : BufferEncoding.t or_null option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x157 : Ojs.t) -> or_string_of_js Buffer.t_of_js x157)
                  (let x156 = t_to_js x155 in
                   Ojs.call (Ojs.get_prop_ascii x156 "readFile") "apply"
                     [|x156;((let x152 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x151 with
                               | Some x153 ->
                                   ignore
                                     (Ojs.call x152 "push"
                                        [|(or_null_to_js
                                             BufferEncoding.t_to_js x153)|])
                               | None -> ());
                              x152))|])
        let (stat :
          t ->
            ?opts:(StatOptions.t, anonymous_interface_0) intersection2 ->
              unit -> Stats.t Promise.t)
          =
          fun (x164 : t) ->
            fun
              ?opts:(x159 :
                      (StatOptions.t, anonymous_interface_0) intersection2
                        option)
              ->
              fun () ->
                Promise.t_of_js Stats.t_of_js
                  (let x165 = t_to_js x164 in
                   Ojs.call (Ojs.get_prop_ascii x165 "stat") "apply"
                     [|x165;((let x160 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x159 with
                               | Some x161 ->
                                   ignore
                                     (Ojs.call x160 "push"
                                        [|(intersection2_to_js
                                             StatOptions.t_to_js
                                             anonymous_interface_0_to_js x161)|])
                               | None -> ());
                              x160))|])
        let (stat' :
          t ->
            opts:(StatOptions.t, anonymous_interface_1) intersection2 ->
              BigIntStats.t Promise.t)
          =
          fun (x170 : t) ->
            fun
              ~opts:(x167 :
                      (StatOptions.t, anonymous_interface_1) intersection2)
              ->
              Promise.t_of_js BigIntStats.t_of_js
                (Ojs.call (t_to_js x170) "stat"
                   [|(intersection2_to_js StatOptions.t_to_js
                        anonymous_interface_1_to_js x167)|])
        let (stat'' :
          t ->
            ?opts:StatOptions.t ->
              unit -> (BigIntStats.t, Stats.t) union2 Promise.t)
          =
          fun (x175 : t) ->
            fun ?opts:(x172 : StatOptions.t option) ->
              fun () ->
                Promise.t_of_js
                  (fun (x177 : Ojs.t) ->
                     union2_of_js BigIntStats.t_of_js Stats.t_of_js x177)
                  (let x176 = t_to_js x175 in
                   Ojs.call (Ojs.get_prop_ascii x176 "stat") "apply"
                     [|x176;((let x173 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x172 with
                               | Some x174 ->
                                   ignore
                                     (Ojs.call x173 "push"
                                        [|(StatOptions.t_to_js x174)|])
                               | None -> ());
                              x173))|])
        let (truncate : t -> ?len:float -> unit -> unit Promise.t) =
          fun (x183 : t) ->
            fun ?len:(x180 : float option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x184 = t_to_js x183 in
                   Ojs.call (Ojs.get_prop_ascii x184 "truncate") "apply"
                     [|x184;((let x181 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x180 with
                               | Some x182 ->
                                   ignore
                                     (Ojs.call x181 "push"
                                        [|(Ojs.float_to_js x182)|])
                               | None -> ());
                              x181))|])
        let (utimes :
          t ->
            atime:Date.t or_string or_number ->
              mtime:Date.t or_string or_number -> unit Promise.t)
          =
          fun (x192 : t) ->
            fun ~atime:(x186 : Date.t or_string or_number) ->
              fun ~mtime:(x189 : Date.t or_string or_number) ->
                Promise.t_of_js Ojs.unit_of_js
                  (Ojs.call (t_to_js x192) "utimes"
                     [|(or_number_to_js
                          (fun (x187 : Date.t or_string) ->
                             or_string_to_js Date.t_to_js x187) x186);(
                       or_number_to_js
                         (fun (x190 : Date.t or_string) ->
                            or_string_to_js Date.t_to_js x190) x189)|])
        let (write :
          t ->
            buffer:'TBuffer ->
              ?offset:float or_null ->
                ?length:float or_null ->
                  ?position:float or_null ->
                    unit -> anonymous_interface_3 Promise.t)
          =
          fun (x205 : t) ->
            fun ~buffer:(x194 : 'TBuffer) ->
              fun ?offset:(x195 : float or_null option) ->
                fun ?length:(x196 : float or_null option) ->
                  fun ?position:(x197 : float or_null option) ->
                    fun () ->
                      Promise.t_of_js anonymous_interface_3_of_js
                        (let x206 = t_to_js x205 in
                         Ojs.call (Ojs.get_prop_ascii x206 "write") "apply"
                           [|x206;((let x198 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x198 "push"
                                         [|(Obj.magic x194)|]);
                                    (match x195 with
                                     | Some x203 ->
                                         ignore
                                           (Ojs.call x198 "push"
                                              [|(or_null_to_js
                                                   Ojs.float_to_js x203)|])
                                     | None -> ());
                                    (match x196 with
                                     | Some x201 ->
                                         ignore
                                           (Ojs.call x198 "push"
                                              [|(or_null_to_js
                                                   Ojs.float_to_js x201)|])
                                     | None -> ());
                                    (match x197 with
                                     | Some x199 ->
                                         ignore
                                           (Ojs.call x198 "push"
                                              [|(or_null_to_js
                                                   Ojs.float_to_js x199)|])
                                     | None -> ());
                                    x198))|])
        let (write' :
          t ->
            data:Uint8Array.t or_string ->
              ?position:float or_null ->
                ?encoding:BufferEncoding.t or_null ->
                  unit -> anonymous_interface_4 Promise.t)
          =
          fun (x217 : t) ->
            fun ~data:(x208 : Uint8Array.t or_string) ->
              fun ?position:(x209 : float or_null option) ->
                fun ?encoding:(x210 : BufferEncoding.t or_null option) ->
                  fun () ->
                    Promise.t_of_js anonymous_interface_4_of_js
                      (let x218 = t_to_js x217 in
                       Ojs.call (Ojs.get_prop_ascii x218 "write") "apply"
                         [|x218;((let x211 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x211 "push"
                                       [|(or_string_to_js Uint8Array.t_to_js
                                            x208)|]);
                                  (match x209 with
                                   | Some x214 ->
                                       ignore
                                         (Ojs.call x211 "push"
                                            [|(or_null_to_js Ojs.float_to_js
                                                 x214)|])
                                   | None -> ());
                                  (match x210 with
                                   | Some x212 ->
                                       ignore
                                         (Ojs.call x211 "push"
                                            [|(or_null_to_js
                                                 BufferEncoding.t_to_js x212)|])
                                   | None -> ());
                                  x211))|])
        let (writeFile :
          t ->
            data:Uint8Array.t or_string ->
              ?options:BufferEncoding.t or_null -> unit -> unit Promise.t)
          =
          fun (x226 : t) ->
            fun ~data:(x220 : Uint8Array.t or_string) ->
              fun ?options:(x221 : BufferEncoding.t or_null option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x227 = t_to_js x226 in
                     Ojs.call (Ojs.get_prop_ascii x227 "writeFile") "apply"
                       [|x227;((let x222 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x222 "push"
                                     [|(or_string_to_js Uint8Array.t_to_js
                                          x220)|]);
                                (match x221 with
                                 | Some x223 ->
                                     ignore
                                       (Ojs.call x222 "push"
                                          [|(or_null_to_js
                                               BufferEncoding.t_to_js x223)|])
                                 | None -> ());
                                x222))|])
        let (writev :
          t ->
            buffers:ArrayBufferView.t list ->
              ?position:float -> unit -> WriteVResult.t Promise.t)
          =
          fun (x234 : t) ->
            fun ~buffers:(x229 : ArrayBufferView.t list) ->
              fun ?position:(x230 : float option) ->
                fun () ->
                  Promise.t_of_js WriteVResult.t_of_js
                    (let x235 = t_to_js x234 in
                     Ojs.call (Ojs.get_prop_ascii x235 "writev") "apply"
                       [|x235;((let x231 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x231 "push"
                                     [|(Ojs.list_to_js
                                          ArrayBufferView.t_to_js x229)|]);
                                (match x230 with
                                 | Some x232 ->
                                     ignore
                                       (Ojs.call x231 "push"
                                          [|(Ojs.float_to_js x232)|])
                                 | None -> ());
                                x231))|])
        let (readv :
          t ->
            buffers:ArrayBufferView.t list ->
              ?position:float -> unit -> ReadVResult.t Promise.t)
          =
          fun (x242 : t) ->
            fun ~buffers:(x237 : ArrayBufferView.t list) ->
              fun ?position:(x238 : float option) ->
                fun () ->
                  Promise.t_of_js ReadVResult.t_of_js
                    (let x243 = t_to_js x242 in
                     Ojs.call (Ojs.get_prop_ascii x243 "readv") "apply"
                       [|x243;((let x239 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x239 "push"
                                     [|(Ojs.list_to_js
                                          ArrayBufferView.t_to_js x237)|]);
                                (match x238 with
                                 | Some x240 ->
                                     ignore
                                       (Ojs.call x239 "push"
                                          [|(Ojs.float_to_js x240)|])
                                 | None -> ());
                                x239))|])
        let (close : t -> unit Promise.t) =
          fun (x245 : t) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call (t_to_js x245) "close" [||])
      end
    let (access : path:string -> ?mode:float -> unit -> unit Promise.t) =
      fun ~path:(x247 : string) ->
        fun ?mode:(x248 : float option) ->
          fun () ->
            Promise.t_of_js Ojs.unit_of_js
              (let x251 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x251 "access") "apply"
                 [|x251;((let x249 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x249 "push" [|(Ojs.string_to_js x247)|]);
                          (match x248 with
                           | Some x250 ->
                               ignore
                                 (Ojs.call x249 "push"
                                    [|(Ojs.float_to_js x250)|])
                           | None -> ());
                          x249))|])
    let (copyFile :
      src:string -> dest:string -> ?flags:float -> unit -> unit Promise.t) =
      fun ~src:(x253 : string) ->
        fun ~dest:(x254 : string) ->
          fun ?flags:(x255 : float option) ->
            fun () ->
              Promise.t_of_js Ojs.unit_of_js
                (let x258 = Import.fs_promises in
                 Ojs.call (Ojs.get_prop_ascii x258 "copyFile") "apply"
                   [|x258;((let x256 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x256 "push"
                                 [|(Ojs.string_to_js x253)|]);
                            ignore
                              (Ojs.call x256 "push"
                                 [|(Ojs.string_to_js x254)|]);
                            (match x255 with
                             | Some x257 ->
                                 ignore
                                   (Ojs.call x256 "push"
                                      [|(Ojs.float_to_js x257)|])
                             | None -> ());
                            x256))|])
    let (open_ :
      path:string ->
        flags:string or_number ->
          ?mode:Mode.t -> unit -> node_fs_promises_FileHandle Promise.t)
      =
      fun ~path:(x260 : string) ->
        fun ~flags:(x261 : string or_number) ->
          fun ?mode:(x262 : Mode.t option) ->
            fun () ->
              Promise.t_of_js node_fs_promises_FileHandle_of_js
                (let x266 = Import.fs_promises in
                 Ojs.call (Ojs.get_prop_ascii x266 "open") "apply"
                   [|x266;((let x263 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x263 "push"
                                 [|(Ojs.string_to_js x260)|]);
                            ignore
                              (Ojs.call x263 "push"
                                 [|(or_number_to_js Ojs.string_to_js x261)|]);
                            (match x262 with
                             | Some x264 ->
                                 ignore
                                   (Ojs.call x263 "push"
                                      [|(Mode.t_to_js x264)|])
                             | None -> ());
                            x263))|])
    let (read :
      handle:node_fs_promises_FileHandle ->
        buffer:'TBuffer ->
          ?offset:float or_null ->
            ?length:float or_null ->
              ?position:float or_null ->
                unit -> anonymous_interface_2 Promise.t)
      =
      fun ~handle:(x268 : node_fs_promises_FileHandle) ->
        fun ~buffer:(x269 : 'TBuffer) ->
          fun ?offset:(x270 : float or_null option) ->
            fun ?length:(x271 : float or_null option) ->
              fun ?position:(x272 : float or_null option) ->
                fun () ->
                  Promise.t_of_js anonymous_interface_2_of_js
                    (let x280 = Import.fs_promises in
                     Ojs.call (Ojs.get_prop_ascii x280 "read") "apply"
                       [|x280;((let x273 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x273 "push"
                                     [|(node_fs_promises_FileHandle_to_js
                                          x268)|]);
                                ignore
                                  (Ojs.call x273 "push" [|(Obj.magic x269)|]);
                                (match x270 with
                                 | Some x278 ->
                                     ignore
                                       (Ojs.call x273 "push"
                                          [|(or_null_to_js Ojs.float_to_js
                                               x278)|])
                                 | None -> ());
                                (match x271 with
                                 | Some x276 ->
                                     ignore
                                       (Ojs.call x273 "push"
                                          [|(or_null_to_js Ojs.float_to_js
                                               x276)|])
                                 | None -> ());
                                (match x272 with
                                 | Some x274 ->
                                     ignore
                                       (Ojs.call x273 "push"
                                          [|(or_null_to_js Ojs.float_to_js
                                               x274)|])
                                 | None -> ());
                                x273))|])
    let (write :
      handle:node_fs_promises_FileHandle ->
        buffer:'TBuffer ->
          ?offset:float or_null ->
            ?length:float or_null ->
              ?position:float or_null ->
                unit -> anonymous_interface_3 Promise.t)
      =
      fun ~handle:(x282 : node_fs_promises_FileHandle) ->
        fun ~buffer:(x283 : 'TBuffer) ->
          fun ?offset:(x284 : float or_null option) ->
            fun ?length:(x285 : float or_null option) ->
              fun ?position:(x286 : float or_null option) ->
                fun () ->
                  Promise.t_of_js anonymous_interface_3_of_js
                    (let x294 = Import.fs_promises in
                     Ojs.call (Ojs.get_prop_ascii x294 "write") "apply"
                       [|x294;((let x287 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x287 "push"
                                     [|(node_fs_promises_FileHandle_to_js
                                          x282)|]);
                                ignore
                                  (Ojs.call x287 "push" [|(Obj.magic x283)|]);
                                (match x284 with
                                 | Some x292 ->
                                     ignore
                                       (Ojs.call x287 "push"
                                          [|(or_null_to_js Ojs.float_to_js
                                               x292)|])
                                 | None -> ());
                                (match x285 with
                                 | Some x290 ->
                                     ignore
                                       (Ojs.call x287 "push"
                                          [|(or_null_to_js Ojs.float_to_js
                                               x290)|])
                                 | None -> ());
                                (match x286 with
                                 | Some x288 ->
                                     ignore
                                       (Ojs.call x287 "push"
                                          [|(or_null_to_js Ojs.float_to_js
                                               x288)|])
                                 | None -> ());
                                x287))|])
    let (write :
      handle:node_fs_promises_FileHandle ->
        string:string ->
          ?position:float or_null ->
            ?encoding:BufferEncoding.t or_null ->
              unit -> anonymous_interface_4 Promise.t)
      =
      fun ~handle:(x296 : node_fs_promises_FileHandle) ->
        fun ~string:(x297 : string) ->
          fun ?position:(x298 : float or_null option) ->
            fun ?encoding:(x299 : BufferEncoding.t or_null option) ->
              fun () ->
                Promise.t_of_js anonymous_interface_4_of_js
                  (let x305 = Import.fs_promises in
                   Ojs.call (Ojs.get_prop_ascii x305 "write") "apply"
                     [|x305;((let x300 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x300 "push"
                                   [|(node_fs_promises_FileHandle_to_js x296)|]);
                              ignore
                                (Ojs.call x300 "push"
                                   [|(Ojs.string_to_js x297)|]);
                              (match x298 with
                               | Some x303 ->
                                   ignore
                                     (Ojs.call x300 "push"
                                        [|(or_null_to_js Ojs.float_to_js x303)|])
                               | None -> ());
                              (match x299 with
                               | Some x301 ->
                                   ignore
                                     (Ojs.call x300 "push"
                                        [|(or_null_to_js
                                             BufferEncoding.t_to_js x301)|])
                               | None -> ());
                              x300))|])
    let (rename : oldPath:string -> newPath:string -> unit Promise.t) =
      fun ~oldPath:(x307 : string) ->
        fun ~newPath:(x308 : string) ->
          Promise.t_of_js Ojs.unit_of_js
            (Ojs.call Import.fs_promises "rename"
               [|(Ojs.string_to_js x307);(Ojs.string_to_js x308)|])
    let (truncate : path:string -> ?len:float -> unit -> unit Promise.t) =
      fun ~path:(x310 : string) ->
        fun ?len:(x311 : float option) ->
          fun () ->
            Promise.t_of_js Ojs.unit_of_js
              (let x314 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x314 "truncate") "apply"
                 [|x314;((let x312 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x312 "push" [|(Ojs.string_to_js x310)|]);
                          (match x311 with
                           | Some x313 ->
                               ignore
                                 (Ojs.call x312 "push"
                                    [|(Ojs.float_to_js x313)|])
                           | None -> ());
                          x312))|])
    let (ftruncate :
      handle:node_fs_promises_FileHandle ->
        ?len:float -> unit -> unit Promise.t)
      =
      fun ~handle:(x316 : node_fs_promises_FileHandle) ->
        fun ?len:(x317 : float option) ->
          fun () ->
            Promise.t_of_js Ojs.unit_of_js
              (let x320 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x320 "ftruncate") "apply"
                 [|x320;((let x318 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x318 "push"
                               [|(node_fs_promises_FileHandle_to_js x316)|]);
                          (match x317 with
                           | Some x319 ->
                               ignore
                                 (Ojs.call x318 "push"
                                    [|(Ojs.float_to_js x319)|])
                           | None -> ());
                          x318))|])
    let (rmdir :
      path:string -> ?options:RmDirOptions.t -> unit -> unit Promise.t) =
      fun ~path:(x322 : string) ->
        fun ?options:(x323 : RmDirOptions.t option) ->
          fun () ->
            Promise.t_of_js Ojs.unit_of_js
              (let x326 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x326 "rmdir") "apply"
                 [|x326;((let x324 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x324 "push" [|(Ojs.string_to_js x322)|]);
                          (match x323 with
                           | Some x325 ->
                               ignore
                                 (Ojs.call x324 "push"
                                    [|(RmDirOptions.t_to_js x325)|])
                           | None -> ());
                          x324))|])
    let (rm : path:string -> ?options:RmOptions.t -> unit -> unit Promise.t)
      =
      fun ~path:(x328 : string) ->
        fun ?options:(x329 : RmOptions.t option) ->
          fun () ->
            Promise.t_of_js Ojs.unit_of_js
              (let x332 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x332 "rm") "apply"
                 [|x332;((let x330 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x330 "push" [|(Ojs.string_to_js x328)|]);
                          (match x329 with
                           | Some x331 ->
                               ignore
                                 (Ojs.call x330 "push"
                                    [|(RmOptions.t_to_js x331)|])
                           | None -> ());
                          x330))|])
    let (fdatasync : handle:node_fs_promises_FileHandle -> unit Promise.t) =
      fun ~handle:(x334 : node_fs_promises_FileHandle) ->
        Promise.t_of_js Ojs.unit_of_js
          (Ojs.call Import.fs_promises "fdatasync"
             [|(node_fs_promises_FileHandle_to_js x334)|])
    let (fsync : handle:node_fs_promises_FileHandle -> unit Promise.t) =
      fun ~handle:(x336 : node_fs_promises_FileHandle) ->
        Promise.t_of_js Ojs.unit_of_js
          (Ojs.call Import.fs_promises "fsync"
             [|(node_fs_promises_FileHandle_to_js x336)|])
    let (mkdir :
      path:string ->
        options:(MakeDirectoryOptions.t, anonymous_interface_11)
          intersection2 -> string or_undefined Promise.t)
      =
      fun ~path:(x338 : string) ->
        fun
          ~options:(x339 :
                     (MakeDirectoryOptions.t, anonymous_interface_11)
                       intersection2)
          ->
          Promise.t_of_js
            (fun (x342 : Ojs.t) -> or_undefined_of_js Ojs.string_of_js x342)
            (Ojs.call Import.fs_promises "mkdir"
               [|(Ojs.string_to_js x338);(intersection2_to_js
                                            MakeDirectoryOptions.t_to_js
                                            anonymous_interface_11_to_js x339)|])
    let (mkdir :
      path:string -> ?options:Mode.t or_null -> unit -> unit Promise.t) =
      fun ~path:(x344 : string) ->
        fun ?options:(x345 : Mode.t or_null option) ->
          fun () ->
            Promise.t_of_js Ojs.unit_of_js
              (let x349 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x349 "mkdir") "apply"
                 [|x349;((let x346 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x346 "push" [|(Ojs.string_to_js x344)|]);
                          (match x345 with
                           | Some x347 ->
                               ignore
                                 (Ojs.call x346 "push"
                                    [|(or_null_to_js Mode.t_to_js x347)|])
                           | None -> ());
                          x346))|])
    let (mkdir :
      path:string ->
        ?options:(MakeDirectoryOptions.t, Mode.t) union2 or_null ->
          unit -> string or_undefined Promise.t)
      =
      fun ~path:(x351 : string) ->
        fun
          ?options:(x352 :
                     (MakeDirectoryOptions.t, Mode.t) union2 or_null option)
          ->
          fun () ->
            Promise.t_of_js
              (fun (x359 : Ojs.t) -> or_undefined_of_js Ojs.string_of_js x359)
              (let x358 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x358 "mkdir") "apply"
                 [|x358;((let x353 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x353 "push" [|(Ojs.string_to_js x351)|]);
                          (match x352 with
                           | Some x354 ->
                               ignore
                                 (Ojs.call x353 "push"
                                    [|(or_null_to_js
                                         (fun
                                            (x355 :
                                              (MakeDirectoryOptions.t,
                                                Mode.t) union2)
                                            ->
                                            union2_to_js
                                              MakeDirectoryOptions.t_to_js
                                              Mode.t_to_js x355) x354)|])
                           | None -> ());
                          x353))|])
    let (readdir :
      path:string ->
        ?options:BufferEncoding.t or_null -> unit -> string list Promise.t)
      =
      fun ~path:(x361 : string) ->
        fun ?options:(x362 : BufferEncoding.t or_null option) ->
          fun () ->
            Promise.t_of_js
              (fun (x367 : Ojs.t) -> Ojs.list_of_js Ojs.string_of_js x367)
              (let x366 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x366 "readdir") "apply"
                 [|x366;((let x363 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x363 "push" [|(Ojs.string_to_js x361)|]);
                          (match x362 with
                           | Some x364 ->
                               ignore
                                 (Ojs.call x363 "push"
                                    [|(or_null_to_js BufferEncoding.t_to_js
                                         x364)|])
                           | None -> ());
                          x363))|])
    let (readdir :
      path:string ->
        options:(anonymous_interface_7, [ `buffer ]) or_enum ->
          Buffer.t list Promise.t)
      =
      fun ~path:(x369 : string) ->
        fun ~options:(x370 : (anonymous_interface_7, [ `buffer ]) or_enum) ->
          Promise.t_of_js
            (fun (x373 : Ojs.t) -> Ojs.list_of_js Buffer.t_of_js x373)
            (Ojs.call Import.fs_promises "readdir"
               [|(Ojs.string_to_js x369);(or_enum_to_js
                                            anonymous_interface_7_to_js
                                            (fun (x372 : [ `buffer ]) ->
                                               match x372 with
                                               | `buffer ->
                                                   Ojs.string_to_js "buffer")
                                            x370)|])
    let (readdir :
      path:string ->
        ?options:BufferEncoding.t or_null ->
          unit -> Buffer.t or_string list Promise.t)
      =
      fun ~path:(x375 : string) ->
        fun ?options:(x376 : BufferEncoding.t or_null option) ->
          fun () ->
            Promise.t_of_js
              (fun (x381 : Ojs.t) ->
                 Ojs.list_of_js
                   (fun (x382 : Ojs.t) -> or_string_of_js Buffer.t_of_js x382)
                   x381)
              (let x380 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x380 "readdir") "apply"
                 [|x380;((let x377 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x377 "push" [|(Ojs.string_to_js x375)|]);
                          (match x376 with
                           | Some x378 ->
                               ignore
                                 (Ojs.call x377 "push"
                                    [|(or_null_to_js BufferEncoding.t_to_js
                                         x378)|])
                           | None -> ());
                          x377))|])
    let (readdir :
      path:string ->
        options:(BaseEncodingOptions.t, anonymous_interface_13) intersection2
          -> Dirent.t list Promise.t)
      =
      fun ~path:(x384 : string) ->
        fun
          ~options:(x385 :
                     (BaseEncodingOptions.t, anonymous_interface_13)
                       intersection2)
          ->
          Promise.t_of_js
            (fun (x388 : Ojs.t) -> Ojs.list_of_js Dirent.t_of_js x388)
            (Ojs.call Import.fs_promises "readdir"
               [|(Ojs.string_to_js x384);(intersection2_to_js
                                            BaseEncodingOptions.t_to_js
                                            anonymous_interface_13_to_js x385)|])
    let (readlink :
      path:string ->
        ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null ->
          unit -> string Promise.t)
      =
      fun ~path:(x390 : string) ->
        fun
          ?options:(x391 :
                     (BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
                       option)
          ->
          fun () ->
            Promise.t_of_js Ojs.string_of_js
              (let x397 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x397 "readlink") "apply"
                 [|x397;((let x392 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x392 "push" [|(Ojs.string_to_js x390)|]);
                          (match x391 with
                           | Some x393 ->
                               ignore
                                 (Ojs.call x392 "push"
                                    [|(or_null_to_js
                                         (fun
                                            (x394 :
                                              (BaseEncodingOptions.t,
                                                BufferEncoding.t) union2)
                                            ->
                                            union2_to_js
                                              BaseEncodingOptions.t_to_js
                                              BufferEncoding.t_to_js x394)
                                         x393)|])
                           | None -> ());
                          x392))|])
    let (readlink :
      path:string -> options:BufferEncodingOption.t -> Buffer.t Promise.t) =
      fun ~path:(x399 : string) ->
        fun ~options:(x400 : BufferEncodingOption.t) ->
          Promise.t_of_js Buffer.t_of_js
            (Ojs.call Import.fs_promises "readlink"
               [|(Ojs.string_to_js x399);(BufferEncodingOption.t_to_js x400)|])
    let (readlink :
      path:string ->
        ?options:BaseEncodingOptions.t or_string or_null ->
          unit -> Buffer.t or_string Promise.t)
      =
      fun ~path:(x402 : string) ->
        fun ?options:(x403 : BaseEncodingOptions.t or_string or_null option)
          ->
          fun () ->
            Promise.t_of_js
              (fun (x409 : Ojs.t) -> or_string_of_js Buffer.t_of_js x409)
              (let x408 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x408 "readlink") "apply"
                 [|x408;((let x404 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x404 "push" [|(Ojs.string_to_js x402)|]);
                          (match x403 with
                           | Some x405 ->
                               ignore
                                 (Ojs.call x404 "push"
                                    [|(or_null_to_js
                                         (fun
                                            (x406 :
                                              BaseEncodingOptions.t or_string)
                                            ->
                                            or_string_to_js
                                              BaseEncodingOptions.t_to_js
                                              x406) x405)|])
                           | None -> ());
                          x404))|])
    let (symlink :
      target:string ->
        path:string -> ?type_:string or_null -> unit -> unit Promise.t)
      =
      fun ~target:(x411 : string) ->
        fun ~path:(x412 : string) ->
          fun ?type_:(x413 : string or_null option) ->
            fun () ->
              Promise.t_of_js Ojs.unit_of_js
                (let x417 = Import.fs_promises in
                 Ojs.call (Ojs.get_prop_ascii x417 "symlink") "apply"
                   [|x417;((let x414 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x414 "push"
                                 [|(Ojs.string_to_js x411)|]);
                            ignore
                              (Ojs.call x414 "push"
                                 [|(Ojs.string_to_js x412)|]);
                            (match x413 with
                             | Some x415 ->
                                 ignore
                                   (Ojs.call x414 "push"
                                      [|(or_null_to_js Ojs.string_to_js x415)|])
                             | None -> ());
                            x414))|])
    let (lstat :
      path:string ->
        ?opts:(StatOptions.t, anonymous_interface_0) intersection2 ->
          unit -> Stats.t Promise.t)
      =
      fun ~path:(x419 : string) ->
        fun
          ?opts:(x420 :
                  (StatOptions.t, anonymous_interface_0) intersection2 option)
          ->
          fun () ->
            Promise.t_of_js Stats.t_of_js
              (let x425 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x425 "lstat") "apply"
                 [|x425;((let x421 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x421 "push" [|(Ojs.string_to_js x419)|]);
                          (match x420 with
                           | Some x422 ->
                               ignore
                                 (Ojs.call x421 "push"
                                    [|(intersection2_to_js
                                         StatOptions.t_to_js
                                         anonymous_interface_0_to_js x422)|])
                           | None -> ());
                          x421))|])
    let (lstat :
      path:string ->
        opts:(StatOptions.t, anonymous_interface_1) intersection2 ->
          BigIntStats.t Promise.t)
      =
      fun ~path:(x427 : string) ->
        fun
          ~opts:(x428 : (StatOptions.t, anonymous_interface_1) intersection2)
          ->
          Promise.t_of_js BigIntStats.t_of_js
            (Ojs.call Import.fs_promises "lstat"
               [|(Ojs.string_to_js x427);(intersection2_to_js
                                            StatOptions.t_to_js
                                            anonymous_interface_1_to_js x428)|])
    let (lstat :
      path:string ->
        ?opts:StatOptions.t ->
          unit -> (BigIntStats.t, Stats.t) union2 Promise.t)
      =
      fun ~path:(x432 : string) ->
        fun ?opts:(x433 : StatOptions.t option) ->
          fun () ->
            Promise.t_of_js
              (fun (x437 : Ojs.t) ->
                 union2_of_js BigIntStats.t_of_js Stats.t_of_js x437)
              (let x436 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x436 "lstat") "apply"
                 [|x436;((let x434 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x434 "push" [|(Ojs.string_to_js x432)|]);
                          (match x433 with
                           | Some x435 ->
                               ignore
                                 (Ojs.call x434 "push"
                                    [|(StatOptions.t_to_js x435)|])
                           | None -> ());
                          x434))|])
    let (stat :
      path:string ->
        ?opts:(StatOptions.t, anonymous_interface_0) intersection2 ->
          unit -> Stats.t Promise.t)
      =
      fun ~path:(x440 : string) ->
        fun
          ?opts:(x441 :
                  (StatOptions.t, anonymous_interface_0) intersection2 option)
          ->
          fun () ->
            Promise.t_of_js Stats.t_of_js
              (let x446 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x446 "stat") "apply"
                 [|x446;((let x442 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x442 "push" [|(Ojs.string_to_js x440)|]);
                          (match x441 with
                           | Some x443 ->
                               ignore
                                 (Ojs.call x442 "push"
                                    [|(intersection2_to_js
                                         StatOptions.t_to_js
                                         anonymous_interface_0_to_js x443)|])
                           | None -> ());
                          x442))|])
    let (stat :
      path:string ->
        opts:(StatOptions.t, anonymous_interface_1) intersection2 ->
          BigIntStats.t Promise.t)
      =
      fun ~path:(x448 : string) ->
        fun
          ~opts:(x449 : (StatOptions.t, anonymous_interface_1) intersection2)
          ->
          Promise.t_of_js BigIntStats.t_of_js
            (Ojs.call Import.fs_promises "stat"
               [|(Ojs.string_to_js x448);(intersection2_to_js
                                            StatOptions.t_to_js
                                            anonymous_interface_1_to_js x449)|])
    let (stat :
      path:string ->
        ?opts:StatOptions.t ->
          unit -> (BigIntStats.t, Stats.t) union2 Promise.t)
      =
      fun ~path:(x453 : string) ->
        fun ?opts:(x454 : StatOptions.t option) ->
          fun () ->
            Promise.t_of_js
              (fun (x458 : Ojs.t) ->
                 union2_of_js BigIntStats.t_of_js Stats.t_of_js x458)
              (let x457 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x457 "stat") "apply"
                 [|x457;((let x455 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x455 "push" [|(Ojs.string_to_js x453)|]);
                          (match x454 with
                           | Some x456 ->
                               ignore
                                 (Ojs.call x455 "push"
                                    [|(StatOptions.t_to_js x456)|])
                           | None -> ());
                          x455))|])
    let (link : existingPath:string -> newPath:string -> unit Promise.t) =
      fun ~existingPath:(x461 : string) ->
        fun ~newPath:(x462 : string) ->
          Promise.t_of_js Ojs.unit_of_js
            (Ojs.call Import.fs_promises "link"
               [|(Ojs.string_to_js x461);(Ojs.string_to_js x462)|])
    let (unlink : path:string -> unit Promise.t) =
      fun ~path:(x464 : string) ->
        Promise.t_of_js Ojs.unit_of_js
          (Ojs.call Import.fs_promises "unlink" [|(Ojs.string_to_js x464)|])
    let (fchmod :
      handle:node_fs_promises_FileHandle -> mode:Mode.t -> unit Promise.t) =
      fun ~handle:(x466 : node_fs_promises_FileHandle) ->
        fun ~mode:(x467 : Mode.t) ->
          Promise.t_of_js Ojs.unit_of_js
            (Ojs.call Import.fs_promises "fchmod"
               [|(node_fs_promises_FileHandle_to_js x466);(Mode.t_to_js x467)|])
    let (chmod : path:string -> mode:Mode.t -> unit Promise.t) =
      fun ~path:(x469 : string) ->
        fun ~mode:(x470 : Mode.t) ->
          Promise.t_of_js Ojs.unit_of_js
            (Ojs.call Import.fs_promises "chmod"
               [|(Ojs.string_to_js x469);(Mode.t_to_js x470)|])
    let (lchmod : path:string -> mode:Mode.t -> unit Promise.t) =
      fun ~path:(x472 : string) ->
        fun ~mode:(x473 : Mode.t) ->
          Promise.t_of_js Ojs.unit_of_js
            (Ojs.call Import.fs_promises "lchmod"
               [|(Ojs.string_to_js x472);(Mode.t_to_js x473)|])
    let (lchown : path:string -> uid:float -> gid:float -> unit Promise.t) =
      fun ~path:(x475 : string) ->
        fun ~uid:(x476 : float) ->
          fun ~gid:(x477 : float) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call Import.fs_promises "lchown"
                 [|(Ojs.string_to_js x475);(Ojs.float_to_js x476);(Ojs.float_to_js
                                                                    x477)|])
    let (lutimes :
      path:string ->
        atime:Date.t or_string or_number ->
          mtime:Date.t or_string or_number -> unit Promise.t)
      =
      fun ~path:(x479 : string) ->
        fun ~atime:(x480 : Date.t or_string or_number) ->
          fun ~mtime:(x483 : Date.t or_string or_number) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call Import.fs_promises "lutimes"
                 [|(Ojs.string_to_js x479);(or_number_to_js
                                              (fun (x481 : Date.t or_string)
                                                 ->
                                                 or_string_to_js Date.t_to_js
                                                   x481) x480);(or_number_to_js
                                                                  (fun
                                                                    (x484 :
                                                                    Date.t
                                                                    or_string)
                                                                    ->
                                                                    or_string_to_js
                                                                    Date.t_to_js
                                                                    x484)
                                                                  x483)|])
    let (fchown :
      handle:node_fs_promises_FileHandle ->
        uid:float -> gid:float -> unit Promise.t)
      =
      fun ~handle:(x487 : node_fs_promises_FileHandle) ->
        fun ~uid:(x488 : float) ->
          fun ~gid:(x489 : float) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call Import.fs_promises "fchown"
                 [|(node_fs_promises_FileHandle_to_js x487);(Ojs.float_to_js
                                                               x488);(
                   Ojs.float_to_js x489)|])
    let (chown : path:string -> uid:float -> gid:float -> unit Promise.t) =
      fun ~path:(x491 : string) ->
        fun ~uid:(x492 : float) ->
          fun ~gid:(x493 : float) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call Import.fs_promises "chown"
                 [|(Ojs.string_to_js x491);(Ojs.float_to_js x492);(Ojs.float_to_js
                                                                    x493)|])
    let (utimes :
      path:string ->
        atime:Date.t or_string or_number ->
          mtime:Date.t or_string or_number -> unit Promise.t)
      =
      fun ~path:(x495 : string) ->
        fun ~atime:(x496 : Date.t or_string or_number) ->
          fun ~mtime:(x499 : Date.t or_string or_number) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call Import.fs_promises "utimes"
                 [|(Ojs.string_to_js x495);(or_number_to_js
                                              (fun (x497 : Date.t or_string)
                                                 ->
                                                 or_string_to_js Date.t_to_js
                                                   x497) x496);(or_number_to_js
                                                                  (fun
                                                                    (x500 :
                                                                    Date.t
                                                                    or_string)
                                                                    ->
                                                                    or_string_to_js
                                                                    Date.t_to_js
                                                                    x500)
                                                                  x499)|])
    let (futimes :
      handle:node_fs_promises_FileHandle ->
        atime:Date.t or_string or_number ->
          mtime:Date.t or_string or_number -> unit Promise.t)
      =
      fun ~handle:(x503 : node_fs_promises_FileHandle) ->
        fun ~atime:(x504 : Date.t or_string or_number) ->
          fun ~mtime:(x507 : Date.t or_string or_number) ->
            Promise.t_of_js Ojs.unit_of_js
              (Ojs.call Import.fs_promises "futimes"
                 [|(node_fs_promises_FileHandle_to_js x503);(or_number_to_js
                                                               (fun
                                                                  (x505 :
                                                                    Date.t
                                                                    or_string)
                                                                  ->
                                                                  or_string_to_js
                                                                    Date.t_to_js
                                                                    x505)
                                                               x504);(
                   or_number_to_js
                     (fun (x508 : Date.t or_string) ->
                        or_string_to_js Date.t_to_js x508) x507)|])
    let (realpath :
      path:string ->
        ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null ->
          unit -> string Promise.t)
      =
      fun ~path:(x511 : string) ->
        fun
          ?options:(x512 :
                     (BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
                       option)
          ->
          fun () ->
            Promise.t_of_js Ojs.string_of_js
              (let x518 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x518 "realpath") "apply"
                 [|x518;((let x513 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x513 "push" [|(Ojs.string_to_js x511)|]);
                          (match x512 with
                           | Some x514 ->
                               ignore
                                 (Ojs.call x513 "push"
                                    [|(or_null_to_js
                                         (fun
                                            (x515 :
                                              (BaseEncodingOptions.t,
                                                BufferEncoding.t) union2)
                                            ->
                                            union2_to_js
                                              BaseEncodingOptions.t_to_js
                                              BufferEncoding.t_to_js x515)
                                         x514)|])
                           | None -> ());
                          x513))|])
    let (realpath :
      path:string -> options:BufferEncodingOption.t -> Buffer.t Promise.t) =
      fun ~path:(x520 : string) ->
        fun ~options:(x521 : BufferEncodingOption.t) ->
          Promise.t_of_js Buffer.t_of_js
            (Ojs.call Import.fs_promises "realpath"
               [|(Ojs.string_to_js x520);(BufferEncodingOption.t_to_js x521)|])
    let (realpath :
      path:string ->
        ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null ->
          unit -> Buffer.t or_string Promise.t)
      =
      fun ~path:(x523 : string) ->
        fun
          ?options:(x524 :
                     (BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
                       option)
          ->
          fun () ->
            Promise.t_of_js
              (fun (x531 : Ojs.t) -> or_string_of_js Buffer.t_of_js x531)
              (let x530 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x530 "realpath") "apply"
                 [|x530;((let x525 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x525 "push" [|(Ojs.string_to_js x523)|]);
                          (match x524 with
                           | Some x526 ->
                               ignore
                                 (Ojs.call x525 "push"
                                    [|(or_null_to_js
                                         (fun
                                            (x527 :
                                              (BaseEncodingOptions.t,
                                                BufferEncoding.t) union2)
                                            ->
                                            union2_to_js
                                              BaseEncodingOptions.t_to_js
                                              BufferEncoding.t_to_js x527)
                                         x526)|])
                           | None -> ());
                          x525))|])
    let (mkdtemp :
      prefix:string ->
        ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null ->
          unit -> string Promise.t)
      =
      fun ~prefix:(x533 : string) ->
        fun
          ?options:(x534 :
                     (BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
                       option)
          ->
          fun () ->
            Promise.t_of_js Ojs.string_of_js
              (let x540 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x540 "mkdtemp") "apply"
                 [|x540;((let x535 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x535 "push" [|(Ojs.string_to_js x533)|]);
                          (match x534 with
                           | Some x536 ->
                               ignore
                                 (Ojs.call x535 "push"
                                    [|(or_null_to_js
                                         (fun
                                            (x537 :
                                              (BaseEncodingOptions.t,
                                                BufferEncoding.t) union2)
                                            ->
                                            union2_to_js
                                              BaseEncodingOptions.t_to_js
                                              BufferEncoding.t_to_js x537)
                                         x536)|])
                           | None -> ());
                          x535))|])
    let (mkdtemp :
      prefix:string -> options:BufferEncodingOption.t -> Buffer.t Promise.t)
      =
      fun ~prefix:(x542 : string) ->
        fun ~options:(x543 : BufferEncodingOption.t) ->
          Promise.t_of_js Buffer.t_of_js
            (Ojs.call Import.fs_promises "mkdtemp"
               [|(Ojs.string_to_js x542);(BufferEncodingOption.t_to_js x543)|])
    let (mkdtemp :
      prefix:string ->
        ?options:(BaseEncodingOptions.t, BufferEncoding.t) union2 or_null ->
          unit -> Buffer.t or_string Promise.t)
      =
      fun ~prefix:(x545 : string) ->
        fun
          ?options:(x546 :
                     (BaseEncodingOptions.t, BufferEncoding.t) union2 or_null
                       option)
          ->
          fun () ->
            Promise.t_of_js
              (fun (x553 : Ojs.t) -> or_string_of_js Buffer.t_of_js x553)
              (let x552 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x552 "mkdtemp") "apply"
                 [|x552;((let x547 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x547 "push" [|(Ojs.string_to_js x545)|]);
                          (match x546 with
                           | Some x548 ->
                               ignore
                                 (Ojs.call x547 "push"
                                    [|(or_null_to_js
                                         (fun
                                            (x549 :
                                              (BaseEncodingOptions.t,
                                                BufferEncoding.t) union2)
                                            ->
                                            union2_to_js
                                              BaseEncodingOptions.t_to_js
                                              BufferEncoding.t_to_js x549)
                                         x548)|])
                           | None -> ());
                          x547))|])
    let (writeFile :
      path:(node_fs_promises_FileHandle, string) union2 ->
        data:Uint8Array.t or_string ->
          ?options:BufferEncoding.t or_null -> unit -> unit Promise.t)
      =
      fun ~path:(x555 : (node_fs_promises_FileHandle, string) union2) ->
        fun ~data:(x556 : Uint8Array.t or_string) ->
          fun ?options:(x557 : BufferEncoding.t or_null option) ->
            fun () ->
              Promise.t_of_js Ojs.unit_of_js
                (let x564 = Import.fs_promises in
                 Ojs.call (Ojs.get_prop_ascii x564 "writeFile") "apply"
                   [|x564;((let x558 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x558 "push"
                                 [|(union2_to_js
                                      node_fs_promises_FileHandle_to_js
                                      Ojs.string_to_js x555)|]);
                            ignore
                              (Ojs.call x558 "push"
                                 [|(or_string_to_js Uint8Array.t_to_js x556)|]);
                            (match x557 with
                             | Some x559 ->
                                 ignore
                                   (Ojs.call x558 "push"
                                      [|(or_null_to_js BufferEncoding.t_to_js
                                           x559)|])
                             | None -> ());
                            x558))|])
    let (appendFile :
      path:(node_fs_promises_FileHandle, string) union2 ->
        data:Uint8Array.t or_string ->
          ?options:BufferEncoding.t or_null -> unit -> unit Promise.t)
      =
      fun ~path:(x566 : (node_fs_promises_FileHandle, string) union2) ->
        fun ~data:(x567 : Uint8Array.t or_string) ->
          fun ?options:(x568 : BufferEncoding.t or_null option) ->
            fun () ->
              Promise.t_of_js Ojs.unit_of_js
                (let x575 = Import.fs_promises in
                 Ojs.call (Ojs.get_prop_ascii x575 "appendFile") "apply"
                   [|x575;((let x569 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x569 "push"
                                 [|(union2_to_js
                                      node_fs_promises_FileHandle_to_js
                                      Ojs.string_to_js x566)|]);
                            ignore
                              (Ojs.call x569 "push"
                                 [|(or_string_to_js Uint8Array.t_to_js x567)|]);
                            (match x568 with
                             | Some x570 ->
                                 ignore
                                   (Ojs.call x569 "push"
                                      [|(or_null_to_js BufferEncoding.t_to_js
                                           x570)|])
                             | None -> ());
                            x569))|])
    let (readFile :
      path:(node_fs_promises_FileHandle, string) union2 ->
        ?options:anonymous_interface_6 or_null -> unit -> Buffer.t Promise.t)
      =
      fun ~path:(x577 : (node_fs_promises_FileHandle, string) union2) ->
        fun ?options:(x578 : anonymous_interface_6 or_null option) ->
          fun () ->
            Promise.t_of_js Buffer.t_of_js
              (let x584 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x584 "readFile") "apply"
                 [|x584;((let x579 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x579 "push"
                               [|(union2_to_js
                                    node_fs_promises_FileHandle_to_js
                                    Ojs.string_to_js x577)|]);
                          (match x578 with
                           | Some x580 ->
                               ignore
                                 (Ojs.call x579 "push"
                                    [|(or_null_to_js
                                         anonymous_interface_6_to_js x580)|])
                           | None -> ());
                          x579))|])
    let (readFile :
      path:(node_fs_promises_FileHandle, string) union2 ->
        options:(BufferEncoding.t, anonymous_interface_5) union2 ->
          string Promise.t)
      =
      fun ~path:(x586 : (node_fs_promises_FileHandle, string) union2) ->
        fun
          ~options:(x589 : (BufferEncoding.t, anonymous_interface_5) union2)
          ->
          Promise.t_of_js Ojs.string_of_js
            (Ojs.call Import.fs_promises "readFile"
               [|(union2_to_js node_fs_promises_FileHandle_to_js
                    Ojs.string_to_js x586);(union2_to_js
                                              BufferEncoding.t_to_js
                                              anonymous_interface_5_to_js
                                              x589)|])
    let (readFile :
      path:(node_fs_promises_FileHandle, string) union2 ->
        ?options:BufferEncoding.t or_null ->
          unit -> Buffer.t or_string Promise.t)
      =
      fun ~path:(x593 : (node_fs_promises_FileHandle, string) union2) ->
        fun ?options:(x594 : BufferEncoding.t or_null option) ->
          fun () ->
            Promise.t_of_js
              (fun (x601 : Ojs.t) -> or_string_of_js Buffer.t_of_js x601)
              (let x600 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x600 "readFile") "apply"
                 [|x600;((let x595 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x595 "push"
                               [|(union2_to_js
                                    node_fs_promises_FileHandle_to_js
                                    Ojs.string_to_js x593)|]);
                          (match x594 with
                           | Some x596 ->
                               ignore
                                 (Ojs.call x595 "push"
                                    [|(or_null_to_js BufferEncoding.t_to_js
                                         x596)|])
                           | None -> ());
                          x595))|])
    let (opendir :
      path:string -> ?options:OpenDirOptions.t -> unit -> Dir.t Promise.t) =
      fun ~path:(x603 : string) ->
        fun ?options:(x604 : OpenDirOptions.t option) ->
          fun () ->
            Promise.t_of_js Dir.t_of_js
              (let x607 = Import.fs_promises in
               Ojs.call (Ojs.get_prop_ascii x607 "opendir") "apply"
                 [|x607;((let x605 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x605 "push" [|(Ojs.string_to_js x603)|]);
                          (match x604 with
                           | Some x606 ->
                               ignore
                                 (Ojs.call x605 "push"
                                    [|(OpenDirOptions.t_to_js x606)|])
                           | None -> ());
                          x605))|])
  end
