[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_message : t -> string) =
      fun (x3 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3) "message")
    let (set_message : t -> string -> unit) =
      fun (x4 : t) ->
        fun (x5 : string) ->
          Ojs.set_prop_ascii (t_to_js x4) "message" (Ojs.string_to_js x5)
    let (get_actual : t -> any) =
      fun (x6 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x6) "actual")
    let (set_actual : t -> any -> unit) =
      fun (x7 : t) ->
        fun (x8 : any) ->
          Ojs.set_prop_ascii (t_to_js x7) "actual" (any_to_js x8)
    let (get_expected : t -> any) =
      fun (x9 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x9) "expected")
    let (set_expected : t -> any -> unit) =
      fun (x10 : t) ->
        fun (x11 : any) ->
          Ojs.set_prop_ascii (t_to_js x10) "expected" (any_to_js x11)
    let (get_operator : t -> string) =
      fun (x12 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x12) "operator")
    let (set_operator : t -> string -> unit) =
      fun (x13 : t) ->
        fun (x14 : string) ->
          Ojs.set_prop_ascii (t_to_js x13) "operator" (Ojs.string_to_js x14)
    let (get_stackStartFn : t -> untyped_function) =
      fun (x15 : t) ->
        untyped_function_of_js
          (Ojs.get_prop_ascii (t_to_js x15) "stackStartFn")
    let (set_stackStartFn : t -> untyped_function -> unit) =
      fun (x16 : t) ->
        fun (x17 : untyped_function) ->
          Ojs.set_prop_ascii (t_to_js x16) "stackStartFn"
            (untyped_function_to_js x17)
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x19 : Ojs.t) -> x19
    and t_to_js : t -> Ojs.t = fun (x18 : Ojs.t) -> x18
    let (apply :
      t ->
        actual:any ->
          expected:'T -> ?message:Error.t or_string -> unit -> bool)
      =
      fun (x26 : t) ->
        fun ~actual:(x20 : any) ->
          fun ~expected:(x21 : 'T) ->
            fun ?message:(x22 : Error.t or_string option) ->
              fun () ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x26) "apply"
                     [|Ojs.null;((let x23 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x23 "push" [|(any_to_js x20)|]);
                                  ignore
                                    (Ojs.call x23 "push" [|(Obj.magic x21)|]);
                                  (match x22 with
                                   | Some x24 ->
                                       ignore
                                         (Ojs.call x23 "push"
                                            [|(or_string_to_js Error.t_to_js
                                                 x24)|])
                                   | None -> ());
                                  x23))|])
  end
module AnonymousInterface3 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x28 : Ojs.t) -> x28
    and t_to_js : t -> Ojs.t = fun (x27 : Ojs.t) -> x27
    let (apply :
      t -> value:any -> ?message:Error.t or_string -> unit -> bool) =
      fun (x34 : t) ->
        fun ~value:(x29 : any) ->
          fun ?message:(x30 : Error.t or_string option) ->
            fun () ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x34) "apply"
                   [|Ojs.null;((let x31 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x31 "push" [|(any_to_js x29)|]);
                                (match x30 with
                                 | Some x32 ->
                                     ignore
                                       (Ojs.call x31 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x32)|])
                                 | None -> ());
                                x31))|])
    let (get_equal : t -> AnonymousInterface1.t) =
      fun (x35 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x35) "equal")
    let (set_equal : t -> AnonymousInterface1.t -> unit) =
      fun (x36 : t) ->
        fun (x37 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x36) "equal"
            (AnonymousInterface1.t_to_js x37)
    let (notEqual :
      t ->
        actual:any ->
          expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun (x44 : t) ->
        fun ~actual:(x38 : any) ->
          fun ~expected:(x39 : any) ->
            fun ?message:(x40 : Error.t or_string option) ->
              fun () ->
                ignore
                  (let x45 = t_to_js x44 in
                   Ojs.call (Ojs.get_prop_ascii x45 "notEqual") "apply"
                     [|x45;((let x41 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore (Ojs.call x41 "push" [|(any_to_js x38)|]);
                             ignore (Ojs.call x41 "push" [|(any_to_js x39)|]);
                             (match x40 with
                              | Some x42 ->
                                  ignore
                                    (Ojs.call x41 "push"
                                       [|(or_string_to_js Error.t_to_js x42)|])
                              | None -> ());
                             x41))|])
    let (get_deepEqual : t -> AnonymousInterface1.t) =
      fun (x46 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x46) "deepEqual")
    let (set_deepEqual : t -> AnonymousInterface1.t -> unit) =
      fun (x47 : t) ->
        fun (x48 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x47) "deepEqual"
            (AnonymousInterface1.t_to_js x48)
    let (notDeepEqual :
      t ->
        actual:any ->
          expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun (x55 : t) ->
        fun ~actual:(x49 : any) ->
          fun ~expected:(x50 : any) ->
            fun ?message:(x51 : Error.t or_string option) ->
              fun () ->
                ignore
                  (let x56 = t_to_js x55 in
                   Ojs.call (Ojs.get_prop_ascii x56 "notDeepEqual") "apply"
                     [|x56;((let x52 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore (Ojs.call x52 "push" [|(any_to_js x49)|]);
                             ignore (Ojs.call x52 "push" [|(any_to_js x50)|]);
                             (match x51 with
                              | Some x53 ->
                                  ignore
                                    (Ojs.call x52 "push"
                                       [|(or_string_to_js Error.t_to_js x53)|])
                              | None -> ());
                             x52))|])
    let (ok : t -> value:any -> ?message:Error.t or_string -> unit -> bool) =
      fun (x62 : t) ->
        fun ~value:(x57 : any) ->
          fun ?message:(x58 : Error.t or_string option) ->
            fun () ->
              Ojs.bool_of_js
                (let x63 = t_to_js x62 in
                 Ojs.call (Ojs.get_prop_ascii x63 "ok") "apply"
                   [|x63;((let x59 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore (Ojs.call x59 "push" [|(any_to_js x57)|]);
                           (match x58 with
                            | Some x60 ->
                                ignore
                                  (Ojs.call x59 "push"
                                     [|(or_string_to_js Error.t_to_js x60)|])
                            | None -> ());
                           x59))|])
    let (get_strictEqual : t -> AnonymousInterface1.t) =
      fun (x64 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x64) "strictEqual")
    let (set_strictEqual : t -> AnonymousInterface1.t -> unit) =
      fun (x65 : t) ->
        fun (x66 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x65) "strictEqual"
            (AnonymousInterface1.t_to_js x66)
    let (get_deepStrictEqual : t -> AnonymousInterface1.t) =
      fun (x67 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x67) "deepStrictEqual")
    let (set_deepStrictEqual : t -> AnonymousInterface1.t -> unit) =
      fun (x68 : t) ->
        fun (x69 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x68) "deepStrictEqual"
            (AnonymousInterface1.t_to_js x69)
    let (ifError : t -> value:any -> bool) =
      fun (x71 : t) ->
        fun ~value:(x70 : any) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x71) "ifError" [|(any_to_js x70)|])
    let (get_strict : t -> any) =
      fun (x72 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x72) "strict")
    let (set_strict : t -> any -> unit) =
      fun (x73 : t) ->
        fun (x74 : any) ->
          Ojs.set_prop_ascii (t_to_js x73) "strict" (any_to_js x74)
  end
module AnonymousInterface2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x76 : Ojs.t) -> x76
    and t_to_js : t -> Ojs.t = fun (x75 : Ojs.t) -> x75
    let (apply :
      t -> value:any -> ?message:Error.t or_string -> unit -> bool) =
      fun (x82 : t) ->
        fun ~value:(x77 : any) ->
          fun ?message:(x78 : Error.t or_string option) ->
            fun () ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x82) "apply"
                   [|Ojs.null;((let x79 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x79 "push" [|(any_to_js x77)|]);
                                (match x78 with
                                 | Some x80 ->
                                     ignore
                                       (Ojs.call x79 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x80)|])
                                 | None -> ());
                                x79))|])
    let (get_equal : t -> AnonymousInterface1.t) =
      fun (x83 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x83) "equal")
    let (set_equal : t -> AnonymousInterface1.t -> unit) =
      fun (x84 : t) ->
        fun (x85 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x84) "equal"
            (AnonymousInterface1.t_to_js x85)
    let (notEqual :
      t ->
        actual:any ->
          expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun (x92 : t) ->
        fun ~actual:(x86 : any) ->
          fun ~expected:(x87 : any) ->
            fun ?message:(x88 : Error.t or_string option) ->
              fun () ->
                ignore
                  (let x93 = t_to_js x92 in
                   Ojs.call (Ojs.get_prop_ascii x93 "notEqual") "apply"
                     [|x93;((let x89 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore (Ojs.call x89 "push" [|(any_to_js x86)|]);
                             ignore (Ojs.call x89 "push" [|(any_to_js x87)|]);
                             (match x88 with
                              | Some x90 ->
                                  ignore
                                    (Ojs.call x89 "push"
                                       [|(or_string_to_js Error.t_to_js x90)|])
                              | None -> ());
                             x89))|])
    let (get_deepEqual : t -> AnonymousInterface1.t) =
      fun (x94 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x94) "deepEqual")
    let (set_deepEqual : t -> AnonymousInterface1.t -> unit) =
      fun (x95 : t) ->
        fun (x96 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x95) "deepEqual"
            (AnonymousInterface1.t_to_js x96)
    let (notDeepEqual :
      t ->
        actual:any ->
          expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun (x103 : t) ->
        fun ~actual:(x97 : any) ->
          fun ~expected:(x98 : any) ->
            fun ?message:(x99 : Error.t or_string option) ->
              fun () ->
                ignore
                  (let x104 = t_to_js x103 in
                   Ojs.call (Ojs.get_prop_ascii x104 "notDeepEqual") "apply"
                     [|x104;((let x100 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x100 "push" [|(any_to_js x97)|]);
                              ignore
                                (Ojs.call x100 "push" [|(any_to_js x98)|]);
                              (match x99 with
                               | Some x101 ->
                                   ignore
                                     (Ojs.call x100 "push"
                                        [|(or_string_to_js Error.t_to_js x101)|])
                               | None -> ());
                              x100))|])
    let (ok : t -> value:any -> ?message:Error.t or_string -> unit -> bool) =
      fun (x110 : t) ->
        fun ~value:(x105 : any) ->
          fun ?message:(x106 : Error.t or_string option) ->
            fun () ->
              Ojs.bool_of_js
                (let x111 = t_to_js x110 in
                 Ojs.call (Ojs.get_prop_ascii x111 "ok") "apply"
                   [|x111;((let x107 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x107 "push" [|(any_to_js x105)|]);
                            (match x106 with
                             | Some x108 ->
                                 ignore
                                   (Ojs.call x107 "push"
                                      [|(or_string_to_js Error.t_to_js x108)|])
                             | None -> ());
                            x107))|])
    let (get_strictEqual : t -> AnonymousInterface1.t) =
      fun (x112 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x112) "strictEqual")
    let (set_strictEqual : t -> AnonymousInterface1.t -> unit) =
      fun (x113 : t) ->
        fun (x114 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x113) "strictEqual"
            (AnonymousInterface1.t_to_js x114)
    let (get_deepStrictEqual : t -> AnonymousInterface1.t) =
      fun (x115 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x115) "deepStrictEqual")
    let (set_deepStrictEqual : t -> AnonymousInterface1.t -> unit) =
      fun (x116 : t) ->
        fun (x117 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x116) "deepStrictEqual"
            (AnonymousInterface1.t_to_js x117)
    let (ifError : t -> value:any -> bool) =
      fun (x119 : t) ->
        fun ~value:(x118 : any) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x119) "ifError" [|(any_to_js x118)|])
    let (get_strict :
      t ->
        ((value:any -> ?message:Error.t or_string -> unit -> bool,
           [ `L_s1_deepEqual  | `L_s2_deepStrictEqual  | `L_s3_equal 
           | `L_s4_ifError  | `L_s5_notDeepEqual  | `L_s6_notEqual 
           | `L_s7_ok  | `L_s8_strict  | `L_s9_strictEqual ]) Omit.t,
          AnonymousInterface3.t) intersection2)
      =
      fun (x120 : t) ->
        intersection2_of_js
          (fun (x121 : Ojs.t) ->
             Omit.t_of_js
               (fun (x122 : Ojs.t) ->
                  fun ~value:(x123 : any) ->
                    fun ?message:(x124 : Error.t or_string option) ->
                      fun () ->
                        Ojs.bool_of_js
                          (Ojs.call x122 "apply"
                             [|Ojs.null;((let x125 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          ignore
                                            (Ojs.call x125 "push"
                                               [|(any_to_js x123)|]);
                                          (match x124 with
                                           | Some x126 ->
                                               ignore
                                                 (Ojs.call x125 "push"
                                                    [|(or_string_to_js
                                                         Error.t_to_js x126)|])
                                           | None -> ());
                                          x125))|]))
               (fun (x128 : Ojs.t) ->
                  let x129 = x128 in
                  match Ojs.string_of_js x129 with
                  | "deepEqual" -> `L_s1_deepEqual
                  | "deepStrictEqual" -> `L_s2_deepStrictEqual
                  | "equal" -> `L_s3_equal
                  | "ifError" -> `L_s4_ifError
                  | "notDeepEqual" -> `L_s5_notDeepEqual
                  | "notEqual" -> `L_s6_notEqual
                  | "ok" -> `L_s7_ok
                  | "strict" -> `L_s8_strict
                  | "strictEqual" -> `L_s9_strictEqual
                  | _ -> assert false) x121) AnonymousInterface3.t_of_js
          (Ojs.get_prop_ascii (t_to_js x120) "strict")
    let (set_strict :
      t ->
        ((value:any -> ?message:Error.t or_string -> unit -> bool,
           [ `L_s1_deepEqual  | `L_s2_deepStrictEqual  | `L_s3_equal 
           | `L_s4_ifError  | `L_s5_notDeepEqual  | `L_s6_notEqual 
           | `L_s7_ok  | `L_s8_strict  | `L_s9_strictEqual ]) Omit.t,
          AnonymousInterface3.t) intersection2 -> unit)
      =
      fun (x131 : t) ->
        fun
          (x132 :
            ((value:any -> ?message:Error.t or_string -> unit -> bool,
               [ `L_s1_deepEqual  | `L_s2_deepStrictEqual  | `L_s3_equal 
               | `L_s4_ifError  | `L_s5_notDeepEqual  | `L_s6_notEqual 
               | `L_s7_ok  | `L_s8_strict  | `L_s9_strictEqual ]) Omit.t,
              AnonymousInterface3.t) intersection2)
          ->
          Ojs.set_prop_ascii (t_to_js x131) "strict"
            (intersection2_to_js
               (fun
                  (x133 :
                    (value:any -> ?message:Error.t or_string -> unit -> bool,
                      [ `L_s1_deepEqual  | `L_s2_deepStrictEqual 
                      | `L_s3_equal  | `L_s4_ifError  | `L_s5_notDeepEqual 
                      | `L_s6_notEqual  | `L_s7_ok  | `L_s8_strict 
                      | `L_s9_strictEqual ]) Omit.t)
                  ->
                  Omit.t_to_js
                    (fun
                       (x134 :
                         value:any ->
                           ?message:Error.t or_string -> unit -> bool)
                       ->
                       Ojs.fun_to_js 2
                         (fun (x135 : Ojs.t) ->
                            fun (x136 : Ojs.t) ->
                              Ojs.bool_to_js
                                (x134 ~value:(any_of_js x135)
                                   ?message:(Ojs.option_of_js
                                               (fun (x137 : Ojs.t) ->
                                                  or_string_of_js
                                                    Error.t_of_js x137) x136)
                                   ())))
                    (fun
                       (x139 :
                         [ `L_s1_deepEqual  | `L_s2_deepStrictEqual 
                         | `L_s3_equal  | `L_s4_ifError 
                         | `L_s5_notDeepEqual  | `L_s6_notEqual  | `L_s7_ok 
                         | `L_s8_strict  | `L_s9_strictEqual ])
                       ->
                       match x139 with
                       | `L_s1_deepEqual -> Ojs.string_to_js "LS1DeepEqual"
                       | `L_s2_deepStrictEqual ->
                           Ojs.string_to_js "LS2DeepStrictEqual"
                       | `L_s3_equal -> Ojs.string_to_js "LS3Equal"
                       | `L_s4_ifError -> Ojs.string_to_js "LS4IfError"
                       | `L_s5_notDeepEqual ->
                           Ojs.string_to_js "LS5NotDeepEqual"
                       | `L_s6_notEqual -> Ojs.string_to_js "LS6NotEqual"
                       | `L_s7_ok -> Ojs.string_to_js "LS7Ok"
                       | `L_s8_strict -> Ojs.string_to_js "LS8Strict"
                       | `L_s9_strictEqual ->
                           Ojs.string_to_js "LS9StrictEqual") x133)
               AnonymousInterface3.t_to_js x132)
  end
module AnonymousInterface4 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x142 : Ojs.t) -> x142
    and t_to_js : t -> Ojs.t = fun (x141 : Ojs.t) -> x141
    let (create : t -> untyped_object) =
      fun (x143 : t) ->
        untyped_object_of_js (Ojs.new_obj (t_to_js x143) [||])
  end
module Assert =
  struct
    let (assert_ : value:any -> ?message:Error.t or_string -> unit -> bool) =
      fun ~value:(x144 : any) ->
        fun ?message:(x145 : Error.t or_string option) ->
          fun () ->
            Ojs.bool_of_js
              (let x149 = Import.assert_ in
               Ojs.call (Ojs.get_prop_ascii x149 "assert") "apply"
                 [|x149;((let x146 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore (Ojs.call x146 "push" [|(any_to_js x144)|]);
                          (match x145 with
                           | Some x147 ->
                               ignore
                                 (Ojs.call x146 "push"
                                    [|(or_string_to_js Error.t_to_js x147)|])
                           | None -> ());
                          x146))|])
    module Assert =
      struct
        module AssertionError =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x151 : Ojs.t) -> x151
            and t_to_js : t -> Ojs.t = fun (x150 : Ojs.t) -> x150
            let (get_actual : t -> any) =
              fun (x152 : t) ->
                any_of_js (Ojs.get_prop_ascii (t_to_js x152) "actual")
            let (set_actual : t -> any -> unit) =
              fun (x153 : t) ->
                fun (x154 : any) ->
                  Ojs.set_prop_ascii (t_to_js x153) "actual" (any_to_js x154)
            let (get_expected : t -> any) =
              fun (x155 : t) ->
                any_of_js (Ojs.get_prop_ascii (t_to_js x155) "expected")
            let (set_expected : t -> any -> unit) =
              fun (x156 : t) ->
                fun (x157 : any) ->
                  Ojs.set_prop_ascii (t_to_js x156) "expected"
                    (any_to_js x157)
            let (get_operator : t -> string) =
              fun (x158 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x158) "operator")
            let (set_operator : t -> string -> unit) =
              fun (x159 : t) ->
                fun (x160 : string) ->
                  Ojs.set_prop_ascii (t_to_js x159) "operator"
                    (Ojs.string_to_js x160)
            let (get_generatedMessage : t -> bool) =
              fun (x161 : t) ->
                Ojs.bool_of_js
                  (Ojs.get_prop_ascii (t_to_js x161) "generatedMessage")
            let (set_generatedMessage : t -> bool -> unit) =
              fun (x162 : t) ->
                fun (x163 : bool) ->
                  Ojs.set_prop_ascii (t_to_js x162) "generatedMessage"
                    (Ojs.bool_to_js x163)
            let (get_code : t -> [ `L_s0_ERR_ASSERTION ]) =
              fun (x164 : t) ->
                let x165 = Ojs.get_prop_ascii (t_to_js x164) "code" in
                match Ojs.string_of_js x165 with
                | "ERR_ASSERTION" -> `L_s0_ERR_ASSERTION
                | _ -> assert false
            let (set_code : t -> [ `L_s0_ERR_ASSERTION ] -> unit) =
              fun (x166 : t) ->
                fun (x167 : [ `L_s0_ERR_ASSERTION ]) ->
                  Ojs.set_prop_ascii (t_to_js x166) "code"
                    (match x167 with
                     | `L_s0_ERR_ASSERTION ->
                         Ojs.string_to_js "LS0ERRASSERTION")
            let (create : ?options:AnonymousInterface0.t -> unit -> t) =
              fun ?options:(x168 : AnonymousInterface0.t option) ->
                fun () ->
                  t_of_js
                    (Ojs.new_obj_arr
                       (Ojs.get_prop_ascii
                          (Ojs.get_prop_ascii Import.assert_ "assert")
                          "AssertionError")
                       (let x169 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x168 with
                         | Some x170 ->
                             ignore
                               (Ojs.call x169 "push"
                                  [|(AnonymousInterface0.t_to_js x170)|])
                         | None -> ());
                        x169))
            let (cast : t -> Error.t) =
              fun (x171 : t) -> Error.t_of_js (t_to_js x171)
          end
        module CallTrackerReportInformation =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x173 : Ojs.t) -> x173
            and t_to_js : t -> Ojs.t = fun (x172 : Ojs.t) -> x172
            let (get_message : t -> string) =
              fun (x174 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x174) "message")
            let (set_message : t -> string -> unit) =
              fun (x175 : t) ->
                fun (x176 : string) ->
                  Ojs.set_prop_ascii (t_to_js x175) "message"
                    (Ojs.string_to_js x176)
            let (get_actual : t -> float) =
              fun (x177 : t) ->
                Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x177) "actual")
            let (set_actual : t -> float -> unit) =
              fun (x178 : t) ->
                fun (x179 : float) ->
                  Ojs.set_prop_ascii (t_to_js x178) "actual"
                    (Ojs.float_to_js x179)
            let (get_expected : t -> float) =
              fun (x180 : t) ->
                Ojs.float_of_js
                  (Ojs.get_prop_ascii (t_to_js x180) "expected")
            let (set_expected : t -> float -> unit) =
              fun (x181 : t) ->
                fun (x182 : float) ->
                  Ojs.set_prop_ascii (t_to_js x181) "expected"
                    (Ojs.float_to_js x182)
            let (get_operator : t -> string) =
              fun (x183 : t) ->
                Ojs.string_of_js
                  (Ojs.get_prop_ascii (t_to_js x183) "operator")
            let (set_operator : t -> string -> unit) =
              fun (x184 : t) ->
                fun (x185 : string) ->
                  Ojs.set_prop_ascii (t_to_js x184) "operator"
                    (Ojs.string_to_js x185)
            let (get_stack : t -> untyped_object) =
              fun (x186 : t) ->
                untyped_object_of_js
                  (Ojs.get_prop_ascii (t_to_js x186) "stack")
            let (set_stack : t -> untyped_object -> unit) =
              fun (x187 : t) ->
                fun (x188 : untyped_object) ->
                  Ojs.set_prop_ascii (t_to_js x187) "stack"
                    (untyped_object_to_js x188)
          end
        module CallTracker =
          struct
            type t = Ojs.t
            let rec t_of_js : Ojs.t -> t = fun (x190 : Ojs.t) -> x190
            and t_to_js : t -> Ojs.t = fun (x189 : Ojs.t) -> x189
            let (calls : t -> ?exact:float -> unit -> unit -> unit) =
              fun (x194 : t) ->
                fun ?exact:(x191 : float option) ->
                  fun () ->
                    fun () ->
                      ignore
                        (Ojs.apply
                           (let x195 = t_to_js x194 in
                            Ojs.call (Ojs.get_prop_ascii x195 "calls")
                              "apply"
                              [|x195;((let x192 =
                                         Ojs.new_obj
                                           (Ojs.get_prop_ascii Ojs.global
                                              "Array") [||] in
                                       (match x191 with
                                        | Some x193 ->
                                            ignore
                                              (Ojs.call x192 "push"
                                                 [|(Ojs.float_to_js x193)|])
                                        | None -> ());
                                       x192))|]) [||])
            let (calls' : t -> ?fn:'Func -> ?exact:float -> unit -> 'Func) =
              fun (x201 : t) ->
                fun ?fn:(x196 : 'Func option) ->
                  fun ?exact:(x197 : float option) ->
                    fun () ->
                      Obj.magic
                        (let x202 = t_to_js x201 in
                         Ojs.call (Ojs.get_prop_ascii x202 "calls") "apply"
                           [|x202;((let x198 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    (match x196 with
                                     | Some x200 ->
                                         ignore
                                           (Ojs.call x198 "push"
                                              [|(Obj.magic x200)|])
                                     | None -> ());
                                    (match x197 with
                                     | Some x199 ->
                                         ignore
                                           (Ojs.call x198 "push"
                                              [|(Ojs.float_to_js x199)|])
                                     | None -> ());
                                    x198))|])
            let (report : t -> CallTrackerReportInformation.t list) =
              fun (x203 : t) ->
                Ojs.list_of_js CallTrackerReportInformation.t_of_js
                  (Ojs.call (t_to_js x203) "report" [||])
            let (verify : t -> unit) =
              fun (x205 : t) ->
                ignore (Ojs.call (t_to_js x205) "verify" [||])
          end
        module AssertPredicate =
          struct
            type t =
              (Error.t, regexp, untyped_object, AnonymousInterface4.t,
                thrown:any -> bool) union5
            let rec t_of_js : Ojs.t -> t =
              fun (x213 : Ojs.t) ->
                union5_of_js Error.t_of_js regexp_of_js untyped_object_of_js
                  AnonymousInterface4.t_of_js
                  (fun (x218 : Ojs.t) ->
                     fun ~thrown:(x219 : any) ->
                       Ojs.bool_of_js (Ojs.apply x218 [|(any_to_js x219)|]))
                  x213
            and t_to_js : t -> Ojs.t =
              fun
                (x206 :
                  (Error.t, regexp, untyped_object, AnonymousInterface4.t,
                    thrown:any -> bool) union5)
                ->
                union5_to_js Error.t_to_js regexp_to_js untyped_object_to_js
                  AnonymousInterface4.t_to_js
                  (fun (x211 : thrown:any -> bool) ->
                     Ojs.fun_to_js 1
                       (fun (x212 : Ojs.t) ->
                          Ojs.bool_to_js (x211 ~thrown:(any_of_js x212))))
                  x206
          end
        let (fail : ?message:Error.t or_string -> unit -> never) =
          fun ?message:(x220 : Error.t or_string option) ->
            fun () ->
              never_of_js
                (let x224 = Ojs.get_prop_ascii Import.assert_ "assert" in
                 Ojs.call (Ojs.get_prop_ascii x224 "fail") "apply"
                   [|x224;((let x221 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            (match x220 with
                             | Some x222 ->
                                 ignore
                                   (Ojs.call x221 "push"
                                      [|(or_string_to_js Error.t_to_js x222)|])
                             | None -> ());
                            x221))|])
        let (fail :
          actual:any ->
            expected:any ->
              ?message:Error.t or_string ->
                ?operator:string ->
                  ?stackStartFn:untyped_function -> unit -> never)
          =
          fun ~actual:(x225 : any) ->
            fun ~expected:(x226 : any) ->
              fun ?message:(x227 : Error.t or_string option) ->
                fun ?operator:(x228 : string option) ->
                  fun ?stackStartFn:(x229 : untyped_function option) ->
                    fun () ->
                      never_of_js
                        (let x235 =
                           Ojs.get_prop_ascii Import.assert_ "assert" in
                         Ojs.call (Ojs.get_prop_ascii x235 "fail") "apply"
                           [|x235;((let x230 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x230 "push"
                                         [|(any_to_js x225)|]);
                                    ignore
                                      (Ojs.call x230 "push"
                                         [|(any_to_js x226)|]);
                                    (match x227 with
                                     | Some x233 ->
                                         ignore
                                           (Ojs.call x230 "push"
                                              [|(or_string_to_js
                                                   Error.t_to_js x233)|])
                                     | None -> ());
                                    (match x228 with
                                     | Some x232 ->
                                         ignore
                                           (Ojs.call x230 "push"
                                              [|(Ojs.string_to_js x232)|])
                                     | None -> ());
                                    (match x229 with
                                     | Some x231 ->
                                         ignore
                                           (Ojs.call x230 "push"
                                              [|(untyped_function_to_js x231)|])
                                     | None -> ());
                                    x230))|])
        let (ok : value:any -> ?message:Error.t or_string -> unit -> bool) =
          fun ~value:(x236 : any) ->
            fun ?message:(x237 : Error.t or_string option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x241 = Ojs.get_prop_ascii Import.assert_ "assert" in
                   Ojs.call (Ojs.get_prop_ascii x241 "ok") "apply"
                     [|x241;((let x238 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x238 "push" [|(any_to_js x236)|]);
                              (match x237 with
                               | Some x239 ->
                                   ignore
                                     (Ojs.call x238 "push"
                                        [|(or_string_to_js Error.t_to_js x239)|])
                               | None -> ());
                              x238))|])
        let (equal :
          actual:any ->
            expected:any -> ?message:Error.t or_string -> unit -> unit)
          =
          fun ~actual:(x242 : any) ->
            fun ~expected:(x243 : any) ->
              fun ?message:(x244 : Error.t or_string option) ->
                fun () ->
                  ignore
                    (let x248 = Ojs.get_prop_ascii Import.assert_ "assert" in
                     Ojs.call (Ojs.get_prop_ascii x248 "equal") "apply"
                       [|x248;((let x245 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x245 "push" [|(any_to_js x242)|]);
                                ignore
                                  (Ojs.call x245 "push" [|(any_to_js x243)|]);
                                (match x244 with
                                 | Some x246 ->
                                     ignore
                                       (Ojs.call x245 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x246)|])
                                 | None -> ());
                                x245))|])
        let (notEqual :
          actual:any ->
            expected:any -> ?message:Error.t or_string -> unit -> unit)
          =
          fun ~actual:(x249 : any) ->
            fun ~expected:(x250 : any) ->
              fun ?message:(x251 : Error.t or_string option) ->
                fun () ->
                  ignore
                    (let x255 = Ojs.get_prop_ascii Import.assert_ "assert" in
                     Ojs.call (Ojs.get_prop_ascii x255 "notEqual") "apply"
                       [|x255;((let x252 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x252 "push" [|(any_to_js x249)|]);
                                ignore
                                  (Ojs.call x252 "push" [|(any_to_js x250)|]);
                                (match x251 with
                                 | Some x253 ->
                                     ignore
                                       (Ojs.call x252 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x253)|])
                                 | None -> ());
                                x252))|])
        let (deepEqual :
          actual:any ->
            expected:any -> ?message:Error.t or_string -> unit -> unit)
          =
          fun ~actual:(x256 : any) ->
            fun ~expected:(x257 : any) ->
              fun ?message:(x258 : Error.t or_string option) ->
                fun () ->
                  ignore
                    (let x262 = Ojs.get_prop_ascii Import.assert_ "assert" in
                     Ojs.call (Ojs.get_prop_ascii x262 "deepEqual") "apply"
                       [|x262;((let x259 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x259 "push" [|(any_to_js x256)|]);
                                ignore
                                  (Ojs.call x259 "push" [|(any_to_js x257)|]);
                                (match x258 with
                                 | Some x260 ->
                                     ignore
                                       (Ojs.call x259 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x260)|])
                                 | None -> ());
                                x259))|])
        let (notDeepEqual :
          actual:any ->
            expected:any -> ?message:Error.t or_string -> unit -> unit)
          =
          fun ~actual:(x263 : any) ->
            fun ~expected:(x264 : any) ->
              fun ?message:(x265 : Error.t or_string option) ->
                fun () ->
                  ignore
                    (let x269 = Ojs.get_prop_ascii Import.assert_ "assert" in
                     Ojs.call (Ojs.get_prop_ascii x269 "notDeepEqual")
                       "apply"
                       [|x269;((let x266 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x266 "push" [|(any_to_js x263)|]);
                                ignore
                                  (Ojs.call x266 "push" [|(any_to_js x264)|]);
                                (match x265 with
                                 | Some x267 ->
                                     ignore
                                       (Ojs.call x266 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x267)|])
                                 | None -> ());
                                x266))|])
        let (strictEqual :
          actual:any ->
            expected:'T -> ?message:Error.t or_string -> unit -> bool)
          =
          fun ~actual:(x270 : any) ->
            fun ~expected:(x271 : 'T) ->
              fun ?message:(x272 : Error.t or_string option) ->
                fun () ->
                  Ojs.bool_of_js
                    (let x276 = Ojs.get_prop_ascii Import.assert_ "assert" in
                     Ojs.call (Ojs.get_prop_ascii x276 "strictEqual") "apply"
                       [|x276;((let x273 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x273 "push" [|(any_to_js x270)|]);
                                ignore
                                  (Ojs.call x273 "push" [|(Obj.magic x271)|]);
                                (match x272 with
                                 | Some x274 ->
                                     ignore
                                       (Ojs.call x273 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x274)|])
                                 | None -> ());
                                x273))|])
        let (notStrictEqual :
          actual:any ->
            expected:any -> ?message:Error.t or_string -> unit -> unit)
          =
          fun ~actual:(x277 : any) ->
            fun ~expected:(x278 : any) ->
              fun ?message:(x279 : Error.t or_string option) ->
                fun () ->
                  ignore
                    (let x283 = Ojs.get_prop_ascii Import.assert_ "assert" in
                     Ojs.call (Ojs.get_prop_ascii x283 "notStrictEqual")
                       "apply"
                       [|x283;((let x280 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x280 "push" [|(any_to_js x277)|]);
                                ignore
                                  (Ojs.call x280 "push" [|(any_to_js x278)|]);
                                (match x279 with
                                 | Some x281 ->
                                     ignore
                                       (Ojs.call x280 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x281)|])
                                 | None -> ());
                                x280))|])
        let (deepStrictEqual :
          actual:any ->
            expected:'T -> ?message:Error.t or_string -> unit -> bool)
          =
          fun ~actual:(x284 : any) ->
            fun ~expected:(x285 : 'T) ->
              fun ?message:(x286 : Error.t or_string option) ->
                fun () ->
                  Ojs.bool_of_js
                    (let x290 = Ojs.get_prop_ascii Import.assert_ "assert" in
                     Ojs.call (Ojs.get_prop_ascii x290 "deepStrictEqual")
                       "apply"
                       [|x290;((let x287 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x287 "push" [|(any_to_js x284)|]);
                                ignore
                                  (Ojs.call x287 "push" [|(Obj.magic x285)|]);
                                (match x286 with
                                 | Some x288 ->
                                     ignore
                                       (Ojs.call x287 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x288)|])
                                 | None -> ());
                                x287))|])
        let (notDeepStrictEqual :
          actual:any ->
            expected:any -> ?message:Error.t or_string -> unit -> unit)
          =
          fun ~actual:(x291 : any) ->
            fun ~expected:(x292 : any) ->
              fun ?message:(x293 : Error.t or_string option) ->
                fun () ->
                  ignore
                    (let x297 = Ojs.get_prop_ascii Import.assert_ "assert" in
                     Ojs.call (Ojs.get_prop_ascii x297 "notDeepStrictEqual")
                       "apply"
                       [|x297;((let x294 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x294 "push" [|(any_to_js x291)|]);
                                ignore
                                  (Ojs.call x294 "push" [|(any_to_js x292)|]);
                                (match x293 with
                                 | Some x295 ->
                                     ignore
                                       (Ojs.call x294 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x295)|])
                                 | None -> ());
                                x294))|])
        let (throws :
          block:(unit -> any) -> ?message:Error.t or_string -> unit -> unit)
          =
          fun ~block:(x298 : unit -> any) ->
            fun ?message:(x299 : Error.t or_string option) ->
              fun () ->
                ignore
                  (let x303 = Ojs.get_prop_ascii Import.assert_ "assert" in
                   Ojs.call (Ojs.get_prop_ascii x303 "throws") "apply"
                     [|x303;((let x300 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x300 "push"
                                   [|(Ojs.fun_to_js 1
                                        (fun _ -> any_to_js (x298 ())))|]);
                              (match x299 with
                               | Some x301 ->
                                   ignore
                                     (Ojs.call x300 "push"
                                        [|(or_string_to_js Error.t_to_js x301)|])
                               | None -> ());
                              x300))|])
        let (throws :
          block:(unit -> any) ->
            error:AssertPredicate.t ->
              ?message:Error.t or_string -> unit -> unit)
          =
          fun ~block:(x304 : unit -> any) ->
            fun ~error:(x305 : AssertPredicate.t) ->
              fun ?message:(x306 : Error.t or_string option) ->
                fun () ->
                  ignore
                    (let x310 = Ojs.get_prop_ascii Import.assert_ "assert" in
                     Ojs.call (Ojs.get_prop_ascii x310 "throws") "apply"
                       [|x310;((let x307 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x307 "push"
                                     [|(Ojs.fun_to_js 1
                                          (fun _ -> any_to_js (x304 ())))|]);
                                ignore
                                  (Ojs.call x307 "push"
                                     [|(AssertPredicate.t_to_js x305)|]);
                                (match x306 with
                                 | Some x308 ->
                                     ignore
                                       (Ojs.call x307 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x308)|])
                                 | None -> ());
                                x307))|])
        let (doesNotThrow :
          block:(unit -> any) -> ?message:Error.t or_string -> unit -> unit)
          =
          fun ~block:(x311 : unit -> any) ->
            fun ?message:(x312 : Error.t or_string option) ->
              fun () ->
                ignore
                  (let x316 = Ojs.get_prop_ascii Import.assert_ "assert" in
                   Ojs.call (Ojs.get_prop_ascii x316 "doesNotThrow") "apply"
                     [|x316;((let x313 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x313 "push"
                                   [|(Ojs.fun_to_js 1
                                        (fun _ -> any_to_js (x311 ())))|]);
                              (match x312 with
                               | Some x314 ->
                                   ignore
                                     (Ojs.call x313 "push"
                                        [|(or_string_to_js Error.t_to_js x314)|])
                               | None -> ());
                              x313))|])
        let (doesNotThrow :
          block:(unit -> any) ->
            error:AssertPredicate.t ->
              ?message:Error.t or_string -> unit -> unit)
          =
          fun ~block:(x317 : unit -> any) ->
            fun ~error:(x318 : AssertPredicate.t) ->
              fun ?message:(x319 : Error.t or_string option) ->
                fun () ->
                  ignore
                    (let x323 = Ojs.get_prop_ascii Import.assert_ "assert" in
                     Ojs.call (Ojs.get_prop_ascii x323 "doesNotThrow")
                       "apply"
                       [|x323;((let x320 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x320 "push"
                                     [|(Ojs.fun_to_js 1
                                          (fun _ -> any_to_js (x317 ())))|]);
                                ignore
                                  (Ojs.call x320 "push"
                                     [|(AssertPredicate.t_to_js x318)|]);
                                (match x319 with
                                 | Some x321 ->
                                     ignore
                                       (Ojs.call x320 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x321)|])
                                 | None -> ());
                                x320))|])
        let (ifError : value:any -> bool) =
          fun ~value:(x324 : any) ->
            Ojs.bool_of_js
              (Ojs.call (Ojs.get_prop_ascii Import.assert_ "assert")
                 "ifError" [|(any_to_js x324)|])
        let (rejects :
          block:(unit -> any Promise.t, any Promise.t) union2 ->
            ?message:Error.t or_string -> unit -> unit Promise.t)
          =
          fun ~block:(x325 : (unit -> any Promise.t, any Promise.t) union2)
            ->
            fun ?message:(x326 : Error.t or_string option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x334 = Ojs.get_prop_ascii Import.assert_ "assert" in
                   Ojs.call (Ojs.get_prop_ascii x334 "rejects") "apply"
                     [|x334;((let x327 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x327 "push"
                                   [|(union2_to_js
                                        (fun (x330 : unit -> any Promise.t)
                                           ->
                                           Ojs.fun_to_js 1
                                             (fun _ ->
                                                Promise.t_to_js any_to_js
                                                  (x330 ())))
                                        (fun (x332 : any Promise.t) ->
                                           Promise.t_to_js any_to_js x332)
                                        x325)|]);
                              (match x326 with
                               | Some x328 ->
                                   ignore
                                     (Ojs.call x327 "push"
                                        [|(or_string_to_js Error.t_to_js x328)|])
                               | None -> ());
                              x327))|])
        let (rejects :
          block:(unit -> any Promise.t, any Promise.t) union2 ->
            error:AssertPredicate.t ->
              ?message:Error.t or_string -> unit -> unit Promise.t)
          =
          fun ~block:(x336 : (unit -> any Promise.t, any Promise.t) union2)
            ->
            fun ~error:(x337 : AssertPredicate.t) ->
              fun ?message:(x338 : Error.t or_string option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x346 = Ojs.get_prop_ascii Import.assert_ "assert" in
                     Ojs.call (Ojs.get_prop_ascii x346 "rejects") "apply"
                       [|x346;((let x339 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x339 "push"
                                     [|(union2_to_js
                                          (fun (x342 : unit -> any Promise.t)
                                             ->
                                             Ojs.fun_to_js 1
                                               (fun _ ->
                                                  Promise.t_to_js any_to_js
                                                    (x342 ())))
                                          (fun (x344 : any Promise.t) ->
                                             Promise.t_to_js any_to_js x344)
                                          x336)|]);
                                ignore
                                  (Ojs.call x339 "push"
                                     [|(AssertPredicate.t_to_js x337)|]);
                                (match x338 with
                                 | Some x340 ->
                                     ignore
                                       (Ojs.call x339 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x340)|])
                                 | None -> ());
                                x339))|])
        let (doesNotReject :
          block:(unit -> any Promise.t, any Promise.t) union2 ->
            ?message:Error.t or_string -> unit -> unit Promise.t)
          =
          fun ~block:(x348 : (unit -> any Promise.t, any Promise.t) union2)
            ->
            fun ?message:(x349 : Error.t or_string option) ->
              fun () ->
                Promise.t_of_js Ojs.unit_of_js
                  (let x357 = Ojs.get_prop_ascii Import.assert_ "assert" in
                   Ojs.call (Ojs.get_prop_ascii x357 "doesNotReject") "apply"
                     [|x357;((let x350 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x350 "push"
                                   [|(union2_to_js
                                        (fun (x353 : unit -> any Promise.t)
                                           ->
                                           Ojs.fun_to_js 1
                                             (fun _ ->
                                                Promise.t_to_js any_to_js
                                                  (x353 ())))
                                        (fun (x355 : any Promise.t) ->
                                           Promise.t_to_js any_to_js x355)
                                        x348)|]);
                              (match x349 with
                               | Some x351 ->
                                   ignore
                                     (Ojs.call x350 "push"
                                        [|(or_string_to_js Error.t_to_js x351)|])
                               | None -> ());
                              x350))|])
        let (doesNotReject :
          block:(unit -> any Promise.t, any Promise.t) union2 ->
            error:AssertPredicate.t ->
              ?message:Error.t or_string -> unit -> unit Promise.t)
          =
          fun ~block:(x359 : (unit -> any Promise.t, any Promise.t) union2)
            ->
            fun ~error:(x360 : AssertPredicate.t) ->
              fun ?message:(x361 : Error.t or_string option) ->
                fun () ->
                  Promise.t_of_js Ojs.unit_of_js
                    (let x369 = Ojs.get_prop_ascii Import.assert_ "assert" in
                     Ojs.call (Ojs.get_prop_ascii x369 "doesNotReject")
                       "apply"
                       [|x369;((let x362 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x362 "push"
                                     [|(union2_to_js
                                          (fun (x365 : unit -> any Promise.t)
                                             ->
                                             Ojs.fun_to_js 1
                                               (fun _ ->
                                                  Promise.t_to_js any_to_js
                                                    (x365 ())))
                                          (fun (x367 : any Promise.t) ->
                                             Promise.t_to_js any_to_js x367)
                                          x359)|]);
                                ignore
                                  (Ojs.call x362 "push"
                                     [|(AssertPredicate.t_to_js x360)|]);
                                (match x361 with
                                 | Some x363 ->
                                     ignore
                                       (Ojs.call x362 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x363)|])
                                 | None -> ());
                                x362))|])
        let (match_ :
          value:string ->
            regExp:regexp -> ?message:Error.t or_string -> unit -> unit)
          =
          fun ~value:(x371 : string) ->
            fun ~regExp:(x372 : regexp) ->
              fun ?message:(x373 : Error.t or_string option) ->
                fun () ->
                  ignore
                    (let x377 = Ojs.get_prop_ascii Import.assert_ "assert" in
                     Ojs.call (Ojs.get_prop_ascii x377 "match") "apply"
                       [|x377;((let x374 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x374 "push"
                                     [|(Ojs.string_to_js x371)|]);
                                ignore
                                  (Ojs.call x374 "push"
                                     [|(regexp_to_js x372)|]);
                                (match x373 with
                                 | Some x375 ->
                                     ignore
                                       (Ojs.call x374 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x375)|])
                                 | None -> ());
                                x374))|])
        let (doesNotMatch :
          value:string ->
            regExp:regexp -> ?message:Error.t or_string -> unit -> unit)
          =
          fun ~value:(x378 : string) ->
            fun ~regExp:(x379 : regexp) ->
              fun ?message:(x380 : Error.t or_string option) ->
                fun () ->
                  ignore
                    (let x384 = Ojs.get_prop_ascii Import.assert_ "assert" in
                     Ojs.call (Ojs.get_prop_ascii x384 "doesNotMatch")
                       "apply"
                       [|x384;((let x381 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x381 "push"
                                     [|(Ojs.string_to_js x378)|]);
                                ignore
                                  (Ojs.call x381 "push"
                                     [|(regexp_to_js x379)|]);
                                (match x380 with
                                 | Some x382 ->
                                     ignore
                                       (Ojs.call x381 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x382)|])
                                 | None -> ());
                                x381))|])
        let (strict :
          ((value:any -> ?message:Error.t or_string -> unit -> bool,
             [ `L_s1_deepEqual  | `L_s2_deepStrictEqual  | `L_s3_equal 
             | `L_s4_ifError  | `L_s5_notDeepEqual  | `L_s6_notEqual 
             | `L_s7_ok  | `L_s8_strict  | `L_s9_strictEqual ]) Omit.t,
            AnonymousInterface2.t) intersection2)
          =
          intersection2_of_js
            (fun (x385 : Ojs.t) ->
               Omit.t_of_js
                 (fun (x386 : Ojs.t) ->
                    fun ~value:(x387 : any) ->
                      fun ?message:(x388 : Error.t or_string option) ->
                        fun () ->
                          Ojs.bool_of_js
                            (Ojs.call x386 "apply"
                               [|Ojs.null;((let x389 =
                                              Ojs.new_obj
                                                (Ojs.get_prop_ascii
                                                   Ojs.global "Array") 
                                                [||] in
                                            ignore
                                              (Ojs.call x389 "push"
                                                 [|(any_to_js x387)|]);
                                            (match x388 with
                                             | Some x390 ->
                                                 ignore
                                                   (Ojs.call x389 "push"
                                                      [|(or_string_to_js
                                                           Error.t_to_js x390)|])
                                             | None -> ());
                                            x389))|]))
                 (fun (x392 : Ojs.t) ->
                    let x393 = x392 in
                    match Ojs.string_of_js x393 with
                    | "deepEqual" -> `L_s1_deepEqual
                    | "deepStrictEqual" -> `L_s2_deepStrictEqual
                    | "equal" -> `L_s3_equal
                    | "ifError" -> `L_s4_ifError
                    | "notDeepEqual" -> `L_s5_notDeepEqual
                    | "notEqual" -> `L_s6_notEqual
                    | "ok" -> `L_s7_ok
                    | "strict" -> `L_s8_strict
                    | "strictEqual" -> `L_s9_strictEqual
                    | _ -> assert false) x385) AnonymousInterface2.t_of_js
            (Ojs.get_prop_ascii (Ojs.get_prop_ascii Import.assert_ "assert")
               "strict")
      end
  end
