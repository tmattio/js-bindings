[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_message : t -> string) =
      fun (x3 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3) "message")
    let (set_message : t -> string -> unit) =
      fun (x4 : t) ->
        fun (x5 : string) ->
          Ojs.set_prop_ascii (t_to_js x4) "message" (Ojs.string_to_js x5)
    let (get_actual : t -> any) =
      fun (x6 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x6) "actual")
    let (set_actual : t -> any -> unit) =
      fun (x7 : t) ->
        fun (x8 : any) ->
          Ojs.set_prop_ascii (t_to_js x7) "actual" (any_to_js x8)
    let (get_expected : t -> any) =
      fun (x9 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x9) "expected")
    let (set_expected : t -> any -> unit) =
      fun (x10 : t) ->
        fun (x11 : any) ->
          Ojs.set_prop_ascii (t_to_js x10) "expected" (any_to_js x11)
    let (get_operator : t -> string) =
      fun (x12 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x12) "operator")
    let (set_operator : t -> string -> unit) =
      fun (x13 : t) ->
        fun (x14 : string) ->
          Ojs.set_prop_ascii (t_to_js x13) "operator" (Ojs.string_to_js x14)
    let (get_stack_start_fn : t -> untyped_function) =
      fun (x15 : t) ->
        untyped_function_of_js
          (Ojs.get_prop_ascii (t_to_js x15) "stackStartFn")
    let (set_stack_start_fn : t -> untyped_function -> unit) =
      fun (x16 : t) ->
        fun (x17 : untyped_function) ->
          Ojs.set_prop_ascii (t_to_js x16) "stackStartFn"
            (untyped_function_to_js x17)
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x19 : Ojs.t) -> x19
    and t_to_js : t -> Ojs.t = fun (x18 : Ojs.t) -> x18
    let (apply :
      t ->
        actual:any ->
          expected:'T -> ?message:Error.t or_string -> unit -> bool)
      =
      fun (x26 : t) ->
        fun ~actual:(x20 : any) ->
          fun ~expected:(x21 : 'T) ->
            fun ?message:(x22 : Error.t or_string option) ->
              fun () ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x26) "apply"
                     [|Ojs.null;((let x23 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x23 "push" [|(any_to_js x20)|]);
                                  ignore
                                    (Ojs.call x23 "push" [|(Obj.magic x21)|]);
                                  (match x22 with
                                   | Some x24 ->
                                       ignore
                                         (Ojs.call x23 "push"
                                            [|(or_string_to_js Error.t_to_js
                                                 x24)|])
                                   | None -> ());
                                  x23))|])
  end
module AnonymousInterface3 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x28 : Ojs.t) -> x28
    and t_to_js : t -> Ojs.t = fun (x27 : Ojs.t) -> x27
    let (apply :
      t -> value:any -> ?message:Error.t or_string -> unit -> bool) =
      fun (x34 : t) ->
        fun ~value:(x29 : any) ->
          fun ?message:(x30 : Error.t or_string option) ->
            fun () ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x34) "apply"
                   [|Ojs.null;((let x31 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x31 "push" [|(any_to_js x29)|]);
                                (match x30 with
                                 | Some x32 ->
                                     ignore
                                       (Ojs.call x31 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x32)|])
                                 | None -> ());
                                x31))|])
    let (get_equal : t -> AnonymousInterface1.t) =
      fun (x35 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x35) "equal")
    let (set_equal : t -> AnonymousInterface1.t -> unit) =
      fun (x36 : t) ->
        fun (x37 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x36) "equal"
            (AnonymousInterface1.t_to_js x37)
    let (not_equal :
      t ->
        actual:any ->
          expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun (x44 : t) ->
        fun ~actual:(x38 : any) ->
          fun ~expected:(x39 : any) ->
            fun ?message:(x40 : Error.t or_string option) ->
              fun () ->
                ignore
                  (let x45 = t_to_js x44 in
                   Ojs.call (Ojs.get_prop_ascii x45 "notEqual") "apply"
                     [|x45;((let x41 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore (Ojs.call x41 "push" [|(any_to_js x38)|]);
                             ignore (Ojs.call x41 "push" [|(any_to_js x39)|]);
                             (match x40 with
                              | Some x42 ->
                                  ignore
                                    (Ojs.call x41 "push"
                                       [|(or_string_to_js Error.t_to_js x42)|])
                              | None -> ());
                             x41))|])
    let (get_deep_equal : t -> AnonymousInterface1.t) =
      fun (x46 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x46) "deepEqual")
    let (set_deep_equal : t -> AnonymousInterface1.t -> unit) =
      fun (x47 : t) ->
        fun (x48 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x47) "deepEqual"
            (AnonymousInterface1.t_to_js x48)
    let (not_deep_equal :
      t ->
        actual:any ->
          expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun (x55 : t) ->
        fun ~actual:(x49 : any) ->
          fun ~expected:(x50 : any) ->
            fun ?message:(x51 : Error.t or_string option) ->
              fun () ->
                ignore
                  (let x56 = t_to_js x55 in
                   Ojs.call (Ojs.get_prop_ascii x56 "notDeepEqual") "apply"
                     [|x56;((let x52 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore (Ojs.call x52 "push" [|(any_to_js x49)|]);
                             ignore (Ojs.call x52 "push" [|(any_to_js x50)|]);
                             (match x51 with
                              | Some x53 ->
                                  ignore
                                    (Ojs.call x52 "push"
                                       [|(or_string_to_js Error.t_to_js x53)|])
                              | None -> ());
                             x52))|])
    let (ok : t -> value:any -> ?message:Error.t or_string -> unit -> bool) =
      fun (x62 : t) ->
        fun ~value:(x57 : any) ->
          fun ?message:(x58 : Error.t or_string option) ->
            fun () ->
              Ojs.bool_of_js
                (let x63 = t_to_js x62 in
                 Ojs.call (Ojs.get_prop_ascii x63 "ok") "apply"
                   [|x63;((let x59 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore (Ojs.call x59 "push" [|(any_to_js x57)|]);
                           (match x58 with
                            | Some x60 ->
                                ignore
                                  (Ojs.call x59 "push"
                                     [|(or_string_to_js Error.t_to_js x60)|])
                            | None -> ());
                           x59))|])
    let (get_strict_equal : t -> AnonymousInterface1.t) =
      fun (x64 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x64) "strictEqual")
    let (set_strict_equal : t -> AnonymousInterface1.t -> unit) =
      fun (x65 : t) ->
        fun (x66 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x65) "strictEqual"
            (AnonymousInterface1.t_to_js x66)
    let (get_deep_strict_equal : t -> AnonymousInterface1.t) =
      fun (x67 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x67) "deepStrictEqual")
    let (set_deep_strict_equal : t -> AnonymousInterface1.t -> unit) =
      fun (x68 : t) ->
        fun (x69 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x68) "deepStrictEqual"
            (AnonymousInterface1.t_to_js x69)
    let (if_error : t -> value:any -> bool) =
      fun (x71 : t) ->
        fun ~value:(x70 : any) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x71) "ifError" [|(any_to_js x70)|])
    let (get_strict : t -> any) =
      fun (x72 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x72) "strict")
    let (set_strict : t -> any -> unit) =
      fun (x73 : t) ->
        fun (x74 : any) ->
          Ojs.set_prop_ascii (t_to_js x73) "strict" (any_to_js x74)
  end
module AnonymousInterface2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x76 : Ojs.t) -> x76
    and t_to_js : t -> Ojs.t = fun (x75 : Ojs.t) -> x75
    let (apply :
      t -> value:any -> ?message:Error.t or_string -> unit -> bool) =
      fun (x82 : t) ->
        fun ~value:(x77 : any) ->
          fun ?message:(x78 : Error.t or_string option) ->
            fun () ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x82) "apply"
                   [|Ojs.null;((let x79 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x79 "push" [|(any_to_js x77)|]);
                                (match x78 with
                                 | Some x80 ->
                                     ignore
                                       (Ojs.call x79 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x80)|])
                                 | None -> ());
                                x79))|])
    let (get_equal : t -> AnonymousInterface1.t) =
      fun (x83 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x83) "equal")
    let (set_equal : t -> AnonymousInterface1.t -> unit) =
      fun (x84 : t) ->
        fun (x85 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x84) "equal"
            (AnonymousInterface1.t_to_js x85)
    let (not_equal :
      t ->
        actual:any ->
          expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun (x92 : t) ->
        fun ~actual:(x86 : any) ->
          fun ~expected:(x87 : any) ->
            fun ?message:(x88 : Error.t or_string option) ->
              fun () ->
                ignore
                  (let x93 = t_to_js x92 in
                   Ojs.call (Ojs.get_prop_ascii x93 "notEqual") "apply"
                     [|x93;((let x89 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore (Ojs.call x89 "push" [|(any_to_js x86)|]);
                             ignore (Ojs.call x89 "push" [|(any_to_js x87)|]);
                             (match x88 with
                              | Some x90 ->
                                  ignore
                                    (Ojs.call x89 "push"
                                       [|(or_string_to_js Error.t_to_js x90)|])
                              | None -> ());
                             x89))|])
    let (get_deep_equal : t -> AnonymousInterface1.t) =
      fun (x94 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x94) "deepEqual")
    let (set_deep_equal : t -> AnonymousInterface1.t -> unit) =
      fun (x95 : t) ->
        fun (x96 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x95) "deepEqual"
            (AnonymousInterface1.t_to_js x96)
    let (not_deep_equal :
      t ->
        actual:any ->
          expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun (x103 : t) ->
        fun ~actual:(x97 : any) ->
          fun ~expected:(x98 : any) ->
            fun ?message:(x99 : Error.t or_string option) ->
              fun () ->
                ignore
                  (let x104 = t_to_js x103 in
                   Ojs.call (Ojs.get_prop_ascii x104 "notDeepEqual") "apply"
                     [|x104;((let x100 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x100 "push" [|(any_to_js x97)|]);
                              ignore
                                (Ojs.call x100 "push" [|(any_to_js x98)|]);
                              (match x99 with
                               | Some x101 ->
                                   ignore
                                     (Ojs.call x100 "push"
                                        [|(or_string_to_js Error.t_to_js x101)|])
                               | None -> ());
                              x100))|])
    let (ok : t -> value:any -> ?message:Error.t or_string -> unit -> bool) =
      fun (x110 : t) ->
        fun ~value:(x105 : any) ->
          fun ?message:(x106 : Error.t or_string option) ->
            fun () ->
              Ojs.bool_of_js
                (let x111 = t_to_js x110 in
                 Ojs.call (Ojs.get_prop_ascii x111 "ok") "apply"
                   [|x111;((let x107 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x107 "push" [|(any_to_js x105)|]);
                            (match x106 with
                             | Some x108 ->
                                 ignore
                                   (Ojs.call x107 "push"
                                      [|(or_string_to_js Error.t_to_js x108)|])
                             | None -> ());
                            x107))|])
    let (get_strict_equal : t -> AnonymousInterface1.t) =
      fun (x112 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x112) "strictEqual")
    let (set_strict_equal : t -> AnonymousInterface1.t -> unit) =
      fun (x113 : t) ->
        fun (x114 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x113) "strictEqual"
            (AnonymousInterface1.t_to_js x114)
    let (get_deep_strict_equal : t -> AnonymousInterface1.t) =
      fun (x115 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x115) "deepStrictEqual")
    let (set_deep_strict_equal : t -> AnonymousInterface1.t -> unit) =
      fun (x116 : t) ->
        fun (x117 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x116) "deepStrictEqual"
            (AnonymousInterface1.t_to_js x117)
    let (if_error : t -> value:any -> bool) =
      fun (x119 : t) ->
        fun ~value:(x118 : any) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x119) "ifError" [|(any_to_js x118)|])
    let (get_strict :
      t ->
        ((value:any -> ?message:Error.t or_string -> unit -> bool,
           [ `L_s1_deepEqual  | `L_s2_deepStrictEqual  | `L_s3_equal 
           | `L_s4_ifError  | `L_s5_notDeepEqual  | `L_s6_notEqual 
           | `L_s7_ok  | `L_s8_strict  | `L_s9_strictEqual ]) Omit.t,
          AnonymousInterface3.t) intersection2)
      =
      fun (x120 : t) ->
        intersection2_of_js
          (fun (x121 : Ojs.t) ->
             Omit.t_of_js
               (fun (x122 : Ojs.t) ->
                  fun ~value:(x123 : any) ->
                    fun ?message:(x124 : Error.t or_string option) ->
                      fun () ->
                        Ojs.bool_of_js
                          (Ojs.call x122 "apply"
                             [|Ojs.null;((let x125 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          ignore
                                            (Ojs.call x125 "push"
                                               [|(any_to_js x123)|]);
                                          (match x124 with
                                           | Some x126 ->
                                               ignore
                                                 (Ojs.call x125 "push"
                                                    [|(or_string_to_js
                                                         Error.t_to_js x126)|])
                                           | None -> ());
                                          x125))|]))
               (fun (x128 : Ojs.t) ->
                  let x129 = x128 in
                  match Ojs.string_of_js x129 with
                  | "deepEqual" -> `L_s1_deepEqual
                  | "deepStrictEqual" -> `L_s2_deepStrictEqual
                  | "equal" -> `L_s3_equal
                  | "ifError" -> `L_s4_ifError
                  | "notDeepEqual" -> `L_s5_notDeepEqual
                  | "notEqual" -> `L_s6_notEqual
                  | "ok" -> `L_s7_ok
                  | "strict" -> `L_s8_strict
                  | "strictEqual" -> `L_s9_strictEqual
                  | _ -> assert false) x121) AnonymousInterface3.t_of_js
          (Ojs.get_prop_ascii (t_to_js x120) "strict")
    let (set_strict :
      t ->
        ((value:any -> ?message:Error.t or_string -> unit -> bool,
           [ `L_s1_deepEqual  | `L_s2_deepStrictEqual  | `L_s3_equal 
           | `L_s4_ifError  | `L_s5_notDeepEqual  | `L_s6_notEqual 
           | `L_s7_ok  | `L_s8_strict  | `L_s9_strictEqual ]) Omit.t,
          AnonymousInterface3.t) intersection2 -> unit)
      =
      fun (x131 : t) ->
        fun
          (x132 :
            ((value:any -> ?message:Error.t or_string -> unit -> bool,
               [ `L_s1_deepEqual  | `L_s2_deepStrictEqual  | `L_s3_equal 
               | `L_s4_ifError  | `L_s5_notDeepEqual  | `L_s6_notEqual 
               | `L_s7_ok  | `L_s8_strict  | `L_s9_strictEqual ]) Omit.t,
              AnonymousInterface3.t) intersection2)
          ->
          Ojs.set_prop_ascii (t_to_js x131) "strict"
            (intersection2_to_js
               (fun
                  (x133 :
                    (value:any -> ?message:Error.t or_string -> unit -> bool,
                      [ `L_s1_deepEqual  | `L_s2_deepStrictEqual 
                      | `L_s3_equal  | `L_s4_ifError  | `L_s5_notDeepEqual 
                      | `L_s6_notEqual  | `L_s7_ok  | `L_s8_strict 
                      | `L_s9_strictEqual ]) Omit.t)
                  ->
                  Omit.t_to_js
                    (fun
                       (x134 :
                         value:any ->
                           ?message:Error.t or_string -> unit -> bool)
                       ->
                       Ojs.fun_to_js 2
                         (fun (x135 : Ojs.t) ->
                            fun (x136 : Ojs.t) ->
                              Ojs.bool_to_js
                                (x134 ~value:(any_of_js x135)
                                   ?message:(Ojs.option_of_js
                                               (fun (x137 : Ojs.t) ->
                                                  or_string_of_js
                                                    Error.t_of_js x137) x136)
                                   ())))
                    (fun
                       (x139 :
                         [ `L_s1_deepEqual  | `L_s2_deepStrictEqual 
                         | `L_s3_equal  | `L_s4_ifError 
                         | `L_s5_notDeepEqual  | `L_s6_notEqual  | `L_s7_ok 
                         | `L_s8_strict  | `L_s9_strictEqual ])
                       ->
                       match x139 with
                       | `L_s1_deepEqual -> Ojs.string_to_js "LS1DeepEqual"
                       | `L_s2_deepStrictEqual ->
                           Ojs.string_to_js "LS2DeepStrictEqual"
                       | `L_s3_equal -> Ojs.string_to_js "LS3Equal"
                       | `L_s4_ifError -> Ojs.string_to_js "LS4IfError"
                       | `L_s5_notDeepEqual ->
                           Ojs.string_to_js "LS5NotDeepEqual"
                       | `L_s6_notEqual -> Ojs.string_to_js "LS6NotEqual"
                       | `L_s7_ok -> Ojs.string_to_js "LS7Ok"
                       | `L_s8_strict -> Ojs.string_to_js "LS8Strict"
                       | `L_s9_strictEqual ->
                           Ojs.string_to_js "LS9StrictEqual") x133)
               AnonymousInterface3.t_to_js x132)
  end
module AnonymousInterface4 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x142 : Ojs.t) -> x142
    and t_to_js : t -> Ojs.t = fun (x141 : Ojs.t) -> x141
    let (create : t -> untyped_object) =
      fun (x143 : t) ->
        untyped_object_of_js (Ojs.new_obj (t_to_js x143) [||])
  end
module Assert =
  struct
    module AssertionError =
      struct
        include struct include Error end
        let (get_actual : t -> any) =
          fun (x144 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x144) "actual")
        let (set_actual : t -> any -> unit) =
          fun (x145 : t) ->
            fun (x146 : any) ->
              Ojs.set_prop_ascii (t_to_js x145) "actual" (any_to_js x146)
        let (get_expected : t -> any) =
          fun (x147 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x147) "expected")
        let (set_expected : t -> any -> unit) =
          fun (x148 : t) ->
            fun (x149 : any) ->
              Ojs.set_prop_ascii (t_to_js x148) "expected" (any_to_js x149)
        let (get_operator : t -> string) =
          fun (x150 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x150) "operator")
        let (set_operator : t -> string -> unit) =
          fun (x151 : t) ->
            fun (x152 : string) ->
              Ojs.set_prop_ascii (t_to_js x151) "operator"
                (Ojs.string_to_js x152)
        let (get_generated_message : t -> bool) =
          fun (x153 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x153) "generatedMessage")
        let (set_generated_message : t -> bool -> unit) =
          fun (x154 : t) ->
            fun (x155 : bool) ->
              Ojs.set_prop_ascii (t_to_js x154) "generatedMessage"
                (Ojs.bool_to_js x155)
        let (get_code : t -> [ `L_s0_ERR_ASSERTION ]) =
          fun (x156 : t) ->
            let x157 = Ojs.get_prop_ascii (t_to_js x156) "code" in
            match Ojs.string_of_js x157 with
            | "ERR_ASSERTION" -> `L_s0_ERR_ASSERTION
            | _ -> assert false
        let (set_code : t -> [ `L_s0_ERR_ASSERTION ] -> unit) =
          fun (x158 : t) ->
            fun (x159 : [ `L_s0_ERR_ASSERTION ]) ->
              Ojs.set_prop_ascii (t_to_js x158) "code"
                (match x159 with
                 | `L_s0_ERR_ASSERTION -> Ojs.string_to_js "LS0ERRASSERTION")
        let (create : ?options:AnonymousInterface0.t -> unit -> t) =
          fun ?options:(x160 : AnonymousInterface0.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Import.assert_ "AssertionError")
                   (let x161 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x160 with
                     | Some x162 ->
                         ignore
                           (Ojs.call x161 "push"
                              [|(AnonymousInterface0.t_to_js x162)|])
                     | None -> ());
                    x161))
      end
    module CallTrackerReportInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x164 : Ojs.t) -> x164
        and t_to_js : t -> Ojs.t = fun (x163 : Ojs.t) -> x163
        let (get_message : t -> string) =
          fun (x165 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x165) "message")
        let (set_message : t -> string -> unit) =
          fun (x166 : t) ->
            fun (x167 : string) ->
              Ojs.set_prop_ascii (t_to_js x166) "message"
                (Ojs.string_to_js x167)
        let (get_actual : t -> float) =
          fun (x168 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x168) "actual")
        let (set_actual : t -> float -> unit) =
          fun (x169 : t) ->
            fun (x170 : float) ->
              Ojs.set_prop_ascii (t_to_js x169) "actual"
                (Ojs.float_to_js x170)
        let (get_expected : t -> float) =
          fun (x171 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x171) "expected")
        let (set_expected : t -> float -> unit) =
          fun (x172 : t) ->
            fun (x173 : float) ->
              Ojs.set_prop_ascii (t_to_js x172) "expected"
                (Ojs.float_to_js x173)
        let (get_operator : t -> string) =
          fun (x174 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x174) "operator")
        let (set_operator : t -> string -> unit) =
          fun (x175 : t) ->
            fun (x176 : string) ->
              Ojs.set_prop_ascii (t_to_js x175) "operator"
                (Ojs.string_to_js x176)
        let (get_stack : t -> untyped_object) =
          fun (x177 : t) ->
            untyped_object_of_js (Ojs.get_prop_ascii (t_to_js x177) "stack")
        let (set_stack : t -> untyped_object -> unit) =
          fun (x178 : t) ->
            fun (x179 : untyped_object) ->
              Ojs.set_prop_ascii (t_to_js x178) "stack"
                (untyped_object_to_js x179)
      end
    module CallTracker =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x181 : Ojs.t) -> x181
        and t_to_js : t -> Ojs.t = fun (x180 : Ojs.t) -> x180
        let (calls : t -> ?exact:float -> unit -> unit -> unit) =
          fun (x185 : t) ->
            fun ?exact:(x182 : float option) ->
              fun () ->
                fun () ->
                  ignore
                    (Ojs.apply
                       (let x186 = t_to_js x185 in
                        Ojs.call (Ojs.get_prop_ascii x186 "calls") "apply"
                          [|x186;((let x183 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   (match x182 with
                                    | Some x184 ->
                                        ignore
                                          (Ojs.call x183 "push"
                                             [|(Ojs.float_to_js x184)|])
                                    | None -> ());
                                   x183))|]) [||])
        let (calls' : t -> ?fn:'Func -> ?exact:float -> unit -> 'Func) =
          fun (x192 : t) ->
            fun ?fn:(x187 : 'Func option) ->
              fun ?exact:(x188 : float option) ->
                fun () ->
                  Obj.magic
                    (let x193 = t_to_js x192 in
                     Ojs.call (Ojs.get_prop_ascii x193 "calls") "apply"
                       [|x193;((let x189 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x187 with
                                 | Some x191 ->
                                     ignore
                                       (Ojs.call x189 "push"
                                          [|(Obj.magic x191)|])
                                 | None -> ());
                                (match x188 with
                                 | Some x190 ->
                                     ignore
                                       (Ojs.call x189 "push"
                                          [|(Ojs.float_to_js x190)|])
                                 | None -> ());
                                x189))|])
        let (report : t -> CallTrackerReportInformation.t list) =
          fun (x194 : t) ->
            Ojs.list_of_js CallTrackerReportInformation.t_of_js
              (Ojs.call (t_to_js x194) "report" [||])
        let (verify : t -> unit) =
          fun (x196 : t) -> ignore (Ojs.call (t_to_js x196) "verify" [||])
      end
    module AssertPredicate =
      struct
        type t =
          (Error.t, regexp, untyped_object, AnonymousInterface4.t,
            thrown:any -> bool) union5
        let rec t_of_js : Ojs.t -> t =
          fun (x204 : Ojs.t) ->
            union5_of_js Error.t_of_js regexp_of_js untyped_object_of_js
              AnonymousInterface4.t_of_js
              (fun (x209 : Ojs.t) ->
                 fun ~thrown:(x210 : any) ->
                   Ojs.bool_of_js (Ojs.apply x209 [|(any_to_js x210)|])) x204
        and t_to_js : t -> Ojs.t =
          fun
            (x197 :
              (Error.t, regexp, untyped_object, AnonymousInterface4.t,
                thrown:any -> bool) union5)
            ->
            union5_to_js Error.t_to_js regexp_to_js untyped_object_to_js
              AnonymousInterface4.t_to_js
              (fun (x202 : thrown:any -> bool) ->
                 Ojs.fun_to_js 1
                   (fun (x203 : Ojs.t) ->
                      Ojs.bool_to_js (x202 ~thrown:(any_of_js x203)))) x197
      end
    let (fail : ?message:Error.t or_string -> unit -> never) =
      fun ?message:(x211 : Error.t or_string option) ->
        fun () ->
          never_of_js
            (let x215 = Import.assert_ in
             Ojs.call (Ojs.get_prop_ascii x215 "fail") "apply"
               [|x215;((let x212 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x211 with
                         | Some x213 ->
                             ignore
                               (Ojs.call x212 "push"
                                  [|(or_string_to_js Error.t_to_js x213)|])
                         | None -> ());
                        x212))|])
    let (fail :
      actual:any ->
        expected:any ->
          ?message:Error.t or_string ->
            ?operator:string ->
              ?stack_start_fn:untyped_function -> unit -> never)
      =
      fun ~actual:(x216 : any) ->
        fun ~expected:(x217 : any) ->
          fun ?message:(x218 : Error.t or_string option) ->
            fun ?operator:(x219 : string option) ->
              fun ?stack_start_fn:(x220 : untyped_function option) ->
                fun () ->
                  never_of_js
                    (let x226 = Import.assert_ in
                     Ojs.call (Ojs.get_prop_ascii x226 "fail") "apply"
                       [|x226;((let x221 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x221 "push" [|(any_to_js x216)|]);
                                ignore
                                  (Ojs.call x221 "push" [|(any_to_js x217)|]);
                                (match x218 with
                                 | Some x224 ->
                                     ignore
                                       (Ojs.call x221 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x224)|])
                                 | None -> ());
                                (match x219 with
                                 | Some x223 ->
                                     ignore
                                       (Ojs.call x221 "push"
                                          [|(Ojs.string_to_js x223)|])
                                 | None -> ());
                                (match x220 with
                                 | Some x222 ->
                                     ignore
                                       (Ojs.call x221 "push"
                                          [|(untyped_function_to_js x222)|])
                                 | None -> ());
                                x221))|])
    let (ok : value:any -> ?message:Error.t or_string -> unit -> bool) =
      fun ~value:(x227 : any) ->
        fun ?message:(x228 : Error.t or_string option) ->
          fun () ->
            Ojs.bool_of_js
              (let x232 = Import.assert_ in
               Ojs.call (Ojs.get_prop_ascii x232 "ok") "apply"
                 [|x232;((let x229 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore (Ojs.call x229 "push" [|(any_to_js x227)|]);
                          (match x228 with
                           | Some x230 ->
                               ignore
                                 (Ojs.call x229 "push"
                                    [|(or_string_to_js Error.t_to_js x230)|])
                           | None -> ());
                          x229))|])
    let (equal :
      actual:any ->
        expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~actual:(x233 : any) ->
        fun ~expected:(x234 : any) ->
          fun ?message:(x235 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x239 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x239 "equal") "apply"
                   [|x239;((let x236 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x236 "push" [|(any_to_js x233)|]);
                            ignore
                              (Ojs.call x236 "push" [|(any_to_js x234)|]);
                            (match x235 with
                             | Some x237 ->
                                 ignore
                                   (Ojs.call x236 "push"
                                      [|(or_string_to_js Error.t_to_js x237)|])
                             | None -> ());
                            x236))|])
    let (not_equal :
      actual:any ->
        expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~actual:(x240 : any) ->
        fun ~expected:(x241 : any) ->
          fun ?message:(x242 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x246 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x246 "notEqual") "apply"
                   [|x246;((let x243 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x243 "push" [|(any_to_js x240)|]);
                            ignore
                              (Ojs.call x243 "push" [|(any_to_js x241)|]);
                            (match x242 with
                             | Some x244 ->
                                 ignore
                                   (Ojs.call x243 "push"
                                      [|(or_string_to_js Error.t_to_js x244)|])
                             | None -> ());
                            x243))|])
    let (deep_equal :
      actual:any ->
        expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~actual:(x247 : any) ->
        fun ~expected:(x248 : any) ->
          fun ?message:(x249 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x253 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x253 "deepEqual") "apply"
                   [|x253;((let x250 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x250 "push" [|(any_to_js x247)|]);
                            ignore
                              (Ojs.call x250 "push" [|(any_to_js x248)|]);
                            (match x249 with
                             | Some x251 ->
                                 ignore
                                   (Ojs.call x250 "push"
                                      [|(or_string_to_js Error.t_to_js x251)|])
                             | None -> ());
                            x250))|])
    let (not_deep_equal :
      actual:any ->
        expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~actual:(x254 : any) ->
        fun ~expected:(x255 : any) ->
          fun ?message:(x256 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x260 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x260 "notDeepEqual") "apply"
                   [|x260;((let x257 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x257 "push" [|(any_to_js x254)|]);
                            ignore
                              (Ojs.call x257 "push" [|(any_to_js x255)|]);
                            (match x256 with
                             | Some x258 ->
                                 ignore
                                   (Ojs.call x257 "push"
                                      [|(or_string_to_js Error.t_to_js x258)|])
                             | None -> ());
                            x257))|])
    let (strict_equal :
      actual:any -> expected:'T -> ?message:Error.t or_string -> unit -> bool)
      =
      fun ~actual:(x261 : any) ->
        fun ~expected:(x262 : 'T) ->
          fun ?message:(x263 : Error.t or_string option) ->
            fun () ->
              Ojs.bool_of_js
                (let x267 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x267 "strictEqual") "apply"
                   [|x267;((let x264 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x264 "push" [|(any_to_js x261)|]);
                            ignore
                              (Ojs.call x264 "push" [|(Obj.magic x262)|]);
                            (match x263 with
                             | Some x265 ->
                                 ignore
                                   (Ojs.call x264 "push"
                                      [|(or_string_to_js Error.t_to_js x265)|])
                             | None -> ());
                            x264))|])
    let (not_strict_equal :
      actual:any ->
        expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~actual:(x268 : any) ->
        fun ~expected:(x269 : any) ->
          fun ?message:(x270 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x274 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x274 "notStrictEqual") "apply"
                   [|x274;((let x271 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x271 "push" [|(any_to_js x268)|]);
                            ignore
                              (Ojs.call x271 "push" [|(any_to_js x269)|]);
                            (match x270 with
                             | Some x272 ->
                                 ignore
                                   (Ojs.call x271 "push"
                                      [|(or_string_to_js Error.t_to_js x272)|])
                             | None -> ());
                            x271))|])
    let (deep_strict_equal :
      actual:any -> expected:'T -> ?message:Error.t or_string -> unit -> bool)
      =
      fun ~actual:(x275 : any) ->
        fun ~expected:(x276 : 'T) ->
          fun ?message:(x277 : Error.t or_string option) ->
            fun () ->
              Ojs.bool_of_js
                (let x281 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x281 "deepStrictEqual") "apply"
                   [|x281;((let x278 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x278 "push" [|(any_to_js x275)|]);
                            ignore
                              (Ojs.call x278 "push" [|(Obj.magic x276)|]);
                            (match x277 with
                             | Some x279 ->
                                 ignore
                                   (Ojs.call x278 "push"
                                      [|(or_string_to_js Error.t_to_js x279)|])
                             | None -> ());
                            x278))|])
    let (not_deep_strict_equal :
      actual:any ->
        expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~actual:(x282 : any) ->
        fun ~expected:(x283 : any) ->
          fun ?message:(x284 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x288 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x288 "notDeepStrictEqual")
                   "apply"
                   [|x288;((let x285 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x285 "push" [|(any_to_js x282)|]);
                            ignore
                              (Ojs.call x285 "push" [|(any_to_js x283)|]);
                            (match x284 with
                             | Some x286 ->
                                 ignore
                                   (Ojs.call x285 "push"
                                      [|(or_string_to_js Error.t_to_js x286)|])
                             | None -> ());
                            x285))|])
    let (throws :
      block:(unit -> any) -> ?message:Error.t or_string -> unit -> unit) =
      fun ~block:(x289 : unit -> any) ->
        fun ?message:(x290 : Error.t or_string option) ->
          fun () ->
            ignore
              (let x294 = Import.assert_ in
               Ojs.call (Ojs.get_prop_ascii x294 "throws") "apply"
                 [|x294;((let x291 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x291 "push"
                               [|(Ojs.fun_to_js 1
                                    (fun _ -> any_to_js (x289 ())))|]);
                          (match x290 with
                           | Some x292 ->
                               ignore
                                 (Ojs.call x291 "push"
                                    [|(or_string_to_js Error.t_to_js x292)|])
                           | None -> ());
                          x291))|])
    let (throws :
      block:(unit -> any) ->
        error:AssertPredicate.t -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~block:(x295 : unit -> any) ->
        fun ~error:(x296 : AssertPredicate.t) ->
          fun ?message:(x297 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x301 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x301 "throws") "apply"
                   [|x301;((let x298 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x298 "push"
                                 [|(Ojs.fun_to_js 1
                                      (fun _ -> any_to_js (x295 ())))|]);
                            ignore
                              (Ojs.call x298 "push"
                                 [|(AssertPredicate.t_to_js x296)|]);
                            (match x297 with
                             | Some x299 ->
                                 ignore
                                   (Ojs.call x298 "push"
                                      [|(or_string_to_js Error.t_to_js x299)|])
                             | None -> ());
                            x298))|])
    let (does_not_throw :
      block:(unit -> any) -> ?message:Error.t or_string -> unit -> unit) =
      fun ~block:(x302 : unit -> any) ->
        fun ?message:(x303 : Error.t or_string option) ->
          fun () ->
            ignore
              (let x307 = Import.assert_ in
               Ojs.call (Ojs.get_prop_ascii x307 "doesNotThrow") "apply"
                 [|x307;((let x304 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x304 "push"
                               [|(Ojs.fun_to_js 1
                                    (fun _ -> any_to_js (x302 ())))|]);
                          (match x303 with
                           | Some x305 ->
                               ignore
                                 (Ojs.call x304 "push"
                                    [|(or_string_to_js Error.t_to_js x305)|])
                           | None -> ());
                          x304))|])
    let (does_not_throw :
      block:(unit -> any) ->
        error:AssertPredicate.t -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~block:(x308 : unit -> any) ->
        fun ~error:(x309 : AssertPredicate.t) ->
          fun ?message:(x310 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x314 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x314 "doesNotThrow") "apply"
                   [|x314;((let x311 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x311 "push"
                                 [|(Ojs.fun_to_js 1
                                      (fun _ -> any_to_js (x308 ())))|]);
                            ignore
                              (Ojs.call x311 "push"
                                 [|(AssertPredicate.t_to_js x309)|]);
                            (match x310 with
                             | Some x312 ->
                                 ignore
                                   (Ojs.call x311 "push"
                                      [|(or_string_to_js Error.t_to_js x312)|])
                             | None -> ());
                            x311))|])
    let (if_error : value:any -> bool) =
      fun ~value:(x315 : any) ->
        Ojs.bool_of_js
          (Ojs.call Import.assert_ "ifError" [|(any_to_js x315)|])
    let (rejects :
      block:(unit -> any Promise.t, any Promise.t) union2 ->
        ?message:Error.t or_string -> unit -> unit Promise.t)
      =
      fun ~block:(x316 : (unit -> any Promise.t, any Promise.t) union2) ->
        fun ?message:(x317 : Error.t or_string option) ->
          fun () ->
            Promise.t_of_js Ojs.unit_of_js
              (let x325 = Import.assert_ in
               Ojs.call (Ojs.get_prop_ascii x325 "rejects") "apply"
                 [|x325;((let x318 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x318 "push"
                               [|(union2_to_js
                                    (fun (x321 : unit -> any Promise.t) ->
                                       Ojs.fun_to_js 1
                                         (fun _ ->
                                            Promise.t_to_js any_to_js
                                              (x321 ())))
                                    (fun (x323 : any Promise.t) ->
                                       Promise.t_to_js any_to_js x323) x316)|]);
                          (match x317 with
                           | Some x319 ->
                               ignore
                                 (Ojs.call x318 "push"
                                    [|(or_string_to_js Error.t_to_js x319)|])
                           | None -> ());
                          x318))|])
    let (rejects :
      block:(unit -> any Promise.t, any Promise.t) union2 ->
        error:AssertPredicate.t ->
          ?message:Error.t or_string -> unit -> unit Promise.t)
      =
      fun ~block:(x327 : (unit -> any Promise.t, any Promise.t) union2) ->
        fun ~error:(x328 : AssertPredicate.t) ->
          fun ?message:(x329 : Error.t or_string option) ->
            fun () ->
              Promise.t_of_js Ojs.unit_of_js
                (let x337 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x337 "rejects") "apply"
                   [|x337;((let x330 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x330 "push"
                                 [|(union2_to_js
                                      (fun (x333 : unit -> any Promise.t) ->
                                         Ojs.fun_to_js 1
                                           (fun _ ->
                                              Promise.t_to_js any_to_js
                                                (x333 ())))
                                      (fun (x335 : any Promise.t) ->
                                         Promise.t_to_js any_to_js x335) x327)|]);
                            ignore
                              (Ojs.call x330 "push"
                                 [|(AssertPredicate.t_to_js x328)|]);
                            (match x329 with
                             | Some x331 ->
                                 ignore
                                   (Ojs.call x330 "push"
                                      [|(or_string_to_js Error.t_to_js x331)|])
                             | None -> ());
                            x330))|])
    let (does_not_reject :
      block:(unit -> any Promise.t, any Promise.t) union2 ->
        ?message:Error.t or_string -> unit -> unit Promise.t)
      =
      fun ~block:(x339 : (unit -> any Promise.t, any Promise.t) union2) ->
        fun ?message:(x340 : Error.t or_string option) ->
          fun () ->
            Promise.t_of_js Ojs.unit_of_js
              (let x348 = Import.assert_ in
               Ojs.call (Ojs.get_prop_ascii x348 "doesNotReject") "apply"
                 [|x348;((let x341 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x341 "push"
                               [|(union2_to_js
                                    (fun (x344 : unit -> any Promise.t) ->
                                       Ojs.fun_to_js 1
                                         (fun _ ->
                                            Promise.t_to_js any_to_js
                                              (x344 ())))
                                    (fun (x346 : any Promise.t) ->
                                       Promise.t_to_js any_to_js x346) x339)|]);
                          (match x340 with
                           | Some x342 ->
                               ignore
                                 (Ojs.call x341 "push"
                                    [|(or_string_to_js Error.t_to_js x342)|])
                           | None -> ());
                          x341))|])
    let (does_not_reject :
      block:(unit -> any Promise.t, any Promise.t) union2 ->
        error:AssertPredicate.t ->
          ?message:Error.t or_string -> unit -> unit Promise.t)
      =
      fun ~block:(x350 : (unit -> any Promise.t, any Promise.t) union2) ->
        fun ~error:(x351 : AssertPredicate.t) ->
          fun ?message:(x352 : Error.t or_string option) ->
            fun () ->
              Promise.t_of_js Ojs.unit_of_js
                (let x360 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x360 "doesNotReject") "apply"
                   [|x360;((let x353 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x353 "push"
                                 [|(union2_to_js
                                      (fun (x356 : unit -> any Promise.t) ->
                                         Ojs.fun_to_js 1
                                           (fun _ ->
                                              Promise.t_to_js any_to_js
                                                (x356 ())))
                                      (fun (x358 : any Promise.t) ->
                                         Promise.t_to_js any_to_js x358) x350)|]);
                            ignore
                              (Ojs.call x353 "push"
                                 [|(AssertPredicate.t_to_js x351)|]);
                            (match x352 with
                             | Some x354 ->
                                 ignore
                                   (Ojs.call x353 "push"
                                      [|(or_string_to_js Error.t_to_js x354)|])
                             | None -> ());
                            x353))|])
    let (match_ :
      value:string ->
        reg_exp:regexp -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~value:(x362 : string) ->
        fun ~reg_exp:(x363 : regexp) ->
          fun ?message:(x364 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x368 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x368 "match") "apply"
                   [|x368;((let x365 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x365 "push"
                                 [|(Ojs.string_to_js x362)|]);
                            ignore
                              (Ojs.call x365 "push" [|(regexp_to_js x363)|]);
                            (match x364 with
                             | Some x366 ->
                                 ignore
                                   (Ojs.call x365 "push"
                                      [|(or_string_to_js Error.t_to_js x366)|])
                             | None -> ());
                            x365))|])
    let (does_not_match :
      value:string ->
        reg_exp:regexp -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~value:(x369 : string) ->
        fun ~reg_exp:(x370 : regexp) ->
          fun ?message:(x371 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x375 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x375 "doesNotMatch") "apply"
                   [|x375;((let x372 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x372 "push"
                                 [|(Ojs.string_to_js x369)|]);
                            ignore
                              (Ojs.call x372 "push" [|(regexp_to_js x370)|]);
                            (match x371 with
                             | Some x373 ->
                                 ignore
                                   (Ojs.call x372 "push"
                                      [|(or_string_to_js Error.t_to_js x373)|])
                             | None -> ());
                            x372))|])
    let (strict :
      ((value:any -> ?message:Error.t or_string -> unit -> bool,
         [ `L_s1_deepEqual  | `L_s2_deepStrictEqual  | `L_s3_equal 
         | `L_s4_ifError  | `L_s5_notDeepEqual  | `L_s6_notEqual  | `L_s7_ok 
         | `L_s8_strict  | `L_s9_strictEqual ]) Omit.t,
        AnonymousInterface2.t) intersection2)
      =
      intersection2_of_js
        (fun (x376 : Ojs.t) ->
           Omit.t_of_js
             (fun (x377 : Ojs.t) ->
                fun ~value:(x378 : any) ->
                  fun ?message:(x379 : Error.t or_string option) ->
                    fun () ->
                      Ojs.bool_of_js
                        (Ojs.call x377 "apply"
                           [|Ojs.null;((let x380 =
                                          Ojs.new_obj
                                            (Ojs.get_prop_ascii Ojs.global
                                               "Array") [||] in
                                        ignore
                                          (Ojs.call x380 "push"
                                             [|(any_to_js x378)|]);
                                        (match x379 with
                                         | Some x381 ->
                                             ignore
                                               (Ojs.call x380 "push"
                                                  [|(or_string_to_js
                                                       Error.t_to_js x381)|])
                                         | None -> ());
                                        x380))|]))
             (fun (x383 : Ojs.t) ->
                let x384 = x383 in
                match Ojs.string_of_js x384 with
                | "deepEqual" -> `L_s1_deepEqual
                | "deepStrictEqual" -> `L_s2_deepStrictEqual
                | "equal" -> `L_s3_equal
                | "ifError" -> `L_s4_ifError
                | "notDeepEqual" -> `L_s5_notDeepEqual
                | "notEqual" -> `L_s6_notEqual
                | "ok" -> `L_s7_ok
                | "strict" -> `L_s8_strict
                | "strictEqual" -> `L_s9_strictEqual
                | _ -> assert false) x376) AnonymousInterface2.t_of_js
        (Ojs.get_prop_ascii Import.assert_ "strict")
  end
let (assert_ : bool -> ?message:Error.t or_string -> unit -> bool) =
  fun (x386 : bool) ->
    fun ?message:(x387 : Error.t or_string option) ->
      fun () ->
        Ojs.bool_of_js
          (let x391 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x391 "assert") "apply"
             [|x391;((let x388 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore (Ojs.call x388 "push" [|(Ojs.bool_to_js x386)|]);
                      (match x387 with
                       | Some x389 ->
                           ignore
                             (Ojs.call x388 "push"
                                [|(or_string_to_js Error.t_to_js x389)|])
                       | None -> ());
                      x388))|])
