[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
    let (get_message : t -> string) =
      fun (x3 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3) "message")
    let (set_message : t -> string -> unit) =
      fun (x4 : t) ->
        fun (x5 : string) ->
          Ojs.set_prop_ascii (t_to_js x4) "message" (Ojs.string_to_js x5)
    let (get_actual : t -> any) =
      fun (x6 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x6) "actual")
    let (set_actual : t -> any -> unit) =
      fun (x7 : t) ->
        fun (x8 : any) ->
          Ojs.set_prop_ascii (t_to_js x7) "actual" (any_to_js x8)
    let (get_expected : t -> any) =
      fun (x9 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x9) "expected")
    let (set_expected : t -> any -> unit) =
      fun (x10 : t) ->
        fun (x11 : any) ->
          Ojs.set_prop_ascii (t_to_js x10) "expected" (any_to_js x11)
    let (get_operator : t -> string) =
      fun (x12 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x12) "operator")
    let (set_operator : t -> string -> unit) =
      fun (x13 : t) ->
        fun (x14 : string) ->
          Ojs.set_prop_ascii (t_to_js x13) "operator" (Ojs.string_to_js x14)
    let (get_stack_start_fn : t -> untyped_function) =
      fun (x15 : t) ->
        untyped_function_of_js
          (Ojs.get_prop_ascii (t_to_js x15) "stackStartFn")
    let (set_stack_start_fn : t -> untyped_function -> unit) =
      fun (x16 : t) ->
        fun (x17 : untyped_function) ->
          Ojs.set_prop_ascii (t_to_js x16) "stackStartFn"
            (untyped_function_to_js x17)
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x19 : Ojs.t) -> x19
    and t_to_js : t -> Ojs.t = fun (x18 : Ojs.t) -> x18
    let (apply :
      t ->
        actual:any ->
          expected:'T -> ?message:Error.t or_string -> unit -> bool)
      =
      fun (x26 : t) ->
        fun ~actual:(x20 : any) ->
          fun ~expected:(x21 : 'T) ->
            fun ?message:(x22 : Error.t or_string option) ->
              fun () ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x26) "apply"
                     [|Ojs.null;((let x23 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x23 "push" [|(any_to_js x20)|]);
                                  ignore
                                    (Ojs.call x23 "push" [|(Obj.magic x21)|]);
                                  (match x22 with
                                   | Some x24 ->
                                       ignore
                                         (Ojs.call x23 "push"
                                            [|(or_string_to_js Error.t_to_js
                                                 x24)|])
                                   | None -> ());
                                  x23))|])
  end
module AnonymousInterface3 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x28 : Ojs.t) -> x28
    and t_to_js : t -> Ojs.t = fun (x27 : Ojs.t) -> x27
    let (apply :
      t -> value:any -> ?message:Error.t or_string -> unit -> bool) =
      fun (x34 : t) ->
        fun ~value:(x29 : any) ->
          fun ?message:(x30 : Error.t or_string option) ->
            fun () ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x34) "apply"
                   [|Ojs.null;((let x31 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x31 "push" [|(any_to_js x29)|]);
                                (match x30 with
                                 | Some x32 ->
                                     ignore
                                       (Ojs.call x31 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x32)|])
                                 | None -> ());
                                x31))|])
    let (get_equal : t -> AnonymousInterface1.t) =
      fun (x35 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x35) "equal")
    let (set_equal : t -> AnonymousInterface1.t -> unit) =
      fun (x36 : t) ->
        fun (x37 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x36) "equal"
            (AnonymousInterface1.t_to_js x37)
    let (not_equal :
      t ->
        actual:any ->
          expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun (x44 : t) ->
        fun ~actual:(x38 : any) ->
          fun ~expected:(x39 : any) ->
            fun ?message:(x40 : Error.t or_string option) ->
              fun () ->
                ignore
                  (let x45 = t_to_js x44 in
                   Ojs.call (Ojs.get_prop_ascii x45 "notEqual") "apply"
                     [|x45;((let x41 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore (Ojs.call x41 "push" [|(any_to_js x38)|]);
                             ignore (Ojs.call x41 "push" [|(any_to_js x39)|]);
                             (match x40 with
                              | Some x42 ->
                                  ignore
                                    (Ojs.call x41 "push"
                                       [|(or_string_to_js Error.t_to_js x42)|])
                              | None -> ());
                             x41))|])
    let (get_deep_equal : t -> AnonymousInterface1.t) =
      fun (x46 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x46) "deepEqual")
    let (set_deep_equal : t -> AnonymousInterface1.t -> unit) =
      fun (x47 : t) ->
        fun (x48 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x47) "deepEqual"
            (AnonymousInterface1.t_to_js x48)
    let (not_deep_equal :
      t ->
        actual:any ->
          expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun (x55 : t) ->
        fun ~actual:(x49 : any) ->
          fun ~expected:(x50 : any) ->
            fun ?message:(x51 : Error.t or_string option) ->
              fun () ->
                ignore
                  (let x56 = t_to_js x55 in
                   Ojs.call (Ojs.get_prop_ascii x56 "notDeepEqual") "apply"
                     [|x56;((let x52 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore (Ojs.call x52 "push" [|(any_to_js x49)|]);
                             ignore (Ojs.call x52 "push" [|(any_to_js x50)|]);
                             (match x51 with
                              | Some x53 ->
                                  ignore
                                    (Ojs.call x52 "push"
                                       [|(or_string_to_js Error.t_to_js x53)|])
                              | None -> ());
                             x52))|])
    let (ok : t -> value:any -> ?message:Error.t or_string -> unit -> bool) =
      fun (x62 : t) ->
        fun ~value:(x57 : any) ->
          fun ?message:(x58 : Error.t or_string option) ->
            fun () ->
              Ojs.bool_of_js
                (let x63 = t_to_js x62 in
                 Ojs.call (Ojs.get_prop_ascii x63 "ok") "apply"
                   [|x63;((let x59 =
                             Ojs.new_obj
                               (Ojs.get_prop_ascii Ojs.global "Array") 
                               [||] in
                           ignore (Ojs.call x59 "push" [|(any_to_js x57)|]);
                           (match x58 with
                            | Some x60 ->
                                ignore
                                  (Ojs.call x59 "push"
                                     [|(or_string_to_js Error.t_to_js x60)|])
                            | None -> ());
                           x59))|])
    let (get_strict_equal : t -> AnonymousInterface1.t) =
      fun (x64 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x64) "strictEqual")
    let (set_strict_equal : t -> AnonymousInterface1.t -> unit) =
      fun (x65 : t) ->
        fun (x66 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x65) "strictEqual"
            (AnonymousInterface1.t_to_js x66)
    let (get_deep_strict_equal : t -> AnonymousInterface1.t) =
      fun (x67 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x67) "deepStrictEqual")
    let (set_deep_strict_equal : t -> AnonymousInterface1.t -> unit) =
      fun (x68 : t) ->
        fun (x69 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x68) "deepStrictEqual"
            (AnonymousInterface1.t_to_js x69)
    let (if_error : t -> value:any -> bool) =
      fun (x71 : t) ->
        fun ~value:(x70 : any) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x71) "ifError" [|(any_to_js x70)|])
    let (get_strict : t -> any) =
      fun (x72 : t) -> any_of_js (Ojs.get_prop_ascii (t_to_js x72) "strict")
    let (set_strict : t -> any -> unit) =
      fun (x73 : t) ->
        fun (x74 : any) ->
          Ojs.set_prop_ascii (t_to_js x73) "strict" (any_to_js x74)
  end
module AnonymousInterface2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x76 : Ojs.t) -> x76
    and t_to_js : t -> Ojs.t = fun (x75 : Ojs.t) -> x75
    let (apply :
      t -> value:any -> ?message:Error.t or_string -> unit -> bool) =
      fun (x82 : t) ->
        fun ~value:(x77 : any) ->
          fun ?message:(x78 : Error.t or_string option) ->
            fun () ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x82) "apply"
                   [|Ojs.null;((let x79 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x79 "push" [|(any_to_js x77)|]);
                                (match x78 with
                                 | Some x80 ->
                                     ignore
                                       (Ojs.call x79 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x80)|])
                                 | None -> ());
                                x79))|])
    let (get_equal : t -> AnonymousInterface1.t) =
      fun (x83 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x83) "equal")
    let (set_equal : t -> AnonymousInterface1.t -> unit) =
      fun (x84 : t) ->
        fun (x85 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x84) "equal"
            (AnonymousInterface1.t_to_js x85)
    let (not_equal :
      t ->
        actual:any ->
          expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun (x92 : t) ->
        fun ~actual:(x86 : any) ->
          fun ~expected:(x87 : any) ->
            fun ?message:(x88 : Error.t or_string option) ->
              fun () ->
                ignore
                  (let x93 = t_to_js x92 in
                   Ojs.call (Ojs.get_prop_ascii x93 "notEqual") "apply"
                     [|x93;((let x89 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             ignore (Ojs.call x89 "push" [|(any_to_js x86)|]);
                             ignore (Ojs.call x89 "push" [|(any_to_js x87)|]);
                             (match x88 with
                              | Some x90 ->
                                  ignore
                                    (Ojs.call x89 "push"
                                       [|(or_string_to_js Error.t_to_js x90)|])
                              | None -> ());
                             x89))|])
    let (get_deep_equal : t -> AnonymousInterface1.t) =
      fun (x94 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x94) "deepEqual")
    let (set_deep_equal : t -> AnonymousInterface1.t -> unit) =
      fun (x95 : t) ->
        fun (x96 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x95) "deepEqual"
            (AnonymousInterface1.t_to_js x96)
    let (not_deep_equal :
      t ->
        actual:any ->
          expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun (x103 : t) ->
        fun ~actual:(x97 : any) ->
          fun ~expected:(x98 : any) ->
            fun ?message:(x99 : Error.t or_string option) ->
              fun () ->
                ignore
                  (let x104 = t_to_js x103 in
                   Ojs.call (Ojs.get_prop_ascii x104 "notDeepEqual") "apply"
                     [|x104;((let x100 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x100 "push" [|(any_to_js x97)|]);
                              ignore
                                (Ojs.call x100 "push" [|(any_to_js x98)|]);
                              (match x99 with
                               | Some x101 ->
                                   ignore
                                     (Ojs.call x100 "push"
                                        [|(or_string_to_js Error.t_to_js x101)|])
                               | None -> ());
                              x100))|])
    let (ok : t -> value:any -> ?message:Error.t or_string -> unit -> bool) =
      fun (x110 : t) ->
        fun ~value:(x105 : any) ->
          fun ?message:(x106 : Error.t or_string option) ->
            fun () ->
              Ojs.bool_of_js
                (let x111 = t_to_js x110 in
                 Ojs.call (Ojs.get_prop_ascii x111 "ok") "apply"
                   [|x111;((let x107 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x107 "push" [|(any_to_js x105)|]);
                            (match x106 with
                             | Some x108 ->
                                 ignore
                                   (Ojs.call x107 "push"
                                      [|(or_string_to_js Error.t_to_js x108)|])
                             | None -> ());
                            x107))|])
    let (get_strict_equal : t -> AnonymousInterface1.t) =
      fun (x112 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x112) "strictEqual")
    let (set_strict_equal : t -> AnonymousInterface1.t -> unit) =
      fun (x113 : t) ->
        fun (x114 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x113) "strictEqual"
            (AnonymousInterface1.t_to_js x114)
    let (get_deep_strict_equal : t -> AnonymousInterface1.t) =
      fun (x115 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x115) "deepStrictEqual")
    let (set_deep_strict_equal : t -> AnonymousInterface1.t -> unit) =
      fun (x116 : t) ->
        fun (x117 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x116) "deepStrictEqual"
            (AnonymousInterface1.t_to_js x117)
    let (if_error : t -> value:any -> bool) =
      fun (x119 : t) ->
        fun ~value:(x118 : any) ->
          Ojs.bool_of_js
            (Ojs.call (t_to_js x119) "ifError" [|(any_to_js x118)|])
    let (get_strict :
      t ->
        ((value:any -> ?message:Error.t or_string -> unit -> bool,
           [ `L_s1_deepEqual  | `L_s2_deepStrictEqual  | `L_s3_equal 
           | `L_s4_ifError  | `L_s5_notDeepEqual  | `L_s6_notEqual 
           | `L_s7_ok  | `L_s8_strict  | `L_s9_strictEqual ]) Omit.t,
          AnonymousInterface3.t) intersection2)
      =
      fun (x120 : t) ->
        intersection2_of_js
          (fun (x121 : Ojs.t) ->
             Omit.t_of_js
               (fun (x122 : Ojs.t) ->
                  fun ~value:(x123 : any) ->
                    fun ?message:(x124 : Error.t or_string option) ->
                      fun () ->
                        Ojs.bool_of_js
                          (Ojs.call x122 "apply"
                             [|Ojs.null;((let x125 =
                                            Ojs.new_obj
                                              (Ojs.get_prop_ascii Ojs.global
                                                 "Array") [||] in
                                          ignore
                                            (Ojs.call x125 "push"
                                               [|(any_to_js x123)|]);
                                          (match x124 with
                                           | Some x126 ->
                                               ignore
                                                 (Ojs.call x125 "push"
                                                    [|(or_string_to_js
                                                         Error.t_to_js x126)|])
                                           | None -> ());
                                          x125))|]))
               (fun (x128 : Ojs.t) ->
                  let x129 = x128 in
                  match Ojs.string_of_js x129 with
                  | "deepEqual" -> `L_s1_deepEqual
                  | "deepStrictEqual" -> `L_s2_deepStrictEqual
                  | "equal" -> `L_s3_equal
                  | "ifError" -> `L_s4_ifError
                  | "notDeepEqual" -> `L_s5_notDeepEqual
                  | "notEqual" -> `L_s6_notEqual
                  | "ok" -> `L_s7_ok
                  | "strict" -> `L_s8_strict
                  | "strictEqual" -> `L_s9_strictEqual
                  | _ -> assert false) x121) AnonymousInterface3.t_of_js
          (Ojs.get_prop_ascii (t_to_js x120) "strict")
    let (set_strict :
      t ->
        ((value:any -> ?message:Error.t or_string -> unit -> bool,
           [ `L_s1_deepEqual  | `L_s2_deepStrictEqual  | `L_s3_equal 
           | `L_s4_ifError  | `L_s5_notDeepEqual  | `L_s6_notEqual 
           | `L_s7_ok  | `L_s8_strict  | `L_s9_strictEqual ]) Omit.t,
          AnonymousInterface3.t) intersection2 -> unit)
      =
      fun (x131 : t) ->
        fun
          (x132 :
            ((value:any -> ?message:Error.t or_string -> unit -> bool,
               [ `L_s1_deepEqual  | `L_s2_deepStrictEqual  | `L_s3_equal 
               | `L_s4_ifError  | `L_s5_notDeepEqual  | `L_s6_notEqual 
               | `L_s7_ok  | `L_s8_strict  | `L_s9_strictEqual ]) Omit.t,
              AnonymousInterface3.t) intersection2)
          ->
          Ojs.set_prop_ascii (t_to_js x131) "strict"
            (intersection2_to_js
               (fun
                  (x133 :
                    (value:any -> ?message:Error.t or_string -> unit -> bool,
                      [ `L_s1_deepEqual  | `L_s2_deepStrictEqual 
                      | `L_s3_equal  | `L_s4_ifError  | `L_s5_notDeepEqual 
                      | `L_s6_notEqual  | `L_s7_ok  | `L_s8_strict 
                      | `L_s9_strictEqual ]) Omit.t)
                  ->
                  Omit.t_to_js
                    (fun
                       (x134 :
                         value:any ->
                           ?message:Error.t or_string -> unit -> bool)
                       ->
                       Ojs.fun_to_js 2
                         (fun (x135 : Ojs.t) ->
                            fun (x136 : Ojs.t) ->
                              Ojs.bool_to_js
                                (x134 ~value:(any_of_js x135)
                                   ?message:(Ojs.option_of_js
                                               (fun (x137 : Ojs.t) ->
                                                  or_string_of_js
                                                    Error.t_of_js x137) x136)
                                   ())))
                    (fun
                       (x139 :
                         [ `L_s1_deepEqual  | `L_s2_deepStrictEqual 
                         | `L_s3_equal  | `L_s4_ifError 
                         | `L_s5_notDeepEqual  | `L_s6_notEqual  | `L_s7_ok 
                         | `L_s8_strict  | `L_s9_strictEqual ])
                       ->
                       match x139 with
                       | `L_s1_deepEqual -> Ojs.string_to_js "LS1DeepEqual"
                       | `L_s2_deepStrictEqual ->
                           Ojs.string_to_js "LS2DeepStrictEqual"
                       | `L_s3_equal -> Ojs.string_to_js "LS3Equal"
                       | `L_s4_ifError -> Ojs.string_to_js "LS4IfError"
                       | `L_s5_notDeepEqual ->
                           Ojs.string_to_js "LS5NotDeepEqual"
                       | `L_s6_notEqual -> Ojs.string_to_js "LS6NotEqual"
                       | `L_s7_ok -> Ojs.string_to_js "LS7Ok"
                       | `L_s8_strict -> Ojs.string_to_js "LS8Strict"
                       | `L_s9_strictEqual ->
                           Ojs.string_to_js "LS9StrictEqual") x133)
               AnonymousInterface3.t_to_js x132)
  end
module AnonymousInterface4 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x142 : Ojs.t) -> x142
    and t_to_js : t -> Ojs.t = fun (x141 : Ojs.t) -> x141
    let (create : t -> untyped_object) =
      fun (x143 : t) ->
        untyped_object_of_js (Ojs.new_obj (t_to_js x143) [||])
  end
module Assert =
  struct
    module AssertionError =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x145 : Ojs.t) -> x145
        and t_to_js : t -> Ojs.t = fun (x144 : Ojs.t) -> x144
        let (get_actual : t -> any) =
          fun (x146 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x146) "actual")
        let (set_actual : t -> any -> unit) =
          fun (x147 : t) ->
            fun (x148 : any) ->
              Ojs.set_prop_ascii (t_to_js x147) "actual" (any_to_js x148)
        let (get_expected : t -> any) =
          fun (x149 : t) ->
            any_of_js (Ojs.get_prop_ascii (t_to_js x149) "expected")
        let (set_expected : t -> any -> unit) =
          fun (x150 : t) ->
            fun (x151 : any) ->
              Ojs.set_prop_ascii (t_to_js x150) "expected" (any_to_js x151)
        let (get_operator : t -> string) =
          fun (x152 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x152) "operator")
        let (set_operator : t -> string -> unit) =
          fun (x153 : t) ->
            fun (x154 : string) ->
              Ojs.set_prop_ascii (t_to_js x153) "operator"
                (Ojs.string_to_js x154)
        let (get_generated_message : t -> bool) =
          fun (x155 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x155) "generatedMessage")
        let (set_generated_message : t -> bool -> unit) =
          fun (x156 : t) ->
            fun (x157 : bool) ->
              Ojs.set_prop_ascii (t_to_js x156) "generatedMessage"
                (Ojs.bool_to_js x157)
        let (get_code : t -> [ `L_s0_ERR_ASSERTION ]) =
          fun (x158 : t) ->
            let x159 = Ojs.get_prop_ascii (t_to_js x158) "code" in
            match Ojs.string_of_js x159 with
            | "ERR_ASSERTION" -> `L_s0_ERR_ASSERTION
            | _ -> assert false
        let (set_code : t -> [ `L_s0_ERR_ASSERTION ] -> unit) =
          fun (x160 : t) ->
            fun (x161 : [ `L_s0_ERR_ASSERTION ]) ->
              Ojs.set_prop_ascii (t_to_js x160) "code"
                (match x161 with
                 | `L_s0_ERR_ASSERTION -> Ojs.string_to_js "LS0ERRASSERTION")
        let (create : ?options:AnonymousInterface0.t -> unit -> t) =
          fun ?options:(x162 : AnonymousInterface0.t option) ->
            fun () ->
              t_of_js
                (Ojs.new_obj_arr
                   (Ojs.get_prop_ascii Import.assert_ "AssertionError")
                   (let x163 =
                      Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                        [||] in
                    (match x162 with
                     | Some x164 ->
                         ignore
                           (Ojs.call x163 "push"
                              [|(AnonymousInterface0.t_to_js x164)|])
                     | None -> ());
                    x163))
        let (cast : t -> Error.t) =
          fun (x165 : t) -> Error.t_of_js (t_to_js x165)
      end
    module CallTrackerReportInformation =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x167 : Ojs.t) -> x167
        and t_to_js : t -> Ojs.t = fun (x166 : Ojs.t) -> x166
        let (get_message : t -> string) =
          fun (x168 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x168) "message")
        let (set_message : t -> string -> unit) =
          fun (x169 : t) ->
            fun (x170 : string) ->
              Ojs.set_prop_ascii (t_to_js x169) "message"
                (Ojs.string_to_js x170)
        let (get_actual : t -> float) =
          fun (x171 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x171) "actual")
        let (set_actual : t -> float -> unit) =
          fun (x172 : t) ->
            fun (x173 : float) ->
              Ojs.set_prop_ascii (t_to_js x172) "actual"
                (Ojs.float_to_js x173)
        let (get_expected : t -> float) =
          fun (x174 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x174) "expected")
        let (set_expected : t -> float -> unit) =
          fun (x175 : t) ->
            fun (x176 : float) ->
              Ojs.set_prop_ascii (t_to_js x175) "expected"
                (Ojs.float_to_js x176)
        let (get_operator : t -> string) =
          fun (x177 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x177) "operator")
        let (set_operator : t -> string -> unit) =
          fun (x178 : t) ->
            fun (x179 : string) ->
              Ojs.set_prop_ascii (t_to_js x178) "operator"
                (Ojs.string_to_js x179)
        let (get_stack : t -> untyped_object) =
          fun (x180 : t) ->
            untyped_object_of_js (Ojs.get_prop_ascii (t_to_js x180) "stack")
        let (set_stack : t -> untyped_object -> unit) =
          fun (x181 : t) ->
            fun (x182 : untyped_object) ->
              Ojs.set_prop_ascii (t_to_js x181) "stack"
                (untyped_object_to_js x182)
      end
    module CallTracker =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x184 : Ojs.t) -> x184
        and t_to_js : t -> Ojs.t = fun (x183 : Ojs.t) -> x183
        let (calls : t -> ?exact:float -> unit -> unit -> unit) =
          fun (x188 : t) ->
            fun ?exact:(x185 : float option) ->
              fun () ->
                fun () ->
                  ignore
                    (Ojs.apply
                       (let x189 = t_to_js x188 in
                        Ojs.call (Ojs.get_prop_ascii x189 "calls") "apply"
                          [|x189;((let x186 =
                                     Ojs.new_obj
                                       (Ojs.get_prop_ascii Ojs.global "Array")
                                       [||] in
                                   (match x185 with
                                    | Some x187 ->
                                        ignore
                                          (Ojs.call x186 "push"
                                             [|(Ojs.float_to_js x187)|])
                                    | None -> ());
                                   x186))|]) [||])
        let (calls' : t -> ?fn:'Func -> ?exact:float -> unit -> 'Func) =
          fun (x195 : t) ->
            fun ?fn:(x190 : 'Func option) ->
              fun ?exact:(x191 : float option) ->
                fun () ->
                  Obj.magic
                    (let x196 = t_to_js x195 in
                     Ojs.call (Ojs.get_prop_ascii x196 "calls") "apply"
                       [|x196;((let x192 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x190 with
                                 | Some x194 ->
                                     ignore
                                       (Ojs.call x192 "push"
                                          [|(Obj.magic x194)|])
                                 | None -> ());
                                (match x191 with
                                 | Some x193 ->
                                     ignore
                                       (Ojs.call x192 "push"
                                          [|(Ojs.float_to_js x193)|])
                                 | None -> ());
                                x192))|])
        let (report : t -> CallTrackerReportInformation.t list) =
          fun (x197 : t) ->
            Ojs.list_of_js CallTrackerReportInformation.t_of_js
              (Ojs.call (t_to_js x197) "report" [||])
        let (verify : t -> unit) =
          fun (x199 : t) -> ignore (Ojs.call (t_to_js x199) "verify" [||])
      end
    module AssertPredicate =
      struct
        type t =
          (Error.t, regexp, untyped_object, AnonymousInterface4.t,
            thrown:any -> bool) union5
        let rec t_of_js : Ojs.t -> t =
          fun (x207 : Ojs.t) ->
            union5_of_js Error.t_of_js regexp_of_js untyped_object_of_js
              AnonymousInterface4.t_of_js
              (fun (x212 : Ojs.t) ->
                 fun ~thrown:(x213 : any) ->
                   Ojs.bool_of_js (Ojs.apply x212 [|(any_to_js x213)|])) x207
        and t_to_js : t -> Ojs.t =
          fun
            (x200 :
              (Error.t, regexp, untyped_object, AnonymousInterface4.t,
                thrown:any -> bool) union5)
            ->
            union5_to_js Error.t_to_js regexp_to_js untyped_object_to_js
              AnonymousInterface4.t_to_js
              (fun (x205 : thrown:any -> bool) ->
                 Ojs.fun_to_js 1
                   (fun (x206 : Ojs.t) ->
                      Ojs.bool_to_js (x205 ~thrown:(any_of_js x206)))) x200
      end
    let (fail : ?message:Error.t or_string -> unit -> never) =
      fun ?message:(x214 : Error.t or_string option) ->
        fun () ->
          never_of_js
            (let x218 = Import.assert_ in
             Ojs.call (Ojs.get_prop_ascii x218 "fail") "apply"
               [|x218;((let x215 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x214 with
                         | Some x216 ->
                             ignore
                               (Ojs.call x215 "push"
                                  [|(or_string_to_js Error.t_to_js x216)|])
                         | None -> ());
                        x215))|])
    let (fail :
      actual:any ->
        expected:any ->
          ?message:Error.t or_string ->
            ?operator:string ->
              ?stack_start_fn:untyped_function -> unit -> never)
      =
      fun ~actual:(x219 : any) ->
        fun ~expected:(x220 : any) ->
          fun ?message:(x221 : Error.t or_string option) ->
            fun ?operator:(x222 : string option) ->
              fun ?stack_start_fn:(x223 : untyped_function option) ->
                fun () ->
                  never_of_js
                    (let x229 = Import.assert_ in
                     Ojs.call (Ojs.get_prop_ascii x229 "fail") "apply"
                       [|x229;((let x224 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x224 "push" [|(any_to_js x219)|]);
                                ignore
                                  (Ojs.call x224 "push" [|(any_to_js x220)|]);
                                (match x221 with
                                 | Some x227 ->
                                     ignore
                                       (Ojs.call x224 "push"
                                          [|(or_string_to_js Error.t_to_js
                                               x227)|])
                                 | None -> ());
                                (match x222 with
                                 | Some x226 ->
                                     ignore
                                       (Ojs.call x224 "push"
                                          [|(Ojs.string_to_js x226)|])
                                 | None -> ());
                                (match x223 with
                                 | Some x225 ->
                                     ignore
                                       (Ojs.call x224 "push"
                                          [|(untyped_function_to_js x225)|])
                                 | None -> ());
                                x224))|])
    let (ok : value:any -> ?message:Error.t or_string -> unit -> bool) =
      fun ~value:(x230 : any) ->
        fun ?message:(x231 : Error.t or_string option) ->
          fun () ->
            Ojs.bool_of_js
              (let x235 = Import.assert_ in
               Ojs.call (Ojs.get_prop_ascii x235 "ok") "apply"
                 [|x235;((let x232 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore (Ojs.call x232 "push" [|(any_to_js x230)|]);
                          (match x231 with
                           | Some x233 ->
                               ignore
                                 (Ojs.call x232 "push"
                                    [|(or_string_to_js Error.t_to_js x233)|])
                           | None -> ());
                          x232))|])
    let (equal :
      actual:any ->
        expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~actual:(x236 : any) ->
        fun ~expected:(x237 : any) ->
          fun ?message:(x238 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x242 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x242 "equal") "apply"
                   [|x242;((let x239 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x239 "push" [|(any_to_js x236)|]);
                            ignore
                              (Ojs.call x239 "push" [|(any_to_js x237)|]);
                            (match x238 with
                             | Some x240 ->
                                 ignore
                                   (Ojs.call x239 "push"
                                      [|(or_string_to_js Error.t_to_js x240)|])
                             | None -> ());
                            x239))|])
    let (not_equal :
      actual:any ->
        expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~actual:(x243 : any) ->
        fun ~expected:(x244 : any) ->
          fun ?message:(x245 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x249 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x249 "notEqual") "apply"
                   [|x249;((let x246 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x246 "push" [|(any_to_js x243)|]);
                            ignore
                              (Ojs.call x246 "push" [|(any_to_js x244)|]);
                            (match x245 with
                             | Some x247 ->
                                 ignore
                                   (Ojs.call x246 "push"
                                      [|(or_string_to_js Error.t_to_js x247)|])
                             | None -> ());
                            x246))|])
    let (deep_equal :
      actual:any ->
        expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~actual:(x250 : any) ->
        fun ~expected:(x251 : any) ->
          fun ?message:(x252 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x256 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x256 "deepEqual") "apply"
                   [|x256;((let x253 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x253 "push" [|(any_to_js x250)|]);
                            ignore
                              (Ojs.call x253 "push" [|(any_to_js x251)|]);
                            (match x252 with
                             | Some x254 ->
                                 ignore
                                   (Ojs.call x253 "push"
                                      [|(or_string_to_js Error.t_to_js x254)|])
                             | None -> ());
                            x253))|])
    let (not_deep_equal :
      actual:any ->
        expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~actual:(x257 : any) ->
        fun ~expected:(x258 : any) ->
          fun ?message:(x259 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x263 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x263 "notDeepEqual") "apply"
                   [|x263;((let x260 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x260 "push" [|(any_to_js x257)|]);
                            ignore
                              (Ojs.call x260 "push" [|(any_to_js x258)|]);
                            (match x259 with
                             | Some x261 ->
                                 ignore
                                   (Ojs.call x260 "push"
                                      [|(or_string_to_js Error.t_to_js x261)|])
                             | None -> ());
                            x260))|])
    let (strict_equal :
      actual:any -> expected:'T -> ?message:Error.t or_string -> unit -> bool)
      =
      fun ~actual:(x264 : any) ->
        fun ~expected:(x265 : 'T) ->
          fun ?message:(x266 : Error.t or_string option) ->
            fun () ->
              Ojs.bool_of_js
                (let x270 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x270 "strictEqual") "apply"
                   [|x270;((let x267 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x267 "push" [|(any_to_js x264)|]);
                            ignore
                              (Ojs.call x267 "push" [|(Obj.magic x265)|]);
                            (match x266 with
                             | Some x268 ->
                                 ignore
                                   (Ojs.call x267 "push"
                                      [|(or_string_to_js Error.t_to_js x268)|])
                             | None -> ());
                            x267))|])
    let (not_strict_equal :
      actual:any ->
        expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~actual:(x271 : any) ->
        fun ~expected:(x272 : any) ->
          fun ?message:(x273 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x277 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x277 "notStrictEqual") "apply"
                   [|x277;((let x274 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x274 "push" [|(any_to_js x271)|]);
                            ignore
                              (Ojs.call x274 "push" [|(any_to_js x272)|]);
                            (match x273 with
                             | Some x275 ->
                                 ignore
                                   (Ojs.call x274 "push"
                                      [|(or_string_to_js Error.t_to_js x275)|])
                             | None -> ());
                            x274))|])
    let (deep_strict_equal :
      actual:any -> expected:'T -> ?message:Error.t or_string -> unit -> bool)
      =
      fun ~actual:(x278 : any) ->
        fun ~expected:(x279 : 'T) ->
          fun ?message:(x280 : Error.t or_string option) ->
            fun () ->
              Ojs.bool_of_js
                (let x284 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x284 "deepStrictEqual") "apply"
                   [|x284;((let x281 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x281 "push" [|(any_to_js x278)|]);
                            ignore
                              (Ojs.call x281 "push" [|(Obj.magic x279)|]);
                            (match x280 with
                             | Some x282 ->
                                 ignore
                                   (Ojs.call x281 "push"
                                      [|(or_string_to_js Error.t_to_js x282)|])
                             | None -> ());
                            x281))|])
    let (not_deep_strict_equal :
      actual:any ->
        expected:any -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~actual:(x285 : any) ->
        fun ~expected:(x286 : any) ->
          fun ?message:(x287 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x291 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x291 "notDeepStrictEqual")
                   "apply"
                   [|x291;((let x288 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x288 "push" [|(any_to_js x285)|]);
                            ignore
                              (Ojs.call x288 "push" [|(any_to_js x286)|]);
                            (match x287 with
                             | Some x289 ->
                                 ignore
                                   (Ojs.call x288 "push"
                                      [|(or_string_to_js Error.t_to_js x289)|])
                             | None -> ());
                            x288))|])
    let (throws :
      block:(unit -> any) -> ?message:Error.t or_string -> unit -> unit) =
      fun ~block:(x292 : unit -> any) ->
        fun ?message:(x293 : Error.t or_string option) ->
          fun () ->
            ignore
              (let x297 = Import.assert_ in
               Ojs.call (Ojs.get_prop_ascii x297 "throws") "apply"
                 [|x297;((let x294 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x294 "push"
                               [|(Ojs.fun_to_js 1
                                    (fun _ -> any_to_js (x292 ())))|]);
                          (match x293 with
                           | Some x295 ->
                               ignore
                                 (Ojs.call x294 "push"
                                    [|(or_string_to_js Error.t_to_js x295)|])
                           | None -> ());
                          x294))|])
    let (throws :
      block:(unit -> any) ->
        error:AssertPredicate.t -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~block:(x298 : unit -> any) ->
        fun ~error:(x299 : AssertPredicate.t) ->
          fun ?message:(x300 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x304 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x304 "throws") "apply"
                   [|x304;((let x301 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x301 "push"
                                 [|(Ojs.fun_to_js 1
                                      (fun _ -> any_to_js (x298 ())))|]);
                            ignore
                              (Ojs.call x301 "push"
                                 [|(AssertPredicate.t_to_js x299)|]);
                            (match x300 with
                             | Some x302 ->
                                 ignore
                                   (Ojs.call x301 "push"
                                      [|(or_string_to_js Error.t_to_js x302)|])
                             | None -> ());
                            x301))|])
    let (does_not_throw :
      block:(unit -> any) -> ?message:Error.t or_string -> unit -> unit) =
      fun ~block:(x305 : unit -> any) ->
        fun ?message:(x306 : Error.t or_string option) ->
          fun () ->
            ignore
              (let x310 = Import.assert_ in
               Ojs.call (Ojs.get_prop_ascii x310 "doesNotThrow") "apply"
                 [|x310;((let x307 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x307 "push"
                               [|(Ojs.fun_to_js 1
                                    (fun _ -> any_to_js (x305 ())))|]);
                          (match x306 with
                           | Some x308 ->
                               ignore
                                 (Ojs.call x307 "push"
                                    [|(or_string_to_js Error.t_to_js x308)|])
                           | None -> ());
                          x307))|])
    let (does_not_throw :
      block:(unit -> any) ->
        error:AssertPredicate.t -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~block:(x311 : unit -> any) ->
        fun ~error:(x312 : AssertPredicate.t) ->
          fun ?message:(x313 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x317 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x317 "doesNotThrow") "apply"
                   [|x317;((let x314 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x314 "push"
                                 [|(Ojs.fun_to_js 1
                                      (fun _ -> any_to_js (x311 ())))|]);
                            ignore
                              (Ojs.call x314 "push"
                                 [|(AssertPredicate.t_to_js x312)|]);
                            (match x313 with
                             | Some x315 ->
                                 ignore
                                   (Ojs.call x314 "push"
                                      [|(or_string_to_js Error.t_to_js x315)|])
                             | None -> ());
                            x314))|])
    let (if_error : value:any -> bool) =
      fun ~value:(x318 : any) ->
        Ojs.bool_of_js
          (Ojs.call Import.assert_ "ifError" [|(any_to_js x318)|])
    let (rejects :
      block:(unit -> any Promise.t, any Promise.t) union2 ->
        ?message:Error.t or_string -> unit -> unit Promise.t)
      =
      fun ~block:(x319 : (unit -> any Promise.t, any Promise.t) union2) ->
        fun ?message:(x320 : Error.t or_string option) ->
          fun () ->
            Promise.t_of_js Ojs.unit_of_js
              (let x328 = Import.assert_ in
               Ojs.call (Ojs.get_prop_ascii x328 "rejects") "apply"
                 [|x328;((let x321 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x321 "push"
                               [|(union2_to_js
                                    (fun (x324 : unit -> any Promise.t) ->
                                       Ojs.fun_to_js 1
                                         (fun _ ->
                                            Promise.t_to_js any_to_js
                                              (x324 ())))
                                    (fun (x326 : any Promise.t) ->
                                       Promise.t_to_js any_to_js x326) x319)|]);
                          (match x320 with
                           | Some x322 ->
                               ignore
                                 (Ojs.call x321 "push"
                                    [|(or_string_to_js Error.t_to_js x322)|])
                           | None -> ());
                          x321))|])
    let (rejects :
      block:(unit -> any Promise.t, any Promise.t) union2 ->
        error:AssertPredicate.t ->
          ?message:Error.t or_string -> unit -> unit Promise.t)
      =
      fun ~block:(x330 : (unit -> any Promise.t, any Promise.t) union2) ->
        fun ~error:(x331 : AssertPredicate.t) ->
          fun ?message:(x332 : Error.t or_string option) ->
            fun () ->
              Promise.t_of_js Ojs.unit_of_js
                (let x340 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x340 "rejects") "apply"
                   [|x340;((let x333 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x333 "push"
                                 [|(union2_to_js
                                      (fun (x336 : unit -> any Promise.t) ->
                                         Ojs.fun_to_js 1
                                           (fun _ ->
                                              Promise.t_to_js any_to_js
                                                (x336 ())))
                                      (fun (x338 : any Promise.t) ->
                                         Promise.t_to_js any_to_js x338) x330)|]);
                            ignore
                              (Ojs.call x333 "push"
                                 [|(AssertPredicate.t_to_js x331)|]);
                            (match x332 with
                             | Some x334 ->
                                 ignore
                                   (Ojs.call x333 "push"
                                      [|(or_string_to_js Error.t_to_js x334)|])
                             | None -> ());
                            x333))|])
    let (does_not_reject :
      block:(unit -> any Promise.t, any Promise.t) union2 ->
        ?message:Error.t or_string -> unit -> unit Promise.t)
      =
      fun ~block:(x342 : (unit -> any Promise.t, any Promise.t) union2) ->
        fun ?message:(x343 : Error.t or_string option) ->
          fun () ->
            Promise.t_of_js Ojs.unit_of_js
              (let x351 = Import.assert_ in
               Ojs.call (Ojs.get_prop_ascii x351 "doesNotReject") "apply"
                 [|x351;((let x344 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x344 "push"
                               [|(union2_to_js
                                    (fun (x347 : unit -> any Promise.t) ->
                                       Ojs.fun_to_js 1
                                         (fun _ ->
                                            Promise.t_to_js any_to_js
                                              (x347 ())))
                                    (fun (x349 : any Promise.t) ->
                                       Promise.t_to_js any_to_js x349) x342)|]);
                          (match x343 with
                           | Some x345 ->
                               ignore
                                 (Ojs.call x344 "push"
                                    [|(or_string_to_js Error.t_to_js x345)|])
                           | None -> ());
                          x344))|])
    let (does_not_reject :
      block:(unit -> any Promise.t, any Promise.t) union2 ->
        error:AssertPredicate.t ->
          ?message:Error.t or_string -> unit -> unit Promise.t)
      =
      fun ~block:(x353 : (unit -> any Promise.t, any Promise.t) union2) ->
        fun ~error:(x354 : AssertPredicate.t) ->
          fun ?message:(x355 : Error.t or_string option) ->
            fun () ->
              Promise.t_of_js Ojs.unit_of_js
                (let x363 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x363 "doesNotReject") "apply"
                   [|x363;((let x356 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x356 "push"
                                 [|(union2_to_js
                                      (fun (x359 : unit -> any Promise.t) ->
                                         Ojs.fun_to_js 1
                                           (fun _ ->
                                              Promise.t_to_js any_to_js
                                                (x359 ())))
                                      (fun (x361 : any Promise.t) ->
                                         Promise.t_to_js any_to_js x361) x353)|]);
                            ignore
                              (Ojs.call x356 "push"
                                 [|(AssertPredicate.t_to_js x354)|]);
                            (match x355 with
                             | Some x357 ->
                                 ignore
                                   (Ojs.call x356 "push"
                                      [|(or_string_to_js Error.t_to_js x357)|])
                             | None -> ());
                            x356))|])
    let (match_ :
      value:string ->
        reg_exp:regexp -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~value:(x365 : string) ->
        fun ~reg_exp:(x366 : regexp) ->
          fun ?message:(x367 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x371 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x371 "match") "apply"
                   [|x371;((let x368 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x368 "push"
                                 [|(Ojs.string_to_js x365)|]);
                            ignore
                              (Ojs.call x368 "push" [|(regexp_to_js x366)|]);
                            (match x367 with
                             | Some x369 ->
                                 ignore
                                   (Ojs.call x368 "push"
                                      [|(or_string_to_js Error.t_to_js x369)|])
                             | None -> ());
                            x368))|])
    let (does_not_match :
      value:string ->
        reg_exp:regexp -> ?message:Error.t or_string -> unit -> unit)
      =
      fun ~value:(x372 : string) ->
        fun ~reg_exp:(x373 : regexp) ->
          fun ?message:(x374 : Error.t or_string option) ->
            fun () ->
              ignore
                (let x378 = Import.assert_ in
                 Ojs.call (Ojs.get_prop_ascii x378 "doesNotMatch") "apply"
                   [|x378;((let x375 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x375 "push"
                                 [|(Ojs.string_to_js x372)|]);
                            ignore
                              (Ojs.call x375 "push" [|(regexp_to_js x373)|]);
                            (match x374 with
                             | Some x376 ->
                                 ignore
                                   (Ojs.call x375 "push"
                                      [|(or_string_to_js Error.t_to_js x376)|])
                             | None -> ());
                            x375))|])
    let (strict :
      ((value:any -> ?message:Error.t or_string -> unit -> bool,
         [ `L_s1_deepEqual  | `L_s2_deepStrictEqual  | `L_s3_equal 
         | `L_s4_ifError  | `L_s5_notDeepEqual  | `L_s6_notEqual  | `L_s7_ok 
         | `L_s8_strict  | `L_s9_strictEqual ]) Omit.t,
        AnonymousInterface2.t) intersection2)
      =
      intersection2_of_js
        (fun (x379 : Ojs.t) ->
           Omit.t_of_js
             (fun (x380 : Ojs.t) ->
                fun ~value:(x381 : any) ->
                  fun ?message:(x382 : Error.t or_string option) ->
                    fun () ->
                      Ojs.bool_of_js
                        (Ojs.call x380 "apply"
                           [|Ojs.null;((let x383 =
                                          Ojs.new_obj
                                            (Ojs.get_prop_ascii Ojs.global
                                               "Array") [||] in
                                        ignore
                                          (Ojs.call x383 "push"
                                             [|(any_to_js x381)|]);
                                        (match x382 with
                                         | Some x384 ->
                                             ignore
                                               (Ojs.call x383 "push"
                                                  [|(or_string_to_js
                                                       Error.t_to_js x384)|])
                                         | None -> ());
                                        x383))|]))
             (fun (x386 : Ojs.t) ->
                let x387 = x386 in
                match Ojs.string_of_js x387 with
                | "deepEqual" -> `L_s1_deepEqual
                | "deepStrictEqual" -> `L_s2_deepStrictEqual
                | "equal" -> `L_s3_equal
                | "ifError" -> `L_s4_ifError
                | "notDeepEqual" -> `L_s5_notDeepEqual
                | "notEqual" -> `L_s6_notEqual
                | "ok" -> `L_s7_ok
                | "strict" -> `L_s8_strict
                | "strictEqual" -> `L_s9_strictEqual
                | _ -> assert false) x379) AnonymousInterface2.t_of_js
        (Ojs.get_prop_ascii Import.assert_ "strict")
  end
let (assert_ : bool -> ?message:Error.t or_string -> unit -> bool) =
  fun (x389 : bool) ->
    fun ?message:(x390 : Error.t or_string option) ->
      fun () ->
        Ojs.bool_of_js
          (let x394 = Ojs.global in
           Ojs.call (Ojs.get_prop_ascii x394 "assert") "apply"
             [|x394;((let x391 =
                        Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                          [||] in
                      ignore (Ojs.call x391 "push" [|(Ojs.bool_to_js x389)|]);
                      (match x390 with
                       | Some x392 ->
                           ignore
                             (Ojs.call x391 "push"
                                [|(or_string_to_js Error.t_to_js x392)|])
                       | None -> ());
                      x391))|])
