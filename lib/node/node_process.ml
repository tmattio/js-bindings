[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module AnonymousInterface0 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
    and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
  end
module AnonymousInterface1 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x4 : Ojs.t) -> x4
    and t_to_js : t -> Ojs.t = fun (x3 : Ojs.t) -> x3
    let (cflags : t -> any list) =
      fun (x5 : t) ->
        Ojs.list_of_js any_of_js (Ojs.get_prop_ascii (t_to_js x5) "cflags")
    let (set_cflags : t -> any list -> unit) =
      fun (x7 : t) ->
        fun (x8 : any list) ->
          Ojs.set_prop_ascii (t_to_js x7) "cflags"
            (Ojs.list_to_js any_to_js x8)
    let (default_configuration : t -> string) =
      fun (x10 : t) ->
        Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x10) "default_configuration")
    let (set_default_configuration : t -> string -> unit) =
      fun (x11 : t) ->
        fun (x12 : string) ->
          Ojs.set_prop_ascii (t_to_js x11) "default_configuration"
            (Ojs.string_to_js x12)
    let (defines : t -> string list) =
      fun (x13 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x13) "defines")
    let (set_defines : t -> string list -> unit) =
      fun (x15 : t) ->
        fun (x16 : string list) ->
          Ojs.set_prop_ascii (t_to_js x15) "defines"
            (Ojs.list_to_js Ojs.string_to_js x16)
    let (include_dirs : t -> string list) =
      fun (x18 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x18) "include_dirs")
    let (set_include_dirs : t -> string list -> unit) =
      fun (x20 : t) ->
        fun (x21 : string list) ->
          Ojs.set_prop_ascii (t_to_js x20) "include_dirs"
            (Ojs.list_to_js Ojs.string_to_js x21)
    let (libraries : t -> string list) =
      fun (x23 : t) ->
        Ojs.list_of_js Ojs.string_of_js
          (Ojs.get_prop_ascii (t_to_js x23) "libraries")
    let (set_libraries : t -> string list -> unit) =
      fun (x25 : t) ->
        fun (x26 : string list) ->
          Ojs.set_prop_ascii (t_to_js x25) "libraries"
            (Ojs.list_to_js Ojs.string_to_js x26)
  end
module AnonymousInterface2 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x29 : Ojs.t) -> x29
    and t_to_js : t -> Ojs.t = fun (x28 : Ojs.t) -> x28
    let (clang : t -> int) =
      fun (x30 : t) ->
        Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x30) "clang")
    let (set_clang : t -> int -> unit) =
      fun (x31 : t) ->
        fun (x32 : int) ->
          Ojs.set_prop_ascii (t_to_js x31) "clang" (Ojs.int_to_js x32)
    let (host_arch : t -> string) =
      fun (x33 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x33) "host_arch")
    let (set_host_arch : t -> string -> unit) =
      fun (x34 : t) ->
        fun (x35 : string) ->
          Ojs.set_prop_ascii (t_to_js x34) "host_arch" (Ojs.string_to_js x35)
    let (node_install_npm : t -> bool) =
      fun (x36 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x36) "node_install_npm")
    let (set_node_install_npm : t -> bool -> unit) =
      fun (x37 : t) ->
        fun (x38 : bool) ->
          Ojs.set_prop_ascii (t_to_js x37) "node_install_npm"
            (Ojs.bool_to_js x38)
    let (node_install_waf : t -> bool) =
      fun (x39 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x39) "node_install_waf")
    let (set_node_install_waf : t -> bool -> unit) =
      fun (x40 : t) ->
        fun (x41 : bool) ->
          Ojs.set_prop_ascii (t_to_js x40) "node_install_waf"
            (Ojs.bool_to_js x41)
    let (node_prefix : t -> string) =
      fun (x42 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x42) "node_prefix")
    let (set_node_prefix : t -> string -> unit) =
      fun (x43 : t) ->
        fun (x44 : string) ->
          Ojs.set_prop_ascii (t_to_js x43) "node_prefix"
            (Ojs.string_to_js x44)
    let (node_shared_openssl : t -> bool) =
      fun (x45 : t) ->
        Ojs.bool_of_js
          (Ojs.get_prop_ascii (t_to_js x45) "node_shared_openssl")
    let (set_node_shared_openssl : t -> bool -> unit) =
      fun (x46 : t) ->
        fun (x47 : bool) ->
          Ojs.set_prop_ascii (t_to_js x46) "node_shared_openssl"
            (Ojs.bool_to_js x47)
    let (node_shared_v8 : t -> bool) =
      fun (x48 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x48) "node_shared_v8")
    let (set_node_shared_v8 : t -> bool -> unit) =
      fun (x49 : t) ->
        fun (x50 : bool) ->
          Ojs.set_prop_ascii (t_to_js x49) "node_shared_v8"
            (Ojs.bool_to_js x50)
    let (node_shared_zlib : t -> bool) =
      fun (x51 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x51) "node_shared_zlib")
    let (set_node_shared_zlib : t -> bool -> unit) =
      fun (x52 : t) ->
        fun (x53 : bool) ->
          Ojs.set_prop_ascii (t_to_js x52) "node_shared_zlib"
            (Ojs.bool_to_js x53)
    let (node_use_dtrace : t -> bool) =
      fun (x54 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x54) "node_use_dtrace")
    let (set_node_use_dtrace : t -> bool -> unit) =
      fun (x55 : t) ->
        fun (x56 : bool) ->
          Ojs.set_prop_ascii (t_to_js x55) "node_use_dtrace"
            (Ojs.bool_to_js x56)
    let (node_use_etw : t -> bool) =
      fun (x57 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x57) "node_use_etw")
    let (set_node_use_etw : t -> bool -> unit) =
      fun (x58 : t) ->
        fun (x59 : bool) ->
          Ojs.set_prop_ascii (t_to_js x58) "node_use_etw"
            (Ojs.bool_to_js x59)
    let (node_use_openssl : t -> bool) =
      fun (x60 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x60) "node_use_openssl")
    let (set_node_use_openssl : t -> bool -> unit) =
      fun (x61 : t) ->
        fun (x62 : bool) ->
          Ojs.set_prop_ascii (t_to_js x61) "node_use_openssl"
            (Ojs.bool_to_js x62)
    let (tararch : t -> string) =
      fun (x63 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x63) "tararch")
    let (set_tararch : t -> string -> unit) =
      fun (x64 : t) ->
        fun (x65 : string) ->
          Ojs.set_prop_ascii (t_to_js x64) "tararch" (Ojs.string_to_js x65)
    let (v8_no_strict_aliasing : t -> int) =
      fun (x66 : t) ->
        Ojs.int_of_js
          (Ojs.get_prop_ascii (t_to_js x66) "v8_no_strict_aliasing")
    let (set_v8_no_strict_aliasing : t -> int -> unit) =
      fun (x67 : t) ->
        fun (x68 : int) ->
          Ojs.set_prop_ascii (t_to_js x67) "v8_no_strict_aliasing"
            (Ojs.int_to_js x68)
    let (v8_use_snapshot : t -> bool) =
      fun (x69 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x69) "v8_use_snapshot")
    let (set_v8_use_snapshot : t -> bool -> unit) =
      fun (x70 : t) ->
        fun (x71 : bool) ->
          Ojs.set_prop_ascii (t_to_js x70) "v8_use_snapshot"
            (Ojs.bool_to_js x71)
    let (visibility : t -> string) =
      fun (x72 : t) ->
        Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x72) "visibility")
    let (set_visibility : t -> string -> unit) =
      fun (x73 : t) ->
        fun (x74 : string) ->
          Ojs.set_prop_ascii (t_to_js x73) "visibility"
            (Ojs.string_to_js x74)
  end
module AnonymousInterface3 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x76 : Ojs.t) -> x76
    and t_to_js : t -> Ojs.t = fun (x75 : Ojs.t) -> x75
    let (fd : t -> [ `L_n_0 ]) =
      fun (x77 : t) ->
        let x78 = Ojs.get_prop_ascii (t_to_js x77) "fd" in
        match Ojs.int_of_js x78 with | 0 -> `L_n_0 | _ -> assert false
    let (set_fd : t -> [ `L_n_0 ] -> unit) =
      fun (x79 : t) ->
        fun (x80 : [ `L_n_0 ]) ->
          Ojs.set_prop_ascii (t_to_js x79) "fd"
            (match x80 with | `L_n_0 -> Ojs.string_to_js "LN0")
  end
module AnonymousInterface4 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x82 : Ojs.t) -> x82
    and t_to_js : t -> Ojs.t = fun (x81 : Ojs.t) -> x81
    let (fd : t -> [ `L_n_1 ]) =
      fun (x83 : t) ->
        let x84 = Ojs.get_prop_ascii (t_to_js x83) "fd" in
        match Ojs.int_of_js x84 with | 1 -> `L_n_1 | _ -> assert false
    let (set_fd : t -> [ `L_n_1 ] -> unit) =
      fun (x85 : t) ->
        fun (x86 : [ `L_n_1 ]) ->
          Ojs.set_prop_ascii (t_to_js x85) "fd"
            (match x86 with | `L_n_1 -> Ojs.string_to_js "LN1")
  end
module AnonymousInterface5 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x88 : Ojs.t) -> x88
    and t_to_js : t -> Ojs.t = fun (x87 : Ojs.t) -> x87
    let (fd : t -> [ `L_n_2 ]) =
      fun (x89 : t) ->
        let x90 = Ojs.get_prop_ascii (t_to_js x89) "fd" in
        match Ojs.int_of_js x90 with | 2 -> `L_n_2 | _ -> assert false
    let (set_fd : t -> [ `L_n_2 ] -> unit) =
      fun (x91 : t) ->
        fun (x92 : [ `L_n_2 ]) ->
          Ojs.set_prop_ascii (t_to_js x91) "fd"
            (match x92 with | `L_n_2 -> Ojs.string_to_js "LN2")
  end
module AnonymousInterface6 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x94 : Ojs.t) -> x94
    and t_to_js : t -> Ojs.t = fun (x93 : Ojs.t) -> x93
    let (inspector : t -> bool) =
      fun (x95 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x95) "inspector")
    let (set_inspector : t -> bool -> unit) =
      fun (x96 : t) ->
        fun (x97 : bool) ->
          Ojs.set_prop_ascii (t_to_js x96) "inspector" (Ojs.bool_to_js x97)
    let (debug : t -> bool) =
      fun (x98 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x98) "debug")
    let (set_debug : t -> bool -> unit) =
      fun (x99 : t) ->
        fun (x100 : bool) ->
          Ojs.set_prop_ascii (t_to_js x99) "debug" (Ojs.bool_to_js x100)
    let (uv : t -> bool) =
      fun (x101 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x101) "uv")
    let (set_uv : t -> bool -> unit) =
      fun (x102 : t) ->
        fun (x103 : bool) ->
          Ojs.set_prop_ascii (t_to_js x102) "uv" (Ojs.bool_to_js x103)
    let (ipv6 : t -> bool) =
      fun (x104 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x104) "ipv6")
    let (set_ipv6 : t -> bool -> unit) =
      fun (x105 : t) ->
        fun (x106 : bool) ->
          Ojs.set_prop_ascii (t_to_js x105) "ipv6" (Ojs.bool_to_js x106)
    let (tls_alpn : t -> bool) =
      fun (x107 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x107) "tls_alpn")
    let (set_tls_alpn : t -> bool -> unit) =
      fun (x108 : t) ->
        fun (x109 : bool) ->
          Ojs.set_prop_ascii (t_to_js x108) "tls_alpn" (Ojs.bool_to_js x109)
    let (tls_sni : t -> bool) =
      fun (x110 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x110) "tls_sni")
    let (set_tls_sni : t -> bool -> unit) =
      fun (x111 : t) ->
        fun (x112 : bool) ->
          Ojs.set_prop_ascii (t_to_js x111) "tls_sni" (Ojs.bool_to_js x112)
    let (tls_ocsp : t -> bool) =
      fun (x113 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x113) "tls_ocsp")
    let (set_tls_ocsp : t -> bool -> unit) =
      fun (x114 : t) ->
        fun (x115 : bool) ->
          Ojs.set_prop_ascii (t_to_js x114) "tls_ocsp" (Ojs.bool_to_js x115)
    let (tls : t -> bool) =
      fun (x116 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x116) "tls")
    let (set_tls : t -> bool -> unit) =
      fun (x117 : t) ->
        fun (x118 : bool) ->
          Ojs.set_prop_ascii (t_to_js x117) "tls" (Ojs.bool_to_js x118)
  end
module AnonymousInterface7 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x120 : Ojs.t) -> x120
    and t_to_js : t -> Ojs.t = fun (x119 : Ojs.t) -> x119
    let (swallow_errors : t -> bool) =
      fun (x121 : t) ->
        Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x121) "swallowErrors")
    let (set_swallow_errors : t -> bool -> unit) =
      fun (x122 : t) ->
        fun (x123 : bool) ->
          Ojs.set_prop_ascii (t_to_js x122) "swallowErrors"
            (Ojs.bool_to_js x123)
  end
module AnonymousInterface8 =
  struct
    type t = Ojs.t
    let rec t_of_js : Ojs.t -> t = fun (x125 : Ojs.t) -> x125
    and t_to_js : t -> Ojs.t = fun (x124 : Ojs.t) -> x124
    let (tardefaults : t -> AnonymousInterface1.t) =
      fun (x126 : t) ->
        AnonymousInterface1.t_of_js
          (Ojs.get_prop_ascii (t_to_js x126) "tardefaults")
    let (set_tardefaults : t -> AnonymousInterface1.t -> unit) =
      fun (x127 : t) ->
        fun (x128 : AnonymousInterface1.t) ->
          Ojs.set_prop_ascii (t_to_js x127) "tardefaults"
            (AnonymousInterface1.t_to_js x128)
    let (variables : t -> AnonymousInterface2.t) =
      fun (x129 : t) ->
        AnonymousInterface2.t_of_js
          (Ojs.get_prop_ascii (t_to_js x129) "variables")
    let (set_variables : t -> AnonymousInterface2.t -> unit) =
      fun (x130 : t) ->
        fun (x131 : AnonymousInterface2.t) ->
          Ojs.set_prop_ascii (t_to_js x130) "variables"
            (AnonymousInterface2.t_to_js x131)
  end
module Process =
  struct
    open Node_tty
    module ReadStream = struct include struct include Tty.ReadStream end end
    module WriteStream =
      struct include struct include Tty.WriteStream end end
    module MemoryUsage =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x133 : Ojs.t) -> x133
        and t_to_js : t -> Ojs.t = fun (x132 : Ojs.t) -> x132
        let (rss : t -> int) =
          fun (x134 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x134) "rss")
        let (set_rss : t -> int -> unit) =
          fun (x135 : t) ->
            fun (x136 : int) ->
              Ojs.set_prop_ascii (t_to_js x135) "rss" (Ojs.int_to_js x136)
        let (heap_total : t -> int) =
          fun (x137 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x137) "heapTotal")
        let (set_heap_total : t -> int -> unit) =
          fun (x138 : t) ->
            fun (x139 : int) ->
              Ojs.set_prop_ascii (t_to_js x138) "heapTotal"
                (Ojs.int_to_js x139)
        let (heap_used : t -> int) =
          fun (x140 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x140) "heapUsed")
        let (set_heap_used : t -> int -> unit) =
          fun (x141 : t) ->
            fun (x142 : int) ->
              Ojs.set_prop_ascii (t_to_js x141) "heapUsed"
                (Ojs.int_to_js x142)
        let (external_ : t -> int) =
          fun (x143 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x143) "external")
        let (set_external : t -> int -> unit) =
          fun (x144 : t) ->
            fun (x145 : int) ->
              Ojs.set_prop_ascii (t_to_js x144) "external"
                (Ojs.int_to_js x145)
        let (array_buffers : t -> int) =
          fun (x146 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x146) "arrayBuffers")
        let (set_array_buffers : t -> int -> unit) =
          fun (x147 : t) ->
            fun (x148 : int) ->
              Ojs.set_prop_ascii (t_to_js x147) "arrayBuffers"
                (Ojs.int_to_js x148)
      end
    module CpuUsage =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x150 : Ojs.t) -> x150
        and t_to_js : t -> Ojs.t = fun (x149 : Ojs.t) -> x149
        let (user : t -> int) =
          fun (x151 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x151) "user")
        let (set_user : t -> int -> unit) =
          fun (x152 : t) ->
            fun (x153 : int) ->
              Ojs.set_prop_ascii (t_to_js x152) "user" (Ojs.int_to_js x153)
        let (system : t -> int) =
          fun (x154 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x154) "system")
        let (set_system : t -> int -> unit) =
          fun (x155 : t) ->
            fun (x156 : int) ->
              Ojs.set_prop_ascii (t_to_js x155) "system" (Ojs.int_to_js x156)
      end
    module ProcessRelease =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x158 : Ojs.t) -> x158
        and t_to_js : t -> Ojs.t = fun (x157 : Ojs.t) -> x157
        let (name : t -> string) =
          fun (x159 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x159) "name")
        let (set_name : t -> string -> unit) =
          fun (x160 : t) ->
            fun (x161 : string) ->
              Ojs.set_prop_ascii (t_to_js x160) "name"
                (Ojs.string_to_js x161)
        let (source_url : t -> string) =
          fun (x162 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x162) "sourceUrl")
        let (set_source_url : t -> string -> unit) =
          fun (x163 : t) ->
            fun (x164 : string) ->
              Ojs.set_prop_ascii (t_to_js x163) "sourceUrl"
                (Ojs.string_to_js x164)
        let (headers_url : t -> string) =
          fun (x165 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x165) "headersUrl")
        let (set_headers_url : t -> string -> unit) =
          fun (x166 : t) ->
            fun (x167 : string) ->
              Ojs.set_prop_ascii (t_to_js x166) "headersUrl"
                (Ojs.string_to_js x167)
        let (lib_url : t -> string) =
          fun (x168 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x168) "libUrl")
        let (set_lib_url : t -> string -> unit) =
          fun (x169 : t) ->
            fun (x170 : string) ->
              Ojs.set_prop_ascii (t_to_js x169) "libUrl"
                (Ojs.string_to_js x170)
        let (lts : t -> string) =
          fun (x171 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x171) "lts")
        let (set_lts : t -> string -> unit) =
          fun (x172 : t) ->
            fun (x173 : string) ->
              Ojs.set_prop_ascii (t_to_js x172) "lts" (Ojs.string_to_js x173)
      end
    module ProcessVersions =
      struct
        type t = string Dict.t
        let rec t_of_js : Ojs.t -> t =
          fun (x176 : Ojs.t) -> Dict.t_of_js Ojs.string_of_js x176
        and t_to_js : t -> Ojs.t =
          fun (x174 : string Dict.t) -> Dict.t_to_js Ojs.string_to_js x174
        let (http_parser : t -> string) =
          fun (x178 : t) ->
            Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x178) "http_parser")
        let (set_http_parser : t -> string -> unit) =
          fun (x179 : t) ->
            fun (x180 : string) ->
              Ojs.set_prop_ascii (t_to_js x179) "http_parser"
                (Ojs.string_to_js x180)
        let (node : t -> string) =
          fun (x181 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x181) "node")
        let (set_node : t -> string -> unit) =
          fun (x182 : t) ->
            fun (x183 : string) ->
              Ojs.set_prop_ascii (t_to_js x182) "node"
                (Ojs.string_to_js x183)
        let (v8 : t -> string) =
          fun (x184 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x184) "v8")
        let (set_v8 : t -> string -> unit) =
          fun (x185 : t) ->
            fun (x186 : string) ->
              Ojs.set_prop_ascii (t_to_js x185) "v8" (Ojs.string_to_js x186)
        let (ares : t -> string) =
          fun (x187 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x187) "ares")
        let (set_ares : t -> string -> unit) =
          fun (x188 : t) ->
            fun (x189 : string) ->
              Ojs.set_prop_ascii (t_to_js x188) "ares"
                (Ojs.string_to_js x189)
        let (uv : t -> string) =
          fun (x190 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x190) "uv")
        let (set_uv : t -> string -> unit) =
          fun (x191 : t) ->
            fun (x192 : string) ->
              Ojs.set_prop_ascii (t_to_js x191) "uv" (Ojs.string_to_js x192)
        let (zlib : t -> string) =
          fun (x193 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x193) "zlib")
        let (set_zlib : t -> string -> unit) =
          fun (x194 : t) ->
            fun (x195 : string) ->
              Ojs.set_prop_ascii (t_to_js x194) "zlib"
                (Ojs.string_to_js x195)
        let (modules : t -> string) =
          fun (x196 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x196) "modules")
        let (set_modules : t -> string -> unit) =
          fun (x197 : t) ->
            fun (x198 : string) ->
              Ojs.set_prop_ascii (t_to_js x197) "modules"
                (Ojs.string_to_js x198)
        let (openssl : t -> string) =
          fun (x199 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x199) "openssl")
        let (set_openssl : t -> string -> unit) =
          fun (x200 : t) ->
            fun (x201 : string) ->
              Ojs.set_prop_ascii (t_to_js x200) "openssl"
                (Ojs.string_to_js x201)
      end
    module Platform =
      struct
        type t =
          [ `aix  | `android  | `cygwin  | `darwin  | `freebsd  | `linux 
          | `netbsd  | `openbsd  | `sunos  | `win32 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x203 : Ojs.t) ->
            let x204 = x203 in
            match Ojs.string_of_js x204 with
            | "aix" -> `aix
            | "android" -> `android
            | "cygwin" -> `cygwin
            | "darwin" -> `darwin
            | "freebsd" -> `freebsd
            | "linux" -> `linux
            | "netbsd" -> `netbsd
            | "openbsd" -> `openbsd
            | "sunos" -> `sunos
            | "win32" -> `win32
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x202 :
              [ `aix  | `android  | `cygwin  | `darwin  | `freebsd  | 
                `linux 
              | `netbsd  | `openbsd  | `sunos  | `win32 ])
            ->
            match x202 with
            | `aix -> Ojs.string_to_js "aix"
            | `android -> Ojs.string_to_js "android"
            | `cygwin -> Ojs.string_to_js "cygwin"
            | `darwin -> Ojs.string_to_js "darwin"
            | `freebsd -> Ojs.string_to_js "freebsd"
            | `linux -> Ojs.string_to_js "linux"
            | `netbsd -> Ojs.string_to_js "netbsd"
            | `openbsd -> Ojs.string_to_js "openbsd"
            | `sunos -> Ojs.string_to_js "sunos"
            | `win32 -> Ojs.string_to_js "win32"
      end
    module Signals =
      struct
        type t =
          [ `SIGABRT  | `SIGALRM  | `SIGBREAK  | `SIGBUS  | `SIGCHLD 
          | `SIGCONT  | `SIGFPE  | `SIGHUP  | `SIGILL  | `SIGINFO  | 
            `SIGINT 
          | `SIGIO  | `SIGIOT  | `SIGKILL  | `SIGLOST  | `SIGPIPE 
          | `SIGPOLL  | `SIGPROF  | `SIGPWR  | `SIGQUIT  | `SIGSEGV 
          | `SIGSTKFLT  | `SIGSTOP  | `SIGSYS  | `SIGTERM  | `SIGTRAP 
          | `SIGTSTP  | `SIGTTIN  | `SIGTTOU  | `SIGUNUSED  | `SIGURG 
          | `SIGUSR1  | `SIGUSR2  | `SIGVTALRM  | `SIGWINCH  | `SIGXCPU 
          | `SIGXFSZ ]
        let rec t_of_js : Ojs.t -> t =
          fun (x206 : Ojs.t) ->
            let x207 = x206 in
            match Ojs.string_of_js x207 with
            | "SIGABRT" -> `SIGABRT
            | "SIGALRM" -> `SIGALRM
            | "SIGBREAK" -> `SIGBREAK
            | "SIGBUS" -> `SIGBUS
            | "SIGCHLD" -> `SIGCHLD
            | "SIGCONT" -> `SIGCONT
            | "SIGFPE" -> `SIGFPE
            | "SIGHUP" -> `SIGHUP
            | "SIGILL" -> `SIGILL
            | "SIGINFO" -> `SIGINFO
            | "SIGINT" -> `SIGINT
            | "SIGIO" -> `SIGIO
            | "SIGIOT" -> `SIGIOT
            | "SIGKILL" -> `SIGKILL
            | "SIGLOST" -> `SIGLOST
            | "SIGPIPE" -> `SIGPIPE
            | "SIGPOLL" -> `SIGPOLL
            | "SIGPROF" -> `SIGPROF
            | "SIGPWR" -> `SIGPWR
            | "SIGQUIT" -> `SIGQUIT
            | "SIGSEGV" -> `SIGSEGV
            | "SIGSTKFLT" -> `SIGSTKFLT
            | "SIGSTOP" -> `SIGSTOP
            | "SIGSYS" -> `SIGSYS
            | "SIGTERM" -> `SIGTERM
            | "SIGTRAP" -> `SIGTRAP
            | "SIGTSTP" -> `SIGTSTP
            | "SIGTTIN" -> `SIGTTIN
            | "SIGTTOU" -> `SIGTTOU
            | "SIGUNUSED" -> `SIGUNUSED
            | "SIGURG" -> `SIGURG
            | "SIGUSR1" -> `SIGUSR1
            | "SIGUSR2" -> `SIGUSR2
            | "SIGVTALRM" -> `SIGVTALRM
            | "SIGWINCH" -> `SIGWINCH
            | "SIGXCPU" -> `SIGXCPU
            | "SIGXFSZ" -> `SIGXFSZ
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun
            (x205 :
              [ `SIGABRT  | `SIGALRM  | `SIGBREAK  | `SIGBUS  | `SIGCHLD 
              | `SIGCONT  | `SIGFPE  | `SIGHUP  | `SIGILL  | `SIGINFO 
              | `SIGINT  | `SIGIO  | `SIGIOT  | `SIGKILL  | `SIGLOST 
              | `SIGPIPE  | `SIGPOLL  | `SIGPROF  | `SIGPWR  | `SIGQUIT 
              | `SIGSEGV  | `SIGSTKFLT  | `SIGSTOP  | `SIGSYS  | `SIGTERM 
              | `SIGTRAP  | `SIGTSTP  | `SIGTTIN  | `SIGTTOU  | `SIGUNUSED 
              | `SIGURG  | `SIGUSR1  | `SIGUSR2  | `SIGVTALRM  | `SIGWINCH 
              | `SIGXCPU  | `SIGXFSZ ])
            ->
            match x205 with
            | `SIGABRT -> Ojs.string_to_js "SIGABRT"
            | `SIGALRM -> Ojs.string_to_js "SIGALRM"
            | `SIGBREAK -> Ojs.string_to_js "SIGBREAK"
            | `SIGBUS -> Ojs.string_to_js "SIGBUS"
            | `SIGCHLD -> Ojs.string_to_js "SIGCHLD"
            | `SIGCONT -> Ojs.string_to_js "SIGCONT"
            | `SIGFPE -> Ojs.string_to_js "SIGFPE"
            | `SIGHUP -> Ojs.string_to_js "SIGHUP"
            | `SIGILL -> Ojs.string_to_js "SIGILL"
            | `SIGINFO -> Ojs.string_to_js "SIGINFO"
            | `SIGINT -> Ojs.string_to_js "SIGINT"
            | `SIGIO -> Ojs.string_to_js "SIGIO"
            | `SIGIOT -> Ojs.string_to_js "SIGIOT"
            | `SIGKILL -> Ojs.string_to_js "SIGKILL"
            | `SIGLOST -> Ojs.string_to_js "SIGLOST"
            | `SIGPIPE -> Ojs.string_to_js "SIGPIPE"
            | `SIGPOLL -> Ojs.string_to_js "SIGPOLL"
            | `SIGPROF -> Ojs.string_to_js "SIGPROF"
            | `SIGPWR -> Ojs.string_to_js "SIGPWR"
            | `SIGQUIT -> Ojs.string_to_js "SIGQUIT"
            | `SIGSEGV -> Ojs.string_to_js "SIGSEGV"
            | `SIGSTKFLT -> Ojs.string_to_js "SIGSTKFLT"
            | `SIGSTOP -> Ojs.string_to_js "SIGSTOP"
            | `SIGSYS -> Ojs.string_to_js "SIGSYS"
            | `SIGTERM -> Ojs.string_to_js "SIGTERM"
            | `SIGTRAP -> Ojs.string_to_js "SIGTRAP"
            | `SIGTSTP -> Ojs.string_to_js "SIGTSTP"
            | `SIGTTIN -> Ojs.string_to_js "SIGTTIN"
            | `SIGTTOU -> Ojs.string_to_js "SIGTTOU"
            | `SIGUNUSED -> Ojs.string_to_js "SIGUNUSED"
            | `SIGURG -> Ojs.string_to_js "SIGURG"
            | `SIGUSR1 -> Ojs.string_to_js "SIGUSR1"
            | `SIGUSR2 -> Ojs.string_to_js "SIGUSR2"
            | `SIGVTALRM -> Ojs.string_to_js "SIGVTALRM"
            | `SIGWINCH -> Ojs.string_to_js "SIGWINCH"
            | `SIGXCPU -> Ojs.string_to_js "SIGXCPU"
            | `SIGXFSZ -> Ojs.string_to_js "SIGXFSZ"
      end
    module MultipleResolvesType =
      struct
        type t = [ `reject  | `resolve ]
        let rec t_of_js : Ojs.t -> t =
          fun (x209 : Ojs.t) ->
            let x210 = x209 in
            match Ojs.string_of_js x210 with
            | "reject" -> `reject
            | "resolve" -> `resolve
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x208 : [ `reject  | `resolve ]) ->
            match x208 with
            | `reject -> Ojs.string_to_js "reject"
            | `resolve -> Ojs.string_to_js "resolve"
      end
    module BeforeExitListener =
      struct
        type t = code:int -> unit
        let rec t_of_js : Ojs.t -> t =
          fun (x213 : Ojs.t) ->
            fun ~code:(x214 : int) ->
              ignore (Ojs.apply x213 [|(Ojs.int_to_js x214)|])
        and t_to_js : t -> Ojs.t =
          fun (x211 : code:int -> unit) ->
            Ojs.fun_to_js 1
              (fun (x212 : Ojs.t) -> x211 ~code:(Ojs.int_of_js x212))
      end
    module DisconnectListener =
      struct
        type t = unit -> unit
        let rec t_of_js : Ojs.t -> t =
          fun (x216 : Ojs.t) -> fun () -> ignore (Ojs.apply x216 [||])
        and t_to_js : t -> Ojs.t =
          fun (x215 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x215 ())
      end
    module ExitListener =
      struct
        type t = code:int -> unit
        let rec t_of_js : Ojs.t -> t =
          fun (x219 : Ojs.t) ->
            fun ~code:(x220 : int) ->
              ignore (Ojs.apply x219 [|(Ojs.int_to_js x220)|])
        and t_to_js : t -> Ojs.t =
          fun (x217 : code:int -> unit) ->
            Ojs.fun_to_js 1
              (fun (x218 : Ojs.t) -> x217 ~code:(Ojs.int_of_js x218))
      end
    module RejectionHandledListener =
      struct
        type t = promise:any Promise.t -> unit
        let rec t_of_js : Ojs.t -> t =
          fun (x224 : Ojs.t) ->
            fun ~promise:(x225 : any Promise.t) ->
              ignore (Ojs.apply x224 [|(Promise.t_to_js any_to_js x225)|])
        and t_to_js : t -> Ojs.t =
          fun (x221 : promise:any Promise.t -> unit) ->
            Ojs.fun_to_js 1
              (fun (x222 : Ojs.t) ->
                 x221 ~promise:(Promise.t_of_js any_of_js x222))
      end
    module UncaughtExceptionListener =
      struct
        type t = error:Error.t -> unit
        let rec t_of_js : Ojs.t -> t =
          fun (x229 : Ojs.t) ->
            fun ~error:(x230 : Error.t) ->
              ignore (Ojs.apply x229 [|(Error.t_to_js x230)|])
        and t_to_js : t -> Ojs.t =
          fun (x227 : error:Error.t -> unit) ->
            Ojs.fun_to_js 1
              (fun (x228 : Ojs.t) -> x227 ~error:(Error.t_of_js x228))
      end
    module UnhandledRejectionListener =
      struct
        type t =
          reason:AnonymousInterface0.t or_null_or_undefined ->
            promise:any Promise.t -> unit
        let rec t_of_js : Ojs.t -> t =
          fun (x236 : Ojs.t) ->
            fun ~reason:(x237 : AnonymousInterface0.t or_null_or_undefined)
              ->
              fun ~promise:(x239 : any Promise.t) ->
                ignore
                  (Ojs.apply x236
                     [|(or_null_or_undefined_to_js
                          AnonymousInterface0.t_to_js x237);(Promise.t_to_js
                                                               any_to_js x239)|])
        and t_to_js : t -> Ojs.t =
          fun
            (x231 :
              reason:AnonymousInterface0.t or_null_or_undefined ->
                promise:any Promise.t -> unit)
            ->
            Ojs.fun_to_js 2
              (fun (x232 : Ojs.t) ->
                 fun (x234 : Ojs.t) ->
                   x231
                     ~reason:(or_null_or_undefined_of_js
                                AnonymousInterface0.t_of_js x232)
                     ~promise:(Promise.t_of_js any_of_js x234))
      end
    module WarningListener =
      struct
        type t = warning:Error.t -> unit
        let rec t_of_js : Ojs.t -> t =
          fun (x243 : Ojs.t) ->
            fun ~warning:(x244 : Error.t) ->
              ignore (Ojs.apply x243 [|(Error.t_to_js x244)|])
        and t_to_js : t -> Ojs.t =
          fun (x241 : warning:Error.t -> unit) ->
            Ojs.fun_to_js 1
              (fun (x242 : Ojs.t) -> x241 ~warning:(Error.t_of_js x242))
      end
    module MessageListener =
      struct
        type t = message:any -> send_handle:any -> unit
        let rec t_of_js : Ojs.t -> t =
          fun (x248 : Ojs.t) ->
            fun ~message:(x249 : any) ->
              fun ~send_handle:(x250 : any) ->
                ignore (Ojs.apply x248 [|(any_to_js x249);(any_to_js x250)|])
        and t_to_js : t -> Ojs.t =
          fun (x245 : message:any -> send_handle:any -> unit) ->
            Ojs.fun_to_js 2
              (fun (x246 : Ojs.t) ->
                 fun (x247 : Ojs.t) ->
                   x245 ~message:(any_of_js x246)
                     ~send_handle:(any_of_js x247))
      end
    module SignalsListener =
      struct
        type t = signal:Signals.t -> unit
        let rec t_of_js : Ojs.t -> t =
          fun (x253 : Ojs.t) ->
            fun ~signal:(x254 : Signals.t) ->
              ignore (Ojs.apply x253 [|(Signals.t_to_js x254)|])
        and t_to_js : t -> Ojs.t =
          fun (x251 : signal:Signals.t -> unit) ->
            Ojs.fun_to_js 1
              (fun (x252 : Ojs.t) -> x251 ~signal:(Signals.t_of_js x252))
      end
    module NewListenerListener =
      struct
        type t =
          type_:symbol or_string -> listener:(args:any list -> unit) -> unit
        let rec t_of_js : Ojs.t -> t =
          fun (x262 : Ojs.t) ->
            fun ~type_:(x263 : symbol or_string) ->
              fun ~listener:(x265 : args:any list -> unit) ->
                ignore
                  (Ojs.apply x262
                     [|(or_string_to_js symbol_to_js x263);(Ojs.fun_to_js_args
                                                              (fun (x266 : _)
                                                                 ->
                                                                 x265
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x266 0)))|])
        and t_to_js : t -> Ojs.t =
          fun
            (x255 :
              type_:symbol or_string ->
                listener:(args:any list -> unit) -> unit)
            ->
            Ojs.fun_to_js 2
              (fun (x256 : Ojs.t) ->
                 fun (x258 : Ojs.t) ->
                   x255 ~type_:(or_string_of_js symbol_of_js x256)
                     ~listener:(fun ~args:(x259 : any list) ->
                                  ignore
                                    (Ojs.call x258 "apply"
                                       [|Ojs.null;((let x260 =
                                                      Ojs.new_obj
                                                        (Ojs.get_prop_ascii
                                                           Ojs.global "Array")
                                                        [||] in
                                                    List.iter
                                                      (fun (x261 : any) ->
                                                         ignore
                                                           (Ojs.call x260
                                                              "push"
                                                              [|(any_to_js
                                                                   x261)|]))
                                                      x259;
                                                    x260))|])))
      end
    module RemoveListenerListener =
      struct
        type t =
          type_:symbol or_string -> listener:(args:any list -> unit) -> unit
        let rec t_of_js : Ojs.t -> t =
          fun (x275 : Ojs.t) ->
            fun ~type_:(x276 : symbol or_string) ->
              fun ~listener:(x278 : args:any list -> unit) ->
                ignore
                  (Ojs.apply x275
                     [|(or_string_to_js symbol_to_js x276);(Ojs.fun_to_js_args
                                                              (fun (x279 : _)
                                                                 ->
                                                                 x278
                                                                   ~args:(
                                                                   Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x279 0)))|])
        and t_to_js : t -> Ojs.t =
          fun
            (x268 :
              type_:symbol or_string ->
                listener:(args:any list -> unit) -> unit)
            ->
            Ojs.fun_to_js 2
              (fun (x269 : Ojs.t) ->
                 fun (x271 : Ojs.t) ->
                   x268 ~type_:(or_string_of_js symbol_of_js x269)
                     ~listener:(fun ~args:(x272 : any list) ->
                                  ignore
                                    (Ojs.call x271 "apply"
                                       [|Ojs.null;((let x273 =
                                                      Ojs.new_obj
                                                        (Ojs.get_prop_ascii
                                                           Ojs.global "Array")
                                                        [||] in
                                                    List.iter
                                                      (fun (x274 : any) ->
                                                         ignore
                                                           (Ojs.call x273
                                                              "push"
                                                              [|(any_to_js
                                                                   x274)|]))
                                                      x272;
                                                    x273))|])))
      end
    module MultipleResolvesListener =
      struct
        type t =
          type_:MultipleResolvesType.t ->
            promise:any Promise.t -> value:any -> unit
        let rec t_of_js : Ojs.t -> t =
          fun (x286 : Ojs.t) ->
            fun ~type_:(x287 : MultipleResolvesType.t) ->
              fun ~promise:(x288 : any Promise.t) ->
                fun ~value:(x290 : any) ->
                  ignore
                    (Ojs.apply x286
                       [|(MultipleResolvesType.t_to_js x287);(Promise.t_to_js
                                                                any_to_js
                                                                x288);(
                         any_to_js x290)|])
        and t_to_js : t -> Ojs.t =
          fun
            (x281 :
              type_:MultipleResolvesType.t ->
                promise:any Promise.t -> value:any -> unit)
            ->
            Ojs.fun_to_js 3
              (fun (x282 : Ojs.t) ->
                 fun (x283 : Ojs.t) ->
                   fun (x285 : Ojs.t) ->
                     x281 ~type_:(MultipleResolvesType.t_of_js x282)
                       ~promise:(Promise.t_of_js any_of_js x283)
                       ~value:(any_of_js x285))
      end
    type listener =
      [ `BeforeExit of BeforeExitListener.t 
      | `Disconnect of DisconnectListener.t  | `Exit of ExitListener.t 
      | `RejectionHandled of RejectionHandledListener.t 
      | `UncaughtException of UncaughtExceptionListener.t 
      | `UnhandledRejection of UnhandledRejectionListener.t 
      | `Warning of WarningListener.t  | `Message of MessageListener.t 
      | `NewListener of NewListenerListener.t 
      | `RemoveListener of RemoveListenerListener.t 
      | `MultipleResolves of MultipleResolvesListener.t ]
    let rec listener_to_js : listener -> Ojs.t =
      fun
        (x291 :
          [ `BeforeExit of BeforeExitListener.t 
          | `Disconnect of DisconnectListener.t  | `Exit of ExitListener.t 
          | `RejectionHandled of RejectionHandledListener.t 
          | `UncaughtException of UncaughtExceptionListener.t 
          | `UnhandledRejection of UnhandledRejectionListener.t 
          | `Warning of WarningListener.t  | `Message of MessageListener.t 
          | `NewListener of NewListenerListener.t 
          | `RemoveListener of RemoveListenerListener.t 
          | `MultipleResolves of MultipleResolvesListener.t ])
        ->
        match x291 with
        | `BeforeExit x292 -> BeforeExitListener.t_to_js x292
        | `Disconnect x293 -> DisconnectListener.t_to_js x293
        | `Exit x294 -> ExitListener.t_to_js x294
        | `RejectionHandled x295 -> RejectionHandledListener.t_to_js x295
        | `UncaughtException x296 -> UncaughtExceptionListener.t_to_js x296
        | `UnhandledRejection x297 -> UnhandledRejectionListener.t_to_js x297
        | `Warning x298 -> WarningListener.t_to_js x298
        | `Message x299 -> MessageListener.t_to_js x299
        | `NewListener x300 -> NewListenerListener.t_to_js x300
        | `RemoveListener x301 -> RemoveListenerListener.t_to_js x301
        | `MultipleResolves x302 -> MultipleResolvesListener.t_to_js x302
    module Socket =
      struct
        include struct include ReadWriteStream end
        let (is_tty : t -> [ `L_b_true ]) =
          fun (x305 : t) ->
            let x306 = Ojs.get_prop_ascii (t_to_js x305) "isTTY" in
            match Ojs.bool_of_js x306 with
            | true -> `L_b_true
            | _ -> assert false
        let (set_is_tty : t -> [ `L_b_true ] -> unit) =
          fun (x307 : t) ->
            fun (x308 : [ `L_b_true ]) ->
              Ojs.set_prop_ascii (t_to_js x307) "isTTY"
                (match x308 with | `L_b_true -> Ojs.string_to_js "LBTrue")
      end
    module ProcessEnv =
      struct
        type t = string Dict.t
        let rec t_of_js : Ojs.t -> t =
          fun (x311 : Ojs.t) -> Dict.t_of_js Ojs.string_of_js x311
        and t_to_js : t -> Ojs.t =
          fun (x309 : string Dict.t) -> Dict.t_to_js Ojs.string_to_js x309
      end
    module HRTime =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x314 : Ojs.t) -> x314
        and t_to_js : t -> Ojs.t = fun (x313 : Ojs.t) -> x313
        let (apply : t -> ?time:(int * int) -> unit -> (int * int)) =
          fun (x321 : t) ->
            fun ?time:(x315 : (int * int) option) ->
              fun () ->
                let x322 =
                  Ojs.call (t_to_js x321) "apply"
                    [|Ojs.null;((let x316 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x315 with
                                  | Some x317 ->
                                      ignore
                                        (Ojs.call x316 "push"
                                           [|((let (x318, x319) = x317 in
                                               let x320 = Ojs.array_make 2 in
                                               Ojs.array_set x320 0
                                                 (Ojs.int_to_js x318);
                                               Ojs.array_set x320 1
                                                 (Ojs.int_to_js x319);
                                               x320))|])
                                  | None -> ());
                                 x316))|] in
                ((Ojs.int_of_js (Ojs.array_get x322 0)),
                  (Ojs.int_of_js (Ojs.array_get x322 1)))
        let (bigint : t -> bigint) =
          fun (x323 : t) ->
            bigint_of_js (Ojs.call (t_to_js x323) "bigint" [||])
      end
    module ProcessReport =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x325 : Ojs.t) -> x325
        and t_to_js : t -> Ojs.t = fun (x324 : Ojs.t) -> x324
        let (directory : t -> string) =
          fun (x326 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x326) "directory")
        let (set_directory : t -> string -> unit) =
          fun (x327 : t) ->
            fun (x328 : string) ->
              Ojs.set_prop_ascii (t_to_js x327) "directory"
                (Ojs.string_to_js x328)
        let (filename : t -> string) =
          fun (x329 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x329) "filename")
        let (set_filename : t -> string -> unit) =
          fun (x330 : t) ->
            fun (x331 : string) ->
              Ojs.set_prop_ascii (t_to_js x330) "filename"
                (Ojs.string_to_js x331)
        let (get_report : t -> ?err:Error.t -> unit -> string) =
          fun (x335 : t) ->
            fun ?err:(x332 : Error.t option) ->
              fun () ->
                Ojs.string_of_js
                  (let x336 = t_to_js x335 in
                   Ojs.call (Ojs.get_prop_ascii x336 "getReport") "apply"
                     [|x336;((let x333 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x332 with
                               | Some x334 ->
                                   ignore
                                     (Ojs.call x333 "push"
                                        [|(Error.t_to_js x334)|])
                               | None -> ());
                              x333))|])
        let (report_on_fatal_error : t -> bool) =
          fun (x337 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x337) "reportOnFatalError")
        let (set_report_on_fatal_error : t -> bool -> unit) =
          fun (x338 : t) ->
            fun (x339 : bool) ->
              Ojs.set_prop_ascii (t_to_js x338) "reportOnFatalError"
                (Ojs.bool_to_js x339)
        let (report_on_signal : t -> bool) =
          fun (x340 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x340) "reportOnSignal")
        let (set_report_on_signal : t -> bool -> unit) =
          fun (x341 : t) ->
            fun (x342 : bool) ->
              Ojs.set_prop_ascii (t_to_js x341) "reportOnSignal"
                (Ojs.bool_to_js x342)
        let (report_on_uncaught_exception : t -> bool) =
          fun (x343 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x343) "reportOnUncaughtException")
        let (set_report_on_uncaught_exception : t -> bool -> unit) =
          fun (x344 : t) ->
            fun (x345 : bool) ->
              Ojs.set_prop_ascii (t_to_js x344) "reportOnUncaughtException"
                (Ojs.bool_to_js x345)
        let (signal : t -> Signals.t) =
          fun (x346 : t) ->
            Signals.t_of_js (Ojs.get_prop_ascii (t_to_js x346) "signal")
        let (set_signal : t -> Signals.t -> unit) =
          fun (x347 : t) ->
            fun (x348 : Signals.t) ->
              Ojs.set_prop_ascii (t_to_js x347) "signal"
                (Signals.t_to_js x348)
        let (write_report : t -> ?file_name:string -> unit -> string) =
          fun (x352 : t) ->
            fun ?file_name:(x349 : string option) ->
              fun () ->
                Ojs.string_of_js
                  (let x353 = t_to_js x352 in
                   Ojs.call (Ojs.get_prop_ascii x353 "writeReport") "apply"
                     [|x353;((let x350 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x349 with
                               | Some x351 ->
                                   ignore
                                     (Ojs.call x350 "push"
                                        [|(Ojs.string_to_js x351)|])
                               | None -> ());
                              x350))|])
        let (write_report' : t -> ?error:Error.t -> unit -> string) =
          fun (x357 : t) ->
            fun ?error:(x354 : Error.t option) ->
              fun () ->
                Ojs.string_of_js
                  (let x358 = t_to_js x357 in
                   Ojs.call (Ojs.get_prop_ascii x358 "writeReport") "apply"
                     [|x358;((let x355 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x354 with
                               | Some x356 ->
                                   ignore
                                     (Ojs.call x355 "push"
                                        [|(Error.t_to_js x356)|])
                               | None -> ());
                              x355))|])
        let (write_report'' :
          t -> ?file_name:string -> ?err:Error.t -> unit -> string) =
          fun (x364 : t) ->
            fun ?file_name:(x359 : string option) ->
              fun ?err:(x360 : Error.t option) ->
                fun () ->
                  Ojs.string_of_js
                    (let x365 = t_to_js x364 in
                     Ojs.call (Ojs.get_prop_ascii x365 "writeReport") "apply"
                       [|x365;((let x361 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                (match x359 with
                                 | Some x363 ->
                                     ignore
                                       (Ojs.call x361 "push"
                                          [|(Ojs.string_to_js x363)|])
                                 | None -> ());
                                (match x360 with
                                 | Some x362 ->
                                     ignore
                                       (Ojs.call x361 "push"
                                          [|(Error.t_to_js x362)|])
                                 | None -> ());
                                x361))|])
      end
    module ResourceUsage =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x367 : Ojs.t) -> x367
        and t_to_js : t -> Ojs.t = fun (x366 : Ojs.t) -> x366
        let (fs_read : t -> int) =
          fun (x368 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x368) "fsRead")
        let (set_fs_read : t -> int -> unit) =
          fun (x369 : t) ->
            fun (x370 : int) ->
              Ojs.set_prop_ascii (t_to_js x369) "fsRead" (Ojs.int_to_js x370)
        let (fs_write : t -> int) =
          fun (x371 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x371) "fsWrite")
        let (set_fs_write : t -> int -> unit) =
          fun (x372 : t) ->
            fun (x373 : int) ->
              Ojs.set_prop_ascii (t_to_js x372) "fsWrite"
                (Ojs.int_to_js x373)
        let (involuntary_context_switches : t -> int) =
          fun (x374 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x374) "involuntaryContextSwitches")
        let (set_involuntary_context_switches : t -> int -> unit) =
          fun (x375 : t) ->
            fun (x376 : int) ->
              Ojs.set_prop_ascii (t_to_js x375) "involuntaryContextSwitches"
                (Ojs.int_to_js x376)
        let (ipc_received : t -> int) =
          fun (x377 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x377) "ipcReceived")
        let (set_ipc_received : t -> int -> unit) =
          fun (x378 : t) ->
            fun (x379 : int) ->
              Ojs.set_prop_ascii (t_to_js x378) "ipcReceived"
                (Ojs.int_to_js x379)
        let (ipc_sent : t -> int) =
          fun (x380 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x380) "ipcSent")
        let (set_ipc_sent : t -> int -> unit) =
          fun (x381 : t) ->
            fun (x382 : int) ->
              Ojs.set_prop_ascii (t_to_js x381) "ipcSent"
                (Ojs.int_to_js x382)
        let (major_page_fault : t -> int) =
          fun (x383 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x383) "majorPageFault")
        let (set_major_page_fault : t -> int -> unit) =
          fun (x384 : t) ->
            fun (x385 : int) ->
              Ojs.set_prop_ascii (t_to_js x384) "majorPageFault"
                (Ojs.int_to_js x385)
        let (max_rss : t -> int) =
          fun (x386 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x386) "maxRSS")
        let (set_max_rss : t -> int -> unit) =
          fun (x387 : t) ->
            fun (x388 : int) ->
              Ojs.set_prop_ascii (t_to_js x387) "maxRSS" (Ojs.int_to_js x388)
        let (minor_page_fault : t -> int) =
          fun (x389 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x389) "minorPageFault")
        let (set_minor_page_fault : t -> int -> unit) =
          fun (x390 : t) ->
            fun (x391 : int) ->
              Ojs.set_prop_ascii (t_to_js x390) "minorPageFault"
                (Ojs.int_to_js x391)
        let (shared_memory_size : t -> int) =
          fun (x392 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x392) "sharedMemorySize")
        let (set_shared_memory_size : t -> int -> unit) =
          fun (x393 : t) ->
            fun (x394 : int) ->
              Ojs.set_prop_ascii (t_to_js x393) "sharedMemorySize"
                (Ojs.int_to_js x394)
        let (signals_count : t -> int) =
          fun (x395 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x395) "signalsCount")
        let (set_signals_count : t -> int -> unit) =
          fun (x396 : t) ->
            fun (x397 : int) ->
              Ojs.set_prop_ascii (t_to_js x396) "signalsCount"
                (Ojs.int_to_js x397)
        let (swapped_out : t -> int) =
          fun (x398 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x398) "swappedOut")
        let (set_swapped_out : t -> int -> unit) =
          fun (x399 : t) ->
            fun (x400 : int) ->
              Ojs.set_prop_ascii (t_to_js x399) "swappedOut"
                (Ojs.int_to_js x400)
        let (system_cpu_time : t -> int) =
          fun (x401 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x401) "systemCPUTime")
        let (set_system_cpu_time : t -> int -> unit) =
          fun (x402 : t) ->
            fun (x403 : int) ->
              Ojs.set_prop_ascii (t_to_js x402) "systemCPUTime"
                (Ojs.int_to_js x403)
        let (unshared_data_size : t -> int) =
          fun (x404 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x404) "unsharedDataSize")
        let (set_unshared_data_size : t -> int -> unit) =
          fun (x405 : t) ->
            fun (x406 : int) ->
              Ojs.set_prop_ascii (t_to_js x405) "unsharedDataSize"
                (Ojs.int_to_js x406)
        let (unshared_stack_size : t -> int) =
          fun (x407 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x407) "unsharedStackSize")
        let (set_unshared_stack_size : t -> int -> unit) =
          fun (x408 : t) ->
            fun (x409 : int) ->
              Ojs.set_prop_ascii (t_to_js x408) "unsharedStackSize"
                (Ojs.int_to_js x409)
        let (user_cpu_time : t -> int) =
          fun (x410 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x410) "userCPUTime")
        let (set_user_cpu_time : t -> int -> unit) =
          fun (x411 : t) ->
            fun (x412 : int) ->
              Ojs.set_prop_ascii (t_to_js x411) "userCPUTime"
                (Ojs.int_to_js x412)
        let (voluntary_context_switches : t -> int) =
          fun (x413 : t) ->
            Ojs.int_of_js
              (Ojs.get_prop_ascii (t_to_js x413) "voluntaryContextSwitches")
        let (set_voluntary_context_switches : t -> int -> unit) =
          fun (x414 : t) ->
            fun (x415 : int) ->
              Ojs.set_prop_ascii (t_to_js x414) "voluntaryContextSwitches"
                (Ojs.int_to_js x415)
      end
    module Process =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x417 : Ojs.t) -> x417
        and t_to_js : t -> Ojs.t = fun (x416 : Ojs.t) -> x416
        let (stdout : t -> WriteStream.t) =
          fun (x418 : t) ->
            WriteStream.t_of_js (Ojs.get_prop_ascii (t_to_js x418) "stdout")
        let (set_stdout : t -> WriteStream.t -> unit) =
          fun (x419 : t) ->
            fun (x420 : WriteStream.t) ->
              Ojs.set_prop_ascii (t_to_js x419) "stdout"
                (WriteStream.t_to_js x420)
        let (stderr : t -> WriteStream.t) =
          fun (x421 : t) ->
            WriteStream.t_of_js (Ojs.get_prop_ascii (t_to_js x421) "stderr")
        let (set_stderr : t -> WriteStream.t -> unit) =
          fun (x422 : t) ->
            fun (x423 : WriteStream.t) ->
              Ojs.set_prop_ascii (t_to_js x422) "stderr"
                (WriteStream.t_to_js x423)
        let (stdin : t -> ReadStream.t) =
          fun (x424 : t) ->
            ReadStream.t_of_js (Ojs.get_prop_ascii (t_to_js x424) "stdin")
        let (set_stdin : t -> ReadStream.t -> unit) =
          fun (x425 : t) ->
            fun (x426 : ReadStream.t) ->
              Ojs.set_prop_ascii (t_to_js x425) "stdin"
                (ReadStream.t_to_js x426)
        let (open_stdin : t -> Socket.t) =
          fun (x427 : t) ->
            Socket.t_of_js (Ojs.call (t_to_js x427) "openStdin" [||])
        let (argv : t -> string list) =
          fun (x428 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x428) "argv")
        let (set_argv : t -> string list -> unit) =
          fun (x430 : t) ->
            fun (x431 : string list) ->
              Ojs.set_prop_ascii (t_to_js x430) "argv"
                (Ojs.list_to_js Ojs.string_to_js x431)
        let (argv0 : t -> string) =
          fun (x433 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x433) "argv0")
        let (set_argv0 : t -> string -> unit) =
          fun (x434 : t) ->
            fun (x435 : string) ->
              Ojs.set_prop_ascii (t_to_js x434) "argv0"
                (Ojs.string_to_js x435)
        let (exec_argv : t -> string list) =
          fun (x436 : t) ->
            Ojs.list_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x436) "execArgv")
        let (set_exec_argv : t -> string list -> unit) =
          fun (x438 : t) ->
            fun (x439 : string list) ->
              Ojs.set_prop_ascii (t_to_js x438) "execArgv"
                (Ojs.list_to_js Ojs.string_to_js x439)
        let (exec_path : t -> string) =
          fun (x441 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x441) "execPath")
        let (set_exec_path : t -> string -> unit) =
          fun (x442 : t) ->
            fun (x443 : string) ->
              Ojs.set_prop_ascii (t_to_js x442) "execPath"
                (Ojs.string_to_js x443)
        let (abort : t -> never) =
          fun (x444 : t) ->
            never_of_js (Ojs.call (t_to_js x444) "abort" [||])
        let (chdir : t -> directory:string -> unit) =
          fun (x446 : t) ->
            fun ~directory:(x445 : string) ->
              ignore
                (Ojs.call (t_to_js x446) "chdir" [|(Ojs.string_to_js x445)|])
        let (cwd : t -> string) =
          fun (x447 : t) ->
            Ojs.string_of_js (Ojs.call (t_to_js x447) "cwd" [||])
        let (debug_port : t -> int) =
          fun (x448 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x448) "debugPort")
        let (set_debug_port : t -> int -> unit) =
          fun (x449 : t) ->
            fun (x450 : int) ->
              Ojs.set_prop_ascii (t_to_js x449) "debugPort"
                (Ojs.int_to_js x450)
        let (emit_warning :
          t ->
            event:[ `warning ] ->
              warning:Error.t or_string ->
                ?name:string -> ?ctor:untyped_function -> unit -> unit)
          =
          fun (x459 : t) ->
            fun ~event:(x451 : [ `warning ]) ->
              fun ~warning:(x452 : Error.t or_string) ->
                fun ?name:(x453 : string option) ->
                  fun ?ctor:(x454 : untyped_function option) ->
                    fun () ->
                      ignore
                        (let x460 = t_to_js x459 in
                         Ojs.call (Ojs.get_prop_ascii x460 "emitWarning")
                           "apply"
                           [|x460;((let x455 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x455 "push"
                                         [|((match x451 with
                                             | `warning ->
                                                 Ojs.string_to_js "warning"))|]);
                                    ignore
                                      (Ojs.call x455 "push"
                                         [|(or_string_to_js Error.t_to_js
                                              x452)|]);
                                    (match x453 with
                                     | Some x457 ->
                                         ignore
                                           (Ojs.call x455 "push"
                                              [|(Ojs.string_to_js x457)|])
                                     | None -> ());
                                    (match x454 with
                                     | Some x456 ->
                                         ignore
                                           (Ojs.call x455 "push"
                                              [|(untyped_function_to_js x456)|])
                                     | None -> ());
                                    x455))|])
        let (env : t -> ProcessEnv.t) =
          fun (x461 : t) ->
            ProcessEnv.t_of_js (Ojs.get_prop_ascii (t_to_js x461) "env")
        let (set_env : t -> ProcessEnv.t -> unit) =
          fun (x462 : t) ->
            fun (x463 : ProcessEnv.t) ->
              Ojs.set_prop_ascii (t_to_js x462) "env"
                (ProcessEnv.t_to_js x463)
        let (exit : t -> ?code:int -> unit -> never) =
          fun (x467 : t) ->
            fun ?code:(x464 : int option) ->
              fun () ->
                never_of_js
                  (let x468 = t_to_js x467 in
                   Ojs.call (Ojs.get_prop_ascii x468 "exit") "apply"
                     [|x468;((let x465 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x464 with
                               | Some x466 ->
                                   ignore
                                     (Ojs.call x465 "push"
                                        [|(Ojs.int_to_js x466)|])
                               | None -> ());
                              x465))|])
        let (exit_code : t -> int) =
          fun (x469 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x469) "exitCode")
        let (set_exit_code : t -> int -> unit) =
          fun (x470 : t) ->
            fun (x471 : int) ->
              Ojs.set_prop_ascii (t_to_js x470) "exitCode"
                (Ojs.int_to_js x471)
        let (getgid : t -> int) =
          fun (x472 : t) ->
            Ojs.int_of_js (Ojs.call (t_to_js x472) "getgid" [||])
        let (setgid : t -> id:string or_number -> unit) =
          fun (x475 : t) ->
            fun ~id:(x473 : string or_number) ->
              ignore
                (Ojs.call (t_to_js x475) "setgid"
                   [|(or_number_to_js Ojs.string_to_js x473)|])
        let (getuid : t -> int) =
          fun (x476 : t) ->
            Ojs.int_of_js (Ojs.call (t_to_js x476) "getuid" [||])
        let (setuid : t -> id:string or_number -> unit) =
          fun (x479 : t) ->
            fun ~id:(x477 : string or_number) ->
              ignore
                (Ojs.call (t_to_js x479) "setuid"
                   [|(or_number_to_js Ojs.string_to_js x477)|])
        let (geteuid : t -> int) =
          fun (x480 : t) ->
            Ojs.int_of_js (Ojs.call (t_to_js x480) "geteuid" [||])
        let (seteuid : t -> id:string or_number -> unit) =
          fun (x483 : t) ->
            fun ~id:(x481 : string or_number) ->
              ignore
                (Ojs.call (t_to_js x483) "seteuid"
                   [|(or_number_to_js Ojs.string_to_js x481)|])
        let (getegid : t -> int) =
          fun (x484 : t) ->
            Ojs.int_of_js (Ojs.call (t_to_js x484) "getegid" [||])
        let (setegid : t -> id:string or_number -> unit) =
          fun (x487 : t) ->
            fun ~id:(x485 : string or_number) ->
              ignore
                (Ojs.call (t_to_js x487) "setegid"
                   [|(or_number_to_js Ojs.string_to_js x485)|])
        let (getgroups : t -> int list) =
          fun (x488 : t) ->
            Ojs.list_of_js Ojs.int_of_js
              (Ojs.call (t_to_js x488) "getgroups" [||])
        let (setgroups : t -> groups:string or_number list -> unit) =
          fun (x493 : t) ->
            fun ~groups:(x490 : string or_number list) ->
              ignore
                (Ojs.call (t_to_js x493) "setgroups"
                   [|(Ojs.list_to_js
                        (fun (x491 : string or_number) ->
                           or_number_to_js Ojs.string_to_js x491) x490)|])
        let (set_uncaught_exception_capture_callback :
          t -> cb:(err:Error.t -> unit) or_null -> unit) =
          fun (x497 : t) ->
            fun ~cb:(x494 : (err:Error.t -> unit) or_null) ->
              ignore
                (Ojs.call (t_to_js x497)
                   "setUncaughtExceptionCaptureCallback"
                   [|(or_null_to_js
                        (fun (x495 : err:Error.t -> unit) ->
                           Ojs.fun_to_js 1
                             (fun (x496 : Ojs.t) ->
                                x495 ~err:(Error.t_of_js x496))) x494)|])
        let (has_uncaught_exception_capture_callback : t -> bool) =
          fun (x498 : t) ->
            Ojs.bool_of_js
              (Ojs.call (t_to_js x498) "hasUncaughtExceptionCaptureCallback"
                 [||])
        let (version : t -> string) =
          fun (x499 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x499) "version")
        let (set_version : t -> string -> unit) =
          fun (x500 : t) ->
            fun (x501 : string) ->
              Ojs.set_prop_ascii (t_to_js x500) "version"
                (Ojs.string_to_js x501)
        let (versions : t -> ProcessVersions.t) =
          fun (x502 : t) ->
            ProcessVersions.t_of_js
              (Ojs.get_prop_ascii (t_to_js x502) "versions")
        let (set_versions : t -> ProcessVersions.t -> unit) =
          fun (x503 : t) ->
            fun (x504 : ProcessVersions.t) ->
              Ojs.set_prop_ascii (t_to_js x503) "versions"
                (ProcessVersions.t_to_js x504)
        let (config : t -> AnonymousInterface8.t) =
          fun (x505 : t) ->
            AnonymousInterface8.t_of_js
              (Ojs.get_prop_ascii (t_to_js x505) "config")
        let (set_config : t -> AnonymousInterface8.t -> unit) =
          fun (x506 : t) ->
            fun (x507 : AnonymousInterface8.t) ->
              Ojs.set_prop_ascii (t_to_js x506) "config"
                (AnonymousInterface8.t_to_js x507)
        let (kill :
          t -> pid:int -> ?signal:string or_number -> unit -> [ `L_b_true ])
          =
          fun (x513 : t) ->
            fun ~pid:(x508 : int) ->
              fun ?signal:(x509 : string or_number option) ->
                fun () ->
                  let x515 =
                    let x514 = t_to_js x513 in
                    Ojs.call (Ojs.get_prop_ascii x514 "kill") "apply"
                      [|x514;((let x510 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x510 "push"
                                    [|(Ojs.int_to_js x508)|]);
                               (match x509 with
                                | Some x511 ->
                                    ignore
                                      (Ojs.call x510 "push"
                                         [|(or_number_to_js Ojs.string_to_js
                                              x511)|])
                                | None -> ());
                               x510))|] in
                  match Ojs.bool_of_js x515 with
                  | true -> `L_b_true
                  | _ -> assert false
        let (pid : t -> int) =
          fun (x516 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x516) "pid")
        let (set_pid : t -> int -> unit) =
          fun (x517 : t) ->
            fun (x518 : int) ->
              Ojs.set_prop_ascii (t_to_js x517) "pid" (Ojs.int_to_js x518)
        let (ppid : t -> int) =
          fun (x519 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x519) "ppid")
        let (set_ppid : t -> int -> unit) =
          fun (x520 : t) ->
            fun (x521 : int) ->
              Ojs.set_prop_ascii (t_to_js x520) "ppid" (Ojs.int_to_js x521)
        let (title : t -> string) =
          fun (x522 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x522) "title")
        let (set_title : t -> string -> unit) =
          fun (x523 : t) ->
            fun (x524 : string) ->
              Ojs.set_prop_ascii (t_to_js x523) "title"
                (Ojs.string_to_js x524)
        let (arch : t -> string) =
          fun (x525 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x525) "arch")
        let (set_arch : t -> string -> unit) =
          fun (x526 : t) ->
            fun (x527 : string) ->
              Ojs.set_prop_ascii (t_to_js x526) "arch"
                (Ojs.string_to_js x527)
        let (platform : t -> Platform.t) =
          fun (x528 : t) ->
            Platform.t_of_js (Ojs.get_prop_ascii (t_to_js x528) "platform")
        let (set_platform : t -> Platform.t -> unit) =
          fun (x529 : t) ->
            fun (x530 : Platform.t) ->
              Ojs.set_prop_ascii (t_to_js x529) "platform"
                (Platform.t_to_js x530)
        let (main_module : t -> Module.t) =
          fun (x531 : t) ->
            Module.t_of_js (Ojs.get_prop_ascii (t_to_js x531) "mainModule")
        let (set_main_module : t -> Module.t -> unit) =
          fun (x532 : t) ->
            fun (x533 : Module.t) ->
              Ojs.set_prop_ascii (t_to_js x532) "mainModule"
                (Module.t_to_js x533)
        let (memory_usage : t -> MemoryUsage.t) =
          fun (x534 : t) ->
            MemoryUsage.t_of_js (Ojs.call (t_to_js x534) "memoryUsage" [||])
        let (cpu_usage :
          t -> ?previous_value:CpuUsage.t -> unit -> CpuUsage.t) =
          fun (x538 : t) ->
            fun ?previous_value:(x535 : CpuUsage.t option) ->
              fun () ->
                CpuUsage.t_of_js
                  (let x539 = t_to_js x538 in
                   Ojs.call (Ojs.get_prop_ascii x539 "cpuUsage") "apply"
                     [|x539;((let x536 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x535 with
                               | Some x537 ->
                                   ignore
                                     (Ojs.call x536 "push"
                                        [|(CpuUsage.t_to_js x537)|])
                               | None -> ());
                              x536))|])
        let (next_tick :
          t -> callback:untyped_function -> args:any list -> unit) =
          fun (x544 : t) ->
            fun ~callback:(x540 : untyped_function) ->
              fun ~args:(x541 : any list) ->
                ignore
                  (let x545 = t_to_js x544 in
                   Ojs.call (Ojs.get_prop_ascii x545 "nextTick") "apply"
                     [|x545;((let x542 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x542 "push"
                                   [|(untyped_function_to_js x540)|]);
                              List.iter
                                (fun (x543 : any) ->
                                   ignore
                                     (Ojs.call x542 "push"
                                        [|(any_to_js x543)|])) x541;
                              x542))|])
        let (release : t -> ProcessRelease.t) =
          fun (x546 : t) ->
            ProcessRelease.t_of_js
              (Ojs.get_prop_ascii (t_to_js x546) "release")
        let (set_release : t -> ProcessRelease.t -> unit) =
          fun (x547 : t) ->
            fun (x548 : ProcessRelease.t) ->
              Ojs.set_prop_ascii (t_to_js x547) "release"
                (ProcessRelease.t_to_js x548)
        let (features : t -> AnonymousInterface6.t) =
          fun (x549 : t) ->
            AnonymousInterface6.t_of_js
              (Ojs.get_prop_ascii (t_to_js x549) "features")
        let (set_features : t -> AnonymousInterface6.t -> unit) =
          fun (x550 : t) ->
            fun (x551 : AnonymousInterface6.t) ->
              Ojs.set_prop_ascii (t_to_js x550) "features"
                (AnonymousInterface6.t_to_js x551)
        let (umask : t -> int) =
          fun (x552 : t) ->
            Ojs.int_of_js (Ojs.call (t_to_js x552) "umask" [||])
        let (umask' : t -> mask:string or_number -> int) =
          fun (x555 : t) ->
            fun ~mask:(x553 : string or_number) ->
              Ojs.int_of_js
                (Ojs.call (t_to_js x555) "umask"
                   [|(or_number_to_js Ojs.string_to_js x553)|])
        let (uptime : t -> int) =
          fun (x556 : t) ->
            Ojs.int_of_js (Ojs.call (t_to_js x556) "uptime" [||])
        let (hrtime : t -> HRTime.t) =
          fun (x557 : t) ->
            HRTime.t_of_js (Ojs.get_prop_ascii (t_to_js x557) "hrtime")
        let (set_hrtime : t -> HRTime.t -> unit) =
          fun (x558 : t) ->
            fun (x559 : HRTime.t) ->
              Ojs.set_prop_ascii (t_to_js x558) "hrtime"
                (HRTime.t_to_js x559)
        let (domain : t -> Node_domain.Domain.Domain.t) =
          fun (x560 : t) ->
            Node_domain.Domain.Domain.t_of_js
              (Ojs.get_prop_ascii (t_to_js x560) "domain")
        let (set_domain : t -> Node_domain.Domain.Domain.t -> unit) =
          fun (x561 : t) ->
            fun (x562 : Node_domain.Domain.Domain.t) ->
              Ojs.set_prop_ascii (t_to_js x561) "domain"
                (Node_domain.Domain.Domain.t_to_js x562)
        let (send :
          t ->
            message:any ->
              ?send_handle:any ->
                ?options:AnonymousInterface7.t ->
                  ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
          =
          fun (x573 : t) ->
            fun ~message:(x563 : any) ->
              fun ?send_handle:(x564 : any option) ->
                fun ?options:(x565 : AnonymousInterface7.t option) ->
                  fun
                    ?callback:(x566 : (error:Error.t or_null -> unit) option)
                    ->
                    fun () ->
                      Ojs.bool_of_js
                        (let x574 = t_to_js x573 in
                         Ojs.call (Ojs.get_prop_ascii x574 "send") "apply"
                           [|x574;((let x567 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x567 "push"
                                         [|(any_to_js x563)|]);
                                    (match x564 with
                                     | Some x572 ->
                                         ignore
                                           (Ojs.call x567 "push"
                                              [|(any_to_js x572)|])
                                     | None -> ());
                                    (match x565 with
                                     | Some x571 ->
                                         ignore
                                           (Ojs.call x567 "push"
                                              [|(AnonymousInterface7.t_to_js
                                                   x571)|])
                                     | None -> ());
                                    (match x566 with
                                     | Some x568 ->
                                         ignore
                                           (Ojs.call x567 "push"
                                              [|(Ojs.fun_to_js 1
                                                   (fun (x569 : Ojs.t) ->
                                                      x568
                                                        ~error:(or_null_of_js
                                                                  Error.t_of_js
                                                                  x569)))|])
                                     | None -> ());
                                    x567))|])
        let (disconnect : t -> unit) =
          fun (x575 : t) ->
            ignore (Ojs.call (t_to_js x575) "disconnect" [||])
        let (connected : t -> bool) =
          fun (x576 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x576) "connected")
        let (set_connected : t -> bool -> unit) =
          fun (x577 : t) ->
            fun (x578 : bool) ->
              Ojs.set_prop_ascii (t_to_js x577) "connected"
                (Ojs.bool_to_js x578)
        let (allowed_node_environment_flags : t -> string ReadonlySet.t) =
          fun (x579 : t) ->
            ReadonlySet.t_of_js Ojs.string_of_js
              (Ojs.get_prop_ascii (t_to_js x579)
                 "allowedNodeEnvironmentFlags")
        let (set_allowed_node_environment_flags :
          t -> string ReadonlySet.t -> unit) =
          fun (x581 : t) ->
            fun (x582 : string ReadonlySet.t) ->
              Ojs.set_prop_ascii (t_to_js x581) "allowedNodeEnvironmentFlags"
                (ReadonlySet.t_to_js Ojs.string_to_js x582)
        let (report : t -> ProcessReport.t) =
          fun (x584 : t) ->
            ProcessReport.t_of_js
              (Ojs.get_prop_ascii (t_to_js x584) "report")
        let (set_report : t -> ProcessReport.t -> unit) =
          fun (x585 : t) ->
            fun (x586 : ProcessReport.t) ->
              Ojs.set_prop_ascii (t_to_js x585) "report"
                (ProcessReport.t_to_js x586)
        let (resource_usage : t -> ResourceUsage.t) =
          fun (x587 : t) ->
            ResourceUsage.t_of_js
              (Ojs.call (t_to_js x587) "resourceUsage" [||])
        let (trace_deprecation : t -> bool) =
          fun (x588 : t) ->
            Ojs.bool_of_js
              (Ojs.get_prop_ascii (t_to_js x588) "traceDeprecation")
        let (set_trace_deprecation : t -> bool -> unit) =
          fun (x589 : t) ->
            fun (x590 : bool) ->
              Ojs.set_prop_ascii (t_to_js x589) "traceDeprecation"
                (Ojs.bool_to_js x590)
        let (on : t -> string -> Ojs.t -> unit) =
          fun (x593 : t) ->
            fun (x591 : string) ->
              fun (x592 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x593) "on"
                     [|(Ojs.string_to_js x591);x592|])
        let (add_listener : t -> string -> Ojs.t -> unit) =
          fun (x596 : t) ->
            fun (x594 : string) ->
              fun (x595 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x596) "addListener"
                     [|(Ojs.string_to_js x594);x595|])
        let (once : t -> string -> Ojs.t -> unit) =
          fun (x599 : t) ->
            fun (x597 : string) ->
              fun (x598 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x599) "once"
                     [|(Ojs.string_to_js x597);x598|])
        let (prepend_listener : t -> string -> Ojs.t -> unit) =
          fun (x602 : t) ->
            fun (x600 : string) ->
              fun (x601 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x602) "prependListener"
                     [|(Ojs.string_to_js x600);x601|])
        let (prepend_once_listener : t -> string -> Ojs.t -> unit) =
          fun (x605 : t) ->
            fun (x603 : string) ->
              fun (x604 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x605) "prependOnceListener"
                     [|(Ojs.string_to_js x603);x604|])
        let (listeners : t -> string -> Ojs.t list) =
          fun (x607 : t) ->
            fun (x606 : string) ->
              Ojs.list_of_js (fun (x608 : Ojs.t) -> x608)
                (Ojs.call (t_to_js x607) "listeners"
                   [|(Ojs.string_to_js x606)|])
        let with_listener_fn fn t =
          function
          | `BeforeExit f ->
              (fn t "beforeExit") @@ (BeforeExitListener.t_to_js f)
          | `Disconnect f ->
              (fn t "disconnect") @@ (DisconnectListener.t_to_js f)
          | `Exit f -> (fn t "exit") @@ (ExitListener.t_to_js f)
          | `RejectionHandled f ->
              (fn t "rejectionHandled") @@
                (RejectionHandledListener.t_to_js f)
          | `UncaughtException f ->
              (fn t "uncaughtException") @@
                (UncaughtExceptionListener.t_to_js f)
          | `UnhandledRejection f ->
              (fn t "unhandledRejection") @@
                (UnhandledRejectionListener.t_to_js f)
          | `Warning f -> (fn t "warning") @@ (WarningListener.t_to_js f)
          | `Message f -> (fn t "message") @@ (MessageListener.t_to_js f)
          | `NewListener f ->
              (fn t "newListener") @@ (NewListenerListener.t_to_js f)
          | `RemoveListener f ->
              (fn t "removeListener") @@ (RemoveListenerListener.t_to_js f)
          | `MultipleResolves f ->
              (fn t "multipleResolves") @@
                (MultipleResolvesListener.t_to_js f)
        let on = with_listener_fn on
        let add_listener = with_listener_fn add_listener
        let once = with_listener_fn once
        let prepend_listener = with_listener_fn prepend_listener
        let prepend_once_listener = with_listener_fn prepend_once_listener
        let listeners_before_exit t =
          (listeners t "beforeExit") |> (List.map BeforeExitListener.t_of_js)
        let listeners_disconnect t =
          (listeners t "disconnect") |> (List.map DisconnectListener.t_of_js)
        let listeners_exit t =
          (listeners t "exit") |> (List.map ExitListener.t_of_js)
        let listeners_rejection_handled t =
          (listeners t "rejectionHandled") |>
            (List.map RejectionHandledListener.t_of_js)
        let listeners_uncaught_exception t =
          (listeners t "uncaughtException") |>
            (List.map UncaughtExceptionListener.t_of_js)
        let listeners_uncaught_exception t =
          (listeners t "uncaughtException") |>
            (List.map UncaughtExceptionListener.t_of_js)
        let listeners_unhandled_rejection t =
          (listeners t "unhandledRejection") |>
            (List.map UnhandledRejectionListener.t_of_js)
        let listeners_warning t =
          (listeners t "warning") |> (List.map WarningListener.t_of_js)
        let listeners_message t =
          (listeners t "message") |> (List.map MessageListener.t_of_js)
        let listeners_signals t =
          (listeners t "signals") |> (List.map SignalsListener.t_of_js)
        let listeners_new_listener t =
          (listeners t "newListener") |>
            (List.map NewListenerListener.t_of_js)
        let listeners_remove_listener t =
          (listeners t "removeListener") |>
            (List.map RemoveListenerListener.t_of_js)
        let listeners_multiple_resolves t =
          (listeners t "multipleResolves") |>
            (List.map MultipleResolvesListener.t_of_js)
        let (emit_before_exit :
          t -> event:[ `beforeExit ] -> code:int -> bool) =
          fun (x622 : t) ->
            fun ~event:(x620 : [ `beforeExit ]) ->
              fun ~code:(x621 : int) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x622) "emit"
                     [|((match x620 with
                         | `beforeExit -> Ojs.string_to_js "beforeExit"));(
                       Ojs.int_to_js x621)|])
        let (emit_disconnect : t -> event:[ `disconnect ] -> bool) =
          fun (x624 : t) ->
            fun ~event:(x623 : [ `disconnect ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x624) "emit"
                   [|((match x623 with
                       | `disconnect -> Ojs.string_to_js "disconnect"))|])
        let (emit_exit : t -> event:[ `exit ] -> code:int -> bool) =
          fun (x627 : t) ->
            fun ~event:(x625 : [ `exit ]) ->
              fun ~code:(x626 : int) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x627) "emit"
                     [|((match x625 with | `exit -> Ojs.string_to_js "exit"));(
                       Ojs.int_to_js x626)|])
        let (emit_rejection_handled :
          t -> event:[ `rejectionHandled ] -> promise:any Promise.t -> bool)
          =
          fun (x631 : t) ->
            fun ~event:(x628 : [ `rejectionHandled ]) ->
              fun ~promise:(x629 : any Promise.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x631) "emit"
                     [|((match x628 with
                         | `rejectionHandled ->
                             Ojs.string_to_js "rejectionHandled"));(Promise.t_to_js
                                                                    any_to_js
                                                                    x629)|])
        let (emit_uncaught_exception :
          t -> event:[ `uncaughtException ] -> error:Error.t -> bool) =
          fun (x634 : t) ->
            fun ~event:(x632 : [ `uncaughtException ]) ->
              fun ~error:(x633 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x634) "emit"
                     [|((match x632 with
                         | `uncaughtException ->
                             Ojs.string_to_js "uncaughtException"));(
                       Error.t_to_js x633)|])
        let (emit_uncaught_exception_monitor :
          t -> event:[ `uncaughtExceptionMonitor ] -> error:Error.t -> bool)
          =
          fun (x637 : t) ->
            fun ~event:(x635 : [ `uncaughtExceptionMonitor ]) ->
              fun ~error:(x636 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x637) "emit"
                     [|((match x635 with
                         | `uncaughtExceptionMonitor ->
                             Ojs.string_to_js "uncaughtExceptionMonitor"));(
                       Error.t_to_js x636)|])
        let (emit_unhandled_rejection :
          t ->
            event:[ `unhandledRejection ] ->
              reason:any -> promise:any Promise.t -> bool)
          =
          fun (x642 : t) ->
            fun ~event:(x638 : [ `unhandledRejection ]) ->
              fun ~reason:(x639 : any) ->
                fun ~promise:(x640 : any Promise.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x642) "emit"
                       [|((match x638 with
                           | `unhandledRejection ->
                               Ojs.string_to_js "unhandledRejection"));(
                         any_to_js x639);(Promise.t_to_js any_to_js x640)|])
        let (emit_warning :
          t -> event:[ `warning ] -> warning:Error.t -> bool) =
          fun (x645 : t) ->
            fun ~event:(x643 : [ `warning ]) ->
              fun ~warning:(x644 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x645) "emit"
                     [|((match x643 with
                         | `warning -> Ojs.string_to_js "warning"));(
                       Error.t_to_js x644)|])
        let (emit_message :
          t -> event:[ `message ] -> message:any -> send_handle:any -> t) =
          fun (x649 : t) ->
            fun ~event:(x646 : [ `message ]) ->
              fun ~message:(x647 : any) ->
                fun ~send_handle:(x648 : any) ->
                  t_of_js
                    (Ojs.call (t_to_js x649) "emit"
                       [|((match x646 with
                           | `message -> Ojs.string_to_js "message"));(
                         any_to_js x647);(any_to_js x648)|])
        let (emit_new_listener :
          t ->
            event:[ `newListener ] ->
              event_name:symbol or_string ->
                listener:(args:any list -> unit) -> t)
          =
          fun (x656 : t) ->
            fun ~event:(x650 : [ `newListener ]) ->
              fun ~event_name:(x651 : symbol or_string) ->
                fun ~listener:(x653 : args:any list -> unit) ->
                  t_of_js
                    (Ojs.call (t_to_js x656) "emit"
                       [|((match x650 with
                           | `newListener -> Ojs.string_to_js "newListener"));(
                         or_string_to_js symbol_to_js x651);(Ojs.fun_to_js_args
                                                               (fun
                                                                  (x654 : _)
                                                                  ->
                                                                  x653
                                                                    ~args:(
                                                                    Ojs.list_of_js_from
                                                                    any_of_js
                                                                    x654 0)))|])
        let (emit_remove_listener :
          t ->
            event:[ `removeListener ] ->
              event_name:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x662 : t) ->
            fun ~event:(x657 : [ `removeListener ]) ->
              fun ~event_name:(x658 : string) ->
                fun ~listener:(x659 : args:any list -> unit) ->
                  t_of_js
                    (Ojs.call (t_to_js x662) "emit"
                       [|((match x657 with
                           | `removeListener ->
                               Ojs.string_to_js "removeListener"));(Ojs.string_to_js
                                                                    x658);(
                         Ojs.fun_to_js_args
                           (fun (x660 : _) ->
                              x659
                                ~args:(Ojs.list_of_js_from any_of_js x660 0)))|])
        let (emit_multiple_resolves :
          t ->
            event:[ `multipleResolves ] ->
              listener:MultipleResolvesListener.t -> t)
          =
          fun (x665 : t) ->
            fun ~event:(x663 : [ `multipleResolves ]) ->
              fun ~listener:(x664 : MultipleResolvesListener.t) ->
                t_of_js
                  (Ojs.call (t_to_js x665) "emit"
                     [|((match x663 with
                         | `multipleResolves ->
                             Ojs.string_to_js "multipleResolves"));(MultipleResolvesListener.t_to_js
                                                                    x664)|])
      end
    let (stdout : WriteStream.t) =
      WriteStream.t_of_js (Ojs.get_prop_ascii Import.process "stdout")
    let (set_stdout : WriteStream.t -> unit) =
      fun (x666 : WriteStream.t) ->
        ignore
          (Ojs.call Import.process "stdout" [|(WriteStream.t_to_js x666)|])
    let (stderr : WriteStream.t) =
      WriteStream.t_of_js (Ojs.get_prop_ascii Import.process "stderr")
    let (set_stderr : WriteStream.t -> unit) =
      fun (x667 : WriteStream.t) ->
        ignore
          (Ojs.call Import.process "stderr" [|(WriteStream.t_to_js x667)|])
    let (stdin : ReadStream.t) =
      ReadStream.t_of_js (Ojs.get_prop_ascii Import.process "stdin")
    let (set_stdin : ReadStream.t -> unit) =
      fun (x668 : ReadStream.t) ->
        ignore
          (Ojs.call Import.process "stdin" [|(ReadStream.t_to_js x668)|])
    let (open_stdin : Socket.t) =
      Socket.t_of_js (Ojs.get_prop_ascii Import.process "openStdin")
    let (argv : string list) =
      Ojs.list_of_js Ojs.string_of_js
        (Ojs.get_prop_ascii Import.process "argv")
    let (set_argv : string list -> unit) =
      fun (x670 : string list) ->
        ignore
          (Ojs.call Import.process "argv"
             [|(Ojs.list_to_js Ojs.string_to_js x670)|])
    let (argv0 : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.process "argv0")
    let (set_argv0 : string -> unit) =
      fun (x672 : string) ->
        ignore (Ojs.call Import.process "argv0" [|(Ojs.string_to_js x672)|])
    let (exec_argv : string list) =
      Ojs.list_of_js Ojs.string_of_js
        (Ojs.get_prop_ascii Import.process "execArgv")
    let (set_exec_argv : string list -> unit) =
      fun (x674 : string list) ->
        ignore
          (Ojs.call Import.process "execArgv"
             [|(Ojs.list_to_js Ojs.string_to_js x674)|])
    let (exec_path : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.process "execPath")
    let (set_exec_path : string -> unit) =
      fun (x676 : string) ->
        ignore
          (Ojs.call Import.process "execPath" [|(Ojs.string_to_js x676)|])
    let (abort : never) =
      never_of_js (Ojs.get_prop_ascii Import.process "abort")
    let (chdir : directory:string -> unit) =
      fun ~directory:(x677 : string) ->
        ignore (Ojs.call Import.process "chdir" [|(Ojs.string_to_js x677)|])
    let (cwd : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.process "cwd")
    let (debug_port : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.process "debugPort")
    let (set_debug_port : int -> unit) =
      fun (x678 : int) ->
        ignore (Ojs.call Import.process "debugPort" [|(Ojs.int_to_js x678)|])
    let (emit_warning :
      warning:Error.t or_string ->
        ?name:string -> ?ctor:untyped_function -> unit -> unit)
      =
      fun ~warning:(x679 : Error.t or_string) ->
        fun ?name:(x680 : string option) ->
          fun ?ctor:(x681 : untyped_function option) ->
            fun () ->
              ignore
                (let x686 = Import.process in
                 Ojs.call (Ojs.get_prop_ascii x686 "emitWarning") "apply"
                   [|x686;((let x682 =
                              Ojs.new_obj
                                (Ojs.get_prop_ascii Ojs.global "Array") 
                                [||] in
                            ignore
                              (Ojs.call x682 "push"
                                 [|(or_string_to_js Error.t_to_js x679)|]);
                            (match x680 with
                             | Some x684 ->
                                 ignore
                                   (Ojs.call x682 "push"
                                      [|(Ojs.string_to_js x684)|])
                             | None -> ());
                            (match x681 with
                             | Some x683 ->
                                 ignore
                                   (Ojs.call x682 "push"
                                      [|(untyped_function_to_js x683)|])
                             | None -> ());
                            x682))|])
    let (env : ProcessEnv.t) =
      ProcessEnv.t_of_js (Ojs.get_prop_ascii Import.process "env")
    let (set_env : ProcessEnv.t -> unit) =
      fun (x687 : ProcessEnv.t) ->
        ignore (Ojs.call Import.process "env" [|(ProcessEnv.t_to_js x687)|])
    let (exit : ?code:int -> unit -> never) =
      fun ?code:(x688 : int option) ->
        fun () ->
          never_of_js
            (let x691 = Import.process in
             Ojs.call (Ojs.get_prop_ascii x691 "exit") "apply"
               [|x691;((let x689 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x688 with
                         | Some x690 ->
                             ignore
                               (Ojs.call x689 "push" [|(Ojs.int_to_js x690)|])
                         | None -> ());
                        x689))|])
    let (exit_code : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.process "exitCode")
    let (set_exit_code : int -> unit) =
      fun (x692 : int) ->
        ignore (Ojs.call Import.process "exitCode" [|(Ojs.int_to_js x692)|])
    let (getgid : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.process "getgid")
    let (setgid : id:string or_number -> unit) =
      fun ~id:(x693 : string or_number) ->
        ignore
          (Ojs.call Import.process "setgid"
             [|(or_number_to_js Ojs.string_to_js x693)|])
    let (getuid : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.process "getuid")
    let (setuid : id:string or_number -> unit) =
      fun ~id:(x695 : string or_number) ->
        ignore
          (Ojs.call Import.process "setuid"
             [|(or_number_to_js Ojs.string_to_js x695)|])
    let (geteuid : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.process "geteuid")
    let (seteuid : id:string or_number -> unit) =
      fun ~id:(x697 : string or_number) ->
        ignore
          (Ojs.call Import.process "seteuid"
             [|(or_number_to_js Ojs.string_to_js x697)|])
    let (getegid : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.process "getegid")
    let (setegid : id:string or_number -> unit) =
      fun ~id:(x699 : string or_number) ->
        ignore
          (Ojs.call Import.process "setegid"
             [|(or_number_to_js Ojs.string_to_js x699)|])
    let (getgroups : int list) =
      Ojs.list_of_js Ojs.int_of_js
        (Ojs.get_prop_ascii Import.process "getgroups")
    let (setgroups : groups:string or_number list -> unit) =
      fun ~groups:(x702 : string or_number list) ->
        ignore
          (Ojs.call Import.process "setgroups"
             [|(Ojs.list_to_js
                  (fun (x703 : string or_number) ->
                     or_number_to_js Ojs.string_to_js x703) x702)|])
    let (set_uncaught_exception_capture_callback :
      cb:(err:Error.t -> unit) or_null -> unit) =
      fun ~cb:(x705 : (err:Error.t -> unit) or_null) ->
        ignore
          (Ojs.call Import.process "setUncaughtExceptionCaptureCallback"
             [|(or_null_to_js
                  (fun (x706 : err:Error.t -> unit) ->
                     Ojs.fun_to_js 1
                       (fun (x707 : Ojs.t) -> x706 ~err:(Error.t_of_js x707)))
                  x705)|])
    let (has_uncaught_exception_capture_callback : bool) =
      Ojs.bool_of_js
        (Ojs.get_prop_ascii Import.process
           "hasUncaughtExceptionCaptureCallback")
    let (version : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.process "version")
    let (set_version : string -> unit) =
      fun (x708 : string) ->
        ignore
          (Ojs.call Import.process "version" [|(Ojs.string_to_js x708)|])
    let (versions : ProcessVersions.t) =
      ProcessVersions.t_of_js (Ojs.get_prop_ascii Import.process "versions")
    let (set_versions : ProcessVersions.t -> unit) =
      fun (x709 : ProcessVersions.t) ->
        ignore
          (Ojs.call Import.process "versions"
             [|(ProcessVersions.t_to_js x709)|])
    let (config : AnonymousInterface8.t) =
      AnonymousInterface8.t_of_js
        (Ojs.get_prop_ascii Import.process "config")
    let (set_config : AnonymousInterface8.t -> unit) =
      fun (x710 : AnonymousInterface8.t) ->
        ignore
          (Ojs.call Import.process "config"
             [|(AnonymousInterface8.t_to_js x710)|])
    let (kill : pid:int -> ?signal:string or_number -> unit -> [ `L_b_true ])
      =
      fun ~pid:(x711 : int) ->
        fun ?signal:(x712 : string or_number option) ->
          fun () ->
            let x717 =
              let x716 = Import.process in
              Ojs.call (Ojs.get_prop_ascii x716 "kill") "apply"
                [|x716;((let x713 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         ignore
                           (Ojs.call x713 "push" [|(Ojs.int_to_js x711)|]);
                         (match x712 with
                          | Some x714 ->
                              ignore
                                (Ojs.call x713 "push"
                                   [|(or_number_to_js Ojs.string_to_js x714)|])
                          | None -> ());
                         x713))|] in
            match Ojs.bool_of_js x717 with
            | true -> `L_b_true
            | _ -> assert false
    let (pid : int) = Ojs.int_of_js (Ojs.get_prop_ascii Import.process "pid")
    let (set_pid : int -> unit) =
      fun (x718 : int) ->
        ignore (Ojs.call Import.process "pid" [|(Ojs.int_to_js x718)|])
    let (ppid : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.process "ppid")
    let (set_ppid : int -> unit) =
      fun (x719 : int) ->
        ignore (Ojs.call Import.process "ppid" [|(Ojs.int_to_js x719)|])
    let (title : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.process "title")
    let (set_title : string -> unit) =
      fun (x720 : string) ->
        ignore (Ojs.call Import.process "title" [|(Ojs.string_to_js x720)|])
    let (arch : string) =
      Ojs.string_of_js (Ojs.get_prop_ascii Import.process "arch")
    let (set_arch : string -> unit) =
      fun (x721 : string) ->
        ignore (Ojs.call Import.process "arch" [|(Ojs.string_to_js x721)|])
    let (platform : Platform.t) =
      Platform.t_of_js (Ojs.get_prop_ascii Import.process "platform")
    let (set_platform : Platform.t -> unit) =
      fun (x722 : Platform.t) ->
        ignore
          (Ojs.call Import.process "platform" [|(Platform.t_to_js x722)|])
    let (main_module : Module.t) =
      Module.t_of_js (Ojs.get_prop_ascii Import.process "mainModule")
    let (set_main_module : Module.t -> unit) =
      fun (x723 : Module.t) ->
        ignore
          (Ojs.call Import.process "mainModule" [|(Module.t_to_js x723)|])
    let (memory_usage : MemoryUsage.t) =
      MemoryUsage.t_of_js (Ojs.get_prop_ascii Import.process "memoryUsage")
    let (cpu_usage : ?previous_value:CpuUsage.t -> unit -> CpuUsage.t) =
      fun ?previous_value:(x724 : CpuUsage.t option) ->
        fun () ->
          CpuUsage.t_of_js
            (let x727 = Import.process in
             Ojs.call (Ojs.get_prop_ascii x727 "cpuUsage") "apply"
               [|x727;((let x725 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        (match x724 with
                         | Some x726 ->
                             ignore
                               (Ojs.call x725 "push"
                                  [|(CpuUsage.t_to_js x726)|])
                         | None -> ());
                        x725))|])
    let (next_tick : callback:untyped_function -> args:any list -> unit) =
      fun ~callback:(x728 : untyped_function) ->
        fun ~args:(x729 : any list) ->
          ignore
            (let x732 = Import.process in
             Ojs.call (Ojs.get_prop_ascii x732 "nextTick") "apply"
               [|x732;((let x730 =
                          Ojs.new_obj (Ojs.get_prop_ascii Ojs.global "Array")
                            [||] in
                        ignore
                          (Ojs.call x730 "push"
                             [|(untyped_function_to_js x728)|]);
                        List.iter
                          (fun (x731 : any) ->
                             ignore
                               (Ojs.call x730 "push" [|(any_to_js x731)|]))
                          x729;
                        x730))|])
    let (release : ProcessRelease.t) =
      ProcessRelease.t_of_js (Ojs.get_prop_ascii Import.process "release")
    let (set_release : ProcessRelease.t -> unit) =
      fun (x733 : ProcessRelease.t) ->
        ignore
          (Ojs.call Import.process "release"
             [|(ProcessRelease.t_to_js x733)|])
    let (features : AnonymousInterface6.t) =
      AnonymousInterface6.t_of_js
        (Ojs.get_prop_ascii Import.process "features")
    let (set_features : AnonymousInterface6.t -> unit) =
      fun (x734 : AnonymousInterface6.t) ->
        ignore
          (Ojs.call Import.process "features"
             [|(AnonymousInterface6.t_to_js x734)|])
    let (umask : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.process "umask")
    let (umask' : mask:string or_number -> int) =
      fun ~mask:(x735 : string or_number) ->
        Ojs.int_of_js
          (Ojs.call Import.process "umask"
             [|(or_number_to_js Ojs.string_to_js x735)|])
    let (uptime : int) =
      Ojs.int_of_js (Ojs.get_prop_ascii Import.process "uptime")
    let (hrtime : HRTime.t) =
      HRTime.t_of_js (Ojs.get_prop_ascii Import.process "hrtime")
    let (set_hrtime : HRTime.t -> unit) =
      fun (x737 : HRTime.t) ->
        ignore (Ojs.call Import.process "hrtime" [|(HRTime.t_to_js x737)|])
    let (domain : Node_domain.Domain.Domain.t) =
      Node_domain.Domain.Domain.t_of_js
        (Ojs.get_prop_ascii Import.process "domain")
    let (set_domain : Node_domain.Domain.Domain.t -> unit) =
      fun (x738 : Node_domain.Domain.Domain.t) ->
        ignore
          (Ojs.call Import.process "domain"
             [|(Node_domain.Domain.Domain.t_to_js x738)|])
    let (send :
      message:any ->
        ?send_handle:any ->
          ?options:AnonymousInterface7.t ->
            ?callback:(error:Error.t or_null -> unit) -> unit -> bool)
      =
      fun ~message:(x739 : any) ->
        fun ?send_handle:(x740 : any option) ->
          fun ?options:(x741 : AnonymousInterface7.t option) ->
            fun ?callback:(x742 : (error:Error.t or_null -> unit) option) ->
              fun () ->
                Ojs.bool_of_js
                  (let x749 = Import.process in
                   Ojs.call (Ojs.get_prop_ascii x749 "send") "apply"
                     [|x749;((let x743 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x743 "push" [|(any_to_js x739)|]);
                              (match x740 with
                               | Some x748 ->
                                   ignore
                                     (Ojs.call x743 "push"
                                        [|(any_to_js x748)|])
                               | None -> ());
                              (match x741 with
                               | Some x747 ->
                                   ignore
                                     (Ojs.call x743 "push"
                                        [|(AnonymousInterface7.t_to_js x747)|])
                               | None -> ());
                              (match x742 with
                               | Some x744 ->
                                   ignore
                                     (Ojs.call x743 "push"
                                        [|(Ojs.fun_to_js 1
                                             (fun (x745 : Ojs.t) ->
                                                x744
                                                  ~error:(or_null_of_js
                                                            Error.t_of_js
                                                            x745)))|])
                               | None -> ());
                              x743))|])
    let (disconnect : unit) =
      Ojs.unit_of_js (Ojs.get_prop_ascii Import.process "disconnect")
    let (connected : bool) =
      Ojs.bool_of_js (Ojs.get_prop_ascii Import.process "connected")
    let (set_connected : bool -> unit) =
      fun (x750 : bool) ->
        ignore
          (Ojs.call Import.process "connected" [|(Ojs.bool_to_js x750)|])
    let (allowed_node_environment_flags : string ReadonlySet.t) =
      ReadonlySet.t_of_js Ojs.string_of_js
        (Ojs.get_prop_ascii Import.process "allowedNodeEnvironmentFlags")
    let (set_allowed_node_environment_flags : string ReadonlySet.t -> unit) =
      fun (x752 : string ReadonlySet.t) ->
        ignore
          (Ojs.call Import.process "allowedNodeEnvironmentFlags"
             [|(ReadonlySet.t_to_js Ojs.string_to_js x752)|])
    let (report : ProcessReport.t) =
      ProcessReport.t_of_js (Ojs.get_prop_ascii Import.process "report")
    let (set_report : ProcessReport.t -> unit) =
      fun (x754 : ProcessReport.t) ->
        ignore
          (Ojs.call Import.process "report" [|(ProcessReport.t_to_js x754)|])
    let (resource_usage : ResourceUsage.t) =
      ResourceUsage.t_of_js
        (Ojs.get_prop_ascii Import.process "resourceUsage")
    let (trace_deprecation : bool) =
      Ojs.bool_of_js (Ojs.get_prop_ascii Import.process "traceDeprecation")
    let (set_trace_deprecation : bool -> unit) =
      fun (x755 : bool) ->
        ignore
          (Ojs.call Import.process "traceDeprecation"
             [|(Ojs.bool_to_js x755)|])
    let (on : string -> Ojs.t -> unit) =
      fun (x756 : string) ->
        fun (x757 : Ojs.t) ->
          ignore (Ojs.call Ojs.global "on" [|(Ojs.string_to_js x756);x757|])
    let (add_listener : string -> Ojs.t -> unit) =
      fun (x758 : string) ->
        fun (x759 : Ojs.t) ->
          ignore
            (Ojs.call Ojs.global "addListener"
               [|(Ojs.string_to_js x758);x759|])
    let (once : string -> Ojs.t -> unit) =
      fun (x760 : string) ->
        fun (x761 : Ojs.t) ->
          ignore
            (Ojs.call Ojs.global "once" [|(Ojs.string_to_js x760);x761|])
    let (prepend_listener : string -> Ojs.t -> unit) =
      fun (x762 : string) ->
        fun (x763 : Ojs.t) ->
          ignore
            (Ojs.call Ojs.global "prependListener"
               [|(Ojs.string_to_js x762);x763|])
    let (prepend_once_listener : string -> Ojs.t -> unit) =
      fun (x764 : string) ->
        fun (x765 : Ojs.t) ->
          ignore
            (Ojs.call Ojs.global "prependOnceListener"
               [|(Ojs.string_to_js x764);x765|])
    let with_listener_fn fn =
      function
      | `BeforeExit f -> (fn "beforeExit") @@ (BeforeExitListener.t_to_js f)
      | `Disconnect f -> (fn "disconnect") @@ (DisconnectListener.t_to_js f)
      | `Exit f -> (fn "exit") @@ (ExitListener.t_to_js f)
      | `RejectionHandled f ->
          (fn "rejectionHandled") @@ (RejectionHandledListener.t_to_js f)
      | `UncaughtException f ->
          (fn "uncaughtException") @@ (UncaughtExceptionListener.t_to_js f)
      | `UnhandledRejection f ->
          (fn "unhandledRejection") @@ (UnhandledRejectionListener.t_to_js f)
      | `Warning f -> (fn "warning") @@ (WarningListener.t_to_js f)
      | `Message f -> (fn "message") @@ (MessageListener.t_to_js f)
      | `NewListener f ->
          (fn "newListener") @@ (NewListenerListener.t_to_js f)
      | `RemoveListener f ->
          (fn "removeListener") @@ (RemoveListenerListener.t_to_js f)
      | `MultipleResolves f ->
          (fn "multipleResolves") @@ (MultipleResolvesListener.t_to_js f)
    let on = with_listener_fn on
    let add_listener = with_listener_fn add_listener
    let once = with_listener_fn once
    let prepend_listener = with_listener_fn prepend_listener
    let prepend_once_listener = with_listener_fn prepend_once_listener
    let (emit_before_exit : event:[ `beforeExit ] -> code:int -> bool) =
      fun ~event:(x777 : [ `beforeExit ]) ->
        fun ~code:(x778 : int) ->
          Ojs.bool_of_js
            (Ojs.call Import.process "emit"
               [|((match x777 with
                   | `beforeExit -> Ojs.string_to_js "beforeExit"));(
                 Ojs.int_to_js x778)|])
    let (emit_disconnect : event:[ `disconnect ] -> bool) =
      fun ~event:(x779 : [ `disconnect ]) ->
        Ojs.bool_of_js
          (Ojs.call Import.process "emit"
             [|((match x779 with
                 | `disconnect -> Ojs.string_to_js "disconnect"))|])
    let (emit_exit : event:[ `exit ] -> code:int -> bool) =
      fun ~event:(x780 : [ `exit ]) ->
        fun ~code:(x781 : int) ->
          Ojs.bool_of_js
            (Ojs.call Import.process "emit"
               [|((match x780 with | `exit -> Ojs.string_to_js "exit"));(
                 Ojs.int_to_js x781)|])
    let (emit_rejection_handled :
      event:[ `rejectionHandled ] -> promise:any Promise.t -> bool) =
      fun ~event:(x782 : [ `rejectionHandled ]) ->
        fun ~promise:(x783 : any Promise.t) ->
          Ojs.bool_of_js
            (Ojs.call Import.process "emit"
               [|((match x782 with
                   | `rejectionHandled -> Ojs.string_to_js "rejectionHandled"));(
                 Promise.t_to_js any_to_js x783)|])
    let (emit_uncaught_exception :
      event:[ `uncaughtException ] -> error:Error.t -> bool) =
      fun ~event:(x785 : [ `uncaughtException ]) ->
        fun ~error:(x786 : Error.t) ->
          Ojs.bool_of_js
            (Ojs.call Import.process "emit"
               [|((match x785 with
                   | `uncaughtException ->
                       Ojs.string_to_js "uncaughtException"));(Error.t_to_js
                                                                 x786)|])
    let (emit_uncaught_exception_monitor :
      event:[ `uncaughtExceptionMonitor ] -> error:Error.t -> bool) =
      fun ~event:(x787 : [ `uncaughtExceptionMonitor ]) ->
        fun ~error:(x788 : Error.t) ->
          Ojs.bool_of_js
            (Ojs.call Import.process "emit"
               [|((match x787 with
                   | `uncaughtExceptionMonitor ->
                       Ojs.string_to_js "uncaughtExceptionMonitor"));(
                 Error.t_to_js x788)|])
    let (emit_unhandled_rejection :
      event:[ `unhandledRejection ] ->
        reason:any -> promise:any Promise.t -> bool)
      =
      fun ~event:(x789 : [ `unhandledRejection ]) ->
        fun ~reason:(x790 : any) ->
          fun ~promise:(x791 : any Promise.t) ->
            Ojs.bool_of_js
              (Ojs.call Import.process "emit"
                 [|((match x789 with
                     | `unhandledRejection ->
                         Ojs.string_to_js "unhandledRejection"));(any_to_js
                                                                    x790);(
                   Promise.t_to_js any_to_js x791)|])
    let (emit_warning : event:[ `warning ] -> warning:Error.t -> bool) =
      fun ~event:(x793 : [ `warning ]) ->
        fun ~warning:(x794 : Error.t) ->
          Ojs.bool_of_js
            (Ojs.call Import.process "emit"
               [|((match x793 with | `warning -> Ojs.string_to_js "warning"));(
                 Error.t_to_js x794)|])
    let (emit_message :
      event:[ `message ] -> message:any -> send_handle:any -> Process.t) =
      fun ~event:(x795 : [ `message ]) ->
        fun ~message:(x796 : any) ->
          fun ~send_handle:(x797 : any) ->
            Process.t_of_js
              (Ojs.call Import.process "emit"
                 [|((match x795 with | `message -> Ojs.string_to_js "message"));(
                   any_to_js x796);(any_to_js x797)|])
    let (emit_new_listener :
      event:[ `newListener ] ->
        event_name:symbol or_string ->
          listener:(args:any list -> unit) -> Process.t)
      =
      fun ~event:(x798 : [ `newListener ]) ->
        fun ~event_name:(x799 : symbol or_string) ->
          fun ~listener:(x801 : args:any list -> unit) ->
            Process.t_of_js
              (Ojs.call Import.process "emit"
                 [|((match x798 with
                     | `newListener -> Ojs.string_to_js "newListener"));(
                   or_string_to_js symbol_to_js x799);(Ojs.fun_to_js_args
                                                         (fun (x802 : _) ->
                                                            x801
                                                              ~args:(
                                                              Ojs.list_of_js_from
                                                                any_of_js
                                                                x802 0)))|])
    let (emit_remove_listener :
      event:[ `removeListener ] ->
        event_name:string -> listener:(args:any list -> unit) -> Process.t)
      =
      fun ~event:(x804 : [ `removeListener ]) ->
        fun ~event_name:(x805 : string) ->
          fun ~listener:(x806 : args:any list -> unit) ->
            Process.t_of_js
              (Ojs.call Import.process "emit"
                 [|((match x804 with
                     | `removeListener -> Ojs.string_to_js "removeListener"));(
                   Ojs.string_to_js x805);(Ojs.fun_to_js_args
                                             (fun (x807 : _) ->
                                                x806
                                                  ~args:(Ojs.list_of_js_from
                                                           any_of_js x807 0)))|])
    let (emit_multiple_resolves :
      event:[ `multipleResolves ] ->
        listener:MultipleResolvesListener.t -> Process.t)
      =
      fun ~event:(x809 : [ `multipleResolves ]) ->
        fun ~listener:(x810 : MultipleResolvesListener.t) ->
          Process.t_of_js
            (Ojs.call Import.process "emit"
               [|((match x809 with
                   | `multipleResolves -> Ojs.string_to_js "multipleResolves"));(
                 MultipleResolvesListener.t_to_js x810)|])
  end
let (process : Process.Process.t) =
  Process.Process.t_of_js (Ojs.get_prop_ascii Ojs.global "process")
