[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Dgram =
  struct
    open Node_dns
    module RemoteInfo =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
        and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
        let (get_address : t -> string) =
          fun (x3 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3) "address")
        let (set_address : t -> string -> unit) =
          fun (x4 : t) ->
            fun (x5 : string) ->
              Ojs.set_prop_ascii (t_to_js x4) "address" (Ojs.string_to_js x5)
        let (get_family : t -> [ `IPv4  | `IPv6 ]) =
          fun (x6 : t) ->
            let x7 = Ojs.get_prop_ascii (t_to_js x6) "family" in
            match Ojs.string_of_js x7 with
            | "IPv4" -> `IPv4
            | "IPv6" -> `IPv6
            | _ -> assert false
        let (set_family : t -> [ `IPv4  | `IPv6 ] -> unit) =
          fun (x8 : t) ->
            fun (x9 : [ `IPv4  | `IPv6 ]) ->
              Ojs.set_prop_ascii (t_to_js x8) "family"
                (match x9 with
                 | `IPv4 -> Ojs.string_to_js "IPv4"
                 | `IPv6 -> Ojs.string_to_js "IPv6")
        let (get_port : t -> int) =
          fun (x10 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x10) "port")
        let (set_port : t -> int -> unit) =
          fun (x11 : t) ->
            fun (x12 : int) ->
              Ojs.set_prop_ascii (t_to_js x11) "port" (Ojs.int_to_js x12)
        let (get_size : t -> int) =
          fun (x13 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x13) "size")
        let (set_size : t -> int -> unit) =
          fun (x14 : t) ->
            fun (x15 : int) ->
              Ojs.set_prop_ascii (t_to_js x14) "size" (Ojs.int_to_js x15)
      end
    module BindOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x17 : Ojs.t) -> x17
        and t_to_js : t -> Ojs.t = fun (x16 : Ojs.t) -> x16
        let (get_port : t -> int) =
          fun (x18 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x18) "port")
        let (set_port : t -> int -> unit) =
          fun (x19 : t) ->
            fun (x20 : int) ->
              Ojs.set_prop_ascii (t_to_js x19) "port" (Ojs.int_to_js x20)
        let (get_address : t -> string) =
          fun (x21 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x21) "address")
        let (set_address : t -> string -> unit) =
          fun (x22 : t) ->
            fun (x23 : string) ->
              Ojs.set_prop_ascii (t_to_js x22) "address"
                (Ojs.string_to_js x23)
        let (get_exclusive : t -> bool) =
          fun (x24 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x24) "exclusive")
        let (set_exclusive : t -> bool -> unit) =
          fun (x25 : t) ->
            fun (x26 : bool) ->
              Ojs.set_prop_ascii (t_to_js x25) "exclusive"
                (Ojs.bool_to_js x26)
        let (get_fd : t -> int) =
          fun (x27 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x27) "fd")
        let (set_fd : t -> int -> unit) =
          fun (x28 : t) ->
            fun (x29 : int) ->
              Ojs.set_prop_ascii (t_to_js x28) "fd" (Ojs.int_to_js x29)
      end
    module SocketType =
      struct
        type t = [ `udp4  | `udp6 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x31 : Ojs.t) ->
            let x32 = x31 in
            match Ojs.string_of_js x32 with
            | "udp4" -> `udp4
            | "udp6" -> `udp6
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x30 : [ `udp4  | `udp6 ]) ->
            match x30 with
            | `udp4 -> Ojs.string_to_js "udp4"
            | `udp6 -> Ojs.string_to_js "udp6"
      end
    module SocketOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x34 : Ojs.t) -> x34
        and t_to_js : t -> Ojs.t = fun (x33 : Ojs.t) -> x33
        let (get_type : t -> SocketType.t) =
          fun (x35 : t) ->
            SocketType.t_of_js (Ojs.get_prop_ascii (t_to_js x35) "type")
        let (set_type : t -> SocketType.t -> unit) =
          fun (x36 : t) ->
            fun (x37 : SocketType.t) ->
              Ojs.set_prop_ascii (t_to_js x36) "type"
                (SocketType.t_to_js x37)
        let (get_reuse_addr : t -> bool) =
          fun (x38 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x38) "reuseAddr")
        let (set_reuse_addr : t -> bool -> unit) =
          fun (x39 : t) ->
            fun (x40 : bool) ->
              Ojs.set_prop_ascii (t_to_js x39) "reuseAddr"
                (Ojs.bool_to_js x40)
        let (get_ipv6Only : t -> bool) =
          fun (x41 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x41) "ipv6Only")
        let (set_ipv6Only : t -> bool -> unit) =
          fun (x42 : t) ->
            fun (x43 : bool) ->
              Ojs.set_prop_ascii (t_to_js x42) "ipv6Only"
                (Ojs.bool_to_js x43)
        let (get_recv_buffer_size : t -> int) =
          fun (x44 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x44) "recvBufferSize")
        let (set_recv_buffer_size : t -> int -> unit) =
          fun (x45 : t) ->
            fun (x46 : int) ->
              Ojs.set_prop_ascii (t_to_js x45) "recvBufferSize"
                (Ojs.int_to_js x46)
        let (get_send_buffer_size : t -> int) =
          fun (x47 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x47) "sendBufferSize")
        let (set_send_buffer_size : t -> int -> unit) =
          fun (x48 : t) ->
            fun (x49 : int) ->
              Ojs.set_prop_ascii (t_to_js x48) "sendBufferSize"
                (Ojs.int_to_js x49)
        let (lookup :
          t ->
            hostname:string ->
              options:Dns.LookupOneOptions.t ->
                callback:(err:ErrnoException.t or_null ->
                            address:string -> family:int -> unit)
                  -> unit)
          =
          fun (x57 : t) ->
            fun ~hostname:(x50 : string) ->
              fun ~options:(x51 : Dns.LookupOneOptions.t) ->
                fun
                  ~callback:(x52 :
                              err:ErrnoException.t or_null ->
                                address:string -> family:int -> unit)
                  ->
                  ignore
                    (Ojs.call (t_to_js x57) "lookup"
                       [|(Ojs.string_to_js x50);(Dns.LookupOneOptions.t_to_js
                                                   x51);(Ojs.fun_to_js 3
                                                           (fun (x53 : Ojs.t)
                                                              ->
                                                              fun
                                                                (x55 : Ojs.t)
                                                                ->
                                                                fun
                                                                  (x56 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x52
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x53)
                                                                    ~address:(
                                                                    Ojs.string_of_js
                                                                    x55)
                                                                    ~family:(
                                                                    Ojs.int_of_js
                                                                    x56)))|])
      end
    module Socket =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x59 : Ojs.t) -> x59
        and t_to_js : t -> Ojs.t = fun (x58 : Ojs.t) -> x58
        let (add_membership :
          t ->
            multicast_address:string ->
              ?multicast_interface:string -> unit -> unit)
          =
          fun (x64 : t) ->
            fun ~multicast_address:(x60 : string) ->
              fun ?multicast_interface:(x61 : string option) ->
                fun () ->
                  ignore
                    (let x65 = t_to_js x64 in
                     Ojs.call (Ojs.get_prop_ascii x65 "addMembership")
                       "apply"
                       [|x65;((let x62 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x62 "push"
                                    [|(Ojs.string_to_js x60)|]);
                               (match x61 with
                                | Some x63 ->
                                    ignore
                                      (Ojs.call x62 "push"
                                         [|(Ojs.string_to_js x63)|])
                                | None -> ());
                               x62))|])
        let (address : t -> Node_net.Net.AddressInfo.t) =
          fun (x66 : t) ->
            Node_net.Net.AddressInfo.t_of_js
              (Ojs.call (t_to_js x66) "address" [||])
        let (bind :
          t ->
            ?port:int ->
              ?address:string -> ?callback:(unit -> unit) -> unit -> unit)
          =
          fun (x74 : t) ->
            fun ?port:(x67 : int option) ->
              fun ?address:(x68 : string option) ->
                fun ?callback:(x69 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x75 = t_to_js x74 in
                       Ojs.call (Ojs.get_prop_ascii x75 "bind") "apply"
                         [|x75;((let x70 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x67 with
                                  | Some x73 ->
                                      ignore
                                        (Ojs.call x70 "push"
                                           [|(Ojs.int_to_js x73)|])
                                  | None -> ());
                                 (match x68 with
                                  | Some x72 ->
                                      ignore
                                        (Ojs.call x70 "push"
                                           [|(Ojs.string_to_js x72)|])
                                  | None -> ());
                                 (match x69 with
                                  | Some x71 ->
                                      ignore
                                        (Ojs.call x70 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x71 ()))|])
                                  | None -> ());
                                 x70))|])
        let (bind' :
          t -> ?port:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x81 : t) ->
            fun ?port:(x76 : int option) ->
              fun ?callback:(x77 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x82 = t_to_js x81 in
                     Ojs.call (Ojs.get_prop_ascii x82 "bind") "apply"
                       [|x82;((let x78 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x76 with
                                | Some x80 ->
                                    ignore
                                      (Ojs.call x78 "push"
                                         [|(Ojs.int_to_js x80)|])
                                | None -> ());
                               (match x77 with
                                | Some x79 ->
                                    ignore
                                      (Ojs.call x78 "push"
                                         [|(Ojs.fun_to_js 1 (fun _ -> x79 ()))|])
                                | None -> ());
                               x78))|])
        let (bind'' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x86 : t) ->
            fun ?callback:(x83 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x87 = t_to_js x86 in
                   Ojs.call (Ojs.get_prop_ascii x87 "bind") "apply"
                     [|x87;((let x84 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x83 with
                              | Some x85 ->
                                  ignore
                                    (Ojs.call x84 "push"
                                       [|(Ojs.fun_to_js 1 (fun _ -> x85 ()))|])
                              | None -> ());
                             x84))|])
        let (bind''' :
          t ->
            options:BindOptions.t -> ?callback:(unit -> unit) -> unit -> unit)
          =
          fun (x92 : t) ->
            fun ~options:(x88 : BindOptions.t) ->
              fun ?callback:(x89 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x93 = t_to_js x92 in
                     Ojs.call (Ojs.get_prop_ascii x93 "bind") "apply"
                       [|x93;((let x90 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x90 "push"
                                    [|(BindOptions.t_to_js x88)|]);
                               (match x89 with
                                | Some x91 ->
                                    ignore
                                      (Ojs.call x90 "push"
                                         [|(Ojs.fun_to_js 1 (fun _ -> x91 ()))|])
                                | None -> ());
                               x90))|])
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x97 : t) ->
            fun ?callback:(x94 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x98 = t_to_js x97 in
                   Ojs.call (Ojs.get_prop_ascii x98 "close") "apply"
                     [|x98;((let x95 =
                               Ojs.new_obj
                                 (Ojs.get_prop_ascii Ojs.global "Array") 
                                 [||] in
                             (match x94 with
                              | Some x96 ->
                                  ignore
                                    (Ojs.call x95 "push"
                                       [|(Ojs.fun_to_js 1 (fun _ -> x96 ()))|])
                              | None -> ());
                             x95))|])
        let (connect :
          t ->
            port:int ->
              ?address:string -> ?callback:(unit -> unit) -> unit -> unit)
          =
          fun (x105 : t) ->
            fun ~port:(x99 : int) ->
              fun ?address:(x100 : string option) ->
                fun ?callback:(x101 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x106 = t_to_js x105 in
                       Ojs.call (Ojs.get_prop_ascii x106 "connect") "apply"
                         [|x106;((let x102 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x102 "push"
                                       [|(Ojs.int_to_js x99)|]);
                                  (match x100 with
                                   | Some x104 ->
                                       ignore
                                         (Ojs.call x102 "push"
                                            [|(Ojs.string_to_js x104)|])
                                   | None -> ());
                                  (match x101 with
                                   | Some x103 ->
                                       ignore
                                         (Ojs.call x102 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x103 ()))|])
                                   | None -> ());
                                  x102))|])
        let (connect' : t -> port:int -> callback:(unit -> unit) -> unit) =
          fun (x109 : t) ->
            fun ~port:(x107 : int) ->
              fun ~callback:(x108 : unit -> unit) ->
                ignore
                  (Ojs.call (t_to_js x109) "connect"
                     [|(Ojs.int_to_js x107);(Ojs.fun_to_js 1
                                               (fun _ -> x108 ()))|])
        let (disconnect : t -> unit) =
          fun (x110 : t) ->
            ignore (Ojs.call (t_to_js x110) "disconnect" [||])
        let (drop_membership :
          t ->
            multicast_address:string ->
              ?multicast_interface:string -> unit -> unit)
          =
          fun (x115 : t) ->
            fun ~multicast_address:(x111 : string) ->
              fun ?multicast_interface:(x112 : string option) ->
                fun () ->
                  ignore
                    (let x116 = t_to_js x115 in
                     Ojs.call (Ojs.get_prop_ascii x116 "dropMembership")
                       "apply"
                       [|x116;((let x113 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x113 "push"
                                     [|(Ojs.string_to_js x111)|]);
                                (match x112 with
                                 | Some x114 ->
                                     ignore
                                       (Ojs.call x113 "push"
                                          [|(Ojs.string_to_js x114)|])
                                 | None -> ());
                                x113))|])
        let (get_recv_buffer_size : t -> int) =
          fun (x117 : t) ->
            Ojs.int_of_js (Ojs.call (t_to_js x117) "getRecvBufferSize" [||])
        let (get_send_buffer_size : t -> int) =
          fun (x118 : t) ->
            Ojs.int_of_js (Ojs.call (t_to_js x118) "getSendBufferSize" [||])
        let (ref : t -> t) =
          fun (x119 : t) -> t_of_js (Ojs.call (t_to_js x119) "ref" [||])
        let (remote_address : t -> Node_net.Net.AddressInfo.t) =
          fun (x120 : t) ->
            Node_net.Net.AddressInfo.t_of_js
              (Ojs.call (t_to_js x120) "remoteAddress" [||])
        let (send :
          t ->
            msg:(Uint8Array.t, any list) union2 or_string ->
              ?port:int ->
                ?address:string ->
                  ?callback:(error:Error.t or_null -> bytes:int -> unit) ->
                    unit -> unit)
          =
          fun (x136 : t) ->
            fun ~msg:(x121 : (Uint8Array.t, any list) union2 or_string) ->
              fun ?port:(x122 : int option) ->
                fun ?address:(x123 : string option) ->
                  fun
                    ?callback:(x124 :
                                (error:Error.t or_null -> bytes:int -> unit)
                                  option)
                    ->
                    fun () ->
                      ignore
                        (let x137 = t_to_js x136 in
                         Ojs.call (Ojs.get_prop_ascii x137 "send") "apply"
                           [|x137;((let x125 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x125 "push"
                                         [|(or_string_to_js
                                              (fun
                                                 (x132 :
                                                   (Uint8Array.t, any list)
                                                     union2)
                                                 ->
                                                 union2_to_js
                                                   Uint8Array.t_to_js
                                                   (fun (x134 : any list) ->
                                                      Ojs.list_to_js
                                                        any_to_js x134) x132)
                                              x121)|]);
                                    (match x122 with
                                     | Some x131 ->
                                         ignore
                                           (Ojs.call x125 "push"
                                              [|(Ojs.int_to_js x131)|])
                                     | None -> ());
                                    (match x123 with
                                     | Some x130 ->
                                         ignore
                                           (Ojs.call x125 "push"
                                              [|(Ojs.string_to_js x130)|])
                                     | None -> ());
                                    (match x124 with
                                     | Some x126 ->
                                         ignore
                                           (Ojs.call x125 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x127 : Ojs.t) ->
                                                      fun (x129 : Ojs.t) ->
                                                        x126
                                                          ~error:(or_null_of_js
                                                                    Error.t_of_js
                                                                    x127)
                                                          ~bytes:(Ojs.int_of_js
                                                                    x129)))|])
                                     | None -> ());
                                    x125))|])
        let (send' :
          t ->
            msg:(Uint8Array.t, any list) union2 or_string ->
              ?port:int ->
                ?callback:(error:Error.t or_null -> bytes:int -> unit) ->
                  unit -> unit)
          =
          fun (x151 : t) ->
            fun ~msg:(x138 : (Uint8Array.t, any list) union2 or_string) ->
              fun ?port:(x139 : int option) ->
                fun
                  ?callback:(x140 :
                              (error:Error.t or_null -> bytes:int -> unit)
                                option)
                  ->
                  fun () ->
                    ignore
                      (let x152 = t_to_js x151 in
                       Ojs.call (Ojs.get_prop_ascii x152 "send") "apply"
                         [|x152;((let x141 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x141 "push"
                                       [|(or_string_to_js
                                            (fun
                                               (x147 :
                                                 (Uint8Array.t, any list)
                                                   union2)
                                               ->
                                               union2_to_js
                                                 Uint8Array.t_to_js
                                                 (fun (x149 : any list) ->
                                                    Ojs.list_to_js any_to_js
                                                      x149) x147) x138)|]);
                                  (match x139 with
                                   | Some x146 ->
                                       ignore
                                         (Ojs.call x141 "push"
                                            [|(Ojs.int_to_js x146)|])
                                   | None -> ());
                                  (match x140 with
                                   | Some x142 ->
                                       ignore
                                         (Ojs.call x141 "push"
                                            [|(Ojs.fun_to_js 2
                                                 (fun (x143 : Ojs.t) ->
                                                    fun (x145 : Ojs.t) ->
                                                      x142
                                                        ~error:(or_null_of_js
                                                                  Error.t_of_js
                                                                  x143)
                                                        ~bytes:(Ojs.int_of_js
                                                                  x145)))|])
                                   | None -> ());
                                  x141))|])
        let (send'' :
          t ->
            msg:(Uint8Array.t, any list) union2 or_string ->
              ?callback:(error:Error.t or_null -> bytes:int -> unit) ->
                unit -> unit)
          =
          fun (x164 : t) ->
            fun ~msg:(x153 : (Uint8Array.t, any list) union2 or_string) ->
              fun
                ?callback:(x154 :
                            (error:Error.t or_null -> bytes:int -> unit)
                              option)
                ->
                fun () ->
                  ignore
                    (let x165 = t_to_js x164 in
                     Ojs.call (Ojs.get_prop_ascii x165 "send") "apply"
                       [|x165;((let x155 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x155 "push"
                                     [|(or_string_to_js
                                          (fun
                                             (x160 :
                                               (Uint8Array.t, any list)
                                                 union2)
                                             ->
                                             union2_to_js Uint8Array.t_to_js
                                               (fun (x162 : any list) ->
                                                  Ojs.list_to_js any_to_js
                                                    x162) x160) x153)|]);
                                (match x154 with
                                 | Some x156 ->
                                     ignore
                                       (Ojs.call x155 "push"
                                          [|(Ojs.fun_to_js 2
                                               (fun (x157 : Ojs.t) ->
                                                  fun (x159 : Ojs.t) ->
                                                    x156
                                                      ~error:(or_null_of_js
                                                                Error.t_of_js
                                                                x157)
                                                      ~bytes:(Ojs.int_of_js
                                                                x159)))|])
                                 | None -> ());
                                x155))|])
        let (send''' :
          t ->
            msg:Uint8Array.t or_string ->
              offset:int ->
                length:int ->
                  ?port:int ->
                    ?address:string ->
                      ?callback:(error:Error.t or_null -> bytes:int -> unit)
                        -> unit -> unit)
          =
          fun (x180 : t) ->
            fun ~msg:(x166 : Uint8Array.t or_string) ->
              fun ~offset:(x167 : int) ->
                fun ~length:(x168 : int) ->
                  fun ?port:(x169 : int option) ->
                    fun ?address:(x170 : string option) ->
                      fun
                        ?callback:(x171 :
                                    (error:Error.t or_null ->
                                       bytes:int -> unit)
                                      option)
                        ->
                        fun () ->
                          ignore
                            (let x181 = t_to_js x180 in
                             Ojs.call (Ojs.get_prop_ascii x181 "send")
                               "apply"
                               [|x181;((let x172 =
                                          Ojs.new_obj
                                            (Ojs.get_prop_ascii Ojs.global
                                               "Array") [||] in
                                        ignore
                                          (Ojs.call x172 "push"
                                             [|(or_string_to_js
                                                  Uint8Array.t_to_js x166)|]);
                                        ignore
                                          (Ojs.call x172 "push"
                                             [|(Ojs.int_to_js x167)|]);
                                        ignore
                                          (Ojs.call x172 "push"
                                             [|(Ojs.int_to_js x168)|]);
                                        (match x169 with
                                         | Some x178 ->
                                             ignore
                                               (Ojs.call x172 "push"
                                                  [|(Ojs.int_to_js x178)|])
                                         | None -> ());
                                        (match x170 with
                                         | Some x177 ->
                                             ignore
                                               (Ojs.call x172 "push"
                                                  [|(Ojs.string_to_js x177)|])
                                         | None -> ());
                                        (match x171 with
                                         | Some x173 ->
                                             ignore
                                               (Ojs.call x172 "push"
                                                  [|(Ojs.fun_to_js 2
                                                       (fun (x174 : Ojs.t) ->
                                                          fun (x176 : Ojs.t)
                                                            ->
                                                            x173
                                                              ~error:(
                                                              or_null_of_js
                                                                Error.t_of_js
                                                                x174)
                                                              ~bytes:(
                                                              Ojs.int_of_js
                                                                x176)))|])
                                         | None -> ());
                                        x172))|])
        let (send'''' :
          t ->
            msg:Uint8Array.t or_string ->
              offset:int ->
                length:int ->
                  ?port:int ->
                    ?callback:(error:Error.t or_null -> bytes:int -> unit) ->
                      unit -> unit)
          =
          fun (x194 : t) ->
            fun ~msg:(x182 : Uint8Array.t or_string) ->
              fun ~offset:(x183 : int) ->
                fun ~length:(x184 : int) ->
                  fun ?port:(x185 : int option) ->
                    fun
                      ?callback:(x186 :
                                  (error:Error.t or_null -> bytes:int -> unit)
                                    option)
                      ->
                      fun () ->
                        ignore
                          (let x195 = t_to_js x194 in
                           Ojs.call (Ojs.get_prop_ascii x195 "send") "apply"
                             [|x195;((let x187 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x187 "push"
                                           [|(or_string_to_js
                                                Uint8Array.t_to_js x182)|]);
                                      ignore
                                        (Ojs.call x187 "push"
                                           [|(Ojs.int_to_js x183)|]);
                                      ignore
                                        (Ojs.call x187 "push"
                                           [|(Ojs.int_to_js x184)|]);
                                      (match x185 with
                                       | Some x192 ->
                                           ignore
                                             (Ojs.call x187 "push"
                                                [|(Ojs.int_to_js x192)|])
                                       | None -> ());
                                      (match x186 with
                                       | Some x188 ->
                                           ignore
                                             (Ojs.call x187 "push"
                                                [|(Ojs.fun_to_js 2
                                                     (fun (x189 : Ojs.t) ->
                                                        fun (x191 : Ojs.t) ->
                                                          x188
                                                            ~error:(or_null_of_js
                                                                    Error.t_of_js
                                                                    x189)
                                                            ~bytes:(Ojs.int_of_js
                                                                    x191)))|])
                                       | None -> ());
                                      x187))|])
        let (send''''' :
          t ->
            msg:Uint8Array.t or_string ->
              offset:int ->
                length:int ->
                  ?callback:(error:Error.t or_null -> bytes:int -> unit) ->
                    unit -> unit)
          =
          fun (x206 : t) ->
            fun ~msg:(x196 : Uint8Array.t or_string) ->
              fun ~offset:(x197 : int) ->
                fun ~length:(x198 : int) ->
                  fun
                    ?callback:(x199 :
                                (error:Error.t or_null -> bytes:int -> unit)
                                  option)
                    ->
                    fun () ->
                      ignore
                        (let x207 = t_to_js x206 in
                         Ojs.call (Ojs.get_prop_ascii x207 "send") "apply"
                           [|x207;((let x200 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x200 "push"
                                         [|(or_string_to_js
                                              Uint8Array.t_to_js x196)|]);
                                    ignore
                                      (Ojs.call x200 "push"
                                         [|(Ojs.int_to_js x197)|]);
                                    ignore
                                      (Ojs.call x200 "push"
                                         [|(Ojs.int_to_js x198)|]);
                                    (match x199 with
                                     | Some x201 ->
                                         ignore
                                           (Ojs.call x200 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x202 : Ojs.t) ->
                                                      fun (x204 : Ojs.t) ->
                                                        x201
                                                          ~error:(or_null_of_js
                                                                    Error.t_of_js
                                                                    x202)
                                                          ~bytes:(Ojs.int_of_js
                                                                    x204)))|])
                                     | None -> ());
                                    x200))|])
        let (set_broadcast : t -> flag:bool -> unit) =
          fun (x209 : t) ->
            fun ~flag:(x208 : bool) ->
              ignore
                (Ojs.call (t_to_js x209) "setBroadcast"
                   [|(Ojs.bool_to_js x208)|])
        let (set_multicast_interface :
          t -> multicast_interface:string -> unit) =
          fun (x211 : t) ->
            fun ~multicast_interface:(x210 : string) ->
              ignore
                (Ojs.call (t_to_js x211) "setMulticastInterface"
                   [|(Ojs.string_to_js x210)|])
        let (set_multicast_loopback : t -> flag:bool -> unit) =
          fun (x213 : t) ->
            fun ~flag:(x212 : bool) ->
              ignore
                (Ojs.call (t_to_js x213) "setMulticastLoopback"
                   [|(Ojs.bool_to_js x212)|])
        let (set_multicast_ttl : t -> ttl:int -> unit) =
          fun (x215 : t) ->
            fun ~ttl:(x214 : int) ->
              ignore
                (Ojs.call (t_to_js x215) "setMulticastTTL"
                   [|(Ojs.int_to_js x214)|])
        let (set_recv_buffer_size : t -> size:int -> unit) =
          fun (x217 : t) ->
            fun ~size:(x216 : int) ->
              ignore
                (Ojs.call (t_to_js x217) "setRecvBufferSize"
                   [|(Ojs.int_to_js x216)|])
        let (set_send_buffer_size : t -> size:int -> unit) =
          fun (x219 : t) ->
            fun ~size:(x218 : int) ->
              ignore
                (Ojs.call (t_to_js x219) "setSendBufferSize"
                   [|(Ojs.int_to_js x218)|])
        let (set_ttl : t -> ttl:int -> unit) =
          fun (x221 : t) ->
            fun ~ttl:(x220 : int) ->
              ignore
                (Ojs.call (t_to_js x221) "setTTL" [|(Ojs.int_to_js x220)|])
        let (unref : t -> t) =
          fun (x222 : t) -> t_of_js (Ojs.call (t_to_js x222) "unref" [||])
        let (add_source_specific_membership :
          t ->
            source_address:string ->
              group_address:string ->
                ?multicast_interface:string -> unit -> unit)
          =
          fun (x228 : t) ->
            fun ~source_address:(x223 : string) ->
              fun ~group_address:(x224 : string) ->
                fun ?multicast_interface:(x225 : string option) ->
                  fun () ->
                    ignore
                      (let x229 = t_to_js x228 in
                       Ojs.call
                         (Ojs.get_prop_ascii x229
                            "addSourceSpecificMembership") "apply"
                         [|x229;((let x226 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x226 "push"
                                       [|(Ojs.string_to_js x223)|]);
                                  ignore
                                    (Ojs.call x226 "push"
                                       [|(Ojs.string_to_js x224)|]);
                                  (match x225 with
                                   | Some x227 ->
                                       ignore
                                         (Ojs.call x226 "push"
                                            [|(Ojs.string_to_js x227)|])
                                   | None -> ());
                                  x226))|])
        let (drop_source_specific_membership :
          t ->
            source_address:string ->
              group_address:string ->
                ?multicast_interface:string -> unit -> unit)
          =
          fun (x235 : t) ->
            fun ~source_address:(x230 : string) ->
              fun ~group_address:(x231 : string) ->
                fun ?multicast_interface:(x232 : string option) ->
                  fun () ->
                    ignore
                      (let x236 = t_to_js x235 in
                       Ojs.call
                         (Ojs.get_prop_ascii x236
                            "dropSourceSpecificMembership") "apply"
                         [|x236;((let x233 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x233 "push"
                                       [|(Ojs.string_to_js x230)|]);
                                  ignore
                                    (Ojs.call x233 "push"
                                       [|(Ojs.string_to_js x231)|]);
                                  (match x232 with
                                   | Some x234 ->
                                       ignore
                                         (Ojs.call x233 "push"
                                            [|(Ojs.string_to_js x234)|])
                                   | None -> ());
                                  x233))|])
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x241 : t) ->
            fun ~event:(x237 : string) ->
              fun ~listener:(x238 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x241) "addListener"
                     [|(Ojs.string_to_js x237);(Ojs.fun_to_js_args
                                                  (fun (x239 : _) ->
                                                     x238
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x239 0)))|])
        let (add_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x244 : t) ->
            fun ~event:(x242 : [ `close ]) ->
              fun ~listener:(x243 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x244) "addListener"
                     [|((match x242 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x243 ()))|])
        let (add_listener'' :
          t -> event:[ `connect ] -> listener:(unit -> unit) -> t) =
          fun (x247 : t) ->
            fun ~event:(x245 : [ `connect ]) ->
              fun ~listener:(x246 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x247) "addListener"
                     [|((match x245 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x246 ()))|])
        let (add_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x251 : t) ->
            fun ~event:(x248 : [ `error ]) ->
              fun ~listener:(x249 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x251) "addListener"
                     [|((match x248 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x250 : Ojs.t) ->
                            x249 ~err:(Error.t_of_js x250)))|])
        let (add_listener'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x254 : t) ->
            fun ~event:(x252 : [ `listening ]) ->
              fun ~listener:(x253 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x254) "addListener"
                     [|((match x252 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x253 ()))|])
        let (add_listener''''' :
          t ->
            event:[ `message ] ->
              listener:(msg:Buffer.t -> rinfo:RemoteInfo.t -> unit) -> t)
          =
          fun (x259 : t) ->
            fun ~event:(x255 : [ `message ]) ->
              fun
                ~listener:(x256 : msg:Buffer.t -> rinfo:RemoteInfo.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x259) "addListener"
                     [|((match x255 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x257 : Ojs.t) ->
                            fun (x258 : Ojs.t) ->
                              x256 ~msg:(Buffer.t_of_js x257)
                                ~rinfo:(RemoteInfo.t_of_js x258)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x265 : t) ->
            fun ~event:(x260 : symbol or_string) ->
              fun ~args:(x261 : any list) ->
                Ojs.bool_of_js
                  (let x266 = t_to_js x265 in
                   Ojs.call (Ojs.get_prop_ascii x266 "emit") "apply"
                     [|x266;((let x262 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x262 "push"
                                   [|(or_string_to_js symbol_to_js x260)|]);
                              List.iter
                                (fun (x263 : any) ->
                                   ignore
                                     (Ojs.call x262 "push"
                                        [|(any_to_js x263)|])) x261;
                              x262))|])
        let (emit' : t -> event:[ `close ] -> bool) =
          fun (x268 : t) ->
            fun ~event:(x267 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x268) "emit"
                   [|((match x267 with | `close -> Ojs.string_to_js "close"))|])
        let (emit'' : t -> event:[ `connect ] -> bool) =
          fun (x270 : t) ->
            fun ~event:(x269 : [ `connect ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x270) "emit"
                   [|((match x269 with
                       | `connect -> Ojs.string_to_js "connect"))|])
        let (emit''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x273 : t) ->
            fun ~event:(x271 : [ `error ]) ->
              fun ~err:(x272 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x273) "emit"
                     [|((match x271 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x272)|])
        let (emit'''' : t -> event:[ `listening ] -> bool) =
          fun (x275 : t) ->
            fun ~event:(x274 : [ `listening ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x275) "emit"
                   [|((match x274 with
                       | `listening -> Ojs.string_to_js "listening"))|])
        let (emit''''' :
          t ->
            event:[ `message ] -> msg:Buffer.t -> rinfo:RemoteInfo.t -> bool)
          =
          fun (x279 : t) ->
            fun ~event:(x276 : [ `message ]) ->
              fun ~msg:(x277 : Buffer.t) ->
                fun ~rinfo:(x278 : RemoteInfo.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x279) "emit"
                       [|((match x276 with
                           | `message -> Ojs.string_to_js "message"));(
                         Buffer.t_to_js x277);(RemoteInfo.t_to_js x278)|])
        module CloseListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x281 : Ojs.t) -> fun () -> ignore (Ojs.apply x281 [||])
            and t_to_js : t -> Ojs.t =
              fun (x280 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x280 ())
          end
        module ConnectListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x283 : Ojs.t) -> fun () -> ignore (Ojs.apply x283 [||])
            and t_to_js : t -> Ojs.t =
              fun (x282 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x282 ())
          end
        module ErrorListener =
          struct
            type t = err:Error.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x286 : Ojs.t) ->
                fun ~err:(x287 : Error.t) ->
                  ignore (Ojs.apply x286 [|(Error.t_to_js x287)|])
            and t_to_js : t -> Ojs.t =
              fun (x284 : err:Error.t -> unit) ->
                Ojs.fun_to_js 1
                  (fun (x285 : Ojs.t) -> x284 ~err:(Error.t_of_js x285))
          end
        module ListeningListener =
          struct
            type t = unit -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x289 : Ojs.t) -> fun () -> ignore (Ojs.apply x289 [||])
            and t_to_js : t -> Ojs.t =
              fun (x288 : unit -> unit) -> Ojs.fun_to_js 1 (fun _ -> x288 ())
          end
        module MessageListener =
          struct
            type t = msg:Buffer.t -> rinfo:RemoteInfo.t -> unit
            let rec t_of_js : Ojs.t -> t =
              fun (x293 : Ojs.t) ->
                fun ~msg:(x294 : Buffer.t) ->
                  fun ~rinfo:(x295 : RemoteInfo.t) ->
                    ignore
                      (Ojs.apply x293
                         [|(Buffer.t_to_js x294);(RemoteInfo.t_to_js x295)|])
            and t_to_js : t -> Ojs.t =
              fun (x290 : msg:Buffer.t -> rinfo:RemoteInfo.t -> unit) ->
                Ojs.fun_to_js 2
                  (fun (x291 : Ojs.t) ->
                     fun (x292 : Ojs.t) ->
                       x290 ~msg:(Buffer.t_of_js x291)
                         ~rinfo:(RemoteInfo.t_of_js x292))
          end
        type listener =
          [ `Close of CloseListener.t  | `Connect of ConnectListener.t 
          | `Error of ErrorListener.t  | `Listening of ListeningListener.t 
          | `Message of MessageListener.t ]
        let rec listener_to_js : listener -> Ojs.t =
          fun
            (x296 :
              [ `Close of CloseListener.t  | `Connect of ConnectListener.t 
              | `Error of ErrorListener.t 
              | `Listening of ListeningListener.t 
              | `Message of MessageListener.t ])
            ->
            match x296 with
            | `Close x297 -> CloseListener.t_to_js x297
            | `Connect x298 -> ConnectListener.t_to_js x298
            | `Error x299 -> ErrorListener.t_to_js x299
            | `Listening x300 -> ListeningListener.t_to_js x300
            | `Message x301 -> MessageListener.t_to_js x301
        let (on : t -> string -> Ojs.t -> unit) =
          fun (x306 : t) ->
            fun (x304 : string) ->
              fun (x305 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x306) "on"
                     [|(Ojs.string_to_js x304);x305|])
        let (add_listener : t -> string -> Ojs.t -> unit) =
          fun (x309 : t) ->
            fun (x307 : string) ->
              fun (x308 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x309) "addListener"
                     [|(Ojs.string_to_js x307);x308|])
        let (once : t -> string -> Ojs.t -> unit) =
          fun (x312 : t) ->
            fun (x310 : string) ->
              fun (x311 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x312) "once"
                     [|(Ojs.string_to_js x310);x311|])
        let (prepend_listener : t -> string -> Ojs.t -> unit) =
          fun (x315 : t) ->
            fun (x313 : string) ->
              fun (x314 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x315) "prependListener"
                     [|(Ojs.string_to_js x313);x314|])
        let (prepend_once_listener : t -> string -> Ojs.t -> unit) =
          fun (x318 : t) ->
            fun (x316 : string) ->
              fun (x317 : Ojs.t) ->
                ignore
                  (Ojs.call (t_to_js x318) "prependOnceListener"
                     [|(Ojs.string_to_js x316);x317|])
        let with_listener_fn fn t =
          function
          | `Close f -> (fn t "close") @@ (CloseListener.t_to_js f)
          | `Connect f -> (fn t "connect") @@ (ConnectListener.t_to_js f)
          | `Error f -> (fn t "error") @@ (ErrorListener.t_to_js f)
          | `Listening f ->
              (fn t "listening") @@ (ListeningListener.t_to_js f)
          | `Message f -> (fn t "message") @@ (MessageListener.t_to_js f)
        let on = with_listener_fn on
        let add_listener = with_listener_fn add_listener
        let once = with_listener_fn once
        let prepend_listener = with_listener_fn prepend_listener
        let prepend_once_listener = with_listener_fn prepend_once_listener
      end
    let (create_socket :
      type_:SocketType.t ->
        ?callback:(msg:Buffer.t -> rinfo:RemoteInfo.t -> unit) ->
          unit -> Socket.t)
      =
      fun ~type_:(x324 : SocketType.t) ->
        fun
          ?callback:(x325 :
                      (msg:Buffer.t -> rinfo:RemoteInfo.t -> unit) option)
          ->
          fun () ->
            Socket.t_of_js
              (let x330 = Import.dgram in
               Ojs.call (Ojs.get_prop_ascii x330 "createSocket") "apply"
                 [|x330;((let x326 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x326 "push"
                               [|(SocketType.t_to_js x324)|]);
                          (match x325 with
                           | Some x327 ->
                               ignore
                                 (Ojs.call x326 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x328 : Ojs.t) ->
                                            fun (x329 : Ojs.t) ->
                                              x327 ~msg:(Buffer.t_of_js x328)
                                                ~rinfo:(RemoteInfo.t_of_js
                                                          x329)))|])
                           | None -> ());
                          x326))|])
    let (create_socket :
      options:SocketOptions.t ->
        ?callback:(msg:Buffer.t -> rinfo:RemoteInfo.t -> unit) ->
          unit -> Socket.t)
      =
      fun ~options:(x331 : SocketOptions.t) ->
        fun
          ?callback:(x332 :
                      (msg:Buffer.t -> rinfo:RemoteInfo.t -> unit) option)
          ->
          fun () ->
            Socket.t_of_js
              (let x337 = Import.dgram in
               Ojs.call (Ojs.get_prop_ascii x337 "createSocket") "apply"
                 [|x337;((let x333 =
                            Ojs.new_obj
                              (Ojs.get_prop_ascii Ojs.global "Array") 
                              [||] in
                          ignore
                            (Ojs.call x333 "push"
                               [|(SocketOptions.t_to_js x331)|]);
                          (match x332 with
                           | Some x334 ->
                               ignore
                                 (Ojs.call x333 "push"
                                    [|(Ojs.fun_to_js 2
                                         (fun (x335 : Ojs.t) ->
                                            fun (x336 : Ojs.t) ->
                                              x334 ~msg:(Buffer.t_of_js x335)
                                                ~rinfo:(RemoteInfo.t_of_js
                                                          x336)))|])
                           | None -> ());
                          x333))|])
  end
