[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Internal =
  struct
    module AnonymousInterfaces = struct  end
    module Types =
      struct
        open AnonymousInterfaces
        type dgram_BindOptions = [ `Dgram_BindOptions ] intf
        and dgram_RemoteInfo = [ `Dgram_RemoteInfo ] intf
        and dgram_Socket = [ `Dgram_Socket ] intf
        and dgram_SocketOptions = [ `Dgram_SocketOptions ] intf
        and dgram_SocketType = [ `udp4  | `udp6 ]
        let rec dgram_BindOptions_of_js : Ojs.t -> dgram_BindOptions =
          Obj.magic
        and dgram_BindOptions_to_js : dgram_BindOptions -> Ojs.t = Obj.magic
        and dgram_RemoteInfo_of_js : Ojs.t -> dgram_RemoteInfo = Obj.magic
        and dgram_RemoteInfo_to_js : dgram_RemoteInfo -> Ojs.t = Obj.magic
        and dgram_Socket_of_js : Ojs.t -> dgram_Socket = Obj.magic
        and dgram_Socket_to_js : dgram_Socket -> Ojs.t = Obj.magic
        and dgram_SocketOptions_of_js : Ojs.t -> dgram_SocketOptions =
          Obj.magic
        and dgram_SocketOptions_to_js : dgram_SocketOptions -> Ojs.t =
          Obj.magic
        and dgram_SocketType_of_js : Ojs.t -> dgram_SocketType =
          fun (x2 : Ojs.t) ->
            let x3 = x2 in
            match Ojs.string_of_js x3 with
            | "udp4" -> `udp4
            | "udp6" -> `udp6
            | _ -> assert false
        and dgram_SocketType_to_js : dgram_SocketType -> Ojs.t =
          fun (x1 : [ `udp4  | `udp6 ]) ->
            match x1 with
            | `udp4 -> Ojs.string_to_js "udp4"
            | `udp6 -> Ojs.string_to_js "udp6"
      end
  end
open Internal
open AnonymousInterfaces
open Types
module Dgram =
  struct
    open Node_dns
    module RemoteInfo =
      struct
        type t = dgram_RemoteInfo
        let rec t_of_js : Ojs.t -> t =
          fun (x5 : Ojs.t) -> dgram_RemoteInfo_of_js x5
        and t_to_js : t -> Ojs.t =
          fun (x4 : dgram_RemoteInfo) -> dgram_RemoteInfo_to_js x4
        let (get_address : t -> string) =
          fun (x6 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x6) "address")
        let (set_address : t -> string -> unit) =
          fun (x7 : t) ->
            fun (x8 : string) ->
              Ojs.set_prop_ascii (t_to_js x7) "address" (Ojs.string_to_js x8)
        let (get_family : t -> [ `IPv4  | `IPv6 ]) =
          fun (x9 : t) ->
            let x10 = Ojs.get_prop_ascii (t_to_js x9) "family" in
            match Ojs.string_of_js x10 with
            | "IPv4" -> `IPv4
            | "IPv6" -> `IPv6
            | _ -> assert false
        let (set_family : t -> [ `IPv4  | `IPv6 ] -> unit) =
          fun (x11 : t) ->
            fun (x12 : [ `IPv4  | `IPv6 ]) ->
              Ojs.set_prop_ascii (t_to_js x11) "family"
                (match x12 with
                 | `IPv4 -> Ojs.string_to_js "IPv4"
                 | `IPv6 -> Ojs.string_to_js "IPv6")
        let (get_port : t -> float) =
          fun (x13 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x13) "port")
        let (set_port : t -> float -> unit) =
          fun (x14 : t) ->
            fun (x15 : float) ->
              Ojs.set_prop_ascii (t_to_js x14) "port" (Ojs.float_to_js x15)
        let (get_size : t -> float) =
          fun (x16 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x16) "size")
        let (set_size : t -> float -> unit) =
          fun (x17 : t) ->
            fun (x18 : float) ->
              Ojs.set_prop_ascii (t_to_js x17) "size" (Ojs.float_to_js x18)
      end
    module BindOptions =
      struct
        type t = dgram_BindOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x20 : Ojs.t) -> dgram_BindOptions_of_js x20
        and t_to_js : t -> Ojs.t =
          fun (x19 : dgram_BindOptions) -> dgram_BindOptions_to_js x19
        let (get_port : t -> float) =
          fun (x21 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x21) "port")
        let (set_port : t -> float -> unit) =
          fun (x22 : t) ->
            fun (x23 : float) ->
              Ojs.set_prop_ascii (t_to_js x22) "port" (Ojs.float_to_js x23)
        let (get_address : t -> string) =
          fun (x24 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x24) "address")
        let (set_address : t -> string -> unit) =
          fun (x25 : t) ->
            fun (x26 : string) ->
              Ojs.set_prop_ascii (t_to_js x25) "address"
                (Ojs.string_to_js x26)
        let (get_exclusive : t -> bool) =
          fun (x27 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x27) "exclusive")
        let (set_exclusive : t -> bool -> unit) =
          fun (x28 : t) ->
            fun (x29 : bool) ->
              Ojs.set_prop_ascii (t_to_js x28) "exclusive"
                (Ojs.bool_to_js x29)
        let (get_fd : t -> float) =
          fun (x30 : t) ->
            Ojs.float_of_js (Ojs.get_prop_ascii (t_to_js x30) "fd")
        let (set_fd : t -> float -> unit) =
          fun (x31 : t) ->
            fun (x32 : float) ->
              Ojs.set_prop_ascii (t_to_js x31) "fd" (Ojs.float_to_js x32)
      end
    module SocketType =
      struct
        type t = dgram_SocketType
        let rec t_of_js : Ojs.t -> t =
          fun (x34 : Ojs.t) -> dgram_SocketType_of_js x34
        and t_to_js : t -> Ojs.t =
          fun (x33 : dgram_SocketType) -> dgram_SocketType_to_js x33
      end
    module SocketOptions =
      struct
        type t = dgram_SocketOptions
        let rec t_of_js : Ojs.t -> t =
          fun (x36 : Ojs.t) -> dgram_SocketOptions_of_js x36
        and t_to_js : t -> Ojs.t =
          fun (x35 : dgram_SocketOptions) -> dgram_SocketOptions_to_js x35
        let (get_type : t -> dgram_SocketType) =
          fun (x37 : t) ->
            dgram_SocketType_of_js (Ojs.get_prop_ascii (t_to_js x37) "type")
        let (set_type : t -> dgram_SocketType -> unit) =
          fun (x38 : t) ->
            fun (x39 : dgram_SocketType) ->
              Ojs.set_prop_ascii (t_to_js x38) "type"
                (dgram_SocketType_to_js x39)
        let (get_reuseAddr : t -> bool) =
          fun (x40 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x40) "reuseAddr")
        let (set_reuseAddr : t -> bool -> unit) =
          fun (x41 : t) ->
            fun (x42 : bool) ->
              Ojs.set_prop_ascii (t_to_js x41) "reuseAddr"
                (Ojs.bool_to_js x42)
        let (get_ipv6Only : t -> bool) =
          fun (x43 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x43) "ipv6Only")
        let (set_ipv6Only : t -> bool -> unit) =
          fun (x44 : t) ->
            fun (x45 : bool) ->
              Ojs.set_prop_ascii (t_to_js x44) "ipv6Only"
                (Ojs.bool_to_js x45)
        let (get_recvBufferSize : t -> float) =
          fun (x46 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x46) "recvBufferSize")
        let (set_recvBufferSize : t -> float -> unit) =
          fun (x47 : t) ->
            fun (x48 : float) ->
              Ojs.set_prop_ascii (t_to_js x47) "recvBufferSize"
                (Ojs.float_to_js x48)
        let (get_sendBufferSize : t -> float) =
          fun (x49 : t) ->
            Ojs.float_of_js
              (Ojs.get_prop_ascii (t_to_js x49) "sendBufferSize")
        let (set_sendBufferSize : t -> float -> unit) =
          fun (x50 : t) ->
            fun (x51 : float) ->
              Ojs.set_prop_ascii (t_to_js x50) "sendBufferSize"
                (Ojs.float_to_js x51)
        let (lookup :
          t ->
            hostname:string ->
              options:Dns.LookupOneOptions.t ->
                callback:(err:ErrnoException.t or_null ->
                            address:string -> family:float -> unit)
                  -> unit)
          =
          fun (x59 : t) ->
            fun ~hostname:(x52 : string) ->
              fun ~options:(x53 : Dns.LookupOneOptions.t) ->
                fun
                  ~callback:(x54 :
                              err:ErrnoException.t or_null ->
                                address:string -> family:float -> unit)
                  ->
                  ignore
                    (Ojs.call (t_to_js x59) "lookup"
                       [|(Ojs.string_to_js x52);(Dns.LookupOneOptions.t_to_js
                                                   x53);(Ojs.fun_to_js 3
                                                           (fun (x55 : Ojs.t)
                                                              ->
                                                              fun
                                                                (x57 : Ojs.t)
                                                                ->
                                                                fun
                                                                  (x58 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x54
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x55)
                                                                    ~address:(
                                                                    Ojs.string_of_js
                                                                    x57)
                                                                    ~family:(
                                                                    Ojs.float_of_js
                                                                    x58)))|])
      end
    let (createSocket :
      type_:dgram_SocketType ->
        ?callback:(msg:Buffer.t -> rinfo:dgram_RemoteInfo -> unit) ->
          unit -> dgram_Socket)
      =
      fun ~type_:(x60 : dgram_SocketType) ->
        fun
          ?callback:(x61 :
                      (msg:Buffer.t -> rinfo:dgram_RemoteInfo -> unit) option)
          ->
          fun () ->
            dgram_Socket_of_js
              (let x66 = Import.dgram in
               Ojs.call (Ojs.get_prop_ascii x66 "createSocket") "apply"
                 [|x66;((let x62 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         ignore
                           (Ojs.call x62 "push"
                              [|(dgram_SocketType_to_js x60)|]);
                         (match x61 with
                          | Some x63 ->
                              ignore
                                (Ojs.call x62 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x64 : Ojs.t) ->
                                           fun (x65 : Ojs.t) ->
                                             x63 ~msg:(Buffer.t_of_js x64)
                                               ~rinfo:(dgram_RemoteInfo_of_js
                                                         x65)))|])
                          | None -> ());
                         x62))|])
    let (createSocket :
      options:dgram_SocketOptions ->
        ?callback:(msg:Buffer.t -> rinfo:dgram_RemoteInfo -> unit) ->
          unit -> dgram_Socket)
      =
      fun ~options:(x67 : dgram_SocketOptions) ->
        fun
          ?callback:(x68 :
                      (msg:Buffer.t -> rinfo:dgram_RemoteInfo -> unit) option)
          ->
          fun () ->
            dgram_Socket_of_js
              (let x73 = Import.dgram in
               Ojs.call (Ojs.get_prop_ascii x73 "createSocket") "apply"
                 [|x73;((let x69 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         ignore
                           (Ojs.call x69 "push"
                              [|(dgram_SocketOptions_to_js x67)|]);
                         (match x68 with
                          | Some x70 ->
                              ignore
                                (Ojs.call x69 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x71 : Ojs.t) ->
                                           fun (x72 : Ojs.t) ->
                                             x70 ~msg:(Buffer.t_of_js x71)
                                               ~rinfo:(dgram_RemoteInfo_of_js
                                                         x72)))|])
                          | None -> ());
                         x69))|])
    module Socket =
      struct
        type t = dgram_Socket
        let rec t_of_js : Ojs.t -> t =
          fun (x75 : Ojs.t) -> dgram_Socket_of_js x75
        and t_to_js : t -> Ojs.t =
          fun (x74 : dgram_Socket) -> dgram_Socket_to_js x74
        let (addMembership :
          t ->
            multicastAddress:string ->
              ?multicastInterface:string -> unit -> unit)
          =
          fun (x80 : t) ->
            fun ~multicastAddress:(x76 : string) ->
              fun ?multicastInterface:(x77 : string option) ->
                fun () ->
                  ignore
                    (let x81 = t_to_js x80 in
                     Ojs.call (Ojs.get_prop_ascii x81 "addMembership")
                       "apply"
                       [|x81;((let x78 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x78 "push"
                                    [|(Ojs.string_to_js x76)|]);
                               (match x77 with
                                | Some x79 ->
                                    ignore
                                      (Ojs.call x78 "push"
                                         [|(Ojs.string_to_js x79)|])
                                | None -> ());
                               x78))|])
        let (address : t -> Node_net.Net.AddressInfo.t) =
          fun (x82 : t) ->
            Node_net.Net.AddressInfo.t_of_js
              (Ojs.call (t_to_js x82) "address" [||])
        let (bind :
          t ->
            ?port:float ->
              ?address:string -> ?callback:(unit -> unit) -> unit -> unit)
          =
          fun (x90 : t) ->
            fun ?port:(x83 : float option) ->
              fun ?address:(x84 : string option) ->
                fun ?callback:(x85 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x91 = t_to_js x90 in
                       Ojs.call (Ojs.get_prop_ascii x91 "bind") "apply"
                         [|x91;((let x86 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x83 with
                                  | Some x89 ->
                                      ignore
                                        (Ojs.call x86 "push"
                                           [|(Ojs.float_to_js x89)|])
                                  | None -> ());
                                 (match x84 with
                                  | Some x88 ->
                                      ignore
                                        (Ojs.call x86 "push"
                                           [|(Ojs.string_to_js x88)|])
                                  | None -> ());
                                 (match x85 with
                                  | Some x87 ->
                                      ignore
                                        (Ojs.call x86 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x87 ()))|])
                                  | None -> ());
                                 x86))|])
        let (bind' :
          t -> ?port:float -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x97 : t) ->
            fun ?port:(x92 : float option) ->
              fun ?callback:(x93 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x98 = t_to_js x97 in
                     Ojs.call (Ojs.get_prop_ascii x98 "bind") "apply"
                       [|x98;((let x94 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x92 with
                                | Some x96 ->
                                    ignore
                                      (Ojs.call x94 "push"
                                         [|(Ojs.float_to_js x96)|])
                                | None -> ());
                               (match x93 with
                                | Some x95 ->
                                    ignore
                                      (Ojs.call x94 "push"
                                         [|(Ojs.fun_to_js 1 (fun _ -> x95 ()))|])
                                | None -> ());
                               x94))|])
        let (bind'' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x102 : t) ->
            fun ?callback:(x99 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x103 = t_to_js x102 in
                   Ojs.call (Ojs.get_prop_ascii x103 "bind") "apply"
                     [|x103;((let x100 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x99 with
                               | Some x101 ->
                                   ignore
                                     (Ojs.call x100 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x101 ()))|])
                               | None -> ());
                              x100))|])
        let (bind''' :
          t ->
            options:dgram_BindOptions ->
              ?callback:(unit -> unit) -> unit -> unit)
          =
          fun (x108 : t) ->
            fun ~options:(x104 : dgram_BindOptions) ->
              fun ?callback:(x105 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x109 = t_to_js x108 in
                     Ojs.call (Ojs.get_prop_ascii x109 "bind") "apply"
                       [|x109;((let x106 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x106 "push"
                                     [|(dgram_BindOptions_to_js x104)|]);
                                (match x105 with
                                 | Some x107 ->
                                     ignore
                                       (Ojs.call x106 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x107 ()))|])
                                 | None -> ());
                                x106))|])
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x113 : t) ->
            fun ?callback:(x110 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x114 = t_to_js x113 in
                   Ojs.call (Ojs.get_prop_ascii x114 "close") "apply"
                     [|x114;((let x111 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x110 with
                               | Some x112 ->
                                   ignore
                                     (Ojs.call x111 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x112 ()))|])
                               | None -> ());
                              x111))|])
        let (connect :
          t ->
            port:float ->
              ?address:string -> ?callback:(unit -> unit) -> unit -> unit)
          =
          fun (x121 : t) ->
            fun ~port:(x115 : float) ->
              fun ?address:(x116 : string option) ->
                fun ?callback:(x117 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x122 = t_to_js x121 in
                       Ojs.call (Ojs.get_prop_ascii x122 "connect") "apply"
                         [|x122;((let x118 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x118 "push"
                                       [|(Ojs.float_to_js x115)|]);
                                  (match x116 with
                                   | Some x120 ->
                                       ignore
                                         (Ojs.call x118 "push"
                                            [|(Ojs.string_to_js x120)|])
                                   | None -> ());
                                  (match x117 with
                                   | Some x119 ->
                                       ignore
                                         (Ojs.call x118 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x119 ()))|])
                                   | None -> ());
                                  x118))|])
        let (connect' : t -> port:float -> callback:(unit -> unit) -> unit) =
          fun (x125 : t) ->
            fun ~port:(x123 : float) ->
              fun ~callback:(x124 : unit -> unit) ->
                ignore
                  (Ojs.call (t_to_js x125) "connect"
                     [|(Ojs.float_to_js x123);(Ojs.fun_to_js 1
                                                 (fun _ -> x124 ()))|])
        let (disconnect : t -> unit) =
          fun (x126 : t) ->
            ignore (Ojs.call (t_to_js x126) "disconnect" [||])
        let (dropMembership :
          t ->
            multicastAddress:string ->
              ?multicastInterface:string -> unit -> unit)
          =
          fun (x131 : t) ->
            fun ~multicastAddress:(x127 : string) ->
              fun ?multicastInterface:(x128 : string option) ->
                fun () ->
                  ignore
                    (let x132 = t_to_js x131 in
                     Ojs.call (Ojs.get_prop_ascii x132 "dropMembership")
                       "apply"
                       [|x132;((let x129 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x129 "push"
                                     [|(Ojs.string_to_js x127)|]);
                                (match x128 with
                                 | Some x130 ->
                                     ignore
                                       (Ojs.call x129 "push"
                                          [|(Ojs.string_to_js x130)|])
                                 | None -> ());
                                x129))|])
        let (getRecvBufferSize : t -> float) =
          fun (x133 : t) ->
            Ojs.float_of_js
              (Ojs.call (t_to_js x133) "getRecvBufferSize" [||])
        let (getSendBufferSize : t -> float) =
          fun (x134 : t) ->
            Ojs.float_of_js
              (Ojs.call (t_to_js x134) "getSendBufferSize" [||])
        let (ref : t -> t) =
          fun (x135 : t) -> t_of_js (Ojs.call (t_to_js x135) "ref" [||])
        let (remoteAddress : t -> Node_net.Net.AddressInfo.t) =
          fun (x136 : t) ->
            Node_net.Net.AddressInfo.t_of_js
              (Ojs.call (t_to_js x136) "remoteAddress" [||])
        let (send :
          t ->
            msg:(Uint8Array.t, any list) union2 or_string ->
              ?port:float ->
                ?address:string ->
                  ?callback:(error:Error.t or_null -> bytes:float -> unit) ->
                    unit -> unit)
          =
          fun (x152 : t) ->
            fun ~msg:(x137 : (Uint8Array.t, any list) union2 or_string) ->
              fun ?port:(x138 : float option) ->
                fun ?address:(x139 : string option) ->
                  fun
                    ?callback:(x140 :
                                (error:Error.t or_null -> bytes:float -> unit)
                                  option)
                    ->
                    fun () ->
                      ignore
                        (let x153 = t_to_js x152 in
                         Ojs.call (Ojs.get_prop_ascii x153 "send") "apply"
                           [|x153;((let x141 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x141 "push"
                                         [|(or_string_to_js
                                              (fun
                                                 (x148 :
                                                   (Uint8Array.t, any list)
                                                     union2)
                                                 ->
                                                 union2_to_js
                                                   Uint8Array.t_to_js
                                                   (fun (x150 : any list) ->
                                                      Ojs.list_to_js
                                                        any_to_js x150) x148)
                                              x137)|]);
                                    (match x138 with
                                     | Some x147 ->
                                         ignore
                                           (Ojs.call x141 "push"
                                              [|(Ojs.float_to_js x147)|])
                                     | None -> ());
                                    (match x139 with
                                     | Some x146 ->
                                         ignore
                                           (Ojs.call x141 "push"
                                              [|(Ojs.string_to_js x146)|])
                                     | None -> ());
                                    (match x140 with
                                     | Some x142 ->
                                         ignore
                                           (Ojs.call x141 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x143 : Ojs.t) ->
                                                      fun (x145 : Ojs.t) ->
                                                        x142
                                                          ~error:(or_null_of_js
                                                                    Error.t_of_js
                                                                    x143)
                                                          ~bytes:(Ojs.float_of_js
                                                                    x145)))|])
                                     | None -> ());
                                    x141))|])
        let (send' :
          t ->
            msg:(Uint8Array.t, any list) union2 or_string ->
              ?port:float ->
                ?callback:(error:Error.t or_null -> bytes:float -> unit) ->
                  unit -> unit)
          =
          fun (x167 : t) ->
            fun ~msg:(x154 : (Uint8Array.t, any list) union2 or_string) ->
              fun ?port:(x155 : float option) ->
                fun
                  ?callback:(x156 :
                              (error:Error.t or_null -> bytes:float -> unit)
                                option)
                  ->
                  fun () ->
                    ignore
                      (let x168 = t_to_js x167 in
                       Ojs.call (Ojs.get_prop_ascii x168 "send") "apply"
                         [|x168;((let x157 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x157 "push"
                                       [|(or_string_to_js
                                            (fun
                                               (x163 :
                                                 (Uint8Array.t, any list)
                                                   union2)
                                               ->
                                               union2_to_js
                                                 Uint8Array.t_to_js
                                                 (fun (x165 : any list) ->
                                                    Ojs.list_to_js any_to_js
                                                      x165) x163) x154)|]);
                                  (match x155 with
                                   | Some x162 ->
                                       ignore
                                         (Ojs.call x157 "push"
                                            [|(Ojs.float_to_js x162)|])
                                   | None -> ());
                                  (match x156 with
                                   | Some x158 ->
                                       ignore
                                         (Ojs.call x157 "push"
                                            [|(Ojs.fun_to_js 2
                                                 (fun (x159 : Ojs.t) ->
                                                    fun (x161 : Ojs.t) ->
                                                      x158
                                                        ~error:(or_null_of_js
                                                                  Error.t_of_js
                                                                  x159)
                                                        ~bytes:(Ojs.float_of_js
                                                                  x161)))|])
                                   | None -> ());
                                  x157))|])
        let (send'' :
          t ->
            msg:(Uint8Array.t, any list) union2 or_string ->
              ?callback:(error:Error.t or_null -> bytes:float -> unit) ->
                unit -> unit)
          =
          fun (x180 : t) ->
            fun ~msg:(x169 : (Uint8Array.t, any list) union2 or_string) ->
              fun
                ?callback:(x170 :
                            (error:Error.t or_null -> bytes:float -> unit)
                              option)
                ->
                fun () ->
                  ignore
                    (let x181 = t_to_js x180 in
                     Ojs.call (Ojs.get_prop_ascii x181 "send") "apply"
                       [|x181;((let x171 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x171 "push"
                                     [|(or_string_to_js
                                          (fun
                                             (x176 :
                                               (Uint8Array.t, any list)
                                                 union2)
                                             ->
                                             union2_to_js Uint8Array.t_to_js
                                               (fun (x178 : any list) ->
                                                  Ojs.list_to_js any_to_js
                                                    x178) x176) x169)|]);
                                (match x170 with
                                 | Some x172 ->
                                     ignore
                                       (Ojs.call x171 "push"
                                          [|(Ojs.fun_to_js 2
                                               (fun (x173 : Ojs.t) ->
                                                  fun (x175 : Ojs.t) ->
                                                    x172
                                                      ~error:(or_null_of_js
                                                                Error.t_of_js
                                                                x173)
                                                      ~bytes:(Ojs.float_of_js
                                                                x175)))|])
                                 | None -> ());
                                x171))|])
        let (send''' :
          t ->
            msg:Uint8Array.t or_string ->
              offset:float ->
                length:float ->
                  ?port:float ->
                    ?address:string ->
                      ?callback:(error:Error.t or_null -> bytes:float -> unit)
                        -> unit -> unit)
          =
          fun (x196 : t) ->
            fun ~msg:(x182 : Uint8Array.t or_string) ->
              fun ~offset:(x183 : float) ->
                fun ~length:(x184 : float) ->
                  fun ?port:(x185 : float option) ->
                    fun ?address:(x186 : string option) ->
                      fun
                        ?callback:(x187 :
                                    (error:Error.t or_null ->
                                       bytes:float -> unit)
                                      option)
                        ->
                        fun () ->
                          ignore
                            (let x197 = t_to_js x196 in
                             Ojs.call (Ojs.get_prop_ascii x197 "send")
                               "apply"
                               [|x197;((let x188 =
                                          Ojs.new_obj
                                            (Ojs.get_prop_ascii Ojs.global
                                               "Array") [||] in
                                        ignore
                                          (Ojs.call x188 "push"
                                             [|(or_string_to_js
                                                  Uint8Array.t_to_js x182)|]);
                                        ignore
                                          (Ojs.call x188 "push"
                                             [|(Ojs.float_to_js x183)|]);
                                        ignore
                                          (Ojs.call x188 "push"
                                             [|(Ojs.float_to_js x184)|]);
                                        (match x185 with
                                         | Some x194 ->
                                             ignore
                                               (Ojs.call x188 "push"
                                                  [|(Ojs.float_to_js x194)|])
                                         | None -> ());
                                        (match x186 with
                                         | Some x193 ->
                                             ignore
                                               (Ojs.call x188 "push"
                                                  [|(Ojs.string_to_js x193)|])
                                         | None -> ());
                                        (match x187 with
                                         | Some x189 ->
                                             ignore
                                               (Ojs.call x188 "push"
                                                  [|(Ojs.fun_to_js 2
                                                       (fun (x190 : Ojs.t) ->
                                                          fun (x192 : Ojs.t)
                                                            ->
                                                            x189
                                                              ~error:(
                                                              or_null_of_js
                                                                Error.t_of_js
                                                                x190)
                                                              ~bytes:(
                                                              Ojs.float_of_js
                                                                x192)))|])
                                         | None -> ());
                                        x188))|])
        let (send'''' :
          t ->
            msg:Uint8Array.t or_string ->
              offset:float ->
                length:float ->
                  ?port:float ->
                    ?callback:(error:Error.t or_null -> bytes:float -> unit)
                      -> unit -> unit)
          =
          fun (x210 : t) ->
            fun ~msg:(x198 : Uint8Array.t or_string) ->
              fun ~offset:(x199 : float) ->
                fun ~length:(x200 : float) ->
                  fun ?port:(x201 : float option) ->
                    fun
                      ?callback:(x202 :
                                  (error:Error.t or_null ->
                                     bytes:float -> unit)
                                    option)
                      ->
                      fun () ->
                        ignore
                          (let x211 = t_to_js x210 in
                           Ojs.call (Ojs.get_prop_ascii x211 "send") "apply"
                             [|x211;((let x203 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x203 "push"
                                           [|(or_string_to_js
                                                Uint8Array.t_to_js x198)|]);
                                      ignore
                                        (Ojs.call x203 "push"
                                           [|(Ojs.float_to_js x199)|]);
                                      ignore
                                        (Ojs.call x203 "push"
                                           [|(Ojs.float_to_js x200)|]);
                                      (match x201 with
                                       | Some x208 ->
                                           ignore
                                             (Ojs.call x203 "push"
                                                [|(Ojs.float_to_js x208)|])
                                       | None -> ());
                                      (match x202 with
                                       | Some x204 ->
                                           ignore
                                             (Ojs.call x203 "push"
                                                [|(Ojs.fun_to_js 2
                                                     (fun (x205 : Ojs.t) ->
                                                        fun (x207 : Ojs.t) ->
                                                          x204
                                                            ~error:(or_null_of_js
                                                                    Error.t_of_js
                                                                    x205)
                                                            ~bytes:(Ojs.float_of_js
                                                                    x207)))|])
                                       | None -> ());
                                      x203))|])
        let (send''''' :
          t ->
            msg:Uint8Array.t or_string ->
              offset:float ->
                length:float ->
                  ?callback:(error:Error.t or_null -> bytes:float -> unit) ->
                    unit -> unit)
          =
          fun (x222 : t) ->
            fun ~msg:(x212 : Uint8Array.t or_string) ->
              fun ~offset:(x213 : float) ->
                fun ~length:(x214 : float) ->
                  fun
                    ?callback:(x215 :
                                (error:Error.t or_null -> bytes:float -> unit)
                                  option)
                    ->
                    fun () ->
                      ignore
                        (let x223 = t_to_js x222 in
                         Ojs.call (Ojs.get_prop_ascii x223 "send") "apply"
                           [|x223;((let x216 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x216 "push"
                                         [|(or_string_to_js
                                              Uint8Array.t_to_js x212)|]);
                                    ignore
                                      (Ojs.call x216 "push"
                                         [|(Ojs.float_to_js x213)|]);
                                    ignore
                                      (Ojs.call x216 "push"
                                         [|(Ojs.float_to_js x214)|]);
                                    (match x215 with
                                     | Some x217 ->
                                         ignore
                                           (Ojs.call x216 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x218 : Ojs.t) ->
                                                      fun (x220 : Ojs.t) ->
                                                        x217
                                                          ~error:(or_null_of_js
                                                                    Error.t_of_js
                                                                    x218)
                                                          ~bytes:(Ojs.float_of_js
                                                                    x220)))|])
                                     | None -> ());
                                    x216))|])
        let (setBroadcast : t -> flag:bool -> unit) =
          fun (x225 : t) ->
            fun ~flag:(x224 : bool) ->
              ignore
                (Ojs.call (t_to_js x225) "setBroadcast"
                   [|(Ojs.bool_to_js x224)|])
        let (setMulticastInterface : t -> multicastInterface:string -> unit)
          =
          fun (x227 : t) ->
            fun ~multicastInterface:(x226 : string) ->
              ignore
                (Ojs.call (t_to_js x227) "setMulticastInterface"
                   [|(Ojs.string_to_js x226)|])
        let (setMulticastLoopback : t -> flag:bool -> unit) =
          fun (x229 : t) ->
            fun ~flag:(x228 : bool) ->
              ignore
                (Ojs.call (t_to_js x229) "setMulticastLoopback"
                   [|(Ojs.bool_to_js x228)|])
        let (setMulticastTTL : t -> ttl:float -> unit) =
          fun (x231 : t) ->
            fun ~ttl:(x230 : float) ->
              ignore
                (Ojs.call (t_to_js x231) "setMulticastTTL"
                   [|(Ojs.float_to_js x230)|])
        let (setRecvBufferSize : t -> size:float -> unit) =
          fun (x233 : t) ->
            fun ~size:(x232 : float) ->
              ignore
                (Ojs.call (t_to_js x233) "setRecvBufferSize"
                   [|(Ojs.float_to_js x232)|])
        let (setSendBufferSize : t -> size:float -> unit) =
          fun (x235 : t) ->
            fun ~size:(x234 : float) ->
              ignore
                (Ojs.call (t_to_js x235) "setSendBufferSize"
                   [|(Ojs.float_to_js x234)|])
        let (setTTL : t -> ttl:float -> unit) =
          fun (x237 : t) ->
            fun ~ttl:(x236 : float) ->
              ignore
                (Ojs.call (t_to_js x237) "setTTL" [|(Ojs.float_to_js x236)|])
        let (unref : t -> t) =
          fun (x238 : t) -> t_of_js (Ojs.call (t_to_js x238) "unref" [||])
        let (addSourceSpecificMembership :
          t ->
            sourceAddress:string ->
              groupAddress:string ->
                ?multicastInterface:string -> unit -> unit)
          =
          fun (x244 : t) ->
            fun ~sourceAddress:(x239 : string) ->
              fun ~groupAddress:(x240 : string) ->
                fun ?multicastInterface:(x241 : string option) ->
                  fun () ->
                    ignore
                      (let x245 = t_to_js x244 in
                       Ojs.call
                         (Ojs.get_prop_ascii x245
                            "addSourceSpecificMembership") "apply"
                         [|x245;((let x242 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x242 "push"
                                       [|(Ojs.string_to_js x239)|]);
                                  ignore
                                    (Ojs.call x242 "push"
                                       [|(Ojs.string_to_js x240)|]);
                                  (match x241 with
                                   | Some x243 ->
                                       ignore
                                         (Ojs.call x242 "push"
                                            [|(Ojs.string_to_js x243)|])
                                   | None -> ());
                                  x242))|])
        let (dropSourceSpecificMembership :
          t ->
            sourceAddress:string ->
              groupAddress:string ->
                ?multicastInterface:string -> unit -> unit)
          =
          fun (x251 : t) ->
            fun ~sourceAddress:(x246 : string) ->
              fun ~groupAddress:(x247 : string) ->
                fun ?multicastInterface:(x248 : string option) ->
                  fun () ->
                    ignore
                      (let x252 = t_to_js x251 in
                       Ojs.call
                         (Ojs.get_prop_ascii x252
                            "dropSourceSpecificMembership") "apply"
                         [|x252;((let x249 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x249 "push"
                                       [|(Ojs.string_to_js x246)|]);
                                  ignore
                                    (Ojs.call x249 "push"
                                       [|(Ojs.string_to_js x247)|]);
                                  (match x248 with
                                   | Some x250 ->
                                       ignore
                                         (Ojs.call x249 "push"
                                            [|(Ojs.string_to_js x250)|])
                                   | None -> ());
                                  x249))|])
        let (addListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x257 : t) ->
            fun ~event:(x253 : string) ->
              fun ~listener:(x254 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x257) "addListener"
                     [|(Ojs.string_to_js x253);(Ojs.fun_to_js_args
                                                  (fun (x255 : _) ->
                                                     x254
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x255 0)))|])
        let (addListener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x260 : t) ->
            fun ~event:(x258 : [ `close ]) ->
              fun ~listener:(x259 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x260) "addListener"
                     [|((match x258 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x259 ()))|])
        let (addListener'' :
          t -> event:[ `connect ] -> listener:(unit -> unit) -> t) =
          fun (x263 : t) ->
            fun ~event:(x261 : [ `connect ]) ->
              fun ~listener:(x262 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x263) "addListener"
                     [|((match x261 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x262 ()))|])
        let (addListener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x267 : t) ->
            fun ~event:(x264 : [ `error ]) ->
              fun ~listener:(x265 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x267) "addListener"
                     [|((match x264 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x266 : Ojs.t) ->
                            x265 ~err:(Error.t_of_js x266)))|])
        let (addListener'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x270 : t) ->
            fun ~event:(x268 : [ `listening ]) ->
              fun ~listener:(x269 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x270) "addListener"
                     [|((match x268 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x269 ()))|])
        let (addListener''''' :
          t ->
            event:[ `message ] ->
              listener:(msg:Buffer.t -> rinfo:dgram_RemoteInfo -> unit) -> t)
          =
          fun (x275 : t) ->
            fun ~event:(x271 : [ `message ]) ->
              fun
                ~listener:(x272 :
                            msg:Buffer.t -> rinfo:dgram_RemoteInfo -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x275) "addListener"
                     [|((match x271 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x273 : Ojs.t) ->
                            fun (x274 : Ojs.t) ->
                              x272 ~msg:(Buffer.t_of_js x273)
                                ~rinfo:(dgram_RemoteInfo_of_js x274)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x281 : t) ->
            fun ~event:(x276 : symbol or_string) ->
              fun ~args:(x277 : any list) ->
                Ojs.bool_of_js
                  (let x282 = t_to_js x281 in
                   Ojs.call (Ojs.get_prop_ascii x282 "emit") "apply"
                     [|x282;((let x278 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x278 "push"
                                   [|(or_string_to_js symbol_to_js x276)|]);
                              List.iter
                                (fun (x279 : any) ->
                                   ignore
                                     (Ojs.call x278 "push"
                                        [|(any_to_js x279)|])) x277;
                              x278))|])
        let (emit' : t -> event:[ `close ] -> bool) =
          fun (x284 : t) ->
            fun ~event:(x283 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x284) "emit"
                   [|((match x283 with | `close -> Ojs.string_to_js "close"))|])
        let (emit'' : t -> event:[ `connect ] -> bool) =
          fun (x286 : t) ->
            fun ~event:(x285 : [ `connect ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x286) "emit"
                   [|((match x285 with
                       | `connect -> Ojs.string_to_js "connect"))|])
        let (emit''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x289 : t) ->
            fun ~event:(x287 : [ `error ]) ->
              fun ~err:(x288 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x289) "emit"
                     [|((match x287 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x288)|])
        let (emit'''' : t -> event:[ `listening ] -> bool) =
          fun (x291 : t) ->
            fun ~event:(x290 : [ `listening ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x291) "emit"
                   [|((match x290 with
                       | `listening -> Ojs.string_to_js "listening"))|])
        let (emit''''' :
          t ->
            event:[ `message ] ->
              msg:Buffer.t -> rinfo:dgram_RemoteInfo -> bool)
          =
          fun (x295 : t) ->
            fun ~event:(x292 : [ `message ]) ->
              fun ~msg:(x293 : Buffer.t) ->
                fun ~rinfo:(x294 : dgram_RemoteInfo) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x295) "emit"
                       [|((match x292 with
                           | `message -> Ojs.string_to_js "message"));(
                         Buffer.t_to_js x293);(dgram_RemoteInfo_to_js x294)|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x300 : t) ->
            fun ~event:(x296 : string) ->
              fun ~listener:(x297 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x300) "on"
                     [|(Ojs.string_to_js x296);(Ojs.fun_to_js_args
                                                  (fun (x298 : _) ->
                                                     x297
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x298 0)))|])
        let (on' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x303 : t) ->
            fun ~event:(x301 : [ `close ]) ->
              fun ~listener:(x302 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x303) "on"
                     [|((match x301 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x302 ()))|])
        let (on'' : t -> event:[ `connect ] -> listener:(unit -> unit) -> t)
          =
          fun (x306 : t) ->
            fun ~event:(x304 : [ `connect ]) ->
              fun ~listener:(x305 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x306) "on"
                     [|((match x304 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x305 ()))|])
        let (on''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x310 : t) ->
            fun ~event:(x307 : [ `error ]) ->
              fun ~listener:(x308 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x310) "on"
                     [|((match x307 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x309 : Ojs.t) ->
                            x308 ~err:(Error.t_of_js x309)))|])
        let (on'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x313 : t) ->
            fun ~event:(x311 : [ `listening ]) ->
              fun ~listener:(x312 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x313) "on"
                     [|((match x311 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x312 ()))|])
        let (on''''' :
          t ->
            event:[ `message ] ->
              listener:(msg:Buffer.t -> rinfo:dgram_RemoteInfo -> unit) -> t)
          =
          fun (x318 : t) ->
            fun ~event:(x314 : [ `message ]) ->
              fun
                ~listener:(x315 :
                            msg:Buffer.t -> rinfo:dgram_RemoteInfo -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x318) "on"
                     [|((match x314 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x316 : Ojs.t) ->
                            fun (x317 : Ojs.t) ->
                              x315 ~msg:(Buffer.t_of_js x316)
                                ~rinfo:(dgram_RemoteInfo_of_js x317)))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x323 : t) ->
            fun ~event:(x319 : string) ->
              fun ~listener:(x320 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x323) "once"
                     [|(Ojs.string_to_js x319);(Ojs.fun_to_js_args
                                                  (fun (x321 : _) ->
                                                     x320
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x321 0)))|])
        let (once' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x326 : t) ->
            fun ~event:(x324 : [ `close ]) ->
              fun ~listener:(x325 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x326) "once"
                     [|((match x324 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x325 ()))|])
        let (once'' :
          t -> event:[ `connect ] -> listener:(unit -> unit) -> t) =
          fun (x329 : t) ->
            fun ~event:(x327 : [ `connect ]) ->
              fun ~listener:(x328 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x329) "once"
                     [|((match x327 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x328 ()))|])
        let (once''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x333 : t) ->
            fun ~event:(x330 : [ `error ]) ->
              fun ~listener:(x331 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x333) "once"
                     [|((match x330 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x332 : Ojs.t) ->
                            x331 ~err:(Error.t_of_js x332)))|])
        let (once'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x336 : t) ->
            fun ~event:(x334 : [ `listening ]) ->
              fun ~listener:(x335 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x336) "once"
                     [|((match x334 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x335 ()))|])
        let (once''''' :
          t ->
            event:[ `message ] ->
              listener:(msg:Buffer.t -> rinfo:dgram_RemoteInfo -> unit) -> t)
          =
          fun (x341 : t) ->
            fun ~event:(x337 : [ `message ]) ->
              fun
                ~listener:(x338 :
                            msg:Buffer.t -> rinfo:dgram_RemoteInfo -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x341) "once"
                     [|((match x337 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x339 : Ojs.t) ->
                            fun (x340 : Ojs.t) ->
                              x338 ~msg:(Buffer.t_of_js x339)
                                ~rinfo:(dgram_RemoteInfo_of_js x340)))|])
        let (prependListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x346 : t) ->
            fun ~event:(x342 : string) ->
              fun ~listener:(x343 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x346) "prependListener"
                     [|(Ojs.string_to_js x342);(Ojs.fun_to_js_args
                                                  (fun (x344 : _) ->
                                                     x343
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x344 0)))|])
        let (prependListener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x349 : t) ->
            fun ~event:(x347 : [ `close ]) ->
              fun ~listener:(x348 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x349) "prependListener"
                     [|((match x347 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x348 ()))|])
        let (prependListener'' :
          t -> event:[ `connect ] -> listener:(unit -> unit) -> t) =
          fun (x352 : t) ->
            fun ~event:(x350 : [ `connect ]) ->
              fun ~listener:(x351 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x352) "prependListener"
                     [|((match x350 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x351 ()))|])
        let (prependListener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x356 : t) ->
            fun ~event:(x353 : [ `error ]) ->
              fun ~listener:(x354 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x356) "prependListener"
                     [|((match x353 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x355 : Ojs.t) ->
                            x354 ~err:(Error.t_of_js x355)))|])
        let (prependListener'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x359 : t) ->
            fun ~event:(x357 : [ `listening ]) ->
              fun ~listener:(x358 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x359) "prependListener"
                     [|((match x357 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x358 ()))|])
        let (prependListener''''' :
          t ->
            event:[ `message ] ->
              listener:(msg:Buffer.t -> rinfo:dgram_RemoteInfo -> unit) -> t)
          =
          fun (x364 : t) ->
            fun ~event:(x360 : [ `message ]) ->
              fun
                ~listener:(x361 :
                            msg:Buffer.t -> rinfo:dgram_RemoteInfo -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x364) "prependListener"
                     [|((match x360 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x362 : Ojs.t) ->
                            fun (x363 : Ojs.t) ->
                              x361 ~msg:(Buffer.t_of_js x362)
                                ~rinfo:(dgram_RemoteInfo_of_js x363)))|])
        let (prependOnceListener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x369 : t) ->
            fun ~event:(x365 : string) ->
              fun ~listener:(x366 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x369) "prependOnceListener"
                     [|(Ojs.string_to_js x365);(Ojs.fun_to_js_args
                                                  (fun (x367 : _) ->
                                                     x366
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x367 0)))|])
        let (prependOnceListener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x372 : t) ->
            fun ~event:(x370 : [ `close ]) ->
              fun ~listener:(x371 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x372) "prependOnceListener"
                     [|((match x370 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x371 ()))|])
        let (prependOnceListener'' :
          t -> event:[ `connect ] -> listener:(unit -> unit) -> t) =
          fun (x375 : t) ->
            fun ~event:(x373 : [ `connect ]) ->
              fun ~listener:(x374 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x375) "prependOnceListener"
                     [|((match x373 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x374 ()))|])
        let (prependOnceListener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x379 : t) ->
            fun ~event:(x376 : [ `error ]) ->
              fun ~listener:(x377 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x379) "prependOnceListener"
                     [|((match x376 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x378 : Ojs.t) ->
                            x377 ~err:(Error.t_of_js x378)))|])
        let (prependOnceListener'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x382 : t) ->
            fun ~event:(x380 : [ `listening ]) ->
              fun ~listener:(x381 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x382) "prependOnceListener"
                     [|((match x380 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x381 ()))|])
        let (prependOnceListener''''' :
          t ->
            event:[ `message ] ->
              listener:(msg:Buffer.t -> rinfo:dgram_RemoteInfo -> unit) -> t)
          =
          fun (x387 : t) ->
            fun ~event:(x383 : [ `message ]) ->
              fun
                ~listener:(x384 :
                            msg:Buffer.t -> rinfo:dgram_RemoteInfo -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x387) "prependOnceListener"
                     [|((match x383 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x385 : Ojs.t) ->
                            fun (x386 : Ojs.t) ->
                              x384 ~msg:(Buffer.t_of_js x385)
                                ~rinfo:(dgram_RemoteInfo_of_js x386)))|])
        let (cast : t -> Node_events.Events.EventEmitter.t) =
          fun (x388 : t) ->
            Node_events.Events.EventEmitter.t_of_js (t_to_js x388)
      end
  end
