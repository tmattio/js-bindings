[@@@js.dummy "!! This code has been generated by gen_js_api !!"]
[@@@ocaml.warning "-7-32-39"]
[@@@ocaml.warning "-7-11-32-33-39"]
open Es2020
open Node_globals
module Dgram =
  struct
    open Node_dns
    module RemoteInfo =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x2 : Ojs.t) -> x2
        and t_to_js : t -> Ojs.t = fun (x1 : Ojs.t) -> x1
        let (get_address : t -> string) =
          fun (x3 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x3) "address")
        let (set_address : t -> string -> unit) =
          fun (x4 : t) ->
            fun (x5 : string) ->
              Ojs.set_prop_ascii (t_to_js x4) "address" (Ojs.string_to_js x5)
        let (get_family : t -> [ `IPv4  | `IPv6 ]) =
          fun (x6 : t) ->
            let x7 = Ojs.get_prop_ascii (t_to_js x6) "family" in
            match Ojs.string_of_js x7 with
            | "IPv4" -> `IPv4
            | "IPv6" -> `IPv6
            | _ -> assert false
        let (set_family : t -> [ `IPv4  | `IPv6 ] -> unit) =
          fun (x8 : t) ->
            fun (x9 : [ `IPv4  | `IPv6 ]) ->
              Ojs.set_prop_ascii (t_to_js x8) "family"
                (match x9 with
                 | `IPv4 -> Ojs.string_to_js "IPv4"
                 | `IPv6 -> Ojs.string_to_js "IPv6")
        let (get_port : t -> int) =
          fun (x10 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x10) "port")
        let (set_port : t -> int -> unit) =
          fun (x11 : t) ->
            fun (x12 : int) ->
              Ojs.set_prop_ascii (t_to_js x11) "port" (Ojs.int_to_js x12)
        let (get_size : t -> int) =
          fun (x13 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x13) "size")
        let (set_size : t -> int -> unit) =
          fun (x14 : t) ->
            fun (x15 : int) ->
              Ojs.set_prop_ascii (t_to_js x14) "size" (Ojs.int_to_js x15)
      end
    module BindOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x17 : Ojs.t) -> x17
        and t_to_js : t -> Ojs.t = fun (x16 : Ojs.t) -> x16
        let (get_port : t -> int) =
          fun (x18 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x18) "port")
        let (set_port : t -> int -> unit) =
          fun (x19 : t) ->
            fun (x20 : int) ->
              Ojs.set_prop_ascii (t_to_js x19) "port" (Ojs.int_to_js x20)
        let (get_address : t -> string) =
          fun (x21 : t) ->
            Ojs.string_of_js (Ojs.get_prop_ascii (t_to_js x21) "address")
        let (set_address : t -> string -> unit) =
          fun (x22 : t) ->
            fun (x23 : string) ->
              Ojs.set_prop_ascii (t_to_js x22) "address"
                (Ojs.string_to_js x23)
        let (get_exclusive : t -> bool) =
          fun (x24 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x24) "exclusive")
        let (set_exclusive : t -> bool -> unit) =
          fun (x25 : t) ->
            fun (x26 : bool) ->
              Ojs.set_prop_ascii (t_to_js x25) "exclusive"
                (Ojs.bool_to_js x26)
        let (get_fd : t -> int) =
          fun (x27 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x27) "fd")
        let (set_fd : t -> int -> unit) =
          fun (x28 : t) ->
            fun (x29 : int) ->
              Ojs.set_prop_ascii (t_to_js x28) "fd" (Ojs.int_to_js x29)
      end
    module SocketType =
      struct
        type t = [ `udp4  | `udp6 ]
        let rec t_of_js : Ojs.t -> t =
          fun (x31 : Ojs.t) ->
            let x32 = x31 in
            match Ojs.string_of_js x32 with
            | "udp4" -> `udp4
            | "udp6" -> `udp6
            | _ -> assert false
        and t_to_js : t -> Ojs.t =
          fun (x30 : [ `udp4  | `udp6 ]) ->
            match x30 with
            | `udp4 -> Ojs.string_to_js "udp4"
            | `udp6 -> Ojs.string_to_js "udp6"
      end
    module SocketOptions =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x34 : Ojs.t) -> x34
        and t_to_js : t -> Ojs.t = fun (x33 : Ojs.t) -> x33
        let (get_type : t -> SocketType.t) =
          fun (x35 : t) ->
            SocketType.t_of_js (Ojs.get_prop_ascii (t_to_js x35) "type")
        let (set_type : t -> SocketType.t -> unit) =
          fun (x36 : t) ->
            fun (x37 : SocketType.t) ->
              Ojs.set_prop_ascii (t_to_js x36) "type"
                (SocketType.t_to_js x37)
        let (get_reuse_addr : t -> bool) =
          fun (x38 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x38) "reuseAddr")
        let (set_reuse_addr : t -> bool -> unit) =
          fun (x39 : t) ->
            fun (x40 : bool) ->
              Ojs.set_prop_ascii (t_to_js x39) "reuseAddr"
                (Ojs.bool_to_js x40)
        let (get_ipv6Only : t -> bool) =
          fun (x41 : t) ->
            Ojs.bool_of_js (Ojs.get_prop_ascii (t_to_js x41) "ipv6Only")
        let (set_ipv6Only : t -> bool -> unit) =
          fun (x42 : t) ->
            fun (x43 : bool) ->
              Ojs.set_prop_ascii (t_to_js x42) "ipv6Only"
                (Ojs.bool_to_js x43)
        let (get_recv_buffer_size : t -> int) =
          fun (x44 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x44) "recvBufferSize")
        let (set_recv_buffer_size : t -> int -> unit) =
          fun (x45 : t) ->
            fun (x46 : int) ->
              Ojs.set_prop_ascii (t_to_js x45) "recvBufferSize"
                (Ojs.int_to_js x46)
        let (get_send_buffer_size : t -> int) =
          fun (x47 : t) ->
            Ojs.int_of_js (Ojs.get_prop_ascii (t_to_js x47) "sendBufferSize")
        let (set_send_buffer_size : t -> int -> unit) =
          fun (x48 : t) ->
            fun (x49 : int) ->
              Ojs.set_prop_ascii (t_to_js x48) "sendBufferSize"
                (Ojs.int_to_js x49)
        let (lookup :
          t ->
            hostname:string ->
              options:Dns.LookupOneOptions.t ->
                callback:(err:ErrnoException.t or_null ->
                            address:string -> family:int -> unit)
                  -> unit)
          =
          fun (x57 : t) ->
            fun ~hostname:(x50 : string) ->
              fun ~options:(x51 : Dns.LookupOneOptions.t) ->
                fun
                  ~callback:(x52 :
                              err:ErrnoException.t or_null ->
                                address:string -> family:int -> unit)
                  ->
                  ignore
                    (Ojs.call (t_to_js x57) "lookup"
                       [|(Ojs.string_to_js x50);(Dns.LookupOneOptions.t_to_js
                                                   x51);(Ojs.fun_to_js 3
                                                           (fun (x53 : Ojs.t)
                                                              ->
                                                              fun
                                                                (x55 : Ojs.t)
                                                                ->
                                                                fun
                                                                  (x56 :
                                                                    Ojs.t)
                                                                  ->
                                                                  x52
                                                                    ~err:(
                                                                    or_null_of_js
                                                                    ErrnoException.t_of_js
                                                                    x53)
                                                                    ~address:(
                                                                    Ojs.string_of_js
                                                                    x55)
                                                                    ~family:(
                                                                    Ojs.int_of_js
                                                                    x56)))|])
      end
    let (create_socket :
      type_:SocketType.t ->
        ?callback:(msg:Buffer.t -> rinfo:RemoteInfo.t -> unit) ->
          unit -> Socket.t)
      =
      fun ~type_:(x58 : SocketType.t) ->
        fun
          ?callback:(x59 :
                      (msg:Buffer.t -> rinfo:RemoteInfo.t -> unit) option)
          ->
          fun () ->
            Socket.t_of_js
              (let x64 = Import.dgram in
               Ojs.call (Ojs.get_prop_ascii x64 "createSocket") "apply"
                 [|x64;((let x60 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         ignore
                           (Ojs.call x60 "push" [|(SocketType.t_to_js x58)|]);
                         (match x59 with
                          | Some x61 ->
                              ignore
                                (Ojs.call x60 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x62 : Ojs.t) ->
                                           fun (x63 : Ojs.t) ->
                                             x61 ~msg:(Buffer.t_of_js x62)
                                               ~rinfo:(RemoteInfo.t_of_js x63)))|])
                          | None -> ());
                         x60))|])
    let (create_socket :
      options:SocketOptions.t ->
        ?callback:(msg:Buffer.t -> rinfo:RemoteInfo.t -> unit) ->
          unit -> Socket.t)
      =
      fun ~options:(x65 : SocketOptions.t) ->
        fun
          ?callback:(x66 :
                      (msg:Buffer.t -> rinfo:RemoteInfo.t -> unit) option)
          ->
          fun () ->
            Socket.t_of_js
              (let x71 = Import.dgram in
               Ojs.call (Ojs.get_prop_ascii x71 "createSocket") "apply"
                 [|x71;((let x67 =
                           Ojs.new_obj
                             (Ojs.get_prop_ascii Ojs.global "Array") 
                             [||] in
                         ignore
                           (Ojs.call x67 "push"
                              [|(SocketOptions.t_to_js x65)|]);
                         (match x66 with
                          | Some x68 ->
                              ignore
                                (Ojs.call x67 "push"
                                   [|(Ojs.fun_to_js 2
                                        (fun (x69 : Ojs.t) ->
                                           fun (x70 : Ojs.t) ->
                                             x68 ~msg:(Buffer.t_of_js x69)
                                               ~rinfo:(RemoteInfo.t_of_js x70)))|])
                          | None -> ());
                         x67))|])
    module Socket =
      struct
        type t = Ojs.t
        let rec t_of_js : Ojs.t -> t = fun (x73 : Ojs.t) -> x73
        and t_to_js : t -> Ojs.t = fun (x72 : Ojs.t) -> x72
        let (add_membership :
          t ->
            multicast_address:string ->
              ?multicast_interface:string -> unit -> unit)
          =
          fun (x78 : t) ->
            fun ~multicast_address:(x74 : string) ->
              fun ?multicast_interface:(x75 : string option) ->
                fun () ->
                  ignore
                    (let x79 = t_to_js x78 in
                     Ojs.call (Ojs.get_prop_ascii x79 "addMembership")
                       "apply"
                       [|x79;((let x76 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               ignore
                                 (Ojs.call x76 "push"
                                    [|(Ojs.string_to_js x74)|]);
                               (match x75 with
                                | Some x77 ->
                                    ignore
                                      (Ojs.call x76 "push"
                                         [|(Ojs.string_to_js x77)|])
                                | None -> ());
                               x76))|])
        let (address : t -> Node_net.Net.AddressInfo.t) =
          fun (x80 : t) ->
            Node_net.Net.AddressInfo.t_of_js
              (Ojs.call (t_to_js x80) "address" [||])
        let (bind :
          t ->
            ?port:int ->
              ?address:string -> ?callback:(unit -> unit) -> unit -> unit)
          =
          fun (x88 : t) ->
            fun ?port:(x81 : int option) ->
              fun ?address:(x82 : string option) ->
                fun ?callback:(x83 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x89 = t_to_js x88 in
                       Ojs.call (Ojs.get_prop_ascii x89 "bind") "apply"
                         [|x89;((let x84 =
                                   Ojs.new_obj
                                     (Ojs.get_prop_ascii Ojs.global "Array")
                                     [||] in
                                 (match x81 with
                                  | Some x87 ->
                                      ignore
                                        (Ojs.call x84 "push"
                                           [|(Ojs.int_to_js x87)|])
                                  | None -> ());
                                 (match x82 with
                                  | Some x86 ->
                                      ignore
                                        (Ojs.call x84 "push"
                                           [|(Ojs.string_to_js x86)|])
                                  | None -> ());
                                 (match x83 with
                                  | Some x85 ->
                                      ignore
                                        (Ojs.call x84 "push"
                                           [|(Ojs.fun_to_js 1
                                                (fun _ -> x85 ()))|])
                                  | None -> ());
                                 x84))|])
        let (bind' :
          t -> ?port:int -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x95 : t) ->
            fun ?port:(x90 : int option) ->
              fun ?callback:(x91 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x96 = t_to_js x95 in
                     Ojs.call (Ojs.get_prop_ascii x96 "bind") "apply"
                       [|x96;((let x92 =
                                 Ojs.new_obj
                                   (Ojs.get_prop_ascii Ojs.global "Array")
                                   [||] in
                               (match x90 with
                                | Some x94 ->
                                    ignore
                                      (Ojs.call x92 "push"
                                         [|(Ojs.int_to_js x94)|])
                                | None -> ());
                               (match x91 with
                                | Some x93 ->
                                    ignore
                                      (Ojs.call x92 "push"
                                         [|(Ojs.fun_to_js 1 (fun _ -> x93 ()))|])
                                | None -> ());
                               x92))|])
        let (bind'' : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x100 : t) ->
            fun ?callback:(x97 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x101 = t_to_js x100 in
                   Ojs.call (Ojs.get_prop_ascii x101 "bind") "apply"
                     [|x101;((let x98 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x97 with
                               | Some x99 ->
                                   ignore
                                     (Ojs.call x98 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x99 ()))|])
                               | None -> ());
                              x98))|])
        let (bind''' :
          t ->
            options:BindOptions.t -> ?callback:(unit -> unit) -> unit -> unit)
          =
          fun (x106 : t) ->
            fun ~options:(x102 : BindOptions.t) ->
              fun ?callback:(x103 : (unit -> unit) option) ->
                fun () ->
                  ignore
                    (let x107 = t_to_js x106 in
                     Ojs.call (Ojs.get_prop_ascii x107 "bind") "apply"
                       [|x107;((let x104 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x104 "push"
                                     [|(BindOptions.t_to_js x102)|]);
                                (match x103 with
                                 | Some x105 ->
                                     ignore
                                       (Ojs.call x104 "push"
                                          [|(Ojs.fun_to_js 1
                                               (fun _ -> x105 ()))|])
                                 | None -> ());
                                x104))|])
        let (close : t -> ?callback:(unit -> unit) -> unit -> unit) =
          fun (x111 : t) ->
            fun ?callback:(x108 : (unit -> unit) option) ->
              fun () ->
                ignore
                  (let x112 = t_to_js x111 in
                   Ojs.call (Ojs.get_prop_ascii x112 "close") "apply"
                     [|x112;((let x109 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              (match x108 with
                               | Some x110 ->
                                   ignore
                                     (Ojs.call x109 "push"
                                        [|(Ojs.fun_to_js 1 (fun _ -> x110 ()))|])
                               | None -> ());
                              x109))|])
        let (connect :
          t ->
            port:int ->
              ?address:string -> ?callback:(unit -> unit) -> unit -> unit)
          =
          fun (x119 : t) ->
            fun ~port:(x113 : int) ->
              fun ?address:(x114 : string option) ->
                fun ?callback:(x115 : (unit -> unit) option) ->
                  fun () ->
                    ignore
                      (let x120 = t_to_js x119 in
                       Ojs.call (Ojs.get_prop_ascii x120 "connect") "apply"
                         [|x120;((let x116 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x116 "push"
                                       [|(Ojs.int_to_js x113)|]);
                                  (match x114 with
                                   | Some x118 ->
                                       ignore
                                         (Ojs.call x116 "push"
                                            [|(Ojs.string_to_js x118)|])
                                   | None -> ());
                                  (match x115 with
                                   | Some x117 ->
                                       ignore
                                         (Ojs.call x116 "push"
                                            [|(Ojs.fun_to_js 1
                                                 (fun _ -> x117 ()))|])
                                   | None -> ());
                                  x116))|])
        let (connect' : t -> port:int -> callback:(unit -> unit) -> unit) =
          fun (x123 : t) ->
            fun ~port:(x121 : int) ->
              fun ~callback:(x122 : unit -> unit) ->
                ignore
                  (Ojs.call (t_to_js x123) "connect"
                     [|(Ojs.int_to_js x121);(Ojs.fun_to_js 1
                                               (fun _ -> x122 ()))|])
        let (disconnect : t -> unit) =
          fun (x124 : t) ->
            ignore (Ojs.call (t_to_js x124) "disconnect" [||])
        let (drop_membership :
          t ->
            multicast_address:string ->
              ?multicast_interface:string -> unit -> unit)
          =
          fun (x129 : t) ->
            fun ~multicast_address:(x125 : string) ->
              fun ?multicast_interface:(x126 : string option) ->
                fun () ->
                  ignore
                    (let x130 = t_to_js x129 in
                     Ojs.call (Ojs.get_prop_ascii x130 "dropMembership")
                       "apply"
                       [|x130;((let x127 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x127 "push"
                                     [|(Ojs.string_to_js x125)|]);
                                (match x126 with
                                 | Some x128 ->
                                     ignore
                                       (Ojs.call x127 "push"
                                          [|(Ojs.string_to_js x128)|])
                                 | None -> ());
                                x127))|])
        let (get_recv_buffer_size : t -> int) =
          fun (x131 : t) ->
            Ojs.int_of_js (Ojs.call (t_to_js x131) "getRecvBufferSize" [||])
        let (get_send_buffer_size : t -> int) =
          fun (x132 : t) ->
            Ojs.int_of_js (Ojs.call (t_to_js x132) "getSendBufferSize" [||])
        let (ref : t -> t) =
          fun (x133 : t) -> t_of_js (Ojs.call (t_to_js x133) "ref" [||])
        let (remote_address : t -> Node_net.Net.AddressInfo.t) =
          fun (x134 : t) ->
            Node_net.Net.AddressInfo.t_of_js
              (Ojs.call (t_to_js x134) "remoteAddress" [||])
        let (send :
          t ->
            msg:(Uint8Array.t, any list) union2 or_string ->
              ?port:int ->
                ?address:string ->
                  ?callback:(error:Error.t or_null -> bytes:int -> unit) ->
                    unit -> unit)
          =
          fun (x150 : t) ->
            fun ~msg:(x135 : (Uint8Array.t, any list) union2 or_string) ->
              fun ?port:(x136 : int option) ->
                fun ?address:(x137 : string option) ->
                  fun
                    ?callback:(x138 :
                                (error:Error.t or_null -> bytes:int -> unit)
                                  option)
                    ->
                    fun () ->
                      ignore
                        (let x151 = t_to_js x150 in
                         Ojs.call (Ojs.get_prop_ascii x151 "send") "apply"
                           [|x151;((let x139 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x139 "push"
                                         [|(or_string_to_js
                                              (fun
                                                 (x146 :
                                                   (Uint8Array.t, any list)
                                                     union2)
                                                 ->
                                                 union2_to_js
                                                   Uint8Array.t_to_js
                                                   (fun (x148 : any list) ->
                                                      Ojs.list_to_js
                                                        any_to_js x148) x146)
                                              x135)|]);
                                    (match x136 with
                                     | Some x145 ->
                                         ignore
                                           (Ojs.call x139 "push"
                                              [|(Ojs.int_to_js x145)|])
                                     | None -> ());
                                    (match x137 with
                                     | Some x144 ->
                                         ignore
                                           (Ojs.call x139 "push"
                                              [|(Ojs.string_to_js x144)|])
                                     | None -> ());
                                    (match x138 with
                                     | Some x140 ->
                                         ignore
                                           (Ojs.call x139 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x141 : Ojs.t) ->
                                                      fun (x143 : Ojs.t) ->
                                                        x140
                                                          ~error:(or_null_of_js
                                                                    Error.t_of_js
                                                                    x141)
                                                          ~bytes:(Ojs.int_of_js
                                                                    x143)))|])
                                     | None -> ());
                                    x139))|])
        let (send' :
          t ->
            msg:(Uint8Array.t, any list) union2 or_string ->
              ?port:int ->
                ?callback:(error:Error.t or_null -> bytes:int -> unit) ->
                  unit -> unit)
          =
          fun (x165 : t) ->
            fun ~msg:(x152 : (Uint8Array.t, any list) union2 or_string) ->
              fun ?port:(x153 : int option) ->
                fun
                  ?callback:(x154 :
                              (error:Error.t or_null -> bytes:int -> unit)
                                option)
                  ->
                  fun () ->
                    ignore
                      (let x166 = t_to_js x165 in
                       Ojs.call (Ojs.get_prop_ascii x166 "send") "apply"
                         [|x166;((let x155 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x155 "push"
                                       [|(or_string_to_js
                                            (fun
                                               (x161 :
                                                 (Uint8Array.t, any list)
                                                   union2)
                                               ->
                                               union2_to_js
                                                 Uint8Array.t_to_js
                                                 (fun (x163 : any list) ->
                                                    Ojs.list_to_js any_to_js
                                                      x163) x161) x152)|]);
                                  (match x153 with
                                   | Some x160 ->
                                       ignore
                                         (Ojs.call x155 "push"
                                            [|(Ojs.int_to_js x160)|])
                                   | None -> ());
                                  (match x154 with
                                   | Some x156 ->
                                       ignore
                                         (Ojs.call x155 "push"
                                            [|(Ojs.fun_to_js 2
                                                 (fun (x157 : Ojs.t) ->
                                                    fun (x159 : Ojs.t) ->
                                                      x156
                                                        ~error:(or_null_of_js
                                                                  Error.t_of_js
                                                                  x157)
                                                        ~bytes:(Ojs.int_of_js
                                                                  x159)))|])
                                   | None -> ());
                                  x155))|])
        let (send'' :
          t ->
            msg:(Uint8Array.t, any list) union2 or_string ->
              ?callback:(error:Error.t or_null -> bytes:int -> unit) ->
                unit -> unit)
          =
          fun (x178 : t) ->
            fun ~msg:(x167 : (Uint8Array.t, any list) union2 or_string) ->
              fun
                ?callback:(x168 :
                            (error:Error.t or_null -> bytes:int -> unit)
                              option)
                ->
                fun () ->
                  ignore
                    (let x179 = t_to_js x178 in
                     Ojs.call (Ojs.get_prop_ascii x179 "send") "apply"
                       [|x179;((let x169 =
                                  Ojs.new_obj
                                    (Ojs.get_prop_ascii Ojs.global "Array")
                                    [||] in
                                ignore
                                  (Ojs.call x169 "push"
                                     [|(or_string_to_js
                                          (fun
                                             (x174 :
                                               (Uint8Array.t, any list)
                                                 union2)
                                             ->
                                             union2_to_js Uint8Array.t_to_js
                                               (fun (x176 : any list) ->
                                                  Ojs.list_to_js any_to_js
                                                    x176) x174) x167)|]);
                                (match x168 with
                                 | Some x170 ->
                                     ignore
                                       (Ojs.call x169 "push"
                                          [|(Ojs.fun_to_js 2
                                               (fun (x171 : Ojs.t) ->
                                                  fun (x173 : Ojs.t) ->
                                                    x170
                                                      ~error:(or_null_of_js
                                                                Error.t_of_js
                                                                x171)
                                                      ~bytes:(Ojs.int_of_js
                                                                x173)))|])
                                 | None -> ());
                                x169))|])
        let (send''' :
          t ->
            msg:Uint8Array.t or_string ->
              offset:int ->
                length:int ->
                  ?port:int ->
                    ?address:string ->
                      ?callback:(error:Error.t or_null -> bytes:int -> unit)
                        -> unit -> unit)
          =
          fun (x194 : t) ->
            fun ~msg:(x180 : Uint8Array.t or_string) ->
              fun ~offset:(x181 : int) ->
                fun ~length:(x182 : int) ->
                  fun ?port:(x183 : int option) ->
                    fun ?address:(x184 : string option) ->
                      fun
                        ?callback:(x185 :
                                    (error:Error.t or_null ->
                                       bytes:int -> unit)
                                      option)
                        ->
                        fun () ->
                          ignore
                            (let x195 = t_to_js x194 in
                             Ojs.call (Ojs.get_prop_ascii x195 "send")
                               "apply"
                               [|x195;((let x186 =
                                          Ojs.new_obj
                                            (Ojs.get_prop_ascii Ojs.global
                                               "Array") [||] in
                                        ignore
                                          (Ojs.call x186 "push"
                                             [|(or_string_to_js
                                                  Uint8Array.t_to_js x180)|]);
                                        ignore
                                          (Ojs.call x186 "push"
                                             [|(Ojs.int_to_js x181)|]);
                                        ignore
                                          (Ojs.call x186 "push"
                                             [|(Ojs.int_to_js x182)|]);
                                        (match x183 with
                                         | Some x192 ->
                                             ignore
                                               (Ojs.call x186 "push"
                                                  [|(Ojs.int_to_js x192)|])
                                         | None -> ());
                                        (match x184 with
                                         | Some x191 ->
                                             ignore
                                               (Ojs.call x186 "push"
                                                  [|(Ojs.string_to_js x191)|])
                                         | None -> ());
                                        (match x185 with
                                         | Some x187 ->
                                             ignore
                                               (Ojs.call x186 "push"
                                                  [|(Ojs.fun_to_js 2
                                                       (fun (x188 : Ojs.t) ->
                                                          fun (x190 : Ojs.t)
                                                            ->
                                                            x187
                                                              ~error:(
                                                              or_null_of_js
                                                                Error.t_of_js
                                                                x188)
                                                              ~bytes:(
                                                              Ojs.int_of_js
                                                                x190)))|])
                                         | None -> ());
                                        x186))|])
        let (send'''' :
          t ->
            msg:Uint8Array.t or_string ->
              offset:int ->
                length:int ->
                  ?port:int ->
                    ?callback:(error:Error.t or_null -> bytes:int -> unit) ->
                      unit -> unit)
          =
          fun (x208 : t) ->
            fun ~msg:(x196 : Uint8Array.t or_string) ->
              fun ~offset:(x197 : int) ->
                fun ~length:(x198 : int) ->
                  fun ?port:(x199 : int option) ->
                    fun
                      ?callback:(x200 :
                                  (error:Error.t or_null -> bytes:int -> unit)
                                    option)
                      ->
                      fun () ->
                        ignore
                          (let x209 = t_to_js x208 in
                           Ojs.call (Ojs.get_prop_ascii x209 "send") "apply"
                             [|x209;((let x201 =
                                        Ojs.new_obj
                                          (Ojs.get_prop_ascii Ojs.global
                                             "Array") [||] in
                                      ignore
                                        (Ojs.call x201 "push"
                                           [|(or_string_to_js
                                                Uint8Array.t_to_js x196)|]);
                                      ignore
                                        (Ojs.call x201 "push"
                                           [|(Ojs.int_to_js x197)|]);
                                      ignore
                                        (Ojs.call x201 "push"
                                           [|(Ojs.int_to_js x198)|]);
                                      (match x199 with
                                       | Some x206 ->
                                           ignore
                                             (Ojs.call x201 "push"
                                                [|(Ojs.int_to_js x206)|])
                                       | None -> ());
                                      (match x200 with
                                       | Some x202 ->
                                           ignore
                                             (Ojs.call x201 "push"
                                                [|(Ojs.fun_to_js 2
                                                     (fun (x203 : Ojs.t) ->
                                                        fun (x205 : Ojs.t) ->
                                                          x202
                                                            ~error:(or_null_of_js
                                                                    Error.t_of_js
                                                                    x203)
                                                            ~bytes:(Ojs.int_of_js
                                                                    x205)))|])
                                       | None -> ());
                                      x201))|])
        let (send''''' :
          t ->
            msg:Uint8Array.t or_string ->
              offset:int ->
                length:int ->
                  ?callback:(error:Error.t or_null -> bytes:int -> unit) ->
                    unit -> unit)
          =
          fun (x220 : t) ->
            fun ~msg:(x210 : Uint8Array.t or_string) ->
              fun ~offset:(x211 : int) ->
                fun ~length:(x212 : int) ->
                  fun
                    ?callback:(x213 :
                                (error:Error.t or_null -> bytes:int -> unit)
                                  option)
                    ->
                    fun () ->
                      ignore
                        (let x221 = t_to_js x220 in
                         Ojs.call (Ojs.get_prop_ascii x221 "send") "apply"
                           [|x221;((let x214 =
                                      Ojs.new_obj
                                        (Ojs.get_prop_ascii Ojs.global
                                           "Array") [||] in
                                    ignore
                                      (Ojs.call x214 "push"
                                         [|(or_string_to_js
                                              Uint8Array.t_to_js x210)|]);
                                    ignore
                                      (Ojs.call x214 "push"
                                         [|(Ojs.int_to_js x211)|]);
                                    ignore
                                      (Ojs.call x214 "push"
                                         [|(Ojs.int_to_js x212)|]);
                                    (match x213 with
                                     | Some x215 ->
                                         ignore
                                           (Ojs.call x214 "push"
                                              [|(Ojs.fun_to_js 2
                                                   (fun (x216 : Ojs.t) ->
                                                      fun (x218 : Ojs.t) ->
                                                        x215
                                                          ~error:(or_null_of_js
                                                                    Error.t_of_js
                                                                    x216)
                                                          ~bytes:(Ojs.int_of_js
                                                                    x218)))|])
                                     | None -> ());
                                    x214))|])
        let (set_broadcast : t -> flag:bool -> unit) =
          fun (x223 : t) ->
            fun ~flag:(x222 : bool) ->
              ignore
                (Ojs.call (t_to_js x223) "setBroadcast"
                   [|(Ojs.bool_to_js x222)|])
        let (set_multicast_interface :
          t -> multicast_interface:string -> unit) =
          fun (x225 : t) ->
            fun ~multicast_interface:(x224 : string) ->
              ignore
                (Ojs.call (t_to_js x225) "setMulticastInterface"
                   [|(Ojs.string_to_js x224)|])
        let (set_multicast_loopback : t -> flag:bool -> unit) =
          fun (x227 : t) ->
            fun ~flag:(x226 : bool) ->
              ignore
                (Ojs.call (t_to_js x227) "setMulticastLoopback"
                   [|(Ojs.bool_to_js x226)|])
        let (set_multicast_ttl : t -> ttl:int -> unit) =
          fun (x229 : t) ->
            fun ~ttl:(x228 : int) ->
              ignore
                (Ojs.call (t_to_js x229) "setMulticastTTL"
                   [|(Ojs.int_to_js x228)|])
        let (set_recv_buffer_size : t -> size:int -> unit) =
          fun (x231 : t) ->
            fun ~size:(x230 : int) ->
              ignore
                (Ojs.call (t_to_js x231) "setRecvBufferSize"
                   [|(Ojs.int_to_js x230)|])
        let (set_send_buffer_size : t -> size:int -> unit) =
          fun (x233 : t) ->
            fun ~size:(x232 : int) ->
              ignore
                (Ojs.call (t_to_js x233) "setSendBufferSize"
                   [|(Ojs.int_to_js x232)|])
        let (set_ttl : t -> ttl:int -> unit) =
          fun (x235 : t) ->
            fun ~ttl:(x234 : int) ->
              ignore
                (Ojs.call (t_to_js x235) "setTTL" [|(Ojs.int_to_js x234)|])
        let (unref : t -> t) =
          fun (x236 : t) -> t_of_js (Ojs.call (t_to_js x236) "unref" [||])
        let (add_source_specific_membership :
          t ->
            source_address:string ->
              group_address:string ->
                ?multicast_interface:string -> unit -> unit)
          =
          fun (x242 : t) ->
            fun ~source_address:(x237 : string) ->
              fun ~group_address:(x238 : string) ->
                fun ?multicast_interface:(x239 : string option) ->
                  fun () ->
                    ignore
                      (let x243 = t_to_js x242 in
                       Ojs.call
                         (Ojs.get_prop_ascii x243
                            "addSourceSpecificMembership") "apply"
                         [|x243;((let x240 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x240 "push"
                                       [|(Ojs.string_to_js x237)|]);
                                  ignore
                                    (Ojs.call x240 "push"
                                       [|(Ojs.string_to_js x238)|]);
                                  (match x239 with
                                   | Some x241 ->
                                       ignore
                                         (Ojs.call x240 "push"
                                            [|(Ojs.string_to_js x241)|])
                                   | None -> ());
                                  x240))|])
        let (drop_source_specific_membership :
          t ->
            source_address:string ->
              group_address:string ->
                ?multicast_interface:string -> unit -> unit)
          =
          fun (x249 : t) ->
            fun ~source_address:(x244 : string) ->
              fun ~group_address:(x245 : string) ->
                fun ?multicast_interface:(x246 : string option) ->
                  fun () ->
                    ignore
                      (let x250 = t_to_js x249 in
                       Ojs.call
                         (Ojs.get_prop_ascii x250
                            "dropSourceSpecificMembership") "apply"
                         [|x250;((let x247 =
                                    Ojs.new_obj
                                      (Ojs.get_prop_ascii Ojs.global "Array")
                                      [||] in
                                  ignore
                                    (Ojs.call x247 "push"
                                       [|(Ojs.string_to_js x244)|]);
                                  ignore
                                    (Ojs.call x247 "push"
                                       [|(Ojs.string_to_js x245)|]);
                                  (match x246 with
                                   | Some x248 ->
                                       ignore
                                         (Ojs.call x247 "push"
                                            [|(Ojs.string_to_js x248)|])
                                   | None -> ());
                                  x247))|])
        let (add_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x255 : t) ->
            fun ~event:(x251 : string) ->
              fun ~listener:(x252 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x255) "addListener"
                     [|(Ojs.string_to_js x251);(Ojs.fun_to_js_args
                                                  (fun (x253 : _) ->
                                                     x252
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x253 0)))|])
        let (add_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x258 : t) ->
            fun ~event:(x256 : [ `close ]) ->
              fun ~listener:(x257 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x258) "addListener"
                     [|((match x256 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x257 ()))|])
        let (add_listener'' :
          t -> event:[ `connect ] -> listener:(unit -> unit) -> t) =
          fun (x261 : t) ->
            fun ~event:(x259 : [ `connect ]) ->
              fun ~listener:(x260 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x261) "addListener"
                     [|((match x259 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x260 ()))|])
        let (add_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x265 : t) ->
            fun ~event:(x262 : [ `error ]) ->
              fun ~listener:(x263 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x265) "addListener"
                     [|((match x262 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x264 : Ojs.t) ->
                            x263 ~err:(Error.t_of_js x264)))|])
        let (add_listener'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x268 : t) ->
            fun ~event:(x266 : [ `listening ]) ->
              fun ~listener:(x267 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x268) "addListener"
                     [|((match x266 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x267 ()))|])
        let (add_listener''''' :
          t ->
            event:[ `message ] ->
              listener:(msg:Buffer.t -> rinfo:RemoteInfo.t -> unit) -> t)
          =
          fun (x273 : t) ->
            fun ~event:(x269 : [ `message ]) ->
              fun
                ~listener:(x270 : msg:Buffer.t -> rinfo:RemoteInfo.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x273) "addListener"
                     [|((match x269 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x271 : Ojs.t) ->
                            fun (x272 : Ojs.t) ->
                              x270 ~msg:(Buffer.t_of_js x271)
                                ~rinfo:(RemoteInfo.t_of_js x272)))|])
        let (emit : t -> event:symbol or_string -> args:any list -> bool) =
          fun (x279 : t) ->
            fun ~event:(x274 : symbol or_string) ->
              fun ~args:(x275 : any list) ->
                Ojs.bool_of_js
                  (let x280 = t_to_js x279 in
                   Ojs.call (Ojs.get_prop_ascii x280 "emit") "apply"
                     [|x280;((let x276 =
                                Ojs.new_obj
                                  (Ojs.get_prop_ascii Ojs.global "Array")
                                  [||] in
                              ignore
                                (Ojs.call x276 "push"
                                   [|(or_string_to_js symbol_to_js x274)|]);
                              List.iter
                                (fun (x277 : any) ->
                                   ignore
                                     (Ojs.call x276 "push"
                                        [|(any_to_js x277)|])) x275;
                              x276))|])
        let (emit' : t -> event:[ `close ] -> bool) =
          fun (x282 : t) ->
            fun ~event:(x281 : [ `close ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x282) "emit"
                   [|((match x281 with | `close -> Ojs.string_to_js "close"))|])
        let (emit'' : t -> event:[ `connect ] -> bool) =
          fun (x284 : t) ->
            fun ~event:(x283 : [ `connect ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x284) "emit"
                   [|((match x283 with
                       | `connect -> Ojs.string_to_js "connect"))|])
        let (emit''' : t -> event:[ `error ] -> err:Error.t -> bool) =
          fun (x287 : t) ->
            fun ~event:(x285 : [ `error ]) ->
              fun ~err:(x286 : Error.t) ->
                Ojs.bool_of_js
                  (Ojs.call (t_to_js x287) "emit"
                     [|((match x285 with | `error -> Ojs.string_to_js "error"));(
                       Error.t_to_js x286)|])
        let (emit'''' : t -> event:[ `listening ] -> bool) =
          fun (x289 : t) ->
            fun ~event:(x288 : [ `listening ]) ->
              Ojs.bool_of_js
                (Ojs.call (t_to_js x289) "emit"
                   [|((match x288 with
                       | `listening -> Ojs.string_to_js "listening"))|])
        let (emit''''' :
          t ->
            event:[ `message ] -> msg:Buffer.t -> rinfo:RemoteInfo.t -> bool)
          =
          fun (x293 : t) ->
            fun ~event:(x290 : [ `message ]) ->
              fun ~msg:(x291 : Buffer.t) ->
                fun ~rinfo:(x292 : RemoteInfo.t) ->
                  Ojs.bool_of_js
                    (Ojs.call (t_to_js x293) "emit"
                       [|((match x290 with
                           | `message -> Ojs.string_to_js "message"));(
                         Buffer.t_to_js x291);(RemoteInfo.t_to_js x292)|])
        let (on : t -> event:string -> listener:(args:any list -> unit) -> t)
          =
          fun (x298 : t) ->
            fun ~event:(x294 : string) ->
              fun ~listener:(x295 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x298) "on"
                     [|(Ojs.string_to_js x294);(Ojs.fun_to_js_args
                                                  (fun (x296 : _) ->
                                                     x295
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x296 0)))|])
        let (on' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x301 : t) ->
            fun ~event:(x299 : [ `close ]) ->
              fun ~listener:(x300 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x301) "on"
                     [|((match x299 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x300 ()))|])
        let (on'' : t -> event:[ `connect ] -> listener:(unit -> unit) -> t)
          =
          fun (x304 : t) ->
            fun ~event:(x302 : [ `connect ]) ->
              fun ~listener:(x303 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x304) "on"
                     [|((match x302 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x303 ()))|])
        let (on''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x308 : t) ->
            fun ~event:(x305 : [ `error ]) ->
              fun ~listener:(x306 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x308) "on"
                     [|((match x305 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x307 : Ojs.t) ->
                            x306 ~err:(Error.t_of_js x307)))|])
        let (on'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x311 : t) ->
            fun ~event:(x309 : [ `listening ]) ->
              fun ~listener:(x310 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x311) "on"
                     [|((match x309 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x310 ()))|])
        let (on''''' :
          t ->
            event:[ `message ] ->
              listener:(msg:Buffer.t -> rinfo:RemoteInfo.t -> unit) -> t)
          =
          fun (x316 : t) ->
            fun ~event:(x312 : [ `message ]) ->
              fun
                ~listener:(x313 : msg:Buffer.t -> rinfo:RemoteInfo.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x316) "on"
                     [|((match x312 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x314 : Ojs.t) ->
                            fun (x315 : Ojs.t) ->
                              x313 ~msg:(Buffer.t_of_js x314)
                                ~rinfo:(RemoteInfo.t_of_js x315)))|])
        let (once :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x321 : t) ->
            fun ~event:(x317 : string) ->
              fun ~listener:(x318 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x321) "once"
                     [|(Ojs.string_to_js x317);(Ojs.fun_to_js_args
                                                  (fun (x319 : _) ->
                                                     x318
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x319 0)))|])
        let (once' : t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x324 : t) ->
            fun ~event:(x322 : [ `close ]) ->
              fun ~listener:(x323 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x324) "once"
                     [|((match x322 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x323 ()))|])
        let (once'' :
          t -> event:[ `connect ] -> listener:(unit -> unit) -> t) =
          fun (x327 : t) ->
            fun ~event:(x325 : [ `connect ]) ->
              fun ~listener:(x326 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x327) "once"
                     [|((match x325 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x326 ()))|])
        let (once''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x331 : t) ->
            fun ~event:(x328 : [ `error ]) ->
              fun ~listener:(x329 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x331) "once"
                     [|((match x328 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x330 : Ojs.t) ->
                            x329 ~err:(Error.t_of_js x330)))|])
        let (once'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x334 : t) ->
            fun ~event:(x332 : [ `listening ]) ->
              fun ~listener:(x333 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x334) "once"
                     [|((match x332 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x333 ()))|])
        let (once''''' :
          t ->
            event:[ `message ] ->
              listener:(msg:Buffer.t -> rinfo:RemoteInfo.t -> unit) -> t)
          =
          fun (x339 : t) ->
            fun ~event:(x335 : [ `message ]) ->
              fun
                ~listener:(x336 : msg:Buffer.t -> rinfo:RemoteInfo.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x339) "once"
                     [|((match x335 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x337 : Ojs.t) ->
                            fun (x338 : Ojs.t) ->
                              x336 ~msg:(Buffer.t_of_js x337)
                                ~rinfo:(RemoteInfo.t_of_js x338)))|])
        let (prepend_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x344 : t) ->
            fun ~event:(x340 : string) ->
              fun ~listener:(x341 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x344) "prependListener"
                     [|(Ojs.string_to_js x340);(Ojs.fun_to_js_args
                                                  (fun (x342 : _) ->
                                                     x341
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x342 0)))|])
        let (prepend_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x347 : t) ->
            fun ~event:(x345 : [ `close ]) ->
              fun ~listener:(x346 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x347) "prependListener"
                     [|((match x345 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x346 ()))|])
        let (prepend_listener'' :
          t -> event:[ `connect ] -> listener:(unit -> unit) -> t) =
          fun (x350 : t) ->
            fun ~event:(x348 : [ `connect ]) ->
              fun ~listener:(x349 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x350) "prependListener"
                     [|((match x348 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x349 ()))|])
        let (prepend_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x354 : t) ->
            fun ~event:(x351 : [ `error ]) ->
              fun ~listener:(x352 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x354) "prependListener"
                     [|((match x351 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x353 : Ojs.t) ->
                            x352 ~err:(Error.t_of_js x353)))|])
        let (prepend_listener'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x357 : t) ->
            fun ~event:(x355 : [ `listening ]) ->
              fun ~listener:(x356 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x357) "prependListener"
                     [|((match x355 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x356 ()))|])
        let (prepend_listener''''' :
          t ->
            event:[ `message ] ->
              listener:(msg:Buffer.t -> rinfo:RemoteInfo.t -> unit) -> t)
          =
          fun (x362 : t) ->
            fun ~event:(x358 : [ `message ]) ->
              fun
                ~listener:(x359 : msg:Buffer.t -> rinfo:RemoteInfo.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x362) "prependListener"
                     [|((match x358 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x360 : Ojs.t) ->
                            fun (x361 : Ojs.t) ->
                              x359 ~msg:(Buffer.t_of_js x360)
                                ~rinfo:(RemoteInfo.t_of_js x361)))|])
        let (prepend_once_listener :
          t -> event:string -> listener:(args:any list -> unit) -> t) =
          fun (x367 : t) ->
            fun ~event:(x363 : string) ->
              fun ~listener:(x364 : args:any list -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x367) "prependOnceListener"
                     [|(Ojs.string_to_js x363);(Ojs.fun_to_js_args
                                                  (fun (x365 : _) ->
                                                     x364
                                                       ~args:(Ojs.list_of_js_from
                                                                any_of_js
                                                                x365 0)))|])
        let (prepend_once_listener' :
          t -> event:[ `close ] -> listener:(unit -> unit) -> t) =
          fun (x370 : t) ->
            fun ~event:(x368 : [ `close ]) ->
              fun ~listener:(x369 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x370) "prependOnceListener"
                     [|((match x368 with | `close -> Ojs.string_to_js "close"));(
                       Ojs.fun_to_js 1 (fun _ -> x369 ()))|])
        let (prepend_once_listener'' :
          t -> event:[ `connect ] -> listener:(unit -> unit) -> t) =
          fun (x373 : t) ->
            fun ~event:(x371 : [ `connect ]) ->
              fun ~listener:(x372 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x373) "prependOnceListener"
                     [|((match x371 with
                         | `connect -> Ojs.string_to_js "connect"));(
                       Ojs.fun_to_js 1 (fun _ -> x372 ()))|])
        let (prepend_once_listener''' :
          t -> event:[ `error ] -> listener:(err:Error.t -> unit) -> t) =
          fun (x377 : t) ->
            fun ~event:(x374 : [ `error ]) ->
              fun ~listener:(x375 : err:Error.t -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x377) "prependOnceListener"
                     [|((match x374 with | `error -> Ojs.string_to_js "error"));(
                       Ojs.fun_to_js 1
                         (fun (x376 : Ojs.t) ->
                            x375 ~err:(Error.t_of_js x376)))|])
        let (prepend_once_listener'''' :
          t -> event:[ `listening ] -> listener:(unit -> unit) -> t) =
          fun (x380 : t) ->
            fun ~event:(x378 : [ `listening ]) ->
              fun ~listener:(x379 : unit -> unit) ->
                t_of_js
                  (Ojs.call (t_to_js x380) "prependOnceListener"
                     [|((match x378 with
                         | `listening -> Ojs.string_to_js "listening"));(
                       Ojs.fun_to_js 1 (fun _ -> x379 ()))|])
        let (prepend_once_listener''''' :
          t ->
            event:[ `message ] ->
              listener:(msg:Buffer.t -> rinfo:RemoteInfo.t -> unit) -> t)
          =
          fun (x385 : t) ->
            fun ~event:(x381 : [ `message ]) ->
              fun
                ~listener:(x382 : msg:Buffer.t -> rinfo:RemoteInfo.t -> unit)
                ->
                t_of_js
                  (Ojs.call (t_to_js x385) "prependOnceListener"
                     [|((match x381 with
                         | `message -> Ojs.string_to_js "message"));(
                       Ojs.fun_to_js 2
                         (fun (x383 : Ojs.t) ->
                            fun (x384 : Ojs.t) ->
                              x382 ~msg:(Buffer.t_of_js x383)
                                ~rinfo:(RemoteInfo.t_of_js x384)))|])
        let (cast : t -> Node_events.Events.EventEmitter.t) =
          fun (x386 : t) ->
            Node_events.Events.EventEmitter.t_of_js (t_to_js x386)
      end
  end
